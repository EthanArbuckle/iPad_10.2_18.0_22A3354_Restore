ValueMetadata *type metadata accessor for MachServiceName()
{
  return &type metadata for MachServiceName;
}

uint64_t Feature.FindMy.feature.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_23B4FAA84 + 4 * aN[*v0]))("AirPods_Pairing_With_FindMyBluetooth", 36);
}

const char *sub_23B4FAA84()
{
  return "AlphaWasp";
}

const char *sub_23B4FAB7C()
{
  return "SPPlaySound";
}

const char *sub_23B4FAB90()
{
  return "SPPlaySoundAll";
}

const char *sub_23B4FAC08()
{
  return "UT_Precision_Finding";
}

const char *sub_23B4FAC1C()
{
  return "Secure_Locations_Migration";
}

const char *sub_23B4FAC30()
{
  return "LineUp";
}

uint64_t sub_23B4FAC44()
{
  return Feature.FindMy.feature.getter();
}

const char *sub_23B4FAC5C()
{
  return "FindMy";
}

void destroy for DirectorySequence(id *a1)
{

}

ValueMetadata *type metadata accessor for DirectorySequence()
{
  return &type metadata for DirectorySequence;
}

_BYTE *sub_23B4FAC88(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

uint64_t sub_23B4FAC98()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

ValueMetadata *type metadata accessor for Feature.FindMy()
{
  return &type metadata for Feature.FindMy;
}

uint64_t destroy for GenericError()
{
  return swift_bridgeObjectRelease();
}

uint64_t getEnumTagSinglePayload for XPCServiceDescription(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

FindMyBase::MachServiceName __swiftcall MachServiceName.init(_:)(FindMyBase::MachServiceName result)
{
  FindMyBase::MachServiceName *v1;

  *v1 = result;
  return result;
}

uint64_t type metadata accessor for FM.XPCSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FM.XPCSession);
}

uint64_t storeEnumTagSinglePayload for XPCServiceDescription(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DirectorySequence(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t sub_23B4FAE0C(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_23B56AD98();
}

uint64_t sub_23B4FAE3C(uint64_t a1)
{
  uint64_t v1;

  return sub_23B4FF9D4(a1, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void (**)(void))(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 16));
}

uint64_t sub_23B4FAE50()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t XPCServiceDescription.init(name:exportedObject:exportedInterface:remoteObjectInterface:options:requiredEntitlement:shouldAccept:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v15;
  uint64_t result;

  v15 = a1[1];
  *a9 = *a1;
  a9[1] = v15;
  a9[2] = a5;
  result = sub_23B4FAED4(a6, (uint64_t)(a9 + 6), &qword_2542FAD60);
  a9[3] = a2;
  a9[4] = a3;
  a9[5] = a4;
  a9[11] = a7;
  a9[12] = a8;
  return result;
}

uint64_t sub_23B4FAED4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t dispatch thunk of XPCAcceptedClient.session.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t storeEnumTagSinglePayload for DirectorySequence(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MachServiceName(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_23B4FAFC4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v2[3] = a1;
  v2[4] = v1;
  v3 = (_QWORD *)swift_task_alloc();
  v2[5] = v3;
  *v3 = v2;
  v3[1] = sub_23B4FB0C4;
  v3[2] = v1;
  return swift_task_switch();
}

uint64_t XPCClient.proxy(errorHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t);

  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v10 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a5 + 16) + *(_QWORD *)(a5 + 16));
  v8 = (_QWORD *)swift_task_alloc();
  v5[5] = v8;
  *v8 = v5;
  v8[1] = sub_23B4FBA50;
  return v10(a4, a5);
}

uint64_t sub_23B4FB0C4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t String.utf8Data.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;

  v0 = sub_23B56A2E8();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23B56A2C4();
  v4 = sub_23B56A294();
  v6 = v5;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v6 >> 60 != 15)
    return v4;
  v8 = 0;
  v9 = 0xE000000000000000;
  sub_23B56AA68();
  swift_bridgeObjectRelease();
  v8 = 0xD00000000000001ALL;
  v9 = 0x800000023B56B8F0;
  sub_23B56A3A8();
  sub_23B56A3A8();
  result = sub_23B56AC24();
  __break(1u);
  return result;
}

void **initializeBufferWithCopyOfBuffer for DirectorySequence(void **a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  *a1 = *a2;
  v4 = v3;
  return a1;
}

uint64_t sub_23B4FB2D8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t dispatch thunk of FM.XPCSession.resume()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 184) + *(_QWORD *)(*(_QWORD *)v0 + 184));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_23B4FACE0;
  return v4();
}

uint64_t sub_23B4FB394()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t (*v18)();
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  if (qword_2542FA8E8 != -1)
    swift_once();
  v1 = (_QWORD *)(v0 + 112);
  v2 = sub_23B56A060();
  *(_QWORD *)(v0 + 152) = __swift_project_value_buffer(v2, (uint64_t)qword_2542FC408);
  swift_retain_n();
  v3 = sub_23B56A048();
  v4 = sub_23B56A84C();
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD **)(v0 + 112);
  if (v5)
  {
    v7 = swift_slowAlloc();
    v27 = swift_slowAlloc();
    *(_DWORD *)v7 = 136315394;
    v28 = v27;
    v29 = 91;
    v30 = 0xE100000000000000;
    *(_QWORD *)(v0 + 88) = *v6;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AA0);
    sub_23B56A300();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    swift_bridgeObjectRetain();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    *(_QWORD *)(v0 + 96) = sub_23B5034E4(v29, v30, &v28);
    sub_23B56A918();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    *(_QWORD *)(v0 + 104) = sub_23B5034E4(0x6575516873756C66, 0xEC00000029286575, &v28);
    sub_23B56A918();
    _os_log_impl(&dword_23B4F9000, v3, v4, "%s %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v27, -1, -1);
    MEMORY[0x23B867948](v7, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v8 = sub_23B51F928();
  v9 = (_QWORD *)*v1;
  if ((v8 & 1) != 0)
  {
    swift_retain_n();
    v10 = sub_23B56A048();
    v11 = sub_23B56A840();
    v12 = os_log_type_enabled(v10, v11);
    v13 = (_QWORD *)*v1;
    if (v12)
    {
      v14 = swift_slowAlloc();
      v15 = swift_slowAlloc();
      *(_DWORD *)v14 = 136315394;
      v28 = v15;
      v29 = 91;
      v30 = 0xE100000000000000;
      *(_QWORD *)(v0 + 64) = *v13;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AA0);
      sub_23B56A300();
      sub_23B56A3A8();
      swift_bridgeObjectRelease();
      sub_23B56A3A8();
      swift_bridgeObjectRetain();
      sub_23B56A3A8();
      swift_bridgeObjectRelease();
      sub_23B56A3A8();
      *(_QWORD *)(v0 + 72) = sub_23B5034E4(v29, v30, &v28);
      sub_23B56A918();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2080;
      *(_QWORD *)(v0 + 80) = sub_23B5034E4(0x6575516873756C66, 0xEC00000029286575, &v28);
      sub_23B56A918();
      _os_log_impl(&dword_23B4F9000, v10, v11, "%s: %s Will deadlock when called from a WorkItemQueue context!", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x23B867948](v15, -1, -1);
      MEMORY[0x23B867948](v14, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v19 = *(_QWORD *)(*(_QWORD *)(v0 + 112) + OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_currentWorkItem);
    *(_QWORD *)(v0 + 200) = v19;
    if (v19)
    {
      swift_retain();
      v17 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 208) = v17;
      v18 = sub_23B51AA68;
      goto LABEL_14;
    }
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *((_BYTE *)v9 + OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_flushing) = 1;
    v16 = *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_currentWorkItem);
    *(_QWORD *)(v0 + 160) = v16;
    if (v16)
    {
      swift_retain();
      v17 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 168) = v17;
      v18 = sub_23B51A690;
LABEL_14:
      *v17 = v0;
      v17[1] = v18;
      return sub_23B549D00();
    }
    v22 = *(_QWORD *)(v0 + 136);
    v21 = *(_QWORD *)(v0 + 144);
    v23 = *(_QWORD *)(v0 + 120);
    v24 = *(_QWORD *)(v0 + 128);
    sub_23B569F94();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v22, v21, v23);
    type metadata accessor for WorkItemQueue.WorkItem();
    swift_allocObject();
    v25 = sub_23B54BE80(2, v22, (uint64_t)&unk_256A2C9B0, 0, 0, 0);
    *(_QWORD *)(v0 + 176) = v25;
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v21, v23);
    sub_23B519108(v25);
    v26 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 184) = v26;
    *v26 = v0;
    v26[1] = sub_23B51A7D0;
    return sub_23B54A0F4();
  }
}

void sub_23B4FB9D4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[6];

  v1 = (_QWORD *)*v0;
  v2 = v0[2];
  v3 = v1[11];
  v4[2] = v1[10];
  v4[3] = v3;
  v4[4] = v1[12];
  sub_23B56A5E8();
  sub_23B56A900();
  sub_23B4FFC54((void (*)(uint64_t))sub_23B5063F8, (uint64_t)v4, v2);
}

uint64_t sub_23B4FBA50(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B4FBAAC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[5];
  v9 = v2[6];
  v10 = v2[7];
  v11 = v2[8];
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v12;
  *v12 = v3;
  v12[1] = sub_23B4FAC98;
  return sub_23B4FE69C(a1, a2, v8, v9, v10, v11, v6, v7);
}

void sub_23B4FBB50()
{
  unint64_t v0;
  unint64_t v1;

  sub_23B569FA0();
  if (v0 <= 0x3F)
  {
    sub_23B505FE0();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t sub_23B4FBC3C()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  char *v3;
  int v4;
  os_activity_scope_state_s *v5;
  _QWORD *v6;
  int *v8;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(int **)(v0 + 40);
  v3 = *(char **)(v0 + 24);
  v4 = *(unsigned __int8 *)(v0 + 88);
  swift_allocObject();
  v5 = sub_23B5019FC(v3, v1, v4);
  *(_QWORD *)(v0 + 64) = v5;
  v8 = (int *)((char *)v2 + *v2);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v6;
  *v6 = v0;
  v6[1] = sub_23B506540;
  return ((uint64_t (*)(_QWORD, os_activity_scope_state_s *))v8)(*(_QWORD *)(v0 + 16), v5);
}

uint64_t sub_23B4FBCE4(_QWORD *a1)
{
  uint64_t v2;

  if (*a1 != -1)
    swift_once();
  sub_23B56AF9C();
  return v2;
}

uint64_t OnceCheckedContinuation.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_23B4FBD5C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B4FBDC0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23B569F40();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t dispatch thunk of XPCAcceptedClient.init(session:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 32) + *(_QWORD *)(a3 + 32));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23B4FC054;
  return v9(a1, a2, a3);
}

uint64_t sub_23B4FBEC4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 168) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B4FBF24()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = v0;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_23B4FC528;
  v2[2] = v0;
  return swift_task_switch();
}

uint64_t sub_23B4FBF84()
{
  uint64_t v0;

  v0 = sub_23B56A060();
  __swift_allocate_value_buffer(v0, qword_2542FC3E8);
  __swift_project_value_buffer(v0, (uint64_t)qword_2542FC3E8);
  return sub_23B56A054();
}

uint64_t sub_23B4FC004(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_23B4FC054(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_23B4FC0A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_23B56A5E8();
  v5 = sub_23B56A900();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, 1, 1, v4);
}

uint64_t sub_23B4FC120()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_23B56A060();
  __swift_allocate_value_buffer(v0, qword_2542FC408);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_2542FC408);
  if (qword_2542FA8C0 != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)qword_2542FC3E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

_QWORD *sub_23B4FC1B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  int64_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F99C8);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 31;
  v4[2] = a1;
  v4[3] = v6 & 0xFFFFFFFFFFFFFFFELL;
  return v4;
}

char *sub_23B4FC220(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  int64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542F99C8);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 31;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v13 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 32])
          memmove(v13, a4 + 32, 2 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_23B505E0C(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t dispatch thunk of FM.XPCSession.connection.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 144) + *(_QWORD *)(*(_QWORD *)v0 + 144));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_23B4FC004;
  return v4();
}

void sub_23B4FC380()
{
  unint64_t v0;
  unint64_t v1;

  sub_23B569FA0();
  if (v0 <= 0x3F)
  {
    sub_23B51FE5C();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

void sub_23B4FC440()
{
  uint64_t *v0;
  _QWORD *v1;

  if (v0[6])
  {
    v1 = (_QWORD *)swift_task_alloc();
    v0[7] = (uint64_t)v1;
    *v1 = v0;
    v1[1] = sub_23B4FC984;
    sub_23B4FCD7C(v0[2], v0[3], v0[4]);
  }
  else
  {
    __break(1u);
  }
}

uint64_t Array.asyncFlatMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;

  v6[8] = a5;
  v6[9] = a6;
  v6[6] = a3;
  v6[7] = a4;
  v6[4] = a1;
  v6[5] = a2;
  v6[10] = swift_task_alloc();
  v8 = *(_QWORD *)(a4 - 8);
  v6[11] = v8;
  v6[12] = *(_QWORD *)(v8 + 64);
  v6[13] = swift_task_alloc();
  v6[14] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B4FC528(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 32) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B4FC584(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 152) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_BYTE *)(v4 + 160) = a1 & 1;
  return swift_task_switch();
}

_QWORD *sub_23B4FC5FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9CD0);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_23B4FC660()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t dispatch thunk of FM.XPCSession.underlyingConnectionIdentity.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 168) + *(_QWORD *)(*(_QWORD *)v1 + 168));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23B4FACE0;
  return v6(a1);
}

uint64_t sub_23B4FC73C()
{
  return swift_initClassMetadata2();
}

_QWORD *sub_23B4FC788(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _BYTE v7[8];

  v2 = a2;
  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_5;
  v4 = sub_23B56A408();
  if (!v4)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    v5 = sub_23B4FC1B0(v4, 0);
    swift_bridgeObjectRetain();
    v2 = sub_23B506038((uint64_t)v7, (uint64_t)(v5 + 4), v4, a1, v2);
    swift_bridgeObjectRelease();
    if (v2 == v4)
      break;
    __break(1u);
LABEL_5:
    v4 = sub_23B56A3FC();
    if (!v4)
      return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v5;
}

uint64_t sub_23B4FC858@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *a1;
  *(_DWORD *)((char *)a1 + ((*(unsigned int *)(*a1 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 + *MEMORY[0x24BEE27A8]) - 8) + 16))(a2, v3);
}

uint64_t XPCAcceptedClient.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  FM.XPCSession.hash(into:)();
  return swift_release();
}

uint64_t FM.XPCSession.hash(into:)()
{
  sub_23B569FA0();
  sub_23B4FC93C();
  return sub_23B56A1F8();
}

unint64_t sub_23B4FC93C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2542FAA50;
  if (!qword_2542FAA50)
  {
    v1 = sub_23B569FA0();
    result = MEMORY[0x23B867894](MEMORY[0x24BDCEA88], v1);
    atomic_store(result, (unint64_t *)&qword_2542FAA50);
  }
  return result;
}

uint64_t sub_23B4FC984()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void OnceCheckedContinuation.resume<>()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  v0 = sub_23B56A5E8();
  v1 = sub_23B56A900();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v5 = (char *)&v9 - v4;
  v6 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v8 = (char *)&v9 - v7;
  sub_23B4FB9D4();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v5, 1, v0) == 1)
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    sub_23B53C728();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v5, v0);
    sub_23B56A5DC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v0);
  }
}

uint64_t sub_23B4FCB18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v4;
  v5 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v3;
  *(_OWORD *)(v4 + 32) = v5;
  *(_QWORD *)(v4 + 48) = v2;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v6;
  *v6 = v0;
  v6[1] = sub_23B4FC660;
  return sub_23B56ADC8();
}

uint64_t objectdestroyTm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroyTm_0()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_23B4FCC20(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x23B867894](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static Transaction.named<A>(_:with:)(char *a1, uint64_t a2, int a3, void (*a4)(void))
{
  swift_allocObject();
  sub_23B5019FC(a1, a2, a3);
  a4();
  return swift_release();
}

{
  swift_allocObject();
  sub_23B5019FC(a1, a2, a3);
  a4();
  return swift_release();
}

uint64_t sub_23B4FCCF4(_QWORD *a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v3 = *a2;
  v4 = (void *)sub_23B569ED4();
  v5 = objc_msgSend(v3, sel_stringFromDate_, v4);

  v6 = sub_23B56A288();
  return v6;
}

uint64_t sub_23B4FCD7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v4[14] = a3;
  v4[15] = v3;
  v4[12] = a1;
  v4[13] = a2;
  v4[16] = *(_QWORD *)(*(_QWORD *)v3 + 80);
  v5 = sub_23B56A900();
  v4[17] = v5;
  v4[18] = *(_QWORD *)(v5 - 8);
  v4[19] = swift_task_alloc();
  v6 = (_QWORD *)swift_task_alloc();
  v4[20] = v6;
  *v6 = v4;
  v6[1] = sub_23B4FBEC4;
  v6[2] = v3;
  return swift_task_switch();
}

uint64_t sub_23B4FCE14()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  _QWORD *v15;
  uint64_t (*v16)(_QWORD);

  if ((*(_BYTE *)(v0 + 160) & 1) != 0)
  {
    v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 136);
    v2 = *(_QWORD *)(v0 + 80);
    v3 = *(_QWORD *)(v0 + 64);
    v4 = *(_QWORD *)(v0 + 16);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
    v1(v4, v2, v3);
    v5 = 0;
LABEL_5:
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 56))(*(_QWORD *)(v0 + 16), v5, 1, *(_QWORD *)(v0 + 64));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
  v6 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 72);
  swift_getAssociatedConformanceWitness();
  sub_23B56A90C();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
    v5 = 1;
    goto LABEL_5;
  }
  v10 = *(_QWORD *)(v0 + 80);
  v11 = *(_QWORD *)(v0 + 88);
  v12 = *(_QWORD *)(v0 + 64);
  v13 = *(int **)(v0 + 24);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 72) + 32);
  *(_QWORD *)(v0 + 136) = v14;
  v14(v10, v11, v12);
  v16 = (uint64_t (*)(_QWORD))((char *)v13 + *v13);
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 144) = v15;
  *v15 = v0;
  v15[1] = sub_23B4FC584;
  return v16(*(_QWORD *)(v0 + 80));
}

uint64_t sub_23B4FCFB0()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 32);
  objc_msgSend(v1, sel_resume);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B4FCFF0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 96) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23B4FD064()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23B569FA0();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_23B4FD0F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v2;
  v3 = *(_OWORD *)(v0 + 40);
  v4 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 56);
  *(_QWORD *)(v2 + 32) = v1;
  *(_OWORD *)(v2 + 40) = v3;
  *(_OWORD *)(v2 + 56) = v4;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v5;
  *v5 = v0;
  v5[1] = sub_23B4FCFF0;
  return sub_23B56AC90();
}

_BYTE *sub_23B4FD194@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)sub_23B504650(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)sub_23B50D16C((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)sub_23B4FD208((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_23B4FD208(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_23B569C70();
  swift_allocObject();
  result = sub_23B569C34();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0)
    return v2 << 32;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_23B4FD288()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  int *v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;

  v1 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 120) = swift_getAssociatedTypeWitness();
  v2 = sub_23B56A150();
  *(_QWORD *)(v0 + 16) = v2;
  v3 = swift_bridgeObjectRetain();
  if (MEMORY[0x23B866880](v3, v1))
  {
    v4 = sub_23B56A564();
    sub_23B56A540();
    if ((v4 & 1) != 0)
    {
      (*(void (**)(_QWORD, unint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 16))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 48)+ ((*(unsigned __int8 *)(*(_QWORD *)(v0 + 88) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v0 + 88) + 80)), *(_QWORD *)(v0 + 56));
LABEL_4:
      *(_QWORD *)(v0 + 128) = 1;
      v5 = *(int **)(v0 + 32);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 32))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 56));
      v13 = (int *)((char *)v5 + *v5);
      v6 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 136) = v6;
      *v6 = v0;
      v6[1] = sub_23B560B24;
      return ((uint64_t (*)(_QWORD, _QWORD))v13)(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 104));
    }
    v8 = *(_QWORD *)(v0 + 96);
    result = sub_23B56AAA4();
    if (v8 == 8)
    {
      v9 = result;
      v10 = *(_QWORD *)(v0 + 112);
      v11 = *(_QWORD *)(v0 + 88);
      v12 = *(_QWORD *)(v0 + 56);
      *(_QWORD *)(v0 + 24) = v9;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v0 + 24, v12);
      swift_unknownObjectRelease();
      goto LABEL_4;
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
  }
  return result;
}

uint64_t sub_23B4FD43C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  int *v11;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t);

  v2 = v0[13];
  v1 = v0[14];
  v3 = v0[7];
  v4 = v0[5];
  v0[2] = sub_23B56A150();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v3, v4);
  sub_23B56A468();
  v5 = v0[12];
  v6 = v0[9];
  v7 = v0[8];
  swift_getAssociatedConformanceWitness();
  sub_23B56A90C();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v5, 1, v7) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(v0[16] + 8))(v0[17], v0[15]);
    v8 = v0[2];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v9 = (uint64_t (*)(uint64_t))v0[1];
    v10 = v8;
  }
  else
  {
    v11 = (int *)v0[3];
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[9] + 32))(v0[11], v0[12], v0[8]);
    v14 = (uint64_t (*)(uint64_t))((char *)v11 + *v11);
    v12 = (_QWORD *)swift_task_alloc();
    v0[18] = v12;
    *v12 = v0;
    v12[1] = sub_23B51380C;
    v10 = v0[11];
    v9 = v14;
  }
  return v9(v10);
}

uint64_t DirectorySequence.init(at:includingPropertiesForKeys:options:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = (void *)MEMORY[0x23B867378]();
  v5 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v6 = sub_23B56A810();

  objc_autoreleasePoolPop(v4);
  v7 = sub_23B569DA8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
  result = swift_bridgeObjectRelease();
  *a2 = v6;
  return result;
}

uint64_t sub_23B4FD678()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  (*(void (**)(_QWORD, _QWORD))(v0 + 120))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 64));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Sequence.asyncFilter(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[8] = AssociatedTypeWitness;
  v5[9] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[10] = swift_task_alloc();
  v5[11] = swift_task_alloc();
  sub_23B56A900();
  v5[12] = swift_task_alloc();
  v5[13] = *(_QWORD *)(a3 - 8);
  v5[14] = swift_task_alloc();
  v8 = swift_getAssociatedTypeWitness();
  v5[15] = v8;
  v5[16] = *(_QWORD *)(v8 - 8);
  v5[17] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t SynchronousCache.cachedValue<A>(key:computeBlock:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  uint64_t (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29[2];
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36[16];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v29[1] = a3;
  v30 = a2;
  v34 = a5;
  v8 = *(_QWORD *)(a4 - 8);
  v9 = MEMORY[0x24BDAC7A8](a1);
  v33 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v29 - v11;
  v13 = sub_23B56A900();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)v29 - v18;
  v20 = *(_QWORD *)(v5 + 16);
  v37 = a4;
  v38 = v5;
  v31 = a1;
  v32 = v5;
  v39 = a1;
  v29[0] = v20;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)((void (*)(void))sub_23B4FF8F4, (uint64_t)v36, v20);
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v19, v13);
  v35 = v8;
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v17, 1, a4);
  v22 = *(uint64_t (**)(char *, uint64_t))(v14 + 8);
  if (v21 == 1)
  {
    v23 = v22(v17, v13);
    v24 = (uint64_t)v33;
    v25 = v30(v23);
    MEMORY[0x24BDAC7A8](v25);
    v26 = v32;
    v29[-4] = a4;
    v29[-3] = v26;
    v29[-2] = v31;
    v29[-1] = v24;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)((void (*)(void))sub_23B5148B8, (uint64_t)&v29[-6], v29[0]);
    v22(v19, v13);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8))(v24, a4);
  }
  else
  {
    v22(v19, v13);
    v28 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    v28(v12, v17, a4);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v28)(v34, v12, a4);
  }
}

void OSAllocatedUnfairLock.callAsFunction<A>(_:)(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *v4;

  v4 = (os_unfair_lock_s *)(a3 + ((*(unsigned int *)(*(_QWORD *)a3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v4);
  a1();
  os_unfair_lock_unlock(v4);
}

uint64_t FM.XPCSession.__allocating_init(service:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  FM.XPCSession.init(service:)(a1);
  return v2;
}

uint64_t FM.XPCSession.init(service:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v12;

  v3 = sub_23B569FA0();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  *(_QWORD *)(v1 + qword_2542FA9F0) = 0;
  sub_23B569F94();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v1 + qword_2542FC420, v6, v3);
  v7 = v1 + qword_2542FC428;
  v8 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v7 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v7 + 80) = v8;
  *(_QWORD *)(v7 + 96) = *(_QWORD *)(a1 + 96);
  v9 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v7 = *(_OWORD *)a1;
  *(_OWORD *)(v7 + 16) = v9;
  v10 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v7 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v7 + 48) = v10;
  return v1;
}

uint64_t sub_23B4FDBC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  _QWORD *v10;
  uint64_t (*v11)(_QWORD);

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 16))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 40));
  sub_23B56A468();
  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  swift_getAssociatedConformanceWitness();
  sub_23B56A90C();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 56))(*(_QWORD *)(v0 + 16), 1, 1, *(_QWORD *)(v0 + 64));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 80);
    v6 = *(_QWORD *)(v0 + 88);
    v7 = *(_QWORD *)(v0 + 64);
    v8 = *(int **)(v0 + 24);
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 72) + 32);
    *(_QWORD *)(v0 + 136) = v9;
    v9(v5, v6, v7);
    v11 = (uint64_t (*)(_QWORD))((char *)v8 + *v8);
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 144) = v10;
    *v10 = v0;
    v10[1] = sub_23B4FC584;
    return v11(*(_QWORD *)(v0 + 80));
  }
}

char *initializeWithCopy for Keychain.Item(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;

  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  v7 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a1 + 3) = v7;
  v8 = *((_QWORD *)a2 + 5);
  v9 = a3[7];
  v10 = &a1[v9];
  v11 = &a2[v9];
  *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a1 + 5) = v8;
  v12 = sub_23B569F40();
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13(v10, v11, v12);
  v13(&a1[a3[8]], &a2[a3[8]], v12);
  v14 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  v15 = &a1[v14];
  v16 = (uint64_t *)&a2[v14];
  v17 = *(_QWORD *)&a2[v14 + 8];
  if (v17 >> 60 == 15)
  {
    *(_OWORD *)v15 = *(_OWORD *)v16;
  }
  else
  {
    v18 = *v16;
    sub_23B502434(*v16, v17);
    *(_QWORD *)v15 = v18;
    *((_QWORD *)v15 + 1) = v17;
  }
  return a1;
}

uint64_t sub_23B4FDE4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  sub_23B56ABA0();
  sub_23B56AB64();
  MEMORY[0x23B866E74](v5, v4);
  v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(_QWORD *)(v0 + 120) = v6;
  v6(v1, v2);
  v7 = swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v7;
  v8 = sub_23B4FCC20(&qword_2542F9BF0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6E98], MEMORY[0x24BEE6EA8]);
  *(_QWORD *)v7 = v0;
  *(_QWORD *)(v7 + 8) = sub_23B4FBD5C;
  v9 = *(_QWORD *)(v0 + 112);
  v10 = *(_QWORD *)(v0 + 88);
  v11 = *(_QWORD *)(v0 + 56);
  v12 = *(_QWORD *)(v0 + 16);
  v13 = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v7 + 64) = *(_QWORD *)(v0 + 96);
  *(_QWORD *)(v7 + 72) = v8;
  *(_QWORD *)(v7 + 56) = v11;
  *(_OWORD *)(v7 + 40) = v13;
  *(_QWORD *)(v7 + 24) = v10;
  *(_QWORD *)(v7 + 32) = v9;
  *(_QWORD *)(v7 + 16) = v12;
  return swift_task_switch();
}

uint64_t static Duration.description<A>(_:_:units:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v25 = a3;
  v3 = sub_23B56AF00();
  v32 = *(_QWORD *)(v3 - 8);
  v33 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23B56AEE8();
  v30 = *(_QWORD *)(v6 - 8);
  v31 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23B56AF30();
  v26 = *(_QWORD *)(v9 - 8);
  v27 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_23B56AF3C();
  v34 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v25 - v16;
  sub_23B56AB58();
  v28 = v36;
  v29 = v35;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9BA0);
  v18 = sub_23B56AF0C();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_23B56F770;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v19 + 16))(v21 + v20, v25, v18);
  sub_23B51559C(v21);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_23B56AF24();
  sub_23B56AEDC();
  sub_23B56AEF4();
  sub_23B569B74();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v5, v33);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v31);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v27);
  if (qword_2542F9AC8 != -1)
    swift_once();
  v22 = sub_23B569FC4();
  __swift_project_value_buffer(v22, (uint64_t)qword_2542F9B80);
  sub_23B56AF18();
  v23 = *(void (**)(char *, uint64_t))(v34 + 8);
  v23(v15, v12);
  sub_23B505A64();
  sub_23B56AF48();
  v23(v17, v12);
  return v35;
}

uint64_t Sequence.asyncFirst(where:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[8] = AssociatedTypeWitness;
  v6[9] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6[10] = swift_task_alloc();
  sub_23B56A900();
  v6[11] = swift_task_alloc();
  v6[12] = *(_QWORD *)(a4 - 8);
  v6[13] = swift_task_alloc();
  v9 = swift_getAssociatedTypeWitness();
  v6[14] = v9;
  v6[15] = *(_QWORD *)(v9 - 8);
  v6[16] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t withTimeout<A>(_:block:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v7 = sub_23B56AB94();
  v6[8] = v7;
  v6[9] = *(_QWORD *)(v7 - 8);
  v6[10] = swift_task_alloc();
  v6[11] = swift_task_alloc();
  v8 = sub_23B56ABAC();
  v6[12] = v8;
  v6[13] = *(_QWORD *)(v8 - 8);
  v6[14] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B4FE40C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 64);
  sub_23B56A6E4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v3);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v1, 1, v5);
  v8 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  if (v7 == 1)
  {
    v9 = *(_QWORD *)(v0 + 112);
    v10 = *(_QWORD *)(v0 + 88);
    v8(*(_QWORD *)(v0 + 104), v10);
    sub_23B56A5F4();
    sub_23B4FCC20((unint64_t *)&qword_2542F9630, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6838], MEMORY[0x24BEE6848]);
    swift_allocError();
    sub_23B56A15C();
    swift_willThrow();
    v8(v9, v10);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 104);
    v12 = *(_QWORD *)(v0 + 64);
    v13 = *(_QWORD *)(v0 + 16);
    v8(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 88));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v13, v11, v12);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B4FE648()
{
  sub_23B56AE64();
  swift_bridgeObjectRetain();
  sub_23B56A36C();
  swift_bridgeObjectRelease();
  return sub_23B56AE88();
}

uint64_t sub_23B4FE69C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v15;

  v8[9] = a8;
  v8[10] = v15;
  v8[7] = a6;
  v8[8] = a7;
  v8[5] = a4;
  v8[6] = a5;
  v8[3] = a2;
  v8[4] = a3;
  v8[2] = a1;
  v10 = sub_23B56A900();
  v8[11] = v10;
  v8[12] = *(_QWORD *)(v10 - 8);
  v8[13] = swift_task_alloc();
  v8[14] = swift_task_alloc();
  v11 = *(_QWORD *)(a8 - 8);
  v8[15] = v11;
  v8[16] = *(_QWORD *)(v11 + 64);
  v8[17] = swift_task_alloc();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[18] = AssociatedTypeWitness;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8[19] = v13;
  v8[20] = *(_QWORD *)(v13 + 64);
  v8[21] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FADF0);
  v8[22] = swift_task_alloc();
  return swift_task_switch();
}

_QWORD *initializeBufferWithCopyOfBuffer for GenericError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

Swift::Void __swiftcall prohibitAsyncContext(functionName:)(Swift::String functionName)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;

  object = functionName._object;
  countAndFlagsBits = functionName._countAndFlagsBits;
  sub_23B56AC9C();
  if (v8 == 1)
  {
    if (qword_2542FAD78 != -1)
      swift_once();
    v3 = sub_23B56A060();
    __swift_project_value_buffer(v3, (uint64_t)qword_2542FC458);
    swift_bridgeObjectRetain_n();
    v4 = sub_23B56A048();
    v5 = sub_23B56A840();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      v7 = swift_slowAlloc();
      v8 = v7;
      *(_DWORD *)v6 = 136315138;
      swift_bridgeObjectRetain();
      sub_23B5034E4(countAndFlagsBits, (unint64_t)object, &v8);
      sub_23B56A918();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_23B4F9000, v4, v5, "\"%s\" is not allowed to be called from an asynchronous context!", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B867948](v7, -1, -1);
      MEMORY[0x23B867948](v6, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t sub_23B4FE9AC@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_23B56A768();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4);
  *a2 = (_DWORD)result != 1;
  return result;
}

uint64_t sub_23B4FEA08()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  int v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char *v20;

  v1 = objc_msgSend(*(id *)(v0 + 168), sel_remoteObjectInterface);

  if (!v1)
  {
    v15 = 0;
LABEL_6:
    sub_23B552068();
    swift_allocError();
    v19 = *(void **)(v0 + 168);
    *v20 = v15;
    swift_willThrow();

    swift_task_dealloc();
    v14 = *(uint64_t (**)(void))(v0 + 8);
    return v14();
  }
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BDAC760];
  v2 = *(void **)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v0 + 48) = *(_QWORD *)(v0 + 104);
  *(_QWORD *)(v0 + 56) = v4;
  *(_QWORD *)(v0 + 24) = 1107296256;
  *(_QWORD *)(v0 + 32) = sub_23B551980;
  *(_QWORD *)(v0 + 40) = &block_descriptor_0;
  v5 = _Block_copy((const void *)(v0 + 16));
  swift_retain();
  swift_release();
  v6 = objc_msgSend(v2, sel_remoteObjectProxyWithErrorHandler_, v5);
  _Block_release(v5);
  sub_23B56A9D8();
  swift_unknownObjectRelease();
  v7 = swift_dynamicCast();
  v8 = *(_QWORD *)(v3 - 8);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
  if (!v7)
  {
    v17 = *(_QWORD *)(v0 + 144);
    v16 = *(_QWORD *)(v0 + 152);
    v18 = *(_QWORD *)(v0 + 136);
    v15 = 1;
    v9(v16, 1, 1, *(_QWORD *)(v0 + 128));
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    goto LABEL_6;
  }
  v10 = *(void **)(v0 + 168);
  v11 = *(_QWORD *)(v0 + 152);
  v12 = *(_QWORD *)(v0 + 128);
  v13 = *(_QWORD *)(v0 + 96);
  v9(v11, 0, 1, v12);

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v13, v11, v12);
  swift_task_dealloc();
  v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_23B4FEC00(uint64_t a1)
{
  destroy for XPCServiceDescription(a1);
  return a1;
}

void destroy for XPCServiceDescription(uint64_t a1)
{
  swift_bridgeObjectRelease();

  if (*(_QWORD *)(a1 + 72))
    __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  if (*(_QWORD *)(a1 + 88))
    swift_release();
}

uint64_t sub_23B4FEC98(uint64_t a1)
{
  destroy for XPCSessionManager.ListenerRecord(a1);
  return a1;
}

void destroy for XPCSessionManager.ListenerRecord(uint64_t a1)
{
  swift_bridgeObjectRelease();

  if (*(_QWORD *)(a1 + 72))
    __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  if (*(_QWORD *)(a1 + 88))
    swift_release();

}

uint64_t WorkItemQueue.__allocating_init(identifier:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = sub_23B569FA0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23B569F64();
  v8 = v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  type metadata accessor for WorkItemQueue(0);
  v9 = swift_allocObject();
  WorkItemQueue.init(name:identifier:)(v6, v8, (uint64_t)v5);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return v9;
}

uint64_t type metadata accessor for MultiAwait()
{
  return objc_opt_self();
}

uint64_t sub_23B4FEE18()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  uint64_t (*v12)(id);

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v1 + qword_2542FA9F0);
  if (v2)
  {
    v3 = *(id *)(v1 + qword_2542FA9F0);
  }
  else
  {
    v4 = (_QWORD *)(v1 + qword_2542FC428);
    v5 = *(_QWORD *)(v1 + qword_2542FC428 + 16);
    v6 = objc_allocWithZone(MEMORY[0x24BDD1988]);
    swift_bridgeObjectRetain();
    v7 = (void *)sub_23B56A264();
    swift_bridgeObjectRelease();
    v8 = objc_msgSend(v6, sel_initWithMachServiceName_options_, v7, v5);

    objc_msgSend(v8, sel_setExportedInterface_, v4[4]);
    objc_msgSend(v8, sel_setExportedObject_, v4[3]);
    objc_msgSend(v8, sel_setRemoteObjectInterface_, v4[5]);
    v9 = *(void **)(v1 + qword_2542FA9F0);
    *(_QWORD *)(v1 + qword_2542FA9F0) = v8;
    v3 = v8;

    v2 = 0;
  }
  v12 = *(uint64_t (**)(id))(v0 + 8);
  v10 = v2;
  return v12(v3);
}

uint64_t *FM.XPCSession.__allocating_init(connection:)(void *a1)
{
  swift_allocObject();
  return FM.XPCSession.init(connection:)(a1);
}

uint64_t *FM.XPCSession.init(connection:)(void *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  char *v19;
  void *v20;
  _QWORD v22[2];
  _OWORD v23[2];
  _BYTE v24[24];
  uint64_t v25;

  v3 = *v1;
  v4 = sub_23B569FA0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  *(uint64_t *)((char *)v1 + qword_2542FA9F0) = 0;
  v8 = a1;
  v9 = objc_msgSend(v8, sel_serviceName);
  if (v9)
  {
    v10 = v9;
    v11 = sub_23B56A288();
    v13 = v12;

    if (objc_msgSend(v8, sel_exportedObject))
    {
      sub_23B56A9D8();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v23, 0, sizeof(v23));
    }
    sub_23B5051D4((uint64_t)v23, (uint64_t)v24);
    if (v25)
    {
      sub_23B4FF1C0();
      if (swift_dynamicCast())
        v16 = v22[1];
      else
        v16 = 0;
    }
    else
    {
      sub_23B54CC8C((uint64_t)v24);
      v16 = 0;
    }
    v17 = objc_msgSend(v8, sel_exportedInterface);
    v18 = objc_msgSend(v8, sel_remoteObjectInterface);

    sub_23B569F94();
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))((uint64_t)v1 + qword_2542FC420, v7, v4);
    v19 = (char *)v1 + qword_2542FC428;
    *(_QWORD *)v19 = v11;
    *((_QWORD *)v19 + 1) = v13;
    *((_QWORD *)v19 + 2) = 0;
    *((_QWORD *)v19 + 3) = v16;
    *((_QWORD *)v19 + 4) = v17;
    *((_QWORD *)v19 + 5) = v18;
    *((_OWORD *)v19 + 3) = 0u;
    *((_OWORD *)v19 + 4) = 0u;
    *((_OWORD *)v19 + 5) = 0u;
    *((_QWORD *)v19 + 12) = 0;
    v20 = *(void **)((char *)v1 + qword_2542FA9F0);
    *(uint64_t *)((char *)v1 + qword_2542FA9F0) = (uint64_t)v8;

  }
  else
  {

    type metadata accessor for FM.XPCSession(0, *(_QWORD *)(v3 + 80), v14, v15);
    swift_defaultActor_destroy();

    swift_deallocPartialClassInstance();
    return 0;
  }
  return v1;
}

unint64_t sub_23B4FF1C0()
{
  unint64_t result;

  result = qword_2542F9818;
  if (!qword_2542F9818)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2542F9818);
  }
  return result;
}

uint64_t Sequence.asyncMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;

  v6[7] = a5;
  v6[8] = v5;
  v6[5] = a3;
  v6[6] = a4;
  v6[3] = a1;
  v6[4] = a2;
  v6[9] = swift_task_alloc();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[10] = AssociatedTypeWitness;
  v6[11] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6[12] = swift_task_alloc();
  sub_23B56A900();
  v6[13] = swift_task_alloc();
  v6[14] = *(_QWORD *)(a3 - 8);
  v6[15] = swift_task_alloc();
  v9 = swift_getAssociatedTypeWitness();
  v6[16] = v9;
  v6[17] = *(_QWORD *)(v9 - 8);
  v6[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B4FF328(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23B4FACE0;
  return sub_23B549620(a1, v4);
}

void valueOf(entitlement:)(uint64_t a1@<X8>)
{
  __CFString *v2;
  CFTypeRef v3;
  __SecTask *task;

  task = SecTaskCreateFromSelf(0);
  if (task)
  {
    v2 = (__CFString *)sub_23B56A264();
    v3 = SecTaskCopyValueForEntitlement(task, v2, 0);

    if (v3)
    {
      *(_QWORD *)(a1 + 24) = swift_getObjectType();

      *(_QWORD *)a1 = v3;
    }
    else
    {
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;

    }
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
}

void sub_23B4FF43C(uint64_t a1@<X8>)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)sub_23B56A264();
  v3 = MGCopyAnswerWithError();

  if (v3)
  {
    *(_QWORD *)(a1 + 24) = swift_getObjectType();
    *(_QWORD *)a1 = v3;
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
}

uint64_t sub_23B4FF69C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v10;
  _QWORD *v11;
  int *v12;

  v2 = *(_QWORD *)(v0 + 112);
  v1 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 16) = sub_23B56A150();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v3, v4);
  sub_23B56A468();
  v5 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 88);
  swift_getAssociatedConformanceWitness();
  sub_23B56A90C();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 128));
    v8 = *(_QWORD *)(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8);
  }
  else
  {
    v10 = *(int **)(v0 + 24);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 32))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 80));
    v12 = (int *)((char *)v10 + *v10);
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 152) = v11;
    *v11 = v0;
    v11[1] = sub_23B5129D8;
    return ((uint64_t (*)(_QWORD, _QWORD))v12)(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 96));
  }
}

uint64_t sub_23B4FF838(uint64_t a1)
{
  uint64_t v1;

  return sub_23B4FF854(a1, *(_QWORD *)(v1 + 40));
}

uint64_t sub_23B4FF854(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_23B56A5E8();
  v5 = sub_23B56A900();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  v6 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v4);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v4);
}

uint64_t sub_23B4FF8F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23B4FF910(*(uint64_t **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_23B4FF910@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  _QWORD v11[4];

  v8 = *a1;
  swift_beginAccess();
  MEMORY[0x23B8664C0](v11, a2, a1[3], *(_QWORD *)(v8 + 80), MEMORY[0x24BEE4AD8] + 8, *(_QWORD *)(v8 + 88));
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9CD8);
  v9 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a4, v9 ^ 1u, 1, a3);
}

uint64_t sub_23B4FF9D4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5, uint64_t a6)
{
  uint64_t v11;

  v11 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542FAD88);
  type metadata accessor for OnceCheckedContinuation(0, a6, v11, MEMORY[0x24BEE3F20]);
  swift_allocObject();
  swift_bridgeObjectRetain();
  sub_23B4FFAAC(a1, a2, a3);
  a4();
  return swift_release();
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x23B867834](a1, v6, a5);
}

uint64_t type metadata accessor for OnceCheckedContinuation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OnceCheckedContinuation);
}

_QWORD *sub_23B4FFAAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v18 = a3;
  v6 = *(_QWORD *)(*v3 + 80);
  v7 = *(_QWORD *)(*v3 + 88);
  v8 = *(_QWORD *)(*v3 + 96);
  v9 = sub_23B56A5E8();
  v10 = sub_23B56A900();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v17 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))((char *)&v17 - v12, 1, 1, v9);
  v14 = sub_23B4FFBD0(v13, v10);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v3[2] = v14;
  v20 = v6;
  v21 = v7;
  v22 = v8;
  v23 = a1;
  sub_23B4FFC54((void (*)(uint64_t))sub_23B4FF838, (uint64_t)v19, v14);
  v15 = v18;
  v3[3] = a2;
  v3[4] = v15;
  return v3;
}

uint64_t sub_23B4FFBD4()
{
  type metadata accessor for os_unfair_lock_s(255);
  sub_23B56AAD4();
  return sub_23B56AAC8();
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_23B503A98(a1, &qword_2542FAD80);
}

void sub_23B4FFC54(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  os_unfair_lock_s *v5;

  v4 = a3 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)a3 + 16);
  v5 = (os_unfair_lock_s *)(a3 + ((*(unsigned int *)(*(_QWORD *)a3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  a1(v4);
  os_unfair_lock_unlock(v5);
}

uint64_t sub_23B4FFCE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  _QWORD *v21;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v21 - v6;
  v21 = (_QWORD *)(v0 + 112);
  swift_beginAccess();
  v8 = *(_QWORD *)(v0 + 112);
  v9 = v8 + 64;
  v10 = 1 << *(_BYTE *)(v8 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v8 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  result = swift_bridgeObjectRetain_n();
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v17 = v16 | (v15 << 6);
      goto LABEL_5;
    }
    v18 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v18 >= v13)
      goto LABEL_25;
    v19 = *(_QWORD *)(v9 + 8 * v18);
    ++v15;
    if (!v19)
    {
      v15 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_25;
      v19 = *(_QWORD *)(v9 + 8 * v15);
      if (!v19)
      {
        v15 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_25;
        v19 = *(_QWORD *)(v9 + 8 * v15);
        if (!v19)
        {
          v15 = v18 + 3;
          if (v18 + 3 >= v13)
            goto LABEL_25;
          v19 = *(_QWORD *)(v9 + 8 * v15);
          if (!v19)
          {
            v15 = v18 + 4;
            if (v18 + 4 >= v13)
              goto LABEL_25;
            v19 = *(_QWORD *)(v9 + 8 * v15);
            if (!v19)
              break;
          }
        }
      }
    }
LABEL_24:
    v12 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v15 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v7, *(_QWORD *)(v8 + 56) + *(_QWORD *)(v2 + 72) * v17, v1);
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, v7, v1);
    sub_23B56A5DC();
    result = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  }
  v20 = v18 + 5;
  if (v20 >= v13)
  {
LABEL_25:
    swift_release();
    swift_bridgeObjectRelease();
    *v21 = MEMORY[0x24BEE4B00];
    return swift_bridgeObjectRelease();
  }
  v19 = *(_QWORD *)(v9 + 8 * v20);
  if (v19)
  {
    v15 = v20;
    goto LABEL_24;
  }
  while (1)
  {
    v15 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v15 >= v13)
      goto LABEL_25;
    v19 = *(_QWORD *)(v9 + 8 * v15);
    ++v20;
    if (v19)
      goto LABEL_24;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_23B4FFF28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x23B867894](&unk_23B56EE74, a3);
  return sub_23B56A018();
}

uint64_t WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v10 = sub_23B569FA0();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a3;
  type metadata accessor for WorkItemQueue.WorkItem();
  swift_allocObject();
  v15 = sub_23B54BE80(0, (uint64_t)v13, (uint64_t)&unk_256A2C648, v14, a4, a5);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
  return v15;
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  v10 = sub_23B569FA0();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  type metadata accessor for WorkItemQueue.WorkItem();
  swift_allocObject();
  v14 = sub_23B54BE80(0, (uint64_t)v13, a2, a3, a4, a5);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
  return v14;
}

uint64_t Transaction.__deallocating_deinit()
{
  sub_23B5000C8();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_23B5000C8()
{
  os_activity_scope_state_s *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  if (qword_2542FAD70 != -1)
    swift_once();
  v1 = sub_23B56A060();
  __swift_project_value_buffer(v1, (uint64_t)qword_2542FC470);
  swift_retain_n();
  v2 = sub_23B56A048();
  v3 = sub_23B56A81C();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    *(_DWORD *)v4 = 136315138;
    v7 = v5;
    v8 = 0x3A4E58545BLL;
    v9 = 0xE500000000000000;
    swift_retain();
    swift_bridgeObjectRetain();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    swift_release();
    v8 = sub_23B5034E4(0x3A4E58545BLL, 0xE500000000000000, &v7);
    sub_23B56A918();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23B4F9000, v2, v3, "Closed %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v5, -1, -1);
    MEMORY[0x23B867948](v4, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  swift_beginAccess();
  os_activity_scope_leave(v0 + 3);
  return swift_endAccess();
}

uint64_t sub_23B5002E8(uint64_t a1)
{
  MEMORY[0x23B867894](&unk_23B56EE74, a1);
  return sub_23B56A030();
}

uint64_t WorkItemQueue.WorkItem.__deallocating_deinit()
{
  WorkItemQueue.WorkItem.deinit();
  return swift_defaultActor_deallocate();
}

uint64_t sub_23B50033C(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_23B50034C(uint64_t a1, uint64_t a2)
{
  sub_23B56AE64();
  MEMORY[0x23B867894](&unk_23B56EE74, a2);
  sub_23B56A024();
  return sub_23B56AE88();
}

uint64_t DirectorySequence.next()@<X0>(uint64_t a1@<X8>)
{
  id *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F97E8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*v1)
  {
    v6 = *v1;
    v7 = (void *)MEMORY[0x23B867378]();
    sub_23B5004D4(v6, v1, (uint64_t)v5);
    objc_autoreleasePoolPop(v7);

    return sub_23B50048C((uint64_t)v5, a1);
  }
  else
  {
    v9 = sub_23B569DA8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a1, 1, 1, v9);
  }
}

uint64_t sub_23B50048C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F97E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23B5004D4@<X0>(void *a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  void (*v12)(char *, _QWORD, uint64_t, uint64_t);
  void *v14;
  uint64_t v15;
  _OWORD v16[2];
  _OWORD v17[2];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F97E8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(a1, sel_nextObject))
  {
    sub_23B56A9D8();
    swift_unknownObjectRelease();
    sub_23B503EB4(v16, v17);
    sub_23B503EB4(v17, v16);
    v9 = sub_23B569DA8();
    v10 = swift_dynamicCast();
    v11 = *(_QWORD *)(v9 - 8);
    v12 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56);
    if ((v10 & 1) != 0)
    {
      v12(v8, 0, 1, v9);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v9) != 1)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a3, v8, v9);
        return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v12)(a3, 0, 1, v9);
      }
    }
    else
    {
      v12(v8, 1, 1, v9);
    }
    sub_23B537E3C((uint64_t)v8);
  }
  v14 = *a2;
  *a2 = 0;

  v15 = sub_23B569DA8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a3, 1, 1, v15);
}

uint64_t sub_23B500680(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAD60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_23B5006C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23B56AE64();
  swift_bridgeObjectRetain();
  sub_23B56A36C();
  swift_bridgeObjectRelease();
  v4 = sub_23B56AE88();
  return sub_23B50073C(a1, a2, v4);
}

unint64_t sub_23B50073C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_23B56AD98() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_23B56AD98() & 1) == 0);
    }
  }
  return v6;
}

BOOL NSXPCConnection.hasEntitlement<A>(_:)()
{
  Swift::Bool v0;
  Swift::String v2;

  sub_23B56A4BC();
  v0 = NSXPCConnection.hasEntitlement(_:)(v2);
  swift_bridgeObjectRelease();
  return v0;
}

Swift::Bool __swiftcall NSXPCConnection.hasEntitlement(_:)(Swift::String a1)
{
  void *v1;
  void *object;
  uint64_t countAndFlagsBits;
  void *v4;
  id v5;
  uint64_t v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  char v16;
  _OWORD v17[2];
  uint64_t v18[4];

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v4 = (void *)sub_23B56A264();
  v5 = objc_msgSend(v1, sel_valueForEntitlement_, v4);

  if (v5)
  {
    sub_23B56A9D8();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v17, 0, sizeof(v17));
  }
  sub_23B4FAED4((uint64_t)v17, (uint64_t)v18, &qword_2542F9CD8);
  if (v18[3])
  {
    if ((swift_dynamicCast() & 1) != 0 && (v16 & 1) != 0)
      return 1;
  }
  else
  {
    sub_23B5043F0((uint64_t)v18, &qword_2542F9CD8);
  }
  if (qword_2542F9D80 != -1)
    swift_once();
  v7 = sub_23B56A060();
  __swift_project_value_buffer(v7, (uint64_t)qword_2542FC3C0);
  v8 = v1;
  swift_bridgeObjectRetain_n();
  v9 = v8;
  v10 = sub_23B56A048();
  v11 = sub_23B56A834();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v13 = (_QWORD *)swift_slowAlloc();
    v15 = swift_slowAlloc();
    v18[0] = v15;
    *(_DWORD *)v12 = 138543618;
    *(_QWORD *)&v17[0] = v9;
    v14 = v9;
    sub_23B56A918();
    *v13 = v9;

    *(_WORD *)(v12 + 12) = 2082;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v17[0] = sub_23B5034E4(countAndFlagsBits, (unint64_t)object, v18);
    sub_23B56A918();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_23B4F9000, v10, v11, "Connection %{public}@ does not have entitlement: [%{public}s]", (uint8_t *)v12, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542F99E0);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v13, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v15, -1, -1);
    MEMORY[0x23B867948](v12, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return 0;
}

uint64_t sub_23B500B74(_QWORD *a1, uint64_t a2)
{
  initializeWithCopy for XPCServiceDescription(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for XPCServiceDescription(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = (void *)a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v5;
  v6 = (void *)a2[4];
  v7 = (void *)a2[5];
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  v8 = a2 + 6;
  v9 = a2[9];
  swift_bridgeObjectRetain();
  v10 = v5;
  v11 = v6;
  v12 = v7;
  if (v9)
  {
    v13 = a2[10];
    *(_QWORD *)(a1 + 72) = v9;
    *(_QWORD *)(a1 + 80) = v13;
    (**(void (***)(uint64_t, _QWORD *, uint64_t))(v9 - 8))(a1 + 48, v8, v9);
  }
  else
  {
    v14 = *((_OWORD *)v8 + 1);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v8;
    *(_OWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 80) = v8[4];
  }
  v15 = a2[11];
  if (v15)
  {
    v16 = a2[12];
    *(_QWORD *)(a1 + 88) = v15;
    *(_QWORD *)(a1 + 96) = v16;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
  }
  return a1;
}

uint64_t sub_23B500C80(_QWORD *a1, uint64_t a2)
{
  initializeWithCopy for XPCSessionManager.ListenerRecord(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for XPCSessionManager.ListenerRecord(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;

  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = (void *)a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v5;
  v6 = (void *)a2[4];
  v7 = (void *)a2[5];
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  v8 = a2 + 6;
  v9 = a2[9];
  swift_bridgeObjectRetain();
  v10 = v5;
  v11 = v6;
  v12 = v7;
  if (v9)
  {
    v13 = a2[10];
    *(_QWORD *)(a1 + 72) = v9;
    *(_QWORD *)(a1 + 80) = v13;
    (**(void (***)(uint64_t, _QWORD *, uint64_t))(v9 - 8))(a1 + 48, v8, v9);
  }
  else
  {
    v14 = *((_OWORD *)v8 + 1);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v8;
    *(_OWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 80) = v8[4];
  }
  v15 = a2[11];
  if (v15)
  {
    v16 = a2[12];
    *(_QWORD *)(a1 + 88) = v15;
    *(_QWORD *)(a1 + 96) = v16;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
  }
  v17 = (void *)a2[13];
  *(_QWORD *)(a1 + 104) = v17;
  v18 = v17;
  return a1;
}

uint64_t sub_23B500D98(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v4 = sub_23B569DA8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = swift_bridgeObjectRetain();
  v9 = (void *)MEMORY[0x23B867378](v8);
  v10 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v11 = sub_23B56A810();

  objc_autoreleasePoolPop(v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  result = swift_bridgeObjectRelease();
  *a2 = v11;
  return result;
}

uint64_t sub_23B500EC0(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  id v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[3];

  v4 = sub_23B569DA8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getErrorValue();
  v8 = Error.domain.getter(v31[2]);
  v10 = v9;
  if (v8 == sub_23B56A288() && v10 == v11)
  {
    swift_bridgeObjectRelease_n();
LABEL_8:
    swift_getErrorValue();
    if (Error.code.getter(v29) == (id)260)
      return 1;
    goto LABEL_9;
  }
  v13 = sub_23B56AD98();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v13 & 1) != 0)
    goto LABEL_8;
LABEL_9:
  if (qword_2542FAD78 != -1)
    swift_once();
  v14 = sub_23B56A060();
  __swift_project_value_buffer(v14, (uint64_t)qword_2542FC458);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v15 = a2;
  v16 = a2;
  v17 = sub_23B56A048();
  v18 = sub_23B56A834();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc();
    v27 = (_QWORD *)swift_slowAlloc();
    v20 = swift_slowAlloc();
    v28 = v20;
    *(_DWORD *)v19 = 141558531;
    v30 = 1752392040;
    v31[0] = v20;
    sub_23B56A918();
    *(_WORD *)(v19 + 12) = 2081;
    sub_23B538078();
    v21 = sub_23B56AD44();
    v30 = sub_23B5034E4(v21, v22, v31);
    sub_23B56A918();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    *(_WORD *)(v19 + 22) = 2112;
    v23 = sub_23B569D48();
    v30 = v23;
    sub_23B56A918();
    v24 = v27;
    *v27 = v23;

    _os_log_impl(&dword_23B4F9000, v17, v18, "ERROR: URL: %{private,mask.hash}s error: %@", (uint8_t *)v19, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542F99E0);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v24, -1, -1);
    v25 = v28;
    swift_arrayDestroy();
    MEMORY[0x23B867948](v25, -1, -1);
    MEMORY[0x23B867948](v19, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);

  }
  return 1;
}

uint64_t Error.domain.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v5, a1);
  v6 = sub_23B56AD5C();
  if (v6)
  {
    v7 = (void *)v6;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  }
  else
  {
    v7 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v8, v4, a1);
  }
  v9 = (void *)sub_23B569D48();

  v10 = objc_msgSend(v9, sel_domain);
  v11 = sub_23B56A288();

  return v11;
}

id Error.code.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v5, a1);
  v6 = sub_23B56AD5C();
  if (v6)
  {
    v7 = (void *)v6;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  }
  else
  {
    v7 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v8, v4, a1);
  }
  v9 = (void *)sub_23B569D48();

  v10 = objc_msgSend(v9, sel_code);
  return v10;
}

uint64_t sub_23B501450(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_23B501498(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_23B5014E0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = sub_23B501510(*(_QWORD *)(v1 + 16), **(_QWORD **)(v1 + 24), *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8));
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t sub_23B501510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  char v8;
  _OWORD v10[2];
  unsigned __int8 v11;

  swift_beginAccess();
  v6 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(v6 + 16) && (v7 = sub_23B5015D8(a2, a3), (v8 & 1) != 0))
    sub_23B5035B4(*(_QWORD *)(v6 + 56) + 32 * v7, (uint64_t)v10);
  else
    memset(v10, 0, sizeof(v10));
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9CD8);
  if (swift_dynamicCast())
    return v11;
  else
    return 2;
}

unint64_t sub_23B5015D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23B56AE64();
  sub_23B56A36C();
  v4 = sub_23B56AE88();
  return sub_23B50073C(a1, a2, v4);
}

uint64_t _s10FindMyBase11TransactionC9asyncTask4name5blockys12StaticStringV_yyYaYbctFZ_0(char *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  os_activity_scope_state_s *v25;
  id v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FADF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2542FAE10 != -1)
    swift_once();
  sub_23B56AF9C();
  v13 = v35;
  if (v35)
  {
    v33 = a4;
    if (qword_2542FAD70 != -1)
      swift_once();
    v14 = sub_23B56A060();
    __swift_project_value_buffer(v14, (uint64_t)qword_2542FC470);
    swift_retain_n();
    v15 = sub_23B56A048();
    v16 = sub_23B56A840();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc();
      v32 = a5;
      v18 = v17;
      v19 = swift_slowAlloc();
      v35 = v19;
      *(_DWORD *)v18 = 136315394;
      v20 = sub_23B56AA98();
      v34 = sub_23B5034E4(v20, v21, &v35);
      sub_23B56A918();
      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 12) = 2080;
      v22 = *(_QWORD *)(v13 + 16);
      v23 = *(_QWORD *)(v13 + 24);
      swift_bridgeObjectRetain();
      v34 = sub_23B5034E4(v22, v23, &v35);
      sub_23B56A918();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23B4F9000, v15, v16, "Transaction.asyncTask(name:) called with [%s] when transaction [%s] already exists!", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x23B867948](v19, -1, -1);
      v24 = v18;
      a5 = v32;
      MEMORY[0x23B867948](v24, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v29 = sub_23B56A624();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v12, 1, 1, v29);
    v30 = (_QWORD *)swift_allocObject();
    v30[2] = 0;
    v30[3] = 0;
    v30[4] = v33;
    v30[5] = a5;
    swift_retain();
    sub_23B515858((uint64_t)v12, (uint64_t)&unk_256A2C0E0, (uint64_t)v30);
    swift_release();
  }
  else
  {
    type metadata accessor for Transaction();
    swift_allocObject();
    v25 = sub_23B5019FC(a1, a2, a3);
    v26 = objc_msgSend((id)objc_opt_self(), sel_currentConnection);
    v27 = sub_23B56A624();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v12, 1, 1, v27);
    v28 = (_QWORD *)swift_allocObject();
    v28[2] = 0;
    v28[3] = 0;
    v28[4] = v25;
    v28[5] = v26;
    v28[6] = a4;
    v28[7] = a5;
    swift_retain();
    swift_retain();
    sub_23B515858((uint64_t)v12, (uint64_t)&unk_256A2C0D0, (uint64_t)v28);
    swift_release();
  }
  return swift_release();
}

os_activity_scope_state_s *sub_23B5019FC(char *a1, uint64_t a2, int a3)
{
  os_activity_scope_state_s *v3;
  os_activity_scope_state_s *v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  char *v20;
  unsigned int v21;
  os_activity_scope_state_s *v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  os_activity_scope_state_s *v36;
  int v37;
  uint64_t v38;
  char description[8];
  unint64_t v40;

  v4 = v3;
  v7 = (_QWORD *)sub_23B569FA0();
  v8 = *(v7 - 1);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v11 = (char *)&v36 - v10;
  v3[3].opaque[0] = 0;
  v3[3].opaque[1] = 0;
  v12 = (_DWORD)v3 + 48;
  v36 = v3 + 3;
  v37 = a3;
  if ((a3 & 1) == 0)
  {
    if (a1)
    {
      while (1)
      {
        *(_QWORD *)description = sub_23B56A354();
        v40 = v14;
        swift_bridgeObjectRetain();
        sub_23B56A3A8();
        swift_bridgeObjectRelease();
        v15 = *(_QWORD *)description;
        v16 = v40;
        sub_23B569F94();
        sub_23B569F64();
        (*(void (**)(char *, _QWORD *))(v8 + 8))(v11, v7);
        *(_QWORD *)description = v15;
        v40 = v16;
        swift_bridgeObjectRetain();
        sub_23B56A3A8();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v17 = v40;
        v4[1].opaque[0] = *(_QWORD *)description;
        v4[1].opaque[1] = v17;
        sub_23B56A330();
        v18 = os_transaction_create();
        swift_release();
        if (!v18)
          goto LABEL_50;
        v7 = &v36;
        v4[2].opaque[0] = v18;
        LODWORD(v10) = v37;
        if ((v37 & 1) != 0)
        {
          v10 = (unint64_t)a1 >> 32;
          if (!((unint64_t)a1 >> 32))
          {
            LODWORD(v10) = a1 >> 11;
            if (a1 >> 11 == 27)
              goto LABEL_49;
            LODWORD(v10) = a1 >> 16;
            if (a1 >> 16 > 0x10)
              goto LABEL_44;
            if ((a1 & 0xFFFFFF80) != 0)
              goto LABEL_45;
            if (a1 <= 0xFF)
            {
              v21 = ((_BYTE)a1 + 1);
              goto LABEL_23;
            }
            __break(1u);
            goto LABEL_48;
          }
        }
        else
        {
          if (a1)
          {
            if (qword_2542FAB88 != -1)
              swift_once();
            v19 = qword_2542FAD68;
            v20 = a1;
            goto LABEL_26;
          }
LABEL_35:
          __break(1u);
        }
        __break(1u);
LABEL_37:
        v30 = (a1 & 0x3F) << 8;
        v31 = (v30 | (a1 >> 6)) + 33217;
        v32 = (v30 | (a1 >> 6) & 0x3F) << 8;
        v33 = (((v32 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
        v34 = (v32 | (a1 >> 12)) + 8487393;
        if ((_DWORD)v10)
          v13 = v33;
        else
          v13 = v34;
        if (a1 < 0x800)
          v13 = v31;
LABEL_10:
        *(_QWORD *)description = (v13 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v13) >> 3)) & 7)));
      }
    }
    __break(1u);
    goto LABEL_33;
  }
  v10 = (unint64_t)a1 >> 32;
  if ((unint64_t)a1 >> 32)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  LODWORD(v10) = a1 >> 11;
  if (a1 >> 11 == 27)
  {
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    v35 = (v12 | (a1 >> 6) & 0x3F) << 8;
    if ((_DWORD)v10)
      v21 = (((v35 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
    else
      v21 = (v35 | (a1 >> 12)) + 8487393;
    goto LABEL_23;
  }
  LODWORD(v10) = a1 >> 16;
  if (a1 >> 16 > 0x10)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if ((a1 & 0xFFFFFF80) != 0)
    goto LABEL_37;
  if (a1 <= 0xFF)
  {
    v13 = ((_BYTE)a1 + 1);
    goto LABEL_10;
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  v12 = (a1 & 0x3F) << 8;
  if (a1 >= 0x800)
    goto LABEL_51;
  v21 = (v12 | (a1 >> 6)) + 33217;
LABEL_23:
  *(_QWORD *)description = (v21 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << ((32 - (__clz(v21) & 0x38)) & 0x38));
  if (qword_2542FAB88 != -1)
    swift_once();
  v19 = qword_2542FAD68;
  v20 = description;
LABEL_26:
  v4[2].opaque[1] = (uint64_t)_os_activity_create(&dword_23B4F9000, v20, v19, OS_ACTIVITY_FLAG_DEFAULT);
  v22 = v36;
  swift_beginAccess();
  v23 = swift_unknownObjectRetain();
  os_activity_scope_enter(v23, v22);
  swift_endAccess();
  swift_unknownObjectRelease();
  if (qword_2542FAD70 != -1)
    swift_once();
  v24 = sub_23B56A060();
  __swift_project_value_buffer(v24, (uint64_t)qword_2542FC470);
  swift_retain_n();
  v25 = sub_23B56A048();
  v26 = sub_23B56A81C();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc();
    v28 = swift_slowAlloc();
    *(_DWORD *)v27 = 136315138;
    v38 = v28;
    *(_QWORD *)description = 0x3A4E58545BLL;
    v40 = 0xE500000000000000;
    swift_retain();
    swift_bridgeObjectRetain();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    swift_release();
    *(_QWORD *)description = sub_23B5034E4(*(uint64_t *)description, v40, &v38);
    sub_23B56A918();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23B4F9000, v25, v26, "Opened %s", v27, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v28, -1, -1);
    MEMORY[0x23B867948](v27, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  return v4;
}

uint64_t type metadata accessor for Transaction()
{
  return objc_opt_self();
}

uint64_t sub_23B501FD4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = v0[22];
  v20 = v0[21];
  v22 = v0[20];
  v17 = v0[19];
  v19 = v0[18];
  v21 = v0[17];
  v23 = v0[15];
  v2 = v0[9];
  v3 = v0[10];
  v4 = v0[8];
  v18 = v0[7];
  v5 = v0[5];
  v16 = v0[6];
  v6 = v0[4];
  v7 = sub_23B56A624();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
  v15(v1, 1, 1, v7);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v4;
  v8[5] = v2;
  v8[6] = v3;
  v8[7] = v6;
  v8[8] = v5;
  swift_retain();
  v0[23] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542FAD88);
  sub_23B56A6F0();
  sub_23B544A20(v1, (uint64_t)&unk_256A2C7E8, (uint64_t)v8);
  sub_23B502244(v1);
  v15(v1, 1, 1, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v20, v16, v19);
  v9 = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v21, v18, v2);
  v10 = (*(unsigned __int8 *)(v17 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  v11 = (v22 + *(unsigned __int8 *)(v23 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  v12 = (char *)swift_allocObject();
  *((_QWORD *)v12 + 2) = 0;
  *((_QWORD *)v12 + 3) = 0;
  *((_QWORD *)v12 + 4) = v4;
  *((_QWORD *)v12 + 5) = v9;
  *((_QWORD *)v12 + 6) = v3;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 32))(&v12[v10], v20, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))(&v12[v11], v21, v9);
  sub_23B544A20(v1, (uint64_t)&unk_256A2C7F8, (uint64_t)v12);
  sub_23B502244(v1);
  v13 = (_QWORD *)swift_task_alloc();
  v0[24] = v13;
  *v13 = v0;
  v13[1] = sub_23B4FB2D8;
  return sub_23B56A6D8();
}

uint64_t sub_23B502244(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FADF0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23B502284(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FADF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

char *static Keychain.data(account:service:)(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _QWORD v18[2];

  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9BB0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Keychain.Item();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Keychain.item(account:service:useSystemKeychain:nonDestructive:accessGroup:)(a1, a2, a3, a4, 0, 0, 0, (uint64_t)v11);
  if (!v4)
  {
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    {
      sub_23B5043F0((uint64_t)v11, &qword_2542F9BB0);
      return 0;
    }
    else
    {
      sub_23B505154((uint64_t)v11, (uint64_t)v15);
      v16 = &v15[*(int *)(v12 + 40)];
      v11 = *(char **)v16;
      sub_23B566EC8(*(_QWORD *)v16, *((_QWORD *)v16 + 1));
      sub_23B5024C8((uint64_t)v15);
    }
  }
  return v11;
}

uint64_t sub_23B502434(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t getEnumTagSinglePayload for Keychain.Item()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void static Keychain.item(account:service:)(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  static Keychain.item(account:service:useSystemKeychain:nonDestructive:accessGroup:)(a1, a2, a3, a4, 0, 0, 0, a5);
}

void type metadata accessor for CFBoolean(uint64_t a1)
{
  sub_23B503A98(a1, &qword_2542F9BE8);
}

uint64_t storeEnumTagSinglePayload for Keychain.Item()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23B5024C8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Keychain.Item();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for Keychain.Item(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t *v8;
  unint64_t v9;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[7];
  v5 = sub_23B569F40();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  result = ((uint64_t (*)(uint64_t, uint64_t))v6)(a1 + a2[8], v5);
  v8 = (uint64_t *)(a1 + a2[10]);
  v9 = v8[1];
  if (v9 >> 60 != 15)
    return sub_23B504944(*v8, v9);
  return result;
}

uint64_t sub_23B5025B4@<X0>(unint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  unint64_t v16;
  char v17;
  id v18;
  char isUniquelyReferenced_nonNull_native;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint8_t *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  id v36;
  unint64_t v37;
  char v38;
  id v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  id v43;
  unint64_t v44;
  char v45;
  uint64_t *v46;
  __int128 *v47;
  uint64_t v48;
  id v50;
  unint64_t v51;
  char v52;
  __int128 *v53;
  int v54;
  uint64_t v55;
  unsigned int (*v56)(__int128 *, uint64_t, uint64_t);
  void (*v57)(char *, __int128 *, uint64_t);
  id v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  __int128 *v62;
  uint64_t v63;
  int v64;
  id v65;
  unint64_t v66;
  char v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  id v71;
  unint64_t v72;
  char v73;
  uint64_t v74;
  id v75;
  char v76;
  NSObject *v77;
  os_log_type_t v78;
  int v79;
  uint8_t *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  void (*v84)(_QWORD, _QWORD, _QWORD, _QWORD);
  id v85;
  unint64_t v86;
  char v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t);
  uint64_t v92;
  int *v93;
  __int128 *v94;
  uint64_t v95;
  uint8_t *v96;
  uint64_t *v97;
  _QWORD v98[2];
  void (*v99)(__int128 *, _QWORD, uint64_t, uint64_t);
  uint64_t v100;
  uint8_t *v101;
  __int128 v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  __int128 *v109;
  unint64_t v110;
  _OWORD v111[2];
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  __int128 v115;
  __int128 v116;
  unint64_t v117;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AC0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v105 = (char *)v98 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v98 - v7;
  v9 = sub_23B569F40();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v104 = (char *)v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v108 = (char *)v98 - v13;
  v117 = a1;
  v14 = (void *)*MEMORY[0x24BDE9550];
  if (*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRetain();
    v15 = v14;
    v16 = sub_23B503A0C((uint64_t)v15);
    if ((v17 & 1) != 0)
    {
      sub_23B5035B4(*(_QWORD *)(a1 + 56) + 32 * v16, (uint64_t)&v115);

      if (*((_QWORD *)&v116 + 1))
      {
        sub_23B5043F0((uint64_t)&v115, &qword_2542F9CD8);
        *((_QWORD *)&v116 + 1) = MEMORY[0x24BEE0D00];
        *(_QWORD *)&v115 = 0x455443414445523CLL;
        *((_QWORD *)&v115 + 1) = 0xEA00000000003E44;
        sub_23B503EB4(&v115, v111);
        v18 = v15;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v110 = v117;
        v117 = 0x8000000000000000;
        sub_23B5037A8(v111, v18, isUniquelyReferenced_nonNull_native);
        v117 = v110;

        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
    }
    else
    {
      v115 = 0u;
      v116 = 0u;

    }
  }
  else
  {
    v115 = 0u;
    v116 = 0u;
    swift_bridgeObjectRetain();
  }
  sub_23B5043F0((uint64_t)&v115, &qword_2542F9CD8);
LABEL_8:
  if (qword_2542F9C18 != -1)
    swift_once();
  v103 = sub_23B56A060();
  __swift_project_value_buffer(v103, (uint64_t)qword_2542F9C20);
  v20 = sub_23B56A048();
  v21 = sub_23B56A84C();
  v22 = os_log_type_enabled(v20, v21);
  v109 = (__int128 *)v8;
  if (v22)
  {
    v106 = v9;
    v23 = (uint8_t *)swift_slowAlloc();
    *(_QWORD *)&v102 = swift_slowAlloc();
    *(_QWORD *)&v115 = v102;
    *(_DWORD *)v23 = 136315138;
    v101 = v23 + 4;
    swift_beginAccess();
    type metadata accessor for CFString(0);
    *((_QWORD *)&v102 + 1) = a1;
    v24 = a2;
    sub_23B4FCC20(&qword_2542F9BC8, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_23B56EE30);
    swift_bridgeObjectRetain();
    v107 = v10;
    v25 = sub_23B56A198();
    v27 = v26;
    swift_bridgeObjectRelease();
    v28 = v25;
    v9 = v106;
    *(_QWORD *)&v111[0] = sub_23B5034E4(v28, v27, (uint64_t *)&v115);
    sub_23B56A918();
    a2 = v24;
    a1 = *((_QWORD *)&v102 + 1);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23B4F9000, v20, v21, "Creating Keychain.Item from cfDictionary: %s", v23, 0xCu);
    v29 = v102;
    v10 = v107;
    swift_arrayDestroy();
    MEMORY[0x23B867948](v29, -1, -1);
    MEMORY[0x23B867948](v23, -1, -1);
  }

  if (!*(_QWORD *)(a1 + 16))
  {
    v115 = 0u;
    v116 = 0u;
    goto LABEL_24;
  }
  v30 = (id)*MEMORY[0x24BDE9000];
  v31 = sub_23B503A0C((uint64_t)v30);
  if ((v32 & 1) != 0)
  {
    sub_23B5035B4(*(_QWORD *)(a1 + 56) + 32 * v31, (uint64_t)&v115);
  }
  else
  {
    v115 = 0u;
    v116 = 0u;
  }

  if (!*((_QWORD *)&v116 + 1))
  {
LABEL_24:
    sub_23B5043F0((uint64_t)&v115, &qword_2542F9CD8);
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_22;
LABEL_25:
    v115 = 0u;
    v116 = 0u;
LABEL_33:
    sub_23B5043F0((uint64_t)&v115, &qword_2542F9CD8);
    goto LABEL_34;
  }
  if ((swift_dynamicCast() & 1) != 0)
  {
    v33 = *((_QWORD *)&v111[0] + 1);
    v34 = *(_QWORD *)&v111[0];
    sub_23B55F2AC(*(uint64_t *)&v111[0], *((uint64_t *)&v111[0] + 1));
    if ((v35 & 1) == 0)
      goto LABEL_30;
    sub_23B504944(v34, v33);
  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_25;
LABEL_22:
  v36 = v14;
  v37 = sub_23B503A0C((uint64_t)v36);
  if ((v38 & 1) != 0)
  {
    sub_23B5035B4(*(_QWORD *)(a1 + 56) + 32 * v37, (uint64_t)&v115);
  }
  else
  {
    v115 = 0u;
    v116 = 0u;
  }

  if (!*((_QWORD *)&v116 + 1))
    goto LABEL_33;
  if ((swift_dynamicCast() & 1) != 0)
  {
    v33 = *((_QWORD *)&v111[0] + 1);
    v34 = *(_QWORD *)&v111[0];
LABEL_30:
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_31;
LABEL_35:
    v115 = 0u;
    v116 = 0u;
LABEL_42:
    sub_23B514138(v34, v33);
LABEL_43:
    swift_bridgeObjectRelease();
    v46 = &qword_2542F9CD8;
    v47 = &v115;
LABEL_44:
    sub_23B5043F0((uint64_t)v47, v46);
LABEL_47:
    swift_bridgeObjectRelease();
    v48 = type metadata accessor for Keychain.Item();
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(a2, 1, 1, v48);
  }
LABEL_34:
  v34 = 0;
  v33 = 0xF000000000000000;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_35;
LABEL_31:
  v39 = (id)*MEMORY[0x24BDE8FA8];
  v40 = sub_23B503A0C((uint64_t)v39);
  if ((v41 & 1) != 0)
  {
    sub_23B5035B4(*(_QWORD *)(a1 + 56) + 32 * v40, (uint64_t)&v115);
  }
  else
  {
    v115 = 0u;
    v116 = 0u;
  }

  if (!*((_QWORD *)&v116 + 1))
    goto LABEL_42;
  v42 = MEMORY[0x24BEE4AD8];
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_23B514138(v34, v33);
LABEL_46:
    swift_bridgeObjectRelease();
    goto LABEL_47;
  }
  if (!*(_QWORD *)(a1 + 16))
  {
    v115 = 0u;
    v116 = 0u;
LABEL_55:
    sub_23B514138(v34, v33);
    swift_bridgeObjectRelease();
    goto LABEL_43;
  }
  v102 = v111[0];
  v43 = (id)*MEMORY[0x24BDE9128];
  v44 = sub_23B503A0C((uint64_t)v43);
  if ((v45 & 1) != 0)
  {
    sub_23B5035B4(*(_QWORD *)(a1 + 56) + 32 * v44, (uint64_t)&v115);
  }
  else
  {
    v115 = 0u;
    v116 = 0u;
  }

  if (!*((_QWORD *)&v116 + 1))
    goto LABEL_55;
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_23B514138(v34, v33);
    swift_bridgeObjectRelease();
    goto LABEL_46;
  }
  v101 = (uint8_t *)*((_QWORD *)&v111[0] + 1);
  if (!*(_QWORD *)(a1 + 16))
  {
    v115 = 0u;
    v116 = 0u;
LABEL_64:
    sub_23B5043F0((uint64_t)&v115, &qword_2542F9CD8);
    v53 = v109;
    (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v109, 1, 1, v9);
    goto LABEL_65;
  }
  v100 = *(_QWORD *)&v111[0];
  v50 = (id)*MEMORY[0x24BDE8FE0];
  v51 = sub_23B503A0C((uint64_t)v50);
  if ((v52 & 1) != 0)
  {
    sub_23B5035B4(*(_QWORD *)(a1 + 56) + 32 * v51, (uint64_t)&v115);
  }
  else
  {
    v115 = 0u;
    v116 = 0u;
  }

  if (!*((_QWORD *)&v116 + 1))
    goto LABEL_64;
  v53 = v109;
  v54 = swift_dynamicCast();
  v99 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v10 + 56);
  v99(v53, v54 ^ 1u, 1, v9);
  v55 = v10;
  v56 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v10 + 48);
  if (v56(v53, 1, v9) == 1)
  {
LABEL_65:
    sub_23B514138(v34, v33);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v46 = &qword_2542F9AC0;
    v47 = v53;
    goto LABEL_44;
  }
  v107 = v55;
  v57 = *(_OWORD **)(v55 + 32);
  ((void (*)(char *, __int128 *, uint64_t))v57)(v108, v53, v9);
  if (!*(_QWORD *)(a1 + 16))
  {
    v115 = 0u;
    v116 = 0u;
    v62 = (__int128 *)v105;
LABEL_73:
    sub_23B5043F0((uint64_t)&v115, &qword_2542F9CD8);
    v99(v62, 1, 1, v9);
    goto LABEL_74;
  }
  v109 = v57;
  v106 = v9;
  v58 = (id)*MEMORY[0x24BDE90A8];
  v59 = sub_23B503A0C((uint64_t)v58);
  v61 = a1;
  if ((v60 & 1) != 0)
  {
    sub_23B5035B4(*(_QWORD *)(a1 + 56) + 32 * v59, (uint64_t)&v115);
  }
  else
  {
    v115 = 0u;
    v116 = 0u;
  }
  v63 = MEMORY[0x24BEE0D00];

  v62 = (__int128 *)v105;
  v9 = v106;
  if (!*((_QWORD *)&v116 + 1))
    goto LABEL_73;
  v64 = swift_dynamicCast();
  v99(v62, v64 ^ 1u, 1, v9);
  if (v56(v62, 1, v9) == 1)
  {
LABEL_74:
    sub_23B514138(v34, v33);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v107 + 8))(v108, v9);
    v46 = &qword_2542F9AC0;
    v47 = v62;
    goto LABEL_44;
  }
  ((void (*)(char *, __int128 *, uint64_t))v109)(v104, v62, v9);
  if (!*(_QWORD *)(v61 + 16))
  {
    v68 = v61;
    v115 = 0u;
    v116 = 0u;
LABEL_80:
    sub_23B5043F0((uint64_t)&v115, &qword_2542F9CD8);
    goto LABEL_81;
  }
  v65 = (id)*MEMORY[0x24BDE8F50];
  v66 = sub_23B503A0C((uint64_t)v65);
  v68 = v61;
  if ((v67 & 1) != 0)
  {
    sub_23B5035B4(*(_QWORD *)(v61 + 56) + 32 * v66, (uint64_t)&v115);
  }
  else
  {
    v115 = 0u;
    v116 = 0u;
  }

  if (!*((_QWORD *)&v116 + 1))
    goto LABEL_80;
  if (swift_dynamicCast())
  {
    v69 = *((_QWORD *)&v111[0] + 1);
    v70 = *(_QWORD *)&v111[0];
    goto LABEL_94;
  }
LABEL_81:
  v113 = v68;
  if (*(_QWORD *)(v68 + 16))
  {
    swift_bridgeObjectRetain();
    v71 = v14;
    v72 = sub_23B503A0C((uint64_t)v71);
    if ((v73 & 1) != 0)
    {
      sub_23B5035B4(*(_QWORD *)(v68 + 56) + 32 * v72, (uint64_t)&v115);
    }
    else
    {
      v115 = 0u;
      v116 = 0u;
    }

  }
  else
  {
    v115 = 0u;
    v116 = 0u;
    swift_bridgeObjectRetain();
  }
  v74 = *((_QWORD *)&v116 + 1);
  sub_23B5043F0((uint64_t)&v115, &qword_2542F9CD8);
  if (v74)
  {
    *((_QWORD *)&v116 + 1) = v63;
    *(_QWORD *)&v115 = 0x455443414445523CLL;
    *((_QWORD *)&v115 + 1) = 0xEA00000000003E44;
    sub_23B503EB4(&v115, v111);
    v75 = v14;
    v76 = swift_isUniquelyReferenced_nonNull_native();
    v112 = v68;
    sub_23B5037A8(v111, v75, v76);
    v113 = v112;

    swift_bridgeObjectRelease();
  }
  if (qword_256A2BA38 != -1)
    swift_once();
  __swift_project_value_buffer(v103, (uint64_t)qword_256A2D060);
  v77 = sub_23B56A048();
  v78 = sub_23B56A834();
  v79 = v78;
  if (os_log_type_enabled(v77, v78))
  {
    LODWORD(v103) = v79;
    v80 = (uint8_t *)swift_slowAlloc();
    v99 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))swift_slowAlloc();
    *(_QWORD *)&v115 = v99;
    *(_DWORD *)v80 = 136315138;
    v98[1] = v80 + 4;
    swift_beginAccess();
    type metadata accessor for CFString(0);
    v105 = (char *)a2;
    sub_23B4FCC20(&qword_2542F9BC8, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_23B56EE30);
    swift_bridgeObjectRetain();
    v98[0] = v42 + 8;
    v81 = sub_23B56A198();
    v83 = v82;
    swift_bridgeObjectRelease();
    v112 = sub_23B5034E4(v81, v83, (uint64_t *)&v115);
    sub_23B56A918();
    a2 = v105;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23B4F9000, v77, (os_log_type_t)v103, "Missing kSecAttrAccessGroup from %s", v80, 0xCu);
    v84 = v99;
    swift_arrayDestroy();
    MEMORY[0x23B867948](v84, -1, -1);
    MEMORY[0x23B867948](v80, -1, -1);
  }

  swift_bridgeObjectRelease();
  v70 = 0;
  v69 = 0xE000000000000000;
LABEL_94:
  if (*(_QWORD *)(v68 + 16))
  {
    v85 = (id)*MEMORY[0x24BDE8F60];
    v86 = sub_23B503A0C((uint64_t)v85);
    if ((v87 & 1) != 0)
    {
      sub_23B5035B4(*(_QWORD *)(v68 + 56) + 32 * v86, (uint64_t)&v115);
    }
    else
    {
      v115 = 0u;
      v116 = 0u;
    }

  }
  else
  {
    v115 = 0u;
    v116 = 0u;
  }
  swift_bridgeObjectRelease();
  v88 = *((_QWORD *)&v102 + 1);
  if (!*((_QWORD *)&v116 + 1))
  {
    sub_23B514138(v34, v33);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23B5043F0((uint64_t)&v115, &qword_2542F9CD8);
LABEL_107:
    v90 = v106;
    v91 = *(void (**)(_QWORD, _QWORD))(v107 + 8);
    v91(v104, v106);
    v91(v108, v90);
    goto LABEL_47;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_23B514138(v34, v33);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_106;
  }
  sub_23B56385C(v113, v114, (char *)&v115);
  v89 = v115;
  if (v115 == 3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23B514138(v34, v33);
LABEL_106:
    swift_bridgeObjectRelease();
    goto LABEL_107;
  }
  v92 = v88;
  v93 = (int *)type metadata accessor for Keychain.Item();
  v94 = v109;
  v95 = v106;
  ((void (*)(char *, char *, uint64_t))v109)((char *)a2 + v93[7], v108, v106);
  ((void (*)(char *, char *, uint64_t))v94)((char *)a2 + v93[8], v104, v95);
  swift_bridgeObjectRelease();
  *a2 = v70;
  a2[1] = v69;
  v96 = v101;
  a2[2] = v100;
  a2[3] = v96;
  a2[4] = v102;
  a2[5] = v92;
  *((_BYTE *)a2 + v93[9]) = v89;
  v97 = (_QWORD *)((char *)a2 + v93[10]);
  *v97 = v34;
  v97[1] = v33;
  return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, int *))(*((_QWORD *)v93 - 1) + 56))(a2, 0, 1, v93);
}

uint64_t sub_23B5034E4(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_23B5035F0(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_23B5035B4((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_23B5035B4((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_23B5035B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_23B5035F0(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_23B56A924();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_23B505EF4(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_23B56AAE0();
  if (!v8)
  {
    sub_23B56AC18();
    __break(1u);
LABEL_17:
    result = sub_23B56AC6C();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

_OWORD *sub_23B5037A8(_OWORD *a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  _OWORD *result;
  unint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = sub_23B503A0C((uint64_t)a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = (_OWORD *)(v15[7] + 32 * v9);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
        return sub_23B503EB4(a1, v16);
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_23B503EC4();
      goto LABEL_7;
    }
    sub_23B503B94(v12, a3 & 1);
    v18 = sub_23B503A0C((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      v9 = v18;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_23B503B30(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }
  type metadata accessor for CFString(0);
  result = (_OWORD *)sub_23B56AE10();
  __break(1u);
  return result;
}

unint64_t sub_23B5038C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  void *v6;
  id v7;
  char v8;
  uint64_t v9;
  id v10;
  char v11;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    type metadata accessor for CFString(0);
    v6 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * i);
    sub_23B503AF0((unint64_t *)&unk_2542F9BB8, 255, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_23B56EE74);
    v7 = v6;
    v8 = sub_23B56A018();

    if ((v8 & 1) == 0)
    {
      v9 = ~v4;
      for (i = (i + 1) & v9; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v9)
      {
        v10 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v11 = sub_23B56A018();

        if ((v11 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_23B503A0C(uint64_t a1)
{
  uint64_t v2;

  sub_23B56AE64();
  type metadata accessor for CFString(0);
  sub_23B503AF0((unint64_t *)&unk_2542F9BB8, 255, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_23B56EE74);
  sub_23B56A024();
  v2 = sub_23B56AE88();
  return sub_23B5038C8(a1, v2);
}

void sub_23B503A98(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

void type metadata accessor for CFString(uint64_t a1)
{
  sub_23B503A98(a1, &qword_2542F9BE0);
}

uint64_t sub_23B503AF0(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x23B867894](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

_OWORD *sub_23B503B30(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_23B503EB4(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

uint64_t sub_23B503B94(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  _OWORD *v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9B68);
  v6 = sub_23B56AC54();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v33 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_22;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v11)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v33 + 8 * v18);
    ++v14;
    if (!v20)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v11)
        goto LABEL_34;
      v20 = *(_QWORD *)(v33 + 8 * v14);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v20 = *(_QWORD *)(v33 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v14 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_43;
            if (v14 >= v11)
              goto LABEL_34;
            v20 = *(_QWORD *)(v33 + 8 * v14);
            ++v21;
            if (v20)
              goto LABEL_21;
          }
        }
        v14 = v21;
      }
    }
LABEL_21:
    v10 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_22:
    v22 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v17);
    v23 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
    if ((a2 & 1) != 0)
    {
      sub_23B503EB4(v23, v34);
    }
    else
    {
      sub_23B5035B4((uint64_t)v23, (uint64_t)v34);
      v24 = v22;
    }
    sub_23B56AE64();
    type metadata accessor for CFString(0);
    sub_23B4FCC20((unint64_t *)&unk_2542F9BB8, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_23B56EE74);
    sub_23B56A024();
    result = sub_23B56AE88();
    v25 = -1 << *(_BYTE *)(v7 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v27);
      }
      while (v31 == -1);
      v15 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v22;
    result = (uint64_t)sub_23B503EB4(v34, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v15));
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v19 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v32 = 1 << *(_BYTE *)(v5 + 32);
  if (v32 >= 64)
    bzero(v19, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v32;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

_OWORD *sub_23B503EB4(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

id sub_23B503EC4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _OWORD v22[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9B68);
  v2 = *v0;
  v3 = sub_23B56AC48();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    sub_23B5035B4(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    sub_23B503EB4(v22, (_OWORD *)(*(_QWORD *)(v4 + 56) + v18));
    result = v17;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_23B504088()
{
  SecTaskRef v0;
  __SecTask *v1;
  __CFString *v2;
  CFTypeRef v3;
  uint64_t v4;
  SecTaskRef v5;
  __SecTask *v6;
  __CFString *v7;
  CFTypeRef v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;

  v0 = SecTaskCreateFromSelf(0);
  if (!v0)
  {
    v19 = 0u;
    v20 = 0u;
LABEL_8:
    sub_23B5043F0((uint64_t)&v19, &qword_2542F9CD8);
    v4 = 0;
    goto LABEL_9;
  }
  v1 = v0;
  v2 = (__CFString *)sub_23B56A264();
  v3 = SecTaskCopyValueForEntitlement(v1, v2, 0);

  if (!v3)
  {
    v19 = 0u;
    v20 = 0u;

    goto LABEL_8;
  }
  *((_QWORD *)&v20 + 1) = swift_getObjectType();

  *(_QWORD *)&v19 = v3;
  if (swift_dynamicCast())
    v4 = v18;
  else
    v4 = 0;
LABEL_9:
  v5 = SecTaskCreateFromSelf(0);
  if (!v5)
  {
    v19 = 0u;
    v20 = 0u;
    goto LABEL_13;
  }
  v6 = v5;
  v7 = (__CFString *)sub_23B56A264();
  v8 = SecTaskCopyValueForEntitlement(v6, v7, 0);

  if (v8)
  {
    *((_QWORD *)&v20 + 1) = swift_getObjectType();

    *(_QWORD *)&v19 = v8;
    goto LABEL_16;
  }
  v19 = 0u;
  v20 = 0u;

  if (!*((_QWORD *)&v20 + 1))
  {
LABEL_13:
    sub_23B5043F0((uint64_t)&v19, &qword_2542F9CD8);
    if (v4)
    {
LABEL_20:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
LABEL_16:
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9B58);
  if (swift_dynamicCast())
    v9 = v17;
  else
    v9 = 0;
  if (v4)
    goto LABEL_20;
  result = swift_bridgeObjectRelease();
  if (!v9)
  {
LABEL_24:
    if (qword_256A2BA30 != -1)
      swift_once();
    v11 = sub_23B56A060();
    __swift_project_value_buffer(v11, (uint64_t)qword_256A33BE0);
    v12 = sub_23B56A048();
    v13 = sub_23B56A840();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      v15 = swift_slowAlloc();
      *(_QWORD *)&v19 = v15;
      *(_DWORD *)v14 = 136315138;
      sub_23B5034E4(0xD000000000000016, 0x800000023B56D3B0, (uint64_t *)&v19);
      sub_23B56A918();
      _os_log_impl(&dword_23B4F9000, v12, v13, "Must have %s or keychain-access-groups entitlement.", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B867948](v15, -1, -1);
      MEMORY[0x23B867948](v14, -1, -1);
    }

    sub_23B568780();
    swift_allocError();
    *(_DWORD *)v16 = 0;
    *(_BYTE *)(v16 + 4) = 1;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_23B5043F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t NSXPCConnection.id.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v0 = sub_23B504550((uint64_t)&v4, (uint64_t)&v5);
  v2 = v1;
  sub_23B504710(v0, v1);
  return sub_23B504944(v0, v2);
}

uint64_t sub_23B5044B4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *(void **)(v0 + 48);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_23B504550(v0 + 16, v0 + 24);
  v4 = v3;
  sub_23B504710(v2, v3);
  sub_23B504944(v2, v4);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B504550(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _QWORD v7[5];

  v7[3] = MEMORY[0x24BEE1F38];
  v7[4] = MEMORY[0x24BDD04B0];
  v7[0] = a1;
  v7[1] = a2;
  v2 = __swift_project_boxed_opaque_existential_1(v7, MEMORY[0x24BEE1F38]);
  v3 = *v2;
  if (*v2)
  {
    v4 = (_BYTE *)v2[1];
    v5 = (uint64_t)&v4[-v3];
    if (v4 == (_BYTE *)v3)
    {
      v3 = 0;
    }
    else if (v5 <= 14)
    {
      v3 = sub_23B504650((_BYTE *)*v2, v4);
    }
    else
    {
      sub_23B569C70();
      swift_allocObject();
      sub_23B569C34();
      if ((unint64_t)v5 >= 0x7FFFFFFF)
      {
        sub_23B569DD8();
        v3 = swift_allocObject();
        *(_QWORD *)(v3 + 16) = 0;
        *(_QWORD *)(v3 + 24) = v5;
      }
      else
      {
        v3 = v5 << 32;
      }
    }
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  return v3;
}

uint64_t sub_23B504650(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_23B504710(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;

  sub_23B504988(a1, a2);
  v3 = v2;
  v5 = v4;
  v7 = v2;
  v8 = v4;
  sub_23B502434(v2, v4);
  sub_23B569E98();
  sub_23B504944(v3, v5);
  sub_23B569E08();
  sub_23B569E98();
  sub_23B569E08();
  sub_23B569E98();
  sub_23B569E98();
  sub_23B569E98();
  sub_23B569E98();
  sub_23B569E98();
  sub_23B569E98();
  sub_23B569E98();
  sub_23B569E98();
  sub_23B569E98();
  sub_23B569E98();
  sub_23B569E98();
  sub_23B569E98();
  sub_23B569E98();
  sub_23B569E98();
  sub_23B569E98();
  sub_23B569E98();
  sub_23B569F7C();
  return sub_23B504944(v7, v8);
}

uint64_t sub_23B504944(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

void sub_23B504988(uint64_t a1, uint64_t a2)
{
  uint64_t (*v3)(uint64_t);

  sub_23B56A138();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8];
  MEMORY[0x24BDAC7A8]();
  sub_23B56A0FC();
  MEMORY[0x24BDAC7A8]();
  sub_23B4FCC20(&qword_2542F9A20, v3, MEMORY[0x24BDC6AE8]);
  sub_23B56A0F0();
  __asm { BR              X10 }
}

uint64_t sub_23B504A8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;

  *(_QWORD *)(v7 - 128) = v5;
  *(_WORD *)(v7 - 120) = v4;
  *(_BYTE *)(v7 - 118) = BYTE2(v4);
  *(_BYTE *)(v7 - 117) = BYTE3(v4);
  *(_BYTE *)(v7 - 116) = BYTE4(v4);
  *(_BYTE *)(v7 - 115) = BYTE5(v4);
  sub_23B56A0CC();
  sub_23B504944(v5, v4);
  sub_23B56A0D8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 160) + 8))(v3, v2);
  *(_QWORD *)(v7 - 104) = v0;
  *(_QWORD *)(v7 - 96) = sub_23B4FCC20(&qword_2542F9A18, (uint64_t (*)(uint64_t))MEMORY[0x24BDC62F0], MEMORY[0x24BDC62D8]);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v7 - 128));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v6 + 16))(boxed_opaque_existential_1, v1, v0);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v7 - 128), *(_QWORD *)(v7 - 104));
  sub_23B569D0C();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v0);
  v9 = *(_QWORD *)(v7 - 144);
  __swift_destroy_boxed_opaque_existential_1(v7 - 128);
  return v9;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_23B504D18(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for WorkItemQueue.WorkItem()
{
  uint64_t result;

  result = qword_2542FA8D8;
  if (!qword_2542FA8D8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t DataProtocol.hexString.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t result;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  __int16 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int16 v19;
  unint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  char v23;

  v3 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = (char *)&v21 - v7;
  v9 = sub_23B4FC788(0xD000000000000010, 0x800000023B56B910);
  result = sub_23B56A7D4();
  if (result + 0x4000000000000000 >= 0)
  {
    v11 = sub_23B4FC220(0, (2 * result) & ~((2 * result) >> 63), 0, MEMORY[0x24BEE4AF8]);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, a1);
    sub_23B56A468();
    swift_getAssociatedConformanceWitness();
    result = sub_23B56A90C();
    if ((v23 & 1) != 0)
    {
LABEL_3:
      (*(void (**)(char *, uint64_t))(v21 + 8))(v8, AssociatedTypeWitness);
      swift_release();
      v12 = sub_23B56A258();
      swift_bridgeObjectRelease();
      return v12;
    }
    v13 = v22;
    v14 = v9 + 4;
    while (v13 >> 4 < v9[2])
    {
      v15 = *((_WORD *)v14 + (v13 >> 4));
      v17 = *((_QWORD *)v11 + 2);
      v16 = *((_QWORD *)v11 + 3);
      v18 = v17 + 1;
      if (v17 >= v16 >> 1)
      {
        result = (uint64_t)sub_23B4FC220((char *)(v16 > 1), v17 + 1, 1, v11);
        v11 = (char *)result;
      }
      *((_QWORD *)v11 + 2) = v18;
      *(_WORD *)&v11[2 * v17 + 32] = v15;
      if ((v13 & 0xF) >= v9[2])
        goto LABEL_14;
      v19 = *((_WORD *)v14 + (v13 & 0xF));
      v20 = *((_QWORD *)v11 + 3);
      if ((uint64_t)(v17 + 2) > (uint64_t)(v20 >> 1))
        v11 = sub_23B4FC220((char *)(v20 > 1), v17 + 2, 1, v11);
      *((_QWORD *)v11 + 2) = v17 + 2;
      *(_WORD *)&v11[2 * v18 + 32] = v19;
      result = sub_23B56A90C();
      v13 = v22;
      if (v23 == 1)
        goto LABEL_3;
    }
    __break(1u);
LABEL_14:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x23B86787C]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x23B867888](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_23B505154(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Keychain.Item();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for Keychain.Item()
{
  uint64_t result;

  result = qword_2542F9B70;
  if (!qword_2542F9B70)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23B5051D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9CD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

void sub_23B505260(uint64_t a1, uint64_t a2)
{
  id v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  void *v10;
  id v11;
  char isUniquelyReferenced_nonNull_native;
  id v13;
  char v14;
  id v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  id v19;
  unint64_t v20;
  char v21;
  __int128 v22;
  uint64_t inited;
  id v24;
  id v25;
  unint64_t v26;
  uint64_t v27;
  OSStatus v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  CFStringRef v34;
  __CFString *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48[4];
  __int128 v49;
  __int128 v50;

  if (!*(_QWORD *)(a1 + 16))
  {
    v50 = 0u;
    v49 = 0u;
    goto LABEL_11;
  }
  v4 = (id)*MEMORY[0x24BDE9000];
  v5 = sub_23B503A0C((uint64_t)v4);
  if ((v6 & 1) == 0)
  {
    v50 = 0u;
    v49 = 0u;

    goto LABEL_11;
  }
  sub_23B5035B4(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)&v49);

  if (!*((_QWORD *)&v50 + 1))
  {
LABEL_11:
    sub_23B5043F0((uint64_t)&v49, &qword_2542F9CD8);
    return;
  }
  v7 = MEMORY[0x24BDCDDE8];
  if ((swift_dynamicCast() & 1) == 0)
    return;
  v8 = *(_OWORD *)v48;
  sub_23B55F2AC(v48[0], v48[1]);
  if ((v9 & 1) != 0)
  {
LABEL_37:
    sub_23B504944(v8, *((unint64_t *)&v8 + 1));
    return;
  }
  v10 = (void *)*MEMORY[0x24BDE9550];
  *((_QWORD *)&v50 + 1) = v7;
  v49 = *(_OWORD *)v48;
  sub_23B503EB4(&v49, v48);
  v11 = v10;
  sub_23B502434(v8, *((unint64_t *)&v8 + 1));
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_23B5037A8(v48, v11, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease();
  *((_QWORD *)&v50 + 1) = v7;
  v49 = xmmword_23B56F430;
  sub_23B503EB4(&v49, v48);
  v13 = v4;
  v14 = swift_isUniquelyReferenced_nonNull_native();
  sub_23B5037A8(v48, v13, v14);

  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a2 + 16))
  {
    v50 = 0u;
    v49 = 0u;
LABEL_31:
    sub_23B5043F0((uint64_t)&v49, &qword_2542F9CD8);
    goto LABEL_32;
  }
  v15 = (id)*MEMORY[0x24BDE9128];
  v16 = sub_23B503A0C((uint64_t)v15);
  if ((v17 & 1) != 0)
  {
    sub_23B5035B4(*(_QWORD *)(a2 + 56) + 32 * v16, (uint64_t)&v49);
  }
  else
  {
    v50 = 0u;
    v49 = 0u;
  }

  if (!*((_QWORD *)&v50 + 1))
    goto LABEL_31;
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_32:
    swift_bridgeObjectRelease();
    if (qword_256A2BA30 != -1)
      swift_once();
    v39 = sub_23B56A060();
    __swift_project_value_buffer(v39, (uint64_t)qword_256A33BE0);
    v30 = sub_23B56A048();
    v40 = sub_23B56A834();
    if (!os_log_type_enabled(v30, v40))
    {
LABEL_38:
      sub_23B504944(v8, *((unint64_t *)&v8 + 1));

      return;
    }
    v41 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v41 = 0;
    _os_log_impl(&dword_23B4F9000, v30, v40, "SecItemCopyMatching item migration error: missing account and service.", v41, 2u);
    v42 = (uint64_t)v41;
LABEL_36:
    MEMORY[0x23B867948](v42, -1, -1);

    goto LABEL_37;
  }
  v18 = v48[1];
  if (!*(_QWORD *)(a2 + 16))
  {
    v50 = 0u;
    v49 = 0u;
LABEL_30:
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  v47 = v48[0];
  v19 = (id)*MEMORY[0x24BDE8FA8];
  v20 = sub_23B503A0C((uint64_t)v19);
  if ((v21 & 1) != 0)
  {
    sub_23B5035B4(*(_QWORD *)(a2 + 56) + 32 * v20, (uint64_t)&v49);
  }
  else
  {
    v50 = 0u;
    v49 = 0u;
  }

  if (!*((_QWORD *)&v50 + 1))
    goto LABEL_30;
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  v22 = *(_OWORD *)v48;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256A2D0C0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23B573870;
  *(_QWORD *)(inited + 32) = v15;
  *(_QWORD *)(inited + 40) = v47;
  *(_QWORD *)(inited + 48) = v18;
  *(_QWORD *)(inited + 56) = v19;
  *(_OWORD *)(inited + 64) = v22;
  v24 = v15;
  swift_bridgeObjectRetain();
  v25 = v19;
  swift_bridgeObjectRetain();
  v26 = sub_23B50F6C0(inited);
  v27 = sub_23B5634C0(v26);
  swift_bridgeObjectRelease();
  v28 = sub_23B5661A4(v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v28)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_256A2BA30 != -1)
      swift_once();
    v29 = sub_23B56A060();
    __swift_project_value_buffer(v29, (uint64_t)qword_256A33BE0);
    v30 = sub_23B56A048();
    v31 = sub_23B56A834();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = swift_slowAlloc();
      v33 = swift_slowAlloc();
      *(_QWORD *)&v49 = v33;
      *(_DWORD *)v32 = 67109378;
      LODWORD(v48[0]) = v28;
      sub_23B56A918();
      *(_WORD *)(v32 + 8) = 2082;
      v34 = SecCopyErrorMessageString(v28, 0);
      if (v34)
      {
        v35 = (__CFString *)v34;
        v36 = sub_23B56A288();
        v38 = v37;

      }
      else
      {
        v38 = 0xE90000000000003ELL;
        v36 = 0x6E776F6E6B6E753CLL;
      }
      v48[0] = sub_23B5034E4(v36, v38, (uint64_t *)&v49);
      sub_23B56A918();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23B4F9000, v30, v31, "SecItemCopyMatching item migration error: %d [%{public}s]", (uint8_t *)v32, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x23B867948](v33, -1, -1);
      v42 = v32;
      goto LABEL_36;
    }
    goto LABEL_38;
  }
  if (qword_256A2BA30 != -1)
    swift_once();
  v43 = sub_23B56A060();
  __swift_project_value_buffer(v43, (uint64_t)qword_256A33BE0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v30 = sub_23B56A048();
  v44 = sub_23B56A84C();
  if (os_log_type_enabled(v30, v44))
  {
    v45 = swift_slowAlloc();
    v46 = swift_slowAlloc();
    *(_QWORD *)&v49 = v46;
    *(_DWORD *)v45 = 136315394;
    swift_bridgeObjectRetain();
    v48[0] = sub_23B5034E4(v47, v18, (uint64_t *)&v49);
    sub_23B56A918();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v45 + 12) = 2080;
    swift_bridgeObjectRetain();
    v48[0] = sub_23B5034E4(v22, *((unint64_t *)&v22 + 1), (uint64_t *)&v49);
    sub_23B56A918();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_23B4F9000, v30, v44, "SecItemCopyMatching item migration success. s:%s, a: %s.", (uint8_t *)v45, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v46, -1, -1);
    v42 = v45;
    goto LABEL_36;
  }
  sub_23B504944(v8, *((unint64_t *)&v8 + 1));

  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

__n128 __swift_memcpy104_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

unint64_t sub_23B505A64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2542F9C08;
  if (!qword_2542F9C08)
  {
    v1 = sub_23B56AF3C();
    result = MEMORY[0x23B867894](MEMORY[0x24BDD0AE8], v1);
    atomic_store(result, (unint64_t *)&qword_2542F9C08);
  }
  return result;
}

uint64_t sub_23B505AAC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_23B56AF0C();
    result = MEMORY[0x23B867894](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t Duration.milliseconds.getter()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  result = sub_23B56AF54();
  v2 = 1000000000 * result;
  if ((unsigned __int128)(result * (__int128)1000000000) >> 64 == (1000000000 * result) >> 63)
  {
    v3 = __OFADD__(v2, v1 / 1000000000);
    v4 = v2 + v1 / 1000000000;
    if (!v3)
      return v4 / 1000000;
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_23B505B50(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_23B4FC5FC(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_23B56AA74();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_23B56AC18();
      __break(1u);
LABEL_10:
      v2 = sub_23B56A3C0();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    sub_23B56AC6C();
    __break(1u);
LABEL_14:
    result = sub_23B56AC18();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t FixedWidthInteger.data.getter(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v4 = (char *)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  if (v3)
  {
    if (v3 <= 0xE)
    {
      v5 = sub_23B504650((_BYTE *)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &v4[v3]);
    }
    else
    {
      sub_23B569C70();
      swift_allocObject();
      sub_23B569C34();
      if (v3 >= 0x7FFFFFFF)
      {
        sub_23B569DD8();
        v5 = swift_allocObject();
        *(_QWORD *)(v5 + 16) = 0;
        *(_QWORD *)(v5 + 24) = v3;
      }
      else
      {
        v5 = v3 << 32;
      }
    }
  }
  else
  {
    v5 = 0;
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v5;
}

char *sub_23B505E0C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 2 * a1 + 32);
    v6 = 2 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_23B56AC6C();
  __break(1u);
  return result;
}

uint64_t sub_23B505EF4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_23B505B50(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_23B50EE30(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_23B50EE30(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_23B505F88()
{
  return sub_23B4FCC20((unint64_t *)&unk_2542F9BD0, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_23B56EE04);
}

uint64_t sub_23B505FB4()
{
  return sub_23B4FCC20(&qword_2542F9BC8, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_23B56EE30);
}

void sub_23B505FE0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2542FAA38)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542FAA28);
    v0 = sub_23B56A900();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2542FAA38);
  }
}

uint64_t sub_23B506038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int *v17;
  int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  unsigned int v24;
  int *v25;
  __int16 v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];

  if ((a5 & 0x2000000000000000) != 0)
    v8 = HIBYTE(a5) & 0xF;
  else
    v8 = a4 & 0xFFFFFFFFFFFFLL;
  if (!a2)
  {
    v12 = 0;
    v13 = 0;
    a3 = 0;
    v16 = 1;
    goto LABEL_31;
  }
  result = swift_bridgeObjectRetain();
  if (!a3)
  {
    v12 = 0;
    v13 = 0;
    v16 = 1;
    goto LABEL_30;
  }
  if (a3 < 0)
  {
    __break(1u);
    return result;
  }
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = a5 & 0xFFFFFFFFFFFFFFLL;
  v30 = a1;
  v16 = 1;
  v17 = &dword_23B50CA2C;
  v18 = &dword_23B50CA1C;
  while (1)
  {
    if ((v16 & 1) == 0)
    {
      v16 = 1;
      LOWORD(v19) = v13;
      v13 = 0;
      goto LABEL_9;
    }
    if (v12 >= v8)
      break;
    if ((a5 & 0x1000000000000000) != 0)
    {
      v22 = v15;
      v23 = v17;
      v24 = sub_23B56AA5C();
      v18 = &dword_23B50CA1C;
      v17 = v23;
      v15 = v22;
      v19 = v24;
    }
    else
    {
      if ((a5 & 0x2000000000000000) == 0)
      {
        v20 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((a4 & 0x1000000000000000) == 0)
        {
          v27 = v15;
          v28 = v17;
          v20 = sub_23B56AAE0();
          v18 = &dword_23B50CA1C;
          v17 = v28;
          v15 = v27;
        }
        v19 = *(unsigned __int8 *)(v20 + v12);
        if (*(char *)(v20 + v12) < 0)
          __asm { BR              X9 }
        ++v12;
        v16 = 1;
        goto LABEL_9;
      }
      v31[0] = a4;
      v31[1] = v15;
      v19 = *((unsigned __int8 *)v31 + v12);
      if (*((char *)v31 + v12) < 0)
        __asm { BR              X9 }
      v21 = 1;
    }
    v12 += v21;
    if (HIWORD(v19))
    {
      v29 = v15;
      v25 = v18;
      v13 = sub_23B56AED0();
      v26 = sub_23B56AED0();
      v18 = v25;
      v17 = &dword_23B50CA2C;
      v15 = v29;
      LOWORD(v19) = v26;
      v16 = 0;
    }
    else
    {
      v16 = 1;
    }
LABEL_9:
    *(_WORD *)(a2 + 2 * v14++) = v19;
    if (a3 == v14)
      goto LABEL_29;
  }
  v16 = 1;
  a3 = v14;
LABEL_29:
  a1 = v30;
LABEL_30:
  swift_bridgeObjectRelease();
LABEL_31:
  *(_QWORD *)a1 = a4;
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v8;
  *(_WORD *)(a1 + 32) = v13;
  *(_BYTE *)(a1 + 34) = v16;
  return a3;
}

unint64_t sub_23B506358()
{
  unint64_t result;

  result = qword_2542F9A10;
  if (!qword_2542F9A10)
  {
    result = MEMORY[0x23B867894](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_2542F9A10);
  }
  return result;
}

uint64_t Date.localISO8601.getter()
{
  return sub_23B4FCCF4(&qword_2542F98C0, (void **)&qword_2542F98F0);
}

ValueMetadata *type metadata accessor for Keychain.Error()
{
  return &type metadata for Keychain.Error;
}

ValueMetadata *type metadata accessor for Keychain.DataProtectionClass()
{
  return &type metadata for Keychain.DataProtectionClass;
}

uint64_t withOnceCheckedThrowingContinuation<A>(function:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  return swift_task_switch();
}

uint64_t sub_23B5063F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23B4FC0A4(a1, a2);
}

ValueMetadata *type metadata accessor for XPCServiceDescription()
{
  return &type metadata for XPCServiceDescription;
}

uint64_t type metadata accessor for WorkItemQueue(uint64_t a1)
{
  return sub_23B504D18(a1, (uint64_t *)&unk_2542FA8C8);
}

uint64_t dispatch thunk of WorkItemQueue.flushQueue()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 344) + *(_QWORD *)(*(_QWORD *)v0 + 344));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_23B4FAC98;
  return v4();
}

uint64_t sub_23B506494()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[14] = v0;
  v2 = sub_23B569FA0();
  v1[15] = v2;
  v1[16] = *(_QWORD *)(v2 - 8);
  v1[17] = swift_task_alloc();
  v1[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B50650C()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B506540()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t static Transaction.currentNSXPCConnection.getter()
{
  return sub_23B4FBCE4(&qword_2542FAE18);
}

uint64_t static SystemInfo.osVersion.getter()
{
  void *v0;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _BYTE v7[24];
  uint64_t v8;

  v0 = (void *)MEMORY[0x23B867378]();
  sub_23B4FF43C((uint64_t)v7);
  objc_autoreleasePoolPop(v0);
  if (v8)
  {
    if (swift_dynamicCast())
      return v6;
  }
  else
  {
    sub_23B5043F0((uint64_t)v7, &qword_2542F9CD8);
  }
  if (qword_2542FAD78 != -1)
    swift_once();
  v2 = sub_23B56A060();
  __swift_project_value_buffer(v2, (uint64_t)qword_2542FC458);
  v3 = sub_23B56A048();
  v4 = sub_23B56A834();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_23B4F9000, v3, v4, "Could not get OS version", v5, 2u);
    MEMORY[0x23B867948](v5, -1, -1);
  }

  return 0;
}

uint64_t static SystemInfo.platform.getter()
{
  return 0x736F656E6F687069;
}

uint64_t static SystemInfo.isInternalBuild.getter()
{
  return os_variant_has_internal_content();
}

uint64_t static SystemInfo.uniqueDeviceID.getter()
{
  void *v0;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _BYTE v7[24];
  uint64_t v8;

  v0 = (void *)MEMORY[0x23B867378]();
  sub_23B4FF43C((uint64_t)v7);
  objc_autoreleasePoolPop(v0);
  if (v8)
  {
    if (swift_dynamicCast())
      return v6;
  }
  else
  {
    sub_23B5043F0((uint64_t)v7, &qword_2542F9CD8);
  }
  if (qword_2542FAD78 != -1)
    swift_once();
  v2 = sub_23B56A060();
  __swift_project_value_buffer(v2, (uint64_t)qword_2542FC458);
  v3 = sub_23B56A048();
  v4 = sub_23B56A834();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_23B4F9000, v3, v4, "Could not get device unique id", v5, 2u);
    MEMORY[0x23B867948](v5, -1, -1);
  }

  return 0;
}

uint64_t static SystemInfo.buildVersion.getter()
{
  void *v0;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _BYTE v7[24];
  uint64_t v8;

  v0 = (void *)MEMORY[0x23B867378]();
  sub_23B4FF43C((uint64_t)v7);
  objc_autoreleasePoolPop(v0);
  if (v8)
  {
    if (swift_dynamicCast())
      return v6;
  }
  else
  {
    sub_23B5043F0((uint64_t)v7, &qword_2542F9CD8);
  }
  if (qword_2542FAD78 != -1)
    swift_once();
  v2 = sub_23B56A060();
  __swift_project_value_buffer(v2, (uint64_t)qword_2542FC458);
  v3 = sub_23B56A048();
  v4 = sub_23B56A834();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_23B4F9000, v3, v4, "Could not get build version", v5, 2u);
    MEMORY[0x23B867948](v5, -1, -1);
  }

  return 0;
}

uint64_t static SystemInfo.productType.getter()
{
  void *v0;
  uint64_t v2;
  _BYTE v3[24];
  uint64_t v4;

  v0 = (void *)MEMORY[0x23B867378]();
  sub_23B4FF43C((uint64_t)v3);
  objc_autoreleasePoolPop(v0);
  if (v4)
  {
    if (swift_dynamicCast())
      return v2;
  }
  else
  {
    sub_23B5043F0((uint64_t)v3, &qword_2542F9CD8);
  }
  return 0;
}

uint64_t static SystemInfo.deviceClass.getter()
{
  void *v0;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _BYTE v7[24];
  uint64_t v8;

  v0 = (void *)MEMORY[0x23B867378]();
  sub_23B4FF43C((uint64_t)v7);
  objc_autoreleasePoolPop(v0);
  if (v8)
  {
    if (swift_dynamicCast())
      return v6;
  }
  else
  {
    sub_23B5043F0((uint64_t)v7, &qword_2542F9CD8);
  }
  if (qword_2542FAD78 != -1)
    swift_once();
  v2 = sub_23B56A060();
  __swift_project_value_buffer(v2, (uint64_t)qword_2542FC458);
  v3 = sub_23B56A048();
  v4 = sub_23B56A834();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_23B4F9000, v3, v4, "Could not get device class", v5, 2u);
    MEMORY[0x23B867948](v5, -1, -1);
  }

  return 0;
}

uint64_t static SystemInfo.regionCode.getter()
{
  void *v0;
  uint64_t v2;
  _BYTE v3[24];
  uint64_t v4;

  v0 = (void *)MEMORY[0x23B867378]();
  sub_23B4FF43C((uint64_t)v3);
  objc_autoreleasePoolPop(v0);
  if (v4)
  {
    if (swift_dynamicCast())
      return v2;
  }
  else
  {
    sub_23B5043F0((uint64_t)v3, &qword_2542F9CD8);
  }
  return 0;
}

uint64_t String.replaceCharactersFromSet(characterSet:replacementString:)()
{
  uint64_t v0;

  sub_23B506358();
  sub_23B56A930();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9B58);
  sub_23B506D60();
  v0 = sub_23B56A204();
  swift_bridgeObjectRelease();
  return v0;
}

unint64_t sub_23B506D60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2542F99A0;
  if (!qword_2542F99A0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542F9B58);
    result = MEMORY[0x23B867894](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&qword_2542F99A0);
  }
  return result;
}

Swift::String __swiftcall String.deletingPrefix(_:)(Swift::String a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  Swift::String result;

  v3 = v2;
  v4 = v1;
  v5 = sub_23B56A420();
  swift_bridgeObjectRetain();
  if ((v5 & 1) != 0)
  {
    v6 = sub_23B56A378();
    v7 = sub_23B507AE8(v6, v4, v3);
    v9 = v8;
    v11 = v10;
    v13 = v12;
    swift_bridgeObjectRelease();
    v4 = MEMORY[0x23B866634](v7, v9, v11, v13);
    v3 = v14;
    swift_bridgeObjectRelease();
  }
  v15 = v4;
  v16 = (void *)v3;
  result._object = v16;
  result._countAndFlagsBits = v15;
  return result;
}

Swift::String __swiftcall String.randomString(length:)(Swift::Int length)
{
  Swift::Int v1;
  uint64_t v2;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String result;
  uint64_t v7;
  Swift::Int v8;
  unint64_t v9;

  v8 = 0;
  v9 = 0xE000000000000000;
  if ((length & 0x8000000000000000) == 0)
  {
    v1 = length;
    if (!length)
    {
      length = 0;
      v3 = (void *)0xE000000000000000;
      goto LABEL_19;
    }
    v2 = 0;
    while (v2 != v1)
    {
      length = sub_23B56A378();
      if (length < 0)
        goto LABEL_16;
      v4 = length;
      if (!length)
        goto LABEL_17;
      v7 = 0;
      MEMORY[0x23B867960](&v7, 8);
      if (v4 > v7 * v4)
      {
        v5 = -(uint64_t)v4 % v4;
        while (v5 > v7 * v4)
        {
          v7 = 0;
          MEMORY[0x23B867960](&v7, 8);
        }
      }
      ++v2;
      sub_23B56A39C();
      sub_23B56A444();
      sub_23B56A3A8();
      length = swift_bridgeObjectRelease();
      if (v2 == v1)
      {
        length = v8;
        v3 = (void *)v9;
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result._object = v3;
  result._countAndFlagsBits = length;
  return result;
}

uint64_t PartialMatchCase<>.init(containingRawValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  char *v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[2];
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v33 = a4;
  v35 = a5;
  v32 = sub_23B56A900();
  v8 = *(_QWORD *)(v32 - 8);
  v9 = MEMORY[0x24BDAC7A8](v32);
  v31 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v30 - v11;
  v30[1] = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v17 = (char *)v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)v30 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)v30 - v21;
  v34 = a1;
  static PartialMatchCase<>.first(containing:)(a1, a2, a3, v33);
  v23 = *(_QWORD *)(a2 - 8);
  v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
  if (v24(v12, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v32);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v34, AssociatedTypeWitness);
  }
  else
  {
    v33 = v8;
    sub_23B56A4BC();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v12, a2);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v22, v20, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v22, AssociatedTypeWitness);
    v25 = v31;
    sub_23B56A4C8();
    v26 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v26(v34, AssociatedTypeWitness);
    v26((uint64_t)v22, AssociatedTypeWitness);
    if (!v24(v25, 1, a2))
    {
      v28 = v35;
      (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v35, v25, a2);
      v27 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v28, v27, 1, a2);
    }
    (*(void (**)(char *, uint64_t))(v33 + 8))(v25, v32);
  }
  v27 = 1;
  v28 = v35;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v28, v27, 1, a2);
}

uint64_t static PartialMatchCase<>.first(containing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = &v13[-v10];
  sub_23B56AA8C();
  v14 = a2;
  v15 = a3;
  v16 = a4;
  v17 = a1;
  swift_getAssociatedConformanceWitness();
  sub_23B56A498();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
}

uint64_t sub_23B507314()
{
  uint64_t AssociatedTypeWitness;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char v4;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v1 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v3 = (char *)&v6 - v2;
  sub_23B56A4BC();
  v4 = sub_23B56A93C();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
  return v4 & 1;
}

uint64_t sub_23B5073FC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

BOOL sub_23B507450(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_23B507480@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_23B50748C(uint64_t a1, uint64_t a2)
{
  return sub_23B5075E8(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF9E0]);
}

uint64_t sub_23B5074A4(uint64_t a1, uint64_t a2)
{
  return sub_23B5075E8(a1, a2, MEMORY[0x24BEE0CD8]);
}

uint64_t sub_23B5074B8(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_23B56A270();
  *a2 = 0;
  return result;
}

uint64_t sub_23B50752C(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_23B56A27C();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_23B5075A8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_23B56A288();
  v2 = sub_23B56A264();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_23B5075E8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_23B56A288();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_23B507624()
{
  sub_23B56A288();
  sub_23B56A36C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23B507664()
{
  uint64_t v0;

  sub_23B56A288();
  sub_23B56AE64();
  sub_23B56A36C();
  v0 = sub_23B56AE88();
  swift_bridgeObjectRelease();
  return v0;
}

void sub_23B5076D4(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_23B5076DC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_23B5076F0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_23B507704@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

_QWORD *sub_23B507718@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_23B507744@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_23B507768(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_23B50777C(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_23B507790(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_23B5077A4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_23B5077B8(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_23B5077CC(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_23B5077E0(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_23B5077F4()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_23B507804()
{
  return sub_23B56A9F0();
}

_QWORD *sub_23B50781C(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t sub_23B507830()
{
  MEMORY[0x23B867894](&unk_23B56EE74);
  return sub_23B56A024();
}

uint64_t sub_23B50787C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_23B56A288();
  v2 = v1;
  if (v0 == sub_23B56A288() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_23B56AD98();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

BOOL sub_23B507904(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_23B507918@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = sub_23B507D5C(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_23B507958@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_23B56A288();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_23B507980()
{
  sub_23B4FCC20(&qword_256A2BBB0, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_23B56ED64);
  sub_23B4FCC20((unint64_t *)&unk_256A2BBB8, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_23B56ED04);
  return sub_23B56AC78();
}

uint64_t sub_23B507A04@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_23B56A264();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_23B507A48()
{
  sub_23B4FCC20(&qword_256A2BBF8, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_23B56F220);
  sub_23B4FCC20((unint64_t *)&unk_256A2BC00, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_23B56F174);
  return sub_23B56AC78();
}

_QWORD *sub_23B507ACC@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_23B507ADC(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

unint64_t sub_23B507AE8(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = v4 | (v3 << 16);
    result = sub_23B56A390();
    if ((v6 & 1) != 0)
      result = v5;
    if (4 * v3 >= result >> 14)
      return sub_23B56A45C();
  }
  __break(1u);
  return result;
}

uint64_t sub_23B507B84()
{
  return sub_23B507314() & 1;
}

void type metadata accessor for Options(uint64_t a1)
{
  sub_23B503A98(a1, &qword_256A2BB68);
}

uint64_t sub_23B507BB8(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_23B507BD8(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for os_activity_scope_state_s(uint64_t a1)
{
  sub_23B503A98(a1, &qword_256A2BB70);
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
  sub_23B503A98(a1, &qword_2542F9888);
}

uint64_t sub_23B507C28()
{
  return sub_23B4FCC20(&qword_256A2BB78, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_23B56ECC8);
}

uint64_t sub_23B507C54()
{
  return sub_23B4FCC20(&qword_256A2BB80, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_23B56EC9C);
}

uint64_t sub_23B507C80()
{
  return sub_23B4FCC20(&qword_256A2BB88, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_23B56ED38);
}

uint64_t sub_23B507CAC()
{
  return sub_23B4FCC20(&qword_256A2BB90, (uint64_t (*)(uint64_t))type metadata accessor for Options, (uint64_t)&unk_23B56EED4);
}

uint64_t sub_23B507CD8()
{
  return sub_23B4FCC20(&qword_256A2BB98, (uint64_t (*)(uint64_t))type metadata accessor for Options, (uint64_t)&unk_23B56EEA0);
}

uint64_t sub_23B507D04()
{
  return sub_23B4FCC20(&qword_256A2BBA0, (uint64_t (*)(uint64_t))type metadata accessor for Options, (uint64_t)&unk_23B56EF00);
}

uint64_t sub_23B507D30()
{
  return sub_23B4FCC20(&qword_256A2BBA8, (uint64_t (*)(uint64_t))type metadata accessor for Options, (uint64_t)&unk_23B56EF3C);
}

uint64_t sub_23B507D5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

void type metadata accessor for CFDictionary(uint64_t a1)
{
  sub_23B503A98(a1, (unint64_t *)&unk_2542F99D0);
}

void type metadata accessor for CFNotificationName(uint64_t a1)
{
  sub_23B503A98(a1, &qword_256A2BBC8);
}

void type metadata accessor for CFNotificationCenter(uint64_t a1)
{
  sub_23B503A98(a1, &qword_256A2BBD0);
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
  sub_23B503A98(a1, &qword_256A2BBD8);
}

uint64_t sub_23B507DE4()
{
  return sub_23B4FCC20(&qword_256A2BBE0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_23B56F138);
}

uint64_t sub_23B507E10()
{
  return sub_23B4FCC20(&qword_256A2BBE8, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_23B56F10C);
}

uint64_t sub_23B507E3C()
{
  return sub_23B4FCC20(&qword_256A2BBF0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_23B56F1A8);
}

void static Endianness.current.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t Endianness.description.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x656C7474696C2ELL;
  if (*v0 != 1)
    v1 = 1734959662;
  if (*v0)
    return v1;
  else
    return 0x6E776F6E6B6E752ELL;
}

BOOL static Endianness.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t Endianness.hash(into:)()
{
  return sub_23B56AE70();
}

uint64_t Endianness.hashValue.getter()
{
  sub_23B56AE64();
  sub_23B56AE70();
  return sub_23B56AE88();
}

BOOL sub_23B507F5C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_23B507F70()
{
  sub_23B56AE64();
  sub_23B56AE70();
  return sub_23B56AE88();
}

uint64_t sub_23B507FB4()
{
  return sub_23B56AE70();
}

uint64_t sub_23B507FDC()
{
  sub_23B56AE64();
  sub_23B56AE70();
  return sub_23B56AE88();
}

unint64_t sub_23B508020()
{
  unint64_t result;

  result = qword_256A2BCD0;
  if (!qword_256A2BCD0)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for Endianness, &type metadata for Endianness);
    atomic_store(result, (unint64_t *)&qword_256A2BCD0);
  }
  return result;
}

uint64_t sub_23B508064()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x656C7474696C2ELL;
  if (*v0 != 1)
    v1 = 1734959662;
  if (*v0)
    return v1;
  else
    return 0x6E776F6E6B6E752ELL;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for Endianness(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Endianness(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23B5081A0 + 4 * byte_23B56F269[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23B5081D4 + 4 * byte_23B56F264[v4]))();
}

uint64_t sub_23B5081D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23B5081DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23B5081E4);
  return result;
}

uint64_t sub_23B5081F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23B5081F8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23B5081FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23B508204(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23B508210(unsigned __int8 *a1)
{
  return *a1;
}

ValueMetadata *type metadata accessor for Endianness()
{
  return &type metadata for Endianness;
}

uint64_t sub_23B50822C()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static XPCAcceptedClient.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  char v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for FM.XPCSession(0, AssociatedTypeWitness, v7, v8);
  v9 = *(void (**)(uint64_t, uint64_t))(a4 + 24);
  v9(a3, a4);
  v9(a3, a4);
  v10 = static FM.XPCSession.== infix(_:_:)();
  swift_release();
  swift_release();
  return v10 & 1;
}

uint64_t XPCAcceptedClient.proxy(errorHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  return swift_task_switch();
}

uint64_t sub_23B508338()
{
  uint64_t *v0;
  _QWORD *v1;

  v0[8] = (*(uint64_t (**)(uint64_t))(v0[6] + 24))(v0[5]);
  v1 = (_QWORD *)swift_task_alloc();
  v0[9] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = sub_23B5083A0;
  return sub_23B4FCD7C(v0[2], v0[3], v0[4]);
}

uint64_t sub_23B5083A0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23B508414()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

BOOL static XPCClientError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t XPCClientError.hash(into:)()
{
  return sub_23B56AE70();
}

uint64_t XPCClientError.hashValue.getter()
{
  sub_23B56AE64();
  sub_23B56AE70();
  return sub_23B56AE88();
}

BOOL sub_23B5084CC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

unint64_t sub_23B5084F8()
{
  unint64_t result;

  result = qword_256A2BCE8;
  if (!qword_256A2BCE8)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for XPCClientError, &type metadata for XPCClientError);
    atomic_store(result, (unint64_t *)&qword_256A2BCE8);
  }
  return result;
}

uint64_t dispatch thunk of XPCClient.session.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 16) + *(_QWORD *)(a2 + 16));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23B4FC004;
  return v7(a1, a2);
}

uint64_t getEnumTagSinglePayload for XPCClientError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCClientError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23B508684 + 4 * byte_23B56F325[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23B5086B8 + 4 * byte_23B56F320[v4]))();
}

uint64_t sub_23B5086B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23B5086C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23B5086C8);
  return result;
}

uint64_t sub_23B5086D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23B5086DCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23B5086E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23B5086E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_23B5086F4(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for XPCClientError()
{
  return &type metadata for XPCClientError;
}

uint64_t DataProtocol.bytes.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
  return sub_23B56A5AC();
}

uint64_t DataProtocol.nullTerminated.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v30;
  char v31;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v27 = (char *)&v22 - v2;
  v3 = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v4 = sub_23B56ABC4();
  v25 = *(_QWORD *)(v4 - 8);
  v26 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v22 - v6;
  v8 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23B56A900();
  v23 = *(_QWORD *)(v11 - 8);
  v24 = v11;
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v22 - v13;
  v15 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v22 - v16;
  v31 = 0;
  v18 = v30;
  sub_23B56A804();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v18, a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v3) == 1)
  {
    sub_23B56A7E0();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a1);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v14, v24);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a1);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v14, v3);
  }
  result = sub_23B56A240();
  if ((result & 1) != 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v7, v17, v3);
    v20 = v26;
    MEMORY[0x23B867894](MEMORY[0x24BEE2C68], v26);
    sub_23B56A7F8();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v20);
    swift_getAssociatedConformanceWitness();
    v21 = sub_23B569E8C();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v3);
    return v21;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_23B508AD8(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x24BDAC8D0];
  v3[3] = MEMORY[0x24BDCDDE8];
  v3[4] = MEMORY[0x24BDCDDC8];
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_23B508B3C
     + *((int *)qword_23B508D70 + (__swift_project_boxed_opaque_existential_1(v3, MEMORY[0x24BDCDDE8])[1] >> 62));
  __asm { BR              X10 }
}

uint64_t sub_23B508B4C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v6 = v2;
  v7 = v3;
  v8 = BYTE2(v3);
  v9 = BYTE3(v3);
  v10 = BYTE4(v3);
  v11 = BYTE5(v3);
  sub_23B502434(v1, v0);
  sub_23B4FD194(&v6, (_BYTE *)&v6 + BYTE6(v3), &v12);
  sub_23B504944(v1, v0);
  v4 = v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  return v4;
}

uint64_t sub_23B508D80(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];

  v8[3] = MEMORY[0x24BEE0F88];
  v8[4] = MEMORY[0x24BDCFB90];
  v8[0] = a1;
  v8[1] = a2;
  v2 = __swift_project_boxed_opaque_existential_1(v8, MEMORY[0x24BEE0F88]);
  v3 = (_BYTE *)*v2;
  if (*v2 && (v4 = (_BYTE *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      v6 = sub_23B504650(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      v6 = sub_23B50D16C((uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      v6 = sub_23B4FD208((uint64_t)v3, (uint64_t)v4);
    }
  }
  else
  {
    v6 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v6;
}

uint64_t sub_23B508E38(uint64_t a1, unint64_t a2)
{
  __int128 v3[2];
  uint64_t v4;
  __int128 v5;
  _QWORD v6[4];
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v7 = a1;
  v8 = a2;
  *(_QWORD *)&v5 = a1;
  *((_QWORD *)&v5 + 1) = a2;
  sub_23B502434(a1, a2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256A2BD50);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256A2BD58);
  if (!swift_dynamicCast())
  {
    v4 = 0;
    memset(v3, 0, sizeof(v3));
    sub_23B50E024((uint64_t)v3);
    __asm { BR              X10 }
  }
  sub_23B500D98(v3, (uint64_t)v6);
  __swift_project_boxed_opaque_existential_1(v6, v6[3]);
  sub_23B569D0C();
  sub_23B504944(v7, v8);
  v3[0] = v5;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  return *(_QWORD *)&v3[0];
}

uint64_t DataProtocol.nullTerminatedUTF8String.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = sub_23B56A2E8();
  MEMORY[0x24BDAC7A8](v2);
  v3 = DataProtocol.nullTerminated.getter(a1);
  sub_23B508AD8(v3, v4);
  v6 = v5;
  v8 = v7;
  sub_23B56A2C4();
  v9 = sub_23B56A2A0();
  sub_23B504944(v6, v8);
  return v9;
}

uint64_t DataProtocol.isNull.getter()
{
  return sub_23B56A480() & 1;
}

BOOL sub_23B509510(_BYTE *a1)
{
  return *a1 == 0;
}

uint64_t DataProtocol.hash(algorithm:)()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v6;
  _QWORD v8[2];
  uint64_t v9[3];
  uint64_t v10;
  uint64_t v11;

  v0 = sub_23B56A0FC();
  v1 = (uint64_t (*)(uint64_t))MEMORY[0x24BDC62F0];
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23B56A138();
  sub_23B4FCC20(&qword_2542F9A20, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
  sub_23B56A0E4();
  v10 = v0;
  v11 = sub_23B4FCC20(&qword_2542F9A18, v1, MEMORY[0x24BDC62D8]);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v9);
  (*(void (**)(uint64_t *, char *, uint64_t))(v2 + 16))(boxed_opaque_existential_1, v4, v0);
  __swift_project_boxed_opaque_existential_1(v9, v10);
  sub_23B569D0C();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v0);
  v6 = v8[1];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  return v6;
}

uint64_t DataProtocol.hmac(key:algorithm:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD v17[2];
  uint64_t v18;
  unint64_t v19;

  v17[0] = a5;
  v7 = sub_23B56A114();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2BD00);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1;
  v19 = a2;
  sub_23B502434(a1, a2);
  sub_23B56A108();
  sub_23B56A138();
  sub_23B4FCC20(&qword_2542F9A20, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
  sub_23B56A12C();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  sub_23B56A120();
  v15 = v18;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return v15;
}

uint64_t DataProtocol.stableUUID.getter()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v4;

  v0 = DataProtocol.hash(algorithm:)();
  v2 = v1;
  v4 = v1;
  sub_23B502434(v0, v1);
  sub_23B569E98();
  sub_23B504944(v0, v2);
  sub_23B569E08();
  sub_23B569E98();
  sub_23B569E08();
  sub_23B569E98();
  sub_23B569E98();
  sub_23B569E98();
  sub_23B569E98();
  sub_23B569E98();
  sub_23B569E98();
  sub_23B569E98();
  sub_23B569E98();
  sub_23B569E98();
  sub_23B569E98();
  sub_23B569E98();
  sub_23B569E98();
  sub_23B569E98();
  sub_23B569E98();
  sub_23B569E98();
  sub_23B569E98();
  sub_23B569F7C();
  return sub_23B504944(v0, v4);
}

uint64_t DataProtocol.intValue.getter(uint64_t a1)
{
  uint64_t result;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  int v21;
  unsigned __int8 v22;
  char v23;
  _QWORD v24[3];

  result = DataProtocol.hexString.getter(a1);
  v3 = v2;
  v4 = HIBYTE(v2) & 0xF;
  v5 = result & 0xFFFFFFFFFFFFLL;
  if ((v3 & 0x2000000000000000) != 0)
    v6 = v4;
  else
    v6 = result & 0xFFFFFFFFFFFFLL;
  if (!v6)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((v3 & 0x1000000000000000) != 0)
  {
    v8 = (uint64_t)sub_23B50C1AC(result, v3, 16);
    v10 = v23;
    goto LABEL_48;
  }
  if ((v3 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
      v7 = (unsigned __int8 *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v7 = (unsigned __int8 *)sub_23B56AAE0();
    v8 = (uint64_t)sub_23B50C290(v7, v5, 16);
    v10 = v9 & 1;
LABEL_48:
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
      return v8;
    return 0;
  }
  v24[0] = result;
  v24[1] = v3 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (v4)
    {
      v16 = v4 - 1;
      if (v16)
      {
        v8 = 0;
        v17 = (unsigned __int8 *)v24 + 1;
        while (1)
        {
          v18 = *v17;
          v19 = v18 - 48;
          if ((v18 - 48) >= 0xA)
          {
            if ((v18 - 65) < 6)
            {
              v19 = v18 - 55;
            }
            else
            {
              if ((v18 - 97) > 5)
                goto LABEL_47;
              v19 = v18 - 87;
            }
          }
          if ((unint64_t)(v8 - 0x800000000000000) >> 60 != 15)
            break;
          v15 = __OFADD__(16 * v8, v19);
          v8 = 16 * v8 + v19;
          if (v15)
            break;
          ++v17;
          if (!--v16)
          {
LABEL_46:
            v10 = 0;
            goto LABEL_48;
          }
        }
      }
      goto LABEL_47;
    }
  }
  else
  {
    if (result != 45)
    {
      if (v4)
      {
        v8 = 0;
        v20 = (unsigned __int8 *)v24;
        while (1)
        {
          v21 = *v20;
          v22 = v21 - 48;
          if ((v21 - 48) >= 0xA)
          {
            if ((v21 - 65) < 6)
            {
              v22 = v21 - 55;
            }
            else
            {
              if ((v21 - 97) > 5)
                goto LABEL_47;
              v22 = v21 - 87;
            }
          }
          if ((unint64_t)(v8 - 0x800000000000000) >> 60 != 15)
            break;
          v15 = __OFADD__(16 * v8, v22);
          v8 = 16 * v8 + v22;
          if (v15)
            break;
          ++v20;
          if (!--v4)
            goto LABEL_46;
        }
      }
      goto LABEL_47;
    }
    if (v4)
    {
      v11 = v4 - 1;
      if (v11)
      {
        v8 = 0;
        v12 = (unsigned __int8 *)v24 + 1;
        while (1)
        {
          v13 = *v12;
          v14 = v13 - 48;
          if ((v13 - 48) >= 0xA)
          {
            if ((v13 - 65) < 6)
            {
              v14 = v13 - 55;
            }
            else
            {
              if ((v13 - 97) > 5)
                break;
              v14 = v13 - 87;
            }
          }
          if ((unint64_t)(v8 - 0x800000000000000) >> 60 != 15)
            break;
          v15 = __OFSUB__(16 * v8, v14);
          v8 = 16 * v8 - v14;
          if (v15)
            break;
          ++v12;
          if (!--v11)
            goto LABEL_46;
        }
      }
LABEL_47:
      v8 = 0;
      v10 = 1;
      goto LABEL_48;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL static Data.DataError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t Data.DataError.hash(into:)()
{
  return sub_23B56AE70();
}

uint64_t Data.DataError.hashValue.getter()
{
  sub_23B56AE64();
  sub_23B56AE70();
  return sub_23B56AE88();
}

uint64_t sub_23B509D24()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;

  if ((sub_23B56A378() & 1) != 0)
  {
LABEL_33:
    swift_bridgeObjectRelease();
    return 0;
  }
  v0 = sub_23B56A324();
  v2 = sub_23B505B50(v0, v1);
  swift_bridgeObjectRelease();
  v3 = sub_23B56A378();
  if (v3 >= 0)
    v4 = v3;
  else
    v4 = v3 + 1;
  v5 = sub_23B50A168(0, v4 >> 1);
  result = sub_23B56A378();
  if (result <= 0)
  {
LABEL_31:
    swift_release();
    v19 = sub_23B50D1E4(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v19;
  }
  v7 = result;
  v8 = 0;
  v9 = v2 + 32;
  while (1)
  {
    v10 = __OFADD__(v8, 2) ? 0x7FFFFFFFFFFFFFFFLL : v8 + 2;
    if ((v8 & 0x8000000000000000) != 0)
      break;
    v11 = *(_QWORD *)(v2 + 16);
    if (v8 >= v11)
      goto LABEL_36;
    if (v8 + 1 >= v11)
      goto LABEL_37;
    v12 = *(unsigned __int8 *)(v9 + v8);
    v13 = *(unsigned __int8 *)(v9 + v8 + 1);
    if (!isxdigit(v12) || (result = isxdigit(v13), !(_DWORD)result))
    {
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_33;
    }
    if (v12 >= 0x41)
      v14 = 55;
    else
      v14 = 48;
    v15 = v12 - v14;
    if ((v15 & 0xFFFFFF00) != 0)
      goto LABEL_38;
    if (v13 >= 0x41)
      v16 = 55;
    else
      v16 = 48;
    v17 = v13 - v16;
    if ((v17 & 0xFFFFFF00) != 0)
      goto LABEL_39;
    if (v15 > 0xFu)
      goto LABEL_40;
    v18 = 16 * (v15 & 0xF) + v17;
    if (((16 * (v15 & 0xF) + v17) & 0x100) != 0)
      goto LABEL_41;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_23B50C9C8(v5);
      v5 = result;
    }
    if (v8 >> 1 >= *(_QWORD *)(v5 + 16))
      goto LABEL_42;
    *(_BYTE *)(v5 + (v8 >> 1) + 32) = v18;
    v8 = v10;
    if (v10 >= v7)
      goto LABEL_31;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t Data.init<A>(hexString:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  if ((sub_23B56A7D4() & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
    return 0;
  }
  v4 = sub_23B56A948();
  v6 = sub_23B505B50(v4, v5);
  swift_bridgeObjectRelease();
  v7 = sub_23B56A7D4();
  if (v7 >= 0)
    v8 = v7;
  else
    v8 = v7 + 1;
  v9 = sub_23B50A168(0, v8 >> 1);
  v24 = a2;
  result = sub_23B56A7D4();
  if (result < 1)
  {
LABEL_31:
    swift_release();
    v23 = sub_23B50D1E4(v9);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(_QWORD *)(v24 - 8) + 8))(a1);
    return v23;
  }
  v11 = result;
  v12 = 0;
  v13 = v6 + 32;
  while (1)
  {
    v14 = __OFADD__(v12, 2) ? 0x7FFFFFFFFFFFFFFFLL : v12 + 2;
    if ((v12 & 0x8000000000000000) != 0)
      break;
    v15 = *(_QWORD *)(v6 + 16);
    if (v12 >= v15)
      goto LABEL_36;
    if (v12 + 1 >= v15)
      goto LABEL_37;
    v16 = *(unsigned __int8 *)(v13 + v12);
    v17 = *(unsigned __int8 *)(v13 + v12 + 1);
    if (!isxdigit(v16) || (result = isxdigit(v17), !(_DWORD)result))
    {
      swift_release();
      (*(void (**)(uint64_t))(*(_QWORD *)(v24 - 8) + 8))(a1);
      swift_bridgeObjectRelease();
      return 0;
    }
    if (v16 >= 0x41)
      v18 = 55;
    else
      v18 = 48;
    v19 = v16 - v18;
    if ((v19 & 0xFFFFFF00) != 0)
      goto LABEL_38;
    if (v17 >= 0x41)
      v20 = 55;
    else
      v20 = 48;
    v21 = v17 - v20;
    if ((v21 & 0xFFFFFF00) != 0)
      goto LABEL_39;
    if (v19 > 0xFu)
      goto LABEL_40;
    v22 = 16 * (v19 & 0xF) + v21;
    if (((16 * (v19 & 0xF) + v21) & 0x100) != 0)
      goto LABEL_41;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_23B50C9C8(v9);
      v9 = result;
    }
    if (v12 >> 1 >= *(_QWORD *)(v9 + 16))
      goto LABEL_42;
    *(_BYTE *)(v9 + (v12 >> 1) + 32) = v22;
    v12 = v14;
    if (v14 >= v11)
      goto LABEL_31;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_23B50A168(int a1, size_t a2)
{
  uint64_t v4;
  uint64_t result;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = sub_23B56AC18();
    __break(1u);
  }
  else
  {
    if (!a2)
      return MEMORY[0x24BEE4AF8];
    v4 = sub_23B56A558();
    *(_QWORD *)(v4 + 16) = a2;
    memset((void *)(v4 + 32), a1, a2);
    return v4;
  }
  return result;
}

uint64_t sub_23B50A220(char a1, size_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t result;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = sub_23B56AC18();
    __break(1u);
  }
  else
  {
    if (!a2)
      return MEMORY[0x24BEE4AF8];
    v3 = a1 & 1;
    v4 = sub_23B56A558();
    *(_QWORD *)(v4 + 16) = a2;
    memset((void *)(v4 + 32), v3, a2);
    return v4;
  }
  return result;
}

void Data.chunked(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_23B50A318()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (!v2)
  {
    __break(1u);
    JUMPOUT(0x23B50A3A0);
  }
  sub_23B502434(v1, v0);
  v3 = sub_23B50D474(0, BYTE6(v0), v2, v1, v0, v2);
  sub_23B504944(v1, v0);
  return v3;
}

void Data.subObject<A>(range:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  __asm { BR              X11 }
}

uint64_t sub_23B50A468()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v14;
  _QWORD v15[18];

  if ((v2 & 1) != 0)
  {
    v0 = BYTE6(v3);
    v7 = 0;
  }
  else
  {
    v7 = v5;
  }
  if (__OFSUB__(v0, v7))
  {
    __break(1u);
    goto LABEL_15;
  }
  if (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) != v0 - v7)
  {
    v8 = 0;
    goto LABEL_13;
  }
  v8 = 1;
  if (v7 < 0 || v7 >= BYTE6(v3))
    goto LABEL_13;
  v9 = v0 - 1;
  if (__OFSUB__(v0, 1))
  {
LABEL_15:
    __break(1u);
    JUMPOUT(0x23B50A5FCLL);
  }
  if (v9 >= 0 && v9 < BYTE6(v3))
  {
    swift_getAssociatedConformanceWitness();
    sub_23B56ADD4();
    v10 = *(_QWORD *)(v6 - 96);
    v11 = sub_23B56AD80();
    MEMORY[0x24BDAC7A8](v11);
    v15[2] = v4;
    v15[3] = v3;
    v15[4] = v7;
    v15[5] = v0;
    return sub_23B50A6C0(v10, (uint64_t)sub_23B50D82C, (uint64_t)v15, v1, MEMORY[0x24BEE4078], MEMORY[0x24BEE1768], MEMORY[0x24BEE40A8], v12);
  }
LABEL_13:
  sub_23B50D7E8();
  swift_allocError();
  *v14 = v8;
  return swift_willThrow();
}

uint64_t sub_23B50A60C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_256A2BD68);
  sub_23B50E118();
  sub_23B50E15C(&qword_256A2BD78, &qword_256A2BD68, MEMORY[0x24BEE1BC0]);
  result = sub_23B569BEC();
  *a1 = result;
  return result;
}

uint64_t sub_23B50A6C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, char *);
  uint64_t result;
  uint64_t v18;

  v11 = *(_QWORD *)(a5 - 8);
  v12 = MEMORY[0x24BDAC7A8]();
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = v16(v12, v12 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64), v14);
  if (v8)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  return result;
}

uint64_t Data.write(to:excludeFromBackup:options:)(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD v15[4];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v15[3] = a2;
  v3 = sub_23B569DA8();
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23B569D3C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v18;
  result = sub_23B569E44();
  if (!v10)
  {
    sub_23B569D30();
    sub_23B569D24();
    v12 = v16;
    v13 = a1;
    v14 = v17;
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v5, v13, v17);
    sub_23B569D78();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v5, v14);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  return result;
}

void Data.trimmed.getter(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_23B50A930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t))((char *)&loc_23B50A9F0 + dword_23B50AC6C[v11]))(a1, a2, a3, a4, a5, a6, a7, a8, a9, *(_QWORD *)(v12 - 120), *(_QWORD *)(v12 - 120) - 1, v9 >> 40, HIDWORD(v9), v9 >> 24, v9 >> 16, v9 >> 8, HIBYTE(v10));
}

uint64_t static HashAlgorithm.== infix(_:_:)()
{
  return 1;
}

uint64_t sub_23B50AC88()
{
  return 1;
}

uint64_t static HMACAlgorithm.== infix(_:_:)()
{
  return 1;
}

uint64_t HMACAlgorithm.hash(into:)()
{
  return sub_23B56AE70();
}

uint64_t _s10FindMyBase13HashAlgorithmO9hashValueSivg_0()
{
  sub_23B56AE64();
  sub_23B56AE70();
  return sub_23B56AE88();
}

uint64_t sub_23B50AD08()
{
  return sub_23B56AE70();
}

uint64_t sub_23B50AD2C()
{
  sub_23B56AE64();
  sub_23B56AE70();
  return sub_23B56AE88();
}

uint64_t sub_23B50AD68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];

  v14[3] = MEMORY[0x24BEE0F88];
  v14[4] = MEMORY[0x24BDCFB90];
  v14[0] = a1;
  v14[1] = a2;
  v4 = __swift_project_boxed_opaque_existential_1(v14, MEMORY[0x24BEE0F88]);
  v5 = (_BYTE *)*v4;
  if (*v4 && (v6 = (_BYTE *)v4[1], v7 = v6 - v5, v6 != v5))
  {
    if (v7 <= 14)
    {
      v8 = sub_23B504650(v5, v6);
      v9 = v12 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((unint64_t)v7 >= 0x7FFFFFFF)
    {
      v8 = sub_23B50D16C((uint64_t)v5, (uint64_t)v6);
      v9 = v13 | 0x8000000000000000;
    }
    else
    {
      v8 = sub_23B4FD208((uint64_t)v5, (uint64_t)v6);
      v9 = v11 | 0x4000000000000000;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0xC000000000000000;
  }
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  *a3 = v8;
  a3[1] = v9;
  return result;
}

uint64_t RawRepresentable<>.base64EncodedString(options:)()
{
  void *v0;
  uint64_t v2;

  v0 = (void *)MEMORY[0x23B867378]();
  sub_23B50AE9C(&v2);
  objc_autoreleasePoolPop(v0);
  return v2;
}

uint64_t sub_23B50AE9C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;

  sub_23B56A4BC();
  v2 = sub_23B569E20();
  v4 = v3;
  result = sub_23B504944(v6, v7);
  *a1 = v2;
  a1[1] = v4;
  return result;
}

uint64_t RawRepresentable<>.hexString.getter()
{
  void *v0;
  uint64_t v2;

  v0 = (void *)MEMORY[0x23B867378]();
  sub_23B50AF78(&v2);
  objc_autoreleasePoolPop(v0);
  return v2;
}

uint64_t sub_23B50AF78@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;

  sub_23B56A4BC();
  sub_23B55D204(v7, v8);
  v3 = v2;
  v5 = v4;
  result = sub_23B504944(v7, v8);
  *a1 = v3;
  a1[1] = v5;
  return result;
}

void sub_23B50AFF4(uint64_t *a1)
{
  _s10Foundation4DataV10FindMyBaseE1loiySbAC_ACtFZ_0(*a1, a1[1]);
}

BOOL sub_23B50B008(uint64_t a1, uint64_t *a2)
{
  char v2;

  _s10Foundation4DataV10FindMyBaseE1loiySbAC_ACtFZ_0(*a2, a2[1]);
  return (v2 & 1) == 0;
}

BOOL sub_23B50B02C(uint64_t *a1)
{
  char v1;

  _s10Foundation4DataV10FindMyBaseE1loiySbAC_ACtFZ_0(*a1, a1[1]);
  return (v1 & 1) == 0;
}

void sub_23B50B058(uint64_t a1, uint64_t *a2)
{
  _s10Foundation4DataV10FindMyBaseE1loiySbAC_ACtFZ_0(*a2, a2[1]);
}

uint64_t Data.init(stringLiteral:)()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23B509D24();
  if (v1 >> 60 == 15)
    __break(1u);
  return result;
}

uint64_t sub_23B50B08C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  unint64_t v3;

  result = sub_23B509D24();
  if (v3 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    *a1 = result;
    a1[1] = v3;
  }
  return result;
}

_QWORD *sub_23B50B0C8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542F99C0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_23B50D384(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_23B50B1D4(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542FA8B0);
  v10 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2542FA878) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (v15 = v11 == -1) : (v15 = 0), v15))
  {
LABEL_29:
    result = sub_23B56AC18();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2542FA878) - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (unint64_t)v13 + v17;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(_QWORD *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_23B50DC1C(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

char *sub_23B50B3E4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_256A2BD48);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v12 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_23B50DD38(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_23B50B4DC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_256A2BD40);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_23B50DE1C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_23B50B5E8(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a4 + 3);
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = *((_QWORD *)a4 + 2);
    if (v8 <= v9)
      v10 = *((_QWORD *)a4 + 2);
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (char *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      *((_QWORD *)v11 + 2) = v9;
      *((_QWORD *)v11 + 3) = 2 * v12 - 64;
      v13 = v11 + 32;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[v9 + 32])
          memmove(v13, a4 + 32, v9);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (char *)MEMORY[0x24BEE4AF8];
      v13 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_23B50DD38(0, v9, v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_23B50B6DC(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9BF8);
  v10 = *(_QWORD *)(type metadata accessor for Keychain.Item() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (v15 = v11 == -1) : (v15 = 0), v15))
  {
LABEL_29:
    result = sub_23B56AC18();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(type metadata accessor for Keychain.Item() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (unint64_t)v13 + v17;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(_QWORD *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_23B50DF0C(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

uint64_t sub_23B50B8E4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = sub_23B56A414();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x23B8666C4](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

void sub_23B50B95C(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_23B50B9B8@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t bytes, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _QWORD *v17;
  size_t v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;

  v22 = v19;
  LOWORD(v23) = a1;
  BYTE2(v23) = BYTE2(a1);
  HIBYTE(v23) = BYTE3(a1);
  v24 = BYTE4(a1);
  v25 = BYTE5(a1);
  v26 = BYTE6(a1);
  result = SecRandomCopyBytes((SecRandomRef)*MEMORY[0x24BDE94B8], v18, &v22);
  v21 = v23 | ((unint64_t)v24 << 32) | ((unint64_t)v25 << 40) | ((unint64_t)v26 << 48);
  *v17 = v22;
  v17[1] = v21;
  return result;
}

void sub_23B50BC50()
{
  __asm { BR              X12 }
}

uint64_t sub_23B50BCB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *, char *);
  _QWORD *v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;

  v6 = v1;
  LOWORD(v7) = a1;
  BYTE2(v7) = BYTE2(a1);
  HIBYTE(v7) = BYTE3(a1);
  v8 = BYTE4(a1);
  v9 = BYTE5(a1);
  v10 = BYTE6(a1);
  result = v2(&v6, (char *)&v6 + BYTE6(a1));
  v5 = v7 | ((unint64_t)v8 << 32) | ((unint64_t)v9 << 40) | ((unint64_t)v10 << 48);
  *v3 = v6;
  v3[1] = v5;
  return result;
}

void sub_23B50BE84()
{
  __asm { BR              X12 }
}

uint64_t sub_23B50BEE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *, char *);
  _QWORD *v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;

  v6 = v1;
  LOWORD(v7) = a1;
  BYTE2(v7) = BYTE2(a1);
  HIBYTE(v7) = BYTE3(a1);
  v8 = BYTE4(a1);
  v9 = BYTE5(a1);
  v10 = BYTE6(a1);
  result = v2(&v6, (char *)&v6 + BYTE6(a1));
  v5 = v7 | ((unint64_t)v8 << 32) | ((unint64_t)v9 << 40) | ((unint64_t)v10 << 48);
  *v3 = v6;
  v3[1] = v5;
  return result;
}

uint64_t sub_23B50C0B8(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
    return a1(a3, a4 - a3);
  else
    return a1(0, 0);
}

uint64_t sub_23B50C104(uint64_t (*a1)(uint64_t, uint64_t))
{
  int *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = sub_23B569DC0();
  v4 = *v1;
  v5 = v1[1];
  if ((int)v5 < (int)v4)
  {
    __break(1u);
    goto LABEL_9;
  }
  result = sub_23B569C40();
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v6 = result;
  result = sub_23B569C64();
  v7 = v4 - result;
  if (__OFSUB__(v4, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v8 = v5 - v4;
  v9 = sub_23B569C58();
  if (v9 >= v8)
    v10 = v8;
  else
    v10 = v9;
  return a1(v6 + v7, v6 + v7 + v10);
}

unsigned __int8 *sub_23B50C1AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = sub_23B56A450();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = sub_23B50C50C();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)sub_23B56AAE0();
  }
LABEL_7:
  v11 = sub_23B50C290(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *sub_23B50C290(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  v13 = 0;
                  if (v11 < 0x61 || v11 >= v8)
                    return (unsigned __int8 *)v13;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      v23 = a3 + 48;
      v24 = a3 + 55;
      v25 = a3 + 87;
      if (a3 > 10)
      {
        v23 = 58;
      }
      else
      {
        v25 = 97;
        v24 = 65;
      }
      if (result)
      {
        v26 = 0;
        do
        {
          v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              v13 = 0;
              if (v27 < 0x61 || v27 >= v25)
                return (unsigned __int8 *)v13;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63)
            return 0;
          v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  v15 = a2 - 1;
  if (a2 == 1)
    return 0;
  v16 = a3 + 48;
  v17 = a3 + 55;
  v18 = a3 + 87;
  if (a3 > 10)
  {
    v16 = 58;
  }
  else
  {
    v18 = 97;
    v17 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v19 = result + 1;
  do
  {
    v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        v13 = 0;
        if (v20 < 0x61 || v20 >= v18)
          return (unsigned __int8 *)v13;
        v21 = -87;
      }
      else
      {
        v21 = -55;
      }
    }
    else
    {
      v21 = -48;
    }
    v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21)))
      return 0;
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

uint64_t sub_23B50C50C()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = sub_23B56A45C();
  v4 = sub_23B50C588(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_23B50C588(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = sub_23B50C6CC(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = sub_23B4FC5FC(v9, 0);
      v12 = sub_23B50C7B8((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v13 = MEMORY[0x23B86664C](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x23B86664CLL);
LABEL_9:
      sub_23B56AAE0();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x23B86664C]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t sub_23B50C6CC(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_23B50B8E4(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_23B50B8E4(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return sub_23B56A3E4();
  }
  __break(1u);
  return result;
}

unint64_t sub_23B50C7B8(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_23B50B8E4(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = sub_23B56A3F0();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = sub_23B56AAE0();
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_23B50B8E4(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = sub_23B56A3CC();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

char *sub_23B50C9C8(uint64_t a1)
{
  return sub_23B50B5E8(0, *(_QWORD *)(a1 + 16), 0, (char *)a1, &qword_2542F9CD0);
}

char *sub_23B50C9F4(uint64_t a1)
{
  return sub_23B50B3E4(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_23B50CA08(_QWORD *a1)
{
  return sub_23B50B0C8(0, a1[2], 0, a1);
}

uint64_t sub_23B50CA3C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)(void))((char *)&loc_23B50CA4C + dword_23B50CAF4[a4 >> 62]))();
}

uint64_t sub_23B50CA60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, int a3@<W8>)
{
  if (BYTE6(a2) < a1 || a1 < 0)
  {
    __break(1u);
    JUMPOUT(0x23B50CAECLL);
  }
  return ((uint64_t (*)(void))((char *)&loc_23B50CA9C + dword_23B50CB04[a3]))();
}

void _s10Foundation4DataV10FindMyBaseE1loiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_23B50CB70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  unint64_t v20;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23B50CBA8 + *((int *)qword_23B50D080 + (v20 >> 62))))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20);
}

void sub_23B50CBC0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (BYTE6(v4) >= a2)
    v6 = a2;
  else
    v6 = BYTE6(v4);
  if ((v6 & 0x8000000000000000) == 0)
  {
    *(_QWORD *)(v5 - 120) = v3;
    if (v6)
    {
      *(_QWORD *)(v5 - 136) = a1;
      *(_QWORD *)(v5 - 128) = v2;
      __asm { BR              X8 }
    }
    __asm { BR              X11 }
  }
  __break(1u);
  JUMPOUT(0x23B50CF58);
}

uint64_t sub_23B50D0D0(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      if (result < 0)
        __break(1u);
      else
        return 0;
    }
    else
    {
      sub_23B569C70();
      swift_allocObject();
      sub_23B569C4C();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_23B569DD8();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t sub_23B50D16C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_23B569C70();
  swift_allocObject();
  result = sub_23B569C34();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_23B569DD8();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_23B50D1E4(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9878);
  v10 = sub_23B50E15C(&qword_2542F9880, &qword_2542F9878, MEMORY[0x24BDCFBE0]);
  v8[0] = a1;
  v2 = __swift_project_boxed_opaque_existential_1(v8, v9);
  v3 = (_BYTE *)(*v2 + 32);
  v4 = &v3[*(_QWORD *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  sub_23B4FD194(v3, v4, &v7);
  v5 = v7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v5;
}

uint64_t _s10Foundation4DataV10FindMyBaseE11randomBytes5countACSi_tFZ_0(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t result;
  _QWORD v4[2];

  v4[0] = sub_23B50D0D0(a1);
  v4[1] = v1;
  sub_23B50B95C((uint64_t)v4);
  if (!v2)
    return v4[0];
  sub_23B56AA68();
  swift_bridgeObjectRelease();
  sub_23B56AD44();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  result = sub_23B56AC24();
  __break(1u);
  return result;
}

uint64_t sub_23B50D384(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_23B56AC6C();
  __break(1u);
  return result;
}

uint64_t sub_23B50D474(int64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int64_t v9;
  int64_t v10;
  _BOOL4 v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  uint64_t v18;

  v9 = 0;
  v10 = a1;
  while (1)
  {
    v11 = v10 <= a2;
    if (a3 > 0)
      v11 = v10 >= a2;
    if (v11)
      break;
    v12 = __OFADD__(v10, a3);
    v10 += a3;
    if (v12)
      v10 = (v10 >> 63) ^ 0x8000000000000000;
    v12 = __OFADD__(v9++, 1);
    if (v12)
    {
      __break(1u);
      break;
    }
  }
  v18 = MEMORY[0x24BEE4AF8];
  sub_23B522430(0, v9, 0);
  if (v9)
  {
    v13 = a1 <= a2;
    if (a3 > 0)
      v13 = a1 >= a2;
    if (v13)
    {
      __break(1u);
    }
    else if (!__OFADD__(a1, a6))
    {
      __asm { BR              X10 }
    }
    __break(1u);
    JUMPOUT(0x23B50D7ACLL);
  }
  v14 = a1 <= a2;
  if (a3 > 0)
    v14 = a1 >= a2;
  if (!v14)
  {
    if (!__OFADD__(a1, a6))
      __asm { BR              X10 }
    __break(1u);
    JUMPOUT(0x23B50D7B4);
  }
  return v18;
}

unint64_t sub_23B50D7E8()
{
  unint64_t result;

  result = qword_256A2BD08;
  if (!qword_256A2BD08)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for Data.DataError, &type metadata for Data.DataError);
    atomic_store(result, (unint64_t *)&qword_256A2BD08);
  }
  return result;
}

uint64_t sub_23B50D82C@<X0>(uint64_t *a1@<X8>)
{
  return sub_23B50A60C(a1);
}

unint64_t sub_23B50D850()
{
  unint64_t result;

  result = qword_256A2BD10;
  if (!qword_256A2BD10)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for Data.DataError, &type metadata for Data.DataError);
    atomic_store(result, (unint64_t *)&qword_256A2BD10);
  }
  return result;
}

unint64_t sub_23B50D898()
{
  unint64_t result;

  result = qword_256A2BD18;
  if (!qword_256A2BD18)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for HashAlgorithm, &type metadata for HashAlgorithm);
    atomic_store(result, (unint64_t *)&qword_256A2BD18);
  }
  return result;
}

unint64_t sub_23B50D8E0()
{
  unint64_t result;

  result = qword_256A2BD20;
  if (!qword_256A2BD20)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for HMACAlgorithm, &type metadata for HMACAlgorithm);
    atomic_store(result, (unint64_t *)&qword_256A2BD20);
  }
  return result;
}

unint64_t sub_23B50D928()
{
  unint64_t result;

  result = qword_256A2BD28;
  if (!qword_256A2BD28)
  {
    result = MEMORY[0x23B867894](MEMORY[0x24BDCDE20], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_256A2BD28);
  }
  return result;
}

unint64_t sub_23B50D970()
{
  unint64_t result;

  result = qword_256A2BD30;
  if (!qword_256A2BD30)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for Data, MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_256A2BD30);
  }
  return result;
}

uint64_t sub_23B50D9B4()
{
  return MEMORY[0x24BEE0D80];
}

unint64_t sub_23B50D9C4()
{
  unint64_t result;

  result = qword_256A2BD38;
  if (!qword_256A2BD38)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for Data, MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_256A2BD38);
  }
  return result;
}

uint64_t sub_23B50DA08()
{
  return MEMORY[0x24BEE0D90];
}

uint64_t sub_23B50DA14()
{
  return MEMORY[0x24BEE0D88];
}

uint64_t _s9DataErrorOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23B50DA6C + 4 * byte_23B56F445[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23B50DAA0 + 4 * byte_23B56F440[v4]))();
}

uint64_t sub_23B50DAA0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23B50DAA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23B50DAB0);
  return result;
}

uint64_t sub_23B50DABC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23B50DAC4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23B50DAC8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23B50DAD0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Data.DataError()
{
  return &type metadata for Data.DataError;
}

uint64_t sub_23B50DAF8()
{
  return 0;
}

ValueMetadata *type metadata accessor for HashAlgorithm()
{
  return &type metadata for HashAlgorithm;
}

uint64_t getEnumTagSinglePayload for DateIntervalParsingStrategy.Error(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s10FindMyBase13HashAlgorithmOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23B50DBA0 + 4 * byte_23B56F44A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23B50DBC0 + 4 * byte_23B56F44F[v4]))();
}

_BYTE *sub_23B50DBA0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23B50DBC0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23B50DBC8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23B50DBD0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23B50DBD8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23B50DBE0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for HMACAlgorithm()
{
  return &type metadata for HMACAlgorithm;
}

uint64_t dispatch thunk of DataRepresentable.dataRepresentation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of DataRepresentable.init(dataRepresentation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t sub_23B50DC1C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2542FA878) - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  result = sub_23B56AC6C();
  __break(1u);
  return result;
}

char *sub_23B50DD38(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)sub_23B56AC6C();
  __break(1u);
  return result;
}

uint64_t sub_23B50DE1C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_23B56AC6C();
  __break(1u);
  return result;
}

uint64_t sub_23B50DF0C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(type metadata accessor for Keychain.Item() - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  result = sub_23B56AC6C();
  __break(1u);
  return result;
}

uint64_t sub_23B50E024(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2BD60);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23B50E064(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[3];
  __int128 v5;

  v5 = *(_OWORD *)*(_QWORD *)(v2 + 16);
  v4[2] = &v5;
  return sub_23B50C0B8((uint64_t (*)(uint64_t, uint64_t))sub_23B50E0AC, (uint64_t)v4, a1, a2);
}

void sub_23B50E0AC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v7 = *(uint64_t **)(v3 + 16);
  v8 = *v7;
  v9 = v7[1];
  sub_23B502434(*v7, v9);
  sub_23B537818(a3, a1, a2, v8, v9);
  *(_QWORD *)(a3 + 24) = v10;
}

unint64_t sub_23B50E118()
{
  unint64_t result;

  result = qword_256A2BD70;
  if (!qword_256A2BD70)
  {
    result = MEMORY[0x23B867894](MEMORY[0x24BDCDDC0], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_256A2BD70);
  }
  return result;
}

uint64_t sub_23B50E15C(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x23B867894](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23B50E1A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23B56ADEC();
  sub_23B56A234();
  sub_23B56ADF8();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a3);
}

uint64_t scale<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t);
  long double v26;
  long double v27;
  char *v28;
  double v29;
  char v30;
  uint64_t v31;
  double v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;

  v36 = a7;
  v41 = a8;
  v42 = a6;
  v38 = a5;
  v34 = a1;
  v40 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v39 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v35 = *(_QWORD *)(a4 - 8);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v37 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v34 - v17;
  v19 = MEMORY[0x24BDAC7A8](v16);
  v21 = (char *)&v34 - v20;
  v22 = MEMORY[0x24BDAC7A8](v19);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v34 - v23;
  sub_23B50E1A4(v34, a2, a4);
  swift_getAssociatedConformanceWitness();
  sub_23B56ADD4();
  sub_23B56AD80();
  sub_23B56AC3C();
  v25 = *(void (**)(char *, uint64_t))(v35 + 8);
  v25(v18, a4);
  sub_23B56AC3C();
  v25(v21, a4);
  if ((swift_dynamicCast() & 1) != 0 && (v26 = v43, sub_23B56A234(), sub_23B56AC3C(), (swift_dynamicCast() & 1) != 0))
  {
    v27 = v43;
    v28 = v39;
    sub_23B56ABE8();
    if (sub_23B56A9B4() < 65)
    {
      v30 = sub_23B56A9C0();
      v31 = sub_23B56A9A8();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v28, a3);
      if ((v30 & 1) != 0)
        v29 = (double)v31;
      else
        v29 = (double)(unint64_t)v31;
    }
    else
    {
      sub_23B50E6A0();
      sub_23B50E6E4();
      sub_23B56A174();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v28, a3);
      v29 = v43;
    }
    v32 = log10(v27);
    v43 = log10(v26) / v32 * v29;
    sub_23B50E6A0();
    sub_23B56A9CC();
    return ((uint64_t (*)(char *, uint64_t))v25)(v24, a4);
  }
  else
  {
    result = sub_23B56AC24();
    __break(1u);
  }
  return result;
}

unint64_t sub_23B50E6A0()
{
  unint64_t result;

  result = qword_256A2BD80;
  if (!qword_256A2BD80)
  {
    result = MEMORY[0x23B867894](MEMORY[0x24BEE13D0], MEMORY[0x24BEE13C8]);
    atomic_store(result, (unint64_t *)&qword_256A2BD80);
  }
  return result;
}

unint64_t sub_23B50E6E4()
{
  unint64_t result;

  result = qword_256A2BD88;
  if (!qword_256A2BD88)
  {
    result = MEMORY[0x23B867894](MEMORY[0x24BEE45A8], MEMORY[0x24BEE4568]);
    atomic_store(result, (unint64_t *)&qword_256A2BD88);
  }
  return result;
}

uint64_t unscale<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  long double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t);
  double v30;
  char v31;
  uint64_t v32;
  double v33;
  char v34;
  uint64_t v35;
  char *v36;
  double v37;
  long double v38;
  char v39;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  double v53;

  v45 = a6;
  v46 = a1;
  v49 = a5;
  v52 = a7;
  v10 = sub_23B56A900();
  v42 = *(_QWORD *)(v10 - 8);
  v43 = v10;
  v11 = MEMORY[0x24BDAC7A8](v10);
  v51 = (char *)&v42 - v12;
  v48 = *(_QWORD *)(a3 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v50 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v47 = (char *)&v42 - v15;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v44 = *(_QWORD *)(a4 - 8);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v18);
  MEMORY[0x24BDAC7A8](v21);
  sub_23B56A234();
  v45 = a2;
  sub_23B56AC3C();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v22 = v53;
    swift_getAssociatedConformanceWitness();
    sub_23B56ADD4();
    sub_23B56AD80();
    sub_23B56AC3C();
    v23 = v44;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v20, a4);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v24 = v53;
      v26 = v47;
      v25 = v48;
      (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v47, v46, a3);
      v27 = sub_23B56A9B4();
      v28 = v50;
      if (v27 < 65)
      {
        v31 = sub_23B56A9C0();
        v32 = sub_23B56A9A8();
        v29 = *(void (**)(char *, uint64_t))(v25 + 8);
        v29(v26, a3);
        if ((v31 & 1) != 0)
          v30 = (double)v32;
        else
          v30 = (double)(unint64_t)v32;
      }
      else
      {
        sub_23B50E6A0();
        sub_23B50E6E4();
        sub_23B56A174();
        v29 = *(void (**)(char *, uint64_t))(v25 + 8);
        v29(v26, a3);
        v30 = v53;
      }
      sub_23B56ABE8();
      if (sub_23B56A9B4() <= 64)
      {
        v34 = sub_23B56A9C0();
        v35 = sub_23B56A9A8();
        v29(v28, a3);
        if ((v34 & 1) != 0)
          v33 = (double)v35;
        else
          v33 = (double)(unint64_t)v35;
      }
      else
      {
        sub_23B50E6A0();
        sub_23B50E6E4();
        sub_23B56A174();
        v29(v28, a3);
        v33 = v53;
      }
      v36 = v51;
      v37 = v30 / v33;
      v38 = log10(v22);
      v53 = v24 + __exp10(v38 * v37);
      v39 = swift_dynamicCast();
      v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
      if ((v39 & 1) != 0)
      {
        v40(v36, 0, 1, a4);
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v23 + 32))(v52, v36, a4);
      }
      v40(v36, 1, 1, a4);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v36, v43);
    }
  }
  result = sub_23B56AC24();
  __break(1u);
  return result;
}

uint64_t deoptionalize<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v6 = sub_23B56A900();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v12 - v7;
  (*(void (**)(char *, uint64_t))(v9 + 16))((char *)&v12 - v7, a1);
  v10 = *(_QWORD *)(a2 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, a2);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v8, a2);
  __break(1u);
  return result;
}

{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;

  if (qword_2542FAD78 != -1)
    swift_once();
  v6 = sub_23B56A060();
  __swift_project_value_buffer(v6, (uint64_t)qword_2542FC458);
  v7 = sub_23B56A048();
  v8 = sub_23B56A840();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_23B4F9000, v7, v8, "deoptionalize() call is no longer needed since the value is no longer optional or force unwrapped", v9, 2u);
    MEMORY[0x23B867948](v9, -1, -1);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1, a2);
}

Swift::Bool __swiftcall inAsyncContext()()
{
  Swift::Bool v1;

  sub_23B56AC9C();
  return v1;
}

uint64_t sub_23B50EE30(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9CD0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_23B56AC6C();
  __break(1u);
  return result;
}

uint64_t sub_23B50EF7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_23B56A060();
  __swift_allocate_value_buffer(v0, qword_2542FA7F0);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_2542FA7F0);
  if (qword_2542FA850 != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)qword_2542FA830);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

_QWORD *sub_23B50F00C()
{
  uint64_t v0;
  _QWORD *result;

  type metadata accessor for DarwinNotificationHandler();
  v0 = swift_allocObject();
  result = DarwinNotificationHandler.init()();
  qword_2542FA818 = v0;
  return result;
}

uint64_t DarwinNotificationHandler.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  DarwinNotificationHandler.init()();
  return v0;
}

uint64_t static DarwinNotificationHandler.shared.getter()
{
  if (qword_2542FA828 != -1)
    swift_once();
  swift_beginAccess();
  return swift_retain();
}

uint64_t static DarwinNotificationHandler.shared.setter(uint64_t a1)
{
  if (qword_2542FA828 != -1)
    swift_once();
  swift_beginAccess();
  qword_2542FA818 = a1;
  return swift_release();
}

uint64_t (*static DarwinNotificationHandler.shared.modify())()
{
  if (qword_2542FA828 != -1)
    swift_once();
  swift_beginAccess();
  return j_j__swift_endAccess;
}

unint64_t sub_23B50F1C4(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t result;
  char v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t *v30;
  uint64_t *v31;

  v30 = a4;
  v31 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (_QWORD *)((char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(_QWORD *)(a1 + 16))
  {
    v11 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v10 = sub_23B56AC60();
  v11 = (_QWORD *)v10;
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v11;
  }
  v13 = (char *)v9 + *(int *)(v6 + 48);
  v14 = v10 + 64;
  v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v29[1] = a1;
  v16 = a1 + v15;
  v17 = *(_QWORD *)(v7 + 72);
  swift_retain();
  while (1)
  {
    sub_23B501498(v16, (uint64_t)v9, v31);
    v18 = *v9;
    v19 = v9[1];
    result = sub_23B5015D8(*v9, v19);
    if ((v21 & 1) != 0)
      break;
    v22 = result;
    *(_QWORD *)(v14 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v23 = (uint64_t *)(v11[6] + 16 * result);
    *v23 = v18;
    v23[1] = v19;
    v24 = v11[7];
    v25 = __swift_instantiateConcreteTypeFromMangledName(v30);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v24 + *(_QWORD *)(*(_QWORD *)(v25 - 8) + 72) * v22, v13, v25);
    v26 = v11[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      goto LABEL_11;
    v11[2] = v28;
    v16 += v17;
    if (!--v12)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23B50F35C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FA898);
  v2 = (_QWORD *)sub_23B56AC60();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_23B5015D8(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23B50F474(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256A2BDC8);
  v2 = (_QWORD *)sub_23B56AC60();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_23B5015D8(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23B50F594(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256A2BDB8);
  v2 = sub_23B56AC60();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_23B501498(v6, (uint64_t)&v13, &qword_256A2BDC0);
    v7 = v13;
    result = sub_23B511C28(v13);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    result = (unint64_t)sub_23B503EB4(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23B50F6C0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  unint64_t result;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256A2BDA8);
  v2 = (_QWORD *)sub_23B56AC60();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 1);
    v6 = *v4;
    v7 = (id)*(v4 - 2);
    swift_bridgeObjectRetain();
    result = sub_23B503A0C((uint64_t)v7);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v2[6] + 8 * result) = v7;
    v10 = (_QWORD *)(v2[7] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23B50F7D4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9B68);
  v2 = sub_23B56AC60();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_23B501498(v6, (uint64_t)&v13, &qword_256A2BDB0);
    v7 = v13;
    result = sub_23B503A0C(v13);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    result = (unint64_t)sub_23B503EB4(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t (*sub_23B50F900())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

_QWORD *DarwinNotificationHandler.init()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v1 = v0;
  swift_defaultActor_initialize();
  v2 = MEMORY[0x24BEE4AF8];
  v1[14] = sub_23B50F1C4(MEMORY[0x24BEE4AF8], &qword_2542FA860, &qword_2542FA8A8, &qword_2542FA888);
  v1[15] = sub_23B50F1C4(v2, &qword_2542FA858, &qword_2542FA8A0, &qword_2542FA878);
  v1[16] = sub_23B50F35C(v2);
  if (qword_2542FA810 != -1)
    swift_once();
  v3 = sub_23B56A060();
  __swift_project_value_buffer(v3, (uint64_t)qword_2542FA7F0);
  swift_retain_n();
  v4 = sub_23B56A048();
  v5 = sub_23B56A828();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v12 = v7;
    *(_DWORD *)v6 = 136315138;
    swift_retain();
    v8 = sub_23B50FD5C();
    v10 = v9;
    swift_release();
    sub_23B5034E4(v8, v10, &v12);
    sub_23B56A918();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_23B4F9000, v4, v5, "Instantiated %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v7, -1, -1);
    MEMORY[0x23B867948](v6, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  return v1;
}

uint64_t DarwinNotificationHandler.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v1 = v0;
  if (qword_2542FA810 != -1)
    swift_once();
  v2 = sub_23B56A060();
  __swift_project_value_buffer(v2, (uint64_t)qword_2542FA7F0);
  swift_retain_n();
  v3 = sub_23B56A048();
  v4 = sub_23B56A828();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v11 = v6;
    *(_DWORD *)v5 = 136315138;
    swift_retain();
    v7 = sub_23B50FD5C();
    v9 = v8;
    swift_release();
    sub_23B5034E4(v7, v9, &v11);
    sub_23B56A918();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_23B4F9000, v3, v4, "Deallocated %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v6, -1, -1);
    MEMORY[0x23B867948](v5, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v1;
}

uint64_t DarwinNotificationHandler.__deallocating_deinit()
{
  DarwinNotificationHandler.deinit();
  return swift_defaultActor_deallocate();
}

uint64_t sub_23B50FD5C()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_256A2BD90);
  sub_23B56A300();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  sub_23B511B74();
  sub_23B56A438();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  return 60;
}

uint64_t sub_23B50FE4C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (**v22)();
  unint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  __CFNotificationCenter *v46;
  __CFString *v47;
  uint64_t v48;
  void (*v49)(char *);
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v62)(char *);
  uint64_t v63;
  void (*v64)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75[3];

  v4 = v3;
  v68 = a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FA870);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FA890);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v66 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v62 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FA888);
  v72 = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v67 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v71 = (char *)&v62 - v19;
  v65 = v3 + 14;
  swift_beginAccess();
  v20 = v3[14];
  v21 = *(_QWORD *)(v20 + 16);
  v22 = &off_2542FA000;
  v70 = v16;
  if (v21)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23 = sub_23B5015D8(a1, a2);
    if ((v24 & 1) != 0)
    {
      v25 = v8;
      v26 = v4;
      v27 = a1;
      v28 = v72;
      (*(void (**)(char *, unint64_t, uint64_t))(v72 + 16))(v15, *(_QWORD *)(v20 + 56) + *(_QWORD *)(v72 + 72) * v23, v16);
      v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56);
      a1 = v27;
      v4 = v26;
      v8 = v25;
      v22 = &off_2542FA000;
      v30 = v15;
      v31 = 0;
    }
    else
    {
      v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v72 + 56);
      v30 = v15;
      v31 = 1;
    }
    v64 = v29;
    v29(v30, v31, 1, v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v15, 1, v16) != 1)
    {
      v48 = (*(uint64_t (**)(char *, char *, uint64_t))(v72 + 32))(v71, v15, v16);
      goto LABEL_14;
    }
  }
  else
  {
    v64 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v72 + 56);
    v64(v15, 1, 1, v16);
  }
  v69 = v7;
  sub_23B5043F0((uint64_t)v15, &qword_2542FA890);
  if (v22[258] != (uint64_t (*)())-1)
    swift_once();
  v32 = sub_23B56A060();
  __swift_project_value_buffer(v32, (uint64_t)qword_2542FA7F0);
  swift_bridgeObjectRetain_n();
  v33 = sub_23B56A048();
  v34 = sub_23B56A84C();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = swift_slowAlloc();
    v63 = v8;
    v36 = (uint8_t *)v35;
    v37 = swift_slowAlloc();
    v75[0] = v37;
    *(_DWORD *)v36 = 136315138;
    swift_bridgeObjectRetain();
    v74 = sub_23B5034E4(a1, a2, v75);
    sub_23B56A918();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_23B4F9000, v33, v34, "Creating base AsyncStream for DarwinNotification name: %s", v36, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v37, -1, -1);
    v38 = v36;
    v8 = v63;
    MEMORY[0x23B867948](v38, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  MEMORY[0x24BDAC7A8](v39);
  *(&v62 - 4) = (void (*)(char *))v4;
  *(&v62 - 3) = (void (*)(char *))a1;
  *(&v62 - 2) = (void (*)(char *))a2;
  LODWORD(v63) = *MEMORY[0x24BEE6A10];
  v62 = *(void (**)(char *))(v8 + 104);
  v62(v10);
  v40 = v67;
  sub_23B56A69C();
  v41 = v71;
  v42 = v72;
  v43 = *(void (**)(char *, char *, uint64_t))(v72 + 16);
  v44 = v70;
  v43(v71, v40, v70);
  v45 = (uint64_t)v66;
  v43(v66, v41, v44);
  v64((char *)v45, 0, 1, v44);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_23B510754(v45, a1, a2, &qword_2542FA890, &qword_2542FA888, (void (*)(char *, uint64_t, uint64_t, uint64_t))sub_23B5651F0, (void (*)(uint64_t, uint64_t))sub_23B563FEC);
  swift_endAccess();
  swift_retain();
  v46 = CFNotificationCenterGetDarwinNotifyCenter();
  v47 = (__CFString *)sub_23B56A264();
  CFNotificationCenterAddObserver(v46, v4, (CFNotificationCallback)sub_23B511284, v47, 0, CFNotificationSuspensionBehaviorDeliverImmediately);

  v48 = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v40, v44);
LABEL_14:
  MEMORY[0x24BDAC7A8](v48);
  *(&v62 - 4) = (void (*)(char *))v4;
  *(&v62 - 3) = (void (*)(char *))a1;
  *(&v62 - 2) = (void (*)(char *))a2;
  v49(v10);
  sub_23B56A69C();
  swift_beginAccess();
  v50 = v4[16];
  if (*(_QWORD *)(v50 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v51 = a1;
    v52 = sub_23B5015D8(a1, a2);
    if ((v53 & 1) != 0)
    {
      v54 = *(_QWORD *)(*(_QWORD *)(v50 + 56) + 8 * v52);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v55 = *(_QWORD *)(v54 + 16);
    }
    else
    {
      swift_bridgeObjectRelease();
      v55 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v51 = a1;
    v55 = 0;
  }
  if (qword_2542FA810 != -1)
    swift_once();
  v56 = sub_23B56A060();
  __swift_project_value_buffer(v56, (uint64_t)qword_2542FA7F0);
  swift_bridgeObjectRetain_n();
  v57 = sub_23B56A048();
  v58 = sub_23B56A84C();
  if (os_log_type_enabled(v57, v58))
  {
    v59 = swift_slowAlloc();
    v60 = swift_slowAlloc();
    v74 = v60;
    *(_DWORD *)v59 = 136315394;
    swift_bridgeObjectRetain();
    v73 = sub_23B5034E4(v51, a2, &v74);
    sub_23B56A918();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v59 + 12) = 2048;
    v73 = v55;
    sub_23B56A918();
    _os_log_impl(&dword_23B4F9000, v57, v58, "Creating sub AsyncStream for DarwinNotification name: [%s], count: %ld", (uint8_t *)v59, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v60, -1, -1);
    MEMORY[0x23B867948](v59, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v71, v70);
}

uint64_t sub_23B510630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FA880);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FA878);
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v9, a1, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_23B510754((uint64_t)v9, a3, a4, &qword_2542FA880, &qword_2542FA878, (void (*)(char *, uint64_t, uint64_t, uint64_t))sub_23B56520C, (void (*)(uint64_t, uint64_t))sub_23B564000);
  return swift_endAccess();
}

uint64_t sub_23B510754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, void (*a6)(char *, uint64_t, uint64_t, uint64_t), void (*a7)(uint64_t, uint64_t))
{
  uint64_t *v7;
  uint64_t *v11;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t isUniquelyReferenced_nonNull_native;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;

  v24 = a6;
  v11 = v7;
  v15 = __swift_instantiateConcreteTypeFromMangledName(a4);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(a5);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(a1, 1, v18) == 1)
  {
    sub_23B5043F0(a1, a4);
    a7(a2, a3);
    swift_bridgeObjectRelease();
    return sub_23B5043F0((uint64_t)v17, a4);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 32))(v21, a1, v18);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = *v11;
    *v11 = 0x8000000000000000;
    v24(v21, a2, a3, isUniquelyReferenced_nonNull_native);
    *v11 = v25;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_23B5108D8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9CE0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA40);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_23B5043F0(a1, &qword_2542F9CE0);
    sub_23B564150(a2, (uint64_t)v8);
    v13 = sub_23B569FA0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a2, v13);
    return sub_23B5043F0((uint64_t)v8, &qword_2542F9CE0);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18 = *v3;
    *v3 = 0x8000000000000000;
    sub_23B5654E8((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native);
    *v3 = v18;
    swift_bridgeObjectRelease();
    v16 = sub_23B569FA0();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_23B510A68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _OWORD v9[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_23B503EB4((_OWORD *)a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v3;
    *v3 = 0x8000000000000000;
    sub_23B565674(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_23B5043F0(a1, &qword_2542F9CD8);
    sub_23B564294(a2, a3, v9);
    swift_bridgeObjectRelease();
    return sub_23B5043F0((uint64_t)v9, &qword_2542F9CD8);
  }
}

uint64_t sub_23B510B3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  __int128 v12[7];

  if (*(_QWORD *)(a1 + 8))
  {
    v6 = *(_OWORD *)(a1 + 80);
    v12[4] = *(_OWORD *)(a1 + 64);
    v12[5] = v6;
    v12[6] = *(_OWORD *)(a1 + 96);
    v7 = *(_OWORD *)(a1 + 16);
    v12[0] = *(_OWORD *)a1;
    v12[1] = v7;
    v8 = *(_OWORD *)(a1 + 48);
    v12[2] = *(_OWORD *)(a1 + 32);
    v12[3] = v8;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v3;
    *v3 = 0x8000000000000000;
    sub_23B5657A4(v12, a2, a3, isUniquelyReferenced_nonNull_native);
    *v3 = v11;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_23B5043F0(a1, (uint64_t *)&unk_256A2CFA0);
    sub_23B564384(a2, a3, v12);
    swift_bridgeObjectRelease();
    return sub_23B5043F0((uint64_t)v12, (uint64_t *)&unk_256A2CFA0);
  }
}

uint64_t sub_23B510C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  char v14;
  uint64_t (*v15)();
  unint64_t *v16;
  void (*v17)(_QWORD *);
  unint64_t *v18;
  unint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  uint64_t v25;
  char v26;
  _QWORD v28[4];
  _BYTE v29[32];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FA878);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v28[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)(a2 + 128);
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(a2 + 128) + 16)
    && (swift_bridgeObjectRetain(),
        swift_bridgeObjectRetain(),
        sub_23B5015D8(a3, a4),
        v14 = v13,
        swift_bridgeObjectRelease(),
        swift_bridgeObjectRelease(),
        (v14 & 1) != 0))
  {
    swift_bridgeObjectRetain();
    v15 = sub_23B50F900();
    v17 = sub_23B510ED4(v28, a3, a4);
    if (*v16)
    {
      v18 = v16;
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
      v19 = *v18;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v18 = v19;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v19 = sub_23B50B1D4(0, *(_QWORD *)(v19 + 16) + 1, 1, v19);
        *v18 = v19;
      }
      v22 = *(_QWORD *)(v19 + 16);
      v21 = *(_QWORD *)(v19 + 24);
      if (v22 >= v21 >> 1)
      {
        v19 = sub_23B50B1D4(v21 > 1, v22 + 1, 1, v19);
        *v18 = v19;
      }
      *(_QWORD *)(v19 + 16) = v22 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v19+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v22, v11, v8);
    }
    ((void (*)(_QWORD *, _QWORD))v17)(v28, 0);
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(_BYTE *, _QWORD))v15)(v29, 0);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542FA8B0);
    v24 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_23B56F770;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v9 + 16))(v25 + v24, a1, v8);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    v26 = swift_isUniquelyReferenced_nonNull_native();
    v28[0] = *v12;
    *v12 = 0x8000000000000000;
    sub_23B56538C(v25, a3, a4, v26);
    *v12 = v28[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
}

void (*sub_23B510ED4(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain();
  v6[5] = sub_23B511F60(v6, a2, a3);
  return sub_23B510F40;
}

void sub_23B510F40(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t DarwinNotificationHandler.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23B510F84()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23B510F90()
{
  if (qword_2542FA828 != -1)
    swift_once();
  swift_beginAccess();
  return swift_retain();
}

uint64_t sub_23B510FFC()
{
  type metadata accessor for DarwinNotificationHandler();
  return sub_23B56AA14();
}

uint64_t sub_23B511020()
{
  return sub_23B50FD5C();
}

uint64_t static DarwinNotificationHandler.currentValue(name:)()
{
  uint64_t v0;

  if (qword_2542FA828 != -1)
    swift_once();
  swift_beginAccess();
  swift_retain();
  v0 = sub_23B512270();
  swift_release();
  return v0;
}

uint64_t static DarwinNotificationHandler.asyncStream(name:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  return swift_task_switch();
}

uint64_t sub_23B5110F8()
{
  uint64_t v0;

  if (qword_2542FA828 != -1)
    swift_once();
  swift_beginAccess();
  *(_QWORD *)(v0 + 64) = qword_2542FA818;
  swift_retain();
  return swift_task_switch();
}

uint64_t sub_23B511180()
{
  uint64_t v0;

  sub_23B50FE4C(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 40));
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B5111BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  *(_QWORD *)(v6 + 16) = a4;
  *(_QWORD *)(v6 + 24) = a6;
  return swift_task_switch();
}

uint64_t sub_23B5111D4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;

  v1 = *(void **)(v0 + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 16);
    v3 = sub_23B56A288();
    v5 = v4;
    v6 = (_QWORD *)swift_allocObject();
    v6[2] = v3;
    v6[3] = v5;
    v6[4] = v2;
    v7 = v1;
    swift_retain();
    _s10FindMyBase11TransactionC9asyncTask4name5blockys12StaticStringV_yyYaYbctFZ_0("UnregisteredDarwinNotification", 30, 2, (uint64_t)&unk_256A2BDE8, (uint64_t)v6);

    swift_release();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_23B511284(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  id v11;

  v11 = a1;
  v9 = a3;
  v10 = a5;
  sub_23B512618(a1, a2, a3, a5);

}

uint64_t sub_23B5112FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  return swift_task_switch();
}

uint64_t sub_23B511318()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (qword_2542FAE10 != -1)
    swift_once();
  sub_23B56AF9C();
  v1 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 64) = v1;
  if (!v1)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v2 = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 24) = v2;
  *(_QWORD *)(v0 + 32) = v1;
  swift_bridgeObjectRetain();
  swift_retain();
  return swift_task_switch();
}

uint64_t sub_23B5113C4()
{
  uint64_t v0;

  sub_23B511450((uint64_t *)(v0 + 16), *(_QWORD *)(v0 + 64));
  return swift_task_switch();
}

uint64_t sub_23B511404()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release_n();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t DarwinNotification.init(name:transaction:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

void sub_23B511450(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FADF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  v8 = a1[1];
  v10 = a1[2];
  swift_beginAccess();
  v11 = *(_QWORD *)(v2 + 128);
  if (*(_QWORD *)(v11 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12 = sub_23B5015D8(v9, v8);
    if ((v13 & 1) != 0)
    {
      v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v12);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v15 = sub_23B56A624();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
      v16 = (_QWORD *)swift_allocObject();
      v16[2] = 0;
      v16[3] = 0;
      v16[4] = a2;
      v16[5] = v14;
      v16[6] = v9;
      v16[7] = v8;
      v16[8] = v10;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      sub_23B515858((uint64_t)v7, (uint64_t)&unk_256A2BDF8, (uint64_t)v16);
      swift_release();
      return;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (qword_2542FA810 != -1)
    swift_once();
  v17 = sub_23B56A060();
  __swift_project_value_buffer(v17, (uint64_t)qword_2542FA7F0);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  v18 = sub_23B56A048();
  v19 = sub_23B56A840();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    v21 = swift_slowAlloc();
    *(_DWORD *)v20 = 136315138;
    v27 = v10;
    v28 = v21;
    v25 = v9;
    v26 = v8;
    v22 = DarwinNotification.description.getter();
    v25 = sub_23B5034E4(v22, v23, &v28);
    sub_23B56A918();
    swift_release_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23B4F9000, v18, v19, "Received unexpected unregistered notification: [%s]", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v21, -1, -1);
    MEMORY[0x23B867948](v20, -1, -1);

  }
  else
  {

    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_23B511750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v8[9] = a7;
  v8[10] = a8;
  v8[7] = a5;
  v8[8] = a6;
  v8[6] = a4;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FA868);
  v8[11] = v9;
  v8[12] = *(_QWORD *)(v9 - 8);
  v8[13] = swift_task_alloc();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FA878);
  v8[14] = v10;
  v8[15] = *(_QWORD *)(v10 - 8);
  v8[16] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B5117E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v13)(uint64_t, unint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (qword_2542FAE10 != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v0 + 48);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FA7E8);
  swift_task_localValuePush();
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 120);
    v15 = *(_QWORD *)(v0 + 96);
    v4 = *(_QWORD *)(v0 + 56)
       + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v16 = v3;
    v13 = *(void (**)(uint64_t, unint64_t, uint64_t))(v3 + 16);
    v14 = *(_QWORD *)(v3 + 72);
    swift_bridgeObjectRetain();
    do
    {
      v5 = *(_QWORD *)(v0 + 128);
      v7 = *(_QWORD *)(v0 + 104);
      v6 = *(_QWORD *)(v0 + 112);
      v9 = *(_QWORD *)(v0 + 80);
      v8 = *(_QWORD *)(v0 + 88);
      v10 = *(_QWORD *)(v0 + 64);
      v11 = *(_QWORD *)(v0 + 72);
      v13(v5, v4, v6);
      *(_QWORD *)(v0 + 16) = v10;
      *(_QWORD *)(v0 + 24) = v11;
      *(_QWORD *)(v0 + 32) = v9;
      swift_bridgeObjectRetain();
      swift_retain();
      sub_23B56A660();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v7, v8);
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v5, v6);
      v4 += v14;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  swift_task_localValuePop();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t DarwinNotification.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DarwinNotification.transaction.getter()
{
  return swift_retain();
}

uint64_t DarwinNotification.description.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(qword_2542F9638);
  sub_23B56A300();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  swift_bridgeObjectRetain();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  sub_23B56A3A8();
  swift_release();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  return 91;
}

uint64_t sub_23B511AF4()
{
  uint64_t v0;

  v0 = sub_23B56A060();
  __swift_allocate_value_buffer(v0, qword_2542FA830);
  __swift_project_value_buffer(v0, (uint64_t)qword_2542FA830);
  return sub_23B56A054();
}

unint64_t sub_23B511B74()
{
  unint64_t result;

  result = qword_2542F9B98;
  if (!qword_2542F9B98)
  {
    result = MEMORY[0x23B867894](MEMORY[0x24BEE17B0], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&qword_2542F9B98);
  }
  return result;
}

unint64_t sub_23B511BB8(uint64_t a1)
{
  uint64_t v2;

  sub_23B569FA0();
  sub_23B503AF0((unint64_t *)&qword_2542FAA50, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  v2 = sub_23B56A1EC();
  return sub_23B511CA8(a1, v2);
}

unint64_t sub_23B511C28(uint64_t a1)
{
  uint64_t v2;

  sub_23B56A288();
  sub_23B56AE64();
  sub_23B56A36C();
  v2 = sub_23B56AE88();
  swift_bridgeObjectRelease();
  return sub_23B511DEC(a1, v2);
}

unint64_t sub_23B511CA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = sub_23B569FA0();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      sub_23B503AF0(&qword_2542F9A28, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
      v14 = sub_23B56A240();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_23B511DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = sub_23B56A288();
    v8 = v7;
    if (v6 == sub_23B56A288() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = sub_23B56AD98();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = sub_23B56A288();
          v15 = v14;
          if (v13 == sub_23B56A288() && v15 == v16)
            break;
          v18 = sub_23B56AD98();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

void (*sub_23B511F60(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  _QWORD *v6;
  char isUniquelyReferenced_nonNull_native;

  v6 = malloc(0x58uLL);
  *a1 = v6;
  v6[8] = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v6[9] = sub_23B5121A8(v6);
  v6[10] = sub_23B512040(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_23B511FF0;
}

void sub_23B511FF0(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 72);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(*(_QWORD *)a1 + 32, 0);
  swift_bridgeObjectRelease();
  v2(v1, 0);
  free(v1);
}

void (*sub_23B512040(_QWORD *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  void (*result)(uint64_t **);

  v5 = v4;
  v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v5;
  v10[1] = a2;
  v11 = *v5;
  v13 = sub_23B5015D8(a2, a3);
  *((_BYTE *)v10 + 40) = v12 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = *(_QWORD *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(*(_QWORD *)(*v5 + 56) + 8 * v13);
LABEL_12:
        *v10 = v19;
        return sub_23B51216C;
      }
LABEL_11:
      v19 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_23B526508();
      goto LABEL_7;
    }
    sub_23B525194(v16, a4 & 1);
    v20 = sub_23B5015D8(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      v13 = v20;
      v10[4] = v20;
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **))sub_23B56AE10();
  __break(1u);
  return result;
}

void sub_23B51216C(uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  sub_23B5121D4(*a1, *((_BYTE *)*a1 + 40), (uint64_t *)(*a1)[3], (*a1)[4], (*a1)[1], (*a1)[2]);
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t (*sub_23B5121A8(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_23B5121C8;
}

uint64_t sub_23B5121C8(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

uint64_t sub_23B5121D4(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;

  v8 = *a1;
  if (*a1)
  {
    if ((a2 & 1) != 0)
    {
      *(_QWORD *)(*(_QWORD *)(*a3 + 56) + 8 * a4) = v8;
    }
    else
    {
      sub_23B5659B0(a4, a5, a6, v8, (_QWORD *)*a3);
      swift_bridgeObjectRetain();
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy();
    sub_23B564788(a4, *a3);
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_23B512270()
{
  uint64_t v0;
  int v1;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t state64;
  int out_token;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  out_token = 0;
  v0 = sub_23B56A330();
  notify_register_check((const char *)(v0 + 32), &out_token);
  swift_release();
  v1 = out_token;
  if (out_token == -1)
  {
    if (qword_2542FA810 != -1)
      swift_once();
    v3 = sub_23B56A060();
    __swift_project_value_buffer(v3, (uint64_t)qword_2542FA7F0);
    v4 = sub_23B56A048();
    v5 = sub_23B56A834();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_23B4F9000, v4, v5, "Failed notify_register_check.", v6, 2u);
      MEMORY[0x23B867948](v6, -1, -1);
    }

    return 0;
  }
  else
  {
    state64 = 0;
    notify_get_state(out_token, &state64);
    notify_cancel(v1);
    return state64;
  }
}

uint64_t sub_23B5123C0(uint64_t a1)
{
  uint64_t *v1;

  return sub_23B510630(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_23B5123CC(uint64_t a1)
{
  uint64_t *v1;

  return sub_23B510C28(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_23B5123D8(uint64_t a1, uint64_t a2)
{
  return sub_23B503AF0(&qword_256A2BDA0, a2, (uint64_t (*)(uint64_t))type metadata accessor for DarwinNotificationHandler, (uint64_t)&protocol conformance descriptor for DarwinNotificationHandler);
}

uint64_t type metadata accessor for DarwinNotificationHandler()
{
  return objc_opt_self();
}

uint64_t method lookup function for DarwinNotificationHandler()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DarwinNotificationHandler.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of DarwinNotificationHandler.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of DarwinNotificationHandler.currentValue(name:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of DarwinNotificationHandler.asyncStream(name:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t destroy for DarwinNotification()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

_QWORD *_s10FindMyBase18DarwinNotificationVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for DarwinNotification(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for DarwinNotification(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DarwinNotification(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DarwinNotification(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DarwinNotification()
{
  return &type metadata for DarwinNotification;
}

void sub_23B512618(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FADF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2542FA850 != -1)
    swift_once();
  v11 = sub_23B56A060();
  __swift_project_value_buffer(v11, (uint64_t)qword_2542FA830);
  v12 = sub_23B56A048();
  v13 = sub_23B56A84C();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_23B4F9000, v12, v13, "TRACE: rawCallback", v14, 2u);
    MEMORY[0x23B867948](v14, -1, -1);
  }

  if (a2)
  {
    v15 = sub_23B56A624();
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
    swift_retain();
    v16(v10, 1, 1, v15);
    v17 = (_QWORD *)swift_allocObject();
    v17[2] = 0;
    v17[3] = 0;
    v17[4] = a2;
    v17[5] = a1;
    v17[6] = a3;
    v17[7] = a4;
    v18 = a4;
    v19 = a1;
    v20 = a3;
    sub_23B515858((uint64_t)v10, (uint64_t)&unk_256A2BDD8, (uint64_t)v17);
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_23B5127C0()
{
  id *v0;

  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_23B512804()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_23B4FAC98;
  v4[2] = v2;
  v4[3] = v3;
  return swift_task_switch();
}

uint64_t sub_23B512868()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23B512894()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = swift_task_alloc();
  v4 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_23B4FACE0;
  *(_OWORD *)(v3 + 48) = v4;
  *(_QWORD *)(v3 + 40) = v2;
  return swift_task_switch();
}

uint64_t sub_23B5128FC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23B512940(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_23B4FACE0;
  return sub_23B511750(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_23B5129D8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_23B512A44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v9;
  _QWORD *v10;
  int *v11;

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  sub_23B56A5A0();
  sub_23B56A588();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 88);
  swift_getAssociatedConformanceWitness();
  sub_23B56A90C();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 128));
    v7 = *(_QWORD *)(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
  }
  else
  {
    v9 = *(int **)(v0 + 24);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 32))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 80));
    v11 = (int *)((char *)v9 + *v9);
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 152) = v10;
    *v10 = v0;
    v10[1] = sub_23B5129D8;
    return ((uint64_t (*)(_QWORD, _QWORD))v11)(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 96));
  }
}

uint64_t sub_23B512BCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 136);
  v1 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 128);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Sequence.asyncCompactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;

  v6[7] = a5;
  v6[8] = v5;
  v6[5] = a3;
  v6[6] = a4;
  v6[3] = a1;
  v6[4] = a2;
  v9 = sub_23B56A900();
  v6[9] = v9;
  v6[10] = *(_QWORD *)(v9 - 8);
  v6[11] = swift_task_alloc();
  v6[12] = *(_QWORD *)(a4 - 8);
  v6[13] = swift_task_alloc();
  v6[14] = swift_task_alloc();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[15] = AssociatedTypeWitness;
  v6[16] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6[17] = swift_task_alloc();
  sub_23B56A900();
  v6[18] = swift_task_alloc();
  v6[19] = *(_QWORD *)(a3 - 8);
  v6[20] = swift_task_alloc();
  v11 = swift_getAssociatedTypeWitness();
  v6[21] = v11;
  v6[22] = *(_QWORD *)(v11 - 8);
  v6[23] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B512DD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v10;
  _QWORD *v11;
  int *v12;

  v2 = *(_QWORD *)(v0 + 152);
  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 16) = sub_23B56A150();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v3, v4);
  sub_23B56A468();
  v5 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 128);
  swift_getAssociatedConformanceWitness();
  sub_23B56A90C();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));
    v8 = *(_QWORD *)(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8);
  }
  else
  {
    v10 = *(int **)(v0 + 24);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 32))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 120));
    v12 = (int *)((char *)v10 + *v10);
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 192) = v11;
    *v11 = v0;
    v11[1] = sub_23B512F90;
    return ((uint64_t (*)(_QWORD, _QWORD))v12)(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 136));
  }
}

uint64_t sub_23B512F90()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_23B512FFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v17;
  _QWORD *v18;
  int *v19;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3);
  v6 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 136);
  v7 = *(_QWORD *)(v0 + 120);
  if (v4 == 1)
  {
    v9 = *(_QWORD *)(v0 + 72);
    v8 = *(_QWORD *)(v0 + 80);
    (*(void (**)(_QWORD, _QWORD))(v6 + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1, v9);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 104);
    v10 = *(_QWORD *)(v0 + 112);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v10, v1, v3);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v11, v10, v3);
    sub_23B56A5A0();
    sub_23B56A588();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v10, v3);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  }
  v12 = *(_QWORD *)(v0 + 144);
  v13 = *(_QWORD *)(v0 + 120);
  v14 = *(_QWORD *)(v0 + 128);
  swift_getAssociatedConformanceWitness();
  sub_23B56A90C();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));
    v15 = *(_QWORD *)(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v15);
  }
  else
  {
    v17 = *(int **)(v0 + 24);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 32))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 120));
    v19 = (int *)((char *)v17 + *v17);
    v18 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 192) = v18;
    *v18 = v0;
    v18[1] = sub_23B512F90;
    return ((uint64_t (*)(_QWORD, _QWORD))v19)(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 136));
  }
}

uint64_t sub_23B51322C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 176);
  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 168);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B5132E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 120);
  v1 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 112);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Sequence.asyncForEach(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[7] = AssociatedTypeWitness;
  v5[8] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[9] = swift_task_alloc();
  sub_23B56A900();
  v5[10] = swift_task_alloc();
  v5[11] = *(_QWORD *)(a3 - 8);
  v5[12] = swift_task_alloc();
  v8 = swift_getAssociatedTypeWitness();
  v5[13] = v8;
  v5[14] = *(_QWORD *)(v8 - 8);
  v5[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B51347C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v5;
  _QWORD *v6;
  uint64_t (*v7)(_QWORD);

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 16))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 32));
  sub_23B56A468();
  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  swift_getAssociatedConformanceWitness();
  sub_23B56A90C();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v5 = *(int **)(v0 + 16);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 32))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 56));
    v7 = (uint64_t (*)(_QWORD))((char *)v5 + *v5);
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v6;
    *v6 = v0;
    v6[1] = sub_23B5135E0;
    return v7(*(_QWORD *)(v0 + 72));
  }
}

uint64_t sub_23B5135E0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B513644()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v5;
  _QWORD *v6;
  uint64_t (*v7)(_QWORD);

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  swift_getAssociatedConformanceWitness();
  sub_23B56A90C();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v5 = *(int **)(v0 + 16);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 32))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 56));
    v7 = (uint64_t (*)(_QWORD))((char *)v5 + *v5);
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v6;
    *v6 = v0;
    v6[1] = sub_23B5135E0;
    return v7(*(_QWORD *)(v0 + 72));
  }
}

uint64_t sub_23B513784()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 112);
  v1 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 104);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B51380C(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 152) = v1;
  swift_task_dealloc();
  if (v1)
    swift_bridgeObjectRelease();
  else
    *(_BYTE *)(v4 + 160) = a1 & 1;
  return swift_task_switch();
}

uint64_t sub_23B51388C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  int *v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t);

  if ((*(_BYTE *)(v0 + 160) & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 16))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 64));
    sub_23B56A5A0();
    sub_23B56A588();
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 64));
  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  swift_getAssociatedConformanceWitness();
  sub_23B56A90C();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
    v4 = *(_QWORD *)(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
    v6 = v4;
  }
  else
  {
    v7 = *(int **)(v0 + 24);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 32))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 64));
    v10 = (uint64_t (*)(uint64_t))((char *)v7 + *v7);
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 144) = v8;
    *v8 = v0;
    v8[1] = sub_23B51380C;
    v6 = *(_QWORD *)(v0 + 88);
    v5 = v10;
  }
  return v5(v6);
}

uint64_t sub_23B513A10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 128);
  v1 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 120);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 64));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t BinaryEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD *, uint64_t, uint64_t);
  _QWORD v10[5];

  type metadata accessor for BinaryDataEncoderStorage();
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_23B56F430;
  v7 = v6 + 16;
  v10[3] = &type metadata for _BinaryEncoder;
  v10[4] = &off_250C7A960;
  v10[0] = v6;
  v8 = *(void (**)(_QWORD *, uint64_t, uint64_t))(a3 + 8);
  swift_retain();
  v8(v10, a2, a3);
  if (v3)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    swift_beginAccess();
    v7 = *(_QWORD *)(v6 + 16);
    sub_23B502434(v7, *(_QWORD *)(v6 + 24));
    swift_release();
  }
  return v7;
}

uint64_t type metadata accessor for BinaryDataEncoderStorage()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for BinaryEncoder()
{
  return &type metadata for BinaryEncoder;
}

uint64_t sub_23B513BE0()
{
  uint64_t v0;

  sub_23B504944(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance();
}

ValueMetadata *type metadata accessor for _BinaryEncoder()
{
  return &type metadata for _BinaryEncoder;
}

uint64_t sub_23B513C14@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  a1[3] = &type metadata for BinaryEncodingContainer;
  a1[4] = &off_250C7AF98;
  *a1 = v2;
  return swift_retain();
}

ValueMetadata *type metadata accessor for BinaryEncodingContainer()
{
  return &type metadata for BinaryEncodingContainer;
}

uint64_t sub_23B513C44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = FixedWidthInteger.bytes.getter(a3, a4);
  swift_beginAccess();
  if (*(_QWORD *)(v4 + 16))
    sub_23B569DF0();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23B513CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v6)(_QWORD *, uint64_t, uint64_t);
  _QWORD v8[5];

  v8[0] = a2;
  v8[3] = &type metadata for _BinaryEncoder;
  v8[4] = &off_250C7A960;
  v6 = *(void (**)(_QWORD *, uint64_t, uint64_t))(a4 + 8);
  swift_retain();
  v6(v8, a3, a4);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

void sub_23B513D40(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x24BDAC8D0];
  v3[3] = MEMORY[0x24BDCDDE8];
  v3[4] = MEMORY[0x24BDCDDC8];
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_23B513DA4
     + *((int *)qword_23B513F48 + (__swift_project_boxed_opaque_existential_1(v3, MEMORY[0x24BDCDDE8])[1] >> 62));
  __asm { BR              X10 }
}

uint64_t sub_23B513DB4()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v3;

  sub_23B502434(v1, v0);
  sub_23B569DF0();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v3);
}

uint64_t sub_23B513F58()
{
  swift_beginAccess();
  sub_23B569E50();
  return swift_endAccess();
}

uint64_t sub_23B513FD0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v0 = sub_23B56A294();
  if (v1 >> 60 == 15)
  {
    sub_23B5140F4();
    swift_allocError();
    return swift_willThrow();
  }
  else
  {
    v3 = v0;
    v4 = v1;
    swift_beginAccess();
    sub_23B513D40(v3, v4);
    swift_endAccess();
    return sub_23B514138(v3, v4);
  }
}

uint64_t sub_23B514094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_23B513C44(a1, *v3, a2, a3);
}

uint64_t sub_23B5140B4()
{
  return sub_23B513F58();
}

uint64_t sub_23B5140D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_23B513CC8(a1, *v3, a2, a3);
}

unint64_t sub_23B5140F4()
{
  unint64_t result;

  result = qword_256A2BE28;
  if (!qword_256A2BE28)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for BinaryEncodingError, &type metadata for BinaryEncodingError);
    atomic_store(result, (unint64_t *)&qword_256A2BE28);
  }
  return result;
}

uint64_t sub_23B514138(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_23B504944(a1, a2);
  return a1;
}

uint64_t sub_23B51414C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_23B569C40();
  if (!result || (result = sub_23B569C64(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_23B569C58();
      return sub_23B569DF0();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t SynchronousCache.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  SynchronousCache.init()();
  return v0;
}

uint64_t SynchronousCache.init()()
{
  uint64_t v0;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9CC0);
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v0 + 16) = v1;
  *(_QWORD *)(v0 + 24) = sub_23B56A144();
  return v0;
}

uint64_t sub_23B514268@<X0>(char *a1@<X0>, char *a2@<X1>, NSObject *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  char *v34;
  char *v35;
  NSObject *v36;
  os_log_type_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *boxed_opaque_existential_1;
  void (*v55)(uint64_t *, NSObject *, uint64_t);
  NSObject *v56;
  void (*v58)(char *, uint64_t);
  _QWORD v59[2];
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  void (*v64)(char *, char *, uint64_t);
  char *v65;
  void (*v66)(char *, char *, uint64_t);
  void (*v67)(char *, char *, uint64_t);
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t v75[4];
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v74 = a5;
  v73 = a3;
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  v78 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v70 = (char *)v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v72 = (char *)v59 - v12;
  v13 = sub_23B56A900();
  v66 = *(void (**)(char *, char *, uint64_t))(v13 - 8);
  v67 = (void (*)(char *, char *, uint64_t))v13;
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v59 - v15;
  v17 = *(_QWORD **)(a4 - 8);
  v18 = MEMORY[0x24BDAC7A8](v14);
  v65 = (char *)v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v71 = (char *)v59 - v21;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v69 = (char *)v59 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)v59 - v24;
  v68 = a1 + 24;
  swift_beginAccess();
  MEMORY[0x23B8664C0](v75, a2, *((_QWORD *)a1 + 3), v9, MEMORY[0x24BEE4AD8] + 8, *(_QWORD *)(v8 + 88));
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9CD8);
  v26 = swift_dynamicCast();
  v27 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v17[7];
  if ((v26 & 1) != 0)
  {
    v68 = a2;
    v28 = v78;
    v27(v16, 0, 1, a4);
    v67 = (void (*)(char *, char *, uint64_t))v17[4];
    v67(v25, v16, a4);
    v29 = v25;
    v30 = v17;
    if (qword_2542FAD78 != -1)
      swift_once();
    v31 = sub_23B56A060();
    __swift_project_value_buffer(v31, (uint64_t)qword_2542FC458);
    v32 = (void (*)(char *, char *, uint64_t))v17[2];
    v33 = v69;
    v32(v69, v29, a4);
    v34 = v70;
    v64 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
    v64(v70, v68, v9);
    v68 = v29;
    v35 = v71;
    v66 = v32;
    v32(v71, (char *)v73, a4);
    v36 = sub_23B56A048();
    v37 = sub_23B56A81C();
    v38 = v37;
    v73 = v36;
    if (os_log_type_enabled(v36, v37))
    {
      v39 = swift_slowAlloc();
      v63 = v38;
      v40 = v39;
      v62 = swift_slowAlloc();
      v75[0] = v62;
      *(_DWORD *)v40 = 141559043;
      v76 = 1752392040;
      v61 = &v77;
      sub_23B56A918();
      *(_WORD *)(v40 + 12) = 2081;
      v59[1] = v40 + 14;
      v60 = v30;
      v41 = v65;
      v66(v65, v33, a4);
      v42 = sub_23B56A300();
      v76 = sub_23B5034E4(v42, v43, v75);
      sub_23B56A918();
      swift_bridgeObjectRelease();
      v44 = (void (*)(char *, uint64_t))v60[1];
      v44(v33, a4);
      *(_WORD *)(v40 + 22) = 2082;
      v64(v72, v34, v9);
      v45 = sub_23B56A300();
      v76 = sub_23B5034E4(v45, v46, v75);
      sub_23B56A918();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v78 + 8))(v34, v9);
      *(_WORD *)(v40 + 32) = 2160;
      v76 = 1752392040;
      sub_23B56A918();
      *(_WORD *)(v40 + 42) = 2081;
      v47 = v71;
      v66(v41, v71, a4);
      v48 = sub_23B56A300();
      v76 = sub_23B5034E4(v48, v49, v75);
      sub_23B56A918();
      swift_bridgeObjectRelease();
      v44(v47, a4);
      v50 = v68;
      v51 = v73;
      _os_log_impl(&dword_23B4F9000, v73, (os_log_type_t)v63, "Some other thread already stored value %{private,mask.hash}s for '%{public}s' -- ignoring computed value: %{private,mask.hash}s", (uint8_t *)v40, 0x34u);
      v52 = v62;
      swift_arrayDestroy();
      MEMORY[0x23B867948](v52, -1, -1);
      MEMORY[0x23B867948](v40, -1, -1);

      v53 = v74;
    }
    else
    {
      v58 = (void (*)(char *, uint64_t))v30[1];
      v58(v33, a4);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v34, v9);
      v58(v35, a4);

      v53 = v74;
      v50 = v68;
    }
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v67)(v53, v50, a4);
  }
  else
  {
    v27(v16, 1, 1, a4);
    (*((void (**)(char *, void (*)(char *, char *, uint64_t)))v66 + 1))(v16, v67);
    (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v72, a2, v9);
    v75[3] = a4;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v75);
    v55 = (void (*)(uint64_t *, NSObject *, uint64_t))v17[2];
    v56 = v73;
    v55(boxed_opaque_existential_1, v73, a4);
    swift_beginAccess();
    sub_23B56A1C8();
    sub_23B56A1E0();
    swift_endAccess();
    return ((uint64_t (*)(uint64_t, NSObject *, uint64_t))v55)(v74, v56, a4);
  }
}

uint64_t sub_23B5148B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23B514268(*(char **)(v1 + 24), *(char **)(v1 + 32), *(NSObject **)(v1 + 40), *(_QWORD *)(v1 + 16), a1);
}

void SynchronousCache.clear(key:)()
{
  uint64_t v0;
  os_unfair_lock_s *v1;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 16) + 16);
  os_unfair_lock_lock(v1);
  sub_23B514924(v0);
  os_unfair_lock_unlock(v1);
}

uint64_t sub_23B514924(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[64];

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(_BYTE *))(v2 + 16))(&v4[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  memset(&v4[32], 0, 32);
  swift_beginAccess();
  sub_23B56A1C8();
  sub_23B56A1E0();
  return swift_endAccess();
}

Swift::Void __swiftcall SynchronousCache.clear()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 16) + 16);
  os_unfair_lock_lock(v1);
  sub_23B514A3C();
  os_unfair_lock_unlock(v1);
}

uint64_t sub_23B514A3C()
{
  swift_beginAccess();
  sub_23B56A1C8();
  sub_23B56A1BC();
  return swift_endAccess();
}

uint64_t SynchronousCache.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SynchronousCache.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_23B514B04(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_23B514B24()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for SynchronousCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SynchronousCache);
}

uint64_t method lookup function for SynchronousCache()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SynchronousCache.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t URL.isDirectory.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t inited;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t v10;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F97E0);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9890);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23B56F770;
  v4 = (void *)*MEMORY[0x24BDBCC60];
  *(_QWORD *)(inited + 32) = *MEMORY[0x24BDBCC60];
  v5 = v4;
  sub_23B51529C(inited);
  swift_setDeallocating();
  type metadata accessor for URLResourceKey(0);
  swift_arrayDestroy();
  sub_23B569D6C();
  swift_bridgeObjectRelease();
  v6 = sub_23B569D3C();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v2, 0, 1, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v2, 1, v6) == 1)
  {
    sub_23B5154C8((uint64_t)v2);
    return 0;
  }
  else
  {
    v9 = sub_23B569D18();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v2, v6);
    return v9 & 1;
  }
}

uint64_t URL.setExtendedAttribute(name:value:)()
{
  return sub_23B569D90();
}

void sub_23B514D6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_23B514DD0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t value, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t result;
  _QWORD *v30;
  uint64_t v31;
  __int16 v32;
  char v33;
  char v34;
  char v35;
  char v36;

  v31 = v25;
  v32 = v26;
  v33 = BYTE2(v26);
  v34 = BYTE3(v26);
  v35 = BYTE4(v26);
  v36 = BYTE5(v26);
  v27 = sub_23B56A330();
  v28 = setxattr(v24, (const char *)(v27 + 32), &v31, BYTE6(v26), 0, 0);
  result = swift_release();
  if (v28 < 0)
  {
    sub_23B515814();
    swift_allocError();
    *v30 = v28;
    return swift_willThrow();
  }
  return result;
}

uint64_t URL.extendedAttribute(name:)()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_23B569D90();
  if (!v0)
    return v2;
  return result;
}

void sub_23B5150C8(const char *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  ssize_t v6;
  uint64_t v7;
  ssize_t *v8;
  __int128 v9;

  v5 = sub_23B56A330();
  v6 = getxattr(a1, (const char *)(v5 + 32), 0, 0, 0, 0);
  swift_release();
  if (v6 < 0)
  {
    sub_23B515814();
    swift_allocError();
    *v8 = v6;
    swift_willThrow();
  }
  else
  {
    *(_QWORD *)&v9 = sub_23B50D0D0(v6);
    *((_QWORD *)&v9 + 1) = v7;
    MEMORY[0x24BDAC7A8](v9);
    sub_23B50BC50();
    if (v2)
      sub_23B504944(v9, *((unint64_t *)&v9 + 1));
    else
      *a2 = v9;
  }
}

uint64_t sub_23B5151F8(void *a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, size_t a6)
{
  uint64_t v9;
  ssize_t v10;
  uint64_t result;
  ssize_t *v12;

  v9 = sub_23B56A330();
  v10 = getxattr(a3, (const char *)(v9 + 32), a1, a6, 0, 0);
  result = swift_release();
  if (v10 < 0)
  {
    sub_23B515814();
    swift_allocError();
    *v12 = v10;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_23B51529C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9800);
    v3 = sub_23B56AA38();
    v4 = 0;
    v5 = v3 + 56;
    v31 = v1;
    v32 = a1 + 32;
    while (1)
    {
      v6 = *(void **)(v32 + 8 * v4);
      sub_23B56A288();
      sub_23B56AE64();
      v7 = v6;
      sub_23B56A36C();
      v8 = sub_23B56AE88();
      result = swift_bridgeObjectRelease();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = v8 & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = sub_23B56A288();
        v17 = v16;
        if (v15 == sub_23B56A288() && v17 == v18)
        {
LABEL_3:
          swift_bridgeObjectRelease_n();
LABEL_4:

          goto LABEL_5;
        }
        v20 = sub_23B56AD98();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if ((v20 & 1) != 0)
          goto LABEL_4;
        v21 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v21;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v22 = sub_23B56A288();
          v24 = v23;
          if (v22 == sub_23B56A288() && v24 == v25)
            goto LABEL_3;
          v27 = sub_23B56AD98();
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          if ((v27 & 1) != 0)
            goto LABEL_4;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v11) = v7;
      v28 = *(_QWORD *)(v3 + 16);
      v29 = __OFADD__(v28, 1);
      v30 = v28 + 1;
      if (v29)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v30;
LABEL_5:
      if (++v4 == v31)
        return v3;
    }
  }
  return MEMORY[0x24BEE4B08];
}

uint64_t sub_23B5154C8(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F97E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_23B515508(uint64_t a1)
{
  uint64_t v1;

  sub_23B514D6C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_23B515528(const char *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_23B5150C8(a1, a2);
}

uint64_t _s22ExtendedAttributeErrorOwet(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t _s22ExtendedAttributeErrorOwst(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for URL.ExtendedAttributeError()
{
  return &type metadata for URL.ExtendedAttributeError;
}

uint64_t sub_23B51559C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t result;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;

  v2 = sub_23B56AF0C();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v27 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9B60);
    v10 = sub_23B56AA38();
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v28 = v9;
    v29 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v32 = v10 + 56;
    while (1)
    {
      v30 = v11;
      v31(v8, v29 + v13 * v11, v2);
      sub_23B505AAC(&qword_2542F9C00, MEMORY[0x24BDD0A60]);
      v14 = sub_23B56A1EC();
      v15 = ~(-1 << *(_BYTE *)(v10 + 32));
      v16 = v14 & v15;
      v17 = (v14 & (unint64_t)v15) >> 6;
      v18 = *(_QWORD *)(v32 + 8 * v17);
      v19 = 1 << (v14 & v15);
      if ((v19 & v18) != 0)
      {
        do
        {
          v31(v6, *(_QWORD *)(v10 + 48) + v16 * v13, v2);
          sub_23B505AAC(&qword_256A2BE30, MEMORY[0x24BDD0A68]);
          v20 = sub_23B56A240();
          v21 = v3;
          v22 = *(void (**)(char *, uint64_t))(v3 + 8);
          v22(v6, v2);
          if ((v20 & 1) != 0)
          {
            v22(v8, v2);
            v3 = v21;
            v9 = v28;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v15;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v32 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v21;
        }
        while ((v18 & (1 << v16)) != 0);
        v9 = v28;
      }
      *(_QWORD *)(v32 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v16 * v13, v8, v2);
      v24 = *(_QWORD *)(v10 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
        break;
      *(_QWORD *)(v10 + 16) = v26;
LABEL_4:
      v11 = v30 + 1;
      if (v30 + 1 == v9)
        return v10;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B08];
  }
  return result;
}

uint64_t sub_23B5157F4(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_23B5151F8(a1, a2, *(const char **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

unint64_t sub_23B515814()
{
  unint64_t result;

  result = qword_256A2BE38;
  if (!qword_256A2BE38)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for URL.ExtendedAttributeError, &type metadata for URL.ExtendedAttributeError);
    atomic_store(result, &qword_256A2BE38);
  }
  return result;
}

uint64_t sub_23B515858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_23B56A624();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_23B56A618();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_23B5043F0(a1, &qword_2542FADF0);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_23B56A5C4();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_23B5159A4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542FADF8);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_23B569FA0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA88);
  swift_allocObject();
  result = sub_23B56AF90();
  qword_2542FAAA0 = result;
  return result;
}

uint64_t sub_23B515A48()
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542FAB78);
  swift_allocObject();
  result = sub_23B56AF90();
  qword_2542FC448 = result;
  return result;
}

uint64_t WorkItemQueue.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_id;
  v4 = sub_23B569FA0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t WorkItemQueue.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_name);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t WorkItemQueue.__allocating_init(name:identifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  WorkItemQueue.init(name:identifier:)(a1, a2, a3);
  return v6;
}

char *WorkItemQueue.init(name:identifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_unfair_lock_s *v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  char *v52;
  void (*v53)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66[2];
  uint64_t v67;
  unint64_t v68;

  v4 = v3;
  v64 = a3;
  v59 = a1;
  v60 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FADF0);
  MEMORY[0x24BDAC7A8](v5);
  v61 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA80);
  MEMORY[0x24BDAC7A8](v7);
  v55 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAB28);
  v57 = *(char **)(v9 - 8);
  v58 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAB30);
  v13 = *(_QWORD *)(v12 - 8);
  v63 = v12;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v52 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v62 = (char *)&v52 - v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAB40);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAB38);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  v53 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  v53(&v4[OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_stream], 1, 1, v17);
  v24 = OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_continuation;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v23, 1, 1, v12);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAB68);
  v25 = swift_allocObject();
  *(_DWORD *)(v25 + ((*(unsigned int *)(*(_QWORD *)v25 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_23B501498((uint64_t)v23, v25 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v25 + 16), &qword_2542FAB38);
  sub_23B5043F0((uint64_t)v23, &qword_2542FAB38);
  *(_QWORD *)&v4[v24] = v25;
  *(_QWORD *)&v4[OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_processTask] = 0;
  v4[OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_flushing] = 0;
  v4[OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_terminating] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_currentWorkItem] = 0;
  v26 = &v4[OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_id];
  v27 = sub_23B569FA0();
  v56 = *(_QWORD *)(v27 - 8);
  v28 = *(void (**)(char *, uint64_t))(v56 + 16);
  v54 = v27;
  v28(v26, v64);
  v29 = (uint64_t *)&v4[OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_name];
  v30 = v60;
  *v29 = v59;
  v29[1] = v30;
  type metadata accessor for WorkItemQueue.WorkItem();
  v32 = v57;
  v31 = v58;
  (*((void (**)(char *, _QWORD, uint64_t))v57 + 13))(v11, *MEMORY[0x24BEE6A10], v58);
  v33 = v52;
  sub_23B56A630();
  (*((void (**)(char *, uint64_t))v32 + 1))(v11, v31);
  v60 = v13;
  v34 = (uint64_t)v62;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v62, v33, v63);
  v57 = v20;
  v58 = v18;
  v35 = (uint64_t)v55;
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v55, v20, v17);
  v59 = v17;
  v53((char *)v35, 0, 1, v17);
  v36 = (uint64_t)&v4[OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_stream];
  swift_beginAccess();
  sub_23B520A4C(v35, v36, &qword_2542FAA80);
  swift_endAccess();
  v37 = *(_QWORD *)&v4[OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_continuation];
  v38 = v37 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v37 + 16);
  v39 = (os_unfair_lock_s *)(v37 + ((*(unsigned int *)(*(_QWORD *)v37 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v39);
  sub_23B5162BC(v38, v34);
  os_unfair_lock_unlock(v39);
  swift_release();
  if (qword_2542FA8E8 != -1)
    swift_once();
  v40 = sub_23B56A060();
  __swift_project_value_buffer(v40, (uint64_t)qword_2542FC408);
  swift_retain_n();
  v41 = sub_23B56A048();
  v42 = sub_23B56A828();
  if (os_log_type_enabled(v41, v42))
  {
    v43 = swift_slowAlloc();
    v44 = swift_slowAlloc();
    *(_DWORD *)v43 = 136315394;
    v67 = 91;
    v68 = 0xE100000000000000;
    v65 = *(_QWORD *)v4;
    v66[0] = v44;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AA0);
    sub_23B56A300();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    swift_bridgeObjectRetain();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    v67 = sub_23B5034E4(v67, v68, v66);
    sub_23B56A918();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v43 + 12) = 2080;
    swift_retain();
    v45 = WorkItemQueue.description.getter();
    v47 = v46;
    swift_release();
    v67 = sub_23B5034E4(v45, v47, v66);
    sub_23B56A918();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_23B4F9000, v41, v42, "%s init %s", (uint8_t *)v43, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v44, -1, -1);
    MEMORY[0x23B867948](v43, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v48 = sub_23B56A624();
  v49 = (uint64_t)v61;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v61, 1, 1, v48);
  v50 = (_QWORD *)swift_allocObject();
  v50[2] = 0;
  v50[3] = 0;
  v50[4] = v4;
  swift_retain();
  sub_23B516650(v49, (uint64_t)&unk_256A2BE48, (uint64_t)v50);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v64, v54);
  sub_23B5043F0(v49, &qword_2542FADF0);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v57, v59);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v62, v63);
  return v4;
}

uint64_t sub_23B5162BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_23B5043F0(a1, &qword_2542FAB38);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAB30);
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, v4);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
}

uint64_t sub_23B516340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[5] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FADF0);
  v4[6] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA80);
  v4[7] = swift_task_alloc();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAB40);
  v4[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[9] = v6;
  v4[10] = *(_QWORD *)(v6 + 64);
  v4[11] = swift_task_alloc();
  v4[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B516404()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 40) + OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_stream;
  swift_beginAccess();
  sub_23B501498(v4, v3, &qword_2542FAA80);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_23B5043F0(*(_QWORD *)(v0 + 56), &qword_2542FAA80);
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 88);
    v5 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 72);
    v8 = *(_QWORD *)(v0 + 64);
    v9 = *(_QWORD *)(v0 + 40);
    v10 = *(_QWORD *)(v0 + 48);
    v17 = v10;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
    v11(v5, *(_QWORD *)(v0 + 56), v8);
    v12 = sub_23B56A624();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v10, 1, 1, v12);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v5, v8);
    v13 = sub_23B4FCC20(&qword_2542FAA58, type metadata accessor for WorkItemQueue, (uint64_t)&protocol conformance descriptor for WorkItemQueue);
    v14 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v15 = (_QWORD *)swift_allocObject();
    v15[2] = v9;
    v15[3] = v13;
    v15[4] = v9;
    v11((uint64_t)v15 + v14, v6, v8);
    swift_retain_n();
    *(_QWORD *)(v9 + OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_processTask) = sub_23B515858(v17, (uint64_t)&unk_256A2BF38, (uint64_t)v15);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v8);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B5165E4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_23B4FACE0;
  return sub_23B516340(a1, v4, v5, v6);
}

uint64_t sub_23B516650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FADF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23B501498(a1, (uint64_t)v8, &qword_2542FADF0);
  v9 = sub_23B56A624();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_23B5043F0((uint64_t)v8, &qword_2542FADF0);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v11 = sub_23B56A5C4();
      v13 = v12;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_23B56A618();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v11 = 0;
  v13 = 0;
LABEL_6:
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a3;
  if (v13 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    v16[2] = v11;
    v16[3] = v13;
  }
  return swift_task_create();
}

uint64_t static WorkItemQueue.currentWorkItemQueueIdentifier.getter()
{
  if (qword_2542FAA70 != -1)
    swift_once();
  return sub_23B56AF9C();
}

BOOL static WorkItemQueue.inWorkItemQueueContext.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v6;

  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542FADF8);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2542FAA70 != -1)
    swift_once();
  sub_23B56AF9C();
  v3 = sub_23B569FA0();
  v4 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v2, 1, v3) != 1;
  sub_23B5043F0((uint64_t)v2, (uint64_t *)&unk_2542FADF8);
  return v4;
}

uint64_t WorkItemQueue.__allocating_init(identifier:enqueueArtificialDelay:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = sub_23B569FA0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23B569F64();
  v8 = v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  type metadata accessor for WorkItemQueue(0);
  v9 = swift_allocObject();
  WorkItemQueue.init(name:identifier:)(v6, v8, (uint64_t)v5);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return v9;
}

uint64_t sub_23B5169D8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[19] = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA80);
  v1[20] = swift_task_alloc();
  v2 = sub_23B569FA0();
  v1[21] = v2;
  v1[22] = *(_QWORD *)(v2 - 8);
  v1[23] = swift_task_alloc();
  v1[24] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAB38);
  v1[25] = swift_task_alloc();
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAB30);
  v1[26] = v3;
  v1[27] = *(_QWORD *)(v3 - 8);
  v1[28] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B516ABC()
{
  uint64_t v0;
  _QWORD *v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t (*v24)();
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;

  v1 = *(_QWORD **)(v0 + 152);
  *(_QWORD *)(v0 + 72) = *v1;
  v42 = 91;
  v43 = 0xE100000000000000;
  *(_QWORD *)(v0 + 232) = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AA0);
  sub_23B56A300();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  v2 = (char *)v1 + OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_name;
  *(_QWORD *)(v0 + 240) = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_name);
  *(_QWORD *)(v0 + 248) = *((_QWORD *)v2 + 1);
  swift_bridgeObjectRetain();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  v3 = v43;
  v40 = v42;
  *(_QWORD *)(v0 + 256) = v42;
  *(_QWORD *)(v0 + 264) = v3;
  if (qword_2542FA8E8 != -1)
    swift_once();
  v4 = sub_23B56A060();
  *(_QWORD *)(v0 + 272) = __swift_project_value_buffer(v4, (uint64_t)qword_2542FC408);
  swift_bridgeObjectRetain_n();
  v5 = sub_23B56A048();
  v6 = sub_23B56A84C();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    v42 = v8;
    *(_DWORD *)v7 = 136315394;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 136) = sub_23B5034E4(v40, v3, &v42);
    sub_23B56A918();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v7 + 12) = 2080;
    *(_QWORD *)(v0 + 144) = sub_23B5034E4(0x6164696C61766E69, 0xEC00000029286574, &v42);
    sub_23B56A918();
    _os_log_impl(&dword_23B4F9000, v5, v6, "%s %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v8, -1, -1);
    MEMORY[0x23B867948](v7, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if ((sub_23B51F928() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_retain_n();
    v9 = sub_23B56A048();
    v10 = sub_23B56A840();
    v11 = os_log_type_enabled(v9, v10);
    v12 = *(_QWORD **)(v0 + 152);
    if (v11)
    {
      v13 = swift_slowAlloc();
      v14 = swift_slowAlloc();
      *(_DWORD *)v13 = 136315394;
      v41 = v14;
      v42 = 91;
      v43 = 0xE100000000000000;
      *(_QWORD *)(v0 + 112) = *v12;
      sub_23B56A300();
      sub_23B56A3A8();
      swift_bridgeObjectRelease();
      sub_23B56A3A8();
      swift_bridgeObjectRetain();
      sub_23B56A3A8();
      swift_bridgeObjectRelease();
      sub_23B56A3A8();
      *(_QWORD *)(v0 + 120) = sub_23B5034E4(v42, v43, &v41);
      sub_23B56A918();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 12) = 2080;
      *(_QWORD *)(v0 + 128) = sub_23B5034E4(0x6164696C61766E69, 0xEC00000029286574, &v41);
      sub_23B56A918();
      _os_log_impl(&dword_23B4F9000, v9, v10, "%s: %s Will deadlock when called from a WorkItemQueue context!", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x23B867948](v14, -1, -1);
      MEMORY[0x23B867948](v13, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v22 = *(_QWORD *)(*(_QWORD *)(v0 + 152) + OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_currentWorkItem);
    *(_QWORD *)(v0 + 320) = v22;
    if (v22)
    {
      swift_retain();
      v23 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 328) = v23;
      v24 = sub_23B5178FC;
LABEL_20:
      *v23 = v0;
      v23[1] = v24;
      return sub_23B549D00();
    }
LABEL_14:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v16 = *(_QWORD *)(v0 + 208);
  v15 = *(_QWORD *)(v0 + 216);
  v17 = *(_QWORD *)(*(_QWORD *)(v0 + 152) + OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_continuation);
  v18 = *(_QWORD *)(v0 + 200);
  v19 = v17 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v17 + 16);
  v20 = (os_unfair_lock_s *)(v17 + ((*(unsigned int *)(*(_QWORD *)v17 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v20);
  sub_23B501498(v19, v18, &qword_2542FAB38);
  os_unfair_lock_unlock(v20);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v18, 1, v16) == 1)
  {
    v21 = *(_QWORD *)(v0 + 200);
    swift_bridgeObjectRelease();
    sub_23B5043F0(v21, &qword_2542FAB38);
    goto LABEL_14;
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 216) + 32))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208));
  swift_bridgeObjectRetain_n();
  v26 = sub_23B56A048();
  v27 = sub_23B56A828();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc();
    v29 = swift_slowAlloc();
    v42 = v29;
    *(_DWORD *)v28 = 136315138;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 104) = sub_23B5034E4(v40, v3, &v42);
    sub_23B56A918();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_23B4F9000, v26, v27, "%s Removing continuation", v28, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v29, -1, -1);
    MEMORY[0x23B867948](v28, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v30 = *(_QWORD *)(v0 + 152);
  os_unfair_lock_lock(v20);
  sub_23B5043F0(v19, &qword_2542FAB38);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAB30);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v19, 1, 1, v31);
  os_unfair_lock_unlock(v20);
  *(_BYTE *)(v30 + OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_flushing) = 1;
  v32 = *(_QWORD *)(v30 + OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_currentWorkItem);
  *(_QWORD *)(v0 + 280) = v32;
  if (v32)
  {
    swift_retain();
    v23 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 288) = v23;
    v24 = sub_23B517370;
    goto LABEL_20;
  }
  v33 = *(_QWORD *)(v0 + 224);
  v35 = *(_QWORD *)(v0 + 184);
  v34 = *(_QWORD *)(v0 + 192);
  v36 = *(_QWORD *)(v0 + 168);
  v37 = *(_QWORD *)(v0 + 176);
  sub_23B569F94();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v35, v34, v36);
  type metadata accessor for WorkItemQueue.WorkItem();
  swift_allocObject();
  v38 = sub_23B54BE80(3, v35, (uint64_t)&unk_256A2C9B0, 0, 0, 0);
  *(_QWORD *)(v0 + 296) = v38;
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v34, v36);
  sub_23B517D04(v38, v33);
  v39 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 304) = v39;
  *v39 = v0;
  v39[1] = sub_23B5174C0;
  return sub_23B54A0F4();
}

uint64_t sub_23B517370()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_23B5173D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0[28];
  v2 = v0[23];
  v3 = v0[24];
  v4 = v0[21];
  v5 = v0[22];
  sub_23B569F94();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, v3, v4);
  type metadata accessor for WorkItemQueue.WorkItem();
  swift_allocObject();
  v6 = sub_23B54BE80(3, v2, (uint64_t)&unk_256A2C9B0, 0, 0, 0);
  v0[37] = v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  sub_23B517D04(v6, v1);
  v7 = (_QWORD *)swift_task_alloc();
  v0[38] = v7;
  *v7 = v0;
  v7[1] = sub_23B5174C0;
  return sub_23B54A0F4();
}

uint64_t sub_23B5174C0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 312) = v0;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_23B517534()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  _QWORD *v3;
  uint8_t *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  unint64_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  swift_retain_n();
  v1 = sub_23B56A048();
  v2 = sub_23B56A84C();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = *(_QWORD **)(v0 + 152);
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    *(_DWORD *)v4 = 136315138;
    v21 = v5;
    v22 = 91;
    v23 = 0xE100000000000000;
    *(_QWORD *)(v0 + 88) = *v3;
    sub_23B56A300();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    swift_bridgeObjectRetain();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    *(_QWORD *)(v0 + 96) = sub_23B5034E4(v22, v23, &v21);
    sub_23B56A918();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_23B4F9000, v1, v2, "%s Invalidation completed", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v5, -1, -1);
    MEMORY[0x23B867948](v4, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  swift_bridgeObjectRetain();
  v6 = sub_23B56A048();
  v7 = sub_23B56A828();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 264);
  if (v8)
  {
    v10 = *(_QWORD *)(v0 + 256);
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v22 = v12;
    *(_DWORD *)v11 = 136315138;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 80) = sub_23B5034E4(v10, v9, &v22);
    sub_23B56A918();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_23B4F9000, v6, v7, "%s Removing stream", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v12, -1, -1);
    MEMORY[0x23B867948](v11, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v14 = *(_QWORD *)(v0 + 216);
  v13 = *(_QWORD *)(v0 + 224);
  v15 = *(_QWORD *)(v0 + 208);
  v17 = *(_QWORD *)(v0 + 152);
  v16 = *(_QWORD *)(v0 + 160);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAB40);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v16, 1, 1, v18);
  v19 = v17 + OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_stream;
  swift_beginAccess();
  sub_23B520A4C(v16, v19, &qword_2542FAA80);
  swift_endAccess();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B5178FC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23B517984()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v1 = *(void **)(v0 + 312);
  swift_retain();
  v2 = v1;
  swift_retain();
  v3 = v1;
  v4 = sub_23B56A048();
  v5 = sub_23B56A840();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 312);
    v18 = *(_QWORD *)(v0 + 216);
    v19 = *(_QWORD *)(v0 + 208);
    v20 = *(_QWORD *)(v0 + 224);
    v7 = *(_QWORD **)(v0 + 152);
    v8 = swift_slowAlloc();
    v16 = (_QWORD *)swift_slowAlloc();
    v17 = swift_slowAlloc();
    *(_DWORD *)v8 = 136315650;
    v21 = v17;
    v22 = 91;
    v23 = 0xE100000000000000;
    *(_QWORD *)(v0 + 40) = *v7;
    sub_23B56A300();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    swift_bridgeObjectRetain();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    *(_QWORD *)(v0 + 48) = sub_23B5034E4(v22, v23, &v21);
    sub_23B56A918();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v8 + 12) = 2080;
    *(_QWORD *)(v0 + 56) = sub_23B5034E4(0x6164696C61766E69, 0xEC00000029286574, &v21);
    sub_23B56A918();
    *(_WORD *)(v8 + 22) = 2112;
    v9 = v6;
    v10 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 64) = v10;
    sub_23B56A918();
    *v16 = v10;

    _os_log_impl(&dword_23B4F9000, v4, v5, "%s Error in %s: %@", (uint8_t *)v8, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542F99E0);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v16, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v17, -1, -1);
    MEMORY[0x23B867948](v8, -1, -1);
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v20, v19);
  }
  else
  {
    v11 = *(void **)(v0 + 312);
    v13 = *(_QWORD *)(v0 + 216);
    v12 = *(_QWORD *)(v0 + 224);
    v14 = *(_QWORD *)(v0 + 208);
    swift_release();

    swift_release_n();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_23B517D04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t *v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t *v20;
  os_unfair_lock_s *v21;
  char *v22;
  _BYTE v23[4];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[5];

  v25 = a2;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAB20);
  MEMORY[0x24BDAC7A8](v24);
  v4 = sub_23B569FA0();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  v10 = &v23[-v9];
  if (qword_2542FAA98 != -1)
    swift_once();
  sub_23B56AF9C();
  v11 = v28[0];
  if (!v28[0])
    v11 = MEMORY[0x24BEE4B08];
  v28[4] = v11;
  v27 = v2;
  v12 = v2 + OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_id;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2 + OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_id, v4);
  sub_23B539F2C((uint64_t)v10, v8);
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v10, v4);
  v13 = *(os_unfair_lock_s **)(a1 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_visitedQueueIdentifiers);
  v14 = (uint64_t *)&v13[4];
  v15 = v13 + 6;
  os_unfair_lock_lock(v13 + 6);
  sub_23B54BC40(v14, v12, v28);
  os_unfair_lock_unlock(v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(a1 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_assocatedQueueIdentifier);
  v17 = v16 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v16 + 16);
  v18 = (os_unfair_lock_s *)(v16 + ((*(unsigned int *)(*(_QWORD *)v16 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v18);
  sub_23B54B1D0(v17, v12);
  os_unfair_lock_unlock(v18);
  v19 = *(_QWORD *)(a1 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_cancellationBlock);
  v20 = (uint64_t *)(v19 + 16);
  v21 = (os_unfair_lock_s *)(v19 + 32);
  swift_retain();
  os_unfair_lock_lock(v21);
  sub_23B54B3B0(v20, (uint64_t)&unk_256A2BF20, a1);
  os_unfair_lock_unlock(v21);
  swift_release();
  v22 = (char *)&loc_23B518334
      + 4 * word_23B56FA00[*(unsigned __int8 *)(a1 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_itemType)];
  v26 = v4;
  __asm { BR              X10 }
}

uint64_t WorkItemQueue.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = v0;
  if (qword_2542FA8E8 != -1)
    swift_once();
  v2 = sub_23B56A060();
  __swift_project_value_buffer(v2, (uint64_t)qword_2542FC408);
  swift_retain_n();
  v3 = sub_23B56A048();
  v4 = sub_23B56A828();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc();
    v6 = swift_slowAlloc();
    *(_DWORD *)v5 = 136315394;
    v13 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AA0);
    sub_23B56A300();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    swift_bridgeObjectRetain();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    sub_23B5034E4(91, 0xE100000000000000, &v13);
    sub_23B56A918();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v5 + 12) = 2080;
    swift_retain();
    v7 = WorkItemQueue.description.getter();
    v9 = v8;
    swift_release();
    sub_23B5034E4(v7, v9, &v13);
    sub_23B56A918();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_23B4F9000, v3, v4, "%s deinit %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v6, -1, -1);
    MEMORY[0x23B867948](v5, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v10 = v1 + OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_id;
  v11 = sub_23B569FA0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  sub_23B5043F0(v1 + OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_stream, &qword_2542FAA80);
  swift_release();
  swift_release();
  swift_release();
  swift_defaultActor_destroy();
  return v1;
}

uint64_t WorkItemQueue.__deallocating_deinit()
{
  WorkItemQueue.deinit();
  return swift_defaultActor_deallocate();
}

uint64_t sub_23B519108(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  _QWORD v28[3];
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FADF0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAB38);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAB30);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(uint64_t *)((char *)v2 + OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_continuation);
  v15 = v14 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v14 + 16);
  v16 = (os_unfair_lock_s *)(v14 + ((*(unsigned int *)(*(_QWORD *)v14 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v16);
  sub_23B501498(v15, (uint64_t)v9, &qword_2542FAB38);
  os_unfair_lock_unlock(v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_23B5043F0((uint64_t)v9, &qword_2542FAB38);
    if (qword_2542FA8E8 != -1)
      swift_once();
    v17 = sub_23B56A060();
    __swift_project_value_buffer(v17, (uint64_t)qword_2542FC408);
    swift_retain_n();
    swift_retain_n();
    v18 = sub_23B56A048();
    v19 = sub_23B56A840();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = swift_slowAlloc();
      v21 = swift_slowAlloc();
      *(_DWORD *)v20 = 136315394;
      v29 = 91;
      v30 = 0xE100000000000000;
      v31 = v21;
      v22 = *v2;
      v28[1] = v20 + 4;
      v28[2] = v22;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AA0);
      sub_23B56A300();
      sub_23B56A3A8();
      swift_bridgeObjectRelease();
      sub_23B56A3A8();
      swift_bridgeObjectRetain();
      sub_23B56A3A8();
      swift_bridgeObjectRelease();
      sub_23B56A3A8();
      v29 = sub_23B5034E4(v29, v30, &v31);
      sub_23B56A918();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v20 + 12) = 2082;
      sub_23B569FA0();
      sub_23B4FCC20(&qword_2542F97F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v23 = sub_23B56AD44();
      v29 = sub_23B5034E4(v23, v24, &v31);
      sub_23B56A918();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_23B4F9000, v18, v19, "%s Attempted to enqueue workItem %{public}s after invalidation!", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x23B867948](v21, -1, -1);
      MEMORY[0x23B867948](v20, -1, -1);
    }
    else
    {
      swift_release_n();
      swift_release_n();
    }

    v26 = sub_23B56A624();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v6, 1, 1, v26);
    v27 = (_QWORD *)swift_allocObject();
    v27[2] = 0;
    v27[3] = 0;
    v27[4] = a1;
    swift_retain();
    sub_23B515858((uint64_t)v6, (uint64_t)&unk_256A2BE60, (uint64_t)v27);
    return swift_release();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    sub_23B517D04(a1, (uint64_t)v13);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
}

uint64_t sub_23B519598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t sub_23B5195B0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  sub_23B56A5F4();
  sub_23B4FCC20((unint64_t *)&qword_2542F9630, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6838], MEMORY[0x24BEE6848]);
  v1 = swift_allocError();
  *(_QWORD *)(v0 + 24) = v1;
  sub_23B56A15C();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v2;
  *v2 = v0;
  v2[1] = sub_23B51964C;
  return sub_23B54750C(v1, 1);
}

uint64_t sub_23B51964C()
{
  uint64_t *v0;
  void *v1;
  uint64_t v3;

  v1 = *(void **)(*v0 + 24);
  v3 = *v0;
  swift_task_dealloc();

  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_23B51969C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = sub_23B569FA0();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v14 - v9;
  swift_retain();
  sub_23B569F94();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = a2;
  type metadata accessor for WorkItemQueue.WorkItem();
  swift_allocObject();
  v12 = sub_23B54BE80(0, (uint64_t)v8, (uint64_t)&unk_256A2BE68, v11, 0, 0);
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  sub_23B519108(v12);
  return v12;
}

uint64_t sub_23B5197D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v4 = sub_23B569FA0();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v13 - v9;
  swift_retain();
  sub_23B569F94();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
  type metadata accessor for WorkItemQueue.WorkItem();
  swift_allocObject();
  v11 = sub_23B54BE80(0, (uint64_t)v8, a1, a2, 0, 0);
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  sub_23B519108(v11);
  return v11;
}

uint64_t sub_23B5198F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_23B519910()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 32);
  sub_23B4FCC20(&qword_2542FAA58, type metadata accessor for WorkItemQueue, (uint64_t)&protocol conformance descriptor for WorkItemQueue);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v2 + 32) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v3;
  *v3 = v0;
  v3[1] = sub_23B5199D8;
  return sub_23B56ADC8();
}

uint64_t sub_23B5199D8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B519A48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;

  v26[1] = a4;
  v28 = a1;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28);
  v6 = *(_QWORD *)(v27 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](v27);
  v26[0] = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FADF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23B569FA0();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v26 - v16;
  swift_retain();
  sub_23B569F94();
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a2;
  *(_QWORD *)(v18 + 24) = a3;
  type metadata accessor for WorkItemQueue.WorkItem();
  swift_allocObject();
  v19 = sub_23B54BE80(0, (uint64_t)v15, (uint64_t)&unk_256A2BEF8, v18, 0, 0);
  swift_release();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
  sub_23B519108(v19);
  v20 = sub_23B56A624();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v10, 1, 1, v20);
  v21 = v26[0];
  v22 = v27;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v6 + 16))(v26[0], v28, v27);
  v23 = (*(unsigned __int8 *)(v6 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v24 = (char *)swift_allocObject();
  *((_QWORD *)v24 + 2) = 0;
  *((_QWORD *)v24 + 3) = 0;
  *((_QWORD *)v24 + 4) = v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(&v24[v23], v21, v22);
  swift_retain();
  sub_23B515858((uint64_t)v10, (uint64_t)&unk_256A2BF08, (uint64_t)v24);
  swift_release();
  return swift_release();
}

uint64_t sub_23B519CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  *(_QWORD *)(v5 + 24) = a5;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 32) = v6;
  *v6 = v5;
  v6[1] = sub_23B519CF4;
  return sub_23B54A0F4();
}

uint64_t sub_23B519CF4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B519D58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_23B519D74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 32);
  sub_23B4FCC20(&qword_2542FAA58, type metadata accessor for WorkItemQueue, (uint64_t)&protocol conformance descriptor for WorkItemQueue);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v2 + 32) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v3;
  *v3 = v0;
  v3[1] = sub_23B519E3C;
  return sub_23B56ADC8();
}

uint64_t sub_23B519E3C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B519EAC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B519EB8()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B519EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;

  v24[1] = a4;
  v26 = a1;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28);
  v6 = *(_QWORD *)(v25 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](v25);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FADF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23B569FA0();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v24 - v16;
  swift_retain();
  sub_23B569F94();
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
  type metadata accessor for WorkItemQueue.WorkItem();
  swift_allocObject();
  v18 = sub_23B54BE80(0, (uint64_t)v15, a2, a3, 0, 0);
  swift_release();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
  sub_23B519108(v18);
  v19 = sub_23B56A624();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v10, 1, 1, v19);
  v20 = v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v26, v25);
  v21 = (*(unsigned __int8 *)(v6 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v22 = (char *)swift_allocObject();
  *((_QWORD *)v22 + 2) = 0;
  *((_QWORD *)v22 + 3) = 0;
  *((_QWORD *)v22 + 4) = v18;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v22[v21], (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v20);
  swift_retain();
  sub_23B515858((uint64_t)v10, (uint64_t)&unk_256A2BEF0, (uint64_t)v22);
  swift_release();
  return swift_release();
}

uint64_t sub_23B51A128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t sub_23B51A148()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  sub_23B4FCC20(&qword_2542FAA58, type metadata accessor for WorkItemQueue, (uint64_t)&protocol conformance descriptor for WorkItemQueue);
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v4;
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v4 + 32) = v1;
  *(_QWORD *)(v4 + 40) = v3;
  *(_QWORD *)(v4 + 48) = v2;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v5;
  *v5 = v0;
  v5[1] = sub_23B51A220;
  return sub_23B56ADC8();
}

uint64_t sub_23B51A220()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B51A290()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B51A2C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v32 = a5;
  v33 = a6;
  v29[1] = a4;
  v31 = a1;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28);
  v8 = *(_QWORD *)(v30 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](v30);
  v29[0] = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FADF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_23B569FA0();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)v29 - v18;
  swift_retain();
  sub_23B569F94();
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v19, v13);
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = a2;
  *(_QWORD *)(v20 + 24) = a3;
  type metadata accessor for WorkItemQueue.WorkItem();
  swift_allocObject();
  v21 = sub_23B54BE80(0, (uint64_t)v17, (uint64_t)&unk_256A2BED0, v20, 0, 0);
  swift_release();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
  sub_23B519108(v21);
  v22 = sub_23B56A624();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v12, 1, 1, v22);
  v23 = v29[0];
  v24 = v30;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v8 + 16))(v29[0], v31, v30);
  v25 = (*(unsigned __int8 *)(v8 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v26 = (char *)swift_allocObject();
  *((_QWORD *)v26 + 2) = 0;
  *((_QWORD *)v26 + 3) = 0;
  v27 = v32;
  *((_QWORD *)v26 + 4) = v21;
  *((_QWORD *)v26 + 5) = v27;
  *((_QWORD *)v26 + 6) = v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(&v26[v25], v23, v24);
  swift_retain();
  sub_23B515858((uint64_t)v12, (uint64_t)&unk_256A2BEE0, (uint64_t)v26);
  swift_release();
  return swift_release();
}

uint64_t sub_23B51A534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v10;

  *(_QWORD *)(v7 + 24) = a7;
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 32) = v10;
  *v10 = v7;
  v10[1] = sub_23B51A59C;
  return sub_23B54ACC0(a5, a6);
}

uint64_t sub_23B51A59C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B51A600()
{
  uint64_t v0;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28);
  sub_23B56A5DC();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B51A640()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 40);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28);
  sub_23B56A5D0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B51A690()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_23B51A6F0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[17];
  v1 = v0[18];
  v3 = v0[15];
  v4 = v0[16];
  sub_23B569F94();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  type metadata accessor for WorkItemQueue.WorkItem();
  swift_allocObject();
  v5 = sub_23B54BE80(2, v2, (uint64_t)&unk_256A2C9B0, 0, 0, 0);
  v0[22] = v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  sub_23B519108(v5);
  v6 = (_QWORD *)swift_task_alloc();
  v0[23] = v6;
  *v6 = v0;
  v6[1] = sub_23B51A7D0;
  return sub_23B54A0F4();
}

uint64_t sub_23B51A7D0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 192) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B51A834()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  _QWORD *v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  swift_retain_n();
  v1 = sub_23B56A048();
  v2 = sub_23B56A84C();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = *(_QWORD **)(v0 + 112);
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    *(_DWORD *)v4 = 136315138;
    v7 = v5;
    v8 = 91;
    v9 = 0xE100000000000000;
    *(_QWORD *)(v0 + 48) = *v3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AA0);
    sub_23B56A300();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    swift_bridgeObjectRetain();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    *(_QWORD *)(v0 + 56) = sub_23B5034E4(v8, v9, &v7);
    sub_23B56A918();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23B4F9000, v1, v2, "%s Flush barrier completion", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v5, -1, -1);
    MEMORY[0x23B867948](v4, -1, -1);

    swift_release();
  }
  else
  {

    swift_release();
    swift_release_n();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B51AA68()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23B51AAC4()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v1 = *(void **)(v0 + 192);
  swift_retain();
  v2 = v1;
  swift_retain();
  v3 = v1;
  v4 = sub_23B56A048();
  v5 = sub_23B56A840();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 192);
    v7 = *(_QWORD **)(v0 + 112);
    v8 = swift_slowAlloc();
    v13 = (_QWORD *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    *(_DWORD *)v8 = 136315650;
    v15 = v14;
    v16 = 91;
    v17 = 0xE100000000000000;
    *(_QWORD *)(v0 + 16) = *v7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AA0);
    sub_23B56A300();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    swift_bridgeObjectRetain();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    *(_QWORD *)(v0 + 24) = sub_23B5034E4(v16, v17, &v15);
    sub_23B56A918();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    *(_QWORD *)(v0 + 32) = sub_23B5034E4(0x6575516873756C66, 0xEC00000029286575, &v15);
    sub_23B56A918();
    *(_WORD *)(v8 + 22) = 2112;
    v9 = v6;
    v10 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 40) = v10;
    sub_23B56A918();
    *v13 = v10;

    _os_log_impl(&dword_23B4F9000, v4, v5, "%s Error in %s: %@", (uint8_t *)v8, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542F99E0);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v13, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v14, -1, -1);
    MEMORY[0x23B867948](v8, -1, -1);

    swift_release();
  }
  else
  {
    v11 = *(void **)(v0 + 192);
    swift_release();

    swift_release_n();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B51AE08()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[14] = v0;
  v2 = sub_23B569FA0();
  v1[15] = v2;
  v1[16] = *(_QWORD *)(v2 - 8);
  v1[17] = swift_task_alloc();
  v1[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B51AE78()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  if (qword_2542FA8E8 != -1)
    swift_once();
  v1 = sub_23B56A060();
  *(_QWORD *)(v0 + 152) = __swift_project_value_buffer(v1, (uint64_t)qword_2542FC408);
  swift_retain_n();
  v2 = sub_23B56A048();
  v3 = sub_23B56A84C();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD **)(v0 + 112);
  if (v4)
  {
    v6 = swift_slowAlloc();
    v22 = swift_slowAlloc();
    *(_DWORD *)v6 = 136315394;
    v23 = v22;
    v24 = 91;
    v25 = 0xE100000000000000;
    *(_QWORD *)(v0 + 88) = *v5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AA0);
    sub_23B56A300();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    swift_bridgeObjectRetain();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    *(_QWORD *)(v0 + 96) = sub_23B5034E4(v24, v25, &v23);
    sub_23B56A918();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    *(_QWORD *)(v0 + 104) = sub_23B5034E4(0x706D457469617761, 0xEC00000029287974, &v23);
    sub_23B56A918();
    _os_log_impl(&dword_23B4F9000, v2, v3, "%s %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v22, -1, -1);
    MEMORY[0x23B867948](v6, -1, -1);

    if ((sub_23B51F928() & 1) == 0)
    {
LABEL_5:
      v8 = *(_QWORD *)(v0 + 136);
      v7 = *(_QWORD *)(v0 + 144);
      v9 = *(_QWORD *)(v0 + 120);
      v10 = *(_QWORD *)(v0 + 128);
      sub_23B569F94();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v8, v7, v9);
      type metadata accessor for WorkItemQueue.WorkItem();
      swift_allocObject();
      v11 = sub_23B54BE80(1, v8, (uint64_t)&unk_256A2C9B0, 0, 0, 0);
      *(_QWORD *)(v0 + 160) = v11;
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v7, v9);
      sub_23B519108(v11);
      v12 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 168) = v12;
      *v12 = v0;
      v12[1] = sub_23B51B46C;
      return sub_23B54A0F4();
    }
  }
  else
  {

    swift_release_n();
    if ((sub_23B51F928() & 1) == 0)
      goto LABEL_5;
  }
  swift_retain_n();
  v14 = sub_23B56A048();
  v15 = sub_23B56A840();
  v16 = os_log_type_enabled(v14, v15);
  v17 = *(_QWORD **)(v0 + 112);
  if (v16)
  {
    v18 = swift_slowAlloc();
    v19 = swift_slowAlloc();
    *(_DWORD *)v18 = 136315394;
    v23 = v19;
    v24 = 91;
    v25 = 0xE100000000000000;
    *(_QWORD *)(v0 + 64) = *v17;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AA0);
    sub_23B56A300();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    swift_bridgeObjectRetain();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    *(_QWORD *)(v0 + 72) = sub_23B5034E4(v24, v25, &v23);
    sub_23B56A918();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    *(_QWORD *)(v0 + 80) = sub_23B5034E4(0x706D457469617761, 0xEC00000029287974, &v23);
    sub_23B56A918();
    _os_log_impl(&dword_23B4F9000, v14, v15, "%s: %s Will deadlock when called from a WorkItemQueue context!", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v19, -1, -1);
    MEMORY[0x23B867948](v18, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v20 = *(_QWORD *)(*(_QWORD *)(v0 + 112) + OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_currentWorkItem);
  *(_QWORD *)(v0 + 184) = v20;
  if (v20)
  {
    swift_retain();
    v21 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 192) = v21;
    *v21 = v0;
    v21[1] = sub_23B51B704;
    return sub_23B549D00();
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_23B51B46C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B51B4D0()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  _QWORD *v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  swift_retain_n();
  v1 = sub_23B56A048();
  v2 = sub_23B56A84C();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = *(_QWORD **)(v0 + 112);
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    *(_DWORD *)v4 = 136315138;
    v7 = v5;
    v8 = 91;
    v9 = 0xE100000000000000;
    *(_QWORD *)(v0 + 48) = *v3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AA0);
    sub_23B56A300();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    swift_bridgeObjectRetain();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    *(_QWORD *)(v0 + 56) = sub_23B5034E4(v8, v9, &v7);
    sub_23B56A918();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23B4F9000, v1, v2, "%s Flush barrier completion", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v5, -1, -1);
    MEMORY[0x23B867948](v4, -1, -1);

    swift_release();
  }
  else
  {

    swift_release();
    swift_release_n();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B51B704()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23B51B760()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v1 = *(void **)(v0 + 176);
  swift_retain();
  v2 = v1;
  swift_retain();
  v3 = v1;
  v4 = sub_23B56A048();
  v5 = sub_23B56A840();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 176);
    v7 = *(_QWORD **)(v0 + 112);
    v8 = swift_slowAlloc();
    v13 = (_QWORD *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    *(_DWORD *)v8 = 136315650;
    v15 = v14;
    v16 = 91;
    v17 = 0xE100000000000000;
    *(_QWORD *)(v0 + 16) = *v7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AA0);
    sub_23B56A300();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    swift_bridgeObjectRetain();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    *(_QWORD *)(v0 + 24) = sub_23B5034E4(v16, v17, &v15);
    sub_23B56A918();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    *(_QWORD *)(v0 + 32) = sub_23B5034E4(0x706D457469617761, 0xEC00000029287974, &v15);
    sub_23B56A918();
    *(_WORD *)(v8 + 22) = 2112;
    v9 = v6;
    v10 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 40) = v10;
    sub_23B56A918();
    *v13 = v10;

    _os_log_impl(&dword_23B4F9000, v4, v5, "%s Error in %s: %@", (uint8_t *)v8, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542F99E0);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v13, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v14, -1, -1);
    MEMORY[0x23B867948](v8, -1, -1);

    swift_release();
  }
  else
  {
    v11 = *(void **)(v0 + 176);
    swift_release();

    swift_release_n();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t WorkItemQueue.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23B51BAB0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_id;
  v4 = sub_23B569FA0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_23B51BAF8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1[9] = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28);
  v1[10] = v2;
  v1[11] = *(_QWORD *)(v2 - 8);
  v1[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA30);
  v1[13] = swift_task_alloc();
  v1[14] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B51BB94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 72) + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_cancelContinuation;
  swift_beginAccess();
  sub_23B501498(v4, v1, &qword_2542FAA30);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2))
  {
    sub_23B5043F0(*(_QWORD *)(v0 + 112), &qword_2542FAA30);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 112);
    v7 = *(_QWORD *)(v0 + 88);
    v6 = *(_QWORD *)(v0 + 96);
    v8 = *(_QWORD *)(v0 + 80);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v5, v8);
    sub_23B5043F0(v5, &qword_2542FAA30);
    sub_23B56A5F4();
    sub_23B4FCC20((unint64_t *)&qword_2542F9630, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6838], MEMORY[0x24BEE6848]);
    v9 = swift_allocError();
    sub_23B56A15C();
    *(_QWORD *)(v0 + 64) = v9;
    sub_23B56A5D0();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  }
  v10 = *(_QWORD *)(v0 + 104);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 56))(v10, 1, 1, *(_QWORD *)(v0 + 80));
  swift_beginAccess();
  sub_23B520A4C(v10, v4, &qword_2542FAA30);
  swift_endAccess();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B51BD40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v7;
  *v7 = v5;
  v7[1] = sub_23B4FACE0;
  return sub_23B51BD94(a5);
}

uint64_t sub_23B51BD94(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542FADF8);
  v2[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B51BDF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v9;

  if (qword_2542FAA70 != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_id;
  v4 = sub_23B569FA0();
  v5 = *(_QWORD *)(v4 - 8);
  v9 = *(_OWORD *)(v0 + 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v9 + v3, v4);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v1, 0, 1, v4);
  v6 = swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v6;
  *(_QWORD *)(v6 + 16) = v2;
  *(_OWORD *)(v6 + 24) = v9;
  sub_23B4FCC20(&qword_2542FAA58, type metadata accessor for WorkItemQueue, (uint64_t)&protocol conformance descriptor for WorkItemQueue);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v7;
  *v7 = v0;
  v7[1] = sub_23B51BF60;
  return sub_23B56AFA8();
}

uint64_t sub_23B51BF60()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_23B5043F0(v1, (uint64_t *)&unk_2542FADF8);
  return swift_task_switch();
}

uint64_t sub_23B51BFDC()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B51C00C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[18] = a2;
  v3[19] = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA78);
  v3[20] = v4;
  v3[21] = *(_QWORD *)(v4 - 8);
  v3[22] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B51C074()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAB40);
  sub_23B56A684();
  v1 = sub_23B4FCC20(&qword_2542FAA58, type metadata accessor for WorkItemQueue, (uint64_t)&protocol conformance descriptor for WorkItemQueue);
  v2 = OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_currentWorkItem;
  v0[23] = v1;
  v0[24] = v2;
  v3 = OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_flushing;
  v0[25] = OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_name;
  v0[26] = v3;
  v0[27] = 0;
  v4 = (_QWORD *)swift_task_alloc();
  v0[28] = v4;
  *v4 = v0;
  v4[1] = sub_23B51C144;
  return sub_23B56A690();
}

uint64_t sub_23B51C144()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B51C19C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  *(_QWORD *)(v0 + 232) = v1;
  if (v1)
    return swift_task_switch();
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 168) + 8))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 160));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B51C208()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(*(_QWORD *)(v0 + 232) + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_isCancelled);
  swift_beginAccess();
  *(_BYTE *)(v0 + 320) = *v1;
  return swift_task_switch();
}

uint64_t sub_23B51C270()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;

  if ((*(_BYTE *)(v0 + 320) & 1) == 0)
  {
    v9 = *(_QWORD *)(v0 + 232);
    *(_QWORD *)(*(_QWORD *)(v0 + 152) + *(_QWORD *)(v0 + 192)) = v9;
    swift_retain();
    swift_release();
    __asm { BR              X10 }
  }
  if (qword_2542FA8E8 != -1)
    swift_once();
  v1 = sub_23B56A060();
  __swift_project_value_buffer(v1, (uint64_t)qword_2542FC408);
  swift_retain_n();
  swift_retain_n();
  v2 = sub_23B56A048();
  v3 = sub_23B56A84C();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD **)(v0 + 152);
    v5 = swift_slowAlloc();
    v6 = swift_slowAlloc();
    v13 = v6;
    *(_DWORD *)v5 = 136315394;
    *(_QWORD *)(v0 + 56) = 91;
    *(_QWORD *)(v0 + 64) = 0xE100000000000000;
    *(_QWORD *)(v0 + 136) = *v4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AA0);
    sub_23B56A300();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    swift_bridgeObjectRetain();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    *(_QWORD *)(v5 + 4) = sub_23B5034E4(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), &v13);
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2082;
    sub_23B569FA0();
    sub_23B4FCC20(&qword_2542F97F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v7 = sub_23B56AD44();
    *(_QWORD *)(v5 + 14) = sub_23B5034E4(v7, v8, &v13);
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23B4F9000, v2, v3, "%s workItem %{public}s is already cancelled -- skipping", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v6, -1, -1);
    MEMORY[0x23B867948](v5, -1, -1);

  }
  else
  {

    swift_release_n();
    swift_release_n();
  }
  sub_23B56A5F4();
  sub_23B4FCC20((unint64_t *)&qword_2542F9630, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6838], MEMORY[0x24BEE6848]);
  v10 = swift_allocError();
  *(_QWORD *)(v0 + 304) = v10;
  sub_23B56A15C();
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 312) = v11;
  *v11 = v0;
  v11[1] = sub_23B51D250;
  return sub_23B54750C(v10, 1);
}

void sub_23B51CDF4()
{
  _QWORD *v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;

  v1 = v0[27];
  v2 = *(os_unfair_lock_s **)(v0[29] + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_visitedQueueIdentifiers);
  v3 = v2 + 4;
  v4 = v2 + 6;
  os_unfair_lock_lock(v2 + 6);
  sub_23B5301B8(v3, v0 + 14);
  os_unfair_lock_unlock(v4);
  if (!v1)
  {
    v0[31] = v0[14];
    swift_task_switch();
  }
}

uint64_t sub_23B51CEA4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[29];
  v2 = v0[19];
  v0[15] = v0[31];
  v3 = swift_task_alloc();
  v0[32] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = (_QWORD *)swift_task_alloc();
  v0[33] = v4;
  *v4 = v0;
  v4[1] = sub_23B51CF70;
  return sub_23B56AFA8();
}

uint64_t sub_23B51CF70()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 272) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_23B51CFE0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[34];
  swift_release();
  v0[27] = v1;
  v2 = (_QWORD *)swift_task_alloc();
  v0[28] = v2;
  *v2 = v0;
  v2[1] = sub_23B51C144;
  return sub_23B56A690();
}

uint64_t sub_23B51D064()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B51D0BC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 216);
  swift_release();
  *(_QWORD *)(v0 + 216) = v1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 224) = v2;
  *v2 = v0;
  v2[1] = sub_23B51C144;
  return sub_23B56A690();
}

uint64_t sub_23B51D140()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B51D198()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B51D1F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 168);
  v1 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 160);
  *(_BYTE *)(*(_QWORD *)(v0 + 152) + OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_terminating) = 1;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B51D250()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 304);
  swift_task_dealloc();

  return swift_task_switch();
}

uint64_t sub_23B51D2B0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_23B51D31C;
  v6[5] = a3;
  v6[6] = a2;
  v6[7] = *a2;
  return swift_task_switch();
}

uint64_t sub_23B51D31C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23B51D368(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[5] = a1;
  v2[6] = v1;
  v2[7] = *v1;
  return swift_task_switch();
}

uint64_t sub_23B51D388()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v1 = v0[6];
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC10FindMyBase13WorkItemQueue_flushing) == 1)
  {
    if (qword_2542FA8E8 != -1)
      swift_once();
    v2 = sub_23B56A060();
    __swift_project_value_buffer(v2, (uint64_t)qword_2542FC408);
    swift_retain_n();
    swift_retain_n();
    v3 = sub_23B56A048();
    v4 = sub_23B56A84C();
    v5 = os_log_type_enabled(v3, v4);
    v6 = (_QWORD *)v0[6];
    if (v5)
    {
      v7 = swift_slowAlloc();
      v17 = swift_slowAlloc();
      v18 = v17;
      *(_DWORD *)v7 = 136315394;
      v0[2] = *v6;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AA0);
      sub_23B56A300();
      sub_23B56A3A8();
      swift_bridgeObjectRelease();
      sub_23B56A3A8();
      swift_bridgeObjectRetain();
      sub_23B56A3A8();
      swift_bridgeObjectRelease();
      sub_23B56A3A8();
      v0[3] = sub_23B5034E4(91, 0xE100000000000000, &v18);
      sub_23B56A918();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2082;
      sub_23B569FA0();
      sub_23B4FCC20(&qword_2542F97F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v8 = sub_23B56AD44();
      v0[4] = sub_23B5034E4(v8, v9, &v18);
      sub_23B56A918();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23B4F9000, v3, v4, "%s flushing workItem %{public}s", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x23B867948](v17, -1, -1);
      MEMORY[0x23B867948](v7, -1, -1);

    }
    else
    {

      swift_release_n();
      swift_release_n();
    }
    sub_23B56A5F4();
    sub_23B4FCC20((unint64_t *)&qword_2542F9630, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6838], MEMORY[0x24BEE6848]);
    v15 = swift_allocError();
    v0[8] = v15;
    sub_23B56A15C();
    v16 = (_QWORD *)swift_task_alloc();
    v0[9] = v16;
    *v16 = v0;
    v16[1] = sub_23B51D7BC;
    return sub_23B54750C(v15, 1);
  }
  else
  {
    v10 = v0[7];
    v11 = v0[5];
    sub_23B4FCC20(&qword_2542FAA58, type metadata accessor for WorkItemQueue, (uint64_t)&protocol conformance descriptor for WorkItemQueue);
    v12 = (_QWORD *)swift_task_alloc();
    v0[10] = v12;
    v12[2] = v11;
    v12[3] = v1;
    v12[4] = v10;
    v13 = (_QWORD *)swift_task_alloc();
    v0[11] = v13;
    *v13 = v0;
    v13[1] = sub_23B51D80C;
    return sub_23B56AC90();
  }
}

uint64_t sub_23B51D7BC()
{
  uint64_t *v0;
  void *v1;
  uint64_t v3;

  v1 = *(void **)(*v0 + 64);
  v3 = *v0;
  swift_task_dealloc();

  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_23B51D80C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B51D86C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B51D874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[9] = a4;
  v5[10] = a5;
  v5[7] = a2;
  v5[8] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FADF0);
  v5[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B51D8D8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  v2 = v0[10];
  v1 = v0[11];
  v4 = v0[8];
  v3 = v0[9];
  v5 = sub_23B56A624();
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v1, 1, 1, v5);
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = v4;
  v7[5] = v3;
  v7[6] = v2;
  swift_retain();
  swift_retain();
  sub_23B547AE0(v1, (uint64_t)&unk_256A2BF88, (uint64_t)v7);
  sub_23B5043F0(v1, &qword_2542FADF0);
  v6(v1, 1, 1, v5);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v3;
  v8[5] = v4;
  v8[6] = v2;
  swift_retain();
  swift_retain();
  sub_23B547AE0(v1, (uint64_t)&unk_256A2BF98, (uint64_t)v8);
  sub_23B5043F0(v1, &qword_2542FADF0);
  v0[12] = sub_23B4FCC20(&qword_2542FAA58, type metadata accessor for WorkItemQueue, (uint64_t)&protocol conformance descriptor for WorkItemQueue);
  v9 = (_QWORD *)swift_task_alloc();
  v0[13] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA48);
  *v9 = v0;
  v9[1] = sub_23B51DA84;
  return sub_23B56A6D8();
}

uint64_t sub_23B51DA84()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 128) = v0;
  return swift_task_switch();
}

uint64_t sub_23B51DAEC()
{
  uint64_t v0;
  _QWORD *v2;

  if (*(_BYTE *)(v0 + 152) == 1)
  {
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 112) = v2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA48);
    *v2 = v0;
    v2[1] = sub_23B51DBA8;
    return sub_23B56A6D8();
  }
}

uint64_t sub_23B51DBA8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 128) = v0;
  return swift_task_switch();
}

uint64_t sub_23B51DC10()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 128);
  swift_task_dealloc();

  return swift_task_switch();
}

uint64_t sub_23B51DC70()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B51DCAC()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 136) = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAD88);
  sub_23B56A6E4();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 144) = v1;
  *v1 = v0;
  v1[1] = sub_23B51DD2C;
  return sub_23B547C70();
}

uint64_t sub_23B51DD2C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B51DD84()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  id v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  if (qword_2542FA8E8 != -1)
    swift_once();
  v1 = (void *)v0[16];
  v2 = sub_23B56A060();
  __swift_project_value_buffer(v2, (uint64_t)qword_2542FC408);
  swift_retain();
  swift_retain();
  v3 = v1;
  swift_retain();
  swift_retain();
  v4 = v1;
  v5 = sub_23B56A048();
  v6 = sub_23B56A828();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (void *)v0[16];
    v8 = (_QWORD *)v0[9];
    v9 = swift_slowAlloc();
    v20 = swift_slowAlloc();
    v21 = v20;
    *(_DWORD *)v9 = 136315650;
    v22 = 91;
    v23 = 0xE100000000000000;
    v0[2] = *v8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AA0);
    sub_23B56A300();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    swift_bridgeObjectRetain();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    v0[3] = sub_23B5034E4(v22, v23, &v21);
    sub_23B56A918();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    v0[4] = v7;
    v10 = v7;
    v11 = sub_23B56A300();
    v0[5] = sub_23B5034E4(v11, v12, &v21);
    sub_23B56A918();
    swift_bridgeObjectRelease();

    *(_WORD *)(v9 + 22) = 2080;
    sub_23B569FA0();
    sub_23B4FCC20(&qword_2542F97F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v13 = sub_23B56AD44();
    v0[6] = sub_23B5034E4(v13, v14, &v21);
    sub_23B56A918();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23B4F9000, v5, v6, "%s Completing workItem (.failure [%s]): %s", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v20, -1, -1);
    MEMORY[0x23B867948](v9, -1, -1);

  }
  else
  {
    v15 = (void *)v0[16];
    swift_release_n();

    swift_release_n();
  }
  v16 = (void *)v0[16];
  v17 = v16;
  v18 = (_QWORD *)swift_task_alloc();
  v0[15] = v18;
  *v18 = v0;
  v18[1] = sub_23B51DC10;
  return sub_23B54750C((uint64_t)v16, 1);
}

uint64_t sub_23B51E144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[12] = a4;
  v5[13] = a5;
  v6 = sub_23B56A5F4();
  v5[14] = v6;
  v5[15] = *(_QWORD *)(v6 - 8);
  v5[16] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B51E1A8()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(*(_QWORD *)(v0 + 96) + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_isCancelled);
  swift_beginAccess();
  *(_BYTE *)(v0 + 152) = *v1;
  return swift_task_switch();
}

uint64_t sub_23B51E20C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  if (*(_BYTE *)(v0 + 152) != 1)
    return swift_task_switch();
  if (qword_2542FA8E8 != -1)
    swift_once();
  v1 = sub_23B56A060();
  __swift_project_value_buffer(v1, (uint64_t)qword_2542FC408);
  swift_retain_n();
  swift_retain_n();
  v2 = sub_23B56A048();
  v3 = sub_23B56A828();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD **)(v0 + 104);
  if (v4)
  {
    v6 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    *(_DWORD *)v6 = 136315394;
    v11 = v10;
    v12 = 91;
    v13 = 0xE100000000000000;
    *(_QWORD *)(v0 + 72) = *v5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AA0);
    sub_23B56A300();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    swift_bridgeObjectRetain();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    *(_QWORD *)(v0 + 80) = sub_23B5034E4(v12, v13, &v11);
    sub_23B56A918();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    sub_23B569FA0();
    sub_23B4FCC20(&qword_2542F97F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v7 = sub_23B56AD44();
    *(_QWORD *)(v0 + 88) = sub_23B5034E4(v7, v8, &v11);
    sub_23B56A918();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23B4F9000, v2, v3, "%s is cancelled: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v10, -1, -1);
    MEMORY[0x23B867948](v6, -1, -1);

  }
  else
  {

    swift_release_n();
    swift_release_n();
  }
  sub_23B4FCC20((unint64_t *)&qword_2542F9630, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6838], MEMORY[0x24BEE6848]);
  swift_allocError();
  sub_23B56A15C();
  swift_willThrow();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B51E58C()
{
  uint64_t v0;
  _QWORD *v1;

  sub_23B4FCC20(&qword_256A2BFA0, (uint64_t (*)(uint64_t))type metadata accessor for WorkItemQueue.WorkItem, (uint64_t)&protocol conformance descriptor for WorkItemQueue.WorkItem);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v1;
  *v1 = v0;
  v1[1] = sub_23B51E630;
  return sub_23B56ADC8();
}

uint64_t sub_23B51E630()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B51E694()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B51E6C8()
{
  return swift_task_switch();
}

uint64_t sub_23B51E6DC()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  void *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v1 = *(void **)(v0 + 144);
  *(_QWORD *)(v0 + 40) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAD88);
  if (swift_dynamicCast())
  {
    v4 = *(_QWORD *)(v0 + 120);
    v3 = *(_QWORD *)(v0 + 128);
    v5 = *(_QWORD *)(v0 + 112);

    sub_23B4FCC20((unint64_t *)&qword_2542F9630, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6838], MEMORY[0x24BEE6848]);
    swift_allocError();
    sub_23B56A15C();
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    v6 = *(void **)(v0 + 40);
  }
  else
  {

    if (qword_2542FA8E8 != -1)
      swift_once();
    v7 = *(void **)(v0 + 144);
    v8 = sub_23B56A060();
    __swift_project_value_buffer(v8, (uint64_t)qword_2542FC408);
    swift_retain();
    v9 = v7;
    swift_retain();
    v10 = v7;
    v11 = sub_23B56A048();
    v12 = sub_23B56A834();
    v13 = os_log_type_enabled(v11, v12);
    v14 = *(void **)(v0 + 144);
    v15 = *(_QWORD **)(v0 + 104);
    if (v13)
    {
      v16 = swift_slowAlloc();
      v17 = (_QWORD *)swift_slowAlloc();
      v22 = swift_slowAlloc();
      v23 = v22;
      *(_DWORD *)v16 = 136315394;
      v24 = 91;
      v25 = 0xE100000000000000;
      *(_QWORD *)(v0 + 48) = *v15;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AA0);
      sub_23B56A300();
      sub_23B56A3A8();
      swift_bridgeObjectRelease();
      sub_23B56A3A8();
      swift_bridgeObjectRetain();
      sub_23B56A3A8();
      swift_bridgeObjectRelease();
      sub_23B56A3A8();
      *(_QWORD *)(v0 + 56) = sub_23B5034E4(v24, v25, &v23);
      sub_23B56A918();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2112;
      v18 = v14;
      v19 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 64) = v19;
      sub_23B56A918();
      *v17 = v19;

      _os_log_impl(&dword_23B4F9000, v11, v12, "%s Unexpected error: %@", (uint8_t *)v16, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542F99E0);
      swift_arrayDestroy();
      MEMORY[0x23B867948](v17, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x23B867948](v22, -1, -1);
      MEMORY[0x23B867948](v16, -1, -1);
    }
    else
    {
      swift_release_n();

    }
    v20 = *(void **)(v0 + 144);
    sub_23B4FCC20((unint64_t *)&qword_2542F9630, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6838], MEMORY[0x24BEE6848]);
    swift_allocError();
    sub_23B56A15C();
    swift_willThrow();
    v6 = v20;
  }

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B51EAE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 112) = a4;
  *(_QWORD *)(v5 + 120) = a5;
  return swift_task_switch();
}

uint64_t sub_23B51EAFC()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t (*type)(_QWORD);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  if (qword_2542FA8E8 != -1)
    swift_once();
  v1 = sub_23B56A060();
  v0[16] = __swift_project_value_buffer(v1, (uint64_t)qword_2542FC408);
  swift_retain_n();
  swift_retain_n();
  v2 = sub_23B56A048();
  v3 = sub_23B56A828();
  v4 = os_log_type_enabled(v2, v3);
  v5 = (_QWORD *)v0[14];
  if (v4)
  {
    v6 = swift_slowAlloc();
    v11 = swift_slowAlloc();
    *(_DWORD *)v6 = 136315394;
    v13 = v11;
    v14 = 91;
    v15 = 0xE100000000000000;
    v0[11] = *v5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AA0);
    sub_23B56A300();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    swift_bridgeObjectRetain();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    v0[12] = sub_23B5034E4(v14, v15, &v13);
    sub_23B56A918();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    sub_23B569FA0();
    sub_23B4FCC20(&qword_2542F97F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v7 = sub_23B56AD44();
    v0[13] = sub_23B5034E4(v7, v8, &v13);
    sub_23B56A918();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23B4F9000, v2, v3, "%s Start processing workItem: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v11, -1, -1);
    MEMORY[0x23B867948](v6, -1, -1);

  }
  else
  {

    swift_release_n();
    swift_release_n();
  }
  type = (uint64_t (*)(_QWORD))(**(int **)(v0[15] + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_block)
                                        + *(_QWORD *)(v0[15]
                                                    + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_block));
  v9 = (_QWORD *)swift_task_alloc();
  v0[17] = v9;
  *v9 = v0;
  v9[1] = sub_23B51EE3C;
  return type(v0[15]);
}

uint64_t sub_23B51EE3C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    return (*(uint64_t (**)(void))(v2 + 8))();
  else
    return swift_task_switch();
}

uint64_t sub_23B51EEA8()
{
  _QWORD *v0;
  NSObject *v1;
  os_log_type_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  swift_retain_n();
  swift_retain_n();
  v1 = sub_23B56A048();
  v2 = sub_23B56A828();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (_QWORD *)v0[14];
    v4 = swift_slowAlloc();
    v9 = swift_slowAlloc();
    v10 = v9;
    *(_DWORD *)v4 = 136315394;
    v11 = 91;
    v12 = 0xE100000000000000;
    v0[8] = *v3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AA0);
    sub_23B56A300();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    swift_bridgeObjectRetain();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    v0[9] = sub_23B5034E4(v11, v12, &v10);
    sub_23B56A918();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2080;
    sub_23B569FA0();
    sub_23B4FCC20(&qword_2542F97F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v5 = sub_23B56AD44();
    v0[10] = sub_23B5034E4(v5, v6, &v10);
    sub_23B56A918();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23B4F9000, v1, v2, "%s Done processing workItem: %s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v9, -1, -1);
    MEMORY[0x23B867948](v4, -1, -1);

  }
  else
  {

    swift_release_n();
    swift_release_n();
  }
  v7 = (_QWORD *)swift_task_alloc();
  v0[18] = v7;
  *v7 = v0;
  v7[1] = sub_23B51F164;
  return sub_23B547C70();
}

uint64_t sub_23B51F164()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B51F1BC()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = (_BYTE *)(*(_QWORD *)(v0 + 120) + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_isCancelled);
  swift_beginAccess();
  *(_BYTE *)(v0 + 160) = *v1;
  return swift_task_switch();
}

uint64_t sub_23B51F220()
{
  uint64_t v0;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  if ((*(_BYTE *)(v0 + 160) & 1) != 0 || (sub_23B56A6B4() & 1) != 0)
    return (*(uint64_t (**)(void))(v0 + 8))();
  swift_retain_n();
  swift_retain_n();
  v2 = sub_23B56A048();
  v3 = sub_23B56A828();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD **)(v0 + 112);
  if (v4)
  {
    v6 = swift_slowAlloc();
    v7 = swift_slowAlloc();
    *(_DWORD *)v6 = 136315394;
    v11 = v7;
    v12 = 91;
    v13 = 0xE100000000000000;
    *(_QWORD *)(v0 + 40) = *v5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AA0);
    sub_23B56A300();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    swift_bridgeObjectRetain();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    sub_23B56A3A8();
    *(_QWORD *)(v0 + 48) = sub_23B5034E4(v12, v13, &v11);
    sub_23B56A918();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    sub_23B569FA0();
    sub_23B4FCC20(&qword_2542F97F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v8 = sub_23B56AD44();
    *(_QWORD *)(v0 + 56) = sub_23B5034E4(v8, v9, &v11);
    sub_23B56A918();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23B4F9000, v2, v3, "%s Completing workItem (.success): %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v7, -1, -1);
    MEMORY[0x23B867948](v6, -1, -1);

  }
  else
  {

    swift_release_n();
    swift_release_n();
  }
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 152) = v10;
  *v10 = v0;
  v10[1] = sub_23B51F524;
  return sub_23B54750C(0, 0);
}

uint64_t sub_23B51F524()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t WorkItemQueue.description.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AA0);
  sub_23B56A300();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  sub_23B511B74();
  sub_23B56A438();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  sub_23B569FA0();
  sub_23B4FCC20(&qword_2542F97F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
  sub_23B56AD44();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  return 60;
}

uint64_t sub_23B51F6C0()
{
  return WorkItemQueue.description.getter();
}

Swift::Void __swiftcall requireWorkItemQueueContext(functionName:)(Swift::String functionName)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  object = functionName._object;
  countAndFlagsBits = functionName._countAndFlagsBits;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542FADF8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2542FAA70 != -1)
    swift_once();
  sub_23B56AF9C();
  v6 = sub_23B569FA0();
  v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  sub_23B5043F0((uint64_t)v5, (uint64_t *)&unk_2542FADF8);
  if (v7 == 1)
  {
    if (qword_2542FA8C0 != -1)
      swift_once();
    v8 = sub_23B56A060();
    __swift_project_value_buffer(v8, (uint64_t)qword_2542FC3E8);
    swift_bridgeObjectRetain_n();
    v9 = sub_23B56A048();
    v10 = sub_23B56A840();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      v14 = v12;
      *(_DWORD *)v11 = 136315138;
      swift_bridgeObjectRetain();
      v13 = sub_23B5034E4(countAndFlagsBits, (unint64_t)object, &v14);
      sub_23B56A918();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_23B4F9000, v9, v10, "\"%s\" is required to be called from a WorkItemQueue context!", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B867948](v12, -1, -1);
      MEMORY[0x23B867948](v11, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t sub_23B51F928()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v9;
  uint64_t v10;

  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542FADF8);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_23B569FA0();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2542FAA70 != -1)
    swift_once();
  sub_23B56AF9C();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_23B5043F0((uint64_t)v2, (uint64_t *)&unk_2542FADF8);
LABEL_10:
    v7 = 0;
    return v7 & 1;
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
  if (qword_2542FAA98 != -1)
    swift_once();
  sub_23B56AF9C();
  if (!v10)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    goto LABEL_10;
  }
  v7 = sub_23B538A48((uint64_t)v6, v10);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7 & 1;
}

uint64_t sub_23B51FACC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_23B4FACE0;
  v3[2] = v2;
  return swift_task_switch();
}

uint64_t sub_23B51FB2C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23B51FB50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23B4FACE0;
  return sub_23B549768(a1, v4);
}

uint64_t sub_23B51FBB0(uint64_t a1)
{
  uint64_t *v1;

  return sub_23B519A48(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_23B51FBBC(uint64_t a1)
{
  uint64_t *v1;

  return sub_23B519EEC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_23B51FBC8(uint64_t a1)
{
  uint64_t *v1;

  return sub_23B51A2C4(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_23B51FBD8()
{
  return sub_23B4FCC20((unint64_t *)&qword_2542FAA50, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
}

uint64_t sub_23B51FC04()
{
  return type metadata accessor for WorkItemQueue(0);
}

uint64_t method lookup function for WorkItemQueue()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of WorkItemQueue.__allocating_init(name:identifier:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t dispatch thunk of WorkItemQueue.invalidate()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 288) + *(_QWORD *)(*(_QWORD *)v0 + 288));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_23B4FACE0;
  return v4();
}

uint64_t dispatch thunk of WorkItemQueue.enqueue(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 320) + *(_QWORD *)(*(_QWORD *)v2 + 320));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_23B4FACE0;
  return v8(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 328) + *(_QWORD *)(*(_QWORD *)v2 + 328));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_23B4FACE0;
  return v8(a1, a2);
}

uint64_t dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(cancelAfter:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);

  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v4 + 336)
                                                                   + *(_QWORD *)(*(_QWORD *)v4 + 336));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = sub_23B4FACE0;
  return v12(a1, a2, a3, a4);
}

uint64_t dispatch thunk of WorkItemQueue.awaitEmpty()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 352) + *(_QWORD *)(*(_QWORD *)v0 + 352));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_23B4FACE0;
  return v4();
}

void sub_23B51FE5C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2542FAB48)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542FAB40);
    v0 = sub_23B56A900();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2542FAB48);
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for WorkItemQueue.Error(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9908);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v10 = sub_23B569FA0();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
  }
  return a1;
}

uint64_t destroy for WorkItemQueue.Error(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9908);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 2, v2);
  if (!(_DWORD)result)
  {
    v4 = sub_23B569FA0();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  return result;
}

void *initializeWithCopy for WorkItemQueue.Error(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9908);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = sub_23B569FA0();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *assignWithCopy for WorkItemQueue.Error(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9908);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      v13 = sub_23B569FA0();
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(a1, a2, v13);
      return a1;
    }
    sub_23B5043F0((uint64_t)a1, &qword_2542F9908);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v11 = sub_23B569FA0();
  (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

void *initializeWithTake for WorkItemQueue.Error(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9908);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = sub_23B569FA0();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *assignWithTake for WorkItemQueue.Error(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9908);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      v13 = sub_23B569FA0();
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(a1, a2, v13);
      return a1;
    }
    sub_23B5043F0((uint64_t)a1, &qword_2542F9908);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v11 = sub_23B569FA0();
  (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for WorkItemQueue.Error()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23B520380(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9908);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 3)
    return v5 - 2;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for WorkItemQueue.Error()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23B5203DC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 2);
  else
    v5 = 0;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9908);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_23B520434(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9908);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 2, v2);
}

uint64_t sub_23B520470(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9908);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 2, v4);
}

uint64_t type metadata accessor for WorkItemQueue.Error(uint64_t a1)
{
  return sub_23B504D18(a1, (uint64_t *)&unk_2542F98F8);
}

uint64_t sub_23B5204C8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23B569FA0();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t _s8ItemTypeOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s8ItemTypeOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23B5205F8 + 4 * byte_23B56FA15[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23B52062C + 4 * byte_23B56FA10[v4]))();
}

uint64_t sub_23B52062C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23B520634(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23B52063CLL);
  return result;
}

uint64_t sub_23B520648(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23B520650);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23B520654(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23B52065C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s8ItemTypeOMa()
{
  return &_s8ItemTypeON;
}

unint64_t sub_23B52067C()
{
  unint64_t result;

  result = qword_256A2BEC8;
  if (!qword_256A2BEC8)
  {
    result = MEMORY[0x23B867894](&unk_23B56FBD0, &_s8ItemTypeON);
    atomic_store(result, (unint64_t *)&qword_256A2BEC8);
  }
  return result;
}

uint64_t sub_23B5206C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23B4FAC98;
  return sub_23B549768(a1, v4);
}

uint64_t sub_23B520720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_23B5207A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = v0 + ((v2 + 56) & ~v2);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_23B4FACE0;
  v6[3] = v5;
  v7 = (_QWORD *)swift_task_alloc();
  v6[4] = v7;
  *v7 = v6;
  v7[1] = sub_23B51A59C;
  return sub_23B54ACC0(v3, v4);
}

uint64_t sub_23B52084C()
{
  return objectdestroy_41Tm(&qword_2542FAA28);
}

uint64_t sub_23B520858()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28) - 8) + 80);
  v3 = v0 + ((v2 + 40) & ~v2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_23B4FACE0;
  v4[3] = v3;
  v5 = (_QWORD *)swift_task_alloc();
  v4[4] = v5;
  *v5 = v4;
  v5[1] = sub_23B519CF4;
  return sub_23B54A0F4();
}

uint64_t sub_23B5208F0()
{
  return objectdestroy_41Tm(&qword_2542FAA28);
}

uint64_t sub_23B5208FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28) - 8) + 80);
  v3 = v0 + ((v2 + 40) & ~v2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_23B4FACE0;
  v4[3] = v3;
  v5 = (_QWORD *)swift_task_alloc();
  v4[4] = v5;
  *v5 = v4;
  v5[1] = sub_23B519CF4;
  return sub_23B54A0F4();
}

uint64_t sub_23B520994(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23B4FACE0;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_256A2CE78 + dword_256A2CE78))(a1, v4);
}

uint64_t sub_23B520A04()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_23B4FACE0;
  return sub_23B51BAF8(v0);
}

uint64_t sub_23B520A4C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_23B520A90()
{
  return objectdestroy_41Tm(&qword_2542FAB40);
}

uint64_t objectdestroy_41Tm(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v1 + v4, v2);
  return swift_deallocObject();
}

uint64_t sub_23B520B14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2542FAB40) - 8) + 80);
  v3 = v0 + ((v2 + 40) & ~v2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_23B4FACE0;
  v5 = (_QWORD *)swift_task_alloc();
  v4[2] = v5;
  *v5 = v4;
  v5[1] = sub_23B4FACE0;
  return sub_23B51BD94(v3);
}

uint64_t sub_23B520BAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_23B4FACE0;
  return sub_23B51C00C(a1, v4, v5);
}

uint64_t sub_23B520C18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v5 = *(_QWORD **)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_23B4FACE0;
  return sub_23B51D2B0(a1, v5, v4);
}

uint64_t sub_23B520C7C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_23B4FACE0;
  return sub_23B51D874(a1, a2, v6, v7, v8);
}

uint64_t sub_23B520CFC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_23B4FACE0;
  return sub_23B51E144(a1, v4, v5, v6, v7);
}

uint64_t objectdestroy_85Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23B520DB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_23B4FACE0;
  *(_OWORD *)(v2 + 112) = v3;
  return swift_task_switch();
}

uint64_t sub_23B520E14(uint64_t a1)
{
  uint64_t v1;

  return sub_23B54BA14(a1, v1);
}

uint64_t CustomStringConvertible.typeDescription.getter(uint64_t a1, uint64_t a2)
{
  return sub_23B520E5C(a1, a2, (uint64_t (*)(uint64_t *, uint64_t))MEMORY[0x24BEE09F0]);
}

uint64_t CustomDebugStringConvertible.typeDescription.getter(uint64_t a1, uint64_t a2)
{
  return sub_23B520E5C(a1, a2, (uint64_t (*)(uint64_t *, uint64_t))MEMORY[0x24BEE0A10]);
}

uint64_t sub_23B520E5C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t *, uint64_t))
{
  uint64_t MetatypeMetadata;
  uint64_t DynamicType;

  DynamicType = swift_getDynamicType();
  MetatypeMetadata = swift_getMetatypeMetadata();
  return a3(&DynamicType, MetatypeMetadata);
}

uint64_t _ss23CustomStringConvertibleP10FindMyBaseRlzCrlE18addressDescriptionSSvg_0()
{
  sub_23B511B74();
  sub_23B56A438();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  return 30768;
}

uint64_t FixedWidthInteger.bytes.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;

  v3 = v2;
  swift_getDynamicType();
  v26 = a1;
  v6 = sub_23B56ABD0();
  v7 = v6;
  if (v6 >= 1)
  {
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v10 = v8 + 1;
      if (__OFADD__(v8, 1))
        break;
      v11 = __OFADD__(v9, 8);
      v9 += 8;
      if (v11)
        v9 = 0x7FFFFFFFFFFFFFFFLL;
      ++v8;
      if (v9 >= v6)
        goto LABEL_9;
    }
    __break(1u);
    __break(1u);
    goto LABEL_34;
  }
  v10 = 0;
LABEL_9:
  v30 = MEMORY[0x24BEE4AF8];
  sub_23B52244C(0, v10 & ~(v10 >> 63), 0);
  if (v10 < 0)
    goto LABEL_35;
  v12 = v30;
  if (v10)
  {
    v13 = 0;
    while (v13 < v7)
    {
      if (__OFADD__(v13, 8))
        v14 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v14 = v13 + 8;
      v27 = v13;
      v28 = 0;
      sub_23B521148(&v27, v26, a2, &v29);
      v15 = v29;
      v30 = v12;
      v17 = *(_QWORD *)(v12 + 16);
      v16 = *(_QWORD *)(v12 + 24);
      if (v17 >= v16 >> 1)
      {
        sub_23B52244C(v16 > 1, v17 + 1, 1);
        v12 = v30;
      }
      *(_QWORD *)(v12 + 16) = v17 + 1;
      *(_BYTE *)(v12 + v17 + 32) = v15;
      v13 = v14;
      if (!--v10)
        goto LABEL_21;
    }
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    result = swift_release();
    __break(1u);
    return result;
  }
  v14 = 0;
LABEL_21:
  if (v14 < v7)
  {
    v25 = a2;
    do
    {
      v18 = __OFADD__(v14, 8);
      v27 = v14;
      v19 = v3;
      sub_23B521148(&v27, v26, v25, &v29);
      v20 = v29;
      v30 = v12;
      v22 = *(_QWORD *)(v12 + 16);
      v21 = *(_QWORD *)(v12 + 24);
      if (v22 >= v21 >> 1)
      {
        sub_23B52244C(v21 > 1, v22 + 1, 1);
        v12 = v30;
      }
      *(_QWORD *)(v12 + 16) = v22 + 1;
      *(_BYTE *)(v12 + v22 + 32) = v20;
      v23 = v14 + 8 >= v7 || v18;
      v14 += 8;
      v3 = v19;
    }
    while ((v23 & 1) == 0);
  }
  return v12;
}

uint64_t sub_23B521148@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _BYTE *a4@<X8>)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  void (*v24)(char *, uint64_t);
  char v25;
  void (*v26)(char *, char *, uint64_t);
  char v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  char v31;
  unsigned int v32;
  char *v33;
  unsigned __int8 v34;
  char v35;
  char v36;
  uint64_t result;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  _BYTE *v46;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;

  v46 = a4;
  v44 = *(_QWORD *)(a3 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)(v44 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v10 = (char *)&v38 - v9;
  v47 = *(_QWORD *)(a2 - 8);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v40 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v45 = (char *)&v38 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v38 - v16;
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v38 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v38 - v21;
  v49 = *a1;
  sub_23B511B74();
  sub_23B56A978();
  swift_getAssociatedConformanceWitness();
  v41 = AssociatedTypeWitness;
  sub_23B56ADD4();
  v42 = v10;
  v43 = v6;
  sub_23B56AD80();
  sub_23B56A960();
  v23 = v17;
  v24 = *(void (**)(char *, uint64_t))(v47 + 8);
  v24(v23, a2);
  v24(v20, a2);
  if ((sub_23B56A9C0() & 1) != 0)
  {
    sub_23B56ADD4();
    sub_23B56AD80();
    v25 = sub_23B56A228();
    v24(v20, a2);
    if ((v25 & 1) == 0)
      goto LABEL_16;
  }
  if (sub_23B56A9B4() < 8)
  {
LABEL_15:
    v36 = sub_23B56A9A8();
    result = ((uint64_t (*)(char *, uint64_t))v24)(v22, a2);
    *v46 = v36;
    return result;
  }
  v39 = v24;
  v26 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
  v26(v45, v22, a2);
  v48 = -1;
  v27 = sub_23B56A9C0();
  v28 = sub_23B56A9B4();
  if ((v27 & 1) == 0)
  {
    v24 = v39;
    if (v28 < 9)
    {
      v30 = v45;
      sub_23B56A9A8();
      goto LABEL_14;
    }
LABEL_10:
    sub_23B522AB4();
    sub_23B56A954();
    v30 = v45;
    v35 = sub_23B56A21C();
    v24(v20, a2);
    if ((v35 & 1) != 0)
      goto LABEL_16;
    goto LABEL_14;
  }
  v24 = v39;
  if (v28 > 8)
    goto LABEL_10;
  sub_23B56ADD4();
  sub_23B56AD80();
  v29 = v26;
  v30 = v45;
  v31 = sub_23B56A210();
  v24(v20, a2);
  v32 = v48;
  v33 = v40;
  v29(v40, v30, a2);
  if ((v31 & 1) == 0)
  {
    v24(v33, a2);
    goto LABEL_14;
  }
  v34 = sub_23B56A9A8();
  v24(v33, a2);
  if (v32 >= v34)
  {
LABEL_14:
    v24(v30, a2);
    goto LABEL_15;
  }
LABEL_16:
  result = sub_23B56AC18();
  __break(1u);
  return result;
}

BOOL FixedWidthInteger.BOOLValue.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  void (*v15)(char *, uint64_t);
  char v16;
  uint64_t v17;
  _QWORD v19[2];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v5 = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)v19 - v9;
  if ((sub_23B56A9C0() & 1) != 0)
  {
    if (sub_23B56A9B4() < 64)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, v1, a1);
LABEL_11:
      v17 = sub_23B56A9A8();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, a1);
      v16 = v17 == 0;
      return (v16 & 1) == 0;
    }
    goto LABEL_12;
  }
  v11 = sub_23B56A9C0();
  v19[0] = v1;
  v12 = sub_23B56A9B4();
  if ((v11 & 1) == 0)
  {
    if (v12 < 64)
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v5 + 16))(v10, v19[0], a1);
      goto LABEL_11;
    }
LABEL_12:
    v19[1] = 0;
    sub_23B511B74();
    sub_23B56A954();
    v16 = sub_23B56A240();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, a1);
    return (v16 & 1) == 0;
  }
  if (v12 > 64)
    goto LABEL_12;
  swift_getAssociatedConformanceWitness();
  sub_23B56ADD4();
  sub_23B56AD80();
  v13 = v19[0];
  v14 = sub_23B56A228();
  v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v10, a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v13, a1);
  v16 = (v14 & 1) != 0 && sub_23B56A9A8() == 0;
  v15(v8, a1);
  return (v16 & 1) == 0;
}

uint64_t FixedWidthInteger.convert(to:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  if (!*a1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v3, a2);
  if (*a1 == 1)
    return sub_23B56ABDC();
  return sub_23B56ABF4();
}

uint64_t FixedWidthInteger.init(data:ofEndianness:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v10);
  if (*a3)
  {
    if (*a3 == 1)
    {
      v12 = a2;
      sub_23B502434(a1, a2);
    }
    else
    {
      sub_23B502434(a1, a2);
      sub_23B508E38(a1, a2);
      v12 = v13;
    }
    swift_getAssociatedConformanceWitness();
    sub_23B56ADD4();
    sub_23B56AD80();
    __asm { BR              X11 }
  }
  sub_23B504944(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a5, 1, 1, a4);
}

uint64_t FixedWidthInteger.init(bits:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  void (*v25)(char *, char *, uint64_t);
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;

  v27 = a1;
  v31 = *(_QWORD *)(a2 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v27 - v9;
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v27 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v27 - v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  sub_23B56ADD4();
  sub_23B56AD80();
  v17 = *(_QWORD *)(v27 + 16);
  if (v17)
  {
    v18 = 0;
    v28 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v29 = v27 + 32;
    v30 = v17;
    do
    {
      v19 = *(_BYTE *)(v29 + v18);
      v32 = v18 + 1;
      v28(v13, a3, a2);
      v34 = v19;
      sub_23B522AB4();
      sub_23B56AA80();
      v33 = v18;
      sub_23B511B74();
      sub_23B56A984();
      v20 = v7;
      v21 = a3;
      v22 = v15;
      v23 = v31;
      v24 = *(void (**)(char *, uint64_t))(v31 + 8);
      v24(v20, a2);
      sub_23B56A96C();
      v24(v10, a2);
      v24(v13, a2);
      v24(v21, a2);
      v25 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
      v15 = v22;
      a3 = v21;
      v7 = v20;
      v25(a3, v15, a2);
      v18 = v32;
    }
    while (v30 != v32);
  }
  return swift_bridgeObjectRelease();
}

uint64_t FixedWidthInteger.bits()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t);
  char v22;
  uint64_t v23;
  char v24;
  char *v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  char *v30;
  void (*v31)(void);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t AssociatedConformanceWitness;
  char *v36;
  uint64_t AssociatedTypeWitness;
  uint64_t v38;
  uint64_t v39;

  v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v36 = (char *)&v30 - v4;
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v30 - v9;
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v30 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v33 = v15;
  v34 = (char *)&v30 - v14;
  v31 = *(void (**)(void))(v15 + 16);
  v31();
  v16 = sub_23B56ABD0();
  v38 = sub_23B50A220(0, v16);
  result = sub_23B56ABD0();
  if (result < 0)
  {
LABEL_30:
    __break(1u);
  }
  else
  {
    v18 = result;
    if (result)
    {
      v30 = v7;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      v19 = 0;
      while (1)
      {
        sub_23B56ADD4();
        sub_23B56AD80();
        sub_23B56A960();
        v21 = *(void (**)(char *, uint64_t))(v33 + 8);
        v21(v10, a1);
        if ((sub_23B56A9C0() & 1) != 0)
        {
          if (sub_23B56A9B4() >= 64)
          {
            v39 = 0;
            sub_23B511B74();
            sub_23B56A954();
            v27 = sub_23B56A240();
            v21(v10, a1);
            if ((v27 & 1) != 0)
              goto LABEL_4;
          }
          else if (!sub_23B56A9A8())
          {
            goto LABEL_4;
          }
          goto LABEL_23;
        }
        v22 = sub_23B56A9C0();
        v23 = sub_23B56A9B4();
        if ((v22 & 1) != 0)
        {
          if (v23 <= 64)
          {
            sub_23B56ADD4();
            sub_23B56AD80();
            v24 = sub_23B56A228();
            v21(v10, a1);
            v25 = v30;
            ((void (*)(char *, char *, uint64_t))v31)(v30, v13, a1);
            if ((v24 & 1) != 0)
            {
              v26 = sub_23B56A9A8();
              v21(v25, a1);
              if (!v26)
                goto LABEL_4;
            }
            else
            {
              v21(v25, a1);
            }
            goto LABEL_23;
          }
        }
        else if (v23 < 64)
        {
          if (!sub_23B56A9A8())
            goto LABEL_4;
          goto LABEL_23;
        }
        v39 = 0;
        sub_23B511B74();
        sub_23B56A954();
        v28 = sub_23B56A240();
        v21(v10, a1);
        if ((v28 & 1) != 0)
        {
LABEL_4:
          v20 = v34;
          goto LABEL_5;
        }
LABEL_23:
        v29 = v38;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_23B50C9F4(v29);
          v29 = result;
        }
        v20 = v34;
        if (v19 >= *(_QWORD *)(v29 + 16))
        {
          __break(1u);
          goto LABEL_30;
        }
        v38 = v29;
        *(_BYTE *)(v29 + v19 + 32) = 1;
LABEL_5:
        ++v19;
        v39 = 1;
        sub_23B511B74();
        sub_23B56A99C();
        v21(v13, a1);
        if (v18 == v19)
          goto LABEL_28;
      }
    }
    v20 = v34;
    v21 = *(void (**)(char *, uint64_t))(v33 + 8);
LABEL_28:
    v21(v20, a1);
    return v38;
  }
  return result;
}

uint64_t sub_23B522414(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23B522484(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_23B522430(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_23B522628(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_23B52244C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_23B522790(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_23B522468(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_23B5228DC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_23B522484(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256A2BFB0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 48 * v8)
      memmove(v10 + 4, a4 + 4, 48 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 48 * v8 || v12 >= v13 + 48 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256A2BFB8);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_23B56AC6C();
  __break(1u);
  return result;
}

uint64_t sub_23B522628(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256A2BFC0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_23B56AC6C();
  __break(1u);
  return result;
}

uint64_t sub_23B522790(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9CD0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_23B56AC6C();
  __break(1u);
  return result;
}

uint64_t sub_23B5228DC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542F99C0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_23B56AC6C();
  __break(1u);
  return result;
}

uint64_t sub_23B522A44@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  sub_23B50E118();
  result = sub_23B569BF8();
  *a1 = result;
  return result;
}

unint64_t sub_23B522AB4()
{
  unint64_t result;

  result = qword_256A2BFA8;
  if (!qword_256A2BFA8)
  {
    result = MEMORY[0x23B867894](MEMORY[0x24BEE4298], MEMORY[0x24BEE4260]);
    atomic_store(result, (unint64_t *)&qword_256A2BFA8);
  }
  return result;
}

id PrefixedDefaults.init(prefix:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  id result;

  result = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  *a3 = result;
  a3[1] = a1;
  a3[2] = a2;
  return result;
}

Swift::Void __swiftcall PrefixedDefaults.removeValue(for:)(Swift::String a1)
{
  void **v1;
  void *v2;
  id v3;

  v2 = *v1;
  swift_bridgeObjectRetain();
  sub_23B56A3A8();
  sub_23B56A3A8();
  v3 = (id)sub_23B56A264();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_removeObjectForKey_, v3);

}

uint64_t PrefixedDefaults.subscript.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  int v9;
  __int128 v11;
  _OWORD v12[2];

  v5 = *(void **)v2;
  v6 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)&v12[0] = *(_QWORD *)(v2 + 8);
  *((_QWORD *)&v12[0] + 1) = v6;
  swift_bridgeObjectRetain();
  sub_23B56A3A8();
  sub_23B56A3A8();
  v7 = (void *)sub_23B56A264();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v5, sel_objectForKey_, v7);

  if (v8)
  {
    sub_23B56A9D8();
    swift_unknownObjectRelease();
    sub_23B503EB4(&v11, v12);
  }
  else
  {
    memset(v12, 0, sizeof(v12));
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9CD8);
  v9 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, v9 ^ 1u, 1, a1);
}

void sub_23B522CF8(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  id v6;

  v5 = *(_QWORD *)(a3 + a2 - 16);
  v6 = *a1;
  swift_bridgeObjectRetain();
  PrefixedDefaults.subscript.getter(v5, a4);
  swift_bridgeObjectRelease();

}

uint64_t PrefixedDefaults.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  sub_23B5240AC(a1, a2, a3, a4);
  v5 = sub_23B56A900();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
}

void (*PrefixedDefaults.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t **a1, char a2)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  void *v15;

  v11 = malloc(0x48uLL);
  *a1 = v11;
  v11[3] = a5;
  v11[4] = v5;
  v11[1] = a3;
  v11[2] = a4;
  *v11 = a2;
  v12 = sub_23B56A900();
  v11[5] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v11[6] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v11[7] = malloc(v14);
  v15 = malloc(v14);
  v11[8] = v15;
  PrefixedDefaults.subscript.getter(a4, (uint64_t)v15);
  return sub_23B522E98;
}

void sub_23B522E98(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, uint64_t);

  v2 = *a1;
  v3 = (void *)(*a1)[7];
  v4 = (void *)(*a1)[8];
  v5 = (*a1)[5];
  v6 = (*a1)[6];
  v8 = (*a1)[1];
  v7 = (*a1)[2];
  v9 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[7], v4, v5);
    swift_bridgeObjectRetain();
    sub_23B5240AC((uint64_t)v3, v9, v8, v7);
    v10 = *(void (**)(void *, uint64_t))(v6 + 8);
    v10(v3, v5);
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_23B5240AC((uint64_t)v4, v9, v8, v7);
    v10 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v10(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

unint64_t PrefixedDefaults.subscript.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  _BYTE *v11;
  BOOL v12;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(void **)v0;
  v2 = *(_QWORD *)(v0 + 16);
  v16 = *(_QWORD *)(v0 + 8);
  v17 = v2;
  swift_bridgeObjectRetain();
  sub_23B56A3A8();
  sub_23B56A3A8();
  v3 = (void *)sub_23B56A264();
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v1, sel_stringForKey_, v3);

  if (v4)
  {
    v5 = sub_23B56A288();
    v7 = v6;

    v9 = MEMORY[0x24BDAC7A8](v8);
    if ((v7 & 0x1000000000000000) != 0 || !(v7 & 0x2000000000000000 | v5 & 0x1000000000000000))
    {
      sub_23B56AA44();
    }
    else
    {
      MEMORY[0x24BDAC7A8](v9);
      if ((v7 & 0x2000000000000000) != 0)
      {
        v16 = v5;
        v17 = v7 & 0xFFFFFFFFFFFFFFLL;
        v12 = (v5 > 0x20u || ((0x100003E01uLL >> v5) & 1) == 0)
           && (v11 = (_BYTE *)_swift_stdlib_strtof_clocale()) != 0
           && *v11 == 0;
        v15 = v12;
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
      if ((v5 & 0x1000000000000000) != 0)
      {
        ((void (*)(uint64_t *__return_ptr, uint64_t))sub_23B524210)(&v16, (v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        v14 = sub_23B56AAE0();
        ((void (*)(uint64_t *__return_ptr, uint64_t))sub_23B524210)(&v16, v14);
      }
      v15 = v16;
    }
    swift_bridgeObjectRelease();
LABEL_16:
    v10 = !v15;
    goto LABEL_17;
  }
  v10 = 1;
LABEL_17:
  LOBYTE(v16) = v10;
  return (unint64_t)v10 << 32;
}

void sub_23B523198(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  unint64_t v4;

  v3 = *a1;
  swift_bridgeObjectRetain();
  v4 = PrefixedDefaults.subscript.getter();
  swift_bridgeObjectRelease();

  *(_DWORD *)a2 = v4;
  *(_BYTE *)(a2 + 4) = BYTE4(v4) & 1;
}

void sub_23B52321C(unsigned int *a1)
{
  uint64_t v1;
  unsigned __int8 v2;

  v1 = *a1;
  v2 = *((_BYTE *)a1 + 4);
  swift_bridgeObjectRetain();
  PrefixedDefaults.subscript.setter(v1 | ((unint64_t)v2 << 32));
}

void PrefixedDefaults.subscript.setter(uint64_t a1)
{
  void **v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;

  v2 = *v1;
  if ((a1 & 0x100000000) != 0)
    v3 = 0;
  else
    v3 = sub_23B56A774();
  v4 = v2;
  swift_bridgeObjectRetain_n();
  sub_23B56A3A8();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  v5 = (id)sub_23B56A264();
  swift_bridgeObjectRelease();
  objc_msgSend(v4, sel_setObject_forKey_, v3, v5);
  swift_unknownObjectRelease();

}

void (*PrefixedDefaults.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)a1 = a2;
  v5 = PrefixedDefaults.subscript.getter();
  *(_DWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 28) = BYTE4(v5) & 1;
  return sub_23B5233C0;
}

void sub_23B5233C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned int *)(a1 + 24);
  v2 = *(unsigned __int8 *)(a1 + 28);
  swift_bridgeObjectRetain();
  PrefixedDefaults.subscript.setter(v1 | (v2 << 32));
}

uint64_t PrefixedDefaults.description.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];

  v1 = *(void **)v0;
  v2 = *(_QWORD *)(v0 + 8);
  result = sub_23B56A378();
  v4 = result + 2;
  if (__OFADD__(result, 2))
  {
    __break(1u);
  }
  else
  {
    v5 = objc_msgSend(v1, sel_dictionaryRepresentation);
    v6 = sub_23B56A18C();

    v7 = v1;
    swift_bridgeObjectRetain();
    v8 = sub_23B523BCC(v6, v7, v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    MEMORY[0x24BDAC7A8](v9);
    v13[2] = v4;
    v10 = sub_23B523DDC(v8, (uint64_t (*)(_OWORD *, _QWORD, _QWORD, _OWORD *))sub_23B52427C, (uint64_t)v13);
    swift_release();
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2BFB8);
    v12 = MEMORY[0x23B866820](v10, v11);
    swift_bridgeObjectRelease();
    return v12;
  }
  return result;
}

unint64_t sub_23B52356C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  BOOL v11;
  unint64_t result;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  swift_bridgeObjectRetain();
  v10 = sub_23B56A378();
  v11 = __OFSUB__(v10, a5);
  result = v10 - a5;
  if (v11)
  {
    __break(1u);
  }
  else
  {
    v13 = sub_23B54D3BC(result, a2, a3);
    v15 = v14;
    v17 = v16;
    v19 = v18;
    swift_bridgeObjectRelease();
    v20 = MEMORY[0x23B866634](v13, v15, v17, v19);
    swift_bridgeObjectRelease();
    sub_23B5035B4(a4, a1);
    return v20;
  }
  return result;
}

uint64_t sub_23B523630(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  _OWORD v32[2];
  _OWORD v33[2];

  if (!a3)
    return MEMORY[0x24BEE4B00];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9CC8);
  result = sub_23B56AC60();
  v8 = result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
    }
    else
    {
      v14 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_40;
      if (v14 >= v30)
        return v8;
      v15 = a1[v14];
      ++v10;
      if (!v15)
      {
        v10 = v14 + 1;
        if (v14 + 1 >= v30)
          return v8;
        v15 = a1[v10];
        if (!v15)
        {
          v10 = v14 + 2;
          if (v14 + 2 >= v30)
            return v8;
          v15 = a1[v10];
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= v30)
              return v8;
            v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                v10 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_41;
                if (v10 >= v30)
                  return v8;
                v15 = a1[v10];
                ++v16;
                if (v15)
                  goto LABEL_24;
              }
            }
            v10 = v16;
          }
        }
      }
LABEL_24:
      v9 = (v15 - 1) & v15;
      v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v19 = *v17;
    v18 = v17[1];
    sub_23B5035B4(*(_QWORD *)(v4 + 56) + 32 * v13, (uint64_t)v33);
    sub_23B503EB4(v33, v32);
    sub_23B56AE64();
    swift_bridgeObjectRetain();
    sub_23B56A36C();
    result = sub_23B56AE88();
    v20 = -1 << *(_BYTE *)(v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v23);
    *v28 = v19;
    v28[1] = v18;
    result = (uint64_t)sub_23B503EB4(v32, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v23));
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return v8;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_23B5238F0(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_23B523978(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  _BYTE v26[32];
  uint64_t v27;

  v27 = a5;
  v20 = (unint64_t *)result;
  v21 = 0;
  v6 = 0;
  v22 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v23 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v10 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v11 = v10 | (v6 << 6);
      goto LABEL_5;
    }
    v15 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v15 >= v23)
      return sub_23B523630(v20, a2, v21, a3);
    v16 = *(_QWORD *)(v22 + 8 * v15);
    ++v6;
    if (!v16)
    {
      v6 = v15 + 1;
      if (v15 + 1 >= v23)
        return sub_23B523630(v20, a2, v21, a3);
      v16 = *(_QWORD *)(v22 + 8 * v6);
      if (!v16)
      {
        v6 = v15 + 2;
        if (v15 + 2 >= v23)
          return sub_23B523630(v20, a2, v21, a3);
        v16 = *(_QWORD *)(v22 + 8 * v6);
        if (!v16)
          break;
      }
    }
LABEL_20:
    v9 = (v16 - 1) & v16;
    v11 = __clz(__rbit64(v16)) + (v6 << 6);
LABEL_5:
    v12 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v11);
    v13 = *v12;
    v14 = v12[1];
    sub_23B5035B4(*(_QWORD *)(a3 + 56) + 32 * v11, (uint64_t)v26);
    v24[0] = v13;
    v24[1] = v14;
    sub_23B5035B4((uint64_t)v26, (uint64_t)&v25);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    sub_23B56A3A8();
    LOBYTE(v13) = sub_23B56A420();
    swift_bridgeObjectRelease();
    sub_23B5244B8((uint64_t)v24);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    result = swift_bridgeObjectRelease();
    if ((v13 & 1) != 0)
    {
      *(unint64_t *)((char *)v20 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      if (__OFADD__(v21++, 1))
      {
        __break(1u);
        return sub_23B523630(v20, a2, v21, a3);
      }
    }
  }
  v17 = v15 + 3;
  if (v17 >= v23)
    return sub_23B523630(v20, a2, v21, a3);
  v16 = *(_QWORD *)(v22 + 8 * v17);
  if (v16)
  {
    v6 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v6 >= v23)
      return sub_23B523630(v20, a2, v21, a3);
    v16 = *(_QWORD *)(v22 + 8 * v6);
    ++v17;
    if (v16)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_23B523BCC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  char v6;
  unsigned int v7;
  unint64_t v8;
  id v9;
  uint64_t isStackAllocationSafe;
  void *v11;
  char *v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x24BDAC8D0];
  v6 = *(_BYTE *)(a1 + 32);
  v7 = v6 & 0x3F;
  v8 = (unint64_t)((1 << v6) + 63) >> 6;
  v9 = a2;
  swift_bridgeObjectRetain_n();
  isStackAllocationSafe = (uint64_t)v9;
  v11 = (void *)isStackAllocationSafe;
  if (v7 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    v12 = (char *)v18 - ((8 * v8 + 15) & 0x3FFFFFFFFFFFFFF0);
    bzero(v12, 8 * v8);
    v13 = v11;
    swift_bridgeObjectRetain();
    v14 = sub_23B523978((uint64_t)v12, v8, a1, (uint64_t)v13, a3);
    swift_bridgeObjectRelease();

    if (v3)
      swift_willThrow();
    swift_bridgeObjectRelease_n();

  }
  else
  {
    v15 = (void *)swift_slowAlloc();
    bzero(v15, 8 * v8);
    v16 = v11;
    swift_bridgeObjectRetain();
    v14 = sub_23B523978((uint64_t)v15, v8, a1, (uint64_t)v16, a3);
    swift_bridgeObjectRelease();

    MEMORY[0x23B867948](v15, -1, -1);
    swift_bridgeObjectRelease_n();

  }
  return v14;
}

uint64_t sub_23B523DDC(uint64_t a1, uint64_t (*a2)(_OWORD *, _QWORD, _QWORD, _OWORD *), uint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  __int128 v31;
  _OWORD v32[2];
  __int128 v33;
  _OWORD v34[2];
  _QWORD v35[2];
  _BYTE v36[32];
  __int128 v37;
  _OWORD v38[2];
  uint64_t v39;
  uint64_t v40;

  v40 = a3;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (!v3)
    return v4;
  v39 = MEMORY[0x24BEE4AF8];
  sub_23B522414(0, v3, 0);
  result = sub_23B5238F0(a1);
  v8 = result;
  v9 = 0;
  v10 = a1 + 64;
  v28 = v7;
  v29 = a1 + 64;
  while ((v8 & 0x8000000000000000) == 0 && v8 < 1 << *(_BYTE *)(a1 + 32))
  {
    v12 = (unint64_t)v8 >> 6;
    if ((*(_QWORD *)(v10 + 8 * ((unint64_t)v8 >> 6)) & (1 << v8)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != v7)
      goto LABEL_26;
    v13 = v3;
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v8);
    v16 = *v14;
    v15 = v14[1];
    sub_23B5035B4(*(_QWORD *)(a1 + 56) + 32 * v8, (uint64_t)v36);
    v35[0] = v16;
    v35[1] = v15;
    *(_QWORD *)&v33 = v16;
    *((_QWORD *)&v33 + 1) = v15;
    sub_23B5035B4((uint64_t)v36, (uint64_t)v34);
    v31 = v33;
    v32[0] = v34[0];
    v32[1] = v34[1];
    swift_bridgeObjectRetain_n();
    sub_23B5244B8((uint64_t)v35);
    *(_QWORD *)&v37 = a2(v38, v31, *((_QWORD *)&v31 + 1), v32);
    *((_QWORD *)&v37 + 1) = v17;
    sub_23B5244B8((uint64_t)&v31);
    v4 = v39;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = sub_23B522414(0, *(_QWORD *)(v4 + 16) + 1, 1);
      v4 = v39;
    }
    v19 = *(_QWORD *)(v4 + 16);
    v18 = *(_QWORD *)(v4 + 24);
    if (v19 >= v18 >> 1)
    {
      result = sub_23B522414(v18 > 1, v19 + 1, 1);
      v4 = v39;
    }
    *(_QWORD *)(v4 + 16) = v19 + 1;
    v20 = (_OWORD *)(v4 + 48 * v19);
    v21 = v37;
    v22 = v38[1];
    v20[3] = v38[0];
    v20[4] = v22;
    v20[2] = v21;
    v11 = 1 << *(_BYTE *)(a1 + 32);
    if (v8 >= v11)
      goto LABEL_27;
    v10 = a1 + 64;
    v23 = *(_QWORD *)(v29 + 8 * v12);
    if ((v23 & (1 << v8)) == 0)
      goto LABEL_28;
    v7 = v28;
    if (*(_DWORD *)(a1 + 36) != v28)
      goto LABEL_29;
    v24 = v23 & (-2 << (v8 & 0x3F));
    if (v24)
    {
      v11 = __clz(__rbit64(v24)) | v8 & 0xFFFFFFFFFFFFFFC0;
      v3 = v13;
    }
    else
    {
      v25 = v12 + 1;
      v26 = (unint64_t)(v11 + 63) >> 6;
      v3 = v13;
      if (v12 + 1 < v26)
      {
        v27 = *(_QWORD *)(v29 + 8 * v25);
        if (v27)
        {
LABEL_22:
          v11 = __clz(__rbit64(v27)) + (v25 << 6);
        }
        else
        {
          while (v26 - 2 != v12)
          {
            v27 = *(_QWORD *)(a1 + 80 + 8 * v12++);
            if (v27)
            {
              v25 = v12 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    ++v9;
    v8 = v11;
    if (v9 == v3)
      return v4;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

void sub_23B5240AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  _QWORD v18[2];

  v7 = sub_23B56A900();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v18 - v8;
  v10 = *(void **)v4;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)v18 - v8, a1);
  v12 = *(_QWORD *)(a4 - 8);
  v13 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, a4) != 1)
  {
    v13 = sub_23B56AD8C();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, a4);
  }
  v14 = *(void **)v4;
  v15 = *(_QWORD *)(v4 + 16);
  v18[0] = *(_QWORD *)(v4 + 8);
  v18[1] = v15;
  v16 = v14;
  swift_bridgeObjectRetain_n();
  sub_23B56A3A8();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  v17 = (void *)sub_23B56A264();
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_setObject_forKey_, v13, v17);
  swift_unknownObjectRelease();

}

_BYTE *sub_23B524210@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtof_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

unint64_t sub_23B52427C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_23B52356C(a1, a2, a3, a4, *(_QWORD *)(v4 + 16));
}

void sub_23B524288(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(uint64_t *)((char *)a3 + a4 - 16);
  v6 = *a3;
  v7 = a3[1];
  swift_bridgeObjectRetain();
  sub_23B5240AC(a1, v6, v7, v5);
}

uint64_t sub_23B5242E4()
{
  return 16;
}

__n128 sub_23B5242F0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23B524304()
{
  return 0;
}

uint64_t destroy for PrefixedDefaults(id *a1)
{

  return swift_bridgeObjectRelease();
}

_QWORD *_s10FindMyBase16PrefixedDefaultsVwCP_0(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  a1[2] = *(_QWORD *)(a2 + 16);
  v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PrefixedDefaults(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PrefixedDefaults(uint64_t a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v5 = a2[2];
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PrefixedDefaults(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PrefixedDefaults(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PrefixedDefaults()
{
  return &type metadata for PrefixedDefaults;
}

uint64_t sub_23B5244B8(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2BFC8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Dictionary<>.dataRepresentation.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];

  sub_23B569BBC();
  swift_allocObject();
  sub_23B569BB0();
  v10 = sub_23B56A1C8();
  v13[0] = a5;
  v13[1] = a8;
  MEMORY[0x23B867894](MEMORY[0x24BEE04C0], v10, v13);
  v11 = sub_23B569BA4();
  swift_release();
  return v11;
}

uint64_t Dictionary<>.init(dataRepresentation:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD v15[4];

  sub_23B569B98();
  swift_allocObject();
  sub_23B569B8C();
  v12 = sub_23B56A1C8();
  v15[0] = a5;
  v15[1] = a8;
  MEMORY[0x23B867894](MEMORY[0x24BEE04E0], v12, v15);
  sub_23B569B80();
  sub_23B504944(a1, a2);
  result = swift_release();
  if (!v14)
    return v15[3];
  return result;
}

uint64_t sub_23B5247B8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v7;

  return Dictionary<>.dataRepresentation.getter(*v7, a1[2], a1[3], a4, *(_QWORD *)(a2 - 16), a1[4], a7, *(_QWORD *)(a2 - 32));
}

uint64_t sub_23B5247D4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v6;
  uint64_t result;

  result = Dictionary<>.init(dataRepresentation:)(a1, a2, a3[2], a3[3], *(_QWORD *)(a4 - 8), a5, a3[4], *(_QWORD *)(a4 - 24));
  if (!v6)
    *a6 = result;
  return result;
}

uint64_t Dictionary<>.stringRepresentation.getter(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  char *v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  int64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char isUniquelyReferenced_nonNull_native;
  char v49;
  unint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  char v56;
  _QWORD *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t result;
  _QWORD v65[2];
  unint64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  int64_t v79;
  char *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;

  v71 = a4;
  v72 = a6;
  v6 = a3;
  v83 = *(_QWORD *)(a3 - 8);
  v9 = MEMORY[0x24BDAC7A8](a1);
  v80 = (char *)v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v15 = sub_23B56A900();
  v73 = *(_QWORD *)(v15 - 8);
  v74 = v15;
  v16 = MEMORY[0x24BDAC7A8](v15);
  v77 = (char *)v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v65 - v18;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v20 = sub_23B56AC00();
    v66 = 0;
    v21 = 0;
    v22 = 0;
    v23 = v20 | 0x8000000000000000;
  }
  else
  {
    v24 = -1 << *(_BYTE *)(a1 + 32);
    v21 = ~v24;
    v25 = *(_QWORD *)(a1 + 64);
    v66 = a1 + 64;
    v26 = -v24;
    if (v26 < 64)
      v27 = ~(-1 << v26);
    else
      v27 = -1;
    v22 = v27 & v25;
    v23 = a1;
  }
  v75 = v23;
  v67 = (unint64_t)(v21 + 64) >> 6;
  v68 = v23 & 0x7FFFFFFFFFFFFFFFLL;
  v65[0] = v67 - 1;
  v65[1] = v21;
  swift_bridgeObjectRetain();
  v28 = 0;
  v81 = (_QWORD *)MEMORY[0x24BEE4B00];
  v29 = v77;
  v76 = v19;
  v69 = TupleTypeMetadata2;
  v70 = v13;
  while ((v75 & 0x8000000000000000) != 0)
  {
    if (sub_23B56AC0C())
    {
      v34 = v77;
      sub_23B56AD74();
      v29 = v34;
      v19 = v76;
      swift_unknownObjectRelease();
      sub_23B56AD74();
      swift_unknownObjectRelease();
      v33 = 0;
      v78 = v22;
      v79 = v28;
    }
    else
    {
      v33 = 1;
      v78 = v22;
      v79 = v28;
      v29 = v77;
    }
LABEL_23:
    v37 = *(_QWORD *)(TupleTypeMetadata2 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 56))(v29, v33, 1, TupleTypeMetadata2);
    (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v19, v29, v74);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v19, 1, TupleTypeMetadata2) == 1)
    {
      sub_23B524DFC();
      return (uint64_t)v81;
    }
    v38 = &v19[*(int *)(TupleTypeMetadata2 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v13, v19, a2);
    (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v80, v38, v6);
    v39 = a2;
    v40 = sub_23B56AD44();
    v42 = v41;
    v43 = v6;
    v44 = sub_23B56AD44();
    v46 = v45;
    v47 = v81;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v84 = v47;
    v50 = sub_23B5015D8(v40, v42);
    v51 = v47[2];
    v52 = (v49 & 1) == 0;
    v53 = v51 + v52;
    if (__OFADD__(v51, v52))
    {
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    v54 = v49;
    if (v47[3] < v53)
    {
      sub_23B5254A8(v53, isUniquelyReferenced_nonNull_native);
      v55 = sub_23B5015D8(v40, v42);
      if ((v54 & 1) != (v56 & 1))
        goto LABEL_52;
      v50 = v55;
      goto LABEL_28;
    }
    v29 = v77;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_23B5266BC();
LABEL_28:
      v29 = v77;
    }
    v57 = v84;
    v81 = v84;
    if ((v54 & 1) != 0)
    {
      v30 = (uint64_t *)(v84[7] + 16 * v50);
      swift_bridgeObjectRelease();
      *v30 = v44;
      v30[1] = v46;
    }
    else
    {
      v84[(v50 >> 6) + 8] |= 1 << v50;
      v58 = (uint64_t *)(v57[6] + 16 * v50);
      *v58 = v40;
      v58[1] = v42;
      v59 = (uint64_t *)(v57[7] + 16 * v50);
      *v59 = v44;
      v59[1] = v46;
      v60 = v57[2];
      v61 = __OFADD__(v60, 1);
      v62 = v60 + 1;
      if (v61)
        goto LABEL_49;
      v57[2] = v62;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = v43;
    (*(void (**)(char *, uint64_t))(v83 + 8))(v80, v43);
    v13 = v70;
    a2 = v39;
    (*(void (**)(char *, uint64_t))(v82 + 8))(v70, v39);
    v22 = v78;
    v28 = v79;
    TupleTypeMetadata2 = v69;
    v19 = v76;
  }
  if (v22)
  {
    v78 = (v22 - 1) & v22;
    v79 = v28;
    v31 = __clz(__rbit64(v22)) | (v28 << 6);
    goto LABEL_13;
  }
  v35 = v28 + 1;
  if (__OFADD__(v28, 1))
    goto LABEL_50;
  if (v35 >= v67)
  {
    v78 = 0;
    v79 = v28;
LABEL_22:
    v33 = 1;
    goto LABEL_23;
  }
  v36 = *(_QWORD *)(v66 + 8 * v35);
  if (v36)
    goto LABEL_19;
  if (v28 + 2 >= v67)
  {
    v78 = 0;
    v79 = v28 + 1;
    goto LABEL_22;
  }
  v36 = *(_QWORD *)(v66 + 8 * (v28 + 2));
  if (v36)
  {
    v35 = v28 + 2;
    goto LABEL_19;
  }
  v63 = v28 + 3;
  if (v28 + 3 >= v67)
  {
    v78 = 0;
    v79 = v28 + 2;
    goto LABEL_22;
  }
  v36 = *(_QWORD *)(v66 + 8 * v63);
  if (v36)
  {
    v35 = v28 + 3;
LABEL_19:
    v78 = (v36 - 1) & v36;
    v79 = v35;
    v31 = __clz(__rbit64(v36)) + (v35 << 6);
LABEL_13:
    v32 = v75;
    (*(void (**)(char *, unint64_t, uint64_t))(v82 + 16))(v29, *(_QWORD *)(v75 + 48) + *(_QWORD *)(v82 + 72) * v31, a2);
    (*(void (**)(char *, unint64_t, uint64_t))(v83 + 16))(&v29[*(int *)(TupleTypeMetadata2 + 48)], *(_QWORD *)(v32 + 56) + *(_QWORD *)(v83 + 72) * v31, v6);
    v33 = 0;
    goto LABEL_23;
  }
  while (1)
  {
    v35 = v63 + 1;
    if (__OFADD__(v63, 1))
      break;
    if (v35 >= v67)
    {
      v33 = 1;
      v78 = 0;
      v79 = v65[0];
      goto LABEL_23;
    }
    v36 = *(_QWORD *)(v66 + 8 * v35);
    ++v63;
    if (v36)
      goto LABEL_19;
  }
LABEL_51:
  __break(1u);
LABEL_52:
  result = sub_23B56AE10();
  __break(1u);
  return result;
}

uint64_t sub_23B524DFC()
{
  return swift_release();
}

uint64_t sub_23B524E04(uint64_t a1, int a2)
{
  return sub_23B524E2C(a1, a2, &qword_2542FA888, &qword_2542FA8A8);
}

uint64_t sub_23B524E18(uint64_t a1, int a2)
{
  return sub_23B524E2C(a1, a2, &qword_2542FA878, &qword_2542FA8A0);
}

uint64_t sub_23B524E2C(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  int v46;
  char *v47;
  uint64_t v48;

  v6 = v4;
  v48 = __swift_instantiateConcreteTypeFromMangledName(a3);
  v8 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v47 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  v46 = a2;
  v11 = sub_23B56AC54();
  v12 = v11;
  if (*(_QWORD *)(v10 + 16))
  {
    v43 = v4;
    v13 = 1 << *(_BYTE *)(v10 + 32);
    v14 = *(_QWORD *)(v10 + 64);
    v45 = (_QWORD *)(v10 + 64);
    if (v13 < 64)
      v15 = ~(-1 << v13);
    else
      v15 = -1;
    v16 = v15 & v14;
    v44 = (unint64_t)(v13 + 63) >> 6;
    v17 = v11 + 64;
    result = swift_retain();
    v19 = 0;
    while (1)
    {
      if (v16)
      {
        v22 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        v23 = v22 | (v19 << 6);
      }
      else
      {
        v24 = v19 + 1;
        if (__OFADD__(v19, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v24 >= v44)
          goto LABEL_34;
        v25 = v45[v24];
        ++v19;
        if (!v25)
        {
          v19 = v24 + 1;
          if (v24 + 1 >= v44)
            goto LABEL_34;
          v25 = v45[v19];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v44)
            {
LABEL_34:
              swift_release();
              v6 = v43;
              if ((v46 & 1) != 0)
              {
                v41 = 1 << *(_BYTE *)(v10 + 32);
                if (v41 >= 64)
                  bzero(v45, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v45 = -1 << v41;
                *(_QWORD *)(v10 + 16) = 0;
              }
              break;
            }
            v25 = v45[v26];
            if (!v25)
            {
              while (1)
              {
                v19 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_41;
                if (v19 >= v44)
                  goto LABEL_34;
                v25 = v45[v19];
                ++v26;
                if (v25)
                  goto LABEL_21;
              }
            }
            v19 = v26;
          }
        }
LABEL_21:
        v16 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v19 << 6);
      }
      v27 = *(_QWORD *)(v10 + 56);
      v28 = v10;
      v29 = (uint64_t *)(*(_QWORD *)(v10 + 48) + 16 * v23);
      v31 = *v29;
      v30 = v29[1];
      v32 = *(_QWORD *)(v8 + 72);
      v33 = v27 + v32 * v23;
      if ((v46 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v47, v33, v48);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v47, v33, v48);
        swift_bridgeObjectRetain();
      }
      sub_23B56AE64();
      sub_23B56A36C();
      result = sub_23B56AE88();
      v34 = -1 << *(_BYTE *)(v12 + 32);
      v35 = result & ~v34;
      v36 = v35 >> 6;
      if (((-1 << v35) & ~*(_QWORD *)(v17 + 8 * (v35 >> 6))) != 0)
      {
        v20 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v17 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v37 = 0;
        v38 = (unint64_t)(63 - v34) >> 6;
        do
        {
          if (++v36 == v38 && (v37 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v39 = v36 == v38;
          if (v36 == v38)
            v36 = 0;
          v37 |= v39;
          v40 = *(_QWORD *)(v17 + 8 * v36);
        }
        while (v40 == -1);
        v20 = __clz(__rbit64(~v40)) + (v36 << 6);
      }
      *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      v21 = (_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v20);
      *v21 = v31;
      v21[1] = v30;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32))(*(_QWORD *)(v12 + 56) + v32 * v20, v47, v48);
      ++*(_QWORD *)(v12 + 16);
      v10 = v28;
    }
  }
  result = swift_release();
  *v6 = v12;
  return result;
}

uint64_t sub_23B525194(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FA898);
  v36 = a2;
  v6 = sub_23B56AC54();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_23B56AE64();
    sub_23B56A36C();
    result = sub_23B56AE88();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_23B5254A8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256A2BDC8);
  v42 = a2;
  v6 = sub_23B56AC54();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_33;
      v25 = *(_QWORD *)(v41 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v40)
              goto LABEL_33;
            v25 = *(_QWORD *)(v41 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v31);
    v36 = *v35;
    v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_23B56AE64();
    sub_23B56A36C();
    result = sub_23B56AE88();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 56) + v18);
    *v20 = v36;
    v20[1] = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_23B5257CC(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[4];
  int v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;

  v3 = v2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA40);
  v51 = *(_QWORD *)(v5 - 8);
  v52 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v50 = &v42[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_23B569FA0();
  v49 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = &v42[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AA8);
  v11 = sub_23B56AC54();
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_41;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v46 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v44 = v2;
  v45 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  v48 = v10;
  result = swift_retain();
  v19 = 0;
  v43 = a2;
  v20 = 16;
  if ((a2 & 1) != 0)
    v20 = 32;
  v47 = v20;
  v21 = v20;
  while (1)
  {
    if (v16)
    {
      v23 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v24 = v23 | (v19 << 6);
      goto LABEL_24;
    }
    v25 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v45)
      break;
    v26 = v46;
    v27 = v46[v25];
    ++v19;
    if (!v27)
    {
      v19 = v25 + 1;
      if (v25 + 1 >= v45)
        goto LABEL_34;
      v27 = v46[v19];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v45)
        {
LABEL_34:
          v40 = v48;
          swift_release();
          v3 = v44;
          if ((v43 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v27 = v46[v28];
        if (!v27)
        {
          while (1)
          {
            v19 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_43;
            if (v19 >= v45)
              goto LABEL_34;
            v27 = v46[v19];
            ++v28;
            if (v27)
              goto LABEL_23;
          }
        }
        v19 = v28;
      }
    }
LABEL_23:
    v16 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v19 << 6);
LABEL_24:
    v29 = v48;
    v30 = *(_QWORD *)(v49 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v49 + v21))(v9, *(_QWORD *)(v48 + 48) + v30 * v24, v7);
    v31 = *(_QWORD *)(v29 + 56);
    v32 = *(_QWORD *)(v51 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v51 + v21))(v50, v31 + v32 * v24, v52);
    sub_23B4FCC20((unint64_t *)&qword_2542FAA50, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    result = sub_23B56A1EC();
    v33 = -1 << *(_BYTE *)(v12 + 32);
    v34 = result & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v17 + 8 * (v34 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v17 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v17 + 8 * v35);
      }
      while (v39 == -1);
      v22 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v17 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v49 + 32))(*(_QWORD *)(v12 + 48) + v30 * v22, v9, v7);
    result = (*(uint64_t (**)(unint64_t, _BYTE *, uint64_t))(v51 + 32))(*(_QWORD *)(v12 + 56) + v32 * v22, v50, v52);
    ++*(_QWORD *)(v12 + 16);
  }
  v40 = v48;
  swift_release();
  v3 = v44;
  v26 = v46;
  if ((v43 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v41 = 1 << *(_BYTE *)(v40 + 32);
  if (v41 >= 64)
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v41;
  *(_QWORD *)(v40 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v12;
  return result;
}

uint64_t sub_23B525BC8(uint64_t a1, char a2)
{
  return sub_23B525C00(a1, a2, &qword_256A2BFD0, (void (*)(uint64_t, _BYTE *))sub_23B503EB4, (void (*)(uint64_t, _BYTE *))sub_23B5035B4);
}

uint64_t sub_23B525BE4(uint64_t a1, char a2)
{
  return sub_23B525C00(a1, a2, &qword_2542F9CC8, (void (*)(uint64_t, _BYTE *))sub_23B503EB4, (void (*)(uint64_t, _BYTE *))sub_23B5035B4);
}

uint64_t sub_23B525C00(uint64_t a1, char a2, uint64_t *a3, void (*a4)(uint64_t, _BYTE *), void (*a5)(uint64_t, _BYTE *))
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t v40;
  char v42;
  _BYTE v43[32];

  v7 = v5;
  v9 = *v5;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v42 = a2;
  v10 = sub_23B56AC54();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v40 = v9 + 64;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  else
    v13 = -1;
  v14 = v13 & *(_QWORD *)(v9 + 64);
  v38 = v5;
  v39 = (unint64_t)(v12 + 63) >> 6;
  v15 = v10 + 64;
  result = swift_retain();
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v39)
      break;
    v23 = (_QWORD *)(v9 + 64);
    v24 = *(_QWORD *)(v40 + 8 * v22);
    ++v17;
    if (!v24)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v39)
        goto LABEL_34;
      v24 = *(_QWORD *)(v40 + 8 * v17);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_34:
          swift_release();
          v7 = v38;
          if ((v42 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = *(_QWORD *)(v40 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v17 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v17 >= v39)
              goto LABEL_34;
            v24 = *(_QWORD *)(v40 + 8 * v17);
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v17 = v25;
      }
    }
LABEL_21:
    v14 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    v26 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * v21);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(_QWORD *)(v9 + 56) + 32 * v21;
    if ((v42 & 1) != 0)
    {
      a4(v29, v43);
    }
    else
    {
      a5(v29, v43);
      swift_bridgeObjectRetain();
    }
    sub_23B56AE64();
    sub_23B56A36C();
    result = sub_23B56AE88();
    v30 = -1 << *(_BYTE *)(v11 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v15 + 8 * (v31 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v15 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v15 + 8 * v32);
      }
      while (v36 == -1);
      v18 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v11 + 48) + 16 * v18);
    *v19 = v28;
    v19[1] = v27;
    result = ((uint64_t (*)(_BYTE *, unint64_t))a4)(v43, *(_QWORD *)(v11 + 56) + 32 * v18);
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v7 = v38;
  v23 = (_QWORD *)(v9 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v37 = 1 << *(_BYTE *)(v9 + 32);
  if (v37 >= 64)
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v37;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v7 = v11;
  return result;
}

uint64_t sub_23B525F28(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  _QWORD *v45;
  char v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F99E8);
  v46 = a2;
  v6 = sub_23B56AC54();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v45 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v44 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v22 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v23 = v22 | (v13 << 6);
      }
      else
      {
        v24 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v24 >= v44)
          goto LABEL_34;
        v25 = v45[v24];
        ++v13;
        if (!v25)
        {
          v13 = v24 + 1;
          if (v24 + 1 >= v44)
            goto LABEL_34;
          v25 = v45[v13];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v44)
            {
LABEL_34:
              swift_release();
              v3 = v2;
              if ((v46 & 1) != 0)
              {
                v43 = 1 << *(_BYTE *)(v5 + 32);
                if (v43 >= 64)
                  bzero(v45, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v45 = -1 << v43;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v25 = v45[v26];
            if (!v25)
            {
              while (1)
              {
                v13 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_41;
                if (v13 >= v44)
                  goto LABEL_34;
                v25 = v45[v13];
                ++v26;
                if (v25)
                  goto LABEL_21;
              }
            }
            v13 = v26;
          }
        }
LABEL_21:
        v10 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v13 << 6);
      }
      v27 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v23);
      v29 = *v27;
      v28 = v27[1];
      v30 = *(_QWORD *)(v5 + 56) + 112 * v23;
      if ((v46 & 1) != 0)
      {
        v31 = *(_OWORD *)v30;
        v32 = *(_OWORD *)(v30 + 32);
        v48 = *(_OWORD *)(v30 + 16);
        v49 = v32;
        v47 = v31;
        v33 = *(_OWORD *)(v30 + 48);
        v34 = *(_OWORD *)(v30 + 64);
        v35 = *(_OWORD *)(v30 + 96);
        v52 = *(_OWORD *)(v30 + 80);
        v53 = v35;
        v51 = v34;
        v50 = v33;
      }
      else
      {
        sub_23B500C80((_QWORD *)v30, (uint64_t)&v47);
        swift_bridgeObjectRetain();
      }
      sub_23B56AE64();
      swift_bridgeObjectRetain();
      sub_23B56A36C();
      swift_bridgeObjectRelease();
      result = sub_23B56AE88();
      v36 = -1 << *(_BYTE *)(v7 + 32);
      v37 = result & ~v36;
      v38 = v37 >> 6;
      if (((-1 << v37) & ~*(_QWORD *)(v11 + 8 * (v37 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)(v11 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v39 = 0;
        v40 = (unint64_t)(63 - v36) >> 6;
        do
        {
          if (++v38 == v40 && (v39 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v41 = v38 == v40;
          if (v38 == v40)
            v38 = 0;
          v39 |= v41;
          v42 = *(_QWORD *)(v11 + 8 * v38);
        }
        while (v42 == -1);
        v14 = __clz(__rbit64(~v42)) + (v38 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
      *v15 = v29;
      v15[1] = v28;
      v16 = (_OWORD *)(*(_QWORD *)(v7 + 56) + 112 * v14);
      v17 = v47;
      v18 = v49;
      v16[1] = v48;
      v16[2] = v18;
      *v16 = v17;
      v19 = v50;
      v20 = v51;
      v21 = v53;
      v16[5] = v52;
      v16[6] = v21;
      v16[3] = v19;
      v16[4] = v20;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

void *sub_23B526288()
{
  return sub_23B5262B0(&qword_2542FA888, &qword_2542FA8A8);
}

void *sub_23B52629C()
{
  return sub_23B5262B0(&qword_2542FA878, &qword_2542FA8A0);
}

void *sub_23B5262B0(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  v37 = __swift_instantiateConcreteTypeFromMangledName(a1);
  v4 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v34 = v2;
  v7 = *v2;
  v8 = sub_23B56AC48();
  v9 = *(_QWORD *)(v7 + 16);
  v38 = v8;
  if (!v9)
  {
    result = (void *)swift_release();
    v32 = v38;
    v31 = v34;
LABEL_28:
    *v31 = v32;
    return result;
  }
  v10 = v8;
  result = (void *)(v8 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v7 || (unint64_t)result >= v7 + 64 + 8 * v12)
  {
    result = memmove(result, (const void *)(v7 + 64), 8 * v12);
    v10 = v38;
  }
  v35 = v7 + 64;
  v14 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v7 + 16);
  v15 = 1 << *(_BYTE *)(v7 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v7 + 64);
  v36 = (unint64_t)(v15 + 63) >> 6;
  v18 = v37;
  while (1)
  {
    if (v17)
    {
      v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }
    v28 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v36)
      goto LABEL_26;
    v29 = *(_QWORD *)(v35 + 8 * v28);
    ++v14;
    if (!v29)
    {
      v14 = v28 + 1;
      if (v28 + 1 >= v36)
        goto LABEL_26;
      v29 = *(_QWORD *)(v35 + 8 * v14);
      if (!v29)
        break;
    }
LABEL_25:
    v17 = (v29 - 1) & v29;
    v20 = __clz(__rbit64(v29)) + (v14 << 6);
LABEL_12:
    v21 = 16 * v20;
    v22 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v20);
    v24 = *v22;
    v23 = v22[1];
    v25 = *(_QWORD *)(v4 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(_QWORD *)(v7 + 56) + v25, v18);
    v26 = v38;
    v27 = (_QWORD *)(*(_QWORD *)(v38 + 48) + v21);
    *v27 = v24;
    v27[1] = v23;
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(_QWORD *)(v26 + 56) + v25, v6, v18);
    result = (void *)swift_bridgeObjectRetain();
  }
  v30 = v28 + 2;
  if (v30 >= v36)
  {
LABEL_26:
    result = (void *)swift_release();
    v31 = v34;
    v32 = v38;
    goto LABEL_28;
  }
  v29 = *(_QWORD *)(v35 + 8 * v30);
  if (v29)
  {
    v14 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v14 >= v36)
      goto LABEL_26;
    v29 = *(_QWORD *)(v35 + 8 * v14);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_23B526508()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FA898);
  v2 = *v0;
  v3 = sub_23B56AC48();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_23B5266BC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256A2BDC8);
  v2 = *v0;
  v3 = sub_23B56AC48();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

char *sub_23B526874()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *result;
  char *v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;

  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA40);
  v37 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v40 = (char *)&v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_23B569FA0();
  v36 = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39);
  v38 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AA8);
  v33 = v0;
  v3 = *v0;
  v4 = sub_23B56AC48();
  v5 = *(_QWORD *)(v3 + 16);
  v43 = v4;
  if (!v5)
  {
    result = (char *)swift_release();
    v32 = v43;
    v31 = v33;
LABEL_25:
    *v31 = v32;
    return result;
  }
  v6 = v4;
  result = (char *)(v4 + 64);
  v8 = (char *)(v3 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  v34 = v3 + 64;
  if (v6 != v3 || result >= &v8[8 * v9])
  {
    result = (char *)memmove(result, v8, 8 * v9);
    v6 = v43;
  }
  v10 = 0;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v42 = v3;
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v35 = (unint64_t)(v11 + 63) >> 6;
  v14 = v36;
  v15 = v37;
  v17 = v38;
  v16 = v39;
  v18 = v41;
  v19 = v43;
  while (1)
  {
    if (v13)
    {
      v20 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v44 = v10;
      v21 = v20 | (v10 << 6);
      v22 = v42;
      goto LABEL_9;
    }
    v27 = v10 + 1;
    v22 = v42;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v27 >= v35)
      goto LABEL_23;
    v28 = *(_QWORD *)(v34 + 8 * v27);
    v29 = v10 + 1;
    if (!v28)
    {
      v29 = v27 + 1;
      if (v27 + 1 >= v35)
        goto LABEL_23;
      v28 = *(_QWORD *)(v34 + 8 * v29);
      if (!v28)
        break;
    }
LABEL_22:
    v13 = (v28 - 1) & v28;
    v44 = v29;
    v21 = __clz(__rbit64(v28)) + (v29 << 6);
LABEL_9:
    v23 = *(_QWORD *)(v14 + 72) * v21;
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v17, *(_QWORD *)(v22 + 48) + v23, v16);
    v24 = *(_QWORD *)(v15 + 72) * v21;
    v25 = *(_QWORD *)(v22 + 56) + v24;
    v26 = v40;
    (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(v40, v25, v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(*(_QWORD *)(v19 + 48) + v23, v17, v16);
    result = (char *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v15 + 32))(*(_QWORD *)(v19 + 56) + v24, v26, v18);
    v10 = v44;
  }
  v30 = v27 + 2;
  if (v30 >= v35)
  {
LABEL_23:
    result = (char *)swift_release();
    v31 = v33;
    v32 = v43;
    goto LABEL_25;
  }
  v28 = *(_QWORD *)(v34 + 8 * v30);
  if (v28)
  {
    v29 = v30;
    goto LABEL_22;
  }
  while (1)
  {
    v29 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v29 >= v35)
      goto LABEL_23;
    v28 = *(_QWORD *)(v34 + 8 * v29);
    ++v30;
    if (v28)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_23B526B58()
{
  return sub_23B526B90(&qword_256A2BFD0, (void (*)(unint64_t, _BYTE *))sub_23B5035B4, (void (*)(_BYTE *, uint64_t))sub_23B503EB4);
}

void *sub_23B526B74()
{
  return sub_23B526B90(&qword_2542F9CC8, (void (*)(unint64_t, _BYTE *))sub_23B5035B4, (void (*)(_BYTE *, uint64_t))sub_23B503EB4);
}

void *sub_23B526B90(uint64_t *a1, void (*a2)(unint64_t, _BYTE *), void (*a3)(_BYTE *, uint64_t))
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _BYTE v31[32];

  v5 = v3;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v6 = *v3;
  v7 = sub_23B56AC48();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v5 = v8;
    return result;
  }
  v28 = v5;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v29 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v25 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v16)
      goto LABEL_26;
    v26 = *(_QWORD *)(v29 + 8 * v25);
    ++v12;
    if (!v26)
    {
      v12 = v25 + 1;
      if (v25 + 1 >= v16)
        goto LABEL_26;
      v26 = *(_QWORD *)(v29 + 8 * v12);
      if (!v26)
        break;
    }
LABEL_25:
    v15 = (v26 - 1) & v26;
    v18 = __clz(__rbit64(v26)) + (v12 << 6);
LABEL_12:
    v19 = 16 * v18;
    v20 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v18);
    v21 = *v20;
    v22 = v20[1];
    v23 = 32 * v18;
    a2(*(_QWORD *)(v6 + 56) + 32 * v18, v31);
    v24 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
    *v24 = v21;
    v24[1] = v22;
    a3(v31, *(_QWORD *)(v8 + 56) + v23);
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v16)
  {
LABEL_26:
    result = (void *)swift_release();
    v5 = v28;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v29 + 8 * v27);
  if (v26)
  {
    v12 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v26 = *(_QWORD *)(v29 + 8 * v12);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_23B526D80()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t *v31;
  _OWORD v32[7];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F99E8);
  v2 = *v0;
  v3 = sub_23B56AC48();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v31 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      v9 = v28 + 1;
      if (v28 + 1 >= v13)
        goto LABEL_26;
      v29 = *(_QWORD *)(v6 + 8 * v9);
      if (!v29)
        break;
    }
LABEL_25:
    v12 = (v29 - 1) & v29;
    v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 112 * v15;
    sub_23B500C80((_QWORD *)(*(_QWORD *)(v2 + 56) + 112 * v15), (uint64_t)v32);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    v22 = (_OWORD *)(*(_QWORD *)(v4 + 56) + v20);
    v24 = v32[1];
    v23 = v32[2];
    *v22 = v32[0];
    v25 = v32[3];
    v26 = v32[4];
    v27 = v32[6];
    v22[5] = v32[5];
    v22[6] = v27;
    v22[3] = v25;
    v22[4] = v26;
    v22[1] = v24;
    v22[2] = v23;
    result = (void *)swift_bridgeObjectRetain();
  }
  v30 = v28 + 2;
  if (v30 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v31;
    goto LABEL_28;
  }
  v29 = *(_QWORD *)(v6 + 8 * v30);
  if (v29)
  {
    v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v9);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t os_activity(name:block:)(const char *a1, uint64_t a2, char a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  NSObject *v6;
  const char *v7;
  unsigned int v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  os_activity_scope_state_s state;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  if ((a3 & 1) != 0)
  {
    if ((unint64_t)a1 >> 32)
    {
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
    if (a1 >> 11 == 27)
      __break(1u);
    if (a1 >> 16 > 0x10)
    {
      __break(1u);
    }
    else if ((a1 & 0xFFFFFF80) == 0)
    {
      if (a1 > 0xFF)
      {
        __break(1u);
        goto LABEL_21;
      }
      v8 = ((_BYTE)a1 + 1);
LABEL_11:
      v19 = (v8 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << ((32 - (__clz(v8) & 0x38)) & 0x38));
      if (qword_2542FAB88 == -1)
      {
LABEL_12:
        v6 = qword_2542FAD68;
        v7 = (const char *)&v19;
        goto LABEL_13;
      }
LABEL_21:
      swift_once();
      goto LABEL_12;
    }
    v15 = (a1 & 0x3F) << 8;
    if (a1 >= 0x800)
    {
      v16 = (v15 | (a1 >> 6) & 0x3F) << 8;
      v17 = (((v16 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
      v18 = (v16 | (a1 >> 12)) + 8487393;
      if (a1 >> 16)
        v8 = v17;
      else
        v8 = v18;
    }
    else
    {
      v8 = (v15 | (a1 >> 6)) + 33217;
    }
    goto LABEL_11;
  }
  if (!a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (qword_2542FAB88 != -1)
LABEL_16:
    swift_once();
  v6 = qword_2542FAD68;
  v7 = a1;
LABEL_13:
  v9 = _os_activity_create(&dword_23B4F9000, v7, v6, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v9, &state);
  a4(v10, v11, v12, v13);
  os_activity_scope_leave(&state);
  return swift_unknownObjectRelease();
}

os_activity_t hackyCreateActivity(_:dso:)(char *description, int a2, char a3, void *dso)
{
  os_activity_t result;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  char descriptiona[8];

  if ((a3 & 1) == 0)
  {
    if (description)
    {
      if (dso)
      {
        if (qword_2542FAB88 == -1)
          return _os_activity_create(dso, description, (os_activity_t)qword_2542FAD68, OS_ACTIVITY_FLAG_DEFAULT);
LABEL_18:
        swift_once();
        return _os_activity_create(dso, description, (os_activity_t)qword_2542FAD68, OS_ACTIVITY_FLAG_DEFAULT);
      }
      goto LABEL_28;
    }
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if ((unint64_t)description >> 32)
    goto LABEL_17;
  if (description >> 11 == 27)
    goto LABEL_27;
  if (description >> 16 > 0x10)
  {
    __break(1u);
  }
  else if ((description & 0xFFFFFF80) == 0)
  {
    if (description <= 0xFF)
    {
      v7 = ((_BYTE)description + 1);
      goto LABEL_12;
    }
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v8 = (description & 0x3F) << 8;
  v9 = (v8 | (description >> 6)) + 33217;
  v10 = (v8 | (description >> 6) & 0x3F) << 8;
  v11 = (((v10 | (description >> 12) & 0x3F) << 8) | (description >> 18)) - 2122219023;
  v12 = (v10 | (description >> 12)) + 8487393;
  if (description >> 16)
    v7 = v11;
  else
    v7 = v12;
  if (description < 0x800)
    v7 = v9;
LABEL_12:
  *(_QWORD *)descriptiona = (v7 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << ((32 - (__clz(v7) & 0x38)) & 0x38));
  if (!dso)
  {
LABEL_28:
    result = (os_activity_t)sub_23B56AC24();
    __break(1u);
    return result;
  }
  if (qword_2542FAB88 != -1)
    swift_once();
  return _os_activity_create(dso, descriptiona, (os_activity_t)qword_2542FAD68, OS_ACTIVITY_FLAG_DEFAULT);
}

uint64_t os_activity(name:block:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 48) = a4;
  *(_QWORD *)(v5 + 56) = a5;
  *(_BYTE *)(v5 + 88) = a3;
  *(_QWORD *)(v5 + 40) = a1;
  return swift_task_switch();
}

uint64_t sub_23B5273E0()
{
  uint64_t v0;
  char v1;
  const char *v2;
  unint64_t v3;
  unsigned int v4;
  NSObject *v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  *(_QWORD *)(v0 + 16) = 0;
  v1 = *(_BYTE *)(v0 + 88);
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(swift_task_alloc() + 16) = &dword_23B4F9000;
  v2 = *(const char **)(v0 + 40);
  if ((v1 & 1) == 0)
  {
    if (v2)
      goto LABEL_11;
    __break(1u);
  }
  v3 = (unint64_t)v2 >> 32;
  if ((unint64_t)v2 >> 32)
  {
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    v10 = (v2 & 0x3F) << 8;
    v11 = (v10 | (v2 >> 6)) + 33217;
    v12 = (v10 | (v2 >> 6) & 0x3F) << 8;
    v13 = (((v12 | (v2 >> 12) & 0x3F) << 8) | (v2 >> 18)) - 2122219023;
    v14 = (v12 | (v2 >> 12)) + 8487393;
    if ((_DWORD)v3)
      v4 = v13;
    else
      v4 = v14;
    if (v2 < 0x800)
      v4 = v11;
    goto LABEL_10;
  }
  if (v2 >> 11 == 27)
    goto LABEL_23;
  LODWORD(v3) = v2 >> 16;
  if (v2 >> 16 > 0x10)
    goto LABEL_15;
  if ((v2 & 0xFFFFFF80) != 0)
    goto LABEL_16;
  if (v2 > 0xFF)
  {
    __break(1u);
LABEL_23:
    __break(1u);
  }
  v4 = ((_BYTE)v2 + 1);
LABEL_10:
  v2 = (const char *)(v0 + 32);
  *(_QWORD *)(v0 + 32) = (v4 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << ((32 - (__clz(v4) & 0x38)) & 0x38));
LABEL_11:
  if (qword_2542FAB88 != -1)
    swift_once();
  v5 = _os_activity_create(&dword_23B4F9000, v2, (os_activity_t)qword_2542FAD68, OS_ACTIVITY_FLAG_DEFAULT);
  *(_QWORD *)(v0 + 64) = v5;
  v6 = *(int **)(v0 + 48);
  swift_task_dealloc();
  os_activity_scope_enter(v5, (os_activity_scope_state_t)(v0 + 16));
  v7 = *v6;
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v8;
  *v8 = v0;
  v8[1] = sub_23B5275E4;
  return ((uint64_t (*)(void))((char *)v6 + v7))();
}

uint64_t sub_23B5275E4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B52768C()
{
  uint64_t v0;

  os_activity_scope_leave((os_activity_scope_state_t)(v0 + 16));
  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B5276F8()
{
  uint64_t v0;

  os_activity_scope_leave((os_activity_scope_state_t)(v0 + 16));
  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B527764()
{
  qword_2542FAD68 = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_os_activity_current");
  return swift_unknownObjectRetain();
}

uint64_t sub_23B52778C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_23B56A060();
  __swift_allocate_value_buffer(v0, qword_256A33B50);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_256A33B50);
  if (qword_256A2B9C8 != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)qword_256A33B68);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t XPCAlarm.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t XPCAlarm.criteria.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for XPCAlarm(0);
  return sub_23B5297B8(v1 + *(int *)(v3 + 20), a1, type metadata accessor for XPCAlarm.Criteria);
}

uint64_t type metadata accessor for XPCAlarm(uint64_t a1)
{
  return sub_23B504D18(a1, (uint64_t *)&unk_256A2C058);
}

uint64_t type metadata accessor for XPCAlarm.Criteria(uint64_t a1)
{
  return sub_23B504D18(a1, (uint64_t *)&unk_256A2C068);
}

uint64_t XPCAlarm.init(identifier:criteria:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t sub_23B5278C8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[4];
  v2 = v0[5];
  v3 = (_QWORD *)v0[2];
  *v3 = v0[3];
  v3[1] = v1;
  v4 = type metadata accessor for XPCAlarm(0);
  sub_23B5297B8(v2, (uint64_t)v3 + *(int *)(v4 + 20), type metadata accessor for XPCAlarm.Criteria);
  v5 = (_QWORD *)swift_task_alloc();
  v0[6] = v5;
  *v5 = v0;
  v5[1] = sub_23B52793C;
  return sub_23B5279C8();
}

uint64_t sub_23B52793C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B527990()
{
  uint64_t v0;

  sub_23B5297FC(*(_QWORD *)(v0 + 40), type metadata accessor for XPCAlarm.Criteria);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B5279C8()
{
  uint64_t v0;
  _QWORD *v1;

  v1[3] = v0;
  v1[4] = type metadata accessor for XPCAlarm(0);
  v1[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B527A24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;

  _s10FindMyBase8XPCAlarmV10unregister10identifierySS_tFZ_0(**(_QWORD **)(v0 + 24), *(_QWORD *)(*(_QWORD *)(v0 + 24) + 8));
  if (qword_256A2B9C0 != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = sub_23B56A060();
  __swift_project_value_buffer(v3, (uint64_t)qword_256A33B50);
  sub_23B5297B8(v2, v1, type metadata accessor for XPCAlarm);
  v4 = sub_23B56A048();
  v5 = sub_23B56A84C();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 40);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v9 = v13;
    *(_DWORD *)v8 = 136446210;
    v10 = XPCAlarm.description.getter();
    *(_QWORD *)(v0 + 16) = sub_23B5034E4(v10, v11, &v13);
    sub_23B56A918();
    swift_bridgeObjectRelease();
    sub_23B5297FC(v7, type metadata accessor for XPCAlarm);
    _os_log_impl(&dword_23B4F9000, v4, v5, "Registering %{public}s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v9, -1, -1);
    MEMORY[0x23B867948](v8, -1, -1);
  }
  else
  {
    sub_23B5297FC(*(_QWORD *)(v0 + 40), type metadata accessor for XPCAlarm);
  }

  sub_23B527D84();
  sub_23B56A330();
  xpc_set_event();
  swift_release();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t XPCAlarm.description.getter()
{
  sub_23B56AA68();
  swift_bridgeObjectRelease();
  type metadata accessor for XPCAlarm(0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256A2BFF0);
  sub_23B56A300();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  swift_bridgeObjectRetain();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  XPCAlarm.Criteria.description.getter();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  return 60;
}

uint64_t sub_23B527D84()
{
  uint64_t v0;
  xpc_object_t v1;
  uint64_t result;
  double v3;
  double v4;
  int64_t v5;
  uint64_t v6;

  v1 = xpc_dictionary_create(0, 0, 0);
  result = sub_23B569F04();
  v4 = ceil(v3);
  if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v5 = 1000000000 * (uint64_t)v4;
  if ((unsigned __int128)((uint64_t)v4 * (__int128)1000000000) >> 64 != v5 >> 63)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  xpc_dictionary_set_date(v1, "Date", v5);
  v6 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for XPCAlarm.Criteria(0) + 20));
  if ((v6 & 2) != 0)
    xpc_dictionary_set_BOOL(v1, "ShouldWake", 0);
  if ((v6 & 4) != 0)
    xpc_dictionary_set_BOOL(v1, "UserVisible", 1);
  return (uint64_t)v1;
}

uint64_t XPCAlarm.Criteria.Options.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

FindMyBase::XPCAlarm::Criteria::Options __swiftcall XPCAlarm.Criteria.Options.init(rawValue:)(FindMyBase::XPCAlarm::Criteria::Options rawValue)
{
  FindMyBase::XPCAlarm::Criteria::Options *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static XPCAlarm.Criteria.Options.shouldNotWake.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static XPCAlarm.Criteria.Options.userVisible.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

uint64_t XPCAlarm.Criteria.Options.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;

  v1 = *v0;
  if ((*v0 & 2) == 0)
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if ((v1 & 4) == 0)
      goto LABEL_12;
    goto LABEL_7;
  }
  v2 = sub_23B50B0C8(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v4 = v2[2];
  v3 = v2[3];
  if (v4 >= v3 >> 1)
    v2 = sub_23B50B0C8((_QWORD *)(v3 > 1), v4 + 1, 1, v2);
  v2[2] = v4 + 1;
  v5 = (char *)&v2[2 * v4];
  strcpy(v5 + 32, ".shouldNotWake");
  v5[47] = -18;
  if ((v1 & 4) != 0)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = sub_23B50B0C8(0, v2[2] + 1, 1, v2);
    v7 = v2[2];
    v6 = v2[3];
    if (v7 >= v6 >> 1)
      v2 = sub_23B50B0C8((_QWORD *)(v6 > 1), v7 + 1, 1, v2);
    v2[2] = v7 + 1;
    v8 = (char *)&v2[2 * v7];
    strcpy(v8 + 32, ".userVisible");
    v8[45] = 0;
    *((_WORD *)v8 + 23) = -5120;
  }
LABEL_12:
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9B58);
  sub_23B506D60();
  sub_23B56A204();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  return 91;
}

uint64_t sub_23B528050()
{
  sub_23B528C5C();
  return sub_23B56A504();
}

uint64_t sub_23B5280AC()
{
  sub_23B528C5C();
  return sub_23B56A4E0();
}

uint64_t XPCAlarm.Criteria.init(date:options:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = *a2;
  v6 = sub_23B569F40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a3, a1, v6);
  result = type metadata accessor for XPCAlarm.Criteria(0);
  *(_QWORD *)(a3 + *(int *)(result + 20)) = v5;
  return result;
}

uint64_t XPCAlarm.Criteria.description.getter()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  id v5;

  sub_23B56AA68();
  swift_bridgeObjectRelease();
  type metadata accessor for XPCAlarm.Criteria(0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256A2BFF8);
  sub_23B56A300();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  if (qword_256A2B9F8 != -1)
    swift_once();
  v0 = (void *)qword_256A2C790;
  v1 = (void *)sub_23B569ED4();
  v2 = objc_msgSend(v0, sel_stringFromDate_, v1);

  sub_23B56A288();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  if (qword_2542F98C0 != -1)
    swift_once();
  v3 = (void *)qword_2542F98F0;
  v4 = (void *)sub_23B569ED4();
  v5 = objc_msgSend(v3, sel_stringFromDate_, v4);

  sub_23B56A288();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  XPCAlarm.Criteria.Options.description.getter();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  return 60;
}

BOOL static XPCAlarm.Criteria.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if ((sub_23B569F10() & 1) == 0)
    return 0;
  v4 = type metadata accessor for XPCAlarm.Criteria(0);
  return *(_QWORD *)(a1 + *(int *)(v4 + 20)) == *(_QWORD *)(a2 + *(int *)(v4 + 20));
}

uint64_t sub_23B5283E4()
{
  _BYTE *v0;

  if (*v0)
    return 0x736E6F6974706FLL;
  else
    return 1702125924;
}

uint64_t sub_23B528418@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23B5296D8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23B52843C()
{
  return 0;
}

void sub_23B528448(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_23B528454()
{
  sub_23B528B4C();
  return sub_23B56AF78();
}

uint64_t sub_23B52847C()
{
  sub_23B528B4C();
  return sub_23B56AF84();
}

uint64_t XPCAlarm.Criteria.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  uint64_t v11;
  char v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2C000);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23B528B4C();
  sub_23B56AEC4();
  v12 = 0;
  sub_23B569F40();
  sub_23B528BD4(&qword_256A2C010, MEMORY[0x24BDCE920]);
  sub_23B56AD14();
  if (!v2)
  {
    v11 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for XPCAlarm.Criteria(0) + 20));
    v10[15] = 1;
    sub_23B528B90();
    sub_23B56AD14();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t XPCAlarm.Criteria.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;

  v19 = a2;
  v23 = sub_23B569F40();
  v20 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v21 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2C020);
  v5 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for XPCAlarm.Criteria(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23B528B4C();
  sub_23B56AEAC();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v17 = a1;
  v18 = v5;
  v11 = (uint64_t)v10;
  v12 = v20;
  v26 = 0;
  sub_23B528BD4(&qword_256A2C028, MEMORY[0x24BDCE960]);
  v14 = v21;
  v13 = v22;
  v15 = v23;
  sub_23B56ACCC();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v11, v14, v15);
  v25 = 1;
  sub_23B528C14();
  sub_23B56ACCC();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v13);
  *(_QWORD *)(v11 + *(int *)(v8 + 20)) = v24;
  sub_23B5297B8(v11, v19, type metadata accessor for XPCAlarm.Criteria);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return sub_23B5297FC(v11, type metadata accessor for XPCAlarm.Criteria);
}

uint64_t sub_23B528894@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return XPCAlarm.Criteria.init(from:)(a1, a2);
}

uint64_t sub_23B5288A8(_QWORD *a1)
{
  return XPCAlarm.Criteria.encode(to:)(a1);
}

BOOL sub_23B5288BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (sub_23B569F10() & 1) != 0 && *(_QWORD *)(a1 + *(int *)(a3 + 20)) == *(_QWORD *)(a2 + *(int *)(a3 + 20));
}

uint64_t sub_23B528910()
{
  uint64_t v0;

  v0 = sub_23B56A060();
  __swift_allocate_value_buffer(v0, qword_256A33B68);
  __swift_project_value_buffer(v0, (uint64_t)qword_256A33B68);
  return sub_23B56A054();
}

uint64_t _s10FindMyBase8XPCAlarmV10unregister10identifierySS_tFZ_0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v10;

  if (qword_256A2B9C0 != -1)
    swift_once();
  v4 = sub_23B56A060();
  __swift_project_value_buffer(v4, (uint64_t)qword_256A33B50);
  swift_bridgeObjectRetain_n();
  v5 = sub_23B56A048();
  v6 = sub_23B56A84C();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v10 = v8;
    *(_DWORD *)v7 = 136446210;
    swift_bridgeObjectRetain();
    sub_23B5034E4(a1, a2, &v10);
    sub_23B56A918();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_23B4F9000, v5, v6, "Unregistering %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v8, -1, -1);
    MEMORY[0x23B867948](v7, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_23B56A330();
  xpc_set_event();
  return swift_release();
}

unint64_t sub_23B528B4C()
{
  unint64_t result;

  result = qword_256A2C008;
  if (!qword_256A2C008)
  {
    result = MEMORY[0x23B867894](&unk_23B5701CC, &type metadata for XPCAlarm.Criteria.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2C008);
  }
  return result;
}

unint64_t sub_23B528B90()
{
  unint64_t result;

  result = qword_256A2C018;
  if (!qword_256A2C018)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for XPCAlarm.Criteria.Options, &type metadata for XPCAlarm.Criteria.Options);
    atomic_store(result, (unint64_t *)&qword_256A2C018);
  }
  return result;
}

uint64_t sub_23B528BD4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_23B569F40();
    result = MEMORY[0x23B867894](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23B528C14()
{
  unint64_t result;

  result = qword_256A2C030;
  if (!qword_256A2C030)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for XPCAlarm.Criteria.Options, &type metadata for XPCAlarm.Criteria.Options);
    atomic_store(result, (unint64_t *)&qword_256A2C030);
  }
  return result;
}

unint64_t sub_23B528C5C()
{
  unint64_t result;

  result = qword_256A2C038;
  if (!qword_256A2C038)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for XPCAlarm.Criteria.Options, &type metadata for XPCAlarm.Criteria.Options);
    atomic_store(result, (unint64_t *)&qword_256A2C038);
  }
  return result;
}

unint64_t sub_23B528CA4()
{
  unint64_t result;

  result = qword_256A2C040;
  if (!qword_256A2C040)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for XPCAlarm.Criteria.Options, &type metadata for XPCAlarm.Criteria.Options);
    atomic_store(result, (unint64_t *)&qword_256A2C040);
  }
  return result;
}

unint64_t sub_23B528CEC()
{
  unint64_t result;

  result = qword_256A2C048;
  if (!qword_256A2C048)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for XPCAlarm.Criteria.Options, &type metadata for XPCAlarm.Criteria.Options);
    atomic_store(result, (unint64_t *)&qword_256A2C048);
  }
  return result;
}

unint64_t sub_23B528D34()
{
  unint64_t result;

  result = qword_256A2C050;
  if (!qword_256A2C050)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for XPCAlarm.Criteria.Options, &type metadata for XPCAlarm.Criteria.Options);
    atomic_store(result, (unint64_t *)&qword_256A2C050);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for XPCAlarm(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = sub_23B569F40();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
    v11 = type metadata accessor for XPCAlarm.Criteria(0);
    *(_QWORD *)&v7[*(int *)(v11 + 20)] = *(_QWORD *)&v8[*(int *)(v11 + 20)];
  }
  return v3;
}

uint64_t destroy for XPCAlarm(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_23B569F40();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for XPCAlarm(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_23B569F40();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  v10 = type metadata accessor for XPCAlarm.Criteria(0);
  *(_QWORD *)&v6[*(int *)(v10 + 20)] = *(_QWORD *)&v7[*(int *)(v10 + 20)];
  return a1;
}

_QWORD *assignWithCopy for XPCAlarm(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23B569F40();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = type metadata accessor for XPCAlarm.Criteria(0);
  *(_QWORD *)&v7[*(int *)(v10 + 20)] = *(_QWORD *)&v8[*(int *)(v10 + 20)];
  return a1;
}

_OWORD *initializeWithTake for XPCAlarm(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_23B569F40();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  v8 = type metadata accessor for XPCAlarm.Criteria(0);
  *(_QWORD *)&v5[*(int *)(v8 + 20)] = *(_QWORD *)&v6[*(int *)(v8 + 20)];
  return a1;
}

_QWORD *assignWithTake for XPCAlarm(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_23B569F40();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = type metadata accessor for XPCAlarm.Criteria(0);
  *(_QWORD *)&v8[*(int *)(v11 + 20)] = *(_QWORD *)&v9[*(int *)(v11 + 20)];
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCAlarm()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23B529080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for XPCAlarm.Criteria(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for XPCAlarm()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23B529108(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for XPCAlarm.Criteria(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_23B52917C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for XPCAlarm.Criteria(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for XPCAlarm.Criteria(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23B569F40();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t destroy for XPCAlarm.Criteria(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23B569F40();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for XPCAlarm.Criteria(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_23B569F40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for XPCAlarm.Criteria(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_23B569F40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for XPCAlarm.Criteria(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_23B569F40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for XPCAlarm.Criteria(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_23B569F40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCAlarm.Criteria()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23B529428(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23B569F40();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for XPCAlarm.Criteria()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23B529470(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23B569F40();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_23B5294B0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23B569F40();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCAlarm.Criteria.Options()
{
  return &type metadata for XPCAlarm.Criteria.Options;
}

uint64_t storeEnumTagSinglePayload for XPCAlarm.Criteria.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23B529580 + 4 * byte_23B56FDE5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23B5295B4 + 4 * byte_23B56FDE0[v4]))();
}

uint64_t sub_23B5295B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23B5295BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23B5295C4);
  return result;
}

uint64_t sub_23B5295D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23B5295D8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23B5295DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23B5295E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCAlarm.Criteria.CodingKeys()
{
  return &type metadata for XPCAlarm.Criteria.CodingKeys;
}

unint64_t sub_23B529604()
{
  unint64_t result;

  result = qword_256A2C078;
  if (!qword_256A2C078)
  {
    result = MEMORY[0x23B867894](&unk_23B5701A4, &type metadata for XPCAlarm.Criteria.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2C078);
  }
  return result;
}

unint64_t sub_23B52964C()
{
  unint64_t result;

  result = qword_256A2C080;
  if (!qword_256A2C080)
  {
    result = MEMORY[0x23B867894](&unk_23B570114, &type metadata for XPCAlarm.Criteria.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2C080);
  }
  return result;
}

unint64_t sub_23B529694()
{
  unint64_t result;

  result = qword_256A2C088;
  if (!qword_256A2C088)
  {
    result = MEMORY[0x23B867894](&unk_23B57013C, &type metadata for XPCAlarm.Criteria.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2C088);
  }
  return result;
}

uint64_t sub_23B5296D8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1702125924 && a2 == 0xE400000000000000;
  if (v2 || (sub_23B56AD98() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23B56AD98();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23B5297B8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_23B5297FC(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t static TimeZone.gmt.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256A2C090);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23B569FDC();
  v5 = sub_23B56A000();
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a1, v4, v5);
  __break(1u);
  return result;
}

uint64_t static Transaction.current.getter()
{
  return sub_23B4FBCE4(&qword_2542FAE10);
}

uint64_t sub_23B529910(uint64_t a1)
{
  return sub_23B529954(a1, &qword_2542FAE08, &qword_2542FAE20);
}

uint64_t static Transaction.$current.getter()
{
  return sub_23B5299BC(&qword_2542FAE10);
}

uint64_t sub_23B529940(uint64_t a1)
{
  return sub_23B529954(a1, &qword_2542FAD58, &qword_2542FAE28);
}

uint64_t sub_23B529954(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(a2);
  swift_allocObject();
  result = sub_23B56AF90();
  *a3 = result;
  return result;
}

uint64_t static Transaction.$currentNSXPCConnection.getter()
{
  return sub_23B5299BC(&qword_2542FAE18);
}

uint64_t sub_23B5299BC(_QWORD *a1)
{
  if (*a1 != -1)
    swift_once();
  return swift_retain();
}

uint64_t sub_23B5299F4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_23B4FACE0;
  return v7();
}

uint64_t sub_23B529A48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[6] = a6;
  v7[7] = a7;
  v7[4] = a4;
  v7[5] = a5;
  v7[3] = a1;
  return swift_task_switch();
}

uint64_t sub_23B529A68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  _QWORD *v4;

  if (qword_2542FAE10 != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 32);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v2;
  v3 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v4;
  *v4 = v0;
  v4[1] = sub_23B529B70;
  return sub_23B56AFA8();
}

uint64_t sub_23B529B70()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23B529BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  return swift_task_switch();
}

uint64_t sub_23B529BE0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  if (qword_2542FAE18 != -1)
    swift_once();
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 32);
  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 40);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v2;
  *v2 = v0;
  v2[1] = sub_23B529CD0;
  return sub_23B56AFA8();
}

uint64_t sub_23B529CD0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23B529D24(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v3;
  *v3 = v2;
  v3[1] = sub_23B51D31C;
  return v5();
}

uint64_t static Transaction.named<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 + 48) = a6;
  *(_QWORD *)(v7 + 56) = v6;
  *(_BYTE *)(v7 + 88) = a4;
  *(_QWORD *)(v7 + 32) = a3;
  *(_QWORD *)(v7 + 40) = a5;
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  return swift_task_switch();
}

uint64_t static Transaction.named<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v8 + 56) = a7;
  *(_QWORD *)(v8 + 64) = v7;
  *(_QWORD *)(v8 + 40) = a5;
  *(_QWORD *)(v8 + 48) = a6;
  *(_BYTE *)(v8 + 96) = a4;
  *(_QWORD *)(v8 + 24) = a2;
  *(_QWORD *)(v8 + 32) = a3;
  *(_QWORD *)(v8 + 16) = a1;
  return swift_task_switch();
}

uint64_t sub_23B529E58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  __int128 v8;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v2;
  v3 = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v4;
  *(_QWORD *)v4 = v0;
  *(_QWORD *)(v4 + 8) = sub_23B529EFC;
  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(_BYTE *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 16);
  v8 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v4 + 48) = v2;
  *(_QWORD *)(v4 + 56) = v5;
  *(_QWORD *)(v4 + 40) = &unk_256A2C0B8;
  *(_BYTE *)(v4 + 88) = v6;
  *(_OWORD *)(v4 + 24) = v8;
  *(_QWORD *)(v4 + 16) = v7;
  return swift_task_switch();
}

uint64_t sub_23B529EFC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 88) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23B529F70()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B529FA4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v7 = (uint64_t (*)(uint64_t))((char *)a3 + *a3);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v5;
  *v5 = v3;
  v5[1] = sub_23B4FAC98;
  return v7(a1);
}

uint64_t Transaction.deinit()
{
  uint64_t v0;

  sub_23B5000C8();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t Transaction.description.getter()
{
  swift_bridgeObjectRetain();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  return 0x3A4E58545BLL;
}

uint64_t sub_23B52A0AC()
{
  swift_bridgeObjectRetain();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  return 0x3A4E58545BLL;
}

uint64_t sub_23B52A124()
{
  uint64_t v0;

  v0 = sub_23B56A060();
  __swift_allocate_value_buffer(v0, qword_2542FC470);
  __swift_project_value_buffer(v0, (uint64_t)qword_2542FC470);
  return sub_23B56A054();
}

uint64_t sub_23B52A1A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v4 = *(int **)(v1 + 24);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23B4FAC98;
  v8 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v6 = (_QWORD *)swift_task_alloc();
  v5[2] = v6;
  *v6 = v5;
  v6[1] = sub_23B4FAC98;
  return v8(a1);
}

uint64_t method lookup function for Transaction()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_23B52A234()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23B52A270(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = swift_task_alloc();
  v7 = *(_OWORD *)(v1 + 48);
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = sub_23B4FAC98;
  *(_OWORD *)(v6 + 48) = v7;
  *(_QWORD *)(v6 + 32) = v4;
  *(_QWORD *)(v6 + 40) = v5;
  *(_QWORD *)(v6 + 24) = a1;
  return swift_task_switch();
}

uint64_t sub_23B52A2E8()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23B52A314()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v2 = *(int **)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_23B4FACE0;
  v6 = (uint64_t (*)(void))((char *)v2 + *v2);
  v4 = (_QWORD *)swift_task_alloc();
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_23B4FACE0;
  return v6();
}

uint64_t sub_23B52A390(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = swift_task_alloc();
  v6 = *(_OWORD *)(v1 + 24);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = sub_23B4FACE0;
  *(_OWORD *)(v5 + 40) = v6;
  *(_QWORD *)(v5 + 24) = a1;
  *(_QWORD *)(v5 + 32) = v4;
  return swift_task_switch();
}

uint64_t sub_23B52A404()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v2 = *(int **)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_23B4FACE0;
  v6 = (uint64_t (*)(void))((char *)v2 + *v2);
  v4 = (_QWORD *)swift_task_alloc();
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_23B51D31C;
  return v6();
}

uint64_t dispatch thunk of IsolatedCustomStringConvertible.isolatedDescription.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 16) + *(_QWORD *)(a2 + 16));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23B52A4EC;
  return v7(a1, a2);
}

uint64_t sub_23B52A4EC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t BinaryDecoder.decode<A>(_:from:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  void (*v10)(_QWORD *, uint64_t, uint64_t);
  _QWORD v12[5];

  type metadata accessor for BufferedData();
  v9 = (_QWORD *)swift_allocObject();
  v9[3] = a3;
  v9[4] = 0;
  v9[2] = a2;
  sub_23B502434(a2, a3);
  v12[3] = &type metadata for _BinaryDecoder;
  v12[4] = &off_250C7A8D0;
  v12[0] = v9;
  v12[1] = 0;
  v10 = *(void (**)(_QWORD *, uint64_t, uint64_t))(a5 + 8);
  swift_retain();
  v10(v12, a4, a5);
  return swift_release();
}

uint64_t BinaryDecoder.decode<A>(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v6)(_QWORD *, uint64_t, uint64_t);
  _QWORD v8[5];

  v8[0] = a2;
  v8[1] = 0;
  v8[3] = &type metadata for _BinaryDecoder;
  v8[4] = &off_250C7A8D0;
  v6 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(a4 + 8);
  swift_retain();
  return v6(v8, a3, a4);
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void (*v11)(_QWORD *, uint64_t, uint64_t);
  _QWORD v13[5];

  swift_bridgeObjectRetain();
  v7 = sub_23B50D1E4(a2);
  v9 = v8;
  swift_bridgeObjectRelease();
  type metadata accessor for BufferedData();
  v10 = (_QWORD *)swift_allocObject();
  v10[3] = v9;
  v10[4] = 0;
  v10[2] = v7;
  v13[3] = &type metadata for _BinaryDecoder;
  v13[4] = &off_250C7A8D0;
  v13[0] = v10;
  v13[1] = 0;
  v11 = *(void (**)(_QWORD *, uint64_t, uint64_t))(a4 + 8);
  swift_retain();
  v11(v13, a3, a4);
  return swift_release();
}

uint64_t sub_23B52A758@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v1;
  v4 = type metadata accessor for BinaryDecodingContainer();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v3;
  a1[3] = v4;
  a1[4] = (uint64_t)&off_250C7AF60;
  *a1 = v5;
  return swift_retain();
}

uint64_t sub_23B52A7B0()
{
  uint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_23B52A7CC
                            + *((int *)qword_23B52A818 + (*(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) >> 62))))();
}

BOOL sub_23B52A7DC@<W0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return a1 == BYTE6(v1);
}

uint64_t sub_23B52A828()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;

  v2 = v1;
  v3 = sub_23B56ABD0() / 8;
  v4 = *(_QWORD *)(v0 + 16);
  v5 = *(_QWORD *)(v4 + 32);
  swift_retain();
  sub_23B5384FC(v3, v5);
  if (!v2)
  {
    v8 = *(_QWORD *)(v4 + 32);
    v9 = __OFADD__(v8, v3);
    v10 = v8 + v3;
    if (!v9)
    {
      v11 = v6;
      *(_QWORD *)(v4 + 32) = v10;
      swift_release();
      __asm { BR              X10 }
    }
    __break(1u);
    JUMPOUT(0x23B52A9E4);
  }
  return swift_release();
}

uint64_t sub_23B52A9FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  sub_23B56ADD4();
  sub_23B56AD80();
  v12 = a1;
  v13 = a2;
  return sub_23B50A6C0(a4, (uint64_t)sub_23B52B2D0, (uint64_t)v11, a3, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v9);
}

void *sub_23B52AB38(void *result, uint64_t a2, void *__src, uint64_t a4)
{
  uint64_t v4;

  if (__src)
    v4 = a4 - (_QWORD)__src;
  else
    v4 = 0;
  if (!result)
  {
    if (v4 <= 0)
      return result;
LABEL_10:
    result = (void *)sub_23B56AC6C();
    __break(1u);
    return result;
  }
  if (a2 - (uint64_t)result < v4)
    goto LABEL_10;
  if (__src)
    return memmove(result, __src, a4 - (_QWORD)__src);
  return result;
}

void sub_23B52ABC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;

  v3 = v2;
  v5 = sub_23B56A2E8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  swift_retain();
  sub_23B5384FC(0x7FFFFFFFFFFFFFFFLL, v10);
  if (v3)
  {
    swift_release();
  }
  else
  {
    v13 = *(_QWORD *)(v9 + 32);
    v14 = __OFADD__(v13, 0x7FFFFFFFFFFFFFFFLL);
    v15 = v13 + 0x7FFFFFFFFFFFFFFFLL;
    if (v14)
    {
      __break(1u);
    }
    else
    {
      v16 = v11;
      v17 = v12;
      *(_QWORD *)(v9 + 32) = v15;
      swift_release();
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
      sub_23B56A2A0();
      if (!v18)
      {
        sub_23B52B274();
        swift_allocError();
        *v19 = 0;
        swift_willThrow();
      }
      sub_23B504944(v16, v17);
    }
  }
}

uint64_t sub_23B52AD24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t (*v7)(_QWORD *, uint64_t, uint64_t);
  _QWORD v9[4];

  v6 = *(_QWORD *)(v3 + 16);
  v9[3] = &type metadata for _BinaryDecoder;
  v9[0] = v6;
  v7 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(a3 + 8);
  swift_retain();
  swift_retain();
  return v7(v9, a2, a3);
}

uint64_t sub_23B52ADA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v4 + 32);
  swift_retain();
  sub_23B5384FC(a1, v5);
  v7 = v6;
  v9 = v8;
  if (!v2)
  {
    v10 = *(_QWORD *)(v4 + 32);
    v11 = __OFADD__(v10, a1);
    v12 = v10 + a1;
    if (!v11)
    {
      *(_QWORD *)(v4 + 32) = v12;
      swift_release();
      __asm { BR              X10 }
    }
    __break(1u);
    JUMPOUT(0x23B52AEC4);
  }
  swift_release();
  return v7;
}

void sub_23B52AEDC()
{
  __asm { BR              X10 }
}

uint64_t sub_23B52AF20()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (BYTE6(v1) < v2)
  {
    __break(1u);
    JUMPOUT(0x23B52AFB8);
  }
  swift_retain();
  v3 = sub_23B569E68();
  sub_23B504944(v0, v1);
  swift_release();
  return v3;
}

uint64_t sub_23B52AFD0()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_23B52AFF4()
{
  return sub_23B52A7B0() & 1;
}

void sub_23B52B018(uint64_t a1)
{
  sub_23B52ABC4(a1);
}

uint64_t sub_23B52B038()
{
  return sub_23B52A828();
}

uint64_t sub_23B52B058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23B52AD24(a1, a2, a3);
}

uint64_t sub_23B52B078(uint64_t a1)
{
  return sub_23B52ADA4(a1);
}

void sub_23B52B098()
{
  sub_23B52AEDC();
}

ValueMetadata *type metadata accessor for BinaryDecoder()
{
  return &type metadata for BinaryDecoder;
}

uint64_t type metadata accessor for BinaryDecodingContainer()
{
  return objc_opt_self();
}

uint64_t destroy for _BinaryDecoder()
{
  swift_release();
  return swift_release();
}

_QWORD *_s10FindMyBase14_BinaryDecoderVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for _BinaryDecoder(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for _BinaryDecoder(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for _BinaryDecoder(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _BinaryDecoder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _BinaryDecoder()
{
  return &type metadata for _BinaryDecoder;
}

unint64_t sub_23B52B274()
{
  unint64_t result;

  result = qword_256A2C110;
  if (!qword_256A2C110)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for BinaryDecodingError, &type metadata for BinaryDecodingError);
    atomic_store(result, (unint64_t *)&qword_256A2C110);
  }
  return result;
}

uint64_t sub_23B52B2B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_23B52A9FC(a1, a2, *(_QWORD *)(v3 + 16), a3);
}

void *sub_23B52B2D0(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_23B52AB38(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t Bit.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t Bit.description.getter()
{
  _BYTE *v0;

  if (*v0)
    return 49;
  else
    return 48;
}

FindMyBase::Bit_optional __swiftcall Bit.init(rawValue:)(FindMyBase::Bit_optional rawValue)
{
  char *v1;
  char v2;

  if (rawValue.value == FindMyBase_Bit_one)
    v2 = 1;
  else
    v2 = 2;
  if (rawValue.value == FindMyBase_Bit_zero)
    v2 = 0;
  *v1 = v2;
  return rawValue;
}

unint64_t sub_23B52B330()
{
  unint64_t result;

  result = qword_256A2C118;
  if (!qword_256A2C118)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for Bit, &type metadata for Bit);
    atomic_store(result, (unint64_t *)&qword_256A2C118);
  }
  return result;
}

uint64_t sub_23B52B374()
{
  sub_23B56AE64();
  sub_23B56AE7C();
  return sub_23B56AE88();
}

uint64_t sub_23B52B3B8()
{
  return sub_23B56AE7C();
}

uint64_t sub_23B52B3E0()
{
  sub_23B56AE64();
  sub_23B56AE7C();
  return sub_23B56AE88();
}

_BYTE *sub_23B52B420@<X0>(_BYTE *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

void sub_23B52B440(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t sub_23B52B44C()
{
  _BYTE *v0;

  if (*v0)
    return 49;
  else
    return 48;
}

uint64_t storeEnumTagSinglePayload for Bit(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23B52B4B0 + 4 * byte_23B57033D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23B52B4E4 + 4 * byte_23B570338[v4]))();
}

uint64_t sub_23B52B4E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23B52B4EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23B52B4F4);
  return result;
}

uint64_t sub_23B52B500(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23B52B508);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23B52B50C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23B52B514(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Bit()
{
  return &type metadata for Bit;
}

uint64_t MultiAwait.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  swift_defaultActor_initialize();
  *(_QWORD *)(v0 + 112) = MEMORY[0x24BEE4B00];
  return v0;
}

uint64_t MultiAwait.init()()
{
  uint64_t v0;

  swift_defaultActor_initialize();
  *(_QWORD *)(v0 + 112) = MEMORY[0x24BEE4B00];
  return v0;
}

uint64_t sub_23B52B598()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_23B52B5B0()
{
  uint64_t v0;
  _QWORD *v1;

  sub_23B52B68C();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = sub_23B52B638;
  return sub_23B56AD50();
}

uint64_t sub_23B52B638()
{
  swift_task_dealloc();
  return swift_task_switch();
}

unint64_t sub_23B52B68C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256A2C128;
  if (!qword_256A2C128)
  {
    v1 = type metadata accessor for MultiAwait();
    result = MEMORY[0x23B867894](&protocol conformance descriptor for MultiAwait, v1);
    atomic_store(result, (unint64_t *)&qword_256A2C128);
  }
  return result;
}

uint64_t sub_23B52B6D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9CE0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_23B569FA0();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23B569F94();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA40);
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v4, a1, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v8);
  swift_beginAccess();
  sub_23B5108D8((uint64_t)v4, (uint64_t)v7);
  return swift_endAccess();
}

uint64_t sub_23B52B7EC(uint64_t a1)
{
  return sub_23B52B6D0(a1);
}

uint64_t MultiAwait.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t MultiAwait.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t MultiAwait.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t method lookup function for MultiAwait()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MultiAwait.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of MultiAwait.await()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 128) + *(_QWORD *)(*(_QWORD *)v0 + 128));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_23B4FAC98;
  return v4();
}

uint64_t dispatch thunk of MultiAwait.notify()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t XPCActivity.Criteria.Options.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t XPCActivity.Criteria.Options.init(rawValue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static XPCActivity.Criteria.Options.powerNap.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static XPCActivity.Criteria.Options.wakeDevice.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static XPCActivity.Criteria.Options.significantUserInactivity.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static XPCActivity.Criteria.Options.usesDuetPowerBudgeting.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static XPCActivity.Criteria.Options.requiresClassA.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

void static XPCActivity.Criteria.Options.requiresClassB.getter(_QWORD *a1@<X8>)
{
  *a1 = 32;
}

void static XPCActivity.Criteria.Options.requiresClassC.getter(_QWORD *a1@<X8>)
{
  *a1 = 64;
}

void static XPCActivity.Criteria.Options.requiresNetwork.getter(_QWORD *a1@<X8>)
{
  *a1 = 128;
}

void static XPCActivity.Criteria.Options.requiresInexpensiveNetwork.getter(_QWORD *a1@<X8>)
{
  *a1 = 256;
}

void static XPCActivity.Criteria.Options.allowBattery.getter(_QWORD *a1@<X8>)
{
  *a1 = 512;
}

void static XPCActivity.Criteria.Options.memoryIntensive.getter(_QWORD *a1@<X8>)
{
  *a1 = 1024;
}

void static XPCActivity.Criteria.Options.cpuIntensive.getter(_QWORD *a1@<X8>)
{
  *a1 = 2048;
}

void static XPCActivity.Criteria.Options.diskIntensive.getter(_QWORD *a1@<X8>)
{
  *a1 = 4096;
}

void static XPCActivity.Criteria.Options.usesDuetNetworkBudgeting.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x2000;
}

void static XPCActivity.Criteria.Options.requiresCompanion.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x4000;
}

void static XPCActivity.Criteria.Options.preventDeviceSleep.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x8000;
}

void static XPCActivity.Criteria.Options.requireScreenSleep.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x10000;
}

uint64_t XPCActivity.Criteria.Options.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;

  v1 = *v0;
  if ((*v0 & 1) == 0)
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if ((v1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_7;
  }
  v2 = sub_23B50B0C8(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v4 = v2[2];
  v3 = v2[3];
  if (v4 >= v3 >> 1)
    v2 = sub_23B50B0C8((_QWORD *)(v3 > 1), v4 + 1, 1, v2);
  v2[2] = v4 + 1;
  v5 = &v2[2 * v4];
  v5[4] = 0x614E7265776F702ELL;
  v5[5] = 0xE900000000000070;
  if ((v1 & 2) != 0)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = sub_23B50B0C8(0, v2[2] + 1, 1, v2);
    v7 = v2[2];
    v6 = v2[3];
    if (v7 >= v6 >> 1)
      v2 = sub_23B50B0C8((_QWORD *)(v6 > 1), v7 + 1, 1, v2);
    v2[2] = v7 + 1;
    v8 = &v2[2 * v7];
    v8[4] = 0x766544656B61772ELL;
    v8[5] = 0xEB00000000656369;
  }
LABEL_12:
  if ((v1 & 4) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = sub_23B50B0C8(0, v2[2] + 1, 1, v2);
    v10 = v2[2];
    v9 = v2[3];
    if (v10 >= v9 >> 1)
      v2 = sub_23B50B0C8((_QWORD *)(v9 > 1), v10 + 1, 1, v2);
    v2[2] = v10 + 1;
    v11 = &v2[2 * v10];
    v11[4] = 0xD00000000000001ALL;
    v11[5] = 0x800000023B56C3B0;
  }
  if ((v1 & 8) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = sub_23B50B0C8(0, v2[2] + 1, 1, v2);
    v13 = v2[2];
    v12 = v2[3];
    if (v13 >= v12 >> 1)
      v2 = sub_23B50B0C8((_QWORD *)(v12 > 1), v13 + 1, 1, v2);
    v2[2] = v13 + 1;
    v14 = &v2[2 * v13];
    v14[4] = 0xD000000000000017;
    v14[5] = 0x800000023B56C390;
  }
  if ((v1 & 0x10) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = sub_23B50B0C8(0, v2[2] + 1, 1, v2);
    v16 = v2[2];
    v15 = v2[3];
    if (v16 >= v15 >> 1)
      v2 = sub_23B50B0C8((_QWORD *)(v15 > 1), v16 + 1, 1, v2);
    v2[2] = v16 + 1;
    v17 = &v2[2 * v16];
    v17[4] = 0x657269757165722ELL;
    v17[5] = 0xEF417373616C4373;
    if ((v1 & 0x20) == 0)
    {
LABEL_26:
      if ((v1 & 0x40) == 0)
        goto LABEL_27;
      goto LABEL_48;
    }
  }
  else if ((v1 & 0x20) == 0)
  {
    goto LABEL_26;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_23B50B0C8(0, v2[2] + 1, 1, v2);
  v19 = v2[2];
  v18 = v2[3];
  if (v19 >= v18 >> 1)
    v2 = sub_23B50B0C8((_QWORD *)(v18 > 1), v19 + 1, 1, v2);
  v2[2] = v19 + 1;
  v20 = &v2[2 * v19];
  v20[4] = 0x657269757165722ELL;
  v20[5] = 0xEF427373616C4373;
  if ((v1 & 0x40) == 0)
  {
LABEL_27:
    if ((v1 & 0x80) == 0)
      goto LABEL_28;
    goto LABEL_53;
  }
LABEL_48:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_23B50B0C8(0, v2[2] + 1, 1, v2);
  v22 = v2[2];
  v21 = v2[3];
  if (v22 >= v21 >> 1)
    v2 = sub_23B50B0C8((_QWORD *)(v21 > 1), v22 + 1, 1, v2);
  v2[2] = v22 + 1;
  v23 = &v2[2 * v22];
  v23[4] = 0x657269757165722ELL;
  v23[5] = 0xEF437373616C4373;
  if ((v1 & 0x80) == 0)
  {
LABEL_28:
    if ((v1 & 0x100) == 0)
      goto LABEL_29;
    goto LABEL_58;
  }
LABEL_53:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_23B50B0C8(0, v2[2] + 1, 1, v2);
  v25 = v2[2];
  v24 = v2[3];
  if (v25 >= v24 >> 1)
    v2 = sub_23B50B0C8((_QWORD *)(v24 > 1), v25 + 1, 1, v2);
  v2[2] = v25 + 1;
  v26 = &v2[2 * v25];
  v26[4] = 0xD000000000000010;
  v26[5] = 0x800000023B56C370;
  if ((v1 & 0x100) == 0)
  {
LABEL_29:
    if ((v1 & 0x200) == 0)
      goto LABEL_30;
    goto LABEL_63;
  }
LABEL_58:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_23B50B0C8(0, v2[2] + 1, 1, v2);
  v28 = v2[2];
  v27 = v2[3];
  if (v28 >= v27 >> 1)
    v2 = sub_23B50B0C8((_QWORD *)(v27 > 1), v28 + 1, 1, v2);
  v2[2] = v28 + 1;
  v29 = &v2[2 * v28];
  v29[4] = 0xD00000000000001BLL;
  v29[5] = 0x800000023B56C350;
  if ((v1 & 0x200) == 0)
  {
LABEL_30:
    if ((v1 & 0x400) == 0)
      goto LABEL_31;
    goto LABEL_68;
  }
LABEL_63:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_23B50B0C8(0, v2[2] + 1, 1, v2);
  v31 = v2[2];
  v30 = v2[3];
  if (v31 >= v30 >> 1)
    v2 = sub_23B50B0C8((_QWORD *)(v30 > 1), v31 + 1, 1, v2);
  v2[2] = v31 + 1;
  v32 = (char *)&v2[2 * v31];
  strcpy(v32 + 32, ".allowBattery");
  *((_WORD *)v32 + 23) = -4864;
  if ((v1 & 0x400) == 0)
  {
LABEL_31:
    if ((v1 & 0x800) == 0)
      goto LABEL_32;
    goto LABEL_73;
  }
LABEL_68:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_23B50B0C8(0, v2[2] + 1, 1, v2);
  v34 = v2[2];
  v33 = v2[3];
  if (v34 >= v33 >> 1)
    v2 = sub_23B50B0C8((_QWORD *)(v33 > 1), v34 + 1, 1, v2);
  v2[2] = v34 + 1;
  v35 = &v2[2 * v34];
  v35[4] = 0xD000000000000010;
  v35[5] = 0x800000023B56C330;
  if ((v1 & 0x800) == 0)
  {
LABEL_32:
    if ((v1 & 0x1000) == 0)
      goto LABEL_33;
    goto LABEL_78;
  }
LABEL_73:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_23B50B0C8(0, v2[2] + 1, 1, v2);
  v37 = v2[2];
  v36 = v2[3];
  if (v37 >= v36 >> 1)
    v2 = sub_23B50B0C8((_QWORD *)(v36 > 1), v37 + 1, 1, v2);
  v2[2] = v37 + 1;
  v38 = (char *)&v2[2 * v37];
  strcpy(v38 + 32, ".cpuIntensive");
  *((_WORD *)v38 + 23) = -4864;
  if ((v1 & 0x1000) == 0)
  {
LABEL_33:
    if ((v1 & 0x2000) == 0)
      goto LABEL_34;
    goto LABEL_83;
  }
LABEL_78:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_23B50B0C8(0, v2[2] + 1, 1, v2);
  v40 = v2[2];
  v39 = v2[3];
  if (v40 >= v39 >> 1)
    v2 = sub_23B50B0C8((_QWORD *)(v39 > 1), v40 + 1, 1, v2);
  v2[2] = v40 + 1;
  v41 = (char *)&v2[2 * v40];
  strcpy(v41 + 32, ".diskIntensive");
  v41[47] = -18;
  if ((v1 & 0x2000) == 0)
  {
LABEL_34:
    if ((v1 & 0x4000) == 0)
      goto LABEL_35;
    goto LABEL_88;
  }
LABEL_83:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_23B50B0C8(0, v2[2] + 1, 1, v2);
  v43 = v2[2];
  v42 = v2[3];
  if (v43 >= v42 >> 1)
    v2 = sub_23B50B0C8((_QWORD *)(v42 > 1), v43 + 1, 1, v2);
  v2[2] = v43 + 1;
  v44 = &v2[2 * v43];
  v44[4] = 0xD000000000000019;
  v44[5] = 0x800000023B56C310;
  if ((v1 & 0x4000) == 0)
  {
LABEL_35:
    if ((v1 & 0x8000) == 0)
      goto LABEL_36;
    goto LABEL_93;
  }
LABEL_88:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_23B50B0C8(0, v2[2] + 1, 1, v2);
  v46 = v2[2];
  v45 = v2[3];
  if (v46 >= v45 >> 1)
    v2 = sub_23B50B0C8((_QWORD *)(v45 > 1), v46 + 1, 1, v2);
  v2[2] = v46 + 1;
  v47 = &v2[2 * v46];
  v47[4] = 0xD000000000000012;
  v47[5] = 0x800000023B56C2F0;
  if ((v1 & 0x8000) == 0)
  {
LABEL_36:
    if ((v1 & 0x10000) == 0)
      goto LABEL_103;
    goto LABEL_98;
  }
LABEL_93:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_23B50B0C8(0, v2[2] + 1, 1, v2);
  v49 = v2[2];
  v48 = v2[3];
  if (v49 >= v48 >> 1)
    v2 = sub_23B50B0C8((_QWORD *)(v48 > 1), v49 + 1, 1, v2);
  v2[2] = v49 + 1;
  v50 = &v2[2 * v49];
  v50[4] = 0xD000000000000013;
  v50[5] = 0x800000023B56C2D0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_98:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = sub_23B50B0C8(0, v2[2] + 1, 1, v2);
    v52 = v2[2];
    v51 = v2[3];
    if (v52 >= v51 >> 1)
      v2 = sub_23B50B0C8((_QWORD *)(v51 > 1), v52 + 1, 1, v2);
    v2[2] = v52 + 1;
    v53 = &v2[2 * v52];
    v53[4] = 0xD000000000000013;
    v53[5] = 0x800000023B56C2B0;
  }
LABEL_103:
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9B58);
  sub_23B506D60();
  sub_23B56A204();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  return 91;
}

uint64_t sub_23B52C330()
{
  sub_23B52D744();
  return sub_23B56A504();
}

uint64_t sub_23B52C38C()
{
  sub_23B52D744();
  return sub_23B56A4E0();
}

_BYTE *XPCActivity.Criteria.init(priority:repeating:delay:gracePeriod:interval:options:)@<X0>(_BYTE *result@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;

  v7 = *a6;
  *(_BYTE *)a7 = *result;
  *(_BYTE *)(a7 + 1) = a2;
  *(_QWORD *)(a7 + 8) = a3;
  *(_QWORD *)(a7 + 16) = a4;
  *(_QWORD *)(a7 + 24) = a5;
  *(_QWORD *)(a7 + 32) = v7;
  return result;
}

uint64_t XPCActivity.Criteria.description.getter()
{
  sub_23B56AA68();
  sub_23B56A3A8();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542F9978);
  sub_23B56A300();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  sub_23B56AD44();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  sub_23B56AD44();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  sub_23B56AD44();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  XPCActivity.Criteria.Options.description.getter();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_23B52C6C0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23B52C6F0 + 4 * byte_23B570478[*v0]))(0x797469726F697270, 0xE800000000000000);
}

uint64_t sub_23B52C6F0()
{
  return 0x6E69746165706572;
}

uint64_t sub_23B52C70C()
{
  return 0x79616C6564;
}

uint64_t sub_23B52C720()
{
  return 0x7265506563617267;
}

uint64_t sub_23B52C740()
{
  return 0x6C61767265746E69;
}

uint64_t sub_23B52C754()
{
  return 0x736E6F6974706FLL;
}

uint64_t sub_23B52C76C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23B52DB88(a1, a2);
  *a3 = result;
  return result;
}

void sub_23B52C790(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_23B52C79C()
{
  sub_23B52D5EC();
  return sub_23B56AF78();
}

uint64_t sub_23B52C7C4()
{
  sub_23B52D5EC();
  return sub_23B56AF84();
}

uint64_t XPCActivity.Criteria.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  int v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2C138);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v13 = v1[1];
  v9 = *((_QWORD *)v1 + 1);
  v12[2] = *((_QWORD *)v1 + 2);
  v12[3] = v9;
  v10 = *((_QWORD *)v1 + 3);
  v12[0] = *((_QWORD *)v1 + 4);
  v12[1] = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23B52D5EC();
  sub_23B56AEC4();
  v21 = v8;
  v20 = 0;
  sub_23B52D630();
  sub_23B56AD14();
  if (!v2)
  {
    v19 = 1;
    sub_23B56AD08();
    v18 = 2;
    sub_23B56AD20();
    v17 = 3;
    sub_23B56AD20();
    v16 = 4;
    sub_23B56AD20();
    v14 = v12[0];
    v15 = 5;
    sub_23B52D674();
    sub_23B56AD14();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t XPCActivity.Criteria.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2C158);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23B52D5EC();
  sub_23B56AEAC();
  if (!v2)
  {
    v23 = 0;
    sub_23B52D6B8();
    sub_23B56ACCC();
    v9 = v24;
    v22 = 1;
    v10 = sub_23B56ACC0();
    v21 = 2;
    v16 = sub_23B56ACD8();
    v20 = 3;
    v15 = sub_23B56ACD8();
    v19 = 4;
    v14 = sub_23B56ACD8();
    v18 = 5;
    sub_23B52D6FC();
    sub_23B56ACCC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_BYTE *)a2 = v9;
    *(_BYTE *)(a2 + 1) = v10 & 1;
    v12 = v17;
    v13 = v15;
    *(_QWORD *)(a2 + 8) = v16;
    *(_QWORD *)(a2 + 16) = v13;
    *(_QWORD *)(a2 + 24) = v14;
    *(_QWORD *)(a2 + 32) = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_23B52CC30@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return XPCActivity.Criteria.init(from:)(a1, a2);
}

uint64_t sub_23B52CC44(_QWORD *a1)
{
  return XPCActivity.Criteria.encode(to:)(a1);
}

uint64_t sub_23B52CC60@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t result;
  _BOOL4 v11;
  int64_t int64;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (xpc_dictionary_get_string(a1, (const char *)*MEMORY[0x24BDAC698]))
  {
    v4 = sub_23B56A3B4();
    v6 = v5;
    if (qword_2542F9988 != -1)
      swift_once();
    if (v4 == qword_2542F99F0 && v6 == *(_QWORD *)algn_2542F99F8)
    {
      swift_bridgeObjectRelease();
      v9 = 0;
    }
    else
    {
      v8 = sub_23B56AD98();
      swift_bridgeObjectRelease();
      v9 = ~v8 & 1;
    }
    v11 = xpc_dictionary_get_BOOL(a1, (const char *)*MEMORY[0x24BDAC6B8]);
    int64 = xpc_dictionary_get_int64(a1, (const char *)*MEMORY[0x24BDAC5B8]);
    v13 = xpc_dictionary_get_int64(a1, (const char *)*MEMORY[0x24BDAC5D8]);
    v14 = xpc_dictionary_get_int64(a1, (const char *)*MEMORY[0x24BDAC5F0]);
    result = sub_23B52CDE0((uint64_t)a1, &v17);
    v15 = v17;
    v16 = 256;
    if (!v11)
      v16 = 0;
    *a2 = v16 | v9;
    a2[1] = int64;
    a2[2] = v13;
    a2[3] = v14;
    a2[4] = v15;
  }
  else
  {
    result = swift_unknownObjectRelease();
    *a2 = 2;
    *(_OWORD *)(a2 + 1) = 0u;
    *(_OWORD *)(a2 + 3) = 0u;
  }
  return result;
}

uint64_t sub_23B52CDE0@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  void *v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  xpc_object_t v14;
  const char *string;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t v23;

  if (!*MEMORY[0x24BDAC688])
  {
    __break(1u);
    goto LABEL_55;
  }
  v3 = (void *)result;
  result = xpc_dictionary_get_BOOL((xpc_object_t)result, (const char *)*MEMORY[0x24BDAC688]);
  if (!*MEMORY[0x24BDAC6F0])
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  v4 = result;
  result = xpc_dictionary_get_BOOL(v3, (const char *)*MEMORY[0x24BDAC6F0]);
  if (!*MEMORY[0x24BDAC6F8])
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  v5 = result;
  result = xpc_dictionary_get_BOOL(v3, (const char *)*MEMORY[0x24BDAC6F8]);
  if (!*MEMORY[0x24BDAC708])
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  v6 = result;
  result = xpc_dictionary_get_BOOL(v3, (const char *)*MEMORY[0x24BDAC708]);
  if (!*MEMORY[0x24BDAC6C0])
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  v7 = result;
  result = xpc_dictionary_get_BOOL(v3, (const char *)*MEMORY[0x24BDAC6C0]);
  if (!*MEMORY[0x24BDAC6C8])
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  v8 = result;
  result = xpc_dictionary_get_BOOL(v3, (const char *)*MEMORY[0x24BDAC6C8]);
  if (!*MEMORY[0x24BDAC6D0])
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  v9 = result;
  result = xpc_dictionary_get_BOOL(v3, (const char *)*MEMORY[0x24BDAC6D0]);
  if (!*MEMORY[0x24BDAC6E0])
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  v10 = result;
  result = xpc_dictionary_get_BOOL(v3, (const char *)*MEMORY[0x24BDAC6E0]);
  if (!*MEMORY[0x24BDAC6D8])
  {
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  v11 = v4;
  if (v5)
    v11 = v4 | 4;
  if (v6)
    v11 |= 2uLL;
  if (v7)
    v11 |= 8uLL;
  if (v8)
    v11 |= 0x10uLL;
  if (v9)
    v11 |= 0x20uLL;
  if (v10)
    v11 |= 0x40uLL;
  if ((_DWORD)result)
    v12 = v11 | 0x80;
  else
    v12 = v11;
  result = xpc_dictionary_get_BOOL(v3, (const char *)*MEMORY[0x24BDAC6D8]);
  if ((_DWORD)result)
    v13 = v12 | 0x100;
  else
    v13 = v12;
  if (!*MEMORY[0x24BDAC5C8])
    goto LABEL_63;
  v14 = xpc_dictionary_get_dictionary(v3, (const char *)*MEMORY[0x24BDAC5C8]);
  if (v14)
  {
    string = xpc_dictionary_get_string(v14, "DataBudgetName");
    swift_unknownObjectRelease();
    if (string)
      v13 |= 0x2000uLL;
  }
  result = xpc_dictionary_get_BOOL(v3, (const char *)*MEMORY[0x24BDAC598]);
  if (!*MEMORY[0x24BDAC648])
    goto LABEL_64;
  v16 = result;
  result = xpc_dictionary_get_BOOL(v3, (const char *)*MEMORY[0x24BDAC648]);
  if (!*MEMORY[0x24BDAC5B0])
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  v17 = result;
  result = xpc_dictionary_get_BOOL(v3, (const char *)*MEMORY[0x24BDAC5B0]);
  if (!*MEMORY[0x24BDAC5C0])
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  v18 = result;
  result = xpc_dictionary_get_BOOL(v3, (const char *)*MEMORY[0x24BDAC5C0]);
  if (!*MEMORY[0x24BDAC5A8])
  {
LABEL_67:
    __break(1u);
    return result;
  }
  if ((v16 & ((v13 & 0x200) == 0)) != 0)
    v19 = v13 | 0x200;
  else
    v19 = v13;
  if ((v17 & ((v19 & 0x400) == 0)) != 0)
    v19 |= 0x400uLL;
  if ((v18 & ((v19 & 0x800) == 0)) != 0)
    v19 |= 0x800uLL;
  if ((result & ((v19 & 0x1000) == 0)) != 0)
    v20 = v19 | 0x1000;
  else
    v20 = v19;
  if (xpc_dictionary_get_BOOL(v3, (const char *)*MEMORY[0x24BDAC5A8]))
    v20 |= 0x4000uLL;
  if (xpc_dictionary_get_BOOL(v3, (const char *)*MEMORY[0x24BDAC690]))
    v21 = v20 | 0x8000;
  else
    v21 = v20;
  v22 = xpc_dictionary_get_BOOL(v3, (const char *)*MEMORY[0x24BDAC6E8]);
  result = swift_unknownObjectRelease();
  v23 = v21 | 0x10000;
  if (!v22)
    v23 = v21;
  *a2 = v23;
  return result;
}

void sub_23B52D124()
{
  unsigned __int8 *v0;
  int v1;
  int v2;
  int64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  xpc_object_t v7;
  void *v8;
  const char **v9;
  xpc_object_t v10;

  v1 = *v0;
  v2 = v0[1];
  v3 = *((_QWORD *)v0 + 1);
  v4 = *((_QWORD *)v0 + 2);
  v5 = *((_QWORD *)v0 + 3);
  v6 = *((_QWORD *)v0 + 4);
  v7 = xpc_dictionary_create(0, 0, 0);
  v8 = v7;
  v9 = (const char **)MEMORY[0x24BDAC6A8];
  if (v1)
    v9 = (const char **)MEMORY[0x24BDAC6A0];
  xpc_dictionary_set_string(v7, (const char *)*MEMORY[0x24BDAC698], *v9);
  xpc_dictionary_set_BOOL(v8, (const char *)*MEMORY[0x24BDAC6B8], v2);
  xpc_dictionary_set_int64(v8, (const char *)*MEMORY[0x24BDAC5B8], v3);
  xpc_dictionary_set_int64(v8, (const char *)*MEMORY[0x24BDAC5D8], v4);
  if (v2 == 1)
    xpc_dictionary_set_int64(v8, (const char *)*MEMORY[0x24BDAC5F0], v5);
  if ((v6 & 1) != 0)
  {
    if (!*MEMORY[0x24BDAC688])
    {
      __break(1u);
      goto LABEL_55;
    }
    xpc_dictionary_set_BOOL(v8, (const char *)*MEMORY[0x24BDAC688], 1);
  }
  if ((v6 & 4) == 0)
    goto LABEL_11;
  if (!*MEMORY[0x24BDAC6F0])
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  xpc_dictionary_set_BOOL(v8, (const char *)*MEMORY[0x24BDAC6F0], 1);
LABEL_11:
  if ((v6 & 2) == 0)
    goto LABEL_14;
  if (!*MEMORY[0x24BDAC6F8])
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  xpc_dictionary_set_BOOL(v8, (const char *)*MEMORY[0x24BDAC6F8], 1);
LABEL_14:
  if ((v6 & 8) == 0)
    goto LABEL_17;
  if (!*MEMORY[0x24BDAC708])
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  xpc_dictionary_set_BOOL(v8, (const char *)*MEMORY[0x24BDAC708], 1);
LABEL_17:
  if ((v6 & 0x10) == 0)
    goto LABEL_20;
  if (!*MEMORY[0x24BDAC6C0])
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  xpc_dictionary_set_BOOL(v8, (const char *)*MEMORY[0x24BDAC6C0], 1);
LABEL_20:
  if ((v6 & 0x20) == 0)
    goto LABEL_23;
  if (!*MEMORY[0x24BDAC6C8])
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  xpc_dictionary_set_BOOL(v8, (const char *)*MEMORY[0x24BDAC6C8], 1);
LABEL_23:
  if ((v6 & 0x40) == 0)
    goto LABEL_26;
  if (!*MEMORY[0x24BDAC6D0])
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  xpc_dictionary_set_BOOL(v8, (const char *)*MEMORY[0x24BDAC6D0], 1);
LABEL_26:
  if ((v6 & 0x80) == 0)
    goto LABEL_29;
  if (!*MEMORY[0x24BDAC6E0])
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  xpc_dictionary_set_BOOL(v8, (const char *)*MEMORY[0x24BDAC6E0], 1);
LABEL_29:
  if ((v6 & 0x100) == 0)
    goto LABEL_32;
  if (!*MEMORY[0x24BDAC6D8])
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  xpc_dictionary_set_BOOL(v8, (const char *)*MEMORY[0x24BDAC6D8], 1);
LABEL_32:
  if ((v6 & 0x2000) == 0)
    goto LABEL_35;
  v10 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_string(v10, "DataBudgetName", "com.apple.dasd.baCellular");
  if (!*MEMORY[0x24BDAC5C8])
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x24BDAC5C8], v10);
  swift_unknownObjectRelease();
LABEL_35:
  if ((v6 & 0x200) != 0)
    xpc_dictionary_set_BOOL(v8, (const char *)*MEMORY[0x24BDAC598], 1);
  if ((v6 & 0x400) != 0)
  {
    if (*MEMORY[0x24BDAC648])
    {
      xpc_dictionary_set_BOOL(v8, (const char *)*MEMORY[0x24BDAC648], 1);
      goto LABEL_40;
    }
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
LABEL_40:
  if ((v6 & 0x800) == 0)
    goto LABEL_43;
  if (!*MEMORY[0x24BDAC5B0])
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  xpc_dictionary_set_BOOL(v8, (const char *)*MEMORY[0x24BDAC5B0], 1);
LABEL_43:
  if ((v6 & 0x1000) == 0)
    goto LABEL_46;
  if (!*MEMORY[0x24BDAC5C0])
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  xpc_dictionary_set_BOOL(v8, (const char *)*MEMORY[0x24BDAC5C0], 1);
LABEL_46:
  if ((v6 & 0x4000) != 0)
  {
    if (*MEMORY[0x24BDAC5A8])
    {
      xpc_dictionary_set_BOOL(v8, (const char *)*MEMORY[0x24BDAC5A8], 1);
      goto LABEL_49;
    }
LABEL_67:
    __break(1u);
    return;
  }
LABEL_49:
  if ((v6 & 0x8000) != 0)
    xpc_dictionary_set_BOOL(v8, (const char *)*MEMORY[0x24BDAC690], 1);
  if ((v6 & 0x10000) != 0)
    xpc_dictionary_set_BOOL(v8, (const char *)*MEMORY[0x24BDAC6E8], 1);
}

BOOL _s10FindMyBase11XPCActivityC8CriteriaV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  char v18;
  _BOOL8 result;
  uint64_t v20;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v2 = *(unsigned __int8 *)(a1 + 1);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(unsigned __int8 *)(a2 + 1);
  v9 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  v26 = *(_QWORD *)(a2 + 32);
  v11 = *(_BYTE *)a1 == 0;
  if (*(_BYTE *)a1)
    v12 = 0x616E65746E69616DLL;
  else
    v12 = 0x7974696C697475;
  if (v11)
    v13 = 0xE700000000000000;
  else
    v13 = 0xEB0000000065636ELL;
  if (*(_BYTE *)a2)
    v14 = 0x616E65746E69616DLL;
  else
    v14 = 0x7974696C697475;
  if (*(_BYTE *)a2)
    v15 = 0xEB0000000065636ELL;
  else
    v15 = 0xE700000000000000;
  if (v12 == v14 && v13 == v15)
  {
    v20 = v3;
    swift_bridgeObjectRelease_n();
    if ((v2 ^ v7) == 1 || v4 != v9 || v20 != v8 || v5 != v10)
      return 0;
    return v6 == v26;
  }
  v25 = *(unsigned __int8 *)(a2 + 1);
  v24 = *(_QWORD *)(a2 + 16);
  v17 = v3;
  v18 = sub_23B56AD98();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = 0;
  if ((v18 & 1) != 0 && v2 == v25 && v4 == v9 && v17 == v24 && v5 == v10)
    return v6 == v26;
  return result;
}

unint64_t sub_23B52D5EC()
{
  unint64_t result;

  result = qword_256A2C140;
  if (!qword_256A2C140)
  {
    result = MEMORY[0x23B867894](&unk_23B57080C, &_s8CriteriaV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256A2C140);
  }
  return result;
}

unint64_t sub_23B52D630()
{
  unint64_t result;

  result = qword_256A2C148;
  if (!qword_256A2C148)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for XPCActivity.Priority, &type metadata for XPCActivity.Priority);
    atomic_store(result, (unint64_t *)&qword_256A2C148);
  }
  return result;
}

unint64_t sub_23B52D674()
{
  unint64_t result;

  result = qword_256A2C150;
  if (!qword_256A2C150)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for XPCActivity.Criteria.Options, &type metadata for XPCActivity.Criteria.Options);
    atomic_store(result, (unint64_t *)&qword_256A2C150);
  }
  return result;
}

unint64_t sub_23B52D6B8()
{
  unint64_t result;

  result = qword_256A2C160;
  if (!qword_256A2C160)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for XPCActivity.Priority, &type metadata for XPCActivity.Priority);
    atomic_store(result, (unint64_t *)&qword_256A2C160);
  }
  return result;
}

unint64_t sub_23B52D6FC()
{
  unint64_t result;

  result = qword_256A2C168;
  if (!qword_256A2C168)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for XPCActivity.Criteria.Options, &type metadata for XPCActivity.Criteria.Options);
    atomic_store(result, (unint64_t *)&qword_256A2C168);
  }
  return result;
}

unint64_t sub_23B52D744()
{
  unint64_t result;

  result = qword_256A2C170;
  if (!qword_256A2C170)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for XPCActivity.Criteria.Options, &type metadata for XPCActivity.Criteria.Options);
    atomic_store(result, (unint64_t *)&qword_256A2C170);
  }
  return result;
}

unint64_t sub_23B52D78C()
{
  unint64_t result;

  result = qword_256A2C178;
  if (!qword_256A2C178)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for XPCActivity.Criteria.Options, &type metadata for XPCActivity.Criteria.Options);
    atomic_store(result, (unint64_t *)&qword_256A2C178);
  }
  return result;
}

unint64_t sub_23B52D7D4()
{
  unint64_t result;

  result = qword_2542F9820;
  if (!qword_2542F9820)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for XPCActivity.Criteria.Options, &type metadata for XPCActivity.Criteria.Options);
    atomic_store(result, (unint64_t *)&qword_2542F9820);
  }
  return result;
}

unint64_t sub_23B52D81C()
{
  unint64_t result;

  result = qword_2542F9828;
  if (!qword_2542F9828)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for XPCActivity.Criteria.Options, &type metadata for XPCActivity.Criteria.Options);
    atomic_store(result, (unint64_t *)&qword_2542F9828);
  }
  return result;
}

uint64_t _s8CriteriaVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s8CriteriaVwet(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[40])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t _s8CriteriaVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCActivity.Criteria()
{
  return &type metadata for XPCActivity.Criteria;
}

ValueMetadata *type metadata accessor for XPCActivity.Criteria.Options()
{
  return &type metadata for XPCActivity.Criteria.Options;
}

uint64_t _s8CriteriaV10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s8CriteriaV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_23B52DA30 + 4 * byte_23B570483[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_23B52DA64 + 4 * byte_23B57047E[v4]))();
}

uint64_t sub_23B52DA64(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23B52DA6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23B52DA74);
  return result;
}

uint64_t sub_23B52DA80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23B52DA88);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_23B52DA8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23B52DA94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s8CriteriaV10CodingKeysOMa()
{
  return &_s8CriteriaV10CodingKeysON;
}

unint64_t sub_23B52DAB4()
{
  unint64_t result;

  result = qword_256A2C180;
  if (!qword_256A2C180)
  {
    result = MEMORY[0x23B867894](&unk_23B5707E4, &_s8CriteriaV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256A2C180);
  }
  return result;
}

unint64_t sub_23B52DAFC()
{
  unint64_t result;

  result = qword_256A2C188;
  if (!qword_256A2C188)
  {
    result = MEMORY[0x23B867894](&unk_23B570754, &_s8CriteriaV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256A2C188);
  }
  return result;
}

unint64_t sub_23B52DB44()
{
  unint64_t result;

  result = qword_256A2C190;
  if (!qword_256A2C190)
  {
    result = MEMORY[0x23B867894](&unk_23B57077C, &_s8CriteriaV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_256A2C190);
  }
  return result;
}

uint64_t sub_23B52DB88(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x797469726F697270 && a2 == 0xE800000000000000;
  if (v2 || (sub_23B56AD98() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E69746165706572 && a2 == 0xE900000000000067 || (sub_23B56AD98() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x79616C6564 && a2 == 0xE500000000000000 || (sub_23B56AD98() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7265506563617267 && a2 == 0xEB00000000646F69 || (sub_23B56AD98() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6C61767265746E69 && a2 == 0xE800000000000000 || (sub_23B56AD98() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_23B56AD98();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_23B52DE24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_23B56A060();
  __swift_allocate_value_buffer(v0, qword_2542F9858);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_2542F9858);
  if (qword_2542F9850 != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)qword_2542F9830);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t AsyncStreamProvider.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  AsyncStreamProvider.init()();
  return v0;
}

uint64_t AsyncStreamProvider.init()()
{
  uint64_t v0;
  uint64_t v1;

  sub_23B569FA0();
  type metadata accessor for Transaction();
  swift_getTupleTypeMetadata2();
  sub_23B56A678();
  sub_23B5301D4((unint64_t *)&qword_2542FAA50, MEMORY[0x24BDCEA88]);
  sub_23B56A144();
  sub_23B56A1C8();
  v1 = sub_23B4FFBD4();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 16) = v1;
  return v0;
}

Swift::Void __swiftcall AsyncStreamProvider.finish()()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD v2[4];

  v1 = v0[2];
  v2[2] = *(_QWORD *)(*v0 + 80);
  sub_23B569FA0();
  type metadata accessor for Transaction();
  swift_getTupleTypeMetadata2();
  sub_23B56A678();
  sub_23B5301D4((unint64_t *)&qword_2542FAA50, MEMORY[0x24BDCEA88]);
  sub_23B56A1C8();
  OSAllocatedUnfairLock.callAsFunction<A>(_:)((void (*)(uint64_t))sub_23B53013C, (uint64_t)v2, v1);
}

uint64_t sub_23B52E080(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;

  type metadata accessor for Transaction();
  swift_getTupleTypeMetadata2();
  v2 = sub_23B56A678();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v19 - v4;
  v6 = *a1;
  sub_23B569FA0();
  sub_23B5301D4((unint64_t *)&qword_2542FAA50, MEMORY[0x24BDCEA88]);
  v7 = v6 + 64;
  v8 = 1 << *(_BYTE *)(v6 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v6 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v14 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v15 = v14 | (v13 << 6);
      goto LABEL_5;
    }
    v16 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v16 >= v11)
      return swift_release();
    v17 = *(_QWORD *)(v7 + 8 * v16);
    ++v13;
    if (!v17)
    {
      v13 = v16 + 1;
      if (v16 + 1 >= v11)
        return swift_release();
      v17 = *(_QWORD *)(v7 + 8 * v13);
      if (!v17)
      {
        v13 = v16 + 2;
        if (v16 + 2 >= v11)
          return swift_release();
        v17 = *(_QWORD *)(v7 + 8 * v13);
        if (!v17)
          break;
      }
    }
LABEL_20:
    v10 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v13 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 56) + *(_QWORD *)(v3 + 72) * v15, v2);
    sub_23B56A66C();
    result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  v18 = v16 + 3;
  if (v18 >= v11)
    return swift_release();
  v17 = *(_QWORD *)(v7 + 8 * v18);
  if (v17)
  {
    v13 = v18;
    goto LABEL_20;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v11)
      return swift_release();
    v17 = *(_QWORD *)(v7 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_20;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t AsyncStreamProvider.stream(initialEvents:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v4 = sub_23B569FA0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23B52E300((uint64_t)v7, a2, a1);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_23B52E300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, _QWORD, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  os_log_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char *v50;
  BOOL v51;
  uint64_t result;
  os_activity_scope_state_s *v53;
  uint64_t v54;
  uint64_t v55;
  os_log_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73[2];

  v68 = a2;
  v59 = a1;
  v5 = *v3;
  v6 = type metadata accessor for Transaction();
  v7 = *(_QWORD *)(v5 + 80);
  v58 = v6;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v10 = (uint64_t *)((char *)&v55 - v9);
  v11 = sub_23B56A63C();
  v66 = *(_QWORD *)(v11 - 8);
  v67 = v11;
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v55 - v13;
  v15 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v57 = v16;
  v17 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_23B56A654();
  v60 = *(_QWORD *)(v18 - 8);
  v19 = v60;
  v61 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v55 - v20;
  v71 = sub_23B56A678();
  v62 = *(_QWORD *)(v71 - 8);
  v22 = MEMORY[0x24BDAC7A8](v71);
  v24 = (char *)&v55 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v70 = (uint64_t)&v55 - v25;
  v26 = sub_23B569FA0();
  v27 = *(_QWORD *)(v26 - 8);
  v64 = v26;
  v65 = v27;
  v28 = MEMORY[0x24BDAC7A8](v26);
  v63 = (char *)&v55 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v28);
  v69 = (char *)&v55 - v30;
  sub_23B569F94();
  v31 = *(void (**)(char *, _QWORD, uint64_t))(v19 + 104);
  v32 = v61;
  v31(v21, *MEMORY[0x24BEE6A10], v61);
  v68 = TupleTypeMetadata2;
  sub_23B56A630();
  (*(void (**)(char *, uint64_t))(v60 + 8))(v21, v32);
  (*(void (**)(uint64_t, char *, uint64_t))(v62 + 32))(v70, v24, v71);
  if (qword_2542F97C8 != -1)
    swift_once();
  v33 = sub_23B56A060();
  __swift_project_value_buffer(v33, (uint64_t)qword_2542F9858);
  v35 = v64;
  v34 = v65;
  v36 = (uint64_t)v69;
  (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v63, v69, v64);
  swift_bridgeObjectRetain_n();
  v37 = sub_23B56A048();
  v38 = sub_23B56A84C();
  LODWORD(v61) = v38;
  if (os_log_type_enabled(v37, v38))
  {
    v39 = swift_slowAlloc();
    v60 = swift_slowAlloc();
    v73[0] = v60;
    *(_DWORD *)v39 = 136446466;
    v55 = v39 + 4;
    sub_23B5301D4(&qword_2542F97F0, MEMORY[0x24BDCEAB8]);
    v40 = v63;
    v56 = v37;
    v41 = sub_23B56AD44();
    v72 = sub_23B5034E4(v41, v42, v73);
    sub_23B56A918();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v40, v64);
    *(_WORD *)(v39 + 12) = 2048;
    v63 = (char *)(v39 + 14);
    v43 = MEMORY[0x23B86685C](a3, v7);
    swift_bridgeObjectRelease();
    v72 = v43;
    v36 = (uint64_t)v69;
    sub_23B56A918();
    swift_bridgeObjectRelease();
    v44 = v56;
    _os_log_impl(&dword_23B4F9000, v56, (os_log_type_t)v61, "%{public}s: initialEvents: %ld", (uint8_t *)v39, 0x16u);
    v45 = v60;
    swift_arrayDestroy();
    MEMORY[0x23B867948](v45, -1, -1);
    MEMORY[0x23B867948](v39, -1, -1);

    v35 = v64;
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v63, v35);

    swift_bridgeObjectRelease();
  }
  if (qword_2542FAE10 != -1)
    swift_once();
  sub_23B56AF9C();
  v46 = v73[0];
  if (!v73[0])
  {
    swift_allocObject();
    v53 = sub_23B5019FC("AsyncStreamProvider.yield", 25, 2);
    v54 = v70;
    sub_23B52F4A4((uint64_t)v53, a3, v70, v7);
    swift_release();
LABEL_24:
    sub_23B52F70C(v36, v54);
    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v54, v71);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v65 + 32))(v59, v36, v35);
  }
  v47 = swift_bridgeObjectRetain();
  if (!MEMORY[0x23B866880](v47, v7))
  {
    swift_release();
    swift_bridgeObjectRelease();
LABEL_23:
    v54 = v70;
    goto LABEL_24;
  }
  v48 = 0;
  while (1)
  {
    v49 = sub_23B56A564();
    sub_23B56A540();
    if ((v49 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(v17, a3+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(_QWORD *)(v15 + 72) * v48, v7);
      v36 = v48 + 1;
      if (__OFADD__(v48, 1))
        goto LABEL_19;
      goto LABEL_13;
    }
    result = sub_23B56AAA4();
    if (v57 != 8)
      break;
    v73[0] = result;
    (*(void (**)(char *, uint64_t *, uint64_t))(v15 + 16))(v17, v73, v7);
    swift_unknownObjectRelease();
    v36 = v48 + 1;
    if (__OFADD__(v48, 1))
    {
LABEL_19:
      __break(1u);
LABEL_20:
      swift_release();
      swift_bridgeObjectRelease();
      v35 = v64;
      goto LABEL_23;
    }
LABEL_13:
    v50 = (char *)v10 + *(int *)(v68 + 48);
    *v10 = v46;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v50, v17, v7);
    swift_retain();
    sub_23B56A660();
    (*(void (**)(char *, uint64_t))(v66 + 8))(v14, v67);
    ++v48;
    v51 = v36 == MEMORY[0x23B866880](a3, v7);
    v36 = (uint64_t)v69;
    if (v51)
      goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t AsyncStreamProvider.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = MEMORY[0x23B867894](&protocol conformance descriptor for AsyncStreamProvider<A>, *v0);
  CustomStringConvertible.typeDescription.getter(v1, v2);
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  CustomStringConvertible<>.addressDescription.getter();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  return 60;
}

uint64_t AsyncStreamProvider.yield(value:transaction:)(uint64_t a1, uint64_t a2)
{
  os_activity_scope_state_s *v5;
  os_activity_scope_state_s *v6;

  if (a2)
  {
    swift_retain();
    sub_23B52EB54(a1, a2);
    return swift_release();
  }
  else
  {
    if (qword_2542FAE10 != -1)
      swift_once();
    sub_23B56AF9C();
    v5 = v6;
    if (!v6)
    {
      type metadata accessor for Transaction();
      swift_allocObject();
      v5 = sub_23B5019FC("AsyncStreamProvider.yield", 25, 2);
    }
    sub_23B52EB54(a1, (uint64_t)v5);
    return swift_release();
  }
}

uint64_t sub_23B52EB54(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t TupleTypeMetadata2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  int v27;
  _BOOL4 v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  NSObject *v59;
  uint64_t v60;
  os_log_type_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  int64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  _QWORD *v99;
  char v100[16];
  uint64_t v101;
  uint64_t v102;
  uint64_t v103[2];

  v89 = a1;
  v90 = a2;
  v3 = *v2;
  type metadata accessor for Transaction();
  v4 = *(_QWORD *)(v3 + 80);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v86 = (uint64_t *)((char *)&v72 - v6);
  v85 = sub_23B56A63C();
  v84 = *(_QWORD *)(v85 - 8);
  MEMORY[0x24BDAC7A8](v85);
  v83 = (char *)&v72 - v7;
  v87 = TupleTypeMetadata2;
  v8 = sub_23B56A678();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v98 = (char *)&v72 - v10;
  v11 = sub_23B569FA0();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v95 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v97 = (char *)&v72 - v15;
  v16 = swift_getTupleTypeMetadata2();
  v17 = sub_23B56A900();
  v92 = *(_QWORD *)(v17 - 8);
  v93 = v17;
  v18 = MEMORY[0x24BDAC7A8](v17);
  v94 = (char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v91 = (char *)&v72 - v20;
  v99 = v2;
  v21 = v2[2];
  v88 = v4;
  v101 = v4;
  sub_23B5301D4((unint64_t *)&qword_2542FAA50, MEMORY[0x24BDCEA88]);
  sub_23B56A1C8();
  sub_23B4FFC54((void (*)(uint64_t))sub_23B5301B8, (uint64_t)v100, v21);
  v80 = v103[0];
  v22 = sub_23B56A1B0();
  if (qword_2542F97C8 != -1)
LABEL_38:
    swift_once();
  v23 = sub_23B56A060();
  v24 = __swift_project_value_buffer(v23, (uint64_t)qword_2542F9858);
  swift_retain();
  v81 = v24;
  v25 = sub_23B56A048();
  v26 = sub_23B56A828();
  v27 = v26;
  v28 = os_log_type_enabled(v25, v26);
  v29 = &unk_23B570000;
  v30 = MEMORY[0x24BEE4AD8];
  v79 = v8;
  if (v28)
  {
    v31 = swift_slowAlloc();
    v96 = swift_slowAlloc();
    v103[0] = v96;
    *(_DWORD *)v31 = 136446466;
    v78 = v22;
    v32 = AsyncStreamProvider.description.getter();
    v102 = sub_23B5034E4(v32, v33, v103);
    LODWORD(v76) = v27;
    sub_23B56A918();
    v29 = (_QWORD *)&unk_23B570000;
    swift_release();
    v30 = MEMORY[0x24BEE4AD8];
    swift_bridgeObjectRelease();
    *(_WORD *)(v31 + 12) = 2048;
    v102 = v78;
    sub_23B56A918();
    _os_log_impl(&dword_23B4F9000, v25, (os_log_type_t)v76, "%{public}s: Yielding value to %ld clients.", (uint8_t *)v31, 0x16u);
    v34 = v96;
    swift_arrayDestroy();
    MEMORY[0x23B867948](v34, -1, -1);
    v35 = v31;
    v8 = v79;
    MEMORY[0x23B867948](v35, -1, -1);

  }
  else
  {

    swift_release();
  }
  v37 = v95;
  v38 = 0;
  v39 = *(_QWORD *)(v80 + 64);
  v74 = v80 + 64;
  v40 = 1 << *(_BYTE *)(v80 + 32);
  v41 = -1;
  if (v40 < 64)
    v41 = ~(-1 << v40);
  v22 = v41 & v39;
  v78 = (unint64_t)(v40 + 63) >> 6;
  v73 = v78 - 1;
  *(_QWORD *)&v36 = v29[268];
  v76 = v36;
  v75 = v30 + 8;
  v42 = v94;
  v77 = v9;
  v82 = v16;
  while (1)
  {
    if (v22)
    {
      v48 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      v96 = v38;
      v49 = v48 | (v38 << 6);
      goto LABEL_12;
    }
    v52 = v38 + 1;
    if (__OFADD__(v38, 1))
    {
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    if (v52 >= v78)
    {
      v96 = v38;
LABEL_18:
      v22 = 0;
      v51 = 1;
      goto LABEL_19;
    }
    v53 = *(_QWORD *)(v74 + 8 * v52);
    if (v53)
      goto LABEL_16;
    if (v38 + 2 < v78)
    {
      v53 = *(_QWORD *)(v74 + 8 * (v38 + 2));
      if (v53)
      {
        v52 = v38 + 2;
        goto LABEL_16;
      }
      v70 = v38 + 3;
      if (v38 + 3 < v78)
      {
        v53 = *(_QWORD *)(v74 + 8 * v70);
        if (!v53)
        {
          while (1)
          {
            v52 = v70 + 1;
            if (__OFADD__(v70, 1))
              goto LABEL_37;
            if (v52 >= v78)
            {
              v22 = 0;
              v51 = 1;
              v96 = v73;
              goto LABEL_19;
            }
            v53 = *(_QWORD *)(v74 + 8 * v52);
            ++v70;
            if (v53)
              goto LABEL_16;
          }
        }
        v52 = v38 + 3;
LABEL_16:
        v22 = (v53 - 1) & v53;
        v49 = __clz(__rbit64(v53)) + (v52 << 6);
        v96 = v52;
LABEL_12:
        v50 = v80;
        (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v42, *(_QWORD *)(v80 + 48) + *(_QWORD *)(v12 + 72) * v49, v11);
        (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(&v42[*(int *)(v16 + 48)], *(_QWORD *)(v50 + 56) + *(_QWORD *)(v9 + 72) * v49, v8);
        v51 = 0;
        goto LABEL_19;
      }
      v96 = v38 + 2;
      goto LABEL_18;
    }
    v22 = 0;
    v51 = 1;
    v96 = v38 + 1;
LABEL_19:
    v54 = *(_QWORD *)(v16 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56))(v42, v51, 1, v16);
    v55 = v91;
    (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v91, v42, v93);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v55, 1, v16) == 1)
      return swift_release();
    v56 = v55;
    v57 = &v55[*(int *)(v16 + 48)];
    v58 = v97;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v97, v56, v11);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v98, v57, v8);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v37, v58, v11);
    swift_retain();
    v59 = sub_23B56A048();
    v60 = v12;
    v61 = sub_23B56A828();
    if (os_log_type_enabled(v59, v61))
    {
      v62 = swift_slowAlloc();
      v63 = v37;
      v64 = swift_slowAlloc();
      v103[0] = v64;
      *(_DWORD *)v62 = v76;
      v65 = AsyncStreamProvider.description.getter();
      *(_QWORD *)(v62 + 4) = sub_23B5034E4(v65, v66, v103);
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v62 + 12) = 2082;
      sub_23B5301D4(&qword_2542F97F0, MEMORY[0x24BDCEAB8]);
      v67 = sub_23B56AD44();
      *(_QWORD *)(v62 + 14) = sub_23B5034E4(v67, v68, v103);
      swift_bridgeObjectRelease();
      v43 = *(void (**)(char *, uint64_t))(v60 + 8);
      v43(v63, v11);
      _os_log_impl(&dword_23B4F9000, v59, v61, "%{public}s: Yielding value to %{public}s.", (uint8_t *)v62, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x23B867948](v64, -1, -1);
      v69 = v62;
      v8 = v79;
      v9 = v77;
      MEMORY[0x23B867948](v69, -1, -1);
    }
    else
    {
      swift_release();
      v43 = *(void (**)(char *, uint64_t))(v60 + 8);
      v43(v37, v11);
    }

    v12 = v60;
    v44 = (char *)v86 + *(int *)(v87 + 48);
    v45 = v89;
    *v86 = v90;
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v88 - 8) + 16))(v44, v45);
    swift_retain();
    v46 = v83;
    v47 = v98;
    sub_23B56A660();
    (*(void (**)(char *, uint64_t))(v84 + 8))(v46, v85);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v47, v8);
    v43(v97, v11);
    v42 = v94;
    v37 = v95;
    v16 = v82;
    v38 = v96;
  }
}

uint64_t AsyncStreamProvider.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t AsyncStreamProvider.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_23B52F484()
{
  return AsyncStreamProvider.description.getter();
}

uint64_t sub_23B52F4A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t TupleTypeMetadata2;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t result;
  _QWORD v24[2];
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  v29 = a1;
  type metadata accessor for Transaction();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v9 = (_QWORD *)((char *)v24 - v8);
  v28 = v10;
  v11 = sub_23B56A63C();
  v26 = *(_QWORD *)(v11 - 8);
  v27 = v11;
  v12 = MEMORY[0x24BDAC7A8](v11);
  v25 = (char *)v24 - v13;
  v14 = *(_QWORD *)(a4 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x24BDAC7A8](v12);
  v30 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_bridgeObjectRetain();
  if (MEMORY[0x23B866880](v16, a4))
  {
    v24[0] = v15;
    v24[1] = v4;
    v17 = 0;
    v18 = v29;
    while (1)
    {
      v19 = sub_23B56A564();
      sub_23B56A540();
      if ((v19 & 1) != 0)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v30, a2+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v17, a4);
        v20 = v17 + 1;
        if (__OFADD__(v17, 1))
          goto LABEL_10;
      }
      else
      {
        result = sub_23B56AAA4();
        if (v24[0] != 8)
        {
          __break(1u);
          return result;
        }
        v31 = result;
        (*(void (**)(char *, uint64_t *, uint64_t))(v14 + 16))(v30, &v31, a4);
        swift_unknownObjectRelease();
        v20 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_10:
          __break(1u);
          return swift_bridgeObjectRelease();
        }
      }
      v21 = (char *)v9 + *(int *)(v28 + 48);
      *v9 = v18;
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v21, v30, a4);
      sub_23B56A678();
      swift_retain();
      v22 = v25;
      sub_23B56A660();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v27);
      ++v17;
      if (v20 == MEMORY[0x23B866880](a2, a4))
        return swift_bridgeObjectRelease();
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_23B52F70C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39[2];

  v33 = *v2;
  v5 = sub_23B569FA0();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v37 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = v8;
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v31 - v9;
  if (qword_2542F97C8 != -1)
    swift_once();
  v11 = sub_23B56A060();
  __swift_project_value_buffer(v11, (uint64_t)qword_2542F9858);
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v36 = a1;
  v34 = v12;
  v12(v10, a1, v5);
  swift_retain();
  v13 = sub_23B56A048();
  v14 = sub_23B56A84C();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc();
    v32 = v6;
    v16 = v15;
    v17 = swift_slowAlloc();
    v39[0] = v17;
    *(_DWORD *)v16 = 136446466;
    v18 = AsyncStreamProvider.description.getter();
    v38 = sub_23B5034E4(v18, v19, v39);
    v31 = a2;
    sub_23B56A918();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2082;
    sub_23B5301D4(&qword_2542F97F0, MEMORY[0x24BDCEAB8]);
    v20 = sub_23B56AD44();
    v38 = sub_23B5034E4(v20, v21, v39);
    a2 = v31;
    sub_23B56A918();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v5);
    _os_log_impl(&dword_23B4F9000, v13, v14, "%{public}s: Added new client: %{public}s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v17, -1, -1);
    v22 = v16;
    v6 = v32;
    MEMORY[0x23B867948](v22, -1, -1);
  }
  else
  {
    swift_release();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  }

  v23 = v2[2];
  MEMORY[0x24BDAC7A8](v24);
  v25 = *(_QWORD *)(v33 + 80);
  v26 = v36;
  *(&v31 - 4) = v25;
  *(&v31 - 3) = v26;
  *(&v31 - 2) = a2;
  type metadata accessor for Transaction();
  swift_getTupleTypeMetadata2();
  sub_23B56A678();
  sub_23B5301D4((unint64_t *)&qword_2542FAA50, MEMORY[0x24BDCEA88]);
  sub_23B56A1C8();
  OSAllocatedUnfairLock.callAsFunction<A>(_:)((void (*)(uint64_t))sub_23B530214, (uint64_t)(&v31 - 6), v23);
  v27 = v37;
  v34(v37, v26, v5);
  v28 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = v25;
  *(_QWORD *)(v29 + 24) = v2;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v29 + v28, v27, v5);
  swift_retain();
  return sub_23B56A648();
}

uint64_t sub_23B52FAE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  type metadata accessor for Transaction();
  swift_getTupleTypeMetadata2();
  v5 = sub_23B56A678();
  v6 = sub_23B56A900();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - v7;
  v9 = sub_23B569FA0();
  MEMORY[0x24BDAC7A8](v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v9);
  v12 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v8, a3, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v5);
  sub_23B5301D4((unint64_t *)&qword_2542FAA50, MEMORY[0x24BDCEA88]);
  sub_23B56A1C8();
  return sub_23B56A1E0();
}

void sub_23B52FC4C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[2];

  v2 = v1;
  v4 = *v1;
  v5 = sub_23B569FA0();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2542F97C8 != -1)
    swift_once();
  v9 = sub_23B56A060();
  __swift_project_value_buffer(v9, (uint64_t)qword_2542F9858);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  swift_retain();
  v10 = sub_23B56A048();
  v11 = sub_23B56A84C();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v24 = a1;
    v13 = v12;
    v22 = swift_slowAlloc();
    v26[0] = v22;
    *(_DWORD *)v13 = 136446466;
    v23 = v4;
    v14 = AsyncStreamProvider.description.getter();
    v25 = sub_23B5034E4(v14, v15, v26);
    sub_23B56A918();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2082;
    sub_23B5301D4(&qword_2542F97F0, MEMORY[0x24BDCEAB8]);
    v16 = sub_23B56AD44();
    v25 = sub_23B5034E4(v16, v17, v26);
    v4 = v23;
    sub_23B56A918();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    _os_log_impl(&dword_23B4F9000, v10, v11, "%{public}s: Removing terminated client: %{public}s", (uint8_t *)v13, 0x16u);
    v18 = v22;
    swift_arrayDestroy();
    MEMORY[0x23B867948](v18, -1, -1);
    v19 = v13;
    a1 = v24;
    MEMORY[0x23B867948](v19, -1, -1);
  }
  else
  {
    swift_release();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

  v20 = v2[2];
  MEMORY[0x24BDAC7A8](v21);
  *(&v22 - 2) = *(_QWORD *)(v4 + 80);
  *(&v22 - 1) = a1;
  type metadata accessor for Transaction();
  swift_getTupleTypeMetadata2();
  sub_23B56A678();
  sub_23B5301D4((unint64_t *)&qword_2542FAA50, MEMORY[0x24BDCEA88]);
  sub_23B56A1C8();
  sub_23B4FFC54((void (*)(uint64_t))sub_23B5302E4, (uint64_t)(&v22 - 4), v20);
}

uint64_t sub_23B52FF70(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  type metadata accessor for Transaction();
  swift_getTupleTypeMetadata2();
  v3 = sub_23B56A678();
  v4 = sub_23B56A900();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v11 - v5;
  v7 = sub_23B569FA0();
  MEMORY[0x24BDAC7A8](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v7);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v6, 1, 1, v3);
  sub_23B5301D4((unint64_t *)&qword_2542FAA50, MEMORY[0x24BDCEA88]);
  sub_23B56A1C8();
  return sub_23B56A1E0();
}

uint64_t sub_23B5300BC()
{
  uint64_t v0;

  v0 = sub_23B56A060();
  __swift_allocate_value_buffer(v0, qword_2542F9830);
  __swift_project_value_buffer(v0, (uint64_t)qword_2542F9830);
  return sub_23B56A054();
}

uint64_t sub_23B53013C(uint64_t *a1)
{
  return sub_23B52E080(a1);
}

uint64_t sub_23B530154()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for AsyncStreamProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncStreamProvider);
}

uint64_t method lookup function for AsyncStreamProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AsyncStreamProvider.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t sub_23B5301B8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_23B5301D4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_23B569FA0();
    result = MEMORY[0x23B867894](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23B530214(uint64_t a1)
{
  uint64_t v1;

  return sub_23B52FAE8(a1, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_23B530230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_23B569FA0();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void sub_23B5302A4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_23B569FA0() - 8) + 80);
  sub_23B52FC4C(v0 + ((v1 + 32) & ~v1));
}

uint64_t sub_23B5302E4(uint64_t a1)
{
  uint64_t v1;

  return sub_23B52FF70(a1, *(_QWORD *)(v1 + 24));
}

uint64_t sub_23B5302FC()
{
  uint64_t v0;

  v0 = sub_23B569FC4();
  __swift_allocate_value_buffer(v0, qword_2542F9B80);
  __swift_project_value_buffer(v0, (uint64_t)qword_2542F9B80);
  return sub_23B569FAC();
}

uint64_t static Locale.en_US_POSIX.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_2542F9AC8 != -1)
    swift_once();
  v2 = sub_23B569FC4();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_2542F9B80);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t Locale.acceptLanguageCode.getter()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;

  if (*(_QWORD *)(sub_23B569FB8() + 16))
  {
    v0 = (void *)objc_opt_self();
    v1 = (void *)sub_23B56A51C();
    swift_bridgeObjectRelease();
    v2 = objc_msgSend(v0, sel_minimizedLanguagesFromLanguages_, v1);

    sub_23B56A528();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9B58);
    sub_23B506D60();
    v3 = sub_23B56A204();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0x53552D6E65;
  }
  return v3;
}

uint64_t static DateIntervalParsingStrategy.Error.== infix(_:_:)()
{
  return 1;
}

uint64_t DateIntervalParsingStrategy.Error.hash(into:)()
{
  return sub_23B56AE70();
}

uint64_t DateIntervalParsingStrategy.Error.hashValue.getter()
{
  sub_23B56AE64();
  sub_23B56AE70();
  return sub_23B56AE88();
}

uint64_t DateIntervalParsingStrategy.parse(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[16];
  _QWORD *v59;
  _QWORD v60[2];
  uint64_t v61;

  v57 = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2C198);
  MEMORY[0x24BDAC7A8](v6);
  v61 = (uint64_t)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60[0] = 47;
  v60[1] = 0xE100000000000000;
  v59 = v60;
  swift_bridgeObjectRetain();
  v8 = sub_23B53144C(0x7FFFFFFFFFFFFFFFLL, 1, sub_23B531A94, (uint64_t)v58, a1, a2);
  v56 = v3;
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v60[0] = MEMORY[0x24BEE4AF8];
    sub_23B522468(0, v9, 0);
    v10 = v60[0];
    v11 = (uint64_t *)(v8 + 56);
    do
    {
      v13 = *(v11 - 3);
      v12 = *(v11 - 2);
      v14 = *(v11 - 1);
      v15 = *v11;
      swift_bridgeObjectRetain();
      v16 = MEMORY[0x23B866634](v13, v12, v14, v15);
      v18 = v17;
      swift_bridgeObjectRelease();
      v60[0] = v10;
      v20 = *(_QWORD *)(v10 + 16);
      v19 = *(_QWORD *)(v10 + 24);
      if (v20 >= v19 >> 1)
      {
        sub_23B522468(v19 > 1, v20 + 1, 1);
        v10 = v60[0];
      }
      *(_QWORD *)(v10 + 16) = v20 + 1;
      v21 = v10 + 16 * v20;
      *(_QWORD *)(v21 + 32) = v16;
      *(_QWORD *)(v21 + 40) = v18;
      v11 += 4;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v10 = MEMORY[0x24BEE4AF8];
  }
  if (*(_QWORD *)(v10 + 16) != 2)
    goto LABEL_12;
  result = sub_23B56A324();
  if (*(_QWORD *)(v10 + 16) < 2uLL)
  {
    __break(1u);
  }
  else
  {
    v24 = result;
    v25 = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v26 = sub_23B56A324();
    v28 = v27;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v55 = v24;
    v29 = sub_23B531B2C(1);
    v31 = v30;
    v33 = v32;
    v35 = v34;
    swift_bridgeObjectRelease();
    v36 = MEMORY[0x23B866634](v29, v31, v33, v35);
    v38 = v37;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v39 = v26;
    v40 = sub_23B531B2C(1);
    v42 = v41;
    v44 = v43;
    v46 = v45;
    swift_bridgeObjectRelease();
    v47 = MEMORY[0x23B866634](v40, v42, v44, v46);
    v49 = v48;
    swift_bridgeObjectRelease();
    v50 = sub_23B531BB4(v36, v38, v47, v49);
    if (v50 == 3)
    {
      swift_bridgeObjectRelease();
LABEL_12:
      swift_bridgeObjectRelease();
LABEL_13:
      sub_23B531AE8();
      swift_allocError();
      return swift_willThrow();
    }
    v51 = v61;
    sub_23B5308E4(v55, v25, v39, v28, v50, v61);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v52 = sub_23B569C10();
    v53 = *(_QWORD *)(v52 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52) == 1)
    {
      sub_23B5043F0(v51, &qword_256A2C198);
      goto LABEL_13;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 32))(v57, v51, v52);
  }
  return result;
}

uint64_t sub_23B5308E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v44;
  uint64_t v45;
  void (*v46)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t (*v48)(char *, uint64_t, uint64_t);
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  char v53;
  char *v54;
  void (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  char *v58;
  char *v59;
  void (*v60)(uint64_t, char *, uint64_t);
  char *v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  int v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t);
  void (*v67)(char *, uint64_t, uint64_t);
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v74 = a3;
  v75 = a4;
  v77 = a6;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AC0);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v71 - v14;
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v71 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v71 - v19;
  v76 = sub_23B569F40();
  v21 = *(_QWORD *)(v76 - 8);
  v22 = MEMORY[0x24BDAC7A8](v76);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v71 - v25;
  v27 = MEMORY[0x24BDAC7A8](v24);
  v28 = MEMORY[0x24BDAC7A8](v27);
  v72 = (char *)&v71 - v29;
  v30 = MEMORY[0x24BDAC7A8](v28);
  v73 = (char *)&v71 - v31;
  MEMORY[0x24BDAC7A8](v30);
  v36 = (char *)&v71 - v35;
  if (!a5)
  {
    v39 = v33;
    v78 = a1;
    v79 = a2;
    sub_23B532664();
    swift_bridgeObjectRetain();
    sub_23B569F4C();
    v50 = v76;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v76);
    v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v18, 1, v50);
    if (v44 != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v26, v18, v50);
      v52 = v75;
      swift_bridgeObjectRetain();
      sub_23B531D48(v74, v52);
      if ((v53 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t))(v21 + 8))(v26, v50);
LABEL_23:
        v65 = sub_23B569C10();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v77, 1, 1, v65);
      }
      v54 = v73;
      sub_23B569EE0();
      v55 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
      v55(v72, v26, v50);
      v55(v39, v54, v50);
      v56 = v77;
      sub_23B569C04();
      v57 = *(void (**)(char *, uint64_t))(v21 + 8);
      v57(v54, v50);
      v58 = v26;
      goto LABEL_18;
    }
    v45 = (uint64_t)v18;
LABEL_22:
    sub_23B5043F0(v45, &qword_2542F9AC0);
    goto LABEL_23;
  }
  if (a5 == 1)
  {
    v37 = v33;
    swift_bridgeObjectRetain();
    sub_23B531D48(a1, a2);
    if ((v38 & 1) != 0)
    {
      v42 = sub_23B569C10();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v77, 1, 1, v42);
    }
    v78 = v74;
    v79 = v75;
    sub_23B532664();
    swift_bridgeObjectRetain();
    sub_23B569F4C();
    v50 = v76;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v20, 0, 1, v76);
    v51 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v20, 1, v50);
    if (v51 == 1)
    {
      v45 = (uint64_t)v20;
      goto LABEL_22;
    }
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v36, v20, v50);
    v61 = v73;
    sub_23B569EEC();
    v62 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
    v62(v72, v61, v50);
    v62(v37, v36, v50);
    v56 = v77;
    sub_23B569C04();
    v57 = *(void (**)(char *, uint64_t))(v21 + 8);
    v57(v61, v50);
    v58 = v36;
LABEL_18:
    v57(v58, v50);
    v63 = sub_23B569C10();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v56, 0, 1, v63);
  }
  v40 = v34;
  v41 = v32;
  v78 = a1;
  v79 = a2;
  sub_23B532664();
  swift_bridgeObjectRetain();
  sub_23B569F4C();
  v46 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56);
  v47 = v76;
  v46(v15, 0, 1, v76);
  v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  v49 = v48(v15, 1, v47);
  if (v49 == 1)
  {
    v45 = (uint64_t)v15;
    goto LABEL_22;
  }
  v59 = v15;
  v60 = *(void (**)(uint64_t, char *, uint64_t))(v21 + 32);
  v60(v41, v59, v47);
  v78 = v74;
  v79 = v75;
  swift_bridgeObjectRetain();
  sub_23B569F4C();
  v46(v12, 0, 1, v47);
  v64 = v48(v12, 1, v47);
  if (v64 == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v41, v47);
    v45 = (uint64_t)v12;
    goto LABEL_22;
  }
  v60(v40, v12, v47);
  sub_23B5326A8();
  if ((sub_23B56A21C() & 1) != 0)
  {
    v66 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v66(v40, v47);
    v66(v41, v47);
    goto LABEL_23;
  }
  v67 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v67(v73, v41, v47);
  v67(v72, v40, v47);
  v68 = v77;
  sub_23B569C04();
  v69 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
  v69(v40, v47);
  v69(v41, v47);
  v70 = sub_23B569C10();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v68, 0, 1, v70);
}

uint64_t static DateIntervalParsingStrategy.== infix(_:_:)()
{
  return 1;
}

uint64_t sub_23B531018()
{
  return 0;
}

uint64_t sub_23B531024@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

void sub_23B531050(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_23B53105C()
{
  sub_23B531D04();
  return sub_23B56AF78();
}

uint64_t sub_23B531084()
{
  sub_23B531D04();
  return sub_23B56AF84();
}

uint64_t DateIntervalParsingStrategy.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2C1A8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23B531D04();
  sub_23B56AEC4();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t DateIntervalParsingStrategy.hashValue.getter()
{
  sub_23B56AE64();
  return sub_23B56AE88();
}

uint64_t DateIntervalParsingStrategy.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t sub_23B5311C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DateIntervalParsingStrategy.parse(_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_23B5311E4(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t sub_23B531208(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2C1A8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23B531D04();
  sub_23B56AEC4();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_23B5312CC()
{
  sub_23B56AE64();
  return sub_23B56AE88();
}

uint64_t sub_23B531300()
{
  sub_23B56AE64();
  return sub_23B56AE88();
}

Swift::Double_optional __swiftcall Double.init(string:)(Swift::String string)
{
  char v1;
  double v2;
  Swift::Double_optional result;

  v1 = sub_23B531D48(string._countAndFlagsBits, (uint64_t)string._object);
  result.value = v2;
  result.is_nil = v1;
  return result;
}

double sub_23B531348()
{
  uint64_t v0;
  char v1;
  double v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  double v7;
  double v8;
  char v9;
  double v10;
  double v11;
  char v12;

  v0 = sub_23B569CAC();
  if ((v1 & 1) != 0)
    v2 = 0.0;
  else
    v2 = (double)v0 * 60.0 * 60.0 * 24.0 * 365.25 + 0.0;
  v3 = sub_23B569CC4();
  if ((v4 & 1) == 0)
    v2 = v2 + (double)v3 * 60.0 * 60.0 * 24.0 * 30.4375;
  v5 = sub_23B569C7C();
  if ((v6 & 1) != 0)
    v7 = v2;
  else
    v7 = v2 + (double)v5 * 60.0 * 60.0 * 24.0;
  v8 = (double)sub_23B569C94() * 60.0 * 60.0;
  if ((v9 & 1) != 0)
    v8 = -0.0;
  v10 = v7 + v8;
  v11 = (double)sub_23B569CDC() * 60.0;
  if ((v12 & 1) != 0)
    v11 = -0.0;
  return v11 + v10;
}

uint64_t sub_23B53144C(uint64_t a1, char a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  unint64_t v48;
  _QWORD v50[4];

  v50[3] = a4;
  if (a1 < 0)
    goto LABEL_42;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = MEMORY[0x24BEE4AF8];
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = 15;
  v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (v12 = HIBYTE(a6) & 0xF) : (v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0)
      v11 = a5 & 0xFFFFFFFFFFFFLL;
    v30 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
      v30 = 11;
    sub_23B5318E8(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    v13 = *(_QWORD **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_39:
    swift_release();
    return (uint64_t)v13;
  }
  v42 = a1;
  v43 = v10;
  v48 = 4 * v12;
  v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v14 = 15;
  v15 = 15;
  v16 = 15;
  while (1)
  {
    v50[0] = sub_23B56A444();
    v50[1] = v17;
    v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
      break;
    v14 = sub_23B56A384();
LABEL_9:
    if (v48 == v14 >> 14)
      goto LABEL_29;
  }
  if (v15 >> 14 == v14 >> 14 && (a2 & 1) != 0)
  {
    v14 = sub_23B56A384();
    *(_QWORD *)(v47 + 16) = v14;
    v15 = v14;
    v16 = v14;
    goto LABEL_9;
  }
  if (v14 >> 14 < v15 >> 14)
    goto LABEL_41;
  v20 = sub_23B56A45C();
  v44 = v21;
  v45 = v20;
  v23 = v22;
  v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v13 = sub_23B50B4DC(0, v13[2] + 1, 1, v13);
  v27 = v13[2];
  v26 = v13[3];
  if (v27 >= v26 >> 1)
    v13 = sub_23B50B4DC((_QWORD *)(v26 > 1), v27 + 1, 1, v13);
  v13[2] = v27 + 1;
  v28 = &v13[4 * v27];
  v28[4] = v45;
  v28[5] = v23;
  v28[6] = v25;
  v28[7] = v44;
  *(_QWORD *)(v43 + 16) = v13;
  v29 = sub_23B56A384();
  v14 = v29;
  *(_QWORD *)(v47 + 16) = v29;
  if (v13[2] != v42)
  {
    v15 = v29;
    v16 = v29;
    goto LABEL_9;
  }
  v16 = v29;
  v15 = v29;
LABEL_29:
  if (v48 == v15 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_39;
  }
  if (v48 >= v16 >> 14)
  {
    v31 = sub_23B56A45C();
    v33 = v32;
    v35 = v34;
    v37 = v36;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = sub_23B50B4DC(0, v13[2] + 1, 1, v13);
    v39 = v13[2];
    v38 = v13[3];
    if (v39 >= v38 >> 1)
      v13 = sub_23B50B4DC((_QWORD *)(v38 > 1), v39 + 1, 1, v13);
    v13[2] = v39 + 1;
    v40 = &v13[4 * v39];
    v40[4] = v31;
    v40[5] = v33;
    v40[6] = v35;
    v40[7] = v37;
    *(_QWORD *)(v43 + 16) = v13;
    goto LABEL_38;
  }
LABEL_41:
  sub_23B56AC18();
  __break(1u);
LABEL_42:
  result = sub_23B56AC18();
  __break(1u);
  return result;
}

uint64_t sub_23B5318E8(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 16) >> 14;
  v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1)
    return v5 ^ 1u;
  if (a1 >> 14 >= v4)
  {
    v7 = sub_23B56A45C();
    v9 = v8;
    v11 = v10;
    v13 = v12;
    v14 = *(_QWORD **)(a4 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v14 = sub_23B50B4DC(0, v14[2] + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v17 = v14[2];
    v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      v14 = sub_23B50B4DC((_QWORD *)(v16 > 1), v17 + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v14[2] = v17 + 1;
    v18 = &v14[4 * v17];
    v18[4] = v7;
    v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }
  result = sub_23B56AC18();
  __break(1u);
  return result;
}

uint64_t sub_23B531A40(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_23B56AD98() & 1;
}

uint64_t sub_23B531A94(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1])
    return 1;
  else
    return sub_23B56AD98() & 1;
}

unint64_t sub_23B531AE8()
{
  unint64_t result;

  result = qword_256A2C1A0;
  if (!qword_256A2C1A0)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for DateIntervalParsingStrategy.Error, &type metadata for DateIntervalParsingStrategy.Error);
    atomic_store(result, (unint64_t *)&qword_256A2C1A0);
  }
  return result;
}

uint64_t sub_23B531B2C(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    sub_23B56A390();
    return sub_23B56A45C();
  }
  return result;
}

uint64_t sub_23B531BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v6;
  int v7;
  char v8;
  uint64_t result;
  char v10;

  v6 = a1 == 80 && a2 == 0xE100000000000000;
  v7 = v6;
  if (v6 || (sub_23B56AD98() & 1) != 0)
  {
    if ((a3 != 80 || a4 != 0xE100000000000000) && (sub_23B56AD98() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 1;
    }
    if (v7)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 2;
    }
  }
  v8 = sub_23B56AD98();
  swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  if (a3 == 80 && a4 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v10 = sub_23B56AD98();
  swift_bridgeObjectRelease();
  result = 0;
  if ((v10 & 1) == 0)
    return 2;
  return result;
}

unint64_t sub_23B531D04()
{
  unint64_t result;

  result = qword_256A2C1B0;
  if (!qword_256A2C1B0)
  {
    result = MEMORY[0x23B867894](&unk_23B570B24, &type metadata for DateIntervalParsingStrategy.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2C1B0);
  }
  return result;
}

uint64_t sub_23B531D48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  char v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  BOOL v43;
  char v44;
  char v45;
  BOOL v46;
  char v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[2];

  v55[1] = *MEMORY[0x24BDAC8D0];
  v4 = sub_23B569BE0();
  v52 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256A2C090);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2C1F0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_23B569D00();
  v50 = *(_QWORD *)(v13 - 8);
  v51 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_23B569FD0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v12, 1, 1, v16);
  v17 = sub_23B56A000();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 1, 1, v17);
  sub_23B569CF4();
  sub_23B569BC8();
  v54 = a2;
  v55[0] = 0;
  v53 = a1;
  sub_23B56A450();
  v18 = objc_allocWithZone(MEMORY[0x24BDD17A8]);
  v19 = (void *)sub_23B56A264();
  swift_bridgeObjectRelease();
  v20 = objc_msgSend(v18, sel_initWithString_, v19);

  sub_23B56A8DC();
  v22 = v21;
  swift_bridgeObjectRelease();
  if (v22 == 0.0)
  {

  }
  else
  {
    v49 = v4;
    sub_23B56A8DC();
    v24 = v23;
    swift_bridgeObjectRelease();
    if ((objc_msgSend(v20, sel_isAtEnd) & 1) != 0)
    {
LABEL_3:
      v25 = sub_23B531348();

      v22 = v25;
    }
    else
    {
      v26 = v24 != 0;
      while (objc_msgSend(v20, sel_scanInteger_, v55))
      {
        v28 = sub_23B56A8E8();
        if (!v29)
          break;
        v30 = v28;
        v31 = v29;
        if (v28 == 89 && v29 == 0xE100000000000000
          || (sub_23B56AD98() & 1) != 0
          || v30 == 21593 && v31 == 0xE200000000000000
          || (sub_23B56AD98() & 1) != 0)
        {
          sub_23B569CB8();
        }
        else if (v30 == 77 && v31 == 0xE100000000000000
               || ((v42 = sub_23B56AD98(), v30 == 21581) ? (v43 = v31 == 0xE200000000000000) : (v43 = 0),
                   !v43 ? (v44 = 0) : (v44 = 1),
                   (v42 & 1) != 0 || (v44 & 1) != 0 || (sub_23B56AD98() & 1) != 0))
        {
          if ((v26 & 1) != 0)
            sub_23B569CE8();
          else
            sub_23B569CD0();
        }
        else if (v30 == 68 && v31 == 0xE100000000000000
               || ((v45 = sub_23B56AD98(), v30 == 21572) ? (v46 = v31 == 0xE200000000000000) : (v46 = 0),
                   !v46 ? (v47 = 0) : (v47 = 1),
                   (v45 & 1) != 0 || (v47 & 1) != 0 || (sub_23B56AD98() & 1) != 0))
        {
          sub_23B569C88();
        }
        else if (v30 == 72 && v31 == 0xE100000000000000 || (sub_23B56AD98() & 1) != 0)
        {
          sub_23B569CA0();
        }
        if ((v31 & 0x2000000000000000) != 0)
          v32 = HIBYTE(v31) & 0xF;
        else
          v32 = v30 & 0xFFFFFFFFFFFFLL;
        v33 = sub_23B56A390();
        if ((v34 & 1) != 0)
          v33 = 15;
        if (4 * v32 < v33 >> 14)
          __break(1u);
        v35 = sub_23B56A45C();
        v37 = v36;
        v39 = v38;
        v41 = v40;
        swift_bridgeObjectRelease();
        if (v39 == 84 && v41 == 0xE100000000000000 && !(v35 >> 16) && v37 >> 16 == 1)
        {
          swift_bridgeObjectRelease();
          v26 = 1;
        }
        else
        {
          v27 = sub_23B56AD38();
          swift_bridgeObjectRelease();
          v26 |= v27;
        }
        if ((objc_msgSend(v20, sel_isAtEnd) & 1) != 0)
          goto LABEL_3;
      }

      v22 = 0.0;
    }
    v4 = v49;
  }
  (*(void (**)(char *, uint64_t))(v52 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v15, v51);
  return *(_QWORD *)&v22;
}

unint64_t sub_23B5323B4()
{
  unint64_t result;

  result = qword_256A2C1B8;
  if (!qword_256A2C1B8)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for DateIntervalParsingStrategy.Error, &type metadata for DateIntervalParsingStrategy.Error);
    atomic_store(result, (unint64_t *)&qword_256A2C1B8);
  }
  return result;
}

unint64_t sub_23B5323FC()
{
  unint64_t result;

  result = qword_256A2C1C0;
  if (!qword_256A2C1C0)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for DateIntervalParsingStrategy, &type metadata for DateIntervalParsingStrategy);
    atomic_store(result, (unint64_t *)&qword_256A2C1C0);
  }
  return result;
}

unint64_t sub_23B532444()
{
  unint64_t result;

  result = qword_256A2C1C8;
  if (!qword_256A2C1C8)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for DateIntervalParsingStrategy, &type metadata for DateIntervalParsingStrategy);
    atomic_store(result, (unint64_t *)&qword_256A2C1C8);
  }
  return result;
}

unint64_t sub_23B53248C()
{
  unint64_t result;

  result = qword_256A2C1D0;
  if (!qword_256A2C1D0)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for DateIntervalParsingStrategy, &type metadata for DateIntervalParsingStrategy);
    atomic_store(result, (unint64_t *)&qword_256A2C1D0);
  }
  return result;
}

unint64_t sub_23B5324D4()
{
  unint64_t result;

  result = qword_256A2C1D8;
  if (!qword_256A2C1D8)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for DateIntervalParsingStrategy, &type metadata for DateIntervalParsingStrategy);
    atomic_store(result, (unint64_t *)&qword_256A2C1D8);
  }
  return result;
}

ValueMetadata *type metadata accessor for DateIntervalParsingStrategy()
{
  return &type metadata for DateIntervalParsingStrategy;
}

uint64_t storeEnumTagSinglePayload for DateIntervalParsingStrategy.Error(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23B532568 + 4 * asc_23B5708E0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23B532588 + 4 * byte_23B5708E5[v4]))();
}

_BYTE *sub_23B532568(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23B532588(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23B532590(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23B532598(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23B5325A0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23B5325A8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DateIntervalParsingStrategy.Error()
{
  return &type metadata for DateIntervalParsingStrategy.Error;
}

ValueMetadata *type metadata accessor for DateIntervalParsingStrategy.CodingKeys()
{
  return &type metadata for DateIntervalParsingStrategy.CodingKeys;
}

unint64_t sub_23B5325D8()
{
  unint64_t result;

  result = qword_256A2C1E0;
  if (!qword_256A2C1E0)
  {
    result = MEMORY[0x23B867894](&unk_23B570AD4, &type metadata for DateIntervalParsingStrategy.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2C1E0);
  }
  return result;
}

unint64_t sub_23B532620()
{
  unint64_t result;

  result = qword_256A2C1E8;
  if (!qword_256A2C1E8)
  {
    result = MEMORY[0x23B867894](&unk_23B570AFC, &type metadata for DateIntervalParsingStrategy.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2C1E8);
  }
  return result;
}

unint64_t sub_23B532664()
{
  unint64_t result;

  result = qword_256A2C1F8;
  if (!qword_256A2C1F8)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for DateParsingStrategy, &type metadata for DateParsingStrategy);
    atomic_store(result, (unint64_t *)&qword_256A2C1F8);
  }
  return result;
}

unint64_t sub_23B5326A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256A2C200;
  if (!qword_256A2C200)
  {
    v1 = sub_23B569F40();
    result = MEMORY[0x23B867894](MEMORY[0x24BDCE948], v1);
    atomic_store(result, (unint64_t *)&qword_256A2C200);
  }
  return result;
}

uint64_t sub_23B5326F0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23B532714()
{
  return swift_deallocObject();
}

uint64_t Duration.nanoseconds.getter()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = sub_23B56AF54();
  v2 = 1000000000 * result;
  if ((unsigned __int128)(result * (__int128)1000000000) >> 64 != (1000000000 * result) >> 63)
  {
    __break(1u);
    goto LABEL_5;
  }
  result = v2 + v1 / 1000000000;
  if (__OFADD__(v2, v1 / 1000000000))
LABEL_5:
    __break(1u);
  return result;
}

uint64_t KeyedThrottle.__allocating_init(throttleInterval:)(double a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  KeyedThrottle.init(throttleInterval:)(a1);
  return v2;
}

uint64_t KeyedThrottle.init(throttleInterval:)(double a1)
{
  uint64_t v1;
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9CC0);
  v3 = swift_allocObject();
  *(_DWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v1 + 16) = v3;
  sub_23B569F40();
  swift_getTupleTypeMetadata2();
  sub_23B56A54C();
  *(_QWORD *)(v1 + 24) = sub_23B56A1A4();
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(double *)(v1 + 32) = a1;
  return v1;
}

void KeyedThrottle.throttle(key:block:)()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 16) + 16);
  os_unfair_lock_lock(v1);
  sub_23B514B04(v2, sub_23B533298);
  os_unfair_lock_unlock(v1);
}

uint64_t sub_23B5328B0(double *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t);

  v43 = a3;
  v42 = a4;
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  v38 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v40 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23B569F40();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v41 = (uint64_t)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v36 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AC0);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v37 = (uint64_t)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v36 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v36 - v21;
  v36 = (uint64_t *)(a1 + 3);
  swift_beginAccess();
  v23 = *((_QWORD *)a1 + 3);
  v24 = *(_QWORD *)(v6 + 88);
  v39 = a2;
  MEMORY[0x23B8664C0](a2, v23, v7, v9, v24);
  swift_endAccess();
  sub_23B533384((uint64_t)v22, (uint64_t)v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v20, 1, v9) == 1)
  {
    v25 = sub_23B5333CC((uint64_t)v20);
    goto LABEL_4;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v14, v20, v9);
  v26 = v41;
  sub_23B532C34(v41);
  sub_23B569EBC();
  v28 = v27;
  v29 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v29(v26, v9);
  v25 = ((uint64_t (*)(char *, uint64_t))v29)(v14, v9);
  if (a1[4] < v28)
  {
LABEL_4:
    if ((v43(v25) & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v40, v39, v7);
      v30 = v37;
      sub_23B532C34(v37);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v30, 0, 1, v9);
      swift_beginAccess();
      sub_23B56A1C8();
      sub_23B56A1E0();
      swift_endAccess();
    }
    return sub_23B5333CC((uint64_t)v22);
  }
  if (qword_2542FAD78 != -1)
    swift_once();
  v31 = sub_23B56A060();
  __swift_project_value_buffer(v31, (uint64_t)qword_2542FC458);
  v32 = sub_23B56A048();
  v33 = sub_23B56A84C();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v34 = 0;
    _os_log_impl(&dword_23B4F9000, v32, v33, "KeyedThrottle: Not dispatching, event is throttled", v34, 2u);
    MEMORY[0x23B867948](v34, -1, -1);
  }

  return sub_23B5333CC((uint64_t)v22);
}

uint64_t sub_23B532C34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AC0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v6 = *(void (**)(uint64_t))(v1 + 40);
  if (v6)
  {
    v7 = swift_retain();
    v6(v7);
    sub_23B50033C((uint64_t)v6);
    v8 = sub_23B569F40();
    v9 = *(_QWORD *)(v8 - 8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v5, 0, 1, v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) != 1)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v5, v8);
  }
  else
  {
    v11 = sub_23B569F40();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v5, 1, 1, v11);
  }
  sub_23B569F34();
  return sub_23B5333CC((uint64_t)v5);
}

Swift::Void __swiftcall KeyedThrottle.clearThrottleForKeysExcept(keys:)(Swift::OpaquePointer keys)
{
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;

  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 16) + 16);
  os_unfair_lock_lock(v2);
  sub_23B514B04(v3, sub_23B5332B4);
  os_unfair_lock_unlock(v2);
}

uint64_t sub_23B532DBC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  void (*v21)(char *, unint64_t, uint64_t);
  uint64_t v22;
  _QWORD *v23;
  uint64_t result;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34[3];
  uint64_t v35;

  v3 = a2;
  v5 = *a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AC0);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v32 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v5 + 80);
  v33 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v31 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = v11;
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v25 - v12;
  v14 = sub_23B569F40();
  swift_getTupleTypeMetadata2();
  sub_23B56A54C();
  v29 = *(_QWORD *)(v5 + 88);
  v30 = v14;
  v15 = sub_23B56A1A4();
  v35 = v15;
  v16 = swift_bridgeObjectRetain();
  if (MEMORY[0x23B866880](v16, v9))
  {
    v26 = v3;
    v27 = v2;
    v17 = 0;
    v28 = v3 + 3;
    v18 = v31;
    v19 = v29;
    while (1)
    {
      v20 = sub_23B56A564();
      sub_23B56A540();
      if ((v20 & 1) != 0)
      {
        v21 = *(void (**)(char *, unint64_t, uint64_t))(v33 + 16);
        v21(v13, a1+ ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))+ *(_QWORD *)(v33 + 72) * v17, v9);
        v22 = v17 + 1;
        if (__OFADD__(v17, 1))
          goto LABEL_10;
      }
      else
      {
        result = sub_23B56AAA4();
        if (v25 != 8)
        {
          __break(1u);
          return result;
        }
        v34[0] = result;
        v21 = *(void (**)(char *, unint64_t, uint64_t))(v33 + 16);
        v21(v13, (unint64_t)v34, v9);
        swift_unknownObjectRelease();
        v22 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_10:
          __break(1u);
LABEL_11:
          swift_bridgeObjectRelease();
          v15 = v35;
          v3 = v26;
          goto LABEL_13;
        }
      }
      v21(v18, (unint64_t)v13, v9);
      v23 = v28;
      swift_beginAccess();
      MEMORY[0x23B8664C0](v13, *v23, v9, v30, v19);
      swift_endAccess();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v13, v9);
      sub_23B56A1C8();
      sub_23B56A1E0();
      ++v17;
      if (v22 == MEMORY[0x23B866880](a1, v9))
        goto LABEL_11;
    }
  }
  swift_bridgeObjectRelease();
LABEL_13:
  swift_beginAccess();
  v3[3] = v15;
  return swift_bridgeObjectRelease();
}

uint64_t sub_23B5330B0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 40);
  if (v4)
    v5 = *(_QWORD *)(v3 + 48);
  else
    v5 = 0;
  *a2 = v4;
  a2[1] = v5;
  return sub_23B5332CC(v4);
}

uint64_t sub_23B533100(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  if (*a1)
    v3 = a1[1];
  else
    v3 = 0;
  v4 = *a2;
  swift_beginAccess();
  v5 = *(_QWORD *)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v2;
  *(_QWORD *)(v4 + 48) = v3;
  sub_23B5332CC(v2);
  return sub_23B50033C(v5);
}

uint64_t KeyedThrottle.dateProvider.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 40);
  sub_23B5332CC(v1);
  return v1;
}

uint64_t KeyedThrottle.dateProvider.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return sub_23B50033C(v5);
}

uint64_t (*KeyedThrottle.dateProvider.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t KeyedThrottle.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  sub_23B50033C(*(_QWORD *)(v0 + 40));
  return v0;
}

uint64_t KeyedThrottle.__deallocating_deinit()
{
  KeyedThrottle.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_23B533298()
{
  uint64_t v0;

  return sub_23B5328B0(*(double **)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t (**)(uint64_t))(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_23B5332B4()
{
  uint64_t v0;

  return sub_23B532DBC(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24));
}

uint64_t sub_23B5332CC(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t sub_23B5332E4()
{
  return 16;
}

__n128 sub_23B5332F0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23B5332FC()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for KeyedThrottle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KeyedThrottle);
}

uint64_t method lookup function for KeyedThrottle()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of KeyedThrottle.__allocating_init(throttleInterval:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t sub_23B533384(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23B5333CC(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AC0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t DateInterval.init<A>(_:strategy:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t inited;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t MyBaseE5remap_15substitutionMapS2S_SDyS2SGtFZ_0;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, _QWORD, uint64_t, uint64_t);
  void (*v31)(uint64_t, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v36 = a5;
  v37 = a3;
  v34 = a6;
  v35 = a1;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2C198);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23B569F40();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256A2C208);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23B56F770;
  *(_QWORD *)(inited + 32) = 5721934;
  *(_QWORD *)(inited + 40) = 0xE300000000000000;
  sub_23B569F34();
  if (qword_256A2B9F8 != -1)
    swift_once();
  v16 = (void *)qword_256A2C790;
  v17 = (void *)sub_23B569ED4();
  v18 = objc_msgSend(v16, sel_stringFromDate_, v17);

  v19 = sub_23B56A288();
  v21 = v20;

  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  *(_QWORD *)(inited + 48) = v19;
  *(_QWORD *)(inited + 56) = v21;
  v22 = sub_23B50F474(inited);
  MyBaseE5remap_15substitutionMapS2S_SDyS2SGtFZ_0 = _s10Foundation12DateIntervalV10FindMyBaseE5remap_15substitutionMapS2S_SDyS2SGtFZ_0(v35, a2, v22);
  v25 = v24;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v38 = MyBaseE5remap_15substitutionMapS2S_SDyS2SGtFZ_0;
  v39 = v25;
  v26 = v37;
  sub_23B569C1C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(v26, a4);
  swift_bridgeObjectRelease();
  v27 = sub_23B569C10();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56);
  v29(v10, 0, 1, v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v10, 1, v27) == 1)
  {
    sub_23B5339BC((uint64_t)v10);
    sub_23B569C10();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v34, 1, 1, v27);
  }
  else
  {
    v31 = *(void (**)(uint64_t, char *, uint64_t))(v28 + 32);
    v32 = v34;
    v31(v34, v10, v27);
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v29)(v32, 0, 1, v27);
  }
}

uint64_t _s10Foundation12DateIntervalV10FindMyBaseE5remap_15substitutionMapS2S_SDyS2SGtFZ_0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t result;
  uint64_t v33;
  _QWORD v34[4];
  _QWORD v35[2];

  v35[0] = 47;
  v35[1] = 0xE100000000000000;
  v34[2] = v35;
  swift_bridgeObjectRetain();
  v6 = sub_23B53144C(0x7FFFFFFFFFFFFFFFLL, 1, sub_23B5339FC, (uint64_t)v34, a1, a2);
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
  {
    swift_bridgeObjectRelease();
    v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
      goto LABEL_15;
LABEL_9:
    v20 = sub_23B56A324();
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_14;
    v22 = sub_23B5015D8(v20, v21);
    if ((v23 & 1) == 0)
      goto LABEL_14;
    v24 = (uint64_t *)(*(_QWORD *)(a3 + 56) + 16 * v22);
    v26 = *v24;
    v25 = v24[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      if (v8[2])
      {
LABEL_13:
        v8[4] = v26;
        v8[5] = v25;
LABEL_14:
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
    }
    else
    {
      v8 = sub_23B50CA08(v8);
      if (v8[2])
        goto LABEL_13;
    }
    __break(1u);
LABEL_25:
    result = (uint64_t)sub_23B50CA08(v8);
    v8 = (_QWORD *)result;
    goto LABEL_19;
  }
  v35[0] = MEMORY[0x24BEE4AF8];
  sub_23B522468(0, v7, 0);
  v8 = (_QWORD *)v35[0];
  v9 = (uint64_t *)(v6 + 56);
  do
  {
    v10 = *(v9 - 3);
    v11 = *(v9 - 2);
    v12 = *(v9 - 1);
    v13 = *v9;
    swift_bridgeObjectRetain();
    v14 = MEMORY[0x23B866634](v10, v11, v12, v13);
    v16 = v15;
    swift_bridgeObjectRelease();
    v35[0] = v8;
    v18 = v8[2];
    v17 = v8[3];
    if (v18 >= v17 >> 1)
    {
      sub_23B522468(v17 > 1, v18 + 1, 1);
      v8 = (_QWORD *)v35[0];
    }
    v8[2] = v18 + 1;
    v19 = &v8[2 * v18];
    v19[4] = v14;
    v19[5] = v16;
    v9 += 4;
    --v7;
  }
  while (v7);
  swift_bridgeObjectRelease();
  if (v8[2])
    goto LABEL_9;
LABEL_15:
  if (v8[2] < 2uLL)
  {
LABEL_22:
    v35[0] = v8;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9B58);
    sub_23B506D60();
    v33 = sub_23B56A204();
    swift_bridgeObjectRelease_n();
    return v33;
  }
  v27 = sub_23B56A324();
  if (!*(_QWORD *)(a3 + 16) || (v29 = sub_23B5015D8(v27, v28), (v30 & 1) == 0))
  {
LABEL_21:
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  v31 = (uint64_t *)(*(_QWORD *)(a3 + 56) + 16 * v29);
  a3 = *v31;
  v25 = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_25;
LABEL_19:
  if (v8[2] >= 2uLL)
  {
    v8[6] = a3;
    v8[7] = v25;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_23B5339BC(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2C198);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23B5339FC(_QWORD *a1)
{
  uint64_t v1;

  return sub_23B531A40(a1, *(_QWORD **)(v1 + 16)) & 1;
}

uint64_t static BinaryEncodingError.== infix(_:_:)()
{
  return 1;
}

uint64_t BinaryEncodingError.hash(into:)()
{
  return sub_23B56AE70();
}

uint64_t BinaryEncodingError.hashValue.getter()
{
  sub_23B56AE64();
  sub_23B56AE70();
  return sub_23B56AE88();
}

uint64_t RawRepresentable<>.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  v15 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v9 = (char *)&v16[-1] - v8;
  v11 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v10 + 8))(v16, v11, v10);
  sub_23B56A4BC();
  v12 = v17;
  v13 = v18;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v16, v17);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 16))(v9, AssociatedTypeWitness, v15, v12, v13);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t RawRepresentable<>.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v2 = sub_23B56A2E8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v14, v6, v7);
  sub_23B56A4BC();
  v8 = v13[1];
  v9 = v13[2];
  sub_23B56A2C4();
  v10 = v15;
  v11 = v16;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v14, v15);
  (*(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(v11 + 8))(v8, v9, v5, v10, v11);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
}

unint64_t sub_23B533D18()
{
  unint64_t result;

  result = qword_256A2C210;
  if (!qword_256A2C210)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for BinaryEncodingError, &type metadata for BinaryEncodingError);
    atomic_store(result, (unint64_t *)&qword_256A2C210);
  }
  return result;
}

uint64_t dispatch thunk of BinaryEncodable.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of BinaryEncoding.container()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t storeEnumTagSinglePayload for BinaryEncodingError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23B533DBC + 4 * byte_23B570BE0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23B533DDC + 4 * byte_23B570BE5[v4]))();
}

_BYTE *sub_23B533DBC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23B533DDC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23B533DE4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23B533DEC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23B533DF4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23B533DFC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BinaryEncodingError()
{
  return &type metadata for BinaryEncodingError;
}

uint64_t dispatch thunk of BinaryEncodingContaining.encode(_:encoding:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

id CodableBox.contents.getter()
{
  id *v0;

  return *v0;
}

uint64_t CodableBox.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t CodableBox.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v10;
  id v11[6];

  v11[5] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = *v1;
  v11[0] = 0;
  v4 = objc_msgSend((id)objc_opt_self(), sel_archivedDataWithRootObject_requiringSecureCoding_error_, v3, 1, v11);
  v5 = v11[0];
  if (v4)
  {
    v6 = sub_23B569E2C();
    v8 = v7;

    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    sub_23B56AEB8();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v11, (uint64_t)v11[3]);
    sub_23B533FE4();
    sub_23B56ADBC();
    sub_23B504944(v6, v8);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    v10 = v5;
    sub_23B569D54();

    return swift_willThrow();
  }
}

unint64_t sub_23B533FE4()
{
  unint64_t result;

  result = qword_256A2C220;
  if (!qword_256A2C220)
  {
    result = MEMORY[0x23B867894](MEMORY[0x24BDCDDF8], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_256A2C220);
  }
  return result;
}

uint64_t CodableBox.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v15[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23B56AEA0();
  if (!v3)
  {
    __swift_project_boxed_opaque_existential_1(v15, v15[3]);
    sub_23B534198();
    sub_23B56ADB0();
    sub_23B5341DC();
    v7 = sub_23B56A858();
    v11 = v7;
    if (v7)
    {
      sub_23B504944(v13, v14);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
      *a3 = v11;
    }
    else
    {
      v12 = type metadata accessor for CodableBox.Error(0, a2, v8, v9);
      MEMORY[0x23B867894](&protocol conformance descriptor for CodableBox<A>.Error, v12);
      swift_allocError();
      swift_willThrow();
      sub_23B504944(v13, v14);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t sub_23B534198()
{
  unint64_t result;

  result = qword_256A2C228;
  if (!qword_256A2C228)
  {
    result = MEMORY[0x23B867894](MEMORY[0x24BDCDE38], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_256A2C228);
  }
  return result;
}

unint64_t sub_23B5341DC()
{
  unint64_t result;

  result = qword_256A2C230[0];
  if (!qword_256A2C230[0])
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, qword_256A2C230);
  }
  return result;
}

uint64_t type metadata accessor for CodableBox.Error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CodableBox.Error);
}

uint64_t sub_23B534224@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return CodableBox.init(from:)(a1, *(_QWORD *)(a2 + 16), a3);
}

uint64_t sub_23B53423C(_QWORD *a1)
{
  return CodableBox.encode(to:)(a1);
}

uint64_t static CodableBox.Error.== infix(_:_:)()
{
  return 1;
}

uint64_t CodableBox.Error.hash(into:)()
{
  return sub_23B56AE70();
}

uint64_t CodableBox.Error.hashValue.getter()
{
  sub_23B56AE64();
  sub_23B56AE70();
  return sub_23B56AE88();
}

void sub_23B5342BC()
{
  JUMPOUT(0x23B867894);
}

uint64_t sub_23B5342CC()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for CodableBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CodableBox);
}

uint64_t sub_23B5342E0()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23B5342E8(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23B534328 + 4 * byte_23B570D10[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23B534348 + 4 * byte_23B570D15[v4]))();
}

_BYTE *sub_23B534328(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23B534348(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23B534350(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23B534358(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23B534360(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23B534368(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t UnsafeSendableBox.contents.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 88);
  swift_beginAccess();
  v4 = sub_23B56A900();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t UnsafeSendableBox.contents.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 88);
  swift_beginAccess();
  v4 = sub_23B56A900();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*UnsafeSendableBox.contents.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t UnsafeSendableBox.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 56))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 88), 1, 1);
  return v0;
}

uint64_t UnsafeSendableBox.init()()
{
  uint64_t v0;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 56))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 88), 1, 1);
  return v0;
}

uint64_t UnsafeSendableBox.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 88);
  v2 = sub_23B56A900();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t UnsafeSendableBox.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 88);
  v2 = sub_23B56A900();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_23B5345B8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23B56A900();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for UnsafeSendableBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnsafeSendableBox);
}

uint64_t method lookup function for UnsafeSendableBox()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of UnsafeSendableBox.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

void withPowerAssertion<A>(reason:type:timeout:_:)(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(uint64_t), double a5)
{
  sub_23B53465C(a1, a2, a5, a3, a4);
}

void sub_23B53465C(uint64_t a1, unint64_t a2, double a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v5;
  IOPMAssertionID v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t);
  uint64_t v22;

  sub_23B5363C0(a3);
  v9 = sub_23B535504();
  swift_bridgeObjectRelease();
  if (!v5)
  {
    v21 = a5;
    if (qword_256A2B9D0 != -1)
      swift_once();
    v10 = sub_23B56A060();
    __swift_project_value_buffer(v10, (uint64_t)qword_256A33B80);
    swift_bridgeObjectRetain_n();
    v11 = sub_23B56A048();
    v12 = sub_23B56A84C();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = swift_slowAlloc();
      v20 = swift_slowAlloc();
      v22 = v20;
      *(_DWORD *)v13 = 136315394;
      swift_bridgeObjectRetain();
      sub_23B5034E4(a1, a2, &v22);
      sub_23B56A918();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v13 + 12) = 1024;
      sub_23B56A918();
      _os_log_impl(&dword_23B4F9000, v11, v12, "Successfully created power assertion %s:%u", (uint8_t *)v13, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x23B867948](v20, -1, -1);
      MEMORY[0x23B867948](v13, -1, -1);

    }
    else
    {

      v14 = swift_bridgeObjectRelease_n();
    }
    v21(v14);
    sub_23B5357E0(v9);
    swift_bridgeObjectRetain_n();
    v15 = sub_23B56A048();
    v16 = sub_23B56A84C();
    if (os_log_type_enabled(v15, v16))
    {
      v18 = swift_slowAlloc();
      v19 = swift_slowAlloc();
      v22 = v19;
      *(_DWORD *)v18 = 136315394;
      swift_bridgeObjectRetain();
      sub_23B5034E4(a1, a2, &v22);
      sub_23B56A918();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v18 + 12) = 1024;
      sub_23B56A918();
      _os_log_impl(&dword_23B4F9000, v15, v16, "Successfully released power assertion %s:%u", (uint8_t *)v18, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x23B867948](v19, -1, -1);
      MEMORY[0x23B867948](v18, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t withPowerAssertion<A>(reason:type:timeout:_:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v16;

  v16 = swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v16;
  *(_QWORD *)v16 = v8;
  *(_QWORD *)(v16 + 8) = sub_23B534C08;
  *(_QWORD *)(v16 + 80) = a7;
  *(_QWORD *)(v16 + 88) = a8;
  *(_QWORD *)(v16 + 72) = a6;
  *(double *)(v16 + 64) = a4;
  *(_QWORD *)(v16 + 48) = a2;
  *(_QWORD *)(v16 + 56) = a3;
  *(_QWORD *)(v16 + 40) = a1;
  return swift_task_switch();
}

uint64_t sub_23B534C08()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 24) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23B534C74()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B534C80(uint64_t a1, uint64_t a2, uint64_t a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  *(_QWORD *)(v8 + 80) = a7;
  *(_QWORD *)(v8 + 88) = a8;
  *(_QWORD *)(v8 + 72) = a6;
  *(double *)(v8 + 64) = a4;
  *(_QWORD *)(v8 + 48) = a2;
  *(_QWORD *)(v8 + 56) = a3;
  *(_QWORD *)(v8 + 40) = a1;
  return swift_task_switch();
}

uint64_t sub_23B534CA8()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v12)(_QWORD);
  uint64_t v13;

  sub_23B5363C0(*(double *)(v0 + 64));
  v1 = sub_23B535504();
  *(_DWORD *)(v0 + 132) = v1;
  swift_bridgeObjectRelease();
  if (qword_256A2B9D0 != -1)
    swift_once();
  v2 = sub_23B56A060();
  *(_QWORD *)(v0 + 96) = __swift_project_value_buffer(v2, (uint64_t)qword_256A33B80);
  swift_bridgeObjectRetain_n();
  v3 = sub_23B56A048();
  v4 = sub_23B56A84C();
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 56);
  if (v5)
  {
    v7 = *(_QWORD *)(v0 + 48);
    v8 = swift_slowAlloc();
    v9 = swift_slowAlloc();
    v13 = v9;
    *(_DWORD *)v8 = 136315394;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 32) = sub_23B5034E4(v7, v6, &v13);
    sub_23B56A918();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v8 + 12) = 1024;
    *(_DWORD *)(v0 + 128) = v1;
    sub_23B56A918();
    _os_log_impl(&dword_23B4F9000, v3, v4, "Successfully created power assertion %s:%u", (uint8_t *)v8, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v9, -1, -1);
    MEMORY[0x23B867948](v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v12 = (uint64_t (*)(_QWORD))(**(int **)(v0 + 72) + *(_QWORD *)(v0 + 72));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v10;
  *v10 = v0;
  v10[1] = sub_23B534F0C;
  return v12(*(_QWORD *)(v0 + 40));
}

uint64_t sub_23B534F0C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B534F70()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19[2];

  v1 = *(_QWORD *)(v0 + 112);
  sub_23B5357E0(*(_DWORD *)(v0 + 132));
  if (v1)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(v0 + 88) - 8) + 8))(*(_QWORD *)(v0 + 40));
    sub_23B5357E0(*(_DWORD *)(v0 + 132));
    swift_bridgeObjectRetain_n();
    v8 = sub_23B56A048();
    v9 = sub_23B56A84C();
    if (os_log_type_enabled(v8, (os_log_type_t)v9))
    {
      v17 = *(_DWORD *)(v0 + 132);
      v11 = *(_QWORD *)(v0 + 56);
      v16 = *(_QWORD *)(v0 + 48);
      v12 = swift_slowAlloc();
      v13 = swift_slowAlloc();
      v19[0] = v13;
      *(_DWORD *)v12 = 136315394;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 16) = sub_23B5034E4(v16, v11, v19);
      sub_23B56A918();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v12 + 12) = 1024;
      *(_DWORD *)(v0 + 120) = v17;
      sub_23B56A918();
      _os_log_impl(&dword_23B4F9000, v8, (os_log_type_t)v9, "Successfully released power assertion %s:%u", (uint8_t *)v12, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x23B867948](v13, -1, -1);
      MEMORY[0x23B867948](v12, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    swift_willThrow();
    v14 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    swift_bridgeObjectRetain_n();
    v2 = sub_23B56A048();
    v3 = sub_23B56A84C();
    if (os_log_type_enabled(v2, v3))
    {
      v18 = *(_DWORD *)(v0 + 132);
      v5 = *(_QWORD *)(v0 + 48);
      v4 = *(_QWORD *)(v0 + 56);
      v6 = swift_slowAlloc();
      v7 = swift_slowAlloc();
      v19[0] = v7;
      *(_DWORD *)v6 = 136315394;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 24) = sub_23B5034E4(v5, v4, v19);
      sub_23B56A918();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v6 + 12) = 1024;
      *(_DWORD *)(v0 + 124) = v18;
      sub_23B56A918();
      _os_log_impl(&dword_23B4F9000, v2, v3, "Successfully released power assertion %s:%u", (uint8_t *)v6, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x23B867948](v7, -1, -1);
      MEMORY[0x23B867948](v6, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    v14 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v14();
}

uint64_t sub_23B5352B0()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  uint64_t v9;

  sub_23B5357E0(*(_DWORD *)(v0 + 132));
  swift_bridgeObjectRetain_n();
  v1 = sub_23B56A048();
  v2 = sub_23B56A84C();
  if (os_log_type_enabled(v1, (os_log_type_t)v2))
  {
    v8 = *(_DWORD *)(v0 + 132);
    v4 = *(_QWORD *)(v0 + 48);
    v3 = *(_QWORD *)(v0 + 56);
    v5 = swift_slowAlloc();
    v6 = swift_slowAlloc();
    v9 = v6;
    *(_DWORD *)v5 = 136315394;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 16) = sub_23B5034E4(v4, v3, &v9);
    sub_23B56A918();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v5 + 12) = 1024;
    *(_DWORD *)(v0 + 120) = v8;
    sub_23B56A918();
    _os_log_impl(&dword_23B4F9000, v1, (os_log_type_t)v2, "Successfully released power assertion %s:%u", (uint8_t *)v5, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v6, -1, -1);
    MEMORY[0x23B867948](v5, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B535474()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_23B56A060();
  __swift_allocate_value_buffer(v0, qword_256A33B80);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_256A33B80);
  if (qword_256A2B9D8 != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)qword_256A33B98);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_23B535504()
{
  const __CFDictionary *v0;
  IOReturn v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v11;
  void *v12;
  IOPMAssertionID AssertionID;
  uint64_t v14[2];

  v14[1] = *MEMORY[0x24BDAC8D0];
  AssertionID = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256A2C498);
  v0 = (const __CFDictionary *)sub_23B56A180();
  v1 = IOPMAssertionCreateWithProperties(v0, &AssertionID);

  if (!v1)
    return AssertionID;
  if (qword_256A2B9D0 != -1)
    swift_once();
  v2 = sub_23B56A060();
  __swift_project_value_buffer(v2, (uint64_t)qword_256A33B80);
  swift_bridgeObjectRetain_n();
  v3 = sub_23B56A048();
  v4 = sub_23B56A834();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc();
    v6 = swift_slowAlloc();
    v14[0] = v6;
    *(_DWORD *)v5 = 136315394;
    swift_bridgeObjectRetain();
    v7 = sub_23B56A198();
    v9 = v8;
    swift_bridgeObjectRelease();
    sub_23B5034E4(v7, v9, v14);
    sub_23B56A918();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 1024;
    sub_23B56A918();
    _os_log_impl(&dword_23B4F9000, v3, v4, "IOPMAssertionCreateWithProperties %s failed with error: %d", (uint8_t *)v5, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v6, -1, -1);
    MEMORY[0x23B867948](v5, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_23B56A288();
  v11 = objc_allocWithZone(MEMORY[0x24BDD1540]);
  v12 = (void *)sub_23B56A264();
  swift_bridgeObjectRelease();
  objc_msgSend(v11, sel_initWithDomain_code_userInfo_, v12, v1, 0);

  return swift_willThrow();
}

uint64_t sub_23B5357E0(IOPMAssertionID a1)
{
  uint64_t result;
  int v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  id v7;
  void *v8;

  result = IOPMAssertionRelease(a1);
  if ((_DWORD)result)
  {
    v2 = result;
    if (qword_256A2B9D0 != -1)
      swift_once();
    v3 = sub_23B56A060();
    __swift_project_value_buffer(v3, (uint64_t)qword_256A33B80);
    v4 = sub_23B56A048();
    v5 = sub_23B56A834();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v6 = 67109120;
      sub_23B56A918();
      _os_log_impl(&dword_23B4F9000, v4, v5, "IOPMAssertionRelease failed with error: %d", v6, 8u);
      MEMORY[0x23B867948](v6, -1, -1);
    }

    sub_23B56A288();
    v7 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v8 = (void *)sub_23B56A264();
    swift_bridgeObjectRelease();
    objc_msgSend(v7, sel_initWithDomain_code_userInfo_, v8, v2, 0);

    return swift_willThrow();
  }
  return result;
}

uint64_t static PowerAssertion.AssertionType.== infix(_:_:)()
{
  return 1;
}

uint64_t PowerAssertion.AssertionType.hash(into:)()
{
  return sub_23B56AE70();
}

uint64_t PowerAssertion.AssertionType.hashValue.getter()
{
  sub_23B56AE64();
  sub_23B56AE70();
  return sub_23B56AE88();
}

unint64_t sub_23B5359D0()
{
  unint64_t result;

  result = qword_256A2C490;
  if (!qword_256A2C490)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for PowerAssertion.AssertionType, &type metadata for PowerAssertion.AssertionType);
    atomic_store(result, (unint64_t *)&qword_256A2C490);
  }
  return result;
}

ValueMetadata *type metadata accessor for PowerAssertion()
{
  return &type metadata for PowerAssertion;
}

uint64_t storeEnumTagSinglePayload for PowerAssertion.AssertionType(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23B535A64 + 4 * byte_23B570EB0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23B535A84 + 4 * byte_23B570EB5[v4]))();
}

_BYTE *sub_23B535A64(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23B535A84(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23B535A8C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23B535A94(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23B535A9C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23B535AA4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PowerAssertion.AssertionType()
{
  return &type metadata for PowerAssertion.AssertionType;
}

uint64_t sub_23B535AC0()
{
  uint64_t v0;

  v0 = sub_23B56A060();
  __swift_allocate_value_buffer(v0, qword_256A33B98);
  __swift_project_value_buffer(v0, (uint64_t)qword_256A33B98);
  return sub_23B56A054();
}

_OWORD *sub_23B535B40(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _OWORD *v21;
  _OWORD *result;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  type metadata accessor for CFString(0);
  v11 = v10;
  v30 = v10;
  *(_QWORD *)&v29 = a1;
  v12 = (_QWORD *)*a5;
  v14 = sub_23B5015D8(a2, a3);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a4 & 1) != 0)
  {
LABEL_7:
    v20 = (_QWORD *)*a5;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (_OWORD *)(v20[7] + 32 * v14);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      return sub_23B503EB4(&v29, v21);
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_23B526B58();
    goto LABEL_7;
  }
  sub_23B525BC8(v17, a4 & 1);
  v23 = sub_23B5015D8(a2, a3);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    result = (_OWORD *)sub_23B56AE10();
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = (_QWORD *)*a5;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  v25 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v29, v11);
  MEMORY[0x24BDAC7A8](v25);
  v27 = (uint64_t *)((char *)&v29 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v28 + 16))(v27);
  sub_23B536320(v14, a2, a3, *v27, v20);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v29);
  return (_OWORD *)swift_bridgeObjectRetain();
}

_OWORD *sub_23B535CE0(uint64_t a1, uint64_t a2, char a3, _QWORD *a4, double a5)
{
  uint64_t v9;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  double *v25;
  uint64_t v26;
  double v27[3];
  uint64_t v28;

  v27[0] = a5;
  v9 = MEMORY[0x24BEE13C8];
  v28 = MEMORY[0x24BEE13C8];
  v10 = (_QWORD *)*a4;
  v12 = sub_23B5015D8(a1, a2);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_14;
  }
  v16 = v11;
  v17 = v10[3];
  if (v17 >= v15 && (a3 & 1) != 0)
  {
LABEL_7:
    v18 = (_QWORD *)*a4;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = (_OWORD *)(v18[7] + 32 * v12);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
      return sub_23B503EB4(v27, v19);
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a3 & 1) == 0)
  {
    sub_23B526B58();
    goto LABEL_7;
  }
  sub_23B525BC8(v15, a3 & 1);
  v21 = sub_23B5015D8(a1, a2);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_14:
    result = (_OWORD *)sub_23B56AE10();
    __break(1u);
    return result;
  }
  v12 = v21;
  v18 = (_QWORD *)*a4;
  if ((v16 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  v23 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v27, v9);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (double *)((char *)v27 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(double *))(v26 + 16))(v25);
  sub_23B5362A0(v12, a1, a2, v18, *v25);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  return (_OWORD *)swift_bridgeObjectRetain();
}

_OWORD *sub_23B535E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, _QWORD *a6)
{
  uint64_t v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  _OWORD *v20;
  _OWORD *result;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  v10 = MEMORY[0x24BEE0D00];
  v29 = MEMORY[0x24BEE0D00];
  *(_QWORD *)&v28 = a1;
  *((_QWORD *)&v28 + 1) = a2;
  v11 = (_QWORD *)*a6;
  v13 = sub_23B5015D8(a3, a4);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  v17 = v12;
  v18 = v11[3];
  if (v18 >= v16 && (a5 & 1) != 0)
  {
LABEL_7:
    v19 = (_QWORD *)*a6;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = (_OWORD *)(v19[7] + 32 * v13);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
      return sub_23B503EB4(&v28, v20);
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a5 & 1) == 0)
  {
    sub_23B526B58();
    goto LABEL_7;
  }
  sub_23B525BC8(v16, a5 & 1);
  v22 = sub_23B5015D8(a3, a4);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_14:
    result = (_OWORD *)sub_23B56AE10();
    __break(1u);
    return result;
  }
  v13 = v22;
  v19 = (_QWORD *)*a6;
  if ((v17 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  v24 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v28, v10);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (uint64_t *)((char *)&v28 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v27 + 16))(v26);
  sub_23B536220(v13, a3, a4, *v26, v26[1], v19);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
  return (_OWORD *)swift_bridgeObjectRetain();
}

_OWORD *sub_23B536008(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v9;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  *(_QWORD *)&v27 = a1;
  v9 = MEMORY[0x24BEE1768];
  v28 = MEMORY[0x24BEE1768];
  v10 = (_QWORD *)*a5;
  v12 = sub_23B5015D8(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_14;
  }
  v16 = v11;
  v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    v18 = (_QWORD *)*a5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = (_OWORD *)(v18[7] + 32 * v12);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
      return sub_23B503EB4(&v27, v19);
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_23B526B58();
    goto LABEL_7;
  }
  sub_23B525BC8(v15, a4 & 1);
  v21 = sub_23B5015D8(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_14:
    result = (_OWORD *)sub_23B56AE10();
    __break(1u);
    return result;
  }
  v12 = v21;
  v18 = (_QWORD *)*a5;
  if ((v16 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  v23 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v27, v9);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (uint64_t *)((char *)&v27 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v26 + 16))(v25);
  sub_23B5361A0(v12, a2, a3, *v25, v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v27);
  return (_OWORD *)swift_bridgeObjectRetain();
}

_OWORD *sub_23B5361A0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  *(_QWORD *)&v11 = a4;
  v12 = MEMORY[0x24BEE1768];
  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_23B503EB4(&v11, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

_OWORD *sub_23B536220(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v7;
  _OWORD *result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v13 = MEMORY[0x24BEE0D00];
  *(_QWORD *)&v12 = a4;
  *((_QWORD *)&v12 + 1) = a5;
  a6[(a1 >> 6) + 8] |= 1 << a1;
  v7 = (_QWORD *)(a6[6] + 16 * a1);
  *v7 = a2;
  v7[1] = a3;
  result = sub_23B503EB4(&v12, (_OWORD *)(a6[7] + 32 * a1));
  v9 = a6[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a6[2] = v11;
  return result;
}

_OWORD *sub_23B5362A0(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, double a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  double v11[3];
  uint64_t v12;

  v11[0] = a5;
  v12 = MEMORY[0x24BEE13C8];
  a4[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a4[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_23B503EB4(v11, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

_OWORD *sub_23B536320(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  _QWORD *v11;
  _OWORD *result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  type metadata accessor for CFString(0);
  v17 = v10;
  *(_QWORD *)&v16 = a4;
  a5[(a1 >> 6) + 8] |= 1 << a1;
  v11 = (_QWORD *)(a5[6] + 16 * a1);
  *v11 = a2;
  v11[1] = a3;
  result = sub_23B503EB4(&v16, (_OWORD *)(a5[7] + 32 * a1));
  v13 = a5[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a5[2] = v15;
  return result;
}

uint64_t sub_23B5363C0(double a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  double *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;

  v2 = sub_23B56A264();
  type metadata accessor for CFString(0);
  v4 = v3;
  v43 = v3;
  *(_QWORD *)&v42 = v2;
  sub_23B503EB4(&v42, &v40);
  v5 = MEMORY[0x24BEE4B00];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v39 = v5;
  v7 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v40, v41);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (uint64_t *)((char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v10 + 16))(v9);
  sub_23B535B40(*v9, 0x7954747265737341, 0xEA00000000006570, isUniquelyReferenced_nonNull_native, &v39);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
  v11 = v39;
  swift_bridgeObjectRelease();
  v12 = sub_23B56A264();
  v43 = v4;
  *(_QWORD *)&v42 = v12;
  sub_23B503EB4(&v42, &v40);
  v13 = swift_isUniquelyReferenced_nonNull_native();
  v39 = v11;
  v14 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v40, v41);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (uint64_t *)((char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v17 + 16))(v16);
  sub_23B535B40(*v16, 0x614E747265737341, 0xEA0000000000656DLL, v13, &v39);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
  v18 = v39;
  swift_bridgeObjectRelease();
  v43 = MEMORY[0x24BEE13C8];
  *(double *)&v42 = a1;
  sub_23B503EB4(&v42, &v40);
  v19 = swift_isUniquelyReferenced_nonNull_native();
  v39 = v18;
  v20 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v40, v41);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (double *)((char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(double *))(v23 + 16))(v22);
  sub_23B535CE0(0x5374756F656D6954, 0xEE0073646E6F6365, v19, &v39, *v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
  v24 = v39;
  swift_bridgeObjectRelease();
  v43 = MEMORY[0x24BEE0D00];
  *(_QWORD *)&v42 = 0xD000000000000014;
  *((_QWORD *)&v42 + 1) = 0x800000023B56C510;
  sub_23B503EB4(&v42, &v40);
  v25 = swift_isUniquelyReferenced_nonNull_native();
  v39 = v24;
  v26 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v40, v41);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (uint64_t *)((char *)&v38 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v29 + 16))(v28);
  sub_23B535E70(*v28, v28[1], 0x4174756F656D6954, 0xED00006E6F697463, v25, &v39);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
  v30 = v39;
  swift_bridgeObjectRelease();
  v43 = MEMORY[0x24BEE1768];
  *(_QWORD *)&v42 = 255;
  sub_23B503EB4(&v42, &v40);
  v31 = swift_isUniquelyReferenced_nonNull_native();
  v39 = v30;
  v32 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v40, v41);
  MEMORY[0x24BDAC7A8](v32);
  v34 = (uint64_t *)((char *)&v38 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v35 + 16))(v34);
  sub_23B536008(*v34, 0x654C747265737341, 0xEB000000006C6576, v31, &v39);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v40);
  v36 = v39;
  swift_bridgeObjectRelease();
  return v36;
}

uint64_t AsyncSequence.share()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = type metadata accessor for AsyncShareSequence(0, a1, a2, a4);
  return sub_23B536F9C(v4, v5, v6, v7);
}

uint64_t type metadata accessor for AsyncShareSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncShareSequence);
}

uint64_t sub_23B53684C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 104);
  swift_beginAccess();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, v3, AssociatedTypeWitness);
}

uint64_t sub_23B5368CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 104);
  swift_beginAccess();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(v3, a1, AssociatedTypeWitness);
  return swift_endAccess();
}

uint64_t sub_23B536954()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23B53695C(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;

  v2[2] = a1;
  v2[3] = v1;
  v3 = *v1;
  v2[4] = *(_QWORD *)(*v1 + 88);
  v2[5] = *(_QWORD *)(v3 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2[6] = AssociatedTypeWitness;
  v2[7] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v2[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B5369E0()
{
  uint64_t v0;
  _QWORD *v1;

  sub_23B53684C(*(_QWORD *)(v0 + 64));
  swift_getAssociatedConformanceWitness();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v1;
  *v1 = v0;
  v1[1] = sub_23B536A78;
  return sub_23B56A600();
}

uint64_t sub_23B536A78()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B536ADC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  sub_23B536B9C(*(_QWORD *)(v0 + 24), v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B536B3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  sub_23B536B9C(*(_QWORD *)(v0 + 24), v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B536B9C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v5 = (char *)&v8 - v4;
  (*(void (**)(char *, uint64_t))(v6 + 16))((char *)&v8 - v4, a2);
  return sub_23B5368CC((uint64_t)v5);
}

uint64_t AsyncShareSequence.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 104);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t AsyncShareSequence.__deallocating_deinit()
{
  AsyncShareSequence.deinit();
  return swift_defaultActor_deallocate();
}

uint64_t AsyncShareSequence.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23B536CB0()
{
  return AsyncShareSequence.unownedExecutor.getter();
}

uint64_t sub_23B536CC8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_23B4FAC98;
  return sub_23B53695C(a1);
}

uint64_t sub_23B536D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  _QWORD *v9;
  uint64_t v10;

  v5[2] = a4;
  v7 = *(_QWORD *)(a5 + 80);
  v6 = *(_QWORD *)(a5 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[3] = AssociatedTypeWitness;
  v5[4] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[5] = swift_task_alloc();
  v9 = (_QWORD *)swift_task_alloc();
  v5[6] = v9;
  type metadata accessor for AsyncShareSequence(0, v7, v6, v10);
  *v9 = v5;
  v9[1] = sub_23B536E0C;
  return sub_23B56A60C();
}

uint64_t sub_23B536E0C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)*v1;
  v3 = (_QWORD *)*v1;
  swift_task_dealloc();
  if (v0)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v2[4] + 32))(v2[2], v2[5], v2[3]);
  swift_task_dealloc();
  return ((uint64_t (*)(void))v3[1])();
}

uint64_t sub_23B536E84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v2 = v1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v13 - v10;
  swift_defaultActor_initialize();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  sub_23B56A6FC();
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v2 + *(_QWORD *)(*(_QWORD *)v2 + 104), v11, AssociatedTypeWitness);
  return v2;
}

uint64_t sub_23B536F9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for AsyncShareSequence(0, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), a4);
  swift_allocObject();
  return sub_23B536E84(a1);
}

void sub_23B536FDC()
{
  JUMPOUT(0x23B867894);
}

uint64_t sub_23B536FEC()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_23B537078()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for AsyncShareSequence()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AsyncShareSequence.makeAsyncIterator()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of AsyncShareSequence.next()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 152) + *(_QWORD *)(*(_QWORD *)v1 + 152));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23B4FAC98;
  return v6(a1);
}

unint64_t sub_23B537188()
{
  unint64_t result;

  result = qword_256A2C540;
  if (!qword_256A2C540)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for DirectorySequence, &type metadata for DirectorySequence);
    atomic_store(result, (unint64_t *)&qword_256A2C540);
  }
  return result;
}

uint64_t sub_23B5371CC()
{
  return 0;
}

uint64_t sub_23B5371D4()
{
  return 2;
}

uint64_t sub_23B5371DC()
{
  void **v0;
  void *v1;
  uint64_t v2;

  v1 = *v0;
  v2 = sub_23B537380(*v0);

  return v2;
}

uint64_t sub_23B53720C(_QWORD *a1, char *a2, uint64_t a3)
{
  void **v3;

  return sub_23B537B20(a1, a2, a3, *v3);
}

uint64_t sub_23B537214()
{
  return sub_23B56A48C();
}

uint64_t sub_23B537234@<X0>(uint64_t a1@<X8>)
{
  id *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F97E8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*v1)
  {
    v6 = *v1;
    v7 = (void *)MEMORY[0x23B867378]();
    sub_23B5004D4(v6, v1, (uint64_t)v5);
    objc_autoreleasePoolPop(v7);

    return sub_23B50048C((uint64_t)v5, a1);
  }
  else
  {
    v9 = sub_23B569DA8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a1, 1, 1, v9);
  }
}

void **assignWithCopy for DirectorySequence(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *a2;
  *a1 = *a2;
  v5 = v4;

  return a1;
}

void **assignWithTake for DirectorySequence(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t sub_23B537380(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  char *v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t (*v32)(char *, char *, uint64_t);
  uint64_t result;
  _QWORD *v34;
  BOOL v35;
  unint64_t v36;
  char *v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  void (*v62)(char *, uint64_t, uint64_t, uint64_t);
  void *v63;
  _OWORD v64[2];
  _OWORD v65[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F97E8);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v59 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v61 = (char *)&v53 - v6;
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v53 - v7;
  v9 = sub_23B569DA8();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v53 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v53 - v13;
  v15 = *(unsigned __int8 *)(v10 + 80);
  v16 = a1;
  v17 = 0;
  if (a1)
  {
    v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v56 = (v15 + 32) & ~v15;
    v19 = MEMORY[0x24BEE4AF8] + v56;
    v55 = v15 | 7;
    v57 = v14;
    v58 = MEMORY[0x24BEE4AD8] + 8;
    v60 = v8;
    while (1)
    {
      v63 = a1;
      v20 = a1;
      v21 = (void *)MEMORY[0x23B867378]();
      if (objc_msgSend(v20, sel_nextObject))
      {
        sub_23B56A9D8();
        swift_unknownObjectRelease();
        sub_23B503EB4(v64, v65);
        sub_23B503EB4(v65, v64);
        v22 = (uint64_t)v59;
        v23 = swift_dynamicCast();
        v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
        if ((v23 & 1) != 0)
        {
          v24((char *)v22, 0, 1, v9);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v22, 1, v9) != 1)
          {
            v25 = v22;
            v26 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 32);
            v27 = v53;
            v26(v53, v25, v9);
            v54 = v21;
            v28 = v24;
            v29 = v61;
            v30 = v27;
            v14 = v57;
            v26(v61, (uint64_t)v30, v9);
            v31 = (uint64_t)v29;
            v62 = v28;
            v28(v29, 0, 1, v9);
            v21 = v54;
            a1 = v63;
            goto LABEL_11;
          }
        }
        else
        {
          v24((char *)v22, 1, 1, v9);
        }
        sub_23B537E3C(v22);

      }
      else
      {

        v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
      }
      v31 = (uint64_t)v61;
      v62 = v24;
      v24(v61, 1, 1, v9);
      a1 = 0;
LABEL_11:
      objc_autoreleasePoolPop(v21);

      v8 = v60;
      sub_23B50048C(v31, (uint64_t)v60);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
      {

        goto LABEL_38;
      }
      v32 = *(uint64_t (**)(char *, char *, uint64_t))(v10 + 32);
      result = v32(v14, v8, v9);
      if (v17)
      {
        v34 = v18;
        v35 = __OFSUB__(v17--, 1);
        if (v35)
          goto LABEL_42;
      }
      else
      {
        v36 = v18[3];
        if ((uint64_t)((v36 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_43;
        v63 = a1;
        v37 = v8;
        v38 = v36 & 0xFFFFFFFFFFFFFFFELL;
        if (v38 <= 1)
          v39 = 1;
        else
          v39 = v38;
        __swift_instantiateConcreteTypeFromMangledName(&qword_256A2C548);
        v40 = *(_QWORD *)(v10 + 72);
        v41 = v56;
        v34 = (_QWORD *)swift_allocObject();
        result = _swift_stdlib_malloc_size(v34);
        if (!v40)
          goto LABEL_44;
        v42 = result - v41;
        if (result - v41 == 0x8000000000000000 && v40 == -1)
          goto LABEL_45;
        v44 = v41;
        v45 = v42 / v40;
        v34[2] = v39;
        v34[3] = 2 * (v42 / v40);
        v46 = (char *)v34 + v44;
        v47 = v18[3] >> 1;
        v48 = v47 * v40;
        if (v18[2])
        {
          if (v34 < v18 || v46 >= (char *)v18 + v44 + v48)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v34 != v18)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          v18[2] = 0;
        }
        v19 = (uint64_t)&v46[v48];
        v49 = (v45 & 0x7FFFFFFFFFFFFFFFLL) - v47;
        result = swift_release();
        v8 = v37;
        a1 = v63;
        v14 = v57;
        v35 = __OFSUB__(v49, 1);
        v17 = v49 - 1;
        if (v35)
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return result;
        }
      }
      v32((char *)v19, v14, v9);
      v19 += *(_QWORD *)(v10 + 72);
      v18 = v34;
      if (!a1)
        goto LABEL_36;
    }
  }
  v62 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v34 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_36:
  v62(v8, 1, 1, v9);
  v18 = v34;
LABEL_38:
  result = sub_23B537E3C((uint64_t)v8);
  v50 = v18[3];
  if (v50 >= 2)
  {
    v51 = v50 >> 1;
    v35 = __OFSUB__(v51, v17);
    v52 = v51 - v17;
    if (v35)
      goto LABEL_46;
    v18[2] = v52;
  }
  return (uint64_t)v18;
}

void sub_23B537818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __asm { BR              X9 }
}

uint64_t sub_23B537878(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  if (v4 && v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      *(_QWORD *)(v5 - 120) = v1;
      __asm { BR              X9 }
    }
    __break(1u);
    JUMPOUT(0x23B537AF0);
  }
  *a1 = v2;
  a1[1] = v7;
  a1[2] = BYTE6(v7);
  return 0;
}

uint64_t sub_23B537B20(_QWORD *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  char v25;
  void (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  _OWORD v37[2];
  _OWORD v38[2];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F97E8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v29 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v29 - v15;
  v17 = sub_23B569DA8();
  v18 = *(_QWORD *)(v17 - 8);
  result = MEMORY[0x24BDAC7A8](v17);
  v36 = (char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
  {
    a3 = 0;
    goto LABEL_23;
  }
  if (!a3)
    goto LABEL_23;
  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    v31 = a1;
    if (a4)
    {
      v34 = v11;
      v21 = 0;
      v30 = a3;
      v35 = a3 - 1;
      v32 = v14;
      v33 = MEMORY[0x24BEE4AD8] + 8;
      while (1)
      {
        v22 = a4;
        v23 = (void *)MEMORY[0x23B867378]();
        if (objc_msgSend(v22, sel_nextObject))
        {
          sub_23B56A9D8();
          swift_unknownObjectRelease();
          sub_23B503EB4(v37, v38);
          sub_23B503EB4(v38, v37);
          v24 = (uint64_t)v34;
          v25 = swift_dynamicCast();
          v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
          if ((v25 & 1) != 0)
          {
            v26(v24, 0, 1, v17);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v24, 1, v17) != 1)
            {
              v14 = v32;
              (*(void (**)(void))(v18 + 32))();
              v26((uint64_t)v14, 0, 1, v17);
              goto LABEL_14;
            }
          }
          else
          {
            v26(v24, 1, 1, v17);
          }
          sub_23B537E3C(v24);

          v14 = v32;
          v26((uint64_t)v32, 1, 1, v17);
        }
        else
        {

          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v14, 1, 1, v17);
        }
        a4 = 0;
LABEL_14:
        objc_autoreleasePoolPop(v23);

        sub_23B50048C((uint64_t)v14, (uint64_t)v16);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
          goto LABEL_21;
        v27 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
        v28 = v36;
        v27(v36, v16, v17);
        v27(a2, v28, v17);
        if (v35 == v21)
        {
          a3 = v30;
          a1 = v31;
          goto LABEL_23;
        }
        a2 += *(_QWORD *)(v18 + 72);
        ++v21;
        if (!a4)
          goto LABEL_20;
      }
    }
    v21 = 0;
LABEL_20:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
    a4 = 0;
LABEL_21:
    sub_23B537E3C((uint64_t)v16);
    a3 = v21;
    a1 = v31;
LABEL_23:
    *a1 = a4;
    return a3;
  }
  return result;
}

uint64_t sub_23B537E3C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F97E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23B537E7C(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

unint64_t sub_23B538078()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256A2C550;
  if (!qword_256A2C550)
  {
    v1 = sub_23B569DA8();
    result = MEMORY[0x23B867894](MEMORY[0x24BDCDB28], v1);
    atomic_store(result, (unint64_t *)&qword_256A2C550);
  }
  return result;
}

uint64_t GenericError.description.getter()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 + 8))
    return 0x6C706D49746F6E2ELL;
  sub_23B56A3A8();
  sub_23B56A3A8();
  return 0x28726F7272652ELL;
}

uint64_t sub_23B538144()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 + 8))
    return 0x6C706D49746F6E2ELL;
  sub_23B56A3A8();
  sub_23B56A3A8();
  return 0x28726F7272652ELL;
}

_QWORD *assignWithCopy for GenericError(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for GenericError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for GenericError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_23B5382DC(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_23B5382F4(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for GenericError()
{
  return &type metadata for GenericError;
}

_QWORD *BufferedData.__allocating_init(data:)(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[3] = a2;
  result[4] = 0;
  result[2] = a1;
  return result;
}

uint64_t BufferedData.isAtEnd.getter()
{
  uint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_23B53837C + *((int *)qword_23B5383C8 + (*(_QWORD *)(v0 + 24) >> 62))))();
}

BOOL sub_23B53838C@<W0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return a1 == BYTE6(v1);
}

void BufferedData.read(maxBytes:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  sub_23B5384FC(a1, *(_QWORD *)(v1 + 32));
  if (!v2)
  {
    v4 = *(_QWORD *)(v1 + 32);
    v5 = __OFADD__(v4, a1);
    v6 = v4 + a1;
    if (v5)
      __break(1u);
    else
      *(_QWORD *)(v1 + 32) = v6;
  }
}

void BufferedData.read()()
{
  __asm { BR              X10 }
}

uint64_t sub_23B538450()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  if (BYTE6(v2) < v1)
  {
    __break(1u);
    JUMPOUT(0x23B5384D4);
  }
  v3 = sub_23B569E68();
  sub_23B504944(v0, v2);
  return v3;
}

_QWORD *BufferedData.init(data:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2[3] = a2;
  v2[4] = 0;
  v2[2] = a1;
  return v2;
}

void sub_23B5384FC(uint64_t a1, uint64_t a2)
{
  if (!__OFADD__(a2, a1))
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x23B53860CLL);
}

uint64_t BufferedData.deinit()
{
  uint64_t v0;

  sub_23B504944(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return v0;
}

uint64_t BufferedData.__deallocating_deinit()
{
  uint64_t v0;

  sub_23B504944(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BufferedData()
{
  return objc_opt_self();
}

uint64_t method lookup function for BufferedData()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of BufferedData.__allocating_init(data:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t sub_23B53869C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28[5];

  swift_beginAccess();
  v9 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(v9 + 16) && (v10 = sub_23B5015D8(a2, a3), (v11 & 1) != 0))
  {
    sub_23B5035B4(*(_QWORD *)(v9 + 56) + 32 * v10, (uint64_t)&v26);
  }
  else
  {
    v26 = 0u;
    v27 = 0u;
  }
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9CD8);
  v12 = MEMORY[0x24BEE1328];
  if ((swift_dynamicCast() & 1) != 0)
  {
    v13 = v28[0] & 1;
    if (qword_2542FAD78 != -1)
      swift_once();
    v14 = sub_23B56A060();
    __swift_project_value_buffer(v14, (uint64_t)qword_2542FC458);
    swift_bridgeObjectRetain_n();
    v15 = sub_23B56A048();
    v16 = sub_23B56A81C();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc();
      v25 = swift_slowAlloc();
      v28[0] = v25;
      *(_DWORD *)v17 = 141559043;
      *(_QWORD *)&v26 = 1752392040;
      sub_23B56A918();
      *(_WORD *)(v17 + 12) = 2081;
      LOBYTE(v26) = v13;
      v18 = sub_23B56A300();
      v28[4] = v4;
      *(_QWORD *)&v26 = sub_23B5034E4(v18, v19, v28);
      sub_23B56A918();
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 22) = 2082;
      *(_QWORD *)&v26 = a2;
      *((_QWORD *)&v26 + 1) = a3;
      swift_bridgeObjectRetain();
      v20 = sub_23B56A300();
      *(_QWORD *)&v26 = sub_23B5034E4(v20, v21, v28);
      sub_23B56A918();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 32) = 2160;
      *(_QWORD *)&v26 = 1752392040;
      sub_23B56A918();
      *(_WORD *)(v17 + 42) = 2081;
      LOBYTE(v26) = a4 & 1;
      v22 = sub_23B56A300();
      *(_QWORD *)&v26 = sub_23B5034E4(v22, v23, v28);
      sub_23B56A918();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23B4F9000, v15, v16, "Some other thread already stored value %{private,mask.hash}s for '%{public}s' -- ignoring computed value: %{private,mask.hash}s", (uint8_t *)v17, 0x34u);
      swift_arrayDestroy();
      MEMORY[0x23B867948](v25, -1, -1);
      MEMORY[0x23B867948](v17, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    *((_QWORD *)&v27 + 1) = v12;
    LOBYTE(v26) = a4 & 1;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_23B510A68((uint64_t)&v26, a2, a3);
    swift_endAccess();
    v13 = a4;
  }
  return v13 & 1;
}

uint64_t sub_23B538A48(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, unint64_t, uint64_t);
  char v12;
  uint64_t v14;
  uint64_t v15;

  v3 = sub_23B569FA0();
  v15 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (sub_23B5301D4((unint64_t *)&qword_2542FAA50, MEMORY[0x24BDCEA88]),
        v6 = sub_23B56A1EC(),
        v7 = -1 << *(_BYTE *)(a2 + 32),
        v8 = v6 & ~v7,
        ((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0))
  {
    v9 = ~v7;
    v10 = *(_QWORD *)(v15 + 72);
    v11 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 16);
    do
    {
      v11(v5, *(_QWORD *)(a2 + 48) + v10 * v8, v3);
      sub_23B5301D4(&qword_2542F9A28, MEMORY[0x24BDCEA98]);
      v12 = sub_23B56A240();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v5, v3);
      if ((v12 & 1) != 0)
        break;
      v8 = (v8 + 1) & v9;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

uint64_t sub_23B538BBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_23B56AE64();
    sub_23B56A36C();
    v6 = sub_23B56AE88();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_23B56AD98() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_23B56AD98() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_23B538CF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_23B56A060();
  __swift_allocate_value_buffer(v0, qword_256A2C558);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_256A2C558);
  if (qword_2542FAD78 != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)qword_2542FC458);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_23B538D80()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  __swift_instantiateConcreteTypeFromMangledName(qword_2542F9CF0);
  v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9CC0);
  result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  v2 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v0 + 16) = result;
  *(_QWORD *)(v0 + 24) = v2;
  off_2542F9CE8 = (_UNKNOWN *)v0;
  return result;
}

uint64_t static SystemInfo.architecture.getter()
{
  void *v0;
  uint64_t v2;
  _BYTE v3[24];
  uint64_t v4;

  v0 = (void *)MEMORY[0x23B867378]();
  sub_23B4FF43C((uint64_t)v3);
  objc_autoreleasePoolPop(v0);
  if (v4)
  {
    if (swift_dynamicCast())
      return v2;
  }
  else
  {
    sub_23B5043F0((uint64_t)v3, &qword_2542F9CD8);
  }
  return 0;
}

uint64_t static SystemInfo.auditUserIdentifier.getter()
{
  auditinfo_addr v1;
  uint64_t v2;

  v2 = *MEMORY[0x24BDAC8D0];
  memset(&v1, 0, sizeof(v1));
  getaudit_addr(&v1, 48);
  return v1.ai_auid;
}

uint64_t static SystemInfo.auditSessionIdentifier.getter()
{
  auditinfo_addr v1;
  uint64_t v2;

  v2 = *MEMORY[0x24BDAC8D0];
  memset(&v1, 0, sizeof(v1));
  getaudit_addr(&v1, 48);
  return v1.ai_asid;
}

BOOL static SystemInfo.isSystemSession.getter()
{
  auditinfo_addr v1;
  uint64_t v2;

  v2 = *MEMORY[0x24BDAC8D0];
  memset(&v1, 0, sizeof(v1));
  getaudit_addr(&v1, 48);
  return v1.ai_auid == -1;
}

uint64_t static SystemInfo.bootSessionUUID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26[2];

  v26[1] = *MEMORY[0x24BDAC8D0];
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542FADF8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_23B56A2E8();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = 37;
  v8 = sub_23B56A558();
  *(_QWORD *)(v8 + 16) = 37;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_QWORD *)(v8 + 61) = 0;
  *(_OWORD *)(v8 + 32) = 0u;
  if (sysctlbyname("kern.bootsessionuuid", (void *)(v8 + 32), &v25, 0, 0))
  {
    v13 = MEMORY[0x23B866358]();
    if (!strerror(v13))
      __break(1u);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  sub_23B56A2D0();
  sub_23B539384(v8, v7);
  if (!v9)
  {
    while (1)
    {
LABEL_9:
      sub_23B56AC24();
      __break(1u);
LABEL_10:
      v14 = sub_23B56A24C();
      if (v15)
        v16 = v14;
      else
        v16 = 0x6E776F6E6B6E55;
      if (v15)
        v17 = v15;
      else
        v17 = 0xE700000000000000;
      if (qword_256A2B9E0 != -1)
        swift_once();
      v18 = sub_23B56A060();
      __swift_project_value_buffer(v18, (uint64_t)qword_256A2C558);
      swift_bridgeObjectRetain();
      v19 = sub_23B56A048();
      v20 = sub_23B56A834();
      if (os_log_type_enabled(v19, v20))
      {
        v21 = swift_slowAlloc();
        v22 = swift_slowAlloc();
        v26[0] = v22;
        *(_DWORD *)v21 = 136446466;
        swift_bridgeObjectRetain();
        v24 = sub_23B5034E4(v16, v17, v26);
        sub_23B56A918();
        v23 = swift_bridgeObjectRelease_n();
        *(_WORD *)(v21 + 12) = 1024;
        LODWORD(v24) = MEMORY[0x23B866358](v23);
        sub_23B56A918();
        _os_log_impl(&dword_23B4F9000, v19, v20, "Error from sysctlbyname: %{public}s (%d)", (uint8_t *)v21, 0x12u);
        swift_arrayDestroy();
        MEMORY[0x23B867948](v22, -1, -1);
        MEMORY[0x23B867948](v21, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
    }
  }
  sub_23B569F58();
  swift_bridgeObjectRelease();
  v10 = sub_23B569FA0();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v4, 1, v10) == 1)
  {
    sub_23B5043F0((uint64_t)v4, (uint64_t *)&unk_2542FADF8);
    goto LABEL_9;
  }
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a1, v4, v10);
}

uint64_t sub_23B539384(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  void (*v12)(char *, uint64_t);
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  id v22;
  uint64_t result;
  uint64_t v24;

  v4 = sub_23B56A2E8();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v24 - v9;
  sub_23B56A2C4();
  v11 = sub_23B56A2B8();
  v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v10, v4);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, a2, v4);
  if ((v11 & 1) != 0)
  {
    v12(v8, v4);
    goto LABEL_4;
  }
  sub_23B56A2D0();
  v13 = sub_23B56A2B8();
  v12(v10, v4);
  v12(v8, v4);
  if ((v13 & 1) != 0)
  {
LABEL_4:
    v14 = sub_23B539EA4(0, a1);
    if ((v15 & 1) == 0)
    {
      if ((v14 & 0x8000000000000000) == 0)
      {
        swift_bridgeObjectRetain();
        v16 = sub_23B56A33C();
        v18 = v17;
        swift_unknownObjectRelease();
        if (v18)
        {
          sub_23B56A2C4();
          v19 = sub_23B56A2B8();
          v12(v10, v4);
          if ((v19 & 1) != 0 || (sub_23B56AA50() & 1) != 0)
          {
            swift_bridgeObjectRelease();
LABEL_15:
            v12(a2, v4);
            return v16;
          }
          swift_bridgeObjectRelease();
        }
        goto LABEL_11;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_18;
  }
LABEL_11:
  v20 = sub_23B539EA4(0, a1);
  if ((v21 & 1) == 0)
  {
    v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD17C8]), sel_initWithBytes_length_encoding_, a1 + 32, v20, sub_23B56A2DC());
    swift_bridgeObjectRelease();
    if (v22)
    {
      v16 = sub_23B56A288();

    }
    else
    {
      v16 = 0;
    }
    goto LABEL_15;
  }
LABEL_18:
  result = sub_23B56AC24();
  __break(1u);
  return result;
}

uint64_t static SystemInfo.isFactoryBuild.getter()
{
  return os_variant_has_factory_content();
}

uint64_t static SystemInfo.arrowChipID.getter()
{
  void *v0;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _BYTE v7[24];
  uint64_t v8;

  v0 = (void *)MEMORY[0x23B867378]();
  sub_23B4FF43C((uint64_t)v7);
  objc_autoreleasePoolPop(v0);
  if (v8)
  {
    if (swift_dynamicCast())
      return v6;
  }
  else
  {
    sub_23B5043F0((uint64_t)v7, &qword_2542F9CD8);
  }
  if (qword_2542FAD78 != -1)
    swift_once();
  v2 = sub_23B56A060();
  __swift_project_value_buffer(v2, (uint64_t)qword_2542FC458);
  v3 = sub_23B56A048();
  v4 = sub_23B56A834();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_23B4F9000, v3, v4, "Could not get arrow chip id", v5, 2u);
    MEMORY[0x23B867948](v5, -1, -1);
  }

  return 0;
}

uint64_t static SystemInfo.hostUUID.getter()
{
  timespec v1;
  uuid_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  memset(v2, 0, sizeof(v2));
  v1 = (timespec)xmmword_23B5711D0;
  gethostuuid(v2, &v1);
  return sub_23B569F7C();
}

uint64_t static SystemInfo.deviceSKU.getter()
{
  void *v0;
  uint64_t v2;
  _BYTE v3[24];
  uint64_t v4;

  v0 = (void *)MEMORY[0x23B867378]();
  sub_23B4FF43C((uint64_t)v3);
  objc_autoreleasePoolPop(v0);
  if (v4)
  {
    if (swift_dynamicCast())
      return v2;
    else
      return 0;
  }
  else
  {
    sub_23B5043F0((uint64_t)v3, &qword_2542F9CD8);
    return 0;
  }
}

uint64_t static SystemInfo.lowPowerExpressModesSupported.getter@<X0>(uint64_t *a1@<X8>)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];
  uint64_t v12;

  v2 = (void *)MEMORY[0x23B867378]();
  sub_23B4FF43C((uint64_t)v11);
  objc_autoreleasePoolPop(v2);
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9B58);
    if (swift_dynamicCast())
    {
      v3 = v10;
      goto LABEL_6;
    }
  }
  else
  {
    sub_23B5043F0((uint64_t)v11, &qword_2542F9CD8);
  }
  v3 = MEMORY[0x24BEE4AF8];
LABEL_6:
  v4 = sub_23B53B8C0(v3);
  swift_bridgeObjectRelease();
  v5 = sub_23B538BBC(0x616873696C61, 0xE600000000000000, v4);
  v6 = v5 & 1;
  if ((sub_23B538BBC(0x796D2D646E6966, 0xE700000000000000, v4) & 1) != 0)
    v6 = v5 & 1 | 2;
  v7 = sub_23B538BBC(0x727078652D63666ELL, 0xEB00000000737365, v4);
  result = swift_bridgeObjectRelease();
  v9 = v6 | 4;
  if ((v7 & 1) == 0)
    v9 = v6;
  *a1 = v9;
  return result;
}

uint64_t static SystemInfo.isKoreaSKU.getter()
{
  uint64_t v0;
  char v2;

  if (static SystemInfo.regionCode.getter() == 18507 && v0 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v2 = sub_23B56AD98();
    swift_bridgeObjectRelease();
    return v2 & 1;
  }
}

uint64_t SystemInfo.LowPowerExpressModes.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t SystemInfo.LowPowerExpressModes.init(rawValue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static SystemInfo.LowPowerExpressModes.alisha.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static SystemInfo.LowPowerExpressModes.findMy.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static SystemInfo.LowPowerExpressModes.nfcExpress.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void *static SystemInfo.LowPowerExpressModes.allCases.getter()
{
  return &unk_250C79AA0;
}

uint64_t SystemInfo.LowPowerExpressModes.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  v1 = *v0;
  if ((*v0 & 1) != 0)
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v2 = sub_23B50B0C8(0, v2[2] + 1, 1, v2);
    v5 = v2[2];
    v4 = v2[3];
    if (v5 >= v4 >> 1)
      v2 = sub_23B50B0C8((_QWORD *)(v4 > 1), v5 + 1, 1, v2);
    v2[2] = v5 + 1;
    v6 = &v2[2 * v5];
    v6[4] = 0x616873696C612ELL;
    v6[5] = 0xE700000000000000;
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((~v1 & 2) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = sub_23B50B0C8(0, v2[2] + 1, 1, v2);
    v8 = v2[2];
    v7 = v2[3];
    if (v8 >= v7 >> 1)
      v2 = sub_23B50B0C8((_QWORD *)(v7 > 1), v8 + 1, 1, v2);
    v2[2] = v8 + 1;
    v9 = &v2[2 * v8];
    v9[4] = 0x794D646E69662ELL;
    v9[5] = 0xE700000000000000;
  }
  if ((~v1 & 4) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = sub_23B50B0C8(0, v2[2] + 1, 1, v2);
    v11 = v2[2];
    v10 = v2[3];
    if (v11 >= v10 >> 1)
      v2 = sub_23B50B0C8((_QWORD *)(v10 > 1), v11 + 1, 1, v2);
    v2[2] = v11 + 1;
    v12 = &v2[2 * v11];
    v12[4] = 0x7270784563666E2ELL;
    v12[5] = 0xEB00000000737365;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9B58);
  sub_23B50E15C((unint64_t *)&qword_2542F99A0, &qword_2542F9B58, MEMORY[0x24BEE12B0]);
  sub_23B56A204();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  return 60;
}

void sub_23B539E90(_QWORD *a1@<X8>)
{
  *a1 = &unk_250C79AD8;
}

uint64_t sub_23B539EA4(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(unsigned __int8 *)(a2 + 32) == a1)
    return 0;
  if (v2 == 1)
    return 0;
  if (*(unsigned __int8 *)(a2 + 33) == a1)
    return 1;
  v4 = 0;
  v5 = v2 - 2;
  while (v5 != v4)
  {
    v6 = *(unsigned __int8 *)(a2 + 34 + v4++);
    if (v6 == a1)
      return v4 + 1;
  }
  return 0;
}

uint64_t sub_23B539F2C(uint64_t a1, char *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  char *v24;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  v3 = v2;
  v6 = sub_23B569FA0();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  sub_23B5301D4((unint64_t *)&qword_2542FAA50, MEMORY[0x24BDCEA88]);
  swift_bridgeObjectRetain();
  v30 = a2;
  v11 = sub_23B56A1EC();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  v13 = v11 & ~v12;
  v14 = v10;
  v15 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v26 = v2;
    v27 = a1;
    v28 = ~v12;
    v16 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v29 = v16;
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v16 + 16);
    while (1)
    {
      v19 = v14;
      v20 = v18;
      v18(v9, *(_QWORD *)(v14 + 48) + v17 * v13, v6);
      sub_23B5301D4(&qword_2542F9A28, MEMORY[0x24BDCEA98]);
      v21 = sub_23B56A240();
      v22 = *(void (**)(char *, uint64_t))(v29 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v13 = (v13 + 1) & v28;
      v14 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v15 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v26;
        a1 = v27;
        v7 = v29;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v30, v6);
    v20(v27, *(_QWORD *)(*v26 + 48) + v17 * v13, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v24 = v30;
    v18(v9, v30, v6);
    v31 = *v3;
    *v3 = 0x8000000000000000;
    sub_23B53A96C((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *v3 = v31;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_23B53A180(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_23B56AE64();
  swift_bridgeObjectRetain();
  sub_23B56A36C();
  v8 = sub_23B56AE88();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_23B56AD98() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_23B56AD98() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_23B53AB60(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_23B53A32C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;

  v1 = v0;
  v2 = sub_23B569FA0();
  v36 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAB50);
  v6 = sub_23B56AA2C();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = *(_QWORD *)(v5 + 56);
    v35 = (_QWORD *)(v5 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & v9;
    v33 = v0;
    v34 = (unint64_t)(v8 + 63) >> 6;
    v12 = v6 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v34)
          goto LABEL_33;
        v19 = v35[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v34)
            goto LABEL_33;
          v19 = v35[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v34)
              goto LABEL_33;
            v19 = v35[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v34)
              {
LABEL_33:
                swift_release();
                v1 = v33;
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 > 63)
                  bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
                break;
              }
              v19 = v35[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_39;
                  if (v14 >= v34)
                    goto LABEL_33;
                  v19 = v35[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_23;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_23:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = v5;
      v22 = *(_QWORD *)(v36 + 72);
      v23 = *(_QWORD *)(v5 + 48) + v22 * v17;
      v24 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 32);
      v24(v4, v23, v2);
      sub_23B5301D4((unint64_t *)&qword_2542FAA50, MEMORY[0x24BDCEA88]);
      result = sub_23B56A1EC();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v24)(*(_QWORD *)(v7 + 48) + v15 * v22, v4, v2);
      ++*(_QWORD *)(v7 + 16);
      v5 = v21;
    }
  }
  result = swift_release();
  *v1 = v7;
  return result;
}

uint64_t sub_23B53A690()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256A2C590);
  v3 = sub_23B56AA2C();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      sub_23B56AE64();
      sub_23B56A36C();
      result = sub_23B56AE88();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_23B53A96C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v26 = a1;
  v6 = sub_23B569FA0();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v25 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_23B53A32C();
  }
  else
  {
    if (v11 > v10)
    {
      sub_23B53ACF8();
      goto LABEL_12;
    }
    sub_23B53B0CC();
  }
  v12 = *v3;
  sub_23B5301D4((unint64_t *)&qword_2542FAA50, MEMORY[0x24BDCEA88]);
  v13 = sub_23B56A1EC();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v13 & ~v14;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v15 = ~v14;
    v16 = *(_QWORD *)(v7 + 72);
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v17(v9, *(_QWORD *)(v12 + 48) + v16 * a2, v6);
      sub_23B5301D4(&qword_2542F9A28, MEMORY[0x24BDCEA98]);
      v18 = sub_23B56A240();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v18 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v15;
    }
    while (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v19 = v26;
  v20 = *v25;
  *(_QWORD *)(*v25 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v20 + 48) + *(_QWORD *)(v7 + 72) * a2, v19, v6);
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (!v23)
  {
    *(_QWORD *)(v20 + 16) = v24;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_23B56AE04();
  __break(1u);
  return result;
}

uint64_t sub_23B53AB60(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_23B53A690();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_23B53AF1C();
      goto LABEL_22;
    }
    sub_23B53B3EC();
  }
  v11 = *v4;
  sub_23B56AE64();
  sub_23B56A36C();
  result = sub_23B56AE88();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_23B56AD98(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_23B56AE04();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_23B56AD98();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

void *sub_23B53ACF8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v1 = v0;
  v2 = sub_23B569FA0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAB50);
  v6 = *v0;
  v7 = sub_23B56AA20();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v20, v2);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v20, v5, v2);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
  {
LABEL_28:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_30;
  }
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

void *sub_23B53AF1C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256A2C590);
  v2 = *v0;
  v3 = sub_23B56AA20();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_23B53B0CC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;

  v1 = v0;
  v2 = sub_23B569FA0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAB50);
  v7 = sub_23B56AA2C();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v8;
    return result;
  }
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = *(_QWORD *)(v6 + 56);
  v31 = v0;
  v32 = v6 + 56;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & v10;
  v33 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 56;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_24;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v19);
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v33)
        goto LABEL_33;
      v20 = *(_QWORD *)(v32 + 8 * v15);
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v33)
          goto LABEL_33;
        v20 = *(_QWORD *)(v32 + 8 * v15);
        if (!v20)
          break;
      }
    }
LABEL_23:
    v12 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_24:
    v22 = *(_QWORD *)(v3 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v22 * v18, v2);
    sub_23B5301D4((unint64_t *)&qword_2542FAA50, MEMORY[0x24BDCEA88]);
    result = sub_23B56A1EC();
    v23 = -1 << *(_BYTE *)(v8 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v13 + 8 * v25);
      }
      while (v29 == -1);
      v16 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v16 * v22, v5, v2);
    ++*(_QWORD *)(v8 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v33)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v31;
    goto LABEL_35;
  }
  v20 = *(_QWORD *)(v32 + 8 * v21);
  if (v20)
  {
    v15 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v15);
    ++v21;
    if (v20)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_23B53B3EC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256A2C590);
  v3 = sub_23B56AA2C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_23B56AE64();
    swift_bridgeObjectRetain();
    sub_23B56A36C();
    result = sub_23B56AE88();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t _s10FindMyBase10SystemInfoO9underTestSbvgZ_0(uint64_t a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  int v3;
  uint64_t has_internal_content;
  id v5;
  id v6;
  uint64_t v7;
  char v8;
  char v9;
  _BYTE v11[9];
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 v14;

  if (qword_2542F9C38 != -1)
    a1 = swift_once();
  v12 = 0x7365547265646E75;
  v13 = 0xE900000000000074;
  MEMORY[0x24BDAC7A8](a1);
  v2 = v1 + 4;
  os_unfair_lock_lock(v1 + 4);
  sub_23B5014E0(&v14);
  v3 = v14;
  os_unfair_lock_unlock(v2);
  if (v3 != 2)
    return v3 & 1;
  has_internal_content = os_variant_has_internal_content();
  if ((_DWORD)has_internal_content)
  {
    v5 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
    v6 = objc_msgSend(v5, sel_environment);

    v7 = sub_23B56A18C();
    if (*(_QWORD *)(v7 + 16) && (sub_23B5015D8(0xD00000000000001BLL, 0x800000023B56C690), (v8 & 1) != 0))
    {
      swift_bridgeObjectRetain();
      v9 = 1;
    }
    else
    {
      v9 = 0;
    }
    swift_bridgeObjectRelease();
    has_internal_content = swift_bridgeObjectRelease();
  }
  else
  {
    v9 = 0;
  }
  v14 = v9;
  MEMORY[0x24BDAC7A8](has_internal_content);
  os_unfair_lock_lock(v2);
  sub_23B5596E4((_QWORD *(*)(uint64_t *__return_ptr))sub_23B53BAC0, v11);
  os_unfair_lock_unlock(v2);
  return v11[0];
}

uint64_t sub_23B53B8C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_23B56A798();
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      sub_23B53A180(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

unint64_t sub_23B53B958()
{
  unint64_t result;

  result = qword_256A2C570;
  if (!qword_256A2C570)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for SystemInfo.LowPowerExpressModes, &type metadata for SystemInfo.LowPowerExpressModes);
    atomic_store(result, (unint64_t *)&qword_256A2C570);
  }
  return result;
}

unint64_t sub_23B53B9A0()
{
  unint64_t result;

  result = qword_256A2C578;
  if (!qword_256A2C578)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for SystemInfo.LowPowerExpressModes, &type metadata for SystemInfo.LowPowerExpressModes);
    atomic_store(result, (unint64_t *)&qword_256A2C578);
  }
  return result;
}

uint64_t sub_23B53B9E4()
{
  return sub_23B50E15C(&qword_256A2C580, &qword_256A2C588, MEMORY[0x24BEE12E0]);
}

unint64_t sub_23B53BA14()
{
  unint64_t result;

  result = qword_2542F9958;
  if (!qword_2542F9958)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for SystemInfo.LowPowerExpressModes, &type metadata for SystemInfo.LowPowerExpressModes);
    atomic_store(result, (unint64_t *)&qword_2542F9958);
  }
  return result;
}

unint64_t sub_23B53BA5C()
{
  unint64_t result;

  result = qword_2542F9960;
  if (!qword_2542F9960)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for SystemInfo.LowPowerExpressModes, &type metadata for SystemInfo.LowPowerExpressModes);
    atomic_store(result, (unint64_t *)&qword_2542F9960);
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemInfo()
{
  return &type metadata for SystemInfo;
}

ValueMetadata *type metadata accessor for SystemInfo.LowPowerExpressModes()
{
  return &type metadata for SystemInfo.LowPowerExpressModes;
}

uint64_t sub_23B53BAC0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = sub_23B53869C(*(_QWORD *)(v1 + 16), **(_QWORD **)(v1 + 24), *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8), **(_BYTE **)(v1 + 32));
  if (!v2)
    *a1 = result & 1;
  return result;
}

uint64_t Identifier.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_23B569FA0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t Identifier.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_23B569FA0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

uint64_t Identifier.hash(into:)()
{
  sub_23B569FA0();
  sub_23B5301D4((unint64_t *)&qword_2542FAA50, MEMORY[0x24BDCEA88]);
  return sub_23B56A1F8();
}

uint64_t sub_23B53BBC4(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_23B56AD98();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_23B53BC30()
{
  return 25705;
}

uint64_t sub_23B53BC3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23B53BBC4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23B53BC68@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23B50AC88();
  *a1 = result & 1;
  return result;
}

uint64_t sub_23B53BC94(uint64_t a1)
{
  MEMORY[0x23B867894](&unk_23B571668, a1);
  return sub_23B56AF78();
}

uint64_t sub_23B53BCC8(uint64_t a1)
{
  MEMORY[0x23B867894](&unk_23B571668, a1);
  return sub_23B56AF84();
}

uint64_t Identifier.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v5 = type metadata accessor for Identifier.CodingKeys(255, *(_QWORD *)(a2 + 16), a3, a4);
  MEMORY[0x23B867894](&unk_23B571668, v5);
  v6 = sub_23B56AD2C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v11 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23B56AEC4();
  sub_23B569FA0();
  sub_23B5301D4(&qword_256A2C598, MEMORY[0x24BDCEA70]);
  sub_23B56AD14();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t type metadata accessor for Identifier.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Identifier.CodingKeys);
}

uint64_t Identifier.hashValue.getter()
{
  sub_23B56AE64();
  sub_23B569FA0();
  sub_23B5301D4((unint64_t *)&qword_2542FAA50, MEMORY[0x24BDCEA88]);
  sub_23B56A1F8();
  return sub_23B56AE88();
}

uint64_t Identifier.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  v24 = a3;
  v29 = sub_23B569FA0();
  v27 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v30 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Identifier.CodingKeys(255, a2, v6, v7);
  MEMORY[0x23B867894](&unk_23B571668, v8);
  v28 = sub_23B56ACF0();
  v25 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v10 = (char *)&v23 - v9;
  v23 = type metadata accessor for Identifier(0, a2, v11, v12);
  v13 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v15 = (char *)&v23 - v14;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v26 = v10;
  v16 = v31;
  sub_23B56AEAC();
  if (!v16)
  {
    v31 = v13;
    v17 = v25;
    v18 = v27;
    sub_23B5301D4(qword_256A2C5A0, MEMORY[0x24BDCEAA8]);
    v19 = v29;
    v20 = v28;
    v21 = v26;
    sub_23B56ACCC();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v21, v20);
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v30, v19);
    (*(void (**)(uint64_t, char *, uint64_t))(v31 + 32))(v24, v15, v23);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_23B53C0AC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Identifier.init(from:)(a1, *(_QWORD *)(a2 + 16), a3);
}

uint64_t sub_23B53C0C4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Identifier.encode(to:)(a1, a2, a3, a4);
}

uint64_t sub_23B53C0E0()
{
  sub_23B56AE64();
  Identifier.hash(into:)();
  return sub_23B56AE88();
}

uint64_t type metadata accessor for Identifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Identifier);
}

uint64_t sub_23B53C124(uint64_t a1)
{
  uint64_t v2;

  v2 = MEMORY[0x23B867894](&protocol conformance descriptor for Identifier<A>, a1);
  return IdentifierProtocol.description.getter(a1, v2);
}

uint64_t IdentifierProtocol.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD v9[2];

  v4 = sub_23B569FA0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[0] = 91;
  v9[1] = 0xE100000000000000;
  CustomStringConvertible.typeDescription.getter(a1, *(_QWORD *)(a2 + 8));
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  (*(void (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2);
  sub_23B5301D4(&qword_2542F97F0, MEMORY[0x24BDCEAB8]);
  sub_23B56AD44();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_23B56A3A8();
  return v9[0];
}

uint64_t sub_23B53C27C(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  a1[1] = MEMORY[0x23B867894](&protocol conformance descriptor for Identifier<A>);
  a1[2] = MEMORY[0x23B867894](&protocol conformance descriptor for Identifier<A>, a2);
  a1[3] = MEMORY[0x23B867894](&protocol conformance descriptor for Identifier<A>, a2);
  a1[4] = MEMORY[0x23B867894](&protocol conformance descriptor for Identifier<A>, a2);
  result = MEMORY[0x23B867894](&protocol conformance descriptor for Identifier<A>, a2);
  a1[5] = result;
  return result;
}

void sub_23B53C2FC()
{
  JUMPOUT(0x23B867894);
}

uint64_t sub_23B53C30C()
{
  return sub_23B5301D4((unint64_t *)&qword_2542FAA50, MEMORY[0x24BDCEA88]);
}

uint64_t dispatch thunk of IdentifierProtocol.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t sub_23B53C33C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23B569FA0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_23B53C3A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23B569FA0();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_23B53C3E0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23B569FA0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_23B53C414(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23B569FA0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_23B53C458(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23B569FA0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_23B53C49C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23B569FA0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_23B53C4E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23B569FA0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_23B53C524()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23B53C530(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23B569FA0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_23B53C56C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23B53C578(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23B569FA0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_23B53C5B8(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23B53C5F8 + 4 * asc_23B571410[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23B53C618 + 4 * byte_23B571415[v4]))();
}

_BYTE *sub_23B53C5F8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23B53C618(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23B53C620(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23B53C628(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23B53C630(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23B53C638(_DWORD *result)
{
  *result = 0;
  return result;
}

void sub_23B53C644()
{
  JUMPOUT(0x23B867894);
}

void sub_23B53C654()
{
  JUMPOUT(0x23B867894);
}

void sub_23B53C664()
{
  JUMPOUT(0x23B867894);
}

uint64_t sub_23B53C674()
{
  uint64_t v0;

  v0 = sub_23B56A060();
  __swift_allocate_value_buffer(v0, qword_256A33BB0);
  __swift_project_value_buffer(v0, (uint64_t)qword_256A33BB0);
  return sub_23B56A054();
}

uint64_t sub_23B53C6F4()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_23B53C728()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v1 = v0;
  if (qword_256A2B9F0 != -1)
    swift_once();
  v2 = sub_23B56A060();
  __swift_project_value_buffer(v2, (uint64_t)qword_256A33BB0);
  swift_retain();
  v3 = sub_23B56A048();
  v4 = sub_23B56A84C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = *(_QWORD *)(v1 + 24);
    v8 = *(_QWORD *)(v1 + 32);
    swift_bridgeObjectRetain();
    sub_23B5034E4(v7, v8, &v9);
    sub_23B56A918();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23B4F9000, v3, v4, "Warning: Resume already called from %{public}s. Ignoring.", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v6, -1, -1);
    MEMORY[0x23B867948](v5, -1, -1);

  }
  else
  {

    swift_release();
  }
}

void OnceCheckedContinuation.resume(returning:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v16 = a1;
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23B56A5E8();
  v7 = sub_23B56A900();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v15 - v10;
  v12 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v15 - v13;
  sub_23B4FB9D4();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    sub_23B53C728();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v11, v6);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v16, v2);
    sub_23B56A5DC();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v6);
  }
}

void OnceCheckedContinuation.resume(throwing:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v16 = a1;
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23B56A5E8();
  v7 = sub_23B56A900();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v15 - v10;
  v12 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v15 - v13;
  sub_23B4FB9D4();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    sub_23B53C728();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v11, v6);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v16, v2);
    sub_23B56A5D0();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v6);
  }
}

void OnceCheckedContinuation.resume<A>(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v4 = sub_23B56A5E8();
  v5 = sub_23B56A900();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v13 - v8;
  v10 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v13 - v11;
  sub_23B4FB9D4();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    sub_23B53C728();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v9, v4);
    sub_23B53CD00(a1, v4, a2);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v4);
  }
}

uint64_t sub_23B53CD00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  _QWORD v22[4];

  v22[1] = a2;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_23B56AE94();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v22 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))((char *)v22 - v15, a1, v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v18 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v18(v13, v16, a3);
    v19 = swift_allocError();
    v18(v20, v13, a3);
    v22[3] = v19;
    return sub_23B56A5D0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v16, v5);
    return sub_23B56A5DC();
  }
}

void OnceCheckedContinuation.resume(with:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  v2 = sub_23B56A5E8();
  v3 = sub_23B56A900();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v11 - v6;
  v8 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v11 - v9;
  sub_23B4FB9D4();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    sub_23B53C728();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v7, v2);
    sub_23B53CF9C(a1, v2);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v2);
  }
}

uint64_t sub_23B53CF9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 24);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_23B56AE94();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v18 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v18 - v14, a1, v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, v9);
    return sub_23B56A5D0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v15, v3);
    return sub_23B56A5DC();
  }
}

uint64_t OnceCheckedContinuation.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t method lookup function for OnceCheckedContinuation()
{
  return swift_lookUpClassMethod();
}

uint64_t static CaseIterable<>.allMembers.getter()
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  sub_23B56AA8C();
  swift_getAssociatedConformanceWitness();
  return sub_23B56A7C8();
}

uint64_t sub_23B53D1F4(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 112) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_23B53D238@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AC0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v6 = *(void (**)(uint64_t))(v1 + 152);
  if (v6)
  {
    v7 = sub_23B5332CC((uint64_t)v6);
    v6(v7);
    sub_23B50033C((uint64_t)v6);
    v8 = sub_23B569F40();
    v9 = *(_QWORD *)(v8 - 8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v5, 0, 1, v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) != 1)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v5, v8);
  }
  else
  {
    v11 = sub_23B569F40();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v5, 1, 1, v11);
  }
  sub_23B569F34();
  return sub_23B5333CC((uint64_t)v5);
}

uint64_t sub_23B53D36C()
{
  uint64_t v0;

  v0 = sub_23B5415A8();
  sub_23B5332CC(v0);
  return v0;
}

uint64_t sub_23B53D39C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 152);
  *(_QWORD *)(v2 + 152) = a1;
  *(_QWORD *)(v2 + 160) = a2;
  return sub_23B50033C(v5);
}

uint64_t (*sub_23B53D3EC())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t AsyncKeyedThrottle.__allocating_init(throttleInterval:)(double a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  AsyncKeyedThrottle.init(throttleInterval:)(a1);
  return v2;
}

uint64_t AsyncKeyedThrottle.init(throttleInterval:)(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  v4 = sub_23B569FA0();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v17 - v9;
  swift_defaultActor_initialize();
  sub_23B569F40();
  swift_getTupleTypeMetadata2();
  sub_23B56A54C();
  *(_QWORD *)(v1 + 112) = sub_23B56A1A4();
  sub_23B569F94();
  v11 = sub_23B569F64();
  v13 = v12;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
  type metadata accessor for WorkItemQueue(0);
  swift_allocObject();
  v14 = WorkItemQueue.init(name:identifier:)(v11, v13, (uint64_t)v8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  *(_QWORD *)(v2 + 128) = v14;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F98A0);
  *(_QWORD *)(v2 + 136) = sub_23B56A144();
  v15 = sub_23B56A144();
  *(_QWORD *)(v2 + 152) = 0;
  *(_QWORD *)(v2 + 160) = 0;
  *(_QWORD *)(v2 + 144) = v15;
  *(double *)(v2 + 120) = a1;
  return v2;
}

uint64_t sub_23B53D618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = v3;
  v30 = a2;
  v31 = a3;
  v6 = *v3;
  v7 = sub_23B569FA0();
  v32 = *(_QWORD *)(v7 - 8);
  v33 = v7;
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v29 - v12;
  v14 = *(_QWORD *)(v6 + 80);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  MEMORY[0x24BDAC7A8](v11);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = v4[16];
  v18 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a1, v14);
  v19 = (*(unsigned __int8 *)(v15 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v20 = (v16 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = (char *)swift_allocObject();
  *((_QWORD *)v21 + 2) = v14;
  *((_QWORD *)v21 + 3) = *(_QWORD *)(v6 + 88);
  *((_QWORD *)v21 + 4) = v18;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v21[v19], v17, v14);
  v22 = &v21[v20];
  v23 = v31;
  *(_QWORD *)v22 = v30;
  *((_QWORD *)v22 + 1) = v23;
  swift_retain();
  swift_retain();
  sub_23B569F94();
  v25 = v32;
  v24 = v33;
  (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v10, v13, v33);
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = &unk_256A2C638;
  *(_QWORD *)(v26 + 24) = v21;
  type metadata accessor for WorkItemQueue.WorkItem();
  swift_allocObject();
  v27 = sub_23B54BE80(0, (uint64_t)v10, (uint64_t)&unk_256A2C648, v26, (uint64_t)&unk_256A2C640, 0);
  swift_release();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v24);
  swift_release();
  sub_23B519108(v27);
  return swift_release();
}

uint64_t sub_23B53D854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;

  v6[12] = a5;
  v6[13] = a6;
  v6[10] = a3;
  v6[11] = a4;
  v6[8] = a1;
  v6[9] = a2;
  v8 = sub_23B569F40();
  v6[14] = v8;
  v6[15] = *(_QWORD *)(v8 - 8);
  v6[16] = swift_task_alloc();
  v6[17] = swift_task_alloc();
  v6[18] = *(_QWORD *)(a5 - 8);
  v6[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AC0);
  v6[20] = swift_task_alloc();
  v6[21] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B53D920()
{
  uint64_t v0;
  uint64_t Strong;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 176) = Strong;
  if (Strong)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 16))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 96));
    return swift_task_switch();
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_23B53D9EC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 176);
  swift_beginAccess();
  *(_QWORD *)(v0 + 184) = *(_QWORD *)(v1 + 112);
  swift_bridgeObjectRetain();
  return swift_task_switch();
}

uint64_t sub_23B53DA44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(void);

  v2 = *(_QWORD *)(v0 + 160);
  v1 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 96);
  MEMORY[0x23B8664C0](v3, *(_QWORD *)(v0 + 184), v7, v5, *(_QWORD *)(v0 + 104));
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v7);
  sub_23B533384(v1, v2);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 1, v5) == 1)
  {
    sub_23B5333CC(*(_QWORD *)(v0 + 160));
    v10 = (uint64_t (*)(void))(**(int **)(v0 + 80) + *(_QWORD *)(v0 + 80));
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 192) = v8;
    *v8 = v0;
    v8[1] = sub_23B53DD60;
    return v10();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 32))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 112));
    return swift_task_switch();
  }
}

uint64_t sub_23B53DB74()
{
  uint64_t v0;

  sub_23B53D238(*(_QWORD *)(v0 + 128));
  return swift_task_switch();
}

uint64_t sub_23B53DBB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  void (*v8)(uint64_t, uint64_t);
  _QWORD *v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t (*v18)(void);

  v1 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 120);
  sub_23B569EBC();
  v7 = v6;
  v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v8(v3, v4);
  v8(v2, v4);
  if (*(double *)(v1 + 120) >= v7)
  {
    if (qword_2542FAD78 != -1)
      swift_once();
    v11 = sub_23B56A060();
    __swift_project_value_buffer(v11, (uint64_t)qword_2542FC458);
    v12 = sub_23B56A048();
    v13 = sub_23B56A84C();
    v14 = os_log_type_enabled(v12, v13);
    v15 = *(_QWORD *)(v0 + 168);
    if (v14)
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_23B4F9000, v12, v13, "AsyncKeyedThrottle: Not dispatching, event is throttled", v16, 2u);
      MEMORY[0x23B867948](v16, -1, -1);
    }

    swift_release();
    sub_23B5333CC(v15);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v10 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    v18 = (uint64_t (*)(void))(**(int **)(v0 + 80) + *(_QWORD *)(v0 + 80));
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 192) = v9;
    *v9 = v0;
    v9[1] = sub_23B53DD60;
    v10 = v18;
  }
  return v10();
}

uint64_t sub_23B53DD60(char a1)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 200) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B53DDBC()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 200) == 1)
    return swift_task_switch();
  sub_23B5333CC(*(_QWORD *)(v0 + 168));
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B53DE64()
{
  uint64_t v0;

  sub_23B53F940(*(_QWORD *)(v0 + 72));
  return swift_task_switch();
}

uint64_t sub_23B53DEA4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 168);
  swift_release();
  sub_23B5333CC(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B53DF18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  v6[8] = *v5;
  return swift_task_switch();
}

uint64_t sub_23B53DF40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD *v10;
  __int128 v12;

  v5 = *(_QWORD *)(v4 + 56);
  v6 = *(_QWORD *)(v4 + 48);
  v12 = *(_OWORD *)(v4 + 32);
  v7 = type metadata accessor for AsyncKeyedThrottle(255, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 80), *(_QWORD *)(*(_QWORD *)(v4 + 64) + 88), a4);
  MEMORY[0x23B867894](&protocol conformance descriptor for AsyncKeyedThrottle<A>, v7);
  v8 = swift_task_alloc();
  *(_QWORD *)(v4 + 72) = v8;
  v9 = *(_OWORD *)(v4 + 16);
  *(_QWORD *)(v8 + 16) = v5;
  *(_OWORD *)(v8 + 24) = v9;
  *(_OWORD *)(v8 + 40) = v12;
  *(_QWORD *)(v8 + 56) = v6;
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 80) = v10;
  *v10 = v4;
  v10[1] = sub_23B53E028;
  return sub_23B56ADC8();
}

uint64_t sub_23B53E028()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B53E09C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v47 = a6;
  v48 = a7;
  v44 = a4;
  v45 = a5;
  v41 = a3;
  v42 = a1;
  v40 = *a2;
  v8 = v40;
  v9 = sub_23B569FA0();
  v49 = *(_QWORD *)(v9 - 8);
  v50 = v9;
  v10 = MEMORY[0x24BDAC7A8](v9);
  v46 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v43 = (char *)&v38 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28);
  v14 = *(_QWORD *)(v13 - 8);
  v38 = v13;
  v15 = *(_QWORD *)(v14 + 64);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v39 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v8 + 80);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = a2[16];
  v21 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v41, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v42, v13);
  v22 = (*(unsigned __int8 *)(v18 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v23 = (v19 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = (*(unsigned __int8 *)(v14 + 80) + v23 + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v25 = (char *)swift_allocObject();
  *((_QWORD *)v25 + 2) = v17;
  *((_QWORD *)v25 + 3) = *(_QWORD *)(v40 + 88);
  *((_QWORD *)v25 + 4) = v21;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(&v25[v22], v20, v17);
  v26 = &v25[v23];
  v27 = v45;
  *(_QWORD *)v26 = v44;
  *((_QWORD *)v26 + 1) = v27;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v25[v24], v39, v38);
  v28 = (uint64_t *)&v25[(v15 + v24 + 7) & 0xFFFFFFFFFFFFFFF8];
  v30 = v47;
  v29 = v48;
  *v28 = v47;
  v28[1] = v29;
  swift_retain();
  swift_retain();
  sub_23B5332CC(v30);
  v31 = v43;
  sub_23B569F94();
  v33 = v49;
  v32 = v50;
  v34 = (uint64_t)v46;
  (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v46, v31, v50);
  v35 = swift_allocObject();
  *(_QWORD *)(v35 + 16) = &unk_256A2C720;
  *(_QWORD *)(v35 + 24) = v25;
  type metadata accessor for WorkItemQueue.WorkItem();
  swift_allocObject();
  v36 = sub_23B54BE80(0, v34, (uint64_t)&unk_256A2C730, v35, (uint64_t)&unk_256A2C728, 0);
  swift_release();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v31, v32);
  swift_release();
  sub_23B519108(v36);
  return swift_release();
}

uint64_t sub_23B53E394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v8[23] = a8;
  v8[24] = v16;
  v8[21] = a6;
  v8[22] = a7;
  v8[19] = a4;
  v8[20] = a5;
  v8[17] = a2;
  v8[18] = a3;
  v8[16] = a1;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28);
  v8[25] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v8[26] = v11;
  v8[27] = *(_QWORD *)(v11 + 64);
  v8[28] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FADF0);
  v8[29] = swift_task_alloc();
  v12 = sub_23B569FA0();
  v8[30] = v12;
  v8[31] = *(_QWORD *)(v12 - 8);
  v8[32] = swift_task_alloc();
  v8[33] = swift_task_alloc();
  v13 = sub_23B569F40();
  v8[34] = v13;
  v8[35] = *(_QWORD *)(v13 - 8);
  v8[36] = swift_task_alloc();
  v8[37] = swift_task_alloc();
  v14 = *(_QWORD *)(a8 - 8);
  v8[38] = v14;
  v8[39] = *(_QWORD *)(v14 + 64);
  v8[40] = swift_task_alloc();
  v8[41] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AC0);
  v8[42] = swift_task_alloc();
  v8[43] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B53E510()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 352) = Strong;
  if (Strong)
  {
    v2 = *(_QWORD *)(v0 + 328);
    v3 = *(_QWORD *)(v0 + 184);
    v4 = *(_QWORD *)(v0 + 136);
    v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 304) + 16);
    *(_QWORD *)(v0 + 360) = v5;
    v5(v2, v4, v3);
    return swift_task_switch();
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_23B53E638()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 352);
  swift_beginAccess();
  *(_QWORD *)(v0 + 368) = *(_QWORD *)(v1 + 112);
  swift_bridgeObjectRetain();
  return swift_task_switch();
}

uint64_t sub_23B53E690()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  int v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(v0 + 336);
  v1 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 304);
  v5 = *(_QWORD *)(v0 + 272);
  v6 = *(_QWORD *)(v0 + 280);
  v7 = *(_QWORD *)(v0 + 184);
  MEMORY[0x23B8664C0](v3, *(_QWORD *)(v0 + 368), v7, v5, *(_QWORD *)(v0 + 192));
  swift_bridgeObjectRelease();
  v8 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  *(_QWORD *)(v0 + 376) = v8;
  v8(v3, v7);
  sub_23B533384(v1, v2);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 1, v5);
  v10 = *(_QWORD *)(v0 + 352);
  if (v9 == 1)
  {
    sub_23B5333CC(*(_QWORD *)(v0 + 336));
    v11 = *(_QWORD *)(v10 + 120);
    *(_BYTE *)(v0 + 425) = 1;
    *(_QWORD *)(v0 + 384) = v11;
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 360))(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 184));
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 32))(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 272));
  }
  return swift_task_switch();
}

uint64_t sub_23B53E7A0()
{
  uint64_t v0;

  sub_23B53D238(*(_QWORD *)(v0 + 288));
  return swift_task_switch();
}

uint64_t sub_23B53E7E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 352);
  v3 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 272);
  v5 = *(_QWORD *)(v0 + 280);
  sub_23B569EBC();
  v7 = v6;
  v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v8(v3, v4);
  LOBYTE(v1) = *(double *)(v1 + 120) < v7;
  sub_23B569EC8();
  sub_23B569EF8();
  v10 = v9;
  v8(v3, v4);
  v8(v2, v4);
  *(_BYTE *)(v0 + 425) = v1;
  *(_QWORD *)(v0 + 384) = v10;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 360))(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 184));
  return swift_task_switch();
}

uint64_t sub_23B53E8B0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 352);
  swift_beginAccess();
  *(_QWORD *)(v0 + 392) = *(_QWORD *)(v1 + 144);
  swift_bridgeObjectRetain();
  return swift_task_switch();
}

uint64_t sub_23B53E908()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
  v2 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 184);
  MEMORY[0x23B8664C0](v2, *(_QWORD *)(v0 + 392), v3, MEMORY[0x24BEE1328], *(_QWORD *)(v0 + 192));
  swift_bridgeObjectRelease();
  v1(v2, v3);
  v4 = *(unsigned __int8 *)(v0 + 424);
  v5 = *(_BYTE *)(v0 + 425);
  if (v4 == 2)
  {
    if (!*(_BYTE *)(v0 + 425))
LABEL_3:
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 360))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 184));
  }
  else
  {
    if ((v4 & 1) != 0)
      v5 = 0;
    if ((v5 & 1) == 0)
      goto LABEL_3;
  }
  return swift_task_switch();
}

uint64_t sub_23B53E9C8()
{
  uint64_t *v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v1 = (int *)v0[18];
  sub_23B53FD64(v0[17]);
  v4 = (uint64_t (*)(void))((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc();
  v0[50] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = sub_23B53EA2C;
  return v4();
}

uint64_t sub_23B53EA2C(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 408) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_BYTE *)(v4 + 426) = a1 & 1;
  return swift_task_switch();
}

uint64_t sub_23B53EAA4()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, _QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  v12 = *(_BYTE *)(v0 + 426);
  v1 = *(void (**)(uint64_t, uint64_t, _QWORD))(v0 + 360);
  v2 = *(_QWORD *)(v0 + 328);
  v3 = *(_QWORD *)(v0 + 304);
  v4 = *(_QWORD *)(v0 + 264);
  v13 = *(_QWORD *)(v0 + 248);
  v14 = *(_QWORD *)(v0 + 256);
  v15 = *(_QWORD *)(v0 + 240);
  v16 = *(_QWORD *)(v0 + 344);
  v5 = *(_QWORD *)(v0 + 136);
  v6 = swift_allocObject();
  v17 = *(_OWORD *)(v0 + 184);
  swift_weakInit();
  v1(v2, v5, v17);
  v7 = (*(unsigned __int8 *)(v3 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = v17;
  *(_QWORD *)(v8 + 32) = v6;
  *(_BYTE *)(v8 + 40) = v12;
  (*(void (**)(unint64_t, uint64_t, _QWORD))(v3 + 32))(v8 + v7, v2, v17);
  swift_retain();
  swift_retain();
  sub_23B569F94();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v14, v4, v15);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = &unk_256A2C770;
  *(_QWORD *)(v9 + 24) = v8;
  type metadata accessor for WorkItemQueue.WorkItem();
  swift_allocObject();
  v10 = sub_23B54BE80(0, v14, (uint64_t)&unk_256A2C780, v9, (uint64_t)&unk_256A2C778, 0);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v4, v15);
  swift_release();
  sub_23B519108(v10);
  swift_release();
  swift_release();
  sub_23B56A5DC();
  swift_release();
  sub_23B5333CC(v16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B53ED14()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 352);
  swift_beginAccess();
  *(_QWORD *)(v0 + 416) = *(_QWORD *)(v1 + 136);
  swift_bridgeObjectRetain();
  return swift_task_switch();
}

uint64_t sub_23B53ED6C()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 416);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
  v3 = *(_QWORD *)(v0 + 328);
  v5 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 192);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F98A0);
  MEMORY[0x23B8664C0](v3, v1, v5, v6, v4);
  swift_bridgeObjectRelease();
  v2(v3, v5);
  v7 = *(_QWORD *)(v0 + 112);
  swift_release();
  if (!v7)
    return swift_task_switch();
  if (qword_2542FAD78 != -1)
    swift_once();
  v8 = sub_23B56A060();
  __swift_project_value_buffer(v8, (uint64_t)qword_2542FC458);
  v9 = sub_23B56A048();
  v10 = sub_23B56A84C();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_23B4F9000, v9, v10, "AsyncKeyedThrottle: Not dispatching, event is throttled", v11, 2u);
    MEMORY[0x23B867948](v11, -1, -1);
  }
  v23 = *(_QWORD *)(v0 + 344);
  v13 = *(_QWORD *)(v0 + 224);
  v12 = *(_QWORD *)(v0 + 232);
  v14 = *(_QWORD *)(v0 + 208);
  v15 = *(_QWORD *)(v0 + 200);
  v17 = *(_QWORD *)(v0 + 168);
  v16 = *(_QWORD *)(v0 + 176);
  v18 = *(_QWORD *)(v0 + 160);

  v19 = sub_23B56A624();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v12, 1, 1, v19);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v18, v15);
  v20 = (*(unsigned __int8 *)(v14 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v21 = (char *)swift_allocObject();
  *((_QWORD *)v21 + 2) = 0;
  *((_QWORD *)v21 + 3) = 0;
  *((_QWORD *)v21 + 4) = v17;
  *((_QWORD *)v21 + 5) = v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 32))(&v21[v20], v13, v15);
  sub_23B5332CC(v17);
  sub_23B515858(v12, (uint64_t)&unk_256A2C740, (uint64_t)v21);
  swift_release();
  swift_release();
  sub_23B5333CC(v23);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B53F028()
{
  uint64_t v0;

  sub_23B53FE38(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(double *)(v0 + 384));
  return swift_task_switch();
}

uint64_t sub_23B53F070()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 344);
  swift_release();
  sub_23B5333CC(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B53F12C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, _QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  v1 = *(void (**)(uint64_t, uint64_t, _QWORD))(v0 + 360);
  v15 = *(_QWORD *)(v0 + 408);
  v16 = *(_QWORD *)(v0 + 344);
  v2 = *(_QWORD *)(v0 + 328);
  v3 = *(_QWORD *)(v0 + 304);
  v4 = *(_QWORD *)(v0 + 264);
  v12 = *(_QWORD *)(v0 + 248);
  v13 = *(_QWORD *)(v0 + 256);
  v14 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 136);
  v6 = swift_allocObject();
  v17 = *(_OWORD *)(v0 + 184);
  swift_weakInit();
  v1(v2, v5, v17);
  v7 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = v17;
  *(_QWORD *)(v8 + 32) = v6;
  (*(void (**)(unint64_t, uint64_t, _QWORD))(v3 + 32))(v8 + v7, v2, v17);
  swift_retain();
  swift_retain();
  sub_23B569F94();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v13, v4, v14);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = &unk_256A2C750;
  *(_QWORD *)(v9 + 24) = v8;
  type metadata accessor for WorkItemQueue.WorkItem();
  swift_allocObject();
  v10 = sub_23B54BE80(0, v13, (uint64_t)&unk_256A2C760, v9, (uint64_t)&unk_256A2C758, 0);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v4, v14);
  swift_release();
  sub_23B519108(v10);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 120) = v15;
  sub_23B56A5D0();
  swift_release();
  sub_23B5333CC(v16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B53F39C(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)(v3 + 64) = a2;
  *(_QWORD *)(v3 + 40) = a1;
  *(_QWORD *)(v3 + 48) = a3;
  return swift_task_switch();
}

uint64_t sub_23B53F3B8()
{
  uint64_t v0;
  uint64_t Strong;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 56) = Strong;
  if (Strong)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B53F448()
{
  uint64_t v0;

  sub_23B53F940(*(_QWORD *)(v0 + 48));
  return swift_task_switch();
}

uint64_t sub_23B53F484()
{
  uint64_t v0;

  sub_23B53FD6C(*(_QWORD *)(v0 + 48));
  return swift_task_switch();
}

uint64_t sub_23B53F4C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return swift_task_switch();
}

uint64_t sub_23B53F4D8()
{
  uint64_t v0;
  uint64_t Strong;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 56) = Strong;
  if (Strong)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B53F550()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  sub_23B53F940(v1);
  sub_23B53FD6C(v1);
  return swift_task_switch();
}

uint64_t sub_23B53F598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[4] = a5;
  v6[5] = a6;
  v6[3] = a4;
  return swift_task_switch();
}

uint64_t sub_23B53F5B4()
{
  uint64_t v0;
  void (*v1)(void);

  v1 = *(void (**)(void))(v0 + 24);
  if (v1)
    v1();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28);
  sub_23B56A5DC();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B53F63C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  v3 = sub_23B569FA0();
  v2[5] = v3;
  v2[6] = *(_QWORD *)(v3 - 8);
  v2[7] = swift_task_alloc();
  v2[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B53F6B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 16);
  v7 = swift_allocObject();
  swift_weakInit();
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = *(_QWORD *)(v5 + 80);
  v8[3] = *(_QWORD *)(v5 + 88);
  v8[4] = v7;
  v8[5] = v6;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_23B569F94();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v3);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = &unk_256A2C668;
  *(_QWORD *)(v9 + 24) = v8;
  type metadata accessor for WorkItemQueue.WorkItem();
  swift_allocObject();
  v10 = sub_23B54BE80(0, v1, (uint64_t)&unk_256A2C678, v9, (uint64_t)&unk_256A2C670, 0);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_release();
  sub_23B519108(v10);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B53F834(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return swift_task_switch();
}

uint64_t sub_23B53F84C()
{
  uint64_t v0;
  uint64_t Strong;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 56) = Strong;
  if (Strong)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B53F8C4()
{
  uint64_t v0;

  sub_23B53FA74(*(_QWORD *)(v0 + 48));
  return swift_task_switch();
}

uint64_t sub_23B53F900()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B53F934()
{
  uint64_t v0;

  return sub_23B5420B4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23B53F940(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = *v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AC0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v3 + 80);
  MEMORY[0x24BDAC7A8](v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  sub_23B53D238((uint64_t)v7);
  v11 = sub_23B569F40();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v7, 0, 1, v11);
  swift_beginAccess();
  sub_23B56A1C8();
  sub_23B56A1E0();
  return swift_endAccess();
}

uint64_t sub_23B53FA74(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, unint64_t, uint64_t);
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[3];

  v3 = *v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AC0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v31 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v3 + 80);
  v32 = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(v32 + 64);
  v9 = MEMORY[0x24BDAC7A8](v5);
  v30 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v24 - v10;
  v12 = sub_23B569F40();
  swift_getTupleTypeMetadata2();
  sub_23B56A54C();
  v28 = *(_QWORD *)(v3 + 88);
  v29 = v12;
  v13 = sub_23B56A1A4();
  v33 = v13;
  v14 = swift_bridgeObjectRetain();
  if (MEMORY[0x23B866880](v14, v7))
  {
    v25 = v8;
    v26 = v1;
    v15 = 0;
    v27 = v1 + 14;
    v16 = v30;
    v17 = v28;
    while (1)
    {
      v18 = sub_23B56A564();
      sub_23B56A540();
      if ((v18 & 1) != 0)
      {
        v19 = *(void (**)(char *, unint64_t, uint64_t))(v32 + 16);
        v19(v11, a1+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(_QWORD *)(v32 + 72) * v15, v7);
        v20 = v15 + 1;
        if (__OFADD__(v15, 1))
          goto LABEL_10;
      }
      else
      {
        result = sub_23B56AAA4();
        if (v25 != 8)
        {
          __break(1u);
          return result;
        }
        v34[0] = result;
        v19 = *(void (**)(char *, unint64_t, uint64_t))(v32 + 16);
        v19(v11, (unint64_t)v34, v7);
        swift_unknownObjectRelease();
        v20 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_10:
          __break(1u);
LABEL_11:
          swift_bridgeObjectRelease();
          v13 = v33;
          v1 = v26;
          goto LABEL_13;
        }
      }
      v19(v16, (unint64_t)v11, v7);
      v21 = v27;
      swift_beginAccess();
      v22 = *v21;
      swift_bridgeObjectRetain();
      MEMORY[0x23B8664C0](v11, v22, v7, v29, v17);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v7);
      sub_23B56A1C8();
      sub_23B56A1E0();
      ++v15;
      if (v20 == MEMORY[0x23B866880](a1, v7))
        goto LABEL_11;
    }
  }
  swift_bridgeObjectRelease();
LABEL_13:
  swift_beginAccess();
  v1[14] = v13;
  return swift_bridgeObjectRelease();
}

uint64_t sub_23B53FD64(uint64_t a1)
{
  return sub_23B53FD74(a1, 1);
}

uint64_t sub_23B53FD6C(uint64_t a1)
{
  return sub_23B53FD74(a1, 0);
}

uint64_t sub_23B53FD74(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[32];

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(_BYTE *))(v4 + 16))(&v6[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  v6[31] = a2;
  swift_beginAccess();
  sub_23B56A1C8();
  sub_23B56A1E0();
  return swift_endAccess();
}

uint64_t sub_23B53FE38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(void);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v41 = a3;
  v42 = a4;
  v37 = a2;
  v7 = *v5;
  v34 = v7;
  v35 = a1;
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28);
  v8 = *(_QWORD *)(v43 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](v43);
  v36 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FADF0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = v13;
  v14 = *(_QWORD *)(v7 + 80);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v17 = MEMORY[0x24BDAC7A8](v11);
  v18 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v40 = (char *)&v34 - v19;
  v20 = *(void (**)(void))(v15 + 16);
  v21 = v35;
  v20();
  v22 = sub_23B56A624();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v13, 1, 1, v22);
  ((void (*)(char *, uint64_t, uint64_t))v20)(v18, v21, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v37, v43);
  v23 = *(_QWORD *)(v34 + 88);
  v25 = type metadata accessor for AsyncKeyedThrottle(255, v14, v23, v24);
  v26 = MEMORY[0x23B867894](&protocol conformance descriptor for AsyncKeyedThrottle<A>, v25);
  v27 = (*(unsigned __int8 *)(v15 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v28 = (v16 + *(unsigned __int8 *)(v8 + 80) + v27) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v29 = swift_allocObject();
  v30 = v39;
  *(_QWORD *)(v29 + 16) = v39;
  *(_QWORD *)(v29 + 24) = v26;
  *(_QWORD *)(v29 + 32) = v14;
  *(_QWORD *)(v29 + 40) = v23;
  *(double *)(v29 + 48) = a5;
  *(_QWORD *)(v29 + 56) = v30;
  (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v29 + v27, v18, v14);
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v29 + v28, v36, v43);
  v31 = (_QWORD *)(v29 + ((v9 + v28 + 7) & 0xFFFFFFFFFFFFFFF8));
  v32 = v42;
  *v31 = v41;
  v31[1] = v32;
  swift_retain_n();
  swift_retain();
  v44 = sub_23B55A9E0((uint64_t)v38, (uint64_t)&unk_256A2C698, v29);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542F98A0);
  sub_23B56A1C8();
  sub_23B56A1E0();
  return swift_endAccess();
}

uint64_t sub_23B5400F8(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v9 + 48) = a8;
  *(_QWORD *)(v9 + 56) = a9;
  *(_QWORD *)(v9 + 32) = a6;
  *(_QWORD *)(v9 + 40) = a7;
  *(_QWORD *)(v9 + 24) = a5;
  *(double *)(v9 + 16) = a1;
  v10 = *a5;
  *(_QWORD *)(v9 + 64) = *a5;
  v11 = sub_23B569FA0();
  *(_QWORD *)(v9 + 72) = v11;
  *(_QWORD *)(v9 + 80) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v9 + 88) = swift_task_alloc();
  *(_QWORD *)(v9 + 96) = swift_task_alloc();
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28);
  *(_QWORD *)(v9 + 104) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v9 + 112) = v13;
  *(_QWORD *)(v9 + 120) = *(_QWORD *)(v13 + 64);
  *(_QWORD *)(v9 + 128) = swift_task_alloc();
  v14 = *(_QWORD *)(v10 + 80);
  *(_QWORD *)(v9 + 136) = v14;
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v9 + 144) = v15;
  *(_QWORD *)(v9 + 152) = *(_QWORD *)(v15 + 64);
  *(_QWORD *)(v9 + 160) = swift_task_alloc();
  v16 = sub_23B56AB40();
  *(_QWORD *)(v9 + 168) = v16;
  *(_QWORD *)(v9 + 176) = *(_QWORD *)(v16 - 8);
  *(_QWORD *)(v9 + 184) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B540208()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  v1 = sub_23B56AF6C();
  v3 = v2;
  sub_23B56AB34();
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_256A2C6A0 + dword_256A2C6A0);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 192) = v4;
  *v4 = v0;
  v4[1] = sub_23B54029C;
  return v6(v1, v3, 0, 0, 1);
}

uint64_t sub_23B54029C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  return swift_task_switch();
}

uint64_t sub_23B540324()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 128);
  v18 = *(_QWORD *)(v0 + 152);
  v19 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 112);
  v16 = v6;
  v23 = *(_QWORD *)(v0 + 96);
  v24 = *(_QWORD *)(v0 + 80);
  v25 = *(_QWORD *)(v0 + 88);
  v26 = *(_QWORD *)(v0 + 72);
  v22 = *(_QWORD *)(v0 + 56);
  v20 = *(_QWORD *)(v0 + 64);
  v21 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 32);
  v15 = *(_QWORD *)(v0 + 40);
  v17 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v7, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v15, v6);
  v8 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v9 = (v18 + *(unsigned __int8 *)(v5 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v10 = (char *)swift_allocObject();
  *((_QWORD *)v10 + 2) = v3;
  *((_QWORD *)v10 + 3) = *(_QWORD *)(v20 + 88);
  *((_QWORD *)v10 + 4) = v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 32))(&v10[v8], v1, v3);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(&v10[v9], v4, v16);
  v11 = &v10[(v19 + v9 + 7) & 0xFFFFFFFFFFFFFFF8];
  *(_QWORD *)v11 = v21;
  *((_QWORD *)v11 + 1) = v22;
  swift_retain();
  swift_retain();
  sub_23B569F94();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v25, v23, v26);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = &unk_256A2C6B0;
  *(_QWORD *)(v12 + 24) = v10;
  type metadata accessor for WorkItemQueue.WorkItem();
  swift_allocObject();
  v13 = sub_23B54BE80(0, v25, (uint64_t)&unk_256A2C6C0, v12, (uint64_t)&unk_256A2C6B8, 0);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v26);
  swift_release();
  sub_23B519108(v13);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B5405AC()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B540614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7[13] = a6;
  v7[14] = a7;
  v7[11] = a4;
  v7[12] = a5;
  v7[9] = a2;
  v7[10] = a3;
  v7[8] = a1;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28);
  v7[15] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[16] = v10;
  v7[17] = *(_QWORD *)(v10 + 64);
  v7[18] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FADF0);
  v7[19] = swift_task_alloc();
  v11 = *(_QWORD *)(a6 - 8);
  v7[20] = v11;
  v7[21] = *(_QWORD *)(v11 + 64);
  v7[22] = swift_task_alloc();
  v7[23] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B5406E0()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 192) = Strong;
  if (Strong)
  {
    v2 = *(_QWORD *)(v0 + 184);
    v3 = *(_QWORD *)(v0 + 104);
    v4 = *(_QWORD *)(v0 + 72);
    v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 160) + 16);
    *(_QWORD *)(v0 + 200) = v5;
    v5(v2, v4, v3);
    return swift_task_switch();
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_23B5407A8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 192);
  swift_beginAccess();
  *(_QWORD *)(v0 + 208) = *(_QWORD *)(v1 + 144);
  swift_bridgeObjectRetain();
  return swift_task_switch();
}

uint64_t sub_23B540800()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 104);
  MEMORY[0x23B8664C0](v1, *(_QWORD *)(v0 + 208), v3, MEMORY[0x24BEE1328], *(_QWORD *)(v0 + 112));
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(unsigned __int8 *)(v0 + 224);
  if (v4 != 2 && (v4 & 1) != 0)
    *(_QWORD *)(v0 + 216) = *(_QWORD *)(*(_QWORD *)(v0 + 192) + 120);
  return swift_task_switch();
}

uint64_t sub_23B5408A8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  sub_23B53FD64(v1);
  sub_23B5411C4(v1);
  return swift_task_switch();
}

uint64_t sub_23B5408F4()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, _QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v1 = *(void (**)(uint64_t, uint64_t, _QWORD))(v0 + 200);
  v2 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 160);
  v18 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 144);
  v15 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 128);
  v8 = *(_QWORD *)(v0 + 80);
  v16 = *(_QWORD *)(v0 + 88);
  v17 = *(_QWORD *)(v0 + 96);
  v9 = *(_QWORD *)(v0 + 72);
  v10 = sub_23B56A624();
  v19 = *(_OWORD *)(v0 + 104);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v4, 1, 1, v10);
  v1(v2, v9, v19);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
  v11 = (*(unsigned __int8 *)(v3 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v12 = (v15 + *(unsigned __int8 *)(v6 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  *(_OWORD *)(v13 + 32) = v19;
  *(_QWORD *)(v13 + 48) = v16;
  *(_QWORD *)(v13 + 56) = v17;
  *(_QWORD *)(v13 + 64) = v18;
  (*(void (**)(unint64_t, uint64_t, _QWORD))(v3 + 32))(v13 + v11, v2, v19);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 32))(v13 + v12, v5, v7);
  swift_retain();
  swift_retain();
  sub_23B515858(v4, (uint64_t)&unk_256A2C6D0, v13);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B540AB0()
{
  uint64_t v0;

  sub_23B53FE38(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(double *)(v0 + 216));
  return swift_task_switch();
}

uint64_t sub_23B540AF8()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B540B58(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v16)(void);

  v8[4] = a7;
  v8[5] = a8;
  v8[3] = a6;
  v10 = *a6;
  v8[6] = *a6;
  v11 = sub_23B569FA0();
  v8[7] = v11;
  v8[8] = *(_QWORD *)(v11 - 8);
  v8[9] = swift_task_alloc();
  v8[10] = swift_task_alloc();
  v12 = *(_QWORD *)(v10 + 80);
  v8[11] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v8[12] = v13;
  v8[13] = *(_QWORD *)(v13 + 64);
  v8[14] = swift_task_alloc();
  v16 = (uint64_t (*)(void))((char *)a4 + *a4);
  v14 = (_QWORD *)swift_task_alloc();
  v8[15] = v14;
  *v14 = v8;
  v14[1] = sub_23B540C2C;
  return v16();
}

uint64_t sub_23B540C2C(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 128) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_BYTE *)(v4 + 136) = a1 & 1;
  return swift_task_switch();
}

uint64_t sub_23B540CA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v13 = *(_BYTE *)(v0 + 136);
  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 80);
  v14 = *(_QWORD *)(v0 + 64);
  v15 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 32);
  v16 = *(_QWORD *)(v0 + 56);
  v7 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v6, v3);
  v8 = (*(unsigned __int8 *)(v2 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v3;
  *(_QWORD *)(v9 + 24) = *(_QWORD *)(v5 + 88);
  *(_QWORD *)(v9 + 32) = v7;
  *(_BYTE *)(v9 + 40) = v13;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 32))(v9 + v8, v1, v3);
  swift_retain();
  sub_23B569F94();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v15, v4, v16);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = &unk_256A2C700;
  *(_QWORD *)(v10 + 24) = v9;
  type metadata accessor for WorkItemQueue.WorkItem();
  swift_allocObject();
  v11 = sub_23B54BE80(0, v15, (uint64_t)&unk_256A2C710, v10, (uint64_t)&unk_256A2C708, 0);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v4, v16);
  swift_release();
  sub_23B519108(v11);
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28);
  sub_23B56A5DC();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B540EA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 64);
  v14 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 32);
  v16 = *(_QWORD *)(v0 + 128);
  v15 = *(_QWORD *)(v0 + 56);
  v7 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v6, v3);
  v8 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v9 = (char *)swift_allocObject();
  *((_QWORD *)v9 + 2) = v3;
  *((_QWORD *)v9 + 3) = *(_QWORD *)(v5 + 88);
  *((_QWORD *)v9 + 4) = v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 32))(&v9[v8], v1, v3);
  swift_retain();
  sub_23B569F94();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v14, v4, v15);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = &unk_256A2C6E0;
  *(_QWORD *)(v10 + 24) = v9;
  type metadata accessor for WorkItemQueue.WorkItem();
  swift_allocObject();
  v11 = sub_23B54BE80(0, v14, (uint64_t)&unk_256A2C6F0, v10, (uint64_t)&unk_256A2C6E8, 0);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v4, v15);
  swift_release();
  sub_23B519108(v11);
  swift_release();
  *(_QWORD *)(v0 + 16) = v16;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28);
  sub_23B56A5D0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B5410A0(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)(v3 + 64) = a2;
  *(_QWORD *)(v3 + 40) = a1;
  *(_QWORD *)(v3 + 48) = a3;
  return swift_task_switch();
}

uint64_t sub_23B5410BC()
{
  uint64_t v0;
  uint64_t Strong;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 56) = Strong;
  if (Strong)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B54114C()
{
  uint64_t v0;

  sub_23B53F940(*(_QWORD *)(v0 + 48));
  return swift_task_switch();
}

uint64_t sub_23B541188()
{
  uint64_t v0;

  sub_23B53FD6C(*(_QWORD *)(v0 + 48));
  return swift_task_switch();
}

uint64_t sub_23B5411C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];
  uint64_t v5;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(_BYTE *))(v2 + 16))(&v4[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  v5 = 0;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542F98A0);
  sub_23B56A1C8();
  sub_23B56A1E0();
  return swift_endAccess();
}

uint64_t AsyncKeyedThrottle.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23B50033C(*(_QWORD *)(v0 + 152));
  swift_defaultActor_destroy();
  return v0;
}

uint64_t AsyncKeyedThrottle.__deallocating_deinit()
{
  AsyncKeyedThrottle.deinit();
  return swift_defaultActor_deallocate();
}

uint64_t AsyncKeyedThrottle.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23B5412EC()
{
  return AsyncKeyedThrottle.unownedExecutor.getter();
}

uint64_t sub_23B541304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = sub_23B56AB28();
  *(_QWORD *)(v6 + 64) = v12;
  *(_QWORD *)(v6 + 72) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 80) = swift_task_alloc();
  *(_QWORD *)(v6 + 88) = swift_task_alloc();
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch();
}

uint64_t sub_23B5413A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  _QWORD *v5;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  sub_23B56AB40();
  sub_23B4FCC20((unint64_t *)&unk_2542F98B0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6E10], MEMORY[0x24BEE6E20]);
  sub_23B56AE1C();
  sub_23B4FCC20(&qword_2542F98A8, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6DC8], MEMORY[0x24BEE6E00]);
  sub_23B56AB4C();
  v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v4;
  v4(v1, v2);
  v5 = (_QWORD *)swift_task_alloc();
  v0[13] = v5;
  *v5 = v0;
  v5[1] = sub_23B5414C0;
  return sub_23B56AE28();
}

uint64_t sub_23B5414C0()
{
  uint64_t v0;
  uint64_t *v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  v3 = *(_QWORD *)(*v1 + 88);
  v4 = *(_QWORD *)(*v1 + 64);
  v5 = *v1;
  *(_QWORD *)(v5 + 112) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_23B54156C()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B5415A8()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 152);
}

uint64_t sub_23B5415D8()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_23B5415FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23B541688()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = v0[2];
  v3 = v0[3];
  v4 = *(_QWORD *)(v2 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v0[4];
  v7 = (uint64_t)v0 + v5;
  v8 = (_QWORD *)((char *)v0 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v9 = *v8;
  v10 = v8[1];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v11;
  *v11 = v1;
  v11[1] = sub_23B4FACE0;
  return sub_23B53D854(v6, v7, v9, v10, v2, v3);
}

uint64_t type metadata accessor for AsyncKeyedThrottle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncKeyedThrottle);
}

uint64_t sub_23B541734(uint64_t a1)
{
  uint64_t v1;

  return sub_23B53E09C(a1, *(uint64_t **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_23B541744()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23B541770()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_23B4FACE0;
  *(_OWORD *)(v2 + 40) = v3;
  return swift_task_switch();
}

uint64_t sub_23B5417D0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23B5417F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23B4FAC98;
  return sub_23B549620(a1, v4);
}

uint64_t sub_23B541854@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = sub_23B5415A8();
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  *a1 = v2;
  a1[1] = v4;
  return sub_23B5332CC(v2);
}

uint64_t sub_23B541884(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  if (*a1)
    v2 = a1[1];
  else
    v2 = 0;
  sub_23B5332CC(*a1);
  return sub_23B53D39C(v1, v2);
}

uint64_t sub_23B5418CC()
{
  return 16;
}

__n128 sub_23B5418D8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23B5418E4()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for AsyncKeyedThrottle()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AsyncKeyedThrottle.now.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of AsyncKeyedThrottle.dateProvider.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of AsyncKeyedThrottle.dateProvider.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of AsyncKeyedThrottle.dateProvider.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of AsyncKeyedThrottle.__allocating_init(throttleInterval:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t dispatch thunk of AsyncKeyedThrottle.throttle(key:block:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v5 + 272)
                                                                            + *(_QWORD *)(*(_QWORD *)v5 + 272));
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v12;
  *v12 = v6;
  v12[1] = sub_23B4FACE0;
  return v14(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of AsyncKeyedThrottle.clearThrottleForKeysExcept(keys:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 280) + *(_QWORD *)(*(_QWORD *)v1 + 280));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23B4FAC98;
  return v6(a1);
}

uint64_t sub_23B541AA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23B541B7C(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v4 = *(_QWORD *)(*((_QWORD *)v1 + 4) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *((_QWORD *)v1 + 2);
  v10 = *((_QWORD *)v1 + 3);
  v11 = v1[6];
  v12 = (uint64_t *)*((_QWORD *)v1 + 7);
  v13 = (uint64_t)v1 + v5;
  v14 = (uint64_t)v1 + v8;
  v15 = (uint64_t *)((char *)v1 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  v16 = *v15;
  v17 = v15[1];
  v18 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v18;
  *v18 = v2;
  v18[1] = sub_23B4FACE0;
  return sub_23B5400F8(v11, a1, v9, v10, v12, v13, v14, v16, v17);
}

uint64_t sub_23B541C70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23B541D40()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v2 = v0[2];
  v3 = v0[3];
  v4 = *(_QWORD *)(v2 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = v0[4];
  v10 = (uint64_t)v0 + v5;
  v11 = (uint64_t)v0 + v8;
  v12 = (_QWORD *)((char *)v0 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  v13 = *v12;
  v14 = v12[1];
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v15;
  *v15 = v1;
  v15[1] = sub_23B4FACE0;
  return sub_23B540614(v9, v10, v11, v13, v14, v2, v3);
}

uint64_t sub_23B541E14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  return swift_deallocObject();
}

uint64_t sub_23B541EDC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v4 = *(_QWORD *)(v1[4] - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28) - 8) + 80);
  v8 = v5 + v6 + v7;
  v9 = v1[2];
  v10 = v1[3];
  v11 = (int *)v1[6];
  v12 = v1[7];
  v13 = (uint64_t *)v1[8];
  v14 = (uint64_t)v1 + v5;
  v15 = (uint64_t)v1 + (v8 & ~v7);
  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v16;
  *v16 = v2;
  v16[1] = sub_23B4FACE0;
  return sub_23B540B58(a1, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t sub_23B541FB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v0 + ((v2 + 40) & ~v2);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_23B4FACE0;
  v5[5] = v3;
  v5[6] = v4;
  return swift_task_switch();
}

uint64_t sub_23B54202C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_BYTE *)(v0 + 40);
  v5 = v0 + ((v2 + 41) & ~v2);
  v6 = swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *(_QWORD *)v6 = v1;
  *(_QWORD *)(v6 + 8) = sub_23B4FACE0;
  *(_BYTE *)(v6 + 64) = v4;
  *(_QWORD *)(v6 + 40) = v3;
  *(_QWORD *)(v6 + 48) = v5;
  return swift_task_switch();
}

uint64_t sub_23B5420B4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_23B5420BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v4 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  if (*(_QWORD *)(v0 + v8))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_23B5421B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28) - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v0 + 32);
  v9 = v0 + v4;
  v10 = v0 + v5;
  v11 = *(_QWORD *)(v0 + v5);
  v12 = *(_QWORD *)(v10 + 8);
  v13 = v0 + v7;
  v14 = (uint64_t *)(v0 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  v15 = *v14;
  v16 = v14[1];
  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v17;
  *v17 = v1;
  v17[1] = sub_23B4FACE0;
  return sub_23B53E394(v8, v9, v11, v12, v13, v15, v16, v2);
}

uint64_t sub_23B5422AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  if (*(_QWORD *)(v0 + 32))
    swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + ((v3 + 48) & ~v3), v1);
  return swift_deallocObject();
}

uint64_t sub_23B542334()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = v0 + ((v2 + 48) & ~v2);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_23B4FACE0;
  v6[4] = v4;
  v6[5] = v5;
  v6[3] = v3;
  return swift_task_switch();
}

uint64_t objectdestroy_45Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_23B542430()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v0 + ((v2 + 40) & ~v2);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_23B4FACE0;
  v5[5] = v3;
  v5[6] = v4;
  return swift_task_switch();
}

uint64_t objectdestroy_56Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_23B542518()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_BYTE *)(v0 + 40);
  v5 = v0 + ((v2 + 41) & ~v2);
  v6 = swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *(_QWORD *)v6 = v1;
  *(_QWORD *)(v6 + 8) = sub_23B4FACE0;
  *(_BYTE *)(v6 + 64) = v4;
  *(_QWORD *)(v6 + 40) = v3;
  *(_QWORD *)(v6 + 48) = v5;
  return swift_task_switch();
}

uint64_t retry<A>(times:retryDelay:shouldRetry:block:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  *(_QWORD *)(v8 + 64) = a8;
  *(_QWORD *)(v8 + 72) = v12;
  *(_QWORD *)(v8 + 48) = a6;
  *(_QWORD *)(v8 + 56) = a7;
  *(_BYTE *)(v8 + 192) = a5;
  *(_QWORD *)(v8 + 32) = a3;
  *(_QWORD *)(v8 + 40) = a4;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  v9 = sub_23B56AB94();
  *(_QWORD *)(v8 + 80) = v9;
  *(_QWORD *)(v8 + 88) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 96) = swift_task_alloc();
  *(_QWORD *)(v8 + 104) = swift_task_alloc();
  v10 = sub_23B56ABAC();
  *(_QWORD *)(v8 + 112) = v10;
  *(_QWORD *)(v8 + 120) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 128) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B542670()
{
  _QWORD *v0;
  int *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(_QWORD);

  sub_23B56A6C0();
  v1 = (int *)v0[8];
  v2 = v0[3];
  if (v2 <= 1)
    v2 = 1;
  v0[17] = v2;
  v0[18] = 0;

  v5 = (uint64_t (*)(_QWORD))((char *)v1 + *v1);
  v3 = (_QWORD *)swift_task_alloc();
  v0[19] = v3;
  *v3 = v0;
  v3[1] = sub_23B54273C;
  return v5(v0[2]);
}

uint64_t sub_23B54273C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 160) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23B5427C8()
{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void *);
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  _QWORD *v9;
  void *v11;
  void *v12;
  int *v13;
  _QWORD *v14;
  uint64_t (*v15)(_QWORD);

  v1 = *(void **)(v0 + 160);
  v2 = *(uint64_t (**)(void *))(v0 + 48);
  v3 = v1;
  v4 = v1;
  if ((v2(v1) & 1) == 0)
  {
    v11 = *(void **)(v0 + 160);

LABEL_5:
    swift_willThrow();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if ((*(_BYTE *)(v0 + 192) & 1) == 0)
  {
    v5 = *(_QWORD *)(v0 + 96);
    v6 = *(_QWORD *)(v0 + 80);
    v7 = *(_QWORD *)(v0 + 88);
    sub_23B56ABA0();
    sub_23B56AB64();
    sub_23B56AB7C();
    v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    *(_QWORD *)(v0 + 168) = v8;
    v8(v5, v6);
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 176) = v9;
    *v9 = v0;
    v9[1] = sub_23B5429BC;
    return sub_23B56AB70();
  }

  v11 = *(void **)(v0 + 160);
  if (*(_QWORD *)(v0 + 144) == *(_QWORD *)(v0 + 136) - 1)
    goto LABEL_5;

  sub_23B56A6C0();
  v12 = *(void **)(v0 + 160);
  ++*(_QWORD *)(v0 + 144);
  v13 = *(int **)(v0 + 64);

  v15 = (uint64_t (*)(_QWORD))((char *)v13 + *v13);
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 152) = v14;
  *v14 = v0;
  v14[1] = sub_23B54273C;
  return v15(*(_QWORD *)(v0 + 16));
}

uint64_t sub_23B5429BC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

uint64_t sub_23B542A28()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v10;
  int *v11;
  _QWORD *v12;
  uint64_t (*v13)(_QWORD);

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
  v3 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 80);

  v1(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (*(_QWORD *)(v0 + 144) == *(_QWORD *)(v0 + 136) - 1)
  {
    v7 = *(void **)(v0 + 160);
    swift_willThrow();

LABEL_5:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v8 = *(_QWORD *)(v0 + 184);

  sub_23B56A6C0();
  if (v8)
  {

    goto LABEL_5;
  }
  v10 = *(void **)(v0 + 160);
  ++*(_QWORD *)(v0 + 144);
  v11 = *(int **)(v0 + 64);

  v13 = (uint64_t (*)(_QWORD))((char *)v11 + *v11);
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 152) = v12;
  *v12 = v0;
  v12[1] = sub_23B54273C;
  return v13(*(_QWORD *)(v0 + 16));
}

uint64_t sub_23B542B6C()
{
  uint64_t v0;
  void *v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(void **)(v0 + 160);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
  v4 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 80);

  v2(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Date.iso8601.getter()
{
  return sub_23B4FCCF4(&qword_256A2B9F8, (void **)&qword_256A2C790);
}

id sub_23B542C24()
{
  id v0;
  id result;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD15D0]), sel_init);
  result = objc_msgSend(v0, sel_setFormatOptions_, 3955);
  qword_256A2C790 = (uint64_t)v0;
  return result;
}

void sub_23B542C70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  void *v5;
  uint64_t v6;

  v0 = sub_23B56A000();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD15D0]), sel_init);
  objc_msgSend(v4, sel_setFormatOptions_, 3955);
  sub_23B569FF4();
  v5 = (void *)sub_23B569FE8();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  objc_msgSend(v4, sel_setTimeZone_, v5);

  qword_2542F98F0 = (uint64_t)v4;
}

uint64_t Date.epoch.getter()
{
  uint64_t result;
  double v1;
  double v2;

  result = sub_23B569F04();
  v2 = v1 * 1000.0;
  if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < 9.22337204e18)
    return (uint64_t)v2;
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_23B542DA8()
{
  uint64_t result;
  mach_timebase_info info;
  uint64_t v2;

  v2 = *MEMORY[0x24BDAC8D0];
  info = 0;
  result = mach_timebase_info(&info);
  if ((_DWORD)result)
  {
    result = sub_23B56AC24();
    __break(1u);
  }
  else
  {
    qword_2542F97D0 = (uint64_t)info;
  }
  return result;
}

Swift::UInt64 __swiftcall convertToNanoseconds(_:)(Swift::UInt64 result)
{
  Swift::UInt64 v1;

  v1 = result;
  if (qword_2542F97D8 != -1)
    result = swift_once();
  if (is_mul_ok(v1, qword_2542F97D0))
  {
    if (HIDWORD(qword_2542F97D0))
      return v1 * qword_2542F97D0 / HIDWORD(qword_2542F97D0);
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_23B542ECC()
{
  uint64_t inited;
  void *v1;
  id v2;
  unint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_256A2C7B0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23B56F770;
  v1 = (void *)*MEMORY[0x24BDD0CC8];
  *(_QWORD *)(inited + 64) = MEMORY[0x24BEE1768];
  *(_QWORD *)(inited + 32) = v1;
  *(_QWORD *)(inited + 40) = 508;
  v2 = v1;
  result = sub_23B50F594(inited);
  qword_256A2C798 = result;
  return result;
}

uint64_t static NSFileManager.daemonAgentDirectoryAttributes.getter()
{
  if (qword_256A2BA00 != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static NSFileManager.daemonAgentDirectoryAttributes.setter(uint64_t a1)
{
  if (qword_256A2BA00 != -1)
    swift_once();
  swift_beginAccess();
  qword_256A2C798 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static NSFileManager.daemonAgentDirectoryAttributes.modify())()
{
  if (qword_256A2BA00 != -1)
    swift_once();
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t static NSFileManager.createDirectoryIfNecessary(url:attributes:)(uint64_t a1, void *a2)
{
  id v4;
  void *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v14 = 0;
  sub_23B569D9C();
  v5 = (void *)sub_23B56A264();
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v4, sel_fileExistsAtPath_isDirectory_, v5, &v14);

  if (v6)
  {
    if ((v14 & 1) == 0)
    {
      sub_23B56A834();
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9898);
      v7 = swift_allocObject();
      *(_OWORD *)(v7 + 16) = xmmword_23B56F770;
      v8 = sub_23B569D60();
      v10 = v9;
      *(_QWORD *)(v7 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v7 + 64) = sub_23B543450();
      *(_QWORD *)(v7 + 32) = v8;
      *(_QWORD *)(v7 + 40) = v10;
      sub_23B54369C(0, &qword_256A2C7A8);
      v11 = (void *)sub_23B56A8F4();
      sub_23B56A03C();
      swift_bridgeObjectRelease();

    }
  }
  else
  {
    v12 = (void *)MEMORY[0x23B867378]();
    sub_23B54323C(v4, a1, a2);
    objc_autoreleasePoolPop(v12);
  }

  return v6 ^ 1;
}

void sub_23B54323C(void *a1, uint64_t a2, void *a3)
{
  void *v5;
  unsigned int v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16[2];

  v16[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = (void *)sub_23B569D84();
  if (a3)
  {
    type metadata accessor for FileAttributeKey(0);
    sub_23B4FCC20(&qword_256A2BBF8, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_23B56F220);
    a3 = (void *)sub_23B56A180();
  }
  v16[0] = 0;
  v6 = objc_msgSend(a1, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v5, 1, a3, v16);

  if (v6)
  {
    v7 = v16[0];
  }
  else
  {
    v8 = v16[0];
    v9 = (void *)sub_23B569D54();

    swift_willThrow();
    sub_23B56A834();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9898);
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_23B56F770;
    v16[0] = v9;
    v11 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAD88);
    v12 = sub_23B56A300();
    v14 = v13;
    *(_QWORD *)(v10 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v10 + 64) = sub_23B543450();
    *(_QWORD *)(v10 + 32) = v12;
    *(_QWORD *)(v10 + 40) = v14;
    sub_23B54369C(0, &qword_256A2C7A8);
    v15 = (void *)sub_23B56A8F4();
    sub_23B56A03C();
    swift_bridgeObjectRelease();

  }
}

unint64_t sub_23B543450()
{
  unint64_t result;

  result = qword_256A2C7A0;
  if (!qword_256A2C7A0)
  {
    result = MEMORY[0x23B867894](MEMORY[0x24BDCFB50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_256A2C7A0);
  }
  return result;
}

void static NSFileManager.removeDirectory(url:)()
{
  id v0;
  void *v1;
  unsigned int v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  id v13;
  id v14[2];

  v14[1] = *(id *)MEMORY[0x24BDAC8D0];
  v0 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v1 = (void *)sub_23B569D84();
  v14[0] = 0;
  v2 = objc_msgSend(v0, sel_removeItemAtURL_error_, v1, v14);

  if (v2)
  {
    v3 = v14[0];
    return;
  }
  v4 = v14[0];
  v5 = (void *)sub_23B569D54();

  swift_willThrow();
  v14[0] = v5;
  v6 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAD88);
  sub_23B54369C(0, &qword_2542F98E8);
  if (!swift_dynamicCast())
    goto LABEL_11;

  v7 = objc_msgSend(v13, sel_domain);
  v8 = sub_23B56A288();
  v10 = v9;

  if (sub_23B56A288() == v8 && v11 == v10)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_8;
  }
  v12 = sub_23B56AD98();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v12 & 1) != 0)
  {
LABEL_8:
    if (objc_msgSend(v13, sel_code) == (id)4)
    {

      return;
    }
  }
  swift_willThrow();
LABEL_11:

}

uint64_t sub_23B54369C(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void static NSFileManager.emptyDirectory(url:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void *v18;
  id v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  __int128 v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  char v33;
  void (*v34)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v35;
  unsigned int v36;
  char *v37;
  id v38;
  void *v39;
  uint64_t v40;
  char *v41;
  id v42;
  id v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  _QWORD v57[2];
  __int128 v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t (*v64)(char *, uint64_t, uint64_t);
  id v65;
  void (*v66)(char *, uint64_t);
  void (*v67)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v68;
  _OWORD v69[2];
  _OWORD v70[2];
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F97E8);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v60 = (char *)v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v59 = (char *)v57 - v6;
  MEMORY[0x24BDAC7A8](v5);
  v61 = (char *)v57 - v7;
  v8 = sub_23B569DA8();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)v57 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v57 - v16;
  v18 = (void *)objc_opt_self();
  v65 = objc_msgSend(v18, sel_defaultManager);
  v19 = objc_msgSend(v18, sel_defaultManager);
  v64 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v20 = v64(v17, a1, v8);
  v21 = (void *)MEMORY[0x23B867378](v20);
  v22 = objc_msgSend(v18, sel_defaultManager);
  v23 = sub_23B56A810();

  objc_autoreleasePoolPop(v21);
  v66 = *(void (**)(char *, uint64_t))(v9 + 8);
  v66(v17, v8);

  if (v23)
  {
    v25 = (void *)v23;
    v62 = v12;
    *(_QWORD *)&v24 = 141558531;
    v58 = v24;
    v57[1] = MEMORY[0x24BEE4AD8] + 8;
    v26 = (uint64_t)v60;
    v27 = (uint64_t)v61;
    v28 = (uint64_t)v59;
    v29 = v65;
    v63 = v9;
    while (1)
    {
      v68 = v25;
      v31 = v25;
      v32 = (void *)MEMORY[0x23B867378]();
      if (objc_msgSend(v31, sel_nextObject))
      {
        sub_23B56A9D8();
        swift_unknownObjectRelease();
        sub_23B503EB4(v69, v70);
        sub_23B503EB4(v70, v69);
        v33 = swift_dynamicCast();
        v34 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
        if ((v33 & 1) != 0)
        {
          v34(v26, 0, 1, v8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v26, 1, v8) != 1)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v28, v26, v8);
            v34(v28, 0, 1, v8);
            goto LABEL_13;
          }
        }
        else
        {
          v34(v26, 1, 1, v8);
        }
        sub_23B5043F0(v26, &qword_2542F97E8);

        v34(v28, 1, 1, v8);
      }
      else
      {

        v34 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
        v34(v28, 1, 1, v8);
      }
      v68 = 0;
LABEL_13:
      objc_autoreleasePoolPop(v32);

      sub_23B50048C(v28, v27);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v27, 1, v8) == 1)
      {

        v29 = v68;
        goto LABEL_24;
      }
      v67 = v34;
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v15, v27, v8);
      v35 = (void *)sub_23B569D84();
      *(_QWORD *)&v70[0] = 0;
      v36 = objc_msgSend(v29, sel_removeItemAtURL_error_, v35, v70);

      if (v36)
      {
        v30 = *(id *)&v70[0];
        v66(v15, v8);
      }
      else
      {
        v37 = v15;
        v38 = *(id *)&v70[0];
        v39 = (void *)sub_23B569D54();

        swift_willThrow();
        if (qword_2542FAD78 != -1)
          swift_once();
        v40 = sub_23B56A060();
        __swift_project_value_buffer(v40, (uint64_t)qword_2542FC458);
        v41 = v62;
        v64(v62, (uint64_t)v37, v8);
        v42 = v39;
        v43 = v39;
        v44 = sub_23B56A048();
        v45 = sub_23B56A834();
        if (os_log_type_enabled(v44, v45))
        {
          v46 = swift_slowAlloc();
          v47 = (_QWORD *)swift_slowAlloc();
          v48 = swift_slowAlloc();
          *(_QWORD *)&v70[0] = v48;
          *(_DWORD *)v46 = v58;
          *(_QWORD *)(v46 + 4) = 1752392040;
          *(_WORD *)(v46 + 12) = 2081;
          sub_23B4FCC20((unint64_t *)&qword_256A2C550, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
          v49 = sub_23B56AD44();
          *(_QWORD *)(v46 + 14) = sub_23B5034E4(v49, v50, (uint64_t *)v70);
          swift_bridgeObjectRelease();
          v51 = v66;
          v66(v41, v8);
          *(_WORD *)(v46 + 22) = 2114;
          v52 = sub_23B569D48();
          *(_QWORD *)(v46 + 24) = v52;
          *v47 = v52;

          _os_log_impl(&dword_23B4F9000, v44, v45, "Error deleting %{private,mask.hash}s: %{public}@)", (uint8_t *)v46, 0x20u);
          __swift_instantiateConcreteTypeFromMangledName(&qword_2542F99E0);
          swift_arrayDestroy();
          v53 = v47;
          v26 = (uint64_t)v60;
          MEMORY[0x23B867948](v53, -1, -1);
          swift_arrayDestroy();
          v54 = v48;
          v27 = (uint64_t)v61;
          MEMORY[0x23B867948](v54, -1, -1);
          v55 = v46;
          v28 = (uint64_t)v59;
          MEMORY[0x23B867948](v55, -1, -1);

          v51(v37, v8);
        }
        else
        {

          v56 = v66;
          v66(v41, v8);

          v56(v37, v8);
        }
        v9 = v63;
        v15 = v37;
        v29 = v65;
      }
      v25 = v68;
      if (!v68)
        goto LABEL_22;
    }
  }
  v67 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
  v27 = (uint64_t)v61;
  v29 = v65;
LABEL_22:
  v67(v27, 1, 1, v8);
LABEL_24:

}

uint64_t NSFileManager.flatSequence(at:includingPropertiesForKeys:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v4 = sub_23B569DA8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = swift_bridgeObjectRetain();
  v9 = (void *)MEMORY[0x23B867378](v8);
  v10 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v11 = sub_23B56A810();

  objc_autoreleasePoolPop(v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  result = swift_bridgeObjectRelease();
  *a2 = v11;
  return result;
}

uint64_t NSFileManager.entryCount(directory:)(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  char v24;
  void (*v25)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  id v28;
  void *v29;
  id v31[3];
  char *v32;
  _OWORD v33[2];
  _OWORD v34[2];
  char *v35;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F97E8);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v35 = (char *)v31 - v8;
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v31 - v9;
  v11 = sub_23B569DA8();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((URL.isDirectory.getter() & 1) == 0)
  {
LABEL_16:
    sub_23B56A288();
    v19 = v27;
    v28 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v29 = (void *)sub_23B56A264();
    swift_bridgeObjectRelease();
    objc_msgSend(v28, sel_initWithDomain_code_userInfo_, v29, 258, 0);

    swift_willThrow();
    return v19;
  }
  v32 = v6;
  v31[1] = v1;
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  v16 = (void *)MEMORY[0x23B867378](v15);
  v17 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v18 = (id)sub_23B56A810();

  objc_autoreleasePoolPop(v16);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v31[0] = v18;
  v19 = 0;
  v31[2] = (id)(MEMORY[0x24BEE4AD8] + 8);
  v20 = (uint64_t)v35;
  while (1)
  {
    if (!v18)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
      v18 = v31[0];
      goto LABEL_19;
    }
    v21 = v18;
    v22 = (void *)MEMORY[0x23B867378]();
    if (objc_msgSend(v21, sel_nextObject))
    {
      sub_23B56A9D8();
      swift_unknownObjectRelease();
      sub_23B503EB4(v33, v34);
      sub_23B503EB4(v34, v33);
      v23 = (uint64_t)v32;
      v24 = swift_dynamicCast();
      v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
      if ((v24 & 1) != 0)
      {
        v25(v23, 0, 1, v11);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v23, 1, v11) != 1)
        {
          v20 = (uint64_t)v35;
          (*(void (**)(void))(v12 + 32))();
          v25(v20, 0, 1, v11);
          goto LABEL_12;
        }
      }
      else
      {
        v25(v23, 1, 1, v11);
      }
      sub_23B5043F0(v23, &qword_2542F97E8);

      v20 = (uint64_t)v35;
      v25((uint64_t)v35, 1, 1, v11);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v20, 1, 1, v11);
    }
    v18 = 0;
LABEL_12:
    objc_autoreleasePoolPop(v22);

    sub_23B50048C(v20, (uint64_t)v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
      break;
    sub_23B5043F0((uint64_t)v10, &qword_2542F97E8);
    if (__OFADD__(v19++, 1))
    {
      __break(1u);
      goto LABEL_16;
    }
  }

LABEL_19:
  return v19;
}

void NSFileManager.removeEmptyDirectoriesRecursively(baseURL:)(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  __int128 v27;
  id v28;
  void *v29;
  uint64_t v30;
  char v31;
  void (*v32)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t inited;
  void *v37;
  id v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char *v49;
  char *v50;
  NSObject *v51;
  os_log_type_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  os_log_t v59;
  void (*v60)(char *, uint64_t);
  id v61;
  void *v62;
  uint64_t v63;
  os_log_t v64;
  int v65;
  uint64_t v66;
  __int128 v67;
  char *v68;
  uint64_t (*v69)(char *, uint64_t, uint64_t);
  char *v70;
  __int128 v71;
  void *v72;
  char *v73;
  void (*v74)(char *, uint64_t);
  char *v75;
  char *v76;
  _OWORD v77[2];
  _OWORD v78[2];
  char *v79;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F97E0);
  MEMORY[0x24BDAC7A8](v4);
  v75 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F97E8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v63 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v76 = (char *)&v63 - v13;
  v14 = sub_23B569DA8();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v16);
  v79 = (char *)&v63 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v63 - v21;
  if ((URL.isDirectory.getter() & 1) == 0)
  {
    sub_23B56A288();
    v61 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v62 = (void *)sub_23B56A264();
    swift_bridgeObjectRelease();
    objc_msgSend(v61, sel_initWithDomain_code_userInfo_, v62, 258, 0);

    swift_willThrow();
    return;
  }
  v70 = v9;
  v69 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v23 = v69(v22, a1, v14);
  v24 = (void *)MEMORY[0x23B867378](v23);
  v25 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v26 = (void *)sub_23B56A810();

  objc_autoreleasePoolPop(v24);
  v74 = *(void (**)(char *, uint64_t))(v15 + 8);
  v74(v22, v14);
  if (v26)
  {
    v68 = v18;
    v73 = v12;
    v72 = (void *)*MEMORY[0x24BDBCC60];
    *((_QWORD *)&v27 + 1) = 2;
    v71 = xmmword_23B56F770;
    *(_QWORD *)&v27 = 136315138;
    v67 = v27;
    v66 = MEMORY[0x24BEE4AD8] + 8;
    while (1)
    {
      v28 = v26;
      v29 = (void *)MEMORY[0x23B867378]();
      if (!objc_msgSend(v28, sel_nextObject))
        break;
      sub_23B56A9D8();
      swift_unknownObjectRelease();
      sub_23B503EB4(v77, v78);
      sub_23B503EB4(v78, v77);
      v30 = (uint64_t)v70;
      v31 = swift_dynamicCast();
      v32 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
      if ((v31 & 1) == 0)
      {
        v32(v30, 1, 1, v14);
LABEL_10:
        sub_23B5043F0(v30, &qword_2542F97E8);

LABEL_11:
        v33 = (uint64_t)v73;
        v32((uint64_t)v73, 1, 1, v14);
        v26 = 0;
        goto LABEL_12;
      }
      v32(v30, 0, 1, v14);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v30, 1, v14) == 1)
        goto LABEL_10;
      v33 = (uint64_t)v73;
      (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v73, v30, v14);
      v32(v33, 0, 1, v14);
LABEL_12:
      v34 = (uint64_t)v76;
      objc_autoreleasePoolPop(v29);

      sub_23B50048C(v33, v34);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v34, 1, v14) == 1)
      {

        return;
      }
      v35 = v79;
      (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v79, v34, v14);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9890);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v71;
      v37 = v72;
      *(_QWORD *)(inited + 32) = v72;
      v38 = v37;
      sub_23B51529C(inited);
      swift_setDeallocating();
      type metadata accessor for URLResourceKey(0);
      v39 = v35;
      swift_arrayDestroy();
      v40 = (uint64_t)v75;
      sub_23B569D6C();
      if (v2)
      {

        swift_bridgeObjectRelease();
        v41 = sub_23B569D3C();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v40, 1, 1, v41);
        v2 = 0;
LABEL_17:
        sub_23B5043F0(v40, &qword_2542F97E0);
LABEL_18:
        v44 = v39;
LABEL_19:
        v74(v44, v14);
        if (!v26)
          goto LABEL_32;
      }
      else
      {
        swift_bridgeObjectRelease();
        v42 = sub_23B569D3C();
        v43 = *(_QWORD *)(v42 - 8);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v40, 1, v42) == 1)
        {
          v39 = v79;
          goto LABEL_17;
        }
        v45 = sub_23B569D18();
        (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v40, v42);
        if ((v45 & 1) == 0)
        {
          v39 = v79;
          goto LABEL_18;
        }
        v39 = v79;
        sub_23B569D9C();
        v46 = sub_23B56A330();
        swift_bridgeObjectRelease();
        v47 = rmdir((const char *)(v46 + 32));
        swift_release();
        if (v47)
          goto LABEL_18;
        if (qword_2542FAD78 != -1)
          swift_once();
        v48 = sub_23B56A060();
        __swift_project_value_buffer(v48, (uint64_t)qword_2542FC458);
        v49 = v68;
        v50 = v79;
        v69(v68, (uint64_t)v79, v14);
        v51 = sub_23B56A048();
        v52 = sub_23B56A84C();
        v53 = v52;
        if (os_log_type_enabled(v51, v52))
        {
          v54 = swift_slowAlloc();
          v65 = v53;
          v55 = v54;
          v56 = swift_slowAlloc();
          *(_QWORD *)&v78[0] = v56;
          *(_DWORD *)v55 = v67;
          sub_23B4FCC20((unint64_t *)&qword_256A2C550, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
          v64 = v51;
          v57 = sub_23B56AD44();
          *(_QWORD *)(v55 + 4) = sub_23B5034E4(v57, v58, (uint64_t *)v78);
          swift_bridgeObjectRelease();
          v74(v49, v14);
          v59 = v64;
          _os_log_impl(&dword_23B4F9000, v64, (os_log_type_t)v65, "Pruning empty directory: %s", (uint8_t *)v55, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x23B867948](v56, -1, -1);
          MEMORY[0x23B867948](v55, -1, -1);

          v44 = v79;
          goto LABEL_19;
        }

        v60 = v74;
        v74(v49, v14);
        v60(v50, v14);
        if (!v26)
          goto LABEL_32;
      }
    }

    v32 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
    goto LABEL_11;
  }
  v32 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
LABEL_32:
  v32((uint64_t)v76, 1, 1, v14);
}

uint64_t sub_23B544A20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD v17[4];
  _QWORD v18[4];

  v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FADF0);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23B502284(a1, (uint64_t)v8);
  v9 = sub_23B56A624();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_23B502244((uint64_t)v8);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v11 = sub_23B56A5C4();
      v13 = v12;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_23B56A618();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v11 = 0;
  v13 = 0;
LABEL_6:
  v14 = *v4;
  v15 = (_QWORD *)(v13 | v11);
  if (v13 | v11)
  {
    v18[0] = 0;
    v18[1] = 0;
    v15 = v18;
    v18[2] = v11;
    v18[3] = v13;
  }
  v17[1] = 1;
  v17[2] = v15;
  v17[3] = v14;
  swift_task_create();
  return swift_release();
}

uint64_t sub_23B544BA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  (*(void (**)(_QWORD, _QWORD))(v0 + 120))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 64));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t withDeadline<A, B>(_:clock:block:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  return swift_task_switch();
}

uint64_t sub_23B544C44()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t withTimeout<A, B>(_:clock:block:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t AssociatedTypeWitness;

  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[10] = AssociatedTypeWitness;
  v8[11] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8[12] = swift_task_alloc();
  v8[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B544D0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  sub_23B56AE1C();
  swift_getAssociatedConformanceWitness();
  sub_23B56AB4C();
  v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(_QWORD *)(v0 + 112) = v4;
  v4(v1, v2);
  v5 = swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v5;
  *(_QWORD *)v5 = v0;
  *(_QWORD *)(v5 + 8) = sub_23B544E04;
  v6 = *(_QWORD *)(v0 + 104);
  v7 = *(_QWORD *)(v0 + 16);
  v8 = *(_OWORD *)(v0 + 32);
  v9 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v5 + 64) = v9;
  *(_OWORD *)(v5 + 32) = v8;
  *(_QWORD *)(v5 + 16) = v7;
  *(_QWORD *)(v5 + 24) = v6;
  return swift_task_switch();
}

uint64_t sub_23B544E04()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B544E68()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(v0 + 112))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 80));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B544EB8()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(v0 + 112))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 80));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B544F08()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

ValueMetadata *type metadata accessor for TimeoutError()
{
  return &type metadata for TimeoutError;
}

uint64_t sub_23B544F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;

  v8[10] = a7;
  v8[11] = a8;
  v8[8] = a5;
  v8[9] = a6;
  v8[6] = a1;
  v8[7] = a4;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542FAD88);
  v8[12] = sub_23B56A5E8();
  v9 = sub_23B56A900();
  v8[13] = v9;
  v8[14] = *(_QWORD *)(v9 - 8);
  v8[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B54501C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  _QWORD *v11;
  _QWORD *v12;

  v2 = *(_QWORD *)(v0 + 112);
  v1 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 104);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 96) - 8) + 56))(v1, 1, 1);
  v4 = sub_23B4FFBD0(v1, v3);
  *(_QWORD *)(v0 + 128) = v4;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AB8);
  inited = swift_initStackObject();
  *(_QWORD *)(v0 + 136) = inited;
  *(_DWORD *)(inited + 24) = 0;
  *(_QWORD *)(inited + 16) = 0;
  sub_23B56A6C0();
  v7 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 88);
  v8 = *(_QWORD *)(v0 + 72);
  v9 = swift_task_alloc();
  *(_QWORD *)(v0 + 144) = v9;
  v10 = *(_OWORD *)(v0 + 56);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  *(_QWORD *)(v9 + 32) = v6;
  *(_QWORD *)(v9 + 40) = v4;
  *(_QWORD *)(v9 + 48) = inited;
  *(_OWORD *)(v9 + 56) = v10;
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 152) = v11;
  v11[2] = v8;
  v11[3] = v7;
  v11[4] = v6;
  v11[5] = inited;
  v11[6] = v4;
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 160) = v12;
  *v12 = v0;
  v12[1] = sub_23B54519C;
  return sub_23B56ADA4();
}

uint64_t sub_23B54519C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t sub_23B545210()
{
  uint64_t v0;

  swift_setDeallocating();
  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B54526C()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B5452CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  return swift_task_switch();
}

uint64_t sub_23B5452F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v2;
  v3 = *(_OWORD *)(v0 + 24);
  v4 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 56);
  *(_QWORD *)(v2 + 32) = v1;
  *(_OWORD *)(v2 + 40) = v3;
  *(_OWORD *)(v2 + 56) = v4;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v5;
  *v5 = v0;
  v5[1] = sub_23B5453A0;
  return sub_23B56ADC8();
}

uint64_t sub_23B5453A0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 96) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void sub_23B545414(uint64_t a1, uint64_t a2, os_unfair_lock_s *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v15;
  _QWORD v16[8];

  v16[2] = a6;
  v16[3] = a7;
  v16[4] = a8;
  v16[5] = a1;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542FAD88);
  sub_23B56A5E8();
  sub_23B56A900();
  sub_23B4FFC54((void (*)(uint64_t))sub_23B546580, (uint64_t)v16, a2);
  v15 = (uint64_t *)&a3[4];
  a3 += 6;
  os_unfair_lock_lock(a3);
  sub_23B5455BC(v15, a4, a5, a2, a6, a7, a8);
  os_unfair_lock_unlock(a3);
}

uint64_t sub_23B545508(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542FAD88);
  v4 = sub_23B56A5E8();
  v5 = sub_23B56A900();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  v6 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, a2, v4);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v4);
}

uint64_t sub_23B5455BC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  uint64_t v20;

  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FADF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_release();
  v17 = sub_23B56A624();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = a5;
  v18[5] = a6;
  v18[6] = a7;
  v18[7] = a2;
  v18[8] = a3;
  v18[9] = a4;
  swift_retain();
  swift_retain();
  result = sub_23B515858((uint64_t)v16, (uint64_t)&unk_256A2C818, (uint64_t)v18);
  *a1 = result;
  return result;
}

uint64_t sub_23B5456D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;

  v8[6] = a8;
  v8[7] = v10;
  v8[4] = a6;
  v8[5] = a7;
  v8[2] = a4;
  v8[3] = a5;
  v8[8] = *(_QWORD *)(a7 - 8);
  v8[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B545730()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD);

  sub_23B56A6C0();
  v3 = (uint64_t (*)(_QWORD))(**(int **)(v0 + 16) + *(_QWORD *)(v0 + 16));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v1;
  *v1 = v0;
  v1[1] = sub_23B545864;
  return v3(*(_QWORD *)(v0 + 72));
}

uint64_t sub_23B545864()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B5458C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = swift_task_alloc();
  v7 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v5 + 16) = v7;
  *(_QWORD *)(v5 + 32) = v3;
  *(_QWORD *)(v5 + 40) = v1;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542FAD88);
  sub_23B56A5E8();
  sub_23B56A900();
  sub_23B4FFC54((void (*)(uint64_t))sub_23B54668C, v5, v4);
  swift_task_dealloc();
  (*(void (**)(uint64_t, _QWORD))(v2 + 8))(v1, v7);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B5459B0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = swift_task_alloc();
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v4 + 32) = v2;
  *(_QWORD *)(v4 + 40) = v1;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542FAD88);
  sub_23B56A5E8();
  sub_23B56A900();
  sub_23B4FFC54((void (*)(uint64_t))sub_23B546670, v4, v3);

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B545A84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD v15[2];

  v6 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542FAD88);
  v9 = sub_23B56A5E8();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v15 - v11;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, a3);
    sub_23B56A5DC();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  v13 = sub_23B56A900();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a1, v13);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a1, 1, 1, v9);
}

uint64_t sub_23B545BE8(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  _QWORD v11[2];

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542FAD88);
  v4 = sub_23B56A5E8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v11 - v6;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
    v11[1] = a2;
    v8 = a2;
    sub_23B56A5D0();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  v9 = sub_23B56A900();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a1, 1, 1, v4);
}

void sub_23B545D0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  os_unfair_lock_s *v10;
  uint64_t v11;
  _QWORD v12[8];

  v10 = (os_unfair_lock_s *)(a1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  if (*(_QWORD *)(a1 + 16))
    sub_23B56A6A8();
  os_unfair_lock_unlock(v10);
  MEMORY[0x24BDAC7A8](v11);
  v12[2] = a3;
  v12[3] = a4;
  v12[4] = a5;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542FAD88);
  sub_23B56A5E8();
  sub_23B56A900();
  sub_23B4FFC54((void (*)(uint64_t))sub_23B546550, (uint64_t)v12, a2);
}

uint64_t *sub_23B545E00@<X0>(uint64_t *result@<X0>, BOOL *a2@<X8>)
{
  uint64_t v3;

  v3 = *result;
  if (*result)
    result = (uint64_t *)sub_23B56A6A8();
  *a2 = v3 == 0;
  return result;
}

uint64_t sub_23B545E64()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23B545E90(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[4];
  v5 = v1[5];
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_23B4FACE0;
  return sub_23B544F84(a1, v6, v7, v9, v10, v4, v5, v8);
}

uint64_t sub_23B545F24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542FAD88);
  v2 = sub_23B56A5E8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v9 - v4;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
    sub_23B56A5F4();
    sub_23B4FCC20((unint64_t *)&qword_2542F9630, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6838], MEMORY[0x24BEE6848]);
    v6 = swift_allocError();
    sub_23B56A15C();
    v9[1] = v6;
    sub_23B56A5D0();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  v7 = sub_23B56A900();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, 1, 1, v2);
}

uint64_t sub_23B546080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;

  v8[4] = a7;
  v8[5] = a8;
  v8[2] = a4;
  v8[3] = a5;
  v8[6] = swift_getAssociatedTypeWitness();
  v9 = sub_23B56A900();
  v8[7] = v9;
  v8[8] = *(_QWORD *)(v9 - 8);
  v8[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B54610C()
{
  _QWORD *v0;
  _QWORD *v1;

  sub_23B56A6C0();
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v0[6] - 8) + 56))(v0[9], 1, 1);
  v1 = (_QWORD *)swift_task_alloc();
  v0[10] = v1;
  *v1 = v0;
  v1[1] = sub_23B5461B8;
  return sub_23B56A6CC();
}

uint64_t sub_23B5461B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  return swift_task_switch();
}

uint64_t sub_23B546238()
{
  uint64_t v0;

  sub_23B546474();
  swift_allocError();
  swift_willThrow();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B546298()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B5462CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(v0 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v1 - 8);
  v6 = (v4 + *(_QWORD *)(v3 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + v4, AssociatedTypeWitness);
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + v6, v1);
  return swift_deallocObject();
}

uint64_t sub_23B546394(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = v1[4];
  v5 = v1[5];
  v6 = v1[6];
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  v10 = v1[2];
  v11 = v1[3];
  v12 = (uint64_t)v1 + v8;
  v13 = (uint64_t)v1 + ((v8 + *(_QWORD *)(v7 + 64) + v9) & ~v9);
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_23B4FACE0;
  return sub_23B546080(a1, v10, v11, v12, v13, v4, v5, v6);
}

unint64_t sub_23B546474()
{
  unint64_t result;

  result = qword_2542F9808;
  if (!qword_2542F9808)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for TimeoutError, &type metadata for TimeoutError);
    atomic_store(result, (unint64_t *)&qword_2542F9808);
  }
  return result;
}

uint64_t sub_23B5464B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = swift_task_alloc();
  v6 = *(_OWORD *)(v1 + 40);
  v7 = *(_OWORD *)(v1 + 56);
  v8 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = sub_23B4FACE0;
  *(_QWORD *)(v5 + 72) = v4;
  *(_OWORD *)(v5 + 56) = v8;
  *(_OWORD *)(v5 + 40) = v7;
  *(_OWORD *)(v5 + 24) = v6;
  *(_QWORD *)(v5 + 16) = a1;
  return swift_task_switch();
}

void sub_23B546540()
{
  uint64_t *v0;

  sub_23B545D0C(v0[5], v0[6], v0[2], v0[3], v0[4]);
}

uint64_t sub_23B546550(uint64_t a1)
{
  return sub_23B545F24(a1);
}

void sub_23B54656C(uint64_t a1)
{
  uint64_t v1;

  sub_23B545414(a1, *(_QWORD *)(v1 + 40), *(os_unfair_lock_s **)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_23B546580(uint64_t a1)
{
  uint64_t v1;

  return sub_23B545508(a1, *(_QWORD *)(v1 + 40));
}

uint64_t sub_23B54659C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23B5465D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v0 + 56);
  v6 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_23B4FAC98;
  *(_QWORD *)(v4 + 56) = v2;
  *(_OWORD *)(v4 + 40) = v6;
  *(_QWORD *)(v4 + 32) = v3;
  *(_OWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v4 + 64) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 72) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B546670(uint64_t a1)
{
  uint64_t v1;

  return sub_23B545BE8(a1, *(void **)(v1 + 40));
}

uint64_t sub_23B54668C(uint64_t a1)
{
  uint64_t v1;

  return sub_23B545A84(a1, *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 16));
}

uint64_t sub_23B5466AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 104);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t sub_23B546710(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 104);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 40))(v4, a1);
  return swift_endAccess();
}

uint64_t sub_23B54677C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 120);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t sub_23B5467E0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 120);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 40))(v4, a1);
  return swift_endAccess();
}

uint64_t sub_23B54684C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128));
}

uint64_t sub_23B54685C(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 128)) = result;
  return result;
}

uint64_t HysteresisFilter.__allocating_init(currentValue:threshold:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  HysteresisFilter.init(currentValue:threshold:)(a1, a2);
  return v4;
}

uint64_t *HysteresisFilter.init(currentValue:threshold:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v3 = v2;
  v22 = a2;
  v5 = *v2;
  v6 = sub_23B569FA0();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v21 - v11;
  swift_defaultActor_initialize();
  *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 + 128)) = 1;
  v13 = *(_QWORD *)(*v2 + 136);
  sub_23B569F94();
  v14 = sub_23B569F64();
  v16 = v15;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
  type metadata accessor for WorkItemQueue(0);
  swift_allocObject();
  v17 = WorkItemQueue.init(name:identifier:)(v14, v16, (uint64_t)v10);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  *(uint64_t *)((char *)v3 + v13) = (uint64_t)v17;
  v18 = *(_QWORD *)(v5 + 80);
  v19 = *(_QWORD *)(v18 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))((uint64_t)v3 + *(_QWORD *)(*v3 + 104), a1, v18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))((uint64_t)v3 + *(_QWORD *)(*v3 + 120), a1, v18);
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 + 112)) = v22;
  return v3;
}

uint64_t sub_23B546A40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v36 = a5;
  v33 = a3;
  v34 = a4;
  v32 = a2;
  v7 = (_QWORD *)*v5;
  v8 = sub_23B569FA0();
  v37 = *(_QWORD *)(v8 - 8);
  v38 = v8;
  v9 = MEMORY[0x24BDAC7A8](v8);
  v35 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v32 - v12;
  v14 = v7[10];
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  MEMORY[0x24BDAC7A8](v11);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = *(_QWORD *)((char *)v5 + v7[17]);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a1, v14);
  v18 = (*(unsigned __int8 *)(v15 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v19 = (v16 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = (char *)swift_allocObject();
  *((_QWORD *)v20 + 2) = v14;
  *((_QWORD *)v20 + 3) = v7[11];
  *((_QWORD *)v20 + 4) = v5;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v20[v18], v17, v14);
  v21 = &v20[v19];
  v22 = v33;
  *(_QWORD *)v21 = v32;
  *((_QWORD *)v21 + 1) = v22;
  v23 = (uint64_t *)&v20[(v19 + 23) & 0xFFFFFFFFFFFFFFF8];
  v24 = v34;
  v25 = v36;
  *v23 = v34;
  v23[1] = v25;
  swift_retain();
  swift_retain();
  sub_23B5332CC(v24);
  sub_23B569F94();
  v27 = v37;
  v26 = v38;
  v28 = (uint64_t)v35;
  (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v35, v13, v38);
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = &unk_256A2C828;
  *(_QWORD *)(v29 + 24) = v20;
  type metadata accessor for WorkItemQueue.WorkItem();
  swift_allocObject();
  v30 = sub_23B54BE80(0, v28, (uint64_t)&unk_256A2C648, v29, (uint64_t)&unk_256A2C830, 0);
  swift_release();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v26);
  sub_23B519108(v30);
  return swift_release();
}

uint64_t sub_23B546C88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v12;

  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v12;
  *v12 = v6;
  v12[1] = sub_23B51D31C;
  return sub_23B546E84(a2, a3, a4, a5, a6);
}

uint64_t sub_23B546D0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  if (*(_QWORD *)(v0 + v4))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_23B546DAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 16) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 23) & 0xFFFFFFFFFFFFFFF8;
  v6 = v0 + v3;
  v7 = (uint64_t *)(v0 + v4);
  v8 = *v7;
  v9 = v7[1];
  v10 = v0 + v5;
  v11 = *(_QWORD *)(v0 + v5);
  v12 = *(_QWORD *)(v10 + 8);
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v13;
  *v13 = v1;
  v13[1] = sub_23B4FACE0;
  v14 = (_QWORD *)swift_task_alloc();
  v13[2] = v14;
  *v14 = v13;
  v14[1] = sub_23B51D31C;
  return sub_23B546E84(v6, v8, v9, v11, v12);
}

uint64_t sub_23B546E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[9] = a5;
  v6[10] = v5;
  v6[7] = a3;
  v6[8] = a4;
  v6[5] = a1;
  v6[6] = a2;
  v7 = *v5;
  v6[11] = *v5;
  v8 = *(_QWORD *)(v7 + 80);
  v6[12] = v8;
  v6[13] = *(_QWORD *)(v8 - 8);
  v6[14] = swift_task_alloc();
  v6[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B546F00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  int *v21;
  _QWORD *v22;
  uint64_t (*v23)();
  uint64_t *v24;
  uint64_t v25;
  int *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t (*v37)(void);
  int *v38;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(uint64_t **)(v0 + 80);
  v5 = *v4;
  v6 = (uint64_t)v4 + *(_QWORD *)(*v4 + 120);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 80) - 8) + 16))(v1, v6);
  v7 = sub_23B56A240();
  v8 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(_QWORD *)(v0 + 128) = v8;
  v8(v1, v2);
  v9 = *(_QWORD *)(*v4 + 128);
  if ((v7 & 1) == 0)
    goto LABEL_5;
  v10 = *(uint64_t *)((char *)v4 + v9);
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
  {
    __break(1u);
LABEL_5:
    v12 = 1;
  }
  v13 = *(_QWORD *)(v0 + 120);
  v15 = *(_QWORD *)(v0 + 96);
  v14 = *(_QWORD *)(v0 + 104);
  v16 = *(uint64_t **)(v0 + 80);
  v17 = *(_QWORD *)(v0 + 40);
  *(uint64_t *)((char *)v4 + v9) = v12;
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  v18(v13, v17, v15);
  sub_23B5467E0(v13);
  v19 = *v16;
  v20 = (uint64_t)v16 + *(_QWORD *)(*v16 + 104);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v19 + 80) - 8) + 16))(v13, v20);
  LOBYTE(v20) = sub_23B56A240();
  v8(v13, v15);
  if ((v20 & 1) != 0)
  {
    v21 = *(int **)(v0 + 64);
    if (v21)
    {
      v37 = (uint64_t (*)(void))((char *)v21 + *v21);
      v22 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 152) = v22;
      v23 = sub_23B547320;
LABEL_12:
      *v22 = v0;
      v22[1] = v23;
      return v37();
    }
LABEL_13:
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v24 = *(uint64_t **)(v0 + 80);
  v25 = *v24;
  if (*(uint64_t *)((char *)v24 + *(_QWORD *)(*v24 + 128)) < *(uint64_t *)((char *)v24 + *(_QWORD *)(*v24 + 112)))
  {
    v26 = *(int **)(v0 + 64);
    if (v26)
    {
      v37 = (uint64_t (*)(void))((char *)v26 + *v26);
      v22 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 144) = v22;
      v23 = sub_23B5472CC;
      goto LABEL_12;
    }
    goto LABEL_13;
  }
  v29 = *(_QWORD *)(v0 + 112);
  v28 = *(_QWORD *)(v0 + 120);
  v30 = *(_QWORD *)(v0 + 96);
  v31 = *(_QWORD *)(v0 + 40);
  v32 = *(int **)(v0 + 48);
  v33 = (uint64_t)v24 + *(_QWORD *)(v25 + 104);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v25 + 80) - 8) + 16))(v28, v33);
  v18(v29, v31, v30);
  sub_23B546710(v29);
  v34 = *v24;
  v35 = (uint64_t)v24 + *(_QWORD *)(*v24 + 104);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v34 + 80) - 8) + 16))(v29, v35);
  v38 = (int *)((char *)v32 + *v32);
  v36 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v36;
  *v36 = v0;
  v36[1] = sub_23B547214;
  return ((uint64_t (*)(_QWORD, _QWORD))v38)(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
}

uint64_t sub_23B547214()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v0 + 128);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  swift_task_dealloc();
  v1(v2, v3);
  return swift_task_switch();
}

uint64_t sub_23B547288()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(v0 + 128))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B5472CC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23B547320()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t HysteresisFilter.deinit()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v2 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8);
  v2(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104), v1);
  v2(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120), v1);
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t HysteresisFilter.__deallocating_deinit()
{
  HysteresisFilter.deinit();
  return swift_defaultActor_deallocate();
}

uint64_t HysteresisFilter.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23B547408()
{
  return HysteresisFilter.unownedExecutor.getter();
}

uint64_t sub_23B547420()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23B547444()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for HysteresisFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HysteresisFilter);
}

uint64_t method lookup function for HysteresisFilter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HysteresisFilter.__allocating_init(currentValue:threshold:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of HysteresisFilter.processInput(newValue:outputBlock:ignoreBlock:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t sub_23B54750C(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;

  *(_BYTE *)(v3 + 56) = a2;
  *(_QWORD *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 32) = v2;
  *(_QWORD *)(v3 + 40) = *v2;
  return swift_task_switch();
}

uint64_t sub_23B547530()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  char v12;
  uint64_t v13;
  void *v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  char v20;
  _QWORD *v21;
  __int128 v23;
  int *v24;
  uint64_t v25;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_cancellationBlock);
  v2 = swift_task_alloc();
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
  sub_23B54B3B0((uint64_t *)(v1 + 16), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 32));
  v3 = *(_QWORD *)(v0 + 32);
  swift_task_dealloc();
  if ((*(_BYTE *)(v3 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_completionAlreadyCalled) & 1) != 0)
  {
    if (qword_2542F98C8 != -1)
      swift_once();
    v4 = sub_23B56A060();
    __swift_project_value_buffer(v4, (uint64_t)qword_2542FC360);
    swift_retain_n();
    v5 = sub_23B56A048();
    v6 = sub_23B56A834();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      *(_DWORD *)v7 = 136315138;
      v25 = v8;
      sub_23B569FA0();
      sub_23B4FCC20(&qword_2542F97F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v9 = sub_23B56AD44();
      *(_QWORD *)(v0 + 16) = sub_23B5034E4(v9, v10, &v25);
      sub_23B56A918();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_23B4F9000, v5, v6, "completion called more than once for %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B867948](v8, -1, -1);
      MEMORY[0x23B867948](v7, -1, -1);
    }
    else
    {
      swift_release_n();
    }

  }
  else
  {
    v11 = *(void **)(v0 + 24);
    v12 = *(_BYTE *)(v0 + 56) & 1;
    v23 = *(_OWORD *)(v0 + 32);
    *(_BYTE *)(v3 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_completionAlreadyCalled) = 1;
    v13 = v23 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_storedResult;
    v14 = *(void **)(v23 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_storedResult);
    *(_QWORD *)v13 = v11;
    v15 = *(_BYTE *)(v13 + 8);
    *(_BYTE *)(v13 + 8) = v12;
    sub_23B54C1E4(v11, v12);
    sub_23B54C154(v14, v15);
    v16 = *(_QWORD *)(v23 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_willDeadlock);
    v17 = swift_task_alloc();
    *(_OWORD *)(v17 + 16) = v23;
    os_unfair_lock_lock((os_unfair_lock_t)(v16 + 20));
    sub_23B54B434((_BYTE *)(v16 + 16), *(_QWORD *)(v17 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(v16 + 20));
    v18 = *(_QWORD *)(v0 + 32);
    swift_task_dealloc();
    sub_23B54B67C();
    v19 = *(int **)(v18 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_completion);
    if (v19)
    {
      v20 = *(_BYTE *)(v0 + 56);
      v24 = (int *)((char *)v19 + *v19);
      v21 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 48) = v21;
      *v21 = v0;
      v21[1] = sub_23B5478BC;
      return ((uint64_t (*)(_QWORD, _QWORD))v24)(*(_QWORD *)(v0 + 24), v20 & 1);
    }
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B5478BC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t WorkItemQueue.WorkItem.__allocating_init(identifier:block:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6 = sub_23B569FA0();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  type metadata accessor for WorkItemQueue.WorkItem();
  swift_allocObject();
  v11 = sub_23B54BE80(0, (uint64_t)v9, (uint64_t)&unk_256A2BE68, v10, 0, 0);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
  return v11;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = sub_23B569FA0();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  type metadata accessor for WorkItemQueue.WorkItem();
  swift_allocObject();
  v10 = sub_23B54BE80(0, (uint64_t)v9, a2, a3, 0, 0);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
  return v10;
}

uint64_t sub_23B547AE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v18[4];
  _QWORD v19[4];

  v4 = v3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FADF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23B501498(a1, (uint64_t)v9, &qword_2542FADF0);
  v10 = sub_23B56A624();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_23B5043F0((uint64_t)v9, &qword_2542FADF0);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v12 = sub_23B56A5C4();
      v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    sub_23B56A618();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v15 = *v4;
  v16 = (_QWORD *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v16 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  v18[1] = 1;
  v18[2] = v16;
  v18[3] = v15;
  swift_task_create();
  return swift_release();
}

uint64_t sub_23B547C70()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[8] = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28);
  v1[9] = v2;
  v1[10] = *(_QWORD *)(v2 - 8);
  v1[11] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA30);
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B547D08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 64);
  *(_BYTE *)(v4 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_cancellationBlockNeeded) = 0;
  v5 = v4 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_cancelContinuation;
  swift_beginAccess();
  sub_23B501498(v5, v1, &qword_2542FAA30);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  v7 = *(_QWORD *)(v0 + 104);
  if (v6)
  {
    sub_23B5043F0(*(_QWORD *)(v0 + 104), &qword_2542FAA30);
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 80);
    v8 = *(_QWORD *)(v0 + 88);
    v10 = *(_QWORD *)(v0 + 72);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 16))(v8, *(_QWORD *)(v0 + 104), v10);
    sub_23B5043F0(v7, &qword_2542FAA30);
    sub_23B56A5DC();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  v11 = *(_QWORD *)(v0 + 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 80) + 56))(v11, 1, 1, *(_QWORD *)(v0 + 72));
  swift_beginAccess();
  sub_23B501450(v11, v5);
  swift_endAccess();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B547E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = sub_23B56AB94();
  v5[7] = v6;
  v5[8] = *(_QWORD *)(v6 - 8);
  v5[9] = swift_task_alloc();
  v5[10] = swift_task_alloc();
  v7 = sub_23B56ABAC();
  v5[11] = v7;
  v5[12] = *(_QWORD *)(v7 - 8);
  v5[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B547F08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  __int128 v12;

  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 32);
  v12 = *(_OWORD *)(v0 + 40);
  sub_23B56ABA0();
  sub_23B56AB64();
  MEMORY[0x23B866E74](v7, v6);
  v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  *(_QWORD *)(v0 + 112) = v8;
  v8(v3, v4);
  v9 = swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v9;
  *(_OWORD *)(v9 + 16) = v12;
  *(_QWORD *)(v9 + 32) = v2;
  *(_QWORD *)(v9 + 40) = v1;
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v10;
  *v10 = v0;
  v10[1] = sub_23B548014;
  return sub_23B56AC90();
}

uint64_t sub_23B548014()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B548080()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  (*(void (**)(_QWORD, _QWORD))(v0 + 112))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 56));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B5480FC()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc();
  v1(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B54818C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6[5] = a5;
  v6[6] = a6;
  v6[3] = a3;
  v6[4] = a4;
  v6[2] = a2;
  v7 = sub_23B56ABAC();
  v6[7] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[8] = v8;
  v6[9] = *(_QWORD *)(v8 + 64);
  v6[10] = swift_task_alloc();
  v9 = sub_23B56AB94();
  v6[11] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[12] = v10;
  v6[13] = *(_QWORD *)(v10 + 64);
  v6[14] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FADF0);
  v6[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B548248()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = v0[15];
  v2 = v0[12];
  v20 = v0[13];
  v3 = v0[11];
  v19 = v0[10];
  v15 = v0[8];
  v16 = v0[14];
  v17 = v0[6];
  v4 = v0[4];
  v14 = v0[5];
  v5 = v0[3];
  v18 = v0[7];
  v6 = sub_23B56A624();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v7(v1, 1, 1, v6);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v5;
  v8[5] = v4;
  swift_retain();
  sub_23B547AE0(v1, (uint64_t)&unk_256A2C940, (uint64_t)v8);
  sub_23B5043F0(v1, &qword_2542FADF0);
  v7(v1, 1, 1, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v16, v14, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v19, v17, v18);
  v9 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v10 = (v20 + *(unsigned __int8 *)(v15 + 80) + v9) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = 0;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 32))(v11 + v9, v16, v3);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v15 + 32))(v11 + v10, v19, v18);
  sub_23B547AE0(v1, (uint64_t)&unk_256A2C950, v11);
  sub_23B5043F0(v1, &qword_2542FADF0);
  v12 = (_QWORD *)swift_task_alloc();
  v0[16] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA48);
  *v12 = v0;
  v12[1] = sub_23B548468;
  return sub_23B56A6D8();
}

uint64_t sub_23B548468()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B5484CC()
{
  uint64_t v0;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAD88);
  sub_23B56A6E4();
  if ((*(_BYTE *)(v0 + 144) & 1) != 0)
  {
    sub_23B56A5F4();
    sub_23B4FCC20((unint64_t *)&qword_2542F9630, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6838], MEMORY[0x24BEE6848]);
    swift_allocError();
    sub_23B56A15C();
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B5485CC()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B54861C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[7] = a4;
  v5[8] = a5;
  v5[6] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA30);
  v5[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B54867C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256A2C958);
  v3 = swift_allocObject();
  *(_QWORD *)(v0 + 80) = v3;
  *(_DWORD *)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_23B501498(v1, v3 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v3 + 16), &qword_2542FAA30);
  sub_23B5043F0(v1, &qword_2542FAA30);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AB8);
  inited = swift_initStackObject();
  *(_QWORD *)(v0 + 88) = inited;
  *(_DWORD *)(inited + 24) = 0;
  *(_QWORD *)(inited + 16) = 0;
  sub_23B56A6C0();
  v5 = swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v5;
  v6 = *(_OWORD *)(v0 + 56);
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = inited;
  *(_OWORD *)(v5 + 32) = v6;
  v7 = swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v7;
  *(_QWORD *)(v7 + 16) = inited;
  *(_QWORD *)(v7 + 24) = v3;
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v8;
  *v8 = v0;
  v8[1] = sub_23B548848;
  return sub_23B56ADA4();
}

uint64_t sub_23B548848()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t sub_23B5488BC()
{
  uint64_t v0;

  swift_setDeallocating();
  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B548918()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B548978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t sub_23B548998()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  _QWORD *v3;

  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  v2 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 + 32) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v3;
  *v3 = v0;
  v3[1] = sub_23B548A3C;
  return sub_23B56ADC8();
}

uint64_t sub_23B548A3C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void sub_23B548AB0(uint64_t a1, uint64_t a2, os_unfair_lock_s *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t *v12;

  v10 = a2 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)a2 + 16);
  v11 = (os_unfair_lock_s *)(a2 + ((*(unsigned int *)(*(_QWORD *)a2 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v11);
  sub_23B548B70(v10, a1);
  os_unfair_lock_unlock(v11);
  v12 = (uint64_t *)&a3[4];
  a3 += 6;
  os_unfair_lock_lock(a3);
  sub_23B548BF4(v12, a4, a5, a2);
  os_unfair_lock_unlock(a3);
}

uint64_t sub_23B548B70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_23B5043F0(a1, &qword_2542FAA30);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28);
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, v4);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
}

uint64_t sub_23B548BF4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FADF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_release();
  v11 = sub_23B56A624();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = a2;
  v12[5] = a3;
  v12[6] = a4;
  swift_retain();
  swift_retain();
  result = sub_23B515858((uint64_t)v10, (uint64_t)&unk_256A2C978, (uint64_t)v12);
  *a1 = result;
  return result;
}

uint64_t sub_23B548CE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return swift_task_switch();
}

uint64_t sub_23B548D04()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  sub_23B56A6C0();
  v3 = (uint64_t (*)(void))(**(int **)(v0 + 16) + *(_QWORD *)(v0 + 16));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_23B548E24;
  return v3();
}

uint64_t sub_23B548E24()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

void sub_23B548E88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 32);
  swift_task_alloc();
  v3 = v2 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v2 + 16);
  v4 = (os_unfair_lock_s *)(v2 + ((*(unsigned int *)(*(_QWORD *)v2 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v4);
  sub_23B54BDA0(v3);
  os_unfair_lock_unlock(v4);
  if (!v1)
  {
    swift_task_dealloc();
    (*(void (**)(void))(v0 + 8))();
  }
}

uint64_t sub_23B548F40()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;

  v1 = *(void **)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v1;
  v4 = v2 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v2 + 16);
  v5 = (os_unfair_lock_s *)(v2 + ((*(unsigned int *)(*(_QWORD *)v2 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_23B549008(v4, *(void **)(v3 + 16));
  os_unfair_lock_unlock(v5);

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B549008(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  _QWORD v10[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
    v10[1] = a2;
    v8 = a2;
    sub_23B56A5D0();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  sub_23B5043F0(a1, &qword_2542FAA30);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a1, 1, 1, v4);
}

void sub_23B549104(os_unfair_lock_s *a1, uint64_t a2)
{
  uint64_t *v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  BOOL v7;

  v3 = (uint64_t *)&a1[4];
  v4 = a1 + 6;
  os_unfair_lock_lock(a1 + 6);
  sub_23B545E00(v3, &v7);
  os_unfair_lock_unlock(v4);
  v5 = a2 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)a2 + 16);
  v6 = (os_unfair_lock_s *)(a2 + ((*(unsigned int *)(*(_QWORD *)a2 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v6);
  sub_23B5491A0(v5);
  os_unfair_lock_unlock(v6);
}

uint64_t sub_23B5491A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD v8[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
    sub_23B56A5F4();
    sub_23B4FCC20((unint64_t *)&qword_2542F9630, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6838], MEMORY[0x24BEE6848]);
    v6 = swift_allocError();
    sub_23B56A15C();
    v8[1] = v6;
    sub_23B56A5D0();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  sub_23B5043F0(a1, &qword_2542FAA30);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, 1, 1, v2);
}

uint64_t sub_23B5492D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 40) = a4;
  *(_QWORD *)(v5 + 48) = a5;
  return swift_task_switch();
}

uint64_t sub_23B5492EC()
{
  uint64_t v0;
  _QWORD *v1;

  sub_23B56A6C0();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_BYTE *)(v0 + 32) = 1;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  sub_23B56ABAC();
  sub_23B4FCC20(&qword_2542F9BF0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6E98], MEMORY[0x24BEE6EA8]);
  *v1 = v0;
  v1[1] = sub_23B5493B4;
  return sub_23B56A6CC();
}

uint64_t sub_23B5493B4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B549418()
{
  uint64_t v0;

  sub_23B546474();
  swift_allocError();
  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B549470()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B54947C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_23B56A060();
  __swift_allocate_value_buffer(v0, qword_2542FC360);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_2542FC360);
  if (qword_2542FA8C0 != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)qword_2542FC3E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t WorkItemQueue.WorkItem.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_id;
  v4 = sub_23B569FA0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_23B549550()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_isCancelled);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_23B549594(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_isCancelled);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_23B5495DC())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_23B549620(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v3;
  *v3 = v2;
  v3[1] = sub_23B4FAC98;
  return v5();
}

uint64_t sub_23B549768(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v3;
  *v3 = v2;
  v3[1] = sub_23B4FACE0;
  return v5();
}

uint64_t sub_23B5497BC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23B5497E0()
{
  uint64_t v0;

  return sub_23B54C8A0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_23B5497F0()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  if (qword_2542FAA98 != -1)
    swift_once();
  result = sub_23B56AF9C();
  if (v3)
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_visitedQueueIdentifiers);
    os_unfair_lock_lock((os_unfair_lock_t)(v2 + 24));
    swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + 16) = v3;
    swift_bridgeObjectRetain();
    os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 24));
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t WorkItemQueue.WorkItem.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  void (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  unint64_t v19;
  void (*v20)(char *, uint64_t);
  uint8_t *v21;
  uint64_t v22;
  _QWORD v24[2];
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[2];

  v1 = v0;
  v2 = sub_23B569FA0();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v24 - v7;
  v9 = (char *)(v0 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_id);
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v10((char *)v24 - v7, v0 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_id, v2);
  v27 = OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_assocatedQueueIdentifier;
  v11 = *(_QWORD *)(v0 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_assocatedQueueIdentifier);
  v12 = v11 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v11 + 16);
  v13 = (os_unfair_lock_s *)(v11 + ((*(unsigned int *)(*(_QWORD *)v11 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v13);
  sub_23B549C40(v12, v29);
  os_unfair_lock_unlock(v13);
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_completionAlreadyCalled) & 1) != 0
    || !LOBYTE(v29[0]))
  {
    v20 = *(void (**)(char *, uint64_t))(v3 + 8);
    v20(v8, v2);
  }
  else
  {
    if (qword_2542F98C8 != -1)
      swift_once();
    v14 = sub_23B56A060();
    __swift_project_value_buffer(v14, (uint64_t)qword_2542FC360);
    v10(v6, (uint64_t)v8, v2);
    v15 = sub_23B56A048();
    v16 = sub_23B56A840();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      v26 = swift_slowAlloc();
      v29[0] = v26;
      v25 = v17;
      *(_DWORD *)v17 = 136446210;
      v24[1] = v17 + 4;
      sub_23B4FCC20(&qword_2542F97F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v18 = sub_23B56AD44();
      v28 = sub_23B5034E4(v18, v19, v29);
      sub_23B56A918();
      swift_bridgeObjectRelease();
      v20 = *(void (**)(char *, uint64_t))(v3 + 8);
      v20(v6, v2);
      v21 = v25;
      _os_log_impl(&dword_23B4F9000, v15, v16, "completion block never called for WorkItem: %{public}s!", v25, 0xCu);
      v22 = v26;
      swift_arrayDestroy();
      MEMORY[0x23B867948](v22, -1, -1);
      MEMORY[0x23B867948](v21, -1, -1);

    }
    else
    {

      v20 = *(void (**)(char *, uint64_t))(v3 + 8);
      v20(v6, v2);
    }
    v20(v8, v2);
  }
  v20(v9, v2);
  swift_release();
  swift_release();
  sub_23B50033C(*(_QWORD *)(v1 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_completion));
  swift_release();
  sub_23B5043F0(v1 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_cancelContinuation, &qword_2542FAA30);
  sub_23B54C154(*(void **)(v1 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_storedResult), *(_BYTE *)(v1 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_storedResult + 8));
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_defaultActor_destroy();
  return v1;
}

uint64_t sub_23B549C40@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542FADF8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23B501498(a1, (uint64_t)v6, (uint64_t *)&unk_2542FADF8);
  v7 = sub_23B569FA0();
  LOBYTE(a1) = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) != 1;
  result = sub_23B5043F0((uint64_t)v6, (uint64_t *)&unk_2542FADF8);
  *a2 = a1;
  return result;
}

uint64_t sub_23B549D00()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = v0;
  return swift_task_switch();
}

void sub_23B549D18()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t *v13;
  uint64_t v14;
  void (*v15)(void);
  _QWORD v16[3];

  v1 = *(_QWORD *)(v0 + 40);
  v2 = (_BYTE *)(v1 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_isCancelled);
  swift_beginAccess();
  *v2 = 1;
  v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_cancellationBlock);
  *(_QWORD *)(v0 + 48) = v3;
  v4 = v3 + 4;
  v5 = v3 + 8;
  os_unfair_lock_lock(v3 + 8);
  sub_23B549FD0(v4, v16);
  *(_QWORD *)(v0 + 56) = 0;
  os_unfair_lock_unlock(v5);
  v6 = (int *)v16[0];
  v7 = v16[1];
  *(_QWORD *)(v0 + 64) = v16[0];
  *(_QWORD *)(v0 + 72) = v7;
  if (v6)
  {
    v8 = swift_allocObject();
    *(_QWORD *)(v0 + 80) = v8;
    *(_QWORD *)(v8 + 16) = v6;
    *(_QWORD *)(v8 + 24) = v7;
    sub_23B5332CC((uint64_t)v6);
    v15 = (void (*)(void))((char *)v6 + *v6);
    swift_retain();
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 88) = v9;
    *v9 = v0;
    v9[1] = sub_23B549EB0;
    v15();
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 48);
    v11 = *(_QWORD *)(v0 + 56);
    v12 = (os_unfair_lock_s *)(v10 + 32);
    v13 = (uint64_t *)(v10 + 16);
    v14 = swift_task_alloc();
    *(_QWORD *)(v14 + 16) = 0;
    *(_QWORD *)(v14 + 24) = 0;
    os_unfair_lock_lock(v12);
    sub_23B54B3B0(v13, *(_QWORD *)(v14 + 16), *(_QWORD *)(v14 + 24));
    os_unfair_lock_unlock(v12);
    if (!v11)
    {
      sub_23B50033C(0);
      swift_task_dealloc();
      (*(void (**)(void))(v0 + 8))();
    }
  }
}

uint64_t sub_23B549EB0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  swift_task_dealloc();
  swift_release();
  sub_23B50033C(v1);
  return swift_task_switch();
}

void sub_23B549F28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t *v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = (os_unfair_lock_s *)(v1 + 32);
  v4 = (uint64_t *)(v1 + 16);
  v5 = swift_task_alloc();
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  os_unfair_lock_lock(v3);
  sub_23B54B3B0(v4, *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24));
  os_unfair_lock_unlock(v3);
  if (!v2)
  {
    sub_23B50033C((uint64_t)&unk_256A2C8E0);
    swift_task_dealloc();
    (*(void (**)(void))(v0 + 8))();
  }
}

_QWORD *sub_23B549FD0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v2 = result;
  v5 = *result;
  v4 = result[1];
  if (*result)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    *(_QWORD *)(v6 + 24) = v4;
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = &unk_256A2C990;
    *(_QWORD *)(v4 + 24) = v6;
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = &unk_256A2C990;
    *(_QWORD *)(v7 + 24) = v6;
    result = (_QWORD *)swift_retain();
    v8 = &unk_256A2C9A0;
    v9 = &unk_256A2C998;
  }
  else
  {
    v9 = 0;
    v8 = 0;
    v7 = result[1];
  }
  *a2 = v9;
  a2[1] = v4;
  *v2 = v8;
  v2[1] = v7;
  return result;
}

uint64_t sub_23B54A09C(int *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))((char *)a1 + *a1);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_23B4FACE0;
  return v4();
}

uint64_t sub_23B54A0F4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[8] = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542FADF8);
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  v2 = sub_23B569FA0();
  v1[11] = v2;
  v1[12] = *(_QWORD *)(v2 - 8);
  v1[13] = swift_task_alloc();
  v1[14] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B54A198()
{
  _QWORD *v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _QWORD *v42;
  _QWORD *v44;
  uint64_t (*v45)(void);
  void *v46;
  uint64_t v47;
  os_log_type_t type;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[2];

  v1 = *(_QWORD *)(v0[8] + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_willDeadlock);
  v2 = (os_unfair_lock_s *)(v1 + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 20));
  LODWORD(v1) = *(unsigned __int8 *)(v1 + 16);
  os_unfair_lock_unlock(v2);
  if ((_DWORD)v1 != 1)
  {
    v7 = v0[9];
    v8 = *(_QWORD *)(v0[8] + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_assocatedQueueIdentifier);
    v9 = v0[11];
    v10 = v0[12];
    v11 = v8 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v8 + 16);
    v12 = (os_unfair_lock_s *)(v8 + ((*(unsigned int *)(*(_QWORD *)v8 + 48) + 3) & 0x1FFFFFFFCLL));
    os_unfair_lock_lock(v12);
    sub_23B501498(v11, v7, (uint64_t *)&unk_2542FADF8);
    os_unfair_lock_unlock(v12);
    LODWORD(v9) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9);
    sub_23B5043F0(v7, (uint64_t *)&unk_2542FADF8);
    if ((_DWORD)v9 == 1)
    {
      if (qword_2542F98C8 != -1)
        swift_once();
      v13 = sub_23B56A060();
      __swift_project_value_buffer(v13, (uint64_t)qword_2542FC360);
      v14 = sub_23B56A048();
      v15 = sub_23B56A840();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc();
        v17 = swift_slowAlloc();
        v51[0] = v17;
        *(_DWORD *)v16 = 136315138;
        v0[2] = sub_23B5034E4(0xD000000000000011, 0x800000023B56C8C0, v51);
        sub_23B56A918();
        _os_log_impl(&dword_23B4F9000, v14, v15, "%s called on WorkItem that was never enqueued!", v16, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x23B867948](v17, -1, -1);
        MEMORY[0x23B867948](v16, -1, -1);
      }

      type metadata accessor for WorkItemQueue.Error(0);
      sub_23B4FCC20((unint64_t *)&unk_2542F98D0, type metadata accessor for WorkItemQueue.Error, (uint64_t)&protocol conformance descriptor for WorkItemQueue.Error);
      swift_allocError();
      v19 = v18;
      v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9908);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 2, 2, v20);
      swift_willThrow();
    }
    else
    {
      v38 = v0[8];
      v39 = OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_storedResult;
      v0[17] = OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_storedResult;
      v40 = v38 + v39;
      v41 = *(unsigned __int8 *)(v40 + 8);
      if (v41 == 255)
      {
        sub_23B4FCC20(&qword_256A2BFA0, (uint64_t (*)(uint64_t))type metadata accessor for WorkItemQueue.WorkItem, (uint64_t)&protocol conformance descriptor for WorkItemQueue.WorkItem);
        v42 = (_QWORD *)swift_task_alloc();
        v0[18] = v42;
        *v42 = v0;
        v42[1] = sub_23B54AA88;
        return sub_23B56AD50();
      }
      if ((v41 & 1) == 0)
      {
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        v45 = (uint64_t (*)(void))v0[1];
        return v45();
      }
      v46 = *(void **)v40;
      v0[4] = *(_QWORD *)v40;
      sub_23B54C1E4(v46, 1);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAD88);
      swift_willThrowTypedImpl();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v45 = (uint64_t (*)(void))v0[1];
    return v45();
  }
  if (qword_2542FAA70 != -1)
    swift_once();
  v3 = v0[11];
  v4 = v0[12];
  v5 = v0[10];
  sub_23B56AF9C();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3) == 1)
  {
    v6 = v0[10];
    sub_23B569F7C();
    sub_23B5043F0(v6, (uint64_t *)&unk_2542FADF8);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[12] + 32))(v0[14], v0[10], v0[11]);
  }
  if (qword_2542F98C8 != -1)
    swift_once();
  v22 = v0[13];
  v21 = v0[14];
  v23 = v0[11];
  v24 = v0[12];
  v25 = sub_23B56A060();
  __swift_project_value_buffer(v25, (uint64_t)qword_2542FC360);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v22, v21, v23);
  swift_retain_n();
  v26 = sub_23B56A048();
  v27 = sub_23B56A840();
  v28 = os_log_type_enabled(v26, v27);
  v30 = v0[12];
  v29 = v0[13];
  v31 = v0[11];
  if (v28)
  {
    v47 = v0[13];
    v49 = v0[12];
    v32 = swift_slowAlloc();
    v50 = swift_slowAlloc();
    v51[0] = v50;
    *(_DWORD *)v32 = 136446722;
    type = v27;
    sub_23B4FCC20(&qword_2542F97F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v33 = sub_23B56AD44();
    v0[5] = sub_23B5034E4(v33, v34, v51);
    sub_23B56A918();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 12) = 2080;
    v0[6] = sub_23B5034E4(0xD000000000000011, 0x800000023B56C8C0, v51);
    sub_23B56A918();
    *(_WORD *)(v32 + 22) = 2082;
    v35 = sub_23B56AD44();
    v0[7] = sub_23B5034E4(v35, v36, v51);
    sub_23B56A918();
    swift_bridgeObjectRelease();
    v37 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
    v37(v47, v31);
    _os_log_impl(&dword_23B4F9000, v26, type, "Cancelling WorkItem %{public}s because calling %s from %{public}s WorkItemQueue context will cause a deadlock!", (uint8_t *)v32, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v50, -1, -1);
    MEMORY[0x23B867948](v32, -1, -1);

  }
  else
  {
    swift_release_n();
    v37 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v37(v29, v31);

  }
  v0[15] = v37;
  v44 = (_QWORD *)swift_task_alloc();
  v0[16] = v44;
  *v44 = v0;
  v44[1] = sub_23B54A948;
  v44[5] = v0[8];
  return swift_task_switch();
}

uint64_t sub_23B54A948()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B54A9A0()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 120);
  v3 = *(_QWORD *)(v0 + 88);
  type metadata accessor for WorkItemQueue.Error(0);
  sub_23B4FCC20((unint64_t *)&unk_2542F98D0, type metadata accessor for WorkItemQueue.Error, (uint64_t)&protocol conformance descriptor for WorkItemQueue.Error);
  swift_allocError();
  v5 = v4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9908);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 2, v6);
  swift_willThrow();
  v2(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B54AA88()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B54AAE0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void *v7;

  v1 = *(_QWORD *)(v0 + 64) + *(_QWORD *)(v0 + 136);
  v2 = *(unsigned __int8 *)(v1 + 8);
  if (v2 == 255)
  {
    if (qword_2542F98C8 != -1)
      swift_once();
    v3 = sub_23B56A060();
    __swift_project_value_buffer(v3, (uint64_t)qword_2542FC360);
    v4 = sub_23B56A048();
    v5 = sub_23B56A840();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_23B4F9000, v4, v5, "Expected storedResult to be non-nil!", v6, 2u);
      MEMORY[0x23B867948](v6, -1, -1);
    }

    sub_23B56A5F4();
    sub_23B4FCC20((unint64_t *)&qword_2542F9630, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6838], MEMORY[0x24BEE6848]);
    swift_allocError();
    sub_23B56A15C();
    swift_willThrow();
  }
  else if ((v2 & 1) != 0)
  {
    v7 = *(void **)v1;
    *(_QWORD *)(v0 + 24) = *(_QWORD *)v1;
    sub_23B54C1E4(v7, 1);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAD88);
    swift_willThrowTypedImpl();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B54ACC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  return swift_task_switch();
}

uint64_t sub_23B54ACDC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_256A2C908 + dword_256A2C908);
  swift_retain();
  v1 = (_QWORD *)swift_task_alloc();
  v0[8] = v1;
  *v1 = v0;
  v1[1] = sub_23B54AD50;
  return v3((uint64_t)v3, v0[5], v0[6], (uint64_t)&unk_256A2C900, v0[7]);
}

uint64_t sub_23B54AD50()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

uint64_t sub_23B54ADC0()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(void **)(v0 + 72);
  swift_release();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAD88);
  if (swift_dynamicCast())
  {

    if (qword_2542F98C8 != -1)
      swift_once();
    v3 = sub_23B56A060();
    __swift_project_value_buffer(v3, (uint64_t)qword_2542FC360);
    swift_retain_n();
    v4 = sub_23B56A048();
    v5 = sub_23B56A834();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = swift_slowAlloc();
      v13 = swift_slowAlloc();
      v14 = v13;
      *(_DWORD *)v6 = 136446466;
      sub_23B569FA0();
      sub_23B4FCC20(&qword_2542F97F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v7 = sub_23B56AD44();
      *(_QWORD *)(v0 + 24) = sub_23B5034E4(v7, v8, &v14);
      sub_23B56A918();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v6 + 12) = 2082;
      v9 = sub_23B56AF60();
      *(_QWORD *)(v0 + 32) = sub_23B5034E4(v9, v10, &v14);
      sub_23B56A918();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23B4F9000, v4, v5, "Cancelling %{public}s after %{public}s timeout.", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x23B867948](v13, -1, -1);
      MEMORY[0x23B867948](v6, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    v12 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 80) = v12;
    *v12 = v0;
    v12[1] = sub_23B54B0A8;
    v12[5] = *(_QWORD *)(v0 + 56);
    return swift_task_switch();
  }
  else
  {

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_23B54B0A8()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B54B100()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B54B134()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_23B4FACE0;
  return sub_23B54A0F4();
}

uint64_t WorkItemQueue.WorkItem.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23B54B188@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_id;
  v4 = sub_23B569FA0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_23B54B1D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542FADF8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23B569FA0();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23B501498(a1, (uint64_t)v6, (uint64_t *)&unk_2542FADF8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_23B5043F0(a1, (uint64_t *)&unk_2542FADF8);
    sub_23B5043F0((uint64_t)v6, (uint64_t *)&unk_2542FADF8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a1, a2, v7);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    type metadata accessor for WorkItemQueue.Error(0);
    sub_23B4FCC20((unint64_t *)&unk_2542F98D0, type metadata accessor for WorkItemQueue.Error, (uint64_t)&protocol conformance descriptor for WorkItemQueue.Error);
    swift_allocError();
    v13 = v12;
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v12, v10, v7);
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9908);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 0, 2, v14);
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

uint64_t sub_23B54B3B0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = *a1;
  if (v6)
    sub_23B50033C(v6);
  if (a2)
  {
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = a2;
    *(_QWORD *)(v7 + 24) = a3;
    v8 = &unk_256A2C988;
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  *a1 = (uint64_t)v8;
  a1[1] = v7;
  return sub_23B5332CC(a2);
}

void sub_23B54B434(_BYTE *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = sub_23B569FA0();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*a1 == 1)
  {
    v9 = a2 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_id;
    if (qword_2542F98C8 != -1)
      swift_once();
    v10 = sub_23B56A060();
    __swift_project_value_buffer(v10, (uint64_t)qword_2542FC360);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
    v11 = sub_23B56A048();
    v12 = sub_23B56A84C();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = swift_slowAlloc();
      v20 = v2;
      v14 = (uint8_t *)v13;
      v19 = swift_slowAlloc();
      v22 = v19;
      *(_DWORD *)v14 = 136315138;
      v18 = v14 + 4;
      sub_23B4FCC20(&qword_2542F97F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v15 = sub_23B56AD44();
      v21 = sub_23B5034E4(v15, v16, &v22);
      sub_23B56A918();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      _os_log_impl(&dword_23B4F9000, v11, v12, "Clearing willDeadlock since %s completed and awaitCompletion can now successfully be called from any context.", v14, 0xCu);
      v17 = v19;
      swift_arrayDestroy();
      MEMORY[0x23B867948](v17, -1, -1);
      MEMORY[0x23B867948](v14, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }

  }
  *a1 = 0;
}

uint64_t sub_23B54B67C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  int64_t v36;
  uint64_t v37;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA40);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAB18);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v33 - v9;
  v11 = (_QWORD *)(v0 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_waiterContinuations);
  swift_beginAccess();
  v12 = *v11;
  v14 = (_QWORD *)(*v11 + 64);
  v13 = *v14;
  v34 = v11;
  v35 = v14;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v13;
  v36 = (unint64_t)(v15 + 63) >> 6;
  v37 = v12;
  v33 = v36 - 1;
  result = swift_bridgeObjectRetain();
  v19 = 0;
  if (!v17)
    goto LABEL_8;
LABEL_6:
  v21 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  v22 = v21 | (v19 << 6);
  while (2)
  {
    v23 = v37;
    v24 = *(_QWORD *)(v37 + 48);
    v25 = sub_23B569FA0();
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v8, v24 + *(_QWORD *)(*(_QWORD *)(v25 - 8) + 72) * v22, v25);
    v26 = *(_QWORD *)(v23 + 56) + *(_QWORD *)(v2 + 72) * v22;
    v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAB10);
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(&v8[*(int *)(v27 + 48)], v26, v1);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v8, 0, 1, v27);
    while (1)
    {
      sub_23B54C858((uint64_t)v8, (uint64_t)v10);
      v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAB10);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 48))(v10, 1, v32) == 1)
      {
        swift_release();
        *v34 = MEMORY[0x24BEE4B00];
        return swift_bridgeObjectRelease();
      }
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, &v10[*(int *)(v32 + 48)], v1);
      sub_23B56A5DC();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      v20 = sub_23B569FA0();
      result = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v10, v20);
      if (v17)
        goto LABEL_6;
LABEL_8:
      v28 = v19 + 1;
      if (__OFADD__(v19, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v28 < v36)
      {
        v29 = v35[v28];
        if (v29)
          goto LABEL_11;
        v30 = v19 + 2;
        ++v19;
        if (v28 + 1 < v36)
        {
          v29 = v35[v30];
          if (v29)
            goto LABEL_14;
          v19 = v28 + 1;
          if (v28 + 2 < v36)
          {
            v29 = v35[v28 + 2];
            if (v29)
            {
              v28 += 2;
              goto LABEL_11;
            }
            v30 = v28 + 3;
            v19 = v28 + 2;
            if (v28 + 3 < v36)
              break;
          }
        }
      }
LABEL_25:
      v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAB10);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v8, 1, 1, v31);
      v17 = 0;
    }
    v29 = v35[v30];
    if (v29)
    {
LABEL_14:
      v28 = v30;
LABEL_11:
      v17 = (v29 - 1) & v29;
      v22 = __clz(__rbit64(v29)) + (v28 << 6);
      v19 = v28;
      continue;
    }
    break;
  }
  while (1)
  {
    v28 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v28 >= v36)
    {
      v19 = v33;
      goto LABEL_25;
    }
    v29 = v35[v28];
    ++v30;
    if (v29)
      goto LABEL_11;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_23B54BA14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA30);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(unsigned __int8 *)(a2 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_cancellationBlockNeeded);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28);
  v9 = v8;
  if (v7 != 1)
    return sub_23B56A5DC();
  v10 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v6, a1, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v6, 0, 1, v9);
  v11 = a2 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_cancelContinuation;
  swift_beginAccess();
  sub_23B501450((uint64_t)v6, v11);
  return swift_endAccess();
}

uint64_t sub_23B54BB1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9CE0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_23B569FA0();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23B569F94();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA40);
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v4, a1, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v8);
  swift_beginAccess();
  sub_23B5108D8((uint64_t)v4, (uint64_t)v7);
  return swift_endAccess();
}

uint64_t sub_23B54BC40@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v6 = sub_23B569FA0();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v17 - v11;
  if ((sub_23B538A48(a2, *a1) & 1) != 0)
  {
    type metadata accessor for WorkItemQueue.Error(0);
    sub_23B4FCC20((unint64_t *)&unk_2542F98D0, type metadata accessor for WorkItemQueue.Error, (uint64_t)&protocol conformance descriptor for WorkItemQueue.Error);
    swift_allocError();
    v14 = v13;
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9908);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 2, v15);
    return swift_willThrow();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
    sub_23B539F2C((uint64_t)v12, v10);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    *a3 = *a1;
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_23B54BDA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
    sub_23B56A5DC();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  sub_23B5043F0(a1, &qword_2542FAA30);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, 1, 1, v2);
}

uint64_t sub_23B54BE80(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;

  v33 = a2;
  v34 = a3;
  v32 = a1;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542FADF8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  *(_BYTE *)(v6 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_isCancelled) = 0;
  v13 = OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_assocatedQueueIdentifier;
  v14 = sub_23B569FA0();
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v12, 1, 1, v14);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAB58);
  v16 = swift_allocObject();
  *(_DWORD *)(v16 + ((*(unsigned int *)(*(_QWORD *)v16 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_23B501498((uint64_t)v12, v16 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v16 + 16), (uint64_t *)&unk_2542FADF8);
  sub_23B5043F0((uint64_t)v12, (uint64_t *)&unk_2542FADF8);
  *(_QWORD *)(v6 + v13) = v16;
  *(_BYTE *)(v6 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_completionAlreadyCalled) = 0;
  *(_BYTE *)(v6 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_cancellationBlockNeeded) = 1;
  v17 = OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_cancellationBlock;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA68);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v18 + 24) = 0;
  *(_DWORD *)(v18 + 32) = 0;
  *(_QWORD *)(v6 + v17) = v18;
  v19 = v6 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_cancelContinuation;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA28);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  v21 = v6 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_storedResult;
  *(_QWORD *)v21 = 0;
  *(_BYTE *)(v21 + 8) = -1;
  *(_QWORD *)(v6 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_waiterContinuations) = MEMORY[0x24BEE4B00];
  v22 = OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_visitedQueueIdentifiers;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAB70);
  v23 = swift_allocObject();
  v24 = MEMORY[0x24BEE4B08];
  *(_DWORD *)(v23 + 24) = 0;
  *(_QWORD *)(v23 + 16) = v24;
  *(_QWORD *)(v6 + v22) = v23;
  v25 = OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_willDeadlock;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAB60);
  v26 = swift_allocObject();
  *(_DWORD *)(v26 + 20) = 0;
  *(_BYTE *)(v26 + 16) = 0;
  *(_QWORD *)(v6 + v25) = v26;
  *(_BYTE *)(v6 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_itemType) = v32;
  v27 = v33;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v6 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_id, v33, v14);
  v28 = (_QWORD *)(v6 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_block);
  *v28 = v34;
  v28[1] = a4;
  v29 = (uint64_t *)(v6 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_completion);
  *v29 = a5;
  v29[1] = a6;
  swift_retain();
  sub_23B5332CC(a5);
  sub_23B5497F0();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v27, v14);
  return v6;
}

void sub_23B54C154(void *a1, unsigned __int8 a2)
{
  if (a2 != 255)
    sub_23B54C16C(a1, a2 & 1);
}

void sub_23B54C16C(id a1, char a2)
{
  if ((a2 & 1) != 0)

}

uint64_t sub_23B54C178()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;

  v2 = *(int **)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_23B4FACE0;
  return ((uint64_t (*)(int *))((char *)&dword_256A2C8D8 + dword_256A2C8D8))(v2);
}

uint64_t sub_23B54C1DC(uint64_t a1)
{
  return sub_23B54BB1C(a1);
}

id sub_23B54C1E4(id result, char a2)
{
  if ((a2 & 1) != 0)
    return result;
  return result;
}

uint64_t sub_23B54C1F0()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_23B4FACE0;
  v2 = (_QWORD *)swift_task_alloc();
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_23B4FACE0;
  return sub_23B54A0F4();
}

uint64_t sub_23B54C254@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(*a1 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_isCancelled);
  result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t sub_23B54C2A4(char *a1, _QWORD *a2)
{
  char v2;
  _BYTE *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_BYTE *)(*a2 + OBJC_IVAR____TtCC10FindMyBase13WorkItemQueue8WorkItem_isCancelled);
  result = swift_beginAccess();
  *v3 = v2;
  return result;
}

uint64_t sub_23B54C2F0()
{
  return type metadata accessor for WorkItemQueue.WorkItem();
}

uint64_t method lookup function for WorkItemQueue.WorkItem()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of WorkItemQueue.WorkItem.isCancelled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of WorkItemQueue.WorkItem.isCancelled.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of WorkItemQueue.WorkItem.isCancelled.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of WorkItemQueue.WorkItem.cancel()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 352) + *(_QWORD *)(*(_QWORD *)v0 + 352));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_23B4FACE0;
  return v4();
}

uint64_t dispatch thunk of WorkItemQueue.WorkItem.awaitCompletion()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 360) + *(_QWORD *)(*(_QWORD *)v0 + 360));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_23B4FACE0;
  return v4();
}

uint64_t dispatch thunk of WorkItemQueue.WorkItem.awaitCompletion(cancelAfter:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 368) + *(_QWORD *)(*(_QWORD *)v2 + 368));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_23B4FACE0;
  return v8(a1, a2);
}

uint64_t sub_23B54C448(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = v2[2];
  v7 = v2[3];
  v9 = v2[4];
  v8 = v2[5];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v10;
  *v10 = v3;
  v10[1] = sub_23B4FACE0;
  return sub_23B54818C(a1, a2, v6, v7, v9, v8);
}

uint64_t sub_23B54C4C8()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23B54C4F4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_23B4FACE0;
  return sub_23B54861C(a1, v4, v5, v7, v6);
}

uint64_t sub_23B54C56C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = sub_23B56AB94();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = sub_23B56ABAC();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  return swift_deallocObject();
}

uint64_t sub_23B54C628()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(sub_23B56AB94() - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(sub_23B56ABAC() - 8) + 80);
  v6 = v3 + v4 + v5;
  v7 = v0 + v3;
  v8 = v0 + (v6 & ~v5);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = sub_23B4FAC98;
  v9[5] = v7;
  v9[6] = v8;
  return swift_task_switch();
}

uint64_t sub_23B54C6CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v1 + 16);
  v6 = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_23B4FACE0;
  *(_OWORD *)(v4 + 40) = v6;
  *(_OWORD *)(v4 + 24) = v5;
  *(_QWORD *)(v4 + 16) = a1;
  return swift_task_switch();
}

void sub_23B54C738()
{
  uint64_t v0;

  sub_23B549104(*(os_unfair_lock_s **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_23B54C740(uint64_t a1)
{
  uint64_t v1;

  sub_23B548AB0(a1, *(_QWORD *)(v1 + 16), *(os_unfair_lock_s **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_23B54C74C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23B54C780()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc();
  v4 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_23B4FAC98;
  *(_QWORD *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  return swift_task_switch();
}

uint64_t sub_23B54C7E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23B4FACE0;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_256A2C980 + dword_256A2C980))(a1, v4);
}

uint64_t sub_23B54C858(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAB18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23B54C8A0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t MachServiceName.description.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MachServiceName.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_23B56A36C();
  return swift_bridgeObjectRelease();
}

uint64_t static MachServiceName.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_23B56AD98();
}

uint64_t MachServiceName.hashValue.getter()
{
  sub_23B56AE64();
  swift_bridgeObjectRetain();
  sub_23B56A36C();
  swift_bridgeObjectRelease();
  return sub_23B56AE88();
}

uint64_t sub_23B54C9BC()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_23B54C9E8()
{
  sub_23B56AE64();
  swift_bridgeObjectRetain();
  sub_23B56A36C();
  swift_bridgeObjectRelease();
  return sub_23B56AE88();
}

uint64_t sub_23B54CA40()
{
  swift_bridgeObjectRetain();
  sub_23B56A36C();
  return swift_bridgeObjectRelease();
}

double XPCServiceDescription.init(name:remoteObjectInterface:options:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  v4 = *a1;
  v5 = a1[1];
  result = 0.0;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_QWORD *)a4 = v4;
  *(_QWORD *)(a4 + 8) = v5;
  *(_QWORD *)(a4 + 16) = a3;
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = a2;
  *(_QWORD *)(a4 + 88) = 0;
  *(_QWORD *)(a4 + 96) = 0;
  *(_QWORD *)(a4 + 80) = 0;
  return result;
}

uint64_t XPCServiceDescription.init(name:exportedObject:exportedInterface:options:requiredEntitlement:shouldAccept:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v13;
  uint64_t result;

  v13 = a1[1];
  *a8 = *a1;
  a8[1] = v13;
  a8[2] = a4;
  result = sub_23B4FAED4(a5, (uint64_t)(a8 + 6), &qword_2542FAD60);
  a8[3] = a2;
  a8[4] = a3;
  a8[5] = 0;
  a8[11] = a6;
  a8[12] = a7;
  return result;
}

void XPCServiceDescription.init(connection:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  _OWORD v13[2];
  _BYTE v14[24];
  uint64_t v15;

  v4 = objc_msgSend(a1, sel_serviceName);
  if (v4)
  {
    v5 = v4;
    v6 = sub_23B56A288();
    v8 = v7;

    if (objc_msgSend(a1, sel_exportedObject))
    {
      sub_23B56A9D8();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v13, 0, sizeof(v13));
    }
    sub_23B4FAED4((uint64_t)v13, (uint64_t)v14, &qword_2542F9CD8);
    if (v15)
    {
      sub_23B4FF1C0();
      if (swift_dynamicCast())
        v9 = v12;
      else
        v9 = 0;
    }
    else
    {
      sub_23B54CC8C((uint64_t)v14);
      v9 = 0;
    }
    v10 = objc_msgSend(a1, sel_exportedInterface);
    v11 = objc_msgSend(a1, sel_remoteObjectInterface);
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_QWORD *)(a2 + 80) = 0;

    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v9;
    *(_QWORD *)(a2 + 32) = v10;
    *(_QWORD *)(a2 + 40) = v11;
    *(_QWORD *)(a2 + 88) = 0;
    *(_QWORD *)(a2 + 96) = 0;
  }
  else
  {

    *(_QWORD *)(a2 + 96) = 0;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
}

uint64_t sub_23B54CC8C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9CD8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_23B54CCD0()
{
  unint64_t result;

  result = qword_2542F9BA8;
  if (!qword_2542F9BA8)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for MachServiceName, &type metadata for MachServiceName);
    atomic_store(result, (unint64_t *)&qword_2542F9BA8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MachServiceName(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t assignWithCopy for XPCServiceDescription(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(void **)(a1 + 24);
  v5 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = v5;

  v7 = *(void **)(a1 + 32);
  v8 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  v9 = v8;

  v10 = *(void **)(a1 + 40);
  v11 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v11;
  v12 = v11;

  v13 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    if (v13)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
      goto LABEL_8;
    }
    __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  }
  else if (v13)
  {
    *(_QWORD *)(a1 + 72) = v13;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 48, a2 + 48);
    goto LABEL_8;
  }
  v14 = *(_OWORD *)(a2 + 48);
  v15 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v14;
  *(_OWORD *)(a1 + 64) = v15;
LABEL_8:
  v16 = *(_QWORD *)(a2 + 88);
  if (!*(_QWORD *)(a1 + 88))
  {
    if (v16)
    {
      v18 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 88) = v16;
      *(_QWORD *)(a1 + 96) = v18;
      swift_retain();
      return a1;
    }
LABEL_14:
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    return a1;
  }
  if (!v16)
  {
    swift_release();
    goto LABEL_14;
  }
  v17 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v16;
  *(_QWORD *)(a1 + 96) = v17;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t assignWithTake for XPCServiceDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(void **)(a1 + 24);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;

  v7 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);

  v8 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);

  if (*(_QWORD *)(a1 + 72))
    __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  v9 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v10 = *(_QWORD *)(a2 + 88);
  if (!*(_QWORD *)(a1 + 88))
  {
    if (v10)
    {
      v12 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 88) = v10;
      *(_QWORD *)(a1 + 96) = v12;
      return a1;
    }
LABEL_9:
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    return a1;
  }
  if (!v10)
  {
    swift_release();
    goto LABEL_9;
  }
  v11 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v10;
  *(_QWORD *)(a1 + 96) = v11;
  swift_release();
  return a1;
}

BOOL static DefaultStringInterpolation.BinaryIntegerRadix.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t DefaultStringInterpolation.BinaryIntegerRadix.hash(into:)()
{
  return sub_23B56AE70();
}

uint64_t DefaultStringInterpolation.BinaryIntegerRadix.hashValue.getter()
{
  sub_23B56AE64();
  sub_23B56AE70();
  return sub_23B56AE88();
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:radix:padded:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char *v9;
  _BYTE *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  unint64_t v27;

  v6 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*v10 & 1) == 0)
  {
    if ((v7 & 1) != 0)
    {
      v16 = sub_23B56A9B4();
      v26 = MEMORY[0x23B866718](48, 0xE100000000000000, v16);
      v27 = v17;
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, a4);
      sub_23B56A438();
      sub_23B56A3A8();
      swift_bridgeObjectRelease();
      v13 = v26;
      v14 = v27;
      v15 = sub_23B56A9B4();
      goto LABEL_6;
    }
LABEL_7:
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, a4);
    sub_23B56A438();
    goto LABEL_8;
  }
  if ((v7 & 1) == 0)
    goto LABEL_7;
  v11 = sub_23B56A9B4();
  v26 = MEMORY[0x23B866718](48, 0xE100000000000000, v11 / 4);
  v27 = v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, a4);
  sub_23B56A438();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  v13 = v26;
  v14 = v27;
  v15 = sub_23B56A9B4() / 4;
LABEL_6:
  v18 = sub_23B54D3BC(v15, v13, v14);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  swift_bridgeObjectRelease();
  MEMORY[0x23B866634](v18, v20, v22, v24);
  swift_bridgeObjectRelease();
LABEL_8:
  sub_23B56A3A8();
  return swift_bridgeObjectRelease();
}

unint64_t sub_23B54D3BC(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  char v4;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    result = sub_23B56A390();
    if ((v4 & 1) != 0)
      result = 15;
    if (4 * v3 >= result >> 14)
      return sub_23B56A45C();
  }
  __break(1u);
  return result;
}

unint64_t sub_23B54D468()
{
  unint64_t result;

  result = qword_256A2C9C0;
  if (!qword_256A2C9C0)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for DefaultStringInterpolation.BinaryIntegerRadix, &type metadata for DefaultStringInterpolation.BinaryIntegerRadix);
    atomic_store(result, (unint64_t *)&qword_256A2C9C0);
  }
  return result;
}

uint64_t _s18BinaryIntegerRadixOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23B54D4F8 + 4 * byte_23B571A85[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23B54D52C + 4 * asc_23B571A80[v4]))();
}

uint64_t sub_23B54D52C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23B54D534(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23B54D53CLL);
  return result;
}

uint64_t sub_23B54D548(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23B54D550);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23B54D554(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23B54D55C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DefaultStringInterpolation.BinaryIntegerRadix()
{
  return &type metadata for DefaultStringInterpolation.BinaryIntegerRadix;
}

uint64_t AsyncSequence<>.unique()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v10, v4, a1);
  return sub_23B54D60C((uint64_t)v10, a1, a2, a3, a4);
}

uint64_t sub_23B54D60C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v20 = a4;
  v9 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v15 = (char *)&v19 - v14;
  swift_getAssociatedTypeWitness();
  v16 = v20;
  *a5 = sub_23B56A168();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a2);
  sub_23B56A6FC();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, a2);
  v17 = type metadata accessor for UniqueAsyncSequence(0, a2, a3, v16);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))((char *)a5 + *(int *)(v17 + 44), v15, AssociatedTypeWitness);
}

void AsyncSequence.unique<A>(by:)(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t **a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v12, v5, a2);
  swift_retain();
  sub_23B54D814((uint64_t)v12, a1, a2, a3, a4, a5);
}

void sub_23B54D814(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t **a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[6];

  v12 = *a2;
  v13 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v19[0] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v19[1] = AssociatedTypeWitness;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v17 = *(_QWORD *)(*MEMORY[0x24BEE46A8] + v12 + 8);
  v18 = sub_23B56A168();
  *a6 = a2;
  a6[1] = (uint64_t *)v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, a3);
  sub_23B56A6FC();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, a3);
  v19[2] = a3;
  v19[3] = v17;
  v19[4] = a4;
  v19[5] = a5;
  type metadata accessor for UniqueIndirectAsyncSequence();
}

uint64_t sub_23B54D934(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v3 - 128) + 32))(v1 + *(int *)(a1 + 56), v2, *(_QWORD *)(v3 - 120));
}

uint64_t UniqueAsyncSequence.makeAsyncIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

uint64_t UniqueAsyncSequence.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *(_QWORD *)(a2 + 24);
  v3[6] = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[7] = AssociatedTypeWitness;
  v3[8] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3[9] = swift_task_alloc();
  v3[10] = swift_task_alloc();
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  v5 = sub_23B56A900();
  v3[13] = v5;
  v3[14] = *(_QWORD *)(v5 - 8);
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B54DA80()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v4;

  v1 = v0[17];
  v2 = v0[7];
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[8] + 56);
  v0[18] = v3;
  v3(v1, 1, 1, v2);
  sub_23B56A6C0();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = (_QWORD *)swift_task_alloc();
  v0[19] = v4;
  *v4 = v0;
  v4[1] = sub_23B54DBF8;
  return sub_23B56A600();
}

uint64_t sub_23B54DBF8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B54DC5C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t, uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t (*v26)(void);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = v0[16];
  v2 = v0[17];
  v4 = v0[14];
  v3 = v0[15];
  v5 = v0[13];
  v6 = v0[7];
  v7 = v0[8];
  v8 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v8(v2, v5);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  v9(v2, v1, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v3, 1, v6) == 1)
  {
    v10 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v0[18];
    v11 = v0[15];
    v12 = v0[13];
    v13 = v0[7];
    v14 = v0[2];
    v8(v0[17], v12);
    v8(v11, v12);
    v10(v14, 1, 1, v13);
LABEL_7:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v26 = (uint64_t (*)(void))v0[1];
    return v26();
  }
  v15 = v0[11];
  v16 = v0[12];
  v17 = v0[7];
  v18 = v0[8];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v18 + 32))(v16, v0[15], v17);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
  v19(v15, v16, v17);
  v20 = sub_23B56A7B0();
  v22 = v0[11];
  v21 = v0[12];
  if ((v20 & 1) == 0)
  {
    v34 = v0[13];
    v35 = v0[17];
    v27 = v0[10];
    v28 = v0[7];
    v32 = v0[8];
    v33 = v0[2];
    v19(v0[9], v22, v28);
    sub_23B56A7BC();
    sub_23B56A7A4();
    v29 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
    v29(v27, v28);
    v29(v22, v28);
    v29(v21, v28);
    v9(v33, v35, v34);
    goto LABEL_7;
  }
  v23 = v0[20];
  v24 = v0[7];
  v25 = *(void (**)(uint64_t, uint64_t))(v0[8] + 8);
  v25(v0[11], v24);
  v25(v21, v24);
  sub_23B56A6C0();
  if (v23)
  {
    v8(v0[17], v0[13]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v26 = (uint64_t (*)(void))v0[1];
    return v26();
  }
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v31 = (_QWORD *)swift_task_alloc();
  v0[19] = v31;
  *v31 = v0;
  v31[1] = sub_23B54DBF8;
  return sub_23B56A600();
}

uint64_t sub_23B54DFA4()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 104));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B54E040(uint64_t a1, uint64_t a2)
{
  return sub_23B54E8CC(a1, a2, (void (*)(void))UniqueAsyncSequence.makeAsyncIterator());
}

uint64_t sub_23B54E04C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23B4FAC98;
  return UniqueAsyncSequence.next()(a1, a2);
}

uint64_t sub_23B54E0AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + 24) = a4;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 32) = v5;
  *v5 = v4;
  v5[1] = sub_23B54E144;
  return sub_23B56A60C();
}

uint64_t sub_23B54E144()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *v1;
  swift_task_dealloc();
  if (v0)
    **(_QWORD **)(v2 + 24) = *(_QWORD *)(v2 + 16);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t UniqueIndirectAsyncSequence.next()(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v5 = a2[3];
  v3[5] = v5;
  v3[6] = *(_QWORD *)(v5 - 8);
  v3[7] = swift_task_alloc();
  v3[8] = swift_task_alloc();
  v3[9] = swift_task_alloc();
  v3[10] = a2[4];
  v3[11] = a2[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3[12] = AssociatedTypeWitness;
  v3[13] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3[14] = swift_task_alloc();
  v7 = sub_23B56A900();
  v3[15] = v7;
  v3[16] = *(_QWORD *)(v7 - 8);
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  v3[19] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B54E2B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v4;

  v1 = v0[19];
  v2 = v0[12];
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[13] + 56);
  v0[20] = v3;
  v3(v1, 1, 1, v2);
  sub_23B56A6C0();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = (_QWORD *)swift_task_alloc();
  v0[21] = v4;
  *v4 = v0;
  v4[1] = sub_23B54E42C;
  return sub_23B56A600();
}

uint64_t sub_23B54E42C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B54E490()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t, uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = v0[18];
  v2 = v0[19];
  v4 = v0[16];
  v3 = v0[17];
  v5 = v0[15];
  v6 = v0[12];
  v7 = v0[13];
  v8 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v8(v2, v5);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  v9(v2, v1, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v3, 1, v6) == 1)
  {
    v10 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v0[20];
    v11 = v0[17];
    v12 = v0[15];
    v13 = v0[12];
    v14 = v0[2];
    v8(v0[19], v12);
    v8(v11, v12);
    v10(v14, 1, 1, v13);
LABEL_7:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v21 = (uint64_t (*)(void))v0[1];
    return v21();
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[13] + 32))(v0[14], v0[17], v0[12]);
  swift_getAtKeyPath();
  v15 = sub_23B56A7B0();
  v16 = v0[13];
  v17 = v0[14];
  v18 = v0[12];
  v19 = v0[9];
  if ((v15 & 1) == 0)
  {
    v31 = v0[15];
    v32 = v0[19];
    v30 = v0[12];
    v22 = v0[8];
    v28 = v0[14];
    v24 = v0[5];
    v23 = v0[6];
    v29 = v0[2];
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v23 + 16))(v0[7], v19, v24);
    sub_23B56A7BC();
    sub_23B56A7A4();
    v25 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v25(v22, v24);
    v25(v19, v24);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v28, v30);
    v9(v29, v32, v31);
    goto LABEL_7;
  }
  v20 = v0[22];
  (*(void (**)(_QWORD, _QWORD))(v0[6] + 8))(v0[9], v0[5]);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v18);
  sub_23B56A6C0();
  if (v20)
  {
    v8(v0[19], v0[15]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v21 = (uint64_t (*)(void))v0[1];
    return v21();
  }
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v27 = (_QWORD *)swift_task_alloc();
  v0[21] = v27;
  *v27 = v0;
  v27[1] = sub_23B54E42C;
  return sub_23B56A600();
}

uint64_t sub_23B54E7F8()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 120));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_23B54E894()
{
  JUMPOUT(0x23B867894);
}

uint64_t sub_23B54E8A4()
{
  return MEMORY[0x24BEE3F20];
}

void sub_23B54E8B0()
{
  JUMPOUT(0x23B867894);
}

uint64_t sub_23B54E8C0(uint64_t a1, uint64_t a2)
{
  return sub_23B54E8CC(a1, a2, (void (*)(void))UniqueIndirectAsyncSequence.makeAsyncIterator());
}

uint64_t sub_23B54E8CC(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v3;

  a3();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v3, a1);
}

uint64_t sub_23B54E8FC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23B4FACE0;
  return UniqueIndirectAsyncSequence.next()(a1, a2);
}

uint64_t sub_23B54E95C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + 24) = a4;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 32) = v5;
  *v5 = v4;
  v5[1] = sub_23B54FA00;
  return sub_23B56A60C();
}

uint64_t sub_23B54E9F4()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23B54E9FC()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23B54EA88(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 8) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v12 = ~v6;
    v13 = (char *)a1 + v6;
    v14 = (char *)a2 + v6;
    v15 = (unint64_t)(v13 + 8) & v12;
    v16 = (unint64_t)(v14 + 8) & v12;
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v17(v15, v16, AssociatedTypeWitness);
  }
  return a1;
}

uint64_t sub_23B54EB64(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  swift_bridgeObjectRelease();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80), AssociatedTypeWitness);
}

_QWORD *sub_23B54EBC4(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  swift_bridgeObjectRetain();
  v9(v7, v8, AssociatedTypeWitness);
  return a1;
}

_QWORD *sub_23B54EC58(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), AssociatedTypeWitness);
  return a1;
}

_QWORD *sub_23B54ECE4(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  *a1 = *a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), AssociatedTypeWitness);
  return a1;
}

_QWORD *sub_23B54ED54(_QWORD *a1, _QWORD *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_23B54EDD8(_QWORD *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (a2 <= v6)
    goto LABEL_24;
  v8 = ((v7 + 8) & ~v7) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v12 = ((a2 - v6 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v12))
    {
      v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10)
        goto LABEL_24;
      goto LABEL_15;
    }
    if (v12 > 0xFF)
    {
      v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(_WORD *)((char *)a1 + v8))
        goto LABEL_24;
      goto LABEL_15;
    }
    if (v12 < 2)
    {
LABEL_24:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
      v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((_BYTE *)a1 + v8))
    goto LABEL_24;
LABEL_15:
  v13 = (v10 - 1) << v9;
  if (v8 > 3)
    v13 = 0;
  if ((_DWORD)v8)
  {
    if (v8 <= 3)
      v14 = v8;
    else
      v14 = 4;
    __asm { BR              X12 }
  }
  return v6 + v13 + 1;
}

void sub_23B54EF60(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)) + *(_QWORD *)(v6 + 64);
  if (a3 <= v7)
  {
    v9 = 0;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for UniqueAsyncSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UniqueAsyncSequence);
}

uint64_t sub_23B54F184()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23B54F18C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23B54F228(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 16) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v12 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v13 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v13;
    v14 = ((unint64_t)v12 + v6 + 8) & ~v6;
    v15 = ((unint64_t)v13 + v6 + 8) & ~v6;
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_bridgeObjectRetain();
    v16(v14, v15, AssociatedTypeWitness);
  }
  return a1;
}

uint64_t sub_23B54F324(uint64_t a1)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  v1 = a1 + 15;
  swift_release();
  swift_bridgeObjectRelease();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(((v1 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80), AssociatedTypeWitness);
}

_QWORD *sub_23B54F394(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  v3 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v4 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v3 = *v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)v3 + v7 + 8) & ~v7;
  v9 = ((unint64_t)v4 + v7 + 8) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  v10(v8, v9, AssociatedTypeWitness);
  return a1;
}

_QWORD *sub_23B54F44C(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;

  v3 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(unsigned __int8 *)(v6 + 80) + 8 + (v3 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), AssociatedTypeWitness);
  return a1;
}

_QWORD *sub_23B54F508(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;

  *a1 = *a2;
  v3 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v4 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v3 = *v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v3 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), AssociatedTypeWitness);
  return a1;
}

_QWORD *sub_23B54F594(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;

  v3 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v3 &= 0xFFFFFFFFFFFFFFF8;
  *v4 = *(_QWORD *)v3;
  swift_bridgeObjectRelease();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(unsigned __int8 *)(v6 + 80) + 8 + v3) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t sub_23B54F638(_QWORD *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (a2 <= v6)
    goto LABEL_24;
  v8 = ((v7 + 16) & ~v7) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v12 = ((a2 - v6 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v12))
    {
      v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10)
        goto LABEL_24;
      goto LABEL_15;
    }
    if (v12 > 0xFF)
    {
      v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(_WORD *)((char *)a1 + v8))
        goto LABEL_24;
      goto LABEL_15;
    }
    if (v12 < 2)
    {
LABEL_24:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                      + v7
                                                                      + 8) & ~v7);
      v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((_BYTE *)a1 + v8))
    goto LABEL_24;
LABEL_15:
  v13 = (v10 - 1) << v9;
  if (v8 > 3)
    v13 = 0;
  if ((_DWORD)v8)
  {
    if (v8 <= 3)
      v14 = v8;
    else
      v14 = 4;
    __asm { BR              X12 }
  }
  return v6 + v13 + 1;
}

void sub_23B54F7CC(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 <= v7)
  {
    v9 = 0;
  }
  else if (v8 <= 3)
  {
    v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      v9 = 4u;
    }
    else if (v11 >= 0x100)
    {
      v9 = 2;
    }
    else
    {
      v9 = v11 > 1;
    }
  }
  else
  {
    v9 = 1u;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

void type metadata accessor for UniqueIndirectAsyncSequence()
{
  JUMPOUT(0x23B867834);
}

uint64_t DispatchTimer.isCancelled.getter()
{
  swift_getObjectType();
  return sub_23B56A8A0() & 1;
}

uint64_t DispatchTimer.__allocating_init(deadline:repeating:leeway:queue:block:)(void *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v12;

  v12 = swift_allocObject();
  DispatchTimer.init(deadline:repeating:leeway:queue:block:)(a1, a2, a3, a4, a5, a6);
  return v12;
}

uint64_t DispatchTimer.init(deadline:repeating:leeway:queue:block:)(void *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _DWORD *v40;
  _DWORD *v41;
  _DWORD *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(_QWORD *, uint64_t, uint64_t);
  uint64_t v51;
  void (*v52)(_QWORD *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t ObjectType;
  uint64_t v59;
  void *v60;
  char *v61;
  char *v62;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  _QWORD *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  _QWORD aBlock[7];

  v7 = v6;
  v14 = sub_23B56A084();
  v78 = *(_QWORD *)(v14 - 8);
  v79 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v77 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_23B56A078();
  v74 = *(_QWORD *)(v82 - 8);
  v16 = MEMORY[0x24BDAC7A8](v82);
  v73 = (uint64_t *)((char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v16);
  v19 = (uint64_t *)((char *)&v64 - v18);
  v83 = sub_23B56A0B4();
  v76 = *(_QWORD *)(v83 - 8);
  v20 = MEMORY[0x24BDAC7A8](v83);
  v75 = (char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v84 = (char *)&v64 - v22;
  v23 = sub_23B56A888();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = (_QWORD *)sub_23B56A870();
  v68 = *(v69 - 1);
  MEMORY[0x24BDAC7A8](v69);
  v70 = (char *)&v64 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_23B56A864();
  MEMORY[0x24BDAC7A8](v66);
  v67 = (char *)&v64 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_23B56A09C();
  v30 = MEMORY[0x24BDAC7A8](v29);
  v81 = (char *)&v64 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v6 + 16) = 0x408F400000000000;
  v33 = a4 * 1000.0;
  v34 = fmin(v33, 2147483650.0);
  if ((~*(_QWORD *)&v34 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  if (v34 <= -2147483650.0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v34 >= 2147483650.0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  a5 = a5 * 1000.0;
  *(_DWORD *)(v6 + 24) = (int)v34;
  v35 = fmin(a5, 2147483650.0);
  if ((~*(_QWORD *)&v35 & 0x7FF0000000000000) == 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v35 <= -2147483650.0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v35 >= 2147483650.0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  a6 = a6 * 1000.0;
  *(_DWORD *)(v6 + 28) = (int)v35;
  v36 = fmin(a6, 2147483650.0);
  if ((~*(_QWORD *)&v36 & 0x7FF0000000000000) == 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v36 <= -2147483650.0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v36 >= 2147483650.0)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    swift_once();
    goto LABEL_14;
  }
  v71 = v31;
  v72 = v30;
  *(_DWORD *)(v6 + 32) = (int)v36;
  v80 = a3;
  if (v33 <= 2147483650.0 && a5 <= 2147483650.0 && a6 <= 2147483650.0)
    goto LABEL_17;
  if (qword_256A2BA10 != -1)
    goto LABEL_33;
LABEL_14:
  v37 = sub_23B56A060();
  __swift_project_value_buffer(v37, (uint64_t)qword_256A33BC8);
  v38 = sub_23B56A048();
  v39 = sub_23B56A834();
  if (os_log_type_enabled(v38, v39))
  {
    v40 = (_DWORD *)swift_slowAlloc();
    v64 = a2;
    v41 = v40;
    *v40 = 134218752;
    aBlock[0] = 0x41DFFFFFFFC00000;
    sub_23B56A918();
    v65 = (void *)v23;
    *((_WORD *)v41 + 6) = 2048;
    *(double *)aBlock = v33;
    sub_23B56A918();
    *((_WORD *)v41 + 11) = 2048;
    *(double *)aBlock = a5;
    sub_23B56A918();
    *((_WORD *)v41 + 16) = 2048;
    v23 = (uint64_t)v65;
    *(double *)aBlock = a6;
    a3 = v80;
    sub_23B56A918();
    _os_log_impl(&dword_23B4F9000, v38, v39, "DispatchTimer: Exceeded maximum value of %f: deadline: %f, repeating: %f, leeway: %f", (uint8_t *)v41, 0x2Au);
    v42 = v41;
    a2 = v64;
    MEMORY[0x23B867948](v42, -1, -1);
  }

LABEL_17:
  *(_QWORD *)(v7 + 48) = a2;
  *(_QWORD *)(v7 + 56) = a3;
  v43 = MEMORY[0x24BEE4AF8];
  if (a1)
  {
    swift_retain();
    v44 = a1;
  }
  else
  {
    v64 = sub_23B54369C(0, &qword_256A2CB00);
    swift_retain();
    v65 = 0;
    sub_23B56A090();
    aBlock[0] = v43;
    sub_23B4FCC20(&qword_256A2CB08, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688], MEMORY[0x24BEE5698]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256A2CB10);
    sub_23B550714(&qword_256A2CB18, &qword_256A2CB10);
    sub_23B56A9FC();
    (*(void (**)(char *, _QWORD, _QWORD *))(v68 + 104))(v70, *MEMORY[0x24BEE5750], v69);
    a1 = v65;
    v45 = sub_23B56A87C();
    v43 = MEMORY[0x24BEE4AF8];
    v44 = (void *)v45;
  }
  *(_QWORD *)(v7 + 64) = v44;
  sub_23B54369C(0, &qword_2542F98E0);
  aBlock[0] = v43;
  sub_23B4FCC20(&qword_2542F9948, (uint64_t (*)(uint64_t))MEMORY[0x24BEE57C0], MEMORY[0x24BEE57D0]);
  v70 = a1;
  v69 = v44;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9930);
  sub_23B550714((unint64_t *)&unk_2542F9938, &qword_2542F9930);
  sub_23B56A9FC();
  v46 = sub_23B56A894();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  *(_QWORD *)(v7 + 40) = v46;
  v47 = v75;
  sub_23B56A0A8();
  *v19 = *(int *)(v7 + 24);
  v48 = *MEMORY[0x24BEE5410];
  v49 = v74;
  v50 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v74 + 104);
  v51 = v82;
  v50(v19, v48, v82);
  MEMORY[0x23B8663AC](v47, v19);
  v52 = *(void (**)(_QWORD *, uint64_t))(v49 + 8);
  v52(v19, v51);
  v76 = *(_QWORD *)(v76 + 8);
  ((void (*)(char *, uint64_t))v76)(v47, v83);
  v53 = v7;
  v54 = *(unsigned int *)(v7 + 28);
  if ((int)v54 < 1)
  {
    v56 = *MEMORY[0x24BEE5418];
    v55 = v73;
  }
  else
  {
    v55 = v73;
    *v73 = v54;
    v56 = v48;
  }
  v57 = v82;
  v50(v55, v56, v82);
  ObjectType = swift_getObjectType();
  *v19 = *(int *)(v53 + 32);
  v50(v19, v48, v57);
  MEMORY[0x23B866BBC](v84, v55, v19, ObjectType);
  v52(v19, v57);
  swift_getObjectType();
  v59 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = sub_23B5504D0;
  aBlock[5] = v59;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23B5504D8;
  aBlock[3] = &block_descriptor;
  v60 = _Block_copy(aBlock);
  swift_retain();
  v61 = v81;
  sub_23B56A090();
  v62 = v77;
  sub_23B550504();
  sub_23B56A8AC();
  _Block_release(v60);

  swift_release();
  (*(void (**)(char *, uint64_t))(v78 + 8))(v62, v79);
  (*(void (**)(char *, uint64_t))(v71 + 8))(v61, v72);
  v52(v55, v57);
  ((void (*)(char *, uint64_t))v76)(v84, v83);
  swift_release();
  swift_release();
  return v53;
}

uint64_t sub_23B55043C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_23B550460()
{
  uint64_t result;
  void (*v1)(uint64_t);
  uint64_t v2;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = *(void (**)(uint64_t))(result + 48);
    swift_retain();
    v2 = swift_release();
    v1(v2);
    return swift_release();
  }
  return result;
}

uint64_t sub_23B5504D0()
{
  return sub_23B550460();
}

uint64_t sub_23B5504D8(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t sub_23B550504()
{
  sub_23B56A084();
  sub_23B4FCC20(&qword_2542F9910, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9918);
  sub_23B550714((unint64_t *)&unk_2542F9920, &qword_2542F9918);
  return sub_23B56A9FC();
}

Swift::Void __swiftcall DispatchTimer.resume()()
{
  swift_getObjectType();
  sub_23B56A8C4();
}

Swift::Void __swiftcall DispatchTimer.cancel()()
{
  swift_getObjectType();
  sub_23B56A8B8();
}

uint64_t DispatchTimer.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  return v0;
}

uint64_t DispatchTimer.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_23B550660()
{
  uint64_t v0;

  v0 = sub_23B56A060();
  __swift_allocate_value_buffer(v0, qword_256A33BC8);
  __swift_project_value_buffer(v0, (uint64_t)qword_256A33BC8);
  return sub_23B56A054();
}

uint64_t type metadata accessor for DispatchTimer()
{
  return objc_opt_self();
}

uint64_t method lookup function for DispatchTimer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DispatchTimer.__allocating_init(deadline:repeating:leeway:queue:block:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t sub_23B550714(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x23B867894](MEMORY[0x24BEE12C8], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static DateParsingStrategy.Error.== infix(_:_:)()
{
  return 1;
}

uint64_t DateParsingStrategy.Error.hash(into:)()
{
  return sub_23B56AE70();
}

uint64_t DateParsingStrategy.Error.hashValue.getter()
{
  sub_23B56AE64();
  sub_23B56AE70();
  return sub_23B56AE88();
}

id sub_23B5507C4(uint64_t a1)
{
  return sub_23B5507E4(a1, 3955, &qword_256A2CB80);
}

id sub_23B5507D4(uint64_t a1)
{
  return sub_23B5507E4(a1, 1907, &qword_256A2CB88);
}

id sub_23B5507E4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  id v5;
  id result;

  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD15D0]), sel_init);
  result = objc_msgSend(v5, sel_setFormatOptions_, a2);
  *a3 = v5;
  return result;
}

void sub_23B55083C()
{
  id v0;
  void *v1;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1500]), sel_init);
  v1 = (void *)sub_23B56A264();
  objc_msgSend(v0, sel_setDateFormat_, v1);

  qword_256A2CB90 = (uint64_t)v0;
}

uint64_t DateParsingStrategy.parse(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void *v20;
  void *v21;
  id v22;
  void (*v23)(char *, char *, uint64_t);
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  void *v26;
  void *v27;
  id v28;
  void (*v29)(char *, char *, uint64_t);
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v37 = a3;
  v5 = sub_23B569F40();
  v6 = *(_QWORD **)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AC0);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v36 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v36 - v13;
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v36 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v36 - v18;
  if (qword_256A2BA20 != -1)
    swift_once();
  v20 = (void *)qword_256A2CB88;
  v38 = a1;
  v39 = a2;
  v21 = (void *)sub_23B56A264();
  v22 = objc_msgSend(v20, sel_dateFromString_, v21);

  if (v22)
  {
    sub_23B569F1C();

    v23 = (void (*)(char *, char *, uint64_t))v6[4];
    v23(v17, v8, v5);
    v24 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v6[7];
    v24(v17, 0, 1, v5);
    v25 = (unsigned int (*)(char *, uint64_t, uint64_t))v6[6];
    if (v25(v17, 1, v5) != 1)
    {
      v23(v19, v17, v5);
      v24(v19, 0, 1, v5);
      goto LABEL_20;
    }
  }
  else
  {
    v24 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v6[7];
    v24(v17, 1, 1, v5);
  }
  if (qword_256A2BA18 != -1)
    swift_once();
  v26 = (void *)qword_256A2CB80;
  v27 = (void *)sub_23B56A264();
  v28 = objc_msgSend(v26, sel_dateFromString_, v27);

  if (!v28)
  {
    v24(v14, 1, 1, v5);
    goto LABEL_13;
  }
  sub_23B569F1C();

  v29 = (void (*)(char *, char *, uint64_t))v6[4];
  v29(v14, v8, v5);
  v24(v14, 0, 1, v5);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v6[6])(v14, 1, v5) == 1)
  {
LABEL_13:
    if (qword_256A2BA28 != -1)
      swift_once();
    v30 = (void *)qword_256A2CB90;
    v31 = (void *)sub_23B56A264();
    v32 = objc_msgSend(v30, sel_dateFromString_, v31);

    if (v32)
    {
      v33 = (uint64_t)v36;
      sub_23B569F1C();

      v34 = 0;
    }
    else
    {
      v34 = 1;
      v33 = (uint64_t)v36;
    }
    v24((char *)v33, v34, 1, v5);
    sub_23B550CEC(v33, (uint64_t)v19);
    sub_23B5333CC((uint64_t)v14);
    goto LABEL_19;
  }
  v29(v19, v14, v5);
  v24(v19, 0, 1, v5);
LABEL_19:
  sub_23B5333CC((uint64_t)v17);
  v25 = (unsigned int (*)(char *, uint64_t, uint64_t))v6[6];
LABEL_20:
  if (v25(v19, 1, v5) != 1)
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v6[4])(v37, v19, v5);
  sub_23B5333CC((uint64_t)v19);
  sub_23B550D34();
  swift_allocError();
  return swift_willThrow();
}

uint64_t sub_23B550CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_23B550D34()
{
  unint64_t result;

  result = qword_256A2CB98;
  if (!qword_256A2CB98)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for DateParsingStrategy.Error, &type metadata for DateParsingStrategy.Error);
    atomic_store(result, (unint64_t *)&qword_256A2CB98);
  }
  return result;
}

uint64_t static DateParsingStrategy.== infix(_:_:)()
{
  return 1;
}

uint64_t sub_23B550D84()
{
  sub_23B550E98();
  return sub_23B56AF78();
}

uint64_t sub_23B550DAC()
{
  sub_23B550E98();
  return sub_23B56AF84();
}

uint64_t DateParsingStrategy.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2CBA0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23B550E98();
  sub_23B56AEC4();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_23B550E98()
{
  unint64_t result;

  result = qword_256A2CBA8;
  if (!qword_256A2CBA8)
  {
    result = MEMORY[0x23B867894](&unk_23B571F7C, &type metadata for DateParsingStrategy.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2CBA8);
  }
  return result;
}

uint64_t DateParsingStrategy.hashValue.getter()
{
  sub_23B56AE64();
  return sub_23B56AE88();
}

uint64_t DateParsingStrategy.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t sub_23B550F34@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return DateParsingStrategy.parse(_:)(*a1, a1[1], a2);
}

uint64_t sub_23B550F50(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2CBA0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23B550E98();
  sub_23B56AEC4();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_23B551018()
{
  unint64_t result;

  result = qword_256A2CBB0;
  if (!qword_256A2CBB0)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for DateParsingStrategy.Error, &type metadata for DateParsingStrategy.Error);
    atomic_store(result, (unint64_t *)&qword_256A2CBB0);
  }
  return result;
}

unint64_t sub_23B551060()
{
  unint64_t result;

  result = qword_256A2CBB8;
  if (!qword_256A2CBB8)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for DateParsingStrategy, &type metadata for DateParsingStrategy);
    atomic_store(result, (unint64_t *)&qword_256A2CBB8);
  }
  return result;
}

unint64_t sub_23B5510A8()
{
  unint64_t result;

  result = qword_256A2CBC0;
  if (!qword_256A2CBC0)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for DateParsingStrategy, &type metadata for DateParsingStrategy);
    atomic_store(result, (unint64_t *)&qword_256A2CBC0);
  }
  return result;
}

unint64_t sub_23B5510F0()
{
  unint64_t result;

  result = qword_256A2CBC8;
  if (!qword_256A2CBC8)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for DateParsingStrategy, &type metadata for DateParsingStrategy);
    atomic_store(result, (unint64_t *)&qword_256A2CBC8);
  }
  return result;
}

unint64_t sub_23B551138()
{
  unint64_t result;

  result = qword_256A2CBD0;
  if (!qword_256A2CBD0)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for DateParsingStrategy, &type metadata for DateParsingStrategy);
    atomic_store(result, (unint64_t *)&qword_256A2CBD0);
  }
  return result;
}

ValueMetadata *type metadata accessor for DateParsingStrategy()
{
  return &type metadata for DateParsingStrategy;
}

uint64_t storeEnumTagSinglePayload for DateParsingStrategy.Error(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23B5511CC + 4 * byte_23B571D40[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23B5511EC + 4 * byte_23B571D45[v4]))();
}

_BYTE *sub_23B5511CC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23B5511EC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23B5511F4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23B5511FC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23B551204(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23B55120C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DateParsingStrategy.Error()
{
  return &type metadata for DateParsingStrategy.Error;
}

ValueMetadata *type metadata accessor for DateParsingStrategy.CodingKeys()
{
  return &type metadata for DateParsingStrategy.CodingKeys;
}

unint64_t sub_23B55123C()
{
  unint64_t result;

  result = qword_256A2CBD8;
  if (!qword_256A2CBD8)
  {
    result = MEMORY[0x23B867894](&unk_23B571F2C, &type metadata for DateParsingStrategy.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2CBD8);
  }
  return result;
}

unint64_t sub_23B551284()
{
  unint64_t result;

  result = qword_256A2CBE0;
  if (!qword_256A2CBE0)
  {
    result = MEMORY[0x23B867894](&unk_23B571F54, &type metadata for DateParsingStrategy.CodingKeys);
    atomic_store(result, &qword_256A2CBE0);
  }
  return result;
}

uint64_t static FM.XPCSession.== infix(_:_:)()
{
  return _s10FindMyBase10IdentifierV2eeoiySbACyxG_AEtFZ_0();
}

uint64_t FM.XPCSession.identifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + qword_2542FC420;
  v4 = sub_23B569FA0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t FM.XPCSession.service.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23B500B74((_QWORD *)(v1 + qword_2542FC428), a1);
}

void sub_23B551334(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + qword_2542FA9F0);
  *(_QWORD *)(v1 + qword_2542FA9F0) = a1;

}

_QWORD *FM.XPCSession.deinit()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v1 = v0;
  v2 = *v0;
  if (qword_2542F9D80 != -1)
    swift_once();
  v3 = sub_23B56A060();
  __swift_project_value_buffer(v3, (uint64_t)qword_2542FC3C0);
  swift_retain_n();
  v4 = sub_23B56A048();
  v5 = sub_23B56A828();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v18 = v7;
    *(_DWORD *)v6 = 136446210;
    type metadata accessor for FM.XPCSession(0, *(_QWORD *)(v2 + 80), v8, v9);
    swift_retain();
    v10 = sub_23B56A300();
    sub_23B5034E4(v10, v11, &v18);
    sub_23B56A918();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23B4F9000, v4, v5, "Deallocating %{public}s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v7, -1, -1);
    MEMORY[0x23B867948](v6, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v12 = qword_2542FA9F0;
  v13 = *(void **)((char *)v1 + qword_2542FA9F0);
  if (v13)
  {
    objc_msgSend(v13, sel_invalidate);
    v14 = *(void **)((char *)v1 + v12);
  }
  else
  {
    v14 = 0;
  }
  *(_QWORD *)((char *)v1 + v12) = 0;

  v15 = (char *)v1 + qword_2542FC420;
  v16 = sub_23B569FA0();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  sub_23B4FEC00((uint64_t)v1 + qword_2542FC428);

  swift_defaultActor_destroy();
  return v1;
}

uint64_t FM.XPCSession.__deallocating_deinit()
{
  FM.XPCSession.deinit();
  return swift_defaultActor_deallocate();
}

uint64_t sub_23B5515A0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;

  v2[4] = a1;
  v2[5] = v1;
  v3 = sub_23B569FA0();
  v2[6] = v3;
  v2[7] = *(_QWORD *)(v3 - 8);
  v2[8] = swift_task_alloc();
  v2[9] = swift_task_alloc();
  v4 = (_QWORD *)swift_task_alloc();
  v2[10] = v4;
  *v4 = v2;
  v4[1] = sub_23B55166C;
  v4[2] = v1;
  return swift_task_switch();
}

uint64_t sub_23B55166C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B5516F8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v14;

  v1 = *(void **)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  v14 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 16) = v1;
  v6 = sub_23B504550(v0 + 16, v0 + 24);
  v8 = v7;
  sub_23B504710(v6, v7);
  sub_23B504944(v6, v8);

  *(_QWORD *)(v0 + 24) = v5;
  v9 = sub_23B504550(v0 + 24, v0 + 32);
  v11 = v10;
  sub_23B504710(v9, v10);
  sub_23B504944(v9, v11);
  LOBYTE(v9) = _s10FindMyBase10IdentifierV2eeoiySbACyxG_AEtFZ_0();
  v12 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v12(v3, v4);
  v12(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v9 & 1);
}

uint64_t sub_23B551828()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = v0;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_23B551888;
  v2[2] = v0;
  return swift_task_switch();
}

uint64_t sub_23B551888(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 32) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B5518E4()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 32);
  objc_msgSend(v1, sel_suspend);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B551924()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_23B4FAC98;
  v2[2] = v0;
  return swift_task_switch();
}

void sub_23B551980(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

uint64_t sub_23B5519D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v4[14] = a3;
  v4[15] = v3;
  v4[12] = a1;
  v4[13] = a2;
  v4[16] = *v3;
  v5 = (_QWORD *)swift_task_alloc();
  v4[17] = v5;
  *v5 = v4;
  v5[1] = sub_23B551A3C;
  v5[2] = v3;
  return swift_task_switch();
}

uint64_t sub_23B551A3C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B551A9C()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  int v8;

  v1 = (void *)v0[18];
  v2 = v0[16];
  v3 = v0[14];
  v4 = v0[12];
  v0[6] = v0[13];
  v0[7] = v3;
  v0[2] = MEMORY[0x24BDAC760];
  v0[3] = 1107296256;
  v0[4] = sub_23B551980;
  v0[5] = &block_descriptor_10;
  v5 = _Block_copy(v0 + 2);
  swift_retain();
  swift_release();
  v6 = objc_msgSend(v1, sel_synchronousRemoteObjectProxyWithErrorHandler_, v5);
  _Block_release(v5);

  sub_23B56A9D8();
  swift_unknownObjectRelease();
  v7 = *(_QWORD *)(v2 + 80);
  v8 = swift_dynamicCast();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v4, v8 ^ 1u, 1, v7);
  return ((uint64_t (*)(void))v0[1])();
}

void sub_23B551BC0()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(*(id *)(v0 + qword_2542FA9F0), sel_invalidate);
  v1 = *(void **)(v0 + qword_2542FA9F0);
  *(_QWORD *)(v0 + qword_2542FA9F0) = 0;

}

uint64_t sub_23B551BFC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_23B551C14()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(v0 + 16);
  objc_msgSend(*(id *)(v1 + qword_2542FA9F0), sel_invalidate);
  v2 = *(void **)(v1 + qword_2542FA9F0);
  *(_QWORD *)(v1 + qword_2542FA9F0) = 0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t FM.XPCSession.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23B551C74()
{
  return FM.XPCSession.unownedExecutor.getter();
}

uint64_t FM.XPCSession.hashValue.getter()
{
  sub_23B56AE64();
  FM.XPCSession.hash(into:)();
  return sub_23B56AE88();
}

uint64_t sub_23B551CC8()
{
  return FM.XPCSession.hashValue.getter();
}

uint64_t sub_23B551CE8()
{
  return FM.XPCSession.hash(into:)();
}

uint64_t sub_23B551D08()
{
  sub_23B56AE64();
  FM.XPCSession.hash(into:)();
  return sub_23B56AE88();
}

uint64_t sub_23B551D44()
{
  return static FM.XPCSession.== infix(_:_:)() & 1;
}

uint64_t static XPCSessionError.== infix(_:_:)()
{
  return 1;
}

uint64_t XPCSessionError.hash(into:)()
{
  return sub_23B56AE70();
}

uint64_t XPCSessionError.hashValue.getter()
{
  sub_23B56AE64();
  sub_23B56AE70();
  return sub_23B56AE88();
}

void NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBCEF0]), sel_init);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    v4 = 0;
    do
    {
      ++v4;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542F97F8);
      objc_msgSend(v2, sel_addObject_, sub_23B56ADE0());
      swift_unknownObjectRelease();
    }
    while (v3 != v4);
    swift_bridgeObjectRelease();
  }
  v5 = v2;
  sub_23B56A78C();

  sub_23B56AC24();
  __break(1u);
}

uint64_t NSXPCConnection.shortDescription.getter()
{
  swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9810);
  sub_23B56A318();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  sub_23B511B74();
  sub_23B56A438();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  return 60;
}

unint64_t sub_23B552068()
{
  unint64_t result;

  result = qword_256A2CC28;
  if (!qword_256A2CC28)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for XPCClientError, &type metadata for XPCClientError);
    atomic_store(result, (unint64_t *)&qword_256A2CC28);
  }
  return result;
}

void sub_23B5520AC()
{
  JUMPOUT(0x23B867894);
}

unint64_t sub_23B5520C0()
{
  unint64_t result;

  result = qword_256A2CC38;
  if (!qword_256A2CC38)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for XPCSessionError, &type metadata for XPCSessionError);
    atomic_store(result, (unint64_t *)&qword_256A2CC38);
  }
  return result;
}

ValueMetadata *type metadata accessor for FM()
{
  return &type metadata for FM;
}

uint64_t method lookup function for FM.XPCSession()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FM.XPCSession.__allocating_init(service:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of FM.XPCSession.__allocating_init(connection:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of FM.XPCSession.represents(underlyingConnection:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 176) + *(_QWORD *)(*(_QWORD *)v1 + 176));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23B4FC004;
  return v6(a1);
}

uint64_t dispatch thunk of FM.XPCSession.suspend()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 192) + *(_QWORD *)(*(_QWORD *)v0 + 192));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_23B4FACE0;
  return v4();
}

uint64_t dispatch thunk of FM.XPCSession.invalidate()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 200) + *(_QWORD *)(*(_QWORD *)v0 + 200));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_23B4FACE0;
  return v4();
}

uint64_t dispatch thunk of FM.XPCSession.proxy(errorHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 208)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 208));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_23B4FAC98;
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of FM.XPCSession.syncProxy(errorHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 216)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 216));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_23B4FACE0;
  return v10(a1, a2, a3);
}

uint64_t storeEnumTagSinglePayload for XPCSessionError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23B552384 + 4 * byte_23B571FD0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23B5523A4 + 4 * byte_23B571FD5[v4]))();
}

_BYTE *sub_23B552384(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23B5523A4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23B5523AC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23B5523B4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23B5523BC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23B5523C4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for XPCSessionError()
{
  return &type metadata for XPCSessionError;
}

uint64_t sub_23B5523E8(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x616E65746E69616DLL;
  else
    v3 = 0x7974696C697475;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xEB0000000065636ELL;
  if ((a2 & 1) != 0)
    v5 = 0x616E65746E69616DLL;
  else
    v5 = 0x7974696C697475;
  if ((a2 & 1) != 0)
    v6 = 0xEB0000000065636ELL;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_23B56AD98();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_23B552494()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_23B56A060();
  __swift_allocate_value_buffer(v0, qword_2542FC3A8);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_2542FC3A8);
  if (qword_2542F9A00 != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)qword_2542FC378);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t XPCActivity.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v14;
  _QWORD *v15;

  v7[3] = a5;
  v7[4] = a7;
  v7[2] = a3;
  v14 = swift_allocObject();
  v7[5] = v14;
  swift_defaultActor_initialize();
  swift_unknownObjectWeakInit();
  *(_BYTE *)(v14 + 168) = 0;
  *(_QWORD *)(v14 + 176) = 0;
  *(_QWORD *)(v14 + 184) = 0;
  *(_QWORD *)(v14 + 112) = a1;
  *(_QWORD *)(v14 + 120) = a2;
  *(_QWORD *)(v14 + 128) = a4;
  *(_QWORD *)(v14 + 136) = a5;
  *(_QWORD *)(v14 + 144) = a6;
  *(_QWORD *)(v14 + 152) = a7;
  swift_retain();
  swift_retain();
  v15 = (_QWORD *)swift_task_alloc();
  v7[6] = v15;
  *v15 = v7;
  v15[1] = sub_23B552634;
  v15[8] = v14;
  return swift_task_switch();
}

uint64_t sub_23B552634()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  v5 = *v0;
  swift_task_dealloc();
  v3 = sub_23B56A09C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(_QWORD))(v5 + 8))(*(_QWORD *)(v1 + 40));
}

uint64_t XPCActivity.init(name:qos:criteriaBlock:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v15;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_256A2CC98
                                                                                              + dword_256A2CC98);
  v7[2] = a5;
  v7[3] = a7;
  v15 = (_QWORD *)swift_task_alloc();
  v7[4] = v15;
  *v15 = v7;
  v15[1] = sub_23B552768;
  return v17(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_23B552768(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_23B5527D4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = v0;
  return swift_task_switch();
}

uint64_t sub_23B5527EC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;
  void *v7;
  uint64_t v8;

  if ((_s10FindMyBase10SystemInfoO9underTestSbvgZ_0(a1) & 1) == 0)
  {
    v2 = v1[8];
    v3 = swift_allocObject();
    swift_weakInit();
    v4 = *(_QWORD *)(v2 + 176);
    *(_QWORD *)(v2 + 176) = sub_23B5573C8;
    *(_QWORD *)(v2 + 184) = v3;
    swift_retain();
    sub_23B50033C(v4);
    v5 = (void **)MEMORY[0x24BDAC5A0];
    v1[2] = MEMORY[0x24BDAC760];
    v6 = *v5;
    v1[6] = sub_23B5573C8;
    v1[7] = v3;
    v1[3] = 1107296256;
    v1[4] = sub_23B554C38;
    v1[5] = &block_descriptor_1;
    v7 = _Block_copy(v1 + 2);
    swift_retain();
    swift_release();
    v8 = sub_23B56A330();
    xpc_activity_register((const char *)(v8 + 32), v6, v7);
    swift_release();
    _Block_release(v7);
    swift_release();
  }
  return ((uint64_t (*)(void))v1[1])();
}

uint64_t sub_23B552914()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542F9990);
  sub_23B56A300();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  sub_23B511B74();
  sub_23B56A438();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  swift_bridgeObjectRetain();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  return 60;
}

void sub_23B552A34(_BYTE *a1@<X8>)
{
  uint64_t v1;
  _xpc_activity_s *v3;
  xpc_activity_state_t state;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v3 = (_xpc_activity_s *)MEMORY[0x23B867A14](v1 + 160);
  if (v3)
  {
    state = xpc_activity_get_state(v3);
    sub_23B552C38(state, a1);
    swift_unknownObjectRelease();
  }
  else
  {
    if (qword_2542F9970 != -1)
      swift_once();
    v5 = sub_23B56A060();
    __swift_project_value_buffer(v5, (uint64_t)qword_2542FC3A8);
    swift_retain_n();
    v6 = sub_23B56A048();
    v7 = sub_23B56A834();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v13 = v9;
      *(_DWORD *)v8 = 136446210;
      swift_retain();
      v10 = sub_23B552914();
      v12 = v11;
      swift_release();
      sub_23B5034E4(v10, v12, &v13);
      sub_23B56A918();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_23B4F9000, v6, v7, "%{public}s: state called on invalidated XPCActivity", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B867948](v9, -1, -1);
      MEMORY[0x23B867948](v8, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    *a1 = 0;
  }
}

unint64_t sub_23B552C38@<X0>(unint64_t result@<X0>, _BYTE *a2@<X8>)
{
  if (result >= 6)
  {
    sub_23B56AA68();
    swift_bridgeObjectRelease();
    sub_23B56AD44();
    sub_23B56A3A8();
    swift_bridgeObjectRelease();
    result = sub_23B56AC24();
    __break(1u);
  }
  else
  {
    *a2 = result;
  }
  return result;
}

BOOL sub_23B552D08()
{
  uint64_t v0;
  _xpc_activity_s *v1;
  _BOOL8 should_defer;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v1 = (_xpc_activity_s *)MEMORY[0x23B867A14](v0 + 160);
  if (v1)
  {
    should_defer = xpc_activity_should_defer(v1);
    swift_unknownObjectRelease();
  }
  else
  {
    if (qword_2542F9970 != -1)
      swift_once();
    v3 = sub_23B56A060();
    __swift_project_value_buffer(v3, (uint64_t)qword_2542FC3A8);
    swift_retain_n();
    v4 = sub_23B56A048();
    v5 = sub_23B56A834();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      v7 = swift_slowAlloc();
      v12 = v7;
      *(_DWORD *)v6 = 136446210;
      swift_retain();
      v8 = sub_23B552914();
      v10 = v9;
      swift_release();
      sub_23B5034E4(v8, v10, &v12);
      sub_23B56A918();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_23B4F9000, v4, v5, "%{public}s: shouldDefer called on invalidated XPCActivity", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B867948](v7, -1, -1);
      MEMORY[0x23B867948](v6, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    return 0;
  }
  return should_defer;
}

BOOL sub_23B552EF0()
{
  return sub_23B552F20(3, "%{public}s: defer called on invalidated XPCActivity");
}

BOOL sub_23B552F00()
{
  return sub_23B552F20(4, "%{public}s: continue called on invalidated XPCActivity");
}

BOOL sub_23B552F10()
{
  return sub_23B552F20(5, "%{public}s: done called on invalidated XPCActivity");
}

BOOL sub_23B552F20(xpc_activity_state_t a1, const char *a2)
{
  uint64_t v2;
  _xpc_activity_s *v5;
  _BOOL8 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;

  v5 = (_xpc_activity_s *)MEMORY[0x23B867A14](v2 + 160);
  if (v5)
  {
    v6 = xpc_activity_set_state(v5, a1);
    swift_unknownObjectRelease();
  }
  else
  {
    if (qword_2542F9970 != -1)
      swift_once();
    v7 = sub_23B56A060();
    __swift_project_value_buffer(v7, (uint64_t)qword_2542FC3A8);
    swift_retain_n();
    v8 = sub_23B56A048();
    v9 = sub_23B56A834();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = swift_slowAlloc();
      v16 = v11;
      *(_DWORD *)v10 = 136446210;
      swift_retain();
      v12 = sub_23B552914();
      v14 = v13;
      swift_release();
      sub_23B5034E4(v12, v14, &v16);
      sub_23B56A918();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_23B4F9000, v8, v9, a2, v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B867948](v11, -1, -1);
      MEMORY[0x23B867948](v10, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    return 0;
  }
  return v6;
}

uint64_t sub_23B553110(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = v1;
  return swift_task_switch();
}

uint64_t sub_23B553128()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (qword_2542F9970 != -1)
    swift_once();
  v1 = sub_23B56A060();
  __swift_project_value_buffer(v1, (uint64_t)qword_2542FC3A8);
  swift_retain_n();
  v2 = sub_23B56A048();
  v3 = sub_23B56A84C();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v33 = v5;
    *(_DWORD *)v4 = 136446210;
    swift_retain();
    v6 = sub_23B552914();
    v8 = v7;
    swift_release();
    *(_QWORD *)(v0 + 48) = sub_23B5034E4(v6, v8, &v33);
    sub_23B56A918();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23B4F9000, v2, v3, "%{public}s: updateCriteria called on XPCActivity", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v5, -1, -1);
    MEMORY[0x23B867948](v4, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v9 = MEMORY[0x23B867A14](*(_QWORD *)(v0 + 64) + 160);
  *(_QWORD *)(v0 + 72) = v9;
  if (v9)
  {
    v10 = v9;
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 80) = v11;
    *v11 = v0;
    v11[1] = sub_23B5536E8;
    v13 = *(_QWORD *)(v0 + 56);
    v12 = *(_QWORD *)(v0 + 64);
    v11[31] = v10;
    v11[32] = v12;
    v11[30] = v13;
    return swift_task_switch();
  }
  v14 = *(_QWORD *)(v0 + 64);
  v16 = *(_QWORD *)(v14 + 112);
  v15 = *(_QWORD *)(v14 + 120);
  v17 = *(unsigned __int8 *)(v14 + 168);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v18 = sub_23B56A048();
  v19 = sub_23B56A84C();
  v20 = os_log_type_enabled(v18, v19);
  if (v17 == 1)
  {
    if (v20)
    {
      v21 = swift_slowAlloc();
      v31 = swift_slowAlloc();
      v33 = v31;
      *(_DWORD *)v21 = 136446466;
      swift_retain();
      v22 = sub_23B552914();
      v24 = v23;
      swift_release();
      *(_QWORD *)(v0 + 32) = sub_23B5034E4(v22, v24, &v33);
      sub_23B56A918();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v21 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 40) = sub_23B5034E4(v16, v15, &v33);
      sub_23B56A918();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_23B4F9000, v18, v19, "%{public}s: No current activity -- re-registering %{public}s", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x23B867948](v31, -1, -1);
      MEMORY[0x23B867948](v21, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_release_n();
    }
    v29 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 88) = v29;
    *v29 = v0;
    v29[1] = sub_23B553770;
    v29[8] = *(_QWORD *)(v0 + 64);
    return swift_task_switch();
  }
  if (v20)
  {
    v25 = swift_slowAlloc();
    v32 = swift_slowAlloc();
    v33 = v32;
    *(_DWORD *)v25 = 136446466;
    swift_retain();
    v26 = sub_23B552914();
    v28 = v27;
    swift_release();
    *(_QWORD *)(v0 + 16) = sub_23B5034E4(v26, v28, &v33);
    sub_23B56A918();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 12) = 2082;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 24) = sub_23B5034E4(v16, v15, &v33);
    sub_23B56A918();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_23B4F9000, v18, v19, "%{public}s: No current activity -- hasn't checked in yet %{public}s", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v32, -1, -1);
    MEMORY[0x23B867948](v25, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  **(_BYTE **)(v0 + 56) = 6;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B5536E8()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B553740()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B553770()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B5537C8()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 56) = 6;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B5537DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[31] = a2;
  v3[32] = v2;
  v3[30] = a1;
  return swift_task_switch();
}

uint64_t sub_23B5537F8()
{
  uint64_t v0;
  xpc_object_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v12)();
  int *v13;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16[2];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = xpc_activity_copy_criteria(*(xpc_activity_t *)(v0 + 248));
  *(_QWORD *)(v0 + 264) = v1;
  if (v1)
  {
    v2 = (void *)swift_unknownObjectRetain();
    sub_23B52CC60(v2, v16);
    v3 = v16[0];
    v4 = v16[1];
    *(_QWORD *)(v0 + 272) = v16[0];
    *(_QWORD *)(v0 + 280) = v4;
    v5 = v17;
    v6 = v18;
    *(_QWORD *)(v0 + 288) = v17;
    *(_QWORD *)(v0 + 296) = v6;
    v7 = v19;
    *(_QWORD *)(v0 + 304) = v19;
    if (v3 != 2)
    {
      v8 = v0 + 136;
      v13 = *(int **)(*(_QWORD *)(v0 + 256) + 128);
      *(_QWORD *)(v0 + 96) = v3;
      v10 = v0 + 96;
      *(_QWORD *)(v0 + 104) = v4;
      *(_QWORD *)(v0 + 112) = v5;
      *(_QWORD *)(v0 + 120) = v6;
      *(_QWORD *)(v0 + 128) = v7;
      v15 = (uint64_t (*)(uint64_t, uint64_t))((char *)v13 + *v13);
      v11 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 312) = v11;
      v12 = sub_23B55390C;
      goto LABEL_6;
    }
    swift_unknownObjectRelease();
  }
  v8 = v0 + 16;
  v9 = *(int **)(*(_QWORD *)(v0 + 256) + 128);
  *(_QWORD *)(v0 + 56) = 2;
  v10 = v0 + 56;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  v15 = (uint64_t (*)(uint64_t, uint64_t))((char *)v9 + *v9);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 320) = v11;
  v12 = sub_23B554084;
LABEL_6:
  *v11 = v0;
  v11[1] = v12;
  return v15(v8, v10);
}

uint64_t sub_23B55390C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B553964()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  char v9;
  unsigned int v10;
  char v11;
  int v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _xpc_activity_s *v46;
  xpc_object_t v47;
  _BYTE *v48;
  xpc_activity_state_t state;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  char v54;
  __int128 v55;
  char v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  char typea;
  char type;
  uint64_t v63[5];
  __int16 v64;
  __int128 v65;
  __int128 v66;

  v1 = *(_QWORD *)(v0 + 136);
  if (v1 != 2)
  {
    v3 = *(_OWORD *)(v0 + 296);
    v65 = *(_OWORD *)(v0 + 280);
    v66 = v3;
    v5 = *(_QWORD *)(v0 + 144);
    v4 = *(_QWORD *)(v0 + 152);
    v6 = *(_QWORD *)(v0 + 160);
    v7 = *(_QWORD *)(v0 + 168);
    v8 = *(_DWORD *)(v0 + 272);
    v9 = v1 & 1;
    LOWORD(v63[0]) = v1 & 0x101;
    v10 = (v1 >> 8) & 1;
    v63[1] = v5;
    v63[2] = v4;
    v63[3] = v6;
    v63[4] = v7;
    v11 = v8 & 1;
    v64 = v8 & 0x101;
    v12 = (v8 >> 8) & 1;
    if (_s10FindMyBase11XPCActivityC8CriteriaV2eeoiySbAE_AEtFZ_0((uint64_t)v63, (uint64_t)&v64))
    {
      if (qword_2542F9970 != -1)
        swift_once();
      v13 = sub_23B56A060();
      __swift_project_value_buffer(v13, (uint64_t)qword_2542FC3A8);
      swift_retain_n();
      v14 = sub_23B56A048();
      v15 = sub_23B56A84C();
      if (os_log_type_enabled(v14, v15))
      {
        v57 = *(_OWORD *)(v0 + 296);
        v55 = *(_OWORD *)(v0 + 280);
        v16 = swift_slowAlloc();
        v59 = swift_slowAlloc();
        v63[0] = v59;
        *(_DWORD *)v16 = 136446466;
        swift_retain();
        typea = v12;
        v17 = sub_23B552914();
        v19 = v18;
        swift_release();
        *(_QWORD *)(v0 + 224) = sub_23B5034E4(v17, v19, v63);
        sub_23B56A918();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v16 + 12) = 2082;
        LOBYTE(v64) = v11;
        HIBYTE(v64) = typea;
        v65 = v55;
        v66 = v57;
        v20 = XPCActivity.Criteria.description.getter();
        *(_QWORD *)(v0 + 232) = sub_23B5034E4(v20, v21, v63);
        sub_23B56A918();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_23B4F9000, v14, v15, "%{public}s: Keeping existing criteria: %{public}s", (uint8_t *)v16, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x23B867948](v59, -1, -1);
        MEMORY[0x23B867948](v16, -1, -1);
        swift_unknownObjectRelease();

LABEL_19:
        v48 = *(_BYTE **)(v0 + 240);
        state = xpc_activity_get_state(*(xpc_activity_t *)(v0 + 248));
        sub_23B552C38(state, v48);
        return (*(uint64_t (**)(void))(v0 + 8))();
      }

      swift_release_n();
    }
    else
    {
      type = v12;
      v54 = v10;
      v56 = v9;
      if (qword_2542F9970 != -1)
        swift_once();
      v22 = sub_23B56A060();
      __swift_project_value_buffer(v22, (uint64_t)qword_2542FC3A8);
      swift_retain_n();
      v23 = sub_23B56A048();
      v24 = sub_23B56A84C();
      *((_QWORD *)&v58 + 1) = v4;
      v60 = v6;
      *(_QWORD *)&v58 = v5;
      if (os_log_type_enabled(v23, v24))
      {
        v52 = *(_OWORD *)(v0 + 296);
        v51 = *(_OWORD *)(v0 + 280);
        v25 = swift_slowAlloc();
        v26 = swift_slowAlloc();
        v63[0] = v26;
        *(_DWORD *)v25 = 136446466;
        swift_retain();
        v27 = sub_23B552914();
        v29 = v28;
        swift_release();
        *(_QWORD *)(v0 + 208) = sub_23B5034E4(v27, v29, v63);
        sub_23B56A918();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v25 + 12) = 2082;
        LOBYTE(v64) = v11;
        HIBYTE(v64) = type;
        v65 = v51;
        v66 = v52;
        v30 = XPCActivity.Criteria.description.getter();
        *(_QWORD *)(v0 + 216) = sub_23B5034E4(v30, v31, v63);
        sub_23B56A918();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_23B4F9000, v23, v24, "%{public}s: Existing criteria: %{public}s", (uint8_t *)v25, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x23B867948](v26, -1, -1);
        MEMORY[0x23B867948](v25, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      swift_retain_n();
      v32 = sub_23B56A048();
      v33 = sub_23B56A84C();
      if (os_log_type_enabled(v32, v33))
      {
        v34 = swift_slowAlloc();
        v53 = swift_slowAlloc();
        v63[0] = v53;
        *(_DWORD *)v34 = 136446466;
        swift_retain();
        v35 = sub_23B552914();
        v37 = v36;
        swift_release();
        *(_QWORD *)(v0 + 192) = sub_23B5034E4(v35, v37, v63);
        sub_23B56A918();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v34 + 12) = 2082;
        v38 = v56;
        LOBYTE(v64) = v56;
        v39 = v54;
        HIBYTE(v64) = v54;
        v41 = *((_QWORD *)&v58 + 1);
        v40 = v58;
        v65 = v58;
        v42 = v60;
        *(_QWORD *)&v66 = v60;
        *((_QWORD *)&v66 + 1) = v7;
        v43 = XPCActivity.Criteria.description.getter();
        *(_QWORD *)(v0 + 200) = sub_23B5034E4(v43, v44, v63);
        sub_23B56A918();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_23B4F9000, v32, v33, "%{public}s: Registering updated criteria: %{public}s", (uint8_t *)v34, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x23B867948](v53, -1, -1);
        MEMORY[0x23B867948](v34, -1, -1);

        v45 = v7;
      }
      else
      {

        swift_release_n();
        v45 = v7;
        v41 = *((_QWORD *)&v58 + 1);
        v42 = v60;
        v40 = v58;
        v38 = v56;
        v39 = v54;
      }
      v46 = *(_xpc_activity_s **)(v0 + 248);
      LOBYTE(v64) = v38;
      HIBYTE(v64) = v39;
      *(_QWORD *)&v65 = v40;
      *((_QWORD *)&v65 + 1) = v41;
      *(_QWORD *)&v66 = v42;
      *((_QWORD *)&v66 + 1) = v45;
      sub_23B52D124();
      xpc_activity_set_criteria(v46, v47);
      swift_unknownObjectRelease();
    }
    swift_unknownObjectRelease();
    goto LABEL_19;
  }
  v2 = *(_BYTE **)(v0 + 240);
  sub_23B554C80();
  swift_unknownObjectRelease();
  *v2 = 6;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B554084()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B5540DC()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _xpc_activity_s *v16;
  xpc_object_t v17;
  _BYTE *v18;
  xpc_activity_state_t state;
  uint64_t v21;
  os_log_type_t type;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1 == 2)
  {
    v2 = *(_BYTE **)(v0 + 240);
    sub_23B554C80();
    *v2 = 6;
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 40);
    v23 = *(_QWORD *)(v0 + 32);
    v24 = *(_QWORD *)(v0 + 24);
    v4 = *(_QWORD *)(v0 + 48);
    v5 = v1 & 1;
    if (qword_2542F9970 != -1)
      swift_once();
    v6 = v1 & 0x100;
    v7 = sub_23B56A060();
    __swift_project_value_buffer(v7, (uint64_t)qword_2542FC3A8);
    swift_retain_n();
    v8 = sub_23B56A048();
    type = sub_23B56A84C();
    if (os_log_type_enabled(v8, type))
    {
      v9 = swift_slowAlloc();
      v21 = swift_slowAlloc();
      v25 = v21;
      *(_DWORD *)v9 = 136446466;
      swift_retain();
      v10 = sub_23B552914();
      v12 = v11;
      swift_release();
      *(_QWORD *)(v0 + 184) = sub_23B5034E4(v10, v12, &v25);
      sub_23B56A918();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2082;
      v26 = v1 & 1;
      v13 = v6 >> 8;
      v27 = (unsigned __int16)(v1 & 0x100) >> 8;
      v28 = v24;
      v29 = v23;
      v30 = v3;
      v31 = v4;
      v14 = XPCActivity.Criteria.description.getter();
      *(_QWORD *)(v0 + 176) = sub_23B5034E4(v14, v15, &v25);
      v5 = v1 & 1;
      sub_23B56A918();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23B4F9000, v8, type, "%{public}s: Registering new criteria: %{public}s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x23B867948](v21, -1, -1);
      MEMORY[0x23B867948](v9, -1, -1);

    }
    else
    {

      swift_release_n();
      v13 = v6 >> 8;
    }
    v16 = *(_xpc_activity_s **)(v0 + 248);
    v26 = v5;
    v27 = v13;
    v28 = v24;
    v29 = v23;
    v30 = v3;
    v31 = v4;
    sub_23B52D124();
    xpc_activity_set_criteria(v16, v17);
    swift_unknownObjectRelease();
    v18 = *(_BYTE **)(v0 + 240);
    state = xpc_activity_get_state(*(xpc_activity_t *)(v0 + 248));
    sub_23B552C38(state, v18);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t XPCActivity.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_23B5564CC(v0 + 160);
  sub_23B50033C(*(_QWORD *)(v0 + 176));
  swift_defaultActor_destroy();
  return v0;
}

uint64_t XPCActivity.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_23B5564CC(v0 + 160);
  sub_23B50033C(*(_QWORD *)(v0 + 176));
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t XPCActivity.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23B55445C()
{
  return sub_23B552914();
}

uint64_t sub_23B55447C(_xpc_activity_s *a1)
{
  uint64_t result;
  xpc_activity_state_t state;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    state = xpc_activity_get_state(a1);
    sub_23B552C38(state, &v7);
    v4 = v7;
    v5 = swift_allocObject();
    swift_weakInit();
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    *(_BYTE *)(v6 + 24) = v4;
    *(_QWORD *)(v6 + 32) = a1;
    swift_retain();
    swift_unknownObjectRetain();
    _s10FindMyBase11TransactionC9asyncTask4name5blockys12StaticStringV_yyYaYbctFZ_0("XPCActivity", 11, 2, (uint64_t)&unk_256A2CE40, v6);
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_23B55457C(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)(v3 + 73) = a2;
  *(_QWORD *)(v3 + 40) = a1;
  *(_QWORD *)(v3 + 48) = a3;
  return swift_task_switch();
}

uint64_t sub_23B554598()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t v3;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 56) = Strong;
  if (!Strong)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v2 = Strong;
  *(_BYTE *)(v0 + 72) = *(_BYTE *)(v0 + 73);
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v3;
  *(_QWORD *)v3 = v0;
  *(_QWORD *)(v3 + 8) = sub_23B55464C;
  *(_QWORD *)(v3 + 48) = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v3 + 56) = v2;
  *(_BYTE *)(v3 + 91) = *(_BYTE *)(v0 + 72);
  return swift_task_switch();
}

uint64_t sub_23B55464C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23B55469C(_BYTE *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 48) = a2;
  *(_QWORD *)(v3 + 56) = v2;
  *(_BYTE *)(v3 + 91) = *a1;
  return swift_task_switch();
}

uint64_t sub_23B5546BC()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int *v12;
  _QWORD *v13;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;

  if (qword_2542F9970 != -1)
    swift_once();
  v1 = sub_23B56A060();
  __swift_project_value_buffer(v1, (uint64_t)qword_2542FC3A8);
  swift_retain_n();
  swift_unknownObjectRetain_n();
  v2 = sub_23B56A048();
  v3 = sub_23B56A84C();
  if (os_log_type_enabled(v2, v3))
  {
    v17 = *(unsigned __int8 *)(v0 + 91);
    v4 = *(_QWORD *)(v0 + 48);
    v5 = swift_slowAlloc();
    v19 = swift_slowAlloc();
    *(_DWORD *)v5 = 136446722;
    swift_retain();
    v6 = sub_23B552914();
    v8 = v7;
    swift_release();
    *(_QWORD *)(v0 + 16) = sub_23B5034E4(v6, v8, &v19);
    sub_23B56A918();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2082;
    *(_QWORD *)(v0 + 32) = v4;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542F99B0);
    v9 = sub_23B56A300();
    *(_QWORD *)(v0 + 24) = sub_23B5034E4(v9, v10, &v19);
    sub_23B56A918();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 22) = 2082;
    __asm { BR              X9 }
  }

  swift_unknownObjectRelease_n();
  swift_release_n();
  v11 = *(_QWORD *)(v0 + 56);
  if (*(_BYTE *)(v0 + 91))
  {
    v12 = *(int **)(v11 + 144);
    *(_BYTE *)(v0 + 90) = *(_BYTE *)(v0 + 91);
    v18 = (int *)((char *)v12 + *v12);
    v13 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 80) = v13;
    *v13 = v0;
    v13[1] = sub_23B554BF0;
    return ((uint64_t (*)(_QWORD, uint64_t))v18)(*(_QWORD *)(v0 + 56), v0 + 90);
  }
  else
  {
    swift_unknownObjectWeakAssign();
    *(_BYTE *)(v11 + 168) = 1;
    v15 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 64) = v15;
    *v15 = v0;
    v15[1] = sub_23B554AE0;
    v16 = *(_QWORD *)(v0 + 56);
    v15[31] = *(_QWORD *)(v0 + 48);
    v15[32] = v16;
    v15[30] = v0 + 89;
    return swift_task_switch();
  }
}

uint64_t sub_23B554AE0()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B554B34()
{
  uint64_t v0;
  int *v1;
  _QWORD *v2;
  int *v4;

  v1 = *(int **)(*(_QWORD *)(v0 + 56) + 144);
  *(_BYTE *)(v0 + 88) = *(_BYTE *)(v0 + 89);
  v4 = (int *)((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v2;
  *v2 = v0;
  v2[1] = sub_23B554BA8;
  return ((uint64_t (*)(_QWORD, uint64_t))v4)(*(_QWORD *)(v0 + 56), v0 + 88);
}

uint64_t sub_23B554BA8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23B554BF0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23B554C38(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

void sub_23B554C80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  NSObject *oslog;
  uint64_t v11;

  v1 = sub_23B56A330();
  xpc_activity_unregister((const char *)(v1 + 32));
  swift_release();
  v2 = *(_QWORD *)(v0 + 176);
  *(_QWORD *)(v0 + 176) = 0;
  *(_QWORD *)(v0 + 184) = 0;
  sub_23B50033C(v2);
  swift_unknownObjectWeakAssign();
  if (qword_2542F9970 != -1)
    swift_once();
  v3 = sub_23B56A060();
  __swift_project_value_buffer(v3, (uint64_t)qword_2542FC3A8);
  swift_retain_n();
  oslog = sub_23B56A048();
  v4 = sub_23B56A84C();
  if (os_log_type_enabled(oslog, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v11 = v6;
    *(_DWORD *)v5 = 136446210;
    swift_retain();
    v7 = sub_23B552914();
    v9 = v8;
    swift_release();
    sub_23B5034E4(v7, v9, &v11);
    sub_23B56A918();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_23B4F9000, oslog, v4, "%{public}s: Unregistered criteria", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v6, -1, -1);
    MEMORY[0x23B867948](v5, -1, -1);

  }
  else
  {
    swift_release_n();

  }
}

uint64_t XPCActivity.State.description.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23B554EB8 + 4 * byte_23B5721A7[*v0]))(0x6E496B636568632ELL, 0xE800000000000000);
}

uint64_t sub_23B554EB8()
{
  return 0x746961772ELL;
}

uint64_t sub_23B554ECC()
{
  return 1853190702;
}

uint64_t sub_23B554EDC()
{
  return 0x72656665642ELL;
}

uint64_t sub_23B554EF0()
{
  return 0x756E69746E6F632ELL;
}

uint64_t sub_23B554F0C()
{
  return 0x656E6F642ELL;
}

uint64_t sub_23B554F20()
{
  return 0x64696C61766E692ELL;
}

BOOL static XPCActivity.State.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t XPCActivity.State.hash(into:)()
{
  return sub_23B56AE70();
}

uint64_t sub_23B554F7C()
{
  sub_23B5566CC();
  return sub_23B56AF78();
}

uint64_t sub_23B554FA4()
{
  sub_23B5566CC();
  return sub_23B56AF84();
}

uint64_t sub_23B554FD4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23B555004 + 4 * byte_23B5721AE[*v0]))(0x6E496B63656863, 0xE700000000000000);
}

uint64_t sub_23B555004()
{
  return 1953063287;
}

uint64_t sub_23B555014()
{
  return 7239026;
}

uint64_t sub_23B555024()
{
  return 0x7265666564;
}

uint64_t sub_23B555038()
{
  return 0x65756E69746E6F63;
}

uint64_t sub_23B555050()
{
  return 1701736292;
}

uint64_t sub_23B555060()
{
  return 0x6164696C61766E69;
}

uint64_t sub_23B555080@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23B55709C(a1, a2);
  *a3 = result;
  return result;
}

void sub_23B5550A4(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_23B5550B0()
{
  sub_23B5564F0();
  return sub_23B56AF78();
}

uint64_t sub_23B5550D8()
{
  sub_23B5564F0();
  return sub_23B56AF84();
}

uint64_t sub_23B555100()
{
  sub_23B5565BC();
  return sub_23B56AF78();
}

uint64_t sub_23B555128()
{
  sub_23B5565BC();
  return sub_23B56AF84();
}

uint64_t sub_23B555150()
{
  sub_23B556600();
  return sub_23B56AF78();
}

uint64_t sub_23B555178()
{
  sub_23B556600();
  return sub_23B56AF84();
}

uint64_t sub_23B5551A0()
{
  sub_23B556578();
  return sub_23B56AF78();
}

uint64_t sub_23B5551C8()
{
  sub_23B556578();
  return sub_23B56AF84();
}

uint64_t sub_23B5551F0()
{
  sub_23B556534();
  return sub_23B56AF78();
}

uint64_t sub_23B555218()
{
  sub_23B556534();
  return sub_23B56AF84();
}

uint64_t sub_23B555240()
{
  sub_23B556644();
  return sub_23B56AF78();
}

uint64_t sub_23B555268()
{
  sub_23B556644();
  return sub_23B56AF84();
}

uint64_t sub_23B555290()
{
  sub_23B556688();
  return sub_23B56AF78();
}

uint64_t sub_23B5552B8()
{
  sub_23B556688();
  return sub_23B56AF84();
}

void XPCActivity.State.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[22];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2CCB0);
  v17[16] = *(_QWORD *)(v3 - 8);
  v17[17] = v3;
  MEMORY[0x24BDAC7A8](v3);
  v17[15] = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2CCB8);
  v17[13] = *(_QWORD *)(v5 - 8);
  v17[14] = v5;
  MEMORY[0x24BDAC7A8](v5);
  v17[12] = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2CCC0);
  v17[10] = *(_QWORD *)(v7 - 8);
  v17[11] = v7;
  MEMORY[0x24BDAC7A8](v7);
  v17[9] = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2CCC8);
  v17[7] = *(_QWORD *)(v9 - 8);
  v17[8] = v9;
  MEMORY[0x24BDAC7A8](v9);
  v17[6] = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2CCD0);
  v17[4] = *(_QWORD *)(v11 - 8);
  v17[5] = v11;
  MEMORY[0x24BDAC7A8](v11);
  v17[3] = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2CCD8);
  v17[1] = *(_QWORD *)(v13 - 8);
  v17[2] = v13;
  MEMORY[0x24BDAC7A8](v13);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2CCE0);
  MEMORY[0x24BDAC7A8](v14);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2CCE8);
  v17[19] = *(_QWORD *)(v15 - 8);
  v17[20] = v15;
  MEMORY[0x24BDAC7A8](v15);
  v16 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23B5564F0();
  sub_23B56AEC4();
  __asm { BR              X9 }
}

uint64_t sub_23B555554()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v4 - 71) = 0;
  sub_23B5566CC();
  v5 = *(_QWORD *)(v4 - 96);
  sub_23B56ACFC();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 104) + 8))(v1, v5);
}

uint64_t XPCActivity.State.hashValue.getter()
{
  sub_23B56AE64();
  sub_23B56AE70();
  return sub_23B56AE88();
}

uint64_t XPCActivity.State.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;

  v50 = a2;
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2CD30);
  v41 = *(_QWORD *)(v43 - 8);
  MEMORY[0x24BDAC7A8](v43);
  v49 = (char *)v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2CD38);
  v38 = *(_QWORD *)(v42 - 8);
  MEMORY[0x24BDAC7A8](v42);
  v45 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2CD40);
  v39 = *(_QWORD *)(v5 - 8);
  v40 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v48 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2CD48);
  v36 = *(_QWORD *)(v7 - 8);
  v37 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v46 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2CD50);
  v34 = *(_QWORD *)(v9 - 8);
  v35 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v47 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2CD58);
  v32 = *(_QWORD *)(v11 - 8);
  v33 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v44 = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2CD60);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2CD68);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a1[3];
  v51 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v21);
  sub_23B5564F0();
  v22 = v52;
  sub_23B56AEAC();
  if (!v22)
  {
    v30[2] = v16;
    v30[0] = v14;
    v30[1] = v13;
    v52 = v18;
    v31 = v17;
    v23 = v20;
    v24 = sub_23B56ACE4();
    if (*(_QWORD *)(v24 + 16) == 1)
      __asm { BR              X9 }
    v25 = sub_23B56AABC();
    swift_allocError();
    v27 = v26;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256A2CD70);
    *v27 = &type metadata for XPCActivity.State;
    v28 = v31;
    sub_23B56ACB4();
    sub_23B56AAB0();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, *MEMORY[0x24BEE26D0], v25);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v23, v28);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
}

void sub_23B555BE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v3 - 70) = 1;
  sub_23B556688();
  v4 = *(_QWORD *)(v3 - 160);
  v5 = *(_QWORD *)(v3 - 264);
  sub_23B56ACA8();
  if (!v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 - 256) + 8))(v4, *(_QWORD *)(v3 - 248));
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v5);
    JUMPOUT(0x23B555E64);
  }
  swift_bridgeObjectRelease();
  JUMPOUT(0x23B555BB0);
}

uint64_t sub_23B555E6C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return XPCActivity.State.init(from:)(a1, a2);
}

void sub_23B555E80(_QWORD *a1)
{
  XPCActivity.State.encode(to:)(a1);
}

uint64_t sub_23B555E94()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23B555EC4 + 4 * byte_23B5721C3[*v0]))(0x6E496B636568632ELL, 0xE800000000000000);
}

uint64_t sub_23B555EC4()
{
  return 0x746961772ELL;
}

uint64_t sub_23B555ED8()
{
  return 1853190702;
}

uint64_t sub_23B555EE8()
{
  return 0x72656665642ELL;
}

uint64_t sub_23B555EFC()
{
  return 0x756E69746E6F632ELL;
}

uint64_t sub_23B555F18()
{
  return 0x656E6F642ELL;
}

uint64_t sub_23B555F2C()
{
  return 0x64696C61766E692ELL;
}

uint64_t sub_23B555F4C()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23B56A3B4();
  qword_2542F99F0 = result;
  *(_QWORD *)algn_2542F99F8 = v1;
  return result;
}

uint64_t XPCActivity.Priority.description.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E65746E69616D2ELL;
  else
    return 0x7974696C6974752ELL;
}

FindMyBase::XPCActivity::Priority_optional __swiftcall XPCActivity.Priority.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  FindMyBase::XPCActivity::Priority_optional result;
  char v5;

  v2 = v1;
  v3 = sub_23B56AC84();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

uint64_t XPCActivity.Priority.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x616E65746E69616DLL;
  else
    return 0x7974696C697475;
}

uint64_t sub_23B556060(char *a1, char *a2)
{
  return sub_23B5523E8(*a1, *a2);
}

uint64_t sub_23B55606C()
{
  sub_23B56AE64();
  sub_23B56A36C();
  swift_bridgeObjectRelease();
  return sub_23B56AE88();
}

uint64_t sub_23B5560F4()
{
  sub_23B56A36C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23B556158()
{
  sub_23B56AE64();
  sub_23B56A36C();
  swift_bridgeObjectRelease();
  return sub_23B56AE88();
}

FindMyBase::XPCActivity::Priority_optional sub_23B5561DC(Swift::String *a1)
{
  return XPCActivity.Priority.init(rawValue:)(*a1);
}

void sub_23B5561E8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x7974696C697475;
  if (*v1)
    v2 = 0x616E65746E69616DLL;
  v3 = 0xE700000000000000;
  if (*v1)
    v3 = 0xEB0000000065636ELL;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_23B556230()
{
  sub_23B557360();
  return sub_23B56A4F8();
}

uint64_t sub_23B55628C()
{
  sub_23B557360();
  return sub_23B56A4D4();
}

uint64_t sub_23B5562D8()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E65746E69616D2ELL;
  else
    return 0x7974696C6974752ELL;
}

uint64_t sub_23B55631C()
{
  uint64_t v0;

  v0 = sub_23B56A060();
  __swift_allocate_value_buffer(v0, qword_2542FC378);
  __swift_project_value_buffer(v0, (uint64_t)qword_2542FC378);
  return sub_23B56A054();
}

uint64_t sub_23B556398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v15;

  v8[2] = a3;
  v8[3] = v7;
  swift_defaultActor_initialize();
  swift_unknownObjectWeakInit();
  *(_BYTE *)(v7 + 168) = 0;
  *(_QWORD *)(v7 + 176) = 0;
  *(_QWORD *)(v7 + 184) = 0;
  *(_QWORD *)(v7 + 112) = a1;
  *(_QWORD *)(v7 + 120) = a2;
  *(_QWORD *)(v7 + 128) = a4;
  *(_QWORD *)(v7 + 136) = a5;
  *(_QWORD *)(v7 + 144) = a6;
  *(_QWORD *)(v7 + 152) = a7;
  swift_retain();
  swift_retain();
  v15 = (_QWORD *)swift_task_alloc();
  v8[4] = v15;
  *v15 = v8;
  v15[1] = sub_23B556464;
  v15[8] = v7;
  return swift_task_switch();
}

uint64_t sub_23B556464()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  v5 = *v0;
  swift_task_dealloc();
  v3 = sub_23B56A09C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return (*(uint64_t (**)(_QWORD))(v5 + 8))(*(_QWORD *)(v1 + 24));
}

uint64_t sub_23B5564CC(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

unint64_t sub_23B5564F0()
{
  unint64_t result;

  result = qword_256A2CCF0;
  if (!qword_256A2CCF0)
  {
    result = MEMORY[0x23B867894](&unk_23B572A80, &type metadata for XPCActivity.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2CCF0);
  }
  return result;
}

unint64_t sub_23B556534()
{
  unint64_t result;

  result = qword_256A2CCF8;
  if (!qword_256A2CCF8)
  {
    result = MEMORY[0x23B867894](&unk_23B572A30, &type metadata for XPCActivity.State.InvalidatedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2CCF8);
  }
  return result;
}

unint64_t sub_23B556578()
{
  unint64_t result;

  result = qword_256A2CD00;
  if (!qword_256A2CD00)
  {
    result = MEMORY[0x23B867894](&unk_23B5729E0, &type metadata for XPCActivity.State.DoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2CD00);
  }
  return result;
}

unint64_t sub_23B5565BC()
{
  unint64_t result;

  result = qword_256A2CD08;
  if (!qword_256A2CD08)
  {
    result = MEMORY[0x23B867894](&unk_23B572990, &type metadata for XPCActivity.State.ContinueCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2CD08);
  }
  return result;
}

unint64_t sub_23B556600()
{
  unint64_t result;

  result = qword_256A2CD10;
  if (!qword_256A2CD10)
  {
    result = MEMORY[0x23B867894](&unk_23B572940, &type metadata for XPCActivity.State.DeferCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2CD10);
  }
  return result;
}

unint64_t sub_23B556644()
{
  unint64_t result;

  result = qword_256A2CD18;
  if (!qword_256A2CD18)
  {
    result = MEMORY[0x23B867894](&unk_23B5728F0, &type metadata for XPCActivity.State.RunCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2CD18);
  }
  return result;
}

unint64_t sub_23B556688()
{
  unint64_t result;

  result = qword_256A2CD20;
  if (!qword_256A2CD20)
  {
    result = MEMORY[0x23B867894](&unk_23B5728A0, &type metadata for XPCActivity.State.WaitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2CD20);
  }
  return result;
}

unint64_t sub_23B5566CC()
{
  unint64_t result;

  result = qword_256A2CD28;
  if (!qword_256A2CD28)
  {
    result = MEMORY[0x23B867894](&unk_23B572850, &type metadata for XPCActivity.State.CheckInCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2CD28);
  }
  return result;
}

unint64_t sub_23B556714()
{
  unint64_t result;

  result = qword_256A2CD78;
  if (!qword_256A2CD78)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for XPCActivity.State, &type metadata for XPCActivity.State);
    atomic_store(result, (unint64_t *)&qword_256A2CD78);
  }
  return result;
}

unint64_t sub_23B55675C()
{
  unint64_t result;

  result = qword_256A2CD80;
  if (!qword_256A2CD80)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for XPCActivity.Priority, &type metadata for XPCActivity.Priority);
    atomic_store(result, (unint64_t *)&qword_256A2CD80);
  }
  return result;
}

uint64_t type metadata accessor for XPCActivity()
{
  return objc_opt_self();
}

uint64_t method lookup function for XPCActivity()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v16;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v7 + 208)
                                                                                              + *(_QWORD *)(v7 + 208));
  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v16;
  *v16 = v8;
  v16[1] = sub_23B4FC004;
  return v18(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t dispatch thunk of XPCActivity.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of XPCActivity.state.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of XPCActivity.shouldDefer()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of XPCActivity.defer()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of XPCActivity.continue()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of XPCActivity.done()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of XPCActivity.updateCriteria()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 264) + *(_QWORD *)(*(_QWORD *)v1 + 264));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23B4FAC98;
  return v6(a1);
}

ValueMetadata *type metadata accessor for XPCActivity.State()
{
  return &type metadata for XPCActivity.State;
}

uint64_t storeEnumTagSinglePayload for XPCActivity.Priority(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23B556988 + 4 * byte_23B5721CF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23B5569BC + 4 * byte_23B5721CA[v4]))();
}

uint64_t sub_23B5569BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23B5569C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23B5569CCLL);
  return result;
}

uint64_t sub_23B5569D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23B5569E0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23B5569E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23B5569EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCActivity.Priority()
{
  return &type metadata for XPCActivity.Priority;
}

uint64_t _s10FindMyBase11XPCActivityC5StateOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s10FindMyBase11XPCActivityC5StateOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_23B556AE4 + 4 * byte_23B5721D9[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_23B556B18 + 4 * byte_23B5721D4[v4]))();
}

uint64_t sub_23B556B18(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23B556B20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23B556B28);
  return result;
}

uint64_t sub_23B556B34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23B556B3CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_23B556B40(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23B556B48(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCActivity.State.CodingKeys()
{
  return &type metadata for XPCActivity.State.CodingKeys;
}

ValueMetadata *type metadata accessor for XPCActivity.State.CheckInCodingKeys()
{
  return &type metadata for XPCActivity.State.CheckInCodingKeys;
}

ValueMetadata *type metadata accessor for XPCActivity.State.WaitCodingKeys()
{
  return &type metadata for XPCActivity.State.WaitCodingKeys;
}

ValueMetadata *type metadata accessor for XPCActivity.State.RunCodingKeys()
{
  return &type metadata for XPCActivity.State.RunCodingKeys;
}

ValueMetadata *type metadata accessor for XPCActivity.State.DeferCodingKeys()
{
  return &type metadata for XPCActivity.State.DeferCodingKeys;
}

ValueMetadata *type metadata accessor for XPCActivity.State.ContinueCodingKeys()
{
  return &type metadata for XPCActivity.State.ContinueCodingKeys;
}

ValueMetadata *type metadata accessor for XPCActivity.State.DoneCodingKeys()
{
  return &type metadata for XPCActivity.State.DoneCodingKeys;
}

ValueMetadata *type metadata accessor for XPCActivity.State.InvalidatedCodingKeys()
{
  return &type metadata for XPCActivity.State.InvalidatedCodingKeys;
}

unint64_t sub_23B556BD8()
{
  unint64_t result;

  result = qword_256A2CDA8;
  if (!qword_256A2CDA8)
  {
    result = MEMORY[0x23B867894](&unk_23B572828, &type metadata for XPCActivity.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2CDA8);
  }
  return result;
}

unint64_t sub_23B556C20()
{
  unint64_t result;

  result = qword_256A2CDB0;
  if (!qword_256A2CDB0)
  {
    result = MEMORY[0x23B867894](&unk_23B572748, &type metadata for XPCActivity.State.CheckInCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2CDB0);
  }
  return result;
}

unint64_t sub_23B556C68()
{
  unint64_t result;

  result = qword_256A2CDB8;
  if (!qword_256A2CDB8)
  {
    result = MEMORY[0x23B867894](&unk_23B572770, &type metadata for XPCActivity.State.CheckInCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2CDB8);
  }
  return result;
}

unint64_t sub_23B556CB0()
{
  unint64_t result;

  result = qword_256A2CDC0;
  if (!qword_256A2CDC0)
  {
    result = MEMORY[0x23B867894](&unk_23B5726F8, &type metadata for XPCActivity.State.WaitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2CDC0);
  }
  return result;
}

unint64_t sub_23B556CF8()
{
  unint64_t result;

  result = qword_256A2CDC8;
  if (!qword_256A2CDC8)
  {
    result = MEMORY[0x23B867894](&unk_23B572720, &type metadata for XPCActivity.State.WaitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2CDC8);
  }
  return result;
}

unint64_t sub_23B556D40()
{
  unint64_t result;

  result = qword_256A2CDD0;
  if (!qword_256A2CDD0)
  {
    result = MEMORY[0x23B867894](&unk_23B5726A8, &type metadata for XPCActivity.State.RunCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2CDD0);
  }
  return result;
}

unint64_t sub_23B556D88()
{
  unint64_t result;

  result = qword_256A2CDD8;
  if (!qword_256A2CDD8)
  {
    result = MEMORY[0x23B867894](&unk_23B5726D0, &type metadata for XPCActivity.State.RunCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2CDD8);
  }
  return result;
}

unint64_t sub_23B556DD0()
{
  unint64_t result;

  result = qword_256A2CDE0;
  if (!qword_256A2CDE0)
  {
    result = MEMORY[0x23B867894](&unk_23B572658, &type metadata for XPCActivity.State.DeferCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2CDE0);
  }
  return result;
}

unint64_t sub_23B556E18()
{
  unint64_t result;

  result = qword_256A2CDE8;
  if (!qword_256A2CDE8)
  {
    result = MEMORY[0x23B867894](&unk_23B572680, &type metadata for XPCActivity.State.DeferCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2CDE8);
  }
  return result;
}

unint64_t sub_23B556E60()
{
  unint64_t result;

  result = qword_256A2CDF0;
  if (!qword_256A2CDF0)
  {
    result = MEMORY[0x23B867894](&unk_23B572608, &type metadata for XPCActivity.State.ContinueCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2CDF0);
  }
  return result;
}

unint64_t sub_23B556EA8()
{
  unint64_t result;

  result = qword_256A2CDF8;
  if (!qword_256A2CDF8)
  {
    result = MEMORY[0x23B867894](&unk_23B572630, &type metadata for XPCActivity.State.ContinueCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2CDF8);
  }
  return result;
}

unint64_t sub_23B556EF0()
{
  unint64_t result;

  result = qword_256A2CE00;
  if (!qword_256A2CE00)
  {
    result = MEMORY[0x23B867894](&unk_23B5725B8, &type metadata for XPCActivity.State.DoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2CE00);
  }
  return result;
}

unint64_t sub_23B556F38()
{
  unint64_t result;

  result = qword_256A2CE08;
  if (!qword_256A2CE08)
  {
    result = MEMORY[0x23B867894](&unk_23B5725E0, &type metadata for XPCActivity.State.DoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2CE08);
  }
  return result;
}

unint64_t sub_23B556F80()
{
  unint64_t result;

  result = qword_256A2CE10;
  if (!qword_256A2CE10)
  {
    result = MEMORY[0x23B867894](&unk_23B572568, &type metadata for XPCActivity.State.InvalidatedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2CE10);
  }
  return result;
}

unint64_t sub_23B556FC8()
{
  unint64_t result;

  result = qword_256A2CE18;
  if (!qword_256A2CE18)
  {
    result = MEMORY[0x23B867894](&unk_23B572590, &type metadata for XPCActivity.State.InvalidatedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2CE18);
  }
  return result;
}

unint64_t sub_23B557010()
{
  unint64_t result;

  result = qword_256A2CE20;
  if (!qword_256A2CE20)
  {
    result = MEMORY[0x23B867894](&unk_23B572798, &type metadata for XPCActivity.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2CE20);
  }
  return result;
}

unint64_t sub_23B557058()
{
  unint64_t result;

  result = qword_256A2CE28;
  if (!qword_256A2CE28)
  {
    result = MEMORY[0x23B867894](&unk_23B5727C0, &type metadata for XPCActivity.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2CE28);
  }
  return result;
}

uint64_t sub_23B55709C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E496B63656863 && a2 == 0xE700000000000000;
  if (v2 || (sub_23B56AD98() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1953063287 && a2 == 0xE400000000000000 || (sub_23B56AD98() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 7239026 && a2 == 0xE300000000000000 || (sub_23B56AD98() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7265666564 && a2 == 0xE500000000000000 || (sub_23B56AD98() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x65756E69746E6F63 && a2 == 0xE800000000000000 || (sub_23B56AD98() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 1701736292 && a2 == 0xE400000000000000 || (sub_23B56AD98() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6164696C61766E69 && a2 == 0xEB00000000646574)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_23B56AD98();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

unint64_t sub_23B557360()
{
  unint64_t result;

  result = qword_256A2CE30;
  if (!qword_256A2CE30)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for XPCActivity.Priority, &type metadata for XPCActivity.Priority);
    atomic_store(result, &qword_256A2CE30);
  }
  return result;
}

uint64_t sub_23B5573A4()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_23B5573C8(_xpc_activity_s *a1)
{
  return sub_23B55447C(a1);
}

uint64_t sub_23B5573D0()
{
  swift_release();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23B5573FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *(_QWORD *)v5 = v1;
  *(_QWORD *)(v5 + 8) = sub_23B4FACE0;
  *(_BYTE *)(v5 + 73) = v3;
  *(_QWORD *)(v5 + 40) = v2;
  *(_QWORD *)(v5 + 48) = v4;
  return swift_task_switch();
}

void OSAllocatedUnfairLock.callAsFunction<A>(_:)(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  os_unfair_lock_s *v5;

  v4 = a3 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)a3 + 16);
  v5 = (os_unfair_lock_s *)(a3 + ((*(unsigned int *)(*(_QWORD *)a3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  a1(v4);
  os_unfair_lock_unlock(v5);
}

void OSAllocatedUnfairLock.stateSnapshot.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  os_unfair_lock_s *v6;

  v5 = a1 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)a1 + 16);
  v6 = (os_unfair_lock_s *)(a1 + ((*(unsigned int *)(*(_QWORD *)a1 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v5, a2);
  os_unfair_lock_unlock(v6);
}

uint64_t UnsignedInteger.reversed.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  char v21;
  uint64_t v22;
  char v23;
  char *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t AssociatedConformanceWitness;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;

  v32 = *(_QWORD *)(a1 - 8);
  v4 = MEMORY[0x24BDAC7A8](a1);
  v30[0] = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v30 - v7;
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)v30 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v30 - v12;
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v34 = AssociatedTypeWitness;
  sub_23B56ADD4();
  v30[1] = a2;
  v35 = v15;
  sub_23B56AD80();
  result = sub_23B56A9B4();
  if (result < 0)
    goto LABEL_25;
  v18 = result;
  if (result)
  {
    v36 = sub_23B511B74();
    v19 = 0;
    v31 = v18;
    while (1)
    {
      v37 = v19;
      sub_23B56A978();
      sub_23B56ADD4();
      sub_23B56AD80();
      sub_23B56A960();
      v20 = *(void (**)(char *, uint64_t))(v32 + 8);
      v20(v8, a1);
      v20(v11, a1);
      if ((sub_23B56A9C0() & 1) != 0)
        break;
      v21 = sub_23B56A9C0();
      v22 = sub_23B56A9B4();
      if ((v21 & 1) == 0)
      {
        if (v22 >= 64)
        {
LABEL_16:
          v37 = 0;
          sub_23B56A954();
          v26 = sub_23B56A240();
          v20(v11, a1);
          result = ((uint64_t (*)(char *, uint64_t))v20)(v13, a1);
          if ((v26 & 1) != 0)
            goto LABEL_4;
          goto LABEL_19;
        }
        goto LABEL_13;
      }
      if (v22 > 64)
        goto LABEL_16;
      sub_23B56ADD4();
      sub_23B56AD80();
      v23 = sub_23B56A228();
      v20(v11, a1);
      v24 = (char *)v30[0];
      (*(void (**)(_QWORD, char *, uint64_t))(v32 + 16))(v30[0], v13, a1);
      if ((v23 & 1) != 0)
      {
        v25 = sub_23B56A9A8();
        v20(v24, a1);
        goto LABEL_14;
      }
      v20(v24, a1);
      v20(v13, a1);
LABEL_19:
      sub_23B56ADD4();
      sub_23B56AD80();
      result = sub_23B56A9B4();
      v27 = result - 1;
      if (__OFSUB__(result, 1))
      {
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
        return result;
      }
      v28 = __OFSUB__(v27, v19);
      v29 = v27 - v19;
      if (v28)
        goto LABEL_24;
      v37 = v29;
      sub_23B56A984();
      v20(v8, a1);
      sub_23B56A990();
      result = ((uint64_t (*)(char *, uint64_t))v20)(v11, a1);
LABEL_4:
      if (v31 == ++v19)
        return result;
    }
    if (sub_23B56A9B4() >= 64)
      goto LABEL_16;
LABEL_13:
    v25 = sub_23B56A9A8();
LABEL_14:
    result = ((uint64_t (*)(char *, uint64_t))v20)(v13, a1);
    if (!v25)
      goto LABEL_4;
    goto LABEL_19;
  }
  return result;
}

int8x8_t static UInt64.interleave(x:y:)(unsigned int a1, unsigned int a2)
{
  int8x16_t v2;
  int8x16_t v3;
  int8x16_t v4;

  v2 = (int8x16_t)vdupq_n_s64(a2);
  v3 = (int8x16_t)vdupq_n_s64(a1);
  v4 = vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v2, (int8x16_t)xmmword_23B572D70), (uint64x2_t)xmmword_23B572DB0), vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v2, (int8x16_t)xmmword_23B572D10), (uint64x2_t)xmmword_23B572D50), (int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v3, (int8x16_t)xmmword_23B572CB0), (uint64x2_t)xmmword_23B572CD0)), (int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v3, (int8x16_t)xmmword_23B572D10), (uint64x2_t)xmmword_23B572D30))), (int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v3, (int8x16_t)xmmword_23B572D70), (uint64x2_t)xmmword_23B572D90)), vorrq_s8(
             vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v2, (int8x16_t)xmmword_23B572CB0), (uint64x2_t)xmmword_23B572CF0), vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v2, (int8x16_t)xmmword_23B572C50), (uint64x2_t)xmmword_23B572C90), (int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v3, (int8x16_t)xmmword_23B572BF0), (uint64x2_t)xmmword_23B572C10)), (int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v3, (int8x16_t)xmmword_23B572C50), (uint64x2_t)xmmword_23B572C70))), vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v2, (int8x16_t)xmmword_23B572BF0), (uint64x2_t)xmmword_23B572C30),
                 vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v2, (int8x16_t)xmmword_23B572B90), (uint64x2_t)xmmword_23B572BD0), (int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v3, (int8x16_t)xmmword_23B572B90), (uint64x2_t)xmmword_23B572BB0))), vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v2, (int8x16_t)xmmword_23B572B30), (uint64x2_t)xmmword_23B572B70), (int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v3, (int8x16_t)xmmword_23B572B30), (uint64x2_t)xmmword_23B572B50)), vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v2, (int8x16_t)xmmword_23B572AE0), (uint64x2_t)xmmword_23B572B10), (int8x16_t)vshlq_u64(
                                (uint64x2_t)vandq_s8(v3, (int8x16_t)xmmword_23B572AE0),
                                (uint64x2_t)xmmword_23B572B00)))))),
         vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v2, (int8x16_t)xmmword_23B572D60), (uint64x2_t)xmmword_23B572DA0), vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v2, (int8x16_t)xmmword_23B572D00), (uint64x2_t)xmmword_23B572D40), (int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v3, (int8x16_t)xmmword_23B572CA0), (uint64x2_t)xmmword_23B572CC0)), (int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v3, (int8x16_t)xmmword_23B572D00), (uint64x2_t)xmmword_23B572D20))), (int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v3, (int8x16_t)xmmword_23B572D60), (uint64x2_t)xmmword_23B572D80)), vorrq_s8(vorrq_s8(
               (int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v2, (int8x16_t)xmmword_23B572CA0), (uint64x2_t)xmmword_23B572CE0), vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v2, (int8x16_t)xmmword_23B572C40), (uint64x2_t)xmmword_23B572C80), (int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v3, (int8x16_t)xmmword_23B572BE0), (uint64x2_t)xmmword_23B572C00)), (int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v3, (int8x16_t)xmmword_23B572C40), (uint64x2_t)xmmword_23B572C60))), vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v2, (int8x16_t)xmmword_23B572BE0), (uint64x2_t)xmmword_23B572C20), vorrq_s8(
                   (int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v2, (int8x16_t)xmmword_23B572B80), (uint64x2_t)xmmword_23B572BC0), (int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v3, (int8x16_t)xmmword_23B572B80), (uint64x2_t)xmmword_23B572BA0))), vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v2, (int8x16_t)xmmword_23B572B20), (uint64x2_t)xmmword_23B572B60), (int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v3, (int8x16_t)xmmword_23B572B20), (uint64x2_t)xmmword_23B572B40)), vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v2, (int8x16_t)xmmword_23B56F770), (uint64x2_t)xmmword_23B56F770), (int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v3, (int8x16_t)xmmword_23B56F770),
                                (uint64x2_t)xmmword_23B572AF0)))))));
  return vorr_s8(*(int8x8_t *)v4.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL));
}

uint64_t UInt64.deinterleave.getter(unint64_t a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v1 = 0;
  LODWORD(v2) = 0;
  LODWORD(v3) = 0;
  v4 = 0;
  while (1)
  {
    v5 = ((1 << v4) & a1) >> v1;
    if (HIDWORD(v5))
      break;
    v6 = v4 + 1;
    v7 = ((1 << v6) & a1) >> ++v1;
    if (HIDWORD(v7))
      break;
    v3 = v3 | v5;
    v2 = v2 | v7;
    v8 = v6 - 1;
    v4 = v6 + 1;
    if (v8 >= 0x3E)
      return v3 | (v2 << 32);
  }
  result = sub_23B56AC18();
  __break(1u);
  return result;
}

uint64_t withCancellableCheckedThrowingContinuation<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t sub_23B557E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v9;

  type metadata accessor for ContinuationBox(0, *(_QWORD *)(v4 + 40), a3, a4);
  swift_allocObject();
  v9 = *(_OWORD *)(v4 + 24);
  v5 = sub_23B5589F0();
  *(_QWORD *)(v4 + 48) = v5;
  v6 = swift_task_alloc();
  *(_QWORD *)(v4 + 56) = v6;
  *(_QWORD *)(v6 + 16) = v5;
  *(_OWORD *)(v6 + 24) = v9;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 64) = v7;
  *v7 = v4;
  v7[1] = sub_23B557EFC;
  return sub_23B56ADA4();
}

uint64_t sub_23B557EFC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B557F68()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B557F9C()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for ContinuationBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContinuationBox);
}

uint64_t sub_23B557FE4()
{
  swift_allocObject();
  return sub_23B5589F0();
}

uint64_t sub_23B558014(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  v4[6] = *a2;
  return swift_task_switch();
}

uint64_t sub_23B558038()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v2 + 32) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v3;
  *v3 = v0;
  v3[1] = sub_23B548A3C;
  return sub_23B56ADC8();
}

uint64_t sub_23B5580E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = swift_task_alloc();
  v6 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = sub_23B4FAC98;
  *(_QWORD *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 24) = v6;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 48) = *(_QWORD *)v6;
  return swift_task_switch();
}

uint64_t sub_23B558164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD v20[2];

  v20[1] = a4;
  v7 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542FAD88);
  v8 = sub_23B56A5E8();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v20 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FADF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23B56A6C0();
  v15 = sub_23B56A624();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  v16 = *(unsigned __int8 *)(v9 + 80);
  v20[0] = a3;
  v17 = (v16 + 48) & ~v16;
  v18 = (char *)swift_allocObject();
  *((_QWORD *)v18 + 2) = 0;
  *((_QWORD *)v18 + 3) = 0;
  *((_QWORD *)v18 + 4) = v7;
  *((_QWORD *)v18 + 5) = a2;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v18[v17], v11, v8);
  swift_retain();
  sub_23B515858((uint64_t)v14, (uint64_t)&unk_256A2CE88, (uint64_t)v18);
  swift_release();
  return ((uint64_t (*)(uint64_t))v20[0])(a1);
}

uint64_t sub_23B558310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch();
}

uint64_t sub_23B558328()
{
  uint64_t v0;

  sub_23B558618(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B558358(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FADF0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_23B56A624();
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = a1;
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  swift_retain();
  if (v8 == 1)
  {
    sub_23B502244((uint64_t)v4);
    v9 = 0;
    v10 = 0;
  }
  else
  {
    sub_23B56A618();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    if (v7[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      v9 = sub_23B56A5C4();
      v10 = v11;
      swift_unknownObjectRelease();
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }
  }
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = &unk_256A2CE70;
  *(_QWORD *)(v12 + 24) = v7;
  if (v10 | v9)
  {
    v14[0] = 0;
    v14[1] = 0;
    v14[2] = v9;
    v14[3] = v10;
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_23B558524()
{
  uint64_t v0;

  return sub_23B558358(v0);
}

uint64_t sub_23B55852C()
{
  uint64_t result;
  unint64_t v1;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542FAD88);
  sub_23B56A5E8();
  result = sub_23B56A900();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_23B5585D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t sub_23B5585E8()
{
  uint64_t v0;

  sub_23B55875C();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B558618(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542FAD88);
  v3 = sub_23B56A5E8();
  v4 = sub_23B56A900();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v14 - v9;
  v11 = *(_QWORD *)(v3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v14 - v9, a1, v3);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v10, 0, 1, v3);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v10, v4);
  v12 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 96);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 40))(v12, v8, v4);
  return swift_endAccess();
}

uint64_t sub_23B55875C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v16;
  _QWORD v17[3];

  v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542FAD88);
  v2 = sub_23B56A5E8();
  v3 = sub_23B56A900();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)v17 - v9;
  v11 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)v17 - v12;
  v14 = (char *)v0 + *(_QWORD *)(v1 + 96);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v10, v14, v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v2) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v10, v3);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v10, v2);
  sub_23B56A5F4();
  sub_23B558A74();
  v16 = swift_allocError();
  sub_23B56A15C();
  v17[0] = v16;
  sub_23B56A5D0();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v7, 1, 1, v2);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v4 + 40))(v14, v7, v3);
  return swift_endAccess();
}

uint64_t sub_23B55895C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 96);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542FAD88);
  sub_23B56A5E8();
  v2 = sub_23B56A900();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_23B5589DC()
{
  sub_23B55895C();
  return swift_defaultActor_deallocate();
}

uint64_t sub_23B5589F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_defaultActor_initialize();
  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 96);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542FAD88);
  v2 = sub_23B56A5E8();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  return v0;
}

unint64_t sub_23B558A74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2542F9630;
  if (!qword_2542F9630)
  {
    v1 = sub_23B56A5F4();
    result = MEMORY[0x23B867894](MEMORY[0x24BEE6848], v1);
    atomic_store(result, (unint64_t *)&qword_2542F9630);
  }
  return result;
}

uint64_t sub_23B558ABC()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23B558AE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_23B4FACE0;
  v3[2] = v2;
  return swift_task_switch();
}

uint64_t sub_23B558B48(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23B51D31C;
  return v6(a1);
}

uint64_t sub_23B558BAC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23B558BD0(uint64_t a1)
{
  uint64_t *v1;

  return sub_23B558164(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_23B558BDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542FAD88);
  v1 = sub_23B56A5E8();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_23B558C78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542FAD88);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_23B56A5E8() - 8) + 80);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = v0 + ((v2 + 48) & ~v2);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_23B4FAC98;
  v5[2] = v3;
  v5[3] = v4;
  return swift_task_switch();
}

uint64_t Bool.intValue.getter(char a1)
{
  return a1 & 1;
}

uint64_t TokenBucket.__allocating_init(fillRate:capacity:initialAllocation:)(double a1, double a2, double a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  TokenBucket.init(fillRate:capacity:initialAllocation:)(a1, a2, a3);
  return v6;
}

uint64_t TokenBucket.init(fillRate:capacity:initialAllocation:)(double a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  const char *v13;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v7 = sub_23B569F40();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9CC0);
  v11 = swift_allocObject();
  *(_DWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v3 + 16) = v11;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  if (a1 <= 0.0)
  {
    sub_23B558FD4();
    swift_allocError();
    *v12 = 0xD000000000000015;
    v13 = "fillRate must be > 0.";
  }
  else if (a2 <= 0.0)
  {
    sub_23B558FD4();
    swift_allocError();
    *v12 = 0xD000000000000015;
    v13 = "capacity must be > 0.";
  }
  else if (a3 >= 0.0)
  {
    if (a3 <= a2)
    {
      *(double *)(v3 + 32) = a2;
      *(double *)(v3 + 40) = a3;
      *(double *)(v3 + 24) = a1;
      sub_23B569F28();
      sub_23B569EA4();
      v16 = v15;
      v17 = *(void (**)(char *, uint64_t))(v8 + 8);
      v17(v10, v7);
      *(_QWORD *)(v3 + 104) = v16;
      sub_23B569EB0();
      sub_23B569EA4();
      v19 = v18;
      v17(v10, v7);
      *(_QWORD *)(v3 + 48) = v19;
      return v3;
    }
    sub_23B558FD4();
    swift_allocError();
    *v12 = 0xD000000000000027;
    v13 = "Initial allocation must be <= capacity.";
  }
  else
  {
    sub_23B558FD4();
    swift_allocError();
    *v12 = 0xD00000000000001FLL;
    v13 = "initialAllocation must be >= 0.";
  }
  v12[1] = (unint64_t)(v13 - 32) | 0x8000000000000000;
  swift_willThrow();
  swift_release();
  swift_deallocPartialClassInstance();
  return v3;
}

unint64_t sub_23B558FD4()
{
  unint64_t result;

  result = qword_256A2CE90;
  if (!qword_256A2CE90)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for GenericError, &type metadata for GenericError);
    atomic_store(result, (unint64_t *)&qword_256A2CE90);
  }
  return result;
}

Swift::Bool __swiftcall TokenBucket.operationAllowed(cost:)(Swift::Double cost)
{
  Swift::Bool v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  Swift::Bool v5;

  if (cost < 1.0)
    return 0;
  ((void (*)())MEMORY[0x24BDAC7A8])();
  v3 = v2 + 4;
  os_unfair_lock_lock(v2 + 4);
  sub_23B5590AC(&v5);
  v1 = v5;
  os_unfair_lock_unlock(v3);
  return v1;
}

uint64_t sub_23B5590AC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  double v3;
  uint64_t result;

  v3 = *(double *)(v1 + 24);
  sub_23B5590F8();
  result = sub_23B5591C8(v3);
  *a1 = result & 1;
  return result;
}

uint64_t sub_23B5590F8()
{
  double *v0;
  double *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  double v6;
  double v7;
  uint64_t result;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;

  v1 = v0;
  v2 = sub_23B569F40();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23B569F34();
  sub_23B569EA4();
  v7 = v6;
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v9 = v1[4];
  v10 = v1[5];
  if (v10 < v9)
  {
    v11 = v1[3] * (v7 - v1[13]);
    v12 = v1[9] + v11;
    v13 = v10 + v11;
    v1[8] = v1[8] + fabs(v13) - v9;
    v1[9] = v12;
    if (v13 < v9)
      v9 = v13;
    v1[5] = v9;
  }
  v1[13] = v7;
  return result;
}

uint64_t sub_23B5591C8(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char *v8;
  double v9;
  double v10;
  void (*v11)(char *, uint64_t);
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = v1;
  v4 = sub_23B569F40();
  v5 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 <= 0.0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  sub_23B569F34();
  sub_23B569EA4();
  v10 = v9;
  v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v8, v4);
  v12 = *(double *)(v2 + 48);
  sub_23B569EB0();
  sub_23B569EA4();
  v14 = v13;
  result = ((uint64_t (*)(char *, uint64_t))v11)(v8, v4);
  v15 = 0.0;
  if (v12 != v14)
    v15 = v10 - *(double *)(v2 + 48);
  *(double *)(v2 + 112) = v15;
  v16 = v15 + *(double *)(v2 + 56);
  *(double *)(v2 + 48) = v10;
  *(double *)(v2 + 56) = v16;
  v17 = *(_QWORD *)(v2 + 88);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
    goto LABEL_10;
  *(_QWORD *)(v2 + 88) = v19;
  v20 = *(double *)(v2 + 40);
  if (v20 < a1)
    return v20 >= a1;
  *(double *)(v2 + 40) = v20 - a1;
  *(double *)(v2 + 80) = *(double *)(v2 + 80) + a1;
  v21 = *(_QWORD *)(v2 + 96);
  v18 = __OFADD__(v21, 1);
  v22 = v21 + 1;
  if (!v18)
  {
    *(_QWORD *)(v2 + 96) = v22;
    return v20 >= a1;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t TokenBucket.durationUntilOperationAllowed(cost:)()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  uint64_t v4;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 16) + 16);
  os_unfair_lock_lock(v1);
  sub_23B559720(&v4);
  v2 = v4;
  os_unfair_lock_unlock(v1);
  return v2;
}

Swift::Int __swiftcall TokenBucket.countOfOperationsAllowed(cost:)(Swift::Double cost)
{
  uint64_t v1;
  os_unfair_lock_s *v2;
  Swift::Int v3;
  Swift::Int v5;

  v2 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 16) + 16);
  os_unfair_lock_lock(v2);
  sub_23B559770(&v5);
  v3 = v5;
  os_unfair_lock_unlock(v2);
  return v3;
}

uint64_t sub_23B5593CC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>, double a3@<D0>)
{
  uint64_t result;
  double v7;

  result = sub_23B5590F8();
  v7 = floor(*(double *)(a1 + 40) / a3);
  if ((~*(_QWORD *)&v7 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v7 < 9.22337204e18)
  {
    *a2 = (uint64_t)v7;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

Swift::Void __swiftcall TokenBucket.reset()()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 16) + 16);
  os_unfair_lock_lock(v1);
  sub_23B514B04(v2, sub_23B55978C);
  os_unfair_lock_unlock(v1);
}

uint64_t sub_23B5594B0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v2 = sub_23B569F40();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1[7] = 0;
  a1[11] = 0;
  a1[12] = 0;
  a1[5] = a1[4];
  sub_23B569EB0();
  sub_23B569EA4();
  v7 = v6;
  v8 = *(void (**)(char *, uint64_t))(v3 + 8);
  v8(v5, v2);
  a1[6] = v7;
  a1[14] = 0;
  sub_23B569F34();
  sub_23B569EA4();
  v10 = v9;
  result = ((uint64_t (*)(char *, uint64_t))v8)(v5, v2);
  a1[13] = v10;
  a1[9] = 0;
  a1[10] = 0;
  a1[8] = 0;
  return result;
}

void TokenBucket.statistics.getter()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 16) + 16);
  os_unfair_lock_lock(v1);
  sub_23B514B04(v2, (uint64_t (*)(void))sub_23B5597A4);
  os_unfair_lock_unlock(v1);
}

uint64_t sub_23B5595E0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  double v7;
  uint64_t v8;

  v2 = *(_QWORD *)(result + 88);
  v3 = *(_QWORD *)(result + 96);
  if (__OFSUB__(v2, v3))
  {
    __break(1u);
    goto LABEL_10;
  }
  v4 = *(double *)(result + 72);
  if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) == 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v5 = *(double *)(result + 80);
  if ((~*(_QWORD *)&v5 & 0x7FF0000000000000) == 0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v5 <= -9.22337204e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v5 < 9.22337204e18)
  {
    v6 = *(_QWORD *)(result + 112);
    v7 = *(double *)(result + 56);
    v8 = *(_QWORD *)(result + 64);
    *(_QWORD *)a2 = v2;
    *(_QWORD *)(a2 + 8) = v3;
    *(_QWORD *)(a2 + 16) = v2 - v3;
    *(_QWORD *)(a2 + 24) = v6;
    *(double *)(a2 + 32) = v7 / (double)v2;
    *(_QWORD *)(a2 + 40) = v8;
    *(_QWORD *)(a2 + 48) = (uint64_t)v4;
    *(_QWORD *)(a2 + 56) = (uint64_t)v5;
    return result;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t TokenBucket.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t TokenBucket.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

_QWORD *sub_23B5596E4@<X0>(_QWORD *(*a1)(uint64_t *__return_ptr)@<X1>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = a1(&v5);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_23B559720@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  if (*(double *)(*(_QWORD *)(v1 + 16) + 40) <= *(double *)(v1 + 24))
  {
    result = sub_23B56AF6C();
  }
  else
  {
    result = 0;
    v4 = 0;
  }
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_23B559770@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_23B5593CC(*(_QWORD *)(v1 + 16), a1, *(double *)(v1 + 24));
}

uint64_t sub_23B55978C()
{
  _QWORD *v0;

  return sub_23B5594B0(v0);
}

uint64_t sub_23B5597A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23B5595E0(v1, a1);
}

uint64_t type metadata accessor for TokenBucket()
{
  return objc_opt_self();
}

uint64_t method lookup function for TokenBucket()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TokenBucket.__allocating_init(fillRate:capacity:initialAllocation:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for TokenBucket.Statistics(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TokenBucket.Statistics(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 64) = v3;
  return result;
}

ValueMetadata *type metadata accessor for TokenBucket.Statistics()
{
  return &type metadata for TokenBucket.Statistics;
}

uint64_t AsyncSequence.collect()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return swift_task_switch();
}

uint64_t sub_23B55989C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[4];
  v1 = v0[5];
  swift_getAssociatedTypeWitness();
  v0[3] = sub_23B56A150();
  v3 = swift_task_alloc();
  v0[7] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = (_QWORD *)swift_task_alloc();
  v0[8] = v4;
  sub_23B56A5A0();
  *v4 = v0;
  v4[1] = sub_23B559978;
  return sub_23B56A714();
}

uint64_t sub_23B559978()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B5599E4()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_23B5599F0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t AssociatedTypeWitness;

  v2[2] = a1;
  v2[3] = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2[4] = AssociatedTypeWitness;
  v2[5] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v2[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23B559A68()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 16))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  sub_23B56A5A0();
  sub_23B56A588();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B559AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23B4FAC98;
  return sub_23B5599F0(a1, a2);
}

uint64_t AsyncSequence.first()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t sub_23B559B5C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v2;
  *v2 = v0;
  v2[1] = sub_23B559BD4;
  return sub_23B56A708();
}

uint64_t sub_23B559BD4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23B559C48()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23B559C7C()
{
  uint64_t v0;

  return sub_23B559CDC(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 1);
}

uint64_t sub_23B559C90()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_23B4FC054;
  return sub_23B4FC054(1);
}

uint64_t sub_23B559CDC(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

const char *Feature.FindMy.domain.getter()
{
  return "FindMy";
}

BOOL static Feature.FindMy.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t Feature.FindMy.hash(into:)()
{
  return sub_23B56AE70();
}

uint64_t Feature.FindMy.hashValue.getter()
{
  sub_23B56AE64();
  sub_23B56AE70();
  return sub_23B56AE88();
}

const char *Feature.Bluetooth.domain.getter()
{
  return "BluetoothFeatures";
}

const char *Feature.Bluetooth.feature.getter()
{
  return "SentinelNewLocationFeatures";
}

uint64_t static Feature.Bluetooth.== infix(_:_:)()
{
  return 1;
}

const char *sub_23B559DB8()
{
  return "BluetoothFeatures";
}

const char *sub_23B559DCC()
{
  return "SentinelNewLocationFeatures";
}

const char *Feature.CoreLocation.domain.getter()
{
  return "CoreLocation";
}

const char *Feature.CoreLocation.feature.getter()
{
  return "StandardUT";
}

uint64_t static Feature.CoreLocation.== infix(_:_:)()
{
  return 1;
}

uint64_t Feature.CoreLocation.hash(into:)()
{
  return sub_23B56AE70();
}

unint64_t sub_23B559E3C()
{
  unint64_t result;

  result = qword_256A2CEC8;
  if (!qword_256A2CEC8)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for Feature.FindMy, &type metadata for Feature.FindMy);
    atomic_store(result, (unint64_t *)&qword_256A2CEC8);
  }
  return result;
}

unint64_t sub_23B559E84()
{
  unint64_t result;

  result = qword_256A2CED0;
  if (!qword_256A2CED0)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for Feature.Bluetooth, &type metadata for Feature.Bluetooth);
    atomic_store(result, (unint64_t *)&qword_256A2CED0);
  }
  return result;
}

unint64_t sub_23B559ECC()
{
  unint64_t result;

  result = qword_256A2CED8;
  if (!qword_256A2CED8)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for Feature.CoreLocation, &type metadata for Feature.CoreLocation);
    atomic_store(result, (unint64_t *)&qword_256A2CED8);
  }
  return result;
}

const char *sub_23B559F10()
{
  return "CoreLocation";
}

const char *sub_23B559F24()
{
  return "StandardUT";
}

ValueMetadata *type metadata accessor for Feature()
{
  return &type metadata for Feature;
}

uint64_t getEnumTagSinglePayload for Feature.FindMy(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE6)
    goto LABEL_17;
  if (a2 + 26 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 26) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 26;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 26;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 26;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1B;
  v8 = v6 - 27;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Feature.FindMy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 26 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 26) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE5)
    return ((uint64_t (*)(void))((char *)&loc_23B55A024 + 4 * byte_23B572F0C[v4]))();
  *a1 = a2 + 26;
  return ((uint64_t (*)(void))((char *)sub_23B55A058 + 4 * byte_23B572F07[v4]))();
}

uint64_t sub_23B55A058(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23B55A060(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23B55A068);
  return result;
}

uint64_t sub_23B55A074(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23B55A07CLL);
  *(_BYTE *)result = a2 + 26;
  return result;
}

uint64_t sub_23B55A080(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23B55A088(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Feature.Bluetooth()
{
  return &type metadata for Feature.Bluetooth;
}

uint64_t _s10FindMyBase7FeatureO9BluetoothOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23B55A0E8 + 4 * byte_23B572F11[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23B55A108 + 4 * byte_23B572F16[v4]))();
}

_BYTE *sub_23B55A0E8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23B55A108(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23B55A110(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23B55A118(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23B55A120(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23B55A128(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Feature.CoreLocation()
{
  return &type metadata for Feature.CoreLocation;
}

uint64_t Result.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v4 + 16))(v7, v5);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, a1);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 1, 1, *(_QWORD *)(a1 + 16));
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_QWORD *)(v9 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a2, v7, v9);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(a2, 0, 1, v9);
  }
}

uint64_t Result.error.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v4 + 16))(v7, v5);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = *(_QWORD *)(a1 + 24);
    v9 = *(_QWORD *)(v8 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2, v7, v8);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(a2, 0, 1, v8);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, a1);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 56))(a2, 1, 1, *(_QWORD *)(a1 + 24));
  }
}

uint64_t BinaryDecodable.init(data:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  BinaryDecoder.decode<A>(_:from:)(a3, a1, a2, a3, a4);
  return sub_23B504944(a1, a2);
}

BOOL static BinaryDecodingError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t BinaryDecodingError.hash(into:)()
{
  return sub_23B56AE70();
}

uint64_t BinaryDecodingError.hashValue.getter()
{
  sub_23B56AE64();
  sub_23B56AE70();
  return sub_23B56AE88();
}

uint64_t RawRepresentable<>.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v31 = a4;
  v27 = a5;
  v26 = sub_23B56A900();
  v8 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v29 = (char *)&v25 - v9;
  v28 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v25 - v14;
  v16 = a1[3];
  v17 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v16);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v17 + 8))(v32, v16, v17);
  v18 = v33;
  v19 = v34;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v32, v33);
  v20 = v35;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 24))(AssociatedTypeWitness, AssociatedTypeWitness, v31, v18, v19);
  if (!v20)
  {
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v12, v15, AssociatedTypeWitness);
    v21 = v29;
    sub_23B56A4C8();
    v22 = *(_QWORD *)(a2 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v21, 1, a2) == 1)
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v29, v26);
      sub_23B52B274();
      swift_allocError();
      *v23 = 0;
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v15, AssociatedTypeWitness);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v30 + 8))(v15, AssociatedTypeWitness);
      (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v27, v29, a2);
    }
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t RawRepresentable<>.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  uint64_t v35;
  uint64_t v36;
  char *v37;

  v31 = a3;
  v28 = a4;
  v7 = sub_23B56A900();
  v8 = *(_QWORD *)(v7 - 8);
  v29 = v7;
  v30 = v8;
  MEMORY[0x24BDAC7A8](v7);
  v37 = (char *)&v27 - v9;
  v10 = sub_23B56A2E8();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v14 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v15);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v14 + 8))(v34, v15, v14);
  sub_23B56A2C4();
  v16 = v35;
  v17 = v36;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v34, v35);
  v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 16))(v13, v16, v17);
  if (v4)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  else
  {
    v20 = v18;
    v21 = v19;
    v22 = v30;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v32 = v20;
    v33 = v21;
    v23 = v37;
    sub_23B56A4C8();
    v24 = *(_QWORD *)(a2 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v23, 1, a2) == 1)
    {
      (*(void (**)(char *, uint64_t))(v22 + 8))(v23, v29);
      sub_23B52B274();
      swift_allocError();
      *v25 = 0;
      swift_willThrow();
    }
    else
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v28, v23, a2);
    }
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t sub_23B55A830()
{
  unint64_t result;

  result = qword_256A2CEE0;
  if (!qword_256A2CEE0)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for BinaryDecodingError, &type metadata for BinaryDecodingError);
    atomic_store(result, (unint64_t *)&qword_256A2CEE0);
  }
  return result;
}

uint64_t dispatch thunk of BinaryDecodable.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of BinaryDecoding.container()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t storeEnumTagSinglePayload for BinaryDecodingError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23B55A8E0 + 4 * byte_23B573195[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23B55A914 + 4 * asc_23B573190[v4]))();
}

uint64_t sub_23B55A914(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23B55A91C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23B55A924);
  return result;
}

uint64_t sub_23B55A930(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23B55A938);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23B55A93C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23B55A944(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BinaryDecodingError()
{
  return &type metadata for BinaryDecodingError;
}

uint64_t dispatch thunk of BinaryDecodingContaining.isAtEnd.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of BinaryDecodingContaining.decodeString(encoding:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of BinaryDecodingContaining.decode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of BinaryDecodingContaining.decode(length:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of BinaryDecodingContaining.decode()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t sub_23B55A9E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_23B56A624();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_23B56A618();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  sub_23B5043F0(a1, &qword_2542FADF0);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_23B56A5C4();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_23B55AB14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_23B56A060();
  __swift_allocate_value_buffer(v0, qword_2542FC390);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_2542FC390);
  if (qword_2542F9D80 != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)qword_2542FC3C0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t XPCSessionManager.__allocating_init(name:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = swift_allocObject();
  *(_QWORD *)(v2 + 32) = v5;
  swift_defaultActor_initialize();
  v6 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v5 + 128) = 0;
  *(_QWORD *)(v5 + 136) = v6;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_QWORD *)(v5 + 112) = a1;
  *(_QWORD *)(v5 + 120) = a2;
  return swift_task_switch();
}

uint64_t sub_23B55AC1C()
{
  uint64_t v0;
  uint64_t v1;
  objc_class *v2;
  char *v3;
  id v4;
  void *v5;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = (objc_class *)type metadata accessor for XPCSessionManager.DelegateTrampoline();
  v3 = (char *)objc_allocWithZone(v2);
  *(_QWORD *)&v3[OBJC_IVAR____TtCC10FindMyBase17XPCSessionManagerP33_A03603F91824D587CF1B3EB0B5E03C5F18DelegateTrampoline_sessionManager] = v1;
  swift_unownedRetain();
  *(_QWORD *)(v0 + 16) = v3;
  *(_QWORD *)(v0 + 24) = v2;
  v4 = objc_msgSendSuper2((objc_super *)(v0 + 16), sel_init);
  v5 = *(void **)(v1 + 128);
  *(_QWORD *)(v1 + 128) = v4;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 32));
}

uint64_t XPCSessionManager.init(name:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;

  *(_QWORD *)(v3 + 32) = v2;
  swift_defaultActor_initialize();
  v6 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v2 + 128) = 0;
  *(_QWORD *)(v2 + 136) = v6;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_QWORD *)(v2 + 112) = a1;
  *(_QWORD *)(v2 + 120) = a2;
  return swift_task_switch();
}

uint64_t type metadata accessor for XPCSessionManager.DelegateTrampoline()
{
  return objc_opt_self();
}

uint64_t sub_23B55AD28(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v22[14];
  _QWORD v23[17];

  v3 = v1;
  if (qword_2542F9968 != -1)
    swift_once();
  v5 = sub_23B56A060();
  __swift_project_value_buffer(v5, (uint64_t)qword_2542FC390);
  sub_23B500B74(a1, (uint64_t)v23);
  swift_retain();
  v6 = sub_23B56A048();
  v7 = sub_23B56A84C();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc();
    v9 = swift_slowAlloc();
    v23[16] = v2;
    v10 = v9;
    v22[0] = v9;
    *(_DWORD *)v8 = 136446466;
    v11 = v3[14];
    v12 = v3[15];
    swift_bridgeObjectRetain();
    sub_23B5034E4(v11, v12, v22);
    sub_23B56A918();
    swift_bridgeObjectRelease();
    swift_release();
    *(_WORD *)(v8 + 12) = 2082;
    v13 = v23[0];
    v14 = v23[1];
    swift_bridgeObjectRetain();
    sub_23B5034E4(v13, v14, v22);
    sub_23B56A918();
    swift_bridgeObjectRelease();
    sub_23B4FEC00((uint64_t)v23);
    _os_log_impl(&dword_23B4F9000, v6, v7, "XPCSessionManager(%{public}s: Registering Mach Service: [%{public}s]", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v10, -1, -1);
    MEMORY[0x23B867948](v8, -1, -1);
  }
  else
  {
    swift_release();
    sub_23B4FEC00((uint64_t)v23);
  }

  v15 = *a1;
  v16 = a1[1];
  v17 = objc_allocWithZone(MEMORY[0x24BDD1998]);
  swift_bridgeObjectRetain();
  v18 = (void *)sub_23B56A264();
  swift_bridgeObjectRelease();
  v19 = objc_msgSend(v17, sel_initWithMachServiceName_, v18);

  sub_23B500B74(a1, (uint64_t)v23);
  v23[13] = v19;
  sub_23B500C80(v23, (uint64_t)v22);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v20 = v19;
  sub_23B510B3C((uint64_t)v22, v15, v16);
  swift_endAccess();
  objc_msgSend(v20, sel_setDelegate_, v3[16]);
  objc_msgSend(v20, sel_resume);

  return sub_23B4FEC98((uint64_t)v23);
}

void sub_23B55B018()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 v18;
  _OWORD v19[7];
  char v20[8];
  uint64_t v21;
  id v22[14];

  v16 = (_QWORD *)(v0 + 136);
  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 136);
  v17 = v1 + 64;
  v2 = 1 << *(_BYTE *)(v1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(v1 + 64);
  v5 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  v6 = 0;
  if (!v4)
    goto LABEL_8;
LABEL_6:
  v8 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  v9 = v8 | (v6 << 6);
  while (2)
  {
    v10 = *(_QWORD *)(v1 + 56);
    v11 = (_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * v9);
    v12 = v11[1];
    *(_QWORD *)&v18 = *v11;
    *((_QWORD *)&v18 + 1) = v12;
    sub_23B500C80((_QWORD *)(v10 + 112 * v9), (uint64_t)v19);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_23B4FAED4((uint64_t)&v18, (uint64_t)v20, (uint64_t *)&unk_256A2CF08);
      if (!v21)
      {
        swift_release();
        *v16 = MEMORY[0x24BEE4B00];
        swift_bridgeObjectRelease();
        return;
      }
      swift_bridgeObjectRelease();
      v7 = v22[13];
      sub_23B4FEC98((uint64_t)v22);
      objc_msgSend(v7, sel_invalidate);

      if (v4)
        goto LABEL_6;
LABEL_8:
      v13 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v13 < v5)
      {
        v14 = *(_QWORD *)(v17 + 8 * v13);
        if (v14)
          goto LABEL_11;
        v15 = v6 + 2;
        ++v6;
        if (v13 + 1 < v5)
        {
          v14 = *(_QWORD *)(v17 + 8 * v15);
          if (v14)
            goto LABEL_14;
          v6 = v13 + 1;
          if (v13 + 2 < v5)
          {
            v14 = *(_QWORD *)(v17 + 8 * (v13 + 2));
            if (v14)
            {
              v13 += 2;
              goto LABEL_11;
            }
            v15 = v13 + 3;
            v6 = v13 + 2;
            if (v13 + 3 < v5)
              break;
          }
        }
      }
LABEL_25:
      v4 = 0;
      v18 = 0u;
      memset(v19, 0, sizeof(v19));
    }
    v14 = *(_QWORD *)(v17 + 8 * v15);
    if (v14)
    {
LABEL_14:
      v13 = v15;
LABEL_11:
      v4 = (v14 - 1) & v14;
      v9 = __clz(__rbit64(v14)) + (v13 << 6);
      v6 = v13;
      continue;
    }
    break;
  }
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v5)
    {
      v6 = v5 - 1;
      goto LABEL_25;
    }
    v14 = *(_QWORD *)(v17 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_11;
  }
LABEL_29:
  __break(1u);
}

uint64_t sub_23B55B268(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 144);
  *(_QWORD *)(v2 + 144) = a1;
  *(_QWORD *)(v2 + 152) = a2;
  swift_retain();
  return sub_23B50033C(v3);
}

uint64_t sub_23B55B2A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 160);
  *(_QWORD *)(v2 + 160) = a1;
  *(_QWORD *)(v2 + 168) = a2;
  swift_retain();
  return sub_23B50033C(v3);
}

uint64_t XPCSessionManager.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_23B50033C(*(_QWORD *)(v0 + 144));
  sub_23B50033C(*(_QWORD *)(v0 + 160));
  swift_defaultActor_destroy();
  return v0;
}

uint64_t XPCSessionManager.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_23B50033C(*(_QWORD *)(v0 + 144));
  sub_23B50033C(*(_QWORD *)(v0 + 160));
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t XPCSessionManager.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_23B55B36C(uint64_t a1, void *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  uint64_t v12;

  v4 = *v2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FADF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23B56A624();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v2;
  v9[5] = a2;
  v9[6] = v4;
  swift_retain();
  v10 = a2;
  sub_23B55A9E0((uint64_t)v7, (uint64_t)&unk_256A2CF98, (uint64_t)v9);
  swift_release();
  return 1;
}

uint64_t sub_23B55B448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 712) = a5;
  *(_QWORD *)(v5 + 704) = a4;
  return swift_task_switch();
}

uint64_t sub_23B55B4B0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 704);
  swift_beginAccess();
  *(_QWORD *)(v0 + 720) = *(_QWORD *)(v1 + 136);
  swift_bridgeObjectRetain();
  return swift_task_switch();
}

uint64_t sub_23B55B534()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  void *v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(void);
  void *v30;
  uint64_t v31;
  id v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  id v51;
  int *v52;
  uint64_t v53;
  _QWORD *v54;
  void *v55;
  uint64_t v56;
  id v57;
  NSObject *v58;
  os_log_type_t v59;
  _BOOL4 v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  id v67;
  os_log_t log;
  NSObject *loga;
  os_log_type_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  void *aBlock;
  uint64_t v75;
  _OWORD v76[2];
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v1 = objc_msgSend(*(id *)(v0 + 712), sel_serviceName);
  v2 = *(_QWORD *)(v0 + 720);
  if (!v1)
  {
    swift_bridgeObjectRelease();
LABEL_13:
    if (qword_2542F9968 != -1)
      swift_once();
    v19 = sub_23B56A060();
    __swift_project_value_buffer(v19, (uint64_t)qword_2542FC390);
    swift_retain();
    v20 = sub_23B56A048();
    v21 = sub_23B56A834();
    v22 = os_log_type_enabled(v20, v21);
    v23 = *(_QWORD *)(v0 + 704);
    if (v22)
    {
      v24 = (uint8_t *)swift_slowAlloc();
      v25 = swift_slowAlloc();
      *(_QWORD *)&v76[0] = v25;
      *(_DWORD *)v24 = 136446210;
      v27 = *(_QWORD *)(v23 + 112);
      v26 = *(_QWORD *)(v23 + 120);
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 656) = sub_23B5034E4(v27, v26, (uint64_t *)v76);
      sub_23B56A918();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23B4F9000, v20, v21, "XPCSessionManager(%{public}s: Not accepting connection since a service description is not registered", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B867948](v25, -1, -1);
      MEMORY[0x23B867948](v24, -1, -1);

    }
    else
    {

      swift_release();
    }
    objc_msgSend(*(id *)(v0 + 712), sel_invalidate);
    goto LABEL_19;
  }
  v3 = v1;
  v4 = (_OWORD *)(v0 + 16);
  v5 = sub_23B56A288();
  v7 = v6;

  if (*(_QWORD *)(v2 + 16) && (v8 = sub_23B5006C8(v5, v7), (v9 & 1) != 0))
  {
    sub_23B500C80((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 720) + 56) + 112 * v8), v0 + 16);
  }
  else
  {
    *(_OWORD *)(v0 + 96) = 0u;
    *(_OWORD *)(v0 + 112) = 0u;
    *(_OWORD *)(v0 + 64) = 0u;
    *(_OWORD *)(v0 + 80) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    *(_OWORD *)(v0 + 48) = 0u;
    *v4 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v0 + 24))
  {
    sub_23B5043F0(v0 + 16, (uint64_t *)&unk_256A2CFA0);
    goto LABEL_13;
  }
  v10 = *(void **)(v0 + 712);
  v11 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 192) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 208) = v11;
  *(_OWORD *)(v0 + 224) = *(_OWORD *)(v0 + 112);
  v12 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 128) = *v4;
  *(_OWORD *)(v0 + 144) = v12;
  v13 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 160) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 176) = v13;
  sub_23B500B74((_QWORD *)(v0 + 128), v0 + 240);
  sub_23B500680(v0 + 176, v0 + 560);
  objc_msgSend(v10, sel_auditToken);
  v14 = v76[1];
  *(_OWORD *)(v0 + 752) = v76[0];
  *(_OWORD *)(v0 + 768) = v14;
  v15 = xpc_copy_code_signing_identity_for_token();
  if (!v15)
  {
    sub_23B55CB24();
    swift_allocError();
    swift_willThrow();
    sub_23B5043F0(v0 + 560, &qword_2542FAD60);
    sub_23B4FEC98(v0 + 128);
    sub_23B4FEC00(v0 + 240);
    v28 = *(uint64_t (**)(void))(v0 + 8);
    return v28();
  }
  v16 = v15;
  v75 = sub_23B56A3B4();
  v18 = v17;
  MEMORY[0x23B867948](v16, -1, -1);
  sub_23B500680(v0 + 560, v0 + 520);
  if (*(_QWORD *)(v0 + 544))
  {
    sub_23B500D98((__int128 *)(v0 + 520), v0 + 480);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 504));
    if (!NSXPCConnection.hasEntitlement<A>(_:)())
    {
      aBlock = (void *)(v0 + 480);
      objc_msgSend(*(id *)(v0 + 712), sel_invalidate);
      if (qword_2542F9968 != -1)
        swift_once();
      v55 = *(void **)(v0 + 712);
      v56 = sub_23B56A060();
      __swift_project_value_buffer(v56, (uint64_t)qword_2542FC390);
      sub_23B55D080((uint64_t)aBlock, v0 + 440);
      swift_retain_n();
      v57 = v55;
      swift_bridgeObjectRetain();
      v58 = sub_23B56A048();
      v59 = sub_23B56A84C();
      v60 = os_log_type_enabled(v58, v59);
      v61 = *(void **)(v0 + 712);
      v62 = *(_QWORD *)(v0 + 704);
      v63 = v0 + 240;
      if (v60)
      {
        v64 = swift_slowAlloc();
        v73 = (_QWORD *)swift_slowAlloc();
        v71 = swift_slowAlloc();
        *(_QWORD *)&v76[0] = v71;
        *(_DWORD *)v64 = 136446978;
        loga = v58;
        v70 = v59;
        v66 = *(_QWORD *)(v62 + 112);
        v65 = *(_QWORD *)(v62 + 120);
        swift_bridgeObjectRetain();
        *(_QWORD *)(v0 + 664) = sub_23B5034E4(v66, v65, (uint64_t *)v76);
        sub_23B56A918();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v64 + 12) = 2114;
        *(_QWORD *)(v0 + 672) = v61;
        v67 = v61;
        v63 = v0 + 240;
        sub_23B56A918();
        *v73 = v61;

        *(_WORD *)(v64 + 22) = 2080;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v0 + 680) = sub_23B5034E4(v75, v18, (uint64_t *)v76);
        sub_23B56A918();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v64 + 32) = 2080;
        __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 464));
        sub_23B56A4BC();
        *(_QWORD *)(v0 + 696) = sub_23B5034E4(*(_QWORD *)(v0 + 624), *(_QWORD *)(v0 + 632), (uint64_t *)v76);
        sub_23B56A918();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1(v0 + 440);
        _os_log_impl(&dword_23B4F9000, loga, v70, "XPCSessionManager(%{public}s: Ignoring unentitled XPC connection: %{public}@ from %s [Missing %s entitlement]", (uint8_t *)v64, 0x2Au);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2542F99E0);
        swift_arrayDestroy();
        MEMORY[0x23B867948](v73, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x23B867948](v71, -1, -1);
        MEMORY[0x23B867948](v64, -1, -1);

      }
      else
      {

        __swift_destroy_boxed_opaque_existential_1(v0 + 440);
        swift_bridgeObjectRelease_n();
        swift_release_n();

      }
      sub_23B5043F0(v0 + 560, &qword_2542FAD60);
      sub_23B4FEC98(v0 + 128);
      sub_23B4FEC00(v63);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
      goto LABEL_19;
    }
    __swift_destroy_boxed_opaque_existential_1(v0 + 480);
  }
  else
  {
    sub_23B5043F0(v0 + 520, &qword_2542FAD60);
  }
  if (qword_2542F9968 != -1)
    swift_once();
  v30 = *(void **)(v0 + 712);
  v31 = sub_23B56A060();
  __swift_project_value_buffer(v31, (uint64_t)qword_2542FC390);
  swift_retain_n();
  v32 = v30;
  swift_bridgeObjectRetain();
  v33 = sub_23B56A048();
  v34 = sub_23B56A84C();
  v35 = os_log_type_enabled(v33, v34);
  v36 = *(void **)(v0 + 712);
  v37 = *(_QWORD *)(v0 + 704);
  if (v35)
  {
    v38 = swift_slowAlloc();
    log = (os_log_t)swift_slowAlloc();
    v72 = swift_slowAlloc();
    *(_QWORD *)&v76[0] = v72;
    *(_DWORD *)v38 = 136446722;
    v40 = *(_QWORD *)(v37 + 112);
    v39 = *(_QWORD *)(v37 + 120);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 688) = sub_23B5034E4(v40, v39, (uint64_t *)v76);
    sub_23B56A918();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v38 + 12) = 2114;
    *(_QWORD *)(v0 + 640) = v36;
    v41 = v36;
    sub_23B56A918();
    log->isa = (Class)v36;

    *(_WORD *)(v38 + 22) = 2080;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 648) = sub_23B5034E4(v75, v18, (uint64_t *)v76);
    sub_23B56A918();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_23B4F9000, v33, v34, "XPCSessionManager(%{public}s: New XPC connection: %{public}@ from %s", (uint8_t *)v38, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542F99E0);
    swift_arrayDestroy();
    MEMORY[0x23B867948](log, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v72, -1, -1);
    MEMORY[0x23B867948](v38, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  v42 = *(void **)(v0 + 712);
  objc_msgSend(v42, sel_setExportedInterface_, *(_QWORD *)(v0 + 272));
  objc_msgSend(v42, sel_setExportedObject_, *(_QWORD *)(v0 + 264));
  objc_msgSend(v42, sel_setRemoteObjectInterface_, *(_QWORD *)(v0 + 280));
  v43 = swift_allocObject();
  swift_weakInit();
  v44 = swift_allocObject();
  *(_QWORD *)(v44 + 16) = v43;
  *(_QWORD *)(v44 + 24) = v42;
  *(_QWORD *)(v0 + 376) = sub_23B55D000;
  *(_QWORD *)(v0 + 384) = v44;
  v45 = MEMORY[0x24BDAC760];
  *(_QWORD *)(v0 + 344) = MEMORY[0x24BDAC760];
  *(_QWORD *)(v0 + 352) = 1107296256;
  *(_QWORD *)(v0 + 360) = sub_23B5504D8;
  *(_QWORD *)(v0 + 368) = &block_descriptor_2;
  v46 = _Block_copy((const void *)(v0 + 344));
  v47 = v42;
  swift_release();
  objc_msgSend(v47, sel_setInterruptionHandler_, v46);
  _Block_release(v46);
  v48 = swift_allocObject();
  swift_weakInit();
  v49 = swift_allocObject();
  *(_QWORD *)(v49 + 16) = v48;
  *(_QWORD *)(v49 + 24) = v47;
  *(_QWORD *)(v0 + 424) = sub_23B55D058;
  *(_QWORD *)(v0 + 432) = v49;
  *(_QWORD *)(v0 + 392) = v45;
  *(_QWORD *)(v0 + 400) = 1107296256;
  *(_QWORD *)(v0 + 408) = sub_23B5504D8;
  *(_QWORD *)(v0 + 416) = &block_descriptor_17;
  v50 = _Block_copy((const void *)(v0 + 392));
  v51 = v47;
  swift_release();
  objc_msgSend(v51, sel_setInvalidationHandler_, v50);
  _Block_release(v50);
  v52 = *(int **)(v0 + 328);
  *(_QWORD *)(v0 + 728) = v52;
  if (!v52)
  {
    objc_msgSend(*(id *)(v0 + 712), sel_resume);
    sub_23B5043F0(v0 + 560, &qword_2542FAD60);
    sub_23B4FEC98(v0 + 128);
    sub_23B4FEC00(v0 + 240);
LABEL_19:
    v28 = *(uint64_t (**)(void))(v0 + 8);
    return v28();
  }
  *(_QWORD *)(v0 + 736) = *(_QWORD *)(v0 + 336);
  v53 = *v52;
  swift_retain();
  v54 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 744) = v54;
  *v54 = v0;
  v54[1] = sub_23B55C1B8;
  return ((uint64_t (*)(_QWORD))((char *)v52 + v53))(*(_QWORD *)(v0 + 712));
}

uint64_t sub_23B55C1B8(char a1)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 784) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23B55C240()
{
  uint64_t v0;
  int v1;
  char **v2;

  v1 = *(unsigned __int8 *)(v0 + 784);
  sub_23B50033C(*(_QWORD *)(v0 + 728));
  v2 = &selRef_resume;
  if (!v1)
    v2 = &selRef_invalidate;
  objc_msgSend(*(id *)(v0 + 712), *v2);
  sub_23B5043F0(v0 + 560, &qword_2542FAD60);
  sub_23B4FEC98(v0 + 128);
  sub_23B4FEC00(v0 + 240);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void NSXPCConnection.machServiceName.getter(uint64_t *a1@<X8>)
{
  void *v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(v1, sel_serviceName);
  if (v3)
  {
    v4 = v3;
    v5 = sub_23B56A288();
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a1 = v5;
  a1[1] = v7;
}

void *NSXPCConnection.codeSigningIdentity.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;

  objc_msgSend(v0, sel_auditToken);
  v1 = xpc_copy_code_signing_identity_for_token();
  if (v1)
  {
    v2 = v1;
    v0 = (void *)sub_23B56A3B4();
    MEMORY[0x23B867948](v2, -1, -1);
  }
  else
  {
    sub_23B55CB24();
    swift_allocError();
    swift_willThrow();
  }
  return v0;
}

uint64_t sub_23B55C444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch();
}

uint64_t sub_23B55C45C()
{
  uint64_t v0;

  sub_23B55C48C(*(void **)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_23B55C48C(void *a1)
{
  uint64_t v1;
  void (*v3)(void *);
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _QWORD *v8;
  id v9;
  id v10;

  v3 = *(void (**)(void *))(v1 + 144);
  if (v3)
  {
    swift_retain();
    v3(a1);
    sub_23B50033C((uint64_t)v3);
  }
  else
  {
    if (qword_2542F9968 != -1)
      swift_once();
    v4 = sub_23B56A060();
    __swift_project_value_buffer(v4, (uint64_t)qword_2542FC390);
    v10 = a1;
    v5 = sub_23B56A048();
    v6 = sub_23B56A84C();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v7 = 138412290;
      v9 = v10;
      sub_23B56A918();
      *v8 = v10;

      _os_log_impl(&dword_23B4F9000, v5, v6, "Connection interrupted: %@", v7, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542F99E0);
      swift_arrayDestroy();
      MEMORY[0x23B867948](v8, -1, -1);
      MEMORY[0x23B867948](v7, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t sub_23B55C67C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  uint64_t v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FADF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v10 = result;
    v11 = sub_23B56A624();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v8, 1, 1, v11);
    v12 = (_QWORD *)swift_allocObject();
    v12[2] = 0;
    v12[3] = 0;
    v12[4] = v10;
    v12[5] = a2;
    v13 = a2;
    sub_23B515858((uint64_t)v8, a4, (uint64_t)v12);
    return swift_release();
  }
  return result;
}

uint64_t sub_23B55C774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch();
}

uint64_t sub_23B55C78C()
{
  uint64_t v0;

  sub_23B55C7BC(*(void **)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_23B55C7BC(void *a1)
{
  uint64_t v1;
  void (*v3)(void *);
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _QWORD *v8;
  id v9;
  id v10;

  v3 = *(void (**)(void *))(v1 + 160);
  if (v3)
  {
    swift_retain();
    v3(a1);
    sub_23B50033C((uint64_t)v3);
  }
  else
  {
    if (qword_2542F9968 != -1)
      swift_once();
    v4 = sub_23B56A060();
    __swift_project_value_buffer(v4, (uint64_t)qword_2542FC390);
    v10 = a1;
    v5 = sub_23B56A048();
    v6 = sub_23B56A84C();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v7 = 138412290;
      v9 = v10;
      sub_23B56A918();
      *v8 = v10;

      _os_log_impl(&dword_23B4F9000, v5, v6, "Connection invalidated: %@", v7, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542F99E0);
      swift_arrayDestroy();
      MEMORY[0x23B867948](v8, -1, -1);
      MEMORY[0x23B867948](v7, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t sub_23B55C9AC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v5 = *v0;
  v1 = sub_23B504550((uint64_t)&v5, (uint64_t)&v6);
  v3 = v2;
  sub_23B504710(v1, v2);
  return sub_23B504944(v1, v3);
}

id sub_23B55CA64()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_23B55CAA8()
{
  uint64_t v0;

  v0 = sub_23B56A060();
  __swift_allocate_value_buffer(v0, qword_2542FC3C0);
  __swift_project_value_buffer(v0, (uint64_t)qword_2542FC3C0);
  return sub_23B56A054();
}

unint64_t sub_23B55CB24()
{
  unint64_t result;

  result = qword_2542F9950;
  if (!qword_2542F9950)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for XPCSessionError, &type metadata for XPCSessionError);
    atomic_store(result, (unint64_t *)&qword_2542F9950);
  }
  return result;
}

uint64_t type metadata accessor for XPCSessionManager()
{
  return objc_opt_self();
}

uint64_t method lookup function for XPCSessionManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of XPCSessionManager.__allocating_init(name:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v2 + 224) + *(_QWORD *)(v2 + 224));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_23B4FC004;
  return v8(a1, a2);
}

uint64_t dispatch thunk of XPCSessionManager.register(service:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of XPCSessionManager.invalidate()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of XPCSessionManager.setInterruptionHandler(block:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of XPCSessionManager.setInvalidationHandler(block:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t assignWithCopy for XPCSessionManager.ListenerRecord(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(void **)(a1 + 24);
  v5 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = v5;

  v7 = *(void **)(a1 + 32);
  v8 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  v9 = v8;

  v10 = *(void **)(a1 + 40);
  v11 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v11;
  v12 = v11;

  v13 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    if (v13)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
      goto LABEL_8;
    }
    __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  }
  else if (v13)
  {
    *(_QWORD *)(a1 + 72) = v13;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 48, a2 + 48);
    goto LABEL_8;
  }
  v14 = *(_OWORD *)(a2 + 48);
  v15 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v14;
  *(_OWORD *)(a1 + 64) = v15;
LABEL_8:
  v16 = *(_QWORD *)(a2 + 88);
  if (!*(_QWORD *)(a1 + 88))
  {
    if (v16)
    {
      v18 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 88) = v16;
      *(_QWORD *)(a1 + 96) = v18;
      swift_retain();
      goto LABEL_15;
    }
LABEL_14:
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    goto LABEL_15;
  }
  if (!v16)
  {
    swift_release();
    goto LABEL_14;
  }
  v17 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v16;
  *(_QWORD *)(a1 + 96) = v17;
  swift_retain();
  swift_release();
LABEL_15:
  v19 = *(void **)(a2 + 104);
  v20 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v19;
  v21 = v19;

  return a1;
}

__n128 __swift_memcpy112_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t assignWithTake for XPCSessionManager.ListenerRecord(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(void **)(a1 + 24);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;

  v7 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);

  v8 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);

  if (*(_QWORD *)(a1 + 72))
    __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  v9 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v10 = *(_QWORD *)(a2 + 88);
  if (!*(_QWORD *)(a1 + 88))
  {
    if (v10)
    {
      v12 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 88) = v10;
      *(_QWORD *)(a1 + 96) = v12;
      goto LABEL_10;
    }
LABEL_9:
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    goto LABEL_10;
  }
  if (!v10)
  {
    swift_release();
    goto LABEL_9;
  }
  v11 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v10;
  *(_QWORD *)(a1 + 96) = v11;
  swift_release();
LABEL_10:
  v13 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);

  return a1;
}

uint64_t getEnumTagSinglePayload for XPCSessionManager.ListenerRecord(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCSessionManager.ListenerRecord(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCSessionManager.ListenerRecord()
{
  return &type metadata for XPCSessionManager.ListenerRecord;
}

uint64_t sub_23B55CF70()
{
  return objectdestroyTm_0();
}

uint64_t sub_23B55CF78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_23B4FAC98;
  *(_OWORD *)(v2 + 704) = v3;
  return swift_task_switch();
}

uint64_t sub_23B55CFD8()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_23B55D000()
{
  uint64_t v0;

  return sub_23B55C67C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), (uint64_t)&unk_250C7E110, (uint64_t)&unk_256A2CFC8);
}

uint64_t objectdestroy_9Tm()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_23B55D058()
{
  uint64_t v0;

  return sub_23B55C67C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), (uint64_t)&unk_250C7E0E8, (uint64_t)&unk_256A2CFB8);
}

uint64_t sub_23B55D080(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_23B55D0C4()
{
  return objectdestroyTm_0();
}

uint64_t sub_23B55D0CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_23B4FAC98;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch();
}

uint64_t sub_23B55D12C()
{
  return objectdestroyTm_0();
}

uint64_t sub_23B55D134()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_23B4FACE0;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch();
}

uint64_t sub_23B55D19C()
{
  uint64_t v0;

  v0 = sub_23B56A060();
  __swift_allocate_value_buffer(v0, qword_2542FC458);
  __swift_project_value_buffer(v0, (uint64_t)qword_2542FC458);
  return sub_23B56A054();
}

void sub_23B55D204(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_23B569E74();
  MEMORY[0x24BDAC7A8](v3);
  sub_23B4FC788(0xD000000000000010, 0x800000023B56B910);
  __asm { BR              X9 }
}

uint64_t sub_23B55D2A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  __int16 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int16 v16;
  unint64_t v17;

  if (BYTE6(v3) + 0x4000000000000000 < 0)
    goto LABEL_17;
  v7 = sub_23B4FC220(0, (2 * BYTE6(v3)) & ~((2 * BYTE6(v3)) >> 63), 0, MEMORY[0x24BEE4AF8]);
  if (v5)
  {
    sub_23B502434(v4, v3);
    sub_23B502434(v4, v3);
  }
  sub_23B569E80();
  sub_23B504944(v4, v3);
  sub_23B4FCC20(&qword_2542F9870, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDD78], MEMORY[0x24BDCDD80]);
  sub_23B56A90C();
  if ((*(_BYTE *)(v6 - 81) & 1) == 0)
  {
    v10 = *(unsigned __int8 *)(v6 - 82);
    v11 = v2 + 32;
    while (v10 >> 4 < *(_QWORD *)(v2 + 16))
    {
      v12 = *(_WORD *)(v11 + 2 * (v10 >> 4));
      v14 = *((_QWORD *)v7 + 2);
      v13 = *((_QWORD *)v7 + 3);
      v15 = v14 + 1;
      if (v14 >= v13 >> 1)
        v7 = sub_23B4FC220((char *)(v13 > 1), v14 + 1, 1, v7);
      *((_QWORD *)v7 + 2) = v15;
      *(_WORD *)&v7[2 * v14 + 32] = v12;
      if ((v10 & 0xF) >= *(_QWORD *)(v2 + 16))
        goto LABEL_16;
      v16 = *(_WORD *)(v11 + 2 * (v10 & 0xF));
      v17 = *((_QWORD *)v7 + 3);
      if ((uint64_t)(v14 + 2) > (uint64_t)(v17 >> 1))
        v7 = sub_23B4FC220((char *)(v17 > 1), v14 + 2, 1, v7);
      *((_QWORD *)v7 + 2) = v14 + 2;
      *(_WORD *)&v7[2 * v15 + 32] = v16;
      sub_23B56A90C();
      v10 = *(unsigned __int8 *)(v6 - 82);
      if (*(_BYTE *)(v6 - 81) == 1)
        goto LABEL_5;
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    JUMPOUT(0x23B55D4E4);
  }
LABEL_5:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 96) + 8))(v1, v0);
  swift_release();
  v8 = sub_23B56A258();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t static MACAddress.length.getter()
{
  return 6;
}

uint64_t MACAddress.AddressType.description.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6D6F646E61722ELL;
  else
    return 0x63696C6275702ELL;
}

FindMyBase::MACAddress::AddressType_optional __swiftcall MACAddress.AddressType.init(rawValue:)(Swift::UInt8 rawValue)
{
  FindMyBase::MACAddress::AddressType_optional v1;

  if (rawValue == 1)
    v1.value = FindMyBase_MACAddress_AddressType_random;
  else
    v1.value = FindMyBase_MACAddress_AddressType_unknownDefault;
  if (rawValue)
    return v1;
  else
    return 0;
}

uint64_t MACAddress.AddressType.rawValue.getter(char a1)
{
  return a1 & 1;
}

uint64_t sub_23B55D558()
{
  sub_23B55FBC8();
  return sub_23B56A510();
}

uint64_t sub_23B55D5B4()
{
  sub_23B55FBC8();
  return sub_23B56A4EC();
}

uint64_t sub_23B55D600()
{
  _BYTE *v0;

  if (*v0)
    return 0x6D6F646E61722ELL;
  else
    return 0x63696C6275702ELL;
}

uint64_t MACAddress.data.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_23B502434(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t MACAddress.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *v0;
  v2 = v0[1];
  sub_23B502434(*v0, v2);
  sub_23B55D204(v1, v2);
  sub_23B504944(v1, v2);
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  sub_23B56A3A8();
  sub_23B56A3A8();
  return 60;
}

uint64_t MACAddress.hexString.getter()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  v2 = v0[1];
  sub_23B502434(v1, v2);
  sub_23B55D204(v1, v2);
  v4 = v3;
  sub_23B504944(v1, v2);
  return v4;
}

uint64_t MACAddress.type.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

void MACAddress.init(addressToSanitize:type:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_23B55D7F8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;

  if (BYTE6(v1) == 6)
  {
    sub_23B502434(v2, v1);
    sub_23B569E98();
    sub_23B569E08();
    __asm { BR              X10 }
  }
  result = sub_23B504944(v2, v1);
  *(_QWORD *)v0 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_BYTE *)(v0 + 16) = 2;
  return result;
}

void MACAddress.init(data:type:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_23B55D984@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, char a3@<W8>)
{
  uint64_t v3;

  if (BYTE6(a2) == 6)
  {
    *(_QWORD *)v3 = result;
    *(_QWORD *)(v3 + 8) = a2;
  }
  else
  {
    result = sub_23B504944(result, a2);
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    a3 = 2;
  }
  *(_BYTE *)(v3 + 16) = a3;
  return result;
}

double MACAddress.init(string:type:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4;
  double result;
  __int128 v6;
  char v7;

  sub_23B55DA3C(a1, a2, (uint64_t)&v6);
  swift_bridgeObjectRelease();
  v4 = v7;
  result = *(double *)&v6;
  *(_OWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = v4;
  return result;
}

uint64_t sub_23B55DA3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t result;
  void (*v17)(char *, uint64_t);
  _QWORD v18[2];

  v6 = sub_23B569BE0();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v18 - v11;
  sub_23B569BC8();
  sub_23B569BD4();
  if (a2)
  {
    v18[0] = a1;
    v18[1] = a2;
    sub_23B506358();
    v18[0] = sub_23B56A930();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9B58);
    sub_23B506D60();
    sub_23B56A204();
    swift_bridgeObjectRelease();
    if (sub_23B56A378() == 12)
    {
      v13 = sub_23B509D24();
      if (v14 >> 60 != 15)
      {
        MACAddress.init(data:type:)(v13, v14);
        v15 = *(void (**)(char *, uint64_t))(v7 + 8);
        v15(v9, v6);
        return ((uint64_t (*)(char *, uint64_t))v15)(v12, v6);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v9, v6);
  result = ((uint64_t (*)(char *, uint64_t))v17)(v12, v6);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 2;
  return result;
}

uint64_t MACAddress.init(stringLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  char v13;

  swift_bridgeObjectRetain();
  sub_23B509D24();
  if (v6 >> 60 != 15)
    __asm { BR              X10 }
  swift_bridgeObjectRetain();
  sub_23B55DA3C(a1, a2, (uint64_t)&v11);
  swift_bridgeObjectRelease();
  v7 = v13;
  if (v13 == 2)
  {
    v11 = 0;
    v12 = 0xE000000000000000;
    sub_23B56AA68();
    sub_23B56A3A8();
    sub_23B56A3A8();
    sub_23B56A3A8();
    sub_23B56AC24();
    __break(1u);
    JUMPOUT(0x23B55DDA8);
  }
  v9 = v11;
  v8 = v12;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v8;
  *(_BYTE *)(a3 + 16) = v7 & 1;
  return result;
}

void MACAddress.bluetoothAddress.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8) >> 62;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9898);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_23B56F770;
  __asm { BR              X8 }
}

uint64_t MACAddress.bluetoothAddressWithType.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(v0 + 16);
  sub_23B569E5C();
  return v2;
}

uint64_t MACAddress.udid.getter()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  MACAddress.bluetoothAddress.getter();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  v0 = String.utf8Data.getter();
  v2 = v1;
  swift_bridgeObjectRelease();
  sub_23B504988(v0, v2);
  v4 = v3;
  v6 = v5;
  sub_23B504944(v0, v2);
  sub_23B502434(v4, v6);
  sub_23B55D204(v4, v6);
  sub_23B504944(v4, v6);
  v7 = sub_23B56A30C();
  swift_bridgeObjectRelease();
  sub_23B504944(v4, v6);
  return v7;
}

void MACAddress.isNull.getter()
{
  uint64_t v1;

  v1 = sub_23B569E74();
  MEMORY[0x24BDAC7A8](v1);
  __asm { BR              X10 }
}

uint64_t sub_23B55E2F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_23B502434(v2, v3);
  sub_23B502434(v2, v3);
  sub_23B502434(v2, v3);
  sub_23B569E80();
  sub_23B504944(v2, v3);
  sub_23B4FCC20(&qword_2542F9870, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDD78], MEMORY[0x24BDCDD80]);
  do
  {
    sub_23B56A90C();
    v6 = *(unsigned __int8 *)(v5 - 65);
  }
  while ((v6 & 1) == 0 && !*(_BYTE *)(v5 - 66));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v0);
  sub_23B504944(v2, v3);
  return v6;
}

uint64_t MACAddress.dataRepresentation.getter()
{
  uint64_t v0;

  sub_23B569BBC();
  swift_allocObject();
  sub_23B569BB0();
  sub_23B55F534();
  v0 = sub_23B569BA4();
  swift_release();
  return v0;
}

double MACAddress.init(dataRepresentation:)@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  double result;
  __int128 v8;
  char v9;

  sub_23B569B98();
  swift_allocObject();
  sub_23B569B8C();
  sub_23B55F578();
  sub_23B569B80();
  sub_23B504944(a1, a2);
  swift_release();
  if (!v3)
  {
    result = *(double *)&v8;
    *(_OWORD *)a3 = v8;
    *(_BYTE *)(a3 + 16) = v9;
  }
  return result;
}

uint64_t MACAddress.hash(into:)()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *v0;
  v2 = v0[1];
  sub_23B502434(*v0, v2);
  sub_23B569E38();
  sub_23B504944(v1, v2);
  return sub_23B56AE7C();
}

uint64_t static MACAddress.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;

  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = *(unsigned __int8 *)(a2 + 16);
  sub_23B55F2AC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return v4 & ~(v2 ^ v3) & 1;
}

uint64_t sub_23B55E758()
{
  _BYTE *v0;

  if (*v0)
    return 1701869940;
  else
    return 1635017060;
}

uint64_t sub_23B55E77C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23B55FAF8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23B55E7A0()
{
  sub_23B55F5BC();
  return sub_23B56AF78();
}

uint64_t sub_23B55E7C8()
{
  sub_23B55F5BC();
  return sub_23B56AF84();
}

uint64_t MACAddress.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2CFE0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v7 = v1[1];
  v14 = *((unsigned __int8 *)v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23B55F5BC();
  sub_23B56AEC4();
  v12 = v8;
  v13 = v7;
  v15 = 0;
  sub_23B533FE4();
  v9 = v11[1];
  sub_23B56AD14();
  if (!v9)
  {
    LOBYTE(v12) = v14;
    v15 = 1;
    sub_23B55F600();
    sub_23B56AD14();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t MACAddress.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *v0;
  v2 = v0[1];
  sub_23B56AE64();
  sub_23B502434(v1, v2);
  sub_23B569E38();
  sub_23B504944(v1, v2);
  sub_23B56AE7C();
  return sub_23B56AE88();
}

uint64_t MACAddress.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v13;
  unint64_t v14;
  char v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2CFF8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23B55F5BC();
  sub_23B56AEAC();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v15 = 0;
  sub_23B534198();
  sub_23B56ACCC();
  v9 = v13;
  v10 = v14;
  v15 = 1;
  sub_23B502434(v13, v14);
  sub_23B55F644();
  sub_23B56ACCC();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v11 = v13;
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = v11;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_23B504944(v9, v10);
}

uint64_t sub_23B55EB68@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return MACAddress.init(from:)(a1, a2);
}

uint64_t sub_23B55EB7C(_QWORD *a1)
{
  return MACAddress.encode(to:)(a1);
}

uint64_t sub_23B55EB90()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *v0;
  v2 = v0[1];
  sub_23B56AE64();
  sub_23B502434(v1, v2);
  sub_23B569E38();
  sub_23B504944(v1, v2);
  sub_23B56AE7C();
  return sub_23B56AE88();
}

uint64_t sub_23B55EC08()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *v0;
  v2 = v0[1];
  sub_23B502434(*v0, v2);
  sub_23B569E38();
  sub_23B504944(v1, v2);
  return sub_23B56AE7C();
}

uint64_t sub_23B55EC68()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *v0;
  v2 = v0[1];
  sub_23B56AE64();
  sub_23B502434(v1, v2);
  sub_23B569E38();
  sub_23B504944(v1, v2);
  sub_23B56AE7C();
  return sub_23B56AE88();
}

uint64_t sub_23B55ECE0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return MACAddress.init(stringLiteral:)(*a1, a1[1], a2);
}

double sub_23B55ECF0@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  double result;
  __int128 v8;
  char v9;

  sub_23B569B98();
  swift_allocObject();
  sub_23B569B8C();
  sub_23B55F578();
  sub_23B569B80();
  sub_23B504944(a1, a2);
  swift_release();
  if (!v3)
  {
    result = *(double *)&v8;
    *(_OWORD *)a3 = v8;
    *(_BYTE *)(a3 + 16) = v9;
  }
  return result;
}

uint64_t sub_23B55EDB8(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;

  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = *(unsigned __int8 *)(a2 + 16);
  sub_23B55F2AC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return v4 & ~(v2 ^ v3) & 1;
}

void sub_23B55EDF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_23B55EE58(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x23B55F03CLL);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_23B55F060(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_23B569C40();
  if (!result || (result = sub_23B569C64(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_23B569C58();
      sub_23B56A138();
      sub_23B4FCC20(&qword_2542F9A20, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
      return sub_23B56A0CC();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_23B55F124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_23B55EDF8((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_23B55F1F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = sub_23B569C40();
  v11 = result;
  if (result)
  {
    result = sub_23B569C64();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = sub_23B569C58();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_23B55EDF8(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_23B55F2AC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_23B55F2F8()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_23B55F32C + dword_23B55F504[v0 >> 62]))();
}

uint64_t sub_23B55F33C@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

unint64_t sub_23B55F534()
{
  unint64_t result;

  result = qword_256A2CFD0;
  if (!qword_256A2CFD0)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for MACAddress, &type metadata for MACAddress);
    atomic_store(result, (unint64_t *)&qword_256A2CFD0);
  }
  return result;
}

unint64_t sub_23B55F578()
{
  unint64_t result;

  result = qword_256A2CFD8;
  if (!qword_256A2CFD8)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for MACAddress, &type metadata for MACAddress);
    atomic_store(result, (unint64_t *)&qword_256A2CFD8);
  }
  return result;
}

unint64_t sub_23B55F5BC()
{
  unint64_t result;

  result = qword_256A2CFE8;
  if (!qword_256A2CFE8)
  {
    result = MEMORY[0x23B867894](&unk_23B5737A0, &type metadata for MACAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2CFE8);
  }
  return result;
}

unint64_t sub_23B55F600()
{
  unint64_t result;

  result = qword_256A2CFF0;
  if (!qword_256A2CFF0)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for MACAddress.AddressType, &type metadata for MACAddress.AddressType);
    atomic_store(result, (unint64_t *)&qword_256A2CFF0);
  }
  return result;
}

unint64_t sub_23B55F644()
{
  unint64_t result;

  result = qword_256A2D000;
  if (!qword_256A2D000)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for MACAddress.AddressType, &type metadata for MACAddress.AddressType);
    atomic_store(result, (unint64_t *)&qword_256A2D000);
  }
  return result;
}

unint64_t sub_23B55F68C()
{
  unint64_t result;

  result = qword_256A2D008;
  if (!qword_256A2D008)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for MACAddress.AddressType, &type metadata for MACAddress.AddressType);
    atomic_store(result, (unint64_t *)&qword_256A2D008);
  }
  return result;
}

unint64_t sub_23B55F6D4()
{
  unint64_t result;

  result = qword_256A2D010;
  if (!qword_256A2D010)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for MACAddress, &type metadata for MACAddress);
    atomic_store(result, (unint64_t *)&qword_256A2D010);
  }
  return result;
}

unint64_t sub_23B55F71C()
{
  unint64_t result;

  result = qword_256A2D018;
  if (!qword_256A2D018)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for MACAddress, &type metadata for MACAddress);
    atomic_store(result, (unint64_t *)&qword_256A2D018);
  }
  return result;
}

unint64_t sub_23B55F764()
{
  unint64_t result;

  result = qword_256A2D020;
  if (!qword_256A2D020)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for MACAddress, &type metadata for MACAddress);
    atomic_store(result, (unint64_t *)&qword_256A2D020);
  }
  return result;
}

uint64_t destroy for MACAddress(uint64_t a1)
{
  return sub_23B504944(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t _s10FindMyBase10MACAddressVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_23B502434(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for MACAddress(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_23B502434(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_23B504944(v6, v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for MACAddress(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_23B504944(v4, v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for MACAddress(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for MACAddress(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for MACAddress()
{
  return &type metadata for MACAddress;
}

ValueMetadata *type metadata accessor for MACAddress.AddressType()
{
  return &type metadata for MACAddress.AddressType;
}

uint64_t _s10FindMyBase10MACAddressV11AddressTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23B55F9A0 + 4 * byte_23B5733ED[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23B55F9D4 + 4 * byte_23B5733E8[v4]))();
}

uint64_t sub_23B55F9D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23B55F9DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23B55F9E4);
  return result;
}

uint64_t sub_23B55F9F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23B55F9F8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23B55F9FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23B55FA04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MACAddress.CodingKeys()
{
  return &type metadata for MACAddress.CodingKeys;
}

unint64_t sub_23B55FA24()
{
  unint64_t result;

  result = qword_256A2D028;
  if (!qword_256A2D028)
  {
    result = MEMORY[0x23B867894](&unk_23B573778, &type metadata for MACAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2D028);
  }
  return result;
}

unint64_t sub_23B55FA6C()
{
  unint64_t result;

  result = qword_256A2D030;
  if (!qword_256A2D030)
  {
    result = MEMORY[0x23B867894](&unk_23B5736E8, &type metadata for MACAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2D030);
  }
  return result;
}

unint64_t sub_23B55FAB4()
{
  unint64_t result;

  result = qword_256A2D038;
  if (!qword_256A2D038)
  {
    result = MEMORY[0x23B867894](&unk_23B573710, &type metadata for MACAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256A2D038);
  }
  return result;
}

uint64_t sub_23B55FAF8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1635017060 && a2 == 0xE400000000000000;
  if (v2 || (sub_23B56AD98() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23B56AD98();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_23B55FBC8()
{
  unint64_t result;

  result = qword_256A2D040;
  if (!qword_256A2D040)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for MACAddress.AddressType, &type metadata for MACAddress.AddressType);
    atomic_store(result, (unint64_t *)&qword_256A2D040);
  }
  return result;
}

uint64_t sub_23B55FC14(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  void (*v15)(char *, char *, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t result;
  char *v34;
  char *v35;
  char *v36;
  _QWORD v37[2];
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v40 = a8;
  v41 = a5;
  v9 = v8;
  v53 = a4;
  v54 = a1;
  v55 = a2;
  v39 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v52 = (char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v51 = (char *)v37 - v12;
  v45 = v13;
  v15 = v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v38 = (char *)v37 - v18;
  v19 = sub_23B56A900();
  v42 = *(_QWORD *)(v19 - 8);
  v43 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v49 = (char *)v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)v37 - v22;
  MEMORY[0x24BDAC7A8](v24);
  v37[1] = (char *)v37 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v48 = *((_QWORD *)v15 - 1);
  MEMORY[0x24BDAC7A8](v27);
  v47 = (char *)v37 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = swift_getAssociatedTypeWitness();
  v44 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v46 = (char *)v37 - v29;
  v30 = v15;
  v31 = sub_23B56A474();
  v57 = sub_23B56A150();
  v53 = sub_23B56AB1C();
  sub_23B56AAF8();
  (*(void (**)(char *, _QWORD, _QWORD *))(v48 + 16))(v47, v50, v15);
  v32 = v46;
  v50 = v30;
  result = sub_23B56A468();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v31)
  {
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      sub_23B56A90C();
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v23, 1, AssociatedTypeWitness);
      if ((_DWORD)result == 1)
        goto LABEL_18;
      v54(v23, v52);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v52, v41);
        return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v23, AssociatedTypeWitness);
      }
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v23, AssociatedTypeWitness);
      sub_23B56AB04();
      if (!--v31)
      {
        v34 = v49;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  v34 = v49;
LABEL_9:
  sub_23B56A90C();
  v52 = *(char **)(v17 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v52)(v34, 1, AssociatedTypeWitness) == 1)
  {
    v35 = v49;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v35, v43);
    return v57;
  }
  else
  {
    v50 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v36 = v38;
    v35 = v49;
    while (1)
    {
      v50(v36, v35, AssociatedTypeWitness);
      v54(v36, v51);
      if (v9)
        break;
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v36, AssociatedTypeWitness);
      sub_23B56AB04();
      sub_23B56A90C();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v52)(v35, 1, AssociatedTypeWitness) == 1)
        goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v36, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v51, v41);
  }
}

uint64_t Array<A>.uniqued()()
{
  uint64_t v0;
  uint64_t v1;

  sub_23B56A168();
  v0 = sub_23B56A5A0();
  swift_bridgeObjectRetain();
  MEMORY[0x23B867894](MEMORY[0x24BEE12F0], v0);
  v1 = sub_23B56AAEC();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_23B5601CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  char v11;
  _QWORD v13[2];

  v4 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v13 - v9;
  (*(void (**)(char *, double))(v4 + 16))(v6, v8);
  sub_23B56A7BC();
  v11 = sub_23B56A7A4();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v10, a3);
  return v11 & 1;
}

uint64_t sub_23B5602A8(uint64_t a1)
{
  uint64_t v1;

  return sub_23B5601CC(a1, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t Array<A>.mean.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v23 = a3;
  v25 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v24 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v22 - v10;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v22 - v13;
  v26 = a1;
  v15 = sub_23B56A5A0();
  MEMORY[0x23B867894](MEMORY[0x24BEE12E0], v15);
  result = sub_23B56A7EC();
  if ((result & 1) == 0)
  {
    v22 = a1;
    v26 = a1;
    swift_getAssociatedConformanceWitness();
    sub_23B56ADD4();
    v17 = sub_23B56AD80();
    v18 = MEMORY[0x24BDAC7A8](v17);
    v19 = v23;
    *(&v22 - 4) = a2;
    *(&v22 - 3) = v19;
    *(&v22 - 2) = a2;
    MEMORY[0x23B867894](MEMORY[0x24BEE12C8], v15, v18);
    sub_23B56A4A4();
    v20 = v24;
    v21 = *(void (**)(char *, uint64_t))(v24 + 8);
    v21(v11, a2);
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v8, v14, a2);
    if (sub_23B56A9B4() < 65)
    {
      sub_23B56A9C0();
      sub_23B56A9A8();
    }
    else
    {
      sub_23B50E6A0();
      sub_23B50E6E4();
      sub_23B56A174();
    }
    v21(v8, a2);
    MEMORY[0x23B86685C](v22, a2);
    return ((uint64_t (*)(char *, uint64_t))v21)(v14, a2);
  }
  return result;
}

uint64_t sub_23B5605DC()
{
  return sub_23B56AC30();
}

uint64_t Array.chunked(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD v11[10];

  result = MEMORY[0x23B86685C](a2, a3);
  if (a1)
  {
    v11[7] = 0;
    v11[8] = result;
    v11[9] = a1;
    MEMORY[0x24BDAC7A8](result);
    v11[2] = a3;
    v11[3] = a2;
    v11[4] = a1;
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256A2D048);
    v8 = sub_23B56A5A0();
    v9 = sub_23B5607D4();
    return sub_23B55FC14((void (*)(char *, char *))sub_23B5607B4, (uint64_t)v11, v7, v8, MEMORY[0x24BEE4078], v9, MEMORY[0x24BEE40A8], v10);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t *sub_23B5606F0@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t **a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;

  v5 = *result;
  v6 = *result + a3;
  if (__OFADD__(*result, a3))
  {
    __break(1u);
  }
  else
  {
    result = (uint64_t *)MEMORY[0x23B86685C](a2, a4);
    if ((uint64_t)result >= v6)
      v8 = (_QWORD *)v6;
    else
      v8 = result;
    if ((uint64_t)v8 >= v5)
    {
      sub_23B56A5B8();
      v9 = sub_23B56A9E4();
      MEMORY[0x23B867894](MEMORY[0x24BEE2180], v9);
      result = (uint64_t *)sub_23B56A5AC();
      *a5 = result;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t *sub_23B5607B4@<X0>(uint64_t *a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t *v2;

  return sub_23B5606F0(a1, v2[3], v2[4], v2[2], a2);
}

unint64_t sub_23B5607D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256A2D050;
  if (!qword_256A2D050)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256A2D048);
    result = MEMORY[0x23B867894](MEMORY[0x24BEE49C8], v1);
    atomic_store(result, (unint64_t *)&qword_256A2D050);
  }
  return result;
}

uint64_t Array<A>.data.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_bridgeObjectRetain();
  v1 = sub_23B50D1E4(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t Array<A>.dataRepresentation.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  sub_23B569BBC();
  swift_allocObject();
  sub_23B569BB0();
  v5 = sub_23B56A5A0();
  v8 = a4;
  MEMORY[0x23B867894](MEMORY[0x24BEE12A0], v5, &v8);
  v6 = sub_23B569BA4();
  swift_release();
  return v6;
}

uint64_t Array<A>.init(dataRepresentation:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  sub_23B569B98();
  swift_allocObject();
  sub_23B569B8C();
  v8 = sub_23B56A5A0();
  v10[0] = a4;
  MEMORY[0x23B867894](MEMORY[0x24BEE12D0], v8, v10);
  sub_23B569B80();
  sub_23B504944(a1, a2);
  result = swift_release();
  if (!v4)
    return v10[1];
  return result;
}

uint64_t sub_23B560AE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return Array<A>.dataRepresentation.getter(*v3, *(_QWORD *)(a1 + 16), a3, *(_QWORD *)(a2 - 16));
}

uint64_t sub_23B560AF4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t result;

  result = Array<A>.init(dataRepresentation:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
  if (!v5)
    *a5 = result;
  return result;
}

uint64_t sub_23B560B24()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

uint64_t sub_23B560B98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char v9;
  int *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  sub_23B56A5A0();
  sub_23B56A57C();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v1 == MEMORY[0x23B866880](v5, v4))
  {
    swift_bridgeObjectRelease();
    v6 = *(_QWORD *)(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
  }
  v8 = *(_QWORD *)(v0 + 128);
  v9 = sub_23B56A564();
  sub_23B56A540();
  if ((v9 & 1) != 0)
  {
    result = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(*(_QWORD *)(v0 + 88) + 16))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 48)+ ((*(unsigned __int8 *)(*(_QWORD *)(v0 + 88) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v0 + 88) + 80))+ *(_QWORD *)(*(_QWORD *)(v0 + 88) + 72) * v8, *(_QWORD *)(v0 + 56));
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 96);
    result = sub_23B56AAA4();
    if (v12 != 8)
      goto LABEL_10;
    v13 = *(_QWORD *)(v0 + 112);
    v14 = *(_QWORD *)(v0 + 88);
    v15 = *(_QWORD *)(v0 + 56);
    *(_QWORD *)(v0 + 24) = result;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v0 + 24, v15);
    result = swift_unknownObjectRelease();
  }
  *(_QWORD *)(v0 + 128) = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    v10 = *(int **)(v0 + 32);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 32))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 56));
    v16 = (int *)((char *)v10 + *v10);
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v11;
    *v11 = v0;
    v11[1] = sub_23B560B24;
    return ((uint64_t (*)(_QWORD, _QWORD))v16)(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 104));
  }
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_23B560D94()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 56));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Array.asyncStream()(uint64_t a1, uint64_t a2)
{
  return sub_23B560FC4(a1, a2);
}

uint64_t sub_23B560E04()
{
  uint64_t v0;

  v0 = sub_23B56A5A0();
  MEMORY[0x23B867894](MEMORY[0x24BEE12C8], v0);
  sub_23B56A4B0();
  sub_23B56A678();
  return sub_23B56A66C();
}

uint64_t Array.asyncThrowingStream()(uint64_t a1, uint64_t a2)
{
  return sub_23B561174(a1, a2);
}

uint64_t sub_23B560E9C()
{
  uint64_t v0;

  v0 = sub_23B56A5A0();
  MEMORY[0x23B867894](MEMORY[0x24BEE12C8], v0);
  sub_23B56A4B0();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542FAD88);
  sub_23B56A750();
  return sub_23B56A744();
}

uint64_t sub_23B560F4C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *MEMORY[0x24BEE6CA0];
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542FAD88);
  v3 = sub_23B56A72C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t Array.infiniteAsyncStream()(uint64_t a1, uint64_t a2)
{
  return sub_23B560FC4(a1, a2);
}

uint64_t sub_23B560FC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[16];
  uint64_t v10;
  uint64_t v11;

  v4 = sub_23B56A654();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v10 = a2;
  v11 = a1;
  (*(void (**)(_BYTE *, _QWORD, double))(v6 + 104))(&v9[-v7], *MEMORY[0x24BEE6A10], v5);
  return sub_23B56A69C();
}

uint64_t sub_23B561070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  _QWORD v14[2];

  v5 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23B56A63C();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v7, a1, a3, v10);
  sub_23B56A678();
  sub_23B56A660();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t Array.infiniteAsyncThrowingStream()(uint64_t a1, uint64_t a2)
{
  return sub_23B561174(a1, a2);
}

uint64_t sub_23B561174(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[16];
  uint64_t v8;
  uint64_t v9;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542FAD88);
  v4 = sub_23B56A72C();
  MEMORY[0x24BDAC7A8](v4);
  v8 = a2;
  v9 = a1;
  sub_23B560F4C((uint64_t)&v7[-v5]);
  return sub_23B56A75C();
}

uint64_t sub_23B56122C()
{
  uint64_t v0;

  v0 = sub_23B56A5A0();
  MEMORY[0x23B867894](MEMORY[0x24BEE12C8], v0);
  return sub_23B56A4B0();
}

uint64_t sub_23B56129C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  _QWORD v14[2];

  v14[1] = a2;
  v5 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542FAD88);
  v8 = sub_23B56A720();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v7, a1, a3, v10);
  sub_23B56A750();
  sub_23B56A738();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t sub_23B5613C0()
{
  return sub_23B560E04();
}

uint64_t sub_23B5613C8()
{
  return sub_23B560E9C();
}

uint64_t sub_23B5613D0()
{
  return sub_23B56122C();
}

uint64_t sub_23B5613F0()
{
  return sub_23B56122C();
}

uint64_t sub_23B561410(uint64_t a1)
{
  uint64_t v1;

  return sub_23B56129C(a1, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 16));
}

uint64_t sub_23B561428(uint64_t a1)
{
  uint64_t v1;

  return sub_23B561070(a1, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 16));
}

uint64_t sub_23B561440(uint64_t a1)
{
  return sub_23B561410(a1);
}

uint64_t sub_23B561454(uint64_t a1)
{
  return sub_23B561428(a1);
}

void ManagedDefault.wrappedValue.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id *v2;
  uint64_t v4;
  id v5;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v2;
  swift_bridgeObjectRetain();
  PrefixedDefaults.subscript.getter(v4, a2);
  swift_bridgeObjectRelease();

}

void sub_23B5614F4(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;

  v5 = type metadata accessor for ManagedDefault(0, *(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8), a3);
  ManagedDefault.wrappedValue.getter(v5, a4);
}

uint64_t ManagedDefault.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  sub_23B561744(a1, a2);
  v3 = sub_23B56A900();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

void (*ManagedDefault.wrappedValue.modify(_QWORD *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;

  v5 = malloc(0x38uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v5[2] = *(_QWORD *)(a2 + 16);
  v6 = sub_23B56A900();
  v5[3] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[4] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[5] = malloc(v8);
  v9 = malloc(v8);
  v5[6] = v9;
  ManagedDefault.wrappedValue.getter(a2, (uint64_t)v9);
  return sub_23B561640;
}

void sub_23B561640(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void *, uint64_t);
  uint64_t v12;
  uint64_t v13;

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 40);
  v4 = *(void **)(*(_QWORD *)a1 + 48);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 40), v4, v5);
    v9 = *(_QWORD *)(v7 + 24);
    v10 = *(_QWORD *)(v7 + 32);
    swift_bridgeObjectRetain();
    sub_23B5240AC((uint64_t)v3, v9, v10, v8);
    v11 = *(void (**)(void *, uint64_t))(v6 + 8);
    v11(v3, v5);
  }
  else
  {
    v12 = *(_QWORD *)(v7 + 24);
    v13 = *(_QWORD *)(v7 + 32);
    swift_bridgeObjectRetain();
    sub_23B5240AC((uint64_t)v4, v12, v13, v8);
    v11 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v11(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

__n128 ManagedDefault.init(prefixedDefaults:key:)@<Q0>(__n128 *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, __n128 *a4@<X8>)
{
  __n128 result;
  unint64_t v5;

  result = *a1;
  v5 = a1[1].n128_u64[0];
  *a4 = *a1;
  a4[1].n128_u64[0] = v5;
  a4[1].n128_u64[1] = a2;
  a4[2].n128_u64[0] = a3;
  return result;
}

void sub_23B561744(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(v2 + 24);
  v5 = *(_QWORD *)(v2 + 32);
  v6 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  sub_23B5240AC(a1, v4, v5, v6);
}

void sub_23B561798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = type metadata accessor for ManagedDefault(0, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8), a4);
  sub_23B561744(a1, v5);
}

uint64_t sub_23B5617D4()
{
  return 16;
}

__n128 sub_23B5617E0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_23B5617EC()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23B5617F4(id *a1)
{

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *sub_23B561824(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v5;
  a1[4] = *(_QWORD *)(a2 + 32);
  v6 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23B561878(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23B5618F8(uint64_t a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v5 = a2[2];
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  v6 = a2[4];
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23B56194C(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_23B561994(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for ManagedDefault(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ManagedDefault);
}

unint64_t sub_23B5619E8(unint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v1 == 1)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v1 < 3)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v1 == 3)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v1 < 5)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v1 == 5)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v1 < 7)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v1 == 7)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v1 < 9)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v1 == 9)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v1 < 0xB)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v1 == 11)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v1 < 0xD)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v1 == 13)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v1 < 0xF)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (v1 != 15)
    return *(unsigned __int8 *)(result + 32) | ((unint64_t)*(unsigned __int8 *)(result + 33) << 8) | ((unint64_t)*(unsigned __int8 *)(result + 34) << 16) | ((unint64_t)*(unsigned __int8 *)(result + 35) << 24) | ((unint64_t)*(unsigned __int8 *)(result + 36) << 32) | ((unint64_t)*(unsigned __int8 *)(result + 37) << 40) | ((unint64_t)*(unsigned __int8 *)(result + 38) << 48) | ((unint64_t)*(unsigned __int8 *)(result + 39) << 56);
LABEL_33:
  __break(1u);
  return result;
}

void UUID.init(data:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_23B561B54()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = sub_23B569FA0();
  v4 = *(_QWORD *)(v3 - 8);
  if (BYTE6(v1) == *(_QWORD *)(v4 + 64))
  {
    sub_23B5622E8(v2, v1);
    sub_23B5619E8(v5);
    swift_release();
    sub_23B569F7C();
    v6 = 0;
  }
  else
  {
    v6 = 1;
  }
  sub_23B504944(v2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v0, v6, 1, v3);
}

uint64_t UUID.init(bytes:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = sub_23B569FA0();
  v6 = *(_QWORD *)(v5 - 8);
  if (v4 == *(_QWORD *)(v6 + 64))
  {
    sub_23B5619E8(a1);
    swift_bridgeObjectRelease();
    sub_23B569F7C();
    v7 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v7 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v7, 1, v5);
}

uint64_t UUID.data.getter()
{
  char v0;
  char v1;
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v9 = sub_23B569F88();
  v10 = v0;
  v11 = v1;
  v12 = v2;
  v13 = v3;
  v14 = v4;
  v15 = v5;
  v16 = v6;
  v17 = v7;
  return sub_23B508D80((uint64_t)&v9, (uint64_t)&v18);
}

double UUID.bytes.getter()
{
  unint64_t v0;
  char v1;
  unint64_t v2;
  char v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double result;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v0 = sub_23B569F88();
  v1 = v0;
  v3 = v2;
  v4 = v0 >> 8;
  v5 = v0 >> 16;
  v6 = v0 >> 24;
  v7 = HIDWORD(v0);
  v8 = v0 >> 40;
  v9 = HIWORD(v0);
  v10 = HIBYTE(v0);
  v11 = v2 >> 8;
  v14 = v2 >> 16;
  v15 = v2 >> 24;
  v16 = HIDWORD(v2);
  v17 = v2 >> 40;
  v18 = HIWORD(v2);
  v19 = HIBYTE(v2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9CD0);
  v12 = swift_allocObject();
  *(_QWORD *)&result = 16;
  *(_OWORD *)(v12 + 16) = xmmword_23B572B20;
  *(_BYTE *)(v12 + 32) = v1;
  *(_BYTE *)(v12 + 33) = v4;
  *(_BYTE *)(v12 + 34) = v5;
  *(_BYTE *)(v12 + 35) = v6;
  *(_BYTE *)(v12 + 36) = v7;
  *(_BYTE *)(v12 + 37) = v8;
  *(_BYTE *)(v12 + 38) = v9;
  *(_BYTE *)(v12 + 39) = v10;
  *(_BYTE *)(v12 + 40) = v3;
  *(_BYTE *)(v12 + 41) = v11;
  *(_BYTE *)(v12 + 42) = v14;
  *(_BYTE *)(v12 + 43) = v15;
  *(_BYTE *)(v12 + 44) = v16;
  *(_BYTE *)(v12 + 45) = v17;
  *(_BYTE *)(v12 + 46) = v18;
  *(_BYTE *)(v12 + 47) = v19;
  return result;
}

uint64_t UUID.init(mock:template:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t inited;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;

  v27 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542FADF8);
  MEMORY[0x24BDAC7A8](v5);
  v44 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = a2;
  v7 = sub_23B569F88();
  v8 = v7;
  v10 = v9;
  v11 = v7 >> 8;
  v12 = v7 >> 16;
  v33 = v7 >> 16;
  v34 = v7 >> 8;
  v13 = v7 >> 24;
  v14 = HIDWORD(v7);
  v31 = HIDWORD(v7);
  v32 = v7 >> 24;
  v15 = v7 >> 40;
  v30 = v7 >> 40;
  v28 = HIWORD(v7);
  v16 = HIBYTE(v7);
  v41 = v9 >> 24;
  v42 = v9 >> 8;
  v38 = HIDWORD(v9);
  v39 = v9 >> 16;
  v40 = v9 >> 40;
  v36 = HIBYTE(v7);
  v37 = HIWORD(v9);
  v43 = HIBYTE(v9);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9CD0);
  v17 = swift_allocObject();
  v29 = xmmword_23B572B20;
  *(_OWORD *)(v17 + 16) = xmmword_23B572B20;
  *(_BYTE *)(v17 + 32) = v8;
  *(_BYTE *)(v17 + 33) = v11;
  *(_BYTE *)(v17 + 34) = v12;
  *(_BYTE *)(v17 + 35) = v13;
  *(_BYTE *)(v17 + 36) = v14;
  *(_BYTE *)(v17 + 37) = v15;
  LOBYTE(v13) = v28;
  *(_BYTE *)(v17 + 38) = v28;
  *(_BYTE *)(v17 + 39) = v16;
  *(_BYTE *)(v17 + 40) = v10;
  v35 = a1 >> 8;
  *(_BYTE *)(v17 + 41) = v42;
  *(_BYTE *)(v17 + 42) = v39;
  v42 = a1 >> 16;
  *(_BYTE *)(v17 + 43) = v41;
  *(_BYTE *)(v17 + 44) = v38;
  *(_BYTE *)(v17 + 45) = v40;
  *(_BYTE *)(v17 + 46) = v37;
  *(_BYTE *)(v17 + 47) = v43;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9CD0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = v29;
  *(_BYTE *)(inited + 32) = v8;
  *(_BYTE *)(inited + 33) = v34;
  *(_BYTE *)(inited + 34) = v33;
  *(_BYTE *)(inited + 35) = v32;
  *(_BYTE *)(inited + 36) = v31;
  *(_BYTE *)(inited + 37) = v30;
  *(_BYTE *)(inited + 38) = v13;
  swift_bridgeObjectRelease();
  *(_BYTE *)(inited + 39) = v36;
  *(_BYTE *)(inited + 40) = HIBYTE(a1);
  *(_BYTE *)(inited + 41) = BYTE6(a1);
  *(_BYTE *)(inited + 42) = BYTE5(a1);
  *(_BYTE *)(inited + 43) = BYTE4(a1);
  *(_BYTE *)(inited + 44) = BYTE3(a1);
  *(_BYTE *)(inited + 45) = v42;
  *(_BYTE *)(inited + 46) = v35;
  *(_BYTE *)(inited + 47) = a1;
  v19 = sub_23B569FA0();
  v20 = *(_QWORD *)(v19 - 8);
  if (*(_QWORD *)(v20 + 64) == 16)
  {
    v21 = sub_23B5619E8(inited);
    v42 = v21 >> 16;
    v43 = v21 >> 8;
    v40 = HIDWORD(v21);
    v41 = v21 >> 24;
    v38 = HIWORD(v21);
    v39 = v21 >> 40;
    v36 = v22 >> 8;
    v37 = HIBYTE(v21);
    v35 = v22 >> 16;
    swift_setDeallocating();
    v23 = v44;
    sub_23B569F7C();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v23, 0, 1, v19);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v23, 1, v19);
    if ((_DWORD)result != 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v26, v19);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v20 + 32))(v27, v23, v19);
    }
  }
  else
  {
    swift_setDeallocating();
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v44, 1, 1, v19);
  }
  __break(1u);
  return result;
}

void sub_23B5622E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_23B569E74();
  MEMORY[0x24BDAC7A8](v3);
  __asm { BR              X10 }
}

_QWORD *sub_23B562364()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;

  if (BYTE6(v0))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9CD0);
    v4 = (_QWORD *)swift_allocObject();
    v6 = _swift_stdlib_malloc_size(v4);
    v4[2] = BYTE6(v0);
    v4[3] = 2 * v6 - 64;
    sub_23B502434(v2, v0);
    v7 = sub_23B569DCC();
    sub_23B504944(v2, v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
    if (v7 != BYTE6(v0))
    {
      __break(1u);
      JUMPOUT(0x23B562438);
    }
  }
  return v4;
}

uint64_t sub_23B562450(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v23;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v23 = v4 + v2;
  else
    v23 = v4;
  v3 = sub_23B50B6DC(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *(_QWORD *)(v3 + 16);
  v9 = (*(_QWORD *)(v3 + 24) >> 1) - v8;
  v10 = type metadata accessor for Keychain.Item();
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 72);
  v14 = v3 + v12 + v13 * v8;
  v15 = a1 + v12;
  v16 = v13 * v2;
  v17 = v14 + v16;
  v18 = v15 + v16;
  if (v15 < v17 && v14 < v18)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v20 = *(_QWORD *)(v3 + 16);
  v21 = __OFADD__(v20, v2);
  v22 = v20 + v2;
  if (!v21)
  {
    *(_QWORD *)(v3 + 16) = v22;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_23B56AC6C();
  __break(1u);
  return result;
}

uint64_t sub_23B5625B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_23B50B0C8(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_23B56AC6C();
  __break(1u);
  return result;
}

uint64_t sub_23B562708(uint64_t a1)
{
  return sub_23B563EBC(a1, qword_256A33BE0);
}

uint64_t static Keychain.set<A>(data:account:service:dataProtectionClass:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7)
{
  unsigned __int8 v8;

  v8 = *a6;
  return sub_23B5667F4(a1, a2, a3, a4, a5, &v8, 0, 0, a7);
}

uint64_t static Keychain.set<A>(data:account:service:dataProtectionClass:accessGroup:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned __int8 v10;

  v10 = *a6;
  return sub_23B5667F4(a1, a2, a3, a4, a5, &v10, a7, a8, a9);
}

void static Keychain.item(account:service:accessGroup:)(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  static Keychain.item(account:service:useSystemKeychain:nonDestructive:accessGroup:)(a1, a2, a3, a4, 0, a5, a6, a7);
}

char *static Keychain.data(account:service:accessGroup:)(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;
  void *v22;
  uint64_t v23;

  v22 = a6;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9BB0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Keychain.Item();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = v23;
  static Keychain.item(account:service:useSystemKeychain:nonDestructive:accessGroup:)(a1, a2, a3, a4, 0, a5, v22, (uint64_t)v13);
  if (!v18)
  {
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
    {
      sub_23B5043F0((uint64_t)v13, &qword_2542F9BB0);
      return 0;
    }
    else
    {
      sub_23B505154((uint64_t)v13, (uint64_t)v17);
      v19 = &v17[*(int *)(v14 + 40)];
      v13 = *(char **)v19;
      sub_23B566EC8(*(_QWORD *)v19, *((_QWORD *)v19 + 1));
      sub_23B5024C8((uint64_t)v17);
    }
  }
  return v13;
}

uint64_t static Keychain.deleteData(account:service:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_23B5684E8(a1, a2, a3, a4, 0, 0);
}

uint64_t static Keychain.deleteData(account:service:accessGroup:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_23B5684E8(a1, a2, a3, a4, a5, a6);
}

uint64_t static Keychain.set<A>(data:account:service:dataProtectionClass:useSystemKeychain:accessGroup:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_23B5667F4(a1, a2, a3, a4, a5, a6, a8, a9, a10);
}

void static Keychain.item(account:service:useSystemKeychain:nonDestructive:accessGroup:)(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, char a5@<W5>, void *a6@<X6>, void *a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v8;
  void *v17;
  uint64_t v18;
  id v19;
  unint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  void *v22;
  id v23;
  char v24;
  void *v25;
  void *v26;
  uint64_t v27;
  id v28;
  id v29;
  char v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  char v37;
  void *v38;
  id v39;
  id v40;
  char v41;
  char v42;
  void *v43;
  id v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  id v48;
  id v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  _OWORD v56[2];
  id v57[3];
  uint64_t v58;
  unint64_t v59;

  sub_23B504088();
  if (v8)
    return;
  v55 = a5;
  v54 = a8;
  v17 = (void *)*MEMORY[0x24BDE9128];
  v18 = MEMORY[0x24BEE0D00];
  v58 = MEMORY[0x24BEE0D00];
  v57[0] = a3;
  v57[1] = a4;
  sub_23B503EB4(v57, v56);
  v19 = v17;
  swift_bridgeObjectRetain();
  v20 = MEMORY[0x24BEE4B00];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_23B5037A8(v56, v19, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease();
  v22 = (void *)*MEMORY[0x24BDE8FA8];
  v58 = v18;
  v57[0] = a1;
  v57[1] = a2;
  sub_23B503EB4(v57, v56);
  v23 = v22;
  swift_bridgeObjectRetain();
  v24 = swift_isUniquelyReferenced_nonNull_native();
  sub_23B5037A8(v56, v23, v24);

  swift_bridgeObjectRelease();
  v25 = (void *)*MEMORY[0x24BDE93B0];
  v26 = (void *)*MEMORY[0x24BDE93C0];
  type metadata accessor for CFString(0);
  v58 = v27;
  v57[0] = v26;
  sub_23B503EB4(v57, v56);
  v28 = v25;
  v29 = v26;
  v30 = swift_isUniquelyReferenced_nonNull_native();
  sub_23B5037A8(v56, v28, v30);
  v59 = v20;

  swift_bridgeObjectRelease();
  v31 = (void *)*MEMORY[0x24BDE94C8];
  v32 = (void *)*MEMORY[0x24BDBD270];
  if (!*MEMORY[0x24BDBD270])
  {
    v48 = v31;
    sub_23B56449C((uint64_t)v48, v56);

    sub_23B5043F0((uint64_t)v56, &qword_2542F9CD8);
    v49 = (id)*MEMORY[0x24BDE9528];
    sub_23B56449C((uint64_t)v49, v56);

    sub_23B5043F0((uint64_t)v56, &qword_2542F9CD8);
    v42 = v55;
    if (a7)
      goto LABEL_4;
LABEL_6:
    v47 = v59;
    goto LABEL_7;
  }
  type metadata accessor for CFBoolean(0);
  v34 = v33;
  v58 = v33;
  v57[0] = v32;
  sub_23B503EB4(v57, v56);
  v35 = v31;
  v36 = v32;
  v37 = swift_isUniquelyReferenced_nonNull_native();
  sub_23B5037A8(v56, v35, v37);

  swift_bridgeObjectRelease();
  v38 = (void *)*MEMORY[0x24BDE9528];
  v58 = v34;
  v57[0] = v36;
  sub_23B503EB4(v57, v56);
  v39 = v38;
  v40 = v36;
  v41 = swift_isUniquelyReferenced_nonNull_native();
  sub_23B5037A8(v56, v39, v41);
  v59 = v20;

  swift_bridgeObjectRelease();
  v42 = v55;
  if (!a7)
    goto LABEL_6;
LABEL_4:
  v43 = (void *)*MEMORY[0x24BDE8F50];
  v58 = MEMORY[0x24BEE0D00];
  v57[0] = a6;
  v57[1] = a7;
  sub_23B503EB4(v57, v56);
  swift_bridgeObjectRetain();
  v44 = v43;
  v45 = v59;
  v46 = swift_isUniquelyReferenced_nonNull_native();
  sub_23B5037A8(v56, v44, v46);
  v47 = v45;
  v59 = v45;

  swift_bridgeObjectRelease();
LABEL_7:
  v50 = sub_23B566EDC(v47, v42 & 1);
  swift_bridgeObjectRelease();
  v51 = *(_QWORD *)(v50 + 16);
  v52 = type metadata accessor for Keychain.Item();
  v53 = *(_QWORD *)(v52 - 8);
  if (v51)
  {
    sub_23B5687C4(v50 + ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80)), v54);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v53 + 56))(v54, 0, 1, v52);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56))(v54, 1, 1, v52);
  }
  swift_bridgeObjectRelease();
}

uint64_t static Keychain.deleteItem(account:service:useSystemKeychain:accessGroup:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_23B5684E8(a1, a2, a3, a4, a6, a7);
}

uint64_t static Keychain.allItems(accessGroup:)(uint64_t a1, uint64_t a2)
{
  return sub_23B568808(0, a1, a2);
}

uint64_t static Keychain.allItems(useSystemKeychain:nondestructive:accessGroup:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return sub_23B568808(a2, a3, a4);
}

_QWORD *static Keychain.allServices(accessGroup:)(uint64_t a1, _QWORD *a2)
{
  return sub_23B56906C(0, a1, a2);
}

_QWORD *static Keychain.allServices(useSystemKeychain:nonDestructive:accessGroup:)(uint64_t a1, char a2, uint64_t a3, _QWORD *a4)
{
  return sub_23B56906C(a2, a3, a4);
}

_QWORD *static Keychain.allAccounts(accessGroup:)(uint64_t a1, _QWORD *a2)
{
  return sub_23B569240(0, a1, a2);
}

_QWORD *static Keychain.allAccounts(useSystemKeychain:nonDestructive:accessGroup:)(uint64_t a1, char a2, uint64_t a3, _QWORD *a4)
{
  return sub_23B569240(a2, a3, a4);
}

_QWORD *static Keychain.allServices(account:accessGroup:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_23B56906C(0, a3, a4);
}

_QWORD *static Keychain.allAccounts(service:accessGroup:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_23B569240(0, a3, a4);
}

BOOL static Keychain.DataProtectionClass.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t Keychain.DataProtectionClass.hash(into:)()
{
  return sub_23B56AE70();
}

uint64_t Keychain.DataProtectionClass.hashValue.getter()
{
  sub_23B56AE64();
  sub_23B56AE70();
  return sub_23B56AE88();
}

uint64_t Keychain.Item.accessGroup.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Keychain.Item.service.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Keychain.Item.account.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Keychain.Item.created.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Keychain.Item() + 28);
  v4 = sub_23B569F40();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t Keychain.Item.modified.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Keychain.Item() + 32);
  v4 = sub_23B569F40();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t Keychain.Item.dataProtectionClass.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for Keychain.Item();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 36));
  return result;
}

uint64_t Keychain.Item.data.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for Keychain.Item() + 40);
  v2 = *(_QWORD *)v1;
  sub_23B566EC8(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

unint64_t static Keychain.allItems(service:useSystemKeychain:nondestructive:accessGroup:)(void *a1, void *a2, uint64_t a3, unint64_t a4, void *a5, void *a6)
{
  return sub_23B563194(a1, a2, a3, a4, a5, a6, MEMORY[0x24BDE9128]);
}

unint64_t static Keychain.allItems(account:useSystemKeychain:nondestructive:accessGroup:)(void *a1, void *a2, uint64_t a3, unint64_t a4, void *a5, void *a6)
{
  return sub_23B563194(a1, a2, a3, a4, a5, a6, MEMORY[0x24BDE8FA8]);
}

unint64_t sub_23B563194(void *a1, void *a2, uint64_t a3, unint64_t a4, void *a5, void *a6, void **a7)
{
  uint64_t v7;
  void *v14;
  uint64_t v15;
  id v16;
  unint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  void *v19;
  void *v20;
  uint64_t v21;
  id v22;
  id v23;
  char v24;
  void *v25;
  void *v26;
  uint64_t v27;
  id v28;
  id v29;
  char v30;
  void *v31;
  id v32;
  unint64_t v33;
  char v34;
  id v35;
  _OWORD v37[2];
  id v38[3];
  uint64_t v39;
  unint64_t v40;

  sub_23B504088();
  if (!v7)
  {
    v14 = *a7;
    v15 = MEMORY[0x24BEE0D00];
    v39 = MEMORY[0x24BEE0D00];
    v38[0] = a1;
    v38[1] = a2;
    sub_23B503EB4(v38, v37);
    v16 = v14;
    swift_bridgeObjectRetain();
    v17 = MEMORY[0x24BEE4B00];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_23B5037A8(v37, v16, isUniquelyReferenced_nonNull_native);

    swift_bridgeObjectRelease();
    v19 = (void *)*MEMORY[0x24BDE93B0];
    v20 = (void *)*MEMORY[0x24BDE93B8];
    type metadata accessor for CFString(0);
    v39 = v21;
    v38[0] = v20;
    sub_23B503EB4(v38, v37);
    v22 = v19;
    v23 = v20;
    v24 = swift_isUniquelyReferenced_nonNull_native();
    sub_23B5037A8(v37, v22, v24);
    v40 = v17;

    swift_bridgeObjectRelease();
    v25 = (void *)*MEMORY[0x24BDE9528];
    v26 = (void *)*MEMORY[0x24BDBD270];
    if (*MEMORY[0x24BDBD270])
    {
      type metadata accessor for CFBoolean(0);
      v39 = v27;
      v38[0] = v26;
      sub_23B503EB4(v38, v37);
      v28 = v25;
      v29 = v26;
      v30 = swift_isUniquelyReferenced_nonNull_native();
      sub_23B5037A8(v37, v28, v30);
      v40 = v17;

      swift_bridgeObjectRelease();
      if (a6)
      {
LABEL_4:
        v31 = (void *)*MEMORY[0x24BDE8F50];
        v39 = v15;
        v38[0] = a5;
        v38[1] = a6;
        sub_23B503EB4(v38, v37);
        swift_bridgeObjectRetain();
        v32 = v31;
        v33 = v40;
        v34 = swift_isUniquelyReferenced_nonNull_native();
        sub_23B5037A8(v37, v32, v34);

        swift_bridgeObjectRelease();
LABEL_7:
        a4 = sub_23B566EDC(v33, a4 & 1);
        swift_bridgeObjectRelease();
        return a4;
      }
    }
    else
    {
      v35 = v25;
      sub_23B56449C((uint64_t)v35, v38);

      sub_23B5043F0((uint64_t)v38, &qword_2542F9CD8);
      if (a6)
        goto LABEL_4;
    }
    v33 = v40;
    goto LABEL_7;
  }
  return a4;
}

uint64_t sub_23B5634C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  _OWORD v31[4];
  _OWORD v32[2];
  _OWORD v33[3];

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9B68);
    v2 = sub_23B56AC60();
  }
  else
  {
    v2 = MEMORY[0x24BEE4B00];
  }
  v30 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v29 = (unint64_t)(63 - v3) >> 6;
  v6 = v2 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v10 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v11 = v10 | (v8 << 6);
      goto LABEL_28;
    }
    v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v12 >= v29)
      goto LABEL_37;
    v13 = *(_QWORD *)(v30 + 8 * v12);
    v14 = v8 + 1;
    if (!v13)
    {
      v14 = v8 + 2;
      if (v8 + 2 >= v29)
        goto LABEL_37;
      v13 = *(_QWORD *)(v30 + 8 * v14);
      if (!v13)
      {
        v14 = v8 + 3;
        if (v8 + 3 >= v29)
          goto LABEL_37;
        v13 = *(_QWORD *)(v30 + 8 * v14);
        if (!v13)
        {
          v14 = v8 + 4;
          if (v8 + 4 >= v29)
            goto LABEL_37;
          v13 = *(_QWORD *)(v30 + 8 * v14);
          if (!v13)
            break;
        }
      }
    }
LABEL_27:
    v5 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
    v8 = v14;
LABEL_28:
    v16 = *(void **)(*(_QWORD *)(a1 + 48) + 8 * v11);
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v11);
    v18 = *v17;
    v19 = v17[1];
    *(_QWORD *)&v33[0] = v16;
    *(_QWORD *)&v32[0] = v18;
    *((_QWORD *)&v32[0] + 1) = v19;
    v20 = v16;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    v21 = *(_QWORD *)&v33[0];
    sub_23B503EB4((_OWORD *)((char *)v33 + 8), v31);
    sub_23B503EB4(v31, v33);
    sub_23B503EB4(v33, v32);
    sub_23B56AE64();
    type metadata accessor for CFString(0);
    sub_23B4FCC20((unint64_t *)&unk_2542F9BB8, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_23B56EE74);
    sub_23B56A024();
    result = sub_23B56AE88();
    v22 = -1 << *(_BYTE *)(v2 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v6 + 8 * (v23 >> 6))) != 0)
    {
      v9 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v6 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v6 + 8 * v24);
      }
      while (v28 == -1);
      v9 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v9) = v21;
    result = (uint64_t)sub_23B503EB4(v32, (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v9));
    ++*(_QWORD *)(v2 + 16);
  }
  v15 = v8 + 5;
  if (v8 + 5 >= v29)
  {
LABEL_37:
    swift_release();
    sub_23B524DFC();
    return v2;
  }
  v13 = *(_QWORD *)(v30 + 8 * v15);
  if (v13)
  {
    v14 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= v29)
      goto LABEL_37;
    v13 = *(_QWORD *)(v30 + 8 * v14);
    ++v15;
    if (v13)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_23B56385C(uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X8>)
{
  id v6;
  uint64_t v7;
  char v9;
  id v10;
  uint64_t v11;
  char v13;
  id v14;
  uint64_t v15;
  char v17;
  id v18;
  uint64_t v19;
  char v20;
  char v21;
  id v22;
  uint64_t v23;
  char v24;
  id v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;

  v6 = (id)*MEMORY[0x24BDE8F98];
  if (sub_23B56A2F4() == a1 && v7 == a2)
    goto LABEL_20;
  v9 = sub_23B56AD98();
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
  {
LABEL_21:
    swift_bridgeObjectRelease();
    v20 = 0;
    goto LABEL_22;
  }
  v10 = (id)*MEMORY[0x24BDE8FA0];
  if (sub_23B56A2F4() == a1 && v11 == a2)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  v13 = sub_23B56AD98();
  swift_bridgeObjectRelease();
  if ((v13 & 1) != 0)
    goto LABEL_21;
  v14 = (id)*MEMORY[0x24BDE8F68];
  if (sub_23B56A2F4() == a1 && v15 == a2)
    goto LABEL_18;
  v17 = sub_23B56AD98();
  swift_bridgeObjectRelease();
  if ((v17 & 1) != 0)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    v20 = 1;
LABEL_22:
    *a3 = v20;
    return;
  }
  v18 = (id)*MEMORY[0x24BDE8F70];
  if (sub_23B56A2F4() == a1 && v19 == a2)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  v21 = sub_23B56AD98();
  swift_bridgeObjectRelease();
  if ((v21 & 1) != 0)
    goto LABEL_19;
  if (*MEMORY[0x24BDE8F80])
  {
    v22 = (id)*MEMORY[0x24BDE8F80];
    if (sub_23B56A2F4() == a1 && v23 == a2)
    {
LABEL_27:
      swift_bridgeObjectRelease();
LABEL_29:
      swift_bridgeObjectRelease();
      v20 = 2;
      goto LABEL_22;
    }
    v24 = sub_23B56AD98();
    swift_bridgeObjectRelease();
    if ((v24 & 1) != 0)
      goto LABEL_29;
    if (*MEMORY[0x24BDE8F88])
    {
      v25 = (id)*MEMORY[0x24BDE8F88];
      if (sub_23B56A2F4() != a1 || v26 != a2)
      {
        v27 = sub_23B56AD98();
        swift_bridgeObjectRelease();
        if ((v27 & 1) == 0)
        {
          if (qword_256A2BA40 != -1)
            swift_once();
          v28 = sub_23B56A060();
          __swift_project_value_buffer(v28, (uint64_t)qword_256A2D078);
          swift_bridgeObjectRetain();
          v29 = sub_23B56A048();
          v30 = sub_23B56A834();
          if (os_log_type_enabled(v29, v30))
          {
            v31 = (uint8_t *)swift_slowAlloc();
            v32 = swift_slowAlloc();
            v33 = v32;
            *(_DWORD *)v31 = 136315138;
            swift_bridgeObjectRetain();
            sub_23B5034E4(a1, a2, &v33);
            sub_23B56A918();
            v20 = 3;
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_23B4F9000, v29, v30, "Unexpected raw DataProtectionClass: %s", v31, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x23B867948](v32, -1, -1);
            MEMORY[0x23B867948](v31, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n();
            v20 = 3;
          }
          goto LABEL_22;
        }
        goto LABEL_29;
      }
      goto LABEL_27;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t Keychain.Item.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  sub_23B56AA68();
  sub_23B56A3A8();
  swift_bridgeObjectRetain();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  swift_bridgeObjectRetain();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  swift_bridgeObjectRetain();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  v1 = type metadata accessor for Keychain.Item();
  sub_23B569F40();
  sub_23B4FCC20(&qword_256A2D098, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE988]);
  sub_23B56AD44();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  sub_23B56AD44();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  sub_23B56ABB8();
  sub_23B56A3A8();
  sub_23B566EC8(*(_QWORD *)(v0 + *(int *)(v1 + 40)), *(_QWORD *)(v0 + *(int *)(v1 + 40) + 8));
  __swift_instantiateConcreteTypeFromMangledName(&qword_256A2D0A0);
  sub_23B56A300();
  sub_23B56A3A8();
  swift_bridgeObjectRelease();
  sub_23B56A3A8();
  return 0;
}

uint64_t sub_23B563EB0(uint64_t a1)
{
  return sub_23B563EBC(a1, qword_256A2D060);
}

uint64_t sub_23B563EBC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_23B56A060();
  __swift_allocate_value_buffer(v3, a2);
  v4 = __swift_project_value_buffer(v3, (uint64_t)a2);
  if (qword_256A2BA40 != -1)
    swift_once();
  v5 = __swift_project_value_buffer(v3, (uint64_t)qword_256A2D078);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v4, v5, v3);
}

uint64_t sub_23B563F48(uint64_t a1)
{
  return sub_23B563F70(a1, qword_256A2D078);
}

uint64_t sub_23B563F58(uint64_t a1)
{
  return sub_23B563F70(a1, qword_2542F9C20);
}

uint64_t sub_23B563F70(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_23B56A060();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return sub_23B56A054();
}

uint64_t sub_23B563FEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_23B564014(a1, a2, &qword_2542FA888, (void (*)(void))sub_23B526288, a3);
}

uint64_t sub_23B564000@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_23B564014(a1, a2, &qword_2542FA878, (void (*)(void))sub_23B52629C, a3);
}

uint64_t sub_23B564014@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t *v8;
  unint64_t v12;
  char v13;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v8 = v5;
  swift_bridgeObjectRetain();
  v12 = sub_23B5015D8(a1, a2);
  LOBYTE(a2) = v13;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = *v8;
    v21 = *v8;
    *v8 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a4();
      v15 = v21;
    }
    swift_bridgeObjectRelease();
    v16 = *(_QWORD *)(v15 + 56);
    v17 = __swift_instantiateConcreteTypeFromMangledName(a3);
    v18 = *(_QWORD *)(v17 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v18 + 32))(a5, v16 + *(_QWORD *)(v18 + 72) * v12, v17);
    sub_23B564580(v12, v15, a3);
    *v8 = v15;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(a5, 0, 1, v17);
  }
  else
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(a3);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a5, 1, 1, v20);
  }
}

uint64_t sub_23B564150@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_23B511BB8(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v17 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_23B526874();
      v9 = v17;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = sub_23B569FA0();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, v11);
    v12 = *(_QWORD *)(v9 + 56);
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA40);
    v14 = *(_QWORD *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 32))(a2, v12 + *(_QWORD *)(v14 + 72) * v6, v13);
    sub_23B56495C(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a2, 0, 1, v13);
  }
  else
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA40);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a2, 1, 1, v16);
  }
}

double sub_23B564294@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_23B5015D8(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_23B526B74();
      v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_23B503EB4((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v8), a3);
    sub_23B564C34(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

double sub_23B564384@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double result;
  uint64_t v17;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_23B5006C8(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v17 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_23B526D80();
      v11 = v17;
    }
    swift_bridgeObjectRelease();
    v12 = (_OWORD *)(*(_QWORD *)(v11 + 56) + 112 * v8);
    v13 = v12[5];
    a3[4] = v12[4];
    a3[5] = v13;
    a3[6] = v12[6];
    v14 = v12[1];
    *a3 = *v12;
    a3[1] = v14;
    v15 = v12[3];
    a3[2] = v12[2];
    a3[3] = v15;
    sub_23B564E08(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    a3[5] = 0u;
    a3[6] = 0u;
    a3[3] = 0u;
    a3[4] = 0u;
    a3[1] = 0u;
    a3[2] = 0u;
    *a3 = 0u;
  }
  return result;
}

double sub_23B56449C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  double result;
  uint64_t v11;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_23B503A0C(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v11 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_23B503EC4();
      v9 = v11;
    }

    sub_23B503EB4((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v6), a2);
    sub_23B564FE8(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

unint64_t sub_23B564580(unint64_t result, uint64_t a2, uint64_t *a3)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v4 = result;
  v5 = a2 + 64;
  v6 = -1 << *(_BYTE *)(a2 + 32);
  v7 = (result + 1) & ~v6;
  if (((1 << v7) & *(_QWORD *)(a2 + 64 + 8 * (v7 >> 6))) != 0)
  {
    v9 = ~v6;
    result = sub_23B56AA08();
    if ((*(_QWORD *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      v10 = (result + 1) & v9;
      while (1)
      {
        sub_23B56AE64();
        swift_bridgeObjectRetain();
        sub_23B56A36C();
        v11 = sub_23B56AE88();
        result = swift_bridgeObjectRelease();
        v12 = v11 & v9;
        if (v4 >= (uint64_t)v10)
          break;
        if (v12 < v10)
          goto LABEL_11;
LABEL_12:
        v13 = *(_QWORD *)(a2 + 48);
        v14 = (_OWORD *)(v13 + 16 * v4);
        v15 = (_OWORD *)(v13 + 16 * v7);
        if (v4 != v7 || v14 >= v15 + 1)
          *v14 = *v15;
        v16 = *(_QWORD *)(a2 + 56);
        v17 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a3) - 8) + 72);
        v18 = v17 * v4;
        result = v16 + v17 * v4;
        v19 = v17 * v7;
        v20 = v16 + v17 * v7 + v17;
        if (v18 < v19 || result >= v20)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v4 = v7;
          if (v18 == v19)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v4 = v7;
LABEL_6:
        v7 = (v7 + 1) & v9;
        if (((*(_QWORD *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
          goto LABEL_21;
      }
      if (v12 < v10)
        goto LABEL_6;
LABEL_11:
      if (v4 < (uint64_t)v12)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v22 = (uint64_t *)(v5 + 8 * ((unint64_t)v4 >> 6));
    v23 = *v22;
    v24 = (-1 << v4) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v5 + 8 * (result >> 6));
    v24 = *v22;
    v23 = (-1 << result) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_23B564788(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_23B56AA08();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_23B56AE64();
        swift_bridgeObjectRetain();
        sub_23B56A36C();
        v9 = sub_23B56AE88();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_23B56495C(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  unint64_t v26;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, unint64_t, uint64_t);
  unint64_t v36;
  uint64_t v37;

  v4 = sub_23B569FA0();
  v37 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = sub_23B56AA08();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v36 = (result + 1) & v11;
      v12 = *(_QWORD *)(v37 + 72);
      v35 = *(void (**)(char *, unint64_t, uint64_t))(v37 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v35(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        sub_23B4FCC20((unint64_t *)&qword_2542FAA50, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
        v18 = sub_23B56A1EC();
        result = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v36)
        {
          if (v19 >= v36 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v8 = v14;
            if (v15 * a1 < v16
              || *(_QWORD *)(a2 + 48) + v15 * a1 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v16 + v15))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v22 = *(_QWORD *)(a2 + 56);
            v23 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA40) - 8) + 72);
            v24 = v23 * a1;
            result = v22 + v23 * a1;
            v25 = v23 * v10;
            v26 = v22 + v23 * v10 + v23;
            if (v24 < v25 || result >= v26)
            {
              result = swift_arrayInitWithTakeFrontToBack();
              a1 = v10;
              v13 = v17;
            }
            else
            {
              a1 = v10;
              v13 = v17;
              if (v24 != v25)
              {
                result = swift_arrayInitWithTakeBackToFront();
                v13 = v17;
                a1 = v10;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v36 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
LABEL_5:
        v10 = (v10 + 1) & v13;
        v12 = v15;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v28 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v29 = *v28;
    v30 = (-1 << a1) - 1;
  }
  else
  {
    v28 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v30 = *v28;
    v29 = (-1 << a1) - 1;
  }
  *v28 = v30 & v29;
  v31 = *(_QWORD *)(a2 + 16);
  v32 = __OFSUB__(v31, 1);
  v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v33;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_23B564C34(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_23B56AA08();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_23B56AE64();
        swift_bridgeObjectRetain();
        sub_23B56A36C();
        v10 = sub_23B56AE88();
        result = swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_OWORD *)(v12 + 16 * v3);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = (_OWORD *)(v15 + 32 * v3);
          v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= v17 + 2))
          {
            v9 = v17[1];
            *v16 = *v17;
            v16[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_23B564E08(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  const void *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_23B56AA08();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_23B56AE64();
        swift_bridgeObjectRetain();
        sub_23B56A36C();
        v9 = sub_23B56AE88();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          result = v14 + 112 * v3;
          v15 = (const void *)(v14 + 112 * v6);
          if (v3 != v6 || (v3 = v6, result >= (unint64_t)v15 + 112))
          {
            result = (unint64_t)memmove((void *)result, v15, 0x70uLL);
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v17 = *v16;
    v18 = (-1 << v3) - 1;
  }
  else
  {
    v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    v18 = *v16;
    v17 = (-1 << result) - 1;
  }
  *v16 = v18 & v17;
  v19 = *(_QWORD *)(a2 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_23B564FE8(unint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  void *v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = sub_23B56AA08();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v11 = *(void **)(*(_QWORD *)(a2 + 48) + 8 * v6);
        sub_23B56AE64();
        type metadata accessor for CFString(0);
        sub_23B4FCC20((unint64_t *)&unk_2542F9BB8, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_23B56EE74);
        v12 = v11;
        sub_23B56A024();
        v13 = sub_23B56AE88();

        v14 = v13 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v14 < v9)
            goto LABEL_5;
        }
        else if (v14 >= v9)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(a2 + 48);
          v16 = (_QWORD *)(v15 + 8 * v3);
          v17 = (_QWORD *)(v15 + 8 * v6);
          if (v3 != v6 || v16 >= v17 + 1)
            *v16 = *v17;
          v18 = *(_QWORD *)(a2 + 56);
          v19 = (_OWORD *)(v18 + 32 * v3);
          v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v19 >= v20 + 2))
          {
            v10 = v20[1];
            *v19 = *v20;
            v19[1] = v10;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v23 = *v21;
    v22 = (-1 << a1) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
}

uint64_t sub_23B5651F0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_23B565228(a1, a2, a3, a4, (void (*)(void))sub_23B526288, (void (*)(void))sub_23B524E04, &qword_2542FA888);
}

uint64_t sub_23B56520C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_23B565228(a1, a2, a3, a4, (void (*)(void))sub_23B52629C, (void (*)(void))sub_23B524E18, &qword_2542FA878);
}

uint64_t sub_23B565228(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void), uint64_t *a7)
{
  _QWORD *v7;
  _QWORD **v11;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  unint64_t v27;
  char v28;

  v11 = (_QWORD **)v7;
  v15 = (_QWORD *)*v7;
  v17 = sub_23B5015D8(a2, a3);
  v18 = v15[2];
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }
  else
  {
    v21 = v16;
    v22 = v15[3];
    if (v22 >= v20 && (a4 & 1) != 0)
    {
LABEL_7:
      v23 = *v11;
      if ((v21 & 1) != 0)
      {
LABEL_8:
        v24 = v23[7];
        v25 = __swift_instantiateConcreteTypeFromMangledName(a7);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 40))(v24 + *(_QWORD *)(*(_QWORD *)(v25 - 8) + 72) * v17, a1, v25);
      }
      goto LABEL_11;
    }
    if (v22 >= v20 && (a4 & 1) == 0)
    {
      a5();
      goto LABEL_7;
    }
    a6();
    v27 = sub_23B5015D8(a2, a3);
    if ((v21 & 1) == (v28 & 1))
    {
      v17 = v27;
      v23 = *v11;
      if ((v21 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_23B565920(v17, a2, a3, a1, v23, a7);
      return swift_bridgeObjectRetain();
    }
  }
  result = sub_23B56AE10();
  __break(1u);
  return result;
}

uint64_t sub_23B56538C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_23B5015D8(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_23B526508();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_23B525194(v15, a4 & 1);
  v21 = sub_23B5015D8(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_23B56AE10();
  __break(1u);
  return result;
}

uint64_t sub_23B5654E8(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v4 = (_QWORD **)v3;
  v8 = sub_23B569FA0();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_23B511BB8(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7];
        v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA40);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v14, a1, v22);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_23B526874();
      goto LABEL_7;
    }
    sub_23B5257CC(v17, a3 & 1);
    v24 = sub_23B511BB8(a2);
    if ((v18 & 1) == (v25 & 1))
    {
      v14 = v24;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_23B5659F8(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = sub_23B56AE10();
  __break(1u);
  return result;
}

_OWORD *sub_23B565674(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_23B5015D8(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_OWORD *)(v18[7] + 32 * v12);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
        return sub_23B503EB4(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_23B526B74();
      goto LABEL_7;
    }
    sub_23B525BE4(v15, a4 & 1);
    v21 = sub_23B5015D8(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_23B565AB4(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }
  result = (_OWORD *)sub_23B56AE10();
  __break(1u);
  return result;
}

uint64_t sub_23B5657A4(__int128 *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;

  v5 = v4;
  v10 = *v4;
  v12 = sub_23B5006C8(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_23B526D80();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      return sub_23B569B38((uint64_t)a1, v18[7] + 112 * v12);
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    v23 = (_OWORD *)(v18[7] + 112 * v12);
    v24 = *a1;
    v25 = a1[2];
    v23[1] = a1[1];
    v23[2] = v25;
    *v23 = v24;
    v26 = a1[3];
    v27 = a1[4];
    v28 = a1[6];
    v23[5] = a1[5];
    v23[6] = v28;
    v23[3] = v26;
    v23[4] = v27;
    v29 = v18[2];
    v30 = __OFADD__(v29, 1);
    v31 = v29 + 1;
    if (!v30)
    {
      v18[2] = v31;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_23B525F28(v15, a4 & 1);
  v20 = sub_23B5006C8(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      return sub_23B569B38((uint64_t)a1, v18[7] + 112 * v12);
    goto LABEL_11;
  }
LABEL_15:
  result = sub_23B56AE10();
  __break(1u);
  return result;
}

uint64_t sub_23B565920(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t *a6)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v9 = (_QWORD *)(a5[6] + 16 * a1);
  *v9 = a2;
  v9[1] = a3;
  v10 = a5[7];
  v11 = __swift_instantiateConcreteTypeFromMangledName(a6);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a4, v11);
  v13 = a5[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a5[2] = v15;
  return result;
}

unint64_t sub_23B5659B0(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

uint64_t sub_23B5659F8(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_23B569FA0();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v10 = a4[7];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542FAA40);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a3, v11);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

_OWORD *sub_23B565AB4(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_23B503EB4(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

_QWORD *sub_23B565B1C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542F99C0);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = sub_23B537E7C((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_23B524DFC();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

uint64_t sub_23B565C00(uint64_t a1)
{
  void *v2;
  id v3;
  unint64_t v4;
  char v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  const __CFDictionary *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  CFStringRef v29;
  __CFString *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = a1;
  v2 = (void *)*MEMORY[0x24BDE9220];
  if (*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRetain();
    v3 = v2;
    v4 = sub_23B503A0C((uint64_t)v3);
    if ((v5 & 1) != 0)
    {
      sub_23B5035B4(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v38);

      if (*((_QWORD *)&v39 + 1))
      {
        sub_23B5043F0((uint64_t)&v38, &qword_2542F9CD8);
        goto LABEL_8;
      }
    }
    else
    {
      v38 = 0u;
      v39 = 0u;

    }
  }
  else
  {
    v38 = 0u;
    v39 = 0u;
    swift_bridgeObjectRetain();
  }
  sub_23B5043F0((uint64_t)&v38, &qword_2542F9CD8);
  v6 = (void *)*MEMORY[0x24BDE9230];
  type metadata accessor for CFString(0);
  *((_QWORD *)&v39 + 1) = v7;
  *(_QWORD *)&v38 = v6;
  sub_23B503EB4(&v38, v37);
  v8 = v2;
  v9 = v6;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v36 = a1;
  sub_23B5037A8(v37, v8, isUniquelyReferenced_nonNull_native);
  v40 = a1;

  swift_bridgeObjectRelease();
LABEL_8:
  if (qword_2542F9C18 != -1)
    swift_once();
  v11 = sub_23B56A060();
  __swift_project_value_buffer(v11, (uint64_t)qword_2542F9C20);
  v12 = sub_23B56A048();
  v13 = sub_23B56A84C();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    v35 = v11;
    v15 = swift_slowAlloc();
    *(_QWORD *)&v38 = v15;
    *(_DWORD *)v14 = 136315138;
    swift_beginAccess();
    type metadata accessor for CFString(0);
    sub_23B4FCC20(&qword_2542F9BC8, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_23B56EE30);
    swift_bridgeObjectRetain();
    v16 = sub_23B56A198();
    v18 = v17;
    swift_bridgeObjectRelease();
    v36 = sub_23B5034E4(v16, v18, (uint64_t *)&v38);
    sub_23B56A918();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23B4F9000, v12, v13, "SecItemAdd() attributes: %s", v14, 0xCu);
    swift_arrayDestroy();
    v19 = v15;
    v11 = v35;
    MEMORY[0x23B867948](v19, -1, -1);
    MEMORY[0x23B867948](v14, -1, -1);
  }

  swift_beginAccess();
  type metadata accessor for CFString(0);
  sub_23B4FCC20(&qword_2542F9BC8, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_23B56EE30);
  swift_bridgeObjectRetain();
  v20 = (const __CFDictionary *)sub_23B56A180();
  swift_bridgeObjectRelease();
  v21 = SecItemAdd(v20, 0);

  v22 = sub_23B56A048();
  v23 = sub_23B56A84C();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v24 = 67109120;
    LODWORD(v36) = v21;
    sub_23B56A918();
    _os_log_impl(&dword_23B4F9000, v22, v23, "SecItemAdd() status: %d", v24, 8u);
    MEMORY[0x23B867948](v24, -1, -1);
  }

  if ((_DWORD)v21 && (_DWORD)v21 != -25299)
  {
    if (qword_256A2BA30 != -1)
      swift_once();
    __swift_project_value_buffer(v11, (uint64_t)qword_256A33BE0);
    v25 = sub_23B56A048();
    v26 = sub_23B56A834();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc();
      v28 = swift_slowAlloc();
      v36 = v28;
      *(_DWORD *)v27 = 67109378;
      sub_23B56A918();
      *(_WORD *)(v27 + 8) = 2082;
      v29 = SecCopyErrorMessageString(v21, 0);
      if (v29)
      {
        v30 = (__CFString *)v29;
        v31 = sub_23B56A288();
        v33 = v32;

      }
      else
      {
        v33 = 0xE90000000000003ELL;
        v31 = 0x6E776F6E6B6E753CLL;
      }
      sub_23B5034E4(v31, v33, &v36);
      sub_23B56A918();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23B4F9000, v25, v26, "SecItemAdd error: %d [%{public}s]", (uint8_t *)v27, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x23B867948](v28, -1, -1);
      MEMORY[0x23B867948](v27, -1, -1);
    }

  }
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t sub_23B5661A4(uint64_t a1)
{
  void *v2;
  id v3;
  unint64_t v4;
  char v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  const __CFDictionary *v21;
  const __CFDictionary *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  CFStringRef v31;
  __CFString *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  _OWORD v39[2];
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v42 = a1;
  v2 = (void *)*MEMORY[0x24BDE9220];
  if (*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRetain();
    v3 = v2;
    v4 = sub_23B503A0C((uint64_t)v3);
    if ((v5 & 1) != 0)
    {
      sub_23B5035B4(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v40);

      if (*((_QWORD *)&v41 + 1))
      {
        sub_23B5043F0((uint64_t)&v40, &qword_2542F9CD8);
        goto LABEL_8;
      }
    }
    else
    {
      v40 = 0u;
      v41 = 0u;

    }
  }
  else
  {
    v40 = 0u;
    v41 = 0u;
    swift_bridgeObjectRetain();
  }
  sub_23B5043F0((uint64_t)&v40, &qword_2542F9CD8);
  v6 = (void *)*MEMORY[0x24BDE9230];
  type metadata accessor for CFString(0);
  *((_QWORD *)&v41 + 1) = v7;
  *(_QWORD *)&v40 = v6;
  sub_23B503EB4(&v40, v39);
  v8 = v2;
  v9 = v6;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v38 = a1;
  sub_23B5037A8(v39, v8, isUniquelyReferenced_nonNull_native);
  v42 = a1;

  swift_bridgeObjectRelease();
LABEL_8:
  if (qword_2542F9C18 != -1)
    swift_once();
  v11 = sub_23B56A060();
  __swift_project_value_buffer(v11, (uint64_t)qword_2542F9C20);
  swift_bridgeObjectRetain_n();
  v12 = sub_23B56A048();
  v13 = sub_23B56A84C();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc();
    v37 = swift_slowAlloc();
    *(_QWORD *)&v40 = v37;
    *(_DWORD *)v14 = 136315394;
    swift_beginAccess();
    type metadata accessor for CFString(0);
    sub_23B4FCC20(&qword_2542F9BC8, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_23B56EE30);
    swift_bridgeObjectRetain();
    v15 = sub_23B56A198();
    v17 = v16;
    swift_bridgeObjectRelease();
    sub_23B5034E4(v15, v17, (uint64_t *)&v40);
    sub_23B56A918();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    swift_bridgeObjectRetain();
    v18 = sub_23B56A198();
    v20 = v19;
    swift_bridgeObjectRelease();
    v38 = sub_23B5034E4(v18, v20, (uint64_t *)&v40);
    sub_23B56A918();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23B4F9000, v12, v13, "SecItemUpate() query: %s attributes: %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B867948](v37, -1, -1);
    MEMORY[0x23B867948](v14, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
  type metadata accessor for CFString(0);
  sub_23B4FCC20(&qword_2542F9BC8, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_23B56EE30);
  swift_bridgeObjectRetain();
  v21 = (const __CFDictionary *)sub_23B56A180();
  swift_bridgeObjectRelease();
  v22 = (const __CFDictionary *)sub_23B56A180();
  v23 = SecItemUpdate(v21, v22);

  v24 = sub_23B56A048();
  v25 = sub_23B56A84C();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v26 = 67109120;
    LODWORD(v38) = v23;
    sub_23B56A918();
    _os_log_impl(&dword_23B4F9000, v24, v25, "SecItemUpate() status: %d", v26, 8u);
    MEMORY[0x23B867948](v26, -1, -1);
  }

  if ((_DWORD)v23)
  {
    if (qword_256A2BA30 != -1)
      swift_once();
    __swift_project_value_buffer(v11, (uint64_t)qword_256A33BE0);
    v27 = sub_23B56A048();
    v28 = sub_23B56A834();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc();
      v30 = swift_slowAlloc();
      v38 = v30;
      *(_DWORD *)v29 = 67109378;
      sub_23B56A918();
      *(_WORD *)(v29 + 8) = 2082;
      v31 = SecCopyErrorMessageString(v23, 0);
      if (v31)
      {
        v32 = (__CFString *)v31;
        v33 = sub_23B56A288();
        v35 = v34;

      }
      else
      {
        v35 = 0xE90000000000003ELL;
        v33 = 0x6E776F6E6B6E753CLL;
      }
      sub_23B5034E4(v33, v35, &v38);
      sub_23B56A918();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23B4F9000, v27, v28, "SecItemUpdate error: %d [%{public}s]", (uint8_t *)v29, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x23B867948](v30, -1, -1);
      MEMORY[0x23B867948](v29, -1, -1);
    }

  }
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t sub_23B5667F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  void *v26;
  uint64_t v27;
  id v28;
  char v29;
  void *v30;
  uint64_t *boxed_opaque_existential_1;
  id v32;
  char v33;
  void *v34;
  void *v35;
  uint64_t v36;
  id v37;
  id v38;
  char v39;
  id v40;
  void *v41;
  void **v42;
  void *v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  char v49;
  void *v50;
  void *v51;
  uint64_t v52;
  id v53;
  id v54;
  uint64_t v55;
  char v56;
  void *v57;
  id v58;
  char v59;
  id v60;
  uint64_t v61;
  int v62;
  void *v63;
  id v64;
  char v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  char v69;
  id v70;
  char v71;
  uint64_t v72;
  id v73;
  id v74;
  char v75;
  id v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _OWORD v84[2];
  __int128 v85;
  uint64_t v86;
  uint64_t v87;

  v17 = *a6;
  result = sub_23B504088();
  if (v9)
    return result;
  v81 = a7;
  v82 = a8;
  v19 = a3;
  v20 = a2;
  v21 = (void *)*MEMORY[0x24BDE9128];
  v22 = MEMORY[0x24BEE0D00];
  v86 = MEMORY[0x24BEE0D00];
  v79 = a4;
  *(_QWORD *)&v85 = a4;
  *((_QWORD *)&v85 + 1) = a5;
  sub_23B503EB4(&v85, v84);
  v23 = v21;
  v83 = a5;
  swift_bridgeObjectRetain();
  v24 = MEMORY[0x24BEE4B00];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_23B5037A8(v84, v23, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease();
  v26 = (void *)*MEMORY[0x24BDE8FA8];
  v86 = v22;
  v80 = v20;
  *(_QWORD *)&v85 = v20;
  *((_QWORD *)&v85 + 1) = v19;
  v27 = v19;
  sub_23B503EB4(&v85, v84);
  v28 = v26;
  swift_bridgeObjectRetain();
  v29 = swift_isUniquelyReferenced_nonNull_native();
  sub_23B5037A8(v84, v28, v29);

  swift_bridgeObjectRelease();
  v30 = (void *)*MEMORY[0x24BDE9550];
  v86 = a9;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v85);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a9 - 8) + 16))(boxed_opaque_existential_1, a1, a9);
  sub_23B503EB4(&v85, v84);
  v32 = v30;
  v33 = swift_isUniquelyReferenced_nonNull_native();
  sub_23B5037A8(v84, v32, v33);
  v87 = v24;

  swift_bridgeObjectRelease();
  v34 = (void *)*MEMORY[0x24BDE9140];
  v35 = (void *)*MEMORY[0x24BDBD268];
  if (*MEMORY[0x24BDBD268])
  {
    type metadata accessor for CFBoolean(0);
    v86 = v36;
    *(_QWORD *)&v85 = v35;
    sub_23B503EB4(&v85, v84);
    v37 = v34;
    v38 = v35;
    v39 = swift_isUniquelyReferenced_nonNull_native();
    sub_23B5037A8(v84, v37, v39);
    v87 = v24;

    swift_bridgeObjectRelease();
  }
  else
  {
    v40 = v34;
    sub_23B56449C((uint64_t)v40, &v85);

    sub_23B5043F0((uint64_t)&v85, &qword_2542F9CD8);
  }
  v41 = (void *)*MEMORY[0x24BDE8F60];
  if (!v17)
  {
    v42 = (void **)MEMORY[0x24BDE8FA0];
    goto LABEL_9;
  }
  if (v17 == 1)
  {
    v42 = (void **)MEMORY[0x24BDE8F70];
LABEL_9:
    v43 = *v42;
    v44 = v82;
LABEL_11:
    v45 = v43;
    type metadata accessor for CFString(0);
    v86 = v46;
    *(_QWORD *)&v85 = v45;
    sub_23B503EB4(&v85, v84);
    v47 = v41;
    v48 = v87;
    v49 = swift_isUniquelyReferenced_nonNull_native();
    sub_23B5037A8(v84, v47, v49);
    v87 = v48;

    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  v43 = (void *)*MEMORY[0x24BDE8F88];
  v44 = v82;
  if (*MEMORY[0x24BDE8F88])
    goto LABEL_11;
  v78 = v41;
  sub_23B56449C((uint64_t)v78, &v85);

  sub_23B5043F0((uint64_t)&v85, &qword_2542F9CD8);
LABEL_12:
  v50 = (void *)*MEMORY[0x24BDE9528];
  v51 = (void *)*MEMORY[0x24BDBD270];
  if (!*MEMORY[0x24BDBD270])
  {
    v60 = v50;
    sub_23B56449C((uint64_t)v60, &v85);

    sub_23B5043F0((uint64_t)&v85, &qword_2542F9CD8);
    if (!v44)
      goto LABEL_16;
    goto LABEL_14;
  }
  type metadata accessor for CFBoolean(0);
  v86 = v52;
  *(_QWORD *)&v85 = v51;
  sub_23B503EB4(&v85, v84);
  v53 = v50;
  v54 = v51;
  v55 = v87;
  v56 = swift_isUniquelyReferenced_nonNull_native();
  sub_23B5037A8(v84, v53, v56);
  v87 = v55;

  swift_bridgeObjectRelease();
  if (v44)
  {
LABEL_14:
    v57 = (void *)*MEMORY[0x24BDE8F50];
    v86 = MEMORY[0x24BEE0D00];
    *(_QWORD *)&v85 = v81;
    *((_QWORD *)&v85 + 1) = v44;
    sub_23B503EB4(&v85, v84);
    swift_bridgeObjectRetain();
    v58 = v57;
    v59 = swift_isUniquelyReferenced_nonNull_native();
    sub_23B5037A8(v84, v58, v59);

    swift_bridgeObjectRelease();
  }
LABEL_16:
  v61 = swift_bridgeObjectRetain();
  v62 = sub_23B565C00(v61);
  swift_bridgeObjectRelease();
  if (v62 != -25299)
  {
    result = swift_bridgeObjectRelease();
    if (!v62)
      return result;
    goto LABEL_23;
  }
  v63 = (void *)*MEMORY[0x24BDE9000];
  v86 = MEMORY[0x24BDCDDE8];
  v85 = xmmword_23B56F430;
  sub_23B503EB4(&v85, v84);
  v64 = v63;
  v65 = swift_isUniquelyReferenced_nonNull_native();
  sub_23B5037A8(v84, v64, v65);

  swift_bridgeObjectRelease();
  v66 = MEMORY[0x24BEE0D00];
  v86 = MEMORY[0x24BEE0D00];
  *(_QWORD *)&v85 = v79;
  *((_QWORD *)&v85 + 1) = v83;
  sub_23B503EB4(&v85, v84);
  swift_bridgeObjectRetain();
  v67 = v23;
  v68 = MEMORY[0x24BEE4B00];
  v69 = swift_isUniquelyReferenced_nonNull_native();
  sub_23B5037A8(v84, v67, v69);

  swift_bridgeObjectRelease();
  v86 = v66;
  *(_QWORD *)&v85 = v80;
  *((_QWORD *)&v85 + 1) = v27;
  sub_23B503EB4(&v85, v84);
  swift_bridgeObjectRetain();
  v70 = v28;
  v71 = swift_isUniquelyReferenced_nonNull_native();
  sub_23B5037A8(v84, v70, v71);

  swift_bridgeObjectRelease();
  if (v51)
  {
    type metadata accessor for CFBoolean(0);
    v86 = v72;
    *(_QWORD *)&v85 = v51;
    sub_23B503EB4(&v85, v84);
    v73 = v50;
    v74 = v51;
    v75 = swift_isUniquelyReferenced_nonNull_native();
    sub_23B5037A8(v84, v73, v75);

    swift_bridgeObjectRelease();
  }
  else
  {
    v76 = v50;
    sub_23B56449C((uint64_t)v76, &v85);

    sub_23B5043F0((uint64_t)&v85, &qword_2542F9CD8);
  }
  v62 = sub_23B5661A4(v68);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (v62)
  {
LABEL_23:
    sub_23B568780();
    swift_allocError();
    *(_DWORD *)v77 = v62;
    *(_BYTE *)(v77 + 4) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_23B566EC8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_23B502434(a1, a2);
  return a1;
}

unint64_t sub_23B566EDC(unint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  unint64_t v20;
  char v21;
  __int128 v22;
  id v23;
  uint64_t v24;
  int v25;
  void *v26;
  unint64_t v27;
  id v28;
  unint64_t v29;
  char v30;
  void *v31;
  uint64_t v32;
  id v33;
  id v34;
  char isUniquelyReferenced_nonNull_native;
  void *v36;
  unint64_t v37;
  id v38;
  unint64_t v39;
  char v40;
  void *v41;
  uint64_t v42;
  id v43;
  id v44;
  char v45;
  id v46;
  NSObject *v47;
  os_log_type_t v48;
  _BOOL4 v49;
  uint8_t *v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const __CFDictionary *v57;
  OSStatus v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  unint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint64_t v65;
  CFStringRef v66;
  __CFString *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  void *v81;
  id v82;
  unint64_t v83;
  char v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  id v97;
  char v98;
  NSObject *v99;
  os_log_type_t v100;
  uint8_t *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char v114;
  uint8_t *v115;
  uint64_t v116;
  int v117;
  char *v118;
  _QWORD *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  _OWORD v132[2];
  __int128 v133;
  __int128 v134;
  CFTypeRef result[2];

  v3 = v2;
  v117 = a2;
  result[1] = *(CFTypeRef *)MEMORY[0x24BDAC8D0];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9BB0);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v119 = (uint8_t **)((char *)&v115 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v6);
  v126 = (char *)&v115 - v8;
  v9 = type metadata accessor for Keychain.Item();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v115 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v127 = (uint64_t)&v115 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v125 = (uint64_t)&v115 - v16;
  v130 = a1;
  result[0] = 0;
  v17 = *(_QWORD *)(a1 + 16);
  v118 = v13;
  if (!v17)
  {
    v133 = 0u;
    v134 = 0u;
    swift_bridgeObjectRetain();
    goto LABEL_10;
  }
  v18 = (void *)*MEMORY[0x24BDE93B0];
  swift_bridgeObjectRetain();
  v19 = v18;
  v20 = sub_23B503A0C((uint64_t)v19);
  if ((v21 & 1) == 0)
  {
    v133 = 0u;
    v134 = 0u;

    goto LABEL_10;
  }
  sub_23B5035B4(*(_QWORD *)(a1 + 56) + 32 * v20, (uint64_t)&v133);

  if (!*((_QWORD *)&v134 + 1))
  {
LABEL_10:
    sub_23B5043F0((uint64_t)&v133, &qword_2542F9CD8);
LABEL_11:
    v25 = 0;
    goto LABEL_12;
  }
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_11;
  v22 = v132[0];
  v23 = (id)*MEMORY[0x24BDE93B8];
  if ((_QWORD)v22 == sub_23B56A2F4() && *((_QWORD *)&v22 + 1) == v24)
  {
    swift_bridgeObjectRelease_n();
    v25 = 1;
    goto LABEL_12;
  }
  v114 = sub_23B56AD98();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v114 & 1) == 0)
    goto LABEL_11;
  v25 = 1;
LABEL_12:
  v26 = (void *)*MEMORY[0x24BDE9220];
  v27 = v130;
  if (*(_QWORD *)(v130 + 16))
  {
    v28 = v26;
    v29 = sub_23B503A0C((uint64_t)v28);
    if ((v30 & 1) != 0)
    {
      sub_23B5035B4(*(_QWORD *)(v27 + 56) + 32 * v29, (uint64_t)&v133);
    }
    else
    {
      v133 = 0u;
      v134 = 0u;
    }

    if (*((_QWORD *)&v134 + 1))
    {
      sub_23B5043F0((uint64_t)&v133, &qword_2542F9CD8);
      goto LABEL_20;
    }
  }
  else
  {
    v133 = 0u;
    v134 = 0u;
  }
  sub_23B5043F0((uint64_t)&v133, &qword_2542F9CD8);
  v31 = (void *)*MEMORY[0x24BDE9230];
  type metadata accessor for CFString(0);
  *((_QWORD *)&v134 + 1) = v32;
  *(_QWORD *)&v133 = v31;
  sub_23B503EB4(&v133, v132);
  v33 = v26;
  v34 = v31;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v131 = v130;
  v130 = 0x8000000000000000;
  sub_23B5037A8(v132, v33, isUniquelyReferenced_nonNull_native);
  v130 = v131;

  swift_bridgeObjectRelease();
LABEL_20:
  v36 = (void *)*MEMORY[0x24BDE94C0];
  v37 = v130;
  if (*(_QWORD *)(v130 + 16))
  {
    v38 = v36;
    v39 = sub_23B503A0C((uint64_t)v38);
    if ((v40 & 1) != 0)
    {
      sub_23B5035B4(*(_QWORD *)(v37 + 56) + 32 * v39, (uint64_t)&v133);
    }
    else
    {
      v133 = 0u;
      v134 = 0u;
    }

    if (*((_QWORD *)&v134 + 1))
      goto LABEL_29;
  }
  else
  {
    v133 = 0u;
    v134 = 0u;
  }
  sub_23B5043F0((uint64_t)&v133, &qword_2542F9CD8);
  v41 = (void *)*MEMORY[0x24BDBD270];
  if (*MEMORY[0x24BDBD270])
  {
    type metadata accessor for CFBoolean(0);
    *((_QWORD *)&v134 + 1) = v42;
    *(_QWORD *)&v133 = v41;
    sub_23B503EB4(&v133, v132);
    v43 = v36;
    v44 = v41;
    v45 = swift_isUniquelyReferenced_nonNull_native();
    v131 = v130;
    v130 = 0x8000000000000000;
    sub_23B5037A8(v132, v43, v45);
    v130 = v131;

    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  v46 = v36;
  sub_23B56449C((uint64_t)v46, &v133);

LABEL_29:
  sub_23B5043F0((uint64_t)&v133, &qword_2542F9CD8);
LABEL_30:
  if (qword_2542F9C18 != -1)
    swift_once();
  v123 = sub_23B56A060();
  v124 = __swift_project_value_buffer(v123, (uint64_t)qword_2542F9C20);
  v47 = sub_23B56A048();
  v48 = sub_23B56A84C();
  v49 = os_log_type_enabled(v47, v48);
  v122 = v3;
  v121 = v10;
  v120 = v9;
  if (v49)
  {
    v50 = (uint8_t *)swift_slowAlloc();
    v116 = swift_slowAlloc();
    *(_QWORD *)&v133 = v116;
    *(_DWORD *)v50 = 136315138;
    v115 = v50 + 4;
    swift_beginAccess();
    type metadata accessor for CFString(0);
    v51 = v25;
    sub_23B4FCC20(&qword_2542F9BC8, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_23B56EE30);
    swift_bridgeObjectRetain();
    v52 = sub_23B56A198();
    v54 = v53;
    swift_bridgeObjectRelease();
    v55 = v52;
    v25 = v51;
    *(_QWORD *)&v132[0] = sub_23B5034E4(v55, v54, (uint64_t *)&v133);
    sub_23B56A918();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23B4F9000, v47, v48, "SecItemCopyMatching() query: %s", v50, 0xCu);
    v56 = v116;
    swift_arrayDestroy();
    MEMORY[0x23B867948](v56, -1, -1);
    MEMORY[0x23B867948](v50, -1, -1);
  }

  swift_beginAccess();
  type metadata accessor for CFString(0);
  sub_23B4FCC20(&qword_2542F9BC8, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_23B56EE30);
  swift_bridgeObjectRetain();
  v57 = (const __CFDictionary *)sub_23B56A180();
  swift_bridgeObjectRelease();
  v58 = SecItemCopyMatching(v57, result);

  v59 = sub_23B56A048();
  v60 = sub_23B56A84C();
  if (os_log_type_enabled(v59, v60))
  {
    v61 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v61 = 67109120;
    LODWORD(v133) = v58;
    sub_23B56A918();
    _os_log_impl(&dword_23B4F9000, v59, v60, "SecItemCopyMatching() status: %d", v61, 8u);
    MEMORY[0x23B867948](v61, -1, -1);
  }

  if (v58)
  {
    if (qword_256A2BA30 != -1)
      swift_once();
    v62 = __swift_project_value_buffer(v123, (uint64_t)qword_256A33BE0);
    v63 = sub_23B56A048();
    v64 = sub_23B56A834();
    if (os_log_type_enabled(v63, v64))
    {
      v62 = swift_slowAlloc();
      v65 = swift_slowAlloc();
      *(_QWORD *)&v133 = v65;
      *(_DWORD *)v62 = 67109378;
      LODWORD(v132[0]) = v58;
      sub_23B56A918();
      *(_WORD *)(v62 + 8) = 2082;
      v66 = SecCopyErrorMessageString(v58, 0);
      if (v66)
      {
        v67 = (__CFString *)v66;
        v68 = sub_23B56A288();
        v70 = v69;

      }
      else
      {
        v70 = 0xE90000000000003ELL;
        v68 = 0x6E776F6E6B6E753CLL;
      }
      *(_QWORD *)&v132[0] = sub_23B5034E4(v68, v70, (uint64_t *)&v133);
      sub_23B56A918();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23B4F9000, v63, v64, "SecItemCopyMatching error: %d [%{public}s]", (uint8_t *)v62, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x23B867948](v65, -1, -1);
      MEMORY[0x23B867948](v62, -1, -1);
    }

    sub_23B568780();
    swift_allocError();
    *(_DWORD *)v85 = v58;
    *(_BYTE *)(v85 + 4) = 0;
    swift_willThrow();
  }
  else if (v25)
  {
    if (result[0]
      && (*(CFTypeRef *)&v133 = result[0],
          swift_unknownObjectRetain(),
          __swift_instantiateConcreteTypeFromMangledName(&qword_256A2D0B8),
          swift_dynamicCast()))
    {
      v71 = *(_QWORD *)&v132[0];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_256A2D0B0);
      v71 = swift_allocObject();
      *(_OWORD *)(v71 + 16) = xmmword_23B56F770;
      *(_QWORD *)(v71 + 32) = sub_23B50F7D4(MEMORY[0x24BEE4AF8]);
    }
    swift_bridgeObjectRetain_n();
    v73 = sub_23B56A048();
    v74 = sub_23B56A84C();
    if (os_log_type_enabled(v73, v74))
    {
      v75 = (uint8_t *)swift_slowAlloc();
      v76 = swift_slowAlloc();
      *(_QWORD *)&v133 = v76;
      *(_DWORD *)v75 = 136315138;
      swift_bridgeObjectRetain();
      v77 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AB0);
      v78 = MEMORY[0x23B866820](v71, v77);
      v80 = v79;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v132[0] = sub_23B5034E4(v78, v80, (uint64_t *)&v133);
      sub_23B56A918();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23B4F9000, v73, v74, "SecItemCopyMatching() result: %s", v75, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B867948](v76, -1, -1);
      MEMORY[0x23B867948](v75, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v86 = v121;
    v87 = v120;
    v88 = v126;
    v89 = *(_QWORD *)(v71 + 16);
    if (v89)
    {
      swift_bridgeObjectRetain();
      v90 = 0;
      v62 = MEMORY[0x24BEE4AF8];
      do
      {
        v91 = swift_bridgeObjectRetain();
        sub_23B5025B4(v91, v88);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v86 + 48))(v88, 1, v87) == 1)
        {
          sub_23B5043F0((uint64_t)v88, &qword_2542F9BB0);
        }
        else
        {
          v92 = (uint64_t)v88;
          v93 = v125;
          sub_23B505154(v92, v125);
          sub_23B505154(v93, v127);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v62 = sub_23B50B6DC(0, *(_QWORD *)(v62 + 16) + 1, 1, v62);
          v95 = *(_QWORD *)(v62 + 16);
          v94 = *(_QWORD *)(v62 + 24);
          if (v95 >= v94 >> 1)
            v62 = sub_23B50B6DC(v94 > 1, v95 + 1, 1, v62);
          *(_QWORD *)(v62 + 16) = v95 + 1;
          sub_23B505154(v127, v62+ ((*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80))+ *(_QWORD *)(v86 + 72) * v95);
          v88 = v126;
        }
        ++v90;
      }
      while (v89 != v90);
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      v62 = MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    if (result[0]
      && (*(CFTypeRef *)&v133 = result[0],
          swift_unknownObjectRetain(),
          __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9AB0),
          swift_dynamicCast()))
    {
      v72 = *(_QWORD *)&v132[0];
    }
    else
    {
      v72 = sub_23B50F7D4(MEMORY[0x24BEE4AF8]);
    }
    v129 = v72;
    v81 = (void *)*MEMORY[0x24BDE9550];
    if (*(_QWORD *)(v72 + 16))
    {
      swift_bridgeObjectRetain();
      v82 = v81;
      v83 = sub_23B503A0C((uint64_t)v82);
      if ((v84 & 1) != 0)
      {
        sub_23B5035B4(*(_QWORD *)(v72 + 56) + 32 * v83, (uint64_t)&v133);
      }
      else
      {
        v133 = 0u;
        v134 = 0u;
      }

    }
    else
    {
      v133 = 0u;
      v134 = 0u;
      swift_bridgeObjectRetain();
    }
    v96 = *((_QWORD *)&v134 + 1);
    sub_23B5043F0((uint64_t)&v133, &qword_2542F9CD8);
    if (v96)
    {
      *((_QWORD *)&v134 + 1) = MEMORY[0x24BEE0D00];
      *(_QWORD *)&v133 = 0x455443414445523CLL;
      *((_QWORD *)&v133 + 1) = 0xEA00000000003E44;
      sub_23B503EB4(&v133, v132);
      v97 = v81;
      v98 = swift_isUniquelyReferenced_nonNull_native();
      v128 = v72;
      sub_23B5037A8(v132, v97, v98);
      v129 = v128;

      swift_bridgeObjectRelease();
    }
    v99 = sub_23B56A048();
    v100 = sub_23B56A84C();
    if (os_log_type_enabled(v99, v100))
    {
      v101 = (uint8_t *)swift_slowAlloc();
      v127 = swift_slowAlloc();
      *(_QWORD *)&v132[0] = v127;
      *(_DWORD *)v101 = 136315138;
      v126 = (char *)(v101 + 4);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v102 = sub_23B56A198();
      v104 = v103;
      swift_bridgeObjectRelease();
      v128 = sub_23B5034E4(v102, v104, (uint64_t *)v132);
      sub_23B56A918();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23B4F9000, v99, v100, "SecItemCopyMatching() result: %s", v101, 0xCu);
      v105 = v127;
      swift_arrayDestroy();
      MEMORY[0x23B867948](v105, -1, -1);
      MEMORY[0x23B867948](v101, -1, -1);
    }

    v62 = v121;
    v106 = v120;
    v107 = swift_bridgeObjectRetain();
    v108 = v119;
    sub_23B5025B4(v107, v119);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v62 + 48))(v108, 1, v106) == 1)
    {
      swift_bridgeObjectRelease();
      sub_23B5043F0((uint64_t)v108, &qword_2542F9BB0);
      sub_23B568780();
      swift_allocError();
      *(_DWORD *)v109 = 1;
      *(_BYTE *)(v109 + 4) = 1;
      swift_willThrow();
      swift_bridgeObjectRelease();
    }
    else
    {
      v110 = (uint64_t)v118;
      sub_23B505154((uint64_t)v108, (uint64_t)v118);
      if ((v117 & 1) == 0)
      {
        v111 = v130;
        swift_bridgeObjectRetain();
        sub_23B505260(v72, v111);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9BF8);
      v112 = (*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
      v62 = swift_allocObject();
      *(_OWORD *)(v62 + 16) = xmmword_23B56F770;
      sub_23B505154(v110, v62 + v112);
      swift_bridgeObjectRelease();
    }
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v62;
}

uint64_t sub_23B567F54(uint64_t a1)
{
  void *v2;
  id v3;
  unint64_t v4;
  char v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  const __CFDictionary *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  CFStringRef v29;
  __CFString *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = a1;
  v2 = (void *)*MEMORY[0x24BDE9220];
  if (*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRetain();
    v3 = v2;
    v4 = sub_23B503A0C((uint64_t)v3);
    if ((v5 & 1) != 0)
    {
      sub_23B5035B4(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v38);

      if (*((_QWORD *)&v39 + 1))
      {
        sub_23B5043F0((uint64_t)&v38, &qword_2542F9CD8);
        goto LABEL_8;
      }
    }
    else
    {
      v38 = 0u;
      v39 = 0u;

    }
  }
  else
  {
    v38 = 0u;
    v39 = 0u;
    swift_bridgeObjectRetain();
  }
  sub_23B5043F0((uint64_t)&v38, &qword_2542F9CD8);
  v6 = (void *)*MEMORY[0x24BDE9230];
  type metadata accessor for CFString(0);
  *((_QWORD *)&v39 + 1) = v7;
  *(_QWORD *)&v38 = v6;
  sub_23B503EB4(&v38, v37);
  v8 = v2;
  v9 = v6;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v36 = a1;
  sub_23B5037A8(v37, v8, isUniquelyReferenced_nonNull_native);
  v40 = a1;

  swift_bridgeObjectRelease();
LABEL_8:
  if (qword_2542F9C18 != -1)
    swift_once();
  v11 = sub_23B56A060();
  __swift_project_value_buffer(v11, (uint64_t)qword_2542F9C20);
  v12 = sub_23B56A048();
  v13 = sub_23B56A84C();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    v35 = v11;
    v15 = swift_slowAlloc();
    *(_QWORD *)&v38 = v15;
    *(_DWORD *)v14 = 136315138;
    swift_beginAccess();
    type metadata accessor for CFString(0);
    sub_23B4FCC20(&qword_2542F9BC8, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_23B56EE30);
    swift_bridgeObjectRetain();
    v16 = sub_23B56A198();
    v18 = v17;
    swift_bridgeObjectRelease();
    v36 = sub_23B5034E4(v16, v18, (uint64_t *)&v38);
    sub_23B56A918();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23B4F9000, v12, v13, "SecItemDelete() query: %s", v14, 0xCu);
    swift_arrayDestroy();
    v19 = v15;
    v11 = v35;
    MEMORY[0x23B867948](v19, -1, -1);
    MEMORY[0x23B867948](v14, -1, -1);
  }

  swift_beginAccess();
  type metadata accessor for CFString(0);
  sub_23B4FCC20(&qword_2542F9BC8, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_23B56EE30);
  swift_bridgeObjectRetain();
  v20 = (const __CFDictionary *)sub_23B56A180();
  swift_bridgeObjectRelease();
  v21 = SecItemDelete(v20);

  v22 = sub_23B56A048();
  v23 = sub_23B56A84C();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v24 = 67109120;
    LODWORD(v36) = v21;
    sub_23B56A918();
    _os_log_impl(&dword_23B4F9000, v22, v23, "SecItemDelete() status: %d", v24, 8u);
    MEMORY[0x23B867948](v24, -1, -1);
  }

  if ((_DWORD)v21)
  {
    if (qword_256A2BA30 != -1)
      swift_once();
    __swift_project_value_buffer(v11, (uint64_t)qword_256A33BE0);
    v25 = sub_23B56A048();
    v26 = sub_23B56A834();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc();
      v28 = swift_slowAlloc();
      v36 = v28;
      *(_DWORD *)v27 = 67109378;
      sub_23B56A918();
      *(_WORD *)(v27 + 8) = 2082;
      v29 = SecCopyErrorMessageString(v21, 0);
      if (v29)
      {
        v30 = (__CFString *)v29;
        v31 = sub_23B56A288();
        v33 = v32;

      }
      else
      {
        v33 = 0xE90000000000003ELL;
        v31 = 0x6E776F6E6B6E753CLL;
      }
      sub_23B5034E4(v31, v33, &v36);
      sub_23B56A918();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23B4F9000, v25, v26, "SecItemDelete error: %d [%{public}s]", (uint8_t *)v27, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x23B867948](v28, -1, -1);
      MEMORY[0x23B867948](v27, -1, -1);
    }

  }
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t sub_23B5684E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t result;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  void *v19;
  id v20;
  char v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  char v27;
  void *v28;
  id v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  id v33;
  int v34;
  uint64_t v35;
  _OWORD v36[2];
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  result = sub_23B504088();
  if (!v6)
  {
    v14 = (void *)*MEMORY[0x24BDE9128];
    v15 = MEMORY[0x24BEE0D00];
    v38 = MEMORY[0x24BEE0D00];
    *(_QWORD *)&v37 = a3;
    *((_QWORD *)&v37 + 1) = a4;
    sub_23B503EB4(&v37, v36);
    v16 = v14;
    swift_bridgeObjectRetain();
    v17 = MEMORY[0x24BEE4B00];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_23B5037A8(v36, v16, isUniquelyReferenced_nonNull_native);

    swift_bridgeObjectRelease();
    v19 = (void *)*MEMORY[0x24BDE8FA8];
    v38 = v15;
    *(_QWORD *)&v37 = a1;
    *((_QWORD *)&v37 + 1) = a2;
    sub_23B503EB4(&v37, v36);
    v20 = v19;
    swift_bridgeObjectRetain();
    v21 = swift_isUniquelyReferenced_nonNull_native();
    sub_23B5037A8(v36, v20, v21);
    v39 = v17;

    swift_bridgeObjectRelease();
    v22 = (void *)*MEMORY[0x24BDE9528];
    v23 = (void *)*MEMORY[0x24BDBD270];
    if (*MEMORY[0x24BDBD270])
    {
      type metadata accessor for CFBoolean(0);
      v38 = v24;
      *(_QWORD *)&v37 = v23;
      sub_23B503EB4(&v37, v36);
      v25 = v22;
      v26 = v23;
      v27 = swift_isUniquelyReferenced_nonNull_native();
      sub_23B5037A8(v36, v25, v27);
      v39 = v17;

      swift_bridgeObjectRelease();
      if (a6)
      {
LABEL_4:
        v28 = (void *)*MEMORY[0x24BDE8F50];
        v38 = v15;
        *(_QWORD *)&v37 = a5;
        *((_QWORD *)&v37 + 1) = a6;
        sub_23B503EB4(&v37, v36);
        swift_bridgeObjectRetain();
        v29 = v28;
        v30 = v39;
        v31 = swift_isUniquelyReferenced_nonNull_native();
        sub_23B5037A8(v36, v29, v31);
        v32 = v30;

        swift_bridgeObjectRelease();
        goto LABEL_7;
      }
    }
    else
    {
      v33 = v22;
      sub_23B56449C((uint64_t)v33, &v37);

      sub_23B5043F0((uint64_t)&v37, &qword_2542F9CD8);
      if (a6)
        goto LABEL_4;
    }
    v32 = v39;
LABEL_7:
    v34 = sub_23B567F54(v32);
    result = swift_bridgeObjectRelease();
    if (v34)
    {
      sub_23B568780();
      swift_allocError();
      *(_DWORD *)v35 = v34;
      *(_BYTE *)(v35 + 4) = 0;
      return swift_willThrow();
    }
  }
  return result;
}

unint64_t sub_23B568780()
{
  unint64_t result;

  result = qword_256A2D090;
  if (!qword_256A2D090)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for Keychain.Error, &type metadata for Keychain.Error);
    atomic_store(result, (unint64_t *)&qword_256A2D090);
  }
  return result;
}

uint64_t sub_23B5687C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Keychain.Item();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23B568808(char a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  unint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  char v20;
  id v21;
  void **v22;
  uint64_t v23;
  void *v24;
  id v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t i;
  unint64_t v37;
  BOOL v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  char v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  char v56;
  _QWORD *v57;
  id v58;
  _OWORD *v59;
  id v60;
  id v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  SecTaskRef v65;
  __SecTask *v66;
  uint64_t v67;
  __CFString *v68;
  CFTypeRef v69;
  uint64_t v70;
  uint64_t inited;
  uint64_t result;
  uint64_t v73;
  int64_t v74;
  char v75;
  void *v76;
  int64_t v77;
  uint64_t v78;
  _OWORD v79[2];
  __int128 v80;
  __int128 v81;
  unint64_t v82;

  sub_23B504088();
  if (v4)
    return v3;
  v8 = (void *)*MEMORY[0x24BDE93B0];
  v9 = (void *)*MEMORY[0x24BDE93B8];
  type metadata accessor for CFString(0);
  *((_QWORD *)&v81 + 1) = v10;
  *(_QWORD *)&v80 = v9;
  sub_23B503EB4(&v80, v79);
  v11 = v8;
  v12 = v9;
  v13 = MEMORY[0x24BEE4B00];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_23B5037A8(v79, v11, isUniquelyReferenced_nonNull_native);
  v82 = v13;

  swift_bridgeObjectRelease();
  v15 = (void *)*MEMORY[0x24BDE9528];
  v16 = (void *)*MEMORY[0x24BDBD270];
  if (*MEMORY[0x24BDBD270])
  {
    type metadata accessor for CFBoolean(0);
    *((_QWORD *)&v81 + 1) = v17;
    *(_QWORD *)&v80 = v16;
    sub_23B503EB4(&v80, v79);
    v18 = v15;
    v19 = v16;
    v20 = swift_isUniquelyReferenced_nonNull_native();
    sub_23B5037A8(v79, v18, v20);
    v82 = v13;

    swift_bridgeObjectRelease();
  }
  else
  {
    v21 = v15;
    sub_23B56449C((uint64_t)v21, &v80);

    sub_23B5043F0((uint64_t)&v80, &qword_2542F9CD8);
  }
  v22 = (void **)MEMORY[0x24BDE8F50];
  v23 = MEMORY[0x24BEE0D00];
  if (!a3)
  {
    v60 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
    v61 = objc_msgSend(v60, sel_bundleIdentifier);

    if (v61)
    {
      v62 = sub_23B56A288();
      v64 = v63;

    }
    else
    {
      v62 = 0xD000000000000019;
      v64 = 0x800000023B56D370;
    }
    v65 = SecTaskCreateFromSelf(0);
    if (v65)
    {
      v66 = v65;
      v67 = v23;
      v68 = (__CFString *)sub_23B56A264();
      v69 = SecTaskCopyValueForEntitlement(v66, v68, 0);

      if (v69)
      {
        *((_QWORD *)&v81 + 1) = swift_getObjectType();

        *(_QWORD *)&v80 = v69;
        v23 = v67;
        goto LABEL_47;
      }
      v80 = 0u;
      v81 = 0u;

      v23 = v67;
      if (*((_QWORD *)&v81 + 1))
      {
LABEL_47:
        __swift_instantiateConcreteTypeFromMangledName(&qword_2542F9B58);
        if (swift_dynamicCast())
        {
          v70 = *(_QWORD *)&v79[0];
          goto LABEL_50;
        }
LABEL_49:
        v70 = MEMORY[0x24BEE4AF8];
LABEL_50:
        __swift_instantiateConcreteTypeFromMangledName(&qword_2542F99C0);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_23B56F770;
        *(_QWORD *)(inited + 32) = v62;
        *(_QWORD *)(inited + 40) = v64;
        *(_QWORD *)&v80 = inited;
        sub_23B5625B8(v70);
        v28 = sub_23B53B8C0(v80);
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v28 + 16))
          goto LABEL_7;
        goto LABEL_51;
      }
    }
    else
    {
      v80 = 0u;
      v81 = 0u;
    }
    sub_23B5043F0((uint64_t)&v80, &qword_2542F9CD8);
    goto LABEL_49;
  }
  v24 = (void *)*MEMORY[0x24BDE8F50];
  *((_QWORD *)&v81 + 1) = MEMORY[0x24BEE0D00];
  *(_QWORD *)&v80 = a2;
  *((_QWORD *)&v80 + 1) = a3;
  sub_23B503EB4(&v80, v79);
  swift_bridgeObjectRetain();
  v25 = v24;
  v26 = v82;
  v27 = swift_isUniquelyReferenced_nonNull_native();
  sub_23B5037A8(v79, v25, v27);
  v82 = v26;

  swift_bridgeObjectRelease();
  v28 = MEMORY[0x24BEE4B08];
  if (!*(_QWORD *)(MEMORY[0x24BEE4B08] + 16))
  {
LABEL_51:
    swift_bridgeObjectRelease();
    v3 = sub_23B566EDC(v82, a1 & 1);
    swift_bridgeObjectRelease();
    return v3;
  }
LABEL_7:
  v29 = 0;
  v30 = *(_QWORD *)(v28 + 56);
  v78 = MEMORY[0x24BEE4AF8];
  v73 = v28 + 56;
  v31 = 1 << *(_BYTE *)(v28 + 32);
  v32 = -1;
  if (v31 < 64)
    v32 = ~(-1 << v31);
  v33 = v32 & v30;
  v74 = (unint64_t)(v31 + 63) >> 6;
  v34 = v82;
  v76 = *v22;
  v75 = a1;
  if ((v32 & v30) == 0)
    goto LABEL_12;
LABEL_10:
  v35 = __clz(__rbit64(v33));
  v33 &= v33 - 1;
  v77 = v29;
  for (i = v35 | (v29 << 6); ; i = __clz(__rbit64(v40)) + (v39 << 6))
  {
    v42 = v28;
    v43 = (uint64_t *)(*(_QWORD *)(v28 + 48) + 16 * i);
    v44 = *v43;
    v45 = v43[1];
    v46 = v23;
    *((_QWORD *)&v81 + 1) = v23;
    *(_QWORD *)&v80 = v44;
    *((_QWORD *)&v80 + 1) = v45;
    sub_23B503EB4(&v80, v79);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v47 = v76;
    v48 = swift_isUniquelyReferenced_nonNull_native();
    v50 = sub_23B503A0C((uint64_t)v47);
    v51 = *(_QWORD *)(v34 + 16);
    v52 = (v49 & 1) == 0;
    v53 = v51 + v52;
    if (__OFADD__(v51, v52))
    {
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    v54 = v49;
    if (*(_QWORD *)(v34 + 24) >= v53)
    {
      if ((v48 & 1) != 0)
      {
        v57 = (_QWORD *)v34;
        if ((v49 & 1) != 0)
          goto LABEL_30;
      }
      else
      {
        sub_23B503EC4();
        v57 = (_QWORD *)v34;
        if ((v54 & 1) != 0)
          goto LABEL_30;
      }
    }
    else
    {
      sub_23B503B94(v53, v48);
      v55 = sub_23B503A0C((uint64_t)v47);
      if ((v54 & 1) != (v56 & 1))
        goto LABEL_57;
      v50 = v55;
      v57 = (_QWORD *)v34;
      if ((v54 & 1) != 0)
      {
LABEL_30:
        v59 = (_OWORD *)(v57[7] + 32 * v50);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
        sub_23B503EB4(v79, v59);
        goto LABEL_31;
      }
    }
    sub_23B503B30(v50, (uint64_t)v47, v79, v57);
    v58 = v47;
LABEL_31:

    swift_bridgeObjectRelease();
    v23 = v46;
    v37 = sub_23B566EDC((unint64_t)v57, v75 & 1);
    swift_bridgeObjectRelease();
    sub_23B562450(v37);
    v28 = v42;
    v29 = v77;
    if (v33)
      goto LABEL_10;
LABEL_12:
    v38 = __OFADD__(v29, 1);
    v39 = v29 + 1;
    if (v38)
      goto LABEL_55;
    if (v39 >= v74)
      goto LABEL_52;
    v40 = *(_QWORD *)(v73 + 8 * v39);
    if (!v40)
      break;
LABEL_22:
    v33 = (v40 - 1) & v40;
    v77 = v39;
  }
  v41 = v39 + 1;
  if (v39 + 1 >= v74)
    goto LABEL_52;
  v40 = *(_QWORD *)(v73 + 8 * v41);
  if (v40)
    goto LABEL_21;
  v41 = v39 + 2;
  if (v39 + 2 >= v74)
    goto LABEL_52;
  v40 = *(_QWORD *)(v73 + 8 * v41);
  if (v40)
    goto LABEL_21;
  v41 = v39 + 3;
  if (v39 + 3 >= v74)
  {
LABEL_52:
    swift_release();
    swift_bridgeObjectRelease();
    return v78;
  }
  v40 = *(_QWORD *)(v73 + 8 * v41);
  if (v40)
  {
LABEL_21:
    v39 = v41;
    goto LABEL_22;
  }
  while (1)
  {
    v39 = v41 + 1;
    if (__OFADD__(v41, 1))
      break;
    if (v39 >= v74)
      goto LABEL_52;
    v40 = *(_QWORD *)(v73 + 8 * v39);
    ++v41;
    if (v40)
      goto LABEL_22;
  }
LABEL_56:
  __break(1u);
LABEL_57:
  result = sub_23B56AE10();
  __break(1u);
  return result;
}

_QWORD *sub_23B56906C(char a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;

  v7 = type metadata accessor for Keychain.Item();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23B568808(a1, a2, (uint64_t)a3);
  if (!v3)
  {
    v12 = v11;
    v13 = *(_QWORD *)(v11 + 16);
    if (v13)
    {
      v25[1] = 0;
      v26 = MEMORY[0x24BEE4AF8];
      sub_23B522468(0, v13, 0);
      v14 = *(unsigned __int8 *)(v8 + 80);
      v25[0] = v12;
      v15 = v12 + ((v14 + 32) & ~v14);
      v16 = *(_QWORD *)(v8 + 72);
      v17 = v26;
      do
      {
        sub_23B5687C4(v15, (uint64_t)v10);
        v18 = *((_QWORD *)v10 + 2);
        v19 = *((_QWORD *)v10 + 3);
        swift_bridgeObjectRetain();
        sub_23B5024C8((uint64_t)v10);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_23B522468(0, *(_QWORD *)(v17 + 16) + 1, 1);
          v17 = v26;
        }
        v21 = *(_QWORD *)(v17 + 16);
        v20 = *(_QWORD *)(v17 + 24);
        if (v21 >= v20 >> 1)
        {
          sub_23B522468(v20 > 1, v21 + 1, 1);
          v17 = v26;
        }
        *(_QWORD *)(v17 + 16) = v21 + 1;
        v22 = v17 + 16 * v21;
        *(_QWORD *)(v22 + 32) = v18;
        *(_QWORD *)(v22 + 40) = v19;
        v15 += v16;
        --v13;
      }
      while (v13);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v17 = MEMORY[0x24BEE4AF8];
    }
    v23 = sub_23B53B8C0(v17);
    swift_bridgeObjectRelease();
    a3 = sub_23B565B1C(v23);
    swift_bridgeObjectRelease();
  }
  return a3;
}

_QWORD *sub_23B569240(char a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;

  v7 = type metadata accessor for Keychain.Item();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23B568808(a1, a2, (uint64_t)a3);
  if (!v3)
  {
    v12 = v11;
    v13 = *(_QWORD *)(v11 + 16);
    if (v13)
    {
      v25[1] = 0;
      v26 = MEMORY[0x24BEE4AF8];
      sub_23B522468(0, v13, 0);
      v14 = *(unsigned __int8 *)(v8 + 80);
      v25[0] = v12;
      v15 = v12 + ((v14 + 32) & ~v14);
      v16 = *(_QWORD *)(v8 + 72);
      v17 = v26;
      do
      {
        sub_23B5687C4(v15, (uint64_t)v10);
        v18 = *((_QWORD *)v10 + 4);
        v19 = *((_QWORD *)v10 + 5);
        swift_bridgeObjectRetain();
        sub_23B5024C8((uint64_t)v10);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_23B522468(0, *(_QWORD *)(v17 + 16) + 1, 1);
          v17 = v26;
        }
        v21 = *(_QWORD *)(v17 + 16);
        v20 = *(_QWORD *)(v17 + 24);
        if (v21 >= v20 >> 1)
        {
          sub_23B522468(v20 > 1, v21 + 1, 1);
          v17 = v26;
        }
        *(_QWORD *)(v17 + 16) = v21 + 1;
        v22 = v17 + 16 * v21;
        *(_QWORD *)(v22 + 32) = v18;
        *(_QWORD *)(v22 + 40) = v19;
        v15 += v16;
        --v13;
      }
      while (v13);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v17 = MEMORY[0x24BEE4AF8];
    }
    v23 = sub_23B53B8C0(v17);
    swift_bridgeObjectRelease();
    a3 = sub_23B565B1C(v23);
    swift_bridgeObjectRelease();
  }
  return a3;
}

unint64_t sub_23B569418()
{
  unint64_t result;

  result = qword_256A2D0A8;
  if (!qword_256A2D0A8)
  {
    result = MEMORY[0x23B867894](&protocol conformance descriptor for Keychain.DataProtectionClass, &type metadata for Keychain.DataProtectionClass);
    atomic_store(result, (unint64_t *)&qword_256A2D0A8);
  }
  return result;
}

ValueMetadata *type metadata accessor for Keychain()
{
  return &type metadata for Keychain;
}

uint64_t __swift_memcpy5_4(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for Keychain.Error(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Keychain.Error(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 5) = v3;
  return result;
}

uint64_t sub_23B5694CC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 4))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_23B5694E8(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)result = a2 - 1;
    *(_BYTE *)(result + 4) = 1;
  }
  else
  {
    *(_BYTE *)(result + 4) = 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Keychain.DataProtectionClass(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23B569554 + 4 * byte_23B573885[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23B569588 + 4 * byte_23B573880[v4]))();
}

uint64_t sub_23B569588(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23B569590(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23B569598);
  return result;
}

uint64_t sub_23B5695A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23B5695ACLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23B5695B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23B5695B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

char *initializeBufferWithCopyOfBuffer for Keychain.Item(char *a1, char *a2, int *a3)
{
  char *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *(_QWORD *)a2;
    *(_QWORD *)v4 = *(_QWORD *)a2;
    v4 = (char *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *((_QWORD *)a2 + 1);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *((_QWORD *)a1 + 1) = v7;
    v8 = *((_QWORD *)a2 + 3);
    *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a1 + 3) = v8;
    v9 = *((_QWORD *)a2 + 5);
    v10 = a3[7];
    v11 = &a1[v10];
    v12 = &a2[v10];
    *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
    *((_QWORD *)a1 + 5) = v9;
    v13 = sub_23B569F40();
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
    v14(&v4[a3[8]], &a2[a3[8]], v13);
    v15 = a3[10];
    v4[a3[9]] = a2[a3[9]];
    v16 = &v4[v15];
    v17 = (uint64_t *)&a2[v15];
    v18 = *(_QWORD *)&a2[v15 + 8];
    if (v18 >> 60 == 15)
    {
      *(_OWORD *)v16 = *(_OWORD *)v17;
    }
    else
    {
      v20 = *v17;
      sub_23B502434(*v17, v18);
      *(_QWORD *)v16 = v20;
      *((_QWORD *)v16 + 1) = v18;
    }
  }
  return v4;
}

char *assignWithCopy for Keychain.Item(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[7];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_23B569F40();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  v10(&a1[a3[8]], &a2[a3[8]], v9);
  a1[a3[9]] = a2[a3[9]];
  v11 = a3[10];
  v12 = (uint64_t *)&a1[v11];
  v13 = (uint64_t *)&a2[v11];
  v14 = *(_QWORD *)&a2[v11 + 8];
  if (*(_QWORD *)&a1[v11 + 8] >> 60 != 15)
  {
    if (v14 >> 60 != 15)
    {
      v16 = *v13;
      sub_23B502434(v16, v14);
      v17 = *v12;
      v18 = v12[1];
      *v12 = v16;
      v12[1] = v14;
      sub_23B504944(v17, v18);
      return a1;
    }
    sub_23B569860((uint64_t)v12);
    goto LABEL_6;
  }
  if (v14 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)v12 = *(_OWORD *)v13;
    return a1;
  }
  v15 = *v13;
  sub_23B502434(v15, v14);
  *v12 = v15;
  v12[1] = v14;
  return a1;
}

uint64_t sub_23B569860(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BDCDDE8] - 8) + 8))();
  return a1;
}

char *initializeWithTake for Keychain.Item(char *a1, char *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;

  v6 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v6;
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  v7 = a3[7];
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = sub_23B569F40();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v11(&a1[a3[8]], &a2[a3[8]], v10);
  v12 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  *(_OWORD *)&a1[v12] = *(_OWORD *)&a2[v12];
  return a1;
}

char *assignWithTake for Keychain.Item(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  v7 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a1 + 3) = v7;
  swift_bridgeObjectRelease();
  v8 = *((_QWORD *)a2 + 5);
  *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a1 + 5) = v8;
  swift_bridgeObjectRelease();
  v9 = a3[7];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = sub_23B569F40();
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40);
  v13(v10, v11, v12);
  v13(&a1[a3[8]], &a2[a3[8]], v12);
  v14 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  v15 = (uint64_t *)&a1[v14];
  v16 = (uint64_t *)&a2[v14];
  v17 = *(_QWORD *)&a1[v14 + 8];
  if (v17 >> 60 != 15)
  {
    v18 = v16[1];
    if (v18 >> 60 != 15)
    {
      v19 = *v15;
      *v15 = *v16;
      v15[1] = v18;
      sub_23B504944(v19, v17);
      return a1;
    }
    sub_23B569860((uint64_t)v15);
  }
  *(_OWORD *)v15 = *(_OWORD *)v16;
  return a1;
}

uint64_t sub_23B569A48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_23B569F40();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_23B569AC4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_23B569F40();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_23B569B38(uint64_t a1, uint64_t a2)
{
  assignWithTake for XPCSessionManager.ListenerRecord(a2, a1);
  return a2;
}

uint64_t sub_23B569B74()
{
  return MEMORY[0x24BDCB188]();
}

uint64_t sub_23B569B80()
{
  return MEMORY[0x24BDCB220]();
}

uint64_t sub_23B569B8C()
{
  return MEMORY[0x24BDCB260]();
}

uint64_t sub_23B569B98()
{
  return MEMORY[0x24BDCB268]();
}

uint64_t sub_23B569BA4()
{
  return MEMORY[0x24BDCB3B8]();
}

uint64_t sub_23B569BB0()
{
  return MEMORY[0x24BDCB400]();
}

uint64_t sub_23B569BBC()
{
  return MEMORY[0x24BDCB410]();
}

uint64_t sub_23B569BC8()
{
  return MEMORY[0x24BDCB630]();
}

uint64_t sub_23B569BD4()
{
  return MEMORY[0x24BDCB720]();
}

uint64_t sub_23B569BE0()
{
  return MEMORY[0x24BDCB750]();
}

uint64_t sub_23B569BEC()
{
  return MEMORY[0x24BDCB7C8]();
}

uint64_t sub_23B569BF8()
{
  return MEMORY[0x24BDCB7E0]();
}

uint64_t sub_23B569C04()
{
  return MEMORY[0x24BDCB838]();
}

uint64_t sub_23B569C10()
{
  return MEMORY[0x24BDCB878]();
}

uint64_t sub_23B569C1C()
{
  return MEMORY[0x24BDCB9F8]();
}

uint64_t sub_23B569C28()
{
  return MEMORY[0x24BDCBBA0]();
}

uint64_t sub_23B569C34()
{
  return MEMORY[0x24BDCBBB0]();
}

uint64_t sub_23B569C40()
{
  return MEMORY[0x24BDCBBC8]();
}

uint64_t sub_23B569C4C()
{
  return MEMORY[0x24BDCBBD0]();
}

uint64_t sub_23B569C58()
{
  return MEMORY[0x24BDCBBD8]();
}

uint64_t sub_23B569C64()
{
  return MEMORY[0x24BDCBBF0]();
}

uint64_t sub_23B569C70()
{
  return MEMORY[0x24BDCBC10]();
}

uint64_t sub_23B569C7C()
{
  return MEMORY[0x24BDCBCC8]();
}

uint64_t sub_23B569C88()
{
  return MEMORY[0x24BDCBCE0]();
}

uint64_t sub_23B569C94()
{
  return MEMORY[0x24BDCBD08]();
}

uint64_t sub_23B569CA0()
{
  return MEMORY[0x24BDCBD10]();
}

uint64_t sub_23B569CAC()
{
  return MEMORY[0x24BDCBD18]();
}

uint64_t sub_23B569CB8()
{
  return MEMORY[0x24BDCBD28]();
}

uint64_t sub_23B569CC4()
{
  return MEMORY[0x24BDCBD38]();
}

uint64_t sub_23B569CD0()
{
  return MEMORY[0x24BDCBD48]();
}

uint64_t sub_23B569CDC()
{
  return MEMORY[0x24BDCBD60]();
}

uint64_t sub_23B569CE8()
{
  return MEMORY[0x24BDCBD68]();
}

uint64_t sub_23B569CF4()
{
  return MEMORY[0x24BDCBDA8]();
}

uint64_t sub_23B569D00()
{
  return MEMORY[0x24BDCBDE0]();
}

uint64_t sub_23B569D0C()
{
  return MEMORY[0x24BDCC1E0]();
}

uint64_t sub_23B569D18()
{
  return MEMORY[0x24BDCC710]();
}

uint64_t sub_23B569D24()
{
  return MEMORY[0x24BDCC7A0]();
}

uint64_t sub_23B569D30()
{
  return MEMORY[0x24BDCC808]();
}

uint64_t sub_23B569D3C()
{
  return MEMORY[0x24BDCC818]();
}

uint64_t sub_23B569D48()
{
  return MEMORY[0x24BDCD2F0]();
}

uint64_t sub_23B569D54()
{
  return MEMORY[0x24BDCD2F8]();
}

uint64_t sub_23B569D60()
{
  return MEMORY[0x24BDCD760]();
}

uint64_t sub_23B569D6C()
{
  return MEMORY[0x24BDCD848]();
}

uint64_t sub_23B569D78()
{
  return MEMORY[0x24BDCD8A0]();
}

uint64_t sub_23B569D84()
{
  return MEMORY[0x24BDCD8D0]();
}

uint64_t sub_23B569D90()
{
  return MEMORY[0x24BDCD9A0]();
}

uint64_t sub_23B569D9C()
{
  return MEMORY[0x24BDCD9F8]();
}

uint64_t sub_23B569DA8()
{
  return MEMORY[0x24BDCDAC0]();
}

uint64_t sub_23B569DB4()
{
  return MEMORY[0x24BDCDB60]();
}

uint64_t sub_23B569DC0()
{
  return MEMORY[0x24BDCDBC8]();
}

uint64_t sub_23B569DCC()
{
  return MEMORY[0x24BDCDBF8]();
}

uint64_t sub_23B569DD8()
{
  return MEMORY[0x24BDCDC10]();
}

uint64_t sub_23B569DE4()
{
  return MEMORY[0x24BDCDC28]();
}

uint64_t sub_23B569DF0()
{
  return MEMORY[0x24BDCDC40]();
}

uint64_t sub_23B569DFC()
{
  return MEMORY[0x24BDCDC58]();
}

uint64_t sub_23B569E08()
{
  return MEMORY[0x24BDCDC68]();
}

uint64_t sub_23B569E14()
{
  return MEMORY[0x24BDCDC80]();
}

uint64_t sub_23B569E20()
{
  return MEMORY[0x24BDCDCA8]();
}

uint64_t sub_23B569E2C()
{
  return MEMORY[0x24BDCDCE0]();
}

uint64_t sub_23B569E38()
{
  return MEMORY[0x24BDCDCF8]();
}

uint64_t sub_23B569E44()
{
  return MEMORY[0x24BDCDD20]();
}

uint64_t sub_23B569E50()
{
  return MEMORY[0x24BDCDD30]();
}

uint64_t sub_23B569E5C()
{
  return MEMORY[0x24BDCDD40]();
}

uint64_t sub_23B569E68()
{
  return MEMORY[0x24BDCDD68]();
}

uint64_t sub_23B569E74()
{
  return MEMORY[0x24BDCDD78]();
}

uint64_t sub_23B569E80()
{
  return MEMORY[0x24BDCDD88]();
}

uint64_t sub_23B569E8C()
{
  return MEMORY[0x24BDCDE68]();
}

uint64_t sub_23B569E98()
{
  return MEMORY[0x24BDCDE70]();
}

uint64_t sub_23B569EA4()
{
  return MEMORY[0x24BDCDE90]();
}

uint64_t sub_23B569EB0()
{
  return MEMORY[0x24BDCE2D8]();
}

uint64_t sub_23B569EBC()
{
  return MEMORY[0x24BDCE330]();
}

uint64_t sub_23B569EC8()
{
  return MEMORY[0x24BDCE468]();
}

uint64_t sub_23B569ED4()
{
  return MEMORY[0x24BDCE5D8]();
}

uint64_t sub_23B569EE0()
{
  return MEMORY[0x24BDCE600]();
}

uint64_t sub_23B569EEC()
{
  return MEMORY[0x24BDCE608]();
}

uint64_t sub_23B569EF8()
{
  return MEMORY[0x24BDCE628]();
}

uint64_t sub_23B569F04()
{
  return MEMORY[0x24BDCE780]();
}

uint64_t sub_23B569F10()
{
  return MEMORY[0x24BDCE858]();
}

uint64_t sub_23B569F1C()
{
  return MEMORY[0x24BDCE878]();
}

uint64_t sub_23B569F28()
{
  return MEMORY[0x24BDCE880]();
}

uint64_t sub_23B569F34()
{
  return MEMORY[0x24BDCE8F8]();
}

uint64_t sub_23B569F40()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t sub_23B569F4C()
{
  return MEMORY[0x24BDCE978]();
}

uint64_t sub_23B569F58()
{
  return MEMORY[0x24BDCE998]();
}

uint64_t sub_23B569F64()
{
  return MEMORY[0x24BDCE9B0]();
}

uint64_t _s10FindMyBase10IdentifierV2eeoiySbACyxG_AEtFZ_0()
{
  return MEMORY[0x24BDCE9E0]();
}

uint64_t sub_23B569F7C()
{
  return MEMORY[0x24BDCEA10]();
}

uint64_t sub_23B569F88()
{
  return MEMORY[0x24BDCEA18]();
}

uint64_t sub_23B569F94()
{
  return MEMORY[0x24BDCEA40]();
}

uint64_t sub_23B569FA0()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t sub_23B569FAC()
{
  return MEMORY[0x24BDCEB18]();
}

uint64_t sub_23B569FB8()
{
  return MEMORY[0x24BDCEC88]();
}

uint64_t sub_23B569FC4()
{
  return MEMORY[0x24BDCEEA8]();
}

uint64_t sub_23B569FD0()
{
  return MEMORY[0x24BDCF2D8]();
}

uint64_t sub_23B569FDC()
{
  return MEMORY[0x24BDCF4B0]();
}

uint64_t sub_23B569FE8()
{
  return MEMORY[0x24BDCF4D8]();
}

uint64_t sub_23B569FF4()
{
  return MEMORY[0x24BDCF500]();
}

uint64_t sub_23B56A000()
{
  return MEMORY[0x24BDCF510]();
}

uint64_t _s10FindMyBase16isFeatureEnabledySb0E5Flags0eG3Key_pF_0()
{
  return MEMORY[0x24BE30BE0]();
}

uint64_t sub_23B56A018()
{
  return MEMORY[0x24BEE5118]();
}

uint64_t sub_23B56A024()
{
  return MEMORY[0x24BEE5120]();
}

uint64_t sub_23B56A030()
{
  return MEMORY[0x24BEE5130]();
}

uint64_t sub_23B56A03C()
{
  return MEMORY[0x24BEE76F0]();
}

uint64_t sub_23B56A048()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t sub_23B56A054()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t sub_23B56A060()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t sub_23B56A06C()
{
  return MEMORY[0x24BEE76B0]();
}

uint64_t sub_23B56A078()
{
  return MEMORY[0x24BEE5428]();
}

uint64_t sub_23B56A084()
{
  return MEMORY[0x24BEE5458]();
}

uint64_t sub_23B56A090()
{
  return MEMORY[0x24BEE54C8]();
}

uint64_t sub_23B56A09C()
{
  return MEMORY[0x24BEE5500]();
}

uint64_t sub_23B56A0A8()
{
  return MEMORY[0x24BEE5570]();
}

uint64_t sub_23B56A0B4()
{
  return MEMORY[0x24BEE5590]();
}

uint64_t sub_23B56A0C0()
{
  return MEMORY[0x24BEE5620]();
}

uint64_t sub_23B56A0CC()
{
  return MEMORY[0x24BDC62A8]();
}

uint64_t sub_23B56A0D8()
{
  return MEMORY[0x24BDC62B0]();
}

uint64_t sub_23B56A0E4()
{
  return MEMORY[0x24BDC62B8]();
}

uint64_t sub_23B56A0F0()
{
  return MEMORY[0x24BDC62C8]();
}

uint64_t sub_23B56A0FC()
{
  return MEMORY[0x24BDC62F0]();
}

uint64_t sub_23B56A108()
{
  return MEMORY[0x24BDC63B0]();
}

uint64_t sub_23B56A114()
{
  return MEMORY[0x24BDC63E0]();
}

uint64_t sub_23B56A120()
{
  return MEMORY[0x24BDC6520]();
}

uint64_t sub_23B56A12C()
{
  return MEMORY[0x24BDC66E0]();
}

uint64_t sub_23B56A138()
{
  return MEMORY[0x24BDC6AF8]();
}

uint64_t sub_23B56A144()
{
  return MEMORY[0x24BEE01A8]();
}

uint64_t sub_23B56A150()
{
  return MEMORY[0x24BEE01B8]();
}

uint64_t sub_23B56A15C()
{
  return MEMORY[0x24BEE67F8]();
}

uint64_t sub_23B56A168()
{
  return MEMORY[0x24BEE01C0]();
}

uint64_t sub_23B56A174()
{
  return MEMORY[0x24BEE0240]();
}

uint64_t sub_23B56A180()
{
  return MEMORY[0x24BDCF808]();
}

uint64_t sub_23B56A18C()
{
  return MEMORY[0x24BDCF830]();
}

uint64_t sub_23B56A198()
{
  return MEMORY[0x24BEE0270]();
}

uint64_t sub_23B56A1A4()
{
  return MEMORY[0x24BEE02B0]();
}

uint64_t sub_23B56A1B0()
{
  return MEMORY[0x24BEE0370]();
}

uint64_t sub_23B56A1BC()
{
  return MEMORY[0x24BEE0458]();
}

uint64_t sub_23B56A1C8()
{
  return MEMORY[0x24BEE0460]();
}

uint64_t sub_23B56A1D4()
{
  return MEMORY[0x24BEE04A8]();
}

uint64_t sub_23B56A1E0()
{
  return MEMORY[0x24BEE04B0]();
}

uint64_t sub_23B56A1EC()
{
  return MEMORY[0x24BEE0610]();
}

uint64_t sub_23B56A1F8()
{
  return MEMORY[0x24BEE0618]();
}

uint64_t sub_23B56A204()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t sub_23B56A210()
{
  return MEMORY[0x24BEE07D8]();
}

uint64_t sub_23B56A21C()
{
  return MEMORY[0x24BEE07E0]();
}

uint64_t sub_23B56A228()
{
  return MEMORY[0x24BEE07E8]();
}

uint64_t sub_23B56A234()
{
  return MEMORY[0x24BEE08B8]();
}

uint64_t sub_23B56A240()
{
  return MEMORY[0x24BEE0980]();
}

uint64_t sub_23B56A24C()
{
  return MEMORY[0x24BDCF880]();
}

uint64_t sub_23B56A258()
{
  return MEMORY[0x24BDCF8A0]();
}

uint64_t sub_23B56A264()
{
  return MEMORY[0x24BDCF9E0]();
}

uint64_t sub_23B56A270()
{
  return MEMORY[0x24BDCFA08]();
}

uint64_t sub_23B56A27C()
{
  return MEMORY[0x24BDCFA18]();
}

uint64_t sub_23B56A288()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t sub_23B56A294()
{
  return MEMORY[0x24BDCFA38]();
}

uint64_t sub_23B56A2A0()
{
  return MEMORY[0x24BDCFA48]();
}

uint64_t sub_23B56A2AC()
{
  return MEMORY[0x24BDCFA78]();
}

uint64_t sub_23B56A2B8()
{
  return MEMORY[0x24BDCFAC0]();
}

uint64_t sub_23B56A2C4()
{
  return MEMORY[0x24BDCFAC8]();
}

uint64_t sub_23B56A2D0()
{
  return MEMORY[0x24BDCFAD8]();
}

uint64_t sub_23B56A2DC()
{
  return MEMORY[0x24BDCFAE8]();
}

uint64_t sub_23B56A2E8()
{
  return MEMORY[0x24BDCFAF8]();
}

uint64_t sub_23B56A2F4()
{
  return MEMORY[0x24BDCFB30]();
}

uint64_t sub_23B56A300()
{
  return MEMORY[0x24BEE09F0]();
}

uint64_t sub_23B56A30C()
{
  return MEMORY[0x24BEE0A08]();
}

uint64_t sub_23B56A318()
{
  return MEMORY[0x24BEE0A10]();
}

uint64_t sub_23B56A324()
{
  return MEMORY[0x24BEE0A20]();
}

uint64_t sub_23B56A330()
{
  return MEMORY[0x24BEE0A30]();
}

uint64_t sub_23B56A33C()
{
  return MEMORY[0x24BEE0A40]();
}

uint64_t sub_23B56A348()
{
  return MEMORY[0x24BEE0A50]();
}

uint64_t sub_23B56A354()
{
  return MEMORY[0x24BEE0AD0]();
}

uint64_t sub_23B56A360()
{
  return MEMORY[0x24BEE0AD8]();
}

uint64_t sub_23B56A36C()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t sub_23B56A378()
{
  return MEMORY[0x24BEE0B68]();
}

uint64_t sub_23B56A384()
{
  return MEMORY[0x24BEE0B70]();
}

uint64_t sub_23B56A390()
{
  return MEMORY[0x24BEE0B80]();
}

uint64_t sub_23B56A39C()
{
  return MEMORY[0x24BEE0B88]();
}

uint64_t sub_23B56A3A8()
{
  return MEMORY[0x24BEE0BC0]();
}

uint64_t sub_23B56A3B4()
{
  return MEMORY[0x24BEE0BE8]();
}

uint64_t sub_23B56A3C0()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t sub_23B56A3CC()
{
  return MEMORY[0x24BEE0C18]();
}

uint64_t sub_23B56A3D8()
{
  return MEMORY[0x24BEE0C30]();
}

uint64_t sub_23B56A3E4()
{
  return MEMORY[0x24BEE0C38]();
}

uint64_t sub_23B56A3F0()
{
  return MEMORY[0x24BEE0C40]();
}

uint64_t sub_23B56A3FC()
{
  return MEMORY[0x24BEE0C70]();
}

uint64_t sub_23B56A408()
{
  return MEMORY[0x24BEE0C80]();
}

uint64_t sub_23B56A414()
{
  return MEMORY[0x24BEE0CA0]();
}

uint64_t sub_23B56A420()
{
  return MEMORY[0x24BEE0CC8]();
}

uint64_t sub_23B56A42C()
{
  return MEMORY[0x24BEE0CE8]();
}

uint64_t sub_23B56A438()
{
  return MEMORY[0x24BEE0D58]();
}

uint64_t sub_23B56A444()
{
  return MEMORY[0x24BEE0D98]();
}

uint64_t sub_23B56A450()
{
  return MEMORY[0x24BEE0DD0]();
}

uint64_t sub_23B56A45C()
{
  return MEMORY[0x24BEE0DE0]();
}

uint64_t sub_23B56A468()
{
  return MEMORY[0x24BEE0DE8]();
}

uint64_t sub_23B56A474()
{
  return MEMORY[0x24BEE0DF8]();
}

uint64_t sub_23B56A480()
{
  return MEMORY[0x24BEE0E38]();
}

uint64_t sub_23B56A48C()
{
  return MEMORY[0x24BEE0E70]();
}

uint64_t sub_23B56A498()
{
  return MEMORY[0x24BEE0E98]();
}

uint64_t sub_23B56A4A4()
{
  return MEMORY[0x24BEE0EB8]();
}

uint64_t sub_23B56A4B0()
{
  return MEMORY[0x24BEE0EE0]();
}

uint64_t sub_23B56A4BC()
{
  return MEMORY[0x24BEE0FD8]();
}

uint64_t sub_23B56A4C8()
{
  return MEMORY[0x24BEE0FE8]();
}

uint64_t sub_23B56A4D4()
{
  return MEMORY[0x24BEE1000]();
}

uint64_t sub_23B56A4E0()
{
  return MEMORY[0x24BEE1020]();
}

uint64_t sub_23B56A4EC()
{
  return MEMORY[0x24BEE1048]();
}

uint64_t sub_23B56A4F8()
{
  return MEMORY[0x24BEE1080]();
}

uint64_t sub_23B56A504()
{
  return MEMORY[0x24BEE10A0]();
}

uint64_t sub_23B56A510()
{
  return MEMORY[0x24BEE10C8]();
}

uint64_t sub_23B56A51C()
{
  return MEMORY[0x24BDCFBA8]();
}

uint64_t sub_23B56A528()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t sub_23B56A534()
{
  return MEMORY[0x24BEE1120]();
}

uint64_t sub_23B56A540()
{
  return MEMORY[0x24BEE1140]();
}

uint64_t sub_23B56A54C()
{
  return MEMORY[0x24BEE1180]();
}

uint64_t sub_23B56A558()
{
  return MEMORY[0x24BEE1190]();
}

uint64_t sub_23B56A564()
{
  return MEMORY[0x24BEE11A0]();
}

uint64_t sub_23B56A570()
{
  return MEMORY[0x24BEE11C8]();
}

uint64_t sub_23B56A57C()
{
  return MEMORY[0x24BEE11F0]();
}

uint64_t sub_23B56A588()
{
  return MEMORY[0x24BEE11F8]();
}

uint64_t sub_23B56A594()
{
  return MEMORY[0x24BEE1220]();
}

uint64_t sub_23B56A5A0()
{
  return MEMORY[0x24BEE1250]();
}

uint64_t sub_23B56A5AC()
{
  return MEMORY[0x24BEE1288]();
}

uint64_t sub_23B56A5B8()
{
  return MEMORY[0x24BEE1290]();
}

uint64_t sub_23B56A5C4()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t sub_23B56A5D0()
{
  return MEMORY[0x24BEE6820]();
}

uint64_t sub_23B56A5DC()
{
  return MEMORY[0x24BEE6828]();
}

uint64_t sub_23B56A5E8()
{
  return MEMORY[0x24BEE6830]();
}

uint64_t sub_23B56A5F4()
{
  return MEMORY[0x24BEE6838]();
}

uint64_t sub_23B56A600()
{
  return MEMORY[0x24BEE68C8]();
}

uint64_t sub_23B56A60C()
{
  return MEMORY[0x24BEE6908]();
}

uint64_t sub_23B56A618()
{
  return MEMORY[0x24BEE6988]();
}

uint64_t sub_23B56A624()
{
  return MEMORY[0x24BEE6990]();
}

uint64_t sub_23B56A630()
{
  return MEMORY[0x24BEE69A8]();
}

uint64_t sub_23B56A63C()
{
  return MEMORY[0x24BEE69E8]();
}

uint64_t sub_23B56A648()
{
  return MEMORY[0x24BEE69F8]();
}

uint64_t sub_23B56A654()
{
  return MEMORY[0x24BEE6A18]();
}

uint64_t sub_23B56A660()
{
  return MEMORY[0x24BEE6A30]();
}

uint64_t sub_23B56A66C()
{
  return MEMORY[0x24BEE6A38]();
}

uint64_t sub_23B56A678()
{
  return MEMORY[0x24BEE6A40]();
}

uint64_t sub_23B56A684()
{
  return MEMORY[0x24BEE6A50]();
}

uint64_t sub_23B56A690()
{
  return MEMORY[0x24BEE6A58]();
}

uint64_t sub_23B56A69C()
{
  return MEMORY[0x24BEE6AA0]();
}

uint64_t sub_23B56A6A8()
{
  return MEMORY[0x24BEE6AD0]();
}

uint64_t sub_23B56A6B4()
{
  return MEMORY[0x24BEE6B10]();
}

uint64_t sub_23B56A6C0()
{
  return MEMORY[0x24BEE6B20]();
}

uint64_t sub_23B56A6CC()
{
  return MEMORY[0x24BEE6B38]();
}

uint64_t sub_23B56A6D8()
{
  return MEMORY[0x24BEE6BA0]();
}

uint64_t sub_23B56A6E4()
{
  return MEMORY[0x24BEE6BE0]();
}

uint64_t sub_23B56A6F0()
{
  return MEMORY[0x24BEE6BE8]();
}

uint64_t sub_23B56A6FC()
{
  return MEMORY[0x24BEE6C08]();
}

uint64_t sub_23B56A708()
{
  return MEMORY[0x24BEE6C30]();
}

uint64_t sub_23B56A714()
{
  return MEMORY[0x24BEE6C40]();
}

uint64_t sub_23B56A720()
{
  return MEMORY[0x24BEE6C80]();
}

uint64_t sub_23B56A72C()
{
  return MEMORY[0x24BEE6CA8]();
}

uint64_t sub_23B56A738()
{
  return MEMORY[0x24BEE6CC0]();
}

uint64_t sub_23B56A744()
{
  return MEMORY[0x24BEE6CC8]();
}

uint64_t sub_23B56A750()
{
  return MEMORY[0x24BEE6CD0]();
}

uint64_t sub_23B56A75C()
{
  return MEMORY[0x24BEE6D30]();
}

uint64_t sub_23B56A768()
{
  return MEMORY[0x24BEE6D48]();
}

uint64_t sub_23B56A774()
{
  return MEMORY[0x24BDCFC80]();
}

uint64_t sub_23B56A780()
{
  return MEMORY[0x24BDCFCC0]();
}

uint64_t sub_23B56A78C()
{
  return MEMORY[0x24BDCFCD0]();
}

uint64_t sub_23B56A798()
{
  return MEMORY[0x24BEE15D8]();
}

uint64_t sub_23B56A7A4()
{
  return MEMORY[0x24BEE1648]();
}

uint64_t sub_23B56A7B0()
{
  return MEMORY[0x24BEE1690]();
}

uint64_t sub_23B56A7BC()
{
  return MEMORY[0x24BEE16D8]();
}

uint64_t sub_23B56A7C8()
{
  return MEMORY[0x24BEE16F8]();
}

uint64_t sub_23B56A7D4()
{
  return MEMORY[0x24BEE18D0]();
}

uint64_t sub_23B56A7E0()
{
  return MEMORY[0x24BEE1910]();
}

uint64_t sub_23B56A7EC()
{
  return MEMORY[0x24BEE19B8]();
}

uint64_t sub_23B56A7F8()
{
  return MEMORY[0x24BEE19E8]();
}

uint64_t sub_23B56A804()
{
  return MEMORY[0x24BEE1A00]();
}

uint64_t sub_23B56A810()
{
  return MEMORY[0x24BDCFF40]();
}

uint64_t sub_23B56A81C()
{
  return MEMORY[0x24BEE78F0]();
}

uint64_t sub_23B56A828()
{
  return MEMORY[0x24BEE7908]();
}

uint64_t sub_23B56A834()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t sub_23B56A840()
{
  return MEMORY[0x24BEE7920]();
}

uint64_t sub_23B56A84C()
{
  return MEMORY[0x24BEE7928]();
}

uint64_t sub_23B56A858()
{
  return MEMORY[0x24BDCFFB0]();
}

uint64_t sub_23B56A864()
{
  return MEMORY[0x24BEE5688]();
}

uint64_t sub_23B56A870()
{
  return MEMORY[0x24BEE5760]();
}

uint64_t sub_23B56A87C()
{
  return MEMORY[0x24BEE57A0]();
}

uint64_t sub_23B56A888()
{
  return MEMORY[0x24BEE57C0]();
}

uint64_t sub_23B56A894()
{
  return MEMORY[0x24BEE5828]();
}

uint64_t sub_23B56A8A0()
{
  return MEMORY[0x24BEE58B0]();
}

uint64_t sub_23B56A8AC()
{
  return MEMORY[0x24BEE58B8]();
}

uint64_t sub_23B56A8B8()
{
  return MEMORY[0x24BEE58D0]();
}

uint64_t sub_23B56A8C4()
{
  return MEMORY[0x24BEE58D8]();
}

uint64_t sub_23B56A8D0()
{
  return MEMORY[0x24BEE5958]();
}

uint64_t sub_23B56A8DC()
{
  return MEMORY[0x24BDD0410]();
}

uint64_t sub_23B56A8E8()
{
  return MEMORY[0x24BDD0438]();
}

uint64_t sub_23B56A8F4()
{
  return MEMORY[0x24BEE7978]();
}

uint64_t sub_23B56A900()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t sub_23B56A90C()
{
  return MEMORY[0x24BEE1E70]();
}

uint64_t sub_23B56A918()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t sub_23B56A924()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t sub_23B56A930()
{
  return MEMORY[0x24BDD04B8]();
}

uint64_t sub_23B56A93C()
{
  return MEMORY[0x24BDD0638]();
}

uint64_t sub_23B56A948()
{
  return MEMORY[0x24BEE1F90]();
}

uint64_t sub_23B56A954()
{
  return MEMORY[0x24BEE1FD0]();
}

uint64_t sub_23B56A960()
{
  return MEMORY[0x24BEE1FD8]();
}

uint64_t sub_23B56A96C()
{
  return MEMORY[0x24BEE1FE8]();
}

uint64_t sub_23B56A978()
{
  return MEMORY[0x24BEE2020]();
}

uint64_t sub_23B56A984()
{
  return MEMORY[0x24BEE2028]();
}

uint64_t sub_23B56A990()
{
  return MEMORY[0x24BEE2030]();
}

uint64_t sub_23B56A99C()
{
  return MEMORY[0x24BEE2040]();
}

uint64_t sub_23B56A9A8()
{
  return MEMORY[0x24BEE2068]();
}

uint64_t sub_23B56A9B4()
{
  return MEMORY[0x24BEE2070]();
}

uint64_t sub_23B56A9C0()
{
  return MEMORY[0x24BEE2078]();
}

uint64_t sub_23B56A9CC()
{
  return MEMORY[0x24BEE2098]();
}

uint64_t sub_23B56A9D8()
{
  return MEMORY[0x24BEE20A8]();
}

uint64_t sub_23B56A9E4()
{
  return MEMORY[0x24BEE2150]();
}

uint64_t sub_23B56A9F0()
{
  return MEMORY[0x24BEE22B0]();
}

uint64_t sub_23B56A9FC()
{
  return MEMORY[0x24BEE22C0]();
}

uint64_t sub_23B56AA08()
{
  return MEMORY[0x24BEE22D0]();
}

uint64_t sub_23B56AA14()
{
  return MEMORY[0x24BEE6D58]();
}

uint64_t sub_23B56AA20()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t sub_23B56AA2C()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t sub_23B56AA38()
{
  return MEMORY[0x24BEE24D0]();
}

uint64_t sub_23B56AA44()
{
  return MEMORY[0x24BEE24F0]();
}

uint64_t sub_23B56AA50()
{
  return MEMORY[0x24BEE24F8]();
}

uint64_t sub_23B56AA5C()
{
  return MEMORY[0x24BEE2508]();
}

uint64_t sub_23B56AA68()
{
  return MEMORY[0x24BEE2510]();
}

uint64_t sub_23B56AA74()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t sub_23B56AA80()
{
  return MEMORY[0x24BEE2530]();
}

uint64_t sub_23B56AA8C()
{
  return MEMORY[0x24BEE2548]();
}

uint64_t sub_23B56AA98()
{
  return MEMORY[0x24BEE25B8]();
}

uint64_t sub_23B56AAA4()
{
  return MEMORY[0x24BEE2650]();
}

uint64_t sub_23B56AAB0()
{
  return MEMORY[0x24BEE26E8]();
}

uint64_t sub_23B56AABC()
{
  return MEMORY[0x24BEE2710]();
}

uint64_t sub_23B56AAC8()
{
  return MEMORY[0x24BEE2788]();
}

uint64_t sub_23B56AAD4()
{
  return MEMORY[0x24BEE2798]();
}

uint64_t sub_23B56AAE0()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t sub_23B56AAEC()
{
  return MEMORY[0x24BEE28C0]();
}

uint64_t sub_23B56AAF8()
{
  return MEMORY[0x24BEE2950]();
}

uint64_t sub_23B56AB04()
{
  return MEMORY[0x24BEE29C0]();
}

uint64_t sub_23B56AB10()
{
  return MEMORY[0x24BEE2A00]();
}

uint64_t sub_23B56AB1C()
{
  return MEMORY[0x24BEE2A08]();
}

uint64_t sub_23B56AB28()
{
  return MEMORY[0x24BEE6DC8]();
}

uint64_t sub_23B56AB34()
{
  return MEMORY[0x24BEE6E08]();
}

uint64_t sub_23B56AB40()
{
  return MEMORY[0x24BEE6E10]();
}

uint64_t sub_23B56AB4C()
{
  return MEMORY[0x24BEE2AE0]();
}

uint64_t sub_23B56AB58()
{
  return MEMORY[0x24BEE2AE8]();
}

uint64_t sub_23B56AB64()
{
  return MEMORY[0x24BEE6E28]();
}

uint64_t sub_23B56AB70()
{
  return MEMORY[0x24BEE6E38]();
}

uint64_t sub_23B56AB7C()
{
  return MEMORY[0x24BEE6E48]();
}

uint64_t sub_23B56AB88()
{
  return MEMORY[0x24BEE6E60]();
}

uint64_t sub_23B56AB94()
{
  return MEMORY[0x24BEE6E70]();
}

uint64_t sub_23B56ABA0()
{
  return MEMORY[0x24BEE6E90]();
}

uint64_t sub_23B56ABAC()
{
  return MEMORY[0x24BEE6E98]();
}

uint64_t sub_23B56ABB8()
{
  return MEMORY[0x24BEE2BE0]();
}

uint64_t sub_23B56ABC4()
{
  return MEMORY[0x24BEE2C58]();
}

uint64_t sub_23B56ABD0()
{
  return MEMORY[0x24BEE2D18]();
}

uint64_t sub_23B56ABDC()
{
  return MEMORY[0x24BEE2D28]();
}

uint64_t sub_23B56ABE8()
{
  return MEMORY[0x24BEE2D80]();
}

uint64_t sub_23B56ABF4()
{
  return MEMORY[0x24BEE2DA8]();
}

uint64_t sub_23B56AC00()
{
  return MEMORY[0x24BEE2EA8]();
}

uint64_t sub_23B56AC0C()
{
  return MEMORY[0x24BEE2F18]();
}

uint64_t sub_23B56AC18()
{
  return MEMORY[0x24BEE2F40]();
}

uint64_t sub_23B56AC24()
{
  return MEMORY[0x24BEE2F48]();
}

uint64_t sub_23B56AC30()
{
  return MEMORY[0x24BEE2F68]();
}

uint64_t sub_23B56AC3C()
{
  return MEMORY[0x24BEE2F70]();
}

uint64_t sub_23B56AC48()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t sub_23B56AC54()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t sub_23B56AC60()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t sub_23B56AC6C()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t sub_23B56AC78()
{
  return MEMORY[0x24BEE31D0]();
}

uint64_t sub_23B56AC84()
{
  return MEMORY[0x24BEE3290]();
}

uint64_t sub_23B56AC90()
{
  return MEMORY[0x24BEE6FA8]();
}

uint64_t sub_23B56AC9C()
{
  return MEMORY[0x24BEE6FB8]();
}

uint64_t sub_23B56ACA8()
{
  return MEMORY[0x24BEE32B8]();
}

uint64_t sub_23B56ACB4()
{
  return MEMORY[0x24BEE32C0]();
}

uint64_t sub_23B56ACC0()
{
  return MEMORY[0x24BEE3358]();
}

uint64_t sub_23B56ACCC()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t sub_23B56ACD8()
{
  return MEMORY[0x24BEE33A0]();
}

uint64_t sub_23B56ACE4()
{
  return MEMORY[0x24BEE33C8]();
}

uint64_t sub_23B56ACF0()
{
  return MEMORY[0x24BEE33E0]();
}

uint64_t sub_23B56ACFC()
{
  return MEMORY[0x24BEE3408]();
}

uint64_t sub_23B56AD08()
{
  return MEMORY[0x24BEE34A8]();
}

uint64_t sub_23B56AD14()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t sub_23B56AD20()
{
  return MEMORY[0x24BEE34F0]();
}

uint64_t sub_23B56AD2C()
{
  return MEMORY[0x24BEE3520]();
}

uint64_t sub_23B56AD38()
{
  return MEMORY[0x24BEE3550]();
}

uint64_t sub_23B56AD44()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t sub_23B56AD50()
{
  return MEMORY[0x24BEE7040]();
}

uint64_t sub_23B56AD5C()
{
  return MEMORY[0x24BEE3880]();
}

uint64_t sub_23B56AD68()
{
  return MEMORY[0x24BEE3938]();
}

uint64_t sub_23B56AD74()
{
  return MEMORY[0x24BEE39B0]();
}

uint64_t sub_23B56AD80()
{
  return MEMORY[0x24BEE39E0]();
}

uint64_t sub_23B56AD8C()
{
  return MEMORY[0x24BEE3A20]();
}

uint64_t sub_23B56AD98()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t sub_23B56ADA4()
{
  return MEMORY[0x24BEE7098]();
}

uint64_t sub_23B56ADB0()
{
  return MEMORY[0x24BEE3A88]();
}

uint64_t sub_23B56ADBC()
{
  return MEMORY[0x24BEE3B20]();
}

uint64_t sub_23B56ADC8()
{
  return MEMORY[0x24BEE70E0]();
}

uint64_t sub_23B56ADD4()
{
  return MEMORY[0x24BEE3DD8]();
}

uint64_t sub_23B56ADE0()
{
  return MEMORY[0x24BEE3DE0]();
}

uint64_t sub_23B56ADEC()
{
  return MEMORY[0x24BEE3DF8]();
}

uint64_t sub_23B56ADF8()
{
  return MEMORY[0x24BEE3E08]();
}

uint64_t sub_23B56AE04()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t sub_23B56AE10()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t sub_23B56AE1C()
{
  return MEMORY[0x24BEE7110]();
}

uint64_t sub_23B56AE28()
{
  return MEMORY[0x24BEE7118]();
}

uint64_t sub_23B56AE34()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t sub_23B56AE40()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t sub_23B56AE4C()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t sub_23B56AE58()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t sub_23B56AE64()
{
  return MEMORY[0x24BEE42E0]();
}

uint64_t sub_23B56AE70()
{
  return MEMORY[0x24BEE42F8]();
}

uint64_t sub_23B56AE7C()
{
  return MEMORY[0x24BEE4300]();
}

uint64_t sub_23B56AE88()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t sub_23B56AE94()
{
  return MEMORY[0x24BEE4408]();
}

uint64_t sub_23B56AEA0()
{
  return MEMORY[0x24BEE45F8]();
}

uint64_t sub_23B56AEAC()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t sub_23B56AEB8()
{
  return MEMORY[0x24BEE4628]();
}

uint64_t sub_23B56AEC4()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t sub_23B56AED0()
{
  return MEMORY[0x24BEE47F8]();
}

uint64_t sub_23B56AEDC()
{
  return MEMORY[0x24BDD0900]();
}

uint64_t sub_23B56AEE8()
{
  return MEMORY[0x24BDD0910]();
}

uint64_t sub_23B56AEF4()
{
  return MEMORY[0x24BDD09E8]();
}

uint64_t sub_23B56AF00()
{
  return MEMORY[0x24BDD09F0]();
}

uint64_t sub_23B56AF0C()
{
  return MEMORY[0x24BDD0A50]();
}

uint64_t sub_23B56AF18()
{
  return MEMORY[0x24BDD0A88]();
}

uint64_t sub_23B56AF24()
{
  return MEMORY[0x24BDD0A90]();
}

uint64_t sub_23B56AF30()
{
  return MEMORY[0x24BDD0AB8]();
}

uint64_t sub_23B56AF3C()
{
  return MEMORY[0x24BDD0AF0]();
}

uint64_t sub_23B56AF48()
{
  return MEMORY[0x24BDD0B20]();
}

uint64_t sub_23B56AF54()
{
  return MEMORY[0x24BEE4828]();
}

uint64_t sub_23B56AF60()
{
  return MEMORY[0x24BEE4830]();
}

uint64_t sub_23B56AF6C()
{
  return MEMORY[0x24BEE48A0]();
}

uint64_t sub_23B56AF78()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t sub_23B56AF84()
{
  return MEMORY[0x24BEE4A10]();
}

uint64_t sub_23B56AF90()
{
  return MEMORY[0x24BEE7160]();
}

uint64_t sub_23B56AF9C()
{
  return MEMORY[0x24BEE7168]();
}

uint64_t sub_23B56AFA8()
{
  return MEMORY[0x24BEE7178]();
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x24BDBC040](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x24BDBC050]();
}

IOReturn IOPMAssertionCreateWithProperties(CFDictionaryRef AssertionProperties, IOPMAssertionID *AssertionID)
{
  return MEMORY[0x24BDD8720](AssertionProperties, AssertionID);
}

IOReturn IOPMAssertionRelease(IOPMAssertionID AssertionID)
{
  return MEMORY[0x24BDD8740](*(_QWORD *)&AssertionID);
}

uint64_t MGCopyAnswerWithError()
{
  return MEMORY[0x24BED8450]();
}

CFStringRef SecCopyErrorMessageString(OSStatus status, void *reserved)
{
  return (CFStringRef)MEMORY[0x24BDE89F0](*(_QWORD *)&status, reserved);
}

OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
{
  return MEMORY[0x24BDE8A70](attributes, result);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return MEMORY[0x24BDE8A78](query, result);
}

OSStatus SecItemDelete(CFDictionaryRef query)
{
  return MEMORY[0x24BDE8A80](query);
}

OSStatus SecItemUpdate(CFDictionaryRef query, CFDictionaryRef attributesToUpdate)
{
  return MEMORY[0x24BDE8A88](query, attributesToUpdate);
}

int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes)
{
  return MEMORY[0x24BDE8CC8](rnd, count, bytes);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x24BDE8D48](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x24BDE8D70](allocator);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x24BDAC7D8](a1);
  return result;
}

uint64_t _objc_autoreleasePoolPop()
{
  return MEMORY[0x24BEDCE10]();
}

uint64_t _objc_autoreleasePoolPush()
{
  return MEMORY[0x24BEDCE18]();
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return (os_activity_t)MEMORY[0x24BDACB00](dso, description, activity, *(_QWORD *)&flags);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x24BEE4B30]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x24BEE4B38]();
}

uint64_t _swift_stdlib_strtof_clocale()
{
  return MEMORY[0x24BEE4B50]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x24BDAE088](__handle, __symbol);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

int getaudit_addr(auditinfo_addr *a1, int a2)
{
  return MEMORY[0x24BDAE5C0](a1, *(_QWORD *)&a2);
}

int gethostuuid(uuid_t a1, const timespec *a2)
{
  return MEMORY[0x24BDAE658](a1, a2);
}

ssize_t getxattr(const char *path, const char *name, void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x24BDAE798](path, name, value, size, *(_QWORD *)&position, *(_QWORD *)&options);
}

int isxdigit(int _c)
{
  return MEMORY[0x24BDAE920](*(_QWORD *)&_c);
}

long double log10(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAB0](__x);
  return result;
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x24BDAEC68](info);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x24BDAF138](*(_QWORD *)&token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x24BDAF148](*(_QWORD *)&token, state64);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x24BDAF168](name, out_token);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
  MEMORY[0x24BDAF2A0](activity, state);
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
  MEMORY[0x24BDAF2A8](state);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x24BDAF438]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF460](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF488](lock);
}

uint64_t os_variant_has_factory_content()
{
  return MEMORY[0x24BDAF4C8]();
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x24BDAF4D0]();
}

int rmdir(const char *a1)
{
  return MEMORY[0x24BDAFBB0](a1);
}

int setxattr(const char *path, const char *name, const void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x24BDAFD98](path, name, value, size, *(_QWORD *)&position, *(_QWORD *)&options);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x24BDAFF18](*(_QWORD *)&__errnum);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x24BEE4B78]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x24BEE4C18]();
}

uint64_t swift_defaultActor_deallocate()
{
  return MEMORY[0x24BEE71E0]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x24BEE71E8]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x24BEE71F0]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x24BEE4CD0]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x24BEE4CD8]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x24BEE4CE8]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x24BEE4D00]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x24BEE4D18]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x24BEE4D98]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x24BEE4DF8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x24BEE4E28]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x24BEE4E40]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x24BEE4EB0]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x24BEE4F48]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x24BEE4F50]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x24BEE7230]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_localValuePop()
{
  return MEMORY[0x24BEE7258]();
}

uint64_t swift_task_localValuePush()
{
  return MEMORY[0x24BEE7260]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x24BEE4F78]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x24BEE4F88]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x24BEE4FB0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x24BEE4FC8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x24BEE4FD0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x24BEE4FD8]();
}

uint64_t swift_unownedRelease()
{
  return MEMORY[0x24BEE4FF0]();
}

uint64_t swift_unownedRetain()
{
  return MEMORY[0x24BEE4FF8]();
}

uint64_t swift_unownedRetainStrong()
{
  return MEMORY[0x24BEE5000]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x24BEE5028]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x24BEE5030]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x24BEE5038]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x24BEE5058]();
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x24BDB0100](a1, a2, a3, a4, a5);
}

xpc_object_t xpc_activity_copy_criteria(xpc_activity_t activity)
{
  return (xpc_object_t)MEMORY[0x24BDB05D0](activity);
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return MEMORY[0x24BDB05E0](activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
  MEMORY[0x24BDB05E8](identifier, criteria, handler);
}

void xpc_activity_set_criteria(xpc_activity_t activity, xpc_object_t criteria)
{
  MEMORY[0x24BDB0608](activity, criteria);
}

BOOL xpc_activity_set_state(xpc_activity_t activity, xpc_activity_state_t state)
{
  return MEMORY[0x24BDB0610](activity, state);
}

BOOL xpc_activity_should_defer(xpc_activity_t activity)
{
  return MEMORY[0x24BDB0618](activity);
}

void xpc_activity_unregister(const char *identifier)
{
  MEMORY[0x24BDB0620](identifier);
}

uint64_t xpc_copy_code_signing_identity_for_token()
{
  return MEMORY[0x24BDB0810]();
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x24BDB08C0](keys, values, count);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x24BDB0908](xdict, key);
}

xpc_object_t xpc_dictionary_get_dictionary(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x24BDB0928](xdict, key);
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x24BDB0938](xdict, key);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x24BDB0950](xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
  MEMORY[0x24BDB0978](xdict, key, value);
}

void xpc_dictionary_set_date(xpc_object_t xdict, const char *key, int64_t value)
{
  MEMORY[0x24BDB0990](xdict, key, value);
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
  MEMORY[0x24BDB09A8](xdict, key, value);
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
  MEMORY[0x24BDB09C8](xdict, key, string);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
  MEMORY[0x24BDB09E0](xdict, key, value);
}

