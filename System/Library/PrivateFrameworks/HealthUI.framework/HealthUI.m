BOOL HKUIObjectIsSmaller(void *a1, uint64_t a2)
{
  return objc_msgSend(a1, "compare:", a2) == -1;
}

BOOL HKUIObjectIsLargerOrEqual(void *a1, uint64_t a2)
{
  return objc_msgSend(a1, "compare:", a2) != -1;
}

BOOL HKUIObjectIsLarger(void *a1, uint64_t a2)
{
  return objc_msgSend(a1, "compare:", a2) == 1;
}

id HKFormattedStringFromValueForContext(void *a1, void *a2, void *a3, int a4, void *a5, uint64_t a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  const __CFString *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;

  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a5;
  objc_msgSend(v13, "unitForDisplayType:", v12);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v14)
  {
    v16 = v14;
  }
  else
  {
    objc_msgSend(v12, "hk_numberFormatterForUnit:formattingContext:", v15, a6);
    v16 = (id)objc_claimAutoreleasedReturnValue();
  }
  v17 = v16;
  if (!a4)
    goto LABEL_13;
  objc_msgSend(v13, "displayRangeForDisplayType:", v12);
  v18 = objc_claimAutoreleasedReturnValue();
  if (!v18)
    goto LABEL_13;
  v19 = (void *)v18;
  v20 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(v11, "doubleValue");
  objc_msgSend(v20, "quantityWithUnit:doubleValue:", v15);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "maximum");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "minimum");
  v23 = objc_claimAutoreleasedReturnValue();
  v42 = (void *)v23;
  if (objc_msgSend(v21, "compare:", v22) == 1)
  {
    v40 = v22;
    v41 = v21;
    v24 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v22, "doubleValueForUnit:", v15);
    objc_msgSend(v24, "numberWithDouble:");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "stringFromNumber:displayType:unitController:", v25, v12, v13);
    v26 = objc_claimAutoreleasedReturnValue();

    v38 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = v27;
    v29 = CFSTR("GREATER_THAN_%@");
  }
  else
  {
    if (objc_msgSend(v21, "compare:", v23) != -1)
    {
      v30 = 0;
      goto LABEL_12;
    }
    v40 = v22;
    v41 = v21;
    v31 = (void *)v23;
    v32 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v31, "doubleValueForUnit:", v15);
    objc_msgSend(v32, "numberWithDouble:");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "stringFromNumber:displayType:unitController:", v33, v12, v13);
    v26 = objc_claimAutoreleasedReturnValue();

    v38 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = v27;
    v29 = CFSTR("LESS_THAN_%@");
  }
  objc_msgSend(v27, "localizedStringForKey:value:table:", v29, &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v39 = (void *)v26;
  v37 = v26;
  v35 = v28;
  objc_msgSend(v38, "stringWithFormat:", v34, v37);
  v30 = (void *)objc_claimAutoreleasedReturnValue();

  v22 = v40;
  v21 = v41;
LABEL_12:

  if (!v30)
  {
LABEL_13:
    objc_msgSend(v17, "stringFromNumber:displayType:unitController:", v11, v12, v13);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v30;
}

id HKFormattedStringFromValue(void *a1, void *a2, void *a3, int a4, void *a5)
{
  return HKFormattedStringFromValueForContext(a1, a2, a3, a4, a5, 0);
}

id HKNumberFormatterWithDecimalPrecisionAndStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  v6 = (void *)HKNumberFormatterWithDecimalPrecisionAndStyle_styleFormatters;
  if (!HKNumberFormatterWithDecimalPrecisionAndStyle_styleFormatters)
  {
    v7 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v8 = (void *)HKNumberFormatterWithDecimalPrecisionAndStyle_styleFormatters;
    HKNumberFormatterWithDecimalPrecisionAndStyle_styleFormatters = (uint64_t)v7;

    v6 = (void *)HKNumberFormatterWithDecimalPrecisionAndStyle_styleFormatters;
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "objectForKeyedSubscript:", v9);
  v10 = (id)objc_claimAutoreleasedReturnValue();

  if (!v10)
  {
    v10 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v11 = (void *)HKNumberFormatterWithDecimalPrecisionAndStyle_styleFormatters;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setObject:forKeyedSubscript:", v10, v12);

  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "objectForKeyedSubscript:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v14)
  {
    _formatterWithDecimalPrecisionAndStyle(a1, 0, a3);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v19[0] = v15;
    _formatterWithDecimalPrecisionAndStyle(a1, 1, a3);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v19[1] = v16;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v19, 2);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v10, "setObject:forKeyedSubscript:", v14, v13);
  }
  objc_msgSend(v14, "objectAtIndexedSubscript:", a2);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  return v17;
}

id HKNumberFormatterWithDecimalPrecision(uint64_t a1, uint64_t a2)
{
  return HKNumberFormatterWithDecimalPrecisionAndStyle(a1, a2, 1);
}

id HKUIJoinAttributedStringsWithFormat(void *a1, void *a2)
{
  return HKUIJoinAttributedStringsWithFormatAndAttributes(a1, a2, MEMORY[0x1E0C9AA70]);
}

id HKGenerateAttributedStringsWithUnitValue(void *a1, void *a2, void *a3, void *a4, uint64_t a5, int a6)
{
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;

  v11 = a2;
  v12 = a4;
  v13 = (void *)MEMORY[0x1E0C99DE8];
  v14 = a3;
  v15 = a1;
  objc_msgSend(v13, "array");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (a6)
  {
    objc_msgSend(MEMORY[0x1E0DC3658], "hk_chartLollipopValueColor");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v17 = 0;
  }
  v18 = objc_alloc(MEMORY[0x1E0CB3498]);
  HKAttributedStringAttributesForFont(v14, v17);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  v20 = (void *)objc_msgSend(v18, "initWithString:attributes:", v15, v19);
  objc_msgSend(v16, "addObject:", v20);
  if (v11 && a5 >= 1)
  {
    objc_msgSend(MEMORY[0x1E0CB3498], "hk_attributedStringForSpacing:", a5);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithString:", &stru_1E9C4C428);
    if (!v11)
    {
      v25 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithString:", &stru_1E9C4C428);
      goto LABEL_13;
    }
  }
  if (a6)
  {
    objc_msgSend(MEMORY[0x1E0DC3658], "hk_chartLollipopLabelColor");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v22 = 0;
  }
  v23 = objc_alloc(MEMORY[0x1E0CB3498]);
  HKAttributedStringAttributesForFont(v12, v22);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = (void *)objc_msgSend(v23, "initWithString:attributes:", v11, v24);

LABEL_13:
  objc_msgSend(v16, "addObject:", v21);
  objc_msgSend(v16, "addObject:", v25);

  return v16;
}

id HKAttributedStringAttributesForFont(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id *v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  uint64_t v13;
  id v14;
  _QWORD v15[2];
  _QWORD v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
      v6 = *MEMORY[0x1E0DC1140];
      v15[0] = *MEMORY[0x1E0DC1138];
      v15[1] = v6;
      v16[0] = v3;
      v16[1] = v4;
      v7 = (void *)MEMORY[0x1E0C99D80];
      v8 = (id *)v16;
      v9 = v15;
      v10 = 2;
    }
    else
    {
      v13 = *MEMORY[0x1E0DC1138];
      v14 = v3;
      v7 = (void *)MEMORY[0x1E0C99D80];
      v8 = &v14;
      v9 = &v13;
      v10 = 1;
    }
    objc_msgSend(v7, "dictionaryWithObjects:forKeys:count:", v8, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v11 = 0;
  }

  return v11;
}

id HKUIJoinStringsForAutomationIdentifier(void *a1)
{
  void *v1;
  id v2;
  void *v3;

  objc_msgSend(a1, "componentsJoinedByString:", CFSTR("."));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v1, "containsString:", CFSTR("UIA.Health")))
  {
    v2 = v1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@.%@"), CFSTR("UIA.Health"), v1);
    v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  v3 = v2;

  return v3;
}

id HKUIJoinAttributedStringsWithFormatAndAttributes(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v19;
  void *v20;

  v5 = a1;
  v6 = a2;
  v19 = a3;
  v20 = v6;
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3778]), "initWithString:attributes:", v6, v19);
  v8 = objc_msgSend(v5, "count");
  if (v8 >= 1)
  {
    v9 = v8;
    v10 = 0;
    do
    {
      v11 = v10 + 1;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%%%ld$@"), v10 + 1);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "string");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v13, "rangeOfString:", v12);
      v16 = v15;

      if (v14 != 0x7FFFFFFFFFFFFFFFLL)
      {
        objc_msgSend(v5, "objectAtIndexedSubscript:", v10);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "replaceCharactersInRange:withAttributedString:", v14, v16, v17);

      }
      ++v10;
    }
    while (v9 != v11);
  }

  return v7;
}

void sub_1D781AC64(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

HKDisplayType *HKDisplayTypeIdentifierAtrialFibrillationEventMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  HKDisplayTypeBehavior *v2;
  void *v3;
  char v4;
  HKDisplayTypeSummaryAttribution *v5;
  HKDisplayTypeSummaryAttribution *v6;
  void *v7;
  void *v8;
  HKDisplayTypePresentation *v9;
  HKDisplayTypePresentationConfiguration *v10;
  uint64_t v11;
  HKDisplayTypePresentation *v12;
  HKDisplayTypeLocalization *v13;
  HKDisplayType *v14;
  void *v15;
  HKDisplayType *v16;
  uint64_t v18;
  uint64_t v19;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  BYTE2(v18) = 0;
  LOWORD(v18) = 256;
  v2 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v18);
  objc_msgSend(MEMORY[0x1E0CB6F18], "sharedBehavior");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isiPad");

  v5 = 0;
  if ((v4 & 1) == 0)
  {
    v6 = [HKDisplayTypeSummaryAttribution alloc];
    HKHealthKitFrameworkBundle();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("HEART_EVENT_SUMMARY_ATTRIBUTION"), &stru_1E9C4C428, *MEMORY[0x1E0CB5138]);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = -[HKDisplayTypeSummaryAttribution initWithAttribution:urlAttribute:primaryProfileOnly:](v6, "initWithAttribution:urlAttribute:primaryProfileOnly:", v8, CFSTR("bridge:root=NOTIFICATIONS_ID&path=com.apple.HeartRateSettings"), 0);

  }
  v9 = [HKDisplayTypePresentation alloc];
  v10 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 4, 0, 7, 0);
  LOBYTE(v19) = 0;
  v11 = MEMORY[0x1E0C9AA70];
  v12 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v9, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v10, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v19, 0, 0, v5);

  v13 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("ATRIAL_FIBRILLATION_EVENT"), CFSTR("ATRIAL_FIBRILLATION_EVENT"), CFSTR("Localizable-Antimony"), 0, v11);
  v14 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 156);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v14, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 156, 11, MEMORY[0x1E0C9AA60], v15, v2, v12, v13, v0, 0, 0);

  return v16;
}

uint64_t HKCodableSummaryDataReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  HKCodableQueryAnchor *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  void *v32;
  uint64_t v33;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 32;
        goto LABEL_41;
      case 2u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 48;
        goto LABEL_41;
      case 3u:
        v20 = objc_alloc_init(HKCodableQueryAnchor);
        objc_storeStrong((id *)(a1 + 40), v20);
        if (PBReaderPlaceMark() && (HKCodableQueryAnchorReadFrom((uint64_t)v20, a2) & 1) != 0)
        {
          PBReaderRecallMark();

LABEL_51:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 4u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 56) |= 1u;
        while (2)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              v14 = v22++ >= 9;
              if (v14)
              {
                v23 = 0;
                goto LABEL_45;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
LABEL_45:
        v33 = 8;
        goto LABEL_50;
      case 5u:
        v27 = 0;
        v28 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 56) |= 2u;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v23 |= (unint64_t)(v31 & 0x7F) << v27;
            if (v31 < 0)
            {
              v27 += 7;
              v14 = v28++ >= 9;
              if (v14)
              {
                v23 = 0;
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
LABEL_49:
        v33 = 16;
LABEL_50:
        *(_QWORD *)(a1 + v33) = v23;
        goto LABEL_51;
      case 6u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 24;
LABEL_41:
        v32 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_51;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_51;
    }
  }
}

uint64_t HKCodableQueryAnchorReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id HKEndOfDayForDate(void *a1)
{
  void *v1;
  void *v2;
  void *v3;

  HKStartOfDayForDate(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "dateByAddingUnit:value:toDate:options:", 16, 1, v1, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id HKStartOfDayForDate(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;

  v1 = (void *)MEMORY[0x1E0C99D48];
  v2 = a1;
  objc_msgSend(v1, "currentCalendar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "startOfDayForDate:", v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

BOOL HKCodablePluginSharableModelDataReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 16;
        goto LABEL_24;
      }
      if ((_DWORD)v17 == 1)
      {
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 24;
LABEL_24:
        v20 = *(void **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = 8;
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HKDecodeDateForValue()
{
  return objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:");
}

uint64_t HKCodableSummaryTrendResultsReadFrom(_BYTE *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  HKCodableSummaryTrendValue *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t result;
  uint64_t v31;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        v25 = 0;
        v26 = 0;
        v21 = 0;
        a1[32] |= 1u;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v21 |= (unint64_t)(v29 & 0x7F) << v25;
          if ((v29 & 0x80) == 0)
            goto LABEL_45;
          v25 += 7;
          v14 = v26++ >= 9;
          if (v14)
          {
            v21 = 0;
            goto LABEL_47;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_47:
        v31 = 8;
LABEL_48:
        *(_QWORD *)&a1[v31] = v21;
        goto LABEL_49;
      }
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(HKCodableSummaryTrendValue);
        objc_msgSend(a1, "addTrendValues:", v18);
        if (!PBReaderPlaceMark() || !HKCodableSummaryTrendValueReadFrom((char *)v18, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
LABEL_49:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v19 = 0;
    v20 = 0;
    v21 = 0;
    a1[32] |= 2u;
    while (1)
    {
      v22 = *v3;
      v23 = *(_QWORD *)(a2 + v22);
      if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
        break;
      v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
      *(_QWORD *)(a2 + v22) = v23 + 1;
      v21 |= (unint64_t)(v24 & 0x7F) << v19;
      if ((v24 & 0x80) == 0)
        goto LABEL_41;
      v19 += 7;
      v14 = v20++ >= 9;
      if (v14)
      {
        v21 = 0;
        goto LABEL_43;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
    if (*(_BYTE *)(a2 + *v5))
      v21 = 0;
LABEL_43:
    v31 = 16;
    goto LABEL_48;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL HKCodableSummaryTrendValueReadFrom(char *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  HKCodableSummaryVisualizationDataPresencePoint *v20;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 16;
LABEL_26:
        v20 = *(HKCodableSummaryVisualizationDataPresencePoint **)&a1[v19];
        *(_QWORD *)&a1[v19] = v18;
LABEL_27:

        goto LABEL_29;
      }
      if ((_DWORD)v17 == 1)
      {
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 8;
        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v20 = objc_alloc_init(HKCodableSummaryVisualizationDataPresencePoint);
    objc_msgSend(a1, "addDataPresencePoints:", v20);
    if (!PBReaderPlaceMark()
      || (HKCodableSummaryVisualizationDataPresencePointReadFrom((uint64_t)v20, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id HKUILogCharting()
{
  if (HKUILogCharting_onceToken != -1)
    dispatch_once(&HKUILogCharting_onceToken, &__block_literal_global_0);
  return (id)HKUILogCharting_category;
}

void sub_1D78201C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D7821F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

void __Block_byref_object_dispose__3(uint64_t a1)
{

}

void __Block_byref_object_dispose__4(uint64_t a1)
{

}

void __Block_byref_object_dispose__5(uint64_t a1)
{

}

void __Block_byref_object_dispose__6(uint64_t a1)
{

}

void __Block_byref_object_dispose__7(uint64_t a1)
{

}

void __Block_byref_object_dispose__8(uint64_t a1)
{

}

void __Block_byref_object_dispose__9(uint64_t a1)
{

}

void __Block_byref_object_dispose__10(uint64_t a1)
{

}

void __Block_byref_object_dispose__11(uint64_t a1)
{

}

void __Block_byref_object_dispose__12(uint64_t a1)
{

}

void __Block_byref_object_dispose__13(uint64_t a1)
{

}

void __Block_byref_object_dispose__14(uint64_t a1)
{

}

void __Block_byref_object_dispose__15(uint64_t a1)
{

}

void __Block_byref_object_dispose__16(uint64_t a1)
{

}

void __Block_byref_object_dispose__17(uint64_t a1)
{

}

void __Block_byref_object_dispose__18(uint64_t a1)
{

}

void __Block_byref_object_dispose__19(uint64_t a1)
{

}

void __Block_byref_object_dispose__20(uint64_t a1)
{

}

void __Block_byref_object_dispose__21(uint64_t a1)
{

}

void __Block_byref_object_dispose__22(uint64_t a1)
{

}

void __Block_byref_object_dispose__23(uint64_t a1)
{

}

void __Block_byref_object_dispose__24(uint64_t a1)
{

}

void __Block_byref_object_dispose__25(uint64_t a1)
{

}

void __Block_byref_object_dispose__26(uint64_t a1)
{

}

void __Block_byref_object_dispose__27(uint64_t a1)
{

}

void __Block_byref_object_dispose__28(uint64_t a1)
{

}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__13(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__16(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__17(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__18(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__19(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__20(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__21(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__22(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__23(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__24(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__25(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__26(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__27(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__28(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

id HKHealthUIFrameworkBundle()
{
  void *v0;
  uint64_t v1;
  void *v2;

  v0 = (void *)HKHealthUIFrameworkBundle___ClassBundle;
  if (!HKHealthUIFrameworkBundle___ClassBundle)
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
    v1 = objc_claimAutoreleasedReturnValue();
    v2 = (void *)HKHealthUIFrameworkBundle___ClassBundle;
    HKHealthUIFrameworkBundle___ClassBundle = v1;

    v0 = (void *)HKHealthUIFrameworkBundle___ClassBundle;
  }
  return v0;
}

HKDisplayType *HKDisplayTypeIdentifierAppleMoveTimeMake()
{
  HKStaticDecimalPrecisionRule *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HKDisplayTypeBehavior *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypePresentationConfiguration *v16;
  HKDisplayTypePresentationConfiguration *v17;
  void *v18;
  HKDisplayTypePresentation *v19;
  HKDisplayTypeLocalization *v20;
  HKDisplayTypeLocalization *v21;
  HKDisplayType *v22;
  void *v23;
  HKDisplayType *v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  HKDisplayTypeChartingRules *v31;
  void *v32;
  HKDisplayTypePresentationConfiguration *v33;
  void *v34;
  _QWORD v35[2];

  v35[1] = *MEMORY[0x1E0C80C00];
  v31 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v0 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v31, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v0, 0);

  v1 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("min"));
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "quantityWithUnit:doubleValue:", v30, 0.0);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("min"));
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v29, 25.0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v28, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = &unk_1E9CECC68;
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("min"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 0.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("min"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "quantityWithUnit:doubleValue:", v9, 8.0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v7, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v35[0] = v11;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v35, &v34, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v4, v12, 0, 0, 0);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v31, "setAxisScalingRule:", v13);

  BYTE2(v26) = 0;
  LOWORD(v26) = 256;
  v14 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v26);
  v15 = [HKDisplayTypePresentation alloc];
  v16 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v32 = &unk_1E9CECC68;
  v17 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v33 = v17;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v33, &v32, 1);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v27) = 0;
  v19 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v15, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v16, v18, 1, 0, 0, 0, 1.0, v27, 0, 0, 0);

  v20 = [HKDisplayTypeLocalization alloc];
  v21 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v20, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("MOVE_MINUTE"), 0, CFSTR("Localizable-tinker"), 0, MEMORY[0x1E0C9AA70]);
  v22 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 179);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v22, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 179, 2, MEMORY[0x1E0C9AA60], v23, v14, v19, v21, v31, 0, 0);

  return v24;
}

HKDisplayType *HKDisplayTypeIdentifierAppleSleepingWristTemperatureMake()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  HKDisplayTypeBehavior *v25;
  HKDisplayTypePresentation *v26;
  HKDisplayTypePresentationConfiguration *v27;
  uint64_t v28;
  HKDisplayTypePresentation *v29;
  HKDisplayTypeLocalization *v30;
  HKDisplayType *v31;
  void *v32;
  HKDisplayType *v33;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  HKDisplayTypeChartingRules *v42;

  v42 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 4);
  -[HKDisplayTypeChartingRules setLineChartUsesValueAxisAnnotation:forTimeScope:](v42, "setLineChartUsesValueAxisAnnotation:forTimeScope:", 1, 6);
  -[HKDisplayTypeChartingRules setLineChartExtendLastValue:forTimeScope:](v42, "setLineChartExtendLastValue:forTimeScope:", 0, 6);
  -[HKDisplayTypeChartingRules setLineChartFlatLastValue:forTimeScope:](v42, "setLineChartFlatLastValue:forTimeScope:", 1, 6);
  -[HKDisplayTypeChartingRules setLineChartExtendFirstValue:forTimeScope:](v42, "setLineChartExtendFirstValue:forTimeScope:", 0, 6);
  -[HKDisplayTypeChartingRules setLineChartUsesPointMarkerImage:forTimeScope:](v42, "setLineChartUsesPointMarkerImage:forTimeScope:", 0, 6);
  v0 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("deltaDegC"));
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "quantityWithUnit:doubleValue:", v40, -2.0);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("deltaDegC"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "quantityWithUnit:doubleValue:", v2, 2.0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v38, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("deltaDegC"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, -2.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("deltaDegC"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "quantityWithUnit:doubleValue:", v9, 2.0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v7, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v4, 0, 0, 0, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v42, "setAxisScalingRule:", v12);

  v13 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("deltaDegC"));
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "quantityWithUnit:doubleValue:", v41, -1.0);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("deltaDegC"));
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "quantityWithUnit:doubleValue:", v39, 1.0);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v37, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("deltaDegC"));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "quantityWithUnit:doubleValue:", v18, -1.0);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("deltaDegC"));
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "quantityWithUnit:doubleValue:", v21, 1.0);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v19, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v16, 0, 0, 0, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setCompactChartAxisScalingRule:](v42, "setCompactChartAxisScalingRule:", v24);

  BYTE2(v35) = 0;
  LOWORD(v35) = 256;
  v25 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 1, 1, 0, 1, 1, v35);
  v26 = [HKDisplayTypePresentation alloc];
  v27 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 2, 3, 1);
  LOBYTE(v36) = 0;
  v28 = MEMORY[0x1E0C9AA70];
  v29 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v26, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v27, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v36, 0, 0, 0);

  v30 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SLEEPING_WRIST_TEMPERATURE"), 0, CFSTR("Localizable-Kali"), 0, v28);
  v31 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 256);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v31, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 256, 6, &unk_1E9CEA490, v32, v25, v29, v30, v42, 0, 0);

  return v33;
}

id HKWalkingSteadinessAxisScalingRule()
{
  double v0;
  double v1;
  double v2;
  double v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  hk_minWalkingSteadinessValueForClassification();
  v1 = v0;
  hk_maxWalkingSteadinessValueForClassification();
  v3 = v2;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v1 * 100.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v3 * 100.0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  +[HKNumericFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:](HKNumericFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:", v6, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setShouldExpandBoundsForOutliers:", 0);

  return v7;
}

HKDisplayType *HKDisplayTypeIdentifierRespiratoryRateMake()
{
  HKStaticDecimalPrecisionRule *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  HKDisplayTypeBehavior *v28;
  HKDisplayTypePresentation *v29;
  HKDisplayTypePresentationConfiguration *v30;
  HKDisplayTypePresentation *v31;
  HKDisplayTypeLocalization *v32;
  void *v33;
  void *v34;
  void *v35;
  HKDisplayTypeLocalization *v36;
  HKDisplayType *v37;
  void *v38;
  HKDisplayType *v39;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  HKDisplayTypeChartingRules *v48;
  _QWORD v49[2];
  _QWORD v50[2];
  void *v51;
  _QWORD v52[3];

  v52[1] = *MEMORY[0x1E0C80C00];
  v48 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 9, 2, 5);
  v0 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 1);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v48, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v0, 0);

  v1 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count/min"));
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "quantityWithUnit:doubleValue:", v46, 0.0);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count/min"));
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v45, 20.0);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v44, v43);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count/min"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "quantityWithUnit:doubleValue:", v5, 0.0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count/min"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "quantityWithUnit:doubleValue:", v8, 0.0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count/min"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "quantityWithUnit:doubleValue:", v11, 40.0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v9, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v3, 0, v6, 0, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v48, "setAxisScalingRule:", v14);

  v15 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count/min"));
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "quantityWithUnit:doubleValue:", v47, 10.0);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count/min"));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "quantityWithUnit:doubleValue:", v18, 0.0);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count/min"));
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "quantityWithUnit:doubleValue:", v21, 0.0);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count/min"));
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "quantityWithUnit:doubleValue:", v24, 40.0);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v22, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v16, v19, 0, 0, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setCompactChartAxisScalingRule:](v48, "setCompactChartAxisScalingRule:", v27);

  BYTE2(v41) = 0;
  LOWORD(v41) = 256;
  v28 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v41);
  v29 = [HKDisplayTypePresentation alloc];
  v30 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 1, 1, 0);
  LOBYTE(v42) = 0;
  v31 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v29, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v30, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v42, 0, 0, 0);

  v32 = [HKDisplayTypeLocalization alloc];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count/min"));
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v49[0] = &unk_1E9CECC50;
  v49[1] = &unk_1E9CECC98;
  v50[0] = CFSTR("BREATHS_PER_MINUTE");
  v50[1] = CFSTR("BREATHS_PER_MINUTE_PREFERENCES");
  v51 = v33;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v50, v49, 2);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v52[0] = v34;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v52, &v51, 1);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v32, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("RESPIRATORY_RATE"), 0, 0, 0, v35);

  v37 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 61);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v39 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v37, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 61, 13, &unk_1E9CEA190, v38, v28, v31, v36, v48, 0, 0);

  return v39;
}

HKDisplayType *HKDisplayTypeIdentifierAppleStandHourMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  void *v2;
  HKDisplayTypeBehavior *v3;
  HKDisplayTypePresentation *v4;
  HKDisplayTypePresentationConfiguration *v5;
  HKDisplayTypePresentationConfiguration *v6;
  void *v7;
  HKDisplayTypePresentation *v8;
  HKDisplayTypeLocalization *v9;
  HKDisplayTypeLocalization *v10;
  HKDisplayType *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HKDisplayType *v16;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  -[HKDisplayTypeChartingRules setChartStyle:forTimeScope:](v0, "setChartStyle:forTimeScope:", 6, 6);
  +[HKNumericMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKNumericMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", &unk_1E9CED5E8, 0, 0, 0, 64800.0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v2);

  BYTE2(v18) = 0;
  LOWORD(v18) = 256;
  v3 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v18);
  v4 = [HKDisplayTypePresentation alloc];
  v5 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 3, 2, 7, 0);
  v22 = &unk_1E9CECC68;
  v6 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 3, 0, 8, 0);
  v23[0] = v6;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v23, &v22, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v19) = 0;
  v8 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v4, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v5, v7, 1, 0, 0, 0, 1.0, v19, 0, 0, 0);

  v9 = [HKDisplayTypeLocalization alloc];
  v10 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v9, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("STAND_HOUR"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v11 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 70);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB6A78], "predicateForCategorySamplesWithOperatorType:value:", 4, 0);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = &unk_1E9CECC68;
  objc_msgSend(MEMORY[0x1E0C99E38], "null");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v11, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 70, 2, MEMORY[0x1E0C9AA60], v12, v3, v8, v10, v0, v13, v15);

  return v16;
}

HKDisplayType *HKDisplayTypeIdentifierWalkingHeartRateAverageMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HKDisplayTypeBehavior *v9;
  HKDisplayTypePresentation *v10;
  HKDisplayTypePresentationConfiguration *v11;
  HKDisplayTypePresentation *v12;
  HKDisplayTypeLocalization *v13;
  void *v14;
  void *v15;
  void *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const __CFString *v25;
  void *v26;
  _QWORD v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  -[HKDisplayTypeChartingRules setLineChartUsesValueAxisAnnotation:forTimeScope:](v0, "setLineChartUsesValueAxisAnnotation:forTimeScope:", 1, 6);
  -[HKDisplayTypeChartingRules setLineChartExtendLastValue:forTimeScope:](v0, "setLineChartExtendLastValue:forTimeScope:", 0, 6);
  -[HKDisplayTypeChartingRules setLineChartFlatLastValue:forTimeScope:](v0, "setLineChartFlatLastValue:forTimeScope:", 1, 6);
  -[HKDisplayTypeChartingRules setLineChartExtendFirstValue:forTimeScope:](v0, "setLineChartExtendFirstValue:forTimeScope:", 0, 6);
  -[HKDisplayTypeChartingRules setLineChartUsesPointMarkerImage:forTimeScope:](v0, "setLineChartUsesPointMarkerImage:forTimeScope:", 0, 6);
  -[HKDisplayTypeChartingRules setLineChartUsesValueAxisAnnotation:forTimeScope:](v0, "setLineChartUsesValueAxisAnnotation:forTimeScope:", 1, 7);
  -[HKDisplayTypeChartingRules setLineChartExtendLastValue:forTimeScope:](v0, "setLineChartExtendLastValue:forTimeScope:", 0, 7);
  -[HKDisplayTypeChartingRules setLineChartFlatLastValue:forTimeScope:](v0, "setLineChartFlatLastValue:forTimeScope:", 1, 7);
  -[HKDisplayTypeChartingRules setLineChartExtendFirstValue:forTimeScope:](v0, "setLineChartExtendFirstValue:forTimeScope:", 0, 7);
  -[HKDisplayTypeChartingRules setLineChartUsesPointMarkerImage:forTimeScope:](v0, "setLineChartUsesPointMarkerImage:forTimeScope:", 0, 7);
  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count/min"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 20.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count/min"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 0.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v4, v7, 0, 0, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v8);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v10 = [HKDisplayTypePresentation alloc];
  v11 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 1, 3, 1);
  LOBYTE(v23) = 0;
  v12 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v10, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v11, MEMORY[0x1E0C9AA70], 1, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v13 = [HKDisplayTypeLocalization alloc];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count/min"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = &unk_1E9CECC50;
  v25 = CFSTR("BEATS_PER_MINUTE");
  v26 = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v27[0] = v15;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v27, &v26, 1);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v13, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("WALKING_HEART_RATE_AVERAGE"), 0, 0, 0, v16);

  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 137);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 137, 11, MEMORY[0x1E0C9AA60], v19, v9, v12, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierHeartRateMake()
{
  HKStaticDecimalPrecisionRule *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HKRemoteChartConfiguration *v14;
  void *v15;
  void *v16;
  HKRemoteChartConfiguration *v17;
  HKDisplayTypeBehavior *v18;
  HKDisplayTypeSummaryAttribution *v19;
  HKDisplayTypePresentation *v20;
  HKDisplayTypePresentationConfiguration *v21;
  HKDisplayTypePresentation *v22;
  HKDisplayTypeLocalization *v23;
  void *v24;
  void *v25;
  void *v26;
  HKDisplayTypeLocalization *v27;
  HKDisplayType *v28;
  void *v29;
  HKDisplayType *v30;
  uint64_t v32;
  uint64_t v33;
  HKDisplayTypeChartingRules *v34;
  void *v35;
  void *v36;
  const __CFString *v37;
  void *v38;
  void *v39;
  void *v40;
  _QWORD v41[2];

  v41[1] = *MEMORY[0x1E0C80C00];
  v34 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 9, 2, 6);
  v0 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v34, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v0, 0);

  v1 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count/min"));
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "quantityWithUnit:doubleValue:", v35, 20.0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count/min"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "quantityWithUnit:doubleValue:", v4, 0.0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count/min"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "quantityWithUnit:doubleValue:", v7, 0.0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count/min"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "quantityWithUnit:doubleValue:", v10, 80.0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v8, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v2, v5, 0, 0, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v34, "setAxisScalingRule:", v13);

  v14 = [HKRemoteChartConfiguration alloc];
  v40 = &unk_1E9CECC68;
  objc_msgSend(MEMORY[0x1E0C99D78], "hk_chartStatisticsIntervalComponentsForValue:forComponent:", 2, 32);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v41[0] = v15;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v41, &v40, 1);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = -[HKRemoteChartConfiguration initWithStatisticIntervalComponentsByTimeScope:](v14, "initWithStatisticIntervalComponentsByTimeScope:", v16);
  -[HKDisplayTypeChartingRules setRemoteChartConfiguration:](v34, "setRemoteChartConfiguration:", v17);

  BYTE2(v32) = 0;
  LOWORD(v32) = 256;
  v18 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v32);
  v19 = -[HKDisplayTypeSummaryAttribution initWithAttribution:urlAttribute:primaryProfileOnly:]([HKDisplayTypeSummaryAttribution alloc], "initWithAttribution:urlAttribute:primaryProfileOnly:", CFSTR("Mayo Clinic"), CFSTR("http://www.mayoclinic.org/"), 0);
  v20 = [HKDisplayTypePresentation alloc];
  v21 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 1, 1, 0);
  LOBYTE(v33) = 0;
  v22 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v20, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v21, MEMORY[0x1E0C9AA70], 1, 0, 0, 0, 1.0, v33, 0, 0, v19);

  v23 = [HKDisplayTypeLocalization alloc];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count/min"));
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = &unk_1E9CECC50;
  v37 = CFSTR("BEATS_PER_MINUTE");
  v38 = v24;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v37, &v36, 1);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v39 = v25;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v39, &v38, 1);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v23, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("HEART_RATE"), 0, 0, 0, v26);

  v28 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 5);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v28, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 5, 11, &unk_1E9CEA130, v29, v18, v22, v27, v34, 0, 0);

  return v30;
}

HKDisplayType *HKDisplayTypeIdentifierInhalerUsageMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HKDisplayTypeBehavior *v9;
  HKDisplayTypeSummaryAttribution *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  void *v17;
  void *v18;
  void *v19;
  HKDisplayTypeLocalization *v20;
  HKDisplayType *v21;
  void *v22;
  HKDisplayType *v23;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const __CFString *v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD v32[2];

  v32[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 3.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 0.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v4, v7, 0, 0, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v8);

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v25);
  v10 = -[HKDisplayTypeSummaryAttribution initWithAttribution:urlAttribute:primaryProfileOnly:]([HKDisplayTypeSummaryAttribution alloc], "initWithAttribution:urlAttribute:primaryProfileOnly:", CFSTR("National Heart, Lung, and Blood Institute"), 0, 0);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v31 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v32[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v32, &v31, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v26) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 0, 0, 0, 0, 1.0, v26, 0, 0, v10);

  v16 = [HKDisplayTypeLocalization alloc];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = &unk_1E9CECC50;
  v28 = &stru_1E9C4C428;
  v29 = v17;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = v18;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("INHALER_USAGE"), 0, 0, 0, v19);

  v21 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 60);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v21, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 60, 13, &unk_1E9CEA178, v22, v9, v15, v20, v0, 0, 0);

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryEnergyMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("kcal"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("kcal"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 50.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 0, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("DIETARY_ENERGY"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 29);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 29, 4, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierBreastPainMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_BREAST_PAIN"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 158);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 158, 26, &unk_1E9CEA280, v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierBodyMassMake()
{
  HKStaticDecimalPrecisionRule *v0;
  void *v1;
  HKStaticDecimalPrecisionRule *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  HKDisplayTypeBehavior *v18;
  HKDisplayTypePresentation *v19;
  HKDisplayTypePresentationConfiguration *v20;
  uint64_t v21;
  HKDisplayTypePresentation *v22;
  HKDisplayTypeLocalization *v23;
  HKDisplayType *v24;
  void *v25;
  HKDisplayType *v26;
  uint64_t v28;
  uint64_t v29;
  HKDisplayTypeChartingRules *v30;
  void *v31;
  _QWORD v32[2];

  v32[1] = *MEMORY[0x1E0C80C00];
  v30 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  v0 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 2);
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("lb"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = v1;
  v2 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 1);
  v32[0] = v2;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v32, &v31, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v30, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v0, v3);

  v4 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("lb"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "quantityWithUnit:doubleValue:", v5, 20.0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("lb"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "quantityWithUnit:doubleValue:", v8, 0.0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("lb"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "quantityWithUnit:doubleValue:", v11, 0.0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("lb"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "quantityWithUnit:doubleValue:", v14, 150.0);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v12, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v6, v9, 0, 0, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v30, "setAxisScalingRule:", v17);

  BYTE2(v28) = 0;
  LOWORD(v28) = 256;
  v18 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v28);
  v19 = [HKDisplayTypePresentation alloc];
  v20 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 2, 3, 0);
  LOBYTE(v29) = 0;
  v21 = MEMORY[0x1E0C9AA70];
  v22 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v19, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v20, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v29, 0, 0, 0);

  v23 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("BODY_MASS"), 0, 0, 0, v21);
  v24 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 3);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v24, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 3, 6, MEMORY[0x1E0C9AA60], v25, v18, v22, v23, v30, 0, 0);

  return v26;
}

HKDisplayType *HKDisplayTypeIdentifierBloodGlucoseMake()
{
  HKDisplayTypeChartingRules *v0;
  void *v1;
  HKStaticDecimalPrecisionRule *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HKRemoteChartConfiguration *v15;
  void *v16;
  void *v17;
  HKRemoteChartConfiguration *v18;
  HKDisplayTypeBehavior *v19;
  HKDisplayTypePresentation *v20;
  HKDisplayTypePresentationConfiguration *v21;
  uint64_t v22;
  HKDisplayTypePresentation *v23;
  HKDisplayTypeLocalization *v24;
  HKDisplayType *v25;
  void *v26;
  HKDisplayType *v27;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  _QWORD v35[2];

  v35[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 9, 0, 6);
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg/dL"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = v1;
  v2 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  v35[0] = v2;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v35, &v34, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", 0, v3);

  v31 = objc_alloc_init(MEMORY[0x1E0C99D78]);
  objc_msgSend(v31, "setMinute:", 30);
  -[HKDisplayTypeChartingRules setIntervalComponents:forTimeScope:](v0, "setIntervalComponents:forTimeScope:", v31, 6);
  -[HKDisplayTypeChartingRules setChartPointRadius:forTimeScope:](v0, "setChartPointRadius:forTimeScope:", 6, 2.0);
  -[HKDisplayTypeChartingRules setChartPointLineWidth:forTimeScope:](v0, "setChartPointLineWidth:forTimeScope:", 6, 1.0);
  -[HKDisplayTypeChartingRules setLineChartUsesValueAxisAnnotation:forTimeScope:](v0, "setLineChartUsesValueAxisAnnotation:forTimeScope:", 1, 6);
  -[HKDisplayTypeChartingRules setLineChartExtendLastValue:forTimeScope:](v0, "setLineChartExtendLastValue:forTimeScope:", 1, 6);
  -[HKDisplayTypeChartingRules setLineChartFlatLastValue:forTimeScope:](v0, "setLineChartFlatLastValue:forTimeScope:", 1, 6);
  -[HKDisplayTypeChartingRules setLineChartExtendFirstValue:forTimeScope:](v0, "setLineChartExtendFirstValue:forTimeScope:", 0, 6);
  -[HKDisplayTypeChartingRules setLineChartUsesPointMarkerImage:forTimeScope:](v0, "setLineChartUsesPointMarkerImage:forTimeScope:", 1, 6);
  v4 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg/dL"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "quantityWithUnit:doubleValue:", v5, 0.0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg/dL"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "quantityWithUnit:doubleValue:", v8, 200.0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v6, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg/dL"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "quantityWithUnit:doubleValue:", v12, 0.0);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v10, 0, v13, 0, 0);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v14);

  v15 = [HKRemoteChartConfiguration alloc];
  v32 = &unk_1E9CECC68;
  objc_msgSend(MEMORY[0x1E0C99D78], "hk_chartStatisticsIntervalComponentsForValue:forComponent:", 2, 32);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = v16;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v33, &v32, 1);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = -[HKRemoteChartConfiguration initWithStatisticIntervalComponentsByTimeScope:](v15, "initWithStatisticIntervalComponentsByTimeScope:", v17);
  -[HKDisplayTypeChartingRules setRemoteChartConfiguration:](v0, "setRemoteChartConfiguration:", v18);

  BYTE2(v29) = 0;
  LOWORD(v29) = 256;
  v19 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 1, 0, 1, v29);
  v20 = [HKDisplayTypePresentation alloc];
  v21 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 1, 1, 0);
  LOBYTE(v30) = 0;
  v22 = MEMORY[0x1E0C9AA70];
  v23 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v20, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v21, MEMORY[0x1E0C9AA70], 0, 0, 1, 0, 1.0, v30, 0, 0, 0);

  v24 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("BLOOD_GLUCOSE"), 0, 0, 0, v22);
  v25 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 15);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v25, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 15, 1, &unk_1E9CEA160, v26, v19, v23, v24, v0, 0, 0);

  return v27;
}

HKDisplayType *HKDisplayTypeIdentifierWaterTemperatureMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  HKRemoteChartConfiguration *v13;
  void *v14;
  void *v15;
  HKRemoteChartConfiguration *v16;
  HKDisplayTypeBehavior *v17;
  HKDisplayTypePresentation *v18;
  HKDisplayTypePresentationConfiguration *v19;
  uint64_t v20;
  HKDisplayTypePresentation *v21;
  HKDisplayTypeLocalization *v22;
  HKDisplayType *v23;
  void *v24;
  HKDisplayType *v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  _QWORD v30[2];

  v30[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 3, 0, 6);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("degC"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 5.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("degC"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 10.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("degC"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "quantityWithUnit:doubleValue:", v9, 30.0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v7, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v4, 0, 0, 0, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v12);

  v13 = [HKRemoteChartConfiguration alloc];
  v29 = &unk_1E9CECC68;
  objc_msgSend(MEMORY[0x1E0C99D78], "hk_chartStatisticsIntervalComponentsForValue:forComponent:", 2, 32);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v30[0] = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v30, &v29, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = -[HKRemoteChartConfiguration initWithStatisticIntervalComponentsByTimeScope:](v13, "initWithStatisticIntervalComponentsByTimeScope:", v15);
  -[HKDisplayTypeChartingRules setRemoteChartConfiguration:](v0, "setRemoteChartConfiguration:", v16);

  BYTE2(v27) = 0;
  LOWORD(v27) = 256;
  v17 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v27);
  v18 = [HKDisplayTypePresentation alloc];
  v19 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 1, 1, 0);
  LOBYTE(v28) = 0;
  v20 = MEMORY[0x1E0C9AA70];
  v21 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v18, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v19, MEMORY[0x1E0C9AA70], 1, 0, 0, 0, 1.0, v28, 0, 0, 0);

  v22 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("WATER_TEMPERATURE"), 0, CFSTR("Localizable-Charon"), 0, v20);
  v23 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 277);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v23, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 277, 14, MEMORY[0x1E0C9AA60], v24, v17, v21, v22, v0, 0, 0);

  return v25;
}

id HKMostRecentSampleEndDateText(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (v5)
  {
    if (objc_msgSend(v6, "isDateInToday:", v5))
    {
      if (a3)
        v8 = 36;
      else
        v8 = 27;
    }
    else if ((objc_msgSend(v7, "isDateInYesterday:", v5) & 1) != 0)
    {
      v8 = 36;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99D68], "date");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "component:fromDate:", 4, v11);

      objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v13, "component:fromDate:", 4, v5);

      if (v14 == v12)
        v8 = 12;
      else
        v8 = 7;
    }
    HKLocalizedStringForDateAndTemplateWithFormattingContext(v5, v8, 2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id HKLocalizedStringForDateAndTemplateWithFormattingContext(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v5 = a1;
  HKDateFormatterFromTemplate(a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "formattingContext");
  if (v7 == a3)
  {
    objc_msgSend(v6, "stringFromDate:", v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v9 = v7;
    objc_msgSend(v6, "setFormattingContext:", a3);
    objc_msgSend(v6, "stringFromDate:", v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setFormattingContext:", v9);
  }

  return v8;
}

id HKDateFormatterFromTemplate(uint64_t a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  void *v33;
  id v34;
  void *v35;
  id v36;
  void *v37;
  id v38;
  void *v39;
  id v40;
  void *v41;

  switch(a1)
  {
    case 0:
      v1 = &__block_literal_global_478;
      goto LABEL_66;
    case 1:
      v1 = &__block_literal_global_481;
      goto LABEL_66;
    case 2:
      if ((CUIKCurrentLocaleRequiresUnabbrevatedMonthNames() & 1) != 0)
        goto LABEL_7;
      goto LABEL_8;
    case 3:
LABEL_8:
      _GenerateDateFormatterShortMonthHeader();
      v2 = (id)objc_claimAutoreleasedReturnValue();
      return v2;
    case 4:
      v3 = (void *)_GenerateDateFormatterMonthUltraShort___formatter;
      if (!_GenerateDateFormatterMonthUltraShort___formatter)
      {
        v4 = objc_alloc_init(MEMORY[0x1E0CB3578]);
        v5 = (void *)_GenerateDateFormatterMonthUltraShort___formatter;
        _GenerateDateFormatterMonthUltraShort___formatter = (uint64_t)v4;

        objc_msgSend((id)_GenerateDateFormatterMonthUltraShort___formatter, "setLocalizedDateFormatFromTemplate:", CFSTR("LLLLL"));
        v3 = (void *)_GenerateDateFormatterMonthUltraShort___formatter;
      }
      goto LABEL_69;
    case 5:
LABEL_7:
      _GenerateDateFormatterLongMonthHeader();
      v2 = (id)objc_claimAutoreleasedReturnValue();
      return v2;
    case 6:
      v1 = &__block_literal_global_488;
      goto LABEL_66;
    case 7:
      v1 = &__block_literal_global_489;
      goto LABEL_66;
    case 8:
      v1 = &__block_literal_global_490;
      goto LABEL_66;
    case 9:
      v1 = &__block_literal_global_491;
      goto LABEL_66;
    case 10:
      v3 = (void *)_GenerateDateFormatterLongMonthDateYear___dateFormatter;
      if (!_GenerateDateFormatterLongMonthDateYear___dateFormatter)
      {
        v6 = objc_alloc_init(MEMORY[0x1E0CB3578]);
        v7 = (void *)_GenerateDateFormatterLongMonthDateYear___dateFormatter;
        _GenerateDateFormatterLongMonthDateYear___dateFormatter = (uint64_t)v6;

        objc_msgSend((id)_GenerateDateFormatterLongMonthDateYear___dateFormatter, "setDateStyle:", 3);
        objc_msgSend((id)_GenerateDateFormatterLongMonthDateYear___dateFormatter, "setTimeStyle:", 0);
        v3 = (void *)_GenerateDateFormatterLongMonthDateYear___dateFormatter;
      }
      goto LABEL_69;
    case 11:
      v3 = (void *)_GenerateDateFormatterLongMonthDateYearInSentence___dateFormatter;
      if (!_GenerateDateFormatterLongMonthDateYearInSentence___dateFormatter)
      {
        v8 = objc_alloc_init(MEMORY[0x1E0CB3578]);
        v9 = (void *)_GenerateDateFormatterLongMonthDateYearInSentence___dateFormatter;
        _GenerateDateFormatterLongMonthDateYearInSentence___dateFormatter = (uint64_t)v8;

        objc_msgSend((id)_GenerateDateFormatterLongMonthDateYearInSentence___dateFormatter, "setDateStyle:", 3);
        objc_msgSend((id)_GenerateDateFormatterLongMonthDateYearInSentence___dateFormatter, "setTimeStyle:", 0);
        objc_msgSend((id)_GenerateDateFormatterLongMonthDateYearInSentence___dateFormatter, "setFormattingContext:", 5);
        v3 = (void *)_GenerateDateFormatterLongMonthDateYearInSentence___dateFormatter;
      }
      goto LABEL_69;
    case 12:
      v1 = &__block_literal_global_492;
      goto LABEL_66;
    case 13:
      v1 = &__block_literal_global_493;
      goto LABEL_66;
    case 14:
      v1 = &__block_literal_global_494;
      goto LABEL_66;
    case 15:
      v1 = &__block_literal_global_495;
      goto LABEL_66;
    case 16:
      v3 = (void *)_GenerateDateFormatterDate___formatter;
      if (!_GenerateDateFormatterDate___formatter)
      {
        v10 = objc_alloc_init(MEMORY[0x1E0CB3578]);
        v11 = (void *)_GenerateDateFormatterDate___formatter;
        _GenerateDateFormatterDate___formatter = (uint64_t)v10;

        objc_msgSend((id)_GenerateDateFormatterDate___formatter, "setLocalizedDateFormatFromTemplate:", CFSTR("d"));
        v3 = (void *)_GenerateDateFormatterDate___formatter;
      }
      goto LABEL_69;
    case 17:
      v3 = (void *)_GenerateDateFormatterDateDay___formatter;
      if (!_GenerateDateFormatterDateDay___formatter)
      {
        v12 = objc_alloc_init(MEMORY[0x1E0CB3578]);
        v13 = (void *)_GenerateDateFormatterDateDay___formatter;
        _GenerateDateFormatterDateDay___formatter = (uint64_t)v12;

        objc_msgSend((id)_GenerateDateFormatterDateDay___formatter, "setLocalizedDateFormatFromTemplate:", CFSTR("d ccc"));
        v3 = (void *)_GenerateDateFormatterDateDay___formatter;
      }
      goto LABEL_69;
    case 18:
      v3 = (void *)_GenerateDateFormatterDay___formatter;
      if (!_GenerateDateFormatterDay___formatter)
      {
        v14 = objc_alloc_init(MEMORY[0x1E0CB3578]);
        v15 = (void *)_GenerateDateFormatterDay___formatter;
        _GenerateDateFormatterDay___formatter = (uint64_t)v14;

        objc_msgSend((id)_GenerateDateFormatterDay___formatter, "setLocalizedDateFormatFromTemplate:", CFSTR("ccc"));
        v3 = (void *)_GenerateDateFormatterDay___formatter;
      }
      goto LABEL_69;
    case 19:
      v3 = (void *)_GenerateDateFormatterLongDay___formatter;
      if (!_GenerateDateFormatterLongDay___formatter)
      {
        v16 = objc_alloc_init(MEMORY[0x1E0CB3578]);
        v17 = (void *)_GenerateDateFormatterLongDay___formatter;
        _GenerateDateFormatterLongDay___formatter = (uint64_t)v16;

        objc_msgSend((id)_GenerateDateFormatterLongDay___formatter, "setLocalizedDateFormatFromTemplate:", CFSTR("cccc"));
        v3 = (void *)_GenerateDateFormatterLongDay___formatter;
      }
      goto LABEL_69;
    case 20:
      v3 = (void *)_GenerateDateFormatterDayUltraShort___formatter;
      if (!_GenerateDateFormatterDayUltraShort___formatter)
      {
        v18 = objc_alloc_init(MEMORY[0x1E0CB3578]);
        v19 = (void *)_GenerateDateFormatterDayUltraShort___formatter;
        _GenerateDateFormatterDayUltraShort___formatter = (uint64_t)v18;

        objc_msgSend((id)_GenerateDateFormatterDayUltraShort___formatter, "setLocalizedDateFormatFromTemplate:", CFSTR("ccccc"));
        v3 = (void *)_GenerateDateFormatterDayUltraShort___formatter;
      }
      goto LABEL_69;
    case 21:
      v3 = (void *)_GenerateDateFormatterLongDayDate___formatter;
      if (!_GenerateDateFormatterLongDayDate___formatter)
      {
        v20 = objc_alloc_init(MEMORY[0x1E0CB3578]);
        v21 = (void *)_GenerateDateFormatterLongDayDate___formatter;
        _GenerateDateFormatterLongDayDate___formatter = (uint64_t)v20;

        v22 = (void *)_GenerateDateFormatterLongDayDate___formatter;
        CPDateFormatStringForFormatType();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "setLocalizedDateFormatFromTemplate:", v23);

        v3 = (void *)_GenerateDateFormatterLongDayDate___formatter;
      }
      goto LABEL_69;
    case 22:
      if (_CPTimeFormatIs24HourMode())
        goto LABEL_36;
      v1 = &__block_literal_global_506;
      goto LABEL_66;
    case 23:
      if (_CPTimeFormatIs24HourMode())
        goto LABEL_40;
      v1 = &__block_literal_global_512;
      goto LABEL_66;
    case 24:
      if (_CPTimeFormatIs24HourMode())
        goto LABEL_40;
      v3 = (void *)_GenerateDateFormatterHourShortAMPM___dateFormatter;
      if (!_GenerateDateFormatterHourShortAMPM___dateFormatter)
      {
        v40 = objc_alloc_init(MEMORY[0x1E0CB3578]);
        v41 = (void *)_GenerateDateFormatterHourShortAMPM___dateFormatter;
        _GenerateDateFormatterHourShortAMPM___dateFormatter = (uint64_t)v40;

        objc_msgSend((id)_GenerateDateFormatterHourShortAMPM___dateFormatter, "setLocalizedDateFormatFromTemplate:", CFSTR("j a"));
        v3 = (void *)_GenerateDateFormatterHourShortAMPM___dateFormatter;
      }
      goto LABEL_69;
    case 25:
      v3 = (void *)_GenerateDateFormatterHourWithoutAMPM___dateFormatter;
      if (!_GenerateDateFormatterHourWithoutAMPM___dateFormatter)
      {
        v24 = objc_alloc_init(MEMORY[0x1E0CB3578]);
        v25 = (void *)_GenerateDateFormatterHourWithoutAMPM___dateFormatter;
        _GenerateDateFormatterHourWithoutAMPM___dateFormatter = (uint64_t)v24;

        objc_msgSend((id)_GenerateDateFormatterHourWithoutAMPM___dateFormatter, "setLocalizedDateFormatFromTemplate:", CFSTR("j"));
        objc_msgSend((id)_GenerateDateFormatterHourWithoutAMPM___dateFormatter, "setAMSymbol:", &stru_1E9C4C428);
        objc_msgSend((id)_GenerateDateFormatterHourWithoutAMPM___dateFormatter, "setPMSymbol:", &stru_1E9C4C428);
        v3 = (void *)_GenerateDateFormatterHourWithoutAMPM___dateFormatter;
      }
      goto LABEL_69;
    case 26:
LABEL_36:
      v1 = &__block_literal_global_509;
      goto LABEL_66;
    case 27:
LABEL_40:
      v1 = &__block_literal_global_515;
      goto LABEL_66;
    case 28:
      v3 = (void *)_GenerateDateFormatterHourMinuteWithoutAMPM___dateFormatter;
      if (!_GenerateDateFormatterHourMinuteWithoutAMPM___dateFormatter)
      {
        v26 = objc_alloc_init(MEMORY[0x1E0CB3578]);
        v27 = (void *)_GenerateDateFormatterHourMinuteWithoutAMPM___dateFormatter;
        _GenerateDateFormatterHourMinuteWithoutAMPM___dateFormatter = (uint64_t)v26;

        objc_msgSend((id)_GenerateDateFormatterHourMinuteWithoutAMPM___dateFormatter, "setLocalizedDateFormatFromTemplate:", CFSTR("j:mm a"));
        objc_msgSend((id)_GenerateDateFormatterHourMinuteWithoutAMPM___dateFormatter, "setAMSymbol:", &stru_1E9C4C428);
        objc_msgSend((id)_GenerateDateFormatterHourMinuteWithoutAMPM___dateFormatter, "setPMSymbol:", &stru_1E9C4C428);
        v3 = (void *)_GenerateDateFormatterHourMinuteWithoutAMPM___dateFormatter;
      }
      goto LABEL_69;
    case 29:
      v1 = &__block_literal_global_516;
      goto LABEL_66;
    case 30:
      if (_CPTimeFormatIs24HourMode())
        goto LABEL_47;
      _GenerateDateFormatterDayMonthDateHour();
      v2 = (id)objc_claimAutoreleasedReturnValue();
      return v2;
    case 31:
LABEL_47:
      _GenerateDateFormatterDayMonthDateHourMinute();
      v2 = (id)objc_claimAutoreleasedReturnValue();
      return v2;
    case 32:
      v3 = (void *)_GenerateDateFormatterLongDateLongTime___dateFormatter;
      if (!_GenerateDateFormatterLongDateLongTime___dateFormatter)
      {
        v28 = objc_alloc_init(MEMORY[0x1E0CB3578]);
        v29 = (void *)_GenerateDateFormatterLongDateLongTime___dateFormatter;
        _GenerateDateFormatterLongDateLongTime___dateFormatter = (uint64_t)v28;

        objc_msgSend((id)_GenerateDateFormatterLongDateLongTime___dateFormatter, "setDateStyle:", 2);
        objc_msgSend((id)_GenerateDateFormatterLongDateLongTime___dateFormatter, "setTimeStyle:", 2);
        v3 = (void *)_GenerateDateFormatterLongDateLongTime___dateFormatter;
      }
      goto LABEL_69;
    case 33:
      v3 = (void *)_GenerateDateFormatterLongDateShortTime___dateFormatter;
      if (!_GenerateDateFormatterLongDateShortTime___dateFormatter)
      {
        v30 = objc_alloc_init(MEMORY[0x1E0CB3578]);
        v31 = (void *)_GenerateDateFormatterLongDateShortTime___dateFormatter;
        _GenerateDateFormatterLongDateShortTime___dateFormatter = (uint64_t)v30;

        objc_msgSend((id)_GenerateDateFormatterLongDateShortTime___dateFormatter, "setDateStyle:", 2);
        objc_msgSend((id)_GenerateDateFormatterLongDateShortTime___dateFormatter, "setTimeStyle:", 1);
        v3 = (void *)_GenerateDateFormatterLongDateShortTime___dateFormatter;
      }
      goto LABEL_69;
    case 34:
      v3 = (void *)_GenerateDateFormatterLongMonthDateYearShortTime___dateFormatter;
      if (!_GenerateDateFormatterLongMonthDateYearShortTime___dateFormatter)
      {
        v32 = objc_alloc_init(MEMORY[0x1E0CB3578]);
        v33 = (void *)_GenerateDateFormatterLongMonthDateYearShortTime___dateFormatter;
        _GenerateDateFormatterLongMonthDateYearShortTime___dateFormatter = (uint64_t)v32;

        objc_msgSend((id)_GenerateDateFormatterLongMonthDateYearShortTime___dateFormatter, "setDateStyle:", 3);
        objc_msgSend((id)_GenerateDateFormatterLongMonthDateYearShortTime___dateFormatter, "setTimeStyle:", 1);
        v3 = (void *)_GenerateDateFormatterLongMonthDateYearShortTime___dateFormatter;
      }
      goto LABEL_69;
    case 35:
      v3 = (void *)_GenerateDateFormatterTodayHourMinute___dateFormatter;
      if (!_GenerateDateFormatterTodayHourMinute___dateFormatter)
      {
        v34 = objc_alloc_init(MEMORY[0x1E0CB3578]);
        v35 = (void *)_GenerateDateFormatterTodayHourMinute___dateFormatter;
        _GenerateDateFormatterTodayHourMinute___dateFormatter = (uint64_t)v34;

        objc_msgSend((id)_GenerateDateFormatterTodayHourMinute___dateFormatter, "setDateStyle:", 2);
        objc_msgSend((id)_GenerateDateFormatterTodayHourMinute___dateFormatter, "setTimeStyle:", 1);
        objc_msgSend((id)_GenerateDateFormatterTodayHourMinute___dateFormatter, "setDoesRelativeDateFormatting:", 1);
        v3 = (void *)_GenerateDateFormatterTodayHourMinute___dateFormatter;
      }
      goto LABEL_69;
    case 36:
      v3 = (void *)_GenerateDateFormatterToday___dateFormatter;
      if (!_GenerateDateFormatterToday___dateFormatter)
      {
        v36 = objc_alloc_init(MEMORY[0x1E0CB3578]);
        v37 = (void *)_GenerateDateFormatterToday___dateFormatter;
        _GenerateDateFormatterToday___dateFormatter = (uint64_t)v36;

        objc_msgSend((id)_GenerateDateFormatterToday___dateFormatter, "setDateStyle:", 2);
        objc_msgSend((id)_GenerateDateFormatterToday___dateFormatter, "setTimeStyle:", 0);
        objc_msgSend((id)_GenerateDateFormatterToday___dateFormatter, "setDoesRelativeDateFormatting:", 1);
        v3 = (void *)_GenerateDateFormatterToday___dateFormatter;
      }
      goto LABEL_69;
    case 37:
      v3 = (void *)_GenerateDateFormatterLongToday___dateFormatter;
      if (!_GenerateDateFormatterLongToday___dateFormatter)
      {
        v38 = objc_alloc_init(MEMORY[0x1E0CB3578]);
        v39 = (void *)_GenerateDateFormatterLongToday___dateFormatter;
        _GenerateDateFormatterLongToday___dateFormatter = (uint64_t)v38;

        objc_msgSend((id)_GenerateDateFormatterLongToday___dateFormatter, "setDateStyle:", 4);
        objc_msgSend((id)_GenerateDateFormatterLongToday___dateFormatter, "setTimeStyle:", 0);
        objc_msgSend((id)_GenerateDateFormatterLongToday___dateFormatter, "setDoesRelativeDateFormatting:", 1);
        v3 = (void *)_GenerateDateFormatterLongToday___dateFormatter;
      }
LABEL_69:
      v2 = v3;
      return v2;
    case 38:
      v1 = &__block_literal_global_519;
      goto LABEL_66;
    case 39:
      v1 = &__block_literal_global_522;
      goto LABEL_66;
    case 40:
      v1 = &__block_literal_global_525;
      goto LABEL_66;
    case 41:
      v1 = &__block_literal_global_528;
      goto LABEL_66;
    case 42:
      v1 = &__block_literal_global_531;
LABEL_66:
      _performNSDateFormatterInitializationBlock(v1);
      v2 = (id)objc_claimAutoreleasedReturnValue();
      break;
    default:
      v2 = 0;
      break;
  }
  return v2;
}

id _performNSDateFormatterInitializationBlock(void *a1)
{
  void (**v1)(_QWORD);
  void *v2;

  v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_formatterLock);
  v1[2](v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  os_unfair_lock_unlock((os_unfair_lock_t)&_formatterLock);
  return v2;
}

id HKStartOfRollingYearForDate(void *a1, void *a2)
{
  void *v3;
  void (**v4)(id, void *, void *);
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;

  v3 = (void *)MEMORY[0x1E0C99D48];
  v4 = a2;
  v5 = a1;
  objc_msgSend(v3, "currentCalendar");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "components:fromDate:", 14, v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "dateFromComponents:", v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_alloc_init(MEMORY[0x1E0C99D78]);
  objc_msgSend(v10, "setYear:", -1);
  objc_msgSend(v10, "setMonth:", 1);
  objc_msgSend(v8, "dateByAddingComponents:toDate:options:", v10, v9, 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v4[2](v4, v8, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

id _formatterWithDecimalPrecisionAndStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  uint64_t v7;

  v6 = objc_alloc_init(MEMORY[0x1E0CB37F0]);
  objc_msgSend(v6, "setNumberStyle:", a3);
  objc_msgSend(v6, "setMaximumFractionDigits:", a1);
  if (a3 == 3)
    objc_msgSend(v6, "setMultiplier:", &unk_1E9CEAB38);
  if (!a2)
  {
    v7 = 6;
    goto LABEL_7;
  }
  if (a2 == 1)
  {
    v7 = 1;
LABEL_7:
    objc_msgSend(v6, "setRoundingMode:", v7);
  }
  return v6;
}

uint64_t HKCodableSummaryQuantityValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  HKCodableQuantity *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v19 = *v3;
        v20 = *(_QWORD *)(a2 + v19);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v20);
          *(_QWORD *)(a2 + v19) = v20 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v21 = 0;
        }
        *(_QWORD *)(a1 + 8) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        v18 = objc_alloc_init(HKCodableQuantity);
        objc_storeStrong((id *)(a1 + 16), v18);
        if (!PBReaderPlaceMark() || (HKCodableQuantityReadFrom((uint64_t)v18, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HKCodableChartQuantityDataSourceQueryDataReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  HKCodableStatisticsCollection *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(HKCodableStatisticsCollection);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark()
          || !HKCodableStatisticsCollectionReadFrom((id *)&v17->super.super.isa, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HKCodableSummaryActivityRingsValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  HKCodableQuantity *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 124) |= 8u;
        v18 = *v3;
        v19 = *(_QWORD *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
          *(_QWORD *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v20 = 0;
        }
        v55 = 32;
        goto LABEL_91;
      case 2u:
        v22 = 0;
        v23 = 0;
        v24 = 0;
        *(_BYTE *)(a1 + 124) |= 1u;
        while (2)
        {
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          v27 = v26 + 1;
          if (v26 == -1 || v27 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v26);
            *(_QWORD *)(a2 + v25) = v27;
            v24 |= (unint64_t)(v28 & 0x7F) << v22;
            if (v28 < 0)
            {
              v22 += 7;
              v15 = v23++ >= 9;
              if (v15)
              {
                v24 = 0;
                goto LABEL_71;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v24 = 0;
LABEL_71:
        *(_QWORD *)(a1 + 8) = v24;
        goto LABEL_92;
      case 3u:
        v29 = objc_alloc_init(HKCodableQuantity);
        v30 = 56;
        goto LABEL_39;
      case 4u:
        v29 = objc_alloc_init(HKCodableQuantity);
        v30 = 64;
        goto LABEL_39;
      case 5u:
        v29 = objc_alloc_init(HKCodableQuantity);
        v30 = 88;
        goto LABEL_39;
      case 6u:
        v29 = objc_alloc_init(HKCodableQuantity);
        v30 = 96;
        goto LABEL_39;
      case 7u:
        v29 = objc_alloc_init(HKCodableQuantity);
        v30 = 72;
        goto LABEL_39;
      case 8u:
        v29 = objc_alloc_init(HKCodableQuantity);
        v30 = 80;
        goto LABEL_39;
      case 9u:
        v29 = objc_alloc_init(HKCodableQuantity);
        v30 = 104;
        goto LABEL_39;
      case 0xAu:
        v29 = objc_alloc_init(HKCodableQuantity);
        v30 = 112;
LABEL_39:
        objc_storeStrong((id *)(a1 + v30), v29);
        if (PBReaderPlaceMark() && (HKCodableQuantityReadFrom((uint64_t)v29, a2) & 1) != 0)
        {
          PBReaderRecallMark();

LABEL_92:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 0xBu:
        *(_BYTE *)(a1 + 124) |= 0x20u;
        v31 = *v3;
        v32 = *(_QWORD *)(a2 + v31);
        if (v32 <= 0xFFFFFFFFFFFFFFF7 && v32 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v32);
          *(_QWORD *)(a2 + v31) = v32 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v20 = 0;
        }
        v55 = 48;
        goto LABEL_91;
      case 0xCu:
        *(_BYTE *)(a1 + 124) |= 0x10u;
        v33 = *v3;
        v34 = *(_QWORD *)(a2 + v33);
        if (v34 <= 0xFFFFFFFFFFFFFFF7 && v34 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v34);
          *(_QWORD *)(a2 + v33) = v34 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v20 = 0;
        }
        v55 = 40;
        goto LABEL_91;
      case 0xDu:
        *(_BYTE *)(a1 + 124) |= 4u;
        v35 = *v3;
        v36 = *(_QWORD *)(a2 + v35);
        if (v36 <= 0xFFFFFFFFFFFFFFF7 && v36 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v36);
          *(_QWORD *)(a2 + v35) = v36 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v20 = 0;
        }
        v55 = 24;
        goto LABEL_91;
      case 0xEu:
        v37 = 0;
        v38 = 0;
        v39 = 0;
        *(_BYTE *)(a1 + 124) |= 0x40u;
        while (2)
        {
          v40 = *v3;
          v41 = *(_QWORD *)(a2 + v40);
          v42 = v41 + 1;
          if (v41 == -1 || v42 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v41);
            *(_QWORD *)(a2 + v40) = v42;
            v39 |= (unint64_t)(v43 & 0x7F) << v37;
            if (v43 < 0)
            {
              v37 += 7;
              v15 = v38++ >= 9;
              if (v15)
              {
                v39 = 0;
                goto LABEL_75;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v39 = 0;
LABEL_75:
        v53 = v39 != 0;
        v54 = 120;
        goto LABEL_80;
      case 0xFu:
        v44 = 0;
        v45 = 0;
        v46 = 0;
        *(_BYTE *)(a1 + 124) |= 0x80u;
        while (2)
        {
          v47 = *v3;
          v48 = *(_QWORD *)(a2 + v47);
          v49 = v48 + 1;
          if (v48 == -1 || v49 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v50 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
            *(_QWORD *)(a2 + v47) = v49;
            v46 |= (unint64_t)(v50 & 0x7F) << v44;
            if (v50 < 0)
            {
              v44 += 7;
              v15 = v45++ >= 9;
              if (v15)
              {
                v46 = 0;
                goto LABEL_79;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v46 = 0;
LABEL_79:
        v53 = v46 != 0;
        v54 = 121;
LABEL_80:
        *(_BYTE *)(a1 + v54) = v53;
        goto LABEL_92;
      case 0x10u:
        *(_BYTE *)(a1 + 124) |= 2u;
        v51 = *v3;
        v52 = *(_QWORD *)(a2 + v51);
        if (v52 <= 0xFFFFFFFFFFFFFFF7 && v52 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v52);
          *(_QWORD *)(a2 + v51) = v52 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v20 = 0;
        }
        v55 = 16;
LABEL_91:
        *(_QWORD *)(a1 + v55) = v20;
        goto LABEL_92;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_92;
    }
  }
}

BOOL HKCodableStatisticsCollectionReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  HKCodableDateComponents *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(HKCodableDateComponents);
        objc_storeStrong(a1 + 2, v17);
        if (!PBReaderPlaceMark() || (HKCodableDateComponentsReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(HKCodableStatistics);
    objc_msgSend(a1, "addStatistics:", v17);
    if (!PBReaderPlaceMark() || (HKCodableStatisticsReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HKCodableStatisticsReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  HKCodableQuantity *v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 112) |= 4u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          v23 = v22 + 1;
          if (v22 == -1 || v23 > *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v23;
          v20 |= (unint64_t)(v24 & 0x7F) << v18;
          if ((v24 & 0x80) == 0)
            goto LABEL_64;
          v18 += 7;
          v15 = v19++ >= 9;
          if (v15)
          {
            v20 = 0;
            goto LABEL_66;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_64:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_66:
        v45 = 24;
        goto LABEL_75;
      case 2u:
        *(_BYTE *)(a1 + 112) |= 0x10u;
        v26 = *v3;
        v27 = *(_QWORD *)(a2 + v26);
        if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v28 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v27);
          *(_QWORD *)(a2 + v26) = v27 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v28 = 0;
        }
        v46 = 40;
        goto LABEL_80;
      case 3u:
        *(_BYTE *)(a1 + 112) |= 8u;
        v29 = *v3;
        v30 = *(_QWORD *)(a2 + v29);
        if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v28 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v30);
          *(_QWORD *)(a2 + v29) = v30 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v28 = 0;
        }
        v46 = 32;
LABEL_80:
        *(_QWORD *)(a1 + v46) = v28;
        goto LABEL_81;
      case 4u:
        v31 = objc_alloc_init(HKCodableQuantity);
        v32 = 48;
        goto LABEL_40;
      case 5u:
        v31 = objc_alloc_init(HKCodableQuantity);
        v32 = 80;
        goto LABEL_40;
      case 6u:
        v31 = objc_alloc_init(HKCodableQuantity);
        v32 = 64;
        goto LABEL_40;
      case 7u:
        v31 = objc_alloc_init(HKCodableQuantity);
        v32 = 88;
        goto LABEL_40;
      case 8u:
        v31 = objc_alloc_init(HKCodableQuantity);
        v32 = 104;
        goto LABEL_40;
      case 9u:
        v31 = objc_alloc_init(HKCodableQuantity);
        v32 = 56;
LABEL_40:
        objc_storeStrong((id *)(a1 + v32), v31);
        if (PBReaderPlaceMark() && (HKCodableQuantityReadFrom((uint64_t)v31, a2) & 1) != 0)
          goto LABEL_42;
        goto LABEL_83;
      case 0xAu:
        v33 = 0;
        v34 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 112) |= 2u;
        while (2)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          v37 = v36 + 1;
          if (v36 == -1 || v37 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
            *(_QWORD *)(a2 + v35) = v37;
            v20 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v15 = v34++ >= 9;
              if (v15)
              {
                v20 = 0;
                goto LABEL_70;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_70:
        v45 = 16;
        goto LABEL_75;
      case 0xBu:
        v31 = objc_alloc_init(HKCodableDateComponents);
        objc_storeStrong((id *)(a1 + 96), v31);
        if (!PBReaderPlaceMark() || (HKCodableDateComponentsReadFrom((uint64_t)v31, a2) & 1) == 0)
          goto LABEL_83;
        goto LABEL_42;
      case 0xCu:
        v39 = 0;
        v40 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 112) |= 1u;
        while (2)
        {
          v41 = *v3;
          v42 = *(_QWORD *)(a2 + v41);
          v43 = v42 + 1;
          if (v42 == -1 || v43 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
            *(_QWORD *)(a2 + v41) = v43;
            v20 |= (unint64_t)(v44 & 0x7F) << v39;
            if (v44 < 0)
            {
              v39 += 7;
              v15 = v40++ >= 9;
              if (v15)
              {
                v20 = 0;
                goto LABEL_74;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_74:
        v45 = 8;
LABEL_75:
        *(_QWORD *)(a1 + v45) = v20;
        goto LABEL_81;
      case 0xDu:
        v31 = objc_alloc_init(HKCodableMetadataDictionary);
        objc_storeStrong((id *)(a1 + 72), v31);
        if (PBReaderPlaceMark() && (HKCodableMetadataDictionaryReadFrom(v31, a2) & 1) != 0)
        {
LABEL_42:
          PBReaderRecallMark();

LABEL_81:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_83:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_81;
    }
  }
}

uint64_t HKCodableQuantityReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadString();
        v21 = objc_claimAutoreleasedReturnValue();
        v22 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v21;

      }
      else if ((v10 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v18 = *v3;
        v19 = *(_QWORD *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
          *(_QWORD *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v20 = 0;
        }
        *(_QWORD *)(a1 + 8) = v20;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HKCodableSummaryCurrentValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  HKCodableSummarySupplementaryValue *v20;
  void *v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 56;
        goto LABEL_27;
      case 2u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 24;
        goto LABEL_27;
      case 3u:
        v20 = objc_alloc_init(HKCodableSummarySupplementaryValue);
        objc_storeStrong((id *)(a1 + 48), v20);
        if (!PBReaderPlaceMark()
          || (HKCodableSummarySupplementaryValueReadFrom((uint64_t)v20, a2) & 1) == 0)
        {
          goto LABEL_56;
        }
        goto LABEL_30;
      case 4u:
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 40;
LABEL_27:
        v21 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_54;
      case 5u:
        v20 = objc_alloc_init(HKCodableMetadataDictionary);
        objc_storeStrong((id *)(a1 + 32), v20);
        if (PBReaderPlaceMark() && (HKCodableMetadataDictionaryReadFrom(v20, a2) & 1) != 0)
        {
LABEL_30:
          PBReaderRecallMark();

LABEL_54:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_56:

        return 0;
      case 6u:
        v22 = 0;
        v23 = 0;
        v24 = 0;
        *(_BYTE *)(a1 + 64) |= 1u;
        while (2)
        {
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          if (v26 == -1 || v26 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v26);
            *(_QWORD *)(a2 + v25) = v26 + 1;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if (v27 < 0)
            {
              v22 += 7;
              v14 = v23++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_48;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v24 = 0;
LABEL_48:
        v33 = 8;
        goto LABEL_53;
      case 7u:
        v28 = 0;
        v29 = 0;
        v24 = 0;
        *(_BYTE *)(a1 + 64) |= 2u;
        while (2)
        {
          v30 = *v3;
          v31 = *(_QWORD *)(a2 + v30);
          if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
            *(_QWORD *)(a2 + v30) = v31 + 1;
            v24 |= (unint64_t)(v32 & 0x7F) << v28;
            if (v32 < 0)
            {
              v28 += 7;
              v14 = v29++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v24 = 0;
LABEL_52:
        v33 = 16;
LABEL_53:
        *(_QWORD *)(a1 + v33) = v24;
        goto LABEL_54;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_54;
    }
  }
}

uint64_t HKCodableSummarySupplementaryValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  HKCodableDateInterval *v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_33;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v20 = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_35:
        *(_QWORD *)(a1 + 8) = v20;
      }
      else if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(HKCodableDateInterval);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || !HKCodableDateIntervalReadFrom((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HKCodableChartSharableModelReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  HKCodableChartDataSourceQueryData *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(HKCodableChartDataSourceQueryData);
        v18 = 40;
        goto LABEL_42;
      case 2u:
        v17 = objc_alloc_init(HKCodableDateInterval);
        v20 = 48;
        goto LABEL_46;
      case 3u:
        v17 = objc_alloc_init(HKCodableChartDataSourceQueryData);
        v18 = 56;
        goto LABEL_42;
      case 4u:
        v17 = objc_alloc_init(HKCodableDateInterval);
        v20 = 64;
        goto LABEL_46;
      case 5u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 88) |= 1u;
        while (2)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              v14 = v22++ >= 9;
              if (v14)
              {
                v23 = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
LABEL_52:
        v32 = 8;
        goto LABEL_57;
      case 6u:
        v27 = 0;
        v28 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 88) |= 2u;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v23 |= (unint64_t)(v31 & 0x7F) << v27;
            if (v31 < 0)
            {
              v27 += 7;
              v14 = v28++ >= 9;
              if (v14)
              {
                v23 = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
LABEL_56:
        v32 = 16;
LABEL_57:
        *(_QWORD *)(a1 + v32) = v23;
        goto LABEL_58;
      case 7u:
        v17 = objc_alloc_init(HKCodableChartDataSourceQueryData);
        v18 = 72;
        goto LABEL_42;
      case 8u:
        v17 = objc_alloc_init(HKCodableDateInterval);
        v20 = 80;
        goto LABEL_46;
      case 9u:
        v17 = objc_alloc_init(HKCodableChartDataSourceQueryData);
        v18 = 24;
LABEL_42:
        objc_storeStrong((id *)(a1 + v18), v17);
        if (!PBReaderPlaceMark()
          || (HKCodableChartDataSourceQueryDataReadFrom((uint64_t)v17, a2) & 1) == 0)
        {
          goto LABEL_60;
        }
        goto LABEL_48;
      case 0xAu:
        v17 = objc_alloc_init(HKCodableDateInterval);
        v20 = 32;
LABEL_46:
        objc_storeStrong((id *)(a1 + v20), v17);
        if (PBReaderPlaceMark() && HKCodableDateIntervalReadFrom((uint64_t)v17, a2))
        {
LABEL_48:
          PBReaderRecallMark();

LABEL_58:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_60:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_58;
    }
  }
}

BOOL HKCodableDateIntervalReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int *v23;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        v18 = *v3;
        v19 = *(_QWORD *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
          *(_QWORD *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v20 = 0;
        }
        v23 = &OBJC_IVAR___HKCodableDateInterval__startDate;
LABEL_32:
        *(_QWORD *)(a1 + *v23) = v20;
        goto LABEL_33;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_33:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    *(_BYTE *)(a1 + 24) |= 1u;
    v21 = *v3;
    v22 = *(_QWORD *)(a2 + v21);
    if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
    {
      v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v22);
      *(_QWORD *)(a2 + v21) = v22 + 8;
    }
    else
    {
      *(_BYTE *)(a2 + *v5) = 1;
      v20 = 0;
    }
    v23 = &OBJC_IVAR___HKCodableDateInterval__endDate;
    goto LABEL_32;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HKCodableChartDataSourceQueryDataReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  HKCodableDateComponents *v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 48;
        goto LABEL_23;
      case 2u:
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 32;
LABEL_23:
        v21 = *(void **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;

        goto LABEL_60;
      case 3u:
        *(_BYTE *)(a1 + 60) |= 4u;
        v22 = *v3;
        v23 = *(_QWORD *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v24 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v24 = 0;
        }
        v42 = 24;
        goto LABEL_59;
      case 4u:
        *(_BYTE *)(a1 + 60) |= 1u;
        v25 = *v3;
        v26 = *(_QWORD *)(a2 + v25);
        if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v24 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v26);
          *(_QWORD *)(a2 + v25) = v26 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v24 = 0;
        }
        v42 = 8;
LABEL_59:
        *(_QWORD *)(a1 + v42) = v24;
        goto LABEL_60;
      case 5u:
        v27 = objc_alloc_init(HKCodableDateComponents);
        objc_storeStrong((id *)(a1 + 40), v27);
        if (PBReaderPlaceMark() && (HKCodableDateComponentsReadFrom((uint64_t)v27, a2) & 1) != 0)
        {
          PBReaderRecallMark();

LABEL_60:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 6u:
        v28 = 0;
        v29 = 0;
        v30 = 0;
        *(_BYTE *)(a1 + 60) |= 8u;
        while (2)
        {
          v31 = *v3;
          v32 = *(_QWORD *)(a2 + v31);
          v33 = v32 + 1;
          if (v32 == -1 || v33 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
            *(_QWORD *)(a2 + v31) = v33;
            v30 |= (unint64_t)(v34 & 0x7F) << v28;
            if (v34 < 0)
            {
              v28 += 7;
              v15 = v29++ >= 9;
              if (v15)
              {
                LODWORD(v30) = 0;
                goto LABEL_50;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v30) = 0;
LABEL_50:
        *(_DWORD *)(a1 + 56) = v30;
        goto LABEL_60;
      case 7u:
        v35 = 0;
        v36 = 0;
        v37 = 0;
        *(_BYTE *)(a1 + 60) |= 2u;
        while (2)
        {
          v38 = *v3;
          v39 = *(_QWORD *)(a2 + v38);
          v40 = v39 + 1;
          if (v39 == -1 || v40 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v39);
            *(_QWORD *)(a2 + v38) = v40;
            v37 |= (unint64_t)(v41 & 0x7F) << v35;
            if (v41 < 0)
            {
              v35 += 7;
              v15 = v36++ >= 9;
              if (v15)
              {
                v37 = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v37 = 0;
LABEL_54:
        *(_QWORD *)(a1 + 16) = v37;
        goto LABEL_60;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_60;
    }
  }
}

uint64_t HKCodableDateComponentsReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  char v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_WORD *)(a1 + 136) |= 2u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_123;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_125;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_123:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_125:
          v92 = 16;
          goto LABEL_178;
        case 2u:
          v24 = 0;
          v25 = 0;
          v19 = 0;
          *(_WORD *)(a1 + 136) |= 0x1000u;
          while (2)
          {
            v26 = *v3;
            v27 = *(_QWORD *)(a2 + v26);
            if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
              *(_QWORD *)(a2 + v26) = v27 + 1;
              v19 |= (unint64_t)(v28 & 0x7F) << v24;
              if (v28 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_129;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_129:
          v92 = 104;
          goto LABEL_178;
        case 3u:
          v29 = 0;
          v30 = 0;
          v19 = 0;
          *(_WORD *)(a1 + 136) |= 0x10u;
          while (2)
          {
            v31 = *v3;
            v32 = *(_QWORD *)(a2 + v31);
            if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
              *(_QWORD *)(a2 + v31) = v32 + 1;
              v19 |= (unint64_t)(v33 & 0x7F) << v29;
              if (v33 < 0)
              {
                v29 += 7;
                v14 = v30++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_133;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_133:
          v92 = 40;
          goto LABEL_178;
        case 4u:
          v34 = 0;
          v35 = 0;
          v19 = 0;
          *(_WORD *)(a1 + 136) |= 1u;
          while (2)
          {
            v36 = *v3;
            v37 = *(_QWORD *)(a2 + v36);
            if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
              *(_QWORD *)(a2 + v36) = v37 + 1;
              v19 |= (unint64_t)(v38 & 0x7F) << v34;
              if (v38 < 0)
              {
                v34 += 7;
                v14 = v35++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_137;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_137:
          v92 = 8;
          goto LABEL_178;
        case 5u:
          v39 = 0;
          v40 = 0;
          v19 = 0;
          *(_WORD *)(a1 + 136) |= 4u;
          while (2)
          {
            v41 = *v3;
            v42 = *(_QWORD *)(a2 + v41);
            if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
              *(_QWORD *)(a2 + v41) = v42 + 1;
              v19 |= (unint64_t)(v43 & 0x7F) << v39;
              if (v43 < 0)
              {
                v39 += 7;
                v14 = v40++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_141;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_141:
          v92 = 24;
          goto LABEL_178;
        case 6u:
          v44 = 0;
          v45 = 0;
          v19 = 0;
          *(_WORD *)(a1 + 136) |= 8u;
          while (2)
          {
            v46 = *v3;
            v47 = *(_QWORD *)(a2 + v46);
            if (v47 == -1 || v47 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v48 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v47);
              *(_QWORD *)(a2 + v46) = v47 + 1;
              v19 |= (unint64_t)(v48 & 0x7F) << v44;
              if (v48 < 0)
              {
                v44 += 7;
                v14 = v45++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_145;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_145:
          v92 = 32;
          goto LABEL_178;
        case 7u:
          v49 = 0;
          v50 = 0;
          v19 = 0;
          *(_WORD *)(a1 + 136) |= 0x80u;
          while (2)
          {
            v51 = *v3;
            v52 = *(_QWORD *)(a2 + v51);
            if (v52 == -1 || v52 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v53 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v52);
              *(_QWORD *)(a2 + v51) = v52 + 1;
              v19 |= (unint64_t)(v53 & 0x7F) << v49;
              if (v53 < 0)
              {
                v49 += 7;
                v14 = v50++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_149;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_149:
          v92 = 64;
          goto LABEL_178;
        case 8u:
          v54 = 0;
          v55 = 0;
          v19 = 0;
          *(_WORD *)(a1 + 136) |= 0x400u;
          while (2)
          {
            v56 = *v3;
            v57 = *(_QWORD *)(a2 + v56);
            if (v57 == -1 || v57 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v58 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v57);
              *(_QWORD *)(a2 + v56) = v57 + 1;
              v19 |= (unint64_t)(v58 & 0x7F) << v54;
              if (v58 < 0)
              {
                v54 += 7;
                v14 = v55++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_153;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_153:
          v92 = 88;
          goto LABEL_178;
        case 9u:
          v59 = 0;
          v60 = 0;
          v19 = 0;
          *(_WORD *)(a1 + 136) |= 0x800u;
          while (2)
          {
            v61 = *v3;
            v62 = *(_QWORD *)(a2 + v61);
            if (v62 == -1 || v62 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v63 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v62);
              *(_QWORD *)(a2 + v61) = v62 + 1;
              v19 |= (unint64_t)(v63 & 0x7F) << v59;
              if (v63 < 0)
              {
                v59 += 7;
                v14 = v60++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_157;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_157:
          v92 = 96;
          goto LABEL_178;
        case 0xAu:
          v64 = 0;
          v65 = 0;
          v19 = 0;
          *(_WORD *)(a1 + 136) |= 0x40u;
          while (2)
          {
            v66 = *v3;
            v67 = *(_QWORD *)(a2 + v66);
            if (v67 == -1 || v67 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v68 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v67);
              *(_QWORD *)(a2 + v66) = v67 + 1;
              v19 |= (unint64_t)(v68 & 0x7F) << v64;
              if (v68 < 0)
              {
                v64 += 7;
                v14 = v65++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_161;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_161:
          v92 = 56;
          goto LABEL_178;
        case 0xBu:
          v69 = 0;
          v70 = 0;
          v19 = 0;
          *(_WORD *)(a1 + 136) |= 0x100u;
          while (2)
          {
            v71 = *v3;
            v72 = *(_QWORD *)(a2 + v71);
            if (v72 == -1 || v72 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v73 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v72);
              *(_QWORD *)(a2 + v71) = v72 + 1;
              v19 |= (unint64_t)(v73 & 0x7F) << v69;
              if (v73 < 0)
              {
                v69 += 7;
                v14 = v70++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_165;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_165:
          v92 = 72;
          goto LABEL_178;
        case 0xCu:
          v74 = 0;
          v75 = 0;
          v19 = 0;
          *(_WORD *)(a1 + 136) |= 0x200u;
          while (2)
          {
            v76 = *v3;
            v77 = *(_QWORD *)(a2 + v76);
            if (v77 == -1 || v77 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v78 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v77);
              *(_QWORD *)(a2 + v76) = v77 + 1;
              v19 |= (unint64_t)(v78 & 0x7F) << v74;
              if (v78 < 0)
              {
                v74 += 7;
                v14 = v75++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_169;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_169:
          v92 = 80;
          goto LABEL_178;
        case 0xDu:
          v79 = 0;
          v80 = 0;
          v19 = 0;
          *(_WORD *)(a1 + 136) |= 0x2000u;
          while (2)
          {
            v81 = *v3;
            v82 = *(_QWORD *)(a2 + v81);
            if (v82 == -1 || v82 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v83 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v82);
              *(_QWORD *)(a2 + v81) = v82 + 1;
              v19 |= (unint64_t)(v83 & 0x7F) << v79;
              if (v83 < 0)
              {
                v79 += 7;
                v14 = v80++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_173;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_173:
          v92 = 112;
          goto LABEL_178;
        case 0xEu:
          v84 = 0;
          v85 = 0;
          v19 = 0;
          *(_WORD *)(a1 + 136) |= 0x20u;
          break;
        case 0xFu:
          PBReaderReadString();
          v89 = objc_claimAutoreleasedReturnValue();
          v90 = 120;
          goto LABEL_121;
        case 0x10u:
          PBReaderReadString();
          v89 = objc_claimAutoreleasedReturnValue();
          v90 = 128;
LABEL_121:
          v91 = *(void **)(a1 + v90);
          *(_QWORD *)(a1 + v90) = v89;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v86 = *v3;
        v87 = *(_QWORD *)(a2 + v86);
        if (v87 == -1 || v87 >= *(_QWORD *)(a2 + *v4))
          break;
        v88 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v87);
        *(_QWORD *)(a2 + v86) = v87 + 1;
        v19 |= (unint64_t)(v88 & 0x7F) << v84;
        if ((v88 & 0x80) == 0)
          goto LABEL_175;
        v84 += 7;
        v14 = v85++ >= 9;
        if (v14)
        {
          v19 = 0;
          goto LABEL_177;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_175:
      if (*(_BYTE *)(a2 + *v5))
        v19 = 0;
LABEL_177:
      v92 = 48;
LABEL_178:
      *(_QWORD *)(a1 + v92) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HKCodableMetadataDictionaryReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  HKCodableMetadataKeyValuePair *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(HKCodableMetadataKeyValuePair);
        objc_msgSend(a1, "addKeyValuePairs:", v17);
        if (!PBReaderPlaceMark() || (HKCodableMetadataKeyValuePairReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HKCodableMetadataKeyValuePairReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  void *v26;
  HKCodableQuantity *v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 16;
        goto LABEL_30;
      case 2u:
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 40) |= 1u;
        while (2)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              v14 = v21++ >= 9;
              if (v14)
              {
                v22 = 0;
                goto LABEL_37;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v22 = 0;
LABEL_37:
        *(_QWORD *)(a1 + 8) = v22;
        goto LABEL_38;
      case 3u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 32;
LABEL_30:
        v26 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_38;
      case 4u:
        v27 = objc_alloc_init(HKCodableQuantity);
        objc_storeStrong((id *)(a1 + 24), v27);
        if (PBReaderPlaceMark() && (HKCodableQuantityReadFrom((uint64_t)v27, a2) & 1) != 0)
        {
          PBReaderRecallMark();

LABEL_38:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_38;
    }
  }
}

double HKUIOnePixel()
{
  double result;
  void *v1;
  double v2;

  result = *(double *)&HKUIOnePixel___onePixel;
  if (*(double *)&HKUIOnePixel___onePixel == 2.22507386e-308)
  {
    objc_msgSend(MEMORY[0x1E0DC3BF8], "mainScreen", *(double *)&HKUIOnePixel___onePixel);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "scale");
    *(double *)&HKUIOnePixel___onePixel = 1.0 / v2;

    return *(double *)&HKUIOnePixel___onePixel;
  }
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_0(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

id HKGenerateDateRangeForCharts(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;

  v5 = a1;
  v6 = a3;
  v7 = v5;
  v8 = v6;
  v9 = a2 - 2;
  switch(a2)
  {
    case 2:
      objc_msgSend(v7, "startOfRollingYear:", v8);
      v10 = objc_claimAutoreleasedReturnValue();
      goto LABEL_7;
    case 3:
    case 5:
      objc_msgSend(v7, "startOfRollingWeek:", v8);
      v10 = objc_claimAutoreleasedReturnValue();
      goto LABEL_7;
    case 4:
      objc_msgSend(v7, "startOfRollingMonth:", v8);
      v10 = objc_claimAutoreleasedReturnValue();
      goto LABEL_7;
    case 6:
      objc_msgSend(v7, "startOfRollingDay:", v8);
      v10 = objc_claimAutoreleasedReturnValue();
LABEL_7:
      v11 = (void *)v10;
      break;
    default:
      v11 = 0;
      break;
  }

  v12 = v7;
  v13 = v8;
  switch(v9)
  {
    case 0:
      objc_msgSend(v12, "endOfRollingYear:", v13);
      v14 = objc_claimAutoreleasedReturnValue();
      goto LABEL_14;
    case 1:
    case 3:
      objc_msgSend(v12, "endOfRollingWeek:", v13);
      v14 = objc_claimAutoreleasedReturnValue();
      goto LABEL_14;
    case 2:
      objc_msgSend(v12, "endOfRollingMonth:", v13);
      v14 = objc_claimAutoreleasedReturnValue();
      goto LABEL_14;
    case 4:
      objc_msgSend(v12, "endOfRollingDay:", v13);
      v14 = objc_claimAutoreleasedReturnValue();
LABEL_14:
      v15 = (void *)v14;
      break;
    default:
      v15 = 0;
      break;
  }

  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v11, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  return v16;
}

id HKEndOfRollingYearWithStart(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;

  v1 = (void *)MEMORY[0x1E0C99D48];
  v2 = a1;
  objc_msgSend(v1, "currentCalendar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "dateByAddingUnit:value:toDate:options:", 4, 1, v2, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_1D782E214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id HKEndOfRollingWeekWithStart(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;

  v1 = (void *)MEMORY[0x1E0C99D48];
  v2 = a1;
  objc_msgSend(v1, "currentCalendar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "dateByAddingUnit:value:toDate:options:", 16, 7, v2, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id HKStartOfRollingMonthForDate(void *a1, void *a2)
{
  void *v3;
  void (**v4)(id, void *, void *);
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v3 = (void *)MEMORY[0x1E0C99D48];
  v4 = a2;
  v5 = a1;
  objc_msgSend(v3, "currentCalendar");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  HKCalendarDateTransformNone();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  HKStartOfRollingDayForDate(v5, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "hk_dateBySubtractingDays:fromDate:", 30, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v4[2](v4, v6, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

id HKStartOfRollingWeekForDate(void *a1, void *a2)
{
  void *v3;
  void (**v4)(id, void *, void *);
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v3 = (void *)MEMORY[0x1E0C99D48];
  v4 = a2;
  v5 = a1;
  objc_msgSend(v3, "currentCalendar");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  HKCalendarDateTransformNone();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  HKStartOfRollingDayForDate(v5, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "hk_dateBySubtractingDays:fromDate:", 6, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v4[2](v4, v6, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

id HKStartOfRollingDayForDate(void *a1, void *a2)
{
  void *v3;
  void (**v4)(id, void *, void *);
  id v5;
  void *v6;
  void *v7;
  void *v8;

  v3 = (void *)MEMORY[0x1E0C99D48];
  v4 = a2;
  v5 = a1;
  objc_msgSend(v3, "currentCalendar");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "startOfDayForDate:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v4[2](v4, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

id HKEndOfRollingMonthWithStart(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;

  v1 = (void *)MEMORY[0x1E0C99D48];
  v2 = a1;
  objc_msgSend(v1, "currentCalendar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "dateByAddingUnit:value:toDate:options:", 16, 31, v2, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id HKUIDynamicColorWithColors(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  _QWORD v10[4];
  id v11;
  id v12;

  v3 = a1;
  v4 = a2;
  v5 = (void *)MEMORY[0x1E0DC3658];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __HKUIDynamicColorWithColors_block_invoke;
  v10[3] = &unk_1E9C44798;
  v11 = v4;
  v12 = v3;
  v6 = v3;
  v7 = v4;
  objc_msgSend(v5, "colorWithDynamicProvider:", v10);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

id HKLocalizedStringWithEnergy()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;

  v0 = _HKWorkoutFlooredValueForQuantity();
  HKActiveEnergyIntegerNumberFormatter();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "stringFromNumber:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id HKActiveEnergyIntegerNumberFormatter()
{
  if (HKActiveEnergyIntegerNumberFormatter_onceToken != -1)
    dispatch_once(&HKActiveEnergyIntegerNumberFormatter_onceToken, &__block_literal_global_270);
  return (id)HKActiveEnergyIntegerNumberFormatter___integerNumberFormatter;
}

id HKUILocalizedString(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;

  v1 = (void *)MEMORY[0x1E0CB34D0];
  v2 = a1;
  objc_msgSend(v1, "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "localizedStringForKey:value:table:", v2, &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

HKDisplayType *HKDisplayTypeIdentifierSleepAnalysisMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  HKDisplayType *v14;
  uint64_t v16;
  uint64_t v17;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 6);
  BYTE2(v16) = 0;
  LOWORD(v16) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 1, 1, 0, 0, 1, v16);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 0, 0, 0, 0);
  LOBYTE(v17) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 1, 1, 0, 0, 1.0, v17, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SLEEP_ANALYSIS"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 63);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)MEMORY[0x1E0CB6A78];
  v10 = objc_alloc(MEMORY[0x1E0C99E60]);
  _HKCategoryValueSleepAnalysisAsleepValues();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend(v10, "initWithArray:", v11);
  objc_msgSend(v9, "predicateForCategorySamplesEqualToValues:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 63, 5, &unk_1E9CEA1C0, v8, v1, v5, v6, v0, v13, 0);

  return v14;
}

HKDisplayType *HKDisplayTypeIdentifierWorkoutMake()
{
  HKDisplayTypeChartingRules *v0;
  void *v1;
  void *v2;
  HKDisplayTypeBehavior *v3;
  HKDisplayTypePresentation *v4;
  HKDisplayTypePresentationConfiguration *v5;
  HKDisplayTypePresentationConfiguration *v6;
  void *v7;
  HKDisplayTypePresentation *v8;
  HKDisplayTypeLocalization *v9;
  HKDisplayTypeLocalization *v10;
  HKDisplayType *v11;
  void *v12;
  HKDisplayType *v13;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  -[HKDisplayTypeChartingRules setChartStyle:forTimeScope:](v0, "setChartStyle:forTimeScope:", 5, 6);
  -[HKDisplayTypeChartingRules setLineChartUsesValueAxisAnnotation:forTimeScope:](v0, "setLineChartUsesValueAxisAnnotation:forTimeScope:", 0, 6);
  -[HKDisplayTypeChartingRules setLineChartExtendLastValue:forTimeScope:](v0, "setLineChartExtendLastValue:forTimeScope:", 0, 6);
  -[HKDisplayTypeChartingRules setLineChartFlatLastValue:forTimeScope:](v0, "setLineChartFlatLastValue:forTimeScope:", 0, 6);
  -[HKDisplayTypeChartingRules setLineChartExtendFirstValue:forTimeScope:](v0, "setLineChartExtendFirstValue:forTimeScope:", 0, 6);
  -[HKDisplayTypeChartingRules setLineChartUsesPointMarkerImage:forTimeScope:](v0, "setLineChartUsesPointMarkerImage:forTimeScope:", 1, 6);
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", &unk_1E9CED5E8, &unk_1E9CED5F8);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKNumericFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:noDataAxisBounds:](HKNumericFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:noDataAxisBounds:", v1, 0, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v2);

  BYTE2(v15) = 0;
  LOWORD(v15) = 257;
  v3 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v15);
  v4 = [HKDisplayTypePresentation alloc];
  v5 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 3, 2, 7, 0);
  v17 = &unk_1E9CECC68;
  v6 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 3, 0, 6, 0);
  v18[0] = v6;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v18, &v17, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v16) = 0;
  v8 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v4, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v5, v7, 0, 0, 0, 0, 1.0, v16, 0, 0, 0);

  v9 = [HKDisplayTypeLocalization alloc];
  v10 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v9, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("WORKOUT"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v11 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 79);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v11, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 79, 2, MEMORY[0x1E0C9AA60], v12, v3, v8, v10, v0, 0, 0);

  return v13;
}

HKDisplayType *HKDisplayTypeIdentifierWheezingMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_WHEEZING"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 223);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 223, 26, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierWheelchairUseMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 0, 0, 0, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("WHEELCHAIR_USE"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 103);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 103, 7, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierWheelchairDistanceMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mi"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mi"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 0.1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 1, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("WHEELCHAIR_DISTANCE"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 113);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 113, 2, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierWalkingStepLengthMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HKDisplayTypeBehavior *v9;
  HKDisplayTypePresentation *v10;
  HKDisplayTypePresentationConfiguration *v11;
  uint64_t v12;
  HKDisplayTypePresentation *v13;
  HKDisplayTypeLocalization *v14;
  HKDisplayType *v15;
  void *v16;
  HKDisplayType *v17;
  uint64_t v19;
  uint64_t v20;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 9, 18, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.01);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 0.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v4, v7, 0, 0, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v8);

  BYTE2(v19) = 0;
  LOWORD(v19) = 256;
  v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v19);
  v10 = [HKDisplayTypePresentation alloc];
  v11 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 1, 1, 0);
  LOBYTE(v20) = 0;
  v12 = MEMORY[0x1E0C9AA70];
  v13 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v10, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v11, MEMORY[0x1E0C9AA70], 1, 0, 0, 0, 1.0, v20, 0, 0, 0);

  v14 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("WALKING_STEP_LENGTH"), 0, 0, 0, v12);
  v15 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 188);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v15, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 188, 23, MEMORY[0x1E0C9AA60], v16, v9, v13, v14, v0, 0, 0);

  return v17;
}

HKDisplayType *HKDisplayTypeIdentifierWalkingSpeedMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HKDisplayTypeBehavior *v9;
  HKDisplayTypePresentation *v10;
  HKDisplayTypePresentationConfiguration *v11;
  uint64_t v12;
  HKDisplayTypePresentation *v13;
  HKDisplayTypeLocalization *v14;
  HKDisplayType *v15;
  void *v16;
  HKDisplayType *v17;
  uint64_t v19;
  uint64_t v20;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 9, 18, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m/s"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m/s"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 0.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v4, v7, 0, 0, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v8);

  BYTE2(v19) = 0;
  LOWORD(v19) = 256;
  v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v19);
  v10 = [HKDisplayTypePresentation alloc];
  v11 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 1, 1, 0);
  LOBYTE(v20) = 0;
  v12 = MEMORY[0x1E0C9AA70];
  v13 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v10, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v11, MEMORY[0x1E0C9AA70], 1, 0, 0, 0, 1.0, v20, 0, 0, 0);

  v14 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("WALKING_SPEED"), 0, 0, 0, v12);
  v15 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 187);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v15, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 187, 23, MEMORY[0x1E0C9AA60], v16, v9, v13, v14, v0, 0, 0);

  return v17;
}

HKDisplayType *HKDisplayTypeIdentifierWalkingDoubleSupportPercentageMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  HKDisplayTypeBehavior *v12;
  HKDisplayTypePresentation *v13;
  HKDisplayTypePresentationConfiguration *v14;
  uint64_t v15;
  HKDisplayTypePresentation *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 9, 3, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("%"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 1.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("%"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 0.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("%"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "quantityWithUnit:doubleValue:", v9, 100.0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v4, v7, v10, 0, 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v11);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v12 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v13 = [HKDisplayTypePresentation alloc];
  v14 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 1, 1, 0);
  LOBYTE(v23) = 0;
  v15 = MEMORY[0x1E0C9AA70];
  v16 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v13, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v14, MEMORY[0x1E0C9AA70], 1, 0, 0, 0, 100.0, v23, 0, 0, 0);

  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("WALKING_DOUBLE_SUPPORT_PERCENTAGE"), 0, 0, 0, v15);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 182);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 182, 23, MEMORY[0x1E0C9AA60], v19, v12, v16, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierWalkingAsymmetryPercentageMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  uint64_t v13;
  HKDisplayTypePresentation *v14;
  HKDisplayTypeLocalization *v15;
  HKDisplayType *v16;
  void *v17;
  HKDisplayType *v18;
  uint64_t v20;
  uint64_t v21;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 1, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("%"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("%"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 100.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v20) = 0;
  LOWORD(v20) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v20);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 0, 0, 3, 0);
  LOBYTE(v21) = 0;
  v13 = MEMORY[0x1E0C9AA70];
  v14 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, MEMORY[0x1E0C9AA70], 1, 0, 0, 0, 100.0, v21, 0, 0, 0);

  v15 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("WALKING_ASYMMETRY_PERCENTAGE"), 0, 0, 0, v13);
  v16 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 194);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v16, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 194, 23, MEMORY[0x1E0C9AA60], v17, v10, v14, v15, v0, 0, 0);

  return v18;
}

HKDisplayType *HKDisplayTypeIdentifierWaistCircumferenceMake()
{
  HKDisplayTypeChartingRules *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  HKDisplayTypeBehavior *v8;
  HKDisplayTypePresentation *v9;
  HKDisplayTypePresentationConfiguration *v10;
  uint64_t v11;
  HKDisplayTypePresentation *v12;
  HKDisplayTypeLocalization *v13;
  HKDisplayType *v14;
  void *v15;
  HKDisplayType *v16;
  uint64_t v18;
  uint64_t v19;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  v1 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("cm"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "quantityWithUnit:doubleValue:", v2, 5.0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("cm"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "quantityWithUnit:doubleValue:", v5, 0.0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v3, v6, 0, 0, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v7);

  BYTE2(v18) = 0;
  LOWORD(v18) = 256;
  v8 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v18);
  v9 = [HKDisplayTypePresentation alloc];
  v10 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 2, 3, 0);
  LOBYTE(v19) = 0;
  v11 = MEMORY[0x1E0C9AA70];
  v12 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v9, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v10, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v19, 0, 0, 0);

  v13 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("WAIST_CIRCUMFERENCE"), 0, 0, 0, v11);
  v14 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 114);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v14, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 114, 6, MEMORY[0x1E0C9AA60], v15, v8, v12, v13, v0, 0, 0);

  return v16;
}

HKDisplayType *HKDisplayTypeIdentifierVomitingMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_VOMITING"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 220);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 220, 26, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierVitalSignRecordMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 0, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 0, 0, 0, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, CFSTR("health_records_vitals"), 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("VITAL_SIGN_RECORDS"), 0, CFSTR("Localizable-Clinical-Health-Records"), 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 155);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 155, 17, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierVisionPrescriptionMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 0, 0, 0, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("VISION_PRESCRIPTION"), 0, CFSTR("Localizable-VRX"), 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 257);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 257, 6, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierVaginalDrynessMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_VAGINAL_DRYNESS"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 229);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 229, 26, &unk_1E9CEA3E8, v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierVO2MaxMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HKDisplayTypeBehavior *v9;
  HKDisplayTypeSummaryAttribution *v10;
  void *v11;
  void *v12;
  HKDisplayTypeSummaryAttribution *v13;
  HKDisplayTypePresentation *v14;
  HKDisplayTypePresentationConfiguration *v15;
  HKDisplayTypePresentation *v16;
  HKDisplayTypeLocalization *v17;
  void *v18;
  void *v19;
  void *v20;
  HKDisplayTypeLocalization *v21;
  HKDisplayType *v22;
  void *v23;
  HKDisplayType *v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  _QWORD v29[3];
  void *v30;
  _QWORD v31[2];

  v31[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 4);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 1);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("ml/(kg*min)"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 16.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("ml/(kg*min)"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 0.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v4, v7, 0, 0, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v8);

  BYTE2(v26) = 0;
  LOWORD(v26) = 256;
  v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v26);
  v10 = [HKDisplayTypeSummaryAttribution alloc];
  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "localizedStringForKey:value:table:", CFSTR("CARDIO_FITNESS_SUMMARY_ATTRIBUTION"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable-CardioFitness"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = -[HKDisplayTypeSummaryAttribution initWithAttribution:urlAttribute:primaryProfileOnly:](v10, "initWithAttribution:urlAttribute:primaryProfileOnly:", v12, CFSTR("x-apple-health://HealthProfile/CurrentContext"), 1);

  v14 = [HKDisplayTypePresentation alloc];
  v15 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 2, 3, 0);
  LOBYTE(v27) = 0;
  v16 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v14, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v15, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v27, 0, 0, v13);

  v17 = [HKDisplayTypeLocalization alloc];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("ml/(kg*min)"));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v28[0] = &unk_1E9CECC50;
  v28[1] = &unk_1E9CECC98;
  v29[0] = CFSTR("CARDIO_FITNESS");
  v29[1] = CFSTR("CARDIO_FITNESS_PREFERENCES");
  v28[2] = &unk_1E9CECCC8;
  v29[2] = CFSTR("CARDIO_FITNESS_SAMPLE_DETAILS");
  v30 = v18;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v29, v28, 3);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v31[0] = v19;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v31, &v30, 1);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v17, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("CARDIO_FITNESS"), 0, CFSTR("Localizable-CardioFitness"), 0, v20);

  v22 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 124);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v22, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 124, 11, &unk_1E9CEA250, v23, v9, v16, v21, v0, 0, 0);

  return v24;
}

HKDisplayType *HKDisplayTypeIdentifierUnderwaterDepthMake()
{
  void *v0;
  HKStaticDecimalPrecisionRule *v1;
  void *v2;
  HKStaticDecimalPrecisionRule *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  HKRemoteChartConfiguration *v17;
  void *v18;
  void *v19;
  HKRemoteChartConfiguration *v20;
  HKDisplayTypeBehavior *v21;
  HKDisplayTypePresentation *v22;
  HKDisplayTypePresentationConfiguration *v23;
  uint64_t v24;
  HKDisplayTypePresentation *v25;
  HKDisplayTypeLocalization *v26;
  HKDisplayType *v27;
  void *v28;
  HKDisplayType *v29;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  HKDisplayTypeChartingRules *v35;
  void *v36;
  void *v37;
  void *v38;
  _QWORD v39[2];
  _QWORD v40[3];

  v40[2] = *MEMORY[0x1E0C80C00];
  v35 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 3, 6, 6);
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("ft"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v39[0] = v0;
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  v40[0] = v1;
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v39[1] = v2;
  v3 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 1);
  v40[1] = v3;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v40, v39, 2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v35, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", 0, v4);

  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m"));
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v36, 0.0);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m"));
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "quantityWithUnit:doubleValue:", v34, 2.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v33, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "quantityWithUnit:doubleValue:", v10, 0.0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "quantityWithUnit:doubleValue:", v13, 40.0);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v11, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v35, "setAxisScalingRule:", v16);

  v17 = [HKRemoteChartConfiguration alloc];
  v37 = &unk_1E9CECC68;
  objc_msgSend(MEMORY[0x1E0C99D78], "hk_chartStatisticsIntervalComponentsForValue:forComponent:", 2, 32);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = v18;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v38, &v37, 1);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKRemoteChartConfiguration initWithStatisticIntervalComponentsByTimeScope:](v17, "initWithStatisticIntervalComponentsByTimeScope:", v19);
  -[HKDisplayTypeChartingRules setRemoteChartConfiguration:](v35, "setRemoteChartConfiguration:", v20);

  BYTE2(v31) = 0;
  LOWORD(v31) = 256;
  v21 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v31);
  v22 = [HKDisplayTypePresentation alloc];
  v23 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 1, 1, 0);
  LOBYTE(v32) = 0;
  v24 = MEMORY[0x1E0C9AA70];
  v25 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v22, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v23, MEMORY[0x1E0C9AA70], 1, 0, 0, 0, 1.0, v32, 0, 0, 0);

  v26 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("UNDERWATER_DEPTH"), 0, CFSTR("Localizable-Charon"), 0, v24);
  v27 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 269);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v27, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 269, 2, MEMORY[0x1E0C9AA60], v28, v21, v25, v26, v35, 0, 0);

  return v29;
}

HKDisplayType *HKDisplayTypeIdentifierUVExposureMake()
{
  HKDisplayTypeChartingRules *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HKDisplayTypeBehavior *v9;
  HKDisplayTypeSummaryAttribution *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentation *v13;
  HKDisplayTypeLocalization *v14;
  void *v15;
  void *v16;
  void *v17;
  HKDisplayTypeLocalization *v18;
  HKDisplayType *v19;
  void *v20;
  HKDisplayType *v21;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const __CFString *v26;
  void *v27;
  _QWORD v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 3, 0, 5);
  v1 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "quantityWithUnit:doubleValue:", v2, 0.0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "quantityWithUnit:doubleValue:", v5, 15.0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v3, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v7, 0, 0, 0, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v8);

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  v10 = -[HKDisplayTypeSummaryAttribution initWithAttribution:urlAttribute:primaryProfileOnly:]([HKDisplayTypeSummaryAttribution alloc], "initWithAttribution:urlAttribute:primaryProfileOnly:", CFSTR("NIH MedlinePlus"), 0, 0);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 1, 1, 0);
  LOBYTE(v24) = 0;
  v13 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v24, 0, 0, v10);

  v14 = [HKDisplayTypeLocalization alloc];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = &unk_1E9CECC50;
  v26 = &stru_1E9C4C428;
  v27 = v15;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v28[0] = v16;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v28, &v27, 1);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v14, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("UV_EXPOSURE"), 0, 0, 0, v17);

  v19 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 89);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v19, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 89, 14, MEMORY[0x1E0C9AA60], v20, v9, v13, v18, v0, 0, 0);

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierToothbrushingEventMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  uint64_t v13;
  HKDisplayTypePresentation *v14;
  HKDisplayTypeLocalization *v15;
  HKDisplayType *v16;
  void *v17;
  HKDisplayType *v18;
  uint64_t v20;
  uint64_t v21;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("min"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("min"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 6.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v20) = 0;
  LOWORD(v20) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v20);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 3, 2, 3, 0);
  LOBYTE(v21) = 0;
  v13 = MEMORY[0x1E0C9AA70];
  v14 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, MEMORY[0x1E0C9AA70], 0, 0, 0, 1, 1.0, v21, 0, 0, 0);

  v15 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("TOOTHBRUSHING_EVENT"), 0, 0, 0, v13);
  v16 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 189);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v16, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 189, 14, MEMORY[0x1E0C9AA60], v17, v10, v14, v15, v0, 0, 0);

  return v18;
}

HKDisplayType *HKDisplayTypeIdentifierTimeInDaylightMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("min"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("min"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 60.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 1, 3, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 1, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("TIME_IN_DAYLIGHT"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 279);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 279, 14, &unk_1E9CEA4C0, v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierTachycardiaEventMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  HKDisplayTypeBehavior *v4;
  void *v5;
  char v6;
  HKDisplayTypeSummaryAttribution *v7;
  HKDisplayTypeSummaryAttribution *v8;
  void *v9;
  void *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  uint64_t v13;
  HKDisplayTypePresentation *v14;
  HKDisplayTypeLocalization *v15;
  HKDisplayType *v16;
  void *v17;
  HKDisplayType *v18;
  uint64_t v20;
  uint64_t v21;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  -[HKDisplayTypeChartingRules setChartStyle:forTimeScope:](v0, "setChartStyle:forTimeScope:", 6, 6);
  -[HKDisplayTypeChartingRules setLineChartUsesValueAxisAnnotation:forTimeScope:](v0, "setLineChartUsesValueAxisAnnotation:forTimeScope:", 0, 6);
  -[HKDisplayTypeChartingRules setLineChartExtendLastValue:forTimeScope:](v0, "setLineChartExtendLastValue:forTimeScope:", 0, 6);
  -[HKDisplayTypeChartingRules setLineChartFlatLastValue:forTimeScope:](v0, "setLineChartFlatLastValue:forTimeScope:", 0, 6);
  -[HKDisplayTypeChartingRules setLineChartExtendFirstValue:forTimeScope:](v0, "setLineChartExtendFirstValue:forTimeScope:", 0, 6);
  -[HKDisplayTypeChartingRules setLineChartUsesPointMarkerImage:forTimeScope:](v0, "setLineChartUsesPointMarkerImage:forTimeScope:", 1, 6);
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", &unk_1E9CED5E8, &unk_1E9CED628);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKNumericFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:noDataAxisBounds:](HKNumericFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:noDataAxisBounds:", v2, 0, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v3);

  BYTE2(v20) = 0;
  LOWORD(v20) = 256;
  v4 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v20);
  objc_msgSend(MEMORY[0x1E0CB6F18], "sharedBehavior");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "isiPad");

  v7 = 0;
  if ((v6 & 1) == 0)
  {
    v8 = [HKDisplayTypeSummaryAttribution alloc];
    HKHealthKitFrameworkBundle();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("HEART_EVENT_SUMMARY_ATTRIBUTION"), &stru_1E9C4C428, *MEMORY[0x1E0CB5138]);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = -[HKDisplayTypeSummaryAttribution initWithAttribution:urlAttribute:primaryProfileOnly:](v8, "initWithAttribution:urlAttribute:primaryProfileOnly:", v10, CFSTR("bridge:root=NOTIFICATIONS_ID&path=com.apple.HeartRateSettings"), 0);

  }
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 4, 0, 7, 0);
  LOBYTE(v21) = 0;
  v13 = MEMORY[0x1E0C9AA70];
  v14 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v21, 0, 0, v7);

  v15 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("TACHYCARDIA"), CFSTR("TACHYCARDIA"), 0, 0, v13);
  v16 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 140);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v16, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 140, 11, MEMORY[0x1E0C9AA60], v17, v4, v14, v15, v0, 0, 0);

  return v18;
}

HKDisplayType *HKDisplayTypeIdentifierSwimmingStrokesMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  void *v17;
  void *v18;
  void *v19;
  HKDisplayTypeLocalization *v20;
  HKDisplayType *v21;
  void *v22;
  HKDisplayType *v23;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const __CFString *v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD v32[2];

  v32[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 100.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v25);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v31 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v32[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v32, &v31, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v26) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 1, 0, 0, 0, 1.0, v26, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = &unk_1E9CECC50;
  v28 = CFSTR("SWIMMING_STROKES_LOWER");
  v29 = v17;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = v18;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SWIMMING_STROKES"), CFSTR("SWIMMING_STROKES"), 0, 0, v19);

  v21 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 111);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v21, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 111, 2, MEMORY[0x1E0C9AA60], v22, v10, v15, v20, v0, 0, 0);

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierSwimmingDistanceMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 100.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 1, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SWIMMING_DISTANCE"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 110);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 110, 2, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierStepsMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypeSummaryAttribution *v11;
  HKDisplayTypePresentation *v12;
  HKDisplayTypePresentationConfiguration *v13;
  HKDisplayTypePresentationConfiguration *v14;
  void *v15;
  HKDisplayTypePresentation *v16;
  HKDisplayTypeLocalization *v17;
  void *v18;
  void *v19;
  void *v20;
  HKDisplayTypeLocalization *v21;
  HKDisplayType *v22;
  void *v23;
  HKDisplayType *v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const __CFString *v29;
  void *v30;
  void *v31;
  void *v32;
  _QWORD v33[2];

  v33[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 100.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v26) = 0;
  LOWORD(v26) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v26);
  v11 = -[HKDisplayTypeSummaryAttribution initWithAttribution:urlAttribute:primaryProfileOnly:]([HKDisplayTypeSummaryAttribution alloc], "initWithAttribution:urlAttribute:primaryProfileOnly:", CFSTR("Mayo Clinic"), CFSTR("http://www.mayoclinic.org/"), 0);
  v12 = [HKDisplayTypePresentation alloc];
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v32 = &unk_1E9CECC68;
  v14 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v33[0] = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v33, &v32, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v27) = 0;
  v16 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v12, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v13, v15, 1, 0, 0, 0, 1.0, v27, 0, 0, v11);

  v17 = [HKDisplayTypeLocalization alloc];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = &unk_1E9CECC50;
  v29 = CFSTR("STEPS_LOWER");
  v30 = v18;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v29, &v28, 1);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = v19;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v17, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("STEPS"), CFSTR("STEPS"), 0, 0, v20);

  v22 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 7);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v22, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 7, 2, MEMORY[0x1E0C9AA60], v23, v10, v16, v21, v0, 0, 0);

  return v24;
}

HKDisplayType *HKDisplayTypeIdentifierStateOfMindMake()
{
  HKDisplayTypeChartingRules *v0;
  void *v1;
  void *v2;
  void *v3;
  HKDisplayTypeBehavior *v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypePresentationConfiguration *v6;
  uint64_t v7;
  HKDisplayTypePresentation *v8;
  HKDisplayTypeLocalization *v9;
  HKDisplayType *v10;
  void *v11;
  HKDisplayType *v12;
  uint64_t v14;
  uint64_t v15;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", &unk_1E9CED638, &unk_1E9CED648);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", &unk_1E9CED638, &unk_1E9CED648);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKNumericFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:noDataAxisBounds:](HKNumericFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:noDataAxisBounds:", v1, 0, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v3);

  BYTE2(v14) = 0;
  LOWORD(v14) = 256;
  v4 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v14);
  v5 = [HKDisplayTypePresentation alloc];
  v6 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 0, 0, 0, 0);
  LOBYTE(v15) = 0;
  v7 = MEMORY[0x1E0C9AA70];
  v8 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v5, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v6, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v15, 0, 0, 0);

  v9 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("STATE_OF_MIND"), 0, CFSTR("Localizable-Chamomile"), 0, v7);
  v10 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 284);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v10, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 284, 10, MEMORY[0x1E0C9AA60], v11, v4, v8, v9, v0, 0, 0);

  return v12;
}

HKDisplayType *HKDisplayTypeIdentifierStairDescentSpeedMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HKDisplayTypeBehavior *v9;
  HKDisplayTypePresentation *v10;
  HKDisplayTypePresentationConfiguration *v11;
  uint64_t v12;
  HKDisplayTypePresentation *v13;
  HKDisplayTypeLocalization *v14;
  HKDisplayType *v15;
  void *v16;
  HKDisplayType *v17;
  uint64_t v19;
  uint64_t v20;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 9, 18, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m/s"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.01);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m/s"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 0.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v4, v7, 0, 0, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v8);

  BYTE2(v19) = 0;
  LOWORD(v19) = 256;
  v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v19);
  v10 = [HKDisplayTypePresentation alloc];
  v11 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 2, 1, 0);
  LOBYTE(v20) = 0;
  v12 = MEMORY[0x1E0C9AA70];
  v13 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v10, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v11, MEMORY[0x1E0C9AA70], 1, 0, 0, 0, 1.0, v20, 0, 0, 0);

  v14 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("STAIR_DESCENT_SPEED"), 0, 0, 0, v12);
  v15 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 196);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v15, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 196, 23, MEMORY[0x1E0C9AA60], v16, v9, v13, v14, v0, 0, 0);

  return v17;
}

HKDisplayType *HKDisplayTypeIdentifierStairAscentSpeedMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HKDisplayTypeBehavior *v9;
  HKDisplayTypePresentation *v10;
  HKDisplayTypePresentationConfiguration *v11;
  uint64_t v12;
  HKDisplayTypePresentation *v13;
  HKDisplayTypeLocalization *v14;
  HKDisplayType *v15;
  void *v16;
  HKDisplayType *v17;
  uint64_t v19;
  uint64_t v20;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 9, 18, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m/s"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.01);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m/s"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 0.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v4, v7, 0, 0, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v8);

  BYTE2(v19) = 0;
  LOWORD(v19) = 256;
  v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v19);
  v10 = [HKDisplayTypePresentation alloc];
  v11 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 2, 1, 0);
  LOBYTE(v20) = 0;
  v12 = MEMORY[0x1E0C9AA70];
  v13 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v10, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v11, MEMORY[0x1E0C9AA70], 1, 0, 0, 0, 1.0, v20, 0, 0, 0);

  v14 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("STAIR_ASCENT_SPEED"), 0, 0, 0, v12);
  v15 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 195);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v15, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 195, 23, MEMORY[0x1E0C9AA60], v16, v9, v13, v14, v0, 0, 0);

  return v17;
}

HKDisplayType *HKDisplayTypeIdentifierSoreThroatMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_SORE_THROAT"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 224);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 224, 26, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierSleepScheduleMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 0, 0, 0, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SLEEP_SCHEDULE"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 198);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 198, 5, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierSleepDurationGoalMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 0, 0, 0, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SLEEP_DURATION_GOAL"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 197);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 197, 5, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierSleepChangesMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_SLEEP_CHANGES"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 169);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 169, 26, &unk_1E9CEA388, v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierSkippedHeartbeatMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_SKIPPED_HEARTBEAT"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 202);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 202, 26, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierSixMinuteWalkTestDistanceMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HKDisplayTypeBehavior *v9;
  HKDisplayTypePresentation *v10;
  HKDisplayTypePresentationConfiguration *v11;
  uint64_t v12;
  HKDisplayTypePresentation *v13;
  HKDisplayTypeLocalization *v14;
  HKDisplayType *v15;
  void *v16;
  HKDisplayType *v17;
  uint64_t v19;
  uint64_t v20;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 100.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 0.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v4, v7, 0, 0, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v8);

  BYTE2(v19) = 0;
  LOWORD(v19) = 256;
  v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v19);
  v10 = [HKDisplayTypePresentation alloc];
  v11 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 3, 0);
  LOBYTE(v20) = 0;
  v12 = MEMORY[0x1E0C9AA70];
  v13 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v10, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v11, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v20, 0, 0, 0);

  v14 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SIX_MINUTE_WALK_TEST_DISTANCE"), 0, 0, 0, v12);
  v15 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 183);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v15, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 183, 23, &unk_1E9CEA3D0, v16, v9, v13, v14, v0, 0, 0);

  return v17;
}

HKDisplayType *HKDisplayTypeIdentifierShortnessOfBreathMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_SHORTNESS_OF_BREATH"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 204);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 204, 26, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierSexualActivityMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  HKDisplayTypeBehavior *v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypePresentationConfiguration *v6;
  uint64_t v7;
  HKDisplayTypePresentation *v8;
  HKDisplayTypeLocalization *v9;
  HKDisplayType *v10;
  void *v11;
  HKDisplayType *v12;
  uint64_t v14;
  uint64_t v15;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", &unk_1E9CED5E8, &unk_1E9CED608);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKNumericFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:noDataAxisBounds:](HKNumericFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:noDataAxisBounds:", v2, 0, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v3);

  BYTE2(v14) = 0;
  LOWORD(v14) = 256;
  v4 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v14);
  v5 = [HKDisplayTypePresentation alloc];
  v6 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 6, 3, 5, 0);
  LOBYTE(v15) = 0;
  v7 = MEMORY[0x1E0C9AA70];
  v8 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v5, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v6, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v15, 0, 0, 0);

  v9 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SEXUAL_ACTIVITY"), 0, 0, 0, v7);
  v10 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 97);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v10, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 97, 8, &unk_1E9CEA238, v11, v4, v8, v9, v0, 0, 0);

  return v12;
}

HKDisplayType *HKDisplayTypeIdentifierRunnyNoseMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_RUNNY_NOSE"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 226);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 226, 26, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierRunningVerticalOscillationMake()
{
  HKTieredDecimalPrecisionRule *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HKDisplayTypeBehavior *v15;
  HKDisplayTypePresentation *v16;
  HKDisplayTypePresentationConfiguration *v17;
  uint64_t v18;
  HKDisplayTypePresentation *v19;
  HKDisplayTypeLocalization *v20;
  HKDisplayType *v21;
  void *v22;
  HKDisplayType *v23;
  uint64_t v25;
  uint64_t v26;
  HKDisplayTypeChartingRules *v27;

  v27 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 16, 5);
  v0 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v27, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v0, 0);

  v1 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("cm"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "quantityWithUnit:doubleValue:", v2, 10.0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("cm"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "quantityWithUnit:doubleValue:", v5, 0.0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("cm"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "quantityWithUnit:doubleValue:", v8, 1.0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("cm"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "quantityWithUnit:doubleValue:", v11, 20.0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v9, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v3, v6, 0, 0, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v27, "setAxisScalingRule:", v14);

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  v15 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v25);
  v16 = [HKDisplayTypePresentation alloc];
  v17 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 1, 3, 0);
  LOBYTE(v26) = 0;
  v18 = MEMORY[0x1E0C9AA70];
  v19 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v16, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v17, MEMORY[0x1E0C9AA70], 1, 0, 0, 0, 1.0, v26, 0, 0, 0);

  v20 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("RUNNING_VERTICAL_OSCILLATION"), 0, 0, 0, v18);
  v21 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 259);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v21, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 259, 23, MEMORY[0x1E0C9AA60], v22, v15, v19, v20, v27, 0, 0);

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierRunningStrideLengthMake()
{
  HKTieredDecimalPrecisionRule *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HKDisplayTypeBehavior *v15;
  HKDisplayTypePresentation *v16;
  HKDisplayTypePresentationConfiguration *v17;
  uint64_t v18;
  HKDisplayTypePresentation *v19;
  HKDisplayTypeLocalization *v20;
  HKDisplayType *v21;
  void *v22;
  HKDisplayType *v23;
  uint64_t v25;
  uint64_t v26;
  HKDisplayTypeChartingRules *v27;

  v27 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 16, 5);
  v0 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v27, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v0, 0);

  v1 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "quantityWithUnit:doubleValue:", v2, 2.0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "quantityWithUnit:doubleValue:", v5, 0.0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "quantityWithUnit:doubleValue:", v8, 0.5);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "quantityWithUnit:doubleValue:", v11, 4.0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v9, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v3, v6, 0, 0, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v27, "setAxisScalingRule:", v14);

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  v15 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v25);
  v16 = [HKDisplayTypePresentation alloc];
  v17 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 1, 3, 0);
  LOBYTE(v26) = 0;
  v18 = MEMORY[0x1E0C9AA70];
  v19 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v16, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v17, MEMORY[0x1E0C9AA70], 1, 0, 0, 0, 1.0, v26, 0, 0, 0);

  v20 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("RUNNING_STRIDE_LENGTH"), 0, 0, 0, v18);
  v21 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 258);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v21, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 258, 23, MEMORY[0x1E0C9AA60], v22, v15, v19, v20, v27, 0, 0);

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierRunningSpeedMake()
{
  HKTieredDecimalPrecisionRule *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HKDisplayTypeBehavior *v15;
  HKDisplayTypePresentation *v16;
  HKDisplayTypePresentationConfiguration *v17;
  uint64_t v18;
  HKDisplayTypePresentation *v19;
  HKDisplayTypeLocalization *v20;
  HKDisplayType *v21;
  void *v22;
  HKDisplayType *v23;
  uint64_t v25;
  uint64_t v26;
  HKDisplayTypeChartingRules *v27;

  v27 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 16, 5);
  v0 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v27, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v0, 0);

  v1 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m/s"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "quantityWithUnit:doubleValue:", v2, 0.1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m/s"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "quantityWithUnit:doubleValue:", v5, 0.0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m/s"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "quantityWithUnit:doubleValue:", v8, 0.0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m/s"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "quantityWithUnit:doubleValue:", v11, 7.0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v9, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v3, v6, 0, 0, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v27, "setAxisScalingRule:", v14);

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  v15 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v25);
  v16 = [HKDisplayTypePresentation alloc];
  v17 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 1, 3, 0);
  LOBYTE(v26) = 0;
  v18 = MEMORY[0x1E0C9AA70];
  v19 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v16, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v17, MEMORY[0x1E0C9AA70], 1, 0, 0, 0, 1.0, v26, 0, 0, 0);

  v20 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("RUNNING_SPEED"), 0, 0, 0, v18);
  v21 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 274);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v21, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 274, 2, MEMORY[0x1E0C9AA60], v22, v15, v19, v20, v27, 0, 0);

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierRunningPowerMake()
{
  HKStaticDecimalPrecisionRule *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HKDisplayTypeBehavior *v15;
  HKDisplayTypePresentation *v16;
  HKDisplayTypePresentationConfiguration *v17;
  uint64_t v18;
  HKDisplayTypePresentation *v19;
  HKDisplayTypeLocalization *v20;
  HKDisplayType *v21;
  void *v22;
  HKDisplayType *v23;
  uint64_t v25;
  uint64_t v26;
  HKDisplayTypeChartingRules *v27;

  v27 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  v0 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v27, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v0, 0);

  v1 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("W"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "quantityWithUnit:doubleValue:", v2, 100.0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("W"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "quantityWithUnit:doubleValue:", v5, 0.0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("W"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "quantityWithUnit:doubleValue:", v8, 0.0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("W"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "quantityWithUnit:doubleValue:", v11, 300.0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v9, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v3, v6, 0, 0, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v27, "setAxisScalingRule:", v14);

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  v15 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v25);
  v16 = [HKDisplayTypePresentation alloc];
  v17 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 1, 3, 0);
  LOBYTE(v26) = 0;
  v18 = MEMORY[0x1E0C9AA70];
  v19 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v16, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v17, MEMORY[0x1E0C9AA70], 1, 0, 0, 0, 1.0, v26, 0, 0, 0);

  v20 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("RUNNING_POWER"), 0, 0, 0, v18);
  v21 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 270);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v21, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 270, 2, MEMORY[0x1E0C9AA60], v22, v15, v19, v20, v27, 0, 0);

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierRunningGroundContactTimeMake()
{
  HKStaticDecimalPrecisionRule *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HKDisplayTypeBehavior *v15;
  HKDisplayTypePresentation *v16;
  HKDisplayTypePresentationConfiguration *v17;
  uint64_t v18;
  HKDisplayTypePresentation *v19;
  HKDisplayTypeLocalization *v20;
  HKDisplayType *v21;
  void *v22;
  HKDisplayType *v23;
  uint64_t v25;
  uint64_t v26;
  HKDisplayTypeChartingRules *v27;

  v27 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  v0 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v27, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v0, 0);

  v1 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("ms"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "quantityWithUnit:doubleValue:", v2, 100.0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("ms"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "quantityWithUnit:doubleValue:", v5, 0.0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("ms"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "quantityWithUnit:doubleValue:", v8, 50.0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("ms"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "quantityWithUnit:doubleValue:", v11, 400.0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v9, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v3, v6, 0, 0, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v27, "setAxisScalingRule:", v14);

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  v15 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v25);
  v16 = [HKDisplayTypePresentation alloc];
  v17 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 1, 3, 0);
  LOBYTE(v26) = 0;
  v18 = MEMORY[0x1E0C9AA70];
  v19 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v16, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v17, MEMORY[0x1E0C9AA70], 1, 0, 0, 0, 1.0, v26, 0, 0, 0);

  v20 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("RUNNING_GROUND_CONTACT_TIME"), 0, 0, 0, v18);
  v21 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 260);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v21, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 260, 23, MEMORY[0x1E0C9AA60], v22, v15, v19, v20, v27, 0, 0);

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierRestingHeartRateMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HKDisplayTypeBehavior *v9;
  HKDisplayTypePresentation *v10;
  HKDisplayTypePresentationConfiguration *v11;
  HKDisplayTypePresentation *v12;
  HKDisplayTypeLocalization *v13;
  void *v14;
  void *v15;
  void *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const __CFString *v25;
  void *v26;
  _QWORD v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  -[HKDisplayTypeChartingRules setLineChartUsesValueAxisAnnotation:forTimeScope:](v0, "setLineChartUsesValueAxisAnnotation:forTimeScope:", 1, 6);
  -[HKDisplayTypeChartingRules setLineChartExtendLastValue:forTimeScope:](v0, "setLineChartExtendLastValue:forTimeScope:", 0, 6);
  -[HKDisplayTypeChartingRules setLineChartFlatLastValue:forTimeScope:](v0, "setLineChartFlatLastValue:forTimeScope:", 1, 6);
  -[HKDisplayTypeChartingRules setLineChartExtendFirstValue:forTimeScope:](v0, "setLineChartExtendFirstValue:forTimeScope:", 0, 6);
  -[HKDisplayTypeChartingRules setLineChartUsesPointMarkerImage:forTimeScope:](v0, "setLineChartUsesPointMarkerImage:forTimeScope:", 0, 6);
  -[HKDisplayTypeChartingRules setLineChartUsesValueAxisAnnotation:forTimeScope:](v0, "setLineChartUsesValueAxisAnnotation:forTimeScope:", 1, 7);
  -[HKDisplayTypeChartingRules setLineChartExtendLastValue:forTimeScope:](v0, "setLineChartExtendLastValue:forTimeScope:", 0, 7);
  -[HKDisplayTypeChartingRules setLineChartFlatLastValue:forTimeScope:](v0, "setLineChartFlatLastValue:forTimeScope:", 1, 7);
  -[HKDisplayTypeChartingRules setLineChartExtendFirstValue:forTimeScope:](v0, "setLineChartExtendFirstValue:forTimeScope:", 0, 7);
  -[HKDisplayTypeChartingRules setLineChartUsesPointMarkerImage:forTimeScope:](v0, "setLineChartUsesPointMarkerImage:forTimeScope:", 0, 7);
  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count/min"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 20.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count/min"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 0.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v4, v7, 0, 0, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v8);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v10 = [HKDisplayTypePresentation alloc];
  v11 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 1, 3, 1);
  LOBYTE(v23) = 0;
  v12 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v10, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v11, MEMORY[0x1E0C9AA70], 1, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v13 = [HKDisplayTypeLocalization alloc];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count/min"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = &unk_1E9CECC50;
  v25 = CFSTR("BEATS_PER_MINUTE");
  v26 = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v27[0] = v15;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v27, &v26, 1);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v13, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("RESTING_HEART_RATE"), 0, 0, 0, v16);

  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 118);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 118, 11, MEMORY[0x1E0C9AA60], v19, v9, v12, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierRapidPoundingOrFlutteringHeartbeatMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_RAPID_POUNDING_OR_FLUTTERING_HEARTBEAT"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 201);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 201, 26, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierPushCountMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  void *v17;
  void *v18;
  void *v19;
  HKDisplayTypeLocalization *v20;
  HKDisplayType *v21;
  void *v22;
  HKDisplayType *v23;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const __CFString *v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD v32[2];

  v32[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 1000.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v25);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v31 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v32[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v32, &v31, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v26) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 1, 0, 0, 0, 1.0, v26, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = &unk_1E9CECC50;
  v28 = CFSTR("PUSH_COUNT_LOWER");
  v29 = v17;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = v18;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("PUSH_COUNT"), CFSTR("PUSH_COUNT"), 0, 0, v19);

  v21 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 101);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v21, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 101, 2, MEMORY[0x1E0C9AA60], v22, v10, v15, v20, v0, 0, 0);

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierProlongedMenstrualPeriodsMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("MENSTRUAL_CYCLE_DEVIATION_PROLONGED"), CFSTR("MENSTRUAL_CYCLE_DEVIATION_PROLONGED"), CFSTR("Localizable-Selene"), 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 263);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 263, 8, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierProgesteroneTestResultMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 10, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 3, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("PROGESTERONE_TEST_RESULT"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 244);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 244, 8, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierProcedureRecordMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 0, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 0, 0, 0, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, CFSTR("health_records_procedures"), 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("PROCEDURE_RECORDS"), 0, CFSTR("Localizable-Clinical-Health-Records"), 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 154);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 154, 22, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierPregnancyTestResultMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 10, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 3, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("PREGNANCY_TEST_RESULT"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 243);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 243, 8, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierPregnancyMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("PREGNANCY"), CFSTR("PREGNANCY"), 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 191);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 191, 8, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierPhysicalEffortMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HKDisplayTypeBehavior *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypePresentationConfiguration *v16;
  HKDisplayTypePresentation *v17;
  HKDisplayTypeLocalization *v18;
  void *v19;
  void *v20;
  void *v21;
  HKDisplayTypeLocalization *v22;
  HKDisplayType *v23;
  void *v24;
  HKDisplayType *v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  HKDisplayTypeChartingRules *v31;
  _QWORD v32[3];
  _QWORD v33[3];
  void *v34;
  _QWORD v35[2];

  v35[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 9, 2, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  v31 = v0;
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("kcal/(kg*hr)"));
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v30, 3.0);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("kcal/(kg*hr)"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "quantityWithUnit:doubleValue:", v4, 0.0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("kcal/(kg*hr)"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "quantityWithUnit:doubleValue:", v7, 0.0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("kcal/(kg*hr)"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "quantityWithUnit:doubleValue:", v10, 5.0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v8, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v29, v5, 0, 0, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v13);

  BYTE2(v27) = 0;
  LOWORD(v27) = 256;
  v14 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v27);
  v15 = [HKDisplayTypePresentation alloc];
  v16 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 1, 1, 0);
  LOBYTE(v28) = 0;
  v17 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v15, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v16, MEMORY[0x1E0C9AA70], 1, 0, 0, 0, 1.0, v28, 0, 0, 0);

  v18 = [HKDisplayTypeLocalization alloc];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("kcal/(kg*hr)"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = v19;
  v32[0] = &unk_1E9CECC50;
  v32[1] = &unk_1E9CECC98;
  v33[0] = CFSTR("PHYSICAL_EFFORT");
  v33[1] = CFSTR("PHYSICAL_EFFORT_PREFERENCES");
  v32[2] = &unk_1E9CECCC8;
  v33[2] = CFSTR("PHYSICAL_EFFORT_SAMPLE_DETAILS");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v33, v32, 3);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v35[0] = v20;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v35, &v34, 1);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v18, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("PHYSICAL_EFFORT"), 0, 0, 0, v21);

  v23 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 286);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v23, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 286, 2, MEMORY[0x1E0C9AA60], v24, v14, v17, v22, v31, 0, 0);

  return v25;
}

HKDisplayType *HKDisplayTypeIdentifierPersistentIntermenstrualBleedingMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("MENSTRUAL_CYCLE_DEVIATION_SPOTTING"), CFSTR("MENSTRUAL_CYCLE_DEVIATION_SPOTTING"), CFSTR("Localizable-Selene"), 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 262);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 262, 8, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierPeripheralPerfusionIndexMake()
{
  HKDisplayTypeChartingRules *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  HKDisplayTypeBehavior *v8;
  HKDisplayTypePresentation *v9;
  HKDisplayTypePresentationConfiguration *v10;
  uint64_t v11;
  HKDisplayTypePresentation *v12;
  HKDisplayTypeLocalization *v13;
  HKDisplayType *v14;
  void *v15;
  HKDisplayType *v16;
  uint64_t v18;
  uint64_t v19;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  v1 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("%"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "quantityWithUnit:doubleValue:", v2, 0.2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("%"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "quantityWithUnit:doubleValue:", v5, 0.0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v3, v6, 0, 0, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v7);

  BYTE2(v18) = 0;
  LOWORD(v18) = 256;
  v8 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v18);
  v9 = [HKDisplayTypePresentation alloc];
  v10 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 2, 3, 0);
  LOBYTE(v19) = 0;
  v11 = MEMORY[0x1E0C9AA70];
  v12 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v9, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v10, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 100.0, v19, 0, 0, 0);

  v13 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("PERFUSION_INDEX"), 0, 0, 0, v11);
  v14 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 19);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v14, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 19, 11, MEMORY[0x1E0C9AA60], v15, v8, v12, v13, v0, 0, 0);

  return v16;
}

HKDisplayType *HKDisplayTypeIdentifierPelvicPainMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_PELVIC_PAIN"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 163);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 163, 26, &unk_1E9CEA2F8, v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierPeakExpiratoryFlowRateMake()
{
  HKDisplayTypeChartingRules *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  HKDisplayTypeBehavior *v8;
  HKDisplayTypePresentation *v9;
  HKDisplayTypePresentationConfiguration *v10;
  uint64_t v11;
  HKDisplayTypePresentation *v12;
  HKDisplayTypeLocalization *v13;
  HKDisplayType *v14;
  void *v15;
  HKDisplayType *v16;
  uint64_t v18;
  uint64_t v19;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  v1 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("L/min"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "quantityWithUnit:doubleValue:", v2, 10.0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("L/min"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "quantityWithUnit:doubleValue:", v5, 0.0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v3, v6, 0, 0, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v7);

  BYTE2(v18) = 0;
  LOWORD(v18) = 256;
  v8 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v18);
  v9 = [HKDisplayTypePresentation alloc];
  v10 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 2, 3, 0);
  LOBYTE(v19) = 0;
  v11 = MEMORY[0x1E0C9AA70];
  v12 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v9, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v10, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v19, 0, 0, 0);

  v13 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SPIROMETRY_PEFR"), 0, 0, 0, v11);
  v14 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 73);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v14, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 73, 13, MEMORY[0x1E0C9AA60], v15, v8, v12, v13, v0, 0, 0);

  return v16;
}

HKDisplayType *HKDisplayTypeIdentifierPHQ9Make()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 3);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 0, 0, 0, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("PHQ9"), 0, CFSTR("Localizable-Chamomile"), 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 288);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 288, 10, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierOxygenSaturationMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  HKDisplayTypeBehavior *v12;
  HKDisplayTypeSummaryAttribution *v13;
  HKDisplayTypePresentation *v14;
  HKDisplayTypePresentationConfiguration *v15;
  uint64_t v16;
  HKDisplayTypePresentation *v17;
  HKDisplayTypeLocalization *v18;
  HKDisplayType *v19;
  void *v20;
  HKDisplayType *v21;
  uint64_t v23;
  uint64_t v24;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 9, 3, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("%"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 10.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("%"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 0.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("%"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "quantityWithUnit:doubleValue:", v9, 100.0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v4, v7, v10, 0, 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v11);

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  v12 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  v13 = -[HKDisplayTypeSummaryAttribution initWithAttribution:urlAttribute:primaryProfileOnly:]([HKDisplayTypeSummaryAttribution alloc], "initWithAttribution:urlAttribute:primaryProfileOnly:", CFSTR("Mayo Clinic"), CFSTR("http://www.mayoclinic.org/"), 0);
  v14 = [HKDisplayTypePresentation alloc];
  v15 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 1, 1, 0);
  LOBYTE(v24) = 0;
  v16 = MEMORY[0x1E0C9AA70];
  v17 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v14, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v15, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 100.0, v24, 0, 0, v13);

  v18 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("OXYGEN_SATURATION"), 0, 0, 0, v16);
  v19 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 14);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v19, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 14, 13, &unk_1E9CEA148, v20, v12, v17, v18, v0, 0, 0);

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierOvulationTestResultMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 10, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 3, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("OVULATION_TEST_RESULT"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 92);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 92, 8, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierNumberOfTimesFallenMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  void *v17;
  void *v18;
  void *v19;
  HKDisplayTypeLocalization *v20;
  HKDisplayType *v21;
  void *v22;
  HKDisplayType *v23;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const __CFString *v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD v32[2];

  v32[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 3.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v25);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v31 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v32[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v32, &v31, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v26) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 0, 0, 0, 0, 1.0, v26, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = &unk_1E9CECC50;
  v28 = &stru_1E9C4C428;
  v29 = v17;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = v18;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("NUMBER_OF_TIMES_FALLEN"), 0, 0, 0, v19);

  v21 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 57);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v21, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 57, 14, MEMORY[0x1E0C9AA60], v22, v10, v15, v20, v0, 0, 0);

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierNumberOfAlcoholicBeveragesMake()
{
  HKStaticDecimalPrecisionRule *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HKDisplayTypeBehavior *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypePresentationConfiguration *v16;
  HKDisplayTypePresentationConfiguration *v17;
  void *v18;
  HKDisplayTypePresentation *v19;
  HKDisplayTypeLocalization *v20;
  void *v21;
  void *v22;
  void *v23;
  HKDisplayTypeLocalization *v24;
  HKDisplayType *v25;
  void *v26;
  HKDisplayType *v27;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  HKDisplayTypeChartingRules *v33;
  void *v34;
  const __CFString *v35;
  void *v36;
  void *v37;
  void *v38;
  _QWORD v39[2];

  v39[1] = *MEMORY[0x1E0C80C00];
  v33 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v0 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 1);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v33, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v0, 0);

  v1 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "quantityWithUnit:doubleValue:", v32, 0.0);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 2.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v31, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "quantityWithUnit:doubleValue:", v7, 0.0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "quantityWithUnit:doubleValue:", v10, 2.0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v8, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v5, 0, 0, 0, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v33, "setAxisScalingRule:", v13);

  BYTE2(v29) = 0;
  LOWORD(v29) = 256;
  v14 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v29);
  v15 = [HKDisplayTypePresentation alloc];
  v16 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v38 = &unk_1E9CECC68;
  v17 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v39[0] = v17;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v39, &v38, 1);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v30) = 0;
  v19 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v15, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v16, v18, 1, 0, 0, 0, 1.0, v30, 0, 0, 0);

  v20 = [HKDisplayTypeLocalization alloc];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = &unk_1E9CECC50;
  v35 = CFSTR("NUMBER_OF_ALCOHOLIC_BEVERAGES");
  v36 = v21;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v35, &v34, 1);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = v22;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v37, &v36, 1);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v20, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("NUMBER_OF_ALCOHOLIC_BEVERAGES"), 0, 0, 0, v23);

  v25 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 251);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v25, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 251, 14, MEMORY[0x1E0C9AA60], v26, v14, v19, v24, v33, 0, 0);

  return v27;
}

HKDisplayType *HKDisplayTypeIdentifierNikeFuelMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  void *v17;
  void *v18;
  void *v19;
  HKDisplayTypeLocalization *v20;
  HKDisplayType *v21;
  void *v22;
  HKDisplayType *v23;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const __CFString *v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD v32[2];

  v32[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 100.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v25);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v31 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v32[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v32, &v31, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v26) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 1, 0, 0, 0, 1.0, v26, CFSTR("NikeFuel_Summary_Image"), 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = &unk_1E9CECC50;
  v28 = &stru_1E9C4C428;
  v29 = v17;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = v18;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("NIKE_FUEL"), 0, 0, 0, v19);

  v21 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 13);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v21, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 13, 2, MEMORY[0x1E0C9AA60], v22, v10, v15, v20, v0, 0, 0);

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierNightSweatsMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_NIGHT_SWEATS"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 230);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 230, 26, &unk_1E9CEA400, v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierNauseaMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_NAUSEA"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 168);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 168, 26, &unk_1E9CEA370, v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierMoodChangesMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_MOOD_CHANGES"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 164);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 164, 26, &unk_1E9CEA310, v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierMindfulSessionMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  HKDisplayTypeBehavior *v5;
  HKDisplayTypePresentation *v6;
  HKDisplayTypePresentationConfiguration *v7;
  HKDisplayTypePresentationConfiguration *v8;
  void *v9;
  HKDisplayTypePresentation *v10;
  HKDisplayTypeLocalization *v11;
  HKDisplayTypeLocalization *v12;
  HKDisplayType *v13;
  void *v14;
  HKDisplayType *v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  -[HKDisplayTypeChartingRules setChartStyle:forTimeScope:](v0, "setChartStyle:forTimeScope:", 5, 6);
  -[HKDisplayTypeChartingRules setLineChartUsesValueAxisAnnotation:forTimeScope:](v0, "setLineChartUsesValueAxisAnnotation:forTimeScope:", 0, 6);
  -[HKDisplayTypeChartingRules setLineChartExtendLastValue:forTimeScope:](v0, "setLineChartExtendLastValue:forTimeScope:", 0, 6);
  -[HKDisplayTypeChartingRules setLineChartFlatLastValue:forTimeScope:](v0, "setLineChartFlatLastValue:forTimeScope:", 0, 6);
  -[HKDisplayTypeChartingRules setLineChartExtendFirstValue:forTimeScope:](v0, "setLineChartExtendFirstValue:forTimeScope:", 0, 6);
  -[HKDisplayTypeChartingRules setLineChartUsesPointMarkerImage:forTimeScope:](v0, "setLineChartUsesPointMarkerImage:forTimeScope:", 1, 6);
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", &unk_1E9CED5E8, &unk_1E9CED618);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", &unk_1E9CED5E8, &unk_1E9CED618);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKNumericFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:noDataAxisBounds:](HKNumericFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:noDataAxisBounds:", v2, 0, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v4);

  BYTE2(v17) = 0;
  LOWORD(v17) = 256;
  v5 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v17);
  v6 = [HKDisplayTypePresentation alloc];
  v7 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 3, 2, 7, 0);
  v19 = &unk_1E9CECC68;
  v8 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 3, 0, 8, 0);
  v20[0] = v8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v20, &v19, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v18) = 0;
  v10 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v6, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v7, v9, 0, 0, 0, 0, 1.0, v18, 0, 0, 0);

  v11 = [HKDisplayTypeLocalization alloc];
  v12 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v11, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("MINDFUL_MINUTES"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v13 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 99);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v13, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 99, 10, MEMORY[0x1E0C9AA60], v14, v5, v10, v12, v0, 0, 0);

  return v15;
}

HKDisplayType *HKDisplayTypeIdentifierMenstruationMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 10, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 6, 3, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("MENSTRUATION"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 95);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 95, 8, &unk_1E9CEA220, v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierMemoryLapseMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_MEMORY_LAPSE"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 235);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 235, 26, &unk_1E9CEA478, v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierMedicationRecordMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 0, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 0, 0, 0, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, CFSTR("health_records_medications"), 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("MEDICATION_RECORDS"), 0, CFSTR("Localizable-Clinical-Health-Records"), 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 153);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 153, 21, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierMedicationDoseEventMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 0, 0, 0, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("MEDICATION_TRACKING"), 0, CFSTR("Localizable-Meds"), 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 273);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 273, 31, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierLowerBackPainMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_LOWER_BACK_PAIN"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 162);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 162, 26, &unk_1E9CEA2E0, v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierLowCardioFitnessEventMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  HKDisplayTypeBehavior *v2;
  HKDisplayTypePresentation *v3;
  HKDisplayTypePresentationConfiguration *v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeLocalization *v10;
  HKDisplayType *v11;
  void *v12;
  HKDisplayType *v13;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const __CFString *v18;
  void *v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  BYTE2(v15) = 0;
  LOWORD(v15) = 256;
  v2 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v15);
  v3 = [HKDisplayTypePresentation alloc];
  v4 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 4, 0, 7, 0);
  LOBYTE(v16) = 0;
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v3, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v4, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v16, 0, 0, 0);

  v6 = [HKDisplayTypeLocalization alloc];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = &unk_1E9CECC50;
  v18 = &stru_1E9C4C428;
  v19 = v7;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v20[0] = v8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v20, &v19, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v6, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("CARDIO_FITNESS_EVENT"), CFSTR("CARDIO_FITNESS_EVENT"), CFSTR("Localizable-CardioFitness"), 0, v9);

  v11 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 236);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v11, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 236, 11, MEMORY[0x1E0C9AA60], v12, v2, v5, v10, v0, 0, 0);

  return v13;
}

HKDisplayType *HKDisplayTypeIdentifierLossOfTasteMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_LOSS_OF_TASTE"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 242);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 242, 26, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierLossOfSmellMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_LOSS_OF_SMELL"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 241);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 241, 26, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierLeanBodyMassMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  void *v2;
  HKStaticDecimalPrecisionRule *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  HKDisplayTypeBehavior *v12;
  HKDisplayTypeSummaryAttribution *v13;
  HKDisplayTypePresentation *v14;
  HKDisplayTypePresentationConfiguration *v15;
  uint64_t v16;
  HKDisplayTypePresentation *v17;
  HKDisplayTypeLocalization *v18;
  HKDisplayType *v19;
  void *v20;
  HKDisplayType *v21;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 2);
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("lb"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = v2;
  v3 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 1);
  v26[0] = v3;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, &v25, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, v4);

  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("lb"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 8.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("lb"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "quantityWithUnit:doubleValue:", v9, 0.0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v7, v10, 0, 0, 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v11);

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  v12 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  v13 = -[HKDisplayTypeSummaryAttribution initWithAttribution:urlAttribute:primaryProfileOnly:]([HKDisplayTypeSummaryAttribution alloc], "initWithAttribution:urlAttribute:primaryProfileOnly:", CFSTR("Mayo Clinic"), CFSTR("http://www.mayoclinic.org/"), 0);
  v14 = [HKDisplayTypePresentation alloc];
  v15 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 2, 3, 0);
  LOBYTE(v24) = 0;
  v16 = MEMORY[0x1E0C9AA70];
  v17 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v14, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v15, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v24, 0, 0, v13);

  v18 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("LEAN_BODY_MASS"), 0, 0, 0, v16);
  v19 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 4);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v19, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 4, 6, MEMORY[0x1E0C9AA60], v20, v12, v17, v18, v0, 0, 0);

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierLactationMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("LACTATION"), CFSTR("LACTATION"), 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 192);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 192, 8, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierLabResultRecordMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 0, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 0, 0, 0, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, CFSTR("health_records_lab_results"), 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("LAB_RESULT_RECORDS"), 0, CFSTR("Localizable-Clinical-Health-Records"), 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 152);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 152, 20, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierIrregularMenstrualCyclesMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("MENSTRUAL_CYCLE_DEVIATION_IRREGULAR"), CFSTR("MENSTRUAL_CYCLE_DEVIATION_IRREGULAR"), CFSTR("Localizable-Selene"), 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 264);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 264, 8, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierIntermenstrualBleedingMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypeSummaryAttribution *v2;
  HKDisplayTypePresentation *v3;
  HKDisplayTypePresentationConfiguration *v4;
  uint64_t v5;
  HKDisplayTypePresentation *v6;
  HKDisplayTypeLocalization *v7;
  HKDisplayType *v8;
  void *v9;
  HKDisplayType *v10;
  uint64_t v12;
  uint64_t v13;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 7, 0, 5);
  BYTE2(v12) = 0;
  LOWORD(v12) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v12);
  v2 = -[HKDisplayTypeSummaryAttribution initWithAttribution:urlAttribute:primaryProfileOnly:]([HKDisplayTypeSummaryAttribution alloc], "initWithAttribution:urlAttribute:primaryProfileOnly:", CFSTR("Mayo Clinic"), CFSTR("http://www.mayoclinic.org/"), 0);
  v3 = [HKDisplayTypePresentation alloc];
  v4 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 6, 3, 9, 0);
  LOBYTE(v13) = 0;
  v5 = MEMORY[0x1E0C9AA70];
  v6 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v3, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v4, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v13, 0, 0, v2);

  v7 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("INTERMENSTRUAL_BLEEDING"), 0, 0, 0, v5);
  v8 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 96);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v8, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 96, 8, MEMORY[0x1E0C9AA60], v9, v1, v6, v7, v0, 0, 0);

  return v10;
}

HKDisplayType *HKDisplayTypeIdentifierInsuranceRecordMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 0, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 0, 0, 0, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, CFSTR("health_records_insurance"), 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("INSURANCE_RECORDS"), 0, CFSTR("Localizable-Clinical-Health-Records"), 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 217);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 217, 27, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierInsulinDeliveryMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  void *v17;
  void *v18;
  void *v19;
  HKDisplayTypeLocalization *v20;
  HKDisplayType *v21;
  void *v22;
  HKDisplayType *v23;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const __CFString *v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD v32[2];

  v32[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 3);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("IU"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("IU"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 10.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 1, 0, 1, 0, 0, 1, v25);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v31 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v32[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v32, &v31, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v26) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 0, 0, 0, 0, 1.0, v26, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("IU"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = &unk_1E9CECC50;
  v28 = CFSTR("INSULIN");
  v29 = v17;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = v18;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("INSULIN_DELIVERY"), 0, 0, 0, v19);

  v21 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 125);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v21, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 125, 14, MEMORY[0x1E0C9AA60], v22, v10, v15, v20, v0, 0, 0);

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierInfrequentMenstrualCyclesMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("MENSTRUAL_CYCLE_DEVIATION_INFREQUENT"), CFSTR("MENSTRUAL_CYCLE_DEVIATION_INFREQUENT"), CFSTR("Localizable-Selene"), 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 265);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 265, 8, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierImmunizationRecordMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 0, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 0, 0, 0, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, CFSTR("health_records_immunizations"), 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("IMMUNIZATION_RECORDS"), 0, CFSTR("Localizable-Clinical-Health-Records"), 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 151);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 151, 19, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierHotFlashesMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_HOT_FLASHES"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 171);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 171, 26, &unk_1E9CEA3B8, v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierHeightMake()
{
  HKDisplayTypeChartingRules *v0;
  void *v1;
  HKStaticDecimalPrecisionRule *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  HKDisplayTypeBehavior *v11;
  HKDisplayTypePresentation *v12;
  HKDisplayTypePresentationConfiguration *v13;
  uint64_t v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayType *v17;
  void *v18;
  HKDisplayType *v19;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD v24[2];

  v24[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("ft"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = v1;
  v2 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  v24[0] = v2;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v24, &v23, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", 0, v3);

  v4 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("cm"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "quantityWithUnit:doubleValue:", v5, 5.0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("cm"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "quantityWithUnit:doubleValue:", v8, 0.0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v6, v9, 0, 0, 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v10);

  BYTE2(v21) = 0;
  LOWORD(v21) = 256;
  v11 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v21);
  v12 = [HKDisplayTypePresentation alloc];
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 2, 3, 0);
  LOBYTE(v22) = 0;
  v14 = MEMORY[0x1E0C9AA70];
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v12, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v13, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v22, 0, 0, 0);

  v16 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("HEIGHT"), 0, 0, 0, v14);
  v17 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 2);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v17, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 2, 6, MEMORY[0x1E0C9AA60], v18, v11, v15, v16, v0, 0, 0);

  return v19;
}

HKDisplayType *HKDisplayTypeIdentifierHeartburnMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_HEARTBURN"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 221);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 221, 26, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierHeartRateVariabilityMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HKDisplayTypeBehavior *v9;
  HKDisplayTypePresentation *v10;
  HKDisplayTypePresentationConfiguration *v11;
  uint64_t v12;
  HKDisplayTypePresentation *v13;
  HKDisplayTypeLocalization *v14;
  HKDisplayType *v15;
  void *v16;
  HKDisplayType *v17;
  uint64_t v19;
  uint64_t v20;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("ms"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 150.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("ms"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 0.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v4, v7, 0, 0, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v8);

  BYTE2(v19) = 0;
  LOWORD(v19) = 256;
  v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v19);
  v10 = [HKDisplayTypePresentation alloc];
  v11 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 1, 3, 0);
  LOBYTE(v20) = 0;
  v12 = MEMORY[0x1E0C9AA70];
  v13 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v10, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v11, MEMORY[0x1E0C9AA70], 1, 0, 0, 0, 1.0, v20, 0, 0, 0);

  v14 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("HEART_RATE_VARIABILITY"), 0, 0, 0, v12);
  v15 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 139);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v15, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 139, 11, MEMORY[0x1E0C9AA60], v16, v9, v13, v14, v0, 0, 0);

  return v17;
}

HKDisplayType *HKDisplayTypeIdentifierHeartRateRecoveryMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HKDisplayTypeBehavior *v9;
  HKDisplayTypePresentation *v10;
  HKDisplayTypePresentationConfiguration *v11;
  HKDisplayTypePresentation *v12;
  HKDisplayTypeLocalization *v13;
  void *v14;
  void *v15;
  void *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const __CFString *v25;
  void *v26;
  _QWORD v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count/min"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 20.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count/min"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 0.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v4, v7, 0, 0, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v8);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v10 = [HKDisplayTypePresentation alloc];
  v11 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 1, 3, 0);
  LOBYTE(v23) = 0;
  v12 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v10, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v11, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v13 = [HKDisplayTypeLocalization alloc];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count/min"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = &unk_1E9CECC50;
  v25 = CFSTR("BEATS_PER_MINUTE");
  v26 = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v27[0] = v15;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v27, &v26, 1);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v13, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("HEART_RATE_RECOVERY"), 0, CFSTR("Localizable-Lyon"), 0, v16);

  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 266);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 266, 11, &unk_1E9CEA4A8, v19, v9, v12, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierHeadphoneAudioExposureMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HKDisplayTypeBehavior *v9;
  HKDisplayTypePresentation *v10;
  HKDisplayTypePresentationConfiguration *v11;
  HKDisplayTypePresentation *v12;
  HKDisplayTypeLocalization *v13;
  void *v14;
  void *v15;
  void *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const __CFString *v25;
  void *v26;
  _QWORD v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 9, 3, 5);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("dBASPL"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 1.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("dBASPL"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 0.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v4, v7, 0, 0, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v8);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v10 = [HKDisplayTypePresentation alloc];
  v11 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 1, 1, 0);
  LOBYTE(v23) = 0;
  v12 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v10, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v11, MEMORY[0x1E0C9AA70], 1, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v13 = [HKDisplayTypeLocalization alloc];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("dBASPL"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = &unk_1E9CECC50;
  v25 = CFSTR("DECIBEL_A_WEIGHTED_SPL");
  v26 = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v27[0] = v15;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v27, &v26, 1);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v13, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("HEADPHONE_AUDIO_EXPOSURE"), 0, 0, 0, v16);

  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 173);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 173, 12, MEMORY[0x1E0C9AA60], v19, v9, v12, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierHeadphoneAudioExposureEventMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  HKDisplayTypeBehavior *v2;
  HKDisplayTypePresentation *v3;
  HKDisplayTypePresentationConfiguration *v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeLocalization *v10;
  HKDisplayType *v11;
  void *v12;
  HKDisplayType *v13;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const __CFString *v18;
  void *v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  BYTE2(v15) = 0;
  LOWORD(v15) = 256;
  v2 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v15);
  v3 = [HKDisplayTypePresentation alloc];
  v4 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 4, 0, 0, 0);
  LOBYTE(v16) = 0;
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v3, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v4, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v16, 0, 0, 0);

  v6 = [HKDisplayTypeLocalization alloc];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = &unk_1E9CECC50;
  v18 = &stru_1E9C4C428;
  v19 = v7;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v20[0] = v8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v20, &v19, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v6, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("HEADPHONE_AUDIO_EXPOSURE_EVENT"), CFSTR("HEADPHONE_AUDIO_EXPOSURE_EVENT"), 0, 0, v9);

  v11 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 199);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v11, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 199, 12, MEMORY[0x1E0C9AA60], v12, v2, v5, v10, v0, 0, 0);

  return v13;
}

HKDisplayType *HKDisplayTypeIdentifierHeadacheMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_HEADACHE"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 160);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 160, 26, &unk_1E9CEA2B0, v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierHandwashingEventMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentation *v13;
  HKDisplayTypeLocalization *v14;
  void *v15;
  void *v16;
  void *v17;
  HKDisplayTypeLocalization *v18;
  HKDisplayType *v19;
  void *v20;
  HKDisplayType *v21;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const __CFString *v26;
  void *v27;
  _QWORD v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 17, 5);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("s"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("s"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 25.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v24) = 0;
  v13 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, MEMORY[0x1E0C9AA70], 0, 0, 0, 1, 1.0, v24, 0, 0, 0);

  v14 = [HKDisplayTypeLocalization alloc];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("s"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = &unk_1E9CECC50;
  v26 = CFSTR("SECONDS_MEDIUM");
  v27 = v15;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v28[0] = v16;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v28, &v27, 1);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v14, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("HANDWASHING_EVENT"), 0, 0, 0, v17);

  v19 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 237);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v19, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 237, 14, MEMORY[0x1E0C9AA60], v20, v10, v13, v18, v0, 0, 0);

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierHairLossMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_HAIR_LOSS"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 232);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 232, 26, &unk_1E9CEA430, v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierGeneralizedBodyAcheMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_BODY_ACHE"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 240);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 240, 26, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierGAD7Make()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 3);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 0, 0, 0, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("GAD7"), 0, CFSTR("Localizable-Chamomile"), 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 287);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 287, 10, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierForcedVitalCapacityMake()
{
  HKDisplayTypeChartingRules *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  HKDisplayTypeBehavior *v8;
  HKDisplayTypePresentation *v9;
  HKDisplayTypePresentationConfiguration *v10;
  uint64_t v11;
  HKDisplayTypePresentation *v12;
  HKDisplayTypeLocalization *v13;
  HKDisplayType *v14;
  void *v15;
  HKDisplayType *v16;
  uint64_t v18;
  uint64_t v19;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  v1 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("L"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "quantityWithUnit:doubleValue:", v2, 0.2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("L"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "quantityWithUnit:doubleValue:", v5, 0.0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v3, v6, 0, 0, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v7);

  BYTE2(v18) = 0;
  LOWORD(v18) = 256;
  v8 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v18);
  v9 = [HKDisplayTypePresentation alloc];
  v10 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 2, 3, 0);
  LOBYTE(v19) = 0;
  v11 = MEMORY[0x1E0C9AA70];
  v12 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v9, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v10, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v19, 0, 0, 0);

  v13 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SPIROMETRY_FVC"), 0, 0, 0, v11);
  v14 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 71);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v14, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 71, 13, MEMORY[0x1E0C9AA60], v15, v8, v12, v13, v0, 0, 0);

  return v16;
}

HKDisplayType *HKDisplayTypeIdentifierForcedExpiratoryVolume1Make()
{
  HKDisplayTypeChartingRules *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  HKDisplayTypeBehavior *v8;
  HKDisplayTypePresentation *v9;
  HKDisplayTypePresentationConfiguration *v10;
  uint64_t v11;
  HKDisplayTypePresentation *v12;
  HKDisplayTypeLocalization *v13;
  HKDisplayType *v14;
  void *v15;
  HKDisplayType *v16;
  uint64_t v18;
  uint64_t v19;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  v1 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("L"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "quantityWithUnit:doubleValue:", v2, 0.2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("L"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "quantityWithUnit:doubleValue:", v5, 0.0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v3, v6, 0, 0, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v7);

  BYTE2(v18) = 0;
  LOWORD(v18) = 256;
  v8 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v18);
  v9 = [HKDisplayTypePresentation alloc];
  v10 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 2, 3, 0);
  LOBYTE(v19) = 0;
  v11 = MEMORY[0x1E0C9AA70];
  v12 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v9, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v10, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v19, 0, 0, 0);

  v13 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SPIROMETRY_FEV1"), 0, 0, 0, v11);
  v14 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 72);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v14, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 72, 13, MEMORY[0x1E0C9AA60], v15, v8, v12, v13, v0, 0, 0);

  return v16;
}

HKDisplayType *HKDisplayTypeIdentifierFlightsClimbedMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  void *v17;
  void *v18;
  void *v19;
  HKDisplayTypeLocalization *v20;
  HKDisplayType *v21;
  void *v22;
  HKDisplayType *v23;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const __CFString *v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD v32[2];

  v32[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 3.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v25);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v31 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v32[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v32, &v31, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v26) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 1, 0, 0, 0, 1.0, v26, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = &unk_1E9CECC50;
  v28 = CFSTR("FLOORS_LOWER");
  v29 = v17;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = v18;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("FLIGHTS_CLIMBED"), CFSTR("FLOORS"), 0, 0, v19);

  v21 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 12);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v21, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 12, 2, MEMORY[0x1E0C9AA60], v22, v10, v15, v20, v0, 0, 0);

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierFitzpatrickSkinTypeMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypeSummaryAttribution *v2;
  HKDisplayTypePresentation *v3;
  HKDisplayTypePresentationConfiguration *v4;
  uint64_t v5;
  HKDisplayTypePresentation *v6;
  HKDisplayTypeLocalization *v7;
  HKDisplayType *v8;
  void *v9;
  HKDisplayType *v10;
  uint64_t v12;
  uint64_t v13;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  BYTE2(v12) = 0;
  LOWORD(v12) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v12);
  v2 = -[HKDisplayTypeSummaryAttribution initWithAttribution:urlAttribute:primaryProfileOnly:]([HKDisplayTypeSummaryAttribution alloc], "initWithAttribution:urlAttribute:primaryProfileOnly:", CFSTR("Mayo Clinic"), CFSTR("http://www.mayoclinic.org/"), 0);
  v3 = [HKDisplayTypePresentation alloc];
  v4 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 0, 0, 0, 0);
  LOBYTE(v13) = 0;
  v5 = MEMORY[0x1E0C9AA70];
  v6 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v3, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v4, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v13, 0, 0, v2);

  v7 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("FITZPATRICK_SKIN_TYPE"), 0, 0, 0, v5);
  v8 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 88);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v8, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 88, 7, MEMORY[0x1E0C9AA60], v9, v1, v6, v7, v0, 0, 0);

  return v10;
}

HKDisplayType *HKDisplayTypeIdentifierFeverMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_FEVER"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 203);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 203, 26, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierFatigueMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_FATIGUE"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 167);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 167, 26, &unk_1E9CEA358, v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierFaintingMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_FAINTING"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 206);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 206, 26, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierEnvironmentalSoundReductionMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HKDisplayTypeBehavior *v9;
  HKDisplayTypePresentation *v10;
  HKDisplayTypePresentationConfiguration *v11;
  HKDisplayTypePresentation *v12;
  HKDisplayTypeLocalization *v13;
  void *v14;
  void *v15;
  void *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const __CFString *v25;
  void *v26;
  _QWORD v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 9, 3, 5);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("dBASPL"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 1.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("dBASPL"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 0.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v4, v7, 0, 0, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v8);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v10 = [HKDisplayTypePresentation alloc];
  v11 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 1, 1, 0);
  LOBYTE(v23) = 0;
  v12 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v10, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v11, MEMORY[0x1E0C9AA70], 1, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v13 = [HKDisplayTypeLocalization alloc];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("dBASPL"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = &unk_1E9CECC50;
  v25 = CFSTR("DECIBEL_A_WEIGHTED_SPL");
  v26 = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v27[0] = v15;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v27, &v26, 1);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v13, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("ENVIRONMENTAL_SOUND_REDUCTION"), 0, 0, 0, v16);

  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 272);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 272, 12, MEMORY[0x1E0C9AA60], v19, v9, v12, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierEnvironmentalAudioExposureMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HKDisplayTypeBehavior *v9;
  HKDisplayTypePresentation *v10;
  HKDisplayTypePresentationConfiguration *v11;
  HKDisplayTypePresentation *v12;
  HKDisplayTypeLocalization *v13;
  void *v14;
  void *v15;
  void *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const __CFString *v25;
  void *v26;
  _QWORD v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 9, 3, 5);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("dBASPL"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 1.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("dBASPL"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 0.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v4, v7, 0, 0, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v8);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v10 = [HKDisplayTypePresentation alloc];
  v11 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 1, 1, 0);
  LOBYTE(v23) = 0;
  v12 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v10, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v11, MEMORY[0x1E0C9AA70], 1, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v13 = [HKDisplayTypeLocalization alloc];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("dBASPL"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = &unk_1E9CECC50;
  v25 = CFSTR("DECIBEL_A_WEIGHTED_SPL");
  v26 = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v25, &v24, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v27[0] = v15;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v27, &v26, 1);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v13, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("ENVIRONMENTAL_AUDIO_EXPOSURE"), 0, 0, 0, v16);

  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 172);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 172, 12, MEMORY[0x1E0C9AA60], v19, v9, v12, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierEnvironmentalAudioExposureEventMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  HKDisplayTypeBehavior *v2;
  HKDisplayTypePresentation *v3;
  HKDisplayTypePresentationConfiguration *v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeLocalization *v10;
  HKDisplayType *v11;
  void *v12;
  HKDisplayType *v13;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const __CFString *v18;
  void *v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  BYTE2(v15) = 0;
  LOWORD(v15) = 256;
  v2 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v15);
  v3 = [HKDisplayTypePresentation alloc];
  v4 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 4, 0, 0, 0);
  LOBYTE(v16) = 0;
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v3, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v4, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v16, 0, 0, 0);

  v6 = [HKDisplayTypeLocalization alloc];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = &unk_1E9CECC50;
  v18 = &stru_1E9C4C428;
  v19 = v7;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v20[0] = v8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v20, &v19, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v6, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("AUDIO_EXPOSURE_EVENT"), CFSTR("AUDIO_EXPOSURE_EVENT"), 0, 0, v9);

  v11 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 178);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v11, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 178, 12, MEMORY[0x1E0C9AA60], v12, v2, v5, v10, v0, 0, 0);

  return v13;
}

HKDisplayType *HKDisplayTypeIdentifierElectrodermalActivityMake()
{
  HKDisplayTypeChartingRules *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  HKDisplayTypeBehavior *v8;
  HKDisplayTypePresentation *v9;
  HKDisplayTypePresentationConfiguration *v10;
  uint64_t v11;
  HKDisplayTypePresentation *v12;
  HKDisplayTypeLocalization *v13;
  HKDisplayType *v14;
  void *v15;
  HKDisplayType *v16;
  uint64_t v18;
  uint64_t v19;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  v1 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mcS"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "quantityWithUnit:doubleValue:", v2, 0.2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mcS"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "quantityWithUnit:doubleValue:", v5, 0.0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v3, v6, 0, 0, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v7);

  BYTE2(v18) = 0;
  LOWORD(v18) = 256;
  v8 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v18);
  v9 = [HKDisplayTypePresentation alloc];
  v10 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 2, 3, 0);
  LOBYTE(v19) = 0;
  v11 = MEMORY[0x1E0C9AA70];
  v12 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v9, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v10, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v19, 0, 0, 0);

  v13 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("ELECTRODERMAL_ACTIVITY"), 0, 0, 0, v11);
  v14 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 58);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v14, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 58, 6, MEMORY[0x1E0C9AA60], v15, v8, v12, v13, v0, 0, 0);

  return v16;
}

HKDisplayType *HKDisplayTypeIdentifierElectrocardiogramMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  HKDisplayTypePresentation *v4;
  HKDisplayTypeLocalization *v5;
  void *v6;
  void *v7;
  void *v8;
  HKDisplayTypeLocalization *v9;
  HKDisplayType *v10;
  void *v11;
  HKDisplayType *v12;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const __CFString *v17;
  void *v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  BYTE2(v14) = 0;
  LOWORD(v14) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v14);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 4, 0, 0, 0);
  LOBYTE(v15) = 0;
  v4 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v15, 0, 0, 0);

  v5 = [HKDisplayTypeLocalization alloc];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = &unk_1E9CECC50;
  v17 = &stru_1E9C4C428;
  v18 = v6;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = v7;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, &v18, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v5, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("ELECTROCARDIOGRAM"), 0, CFSTR("Localizable-Cinnamon"), 0, v8);

  v10 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 144);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v10, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 144, 11, MEMORY[0x1E0C9AA60], v11, v1, v4, v9, v0, 0, 0);

  return v12;
}

HKDisplayType *HKDisplayTypeIdentifierDrySkinMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_DRY_SKIN"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 233);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 233, 26, &unk_1E9CEA448, v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierDownhillSnowSportsDistanceMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mi"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mi"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 1.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 1, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("DOWNHILL_SNOW_SPORTS_DISTANCE"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 138);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 138, 2, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDizzinessMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_DIZZINESS"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 207);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 207, 26, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierDistanceWalkingRunningMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mi"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mi"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 0.1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 1, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("DISTANCE"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 8);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 8, 2, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryZincMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 1.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 0, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("ZINC"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 49);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 49, 4, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryWaterMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypeSummaryAttribution *v11;
  HKDisplayTypePresentation *v12;
  HKDisplayTypePresentationConfiguration *v13;
  HKDisplayTypePresentationConfiguration *v14;
  void *v15;
  HKDisplayTypePresentation *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayTypeLocalization *v18;
  HKDisplayType *v19;
  void *v20;
  HKDisplayType *v21;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mL"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mL"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 10.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  v11 = -[HKDisplayTypeSummaryAttribution initWithAttribution:urlAttribute:primaryProfileOnly:]([HKDisplayTypeSummaryAttribution alloc], "initWithAttribution:urlAttribute:primaryProfileOnly:", CFSTR("Mayo Clinic"), CFSTR("http://www.mayoclinic.org/"), 0);
  v12 = [HKDisplayTypePresentation alloc];
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v25 = &unk_1E9CECC68;
  v14 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v26[0] = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, &v25, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v24) = 0;
  v16 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v12, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v13, v15, 0, 0, 0, 0, 1.0, v24, 0, 0, v11);

  v17 = [HKDisplayTypeLocalization alloc];
  v18 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v17, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("WATER"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v19 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 87);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v19, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 87, 4, MEMORY[0x1E0C9AA60], v20, v10, v16, v18, v0, 0, 0);

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryVitaminKMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mcg"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mcg"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 5.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 0, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("VITAMIN_K"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 37);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 37, 4, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryVitaminEMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 0.5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 0, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("VITAMIN_E"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 36);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 36, 4, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryVitaminDMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypeSummaryAttribution *v11;
  HKDisplayTypePresentation *v12;
  HKDisplayTypePresentationConfiguration *v13;
  HKDisplayTypePresentationConfiguration *v14;
  void *v15;
  HKDisplayTypePresentation *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayTypeLocalization *v18;
  HKDisplayType *v19;
  void *v20;
  HKDisplayType *v21;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mcg"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mcg"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 0.5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  v11 = -[HKDisplayTypeSummaryAttribution initWithAttribution:urlAttribute:primaryProfileOnly:]([HKDisplayTypeSummaryAttribution alloc], "initWithAttribution:urlAttribute:primaryProfileOnly:", CFSTR("NIH MedlinePlus"), 0, 0);
  v12 = [HKDisplayTypePresentation alloc];
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v25 = &unk_1E9CECC68;
  v14 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v26[0] = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, &v25, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v24) = 0;
  v16 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v12, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v13, v15, 0, 0, 0, 0, 1.0, v24, 0, 0, v11);

  v17 = [HKDisplayTypeLocalization alloc];
  v18 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v17, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("VITAMIN_D"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v19 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 35);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v19, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 35, 4, MEMORY[0x1E0C9AA60], v20, v10, v16, v18, v0, 0, 0);

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryVitaminCMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypeSummaryAttribution *v11;
  HKDisplayTypePresentation *v12;
  HKDisplayTypePresentationConfiguration *v13;
  HKDisplayTypePresentationConfiguration *v14;
  void *v15;
  HKDisplayTypePresentation *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayTypeLocalization *v18;
  HKDisplayType *v19;
  void *v20;
  HKDisplayType *v21;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 10.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  v11 = -[HKDisplayTypeSummaryAttribution initWithAttribution:urlAttribute:primaryProfileOnly:]([HKDisplayTypeSummaryAttribution alloc], "initWithAttribution:urlAttribute:primaryProfileOnly:", CFSTR("Mayo Clinic"), CFSTR("http://www.mayoclinic.org/"), 0);
  v12 = [HKDisplayTypePresentation alloc];
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v25 = &unk_1E9CECC68;
  v14 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v26[0] = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, &v25, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v24) = 0;
  v16 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v12, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v13, v15, 0, 0, 0, 0, 1.0, v24, 0, 0, v11);

  v17 = [HKDisplayTypeLocalization alloc];
  v18 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v17, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("VITAMIN_C"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v19 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 34);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v19, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 34, 4, MEMORY[0x1E0C9AA60], v20, v10, v16, v18, v0, 0, 0);

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryVitaminB6Make()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 0.2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 0, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("VITAMIN_B6"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 32);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 32, 4, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryVitaminB12Make()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypeSummaryAttribution *v11;
  HKDisplayTypePresentation *v12;
  HKDisplayTypePresentationConfiguration *v13;
  HKDisplayTypePresentationConfiguration *v14;
  void *v15;
  HKDisplayTypePresentation *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayTypeLocalization *v18;
  HKDisplayType *v19;
  void *v20;
  HKDisplayType *v21;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mcg"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mcg"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 0.2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  v11 = -[HKDisplayTypeSummaryAttribution initWithAttribution:urlAttribute:primaryProfileOnly:]([HKDisplayTypeSummaryAttribution alloc], "initWithAttribution:urlAttribute:primaryProfileOnly:", CFSTR("National Institutes of Health, Office of Dietary Supplements"), 0, 0);
  v12 = [HKDisplayTypePresentation alloc];
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v25 = &unk_1E9CECC68;
  v14 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v26[0] = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, &v25, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v24) = 0;
  v16 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v12, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v13, v15, 0, 0, 0, 0, 1.0, v24, 0, 0, v11);

  v17 = [HKDisplayTypeLocalization alloc];
  v18 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v17, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("VITAMIN_B12"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v19 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 33);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v19, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 33, 4, MEMORY[0x1E0C9AA60], v20, v10, v16, v18, v0, 0, 0);

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryVitaminAMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mcg"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mcg"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 20.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 0, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("VITAMIN_A"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 31);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 31, 4, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryThiaminMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 0.2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 0, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("THIAMIN"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 40);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 40, 4, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietarySugarMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("g"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("g"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 2.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 0, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SUGAR"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 28);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 28, 4, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietarySodiumMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypeSummaryAttribution *v11;
  HKDisplayTypePresentation *v12;
  HKDisplayTypePresentationConfiguration *v13;
  HKDisplayTypePresentationConfiguration *v14;
  void *v15;
  HKDisplayTypePresentation *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayTypeLocalization *v18;
  HKDisplayType *v19;
  void *v20;
  HKDisplayType *v21;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 10.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  v11 = -[HKDisplayTypeSummaryAttribution initWithAttribution:urlAttribute:primaryProfileOnly:]([HKDisplayTypeSummaryAttribution alloc], "initWithAttribution:urlAttribute:primaryProfileOnly:", CFSTR("Mayo Clinic"), CFSTR("http://www.mayoclinic.org/"), 0);
  v12 = [HKDisplayTypePresentation alloc];
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v25 = &unk_1E9CECC68;
  v14 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v26[0] = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, &v25, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v24) = 0;
  v16 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v12, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v13, v15, 0, 0, 0, 0, 1.0, v24, 0, 0, v11);

  v17 = [HKDisplayTypeLocalization alloc];
  v18 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v17, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SODIUM"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v19 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 25);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v19, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 25, 4, MEMORY[0x1E0C9AA60], v20, v10, v16, v18, v0, 0, 0);

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierDietarySeleniumMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypeSummaryAttribution *v11;
  HKDisplayTypePresentation *v12;
  HKDisplayTypePresentationConfiguration *v13;
  HKDisplayTypePresentationConfiguration *v14;
  void *v15;
  HKDisplayTypePresentation *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayTypeLocalization *v18;
  HKDisplayType *v19;
  void *v20;
  HKDisplayType *v21;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mcg"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mcg"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 2.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  v11 = -[HKDisplayTypeSummaryAttribution initWithAttribution:urlAttribute:primaryProfileOnly:]([HKDisplayTypeSummaryAttribution alloc], "initWithAttribution:urlAttribute:primaryProfileOnly:", CFSTR("National Institutes of Health, Office of Dietary Supplements"), 0, 0);
  v12 = [HKDisplayTypePresentation alloc];
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v25 = &unk_1E9CECC68;
  v14 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v26[0] = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, &v25, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v24) = 0;
  v16 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v12, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v13, v15, 0, 0, 0, 0, 1.0, v24, 0, 0, v11);

  v17 = [HKDisplayTypeLocalization alloc];
  v18 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v17, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SELENIUM"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v19 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 50);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v19, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 50, 4, MEMORY[0x1E0C9AA60], v20, v10, v16, v18, v0, 0, 0);

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryRiboflavinMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 0.2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 0, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("RIBOFLAVIN"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 41);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 41, 4, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryProteinMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("g"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("g"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 2.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 0, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("PROTEIN"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 30);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 30, 4, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryPotassiumMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 10.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 0, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("POTASSIUM"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 56);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 56, 4, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryPhosphorusMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypeSummaryAttribution *v11;
  HKDisplayTypePresentation *v12;
  HKDisplayTypePresentationConfiguration *v13;
  HKDisplayTypePresentationConfiguration *v14;
  void *v15;
  HKDisplayTypePresentation *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayTypeLocalization *v18;
  HKDisplayType *v19;
  void *v20;
  HKDisplayType *v21;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 10.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  v11 = -[HKDisplayTypeSummaryAttribution initWithAttribution:urlAttribute:primaryProfileOnly:]([HKDisplayTypeSummaryAttribution alloc], "initWithAttribution:urlAttribute:primaryProfileOnly:", CFSTR("National Institute of Diabetes and Digestive and Kidney Disorders"), 0, 0);
  v12 = [HKDisplayTypePresentation alloc];
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v25 = &unk_1E9CECC68;
  v14 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v26[0] = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, &v25, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v24) = 0;
  v16 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v12, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v13, v15, 0, 0, 0, 0, 1.0, v24, 0, 0, v11);

  v17 = [HKDisplayTypeLocalization alloc];
  v18 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v17, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("PHOSPHORUS"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v19 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 46);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v19, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 46, 4, MEMORY[0x1E0C9AA60], v20, v10, v16, v18, v0, 0, 0);

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryPantothenicAcidMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 0.1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 0, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("PANTOTHENIC_ACID"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 45);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 45, 4, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryNiacinMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypeSummaryAttribution *v11;
  HKDisplayTypePresentation *v12;
  HKDisplayTypePresentationConfiguration *v13;
  HKDisplayTypePresentationConfiguration *v14;
  void *v15;
  HKDisplayTypePresentation *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayTypeLocalization *v18;
  HKDisplayType *v19;
  void *v20;
  HKDisplayType *v21;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 1.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  v11 = -[HKDisplayTypeSummaryAttribution initWithAttribution:urlAttribute:primaryProfileOnly:]([HKDisplayTypeSummaryAttribution alloc], "initWithAttribution:urlAttribute:primaryProfileOnly:", CFSTR("National Cancer Institute"), 0, 0);
  v12 = [HKDisplayTypePresentation alloc];
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v25 = &unk_1E9CECC68;
  v14 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v26[0] = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, &v25, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v24) = 0;
  v16 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v12, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v13, v15, 0, 0, 0, 0, 1.0, v24, 0, 0, v11);

  v17 = [HKDisplayTypeLocalization alloc];
  v18 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v17, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("NIACIN"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v19 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 42);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v19, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 42, 4, MEMORY[0x1E0C9AA60], v20, v10, v16, v18, v0, 0, 0);

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryMolybdenumMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mcg"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mcg"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 2.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 0, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("MOLYBDENUM"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 54);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 54, 4, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryManganeseMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 0.1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 0, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("MANGANESE"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 52);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 52, 4, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryMagnesiumMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 5.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 0, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("MAGNESIUM"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 48);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 48, 4, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryIronMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 2.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 0, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("IRON"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 39);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 39, 4, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryIodineMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypeSummaryAttribution *v11;
  HKDisplayTypePresentation *v12;
  HKDisplayTypePresentationConfiguration *v13;
  HKDisplayTypePresentationConfiguration *v14;
  void *v15;
  HKDisplayTypePresentation *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayTypeLocalization *v18;
  HKDisplayType *v19;
  void *v20;
  HKDisplayType *v21;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mcg"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mcg"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 5.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  v11 = -[HKDisplayTypeSummaryAttribution initWithAttribution:urlAttribute:primaryProfileOnly:]([HKDisplayTypeSummaryAttribution alloc], "initWithAttribution:urlAttribute:primaryProfileOnly:", CFSTR("National Institutes of Health, Office of Dietary Supplements"), 0, 0);
  v12 = [HKDisplayTypePresentation alloc];
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v25 = &unk_1E9CECC68;
  v14 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v26[0] = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, &v25, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v24) = 0;
  v16 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v12, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v13, v15, 0, 0, 0, 0, 1.0, v24, 0, 0, v11);

  v17 = [HKDisplayTypeLocalization alloc];
  v18 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v17, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("IODINE"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v19 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 47);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v19, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 47, 4, MEMORY[0x1E0C9AA60], v20, v10, v16, v18, v0, 0, 0);

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryFolateMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypeSummaryAttribution *v11;
  HKDisplayTypePresentation *v12;
  HKDisplayTypePresentationConfiguration *v13;
  HKDisplayTypePresentationConfiguration *v14;
  void *v15;
  HKDisplayTypePresentation *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayTypeLocalization *v18;
  HKDisplayType *v19;
  void *v20;
  HKDisplayType *v21;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mcg"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mcg"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 5.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  v11 = -[HKDisplayTypeSummaryAttribution initWithAttribution:urlAttribute:primaryProfileOnly:]([HKDisplayTypeSummaryAttribution alloc], "initWithAttribution:urlAttribute:primaryProfileOnly:", CFSTR("National Institutes of Health, Office of Dietary Supplements"), 0, 0);
  v12 = [HKDisplayTypePresentation alloc];
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v25 = &unk_1E9CECC68;
  v14 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v26[0] = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, &v25, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v24) = 0;
  v16 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v12, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v13, v15, 0, 0, 0, 0, 1.0, v24, 0, 0, v11);

  v17 = [HKDisplayTypeLocalization alloc];
  v18 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v17, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("FOLATE"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v19 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 43);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v19, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 43, 4, MEMORY[0x1E0C9AA60], v20, v10, v16, v18, v0, 0, 0);

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryFiberMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("g"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("g"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 2.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 0, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("FIBER"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 27);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 27, 4, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryFatTotalMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("g"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("g"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 2.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 0, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("TOTAL_FAT"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 20);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 20, 4, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryFatSaturatedMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypeSummaryAttribution *v11;
  HKDisplayTypePresentation *v12;
  HKDisplayTypePresentationConfiguration *v13;
  HKDisplayTypePresentationConfiguration *v14;
  void *v15;
  HKDisplayTypePresentation *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayTypeLocalization *v18;
  HKDisplayType *v19;
  void *v20;
  HKDisplayType *v21;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("g"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("g"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 2.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  v11 = -[HKDisplayTypeSummaryAttribution initWithAttribution:urlAttribute:primaryProfileOnly:]([HKDisplayTypeSummaryAttribution alloc], "initWithAttribution:urlAttribute:primaryProfileOnly:", CFSTR("Mayo Clinic"), CFSTR("http://www.mayoclinic.org/"), 0);
  v12 = [HKDisplayTypePresentation alloc];
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v25 = &unk_1E9CECC68;
  v14 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v26[0] = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, &v25, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v24) = 0;
  v16 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v12, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v13, v15, 0, 0, 0, 0, 1.0, v24, 0, 0, v11);

  v17 = [HKDisplayTypeLocalization alloc];
  v18 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v17, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SATURATED_FAT"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v19 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 23);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v19, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 23, 4, MEMORY[0x1E0C9AA60], v20, v10, v16, v18, v0, 0, 0);

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryFatPolyunsaturatedMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypeSummaryAttribution *v11;
  HKDisplayTypePresentation *v12;
  HKDisplayTypePresentationConfiguration *v13;
  HKDisplayTypePresentationConfiguration *v14;
  void *v15;
  HKDisplayTypePresentation *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayTypeLocalization *v18;
  HKDisplayType *v19;
  void *v20;
  HKDisplayType *v21;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("g"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("g"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 2.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  v11 = -[HKDisplayTypeSummaryAttribution initWithAttribution:urlAttribute:primaryProfileOnly:]([HKDisplayTypeSummaryAttribution alloc], "initWithAttribution:urlAttribute:primaryProfileOnly:", CFSTR("Mayo Clinic"), CFSTR("http://www.mayoclinic.org/"), 0);
  v12 = [HKDisplayTypePresentation alloc];
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v25 = &unk_1E9CECC68;
  v14 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v26[0] = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, &v25, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v24) = 0;
  v16 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v12, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v13, v15, 0, 0, 0, 0, 1.0, v24, 0, 0, v11);

  v17 = [HKDisplayTypeLocalization alloc];
  v18 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v17, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("POLYUNSATURATED_FAT"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v19 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 21);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v19, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 21, 4, MEMORY[0x1E0C9AA60], v20, v10, v16, v18, v0, 0, 0);

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryFatMonounsaturatedMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypeSummaryAttribution *v11;
  HKDisplayTypePresentation *v12;
  HKDisplayTypePresentationConfiguration *v13;
  HKDisplayTypePresentationConfiguration *v14;
  void *v15;
  HKDisplayTypePresentation *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayTypeLocalization *v18;
  HKDisplayType *v19;
  void *v20;
  HKDisplayType *v21;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("g"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("g"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 2.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  v11 = -[HKDisplayTypeSummaryAttribution initWithAttribution:urlAttribute:primaryProfileOnly:]([HKDisplayTypeSummaryAttribution alloc], "initWithAttribution:urlAttribute:primaryProfileOnly:", CFSTR("Mayo Clinic"), CFSTR("http://www.mayoclinic.org/"), 0);
  v12 = [HKDisplayTypePresentation alloc];
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v25 = &unk_1E9CECC68;
  v14 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v26[0] = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, &v25, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v24) = 0;
  v16 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v12, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v13, v15, 0, 0, 0, 0, 1.0, v24, 0, 0, v11);

  v17 = [HKDisplayTypeLocalization alloc];
  v18 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v17, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("MONOUNSATURATED_FAT"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v19 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 22);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v19, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 22, 4, MEMORY[0x1E0C9AA60], v20, v10, v16, v18, v0, 0, 0);

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryCopperMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mcg"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mcg"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 10.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 0, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("COPPER"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 51);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 51, 4, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryChromiumMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mcg"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mcg"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 5.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 0, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("CHROMIUM"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 53);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 53, 4, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryCholesterolMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 5.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 0, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("CHOLESTEROL"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 24);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 24, 4, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryChlorideMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 50.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 0, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("CHLORIDE"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 55);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 55, 4, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryCarbohydratesMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("g"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("g"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 2.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 0, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("CARBOHYDRATES"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 26);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 26, 4, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryCalciumMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypeSummaryAttribution *v11;
  HKDisplayTypePresentation *v12;
  HKDisplayTypePresentationConfiguration *v13;
  HKDisplayTypePresentationConfiguration *v14;
  void *v15;
  HKDisplayTypePresentation *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayTypeLocalization *v18;
  HKDisplayType *v19;
  void *v20;
  HKDisplayType *v21;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 10.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  v11 = -[HKDisplayTypeSummaryAttribution initWithAttribution:urlAttribute:primaryProfileOnly:]([HKDisplayTypeSummaryAttribution alloc], "initWithAttribution:urlAttribute:primaryProfileOnly:", CFSTR("National Institutes of Health, Office of Dietary Supplements"), 0, 0);
  v12 = [HKDisplayTypePresentation alloc];
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v25 = &unk_1E9CECC68;
  v14 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v26[0] = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, &v25, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v24) = 0;
  v16 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v12, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v13, v15, 1, 0, 0, 0, 1.0, v24, 0, 0, v11);

  v17 = [HKDisplayTypeLocalization alloc];
  v18 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v17, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("CALCIUM"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v19 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 38);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v19, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 38, 4, MEMORY[0x1E0C9AA60], v20, v10, v16, v18, v0, 0, 0);

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryCaffeineMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 5.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 0, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("CAFFEINE"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 78);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 78, 4, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDietaryBiotinMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mcg"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mcg"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 2.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 0, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("BIOTIN"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 44);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 44, 4, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierDiarrheaMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_DIARRHEA"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 166);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 166, 26, &unk_1E9CEA340, v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierDateOfBirthMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 0, 0, 0, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("DATE_OF_BIRTH"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 65);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 65, 7, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierCyclingSpeedMake()
{
  HKTieredDecimalPrecisionRule *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HKDisplayTypeBehavior *v15;
  HKDisplayTypePresentation *v16;
  HKDisplayTypePresentationConfiguration *v17;
  uint64_t v18;
  HKDisplayTypePresentation *v19;
  HKDisplayTypeLocalization *v20;
  HKDisplayType *v21;
  void *v22;
  HKDisplayType *v23;
  uint64_t v25;
  uint64_t v26;
  HKDisplayTypeChartingRules *v27;

  v27 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 16, 5);
  v0 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v27, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v0, 0);

  v1 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m/s"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "quantityWithUnit:doubleValue:", v2, 0.1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m/s"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "quantityWithUnit:doubleValue:", v5, 0.0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m/s"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "quantityWithUnit:doubleValue:", v8, 0.0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m/s"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "quantityWithUnit:doubleValue:", v11, 13.4);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v9, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v3, v6, 0, 0, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v27, "setAxisScalingRule:", v14);

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  v15 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v25);
  v16 = [HKDisplayTypePresentation alloc];
  v17 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 1, 3, 0);
  LOBYTE(v26) = 0;
  v18 = MEMORY[0x1E0C9AA70];
  v19 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v16, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v17, MEMORY[0x1E0C9AA70], 1, 0, 0, 0, 1.0, v26, 0, 0, 0);

  v20 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("CYCLING_SPEED"), 0, 0, 0, v18);
  v21 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 281);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v21, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 281, 2, MEMORY[0x1E0C9AA60], v22, v15, v19, v20, v27, 0, 0);

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierCyclingPowerMake()
{
  HKTieredDecimalPrecisionRule *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HKDisplayTypeBehavior *v15;
  HKDisplayTypePresentation *v16;
  HKDisplayTypePresentationConfiguration *v17;
  uint64_t v18;
  HKDisplayTypePresentation *v19;
  HKDisplayTypeLocalization *v20;
  HKDisplayType *v21;
  void *v22;
  HKDisplayType *v23;
  uint64_t v25;
  uint64_t v26;
  HKDisplayTypeChartingRules *v27;

  v27 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  v0 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v27, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v0, 0);

  v1 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("W"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "quantityWithUnit:doubleValue:", v2, 100.0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("W"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "quantityWithUnit:doubleValue:", v5, 0.0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("W"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "quantityWithUnit:doubleValue:", v8, 0.0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("W"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "quantityWithUnit:doubleValue:", v11, 300.0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v9, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v3, v6, 0, 0, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v27, "setAxisScalingRule:", v14);

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  v15 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v25);
  v16 = [HKDisplayTypePresentation alloc];
  v17 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 1, 3, 0);
  LOBYTE(v26) = 0;
  v18 = MEMORY[0x1E0C9AA70];
  v19 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v16, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v17, MEMORY[0x1E0C9AA70], 1, 0, 0, 0, 1.0, v26, 0, 0, 0);

  v20 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("CYCLING_POWER"), 0, 0, 0, v18);
  v21 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 280);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v21, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 280, 2, MEMORY[0x1E0C9AA60], v22, v15, v19, v20, v27, 0, 0);

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierCyclingFunctionalThresholdPowerMake()
{
  HKTieredDecimalPrecisionRule *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HKDisplayTypeBehavior *v15;
  HKDisplayTypePresentation *v16;
  HKDisplayTypePresentationConfiguration *v17;
  uint64_t v18;
  HKDisplayTypePresentation *v19;
  HKDisplayTypeLocalization *v20;
  HKDisplayType *v21;
  void *v22;
  HKDisplayType *v23;
  uint64_t v25;
  uint64_t v26;
  HKDisplayTypeChartingRules *v27;

  v27 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  v0 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v27, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v0, 0);

  v1 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("W"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "quantityWithUnit:doubleValue:", v2, 20.0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("W"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "quantityWithUnit:doubleValue:", v5, 0.0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("W"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "quantityWithUnit:doubleValue:", v8, 50.0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("W"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "quantityWithUnit:doubleValue:", v11, 200.0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v9, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v3, v6, 0, 0, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v27, "setAxisScalingRule:", v14);

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  v15 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v25);
  v16 = [HKDisplayTypePresentation alloc];
  v17 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 1, 3, 0);
  LOBYTE(v26) = 0;
  v18 = MEMORY[0x1E0C9AA70];
  v19 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v16, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v17, MEMORY[0x1E0C9AA70], 1, 0, 0, 0, 1.0, v26, 0, 0, 0);

  v20 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("CYCLING_FUNCTIONAL_THRESHOLD_POWER"), 0, 0, 0, v18);
  v21 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 283);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v21, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 283, 2, MEMORY[0x1E0C9AA60], v22, v15, v19, v20, v27, 0, 0);

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierCyclingDistanceMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mi"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mi"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 1.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 1, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("CYCLING_DISTANCE"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 83);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 83, 2, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierCyclingCadenceMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HKDisplayTypeBehavior *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypePresentationConfiguration *v16;
  HKDisplayTypePresentation *v17;
  HKDisplayTypeLocalization *v18;
  void *v19;
  void *v20;
  void *v21;
  HKDisplayTypeLocalization *v22;
  HKDisplayType *v23;
  void *v24;
  HKDisplayType *v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  HKDisplayTypeChartingRules *v31;
  void *v32;
  const __CFString *v33;
  void *v34;
  _QWORD v35[2];

  v35[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  v31 = v0;
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count/min"));
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v30, 0.1);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count/min"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "quantityWithUnit:doubleValue:", v4, 0.0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count/min"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "quantityWithUnit:doubleValue:", v7, 0.0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count/min"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "quantityWithUnit:doubleValue:", v10, 100.0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v8, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v29, v5, 0, 0, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v13);

  BYTE2(v27) = 0;
  LOWORD(v27) = 256;
  v14 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v27);
  v15 = [HKDisplayTypePresentation alloc];
  v16 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 1, 3, 0);
  LOBYTE(v28) = 0;
  v17 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v15, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v16, MEMORY[0x1E0C9AA70], 1, 0, 0, 0, 1.0, v28, 0, 0, 0);

  v18 = [HKDisplayTypeLocalization alloc];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count/min"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = &unk_1E9CECC50;
  v33 = CFSTR("ROTATIONS_PER_MINUTE");
  v34 = v19;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v33, &v32, 1);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v35[0] = v20;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v35, &v34, 1);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v18, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("CYCLING_CADENCE"), 0, 0, 0, v21);

  v23 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 282);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v23, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 282, 2, MEMORY[0x1E0C9AA60], v24, v14, v17, v22, v31, 0, 0);

  return v25;
}

HKDisplayType *HKDisplayTypeIdentifierCoughingMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_COUGHING"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 222);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 222, 26, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierContraceptiveMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("CONTRACEPTIVE"), CFSTR("CONTRACEPTIVE"), 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 193);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 193, 8, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierConstipationMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_CONSTIPATION"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 165);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 165, 26, &unk_1E9CEA328, v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierCongestionMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_CONGESTION"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 225);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 225, 26, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierConditionRecordMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 0, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 0, 0, 0, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, CFSTR("health_records_conditions"), 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("CONDITION_RECORDS"), 0, CFSTR("Localizable-Clinical-Health-Records"), 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 150);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 150, 18, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierClinicalNoteRecordMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 0, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 0, 0, 0, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, CFSTR("health_records_clinical_notes"), 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("CLINICAL_NOTES_RECORDS"), 0, CFSTR("Localizable-Clinical-Notes"), 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 268);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 268, 30, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierChillsMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_CHILLS"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 231);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 231, 26, &unk_1E9CEA418, v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierChestTightnessOrPainMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_CHEST_TIGHTNESS_OR_PAIN"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 205);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 205, 26, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierCervicalMucusQualityMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 10, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("CERVICAL_MUCUS_QUALITY"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 91);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 91, 8, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierCardioFitnessMedicationsUseMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 0, 0, 0, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("CARDIO_FITNESS_MEDICATIONS_USE"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 218);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 218, 7, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierCDADocumentMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 0;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 0, 0, 0, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("CLINICAL_DOCUMENTS"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 107);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 107, 9, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierBradycardiaEventMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  void *v2;
  char v3;
  HKDisplayTypeSummaryAttribution *v4;
  HKDisplayTypeSummaryAttribution *v5;
  void *v6;
  void *v7;
  HKDisplayTypePresentation *v8;
  HKDisplayTypePresentationConfiguration *v9;
  uint64_t v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypeLocalization *v12;
  HKDisplayType *v13;
  void *v14;
  HKDisplayType *v15;
  uint64_t v17;
  uint64_t v18;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  BYTE2(v17) = 0;
  LOWORD(v17) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v17);
  objc_msgSend(MEMORY[0x1E0CB6F18], "sharedBehavior");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isiPad");

  v4 = 0;
  if ((v3 & 1) == 0)
  {
    v5 = [HKDisplayTypeSummaryAttribution alloc];
    HKHealthKitFrameworkBundle();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "localizedStringForKey:value:table:", CFSTR("HEART_EVENT_SUMMARY_ATTRIBUTION"), &stru_1E9C4C428, *MEMORY[0x1E0CB5138]);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = -[HKDisplayTypeSummaryAttribution initWithAttribution:urlAttribute:primaryProfileOnly:](v5, "initWithAttribution:urlAttribute:primaryProfileOnly:", v7, CFSTR("bridge:root=NOTIFICATIONS_ID&path=com.apple.HeartRateSettings"), 0);

  }
  v8 = [HKDisplayTypePresentation alloc];
  v9 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 4, 0, 7, 0);
  LOBYTE(v18) = 0;
  v10 = MEMORY[0x1E0C9AA70];
  v11 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v8, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v9, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v18, 0, 0, v4);

  v12 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("BRADYCARDIA"), CFSTR("BRADYCARDIA"), CFSTR("Localizable-Tortuga"), 0, v10);
  v13 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 147);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v13, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 147, 11, MEMORY[0x1E0C9AA60], v14, v1, v11, v12, v0, 0, 0);

  return v15;
}

HKDisplayType *HKDisplayTypeIdentifierBodyTemperatureMake()
{
  HKDisplayTypeChartingRules *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HKDisplayTypeBehavior *v9;
  HKDisplayTypeSummaryAttribution *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  uint64_t v13;
  HKDisplayTypePresentation *v14;
  HKDisplayTypeLocalization *v15;
  HKDisplayType *v16;
  void *v17;
  HKDisplayType *v18;
  uint64_t v20;
  uint64_t v21;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  v1 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("degF"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "quantityWithUnit:doubleValue:", v2, 97.0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("degF"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "quantityWithUnit:doubleValue:", v5, 100.0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v3, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v7, 0, 0, 0, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v8);

  BYTE2(v20) = 0;
  LOWORD(v20) = 256;
  v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v20);
  v10 = -[HKDisplayTypeSummaryAttribution initWithAttribution:urlAttribute:primaryProfileOnly:]([HKDisplayTypeSummaryAttribution alloc], "initWithAttribution:urlAttribute:primaryProfileOnly:", CFSTR("Mayo Clinic"), CFSTR("http://www.mayoclinic.org/"), 0);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 2, 3, 0);
  LOBYTE(v21) = 0;
  v13 = MEMORY[0x1E0C9AA70];
  v14 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v21, 0, 0, v10);

  v15 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("BODY_TEMPERATURE"), 0, 0, 0, v13);
  v16 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 62);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v16, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 62, 1, &unk_1E9CEA1A8, v17, v9, v14, v15, v0, 0, 0);

  return v18;
}

HKDisplayType *HKDisplayTypeIdentifierBodyMassIndexMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HKDisplayTypeBehavior *v9;
  HKDisplayTypeSummaryAttribution *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentation *v13;
  HKDisplayTypeLocalization *v14;
  void *v15;
  void *v16;
  void *v17;
  HKDisplayTypeLocalization *v18;
  HKDisplayType *v19;
  void *v20;
  HKDisplayType *v21;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const __CFString *v26;
  void *v27;
  _QWORD v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 1);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 2.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 0.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v4, v7, 0, 0, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v8);

  BYTE2(v23) = 0;
  LOWORD(v23) = 256;
  v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v23);
  v10 = -[HKDisplayTypeSummaryAttribution initWithAttribution:urlAttribute:primaryProfileOnly:]([HKDisplayTypeSummaryAttribution alloc], "initWithAttribution:urlAttribute:primaryProfileOnly:", CFSTR("National Heart, Lung, and Blood Institute"), 0, 0);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 2, 3, 0);
  LOBYTE(v24) = 0;
  v13 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v24, 0, 0, v10);

  v14 = [HKDisplayTypeLocalization alloc];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = &unk_1E9CECC50;
  v26 = CFSTR("BMI");
  v27 = v15;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v28[0] = v16;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v28, &v27, 1);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v14, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("BODY_MASS_INDEX"), 0, 0, 0, v17);

  v19 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 0);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v19, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 0, 6, MEMORY[0x1E0C9AA60], v20, v9, v13, v18, v0, 0, 0);

  return v21;
}

HKDisplayType *HKDisplayTypeIdentifierBodyFatPercentageMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HKDisplayTypeBehavior *v9;
  HKDisplayTypePresentation *v10;
  HKDisplayTypePresentationConfiguration *v11;
  uint64_t v12;
  HKDisplayTypePresentation *v13;
  HKDisplayTypeLocalization *v14;
  HKDisplayType *v15;
  void *v16;
  HKDisplayType *v17;
  uint64_t v19;
  uint64_t v20;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 1);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("%"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 4.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("%"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 0.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v4, v7, 0, 0, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v8);

  BYTE2(v19) = 0;
  LOWORD(v19) = 256;
  v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v19);
  v10 = [HKDisplayTypePresentation alloc];
  v11 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 2, 3, 0);
  LOBYTE(v20) = 0;
  v12 = MEMORY[0x1E0C9AA70];
  v13 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v10, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v11, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 100.0, v20, 0, 0, 0);

  v14 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("BODY_FAT_PERCENTAGE"), 0, 0, 0, v12);
  v15 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 1);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v15, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 1, 6, MEMORY[0x1E0C9AA60], v16, v9, v13, v14, v0, 0, 0);

  return v17;
}

HKDisplayType *HKDisplayTypeIdentifierBloodTypeMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 0, 0, 0, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("BLOOD_TYPE"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 66);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 66, 7, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierBloodPressureMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypeSummaryAttribution *v11;
  HKDisplayTypePresentation *v12;
  HKDisplayTypePresentationConfiguration *v13;
  uint64_t v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayType *v17;
  void *v18;
  HKDisplayType *v19;
  uint64_t v21;
  uint64_t v22;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 3, 0, 5);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mmHg"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 60.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mmHg"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 160.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v21) = 0;
  LOWORD(v21) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v21);
  v11 = -[HKDisplayTypeSummaryAttribution initWithAttribution:urlAttribute:primaryProfileOnly:]([HKDisplayTypeSummaryAttribution alloc], "initWithAttribution:urlAttribute:primaryProfileOnly:", CFSTR("National Heart, Lung, and Blood Institute"), 0, 0);
  v12 = [HKDisplayTypePresentation alloc];
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 10, 0);
  LOBYTE(v22) = 0;
  v14 = MEMORY[0x1E0C9AA70];
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v12, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v13, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v22, 0, 0, v11);

  v16 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("BLOOD_PRESSURE"), 0, 0, 0, v14);
  v17 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 80);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v17, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 80, 11, &unk_1E9CEA1F0, v18, v10, v15, v16, v0, 0, 0);

  return v19;
}

HKDisplayType *HKDisplayTypeIdentifierBloodAlcoholContentMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypeSummaryAttribution *v11;
  HKDisplayTypePresentation *v12;
  HKDisplayTypePresentationConfiguration *v13;
  uint64_t v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayType *v17;
  void *v18;
  HKDisplayType *v19;
  uint64_t v21;
  uint64_t v22;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 3, 16, 5);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 3);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("%"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("%"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 0.1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v21) = 0;
  LOWORD(v21) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v21);
  v11 = -[HKDisplayTypeSummaryAttribution initWithAttribution:urlAttribute:primaryProfileOnly:]([HKDisplayTypeSummaryAttribution alloc], "initWithAttribution:urlAttribute:primaryProfileOnly:", CFSTR("Mayo Clinic"), CFSTR("http://www.mayoclinic.org/"), 0);
  v12 = [HKDisplayTypePresentation alloc];
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 1, 1, 0);
  LOBYTE(v22) = 0;
  v14 = MEMORY[0x1E0C9AA70];
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v12, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v13, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 100.0, v22, 0, 0, v11);

  v16 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("BLOOD_ALCOHOL_CONTENT"), 0, 0, 0, v14);
  v17 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 18);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v17, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 18, 14, MEMORY[0x1E0C9AA60], v18, v10, v15, v16, v0, 0, 0);

  return v19;
}

HKDisplayType *HKDisplayTypeIdentifierBloatingMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_BLOATING"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 159);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 159, 26, &unk_1E9CEA298, v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierBladderIncontinenceMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_BLADDER_INCONTINENCE"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 234);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 234, 26, &unk_1E9CEA460, v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierBiologicalSexMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 0, 0, 0, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("BIOLOGICAL_SEX"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 64);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 64, 7, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierBasalEnergyBurnedMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("kcal"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("kcal"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 50.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 1, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("BASAL_ENERGY"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 9);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 9, 2, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierBasalBodyTemperatureMake()
{
  HKDisplayTypeChartingRules *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  HKDisplayTypeBehavior *v9;
  HKDisplayTypeSummaryAttribution *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  -[HKDisplayTypeChartingRules setChartStyle:forTimeScope:](v0, "setChartStyle:forTimeScope:", 3, 2);
  v1 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("degF"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "quantityWithUnit:doubleValue:", v2, 97.0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("degF"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "quantityWithUnit:doubleValue:", v5, 100.0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v3, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v7, 0, 0, 0, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v8);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v9 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v10 = -[HKDisplayTypeSummaryAttribution initWithAttribution:urlAttribute:primaryProfileOnly:]([HKDisplayTypeSummaryAttribution alloc], "initWithAttribution:urlAttribute:primaryProfileOnly:", CFSTR("NIH MedlinePlus"), 0, 0);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 1, 3, 0);
  v24 = &unk_1E9CECC98;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 1, 1, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 0, 0, 0, 0, 1.0, v23, 0, 0, v10);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("BASAL_BODY_TEMPERATURE"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 90);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 90, 8, &unk_1E9CEA208, v19, v9, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierAudiogramMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  HKDisplayTypePresentation *v4;
  HKDisplayTypeLocalization *v5;
  void *v6;
  void *v7;
  void *v8;
  HKDisplayTypeLocalization *v9;
  HKDisplayType *v10;
  void *v11;
  HKDisplayType *v12;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const __CFString *v17;
  void *v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  BYTE2(v14) = 0;
  LOWORD(v14) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v14);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 5, 0, 0, 0);
  LOBYTE(v15) = 0;
  v4 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v15, 0, 0, 0);

  v5 = [HKDisplayTypeLocalization alloc];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = &unk_1E9CECC50;
  v17 = CFSTR("AUDIOGRAM_COUNT");
  v18 = v6;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = v7;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, &v18, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v5, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("AUDIOGRAM"), 0, 0, 0, v8);

  v10 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 145);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v10, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 145, 12, MEMORY[0x1E0C9AA60], v11, v1, v4, v9, v0, 0, 0);

  return v12;
}

HKDisplayType *HKDisplayTypeIdentifierAtrialFibrillationBurdenMake()
{
  HKStaticDecimalPrecisionRule *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HKDisplayTypeBehavior *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypePresentationConfiguration *v16;
  uint64_t v17;
  HKDisplayTypePresentation *v18;
  HKDisplayTypeLocalization *v19;
  HKDisplayType *v20;
  void *v21;
  HKDisplayType *v22;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  HKDisplayTypeChartingRules *v28;

  v28 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 1, 5);
  v0 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v28, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v0, 0);

  v1 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("%"));
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "quantityWithUnit:doubleValue:", v27, 0.0);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("%"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 100.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v26, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("%"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "quantityWithUnit:doubleValue:", v7, 0.0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("%"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "quantityWithUnit:doubleValue:", v10, 100.0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v8, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v5, 0, 0, 0, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v28, "setAxisScalingRule:", v13);

  BYTE2(v24) = 0;
  LOWORD(v24) = 256;
  v14 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v24);
  v15 = [HKDisplayTypePresentation alloc];
  v16 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 0, 0, 3, 0);
  LOBYTE(v25) = 0;
  v17 = MEMORY[0x1E0C9AA70];
  v18 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v15, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v16, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 100.0, v25, 0, 0, 0);

  v19 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("ATRIAL_FIBRILLATION_BURDEN"), 0, CFSTR("Localizable-AFibBurden"), 0, v17);
  v20 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 248);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v20, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 248, 11, MEMORY[0x1E0C9AA60], v21, v14, v18, v19, v28, 0, 0);

  return v22;
}

HKDisplayType *HKDisplayTypeIdentifierAppleWalkingSteadinessMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  void *v2;
  HKDisplayTypeBehavior *v3;
  HKDisplayTypePresentation *v4;
  HKDisplayTypePresentationConfiguration *v5;
  uint64_t v6;
  HKDisplayTypePresentation *v7;
  HKDisplayTypeLocalization *v8;
  HKDisplayType *v9;
  void *v10;
  HKDisplayType *v11;
  uint64_t v13;
  uint64_t v14;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 4);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  HKWalkingSteadinessAxisScalingRule();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v2);

  BYTE2(v13) = 0;
  LOWORD(v13) = 256;
  v3 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v13);
  v4 = [HKDisplayTypePresentation alloc];
  v5 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v14) = 0;
  v6 = MEMORY[0x1E0C9AA70];
  v7 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v4, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v5, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 100.0, v14, 0, 0, 0);

  v8 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("WALKING_STEADINESS"), 0, CFSTR("Localizable-WalkingSteadiness"), 0, v6);
  v9 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 249);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v9, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 249, 23, MEMORY[0x1E0C9AA60], v10, v3, v7, v8, v0, 0, 0);

  return v11;
}

HKDisplayType *HKDisplayTypeIdentifierAppleWalkingSteadinessEventMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  HKDisplayTypeBehavior *v2;
  HKDisplayTypePresentation *v3;
  HKDisplayTypePresentationConfiguration *v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeLocalization *v10;
  HKDisplayType *v11;
  void *v12;
  HKDisplayType *v13;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const __CFString *v18;
  void *v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  BYTE2(v15) = 0;
  LOWORD(v15) = 256;
  v2 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v15);
  v3 = [HKDisplayTypePresentation alloc];
  v4 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 4, 0, 0, 0);
  LOBYTE(v16) = 0;
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v3, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v4, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v16, 0, 0, 0);

  v6 = [HKDisplayTypeLocalization alloc];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = &unk_1E9CECC50;
  v18 = &stru_1E9C4C428;
  v19 = v7;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v20[0] = v8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v20, &v19, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v6, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("WALKING_STEADINESS_EVENT"), CFSTR("WALKING_STEADINESS_EVENT"), CFSTR("Localizable-WalkingSteadiness"), 0, v9);

  v11 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 250);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v11, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 250, 23, MEMORY[0x1E0C9AA60], v12, v2, v5, v10, v0, 0, 0);

  return v13;
}

HKDisplayType *HKDisplayTypeIdentifierAppleStandTimeMake()
{
  HKDisplayTypeChartingRules *v0;
  HKStaticDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("min"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("min"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 60.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 1, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 1, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("STAND_MINUTE"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 186);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 186, 2, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierAppleExerciseTimeMake()
{
  HKStaticDecimalPrecisionRule *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  HKDisplayTypeBehavior *v16;
  HKDisplayTypePresentation *v17;
  HKDisplayTypePresentationConfiguration *v18;
  HKDisplayTypePresentationConfiguration *v19;
  void *v20;
  HKDisplayTypePresentation *v21;
  HKDisplayTypeLocalization *v22;
  HKDisplayTypeLocalization *v23;
  HKDisplayType *v24;
  void *v25;
  HKDisplayType *v26;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  HKDisplayTypeChartingRules *v38;
  void *v39;
  HKDisplayTypePresentationConfiguration *v40;
  void *v41;
  _QWORD v42[2];

  v42[1] = *MEMORY[0x1E0C80C00];
  v38 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v0 = -[HKStaticDecimalPrecisionRule initWithDecimalPrecision:]([HKStaticDecimalPrecisionRule alloc], "initWithDecimalPrecision:", 0);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v38, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v0, 0);

  v1 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("min"));
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "quantityWithUnit:doubleValue:", v37, 0.0);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("min"));
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v36, 25.0);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v35, v34);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v41 = &unk_1E9CECC68;
  v3 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("min"));
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "quantityWithUnit:doubleValue:", v33, 0.0);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("min"));
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "quantityWithUnit:doubleValue:", v32, 8.0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v31, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v42[0] = v6;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v42, &v41, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("min"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "quantityWithUnit:doubleValue:", v9, 0.0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("min"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "quantityWithUnit:doubleValue:", v12, 30.0);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v10, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v30, v7, 0, 0, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v38, "setAxisScalingRule:", v15);

  BYTE2(v28) = 0;
  LOWORD(v28) = 256;
  v16 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v28);
  v17 = [HKDisplayTypePresentation alloc];
  v18 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v39 = &unk_1E9CECC68;
  v19 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v40 = v19;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v40, &v39, 1);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v29) = 0;
  v21 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v17, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v18, v20, 1, 0, 0, 0, 1.0, v29, 0, 0, 0);

  v22 = [HKDisplayTypeLocalization alloc];
  v23 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v22, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("EXERCISE_MINUTE"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v24 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 75);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v24, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 75, 2, &unk_1E9CEA1D8, v25, v16, v21, v23, v38, 0, 0);

  return v26;
}

HKDisplayType *HKDisplayTypeIdentifierAppetiteChangesMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_APPETITE_CHANGES"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 170);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 170, 26, &unk_1E9CEA3A0, v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierAllergyRecordMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 0, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 0, 0, 0, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, CFSTR("health_records_allergies"), 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("ALLERGY_RECORDS"), 0, CFSTR("Localizable-Clinical-Health-Records"), 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 149);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 149, 16, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierActivitySummaryMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 7, 0, 6);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 0, 0, 11, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("ACTIVITY_SUMMARY"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 100);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 100, 2, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierActiveEnergyMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("kcal"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("kcal"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 50.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 1, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("ACTIVE_ENERGY"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 10);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 10, 2, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierAcneMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_ACNE"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 161);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 161, 26, &unk_1E9CEA2C8, v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierAbdominalCrampsMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SYMPTOM_ABDOMINAL_CRAMPS"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 157);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 157, 26, &unk_1E9CEA268, v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

uint64_t _ValidateQuantity(void *a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  void *v11;
  id v12;
  void *v13;
  double v14;
  double v15;
  _BOOL8 v16;

  v11 = (void *)MEMORY[0x1E0CB6CD0];
  v12 = a1;
  objc_msgSend(v11, "unitFromString:", a2);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "doubleValueForUnit:", v13);
  v15 = v14;

  v16 = v15 > a6 || v15 < a5;
  if (v15 > a4 || v15 < a3)
    return 2;
  else
    return v16;
}

void sub_1D7853438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  id *v24;
  uint64_t v25;

  objc_destroyWeak(v24);
  _Block_object_dispose(&a24, 8);
  objc_destroyWeak((id *)(v25 - 88));
  _Unwind_Resume(a1);
}

void sub_1D7853550(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

uint64_t OUTLINED_FUNCTION_2()
{
  return objc_opt_class();
}

id OUTLINED_FUNCTION_3(id a1)
{
  return a1;
}

id OUTLINED_FUNCTION_4(id a1)
{
  return a1;
}

uint64_t HKCodableHealthRecordsLocalizedEducationContentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  HKCodableHealthRecordsLocalizedEducationContentSection *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(HKCodableHealthRecordsLocalizedEducationContentSection);
        objc_msgSend(a1, "addSections:", v17);
        if (!PBReaderPlaceMark()
          || (HKCodableHealthRecordsLocalizedEducationContentSectionReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id _GenerateDateFormatterLongMonthHeader()
{
  void *v0;
  id v1;
  void *v2;

  v0 = (void *)_GenerateDateFormatterLongMonthHeader___formatter;
  if (!_GenerateDateFormatterLongMonthHeader___formatter)
  {
    v1 = objc_alloc_init(MEMORY[0x1E0CB3578]);
    v2 = (void *)_GenerateDateFormatterLongMonthHeader___formatter;
    _GenerateDateFormatterLongMonthHeader___formatter = (uint64_t)v1;

    objc_msgSend((id)_GenerateDateFormatterLongMonthHeader___formatter, "setLocalizedDateFormatFromTemplate:", CFSTR("LLLL"));
    v0 = (void *)_GenerateDateFormatterLongMonthHeader___formatter;
  }
  return v0;
}

id _GenerateDateFormatterShortMonthHeader()
{
  void *v0;
  id v1;
  void *v2;

  v0 = (void *)_GenerateDateFormatterShortMonthHeader___formatter;
  if (!_GenerateDateFormatterShortMonthHeader___formatter)
  {
    v1 = objc_alloc_init(MEMORY[0x1E0CB3578]);
    v2 = (void *)_GenerateDateFormatterShortMonthHeader___formatter;
    _GenerateDateFormatterShortMonthHeader___formatter = (uint64_t)v1;

    objc_msgSend((id)_GenerateDateFormatterShortMonthHeader___formatter, "setLocalizedDateFormatFromTemplate:", CFSTR("LLL"));
    v0 = (void *)_GenerateDateFormatterShortMonthHeader___formatter;
  }
  return v0;
}

id _GenerateDateFormatterDayMonthDateHourMinute()
{
  void *v0;
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v0 = (void *)_GenerateDateFormatterDayMonthDateHourMinute___formatter;
  if (!_GenerateDateFormatterDayMonthDateHourMinute___formatter)
  {
    v1 = objc_alloc_init(MEMORY[0x1E0CB3578]);
    v2 = (void *)_GenerateDateFormatterDayMonthDateHourMinute___formatter;
    _GenerateDateFormatterDayMonthDateHourMinute___formatter = (uint64_t)v1;

    v3 = (void *)_GenerateDateFormatterDayMonthDateHourMinute___formatter;
    CPDateFormatStringForFormatType();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setLocalizedDateFormatFromTemplate:", v4);

    v0 = (void *)_GenerateDateFormatterDayMonthDateHourMinute___formatter;
  }
  return v0;
}

id _GenerateDateFormatterDayMonthDateHour()
{
  void *v0;
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v0 = (void *)_GenerateDateFormatterDayMonthDateHour___formatter;
  if (!_GenerateDateFormatterDayMonthDateHour___formatter)
  {
    v1 = objc_alloc_init(MEMORY[0x1E0CB3578]);
    v2 = (void *)_GenerateDateFormatterDayMonthDateHour___formatter;
    _GenerateDateFormatterDayMonthDateHour___formatter = (uint64_t)v1;

    v3 = (void *)_GenerateDateFormatterDayMonthDateHour___formatter;
    CPDateFormatStringForFormatType();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setLocalizedDateFormatFromTemplate:", v4);

    v0 = (void *)_GenerateDateFormatterDayMonthDateHour___formatter;
  }
  return v0;
}

id HKLocalizedStringForDateAndTemplate(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a1;
  HKDateFormatterFromTemplate(a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringFromDate:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

uint64_t HKTodayDayFormatterNeeded(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v4, "isDateInToday:", v3) & 1) != 0 || (objc_msgSend(v4, "isDateInYesterday:", v3) & 1) != 0)
    v5 = 1;
  else
    v5 = objc_msgSend(v4, "isDateInTomorrow:", v3);

  return v5;
}

id HKLastUpdatedText(void *a1, void *a2)
{
  return HKLastUpdatedTextWithOptions(a1, a2, 1);
}

id HKLastUpdatedTextWithOptions(void *a1, void *a2, int a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v5 = a1;
  v6 = v5;
  if (v5)
  {
    if (HKTodayDayFormatterNeeded(v5, a2))
    {
      if (a3)
        v7 = 35;
      else
        v7 = 36;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99D68], "date");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v9, "component:fromDate:", 4, v10);

      objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v12, "component:fromDate:", 4, v6);

      v14 = 12;
      if (a3)
        v14 = 39;
      v15 = 9;
      if (a3)
        v15 = 38;
      if (v13 == v11)
        v7 = v14;
      else
        v7 = v15;
    }
    HKDateFormatterFromTemplate(v7);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "stringFromDate:", v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

BOOL HKMinuteFormatterNeeded(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;

  objc_msgSend(a2, "components:fromDate:", 96, a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "minute") != 0;

  return v3;
}

id HKMinimalHourIntervalText(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  BOOL v7;
  void *v8;
  void *v9;
  void *v10;

  v3 = a1;
  v4 = a2;
  objc_msgSend(v3, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (HKMinuteFormatterNeeded((uint64_t)v5, v4))
  {

  }
  else
  {
    objc_msgSend(v3, "endDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = HKMinuteFormatterNeeded((uint64_t)v6, v4);

    if (!v7)
    {
      objc_msgSend(MEMORY[0x1E0CB3590], "hk_hourOnlyDateIntervalFormatter");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_6;
    }
  }
  objc_msgSend(MEMORY[0x1E0CB3590], "hk_hourMinuteOnlyDateIntervalFormatter");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_6:
  v9 = v8;
  objc_msgSend(v8, "stringFromDateInterval:", v3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

id HKLastUpdatedIntervalText(void *a1, uint64_t a2, void *a3, char a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v27;
  void *v28;
  int v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  int v34;
  void *v35;
  void *v36;
  uint64_t v37;
  id v38;
  void *v39;
  void *v40;
  uint64_t v41;
  char v42;
  id v43;
  void *v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  id v49;
  void *v50;
  id v51;
  void *v52;
  char v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  void *v60;
  char v62;
  void *v63;
  int v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  id v70;
  id v71;
  void *v72;
  void *v73;
  void *v74;
  uint64_t v75;
  id v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _BYTE v81[128];
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a3;
  objc_msgSend(v7, "startDate");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "endDate");
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = (void *)v10;
  v12 = 0;
  if (!v9 || !v10)
    goto LABEL_67;
  v62 = a4;
  v68 = v7;
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v9, v10);
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = v11;
  HKUIMidDate(v9, v11);
  v69 = objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v69, v69);
  v15 = objc_claimAutoreleasedReturnValue();
  v66 = v8;
  objc_msgSend(v8, "calendar");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v74 = (void *)v15;
  v75 = a2;
  +[HKGraphZoomLevelConfiguration chartDataRangeForTimeScope:dataRange:firstWeekday:calendar:cadence:alignment:](HKGraphZoomLevelConfiguration, "chartDataRangeForTimeScope:dataRange:firstWeekday:calendar:cadence:alignment:", a2, v15, objc_msgSend(v16, "firstWeekday"), v16, 1, 3);
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  v67 = (void *)v13;
  v64 = objc_msgSend(v73, "isEqual:", v13);
  v76 = objc_alloc_init(MEMORY[0x1E0C99D78]);
  v77 = 0u;
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v17 = objc_msgSend(&unk_1E9CE9B90, "countByEnumeratingWithState:objects:count:", &v77, v81, 16);
  if (v17)
  {
    v18 = v17;
    v19 = *(_QWORD *)v78;
    do
    {
      for (i = 0; i != v18; ++i)
      {
        if (*(_QWORD *)v78 != v19)
          objc_enumerationMutation(&unk_1E9CE9B90);
        v21 = objc_msgSend(*(id *)(*((_QWORD *)&v77 + 1) + 8 * i), "unsignedIntegerValue");
        v22 = v9;
        v23 = objc_msgSend(v16, "component:fromDate:", v21, v9);
        if (v23 == objc_msgSend(v16, "component:fromDate:", v21, v14))
          v24 = v23;
        else
          v24 = 0x7FFFFFFFFFFFFFFFLL;
        v9 = v22;
        objc_msgSend(v76, "setValue:forComponent:", v24, v21);
      }
      v18 = objc_msgSend(&unk_1E9CE9B90, "countByEnumeratingWithState:objects:count:", &v77, v81, 16);
    }
    while (v18);
  }
  v25 = objc_msgSend(v76, "era");
  v27 = objc_msgSend(v76, "year") != 0x7FFFFFFFFFFFFFFFLL && v25 != 0x7FFFFFFFFFFFFFFFLL;
  objc_msgSend(MEMORY[0x1E0C99D68], "distantFuture");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v14;
  v29 = objc_msgSend(v14, "hk_isAfterOrEqualToDate:", v28);

  objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "startOfDayForDate:", v9);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v72 = v30;
  if ((objc_msgSend(v9, "isEqualToDate:", v31) & 1) != 0)
  {
    objc_msgSend(v30, "startOfDayForDate:", v14);
    v32 = v9;
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = objc_msgSend(v14, "isEqualToDate:", v33);

    v9 = v32;
    v35 = (void *)v69;
    if (v34)
    {
      objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "dateByAddingUnit:value:toDate:options:", 128, -1, v11, 0);
      v37 = objc_claimAutoreleasedReturnValue();

      v38 = (id)v37;
      goto LABEL_24;
    }
  }
  else
  {

    v35 = (void *)v69;
  }
  v38 = v11;
LABEL_24:
  a2 = v75;
  switch(v75)
  {
    case 0:
    case 1:
      v39 = v67;
      v7 = v68;
      if (v29)
      {
        v40 = v9;
        v41 = 1;
        goto LABEL_42;
      }
      objc_msgSend(MEMORY[0x1E0CB3590], "hk_yearIntervalFormatter");
      v51 = v38;
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v52, "stringFromDate:toDate:", v9, v11);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      v38 = v51;
      goto LABEL_51;
    case 2:
      v39 = v67;
      v7 = v68;
      if (v29)
      {
        v40 = v9;
        v41 = 7;
LABEL_42:
        _FormatOngoingRangeFrom(v40, v41);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_51:
        v8 = v66;
        goto LABEL_66;
      }
      v70 = v38;
      v8 = v66;
      if (v64)
      {
        v47 = 1;
        goto LABEL_61;
      }
      objc_msgSend(MEMORY[0x1E0CB3590], "hk_monthIntervalFormatter");
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v58, "stringFromDate:toDate:", v9, v11);
      v59 = objc_claimAutoreleasedReturnValue();
      goto LABEL_63;
    case 3:
    case 4:
      v42 = v64 ^ 1;
      if (v75 != 4)
        v42 = 1;
      if ((v42 & 1) != 0)
        goto LABEL_31;
      _performNSDateFormatterInitializationBlock(&__block_literal_global_489);
      v43 = v38;
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v44, "stringFromDate:", v9);
      v45 = objc_claimAutoreleasedReturnValue();
      goto LABEL_35;
    case 5:
LABEL_31:
      if (v27 || !v29)
      {
        objc_msgSend(MEMORY[0x1E0CB3590], "hk_dayIntervalFormatter");
        v43 = v38;
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v44, "stringFromDate:toDate:", v9, v43);
        v45 = objc_claimAutoreleasedReturnValue();
LABEL_35:
        v12 = (void *)v45;

        v38 = v43;
      }
      else
      {
        _FormatOngoingRangeFrom(v9, 9);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
      }
LABEL_37:
      v7 = v68;
      goto LABEL_38;
    case 6:
      v46 = v64 ^ 1;
      if ((v62 & 2) != 0)
        v46 = 0;
      v7 = v68;
      if ((v46 & 1) != 0)
      {
        v8 = v66;
        v39 = v67;
        if (v29)
          _FormatOngoingRangeFrom(v9, 38);
        else
          HKRelativeDateIntervalText(v68, v66);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v70 = v38;
        v8 = v66;
        v39 = v67;
        if (HKTodayDayFormatterNeeded(v9, v66))
          v47 = 36;
        else
          v47 = 42;
LABEL_61:
        HKDateFormatterFromTemplate(v47);
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v58, "stringFromDate:", v9);
        v59 = objc_claimAutoreleasedReturnValue();
LABEL_63:
        v12 = (void *)v59;

        v38 = v70;
      }
LABEL_66:

      break;
    case 7:
      v48 = objc_msgSend(v16, "hk_isDate:withinNumberOfCalendarDays:ofDate:", v9, 0, v11);
      v7 = v68;
      if ((~v62 & 3) != 0)
      {
        v53 = v48 ^ 1;
        if ((v62 & 2) != 0)
          v53 = 0;
        v8 = v66;
        if ((v53 & 1) != 0)
        {
          if (v29)
            _FormatOngoingRangeFrom(v9, 38);
          else
            HKRelativeDateIntervalText(v68, v66);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          HKRelativeMonthDateYearText(v9, v66, 0);
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          HKMinimalHourIntervalText(v68, v16);
          v71 = v38;
          v63 = (void *)objc_claimAutoreleasedReturnValue();
          v54 = (void *)MEMORY[0x1E0CB3940];
          objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v55, "localizedStringForKey:value:table:", CFSTR("DATE_SELECTION_%@_%@"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
          v56 = v9;
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v54, "stringWithFormat:", v57, v65, v63);
          v12 = (void *)objc_claimAutoreleasedReturnValue();

          v9 = v56;
          a2 = v75;

          v38 = v71;
        }
      }
      else
      {
        HKDateFormatterFromTemplate(36);
        v49 = v38;
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v50, "stringFromDate:", v9);
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        v38 = v49;
LABEL_38:
        v8 = v66;
      }
      v39 = v67;
      goto LABEL_66;
    default:
      v12 = 0;
      goto LABEL_37;
  }
LABEL_67:
  if (v7 && !v12)
  {
    if (a2 == 6)
      objc_msgSend(MEMORY[0x1E0CB3590], "hk_hourDateIntervalFormatter");
    else
      objc_msgSend(MEMORY[0x1E0CB3590], "hk_dayIntervalFormatter");
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "stringFromDateInterval:", v7);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v12;
}

id _FormatOngoingRangeFrom(void *a1, uint64_t a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  HKLocalizedStringForDateAndTemplate(a1, a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "localizedStringForKey:value:table:", CFSTR("ONGOING_DATE"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "localizedStringForKey:value:table:", CFSTR("DATE_RANGE %@ %@"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "stringWithFormat:", v7, v2, v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

id HKRelativeDateIntervalText(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v37;
  void *v38;

  v3 = a1;
  v4 = a2;
  objc_msgSend(v3, "startDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = HKTodayDayFormatterNeeded(v5, v4);

  objc_msgSend(v3, "startDate");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v6)
  {
    HKRelativeMonthDateYearText(v7, v4, 0);
    v9 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(v3, "endDate");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    HKRelativeMonthDateYearText(v10, v4, 0);
    v11 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (objc_msgSend(v4, "isDateInThisCalendarYear:", v7))
      v12 = 12;
    else
      v12 = 9;

    objc_msgSend(v3, "startDate");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    HKLocalizedStringForDateAndTemplate(v13, v12);
    v9 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(v3, "endDate");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    HKLocalizedStringForDateAndTemplate(v10, v12);
    v11 = objc_claimAutoreleasedReturnValue();
  }
  v37 = (void *)v11;

  objc_msgSend(v4, "calendar");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "startDate");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "components:fromDate:", 30, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "calendar");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "endDate");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "components:fromDate:", 30, v18);
  v38 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "startDate");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "calendar");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if (HKMinuteFormatterNeeded((uint64_t)v19, v20))
  {
    v21 = 27;
  }
  else
  {
    objc_msgSend(v3, "endDate");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "calendar");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    if (HKMinuteFormatterNeeded((uint64_t)v22, v23))
      v21 = 27;
    else
      v21 = 23;

  }
  objc_msgSend(v3, "startDate");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  HKLocalizedStringForDateAndTemplate(v24, v21);
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "endDate");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  HKLocalizedStringForDateAndTemplate(v26, v21);
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  v28 = v16;
  LODWORD(v26) = objc_msgSend(v16, "isEqual:", v38);
  v29 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = v30;
  if ((_DWORD)v26)
  {
    objc_msgSend(v30, "localizedStringForKey:value:table:", CFSTR("DATE_SELECTION_LONG_%@_%@_%@"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "stringWithFormat:", v32, v9, v25, v27);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = (void *)v9;
    v35 = v37;
  }
  else
  {
    objc_msgSend(v30, "localizedStringForKey:value:table:", CFSTR("DATE_SELECTION_LONG_DIFFERENT_DATE_%@_%@_%@_%@"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = (void *)v9;
    v35 = v37;
    objc_msgSend(v29, "stringWithFormat:", v32, v34, v25, v37, v27);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v33;
}

id HKRelativeMonthDateYearText(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  int v9;

  v5 = a1;
  v6 = a2;
  if (v5)
  {
    if ((HKTodayDayFormatterNeeded(v5, v6) & 1) != 0)
    {
      v7 = 36;
    }
    else
    {
      if (a3)
        v9 = objc_msgSend(v6, "isDateWithinLastRollingYear:", v5);
      else
        v9 = objc_msgSend(v6, "isDateInThisCalendarYear:", v5);
      if (v9)
        v7 = 12;
      else
        v7 = 9;
    }
    HKLocalizedStringForDateAndTemplate(v5, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

id HKUpperStringForAnnotationDateWithTimeScope(uint64_t a1, void *a2, unint64_t a3)
{
  void *v4;
  void *v5;
  void *v6;

  if (a1)
  {
    objc_msgSend(a2, "dateFromComponents:", a1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v4;
    if (a3 > 8)
    {
      v6 = 0;
    }
    else
    {
      HKLocalizedStringForDateAndTemplate(v4, qword_1D7B80E28[a3]);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
    }

  }
  else
  {
    v6 = 0;
  }
  return v6;
}

id HKLowerStringForAnnotationDateWithTimeScope(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v12;
  void *v13;

  v5 = a2;
  v6 = v5;
  if (a1)
  {
    objc_msgSend(v5, "dateFromComponents:", a1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    switch(a3)
    {
      case 2:
      case 3:
      case 4:
      case 5:
      case 8:
        v9 = 1;
        goto LABEL_4;
      case 6:
        objc_msgSend(v6, "dateByAddingUnit:value:toDate:options:", 32, 1, v7, 0);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3590], "hk_hourDateIntervalFormatter");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "stringFromDate:toDate:", v8, v12);
        v10 = (void *)objc_claimAutoreleasedReturnValue();

        break;
      case 7:
        v9 = 27;
LABEL_4:
        HKLocalizedStringForDateAndTemplate(v7, v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        break;
      default:
        v10 = 0;
        break;
    }

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

id HKCombinedStringForAnnotationDateWithTimeScope(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v14;
  void *v15;
  void *v16;

  v7 = a2;
  v8 = v7;
  if (a1)
  {
    objc_msgSend(v7, "dateFromComponents:", a1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v9;
    switch(a3)
    {
      case 0:
      case 1:
        v11 = 1;
        goto LABEL_11;
      case 2:
        v11 = 7;
        goto LABEL_11;
      case 3:
      case 4:
        goto LABEL_10;
      case 5:
        if (a4 == 2)
          goto LABEL_10;
        if (a4 == 1)
        {
          objc_msgSend(v8, "hk_startOfHourForDate:moduloHours:addingModuloCount:", v9, 6, 0);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "hk_startOfHourForDate:moduloHours:addingModuloCount:", v10, 6, 1);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3590], "hk_hourDateIntervalWithDateFormatter");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "stringFromDate:toDate:", v14, v15);
          v12 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_17:
        }
        else if (a4)
        {
LABEL_14:
          v12 = 0;
        }
        else
        {
LABEL_10:
          v11 = 9;
LABEL_11:
          HKLocalizedStringForDateAndTemplate(v9, v11);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
        }

        break;
      case 6:
        objc_msgSend(v8, "dateByAddingUnit:value:toDate:options:", 32, 1, v9, 0);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3590], "hk_hourDateIntervalWithDateFormatter");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "stringFromDate:toDate:", v10, v14);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        goto LABEL_17;
      case 7:
        v11 = 33;
        goto LABEL_11;
      default:
        goto LABEL_14;
    }
  }
  else
  {
    v12 = 0;
  }

  return v12;
}

id HKRelativeMonthYearText(void *a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;

  if (a1)
  {
    v3 = a1;
    if (objc_msgSend(a2, "isDateInThisCalendarYear:", v3))
      v4 = 5;
    else
      v4 = 6;
    HKLocalizedStringForDateAndTemplate(v3, v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v5 = 0;
  }
  return v5;
}

void ResetLocaleDependentFormatters()
{
  _performWithFormatterLock(&__block_literal_global_1);
}

void _performWithFormatterLock(void *a1)
{
  void (**v1)(_QWORD);

  v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_formatterLock);
  v1[2](v1);

  os_unfair_lock_unlock((os_unfair_lock_t)&_formatterLock);
}

id HKNumberFormatterFromTemplate(uint64_t a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  if (a1 == 2)
  {
    v1 = (void *)_HKNumberFormatterIntegerWithPadding__formatter;
    if (!_HKNumberFormatterIntegerWithPadding__formatter)
    {
      v4 = objc_alloc_init(MEMORY[0x1E0CB37F0]);
      v5 = (void *)_HKNumberFormatterIntegerWithPadding__formatter;
      _HKNumberFormatterIntegerWithPadding__formatter = (uint64_t)v4;

      objc_msgSend((id)_HKNumberFormatterIntegerWithPadding__formatter, "setNumberStyle:", 0);
      objc_msgSend((id)_HKNumberFormatterIntegerWithPadding__formatter, "setMaximumFractionDigits:", 0);
      objc_msgSend((id)_HKNumberFormatterIntegerWithPadding__formatter, "setMinimumIntegerDigits:", 2);
      v1 = (void *)_HKNumberFormatterIntegerWithPadding__formatter;
    }
  }
  else if (a1 == 1)
  {
    v1 = (void *)_HKNumberFormatterIntegerWithSeparators__formatter;
    if (!_HKNumberFormatterIntegerWithSeparators__formatter)
    {
      v6 = objc_alloc_init(MEMORY[0x1E0CB37F0]);
      v7 = (void *)_HKNumberFormatterIntegerWithSeparators__formatter;
      _HKNumberFormatterIntegerWithSeparators__formatter = (uint64_t)v6;

      objc_msgSend((id)_HKNumberFormatterIntegerWithSeparators__formatter, "setNumberStyle:", 1);
      objc_msgSend((id)_HKNumberFormatterIntegerWithSeparators__formatter, "setUsesGroupingSeparator:", 1);
      objc_msgSend((id)_HKNumberFormatterIntegerWithSeparators__formatter, "setMaximumFractionDigits:", 0);
      v1 = (void *)_HKNumberFormatterIntegerWithSeparators__formatter;
    }
  }
  else
  {
    if (a1)
    {
      v8 = 0;
      return v8;
    }
    v1 = (void *)_HKNumberFormatterInteger__formatter;
    if (!_HKNumberFormatterInteger__formatter)
    {
      v2 = objc_alloc_init(MEMORY[0x1E0CB37F0]);
      v3 = (void *)_HKNumberFormatterInteger__formatter;
      _HKNumberFormatterInteger__formatter = (uint64_t)v2;

      objc_msgSend((id)_HKNumberFormatterInteger__formatter, "setNumberStyle:", 0);
      objc_msgSend((id)_HKNumberFormatterInteger__formatter, "setMaximumFractionDigits:", 0);
      v1 = (void *)_HKNumberFormatterInteger__formatter;
    }
  }
  v8 = v1;
  return v8;
}

double HKRoundWithPositiveZeroForDoubleValue(double a1)
{
  double v1;
  BOOL v2;
  double result;

  v1 = round(a1);
  v2 = v1 == 0.0 && a1 < 0.0;
  result = fabs(v1);
  if (!v2)
    return v1;
  return result;
}

id HKLocalizedStringForNumberWithTemplate(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a1;
  HKNumberFormatterFromTemplate(a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringFromNumber:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id HKLocalizedStringForNumberWithDecimalPrecision(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;

  v5 = a1;
  HKNumberFormatterWithDecimalPrecisionAndStyle(a2, a3, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "stringFromNumber:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

id HKLocalizedNoDataString()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "localizedStringForKey:value:table:", CFSTR("NO_DATA"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id HKDecimalFormatter(uint64_t a1)
{
  return HKNumberFormatterWithDecimalPrecisionAndStyle(2, a1, 1);
}

id HKIntegerFormatter()
{
  return HKNumberFormatterWithDecimalPrecisionAndStyle(0, 0, 1);
}

id HKThisYearDateFormatter()
{
  _RegisterForLocaleChangeNotificationIfNecessary();
  return _performNSDateFormatterInitializationBlock(&__block_literal_global_224);
}

void _RegisterForLocaleChangeNotificationIfNecessary()
{
  __CFNotificationCenter *LocalCenter;

  if ((_RegisterForLocaleChangeNotificationIfNecessary___registeredForLocaleWillChange & 1) == 0)
  {
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterAddObserver(LocalCenter, 0, (CFNotificationCallback)_LocaleDidChangeCallback, (CFStringRef)*MEMORY[0x1E0C9B070], 0, CFNotificationSuspensionBehaviorDrop);
    _RegisterForLocaleChangeNotificationIfNecessary___registeredForLocaleWillChange = 1;
  }
}

id _timeFormatString()
{
  void *v0;
  uint64_t v1;

  CPDateFormatStringForFormatType();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (!_CPTimeFormatIs24HourMode())
  {
    objc_msgSend(v0, "stringByAppendingString:", CFSTR(" a"));
    v1 = objc_claimAutoreleasedReturnValue();

    v0 = (void *)v1;
  }
  return v0;
}

id HKPriorYearsDateFormatter()
{
  if (HKPriorYearsDateFormatter_onceToken != -1)
    dispatch_once(&HKPriorYearsDateFormatter_onceToken, &__block_literal_global_229);
  return (id)HKPriorYearsDateFormatter___dateFormatter;
}

id HKPriorYearsDateFormatterNoTime()
{
  if (HKPriorYearsDateFormatterNoTime_onceToken != -1)
    dispatch_once(&HKPriorYearsDateFormatterNoTime_onceToken, &__block_literal_global_230);
  return (id)HKPriorYearsDateFormatterNoTime___dateFormatter;
}

id HKTimeFormatter()
{
  _RegisterForLocaleChangeNotificationIfNecessary();
  return _performNSDateFormatterInitializationBlock(&__block_literal_global_231);
}

id _WDHourDateFormatterAMPM()
{
  if (_WDHourDateFormatterAMPM_onceToken != -1)
    dispatch_once(&_WDHourDateFormatterAMPM_onceToken, &__block_literal_global_232);
  return (id)_WDHourDateFormatterAMPM___dateFormatter;
}

id _WDHourDateFormatter24Hour()
{
  if (_WDHourDateFormatter24Hour_onceToken != -1)
    dispatch_once(&_WDHourDateFormatter24Hour_onceToken, &__block_literal_global_235);
  return (id)_WDHourDateFormatter24Hour___dateFormatter;
}

id HKHourDateFormatter()
{
  if (_CPTimeFormatIs24HourMode())
    _WDHourDateFormatter24Hour();
  else
    _WDHourDateFormatterAMPM();
  return (id)objc_claimAutoreleasedReturnValue();
}

id HKHourMinuteDateFormatterWithTimeZone(void *a1)
{
  objc_class *v1;
  id v2;
  id v3;

  v1 = (objc_class *)MEMORY[0x1E0CB3578];
  v2 = a1;
  v3 = objc_alloc_init(v1);
  objc_msgSend(v3, "setTimeZone:", v2);

  objc_msgSend(v3, "setLocalizedDateFormatFromTemplate:", CFSTR("j:mm a zzz"));
  return v3;
}

id HKFormattedFeetAndInches(double a1)
{
  unsigned int v1;
  double v2;
  int v3;
  int v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v1 = vcvtmd_s64_f64(a1);
  v2 = (a1 - floor(a1)) * 12.0;
  v3 = llround(v2 * 100.0);
  if (v3 <= 1199)
    v4 = v3;
  else
    v4 = v3 - 1200;
  if (v3 <= 1199)
    v5 = v1;
  else
    v5 = v1 + 1;
  HKNumberFormatterWithDecimalPrecisionAndStyle(0, 0, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "stringFromNumber:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4 % 100)
  {
    *(float *)&v9 = v2;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    HKNumberFormatterWithDecimalPrecisionAndStyle(2, 0, 1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "stringFromNumber:", v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "stringFromNumber:", v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
  }

  v13 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "localizedStringForKey:value:table:", CFSTR("FEET_INCH_FORMAT %@ %@"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "stringWithFormat:", v15, v8, v12);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  return v16;
}

id HKDistanceFormatter()
{
  if (HKDistanceFormatter_onceToken != -1)
    dispatch_once(&HKDistanceFormatter_onceToken, &__block_literal_global_242);
  return (id)HKDistanceFormatter___distanceFormatter;
}

BOOL HKTimeFormatIsIn24HourMode()
{
  return _CPTimeFormatIs24HourMode() != 0;
}

id HKLastUpdatedSecondaryValueDateFormatter()
{
  if (HKLastUpdatedSecondaryValueDateFormatter_onceToken != -1)
    dispatch_once(&HKLastUpdatedSecondaryValueDateFormatter_onceToken, &__block_literal_global_244);
  return (id)HKLastUpdatedSecondaryValueDateFormatter___dateFormatter;
}

id HKFormattedStringForDate(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "components:fromDate:toDate:options:", 4, v1, v3, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v4, "year") <= 0)
  {
    _RegisterForLocaleChangeNotificationIfNecessary();
    _performNSDateFormatterInitializationBlock(&__block_literal_global_224);
  }
  else
  {
    HKPriorYearsDateFormatter();
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "stringFromDate:", v1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

uint64_t HKFormatterIncludesUnitForDisplayTypeInContext(void *a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v5 = a1;
  objc_msgSend(a3, "unitForDisplayType:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "hk_numberFormatterForUnit:formattingContext:", v6, a2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = objc_msgSend(v7, "returnsUnitWithValueForDisplay");
  return v8;
}

id _WDLocalizedDisplayStringForActivityQuantity(void *a1, void *a2, void *a3, void *a4, char a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  double v14;
  double v15;
  void *v16;
  void *v17;
  void *v18;
  double v19;
  double v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    objc_msgSend(v9, "doubleValueForUnit:", v11);
    v15 = v14;
    HKNumberFormatterWithDecimalPrecisionAndStyle(0, 0, 1);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v15);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "stringFromNumber:", v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "addObject:", v18);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "localizedStringForKey:value:table:", CFSTR("NO_DATA"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "addObject:", v17);
  }

  if ((a5 & 1) == 0)
  {
    objc_msgSend(v13, "addObject:", CFSTR("/"));
    if (v10)
    {
      objc_msgSend(v10, "doubleValueForUnit:", v11);
      v20 = v19;
      HKNumberFormatterWithDecimalPrecisionAndStyle(0, 0, 1);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v20);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "stringFromNumber:", v22);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "addObject:", v23);

    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "localizedStringForKey:value:table:", CFSTR("NO_DATA"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "addObject:", v22);
    }

  }
  if (v12)
  {
    objc_msgSend(v13, "addObject:", CFSTR(" "));
    objc_msgSend(v13, "addObject:", v12);
  }
  objc_msgSend(v13, "componentsJoinedByString:", &stru_1E9C4C428);
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  return v24;
}

id HKLocalizedDisplayStringForAppleMoveTime(void *a1, void *a2, char a3, int a4)
{
  void *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;

  v7 = (void *)MEMORY[0x1E0CB6CD0];
  v8 = a2;
  v9 = a1;
  objc_msgSend(v7, "minuteUnit");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "localizedStringForKey:value:table:", CFSTR("MINUTES_MEDIUM"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "doubleValueForUnit:", v10);
  objc_msgSend(v11, "localizedStringWithFormat:", v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (a4)
    v16 = 0;
  else
    v16 = v15;
  _WDLocalizedDisplayStringForActivityQuantity(v9, v8, v10, v16, a3);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  return v17;
}

id HKLocalizedDisplayStringForAppleExerciseTime(void *a1, void *a2, char a3, int a4)
{
  void *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;

  v7 = (void *)MEMORY[0x1E0CB6CD0];
  v8 = a2;
  v9 = a1;
  objc_msgSend(v7, "minuteUnit");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "localizedStringForKey:value:table:", CFSTR("MINUTES_MEDIUM"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "doubleValueForUnit:", v10);
  objc_msgSend(v11, "localizedStringWithFormat:", v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (a4)
    v16 = 0;
  else
    v16 = v15;
  _WDLocalizedDisplayStringForActivityQuantity(v9, v8, v10, v16, a3);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  return v17;
}

id HKLocalizedDisplayStringForAppleStandHours(void *a1, void *a2, char a3, int a4)
{
  void *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;

  v7 = (void *)MEMORY[0x1E0CB6CD0];
  v8 = a2;
  v9 = a1;
  objc_msgSend(v7, "countUnit");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "localizedStringForKey:value:table:", CFSTR("HOURS_MEDIUM"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "doubleValueForUnit:", v10);
  objc_msgSend(v11, "localizedStringWithFormat:", v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (a4)
    v16 = 0;
  else
    v16 = v15;
  _WDLocalizedDisplayStringForActivityQuantity(v9, v8, v10, v16, a3);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  return v17;
}

id HKFormatValueAndUnit(void *a1, void *a2)
{
  return HKFormatValueAndUnitWithSpaceBetweenValueAndUnit(a1, a2, 1);
}

id HKFormatValueAndUnitWithSpaceBetweenValueAndUnit(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  __CFString *v7;
  void *v8;
  void *v9;
  __CFString *v10;
  void *v11;
  void *v12;
  id v13;

  v5 = a1;
  v6 = a2;
  if (objc_msgSend(v6, "length"))
  {
    v7 = CFSTR("VALUE_UNIT_FORMAT %@%@");
    if (a3)
      v7 = CFSTR("VALUE_UNIT_FORMAT %@ %@");
    v8 = (void *)MEMORY[0x1E0CB3940];
    v9 = (void *)MEMORY[0x1E0CB34D0];
    v10 = v7;
    objc_msgSend(v9, "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "localizedStringForKey:value:table:", v10, &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v8, "localizedStringWithFormat:", v12, v5, v6);
    v13 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v13 = v5;
  }

  return v13;
}

id HKFormatAttributedValueAndUnit(void *a1, void *a2, void *a3, void *a4, int a5)
{
  return HKFormatAttributedValueAndUnitWithSpaceBetweenValueAndUnit(a1, a2, a3, a4, a5);
}

id HKFormatAttributedValueAndUnitWithSpaceBetweenValueAndUnit(void *a1, void *a2, void *a3, void *a4, int a5)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  HKGenerateAttributedStringsWithUnitValue(a1, a2, a3, a4, 2, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithString:", &stru_1E9C4C428);
  objc_msgSend(v5, "addObject:", v6);
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithString:", &stru_1E9C4C428);
  objc_msgSend(v5, "addObject:", v7);
  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "localizedStringForKey:value:table:", CFSTR("QUANTITY_VALUE_FORMAT_STRING"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  HKUIJoinAttributedStringsWithFormat(v5, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

id HKFormatAttributedValueAndDetails(void *a1, void *a2, void *a3)
{
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  _QWORD v16[2];
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v5 = *MEMORY[0x1E0DC1140];
  v16[0] = *MEMORY[0x1E0DC1138];
  v16[1] = v5;
  v17[0] = a3;
  v6 = (void *)MEMORY[0x1E0DC3658];
  v7 = a3;
  v8 = a2;
  v9 = a1;
  objc_msgSend(v6, "hk_chartLollipopLabelColor");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v17[1] = v10;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v17, v16, 2);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3778]), "initWithAttributedString:", v9);
  v13 = objc_alloc(MEMORY[0x1E0CB3498]);

  v14 = (void *)objc_msgSend(v13, "initWithString:attributes:", v8, v11);
  objc_msgSend(v12, "appendAttributedString:", v14);

  return v12;
}

__CFString *HKTimePeriodStringGenerator(void *a1, __int16 a2)
{
  id v3;
  int v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  const __CFString *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  const __CFString *v21;
  const __CFString *v22;
  const __CFString *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t j;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t i;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  __CFString *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  int v59;
  const __CFString *v60;
  void *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE v74[128];
  _BYTE v75[128];
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v72 = 0;
  v73 = 0;
  v70 = 0;
  v71 = 0;
  objc_msgSend(v3, "doubleValue");
  if ((a2 & 0x100) != 0)
  {
    HKSeparateTimeIntervalComponentsWithWeeks();
    goto LABEL_7;
  }
  if ((a2 & 0x80) == 0)
  {
    HKSeparateTimeIntervalComponentsWithDays();
    if ((a2 & 1) != 0)
      goto LABEL_8;
LABEL_7:
    v4 = 1;
    goto LABEL_9;
  }
  HKSeparateTimeIntervalComponents();
  if ((a2 & 1) == 0)
    goto LABEL_7;
LABEL_8:
  v4 = 0;
  v70 = 0;
LABEL_9:
  v5 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if ((v4 & 1) == 0)
  {
    HKNumberFormatterWithDecimalPrecisionAndStyle(0, 0, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v71);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "stringFromNumber:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v9 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10;
    if ((a2 & 2) != 0)
      v12 = CFSTR("HOURS_PAIR_MEDIUM_UPPERCASE");
    else
      v12 = CFSTR("HOURS_PAIR_MEDIUM");
    objc_msgSend(v10, "localizedStringForKey:value:table:", v12, &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "localizedStringWithFormat:", v13, v8);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    if (v14)
      objc_msgSend(v5, "addObject:", v14);

  }
  if (v4 == 1)
  {
    HKNumberFormatterWithDecimalPrecisionAndStyle(0, 0, 1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if ((a2 & 0x100) != 0)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v72);
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "stringFromNumber:", v51);
      v17 = (void *)objc_claimAutoreleasedReturnValue();

      v52 = (void *)MEMORY[0x1E0CB3940];
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      v54 = v53;
      if ((a2 & 4) != 0)
      {
        if ((a2 & 2) != 0)
        {
          objc_msgSend(v53, "localizedStringForKey:value:table:", CFSTR("DAYS_NUMBERED_UNIT_UPPERCASE"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
          v61 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v52, "localizedStringWithFormat:", v61, v72);
          v56 = objc_claimAutoreleasedReturnValue();

          v57 = v17;
          v58 = (void *)v56;
          v59 = 0;
        }
        else
        {
          objc_msgSend(v53, "localizedStringForKey:value:table:", CFSTR("DAYS_NUMBERED_UNIT"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v52, "localizedStringWithFormat:", v55, v72);
          v56 = objc_claimAutoreleasedReturnValue();

          v57 = v17;
          v58 = (void *)v56;
          v59 = 1;
        }
        HKFormatValueAndUnitWithSpaceBetweenValueAndUnit(v57, v58, v59);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v54 = (void *)v56;
      }
      else
      {
        if ((a2 & 2) != 0)
          v60 = CFSTR("DAYS_PAIR_SHORT_UPPERCASE");
        else
          v60 = CFSTR("DAYS_PAIR_SHORT");
        objc_msgSend(v53, "localizedStringForKey:value:table:", v60, &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v52, "localizedStringWithFormat:", v26, v17);
        v25 = (void *)objc_claimAutoreleasedReturnValue();

      }
      if (!v25)
        goto LABEL_30;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v70);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "stringFromNumber:", v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();

      v18 = (void *)MEMORY[0x1E0CB3940];
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = v19;
      v21 = CFSTR("MINUTES_PAIR_MEDIUM_PLURAL_UPPERCASE");
      if ((a2 & 2) == 0)
        v21 = CFSTR("MINUTES_PAIR_MEDIUM_PLURAL");
      v22 = CFSTR("MINUTES_PAIR_MEDIUM");
      if ((a2 & 2) != 0)
        v22 = CFSTR("MINUTES_PAIR_MEDIUM_UPPERCASE");
      if ((a2 & 8) != 0)
        v23 = v21;
      else
        v23 = v22;
      objc_msgSend(v19, "localizedStringForKey:value:table:", v23, &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "localizedStringWithFormat:", v24, v17);
      v25 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v25)
        goto LABEL_30;
    }
    objc_msgSend(v5, "addObject:", v25);
LABEL_30:

  }
  if ((a2 & 0x40) != 0)
  {
    v27 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v5, "count"));
    v66 = 0u;
    v67 = 0u;
    v68 = 0u;
    v69 = 0u;
    v34 = v5;
    v35 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v66, v75, 16);
    if (v35)
    {
      v36 = v35;
      v37 = *(_QWORD *)v67;
      do
      {
        for (i = 0; i != v36; ++i)
        {
          if (*(_QWORD *)v67 != v37)
            objc_enumerationMutation(v34);
          objc_msgSend(*(id *)(*((_QWORD *)&v66 + 1) + 8 * i), "stringByReplacingOccurrencesOfString:withString:", CFSTR(" "), CFSTR("\uFFFC"));
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v27, "addObject:", v39);

        }
        v36 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v66, v75, 16);
      }
      while (v36);
    }
  }
  else
  {
    if ((a2 & 0x20) == 0)
      goto LABEL_49;
    v27 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v5, "count"));
    v62 = 0u;
    v63 = 0u;
    v64 = 0u;
    v65 = 0u;
    v28 = v5;
    v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v62, v74, 16);
    if (v29)
    {
      v30 = v29;
      v31 = *(_QWORD *)v63;
      do
      {
        for (j = 0; j != v30; ++j)
        {
          if (*(_QWORD *)v63 != v31)
            objc_enumerationMutation(v28);
          objc_msgSend(*(id *)(*((_QWORD *)&v62 + 1) + 8 * j), "stringByReplacingOccurrencesOfString:withString:", CFSTR(" "), CFSTR(" "));
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v27, "addObject:", v33);

        }
        v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v62, v74, 16);
      }
      while (v30);
    }
  }

  v5 = v27;
LABEL_49:
  v40 = objc_msgSend(v5, "count");
  if (v40 == 3)
  {
    v46 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v42, "localizedStringForKey:value:table:", CFSTR("TIME_DISPLAY_3"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "objectAtIndexedSubscript:", 0);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "objectAtIndexedSubscript:", 1);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "objectAtIndexedSubscript:", 2);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "localizedStringWithFormat:", v43, v44, v47, v48);
    v45 = (__CFString *)objc_claimAutoreleasedReturnValue();

LABEL_55:
    goto LABEL_56;
  }
  if (v40 == 2)
  {
    v49 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v42, "localizedStringForKey:value:table:", CFSTR("TIME_DISPLAY_2"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "objectAtIndexedSubscript:", 0);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "objectAtIndexedSubscript:", 1);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v49, "localizedStringWithFormat:", v43, v44, v47);
    v45 = (__CFString *)objc_claimAutoreleasedReturnValue();
    goto LABEL_55;
  }
  if (v40 != 1)
  {
    v45 = CFSTR("<error>");
    goto LABEL_58;
  }
  v41 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v42, "localizedStringForKey:value:table:", CFSTR("TIME_DISPLAY_1"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectAtIndexedSubscript:", 0);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v41, "localizedStringWithFormat:", v43, v44);
  v45 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_56:

LABEL_58:
  return v45;
}

id HKTimePeriodString(void *a1, __int16 a2)
{
  char v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v2 = a2;
  HKTimePeriodStringGenerator(a1, a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if ((v2 & 2) != 0)
  {
    objc_msgSend(v3, "localizedUppercaseString");
    v5 = objc_claimAutoreleasedReturnValue();

    v4 = (void *)v5;
  }
  return v4;
}

id HKTimePeriodStringWithFonts(void *a1, void *a2, void *a3, unint64_t a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  void *v25;
  unint64_t v26;
  void *v27;
  int v28;
  id v30;
  id v31;
  uint64_t v32;
  id v33;
  _QWORD v34[2];
  _QWORD v35[2];
  uint64_t v36;
  id v37;
  _QWORD v38[2];
  _QWORD v39[3];

  v39[2] = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  if (a3)
  {
    HKTimePeriodStringGenerator(a3, a4 | 0x40);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3500], "decimalDigitCharacterSet");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3778]), "initWithString:", v9);
    v12 = *MEMORY[0x1E0DC1138];
    v30 = v8;
    v31 = v7;
    if ((a4 & 0x10) != 0)
    {
      v18 = *MEMORY[0x1E0DC1140];
      v38[0] = *MEMORY[0x1E0DC1138];
      v38[1] = v18;
      v39[0] = v7;
      objc_msgSend(MEMORY[0x1E0DC3658], "hk_chartLollipopValueColor");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v39[1] = v19;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v39, v38, 2);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      v34[1] = v18;
      v35[0] = v8;
      v34[0] = v12;
      objc_msgSend(MEMORY[0x1E0DC3658], "hk_chartLollipopLabelColor");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v35[1] = v20;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v35, v34, 2);
      v14 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v36 = *MEMORY[0x1E0DC1138];
      v37 = v7;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v37, &v36, 1);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = v12;
      v33 = v8;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v33, &v32, 1);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
    }
    objc_msgSend(MEMORY[0x1E0CB3498], "hk_attributedStringForSpacing:nonBreaking:", 1, (a4 >> 5) & 1);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v9, "length");
    if (v22 >= 1)
    {
      v23 = v22;
      for (i = 0; i != v23; ++i)
      {
        if (objc_msgSend(v10, "characterIsMember:", objc_msgSend(v9, "characterAtIndex:", i)))
          v25 = v13;
        else
          v25 = v14;
        objc_msgSend(v11, "addAttributes:range:", v25, i, 1);
      }
    }
    if (objc_msgSend(v11, "length"))
    {
      v26 = 0;
      do
      {
        objc_msgSend(v11, "string");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = objc_msgSend(v27, "characterAtIndex:", v26);

        if (v28 == 65532)
        {
          objc_msgSend(v11, "replaceCharactersInRange:withAttributedString:", v26, objc_msgSend(CFSTR("\uFFFC"), "length"), v21);
          v26 += objc_msgSend(v21, "length");
        }
        ++v26;
      }
      while (v26 < objc_msgSend(v11, "length"));
    }

    v8 = v30;
    v7 = v31;
  }
  else
  {
    v15 = objc_alloc(MEMORY[0x1E0CB3778]);
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "localizedStringForKey:value:table:", CFSTR("NO_DATA"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (void *)objc_msgSend(v15, "initWithString:", v17);

    objc_msgSend(v11, "addAttribute:value:range:", *MEMORY[0x1E0DC1138], v7, 0, objc_msgSend(v11, "length"));
  }

  return v11;
}

id HKUIStringForInsulinDeliveryReason(uint64_t a1)
{
  return HKUIStringForInsulinDeliveryReasonEmbedded(a1, 0);
}

id HKUIStringForInsulinDeliveryReasonEmbedded(uint64_t a1, int a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("INSULIN_DELIVERY_REASON_%zd"), a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (a2)
  {
    objc_msgSend(v3, "stringByAppendingString:", CFSTR("_EMBEDDED"));
    v5 = objc_claimAutoreleasedReturnValue();

    v4 = (void *)v5;
  }
  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "localizedStringForKey:value:table:", v4, &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

void _LocaleDidChangeCallback()
{
  _performWithFormatterLock(&__block_literal_global_534);
}

uint64_t HKCodableSummaryOngoingFactorsValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  int v17;
  unint64_t v19;
  uint64_t result;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      v17 = v10 & 7;
      if (v16 || v17 == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v19 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v19 == 2)
      {
        *(_BYTE *)(a1 + 48) |= 1u;
        v31 = *v3;
        v32 = *(_QWORD *)(a2 + v31);
        if (v32 <= 0xFFFFFFFFFFFFFFF7 && v32 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v30 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v32);
          *(_QWORD *)(a2 + v31) = v32 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v30 = 0;
        }
        v40 = 32;
LABEL_56:
        *(_QWORD *)(a1 + v40) = v30;
        goto LABEL_57;
      }
      if ((_DWORD)v19 == 1)
      {
        if (v17 == 2)
        {
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v21 = 0;
            v22 = 0;
            v23 = 0;
            while (1)
            {
              v24 = *v3;
              v25 = *(_QWORD *)(a2 + v24);
              v26 = v25 + 1;
              if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v4))
                break;
              v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
              *(_QWORD *)(a2 + v24) = v26;
              v23 |= (unint64_t)(v27 & 0x7F) << v21;
              if (v27 < 0)
              {
                v21 += 7;
                v15 = v22++ >= 9;
                if (!v15)
                  continue;
              }
              goto LABEL_33;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
            PBRepeatedInt64Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v33 = 0;
          v34 = 0;
          v35 = 0;
          while (1)
          {
            v36 = *v3;
            v37 = *(_QWORD *)(a2 + v36);
            v38 = v37 + 1;
            if (v37 == -1 || v38 > *(_QWORD *)(a2 + *v4))
              break;
            v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v38;
            v35 |= (unint64_t)(v39 & 0x7F) << v33;
            if (v39 < 0)
            {
              v33 += 7;
              v15 = v34++ >= 9;
              if (!v15)
                continue;
            }
            goto LABEL_51;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_51:
          PBRepeatedInt64Add();
        }
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        return 0;
      }
LABEL_57:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    *(_BYTE *)(a1 + 48) |= 2u;
    v28 = *v3;
    v29 = *(_QWORD *)(a2 + v28);
    if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(_QWORD *)(a2 + *v4))
    {
      v30 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v29);
      *(_QWORD *)(a2 + v28) = v29 + 8;
    }
    else
    {
      *(_BYTE *)(a2 + *v5) = 1;
      v30 = 0;
    }
    v40 = 40;
    goto LABEL_56;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void OUTLINED_FUNCTION_1_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x20u);
}

void OUTLINED_FUNCTION_3_0(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

uint64_t OUTLINED_FUNCTION_4_0()
{
  uint64_t v0;

  return v0;
}

_BYTE *OUTLINED_FUNCTION_5(_BYTE *result, _BYTE *a2)
{
  *result = 0;
  *a2 = 0;
  return result;
}

void OUTLINED_FUNCTION_6(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t OUTLINED_FUNCTION_7()
{
  uint64_t v0;

  return v0;
}

id OUTLINED_FUNCTION_8(uint64_t a1, void *a2)
{
  return a2;
}

void sub_1D7864830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D7866B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

uint64_t HKCodableSleepingSampleBaselineAvailabilityReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  HKCodableDayIndexRange *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t result;
  uint64_t v31;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        v25 = 0;
        v26 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 32) |= 1u;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v21 |= (unint64_t)(v29 & 0x7F) << v25;
          if ((v29 & 0x80) == 0)
            goto LABEL_45;
          v25 += 7;
          v14 = v26++ >= 9;
          if (v14)
          {
            v21 = 0;
            goto LABEL_47;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_47:
        v31 = 8;
LABEL_48:
        *(_QWORD *)(a1 + v31) = v21;
        goto LABEL_49;
      }
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(HKCodableDayIndexRange);
        objc_storeStrong((id *)(a1 + 24), v18);
        if (!PBReaderPlaceMark() || !HKCodableDayIndexRangeReadFrom((uint64_t)v18, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
LABEL_49:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v19 = 0;
    v20 = 0;
    v21 = 0;
    *(_BYTE *)(a1 + 32) |= 2u;
    while (1)
    {
      v22 = *v3;
      v23 = *(_QWORD *)(a2 + v22);
      if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
        break;
      v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
      *(_QWORD *)(a2 + v22) = v23 + 1;
      v21 |= (unint64_t)(v24 & 0x7F) << v19;
      if ((v24 & 0x80) == 0)
        goto LABEL_41;
      v19 += 7;
      v14 = v20++ >= 9;
      if (v14)
      {
        v21 = 0;
        goto LABEL_43;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
    if (*(_BYTE *)(a2 + *v5))
      v21 = 0;
LABEL_43:
    v31 = 16;
    goto LABEL_48;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

SecKeyRef _createPrivateSecKeyRefFromP12(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  const __CFData *v4;
  id v5;
  uint64_t v6;
  BOOL v7;
  const __CFDictionary *ValueAtIndex;
  __SecIdentity *Value;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  SecKeyRef v26;
  CFArrayRef theArray;
  SecKeyRef privateKeyRef;

  v1 = a1;
  HKHealthUIFrameworkBundle();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "pathForResource:ofType:", CFSTR("donateLifePrivate"), CFSTR("p12"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfFile:", v3);
  v4 = (const __CFData *)objc_claimAutoreleasedReturnValue();
  v5 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  privateKeyRef = 0;
  objc_msgSend(v5, "setObject:forKey:", v1, *MEMORY[0x1E0CD6D58]);

  theArray = 0;
  v6 = SecPKCS12Import(v4, (CFDictionaryRef)v5, &theArray);
  if ((_DWORD)v6)
    v7 = 1;
  else
    v7 = theArray == 0;
  if (v7 || CFArrayGetCount(theArray) < 1)
  {
    _HKInitializeLogging();
    v19 = *MEMORY[0x1E0CB5378];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CB5378], OS_LOG_TYPE_ERROR))
      _createPrivateSecKeyRefFromP12_cold_2(v6, v19, v20, v21, v22, v23, v24, v25);
  }
  else
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, 0);
    Value = (__SecIdentity *)CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E0CD6D60]);
    v10 = SecIdentityCopyPrivateKey(Value, &privateKeyRef);
    if ((_DWORD)v10)
    {
      v11 = v10;
      _HKInitializeLogging();
      v12 = *MEMORY[0x1E0CB5378];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CB5378], OS_LOG_TYPE_ERROR))
        _createPrivateSecKeyRefFromP12_cold_1(v11, v12, v13, v14, v15, v16, v17, v18);
      privateKeyRef = 0;
    }
  }
  if (theArray)
    CFRelease(theArray);
  v26 = privateKeyRef;

  return v26;
}

id _DecodedString(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  _QWORD v16[4];

  v16[3] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v16[0] = objc_opt_class();
  v16[1] = objc_opt_class();
  v16[2] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v16, 3);
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = (id)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        NSStringFromClass(*(Class *)(*((_QWORD *)&v11 + 1) + 8 * v7));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "appendString:", v8, (_QWORD)v11);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  RevealObfuscatedStringWithSalt(a1, v2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

id _SignStringWithSHA256RSA(void *a1, __SecKey *a2)
{
  id v3;
  void *v4;
  uint8_t *v5;
  id v6;
  const void *v7;
  CC_LONG v8;
  void *v9;
  size_t sigLen;

  v3 = a1;
  sigLen = SecKeyGetBlockSize(a2);
  v4 = malloc_type_malloc(sigLen, 0x28538A69uLL);
  bzero(v4, sigLen);
  v5 = (uint8_t *)malloc_type_malloc(0x20uLL, 0x6C798A5CuLL);
  v6 = objc_retainAutorelease(v3);
  v7 = (const void *)objc_msgSend(v6, "bytes");
  v8 = objc_msgSend(v6, "length");

  if (CC_SHA256(v7, v8, v5))
  {
    SecKeyRawSign(a2, 0x8004u, v5, 0x20uLL, (uint8_t *)v4, &sigLen);
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v4, sigLen);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    free(v5);
    free(v4);
    return v9;
  }
  else
  {
    free(v5);
    free(v4);
    return 0;
  }
}

void OUTLINED_FUNCTION_1_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void OUTLINED_FUNCTION_2_1(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x12u);
}

void OUTLINED_FUNCTION_5_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

uint64_t OUTLINED_FUNCTION_9_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_10()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_0_3(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

uint64_t HKCodableWheelchairSettingReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t result;
  uint64_t v36;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 28) |= 2u;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_49;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            v26 = 0;
            goto LABEL_51;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_49:
        if (*(_BYTE *)(a2 + *v5))
          v26 = 0;
LABEL_51:
        v36 = 16;
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 28) |= 4u;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_45;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_47;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_47:
            *(_BYTE *)(a1 + 24) = v20 != 0;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v30 = 0;
        v31 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 28) |= 1u;
        while (1)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            break;
          v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
          *(_QWORD *)(a2 + v32) = v33 + 1;
          v26 |= (unint64_t)(v34 & 0x7F) << v30;
          if ((v34 & 0x80) == 0)
            goto LABEL_53;
          v30 += 7;
          v14 = v31++ >= 9;
          if (v14)
          {
            v26 = 0;
            goto LABEL_55;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
        if (*(_BYTE *)(a2 + *v5))
          v26 = 0;
LABEL_55:
        v36 = 8;
      }
      *(_QWORD *)(a1 + v36) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1D7874834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getTUCallProviderManagerClass_block_invoke(uint64_t a1)
{
  Class result;

  TelephonyUtilitiesLibrary();
  result = objc_getClass("TUCallProviderManager");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getTUCallProviderManagerClass_block_invoke_cold_1();
  getTUCallProviderManagerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void TelephonyUtilitiesLibrary()
{
  void *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = 0;
  if (!TelephonyUtilitiesLibraryCore_frameworkLibrary)
  {
    v1 = xmmword_1E9C3FE18;
    v2 = 0;
    TelephonyUtilitiesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!TelephonyUtilitiesLibraryCore_frameworkLibrary)
    TelephonyUtilitiesLibrary_cold_1(&v0);
}

Class __getTUDialRequestClass_block_invoke(uint64_t a1)
{
  Class result;

  TelephonyUtilitiesLibrary();
  result = objc_getClass("TUDialRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getTUDialRequestClass_block_invoke_cold_1();
  getTUDialRequestClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getTUHandleClass_block_invoke(uint64_t a1)
{
  Class result;

  TelephonyUtilitiesLibrary();
  result = objc_getClass("TUHandle");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getTUHandleClass_block_invoke_cold_1();
  getTUHandleClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t HKCodableSummaryTrendTileViewModelReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  HKCodableSummaryTrendLineViewModel *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 96;
        goto LABEL_52;
      case 2u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 48;
        goto LABEL_52;
      case 3u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 120) |= 4u;
        while (2)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          v26 = v25 + 1;
          if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v26;
            v23 |= (unint64_t)(v27 & 0x7F) << v21;
            if (v27 < 0)
            {
              v21 += 7;
              v15 = v22++ >= 9;
              if (v15)
              {
                LODWORD(v23) = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v23) = 0;
LABEL_56:
        *(_DWORD *)(a1 + 64) = v23;
        goto LABEL_62;
      case 4u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 80;
        goto LABEL_52;
      case 5u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 56;
        goto LABEL_52;
      case 6u:
        v28 = objc_alloc_init(HKCodableSummaryTrendLineViewModel);
        v29 = 24;
        goto LABEL_34;
      case 7u:
        v28 = objc_alloc_init(HKCodableSummaryTrendLineViewModel);
        v29 = 40;
LABEL_34:
        objc_storeStrong((id *)(a1 + v29), v28);
        if (!PBReaderPlaceMark()
          || (HKCodableSummaryTrendLineViewModelReadFrom((uint64_t)v28, a2) & 1) == 0)
        {
          goto LABEL_64;
        }
        goto LABEL_47;
      case 8u:
        v28 = objc_alloc_init(HKCodableSummaryVisualizationPoint);
        objc_msgSend((id)a1, "addVisualizationPoints:", v28);
        if (!PBReaderPlaceMark()
          || (HKCodableSummaryVisualizationPointReadFrom((uint64_t)v28, a2) & 1) == 0)
        {
          goto LABEL_64;
        }
        goto LABEL_47;
      case 9u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 72;
        goto LABEL_52;
      case 0xAu:
        *(_BYTE *)(a1 + 120) |= 1u;
        v30 = *v3;
        v31 = *(_QWORD *)(a2 + v30);
        if (v31 <= 0xFFFFFFFFFFFFFFF7 && v31 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v32 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v31);
          *(_QWORD *)(a2 + v30) = v31 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v32 = 0;
        }
        v36 = 8;
        goto LABEL_61;
      case 0xBu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 104;
        goto LABEL_52;
      case 0xCu:
        v28 = objc_alloc_init(HKCodableCellHeaderViewModel);
        objc_storeStrong((id *)(a1 + 32), v28);
        if (PBReaderPlaceMark() && (HKCodableCellHeaderViewModelReadFrom((uint64_t)v28, a2) & 1) != 0)
        {
LABEL_47:
          PBReaderRecallMark();

LABEL_62:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_64:

        return 0;
      case 0xDu:
        *(_BYTE *)(a1 + 120) |= 2u;
        v33 = *v3;
        v34 = *(_QWORD *)(a2 + v33);
        if (v34 <= 0xFFFFFFFFFFFFFFF7 && v34 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v32 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v34);
          *(_QWORD *)(a2 + v33) = v34 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v32 = 0;
        }
        v36 = 16;
LABEL_61:
        *(_QWORD *)(a1 + v36) = v32;
        goto LABEL_62;
      case 0xEu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 88;
LABEL_52:
        v35 = *(void **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;

        goto LABEL_62;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_62;
    }
  }
}

uint64_t HKCodableSummaryElectrocardiogramValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  HKCodableQuantity *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 40) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          v23 = v22 + 1;
          if (v22 == -1 || v23 > *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v23;
          v20 |= (unint64_t)(v24 & 0x7F) << v18;
          if ((v24 & 0x80) == 0)
            goto LABEL_42;
          v18 += 7;
          v15 = v19++ >= 9;
          if (v15)
          {
            v20 = 0;
            goto LABEL_44;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_42:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_44:
        v36 = 8;
        goto LABEL_49;
      case 2u:
        v26 = 0;
        v27 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 40) |= 2u;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          v30 = v29 + 1;
          if (v29 == -1 || v30 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v30;
            v20 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v15 = v27++ >= 9;
              if (v15)
              {
                v20 = 0;
                goto LABEL_48;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_48:
        v36 = 16;
LABEL_49:
        *(_QWORD *)(a1 + v36) = v20;
        goto LABEL_52;
      case 3u:
        v32 = objc_alloc_init(HKCodableQuantity);
        objc_storeStrong((id *)(a1 + 32), v32);
        if (PBReaderPlaceMark() && (HKCodableQuantityReadFrom((uint64_t)v32, a2) & 1) != 0)
        {
          PBReaderRecallMark();

LABEL_52:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 4u:
        *(_BYTE *)(a1 + 40) |= 4u;
        v33 = *v3;
        v34 = *(_QWORD *)(a2 + v33);
        if (v34 <= 0xFFFFFFFFFFFFFFF7 && v34 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v35 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v34);
          *(_QWORD *)(a2 + v33) = v34 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v35 = 0;
        }
        *(_QWORD *)(a1 + 24) = v35;
        goto LABEL_52;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_52;
    }
  }
}

uint64_t HKCodableChartHorizontalTimePeriodDataSourceDataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  HKCodableHorizontalTimePeriodData *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(HKCodableHorizontalTimePeriodData);
        objc_msgSend(a1, "addDateIntervalsByValue:", v17);
        if (!PBReaderPlaceMark()
          || (HKCodableHorizontalTimePeriodDataReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HKCodableSummaryCardioFitnessValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  HKCodableQuantity *v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v18 = objc_alloc_init(HKCodableQuantity);
        objc_storeStrong((id *)(a1 + 32), v18);
        if (PBReaderPlaceMark() && (HKCodableQuantityReadFrom((uint64_t)v18, a2) & 1) != 0)
          goto LABEL_36;
        goto LABEL_45;
      case 2u:
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 40) |= 1u;
        while (2)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          v25 = v24 + 1;
          if (v24 == -1 || v25 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if (v26 < 0)
            {
              v20 += 7;
              v15 = v21++ >= 9;
              if (v15)
              {
                v22 = 0;
                goto LABEL_40;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v22 = 0;
LABEL_40:
        *(_QWORD *)(a1 + 8) = v22;
        goto LABEL_43;
      case 3u:
        *(_BYTE *)(a1 + 40) |= 2u;
        v27 = *v3;
        v28 = *(_QWORD *)(a2 + v27);
        if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v29 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v29 = 0;
        }
        *(_QWORD *)(a1 + 16) = v29;
        goto LABEL_43;
      case 4u:
        v18 = objc_alloc_init(HKCodableLevelViewDataConfiguration);
        objc_storeStrong((id *)(a1 + 24), v18);
        if (PBReaderPlaceMark() && (HKCodableLevelViewDataConfigurationReadFrom(v18, a2) & 1) != 0)
        {
LABEL_36:
          PBReaderRecallMark();

LABEL_43:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_45:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_43;
    }
  }
}

uint64_t HKHealthPrivacyHostRemoteViewControllerInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1F01D1F28);
}

id HKAFibBurdenClampedLowerBoundLocalizedString(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  HKAFibBurdenRoundedValue(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("LESS_THAN_SOME_PERCENT_PLAIN"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable-AFibBurden"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3940], "localizedStringWithFormat:", v3, (int)objc_msgSend(v1, "intValue"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id HKAFibBurdenRoundedValue(void *a1)
{
  NSDecimal v2;
  NSDecimal result;
  NSDecimal number;

  memset(&number, 0, sizeof(number));
  if (a1)
    objc_msgSend(a1, "decimalValue");
  memset(&result, 0, sizeof(result));
  NSDecimalRound(&result, &number, 0, NSRoundPlain);
  v2 = result;
  objc_msgSend(MEMORY[0x1E0CB3598], "decimalNumberWithDecimal:", &v2);
  return (id)objc_claimAutoreleasedReturnValue();
}

id HKAFibBurdenClampedLowerBoundAttributedLocalizedString(void *a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v30;
  _QWORD v31[4];
  id v32;
  id v33;
  void *v34;
  id v35;
  _QWORD v36[2];
  _QWORD v37[2];
  _QWORD v38[2];
  _QWORD v39[4];

  v39[2] = *MEMORY[0x1E0C80C00];
  v5 = (void *)MEMORY[0x1E0CB34D0];
  v6 = a3;
  v30 = a2;
  v7 = a1;
  objc_msgSend(v5, "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "localizedStringForKey:value:table:", CFSTR("LESS_THAN_SOME_PERCENT"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable-AFibBurden"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = (void *)MEMORY[0x1E0CB3940];
  HKAFibBurdenRoundedValue(v7);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "localizedStringWithFormat:", v9, objc_msgSend(v11, "longValue"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v13 = *MEMORY[0x1E0DC1138];
  v39[0] = v30;
  v14 = *MEMORY[0x1E0DC1140];
  v38[0] = v13;
  v38[1] = v14;
  objc_msgSend(MEMORY[0x1E0DC3658], "labelColor");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v39[1] = v15;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v39, v38, 2);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  v36[1] = v14;
  v37[0] = v6;
  v17 = v6;
  v36[0] = v13;
  objc_msgSend(MEMORY[0x1E0DC3658], "secondaryLabelColor");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v37[1] = v18;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v37, v36, 2);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  v20 = objc_alloc_init(MEMORY[0x1E0CB34A0]);
  objc_msgSend(v20, "setAllowsExtendedAttributes:", 1);
  v35 = 0;
  v21 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3778]), "initWithMarkdownString:options:baseURL:error:", v12, v20, 0, &v35);
  v22 = v35;
  v23 = objc_msgSend(v21, "length");
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = __HKAFibBurdenClampedLowerBoundAttributedLocalizedString_block_invoke;
  v31[3] = &unk_1E9C3FEE8;
  v24 = v21;
  v32 = v24;
  v33 = v16;
  v34 = v19;
  v25 = v19;
  v26 = v16;
  objc_msgSend(v24, "enumerateAttributesInRange:options:usingBlock:", 0, v23, 0, v31);
  v27 = v34;
  v28 = v24;

  return v28;
}

uint64_t HKCodableStateOfMindValenceDistributionDataReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 36) |= 2u;
          v18 = *v3;
          v19 = *(_QWORD *)(a2 + v18);
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
            *(_QWORD *)(a2 + v18) = v19 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v38 = 16;
          goto LABEL_53;
        case 2u:
          *(_BYTE *)(a1 + 36) |= 1u;
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v38 = 8;
LABEL_53:
          *(_QWORD *)(a1 + v38) = v20;
          continue;
        case 3u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 36) |= 4u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            v29 = v28 + 1;
            if (v28 == -1 || v29 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v29;
              v26 |= (unint64_t)(v30 & 0x7F) << v24;
              if (v30 < 0)
              {
                v24 += 7;
                v15 = v25++ >= 9;
                if (v15)
                {
                  v26 = 0;
                  goto LABEL_44;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v26 = 0;
LABEL_44:
          *(_QWORD *)(a1 + 24) = v26;
          continue;
        case 4u:
          v31 = 0;
          v32 = 0;
          v33 = 0;
          *(_BYTE *)(a1 + 36) |= 8u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v34 = *v3;
        v35 = *(_QWORD *)(a2 + v34);
        v36 = v35 + 1;
        if (v35 == -1 || v36 > *(_QWORD *)(a2 + *v4))
          break;
        v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
        *(_QWORD *)(a2 + v34) = v36;
        v33 |= (unint64_t)(v37 & 0x7F) << v31;
        if ((v37 & 0x80) == 0)
          goto LABEL_46;
        v31 += 7;
        v15 = v32++ >= 9;
        if (v15)
        {
          LODWORD(v33) = 0;
          goto LABEL_48;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_46:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v33) = 0;
LABEL_48:
      *(_DWORD *)(a1 + 32) = v33;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HKCodableHorizontalTimePeriodDataReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  HKCodableDateInterval *v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v23 = objc_alloc_init(HKCodableDateInterval);
        objc_msgSend((id)a1, "addDateIntervals:", v23);
        if (!PBReaderPlaceMark() || !HKCodableDateIntervalReadFrom((uint64_t)v23, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_35:
        *(_QWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1D787F24C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Unwind_Resume(a1);
}

id HKStartOfHourForDate(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v1 = (void *)MEMORY[0x1E0C99D48];
  v2 = a1;
  objc_msgSend(v1, "currentCalendar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "components:fromDate:", 62, v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "dateFromComponents:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id HKEndOfHourForDate(void *a1)
{
  void *v1;
  void *v2;
  void *v3;

  HKStartOfHourForDate(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "dateByAddingUnit:value:toDate:options:", 32, 1, v1, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id HKSleepStartDateForDate(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (void *)MEMORY[0x1E0C99D48];
  v2 = a1;
  objc_msgSend(v1, "currentCalendar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "startOfDayForDate:", v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "dateBySettingUnit:value:ofDate:options:", 32, 18, v4, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v3, "compareDate:toDate:toUnitGranularity:", v5, v2, 128);

  if (v6 == 1)
  {
    objc_msgSend(v3, "dateByAddingUnit:value:toDate:options:", 16, -1, v5, 0);
    v7 = objc_claimAutoreleasedReturnValue();

    v5 = (void *)v7;
  }

  return v5;
}

id HKEndOfRollingDayWithStart(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;

  v1 = (void *)MEMORY[0x1E0C99D48];
  v2 = a1;
  objc_msgSend(v1, "currentCalendar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "dateByAddingUnit:value:toDate:options:", 16, 1, v2, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

uint64_t HKDateMidpoint(void *a1, void *a2)
{
  id v3;
  double v4;
  double v5;
  double v6;
  double v7;

  v3 = a2;
  objc_msgSend(a1, "timeIntervalSinceReferenceDate");
  v5 = v4;
  objc_msgSend(v3, "timeIntervalSinceReferenceDate");
  v7 = v6;

  return objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", (v5 + v7) * 0.5);
}

void sub_1D7889F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D788A9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D788ADFC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1D788B1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

double _DefaultOverlayDeselectDelay()
{
  void *v0;
  int v1;
  double v2;
  id v3;
  void *v4;
  double v5;

  objc_msgSend(MEMORY[0x1E0CB6F18], "sharedBehavior");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "isAppleInternalInstall");

  v2 = 4.0;
  if (v1)
  {
    v3 = objc_alloc(MEMORY[0x1E0C99EA0]);
    v4 = (void *)objc_msgSend(v3, "initWithSuiteName:", *MEMORY[0x1E0CB7608]);
    if (objc_msgSend(v4, "hk_keyExists:", CFSTR("HKOverlayDeselectDelayInSec")))
    {
      objc_msgSend(v4, "doubleForKey:", CFSTR("HKOverlayDeselectDelayInSec"));
      v2 = v5;
    }

  }
  return v2;
}

uint64_t HKCodableSummaryCorrelatedTrendResultsReadFrom(_BYTE *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  HKCodableSummaryCorrelatedTrendValue *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t result;
  uint64_t v31;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        v25 = 0;
        v26 = 0;
        v21 = 0;
        a1[32] |= 1u;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v21 |= (unint64_t)(v29 & 0x7F) << v25;
          if ((v29 & 0x80) == 0)
            goto LABEL_45;
          v25 += 7;
          v14 = v26++ >= 9;
          if (v14)
          {
            v21 = 0;
            goto LABEL_47;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_47:
        v31 = 8;
LABEL_48:
        *(_QWORD *)&a1[v31] = v21;
        goto LABEL_49;
      }
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(HKCodableSummaryCorrelatedTrendValue);
        objc_msgSend(a1, "addTrendValues:", v18);
        if (!PBReaderPlaceMark() || !HKCodableSummaryCorrelatedTrendValueReadFrom((uint64_t)v18, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
LABEL_49:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v19 = 0;
    v20 = 0;
    v21 = 0;
    a1[32] |= 2u;
    while (1)
    {
      v22 = *v3;
      v23 = *(_QWORD *)(a2 + v22);
      if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
        break;
      v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
      *(_QWORD *)(a2 + v22) = v23 + 1;
      v21 |= (unint64_t)(v24 & 0x7F) << v19;
      if ((v24 & 0x80) == 0)
        goto LABEL_41;
      v19 += 7;
      v14 = v20++ >= 9;
      if (v14)
      {
        v21 = 0;
        goto LABEL_43;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
    if (*(_BYTE *)(a2 + *v5))
      v21 = 0;
LABEL_43:
    v31 = 16;
    goto LABEL_48;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void OUTLINED_FUNCTION_0_4(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void OUTLINED_FUNCTION_3_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void sub_1D789308C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D789372C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1D7895AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void DrawDiagonalSlashPatternLine(CGContext *a1, CGColor *a2, int a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  uint64_t *v16;
  CGPattern *v17;
  const CGFloat *Components;

  CGContextSaveGState(a1);
  if (PatternColorSpace_onceToken != -1)
    dispatch_once(&PatternColorSpace_onceToken, &__block_literal_global_9);
  CGContextSetStrokeColorSpace(a1, (CGColorSpaceRef)PatternColorSpace_patternColorSpace);
  if (a3)
  {
    if (DiagonalPatternInvertedAndScaled_onceToken != -1)
      dispatch_once(&DiagonalPatternInvertedAndScaled_onceToken, &__block_literal_global_310);
    v16 = &DiagonalPatternInvertedAndScaled_diagonalPattern;
  }
  else
  {
    if (DiagonalPattern_onceToken != -1)
      dispatch_once(&DiagonalPattern_onceToken, &__block_literal_global_312);
    v16 = &DiagonalPattern_diagonalPattern;
  }
  v17 = (CGPattern *)*v16;
  Components = CGColorGetComponents(a2);
  CGContextSetStrokePattern(a1, v17, Components);
  CGContextSetLineWidth(a1, a4);
  CGContextSetLineCap(a1, kCGLineCapButt);
  CGContextMoveToPoint(a1, a5, a6);
  CGContextAddLineToPoint(a1, a7, a8);
  CGContextStrokePath(a1);
  CGContextRestoreGState(a1);
}

void DiagonalSlashPattern(int a1, CGContextRef c)
{
  CGContextSetLineWidth(c, 1.0);
  CGContextSetLineCap(c, kCGLineCapSquare);
  CGContextMoveToPoint(c, 0.0, 2.0);
  CGContextAddLineToPoint(c, 2.0, 0.0);
  CGContextMoveToPoint(c, 2.0, 4.0);
  CGContextAddLineToPoint(c, 4.0, 2.0);
  CGContextStrokePath(c);
}

void sub_1D789968C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t HKCodableSummaryTrendLineViewModelReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  BOOL v17;
  HKCodableDateInterval *v18;
  uint64_t result;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
            break;
          v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v16 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (v16)
          v17 = 1;
        else
          v17 = (v10 & 7) == 4;
        if (!v17)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v18 = objc_alloc_init(HKCodableDateInterval);
              objc_storeStrong((id *)(a1 + 16), v18);
              if (PBReaderPlaceMark() && HKCodableDateIntervalReadFrom((uint64_t)v18, a2))
              {
                PBReaderRecallMark();

                goto LABEL_32;
              }

              return 0;
            case 2u:
              *(_BYTE *)(a1 + 40) |= 1u;
              v20 = *v3;
              v21 = *(_QWORD *)(a2 + v20);
              if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(_QWORD *)(a2 + *v4))
              {
                v22 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v21);
                *(_QWORD *)(a2 + v20) = v21 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + *v5) = 1;
                v22 = 0;
              }
              *(_QWORD *)(a1 + 8) = v22;
              goto LABEL_32;
            case 3u:
              PBReaderReadString();
              v23 = objc_claimAutoreleasedReturnValue();
              v24 = 32;
              goto LABEL_29;
            case 4u:
              PBReaderReadString();
              v23 = objc_claimAutoreleasedReturnValue();
              v24 = 24;
LABEL_29:
              v25 = *(void **)(a1 + v24);
              *(_QWORD *)(a1 + v24) = v23;

              goto LABEL_32;
            default:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
LABEL_32:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HKCodableLevelViewDataConfigurationReadFrom(_QWORD *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  HKCodableLevelViewDataConfigurationBucket *v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v22 = objc_alloc_init(HKCodableLevelViewDataConfigurationBucket);
        objc_msgSend(a1, "addSortedNormalizedBuckets:", v22);
        if (!PBReaderPlaceMark()
          || (HKCodableLevelViewDataConfigurationBucketReadFrom((uint64_t)v22, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((v10 >> 3) == 1)
      {
        v19 = *v3;
        v20 = *(_QWORD *)(a2 + v19);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v20);
          *(_QWORD *)(a2 + v19) = v20 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v21 = 0;
        }
        a1[1] = v21;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1D789DB64(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1D789F558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D78A81BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D78A8844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D78A8F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a47, 8);
  _Unwind_Resume(a1);
}

void sub_1D78A9108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1D78A9768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 224), 8);
  _Block_object_dispose((const void *)(v35 - 192), 8);
  _Block_object_dispose((const void *)(v35 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1D78A9BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 224), 8);
  _Block_object_dispose((const void *)(v35 - 192), 8);
  _Block_object_dispose((const void *)(v35 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1D78AB33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  uint64_t v48;

  _Block_object_dispose(&a42, 8);
  _Block_object_dispose(&a48, 8);
  _Block_object_dispose((const void *)(v48 - 232), 8);
  _Unwind_Resume(a1);
}

void sub_1D78ABC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D78AC0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_1D78AC78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D78B0AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getSOSUtilitiesClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getSOSUtilitiesClass_softClass;
  v7 = getSOSUtilitiesClass_softClass;
  if (!getSOSUtilitiesClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getSOSUtilitiesClass_block_invoke;
    v3[3] = &unk_1E9C3FDF8;
    v3[4] = &v4;
    __getSOSUtilitiesClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1D78B0BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSOSUtilitiesClass_block_invoke(uint64_t a1)
{
  Class result;

  SOSLibrary();
  result = objc_getClass("SOSUtilities");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getSOSUtilitiesClass_block_invoke_cold_1();
  getSOSUtilitiesClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void SOSLibrary()
{
  void *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = 0;
  if (!SOSLibraryCore_frameworkLibrary)
  {
    v1 = xmmword_1E9C40958;
    v2 = 0;
    SOSLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!SOSLibraryCore_frameworkLibrary)
    SOSLibrary_cold_1(&v0);
}

Class __getSOSContactsManagerClass_block_invoke(uint64_t a1)
{
  Class result;

  SOSLibrary();
  result = objc_getClass("SOSContactsManager");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getSOSContactsManagerClass_block_invoke_cold_1();
  getSOSContactsManagerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

BOOL HKCodableSummaryCorrelatedTrendValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  HKCodableSummaryTrendValue *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(HKCodableSummaryTrendValue **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(HKCodableSummaryTrendValue);
    objc_storeStrong((id *)(a1 + 16), v18);
    if (!PBReaderPlaceMark() || !HKCodableSummaryTrendValueReadFrom((char *)v18, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

double HKRangeMax(double result, double a2)
{
  double v2;

  v2 = result + a2;
  if (result < v2)
    return v2;
  return result;
}

double HKRangeMin(double result, double a2)
{
  double v2;

  v2 = result + a2;
  if (result >= v2)
    return v2;
  return result;
}

double HKRangeMid(double a1, double a2)
{
  return a1 + a2 * 0.5;
}

void sub_1D78B5CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  char a67;
  char a71;

  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&a63, 8);
  _Block_object_dispose(&a67, 8);
  _Block_object_dispose(&a71, 8);
  _Block_object_dispose(&STACK[0x210], 8);
  _Block_object_dispose(&STACK[0x230], 8);
  _Unwind_Resume(a1);
}

void _drawSeriesGroup(CGContext *a1, int a2, CGColor *a3, CGColor *a4, uint64_t a5, CGFloat a6, CGFloat a7, double a8, CGFloat a9, CGFloat a10, CGFloat a11)
{
  CGColor *v22;
  CGFloat v23;

  if (vabdd_f64(a9, a10) >= HKUIOnePixel())
  {
    if (a2)
    {
      v22 = a4;
      v23 = a7;
    }
    else
    {
      v22 = a3;
      v23 = a6;
    }
    _drawSeriesLine(a1, v22, v23, a9, a10, a11);
  }
  else
  {
    +[HKGraphSeries drawFilledMarkerInContext:color:x:y:radius:](HKGraphSeries, "drawFilledMarkerInContext:color:x:y:radius:", a1, a5, a9, a11, a8);
  }
}

void _drawSeriesLine(CGContext *a1, CGColor *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  CGContextSetLineWidth(a1, a3);
  CGContextSetLineCap(a1, kCGLineCapRound);
  CGContextSetStrokeColorWithColor(a1, a2);
  CGContextMoveToPoint(a1, a4, a6);
  CGContextAddLineToPoint(a1, a5, a6);
  CGContextStrokePath(a1);
}

void sub_1D78B727C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;

  _Block_object_dispose(&a36, 8);
  _Block_object_dispose((const void *)(v36 - 216), 8);
  _Block_object_dispose((const void *)(v36 - 184), 8);
  _Unwind_Resume(a1);
}

void sub_1D78B74BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1D78B7E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  uint64_t v64;

  _Block_object_dispose(&a44, 8);
  _Block_object_dispose(&a50, 8);
  _Block_object_dispose(&a54, 8);
  _Block_object_dispose(&a60, 8);
  _Block_object_dispose(&a64, 8);
  _Block_object_dispose((const void *)(v64 - 232), 8);
  _Block_object_dispose((const void *)(v64 - 184), 8);
  _Unwind_Resume(a1);
}

void sub_1D78B87BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;

  _Block_object_dispose(&a32, 8);
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose(&a42, 8);
  _Block_object_dispose(&a48, 8);
  _Block_object_dispose(&a54, 8);
  _Block_object_dispose(&a60, 8);
  _Block_object_dispose((const void *)(v60 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1D78B93D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a49, 8);
  _Block_object_dispose(&a55, 8);
  _Unwind_Resume(a1);
}

void sub_1D78B9B20(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1D78BB898(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_1D78BD268(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 104));
  _Unwind_Resume(a1);
}

double HKChartSeriesPointMarkerBaseRect(void *a1)
{
  double v1;

  objc_msgSend(a1, "size");
  return v1 * -0.5;
}

void _drawSolidCircleInContext(CGContext *a1, void *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  id v11;
  id v12;
  CGColor *v13;
  CGRect v14;

  v11 = a2;
  CGContextSaveGState(a1);
  v12 = objc_retainAutorelease(v11);
  v13 = (CGColor *)objc_msgSend(v12, "CGColor");

  CGContextSetFillColorWithColor(a1, v13);
  v14.origin.x = a3;
  v14.origin.y = a4;
  v14.size.width = a5;
  v14.size.height = a6;
  CGContextFillEllipseInRect(a1, v14);
  CGContextRestoreGState(a1);
}

void _drawHollowCircleInContext(CGContext *a1, void *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  id v15;
  CGRect v16;
  CGRect v17;

  _drawSolidCircleInContext(a1, a2, a3, a4, a5, a6);
  v16.origin.x = a3;
  v16.origin.y = a4;
  v16.size.width = a5;
  v16.size.height = a6;
  v17 = CGRectInset(v16, 2.0, 2.0);
  x = v17.origin.x;
  y = v17.origin.y;
  width = v17.size.width;
  height = v17.size.height;
  objc_msgSend(MEMORY[0x1E0DC3658], "systemBackgroundColor");
  v15 = (id)objc_claimAutoreleasedReturnValue();
  _drawSolidCircleInContext(a1, v15, x, y, width, height);

}

BOOL HKCodableStateOfMindValenceDistributionSummaryReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  HKCodableDayIndexRange *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(HKCodableDayIndexRange);
        objc_storeStrong(a1 + 1, v17);
        if (!PBReaderPlaceMark() || !HKCodableDayIndexRangeReadFrom((uint64_t)v17, a2))
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(HKCodableStateOfMindValenceDistributionData);
    objc_msgSend(a1, "addValenceDistributionData:", v17);
    if (!PBReaderPlaceMark()
      || (HKCodableStateOfMindValenceDistributionDataReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1D78C0380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D78C23C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  _Block_object_dispose(&a49, 8);
  _Unwind_Resume(a1);
}

id HKStringForBloodType(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  const __CFString *v4;

  switch(a1)
  {
    case 0:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("blood_type_not_set");
      goto LABEL_11;
    case 1:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("blood_type_a+");
      goto LABEL_11;
    case 2:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("blood_type_a-");
      goto LABEL_11;
    case 3:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("blood_type_b+");
      goto LABEL_11;
    case 4:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("blood_type_b-");
      goto LABEL_11;
    case 5:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("blood_type_ab+");
      goto LABEL_11;
    case 6:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("blood_type_ab-");
      goto LABEL_11;
    case 7:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("blood_type_o+");
      goto LABEL_11;
    case 8:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("blood_type_o-");
LABEL_11:
      objc_msgSend(v2, "localizedStringForKey:value:table:", v4, &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();

      break;
    default:
      return v1;
  }
  return v1;
}

void sub_1D78C62B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id OUTLINED_FUNCTION_2_2(uint64_t a1, void *a2)
{
  return a2;
}

BOOL HKCodableHealthRecordsProviderReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 24;
        goto LABEL_24;
      }
      if ((_DWORD)v17 == 1)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 16;
LABEL_24:
        v20 = *(void **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadData();
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = 8;
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id _BoldImageCache()
{
  void *v0;
  id v1;
  void *v2;

  v0 = (void *)_BoldImageCache___cache;
  if (!_BoldImageCache___cache)
  {
    v1 = objc_alloc_init(MEMORY[0x1E0C99D38]);
    v2 = (void *)_BoldImageCache___cache;
    _BoldImageCache___cache = (uint64_t)v1;

    v0 = (void *)_BoldImageCache___cache;
  }
  return v0;
}

id _NormalImageCache()
{
  void *v0;
  id v1;
  void *v2;

  v0 = (void *)_NormalImageCache___cache;
  if (!_NormalImageCache___cache)
  {
    v1 = objc_alloc_init(MEMORY[0x1E0C99D38]);
    v2 = (void *)_NormalImageCache___cache;
    _NormalImageCache___cache = (uint64_t)v1;

    v0 = (void *)_NormalImageCache___cache;
  }
  return v0;
}

BOOL HKCodableSleepSummaryEntryReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  HKCodableDateInterval *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(HKCodableDateInterval);
        objc_storeStrong(a1 + 1, v17);
        if (!PBReaderPlaceMark() || !HKCodableDateIntervalReadFrom((uint64_t)v17, a2))
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(HKCodableSleepPeriod);
    objc_msgSend(a1, "addPeriod:", v17);
    if (!PBReaderPlaceMark() || !HKCodableSleepPeriodReadFrom((id *)&v17->super.super.isa, a2))
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1D78CBD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D78CC034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

id HKHealthPrivacyServiceRemoteAuthorizationViewControllerInterface()
{
  void *v0;
  id v1;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1F0248D40);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = (id)objc_msgSend(v0, "hk_setArrayOfClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_setRequestRecord_presentationRequests_, 1, 0);
  return v0;
}

uint64_t HKCodableSummaryBloodPressureValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  unint64_t v18;
  HKCodableQuantity *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 32) |= 1u;
        v21 = *v3;
        v22 = *(_QWORD *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v23 = 0;
        }
        *(_QWORD *)(a1 + 8) = v23;
      }
      else
      {
        if ((_DWORD)v18 == 2)
        {
          v19 = objc_alloc_init(HKCodableQuantity);
          v20 = 16;
        }
        else
        {
          if ((_DWORD)v18 != 1)
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          v19 = objc_alloc_init(HKCodableQuantity);
          v20 = 24;
        }
        objc_storeStrong((id *)(a1 + v20), v19);
        if (!PBReaderPlaceMark() || (HKCodableQuantityReadFrom((uint64_t)v19, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1D78D5314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id OUTLINED_FUNCTION_0_6(id a1)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_3_3()
{
  return objc_opt_class();
}

id _HKMediumScaledPreferredBodyFontWithValue(double a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)MEMORY[0x1E0DC1350];
  objc_msgSend(MEMORY[0x1E0DC1350], "preferredFontForTextStyle:", *MEMORY[0x1E0DC4A88]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_scaledValueForValue:", a1);
  objc_msgSend(v2, "systemFontOfSize:weight:");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id _HKMediumScaledPreferredBodyFontWithButton(void *a1)
{
  void *v1;
  void *v2;
  double v3;
  void *v4;

  objc_msgSend(a1, "titleLabel");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "font");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "pointSize");
  _HKMediumScaledPreferredBodyFontWithValue(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

BOOL HKCodableChartInsulinDataSourceQueryDataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  HKCodableChartInsulinValue *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(HKCodableChartInsulinValue);
        objc_msgSend(a1, "addTotalInsulinValues:", v17);
      }
      else
      {
        if ((v10 >> 3) != 1)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
          continue;
        }
        v17 = objc_alloc_init(HKCodableChartInsulinValue);
        objc_msgSend(a1, "addBasalInsulinValues:", v17);
      }
      if (!PBReaderPlaceMark() || (HKCodableChartInsulinValueReadFrom((uint64_t)v17, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1D78D8E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_1D78D9FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id HKQuantityDistributionBucketSizeForQuantityType(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v1 = HKQuantityDistributionBucketSizeForQuantityType_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&HKQuantityDistributionBucketSizeForQuantityType_onceToken, &__block_literal_global_20);
  v3 = (void *)HKQuantityDistributionBucketSizeForQuantityType_quantityTypeBucketSizes;
  objc_msgSend(v2, "identifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "objectForKeyedSubscript:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (!v5)
    v5 = &unk_1E9CED478;
  v7 = v5;

  return v7;
}

double _doubleValueIfCompatibleForQuantity(void *a1, void *a2, objc_class *a3)
{
  id v5;
  id v6;
  void *v7;
  int v8;
  double v9;
  double v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  NSObject *v21;
  void *v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  objc_msgSend(v5, "_unit");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "_isCompatibleWithUnit:", v6);

  if (v8)
  {
    objc_msgSend(v5, "doubleValueForUnit:", v6);
    v10 = v9;
  }
  else
  {
    if (!LogFirstIncompatibleUnitConversionSet)
    {
      v11 = objc_alloc_init(MEMORY[0x1E0C99E20]);
      v12 = (void *)LogFirstIncompatibleUnitConversionSet;
      LogFirstIncompatibleUnitConversionSet = (uint64_t)v11;

    }
    objc_msgSend(v5, "_unit");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "unitString");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    v15 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v6, "unitString");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "stringWithFormat:", CFSTR("%@:%@"), v14, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    NSStringFromClass(a3);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend((id)LogFirstIncompatibleUnitConversionSet, "containsObject:", v17) & 1) == 0)
    {
      _HKInitializeLogging();
      v19 = (void *)*MEMORY[0x1E0CB5348];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CB5348], OS_LOG_TYPE_FAULT))
      {
        v21 = v19;
        objc_msgSend(v6, "unitString");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412802;
        v24 = v18;
        v25 = 2112;
        v26 = v14;
        v27 = 2112;
        v28 = v22;
        _os_log_fault_impl(&dword_1D7813000, v21, OS_LOG_TYPE_FAULT, "[%@] Incompatible unit conversion for %@ to %@", buf, 0x20u);

      }
      objc_msgSend((id)LogFirstIncompatibleUnitConversionSet, "addObject:", v17);
    }

    v10 = 0.0;
  }

  return v10;
}

const __CFString *_NSStringFromSelectedRangeStatisticsType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x1F)
    return CFSTR("HKSelectedRangeStatisticsTypeNone");
  else
    return off_1E9C41518[a1 - 1];
}

const __CFString *_NSStringFromSelectedRangeDataType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x24)
    return CFSTR("HKSelectedRangeDataTypeNone");
  else
    return off_1E9C41618[a1 - 1];
}

uint64_t HKCodableSampleChartDataReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  HKCodableMetadataDictionary *v37;
  uint64_t v38;
  uint64_t v39;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 56) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          v23 = v22 + 1;
          if (v22 == -1 || v23 > *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v23;
          v20 |= (unint64_t)(v24 & 0x7F) << v18;
          if ((v24 & 0x80) == 0)
            goto LABEL_48;
          v18 += 7;
          v15 = v19++ >= 9;
          if (v15)
          {
            v20 = 0;
            goto LABEL_50;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_48:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_50:
        v38 = 8;
        goto LABEL_55;
      case 2u:
        v26 = 0;
        v27 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 56) |= 4u;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          v30 = v29 + 1;
          if (v29 == -1 || v30 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v30;
            v20 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v15 = v27++ >= 9;
              if (v15)
              {
                v20 = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_54:
        v38 = 24;
LABEL_55:
        *(_QWORD *)(a1 + v38) = v20;
        goto LABEL_61;
      case 3u:
        *(_BYTE *)(a1 + 56) |= 8u;
        v32 = *v3;
        v33 = *(_QWORD *)(a2 + v32);
        if (v33 <= 0xFFFFFFFFFFFFFFF7 && v33 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v34 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v33);
          *(_QWORD *)(a2 + v32) = v33 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v34 = 0;
        }
        v39 = 32;
        goto LABEL_60;
      case 4u:
        *(_BYTE *)(a1 + 56) |= 2u;
        v35 = *v3;
        v36 = *(_QWORD *)(a2 + v35);
        if (v36 <= 0xFFFFFFFFFFFFFFF7 && v36 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v34 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v36);
          *(_QWORD *)(a2 + v35) = v36 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v34 = 0;
        }
        v39 = 16;
LABEL_60:
        *(_QWORD *)(a1 + v39) = v34;
        goto LABEL_61;
      case 5u:
        v37 = objc_alloc_init(HKCodableMetadataDictionary);
        objc_storeStrong((id *)(a1 + 40), v37);
        if (!PBReaderPlaceMark() || (HKCodableMetadataDictionaryReadFrom(v37, a2) & 1) == 0)
          goto LABEL_63;
        goto LABEL_46;
      case 6u:
        v37 = objc_alloc_init(HKCodableQuantity);
        objc_storeStrong((id *)(a1 + 48), v37);
        if (PBReaderPlaceMark() && (HKCodableQuantityReadFrom((uint64_t)v37, a2) & 1) != 0)
        {
LABEL_46:
          PBReaderRecallMark();

LABEL_61:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_63:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_61;
    }
  }
}

id HKErrorTableViewCell(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3D50]), "initWithStyle:reuseIdentifier:", 0, 0);
  if (objc_msgSend(MEMORY[0x1E0CB6F18], "isAppleInternalInstall"))
  {
    objc_msgSend(v2, "textLabel");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setText:", v1);
    objc_msgSend(MEMORY[0x1E0DC3658], "redColor");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setBackgroundColor:", v4);

    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "UITableViewCell *HKErrorTableViewCell(NSString *__strong)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("HKTableViewController.m"), 65, CFSTR("Unexpected error in creation of table view cell: %@"), v1);

  }
  return v2;
}

void OUTLINED_FUNCTION_5_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_1D78F1C34(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1D78F70F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D78F72AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __setCurrentlyEditingCell(void *a1)
{
  id v2;
  id v3;

  v2 = a1;
  if ((id)__setCurrentlyEditingCell___currentCell != v2)
  {
    v3 = v2;
    objc_msgSend((id)__setCurrentlyEditingCell___currentCell, "commitEditing");
    objc_storeStrong((id *)&__setCurrentlyEditingCell___currentCell, a1);
    v2 = v3;
  }

}

uint64_t HKCodablePrescriptionTypeReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 3)
      {
        PBReaderReadString();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v23;

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_31;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_33:
        *(_BYTE *)(a1 + 16) = v19 != 0;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id ClampedWeightLoggingOutOfBoundsValues(void *a1)
{
  id v1;
  double v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  double v11;
  double v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;

  v1 = a1;
  objc_msgSend(v1, "doubleValue");
  if (v2 >= 0.0)
  {
    objc_msgSend(v1, "doubleValue");
    if (v12 <= 658.0)
    {
      v20 = v1;
      goto LABEL_11;
    }
    _HKInitializeLogging();
    v13 = *MEMORY[0x1E0CB52C0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CB52C0], OS_LOG_TYPE_FAULT))
      ClampedWeightLoggingOutOfBoundsValues_cold_2((uint64_t)v1, v13, v14, v15, v16, v17, v18, v19);
    v10 = (void *)MEMORY[0x1E0CB37E8];
    v11 = 658.0;
  }
  else
  {
    _HKInitializeLogging();
    v3 = *MEMORY[0x1E0CB52C0];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CB52C0], OS_LOG_TYPE_FAULT))
      ClampedWeightLoggingOutOfBoundsValues_cold_1((uint64_t)v1, v3, v4, v5, v6, v7, v8, v9);
    v10 = (void *)MEMORY[0x1E0CB37E8];
    v11 = 0.0;
  }
  objc_msgSend(v10, "numberWithDouble:", v11);
  v20 = (id)objc_claimAutoreleasedReturnValue();
LABEL_11:
  v21 = v20;

  return v21;
}

BOOL HKCodableDismissibleCellHeaderViewModelReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  HKCodableCellHeaderViewModel *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(HKCodableCellHeaderViewModel);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || (HKCodableCellHeaderViewModelReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(HKCodableColorRepresentation);
    objc_storeStrong((id *)(a1 + 8), v17);
    if (!PBReaderPlaceMark() || (HKCodableColorRepresentationReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1D78FC464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t HKCodableChartHandwashingEventDataSourceDataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  HKCodableHandwashingEvent *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(HKCodableHandwashingEvent);
        objc_msgSend(a1, "addEvents:", v17);
        if (!PBReaderPlaceMark() || (HKCodableHandwashingEventReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1D78FED04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D7901004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

double hk_rectRoundToViewScale(void *a1)
{
  id v1;
  double v2;
  double v3;

  v1 = a1;
  UIPointRoundToViewScale();
  v3 = v2;
  UISizeRoundToViewScale();

  return v3;
}

id HKUnitPreferenceControllerAvailableUnitsForDisplayType(void *a1)
{
  objc_class *v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  const __CFString *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  const __CFString *v18;
  void *v19;
  void *v20;
  const __CFString *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;

  v1 = (objc_class *)MEMORY[0x1E0C99E20];
  v2 = a1;
  v3 = objc_alloc_init(v1);
  v4 = objc_msgSend(v2, "displayTypeIdentifier");

  switch(v4)
  {
    case 0:
    case 7:
    case 12:
    case 13:
    case 57:
    case 60:
    case 89:
    case 101:
    case 111:
    case 140:
    case 145:
    case 147:
    case 156:
    case 178:
LABEL_5:
      v5 = (void *)MEMORY[0x1E0CB6CD0];
      v6 = CFSTR("count");
      goto LABEL_40;
    case 1:
    case 14:
    case 18:
    case 19:
    case 182:
    case 194:
LABEL_9:
      v5 = (void *)MEMORY[0x1E0CB6CD0];
      v6 = CFSTR("%");
      goto LABEL_40;
    case 2:
      objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("ft"));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v19);

      v20 = (void *)MEMORY[0x1E0CB6CD0];
      v21 = CFSTR("cm");
LABEL_35:
      objc_msgSend(v20, "unitFromString:", v21);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v36);

      v5 = (void *)MEMORY[0x1E0CB6CD0];
      goto LABEL_36;
    case 3:
    case 4:
      objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("lb"));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v14);

      objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("kg"));
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v15);

      v5 = (void *)MEMORY[0x1E0CB6CD0];
      v6 = CFSTR("st");
      goto LABEL_40;
    case 5:
    case 61:
    case 118:
    case 137:
      v5 = (void *)MEMORY[0x1E0CB6CD0];
      v6 = CFSTR("count/min");
      goto LABEL_40;
    case 6:
    case 11:
    case 16:
    case 17:
    case 59:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 74:
    case 76:
    case 77:
    case 79:
    case 81:
    case 82:
    case 84:
    case 85:
    case 86:
    case 88:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 112:
    case 115:
    case 116:
    case 117:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 141:
    case 142:
    case 143:
    case 144:
    case 146:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 174:
    case 175:
    case 176:
    case 177:
    case 180:
    case 181:
    case 184:
    case 185:
    case 186:
    case 190:
    case 191:
    case 192:
    case 193:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
      return v3;
    case 8:
    case 83:
    case 113:
    case 138:
LABEL_8:
      objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mi"));
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v10);

      v5 = (void *)MEMORY[0x1E0CB6CD0];
      v6 = CFSTR("km");
      goto LABEL_40;
    case 9:
    case 10:
    case 29:
      objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("kcal"));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v12);

      objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("Cal"));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v13);

      v5 = (void *)MEMORY[0x1E0CB6CD0];
      v6 = CFSTR("kJ");
      goto LABEL_40;
    case 15:
      objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mg/dL"));
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v22);

      _HKBloodGlucoseMillimolesPerLiterUnit();
      v23 = objc_claimAutoreleasedReturnValue();
      goto LABEL_41;
    case 20:
    case 21:
    case 22:
    case 23:
    case 26:
    case 27:
    case 28:
    case 30:
      v5 = (void *)MEMORY[0x1E0CB6CD0];
      v6 = CFSTR("g");
      goto LABEL_40;
    case 24:
    case 25:
    case 32:
    case 34:
    case 36:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 45:
    case 46:
    case 48:
    case 49:
    case 51:
    case 52:
    case 55:
    case 56:
    case 78:
      v5 = (void *)MEMORY[0x1E0CB6CD0];
      v6 = CFSTR("mg");
      goto LABEL_40;
    case 31:
    case 33:
    case 35:
    case 37:
    case 43:
    case 44:
    case 47:
    case 50:
    case 53:
    case 54:
      v5 = (void *)MEMORY[0x1E0CB6CD0];
      v6 = CFSTR("mcg");
      goto LABEL_40;
    case 58:
      v5 = (void *)MEMORY[0x1E0CB6CD0];
      v6 = CFSTR("mcS");
      goto LABEL_40;
    case 62:
    case 90:
LABEL_11:
      objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("degC"));
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v11);

      v5 = (void *)MEMORY[0x1E0CB6CD0];
      v6 = CFSTR("degF");
      goto LABEL_40;
    case 71:
    case 72:
      v5 = (void *)MEMORY[0x1E0CB6CD0];
      v6 = CFSTR("L");
      goto LABEL_40;
    case 73:
      v5 = (void *)MEMORY[0x1E0CB6CD0];
      v6 = CFSTR("L/min");
      goto LABEL_40;
    case 75:
    case 179:
    case 189:
      v5 = (void *)MEMORY[0x1E0CB6CD0];
      v6 = CFSTR("min");
      goto LABEL_40;
    case 80:
      v5 = (void *)MEMORY[0x1E0CB6CD0];
      v6 = CFSTR("mmHg");
      goto LABEL_40;
    case 87:
      objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mL"));
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v24);

      objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("L"));
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v25);

      objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("fl_oz_us"));
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v26);

      objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("pt_us"));
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v27);

      objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("fl_oz_imp"));
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v28);

      objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("pt_imp"));
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v29);

      objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("cup_us"));
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v30);

      v5 = (void *)MEMORY[0x1E0CB6CD0];
      v6 = CFSTR("cup_imp");
      goto LABEL_40;
    case 110:
      objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m"));
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v31);

      v5 = (void *)MEMORY[0x1E0CB6CD0];
      v6 = CFSTR("yd");
      goto LABEL_40;
    case 114:
      objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("in"));
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v32);

      v5 = (void *)MEMORY[0x1E0CB6CD0];
      v6 = CFSTR("cm");
      goto LABEL_40;
    case 124:
      v5 = (void *)MEMORY[0x1E0CB6CD0];
      v6 = CFSTR("ml/(kg*min)");
      goto LABEL_40;
    case 125:
      objc_msgSend(MEMORY[0x1E0CB6CD0], "internationalUnit");
      v23 = objc_claimAutoreleasedReturnValue();
      goto LABEL_41;
    case 139:
LABEL_19:
      v5 = (void *)MEMORY[0x1E0CB6CD0];
      v6 = CFSTR("ms");
      goto LABEL_40;
    case 172:
    case 173:
LABEL_14:
      v5 = (void *)MEMORY[0x1E0CB6CD0];
      v6 = CFSTR("dBASPL");
      goto LABEL_40;
    case 183:
      v5 = (void *)MEMORY[0x1E0CB6CD0];
LABEL_36:
      v6 = CFSTR("m");
      goto LABEL_40;
    case 187:
LABEL_4:
      objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m/s"));
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v7);

      objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("ft/s"));
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v8);

      objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mi/hr"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v9);

      v5 = (void *)MEMORY[0x1E0CB6CD0];
      v6 = CFSTR("km/hr");
      goto LABEL_40;
    case 188:
LABEL_18:
      v17 = (void *)MEMORY[0x1E0CB6CD0];
      v18 = CFSTR("cm");
LABEL_33:
      objc_msgSend(v17, "unitFromString:", v18);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v35);

      v5 = (void *)MEMORY[0x1E0CB6CD0];
      v6 = CFSTR("in");
      goto LABEL_40;
    case 195:
    case 196:
      objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m/s"));
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObject:", v16);

      v5 = (void *)MEMORY[0x1E0CB6CD0];
      v6 = CFSTR("ft/s");
      goto LABEL_40;
    case 237:
      v5 = (void *)MEMORY[0x1E0CB6CD0];
      v6 = CFSTR("s");
LABEL_40:
      objc_msgSend(v5, "unitFromString:", v6);
      v23 = objc_claimAutoreleasedReturnValue();
LABEL_41:
      v37 = (void *)v23;
      objc_msgSend(v3, "addObject:", v23);

      break;
    default:
      switch(v4)
      {
        case 248:
          goto LABEL_9;
        case 251:
        case 275:
        case 276:
          goto LABEL_5;
        case 256:
        case 277:
          goto LABEL_11;
        case 258:
          objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m"));
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "addObject:", v33);

          objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("cm"));
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "addObject:", v34);

          v17 = (void *)MEMORY[0x1E0CB6CD0];
          v18 = CFSTR("ft");
          goto LABEL_33;
        case 259:
          goto LABEL_18;
        case 260:
          goto LABEL_19;
        case 269:
          v20 = (void *)MEMORY[0x1E0CB6CD0];
          v21 = CFSTR("ft");
          goto LABEL_35;
        case 270:
          v5 = (void *)MEMORY[0x1E0CB6CD0];
          v6 = CFSTR("W");
          goto LABEL_40;
        case 272:
          goto LABEL_14;
        case 274:
        case 281:
        case 301:
        case 302:
        case 303:
          goto LABEL_4;
        case 279:
          v5 = (void *)MEMORY[0x1E0CB6CD0];
          v6 = CFSTR("lx");
          goto LABEL_40;
        case 286:
          v5 = (void *)MEMORY[0x1E0CB6CD0];
          v6 = CFSTR("kcal/(kg*hr)");
          goto LABEL_40;
        case 294:
        case 295:
        case 296:
        case 297:
          goto LABEL_8;
        default:
          return v3;
      }
  }
  return v3;
}

id _DaySummariesForMappingData(void *a1)
{
  id v1;
  id v2;
  void *v3;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v1, "chartPoints");
    v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = v1;
  }
  v3 = v2;

  return v3;
}

id OUTLINED_FUNCTION_0_7(uint64_t a1, void *a2)
{
  return a2;
}

void OUTLINED_FUNCTION_1_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x20u);
}

BOOL HKCodableHealthRecordsCodeReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 24;
          goto LABEL_25;
        case 2u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 32;
          goto LABEL_25;
        case 3u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 8;
          goto LABEL_25;
        case 4u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 16;
LABEL_25:
          v19 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          goto LABEL_26;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_26:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HKCodableSleepSummaryCollectionReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  HKCodableSleepSummaryEntry *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(HKCodableSleepSummaryEntry);
        objc_msgSend(a1, "addSleepSummaryEntry:", v17);
        if (!PBReaderPlaceMark() || !HKCodableSleepSummaryEntryReadFrom((id *)&v17->super.super.isa, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1D7913340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t HKCodableTimePeriodDataReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  HKCodableDateInterval *v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_33;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v20 = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_35:
        *(_QWORD *)(a1 + 8) = v20;
      }
      else if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(HKCodableDateInterval);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (!PBReaderPlaceMark() || !HKCodableDateIntervalReadFrom((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HKCodableSummaryBalanceMetricsValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  HKCodableSleepingSampleBaselineComparison *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = objc_alloc_init(HKCodableSleepingSampleBaselineComparison);
        objc_msgSend((id)a1, "addBaselineComparison:", v24);
        if (!PBReaderPlaceMark()
          || (HKCodableSleepingSampleBaselineComparisonReadFrom((uint64_t)v24, a2) & 1) == 0)
        {
LABEL_42:

          return 0;
        }
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 32) |= 1u;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_37;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_39;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_39:
            *(_QWORD *)(a1 + 8) = v20;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v24 = objc_alloc_init(HKCodableDayIndexRange);
        objc_storeStrong((id *)(a1 + 24), v24);
        if (!PBReaderPlaceMark() || !HKCodableDayIndexRangeReadFrom((uint64_t)v24, a2))
          goto LABEL_42;
      }
      PBReaderRecallMark();

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1D7917368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D79177F4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 96));
  _Unwind_Resume(a1);
}

uint64_t HKCodableSummaryMostRecentRangeValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  unint64_t v18;
  HKCodableQuantity *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 32) |= 1u;
        v21 = *v3;
        v22 = *(_QWORD *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v23 = 0;
        }
        *(_QWORD *)(a1 + 8) = v23;
      }
      else
      {
        if ((_DWORD)v18 == 2)
        {
          v19 = objc_alloc_init(HKCodableQuantity);
          v20 = 16;
        }
        else
        {
          if ((_DWORD)v18 != 1)
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          v19 = objc_alloc_init(HKCodableQuantity);
          v20 = 24;
        }
        objc_storeStrong((id *)(a1 + v20), v19);
        if (!PBReaderPlaceMark() || (HKCodableQuantityReadFrom((uint64_t)v19, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1D791BE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1D791D280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HKCodableHealthRecordsIndividualRecordReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  HKCodableHealthRecordsCode *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v18 = objc_alloc_init(HKCodableHealthRecordsCode);
        objc_msgSend((id)a1, "addCode:", v18);
        if (PBReaderPlaceMark() && HKCodableHealthRecordsCodeReadFrom((uint64_t)v18, a2))
          goto LABEL_30;
        goto LABEL_41;
      case 2u:
        PBReaderReadString();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = 32;
        goto LABEL_35;
      case 3u:
        *(_BYTE *)(a1 + 72) |= 1u;
        v22 = *v3;
        v23 = *(_QWORD *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v24 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v24 = 0;
        }
        *(_QWORD *)(a1 + 8) = v24;
        goto LABEL_36;
      case 4u:
        v18 = objc_alloc_init(HKCodableQuantityValueWithRange);
        objc_msgSend((id)a1, "addValueWithRange:", v18);
        if (PBReaderPlaceMark() && HKCodableQuantityValueWithRangeReadFrom((char *)v18, a2))
        {
LABEL_30:
          PBReaderRecallMark();

LABEL_36:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_41:

        return 0;
      case 5u:
        PBReaderReadString();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = 48;
        goto LABEL_35;
      case 6u:
        PBReaderReadString();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = 56;
        goto LABEL_35;
      case 7u:
        PBReaderReadString();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = 24;
        goto LABEL_35;
      case 8u:
        PBReaderReadString();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = 40;
LABEL_35:
        v25 = *(void **)(a1 + v21);
        *(_QWORD *)(a1 + v21) = v20;

        goto LABEL_36;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_36;
    }
  }
}

void sub_1D7921540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D7924A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getSOSUtilitiesClass_0()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getSOSUtilitiesClass_softClass_0;
  v7 = getSOSUtilitiesClass_softClass_0;
  if (!getSOSUtilitiesClass_softClass_0)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getSOSUtilitiesClass_block_invoke_0;
    v3[3] = &unk_1E9C3FDF8;
    v3[4] = &v4;
    __getSOSUtilitiesClass_block_invoke_0((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1D7929B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D7929CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSOSUtilitiesClass_block_invoke_0(uint64_t a1)
{
  Class result;

  SOSLibrary_0();
  result = objc_getClass("SOSUtilities");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getSOSUtilitiesClass_block_invoke_cold_1_0();
  getSOSUtilitiesClass_softClass_0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void SOSLibrary_0()
{
  void *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = 0;
  if (!SOSLibraryCore_frameworkLibrary_0)
  {
    v1 = xmmword_1E9C423D8;
    v2 = 0;
    SOSLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  if (!SOSLibraryCore_frameworkLibrary_0)
    SOSLibrary_cold_1_0(&v0);
}

Class __getSOSManagerClass_block_invoke(uint64_t a1)
{
  Class result;

  SOSLibrary_0();
  result = objc_getClass("SOSManager");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getSOSManagerClass_block_invoke_cold_1();
  getSOSManagerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t HKCodableSummaryVisualizationDataPresencePointReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  HKCodableDateInterval *v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_33;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v20 = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_35:
        *(_BYTE *)(a1 + 16) = v20 != 0;
      }
      else if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(HKCodableDateInterval);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || !HKCodableDateIntervalReadFrom((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1D792AF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL HKCodableDayIndexRangeReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
          {
            v24 = &OBJC_IVAR___HKCodableDayIndexRange__dayIndex;
            goto LABEL_38;
          }
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            break;
          v17 += 7;
          v23 = v18++ > 8;
          if (v23)
          {
            v19 = 0;
            v24 = &OBJC_IVAR___HKCodableDayIndexRange__dayIndex;
            goto LABEL_41;
          }
        }
        v24 = &OBJC_IVAR___HKCodableDayIndexRange__dayIndex;
LABEL_39:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_41:
        *(_QWORD *)(a1 + *v24) = v19;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_42:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v25 = 0;
    v26 = 0;
    v19 = 0;
    *(_BYTE *)(a1 + 24) |= 2u;
    while (1)
    {
      v27 = *v3;
      v28 = *(_QWORD *)(a2 + v27);
      if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
      *(_QWORD *)(a2 + v27) = v28 + 1;
      v19 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0)
      {
        v24 = &OBJC_IVAR___HKCodableDayIndexRange__duration;
        goto LABEL_39;
      }
      v25 += 7;
      v23 = v26++ > 8;
      if (v23)
      {
        v19 = 0;
        v24 = &OBJC_IVAR___HKCodableDayIndexRange__duration;
        goto LABEL_41;
      }
    }
    v24 = &OBJC_IVAR___HKCodableDayIndexRange__duration;
LABEL_38:
    *(_BYTE *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id HKUILocalizedStringForStateOfMind(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;

  v1 = a1;
  v2 = objc_msgSend(v1, "valenceClassification");
  v3 = objc_msgSend(v1, "reflectiveInterval");

  return HKUILocalizedStringForValenceClassificationAndReflectiveInterval(v2, v3);
}

id HKUILocalizedStringForValenceClassificationAndReflectiveInterval(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  const __CFString *v5;
  const __CFString *v6;
  const __CFString *v7;
  void *v8;

  switch(a1)
  {
    case 1:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = v3;
      v5 = CFSTR("VERY_UNPLEASANT_DAY");
      v6 = CFSTR("VERY_UNPLEASANT_MOMENT");
      goto LABEL_10;
    case 2:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = v3;
      v5 = CFSTR("UNPLEASANT_DAY");
      v6 = CFSTR("UNPLEASANT_MOMENT");
      goto LABEL_10;
    case 3:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = v3;
      v5 = CFSTR("SLIGHTLY_UNPLEASANT_DAY");
      v6 = CFSTR("SLIGHTLY_UNPLEASANT_MOMENT");
      goto LABEL_10;
    case 4:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = v3;
      v5 = CFSTR("NEUTRAL_DAY");
      v6 = CFSTR("NEUTRAL_MOMENT");
      goto LABEL_10;
    case 5:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = v3;
      v5 = CFSTR("SLIGHTLY_PLEASANT_DAY");
      v6 = CFSTR("SLIGHTLY_PLEASANT_MOMENT");
      goto LABEL_10;
    case 6:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = v3;
      v5 = CFSTR("PLEASANT_DAY");
      v6 = CFSTR("PLEASANT_MOMENT");
      goto LABEL_10;
    case 7:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = v3;
      v5 = CFSTR("VERY_PLEASANT_DAY");
      v6 = CFSTR("VERY_PLEASANT_MOMENT");
LABEL_10:
      if (a2 == 1)
        v7 = v6;
      else
        v7 = v5;
      break;
    default:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = v3;
      v7 = CFSTR("UNKNOWN_VALENCE_CLASSIFICATION");
      break;
  }
  objc_msgSend(v3, "localizedStringForKey:value:table:", v7, &stru_1E9C4C428, CFSTR("HealthUI-Localizable-Chamomile"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

id HKUILocalizedStringForValenceClassification(uint64_t a1)
{
  void *v1;
  void *v2;
  const __CFString *v3;
  void *v4;

  switch(a1)
  {
    case 1:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("VALENCE_CLASSIFICATION_VERY_UNPLEASANT");
      break;
    case 2:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("VALENCE_CLASSIFICATION_UNPLEASANT");
      break;
    case 3:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("VALENCE_CLASSIFICATION_SLIGHTLY_UNPLEASANT");
      break;
    case 4:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("VALENCE_CLASSIFICATION_NEUTRAL");
      break;
    case 5:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("VALENCE_CLASSIFICATION_SLIGHTLY_PLEASANT");
      break;
    case 6:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("VALENCE_CLASSIFICATION_PLEASANT");
      break;
    case 7:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("VALENCE_CLASSIFICATION_VERY_PLEASANT");
      break;
    default:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("UNKNOWN_VALENCE_CLASSIFICATION");
      break;
  }
  objc_msgSend(v1, "localizedStringForKey:value:table:", v3, &stru_1E9C4C428, CFSTR("HealthUI-Localizable-Chamomile"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id HKUILocalizedStringForValenceClassificationRangeBound(uint64_t a1)
{
  void *v1;
  void *v2;
  const __CFString *v3;
  void *v4;

  switch(a1)
  {
    case 1:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("VALENCE_CLASSIFICATION_RANGE_BOUND_VERY_UNPLEASANT");
      break;
    case 2:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("VALENCE_CLASSIFICATION_RANGE_BOUND_UNPLEASANT");
      break;
    case 3:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("VALENCE_CLASSIFICATION_RANGE_BOUND_SLIGHTLY_UNPLEASANT");
      break;
    case 4:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("VALENCE_CLASSIFICATION_RANGE_BOUND_NEUTRAL");
      break;
    case 5:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("VALENCE_CLASSIFICATION_RANGE_BOUND_SLIGHTLY_PLEASANT");
      break;
    case 6:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("VALENCE_CLASSIFICATION_RANGE_BOUND_PLEASANT");
      break;
    case 7:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("VALENCE_CLASSIFICATION_RANGE_BOUND_VERY_PLEASANT");
      break;
    default:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("UNKNOWN_VALENCE_CLASSIFICATION_RANGE_BOUND");
      break;
  }
  objc_msgSend(v1, "localizedStringForKey:value:table:", v3, &stru_1E9C4C428, CFSTR("HealthUI-Localizable-Chamomile"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id HKUILocalizedStringForValenceRange(double a1, double a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  HKStateOfMindValenceClassificationForValence();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  HKStateOfMindValenceClassificationForValence();
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)v5;
  v7 = 0;
  if (v4 && v5)
  {
    HKUILocalizedStringForValenceClassificationRangeBound(objc_msgSend(v4, "integerValue"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    HKUILocalizedStringForValenceClassificationRangeBound(objc_msgSend(v6, "integerValue"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "isEqualToNumber:", v6))
    {
      HKUILocalizedStringForValenceClassification(objc_msgSend(v4, "integerValue"));
      v7 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v10 = (void *)MEMORY[0x1E0CB3940];
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "localizedStringForKey:value:table:", CFSTR("VALENCE_CLASSIFICATION_RANGE"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable-Chamomile"));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      if (a1 <= a2)
        objc_msgSend(v10, "stringWithFormat:", v12, v9, v8);
      else
        objc_msgSend(v10, "stringWithFormat:", v12, v8, v9);
      v7 = (void *)objc_claimAutoreleasedReturnValue();

    }
  }

  return v7;
}

id HKUILocalizedStringForStateOfMindLabel(uint64_t a1)
{
  void *v1;
  void *v2;
  const __CFString *v3;
  void *v4;

  switch(a1)
  {
    case 1:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("AMAZED_LABEL");
      break;
    case 2:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("AMUSED_LABEL");
      break;
    case 3:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("ANGRY_LABEL");
      break;
    case 4:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("ANXIOUS_LABEL");
      break;
    case 5:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("ASHAMED_LABEL");
      break;
    case 6:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("BRAVE_LABEL");
      break;
    case 7:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("CALM_LABEL");
      break;
    case 8:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("CONTENT_LABEL");
      break;
    case 9:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("DISAPPOINTED_LABEL");
      break;
    case 10:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("DISCOURAGED_LABEL");
      break;
    case 11:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("DISGUSTED_LABEL");
      break;
    case 12:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("EMBARRASSED_LABEL");
      break;
    case 13:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("EXCITED_LABEL");
      break;
    case 14:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("FRUSTRATED_LABEL");
      break;
    case 15:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("GRATEFUL_LABEL");
      break;
    case 16:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("GUILTY_LABEL");
      break;
    case 17:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("HAPPY_LABEL");
      break;
    case 18:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("HOPELESS_LABEL");
      break;
    case 19:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("IRRITATED_LABEL");
      break;
    case 20:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("JEALOUS_LABEL");
      break;
    case 21:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("JOYFUL_LABEL");
      break;
    case 22:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("LONELY_LABEL");
      break;
    case 23:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("PASSIONATE_LABEL");
      break;
    case 24:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("PEACEFUL_LABEL");
      break;
    case 25:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("PROUD_LABEL");
      break;
    case 26:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("RELIEVED_LABEL");
      break;
    case 27:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("SAD_LABEL");
      break;
    case 28:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("SCARED_LABEL");
      break;
    case 29:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("STRESSED_LABEL");
      break;
    case 30:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("SURPRISED_LABEL");
      break;
    case 31:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("WORRIED_LABEL");
      break;
    case 32:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("ANNOYED_LABEL");
      break;
    case 33:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("CONFIDENT_LABEL");
      break;
    case 34:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("DRAINED_LABEL");
      break;
    case 35:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("HOPEFUL_LABEL");
      break;
    case 36:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("INDIFFERENT_LABEL");
      break;
    case 37:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("OVERWHELMED_LABEL");
      break;
    case 38:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("SATISFIED_LABEL");
      break;
    default:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("UNKNOWN_LABEL");
      break;
  }
  objc_msgSend(v1, "localizedStringForKey:value:table:", v3, &stru_1E9C4C428, CFSTR("HealthUI-Localizable-Chamomile"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id HKUILocalizedStringForStateOfMindDomain(uint64_t a1)
{
  void *v1;
  void *v2;
  const __CFString *v3;
  void *v4;

  switch(a1)
  {
    case 1:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("COMMUNITY_DOMAIN");
      break;
    case 2:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("CURRENT_EVENTS_DOMAIN");
      break;
    case 3:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("DATING_DOMAIN");
      break;
    case 4:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("EDUCATION_DOMAIN");
      break;
    case 5:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("FAMILY_DOMAIN");
      break;
    case 6:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("FITNESS_DOMAIN");
      break;
    case 7:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("FRIENDS_DOMAIN");
      break;
    case 8:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("HEALTH_DOMAIN");
      break;
    case 9:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("HOBBIES_DOMAIN");
      break;
    case 10:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("IDENTITY_DOMAIN");
      break;
    case 11:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("MONEY_DOMAIN");
      break;
    case 12:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("PARTNER_DOMAIN");
      break;
    case 13:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("SELF_CARE_DOMAIN");
      break;
    case 14:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("SPIRITUALITY_DOMAIN");
      break;
    case 15:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("TASKS_DOMAIN");
      break;
    case 16:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("TRAVEL_DOMAIN");
      break;
    case 17:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("WORK_DOMAIN");
      break;
    case 18:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("WEATHER_DOMAIN");
      break;
    default:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = v1;
      v3 = CFSTR("UNKNOWN_DOMAIN");
      break;
  }
  objc_msgSend(v1, "localizedStringForKey:value:table:", v3, &stru_1E9C4C428, CFSTR("HealthUI-Localizable-Chamomile"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id HKUILocalizedStringForGAD7Risk(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  const __CFString *v4;

  switch(a1)
  {
    case 1:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("GAD7_RISK_NONE_TO_MINIMAL");
      goto LABEL_6;
    case 2:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("GAD7_RISK_MILD");
      goto LABEL_6;
    case 3:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("GAD7_RISK_MODERATE");
      goto LABEL_6;
    case 4:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("GAD7_RISK_SEVERE");
LABEL_6:
      objc_msgSend(v2, "localizedStringForKey:value:table:", v4, &stru_1E9C4C428, CFSTR("HealthUI-Localizable-Chamomile"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();

      break;
    default:
      return v1;
  }
  return v1;
}

id HKUILocalizedStringForGAD7Answer(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  const __CFString *v4;

  switch(a1)
  {
    case 0:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("GAD7_ANSWER_NOT_AT_ALL");
      goto LABEL_6;
    case 1:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("GAD7_ANSWER_SEVERAL_DAYS");
      goto LABEL_6;
    case 2:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("GAD7_ANSWER_MORE_THAN_HALF_THE_DAYS");
      goto LABEL_6;
    case 3:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("GAD7_ANSWER_NEARLY_EVERY_DAY");
LABEL_6:
      objc_msgSend(v2, "localizedStringForKey:value:table:", v4, &stru_1E9C4C428, CFSTR("HealthUI-Localizable-Chamomile"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();

      break;
    default:
      return v1;
  }
  return v1;
}

id HKUILocalizedStringForPHQ9Risk(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  const __CFString *v4;

  switch(a1)
  {
    case 1:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("PHQ9_RISK_NONE_TO_MINIMAL");
      goto LABEL_7;
    case 2:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("PHQ9_RISK_MILD");
      goto LABEL_7;
    case 3:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("PHQ9_RISK_MODERATE");
      goto LABEL_7;
    case 4:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("PHQ9_RISK_MODERATELY_SEVERE");
      goto LABEL_7;
    case 5:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("PHQ9_RISK_SEVERE");
LABEL_7:
      objc_msgSend(v2, "localizedStringForKey:value:table:", v4, &stru_1E9C4C428, CFSTR("HealthUI-Localizable-Chamomile"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();

      break;
    default:
      return v1;
  }
  return v1;
}

id HKUILocalizedStringForPHQ9Answer(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  const __CFString *v4;

  switch(a1)
  {
    case 0:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("PHQ9_ANSWER_NOT_AT_ALL");
      goto LABEL_7;
    case 1:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("PHQ9_ANSWER_SEVERAL_DAYS");
      goto LABEL_7;
    case 2:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("PHQ9_ANSWER_MORE_THAN_HALF_THE_DAYS");
      goto LABEL_7;
    case 3:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("PHQ9_ANSWER_NEARLY_EVERY_DAY");
      goto LABEL_7;
    case 4:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = v2;
      v4 = CFSTR("PHQ9_ANSWER_PREFER_NOT_TO_ANSWER");
LABEL_7:
      objc_msgSend(v2, "localizedStringForKey:value:table:", v4, &stru_1E9C4C428, CFSTR("HealthUI-Localizable-Chamomile"));
      v1 = (void *)objc_claimAutoreleasedReturnValue();

      break;
    default:
      return v1;
  }
  return v1;
}

BOOL HKCodableClosedRangeReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int *v24;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v19 = *v3;
        v20 = *(_QWORD *)(a2 + v19);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v20);
          *(_QWORD *)(a2 + v19) = v20 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v21 = 0;
        }
        v24 = &OBJC_IVAR___HKCodableClosedRange__lowerBound;
LABEL_32:
        *(_QWORD *)(a1 + *v24) = v21;
        goto LABEL_33;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_33:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v22 = *v3;
    v23 = *(_QWORD *)(a2 + v22);
    if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + *v4))
    {
      v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v23);
      *(_QWORD *)(a2 + v22) = v23 + 8;
    }
    else
    {
      *(_BYTE *)(a2 + v16) = 1;
      v21 = 0;
    }
    v24 = &OBJC_IVAR___HKCodableClosedRange__upperBound;
    goto LABEL_32;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id _IndentString(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  objc_msgSend(&stru_1E9C4C428, "stringByPaddingToLength:withString:startingAtIndex:", a2, CFSTR(" "), 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "componentsSeparatedByString:", CFSTR("\n"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v7 = v5;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v16;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v16 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(v4, "stringByAppendingString:", *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * v11), (_QWORD)v15);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "addObject:", v12);

        ++v11;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v9);
  }

  objc_msgSend(v6, "componentsJoinedByString:", CFSTR("\n"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  return v13;
}

BOOL HKCodableSleepingSampleBaselineReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  HKCodableQuantity *v18;
  uint64_t v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(HKCodableQuantity);
        v19 = 8;
      }
      else if ((_DWORD)v17 == 2)
      {
        v18 = objc_alloc_init(HKCodableQuantity);
        v19 = 16;
      }
      else
      {
        if ((_DWORD)v17 != 1)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
          continue;
        }
        v18 = objc_alloc_init(HKCodableQuantity);
        v19 = 24;
      }
      objc_storeStrong((id *)(a1 + v19), v18);
      if (!PBReaderPlaceMark() || (HKCodableQuantityReadFrom((uint64_t)v18, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id HKLogAFibBurden()
{
  if (HKLogAFibBurden_onceToken != -1)
    dispatch_once(&HKLogAFibBurden_onceToken, &__block_literal_global_32);
  return (id)HKLogAFibBurden_aFibBurdenCategory;
}

__CFString *HKVisionLeftRightLongLocalizedString(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  __CFString *v10;
  void *v12;

  v3 = a2;
  _HKVisionSphereDiopterStringFromNumber(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  _HKVisionSphereDiopterStringFromNumber(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4 && v5)
  {
    v6 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("VISION_LEFT_RIGHT_LONG_%@%@"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable-VRX"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v5;
LABEL_10:
    objc_msgSend(v6, "localizedStringWithFormat:", v8, v4, v12);
    goto LABEL_11;
  }
  if (!v4 && v5)
  {
    v9 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("VISION_RIGHT_LONG_%@"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable-VRX"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "localizedStringWithFormat:", v8, v5, v12);
LABEL_11:
    v10 = (__CFString *)objc_claimAutoreleasedReturnValue();

    goto LABEL_12;
  }
  v10 = &stru_1E9C4C428;
  if (v4 && !v5)
  {
    v6 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("VISION_LEFT_LONG_%@"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable-VRX"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_10;
  }
LABEL_12:

  return v10;
}

__CFString *_HKVisionSphereDiopterStringFromNumber(void *a1)
{
  id v1;
  _BOOL8 v2;
  id v3;
  void *v4;
  __CFString *v5;
  __CFString *v6;
  __CFString *v7;

  if (a1)
  {
    v1 = a1;
    objc_msgSend(v1, "doubleValue");
    v2 = HKCompareDoubles() != 0;
    v3 = objc_alloc_init(MEMORY[0x1E0CB37F0]);
    objc_msgSend(v3, "setMinimumFractionDigits:", v2);
    objc_msgSend(v3, "setMaximumFractionDigits:", 2);
    objc_msgSend(v3, "plusSign");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setPositivePrefix:", v4);

    objc_msgSend(v3, "stringFromNumber:", v1);
    v5 = (__CFString *)objc_claimAutoreleasedReturnValue();

    v6 = &stru_1E9C4C428;
    if (v5)
      v6 = v5;
    v7 = v6;

  }
  else
  {
    v7 = 0;
  }
  return v7;
}

__CFString *HKVisionLeftRightShortLocalizedString(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  __CFString *v10;
  void *v12;

  v3 = a2;
  _HKVisionSphereDiopterStringFromNumber(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  _HKVisionSphereDiopterStringFromNumber(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4 && v5)
  {
    v6 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("VISION_LEFT_RIGHT_SHORT_%@%@"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable-VRX"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v5;
LABEL_10:
    objc_msgSend(v6, "localizedStringWithFormat:", v8, v4, v12);
    goto LABEL_11;
  }
  if (!v4 && v5)
  {
    v9 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("VISION_RIGHT_SHORT_%@"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable-VRX"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "localizedStringWithFormat:", v8, v5, v12);
LABEL_11:
    v10 = (__CFString *)objc_claimAutoreleasedReturnValue();

    goto LABEL_12;
  }
  v10 = &stru_1E9C4C428;
  if (v4 && !v5)
  {
    v6 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("VISION_LEFT_SHORT_%@"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable-VRX"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_10;
  }
LABEL_12:

  return v10;
}

id HKVisionPrescriptionTypeLongLocalizedString(uint64_t a1)
{
  void *v1;
  void *v2;
  const __CFString *v3;
  void *v4;

  if (a1 == 2)
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = v1;
    v3 = CFSTR("VISION_PRESCRIPTION_TYPE_CONTACTS_LONG");
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = v1;
    v3 = CFSTR("VISION_PRESCRIPTION_TYPE_GLASSES_LONG");
  }
  objc_msgSend(v1, "localizedStringForKey:value:table:", v3, &stru_1E9C4C428, CFSTR("HealthUI-Localizable-VRX"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id HKVisionPrescriptionTypeShortLocalizedString(uint64_t a1)
{
  void *v1;
  void *v2;
  const __CFString *v3;
  void *v4;

  if (a1 == 2)
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = v1;
    v3 = CFSTR("VISION_PRESCRIPTION_TYPE_CONTACTS_SHORT");
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = v1;
    v3 = CFSTR("VISION_PRESCRIPTION_TYPE_GLASSES_SHORT");
  }
  objc_msgSend(v1, "localizedStringForKey:value:table:", v3, &stru_1E9C4C428, CFSTR("HealthUI-Localizable-VRX"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

__CFString *HKVisionPrescriptionTypeDetailedLongLocalizedString(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  __CFString *v9;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v1, "brand");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v2, "length"))
    {
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "localizedStringForKey:value:table:", CFSTR("VISION_PRESCRIPTION_CONTACTS_AND_BRAND_FORMAT_%@"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable-VRX"));
      v4 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", v4, v2);
      v5 = objc_claimAutoreleasedReturnValue();
LABEL_13:
      v9 = (__CFString *)v5;

      goto LABEL_14;
    }

  }
  v6 = objc_msgSend(v1, "prescriptionType");
  if (v6 == 2)
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("VISION_PRESCRIPTION_TYPE_CONTACTS_LONG"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable-VRX"));
    v9 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_14:

    goto LABEL_15;
  }
  if (v6 == 1)
  {
    objc_msgSend(v1, "metadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "objectForKeyedSubscript:", *MEMORY[0x1E0CB5510]);
    v2 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v1, "metadata");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "objectForKeyedSubscript:", *MEMORY[0x1E0CB7370]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (v4)
      HKVisionPrescriptionFormattedVisionProOpticalInsertsDescription(v2);
    else
      HKVisionPrescriptionFormattedGlassesDescription(v2);
    v5 = objc_claimAutoreleasedReturnValue();
    goto LABEL_13;
  }
  v9 = &stru_1E9C4C428;
LABEL_15:

  return v9;
}

id HKVisionPrescriptionFormattedVisionProOpticalInsertsDescription(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v1 = a1;
  v2 = objc_msgSend(v1, "length");
  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v2)
  {
    objc_msgSend(v3, "localizedStringForKey:value:table:", CFSTR("VISION_PRESCRIPTION_VISION_PRO_OPTICAL_INSERTS_AND_DESCRIPTION_FORMAT_%@"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable-VRX"));
    v5 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CB3940], "localizedStringWithFormat:", v5, v1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = (void *)v5;
  }
  else
  {
    objc_msgSend(v3, "localizedStringForKey:value:table:", CFSTR("VISION_PRESCRIPTION_TYPE_VISION_PRO_OPTICAL_INSERTS_LONG"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable-VRX"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v6;
}

id HKVisionPrescriptionFormattedGlassesDescription(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v1 = a1;
  v2 = objc_msgSend(v1, "length");
  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v2)
  {
    objc_msgSend(v3, "localizedStringForKey:value:table:", CFSTR("VISION_PRESCRIPTION_GLASSES_AND_DESCRIPTION_FORMAT_%@"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable-VRX"));
    v5 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", v5, v1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = (void *)v5;
  }
  else
  {
    objc_msgSend(v3, "localizedStringForKey:value:table:", CFSTR("VISION_PRESCRIPTION_TYPE_GLASSES_LONG"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable-VRX"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v6;
}

__CFString *HKVisionPrescriptionRawDescription(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  __CFString *v4;

  v1 = a1;
  v2 = objc_msgSend(v1, "prescriptionType");
  if (v2 == 2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v1, "brand");
      v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
      goto LABEL_7;
    }
LABEL_6:
    v4 = &stru_1E9C4C428;
    goto LABEL_7;
  }
  if (v2 != 1)
    goto LABEL_6;
  objc_msgSend(v1, "metadata");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKeyedSubscript:", *MEMORY[0x1E0CB5510]);
  v4 = (__CFString *)objc_claimAutoreleasedReturnValue();

LABEL_7:
  return v4;
}

id HKVisionPrescriptionImageOnlyLocalizedString()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "localizedStringForKey:value:table:", CFSTR("VISION_PRESCRIPTION_IMAGE_ONLY"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable-VRX"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id HKVisionPrescriptionGenerateGlassesPrescriptionSample()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  _HKVisionRandomGlassesLensSpecifications();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = *MEMORY[0x1E0CB5510];
  HKVisionPrescriptionTypeLongLocalizedString(1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = v1;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  v3 = (void *)MEMORY[0x1E0CB6750];
  objc_msgSend(v0, "objectAtIndexedSubscript:", 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "objectAtIndexedSubscript:", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D68], "now");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "prescriptionWithRightEyeSpecification:leftEyeSpecification:dateIssued:expirationDate:device:metadata:", v4, v5, v6, 0, 0, v2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

id _HKVisionRandomGlassesLensSpecifications()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  _QWORD v25[3];

  v25[2] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "diopterUnit");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  _HKVisionRandomLeftRightQuantities(4, v0, -10.5, 6.5, 0.25);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB6CD0], "diopterUnit");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  _HKVisionRandomLeftRightQuantities(4, v2, -3.0, 3.0, 0.25);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB6CD0], "degreeAngleUnit");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  _HKVisionRandomLeftRightQuantities(4, v4, 0.0, 180.0, 5.0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB6CD0], "diopterUnit");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  _HKVisionRandomLeftRightQuantities(2, v6, 0.25, 2.5, 0.25);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = objc_alloc(MEMORY[0x1E0CB6748]);
  v23 = v1;
  objc_msgSend(v1, "objectAtIndexedSubscript:", 0);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = v3;
  objc_msgSend(v3, "objectAtIndexedSubscript:", 0);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = v5;
  objc_msgSend(v5, "objectAtIndexedSubscript:", 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectAtIndexedSubscript:", 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)objc_msgSend(v8, "initWithSphere:cylinder:axis:addPower:vertexDistance:prism:farPupillaryDistance:nearPupillaryDistance:", v24, v22, v9, v10, 0, 0, 0, 0);
  v25[0] = v11;
  v12 = objc_alloc(MEMORY[0x1E0CB6748]);
  objc_msgSend(v1, "objectAtIndexedSubscript:", 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectAtIndexedSubscript:", 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectAtIndexedSubscript:", 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectAtIndexedSubscript:", 1);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = (void *)objc_msgSend(v12, "initWithSphere:cylinder:axis:addPower:vertexDistance:prism:farPupillaryDistance:nearPupillaryDistance:", v13, v14, v15, v16, 0, 0, 0, 0);
  v25[1] = v17;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v25, 2);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  return v18;
}

id _HKVisionRandomLeftRightQuantities(uint64_t a1, void *a2, double a3, double a4, double a5)
{
  uint64_t v9;
  id v10;
  double v11;
  int v12;
  double v13;
  double v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  v9 = (uint64_t)((a4 - a3) / a5);
  v10 = a2;
  v11 = a3 + a5 * (double)(arc4random() % (v9 + 1));
  if ((arc4random() & 1) != 0)
    v12 = 1;
  else
    v12 = -1;
  v13 = v11 + ((double)(arc4random() % a1) + 1.0) * a5 * (double)v12;
  if (v13 >= a4)
    v13 = a4;
  if (v13 >= a3)
    v14 = v13;
  else
    v14 = a3;
  objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v10, v11);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = v15;
  objc_msgSend(MEMORY[0x1E0CB6A28], "quantityWithUnit:doubleValue:", v10, v14);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  v19[1] = v16;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v19, 2);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  return v17;
}

id HKVisionPrescriptionSupportedImageUTTypeIdentifiers()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[7];

  v4[6] = *MEMORY[0x1E0C80C00];
  v0 = *MEMORY[0x1E0CEC530];
  v4[0] = *MEMORY[0x1E0CEC508];
  v4[1] = v0;
  v1 = *MEMORY[0x1E0CEC570];
  v4[2] = *MEMORY[0x1E0CEC540];
  v4[3] = v1;
  v2 = *MEMORY[0x1E0CEC600];
  v4[4] = *MEMORY[0x1E0CEC580];
  v4[5] = v2;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v4, 6);
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t HKCodableSummaryUnderwaterDepthValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  unint64_t v18;
  HKCodableQuantity *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 28) |= 1u;
        v20 = *v3;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v22 = 0;
        }
        *(_QWORD *)(a1 + 8) = v22;
      }
      else if ((_DWORD)v18 == 2)
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 28) |= 2u;
        while (1)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          v28 = v27 + 1;
          if (v27 == -1 || v28 > *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
          *(_QWORD *)(a2 + v26) = v28;
          v25 |= (unint64_t)(v29 & 0x7F) << v23;
          if ((v29 & 0x80) == 0)
            goto LABEL_37;
          v23 += 7;
          v15 = v24++ >= 9;
          if (v15)
          {
            v25 = 0;
            goto LABEL_39;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
LABEL_39:
        *(_BYTE *)(a1 + 24) = v25 != 0;
      }
      else if ((_DWORD)v18 == 1)
      {
        v19 = objc_alloc_init(HKCodableQuantity);
        objc_storeStrong((id *)(a1 + 16), v19);
        if (!PBReaderPlaceMark() || (HKCodableQuantityReadFrom((uint64_t)v19, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL HKCodableChartBloodPressureDataSourceQueryDataReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  HKCodableStatisticsCollection *v17;
  uint64_t v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(HKCodableStatisticsCollection);
        v18 = 8;
      }
      else
      {
        if ((v10 >> 3) != 1)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
          continue;
        }
        v17 = objc_alloc_init(HKCodableStatisticsCollection);
        v18 = 16;
      }
      objc_storeStrong((id *)(a1 + v18), v17);
      if (!PBReaderPlaceMark() || !HKCodableStatisticsCollectionReadFrom((id *)&v17->super.super.isa, a2))
      {

        return 0;
      }
      PBReaderRecallMark();

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1D793FB88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D793FD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t CoreTelephonyLibrary()
{
  void *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = 0;
  if (!CoreTelephonyLibraryCore_frameworkLibrary)
  {
    v2 = xmmword_1E9C42798;
    v3 = 0;
    CoreTelephonyLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!CoreTelephonyLibraryCore_frameworkLibrary)
    CoreTelephonyLibrary_cold_1(&v1);
  return CoreTelephonyLibraryCore_frameworkLibrary;
}

char *OUTLINED_FUNCTION_0_8()
{
  return dlerror();
}

void sub_1D7940758(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D7940958(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _RunBlockForPointsInPath(const void *a1, uint64_t a2)
{
  void *v3;
  __n128 v4;
  __n128 v5;
  unint64_t *v6;
  id v7;

  v3 = _Block_copy(a1);
  v6 = *(unint64_t **)(a2 + 8);
  v7 = v3;
  switch(*(_DWORD *)a2)
  {
    case 0:
      v4.n128_u64[0] = *v6;
      v5.n128_u64[0] = v6[1];
      (*((void (**)(void *, _QWORD, __n128, __n128))v3 + 2))(v3, 0, v4, v5);
      goto LABEL_8;
    case 1:
      v4.n128_u64[0] = *v6;
      v5.n128_u64[0] = v6[1];
      (*((void (**)(void *, uint64_t, __n128, __n128))v3 + 2))(v3, 1, v4, v5);
      goto LABEL_8;
    case 2:
      v4.n128_u64[0] = v6[2];
      v5.n128_u64[0] = v6[3];
      (*((void (**)(void *, uint64_t, __n128, __n128))v3 + 2))(v3, 2, v4, v5);
      goto LABEL_8;
    case 3:
      v4.n128_u64[0] = v6[4];
      v5.n128_u64[0] = v6[5];
      (*((void (**)(void *, uint64_t, __n128, __n128))v3 + 2))(v3, 3, v4, v5);
      goto LABEL_8;
    case 4:
      (*((void (**)(void *, uint64_t, double, double))v3 + 2))(v3, 4, *MEMORY[0x1E0C9D538], *(double *)(MEMORY[0x1E0C9D538] + 8));
LABEL_8:
      v3 = v7;
      break;
    default:
      break;
  }

}

void _FindFirstPoint(void *a1, uint64_t a2)
{
  void *v3;
  id v4;

  v4 = a1;
  if (!objc_msgSend(v4, "count") && *(_DWORD *)a2 <= 3u)
  {
    objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCGPoint:", **(double **)(a2 + 8), *(double *)(*(_QWORD *)(a2 + 8) + 8));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addObject:", v3);

  }
}

uint64_t HKCodableNotificationSampleReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  int *v8;
  int *v9;
  int *v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  int v19;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  unint64_t v26;
  int *v27;
  int *v28;
  int *v29;
  HKCodableMetadataDictionary *v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = &OBJC_IVAR___HKPopulationNormsGraphView__sexSegmentIndex;
  v8 = &OBJC_IVAR___HKPopulationNormsGraphView__sexSegmentIndex;
  v9 = (int *)MEMORY[0x1E0D82BB8];
  v10 = &OBJC_IVAR___HKPopulationNormsGraphView__sexSegmentIndex;
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    while (1)
    {
      v14 = *v3;
      v15 = *(_QWORD *)(a2 + v14);
      v16 = v15 + 1;
      if (v15 == -1 || v16 > *(_QWORD *)(a2 + *v4))
        break;
      v17 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v15);
      *(_QWORD *)(a2 + v14) = v16;
      v13 |= (unint64_t)(v17 & 0x7F) << v11;
      if ((v17 & 0x80) == 0)
        goto LABEL_12;
      v11 += 7;
      v18 = v12++ >= 9;
      if (v18)
      {
        v13 = 0;
        v19 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v19 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v13 = 0;
LABEL_14:
    if (v19 || (v13 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v13 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + v7[54]) |= 0x20u;
        v21 = *v3;
        v22 = *(_QWORD *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v9) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v23 = 0;
        }
        v59 = v8[55];
        goto LABEL_80;
      case 2u:
        *(_BYTE *)(a1 + v7[54]) |= 4u;
        v25 = *v3;
        v26 = *(_QWORD *)(a2 + v25);
        if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v9) + v26);
          *(_QWORD *)(a2 + v25) = v26 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v23 = 0;
        }
        v59 = v10[56];
LABEL_80:
        *(_QWORD *)(a1 + v59) = v23;
        goto LABEL_81;
      case 3u:
        v27 = v10;
        v28 = v7;
        v29 = v8;
        v30 = objc_alloc_init(HKCodableMetadataDictionary);
        objc_storeStrong((id *)(a1 + 56), v30);
        if (PBReaderPlaceMark() && (HKCodableMetadataDictionaryReadFrom(v30, a2) & 1) != 0)
        {
          PBReaderRecallMark();

          v8 = v29;
          v7 = v28;
          v10 = v27;
LABEL_81:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 4u:
        v31 = 0;
        v32 = 0;
        v33 = 0;
        *(_BYTE *)(a1 + v7[54]) |= 1u;
        while (2)
        {
          v34 = *v3;
          v35 = *(_QWORD *)(a2 + v34);
          v36 = v35 + 1;
          if (v35 == -1 || v36 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v35);
            *(_QWORD *)(a2 + v34) = v36;
            v33 |= (unint64_t)(v37 & 0x7F) << v31;
            if (v37 < 0)
            {
              v31 += 7;
              v18 = v32++ >= 9;
              if (v18)
              {
                v33 = 0;
                goto LABEL_62;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v33 = 0;
LABEL_62:
        v58 = 8;
        goto LABEL_75;
      case 5u:
        v38 = 0;
        v39 = 0;
        v33 = 0;
        *(_BYTE *)(a1 + v7[54]) |= 2u;
        while (2)
        {
          v40 = *v3;
          v41 = *(_QWORD *)(a2 + v40);
          v42 = v41 + 1;
          if (v41 == -1 || v42 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v41);
            *(_QWORD *)(a2 + v40) = v42;
            v33 |= (unint64_t)(v43 & 0x7F) << v38;
            if (v43 < 0)
            {
              v38 += 7;
              v18 = v39++ >= 9;
              if (v18)
              {
                v33 = 0;
                goto LABEL_66;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v33 = 0;
LABEL_66:
        v58 = 16;
        goto LABEL_75;
      case 6u:
        v44 = 0;
        v45 = 0;
        v33 = 0;
        *(_BYTE *)(a1 + v7[54]) |= 8u;
        while (2)
        {
          v46 = *v3;
          v47 = *(_QWORD *)(a2 + v46);
          v48 = v47 + 1;
          if (v47 == -1 || v48 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v47);
            *(_QWORD *)(a2 + v46) = v48;
            v33 |= (unint64_t)(v49 & 0x7F) << v44;
            if (v49 < 0)
            {
              v44 += 7;
              v18 = v45++ >= 9;
              if (v18)
              {
                v33 = 0;
                goto LABEL_70;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v33 = 0;
LABEL_70:
        v58 = 32;
        goto LABEL_75;
      case 7u:
        v50 = 0;
        v51 = 0;
        v33 = 0;
        *(_BYTE *)(a1 + v7[54]) |= 0x10u;
        while (2)
        {
          v52 = *v3;
          v53 = *(_QWORD *)(a2 + v52);
          v54 = v53 + 1;
          if (v53 == -1 || v54 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v55 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v53);
            *(_QWORD *)(a2 + v52) = v54;
            v33 |= (unint64_t)(v55 & 0x7F) << v50;
            if (v55 < 0)
            {
              v50 += 7;
              v18 = v51++ >= 9;
              if (v18)
              {
                v33 = 0;
                goto LABEL_74;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v33 = 0;
LABEL_74:
        v58 = 40;
LABEL_75:
        *(_QWORD *)(a1 + v58) = v33;
        goto LABEL_81;
      case 8u:
        PBReaderReadString();
        v56 = objc_claimAutoreleasedReturnValue();
        v57 = *(void **)(a1 + 64);
        *(_QWORD *)(a1 + 64) = v56;

        goto LABEL_81;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_81;
    }
  }
}

uint64_t HKCodableSummaryAudiogramValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  HKCodableQuantity *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 2u:
        v18 = objc_alloc_init(HKCodableQuantity);
        v19 = 16;
        goto LABEL_25;
      case 3u:
        v18 = objc_alloc_init(HKCodableQuantity);
        v19 = 24;
        goto LABEL_25;
      case 4u:
        v18 = objc_alloc_init(HKCodableQuantity);
        v19 = 40;
        goto LABEL_25;
      case 5u:
        v18 = objc_alloc_init(HKCodableQuantity);
        v19 = 32;
LABEL_25:
        objc_storeStrong((id *)(a1 + v19), v18);
        if (!PBReaderPlaceMark() || (HKCodableQuantityReadFrom((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_39;
        goto LABEL_33;
      case 6u:
        *(_BYTE *)(a1 + 56) |= 1u;
        v21 = *v3;
        v22 = *(_QWORD *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v23 = 0;
        }
        *(_QWORD *)(a1 + 8) = v23;
        goto LABEL_34;
      case 7u:
        v18 = objc_alloc_init(HKCodableAudiogramSensitivityPoint);
        objc_msgSend((id)a1, "addSensitivityPoints:", v18);
        if (PBReaderPlaceMark() && HKCodableAudiogramSensitivityPointReadFrom((uint64_t)v18, a2))
        {
LABEL_33:
          PBReaderRecallMark();

LABEL_34:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_39:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_34;
    }
  }
}

uint64_t HKCodableSummaryBreathingDisturbancesValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  HKCodableLevelViewDataConfiguration *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(HKCodableLevelViewDataConfiguration);
        objc_storeStrong((id *)(a1 + 16), v18);
        if (!PBReaderPlaceMark() || (HKCodableLevelViewDataConfigurationReadFrom(v18, a2) & 1) == 0)
        {
LABEL_42:

          return 0;
        }
      }
      else
      {
        if ((_DWORD)v17 == 2)
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 32) |= 1u;
          while (1)
          {
            v22 = *v3;
            v23 = *(_QWORD *)(a2 + v22);
            if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
              break;
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0)
              goto LABEL_37;
            v19 += 7;
            v14 = v20++ >= 9;
            if (v14)
            {
              v21 = 0;
              goto LABEL_39;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
          if (*(_BYTE *)(a2 + *v5))
            v21 = 0;
LABEL_39:
          *(_QWORD *)(a1 + 8) = v21;
          continue;
        }
        if ((_DWORD)v17 != 1)
        {
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
        }
        v18 = objc_alloc_init(HKCodableSummaryQuantityValue);
        objc_storeStrong((id *)(a1 + 24), v18);
        if (!PBReaderPlaceMark() || (HKCodableSummaryQuantityValueReadFrom((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_42;
      }
      PBReaderRecallMark();

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HKCodableSummaryStateOfMindValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  int v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
            break;
          v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v16 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        v17 = v10 & 7;
        if (!v16 && v17 != 4)
        {
          switch((v10 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 80) |= 1u;
              v19 = *v3;
              v20 = *(_QWORD *)(a2 + v19);
              if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + *v4))
              {
                v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v20);
                *(_QWORD *)(a2 + v19) = v20 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + *v5) = 1;
                v21 = 0;
              }
              v59 = 56;
              goto LABEL_85;
            case 2u:
              v22 = 0;
              v23 = 0;
              v24 = 0;
              *(_BYTE *)(a1 + 80) |= 2u;
              while (2)
              {
                v25 = *v3;
                v26 = *(_QWORD *)(a2 + v25);
                v27 = v26 + 1;
                if (v26 == -1 || v27 > *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v26);
                  *(_QWORD *)(a2 + v25) = v27;
                  v24 |= (unint64_t)(v28 & 0x7F) << v22;
                  if (v28 < 0)
                  {
                    v22 += 7;
                    v15 = v23++ >= 9;
                    if (v15)
                    {
                      v24 = 0;
                      goto LABEL_64;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                v24 = 0;
LABEL_64:
              *(_QWORD *)(a1 + 64) = v24;
              goto LABEL_86;
            case 3u:
              *(_BYTE *)(a1 + 80) |= 4u;
              v29 = *v3;
              v30 = *(_QWORD *)(a2 + v29);
              if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(_QWORD *)(a2 + *v4))
              {
                v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v30);
                *(_QWORD *)(a2 + v29) = v30 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + *v5) = 1;
                v21 = 0;
              }
              v59 = 72;
LABEL_85:
              *(_QWORD *)(a1 + v59) = v21;
              goto LABEL_86;
            case 4u:
              if (v17 != 2)
              {
                v45 = 0;
                v46 = 0;
                v47 = 0;
                while (1)
                {
                  v48 = *v3;
                  v49 = *(_QWORD *)(a2 + v48);
                  v50 = v49 + 1;
                  if (v49 == -1 || v50 > *(_QWORD *)(a2 + *v4))
                    goto LABEL_79;
                  v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v49);
                  *(_QWORD *)(a2 + v48) = v50;
                  v47 |= (unint64_t)(v51 & 0x7F) << v45;
                  if (v51 < 0)
                  {
                    v45 += 7;
                    v15 = v46++ >= 9;
                    if (!v15)
                      continue;
                  }
                  goto LABEL_80;
                }
              }
              result = PBReaderPlaceMark();
              if (!(_DWORD)result)
                return result;
              while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
              {
                v31 = 0;
                v32 = 0;
                v33 = 0;
                while (1)
                {
                  v34 = *v3;
                  v35 = *(_QWORD *)(a2 + v34);
                  v36 = v35 + 1;
                  if (v35 == -1 || v36 > *(_QWORD *)(a2 + *v4))
                    break;
                  v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
                  *(_QWORD *)(a2 + v34) = v36;
                  v33 |= (unint64_t)(v37 & 0x7F) << v31;
                  if (v37 < 0)
                  {
                    v31 += 7;
                    v15 = v32++ >= 9;
                    if (!v15)
                      continue;
                  }
                  goto LABEL_46;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_46:
                PBRepeatedInt64Add();
              }
              goto LABEL_60;
            case 5u:
              if (v17 == 2)
              {
                result = PBReaderPlaceMark();
                if (!(_DWORD)result)
                  return result;
                while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                {
                  v38 = 0;
                  v39 = 0;
                  v40 = 0;
                  while (1)
                  {
                    v41 = *v3;
                    v42 = *(_QWORD *)(a2 + v41);
                    v43 = v42 + 1;
                    if (v42 == -1 || v43 > *(_QWORD *)(a2 + *v4))
                      break;
                    v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
                    *(_QWORD *)(a2 + v41) = v43;
                    v40 |= (unint64_t)(v44 & 0x7F) << v38;
                    if (v44 < 0)
                    {
                      v38 += 7;
                      v15 = v39++ >= 9;
                      if (!v15)
                        continue;
                    }
                    goto LABEL_59;
                  }
                  *(_BYTE *)(a2 + *v5) = 1;
LABEL_59:
                  PBRepeatedInt64Add();
                }
LABEL_60:
                PBReaderRecallMark();
              }
              else
              {
                v52 = 0;
                v53 = 0;
                v54 = 0;
                while (1)
                {
                  v55 = *v3;
                  v56 = *(_QWORD *)(a2 + v55);
                  v57 = v56 + 1;
                  if (v56 == -1 || v57 > *(_QWORD *)(a2 + *v4))
                    break;
                  v58 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v56);
                  *(_QWORD *)(a2 + v55) = v57;
                  v54 |= (unint64_t)(v58 & 0x7F) << v52;
                  if (v58 < 0)
                  {
                    v52 += 7;
                    v15 = v53++ >= 9;
                    if (!v15)
                      continue;
                  }
                  goto LABEL_80;
                }
LABEL_79:
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_80:
                PBRepeatedInt64Add();
              }
LABEL_86:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
            default:
              if ((PBReaderSkipValueWithTag() & 1) != 0)
                goto LABEL_86;
              return 0;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1D7947C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D7949FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  uint64_t v46;

  _Block_object_dispose(&a42, 8);
  _Block_object_dispose(&a46, 8);
  _Block_object_dispose((const void *)(v46 - 248), 8);
  _Block_object_dispose((const void *)(v46 - 200), 8);
  _Unwind_Resume(a1);
}

uint64_t HKCodableChartCardioFitnessQueryDataReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  HKCodableChartQuantityDataSourceQueryData *v34;
  uint64_t v35;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 40) |= 4u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_46;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_48;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_46:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_48:
        v35 = 24;
        goto LABEL_57;
      case 2u:
        v24 = 0;
        v25 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 40) |= 2u;
        while (2)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
            *(_QWORD *)(a2 + v26) = v27 + 1;
            v19 |= (unint64_t)(v28 & 0x7F) << v24;
            if (v28 < 0)
            {
              v24 += 7;
              v14 = v25++ >= 9;
              if (v14)
              {
                v19 = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_52:
        v35 = 16;
        goto LABEL_57;
      case 3u:
        v29 = 0;
        v30 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 40) |= 1u;
        while (2)
        {
          v31 = *v3;
          v32 = *(_QWORD *)(a2 + v31);
          if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
            *(_QWORD *)(a2 + v31) = v32 + 1;
            v19 |= (unint64_t)(v33 & 0x7F) << v29;
            if (v33 < 0)
            {
              v29 += 7;
              v14 = v30++ >= 9;
              if (v14)
              {
                v19 = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_56:
        v35 = 8;
LABEL_57:
        *(_QWORD *)(a1 + v35) = v19;
        goto LABEL_58;
      case 4u:
        v34 = objc_alloc_init(HKCodableChartQuantityDataSourceQueryData);
        objc_storeStrong((id *)(a1 + 32), v34);
        if (PBReaderPlaceMark()
          && (HKCodableChartQuantityDataSourceQueryDataReadFrom((uint64_t)v34, a2) & 1) != 0)
        {
          PBReaderRecallMark();

LABEL_58:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_58;
    }
  }
}

id OUTLINED_FUNCTION_3_4(uint64_t a1, void *a2)
{
  return a2;
}

BOOL HKCodableSleepPeriodReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  HKCodableDateInterval *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(HKCodableDateInterval);
        objc_storeStrong(a1 + 1, v17);
        if (!PBReaderPlaceMark() || !HKCodableDateIntervalReadFrom((uint64_t)v17, a2))
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(HKCodableSleepPeriodSegment);
    objc_msgSend(a1, "addSegment:", v17);
    if (!PBReaderPlaceMark() || (HKCodableSleepPeriodSegmentReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HKCodableActivitySummaryEntryReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  HKCodableDateComponents *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(HKCodableDateComponents);
        objc_storeStrong((id *)(a1 + 80), v17);
        if (PBReaderPlaceMark() && (HKCodableDateComponentsReadFrom((uint64_t)v17, a2) & 1) != 0)
          goto LABEL_41;
        goto LABEL_60;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 92) |= 1u;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_54:
        *(_QWORD *)(a1 + 8) = v21;
        goto LABEL_42;
      case 3u:
        v17 = objc_alloc_init(HKCodableQuantity);
        v25 = 16;
        goto LABEL_39;
      case 4u:
        v17 = objc_alloc_init(HKCodableQuantity);
        v25 = 48;
        goto LABEL_39;
      case 5u:
        v17 = objc_alloc_init(HKCodableQuantity);
        v25 = 32;
        goto LABEL_39;
      case 6u:
        v17 = objc_alloc_init(HKCodableQuantity);
        v25 = 64;
        goto LABEL_39;
      case 7u:
        v17 = objc_alloc_init(HKCodableQuantity);
        v25 = 24;
        goto LABEL_39;
      case 8u:
        v17 = objc_alloc_init(HKCodableQuantity);
        v25 = 56;
        goto LABEL_39;
      case 9u:
        v17 = objc_alloc_init(HKCodableQuantity);
        v25 = 40;
        goto LABEL_39;
      case 0xAu:
        v17 = objc_alloc_init(HKCodableQuantity);
        v25 = 72;
LABEL_39:
        objc_storeStrong((id *)(a1 + v25), v17);
        if (PBReaderPlaceMark() && (HKCodableQuantityReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_41:
          PBReaderRecallMark();

LABEL_42:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_60:

        return 0;
      case 0xBu:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        *(_BYTE *)(a1 + 92) |= 2u;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v28 = 0;
                goto LABEL_58;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v28 = 0;
LABEL_58:
        *(_BYTE *)(a1 + 88) = v28 != 0;
        goto LABEL_42;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_42;
    }
  }
}

void sub_1D7954C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSTStorageAppHeaderCellClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!StorageSettingsLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E9C42A38;
    v5 = 0;
    StorageSettingsLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!StorageSettingsLibraryCore_frameworkLibrary)
    __getSTStorageAppHeaderCellClass_block_invoke_cold_1(&v3);
  result = objc_getClass("STStorageAppHeaderCell");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getSTStorageAppHeaderCellClass_block_invoke_cold_2();
  getSTStorageAppHeaderCellClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t HKCodableHandwashingEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;
  HKCodableQuantity *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 52) |= 8u;
        v18 = *v3;
        v19 = *(_QWORD *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
          *(_QWORD *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v20 = 0;
        }
        v46 = 32;
        goto LABEL_68;
      case 2u:
        *(_BYTE *)(a1 + 52) |= 4u;
        v22 = *v3;
        v23 = *(_QWORD *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v20 = 0;
        }
        v46 = 24;
LABEL_68:
        *(_QWORD *)(a1 + v46) = v20;
        goto LABEL_69;
      case 3u:
        v24 = objc_alloc_init(HKCodableQuantity);
        objc_storeStrong((id *)(a1 + 40), v24);
        if (PBReaderPlaceMark() && (HKCodableQuantityReadFrom((uint64_t)v24, a2) & 1) != 0)
        {
          PBReaderRecallMark();

LABEL_69:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 4u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        *(_BYTE *)(a1 + 52) |= 2u;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          v30 = v29 + 1;
          if (v29 == -1 || v30 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v30;
            v27 |= (unint64_t)(v31 & 0x7F) << v25;
            if (v31 < 0)
            {
              v25 += 7;
              v15 = v26++ >= 9;
              if (v15)
              {
                v27 = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v27 = 0;
LABEL_54:
        v45 = 16;
        goto LABEL_59;
      case 5u:
        v32 = 0;
        v33 = 0;
        v27 = 0;
        *(_BYTE *)(a1 + 52) |= 1u;
        while (2)
        {
          v34 = *v3;
          v35 = *(_QWORD *)(a2 + v34);
          v36 = v35 + 1;
          if (v35 == -1 || v36 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
            *(_QWORD *)(a2 + v34) = v36;
            v27 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              v15 = v33++ >= 9;
              if (v15)
              {
                v27 = 0;
                goto LABEL_58;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v27 = 0;
LABEL_58:
        v45 = 8;
LABEL_59:
        *(_QWORD *)(a1 + v45) = v27;
        goto LABEL_69;
      case 6u:
        v38 = 0;
        v39 = 0;
        v40 = 0;
        *(_BYTE *)(a1 + 52) |= 0x10u;
        while (2)
        {
          v41 = *v3;
          v42 = *(_QWORD *)(a2 + v41);
          v43 = v42 + 1;
          if (v42 == -1 || v43 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
            *(_QWORD *)(a2 + v41) = v43;
            v40 |= (unint64_t)(v44 & 0x7F) << v38;
            if (v44 < 0)
            {
              v38 += 7;
              v15 = v39++ >= 9;
              if (v15)
              {
                v40 = 0;
                goto LABEL_63;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v40 = 0;
LABEL_63:
        *(_BYTE *)(a1 + 48) = v40 != 0;
        goto LABEL_69;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_69;
    }
  }
}

uint64_t HKCodableHealthRecordsLocalizedEducationContentSectionReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
            break;
          v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (v15)
          v16 = 1;
        else
          v16 = (v10 & 7) == 4;
        if (!v16)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v17 = 0;
              v18 = 0;
              v19 = 0;
              *(_BYTE *)(a1 + 56) |= 1u;
              break;
            case 2u:
              PBReaderReadString();
              v24 = objc_claimAutoreleasedReturnValue();
              v25 = 40;
              goto LABEL_30;
            case 3u:
              PBReaderReadString();
              v24 = objc_claimAutoreleasedReturnValue();
              v25 = 32;
LABEL_30:
              v26 = *(void **)(a1 + v25);
              *(_QWORD *)(a1 + v25) = v24;

              goto LABEL_42;
            case 4u:
              PBReaderReadString();
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              if (v27)
                objc_msgSend((id)a1, "addSectionValidRegionCodes:", v27);
              goto LABEL_37;
            case 5u:
              PBReaderReadString();
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              if (v27)
                objc_msgSend((id)a1, "addSectionAttributions:", v27);
              goto LABEL_37;
            case 6u:
              PBReaderReadString();
              v27 = (void *)objc_claimAutoreleasedReturnValue();
              if (v27)
                objc_msgSend((id)a1, "addSectionCitations:", v27);
LABEL_37:

              goto LABEL_42;
            default:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
LABEL_42:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_39;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_41;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_41:
          *(_QWORD *)(a1 + 8) = v19;
          goto LABEL_42;
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t OUTLINED_FUNCTION_0_9()
{
  return objc_opt_class();
}

uint64_t OUTLINED_FUNCTION_1_6()
{
  return NSRequestConcreteImplementation();
}

uint64_t HKCodableMenstrualCyclesProjectionReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  int *v8;
  int *v9;
  int *v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  int v19;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int *v30;
  int *v31;
  int *v32;
  HKCodableDayIndexRange *v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t result;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = &OBJC_IVAR___HKPopulationNormsGraphView__sexSegmentIndex;
  v8 = &OBJC_IVAR___HKPopulationNormsGraphView__sexSegmentIndex;
  v9 = (int *)MEMORY[0x1E0D82BB8];
  v10 = &OBJC_IVAR___HKPopulationNormsGraphView__sexSegmentIndex;
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    while (1)
    {
      v14 = *v3;
      v15 = *(_QWORD *)(a2 + v14);
      v16 = v15 + 1;
      if (v15 == -1 || v16 > *(_QWORD *)(a2 + *v4))
        break;
      v17 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v15);
      *(_QWORD *)(a2 + v14) = v16;
      v13 |= (unint64_t)(v17 & 0x7F) << v11;
      if ((v17 & 0x80) == 0)
        goto LABEL_12;
      v11 += 7;
      v18 = v12++ >= 9;
      if (v18)
      {
        v13 = 0;
        v19 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v19 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v13 = 0;
LABEL_14:
    if (v19 || (v13 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v13 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + v7[267]) |= 0x10u;
        v21 = *v3;
        v22 = *(_QWORD *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v9) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v23 = 0;
        }
        v56 = v8[268];
        goto LABEL_78;
      case 2u:
        *(_BYTE *)(a1 + v7[267]) |= 0x20u;
        v24 = *v3;
        v25 = *(_QWORD *)(a2 + v24);
        if (v25 <= 0xFFFFFFFFFFFFFFF7 && v25 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v9) + v25);
          *(_QWORD *)(a2 + v24) = v25 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v23 = 0;
        }
        v56 = v10[269];
        goto LABEL_78;
      case 3u:
        *(_BYTE *)(a1 + v7[267]) |= 2u;
        v26 = *v3;
        v27 = *(_QWORD *)(a2 + v26);
        if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v9) + v27);
          *(_QWORD *)(a2 + v26) = v27 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v23 = 0;
        }
        v56 = 16;
        goto LABEL_78;
      case 4u:
        *(_BYTE *)(a1 + v7[267]) |= 4u;
        v28 = *v3;
        v29 = *(_QWORD *)(a2 + v28);
        if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v9) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v23 = 0;
        }
        v56 = 24;
LABEL_78:
        *(_QWORD *)(a1 + v56) = v23;
        goto LABEL_79;
      case 5u:
        v30 = v10;
        v31 = v7;
        v32 = v8;
        v33 = objc_alloc_init(HKCodableDayIndexRange);
        objc_storeStrong((id *)(a1 + 56), v33);
        if (PBReaderPlaceMark() && HKCodableDayIndexRangeReadFrom((uint64_t)v33, a2))
        {
          PBReaderRecallMark();

          v8 = v32;
          v7 = v31;
          v10 = v30;
LABEL_79:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 6u:
        v34 = 0;
        v35 = 0;
        v36 = 0;
        *(_BYTE *)(a1 + v7[267]) |= 0x40u;
        while (2)
        {
          v37 = *v3;
          v38 = *(_QWORD *)(a2 + v37);
          v39 = v38 + 1;
          if (v38 == -1 || v39 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v40 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v38);
            *(_QWORD *)(a2 + v37) = v39;
            v36 |= (unint64_t)(v40 & 0x7F) << v34;
            if (v40 < 0)
            {
              v34 += 7;
              v18 = v35++ >= 9;
              if (v18)
              {
                v36 = 0;
                goto LABEL_60;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v36 = 0;
LABEL_60:
        *(_BYTE *)(a1 + 64) = v36 != 0;
        goto LABEL_79;
      case 8u:
        v42 = 0;
        v43 = 0;
        v44 = 0;
        *(_BYTE *)(a1 + v7[267]) |= 1u;
        while (2)
        {
          v45 = *v3;
          v46 = *(_QWORD *)(a2 + v45);
          v47 = v46 + 1;
          if (v46 == -1 || v47 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v48 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v46);
            *(_QWORD *)(a2 + v45) = v47;
            v44 |= (unint64_t)(v48 & 0x7F) << v42;
            if (v48 < 0)
            {
              v42 += 7;
              v18 = v43++ >= 9;
              if (v18)
              {
                v44 = 0;
                goto LABEL_64;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v44 = 0;
LABEL_64:
        v55 = 8;
        goto LABEL_69;
      case 0xAu:
        v49 = 0;
        v50 = 0;
        v44 = 0;
        *(_BYTE *)(a1 + v7[267]) |= 8u;
        while (2)
        {
          v51 = *v3;
          v52 = *(_QWORD *)(a2 + v51);
          v53 = v52 + 1;
          if (v52 == -1 || v53 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v54 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v52);
            *(_QWORD *)(a2 + v51) = v53;
            v44 |= (unint64_t)(v54 & 0x7F) << v49;
            if (v54 < 0)
            {
              v49 += 7;
              v18 = v50++ >= 9;
              if (v18)
              {
                v44 = 0;
                goto LABEL_68;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v44 = 0;
LABEL_68:
        v55 = 32;
LABEL_69:
        *(_QWORD *)(a1 + v55) = v44;
        goto LABEL_79;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_79;
    }
  }
}

void sub_1D795DF38(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1D795E3F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D795E4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1D795E544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1D795E600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

uint64_t HKCodableCellHeaderViewModelReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  HKCodableColorRepresentation *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  void *v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 48;
        goto LABEL_37;
      case 2u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 40;
        goto LABEL_37;
      case 3u:
        v21 = objc_alloc_init(HKCodableColorRepresentation);
        objc_storeStrong((id *)(a1 + 32), v21);
        if (PBReaderPlaceMark() && (HKCodableColorRepresentationReadFrom((uint64_t)v21, a2) & 1) != 0)
        {
          PBReaderRecallMark();

LABEL_55:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 4u:
        *(_BYTE *)(a1 + 60) |= 1u;
        v22 = *v3;
        v23 = *(_QWORD *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v24 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v24 = 0;
        }
        *(_QWORD *)(a1 + 8) = v24;
        goto LABEL_55;
      case 5u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        *(_BYTE *)(a1 + 60) |= 4u;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          v30 = v29 + 1;
          if (v29 == -1 || v30 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v30;
            v27 |= (unint64_t)(v31 & 0x7F) << v25;
            if (v31 < 0)
            {
              v25 += 7;
              v15 = v26++ >= 9;
              if (v15)
              {
                v27 = 0;
                goto LABEL_48;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v27 = 0;
LABEL_48:
        *(_BYTE *)(a1 + 56) = v27 != 0;
        goto LABEL_55;
      case 6u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 24;
LABEL_37:
        v32 = *(void **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;

        goto LABEL_55;
      case 7u:
        v33 = 0;
        v34 = 0;
        v35 = 0;
        *(_BYTE *)(a1 + 60) |= 2u;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          v38 = v37 + 1;
          if (v37 == -1 || v38 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v38;
            v35 |= (unint64_t)(v39 & 0x7F) << v33;
            if (v39 < 0)
            {
              v33 += 7;
              v15 = v34++ >= 9;
              if (v15)
              {
                v35 = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v35 = 0;
LABEL_52:
        *(_QWORD *)(a1 + 16) = v35;
        goto LABEL_55;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_55;
    }
  }
}

uint64_t HKCodableColorRepresentationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  void *v26;
  HKCodableRGBConfiguration *v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 16;
        goto LABEL_30;
      case 2u:
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 40) |= 1u;
        while (2)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              v14 = v21++ >= 9;
              if (v14)
              {
                v22 = 0;
                goto LABEL_37;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v22 = 0;
LABEL_37:
        *(_QWORD *)(a1 + 8) = v22;
        goto LABEL_38;
      case 3u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 32;
LABEL_30:
        v26 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_38;
      case 4u:
        v27 = objc_alloc_init(HKCodableRGBConfiguration);
        objc_storeStrong((id *)(a1 + 24), v27);
        if (PBReaderPlaceMark() && HKCodableRGBConfigurationReadFrom((uint64_t)v27, a2))
        {
          PBReaderRecallMark();

LABEL_38:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_38;
    }
  }
}

void sub_1D7962ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCNAvatarImageRendererClass_block_invoke(uint64_t a1)
{
  Class result;

  ContactsUILibrary();
  result = objc_getClass("CNAvatarImageRenderer");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getCNAvatarImageRendererClass_block_invoke_cold_1();
  getCNAvatarImageRendererClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void ContactsUILibrary()
{
  void *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = 0;
  if (!ContactsUILibraryCore_frameworkLibrary)
  {
    v1 = xmmword_1E9C42AF8;
    v2 = 0;
    ContactsUILibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!ContactsUILibraryCore_frameworkLibrary)
    ContactsUILibrary_cold_1(&v0);
}

Class __getCNAvatarImageRenderingScopeClass_block_invoke(uint64_t a1)
{
  Class result;

  ContactsUILibrary();
  result = objc_getClass("CNAvatarImageRenderingScope");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getCNAvatarImageRenderingScopeClass_block_invoke_cold_1();
  getCNAvatarImageRenderingScopeClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id HKOTAFactorPackID()
{
  void *v0;
  void *v1;
  void *v2;

  objc_msgSend(MEMORY[0x1E0DC09C8], "clientWithIdentifier:", 275);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "rolloutIdentifiersWithNamespaceName:", *MEMORY[0x1E0CB56B0]);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "factorPackId");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

uint64_t HKCodableSummaryCategoryValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        v25 = *v3;
        v26 = *(_QWORD *)(a2 + v25);
        if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v27 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v26);
          *(_QWORD *)(a2 + v25) = v26 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v27 = 0;
        }
        *(_QWORD *)(a1 + 16) = v27;
      }
      else if ((v10 >> 3) == 1)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          v23 = v22 + 1;
          if (v22 == -1 || v23 > *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v23;
          v20 |= (unint64_t)(v24 & 0x7F) << v18;
          if ((v24 & 0x80) == 0)
            goto LABEL_33;
          v18 += 7;
          v15 = v19++ >= 9;
          if (v15)
          {
            v20 = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_35:
        *(_QWORD *)(a1 + 8) = v20;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HKCodableSleepingSampleAggregateReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  unint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  HKCodableQuantity *v29;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 32) |= 1u;
        v26 = *v3;
        v27 = *(_QWORD *)(a2 + v26);
        if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v28 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v27);
          *(_QWORD *)(a2 + v26) = v27 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v28 = 0;
        }
        *(_QWORD *)(a1 + 8) = v28;
      }
      else if ((_DWORD)v18 == 2)
      {
        v29 = objc_alloc_init(HKCodableQuantity);
        objc_storeStrong((id *)(a1 + 24), v29);
        if (!PBReaderPlaceMark() || (HKCodableQuantityReadFrom((uint64_t)v29, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((_DWORD)v18 == 1)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 32) |= 2u;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          v24 = v23 + 1;
          if (v23 == -1 || v24 > *(_QWORD *)(a2 + *v4))
            break;
          v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v24;
          v21 |= (unint64_t)(v25 & 0x7F) << v19;
          if ((v25 & 0x80) == 0)
            goto LABEL_37;
          v19 += 7;
          v15 = v20++ >= 9;
          if (v15)
          {
            v21 = 0;
            goto LABEL_39;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_39:
        *(_QWORD *)(a1 + 16) = v21;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1D796EEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 224), 8);
  _Block_object_dispose((const void *)(v35 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t HKCodableStateOfMindDataSourceQueryDataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  HKCodableStateOfMindValenceDistributionSummary *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(HKCodableStateOfMindValenceDistributionSummary);
        objc_msgSend(a1, "addValenceDistributionSummary:", v17);
        if (!PBReaderPlaceMark()
          || !HKCodableStateOfMindValenceDistributionSummaryReadFrom((id *)&v17->super.super.isa, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1D7972D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, id a16)
{
  id *v16;
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a16);
  _Unwind_Resume(a1);
}

void sub_1D797501C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HKCodableMenstrualCyclesProjectionKindReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1D7977F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _WeekendDaysInCalendar(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "hk_weekendDays");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = *(_QWORD *)v9;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v1);
        objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * i), "unsignedIntegerValue");
        v4 |= HKSleepScheduleWeekdayFromWeekdayComponent();
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

id _TimeStringForDateComponents(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = a1;
  if (v1)
  {
    objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateFromComponents:", v1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    HKTimeFormatter();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "stringFromDate:", v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "localizedStringForKey:value:table:", CFSTR("SLEEP_SCHEDULE_NO_TIMES_TEXT"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable-Eucalyptus"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v5;
}

id _OverrideStringForCalendar(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  const __CFString *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v3 = a1;
  if (a2)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "hk_dateOnDayIndex:atHour:calendar:", objc_msgSend(a2, "integerValue"), 12, v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    HKLocalizedStringForDateAndTemplateWithFormattingContext(v4, 13, 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    switch(objc_msgSend(v3, "component:fromDate:", 512, v4))
    {
      case 1:
        v6 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = v7;
        v9 = CFSTR("SLEEP_SCHEDULE_SUNDAY_ONLY_%@");
        goto LABEL_12;
      case 2:
        v6 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = v7;
        v9 = CFSTR("SLEEP_SCHEDULE_MONDAY_ONLY_%@");
        goto LABEL_12;
      case 3:
        v6 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = v7;
        v9 = CFSTR("SLEEP_SCHEDULE_TUESDAY_ONLY_%@");
        goto LABEL_12;
      case 4:
        v6 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = v7;
        v9 = CFSTR("SLEEP_SCHEDULE_WEDNESDAY_ONLY_%@");
        goto LABEL_12;
      case 5:
        v6 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = v7;
        v9 = CFSTR("SLEEP_SCHEDULE_THURSDAY_ONLY_%@");
        goto LABEL_12;
      case 6:
        v6 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = v7;
        v9 = CFSTR("SLEEP_SCHEDULE_FRIDAY_ONLY_%@");
        goto LABEL_12;
      case 7:
        v6 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = v7;
        v9 = CFSTR("SLEEP_SCHEDULE_SATURDAY_ONLY_%@");
LABEL_12:
        objc_msgSend(v7, "localizedStringForKey:value:table:", v9, &stru_1E9C4C428, CFSTR("HealthUI-Localizable-Eucalyptus"));
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "stringWithFormat:", v15, v5);
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        break;
      default:
        objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString * _Nonnull _OverrideStringForCalendar(NSCalendar * _Nonnull __strong, NSNumber * _Nullable __strong)");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("HKSleepSchedule+HealthUI.m"), 67, CFSTR("Incompatible weekday component for override schedule"));

        objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "localizedStringForKey:value:table:", CFSTR("SLEEP_SCHEDULE_NO_TIMES_TEXT"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable-Eucalyptus"));
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        break;
    }

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSString * _Nonnull _OverrideStringForCalendar(NSCalendar * _Nonnull __strong, NSNumber * _Nullable __strong)");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("HKSleepSchedule+HealthUI.m"), 44, CFSTR("Can't create an override string without a day index"));

    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("SLEEP_SCHEDULE_NO_TIMES_TEXT"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable-Eucalyptus"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v12;
}

id _OrderedCalendarWeekdayComponents(void *a1)
{
  id v1;
  id v2;
  unint64_t v3;
  void *v4;
  unint64_t v5;
  void *v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;

  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = objc_msgSend(v1, "firstWeekday");
  objc_msgSend(v1, "weekdaySymbols");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "count");

  if (v3 <= v5)
  {
    do
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v3);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "addObject:", v6);

      ++v3;
      objc_msgSend(v1, "weekdaySymbols");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v7, "count");

    }
    while (v3 <= v8);
  }
  if ((unint64_t)objc_msgSend(v1, "firstWeekday") >= 2)
  {
    v9 = 1;
    do
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "addObject:", v10);

      ++v9;
    }
    while (v9 < objc_msgSend(v1, "firstWeekday"));
  }

  return v2;
}

void *HKIdentityAxisBoundsRuleBlockForRange(double a1, double a2)
{
  _QWORD v3[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __HKIdentityAxisBoundsRuleBlockForRange_block_invoke_2;
  v3[3] = &__block_descriptor_48_e19_B40__0d8d16_d24_d32l;
  *(double *)&v3[4] = a1;
  *(double *)&v3[5] = a2;
  return _Block_copy(v3);
}

uint64_t NSStringFromHKGraphSeriesDataBlockPath(_QWORD *a1)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("{zoom:%ld, index:%ld, resolution:%ld}"), a1[1], *a1, a1[2]);
}

id NSStringFromHKGraphSeriesDataPointPath(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("{zoom:%ld, index:%ld, resolution:%ld}"), a1[1], *a1, a1[2]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringWithFormat:", CFSTR("{%@, pointIndex:%ld}"), v3, a1[3]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

BOOL HKGraphSeriesDataBlockPathEqualToPath(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

BOOL HKGraphSeriesDataPointPathEqualToPath(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;

  if (a1[3] == a2[3] && (*a1 == *a2 ? (v2 = a1[1] == a2[1]) : (v2 = 0), v2))
    return a1[2] == a2[2];
  else
    return 0;
}

BOOL HKGraphSeriesDataPointPathRangeEqualToRange(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;
  BOOL v3;

  if (a1[3] != a2[3])
    return 0;
  v2 = *a1 == *a2 && a1[1] == a2[1];
  v3 = v2 && a1[2] == a2[2];
  if (!v3 || a1[7] != a2[7])
    return 0;
  return a1[4] == a2[4] && a1[5] == a2[5] && a1[6] == a2[6];
}

uint64_t HKGraphSeriesDataPointPathInRange(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  _BOOL4 v3;
  uint64_t v4;
  _BOOL4 v5;

  v2 = *a1;
  if (*a1 <= *a2)
    v3 = *a1 == *a2 && a1[3] > a2[3];
  else
    v3 = 1;
  v4 = a2[4];
  if (v2 >= v4)
    v5 = v2 == v4 && a1[3] < a2[7];
  else
    v5 = 1;
  return v3 & v5;
}

uint64_t HKGraphSeriesDataPointPathInRangeInclusive(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v16;
  int v17;
  _BOOL4 v19;
  int v20;

  v2 = *a1;
  v3 = a1[1];
  v5 = a1[2];
  v4 = a1[3];
  v6 = *a2;
  v7 = a2[3];
  if (v4 == v7)
  {
    v8 = v2 == v6 && v3 == a2[1];
    if (v8 && v5 == a2[2])
      return 1;
  }
  v10 = a2[7];
  if (v4 == v10)
  {
    v11 = a2[4];
    if (v2 != v11 || v3 != a2[5] || v5 != a2[6])
      goto LABEL_20;
    return 1;
  }
  v11 = a2[4];
LABEL_20:
  v16 = v2 == v6 && v4 > v7;
  v17 = v2 > v6 || v16;
  v19 = v2 == v11 && v4 < v10;
  v20 = v2 < v11 || v19;
  return v17 & v20;
}

uint64_t HKGraphSeriesDataBlockPathReferenceDate()
{
  return objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", 0.0);
}

id HKGraphSeriesDataBlockPathMinimumX(uint64_t *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  double v5;
  double v6;
  void *v7;

  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", 0.0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *a1;
  +[HKGraphZoomLevelConfiguration configurationForZoomLevel:](HKGraphZoomLevelConfiguration, "configurationForZoomLevel:", a1[1]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "seriesBlockSize");
  v6 = v5;

  objc_msgSend(v2, "dateByAddingTimeInterval:", v6 * (double)v3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

id HKGraphSeriesDataBlockPathMaximumX(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)a1 + 1;
  v3 = *(_OWORD *)(a1 + 8);
  HKGraphSeriesDataBlockPathMinimumX(&v2);
  return (id)objc_claimAutoreleasedReturnValue();
}

void HKGraphSeriesDataBlockPathContainingDate(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  void *v7;
  id v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  id v14;

  v7 = (void *)MEMORY[0x1E0C99D68];
  v8 = a1;
  objc_msgSend(v7, "dateWithTimeIntervalSinceReferenceDate:", 0.0);
  v14 = (id)objc_claimAutoreleasedReturnValue();
  +[HKGraphZoomLevelConfiguration configurationForZoomLevel:](HKGraphZoomLevelConfiguration, "configurationForZoomLevel:", a2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "seriesBlockSize");
  v11 = v10;

  objc_msgSend(v8, "timeIntervalSinceDate:", v14);
  v13 = v12;

  *a4 = vcvtmd_s64_f64(v13 / v11);
  a4[1] = a2;
  a4[2] = a3;

}

uint64_t HKSleepChartPointFormatterOptionsForSleepAnalysis(void *a1)
{
  id v1;
  void *v2;
  unsigned int v3;
  uint64_t v4;

  v1 = a1;
  v2 = v1;
  if (v1 && (v3 = objc_msgSend(v1, "intValue"), v3 <= 5))
    v4 = qword_1D7B81D40[v3];
  else
    v4 = 3;

  return v4;
}

void sub_1D798AA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D798B470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D798E2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getMKBGetDeviceLockStateSymbolLoc_block_invoke(uint64_t a1)
{
  void *result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!MobileKeyBagLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E9C432E0;
    v5 = 0;
    MobileKeyBagLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!MobileKeyBagLibraryCore_frameworkLibrary)
    __getMKBGetDeviceLockStateSymbolLoc_block_invoke_cold_1(&v3);
  result = dlsym((void *)MobileKeyBagLibraryCore_frameworkLibrary, "MKBGetDeviceLockState");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getMKBGetDeviceLockStateSymbolLoc_ptr = *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getBKDeviceClass_block_invoke(uint64_t a1)
{
  Class result;

  BiometricKitLibrary();
  result = objc_getClass("BKDevice");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getBKDeviceClass_block_invoke_cold_1();
  getBKDeviceClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void BiometricKitLibrary()
{
  void *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = 0;
  if (!BiometricKitLibraryCore_frameworkLibrary)
  {
    v1 = xmmword_1E9C432F8;
    v2 = 0;
    BiometricKitLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!BiometricKitLibraryCore_frameworkLibrary)
    BiometricKitLibrary_cold_1(&v0);
}

Class __getBKDeviceManagerClass_block_invoke(uint64_t a1)
{
  Class result;

  BiometricKitLibrary();
  result = objc_getClass("BKDeviceManager");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getBKDeviceManagerClass_block_invoke_cold_1();
  getBKDeviceManagerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void _RenderImageInRect(CGContext *a1, void *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  id v13;
  double v14;
  double v15;
  CGFloat MinX;
  CGFloat MaxY;
  uint64_t v18;
  __int128 v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGImage *v26;
  CGAffineTransform v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;

  v13 = a2;
  v28.origin.x = a3;
  v28.origin.y = a4;
  v28.size.width = a5;
  v28.size.height = a6;
  if (!CGRectIsEmpty(v28))
  {
    objc_msgSend(v13, "size");
    if (v15 > 0.0 && v14 > 0.0)
    {
      CGContextSaveGState(a1);
      CGContextSetAlpha(a1, a7);
      v29.origin.x = a3;
      v29.origin.y = a4;
      v29.size.width = a5;
      v29.size.height = a6;
      MinX = CGRectGetMinX(v29);
      v30.origin.x = a3;
      v30.origin.y = a4;
      v30.size.width = a5;
      v30.size.height = a6;
      MaxY = CGRectGetMaxY(v30);
      CGContextTranslateCTM(a1, MinX, MaxY);
      CGContextScaleCTM(a1, 1.0, -1.0);
      v18 = objc_msgSend(v13, "imageOrientation");
      if (a6 > 0.0 && a5 > 0.0 && v18)
      {
        v19 = xmmword_1D7B81D70;
        v20 = -1.0;
        v21 = 0.0;
        v22 = a6;
        v23 = a5;
        switch(v18)
        {
          case 1:
            break;
          case 2:
            v21 = a6 / a5;
            *((_QWORD *)&v19 + 1) = 0;
            *(double *)&v19 = -a5 / a6;
            v22 = 0.0;
            v23 = a5;
            goto LABEL_16;
          case 3:
            v21 = -a6 / a5;
            *((_QWORD *)&v19 + 1) = 0;
            *(double *)&v19 = a5 / a6;
            v23 = 0.0;
            v22 = a6;
            goto LABEL_16;
          case 4:
            v19 = xmmword_1D7B81D80;
            v22 = 0.0;
            goto LABEL_14;
          case 5:
            v20 = 1.0;
            v23 = 0.0;
            v22 = a6;
            break;
          case 6:
            v21 = -a6 / a5;
            *((_QWORD *)&v19 + 1) = 0;
            *(double *)&v19 = -a5 / a6;
            v20 = 0.0;
            v22 = a6;
LABEL_14:
            v23 = a5;
            break;
          case 7:
            v21 = a6 / a5;
            *((_QWORD *)&v19 + 1) = 0;
            *(double *)&v19 = a5 / a6;
            v22 = 0.0;
            v23 = 0.0;
LABEL_16:
            v20 = 0.0;
            break;
          default:
            v20 = *MEMORY[0x1E0C9BAA8];
            v21 = *(double *)(MEMORY[0x1E0C9BAA8] + 8);
            v19 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
            v23 = *(double *)(MEMORY[0x1E0C9BAA8] + 32);
            v22 = *(double *)(MEMORY[0x1E0C9BAA8] + 40);
            break;
        }
        v27.a = v20;
        v27.b = v21;
        *(_OWORD *)&v27.c = v19;
        v27.tx = v23;
        v27.ty = v22;
        CGContextConcatCTM(a1, &v27);
      }
      v24 = *MEMORY[0x1E0C9D538];
      v25 = *(double *)(MEMORY[0x1E0C9D538] + 8);
      v26 = (CGImage *)objc_msgSend(objc_retainAutorelease(v13), "CGImage");
      v31.origin.x = v24;
      v31.origin.y = v25;
      v31.size.width = a5;
      v31.size.height = a6;
      CGContextDrawImage(a1, v31, v26);
      CGContextRestoreGState(a1);
    }
  }

}

void sub_1D7994D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_2_4()
{
  return objc_opt_class();
}

void OUTLINED_FUNCTION_3_6(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_4_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void OUTLINED_FUNCTION_7_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x16u);
}

uint64_t HKCodableSleepingSampleBaselineComparisonReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  HKCodableSleepingSampleBaseline *v24;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 40) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_38;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_38:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_40:
        *(_QWORD *)(a1 + 8) = v19;
        goto LABEL_41;
      case 2u:
        v24 = objc_alloc_init(HKCodableSleepingSampleBaseline);
        objc_storeStrong((id *)(a1 + 32), v24);
        if (!PBReaderPlaceMark() || !HKCodableSleepingSampleBaselineReadFrom((uint64_t)v24, a2))
          goto LABEL_43;
        goto LABEL_36;
      case 3u:
        v24 = objc_alloc_init(HKCodableSleepingSampleAggregate);
        objc_storeStrong((id *)(a1 + 16), v24);
        if (!PBReaderPlaceMark() || (HKCodableSleepingSampleAggregateReadFrom((uint64_t)v24, a2) & 1) == 0)
          goto LABEL_43;
        goto LABEL_36;
      case 4u:
        v24 = objc_alloc_init(HKCodableSleepingSampleBaselineAvailability);
        objc_storeStrong((id *)(a1 + 24), v24);
        if (PBReaderPlaceMark()
          && (HKCodableSleepingSampleBaselineAvailabilityReadFrom((uint64_t)v24, a2) & 1) != 0)
        {
LABEL_36:
          PBReaderRecallMark();

LABEL_41:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_43:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_41;
    }
  }
}

void sub_1D7997124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t HKCodableActivitySummaryCollectionReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  HKCodableActivitySummaryEntry *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(HKCodableActivitySummaryEntry);
        objc_msgSend(a1, "addActivitySummaryEntry:", v17);
        if (!PBReaderPlaceMark() || (HKCodableActivitySummaryEntryReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id HKInteractiveChartInfographicTitleAttributes()
{
  void *v0;
  void *v1;
  void *v2;
  _QWORD v4[2];
  _QWORD v5[3];

  v5[2] = *MEMORY[0x1E0C80C00];
  v4[0] = *MEMORY[0x1E0DC1138];
  objc_msgSend(MEMORY[0x1E0DC1350], "_preferredFontForTextStyle:variant:", *MEMORY[0x1E0DC4B58], 1024);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = v0;
  v4[1] = *MEMORY[0x1E0DC1140];
  objc_msgSend(MEMORY[0x1E0DC3658], "hk_chartLollipopValueColor");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v5[1] = v1;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v5, v4, 2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id HKInteractiveChartInfographicTableTitleAttributes()
{
  void *v0;
  void *v1;
  void *v2;
  _QWORD v4[2];
  _QWORD v5[3];

  v5[2] = *MEMORY[0x1E0C80C00];
  v4[0] = *MEMORY[0x1E0DC1138];
  objc_msgSend(MEMORY[0x1E0DC1350], "_preferredFontForTextStyle:variant:", *MEMORY[0x1E0DC4A88], 1024);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = v0;
  v4[1] = *MEMORY[0x1E0DC1140];
  objc_msgSend(MEMORY[0x1E0DC3658], "hk_chartLollipopValueColor");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v5[1] = v1;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v5, v4, 2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id HKInteractiveChartInfographicFootnoteAttributes()
{
  void *v0;
  void *v1;
  void *v2;
  _QWORD v4[2];
  _QWORD v5[3];

  v5[2] = *MEMORY[0x1E0C80C00];
  v4[0] = *MEMORY[0x1E0DC1138];
  objc_msgSend(MEMORY[0x1E0DC1350], "preferredFontForTextStyle:", *MEMORY[0x1E0DC4AB8]);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = v0;
  v4[1] = *MEMORY[0x1E0DC1140];
  objc_msgSend(MEMORY[0x1E0DC3658], "secondaryLabelColor");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v5[1] = v1;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v5, v4, 2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_1D7999D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D799AD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  char a65;
  char a71;
  uint64_t v71;

  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&a65, 8);
  _Block_object_dispose(&a71, 8);
  _Block_object_dispose(&STACK[0x220], 8);
  _Block_object_dispose((const void *)(v71 - 256), 8);
  _Unwind_Resume(a1);
}

void sub_1D799E100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D79A1B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D79A294C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1D79A3CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D79A52F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

const __CFString *HKStringForChartDataSourceQueryRequestAudience(uint64_t a1)
{
  if (a1)
    return CFSTR("sharing");
  else
    return CFSTR("primary");
}

void sub_1D79ABDBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _DateForDescription(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = _DateForDescription_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&_DateForDescription_onceToken, &__block_literal_global_56);
  objc_msgSend((id)_DateForDescription_dateFormatter, "stringFromDate:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

uint64_t HKCodableSleepPeriodSegmentReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  HKCodableDateInterval *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 32) |= 1u;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0)
            goto LABEL_36;
          v19 += 7;
          v14 = v20++ >= 9;
          if (v14)
          {
            v21 = 0;
            goto LABEL_38;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_36:
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_38:
        *(_QWORD *)(a1 + 8) = v21;
      }
      else
      {
        if ((_DWORD)v17 == 2)
        {
          v18 = objc_alloc_init(HKCodableDateInterval);
          objc_msgSend((id)a1, "addSampleInterval:", v18);
        }
        else
        {
          if ((_DWORD)v17 != 1)
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          v18 = objc_alloc_init(HKCodableDateInterval);
          objc_storeStrong((id *)(a1 + 16), v18);
        }
        if (!PBReaderPlaceMark() || !HKCodableDateIntervalReadFrom((uint64_t)v18, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1D79B06AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_10(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

id HKUILocalizedWorkoutTypeName()
{
  void *v0;
  void *v1;
  void *v2;

  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  _HKWorkoutActivityNameForActivityType();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "localizedStringForKey:value:table:", v1, &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_1D79B6B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL HKCodableSummarySleepDurationValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int *v26;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 32) |= 2u;
        v22 = *v3;
        v23 = *(_QWORD *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v21 = 0;
        }
        v26 = &OBJC_IVAR___HKCodableSummarySleepDurationValue__endOfSleepTimeIntervalSinceReferenceDate;
        goto LABEL_38;
      }
      if ((_DWORD)v18 == 2)
        break;
      if ((_DWORD)v18 == 1)
      {
        *(_BYTE *)(a1 + 32) |= 4u;
        v19 = *v3;
        v20 = *(_QWORD *)(a2 + v19);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v20);
          *(_QWORD *)(a2 + v19) = v20 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v21 = 0;
        }
        v26 = &OBJC_IVAR___HKCodableSummarySleepDurationValue__inBedDuration;
LABEL_38:
        *(_QWORD *)(a1 + *v26) = v21;
        goto LABEL_39;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_39:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    *(_BYTE *)(a1 + 32) |= 1u;
    v24 = *v3;
    v25 = *(_QWORD *)(a2 + v24);
    if (v25 <= 0xFFFFFFFFFFFFFFF7 && v25 + 8 <= *(_QWORD *)(a2 + *v4))
    {
      v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v25);
      *(_QWORD *)(a2 + v24) = v25 + 8;
    }
    else
    {
      *(_BYTE *)(a2 + *v5) = 1;
      v21 = 0;
    }
    v26 = &OBJC_IVAR___HKCodableSummarySleepDurationValue__asleepDuration;
    goto LABEL_38;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HKHealthPrivacyServiceRemoteRecalibrateEstimatesViewControllerInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1F0248DA0);
}

BOOL HKCodableChartFeedItemDataReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  HKCodableChartSharableModel *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(HKCodableChartSharableModel);
        objc_storeStrong(a1 + 1, v17);
        if (!PBReaderPlaceMark() || (HKCodableChartSharableModelReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(HKCodableSummaryTrendChartViewModel);
    objc_msgSend(a1, "addTrends:", v17);
    if (!PBReaderPlaceMark() || (HKCodableSummaryTrendChartViewModelReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL HKCodableChartTimePeriodSeriesDataSourceDataReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  HKCodableTimePeriodData *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        v18 = objc_alloc_init(HKCodableTimePeriodData);
        objc_msgSend(a1, "addDateIntervalsToTotals:", v18);
        goto LABEL_26;
      }
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(HKCodableDateComponents);
        objc_storeStrong(a1 + 3, v18);
        if (!PBReaderPlaceMark() || (HKCodableDateComponentsReadFrom((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_33;
LABEL_28:
        PBReaderRecallMark();

        goto LABEL_30;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_30:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(HKCodableTimePeriodData);
    objc_msgSend(a1, "addIntervalCounts:", v18);
LABEL_26:
    if (!PBReaderPlaceMark() || (HKCodableTimePeriodDataReadFrom((uint64_t)v18, a2) & 1) == 0)
    {
LABEL_33:

      return 0;
    }
    goto LABEL_28;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id RevealObfuscatedStringWithSalt(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t i;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  char *v17;
  char v18;
  void *v19;
  unsigned __int8 md[20];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(v3, "dataUsingEncoding:", 4);
  v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  CC_SHA1((const void *)objc_msgSend(v4, "bytes"), objc_msgSend(v4, "length"), md);
  objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithCapacity:", 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = 0; i != 20; ++i)
    objc_msgSend(v5, "appendFormat:", CFSTR("%02x"), md[i]);
  v7 = (void *)objc_msgSend(v5, "copy");

  v8 = v7;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%s"), a1);
  objc_msgSend(v9, "dataUsingEncoding:", 4);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = objc_retainAutorelease(v10);
  v12 = objc_msgSend(v11, "bytes");
  objc_msgSend(v8, "dataUsingEncoding:", 4);
  v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v14 = objc_msgSend(v13, "bytes");

  if (objc_msgSend(v11, "length"))
  {
    v15 = 0;
    v16 = 0;
    v17 = (char *)v14;
    do
    {
      v18 = *v17++;
      *(_BYTE *)(v12 + v15) ^= v18;
      if (objc_msgSend(v8, "length") == v16 + 1)
      {
        v17 = (char *)v14;
        v16 = 0;
      }
      else
      {
        ++v16;
      }
      ++v15;
    }
    while (objc_msgSend(v11, "length") > v15);
  }
  v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithData:encoding:", v11, 4);

  return v19;
}

void sub_1D79BF938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D79BFAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D79BFBB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D79C0FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D79C1440(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t HKCodableQuantityDistributionDataReadFrom(_BYTE *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  HKCodableQuantity *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t result;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v16 = *v5;
        v17 = *(unsigned __int8 *)(a2 + v16);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *v5;
    v17 = *(unsigned __int8 *)(a2 + v16);
    if (*(_BYTE *)(a2 + v16))
      v10 = 0;
LABEL_14:
    v18 = v10 & 7;
    if (v17 || v18 == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        a1[96] |= 2u;
        v20 = *v3;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v22 = 0;
        }
        v34 = 40;
        goto LABEL_55;
      case 2u:
        a1[96] |= 1u;
        v25 = *v3;
        v26 = *(_QWORD *)(a2 + v25);
        if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v26);
          *(_QWORD *)(a2 + v25) = v26 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v22 = 0;
        }
        v34 = 32;
LABEL_55:
        *(_QWORD *)&a1[v34] = v22;
        goto LABEL_56;
      case 3u:
        v23 = objc_alloc_init(HKCodableQuantity);
        v24 = 80;
        goto LABEL_32;
      case 4u:
        v23 = objc_alloc_init(HKCodableQuantity);
        v24 = 88;
        goto LABEL_32;
      case 5u:
        v23 = objc_alloc_init(HKCodableQuantity);
        v24 = 72;
        goto LABEL_32;
      case 6u:
        v23 = objc_alloc_init(HKCodableQuantity);
        v24 = 48;
        goto LABEL_32;
      case 7u:
        v23 = objc_alloc_init(HKCodableQuantity);
        v24 = 64;
LABEL_32:
        objc_storeStrong((id *)&a1[v24], v23);
        if (PBReaderPlaceMark() && (HKCodableQuantityReadFrom((uint64_t)v23, a2) & 1) != 0)
        {
          PBReaderRecallMark();
LABEL_35:

LABEL_56:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 8u:
        if (v18 == 2)
        {
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (1)
          {
            v28 = (unint64_t *)(a2 + *v3);
            v29 = *v28;
            v30 = *(_QWORD *)(a2 + *v4);
            if (*v28 >= v30)
              break;
            v31 = *v5;
            if (*(_BYTE *)(a2 + v31))
              break;
            if (v29 > 0xFFFFFFFFFFFFFFF7 || v29 + 8 > v30)
              *(_BYTE *)(a2 + v31) = 1;
            else
              *v28 = v29 + 8;
            PBRepeatedDoubleAdd();
          }
          PBReaderRecallMark();
        }
        else
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          if (v33 <= 0xFFFFFFFFFFFFFFF7 && v33 + 8 <= *(_QWORD *)(a2 + *v4))
            *(_QWORD *)(a2 + v32) = v33 + 8;
          else
            *(_BYTE *)(a2 + v16) = 1;
          PBRepeatedDoubleAdd();
        }
        goto LABEL_56;
      case 9u:
        PBReaderReadString();
        v23 = (HKCodableQuantity *)objc_claimAutoreleasedReturnValue();
        if (v23)
          objc_msgSend(a1, "addContextIdentifiers:", v23);
        goto LABEL_35;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_56;
    }
  }
}

void sub_1D79C7D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D79C8190(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1D79C82F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1D79C894C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_3_8()
{
  return objc_opt_class();
}

BOOL HKCodableSummaryTimePeriodValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int *v23;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        v18 = *v3;
        v19 = *(_QWORD *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
          *(_QWORD *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v20 = 0;
        }
        v23 = &OBJC_IVAR___HKCodableSummaryTimePeriodValue__timeInterval;
LABEL_32:
        *(_QWORD *)(a1 + *v23) = v20;
        goto LABEL_33;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_33:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    *(_BYTE *)(a1 + 24) |= 1u;
    v21 = *v3;
    v22 = *(_QWORD *)(a2 + v21);
    if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
    {
      v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v22);
      *(_QWORD *)(a2 + v21) = v22 + 8;
    }
    else
    {
      *(_BYTE *)(a2 + *v5) = 1;
      v20 = 0;
    }
    v23 = &OBJC_IVAR___HKCodableSummaryTimePeriodValue__dateData;
    goto LABEL_32;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

HKSampleTypeCountDataSource *HKInteractiveChartDataSourceCount(void *a1, void *a2)
{
  id v3;
  id v4;
  HKSampleTypeCountDataSource *v5;

  v3 = a2;
  v4 = a1;
  v5 = -[HKHealthQueryChartCacheDataSource initWithDisplayType:healthStore:]([HKSampleTypeCountDataSource alloc], "initWithDisplayType:healthStore:", v4, v3);

  -[HKSampleTypeCountDataSource setUserInfoCreationBlock:](v5, "setUserInfoCreationBlock:", &__block_literal_global_61);
  return v5;
}

HKSingleDailyValueQuantityTypeDataSource *HKInteractiveChartDataSourceQuantityType(void *a1, void *a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  int v25;
  HKSingleDailyValueQuantityTypeDataSource *v26;
  HKQuantityTypeDataSource *v27;
  uint64_t v29;
  uint64_t v30;
  HKInteractiveChartSinglePointData *(*v31)(uint64_t, void *);
  void *v32;
  id v33;
  id v34;

  v11 = a1;
  v12 = a4;
  v13 = a5;
  v14 = a6;
  v15 = a2;
  objc_msgSend(v11, "presentation");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "configurationForTimeScope:", a3);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  v18 = objc_msgSend(v15, "aggregationStyle");
  if (!v18)
  {
    v20 = 16;
    v21 = v11;
    v22 = v13;
    v23 = v11;
    v24 = 16;
LABEL_8:
    objc_msgSend(v21, "_singleValueUserInfoBlockWithUnitController:displayType:statisticsOption:", v22, v23, v24);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_9;
  }
  if (objc_msgSend(v17, "detailChart") != 1)
  {
    if (objc_msgSend(v17, "detailChart") == 2)
    {
      v20 = 4;
      v21 = v11;
      v22 = v13;
      v23 = v11;
      v24 = 4;
    }
    else
    {
      v20 = 2;
      v21 = v11;
      v22 = v13;
      v23 = v11;
      v24 = 2;
    }
    goto LABEL_8;
  }
  v29 = MEMORY[0x1E0C809B0];
  v30 = 3221225472;
  v31 = __HKInteractiveChartDataSourceQuantityType_block_invoke;
  v32 = &unk_1E9C40520;
  v33 = v13;
  v34 = v11;
  v19 = _Block_copy(&v29);

  v20 = 12;
LABEL_9:
  v25 = objc_msgSend(v17, "singleDailyValue", v29, v30, v31, v32);
  if ((a3 & 0xFFFFFFFFFFFFFFFELL) == 6 && v25)
  {
    v26 = -[HKQuantityTypeDataSource initWithUnitController:options:displayType:healthStore:]([HKSingleDailyValueQuantityTypeDataSource alloc], "initWithUnitController:options:displayType:healthStore:", v13, v20, v11, v12);
  }
  else
  {
    v27 = -[HKQuantityTypeDataSource initWithUnitController:options:displayType:healthStore:]([HKQuantityTypeDataSource alloc], "initWithUnitController:options:displayType:healthStore:", v13, v20, v11, v12);
    v26 = (HKSingleDailyValueQuantityTypeDataSource *)v27;
    if (v14)
      -[HKQuantityTypeDataSource setPreprocessingHandler:](v27, "setPreprocessingHandler:", v14);
  }
  -[HKQuantityTypeDataSource setUserInfoCreationBlock:](v26, "setUserInfoCreationBlock:", v19);

  return v26;
}

id HKInteractiveChartDataSourceChartStyle(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = a1;
  v8 = a3;
  v9 = a4;
  objc_msgSend(v7, "chartingRules");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "chartStyleForTimeScope:", a2);

  switch(v11)
  {
    case 1:
    case 2:
    case 3:
    case 9:
      _HKInitializeLogging();
      v12 = (void *)*MEMORY[0x1E0CB5378];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CB5378], OS_LOG_TYPE_ERROR))
        HKInteractiveChartDataSourceChartStyle_cold_1(v12, v7, (uint64_t)a2);
      a2 = 0;
      break;
    case 4:
      objc_msgSend(v7, "objectType");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      HKInteractiveChartDataSourceTimePeriod(v7, v13, (uint64_t)a2, v8);
      v15 = objc_claimAutoreleasedReturnValue();
      goto LABEL_9;
    case 5:
    case 6:
      objc_msgSend(v7, "objectType");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      HKInteractiveChartDataSourceStackedCategoryValue(v7, v13, v14, v8);
      v15 = objc_claimAutoreleasedReturnValue();
      goto LABEL_9;
    case 7:
      objc_msgSend(v7, "objectType");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      HKInteractiveChartDataSourceSingleCenteredLine(v7, v13, v16, v8);
      v15 = objc_claimAutoreleasedReturnValue();
      goto LABEL_9;
    case 8:
      objc_msgSend(v7, "objectType");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      HKInteractiveChartDataSourceLevelCategoryValue(v7, v13, v17, v8);
      v15 = objc_claimAutoreleasedReturnValue();
LABEL_9:
      a2 = (void *)v15;

      break;
    default:
      break;
  }

  return a2;
}

HKTimePeriodSeriesDataSource *HKInteractiveChartDataSourceTimePeriod(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  HKTimePeriodSeriesDataSource *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  _QWORD v18[4];
  id v19;

  v7 = a1;
  v8 = a4;
  v9 = a2;
  v10 = -[HKHealthQueryChartCacheDataSource initWithDisplayType:healthStore:]([HKTimePeriodSeriesDataSource alloc], "initWithDisplayType:healthStore:", v7, v8);

  -[HKTimePeriodSeriesDataSource setSampleType:](v10, "setSampleType:", v9);
  objc_msgSend(v7, "chartingPredicateForTimeScope:", a3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKTimePeriodSeriesDataSource setQueryPredicate:](v10, "setQueryPredicate:", v11);

  v12 = v7;
  if (objc_msgSend(v12, "displayTypeIdentifier") == 63)
  {
    objc_msgSend(v12, "hk_enumeratedValueLabels");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", _HKCategoryValueSleepAnalysisDefaultAsleepValue());
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "objectForKeyedSubscript:", v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v15 = 0;
  }

  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = __HKInteractiveChartDataSourceTimePeriod_block_invoke;
  v18[3] = &unk_1E9C43FD0;
  v19 = v15;
  v16 = v15;
  -[HKTimePeriodSeriesDataSource setUserInfoCreationBlock:](v10, "setUserInfoCreationBlock:", v18);

  return v10;
}

HKHorizontalTimePeriodDataSource *HKInteractiveChartDataSourceStackedCategoryValue(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  HKHorizontalTimePeriodDataSource *v9;
  void *v10;

  v6 = a4;
  v7 = a2;
  v8 = a1;
  v9 = -[HKHealthQueryChartCacheDataSource initWithDisplayType:healthStore:]([HKHorizontalTimePeriodDataSource alloc], "initWithDisplayType:healthStore:", v8, v6);

  -[HKHorizontalTimePeriodDataSource setSampleType:](v9, "setSampleType:", v7);
  objc_msgSend(v8, "hk_valueOrderForStackedCharts");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  -[HKHorizontalTimePeriodDataSource setValueOrder:](v9, "setValueOrder:", v10);
  -[HKHorizontalTimePeriodDataSource setUserInfoCreationBlock:](v9, "setUserInfoCreationBlock:", &__block_literal_global_217);
  return v9;
}

HKHorizontalSingleLineDataSource *HKInteractiveChartDataSourceSingleCenteredLine(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  HKHorizontalSingleLineDataSource *v9;

  v6 = a4;
  v7 = a2;
  v8 = a1;
  v9 = -[HKHealthQueryChartCacheDataSource initWithDisplayType:healthStore:]([HKHorizontalSingleLineDataSource alloc], "initWithDisplayType:healthStore:", v8, v6);

  -[HKHorizontalSingleLineDataSource setUserInfoCreationBlock:](v9, "setUserInfoCreationBlock:", &__block_literal_global_214);
  -[HKHorizontalSingleLineDataSource setSampleType:](v9, "setSampleType:", v7);

  return v9;
}

HKLevelCategoryDataSource *HKInteractiveChartDataSourceLevelCategoryValue(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  HKLevelCategoryDataSource *v9;
  void *v10;

  v6 = a4;
  v7 = a2;
  v8 = a1;
  v9 = -[HKHealthQueryChartCacheDataSource initWithDisplayType:healthStore:]([HKLevelCategoryDataSource alloc], "initWithDisplayType:healthStore:", v8, v6);

  objc_msgSend(v8, "hk_valueOrderForStackedCharts");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  -[HKLevelCategoryDataSource setValueOrder:](v9, "setValueOrder:", v10);
  -[HKLevelCategoryDataSource setSampleType:](v9, "setSampleType:", v7);

  -[HKLevelCategoryDataSource setUserInfoCreationBlock:](v9, "setUserInfoCreationBlock:", &__block_literal_global_210);
  return v9;
}

HKJulianIndexedSevenDayQuantityDataSource *HKInteractiveChartDataSourceForAfibBurden(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  HKJulianIndexedSevenDayQuantityDataSource *v10;
  void *v11;
  HKJulianIndexedSevenDayQuantityDataSource *v12;
  _QWORD v14[4];
  id v15;
  id v16;

  v7 = a1;
  v8 = a4;
  v9 = a3;
  v10 = [HKJulianIndexedSevenDayQuantityDataSource alloc];
  objc_msgSend(v7, "objectType");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (a2 == 3)
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __HKInteractiveChartDataSourceForAfibBurden_block_invoke;
    v14[3] = &unk_1E9C43FF8;
    v15 = v8;
    v16 = v7;
    v12 = -[HKJulianIndexedSevenDayQuantityDataSource initWithDisplayType:healthStore:quantityType:unitController:singlePointUserInfoCreationBlock:](v10, "initWithDisplayType:healthStore:quantityType:unitController:singlePointUserInfoCreationBlock:", v16, v9, v11, v15, v14);

  }
  else
  {
    v12 = -[HKJulianIndexedSevenDayQuantityDataSource initWithDisplayType:healthStore:quantityType:unitController:intervalUserInfoCreationBlock:](v10, "initWithDisplayType:healthStore:quantityType:unitController:intervalUserInfoCreationBlock:", v7, v9, v11, v8, &__block_literal_global_225);

  }
  return v12;
}

id HKInteractiveChartDataSourceForAppleWalkingSteadiness(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;

  v7 = a4;
  v8 = a3;
  v9 = a1;
  objc_msgSend(v9, "objectType");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKMobilityUtilities generateAppleWalkingSteadinessDataSourceForTimeScope:displayType:healthStore:quantityType:unitController:](HKMobilityUtilities, "generateAppleWalkingSteadinessDataSourceForTimeScope:displayType:healthStore:quantityType:unitController:", a2, v9, v8, v10, v7);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

id HKInteractiveChartDataSourceForAudioLevel(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;

  v5 = a3;
  v6 = a2;
  v7 = a1;
  objc_msgSend(v7, "objectType");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "identifier");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "_audioLevelDataSourceForTypeIdentifier:withHealthStore:attenuatesExposureData:unitController:", v9, v6, 1, v5);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

HKBalanceChartDataSource *HKInteractiveChartDataSourceForBalance(void *a1, void *a2)
{
  id v3;
  id v4;
  HKBalanceChartDataSource *v5;

  v3 = a2;
  v4 = a1;
  v5 = -[HKBalanceChartDataSource initWithDisplayType:healthStore:]([HKBalanceChartDataSource alloc], "initWithDisplayType:healthStore:", v4, v3);

  return v5;
}

HKBloodPressureDataSource *HKInteractiveChartDataSourceForBloodPressure(void *a1, void *a2)
{
  void *v3;
  id v4;
  id v5;
  void *v6;
  HKBloodPressureDataSource *v7;
  id v8;
  _QWORD v10[4];
  id v11;

  v3 = (void *)MEMORY[0x1E0CB6CD0];
  v4 = a2;
  v5 = a1;
  objc_msgSend(v3, "unitFromString:", CFSTR("mmHg"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = -[HKHealthQueryChartCacheDataSource initWithDisplayType:healthStore:]([HKBloodPressureDataSource alloc], "initWithDisplayType:healthStore:", v5, v4);

  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __HKInteractiveChartDataSourceForBloodPressure_block_invoke;
  v10[3] = &unk_1E9C44060;
  v11 = v6;
  v8 = v6;
  -[HKBloodPressureDataSource setUserInfoCreationBlock:](v7, "setUserInfoCreationBlock:", v10);

  return v7;
}

HKHandwashingEventDataSource *HKInteractiveChartDataSourceForHandwashingEvent(void *a1, void *a2)
{
  id v3;
  id v4;
  HKHandwashingEventDataSource *v5;

  v3 = a2;
  v4 = a1;
  v5 = -[HKHandwashingEventDataSource initWithDisplayType:healthStore:]([HKHandwashingEventDataSource alloc], "initWithDisplayType:healthStore:", v4, v3);

  return v5;
}

HKInsulinDataSource *HKInteractiveChartDataSourceForInsulinDelivery(void *a1, void *a2)
{
  id v3;
  id v4;
  HKInsulinDataSource *v5;

  v3 = a2;
  v4 = a1;
  v5 = -[HKHealthQueryChartCacheDataSource initWithDisplayType:healthStore:]([HKInsulinDataSource alloc], "initWithDisplayType:healthStore:", v4, v3);

  -[HKInsulinDataSource setUserInfoCreationBlock:](v5, "setUserInfoCreationBlock:", &__block_literal_global_239);
  return v5;
}

HKLevelCategoryDataSource *HKInteractiveChartDataSourceForMenstruation(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  HKLevelCategoryDataSource *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v5 = a1;
  v6 = a3;
  objc_msgSend(v5, "chartingRules");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "chartStyleForTimeScope:", a2);

  if (v8 == 8)
  {
    v9 = -[HKHealthQueryChartCacheDataSource initWithDisplayType:healthStore:]([HKLevelCategoryDataSource alloc], "initWithDisplayType:healthStore:", v5, v6);
    objc_msgSend(v5, "hk_valueOrderForStackedCharts");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[HKLevelCategoryDataSource setValueOrder:](v9, "setValueOrder:", v11);

    objc_msgSend(v5, "objectType");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[HKLevelCategoryDataSource setSampleType:](v9, "setSampleType:", v12);

    -[HKLevelCategoryDataSource setPointStyleBlock:](v9, "setPointStyleBlock:", &__block_literal_global_245_0);
    -[HKLevelCategoryDataSource setUserInfoCreationBlock:](v9, "setUserInfoCreationBlock:", &__block_literal_global_246_0);
  }
  else if (v8 == 7)
  {
    v9 = -[HKHealthQueryChartCacheDataSource initWithDisplayType:healthStore:]([HKHorizontalSingleLineDataSourceMenstruation alloc], "initWithDisplayType:healthStore:", v5, v6);
    -[HKLevelCategoryDataSource setUserInfoCreationBlock:](v9, "setUserInfoCreationBlock:", &__block_literal_global_242_0);
    objc_msgSend(v5, "objectType");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[HKLevelCategoryDataSource setSampleType:](v9, "setSampleType:", v10);

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "HKHealthQueryChartCacheDataSource * _Nonnull HKInteractiveChartDataSourceForMenstruation(HKDisplayType * _Nonnull __strong, HKTimeScope, HKHealthStore * _Nonnull __strong, HKUnitPreferenceController * _Nonnull __strong)");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("HKDisplayType+DataSources.m"), 586, CFSTR("Unsupported chart sylte for menstruation; expected single centered line or level category value but got %ld"),
      v8);

    v9 = 0;
  }

  return v9;
}

HKScoredAssessmentDataSource *HKInteractiveChartDataSourceForScoredAssessment(void *a1, void *a2)
{
  id v3;
  id v4;
  HKScoredAssessmentDataSource *v5;
  void *v6;
  void *v7;

  v3 = a2;
  v4 = a1;
  v5 = -[HKHealthQueryChartCacheDataSource initWithDisplayType:healthStore:]([HKScoredAssessmentDataSource alloc], "initWithDisplayType:healthStore:", v4, v3);

  objc_msgSend(v4, "objectType");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKLevelCategoryDataSource setSampleType:](v5, "setSampleType:", v6);

  objc_msgSend(v4, "hk_valueOrderForStackedCharts");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  -[HKLevelCategoryDataSource setValueOrder:](v5, "setValueOrder:", v7);
  -[HKLevelCategoryDataSource setUserInfoCreationBlock:](v5, "setUserInfoCreationBlock:", &__block_literal_global_251);
  return v5;
}

id HKInteractiveChartDataSourceForSleepingWristTemperature(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  __objc2_class **v11;
  void *v12;
  id v13;
  id v14;
  _QWORD v16[4];
  id v17;
  id v18;

  v7 = a1;
  v8 = a4;
  v9 = a3;
  v10 = _HKStatisticsOptionBaselineRelativeQuantities();
  v11 = off_1E9C3D7A8;
  if (a2 != 6)
    v11 = off_1E9C3D6A8;
  v12 = (void *)objc_msgSend(objc_alloc(*v11), "initWithUnitController:options:displayType:healthStore:", v8, v10 | 0xE, v7, v9);

  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __HKInteractiveChartDataSourceForSleepingWristTemperature_block_invoke;
  v16[3] = &unk_1E9C40520;
  v17 = v8;
  v18 = v7;
  v13 = v7;
  v14 = v8;
  objc_msgSend(v12, "setUserInfoCreationBlock:", v16);

  return v12;
}

HKStateOfMindChartDataSource *HKInteractiveChartDataSourceForStateOfMind(void *a1, void *a2)
{
  id v3;
  id v4;
  HKStateOfMindChartDataSource *v5;

  v3 = a2;
  v4 = a1;
  v5 = -[HKStateOfMindChartDataSource initWithDisplayType:healthStore:overlayPredicate:]([HKStateOfMindChartDataSource alloc], "initWithDisplayType:healthStore:overlayPredicate:", v4, v3, 0);

  return v5;
}

HKHorizontalTimePeriodDataSource *HKInteractiveChartDataSourceForWorkouts(void *a1, void *a2)
{
  id v3;
  id v4;
  HKHorizontalTimePeriodDataSource *v5;
  void *v6;

  v3 = a2;
  v4 = a1;
  v5 = -[HKHealthQueryChartCacheDataSource initWithDisplayType:healthStore:]([HKHorizontalTimePeriodDataSource alloc], "initWithDisplayType:healthStore:", v4, v3);

  objc_msgSend(MEMORY[0x1E0CB6978], "workoutType");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKHorizontalTimePeriodDataSource setSampleType:](v5, "setSampleType:", v6);

  -[HKHorizontalTimePeriodDataSource setUserInfoCreationBlock:](v5, "setUserInfoCreationBlock:", &__block_literal_global_255);
  return v5;
}

id HKPreprocessingHandlerForUnderwaterDepth(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  _QWORD v9[4];
  id v10;
  id v11;

  v3 = a1;
  v4 = a2;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __HKPreprocessingHandlerForUnderwaterDepth_block_invoke;
  v9[3] = &unk_1E9C441D8;
  v10 = v3;
  v11 = v4;
  v5 = v4;
  v6 = v3;
  v7 = _Block_copy(v9);

  return v7;
}

void sub_1D79CC028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D79CDCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  char a67;
  char a71;
  uint64_t v71;

  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&a67, 8);
  _Block_object_dispose(&a71, 8);
  _Block_object_dispose((const void *)(v71 - 256), 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_11(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x18u);
}

uint64_t HKCodableLevelViewDataConfigurationBucketReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  HKCodableClosedRange *v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v23 = objc_alloc_init(HKCodableClosedRange);
        objc_storeStrong((id *)(a1 + 8), v23);
        if (!PBReaderPlaceMark() || !HKCodableClosedRangeReadFrom((uint64_t)v23, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_35:
        *(_BYTE *)(a1 + 16) = v19 != 0;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1D79DC62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D79DC780(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t _shouldShowMapRoute(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  int64_t v14;
  NSObject *v15;
  uint64_t v16;
  const char *v17;
  NSObject *v18;
  uint32_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t i;
  void *v25;
  void *v26;
  unint64_t v27;
  void *v28;
  void *v29;
  double v30;
  double v31;
  void *v32;
  double v33;
  double v34;
  double v35;
  NSObject *v36;
  _BOOL4 v37;
  int v39;
  void *v40;
  id v41;
  id v42;
  id obj;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint8_t buf[4];
  _BYTE v49[10];
  int v50;
  _BYTE v51[128];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = objc_msgSend(v3, "count");
  objc_msgSend(v3, "workout");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "workoutConfiguration");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "activityType");
  if (!v8)
    v8 = objc_msgSend(v6, "workoutActivityType");

  objc_msgSend(v4, "duration");
  v10 = v9;
  if (v9 == 0.0)
  {
    objc_msgSend(v6, "duration");
    v10 = v11;
  }
  v12 = 0.7;
  if (v8 != 46)
    v12 = 0.5;
  v13 = v12 * v10;
  v14 = vcvtmd_s64_f64(v12 * v10 / 5.0);
  if (v5 >= v14)
  {
    v39 = v5;
    v40 = v6;
    v41 = v4;
    v42 = v3;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    objc_msgSend(v3, "inOrderLocationArrays");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v51, 16);
    if (v20)
    {
      v21 = v20;
      v22 = *(_QWORD *)v45;
      v23 = 0.0;
      do
      {
        for (i = 0; i != v21; ++i)
        {
          if (*(_QWORD *)v45 != v22)
            objc_enumerationMutation(obj);
          v25 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * i);
          objc_msgSend(v25, "firstObject");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          if ((unint64_t)objc_msgSend(v25, "count") < 2)
          {
            v28 = v26;
          }
          else
          {
            v27 = 1;
            do
            {
              objc_msgSend(v25, "objectAtIndexedSubscript:", v27);
              v28 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v28, "timestamp");
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v29, "timeIntervalSinceReferenceDate");
              v31 = v30;
              objc_msgSend(v26, "timestamp");
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v32, "timeIntervalSinceReferenceDate");
              v34 = v31 - v33;

              v35 = -0.0;
              if (v34 > 5.0)
                v35 = v34;
              v23 = v23 + v35;

              ++v27;
              v26 = v28;
            }
            while (v27 < objc_msgSend(v25, "count"));
          }

        }
        v21 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v51, 16);
      }
      while (v21);
    }
    else
    {
      v23 = 0.0;
    }

    _HKInitializeLogging();
    v36 = *MEMORY[0x1E0CB5380];
    v37 = os_log_type_enabled((os_log_t)*MEMORY[0x1E0CB5380], OS_LOG_TYPE_DEFAULT);
    if (v23 >= v13)
    {
      v4 = v41;
      v3 = v42;
      v6 = v40;
      if (!v37)
      {
LABEL_33:
        v16 = 0;
        goto LABEL_34;
      }
      *(_DWORD *)buf = 134217984;
      *(double *)v49 = v23 / v10;
      v17 = "[routes] Disable route. Time without GPS is %.2f of workout";
      v18 = v36;
      v19 = 12;
LABEL_32:
      _os_log_impl(&dword_1D7813000, v18, OS_LOG_TYPE_DEFAULT, v17, buf, v19);
      goto LABEL_33;
    }
    v4 = v41;
    v3 = v42;
    v6 = v40;
    if (v37)
    {
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)v49 = v41;
      *(_WORD *)&v49[8] = 1024;
      v50 = v39;
      _os_log_impl(&dword_1D7813000, v36, OS_LOG_TYPE_DEFAULT, "[routes] Showing route for workout activity %@. Total active locations (%d)", buf, 0x12u);
    }
    v16 = 1;
  }
  else
  {
    _HKInitializeLogging();
    v15 = *MEMORY[0x1E0CB5380];
    v16 = 0;
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CB5380], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v49 = v5;
      *(_WORD *)&v49[4] = 1024;
      *(_DWORD *)&v49[6] = v14;
      v17 = "[routes] Disable route. Total active locations (%d) < minimum number of points (%d)";
      v18 = v15;
      v19 = 14;
      goto LABEL_32;
    }
  }
LABEL_34:

  return v16;
}

void sub_1D79DCEF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D79DD308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a49, 8);
  _Block_object_dispose(&a53, 8);
  _Unwind_Resume(a1);
}

void sub_1D79DDA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D79DDD70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t HKHealthPrivacyServiceRemoteObjectPickerViewControllerInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1F0248E00);
}

HKDisplayType *HKDisplayTypeIdentifierActivityMoveModeMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 0, 0, 0, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("ACTIVITY_MOVE_MODE"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 177);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 177, 7, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierAppleSleepingBreathingDisturbancesMake()
{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  HKDisplayTypeBehavior *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypePresentationConfiguration *v16;
  HKDisplayTypePresentation *v17;
  HKDisplayTypeLocalization *v18;
  void *v19;
  void *v20;
  void *v21;
  HKDisplayTypeLocalization *v22;
  HKDisplayType *v23;
  void *v24;
  HKDisplayType *v25;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  HKDisplayTypeChartingRules *v30;
  void *v31;
  const __CFString *v32;
  void *v33;
  _QWORD v34[2];

  v34[1] = *MEMORY[0x1E0C80C00];
  v30 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  v0 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "quantityWithUnit:doubleValue:", v29, 22.0);
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 0.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "quantityWithUnit:doubleValue:", v9, 22.0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v7, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)v1;
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v1, v4, 0, 0, v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v30, "setAxisScalingRule:", v13);

  BYTE2(v27) = 0;
  LOWORD(v27) = 256;
  v14 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 1, 1, 0, 0, 1, v27);
  v15 = [HKDisplayTypePresentation alloc];
  v16 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 2, 3, 0);
  LOBYTE(v28) = 0;
  v17 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v15, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v16, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v28, 0, 0, 0);

  v18 = [HKDisplayTypeLocalization alloc];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = &unk_1E9CECC50;
  v32 = CFSTR("SLEEP_BREATHING_DISTURBANCES");
  v33 = v19;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v32, &v31, 1);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v34[0] = v20;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v34, &v33, 1);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v18, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SLEEP_BREATHING_DISTURBANCES"), 0, CFSTR("Localizable-Nebula"), 0, v21);

  v23 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 275);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v23, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 275, 13, MEMORY[0x1E0C9AA60], v24, v14, v17, v22, v30, 0, 0);

  return v25;
}

HKDisplayType *HKDisplayTypeIdentifierSleepApneaEventMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  HKDisplayTypePresentation *v4;
  HKDisplayTypeLocalization *v5;
  void *v6;
  void *v7;
  void *v8;
  HKDisplayTypeLocalization *v9;
  HKDisplayType *v10;
  void *v11;
  HKDisplayType *v12;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const __CFString *v17;
  void *v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 2, 5);
  BYTE2(v14) = 0;
  LOWORD(v14) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v14);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 4, 0, 0, 0);
  LOBYTE(v15) = 0;
  v4 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v15, 0, 0, 0);

  v5 = [HKDisplayTypeLocalization alloc];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("count"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = &unk_1E9CECC50;
  v17 = &stru_1E9C4C428;
  v18 = v6;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v17, &v16, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = v7;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, &v18, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v5, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SLEEP_APNEA_EVENT"), CFSTR("SLEEP_APNEA_EVENT"), CFSTR("Localizable-Nebula"), 0, v8);

  v10 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 276);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v10, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 276, 13, MEMORY[0x1E0C9AA60], v11, v1, v4, v9, v0, 0, 0);

  return v12;
}

HKDisplayType *HKDisplayTypeIdentifierPaddleSportsDistanceMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mi"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mi"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 1.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 1, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("PADDLE_SPORTS_DISTANCE"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 294);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 294, 2, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierRowingDistanceMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mi"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mi"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 1.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 1, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("ROWING_DISTANCE"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 295);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 295, 2, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierCrossCountrySkiingDistanceMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mi"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mi"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 1.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 1, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("CROSS_COUNTRY_SKIING_DISTANCE"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 296);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 296, 2, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierSkatingSportsDistanceMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  HKDisplayTypePresentationConfiguration *v13;
  void *v14;
  HKDisplayTypePresentation *v15;
  HKDisplayTypeLocalization *v16;
  HKDisplayTypeLocalization *v17;
  HKDisplayType *v18;
  void *v19;
  HKDisplayType *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mi"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mi"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 1.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v22) = 0;
  LOWORD(v22) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v22);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 2, 4, 0);
  v24 = &unk_1E9CECC68;
  v13 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 2, 0, 4, 0);
  v25[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, &v24, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v23) = 0;
  v15 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, v14, 1, 0, 0, 0, 1.0, v23, 0, 0, 0);

  v16 = [HKDisplayTypeLocalization alloc];
  v17 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:](v16, "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("SKATING_SPORTS_DISTANCE"), 0, 0, 0, MEMORY[0x1E0C9AA70]);
  v18 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 297);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v18, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 297, 2, MEMORY[0x1E0C9AA60], v19, v10, v15, v17, v0, 0, 0);

  return v20;
}

HKDisplayType *HKDisplayTypeIdentifierEstimatedWorkoutEffortScoreMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  uint64_t v13;
  HKDisplayTypePresentation *v14;
  HKDisplayTypeLocalization *v15;
  HKDisplayType *v16;
  void *v17;
  HKDisplayType *v18;
  uint64_t v20;
  uint64_t v21;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("appleEffortScore"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("appleEffortScore"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 20.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v20) = 0;
  LOWORD(v20) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v20);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 1, 0);
  LOBYTE(v21) = 0;
  v13 = MEMORY[0x1E0C9AA70];
  v14 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, MEMORY[0x1E0C9AA70], 1, 0, 0, 0, 1.0, v21, 0, 0, 0);

  v15 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("ESTIMATED_WORKOUT_EFFORT_SCORE"), 0, 0, 0, v13);
  v16 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 298);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v16, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 298, 2, MEMORY[0x1E0C9AA60], v17, v10, v14, v15, v0, 0, 0);

  return v18;
}

HKDisplayType *HKDisplayTypeIdentifierRowingSpeedMake()
{
  HKTieredDecimalPrecisionRule *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HKDisplayTypeBehavior *v15;
  HKDisplayTypePresentation *v16;
  HKDisplayTypePresentationConfiguration *v17;
  uint64_t v18;
  HKDisplayTypePresentation *v19;
  HKDisplayTypeLocalization *v20;
  HKDisplayType *v21;
  void *v22;
  HKDisplayType *v23;
  uint64_t v25;
  uint64_t v26;
  HKDisplayTypeChartingRules *v27;

  v27 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 16, 5);
  v0 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v27, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v0, 0);

  v1 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m/s"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "quantityWithUnit:doubleValue:", v2, 0.1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m/s"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "quantityWithUnit:doubleValue:", v5, 0.0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m/s"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "quantityWithUnit:doubleValue:", v8, 0.0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m/s"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "quantityWithUnit:doubleValue:", v11, 4.0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v9, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v3, v6, 0, 0, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v27, "setAxisScalingRule:", v14);

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  v15 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v25);
  v16 = [HKDisplayTypePresentation alloc];
  v17 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 1, 3, 0);
  LOBYTE(v26) = 0;
  v18 = MEMORY[0x1E0C9AA70];
  v19 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v16, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v17, MEMORY[0x1E0C9AA70], 1, 0, 0, 0, 1.0, v26, 0, 0, 0);

  v20 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("ROWING_SPEED"), 0, 0, 0, v18);
  v21 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 301);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v21, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 301, 2, MEMORY[0x1E0C9AA60], v22, v15, v19, v20, v27, 0, 0);

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierCrossCountrySkiingSpeedMake()
{
  HKTieredDecimalPrecisionRule *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HKDisplayTypeBehavior *v15;
  HKDisplayTypePresentation *v16;
  HKDisplayTypePresentationConfiguration *v17;
  uint64_t v18;
  HKDisplayTypePresentation *v19;
  HKDisplayTypeLocalization *v20;
  HKDisplayType *v21;
  void *v22;
  HKDisplayType *v23;
  uint64_t v25;
  uint64_t v26;
  HKDisplayTypeChartingRules *v27;

  v27 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 16, 5);
  v0 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v27, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v0, 0);

  v1 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m/s"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "quantityWithUnit:doubleValue:", v2, 0.1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m/s"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "quantityWithUnit:doubleValue:", v5, 0.0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m/s"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "quantityWithUnit:doubleValue:", v8, 0.0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m/s"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "quantityWithUnit:doubleValue:", v11, 12.0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v9, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v3, v6, 0, 0, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v27, "setAxisScalingRule:", v14);

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  v15 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v25);
  v16 = [HKDisplayTypePresentation alloc];
  v17 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 1, 3, 0);
  LOBYTE(v26) = 0;
  v18 = MEMORY[0x1E0C9AA70];
  v19 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v16, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v17, MEMORY[0x1E0C9AA70], 1, 0, 0, 0, 1.0, v26, 0, 0, 0);

  v20 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("CROSS_COUNTRY_SKIING_SPEED"), 0, 0, 0, v18);
  v21 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 302);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v21, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 302, 2, MEMORY[0x1E0C9AA60], v22, v15, v19, v20, v27, 0, 0);

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierPaddleSportsSpeedMake()
{
  HKTieredDecimalPrecisionRule *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  HKDisplayTypeBehavior *v15;
  HKDisplayTypePresentation *v16;
  HKDisplayTypePresentationConfiguration *v17;
  uint64_t v18;
  HKDisplayTypePresentation *v19;
  HKDisplayTypeLocalization *v20;
  HKDisplayType *v21;
  void *v22;
  HKDisplayType *v23;
  uint64_t v25;
  uint64_t v26;
  HKDisplayTypeChartingRules *v27;

  v27 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 16, 5);
  v0 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v27, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v0, 0);

  v1 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m/s"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "quantityWithUnit:doubleValue:", v2, 0.1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m/s"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "quantityWithUnit:doubleValue:", v5, 0.0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m/s"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "quantityWithUnit:doubleValue:", v8, 0.0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("m/s"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "quantityWithUnit:doubleValue:", v11, 4.0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v9, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityMinimumRangeAxisScalingRule ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:](HKQuantityMinimumRangeAxisScalingRule, "ruleWithDefaultYAxisRange:minimumValue:maximumValue:axisRangeOverrides:noDataAxisBounds:", v3, v6, 0, 0, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v27, "setAxisScalingRule:", v14);

  BYTE2(v25) = 0;
  LOWORD(v25) = 256;
  v15 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v25);
  v16 = [HKDisplayTypePresentation alloc];
  v17 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 1, 3, 0);
  LOBYTE(v26) = 0;
  v18 = MEMORY[0x1E0C9AA70];
  v19 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v16, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v17, MEMORY[0x1E0C9AA70], 1, 0, 0, 0, 1.0, v26, 0, 0, 0);

  v20 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("PADDLE_SPORTS_SPEED"), 0, 0, 0, v18);
  v21 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 303);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v21, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 303, 2, MEMORY[0x1E0C9AA60], v22, v15, v19, v20, v27, 0, 0);

  return v23;
}

HKDisplayType *HKDisplayTypeIdentifierWorkoutEffortScoreMake()
{
  HKDisplayTypeChartingRules *v0;
  HKTieredDecimalPrecisionRule *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  HKDisplayTypeBehavior *v10;
  HKDisplayTypePresentation *v11;
  HKDisplayTypePresentationConfiguration *v12;
  uint64_t v13;
  HKDisplayTypePresentation *v14;
  HKDisplayTypeLocalization *v15;
  HKDisplayType *v16;
  void *v17;
  HKDisplayType *v18;
  uint64_t v20;
  uint64_t v21;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 4, 0, 5);
  v1 = objc_alloc_init(HKTieredDecimalPrecisionRule);
  -[HKDisplayTypeChartingRules setAllowedDecimalPrecisionRule:perUnitPrecisionRules:](v0, "setAllowedDecimalPrecisionRule:perUnitPrecisionRules:", v1, 0);

  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("appleEffortScore"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v3, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("appleEffortScore"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v6, 20.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKQuantityFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:](HKQuantityFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:minimumValue:maximumValue:noDataAxisBounds:", v8, 0, 0, 0, 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v9);

  BYTE2(v20) = 0;
  LOWORD(v20) = 256;
  v10 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v20);
  v11 = [HKDisplayTypePresentation alloc];
  v12 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 1, 0, 1, 0);
  LOBYTE(v21) = 0;
  v13 = MEMORY[0x1E0C9AA70];
  v14 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v11, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v12, MEMORY[0x1E0C9AA70], 1, 0, 0, 0, 1.0, v21, 0, 0, 0);

  v15 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("WORKOUT_EFFORT_SCORE"), 0, 0, 0, v13);
  v16 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 304);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v16, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 304, 2, MEMORY[0x1E0C9AA60], v17, v10, v14, v15, v0, 0, 0);

  return v18;
}

HKDisplayType *HKDisplayTypeIdentifierAppleBalanceMetricsMake()
{
  HKDisplayTypeChartingRules *v0;
  void *v1;
  void *v2;
  void *v3;
  HKDisplayTypeBehavior *v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypePresentationConfiguration *v6;
  uint64_t v7;
  HKDisplayTypePresentation *v8;
  HKDisplayTypeLocalization *v9;
  HKDisplayType *v10;
  void *v11;
  HKDisplayType *v12;
  uint64_t v14;
  uint64_t v15;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 6);
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", &unk_1E9CED658, &unk_1E9CED628);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKValueRange valueRangeWithMinValue:maxValue:](HKValueRange, "valueRangeWithMinValue:maxValue:", &unk_1E9CED658, &unk_1E9CED628);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[HKNumericFixedAxisScalingRule ruleWithDefaultAxisBounds:axisBoundsOverrides:noDataAxisBounds:](HKNumericFixedAxisScalingRule, "ruleWithDefaultAxisBounds:axisBoundsOverrides:noDataAxisBounds:", v1, 0, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[HKDisplayTypeChartingRules setAxisScalingRule:](v0, "setAxisScalingRule:", v3);

  BYTE2(v14) = 0;
  LOWORD(v14) = 256;
  v4 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v14);
  v5 = [HKDisplayTypePresentation alloc];
  v6 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 0, 0, 0, 0);
  LOBYTE(v15) = 0;
  v7 = MEMORY[0x1E0C9AA70];
  v8 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v5, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v6, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v15, 0, 0, 0);

  v9 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("APPLE_BALANCE_METRICS"), 0, CFSTR("Localizable-Balance"), 0, v7);
  v10 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 305);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v10, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 305, 1, MEMORY[0x1E0C9AA60], v11, v4, v8, v9, v0, 0, 0);

  return v12;
}

HKDisplayType *HKDisplayTypeIdentifierBleedingDuringPregnancyMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 10, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 6, 3, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("BLEEDING_DURING_PREGNANCY"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 313);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 313, 8, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierBleedingAfterPregnancyMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 8, 10, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 6, 3, 9, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("BLEEDING_AFTER_PREGNANCY"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 314);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 314, 8, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierHeartbeatSeriesMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 0, 0, 0, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("TACHOGRAM"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 119);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 119, 11, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

HKDisplayType *HKDisplayTypeIdentifierLocationSeriesMake()
{
  HKDisplayTypeChartingRules *v0;
  HKDisplayTypeBehavior *v1;
  HKDisplayTypePresentation *v2;
  HKDisplayTypePresentationConfiguration *v3;
  uint64_t v4;
  HKDisplayTypePresentation *v5;
  HKDisplayTypeLocalization *v6;
  HKDisplayType *v7;
  void *v8;
  HKDisplayType *v9;
  uint64_t v11;
  uint64_t v12;

  v0 = -[HKDisplayTypeChartingRules initWithDefaultChartStyle:chartingOptions:preferredTimeScope:]([HKDisplayTypeChartingRules alloc], "initWithDefaultChartStyle:chartingOptions:preferredTimeScope:", 1, 0, 5);
  BYTE2(v11) = 0;
  LOWORD(v11) = 256;
  v1 = -[HKDisplayTypeBehavior initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:]([HKDisplayTypeBehavior alloc], "initWithStatisticsMergeStrategy:preferredCalendaryDayAlignment:allowsSourceReordering:unitPreferenceChangeConfirmation:chartsRelativeData:appearsInDataTypeSearch:supportsAssociatedSamples:canBecomeFavorite:hidden:", 0, 0, 1, 0, 0, 1, v11);
  v2 = [HKDisplayTypePresentation alloc];
  v3 = -[HKDisplayTypePresentationConfiguration initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:]([HKDisplayTypePresentationConfiguration alloc], "initWithCurrentValue:secondaryValue:detailChart:singleDailyValue:", 0, 0, 0, 0);
  LOBYTE(v12) = 0;
  v4 = MEMORY[0x1E0C9AA70];
  v5 = -[HKDisplayTypePresentation initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:](v2, "initWithDefaultConfiguration:configurationOverrides:scaleFactor:showAllDataHierarchically:showAppDataHierarchically:shouldDisplayUnitStringOnYAxis:useSecondsWhenDisplayingDuration:isCriticalForAutoscale:detailImageName:listIconImageNameOverride:summaryAttribution:", v3, MEMORY[0x1E0C9AA70], 0, 0, 0, 0, 1.0, v12, 0, 0, 0);

  v6 = -[HKDisplayTypeLocalization initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:]([HKDisplayTypeLocalization alloc], "initWithDisplayNameKey:labelDisplayNameKey:localizationTableNameOverride:localizedKeySuffix:unitNameKeyOverrides:", CFSTR("WORKOUT_ROUTE"), 0, 0, 0, v4);
  v7 = [HKDisplayType alloc];
  objc_msgSend(MEMORY[0x1E0CB6978], "dataTypeWithCode:", 102);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = -[HKDisplayType initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:](v7, "initWithDisplayTypeIdentifier:categoryIdentifier:secondaryCategoryIdentifiers:objectType:behavior:presentation:localization:chartingRules:defaultChartingPredicate:chartingPredicatesByTimeScope:", 102, 2, MEMORY[0x1E0C9AA60], v8, v1, v5, v6, v0, 0, 0);

  return v9;
}

id _enumeratorForCurrentLocale(void *a1)
{
  void *v1;
  id v2;
  void *v3;

  v1 = (void *)MEMORY[0x1E0DC3F10];
  v2 = a1;
  if (objc_msgSend(v1, "userInterfaceLayoutDirectionForSemanticContentAttribute:", 0) == 1)
    objc_msgSend(v2, "reverseObjectEnumerator");
  else
    objc_msgSend(v2, "objectEnumerator");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

uint64_t HKHealthKeyColor()
{
  return objc_msgSend(MEMORY[0x1E0DC3658], "hk_appKeyColor");
}

uint64_t HKHealthTintColor()
{
  return objc_msgSend(MEMORY[0x1E0DC3658], "hk_appTintColor");
}

id HKUIDefaultBirthdate()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "startOfDayForDate:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v0, "dateByAddingUnit:value:toDate:options:", 4, -35, v2, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id HKUIDefaultBirthdateComponents()
{
  void *v0;
  void *v1;

  HKUIDefaultBirthdate();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D48], "hk_canonicalDateOfBirthDateComponentsWithDate:", v0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

uint64_t HKDefaultChartYAxisColor()
{
  return objc_msgSend(MEMORY[0x1E0DC3658], "hk_chartAxisLabelColor");
}

double HKHealthUIBuddyDirectionalEdgeInsets()
{
  objc_msgSend(MEMORY[0x1E0DC3BF8], "hk_currentDeviceHas4InchScreen");
  return 0.0;
}

uint64_t HKUICalendarLocaleIsRightToLeft()
{
  if (HKUICalendarLocaleIsRightToLeft_onceToken != -1)
    dispatch_once(&HKUICalendarLocaleIsRightToLeft_onceToken, &__block_literal_global_66);
  return HKUICalendarLocaleIsRightToLeft___calLocaleIsRTL;
}

id HKUIJoinStringsForLocale(void *a1)
{
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  _enumeratorForCurrentLocale(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v10;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v3);
        objc_msgSend(v2, "appendString:", *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * v7++), (_QWORD)v9);
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v5);
  }

  return v2;
}

id HKUIJoinAttributedStringsForLocale(void *a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0CB3778]);
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v10;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v3);
        objc_msgSend(v2, "appendAttributedString:", *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * v7++), (_QWORD)v9);
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v5);
  }

  return v2;
}

id HKUIJoinAttributedStringsForLocaleWithSeparator(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v3 = a1;
  v4 = a2;
  v5 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if (objc_msgSend(v3, "count"))
  {
    v6 = 0;
    do
    {
      if (v6)
      {
        objc_msgSend(v3, "objectAtIndexedSubscript:", v6 - 1);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = objc_msgSend(v7, "length") - 1;

        objc_msgSend(v3, "objectAtIndexedSubscript:", v6 - 1);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "attributesAtIndex:effectiveRange:", v8, 0);
        v10 = (void *)objc_claimAutoreleasedReturnValue();

        v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithString:attributes:", v4, v10);
        objc_msgSend(v5, "addObject:", v11);

      }
      objc_msgSend(v3, "objectAtIndexedSubscript:", v6);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "addObject:", v12);

      ++v6;
    }
    while (v6 < objc_msgSend(v3, "count"));
  }
  HKUIJoinAttributedStringsForLocale(v5);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  return v13;
}

double HKUIHalfPixel()
{
  double result;

  result = *(double *)&HKUIHalfPixel___halfPixel;
  if (*(double *)&HKUIHalfPixel___halfPixel == 2.22507386e-308)
  {
    result = HKUIOnePixel() * 0.5;
    HKUIHalfPixel___halfPixel = *(_QWORD *)&result;
  }
  return result;
}

double HKUIFloorToScreenScale(double a1)
{
  double v2;
  void *v3;
  uint64_t v4;

  v2 = *(double *)&HKUIFloorToScreenScale___mainscreenScale;
  if (*(double *)&HKUIFloorToScreenScale___mainscreenScale == 2.22507386e-308)
  {
    objc_msgSend(MEMORY[0x1E0DC3BF8], "mainScreen", *(double *)&HKUIFloorToScreenScale___mainscreenScale);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "scale");
    HKUIFloorToScreenScale___mainscreenScale = v4;

    v2 = *(double *)&HKUIFloorToScreenScale___mainscreenScale;
  }
  return floor(v2 * a1) / v2;
}

double HKUIFloorCGPointToScreenScale(double a1, double a2)
{
  double v3;

  v3 = HKUIFloorToScreenScale(a1);
  HKUIFloorToScreenScale(a2);
  return v3;
}

double HKUICeilToScreenScale(double a1)
{
  double v2;
  void *v3;
  uint64_t v4;

  v2 = *(double *)&HKUICeilToScreenScale___mainscreenScale;
  if (*(double *)&HKUICeilToScreenScale___mainscreenScale == 2.22507386e-308)
  {
    objc_msgSend(MEMORY[0x1E0DC3BF8], "mainScreen", *(double *)&HKUICeilToScreenScale___mainscreenScale);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "scale");
    HKUICeilToScreenScale___mainscreenScale = v4;

    v2 = *(double *)&HKUICeilToScreenScale___mainscreenScale;
  }
  return ceil(v2 * a1) / v2;
}

double HKUIRoundToScreenScale(double a1)
{
  double v2;
  void *v3;
  uint64_t v4;

  v2 = *(double *)&HKUIRoundToScreenScale___mainscreenScale;
  if (*(double *)&HKUIRoundToScreenScale___mainscreenScale == 2.22507386e-308)
  {
    objc_msgSend(MEMORY[0x1E0DC3BF8], "mainScreen", *(double *)&HKUIRoundToScreenScale___mainscreenScale);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "scale");
    HKUIRoundToScreenScale___mainscreenScale = v4;

    v2 = *(double *)&HKUIRoundToScreenScale___mainscreenScale;
  }
  return floor(a1 * v2 + 0.5) / v2;
}

double HKUICeilRectToScreenScale(double a1, double a2, double a3, double a4)
{
  double v7;

  v7 = HKUICeilToScreenScale(a1);
  HKUICeilToScreenScale(a2);
  HKUICeilToScreenScale(a3);
  HKUICeilToScreenScale(a4);
  return v7;
}

uint64_t HKUIRectIntegralToScreenScale(double a1, double a2, double a3, double a4)
{
  void *v4;
  uint64_t v5;

  if (*(double *)&HKUIRectIntegralToScreenScale___mainscreenScale == 2.22507386e-308)
  {
    objc_msgSend(MEMORY[0x1E0DC3BF8], "mainScreen", 2.22507386e-308, a2, a3, a4, *(double *)&HKUIRectIntegralToScreenScale___mainscreenScale);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "scale");
    HKUIRectIntegralToScreenScale___mainscreenScale = v5;

  }
  return UIRectIntegralWithScale();
}

uint64_t HKUIMidDate(void *a1, void *a2)
{
  id v3;
  double v4;
  double v5;
  double v6;
  double v7;

  v3 = a2;
  objc_msgSend(a1, "timeIntervalSinceReferenceDate");
  v5 = v4;
  objc_msgSend(v3, "timeIntervalSinceReferenceDate");
  v7 = v6;

  return objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", (v5 + v7) * 0.5);
}

uint64_t HKUIUnitDisplayName(void *a1, const char *a2, uint64_t a3)
{
  return objc_msgSend(a1, "localizedDisplayNameForDisplayType:value:", a2, a3);
}

id HKUIPredicateMatchingPredicates(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  _QWORD v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3 && v4)
  {
    v6 = (void *)MEMORY[0x1E0CB3528];
    v11[0] = v3;
    v11[1] = v4;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "andPredicateWithSubpredicates:", v7);
    v8 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    if (v3)
      v9 = v3;
    else
      v9 = v4;
    v8 = v9;
  }

  return v8;
}

BOOL HKUIEqualDoubles(double a1, double a2)
{
  return vabdd_f64(a1, a2) <= 2.22044605e-16;
}

BOOL HKUIEqualCGFloats(double a1, double a2)
{
  return vabdd_f64(a1, a2) <= 0.00000011920929;
}

BOOL HKUIEqualCGFloatsWithPrecision(double a1, double a2, double a3)
{
  return vabdd_f64(a1, a2) <= a3;
}

double HKUIRoundedDivide(double a1, double a2, double a3)
{
  double result;
  double v4;

  result = a1 / a2;
  v4 = round(result);
  if (vabdd_f64(result, v4) <= a3)
    return v4;
  return result;
}

const __CFString *HKUIBloodPressureSystolicDiastolicSeparatorString()
{
  return CFSTR("/");
}

BOOL HKUIObjectIsSmallerOrEqual(void *a1, uint64_t a2)
{
  return objc_msgSend(a1, "compare:", a2) != 1;
}

uint64_t HKUIObjectsAreEqual(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3 == v4)
  {
    v6 = 1;
  }
  else
  {
    v6 = 0;
    if (v3 && v4)
      v6 = objc_msgSend(v3, "isEqual:", v4);
  }

  return v6;
}

uint64_t HKUIObjectsAreNotEqual(void *a1, void *a2)
{
  return HKUIObjectsAreEqual(a1, a2) ^ 1;
}

id HKUIObjectMax(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    v6 = v4;
    if (v4)
      goto LABEL_10;
  }
  if (v3)
  {
    v6 = v3;
    if (!v4)
      goto LABEL_10;
  }
  v7 = 0;
  if (v3 && v4)
  {
    if (objc_msgSend(v3, "compare:", v4) == 1)
      v6 = v3;
    else
      v6 = v5;
LABEL_10:
    v7 = v6;
  }

  return v7;
}

id HKUIObjectMin(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    v6 = v4;
    if (v4)
      goto LABEL_10;
  }
  if (v3)
  {
    v6 = v3;
    if (!v4)
      goto LABEL_10;
  }
  v7 = 0;
  if (v3 && v4)
  {
    if (objc_msgSend(v3, "compare:", v4) == -1)
      v6 = v3;
    else
      v6 = v5;
LABEL_10:
    v7 = v6;
  }

  return v7;
}

id HKUIArrayLargestValue(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  id v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v1);
        v7 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * i);
        if (!v4 || objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * i), "compare:", v4) == 1)
        {
          v8 = v7;

          v4 = v8;
        }
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

id HKUIArraySmallestValue(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  id v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v1);
        v7 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * i);
        if (!v4 || objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * i), "compare:", v4) == -1)
        {
          v8 = v7;

          v4 = v8;
        }
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

BOOL HKUIApplicationIsUsingAccessibilityContentSizeCategory()
{
  void *v0;
  NSString *v1;
  _BOOL8 IsAccessibilityCategory;

  objc_msgSend(MEMORY[0x1E0DC3688], "system");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "preferredContentSizeCategory");
  v1 = (NSString *)objc_claimAutoreleasedReturnValue();
  IsAccessibilityCategory = UIContentSizeCategoryIsAccessibilityCategory(v1);

  return IsAccessibilityCategory;
}

BOOL HKUIApplicationContentSizeCategoryIsLargerThanSizeCategory(void *a1)
{
  NSString *v1;
  void *v2;
  NSString *v3;
  _BOOL8 v4;

  v1 = a1;
  objc_msgSend(MEMORY[0x1E0DC3688], "system");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "preferredContentSizeCategory");
  v3 = (NSString *)objc_claimAutoreleasedReturnValue();

  if (v3)
    v4 = UIContentSizeCategoryCompareToCategory(v3, v1) == NSOrderedDescending;
  else
    v4 = 0;

  return v4;
}

BOOL HKUIApplicationContentSizeCategoryIsSmallerThanSizeCategory(void *a1)
{
  void *v1;
  NSString *v2;
  void *v3;
  NSString *v4;
  NSComparisonResult v5;

  v1 = (void *)MEMORY[0x1E0DC3688];
  v2 = a1;
  objc_msgSend(v1, "system");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "preferredContentSizeCategory");
  v4 = (NSString *)objc_claimAutoreleasedReturnValue();
  v5 = UIContentSizeCategoryCompareToCategory(v4, v2);

  return v5 == NSOrderedAscending;
}

NSString *HKUIContentSizeCategoryMin(void *a1, void *a2)
{
  NSString *v2;
  NSString *v4;
  NSString *v5;
  NSComparisonResult v6;
  NSString *v7;

  v4 = a1;
  v5 = a2;
  v6 = UIContentSizeCategoryCompareToCategory(v4, v5);
  if ((unint64_t)v6 < 2)
  {
    v7 = v5;
LABEL_4:
    v2 = v7;
    goto LABEL_5;
  }
  v7 = v4;
  if (v6 == NSOrderedAscending)
    goto LABEL_4;
LABEL_5:

  return v2;
}

id HKUIContentSizeCategoryMax(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;

  v3 = a2;
  v4 = a1;
  HKUIContentSizeCategoryMin(v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "isEqualToString:", v4))
    v6 = v3;
  else
    v6 = v4;
  v7 = v6;

  return v7;
}

id HKUIContentSizeCategoryBounded(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;

  v5 = a3;
  HKUIContentSizeCategoryMax(a1, a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  HKUIContentSizeCategoryMin(v6, v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

id HKUIDefaultGregorianBirthday()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0C99D48], "hk_gregorianCalendar");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "startOfDayForDate:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v0, "hk_dateOfBirthDateComponentsWithDate:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setYear:", objc_msgSend(v3, "year") - 35);

  return v3;
}

id HKUIDefaultPregnancyDueDate()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "startOfDayForDate:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v0, "dateByAddingUnit:value:toDate:options:", 0x2000, 5, v2, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id HKAttributedString(void *a1)
{
  objc_class *v1;
  id v2;
  void *v3;

  v1 = (objc_class *)MEMORY[0x1E0CB3498];
  v2 = a1;
  v3 = (void *)objc_msgSend([v1 alloc], "initWithString:", v2);

  return v3;
}

id HKStringForHKTimeScope(uint64_t a1, int a2)
{
  __CFString *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  const __CFString *v7;

  if (a2)
  {
    switch(a1)
    {
      case 0:
        v2 = CFSTR("SHORT_TEN_YEARS_%@");
        goto LABEL_6;
      case 1:
        v2 = CFSTR("SHORT_FIVE_YEARS_%@");
        goto LABEL_16;
      case 2:
        objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        v6 = v5;
        v7 = CFSTR("SHORT_YEAR");
        goto LABEL_25;
      case 3:
        v2 = CFSTR("SHORT_SIX_MONTHS_%@");
        goto LABEL_19;
      case 4:
        objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        v6 = v5;
        v7 = CFSTR("SHORT_MONTH");
        goto LABEL_25;
      case 5:
        objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        v6 = v5;
        v7 = CFSTR("SHORT_WEEK");
        goto LABEL_25;
      case 6:
        objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        v6 = v5;
        v7 = CFSTR("SHORT_DAY");
        goto LABEL_25;
      case 7:
        objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        v6 = v5;
        v7 = CFSTR("SHORT_HOUR");
        goto LABEL_25;
      default:
        goto LABEL_7;
    }
  }
  switch(a1)
  {
    case 0:
      v2 = CFSTR("TEN_YEARS_%@");
LABEL_6:
      v3 = 10;
      goto LABEL_20;
    case 1:
      v2 = CFSTR("FIVE_YEARS_%@");
LABEL_16:
      v3 = 5;
      goto LABEL_20;
    case 2:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = v5;
      v7 = CFSTR("YEAR");
      goto LABEL_25;
    case 3:
      v2 = CFSTR("SIX_MONTHS_%@");
LABEL_19:
      v3 = 6;
LABEL_20:
      _NumericalLocalizedTimeScope(v2, v3);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      return v4;
    case 4:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = v5;
      v7 = CFSTR("MONTH");
      goto LABEL_25;
    case 5:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = v5;
      v7 = CFSTR("WEEK");
      goto LABEL_25;
    case 6:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = v5;
      v7 = CFSTR("DAY");
      goto LABEL_25;
    case 7:
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = v5;
      v7 = CFSTR("HOUR");
LABEL_25:
      objc_msgSend(v5, "localizedStringForKey:value:table:", v7, &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
      v4 = (void *)objc_claimAutoreleasedReturnValue();

      break;
    default:
LABEL_7:
      v4 = 0;
      break;
  }
  return v4;
}

id _NumericalLocalizedTimeScope(void *a1, uint64_t a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v3 = _NumericalLocalizedTimeScope_onceToken;
  v4 = a1;
  if (v3 != -1)
    dispatch_once(&_NumericalLocalizedTimeScope_onceToken, &__block_literal_global_292);
  v5 = (void *)_NumericalLocalizedTimeScope_numericalTimeScopeFormatter;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "stringFromNumber:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "localizedStringForKey:value:table:", v4, &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v8, "stringWithFormat:", v10, v7);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

id HKHealthRecordsLocalizedStringForIsApplication(void *a1, int a2)
{
  __CFString *v3;
  __CFString *v4;
  id v5;
  void *v6;
  void *v7;

  v3 = CFSTR("HealthUI-Localizable-CHR-API-LimeAlmanac");
  if (a2)
    v3 = CFSTR("HealthUI-Localizable-CHR-API");
  v4 = v3;
  v5 = a1;
  HKHealthUIFrameworkBundle();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "localizedStringForKey:value:table:", v5, &stru_1E9C4C428, v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

id HKHealthRecordsAPILocalizedString(void *a1)
{
  return HKHealthRecordsLocalizedStringForIsApplication(a1, 1);
}

id HKHealthRecordsAPILocalizedStringWithSource(void *a1, void *a2)
{
  id v3;
  void *v4;

  v3 = a1;
  HKHealthRecordsLocalizedStringForIsApplication(v3, objc_msgSend(a2, "_isResearchStudy") ^ 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id HKUIAFibBurdenLocalizedString(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;

  v1 = (void *)MEMORY[0x1E0CB34D0];
  v2 = a1;
  objc_msgSend(v1, "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "localizedStringForKey:value:table:", v2, &stru_1E9C4C428, CFSTR("HealthUI-Localizable-AFibBurden"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

uint64_t HKAccessibilityIdentifierWithFeature(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(CFSTR("UIA.Health"), "stringByAppendingFormat:", CFSTR(".%@.%@"), a1, a2);
}

uint64_t HKAccessibilityIdentifier(uint64_t a1)
{
  return objc_msgSend(CFSTR("UIA.Health"), "stringByAppendingFormat:", CFSTR(".%@"), a1);
}

void sub_1D79EAEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v39 - 240), 8);
  _Block_object_dispose((const void *)(v39 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t HKCodableChartSampleTypeCountDataQueryDataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  HKCodableSampleTypeCountData *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(HKCodableSampleTypeCountData);
        objc_msgSend(a1, "addTimePeriodToCount:", v17);
        if (!PBReaderPlaceMark() || (HKCodableSampleTypeCountDataReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HKCodableHealthRecordsEduSectionReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  void *v25;
  void *v26;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
            break;
          v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (v15)
          v16 = 1;
        else
          v16 = (v10 & 7) == 4;
        if (!v16)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v17 = 0;
              v18 = 0;
              v19 = 0;
              *(_BYTE *)(a1 + 56) |= 1u;
              break;
            case 2u:
              PBReaderReadString();
              v24 = objc_claimAutoreleasedReturnValue();
              v25 = *(void **)(a1 + 40);
              *(_QWORD *)(a1 + 40) = v24;

              goto LABEL_42;
            case 3u:
              PBReaderReadString();
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              if (v26)
                objc_msgSend((id)a1, "addSectionLocaleIdentifiers:", v26);
              goto LABEL_37;
            case 4u:
              PBReaderReadString();
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              if (v26)
                objc_msgSend((id)a1, "addSectionValidRegionCodes:", v26);
              goto LABEL_37;
            case 5u:
              PBReaderReadString();
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              if (v26)
                objc_msgSend((id)a1, "addSectionAttributions:", v26);
              goto LABEL_37;
            case 6u:
              PBReaderReadString();
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              if (v26)
                objc_msgSend((id)a1, "addSectionCitations:", v26);
LABEL_37:

              goto LABEL_42;
            default:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
LABEL_42:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_39;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_41;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_41:
          *(_QWORD *)(a1 + 8) = v19;
          goto LABEL_42;
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1D79F2380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D79F2568(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1D79F3D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D79F4EC4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1D79F5118(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

BOOL HKCodableSummaryAFibBurdenValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  HKCodableAFibBurdenValue *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(HKCodableAFibBurdenValue);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (HKCodableAFibBurdenValueReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(HKCodableDayIndexRange);
    objc_storeStrong((id *)(a1 + 16), v17);
    if (!PBReaderPlaceMark() || !HKCodableDayIndexRangeReadFrom((uint64_t)v17, a2))
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1D79F75E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t HKCodableSampleTypeCountDataReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t result;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v22 = 0;
        v23 = 0;
        v24 = 0;
        *(_BYTE *)(a1 + 32) |= 1u;
        while (1)
        {
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          v27 = v26 + 1;
          if (v26 == -1 || v27 > *(_QWORD *)(a2 + *v4))
            break;
          v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v26);
          *(_QWORD *)(a2 + v25) = v27;
          v24 |= (unint64_t)(v28 & 0x7F) << v22;
          if ((v28 & 0x80) == 0)
            goto LABEL_37;
          v22 += 7;
          v15 = v23++ >= 9;
          if (v15)
          {
            v24 = 0;
            goto LABEL_39;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          v24 = 0;
LABEL_39:
        *(_QWORD *)(a1 + 8) = v24;
      }
      else
      {
        if ((_DWORD)v18 == 2)
        {
          *(_BYTE *)(a1 + 32) |= 2u;
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v32 = 16;
        }
        else
        {
          if ((_DWORD)v18 != 1)
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          *(_BYTE *)(a1 + 32) |= 4u;
          v19 = *v3;
          v20 = *(_QWORD *)(a2 + v19);
          if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v20);
            *(_QWORD *)(a2 + v19) = v20 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v32 = 24;
        }
        *(_QWORD *)(a1 + v32) = v21;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HKCodableMenstrualCyclesProjectionHighlightTileViewModelReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  HKCodableMenstrualCyclesProjection *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(HKCodableMenstrualCyclesProjection);
        objc_storeStrong((id *)(a1 + 24), v17);
        if (PBReaderPlaceMark()
          && (HKCodableMenstrualCyclesProjectionReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
          goto LABEL_26;
        }
        goto LABEL_52;
      case 2u:
        v17 = objc_alloc_init(HKCodableMenstrualCyclesProjectionKind);
        objc_storeStrong((id *)(a1 + 32), v17);
        if (PBReaderPlaceMark()
          && (HKCodableMenstrualCyclesProjectionKindReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_26:
          PBReaderRecallMark();

LABEL_50:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_52:

        return 0;
      case 3u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 40) |= 1u;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_44;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_44:
        v30 = 8;
        goto LABEL_49;
      case 4u:
        v25 = 0;
        v26 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 40) |= 2u;
        while (2)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v21 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_48;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_48:
        v30 = 16;
LABEL_49:
        *(_QWORD *)(a1 + v30) = v21;
        goto LABEL_50;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_50;
    }
  }
}

uint64_t OUTLINED_FUNCTION_0_12()
{
  return NSRequestConcreteImplementation();
}

void sub_1D7A08798(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1D7A0905C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1_11(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x16u);
}

id OUTLINED_FUNCTION_8_1(uint64_t a1, void *a2)
{
  return a2;
}

uint64_t HKCodableChartInsulinValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  HKCodableQuantity *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;
  uint64_t v26;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v22 = objc_alloc_init(HKCodableQuantity);
        objc_storeStrong((id *)(a1 + 24), v22);
        if (!PBReaderPlaceMark() || (HKCodableQuantityReadFrom((uint64_t)v22, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        if ((_DWORD)v18 == 2)
        {
          *(_BYTE *)(a1 + 32) |= 1u;
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v26 = 8;
        }
        else
        {
          if ((_DWORD)v18 != 1)
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          *(_BYTE *)(a1 + 32) |= 2u;
          v19 = *v3;
          v20 = *(_QWORD *)(a2 + v19);
          if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v20);
            *(_QWORD *)(a2 + v19) = v20 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v26 = 16;
        }
        *(_QWORD *)(a1 + v26) = v21;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HKCodableSummaryGAD7AssessmentValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t result;
  uint64_t v36;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v22 = 0;
        v23 = 0;
        v24 = 0;
        *(_BYTE *)(a1 + 32) |= 2u;
        while (1)
        {
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          v27 = v26 + 1;
          if (v26 == -1 || v27 > *(_QWORD *)(a2 + *v4))
            break;
          v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v26);
          *(_QWORD *)(a2 + v25) = v27;
          v24 |= (unint64_t)(v28 & 0x7F) << v22;
          if ((v28 & 0x80) == 0)
            goto LABEL_41;
          v22 += 7;
          v15 = v23++ >= 9;
          if (v15)
          {
            v24 = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          v24 = 0;
LABEL_43:
        v36 = 16;
      }
      else
      {
        if ((_DWORD)v18 != 2)
        {
          if ((_DWORD)v18 == 1)
          {
            *(_BYTE *)(a1 + 32) |= 1u;
            v19 = *v3;
            v20 = *(_QWORD *)(a2 + v19);
            if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + *v4))
            {
              v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v20);
              *(_QWORD *)(a2 + v19) = v20 + 8;
            }
            else
            {
              *(_BYTE *)(a2 + *v5) = 1;
              v21 = 0;
            }
            *(_QWORD *)(a1 + 8) = v21;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v29 = 0;
        v30 = 0;
        v24 = 0;
        *(_BYTE *)(a1 + 32) |= 4u;
        while (1)
        {
          v31 = *v3;
          v32 = *(_QWORD *)(a2 + v31);
          v33 = v32 + 1;
          if (v32 == -1 || v33 > *(_QWORD *)(a2 + *v4))
            break;
          v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
          *(_QWORD *)(a2 + v31) = v33;
          v24 |= (unint64_t)(v34 & 0x7F) << v29;
          if ((v34 & 0x80) == 0)
            goto LABEL_45;
          v29 += 7;
          v15 = v30++ >= 9;
          if (v15)
          {
            v24 = 0;
            goto LABEL_47;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
        if (*(_BYTE *)(a2 + *v5))
          v24 = 0;
LABEL_47:
        v36 = 24;
      }
      *(_QWORD *)(a1 + v36) = v24;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HKCodableNotificationDataSourceQueryDataReadFrom(_BYTE *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  HKCodableNotificationSample *v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        a1[48] |= 2u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_53;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_55;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_55:
        v40 = 16;
        goto LABEL_68;
      case 2u:
        v24 = 0;
        v25 = 0;
        v19 = 0;
        a1[48] |= 1u;
        while (2)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
            *(_QWORD *)(a2 + v26) = v27 + 1;
            v19 |= (unint64_t)(v28 & 0x7F) << v24;
            if (v28 < 0)
            {
              v24 += 7;
              v14 = v25++ >= 9;
              if (v14)
              {
                v19 = 0;
                goto LABEL_59;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_59:
        v40 = 8;
        goto LABEL_68;
      case 3u:
        v29 = objc_alloc_init(HKCodableNotificationSample);
        objc_msgSend(a1, "addSamples:", v29);
        if (PBReaderPlaceMark() && (HKCodableNotificationSampleReadFrom((uint64_t)v29, a2) & 1) != 0)
        {
          PBReaderRecallMark();

LABEL_69:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 4u:
        v30 = 0;
        v31 = 0;
        v19 = 0;
        a1[48] |= 4u;
        while (2)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
            *(_QWORD *)(a2 + v32) = v33 + 1;
            v19 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              v14 = v31++ >= 9;
              if (v14)
              {
                v19 = 0;
                goto LABEL_63;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_63:
        v40 = 24;
        goto LABEL_68;
      case 5u:
        v35 = 0;
        v36 = 0;
        v19 = 0;
        a1[48] |= 8u;
        while (2)
        {
          v37 = *v3;
          v38 = *(_QWORD *)(a2 + v37);
          if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
            *(_QWORD *)(a2 + v37) = v38 + 1;
            v19 |= (unint64_t)(v39 & 0x7F) << v35;
            if (v39 < 0)
            {
              v35 += 7;
              v14 = v36++ >= 9;
              if (v14)
              {
                v19 = 0;
                goto LABEL_67;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_67:
        v40 = 32;
LABEL_68:
        *(_QWORD *)&a1[v40] = v19;
        goto LABEL_69;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_69;
    }
  }
}

void sub_1D7A158FC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1D7A159F8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t HKCodableSummaryVisualizationPointReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  unint64_t v18;
  HKCodableDateInterval *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;
  uint64_t v26;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v18 == 2)
      {
        *(_BYTE *)(a1 + 32) |= 1u;
        v23 = *v3;
        v24 = *(_QWORD *)(a2 + v23);
        if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v24);
          *(_QWORD *)(a2 + v23) = v24 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v22 = 0;
        }
        v26 = 8;
LABEL_36:
        *(_QWORD *)(a1 + v26) = v22;
        goto LABEL_37;
      }
      if ((_DWORD)v18 == 1)
      {
        v19 = objc_alloc_init(HKCodableDateInterval);
        objc_storeStrong((id *)(a1 + 24), v19);
        if (!PBReaderPlaceMark() || !HKCodableDateIntervalReadFrom((uint64_t)v19, a2))
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
LABEL_37:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    *(_BYTE *)(a1 + 32) |= 2u;
    v20 = *v3;
    v21 = *(_QWORD *)(a2 + v20);
    if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(_QWORD *)(a2 + *v4))
    {
      v22 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v21);
      *(_QWORD *)(a2 + v20) = v21 + 8;
    }
    else
    {
      *(_BYTE *)(a2 + *v5) = 1;
      v22 = 0;
    }
    v26 = 16;
    goto LABEL_36;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id _DisplayTypeForActivityValue(unint64_t a1, void *a2)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;

  if (a1 > 7)
    v2 = 0;
  else
    v2 = qword_1D7B828A0[a1];
  v3 = (void *)MEMORY[0x1E0CB37E8];
  v4 = a2;
  objc_msgSend(v3, "numberWithInteger:", v2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "displayTypeWithIdentifier:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_1D7A1D438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 184), 8);
  _Unwind_Resume(a1);
}

void sub_1D7A1F69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1D7A1FF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a23);
  _Unwind_Resume(a1);
}

BOOL HKCodableQuantityValueWithRangeReadFrom(char *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  HKCodableHealthRecordsCode *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(HKCodableHealthRecordsCode);
        objc_msgSend(a1, "addCode:", v17);
        if (PBReaderPlaceMark() && HKCodableHealthRecordsCodeReadFrom((uint64_t)v17, a2))
          goto LABEL_30;
        goto LABEL_37;
      case 2u:
        v17 = objc_alloc_init(HKCodableQuantity);
        v18 = 16;
        goto LABEL_28;
      case 3u:
        PBReaderReadString();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = 40;
        goto LABEL_32;
      case 4u:
        v17 = objc_alloc_init(HKCodableQuantity);
        v18 = 32;
        goto LABEL_28;
      case 5u:
        v17 = objc_alloc_init(HKCodableQuantity);
        v18 = 24;
LABEL_28:
        objc_storeStrong((id *)&a1[v18], v17);
        if (PBReaderPlaceMark() && (HKCodableQuantityReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_30:
          PBReaderRecallMark();
LABEL_33:

LABEL_34:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_37:

        return 0;
      case 6u:
        PBReaderReadString();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = 48;
LABEL_32:
        v17 = *(HKCodableHealthRecordsCode **)&a1[v20];
        *(_QWORD *)&a1[v20] = v19;
        goto LABEL_33;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_34;
    }
  }
}

void sub_1D7A21D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HKUIStandardMapGreenColor()
{
  return objc_msgSend(MEMORY[0x1E0DC3658], "colorWithRed:green:blue:alpha:", 0.298039216, 0.850980392, 0.392156863, 1.0);
}

uint64_t HKUIStandardMapRedColor()
{
  return objc_msgSend(MEMORY[0x1E0DC3658], "colorWithRed:green:blue:alpha:", 1.0, 0.231372549, 0.188235294, 1.0);
}

void sub_1D7A26CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D7A2E10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  char a71;
  uint64_t v71;

  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&a65, 8);
  _Block_object_dispose(&a71, 8);
  _Block_object_dispose(&STACK[0x210], 8);
  _Block_object_dispose((const void *)(v71 - 240), 8);
  _Unwind_Resume(a1);
}

void sub_1D7A2FBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D7A30814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D7A30DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D7A31534(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1D7A31D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t HKSleepSomnogramStageForSleepAnalysis(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return qword_1D7B82A40[a1];
}

uint64_t HKSleepSomnogramConnectionOrientationForBars(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;

  v5 = a1;
  v6 = a2;
  if (a3)
  {
    objc_msgSend(v5, "top");
    v8 = v7;
    objc_msgSend(v6, "top");
    if (v8 <= v9)
    {
      objc_msgSend(v5, "top");
      v11 = v10;
      objc_msgSend(v6, "top");
      if (v11 >= v12)
        goto LABEL_11;
      goto LABEL_6;
    }
LABEL_10:
    objc_msgSend(v6, "right");
    v24 = v23;
    objc_msgSend(v5, "right");
    v19 = v24 < v25;
    goto LABEL_12;
  }
  objc_msgSend(v5, "bottom");
  v14 = v13;
  objc_msgSend(v6, "bottom");
  if (v14 <= v15)
  {
    objc_msgSend(v5, "bottom");
    v21 = v20;
    objc_msgSend(v6, "bottom");
    if (v21 >= v22)
    {
LABEL_11:
      v19 = 4;
      goto LABEL_12;
    }
    goto LABEL_10;
  }
LABEL_6:
  objc_msgSend(v6, "right");
  v17 = v16;
  objc_msgSend(v5, "right");
  if (v17 >= v18)
    v19 = 2;
  else
    v19 = 3;
LABEL_12:

  return v19;
}

void sub_1D7A3835C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D7A38580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D7A3A888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL HKIndexForOverlaySleepRoomSegment(_BOOL8 result)
{
  if (result != 2)
    return result != 1;
  return result;
}

void sub_1D7A3FE18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D7A45468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCNContactPickerViewControllerClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!ContactsUILibraryCore_frameworkLibrary_0)
  {
    v4 = xmmword_1E9C45858;
    v5 = 0;
    ContactsUILibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  if (!ContactsUILibraryCore_frameworkLibrary_0)
    __getCNContactPickerViewControllerClass_block_invoke_cold_1(&v3);
  result = objc_getClass("CNContactPickerViewController");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getCNContactPickerViewControllerClass_block_invoke_cold_2();
  getCNContactPickerViewControllerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1D7A46454(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_1D7A471B0(void *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)&STACK[0x450]);
  _Block_object_dispose(&STACK[0x458], 8);
  _Block_object_dispose(&STACK[0x478], 8);
  objc_begin_catch(a1);
  objc_end_catch();
  JUMPOUT(0x1D7A47198);
}

_QWORD *HKCircularBufferCreate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  void *v7;
  void *v8;

  if (a1 < 1 || (unint64_t)(a2 - 1024) <= 0xFFFFFFFFFFFFFC00)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "HKCircularBufferRef HKCircularBufferCreate(NSInteger, NSInteger)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("HKCiruclarBuffer.m"), 26, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("(bufferLimit > 0) && (itemSize > 0) && (itemSize < HKCircularBufferMaxItemSize)"));

  }
  if (a1 >= 1000)
    v4 = 1000;
  else
    v4 = a1;
  v5 = malloc_type_malloc(0x28uLL, 0x108004003DAF236uLL);
  v5[1] = 0;
  v5[2] = 0;
  v5[3] = v4;
  v5[4] = a2;
  *v5 = malloc_type_malloc(v4 * a2, 0xEEAB7DACuLL);
  return v5;
}

void HKCircularBufferRelease(void **a1)
{
  void *v2;
  void *v3;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HKCircularBufferRelease(HKCircularBufferRef)");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("HKCiruclarBuffer.m"), 41, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("buffer != NULL"));

  }
  free(*a1);
  free(a1);
}

BOOL HKCircularBufferIsEmpty(uint64_t a1)
{
  void *v3;
  void *v4;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL HKCircularBufferIsEmpty(HKCircularBufferRef)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("HKCiruclarBuffer.m"), 47, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("buffer != NULL"));

  }
  return *(_QWORD *)(a1 + 16) == 0;
}

uint64_t HKCircularBufferCount(uint64_t a1)
{
  void *v3;
  void *v4;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "NSInteger HKCircularBufferCount(HKCircularBufferRef)");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", v4, CFSTR("HKCiruclarBuffer.m"), 52, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("buffer != NULL"));

  }
  return *(_QWORD *)(a1 + 16);
}

void HKCircularBufferClean(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HKCircularBufferClean(HKCircularBufferRef, HKCircularBufferPredicate, void *)");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, CFSTR("HKCiruclarBuffer.m"), 57, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("buffer != NULL"));

  }
  v6 = 0;
  v15 = 0;
  do
  {
    v7 = v6;
    if (!HKCircularBufferIteratorHasNext((uint64_t)a1, v15))
      break;
    v8 = HKCircularBufferIteratorNext(a1, &v15);
    v9 = a2(v8, a3);
    v6 = v7 - 1;
  }
  while ((v9 & 1) != 0);
  if (a1)
  {
    if (!v7)
      return;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void _HKCircularBufferRemoveNItems(HKCircularBufferRef, NSInteger)");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "handleFailureInFunction:file:lineNumber:description:", v14, CFSTR("HKCiruclarBuffer.m"), 115, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("buffer != NULL"));

    if (!v7)
      return;
  }
  v10 = (a1[2] + v7) & ~((a1[2] + v7) >> 63);
  a1[1] = (a1[1] - v7) % a1[3];
  a1[2] = v10;
}

uint64_t HKCircularBufferIteratorMake()
{
  return 0;
}

BOOL HKCircularBufferIteratorHasNext(uint64_t a1, uint64_t a2)
{
  void *v5;
  void *v6;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL HKCircularBufferIteratorHasNext(HKCircularBufferRef, HKCircularBufferIterator)");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v6, CFSTR("HKCiruclarBuffer.m"), 75, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("buffer != NULL"));

  }
  return *(_QWORD *)(a1 + 16) > a2;
}

uint64_t HKCircularBufferIteratorNext(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *HKCircularBufferIteratorNext(HKCircularBufferRef, HKCircularBufferIterator *)");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "handleFailureInFunction:file:lineNumber:description:", v9, CFSTR("HKCiruclarBuffer.m"), 80, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("buffer != NULL"));

    if (a2)
      goto LABEL_3;
LABEL_5:
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *HKCircularBufferIteratorNext(HKCircularBufferRef, HKCircularBufferIterator *)");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("HKCiruclarBuffer.m"), 81, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("iterator != NULL"));

    goto LABEL_3;
  }
  if (!a2)
    goto LABEL_5;
LABEL_3:
  v4 = *a1;
  v5 = *a2 + a1[1];
  v6 = a1[3];
  ++*a2;
  return v4 + a1[4] * (v5 % v6);
}

void *HKCircularBufferAddItem(uint64_t *a1, void *__src)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v11;
  void *v12;

  if (!a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void HKCircularBufferAddItem(HKCircularBufferRef, void *)");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "handleFailureInFunction:file:lineNumber:description:", v12, CFSTR("HKCiruclarBuffer.m"), 92, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("buffer != NULL"));

  }
  v4 = a1[2];
  v5 = a1[3];
  v7 = *a1;
  v6 = a1[1];
  v8 = (v4 + v6) % v5;
  if (v4 >= v5)
  {
    v9 = v6 + 1;
  }
  else
  {
    ++v4;
    v9 = a1[1];
  }
  a1[1] = v9;
  a1[2] = v4;
  return memcpy((void *)(v7 + a1[4] * v8), __src, a1[4]);
}

BOOL HKCodableAudiogramSensitivityPointReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  HKCodableQuantity *v18;
  uint64_t v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(HKCodableQuantity);
        v19 = 24;
      }
      else if ((_DWORD)v17 == 2)
      {
        v18 = objc_alloc_init(HKCodableQuantity);
        v19 = 16;
      }
      else
      {
        if ((_DWORD)v17 != 1)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
          continue;
        }
        v18 = objc_alloc_init(HKCodableQuantity);
        v19 = 8;
      }
      objc_storeStrong((id *)(a1 + v19), v18);
      if (!PBReaderPlaceMark() || (HKCodableQuantityReadFrom((uint64_t)v18, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HKCodableHealthRecordsEduContentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  HKCodableHealthRecordsEduSection *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(HKCodableHealthRecordsEduSection);
        objc_msgSend(a1, "addSections:", v17);
        if (!PBReaderPlaceMark() || (HKCodableHealthRecordsEduSectionReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HKCodableAFibBurdenValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  HKCodableDayIndexRange *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 28) |= 1u;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0)
            goto LABEL_37;
          v19 += 7;
          v14 = v20++ >= 9;
          if (v14)
          {
            v21 = 0;
            goto LABEL_39;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_39:
        *(_BYTE *)(a1 + 24) = v21 != 0;
      }
      else
      {
        if ((_DWORD)v17 == 2)
        {
          v18 = objc_alloc_init(HKCodableDayIndexRange);
          objc_storeStrong((id *)(a1 + 8), v18);
          if (!PBReaderPlaceMark() || !HKCodableDayIndexRangeReadFrom((uint64_t)v18, a2))
          {
LABEL_42:

            return 0;
          }
        }
        else
        {
          if ((_DWORD)v17 != 1)
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          v18 = objc_alloc_init(HKCodableQuantity);
          objc_storeStrong((id *)(a1 + 16), v18);
          if (!PBReaderPlaceMark() || (HKCodableQuantityReadFrom((uint64_t)v18, a2) & 1) == 0)
            goto LABEL_42;
        }
        PBReaderRecallMark();

      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HKCodableHealthRecordsSharableViewModelReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  void *v26;
  HKCodableHealthRecordsEduContent *v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 40;
        goto LABEL_30;
      case 2u:
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 84) |= 1u;
        while (2)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              v14 = v21++ >= 9;
              if (v14)
              {
                v22 = 0;
                goto LABEL_66;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v22 = 0;
LABEL_66:
        v44 = 8;
        goto LABEL_79;
      case 3u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 72;
LABEL_30:
        v26 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_80;
      case 4u:
        v27 = objc_alloc_init(HKCodableHealthRecordsEduContent);
        objc_storeStrong((id *)(a1 + 48), v27);
        if (!PBReaderPlaceMark() || (HKCodableHealthRecordsEduContentReadFrom(v27, a2) & 1) == 0)
          goto LABEL_82;
        goto LABEL_62;
      case 5u:
        v28 = 0;
        v29 = 0;
        v30 = 0;
        *(_BYTE *)(a1 + 84) |= 8u;
        while (2)
        {
          v31 = *v3;
          v32 = *(_QWORD *)(a2 + v31);
          if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
            *(_QWORD *)(a2 + v31) = v32 + 1;
            v30 |= (unint64_t)(v33 & 0x7F) << v28;
            if (v33 < 0)
            {
              v28 += 7;
              v14 = v29++ >= 9;
              if (v14)
              {
                v30 = 0;
                goto LABEL_70;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v30 = 0;
LABEL_70:
        *(_BYTE *)(a1 + 80) = v30 != 0;
        goto LABEL_80;
      case 6u:
        v27 = objc_alloc_init(HKCodableHealthRecordsIndividualRecord);
        objc_storeStrong((id *)(a1 + 56), v27);
        goto LABEL_43;
      case 7u:
        v27 = objc_alloc_init(HKCodableHealthRecordsIndividualRecord);
        objc_msgSend((id)a1, "addAllRecords:", v27);
LABEL_43:
        if (!PBReaderPlaceMark()
          || (HKCodableHealthRecordsIndividualRecordReadFrom((uint64_t)v27, a2) & 1) == 0)
        {
          goto LABEL_82;
        }
        goto LABEL_62;
      case 8u:
        v34 = 0;
        v35 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 84) |= 2u;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v22 |= (unint64_t)(v38 & 0x7F) << v34;
            if (v38 < 0)
            {
              v34 += 7;
              v14 = v35++ >= 9;
              if (v14)
              {
                v22 = 0;
                goto LABEL_74;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v22 = 0;
LABEL_74:
        v44 = 16;
        goto LABEL_79;
      case 9u:
        v39 = 0;
        v40 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 84) |= 4u;
        while (2)
        {
          v41 = *v3;
          v42 = *(_QWORD *)(a2 + v41);
          if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
            *(_QWORD *)(a2 + v41) = v42 + 1;
            v22 |= (unint64_t)(v43 & 0x7F) << v39;
            if (v43 < 0)
            {
              v39 += 7;
              v14 = v40++ >= 9;
              if (v14)
              {
                v22 = 0;
                goto LABEL_78;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v22 = 0;
LABEL_78:
        v44 = 24;
LABEL_79:
        *(_QWORD *)(a1 + v44) = v22;
        goto LABEL_80;
      case 0xAu:
        v27 = objc_alloc_init(HKCodableHealthRecordsLocalizedEducationContent);
        objc_storeStrong((id *)(a1 + 64), v27);
        if (PBReaderPlaceMark()
          && (HKCodableHealthRecordsLocalizedEducationContentReadFrom(v27, a2) & 1) != 0)
        {
LABEL_62:
          PBReaderRecallMark();

LABEL_80:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_82:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_80;
    }
  }
}

uint64_t HKCodableSampleDataSourceQueryDataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  HKCodableSampleChartData *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(HKCodableSampleChartData);
        objc_msgSend(a1, "addSamples:", v17);
        if (!PBReaderPlaceMark() || (HKCodableSampleChartDataReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1D7A52BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HKCodableSummaryVisionPrescriptionValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  HKCodablePrescriptionType *v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 44) |= 1u;
        v18 = *v3;
        v19 = *(_QWORD *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
          *(_QWORD *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v20 = 0;
        }
        *(_QWORD *)(a1 + 8) = v20;
        goto LABEL_45;
      case 3u:
        v22 = objc_alloc_init(HKCodablePrescriptionType);
        objc_storeStrong((id *)(a1 + 24), v22);
        if (!PBReaderPlaceMark() || (HKCodablePrescriptionTypeReadFrom((uint64_t)v22, a2) & 1) == 0)
          goto LABEL_47;
        goto LABEL_38;
      case 4u:
        v23 = 0;
        v24 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 44) |= 2u;
        while (2)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          v28 = v27 + 1;
          if (v27 == -1 || v28 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
            *(_QWORD *)(a2 + v26) = v28;
            v25 |= (unint64_t)(v29 & 0x7F) << v23;
            if (v29 < 0)
            {
              v23 += 7;
              v15 = v24++ >= 9;
              if (v15)
              {
                v25 = 0;
                goto LABEL_42;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
LABEL_42:
        *(_BYTE *)(a1 + 40) = v25 != 0;
        goto LABEL_45;
      case 5u:
        v22 = objc_alloc_init(HKCodableQuantity);
        v30 = 16;
        goto LABEL_36;
      case 6u:
        v22 = objc_alloc_init(HKCodableQuantity);
        v30 = 32;
LABEL_36:
        objc_storeStrong((id *)(a1 + v30), v22);
        if (PBReaderPlaceMark() && (HKCodableQuantityReadFrom((uint64_t)v22, a2) & 1) != 0)
        {
LABEL_38:
          PBReaderRecallMark();

LABEL_45:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_47:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_45;
    }
  }
}

void sub_1D7A5548C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1D7A56038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D7A56370(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1D7A57110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D7A578CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1D7A57BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 224), 8);
  _Unwind_Resume(a1);
}

void sub_1D7A5AF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D7A5C244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D7A5CCF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D7A6061C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HKCodableSummaryAudioExposureValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  HKCodableQuantity *v18;
  uint64_t result;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v18 = objc_alloc_init(HKCodableQuantity);
          objc_storeStrong((id *)(a1 + 32), v18);
          if (PBReaderPlaceMark() && (HKCodableQuantityReadFrom((uint64_t)v18, a2) & 1) != 0)
          {
            PBReaderRecallMark();

            continue;
          }

          return 0;
        case 2u:
          *(_BYTE *)(a1 + 40) |= 4u;
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v22 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v22 = 0;
          }
          v32 = 24;
          goto LABEL_45;
        case 3u:
          v23 = 0;
          v24 = 0;
          v25 = 0;
          *(_BYTE *)(a1 + 40) |= 1u;
          break;
        case 4u:
          *(_BYTE *)(a1 + 40) |= 2u;
          v30 = *v3;
          v31 = *(_QWORD *)(a2 + v30);
          if (v31 <= 0xFFFFFFFFFFFFFFF7 && v31 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v22 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v31);
            *(_QWORD *)(a2 + v30) = v31 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v22 = 0;
          }
          v32 = 16;
LABEL_45:
          *(_QWORD *)(a1 + v32) = v22;
          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v26 = *v3;
        v27 = *(_QWORD *)(a2 + v26);
        v28 = v27 + 1;
        if (v27 == -1 || v28 > *(_QWORD *)(a2 + *v4))
          break;
        v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
        *(_QWORD *)(a2 + v26) = v28;
        v25 |= (unint64_t)(v29 & 0x7F) << v23;
        if ((v29 & 0x80) == 0)
          goto LABEL_38;
        v23 += 7;
        v15 = v24++ >= 9;
        if (v15)
        {
          v25 = 0;
          goto LABEL_40;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_38:
      if (*(_BYTE *)(a2 + *v5))
        v25 = 0;
LABEL_40:
      *(_QWORD *)(a1 + 8) = v25;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HKCodableChartQuantityDistributionDataSourceQueryDataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  HKCodableQuantityDistributionData *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(HKCodableQuantityDistributionData);
        objc_msgSend(a1, "addQuantityDistributionData:", v17);
        if (!PBReaderPlaceMark() || (HKCodableQuantityDistributionDataReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HKCodableSummaryPHQ9AssessmentValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t result;
  uint64_t v36;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v22 = 0;
        v23 = 0;
        v24 = 0;
        *(_BYTE *)(a1 + 32) |= 2u;
        while (1)
        {
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          v27 = v26 + 1;
          if (v26 == -1 || v27 > *(_QWORD *)(a2 + *v4))
            break;
          v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v26);
          *(_QWORD *)(a2 + v25) = v27;
          v24 |= (unint64_t)(v28 & 0x7F) << v22;
          if ((v28 & 0x80) == 0)
            goto LABEL_41;
          v22 += 7;
          v15 = v23++ >= 9;
          if (v15)
          {
            v24 = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          v24 = 0;
LABEL_43:
        v36 = 16;
      }
      else
      {
        if ((_DWORD)v18 != 2)
        {
          if ((_DWORD)v18 == 1)
          {
            *(_BYTE *)(a1 + 32) |= 1u;
            v19 = *v3;
            v20 = *(_QWORD *)(a2 + v19);
            if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + *v4))
            {
              v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v20);
              *(_QWORD *)(a2 + v19) = v20 + 8;
            }
            else
            {
              *(_BYTE *)(a2 + *v5) = 1;
              v21 = 0;
            }
            *(_QWORD *)(a1 + 8) = v21;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v29 = 0;
        v30 = 0;
        v24 = 0;
        *(_BYTE *)(a1 + 32) |= 4u;
        while (1)
        {
          v31 = *v3;
          v32 = *(_QWORD *)(a2 + v31);
          v33 = v32 + 1;
          if (v32 == -1 || v33 > *(_QWORD *)(a2 + *v4))
            break;
          v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
          *(_QWORD *)(a2 + v31) = v33;
          v24 |= (unint64_t)(v34 & 0x7F) << v29;
          if ((v34 & 0x80) == 0)
            goto LABEL_45;
          v29 += 7;
          v15 = v30++ >= 9;
          if (v15)
          {
            v24 = 0;
            goto LABEL_47;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
        if (*(_BYTE *)(a2 + *v5))
          v24 = 0;
LABEL_47:
        v36 = 24;
      }
      *(_QWORD *)(a1 + v36) = v24;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void HKAffineTransformFromLinearTransforms(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *(double *)a1 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(double *)(a1 + 24) = a5;
  *(double *)(a1 + 32) = a2;
  *(double *)(a1 + 40) = a4;
}

double HKLinearTransformValue(double a1, double a2, double a3)
{
  return a1 + a3 * a2;
}

double HKLinearTransformInvert(double a1, double a2)
{
  return -a1 / a2;
}

double HKLinearTransformConcat(double a1, double a2, double a3, double a4)
{
  return a3 + a1 * a4;
}

BOOL HKLinearTransformEqualToTransform(double a1, double a2, double a3, double a4)
{
  double v4;
  double v5;

  v4 = a2 - a4;
  if (v4 < 0.0)
    v4 = -v4;
  v5 = a1 - a3;
  if (v5 < 0.0)
    v5 = -v5;
  return v5 < 0.00000011920929 && v4 < 0.00000011920929;
}

double HKLinearTransformRange(double a1, double a2, double a3)
{
  return a1 + a3 * a2;
}

void sub_1D7A695DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;

  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&a71, 8);
  _Unwind_Resume(a1);
}

void sub_1D7A6A2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D7A6A454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D7A6C080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D7A6C124(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1D7A6C764(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1D7A6CBCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D7A6CCCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D7A6CE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D7A6CFFC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

Class __getWKWebViewConfigurationClass_block_invoke(uint64_t a1)
{
  Class result;

  WebKitLibrary();
  result = objc_getClass("WKWebViewConfiguration");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getWKWebViewConfigurationClass_block_invoke_cold_1();
  getWKWebViewConfigurationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void WebKitLibrary()
{
  void *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = 0;
  if (!WebKitLibraryCore_frameworkLibrary)
  {
    v1 = xmmword_1E9C46018;
    v2 = 0;
    WebKitLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!WebKitLibraryCore_frameworkLibrary)
    WebKitLibrary_cold_1(&v0);
}

Class __getWKWebViewClass_block_invoke(uint64_t a1)
{
  Class result;

  WebKitLibrary();
  result = objc_getClass("WKWebView");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getWKWebViewClass_block_invoke_cold_1();
  getWKWebViewClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t HKCodableElectrocardiogramDataSourceQueryDataReadFrom(_BYTE *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  HKCodableElectrocardiogramSample *v29;
  uint64_t result;
  uint64_t v31;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 != 2)
      {
        if ((_DWORD)v17 != 1)
        {
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          goto LABEL_49;
        }
        v18 = 0;
        v19 = 0;
        v20 = 0;
        a1[32] |= 2u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_41;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v20 = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_43:
        v31 = 16;
        goto LABEL_48;
      }
      v29 = objc_alloc_init(HKCodableElectrocardiogramSample);
      objc_msgSend(a1, "addSamples:", v29);
      if (!PBReaderPlaceMark() || (HKCodableElectrocardiogramSampleReadFrom((uint64_t)v29, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();

LABEL_49:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v24 = 0;
    v25 = 0;
    v20 = 0;
    a1[32] |= 1u;
    while (1)
    {
      v26 = *v3;
      v27 = *(_QWORD *)(a2 + v26);
      if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
        break;
      v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
      *(_QWORD *)(a2 + v26) = v27 + 1;
      v20 |= (unint64_t)(v28 & 0x7F) << v24;
      if ((v28 & 0x80) == 0)
        goto LABEL_45;
      v24 += 7;
      v14 = v25++ >= 9;
      if (v14)
      {
        v20 = 0;
        goto LABEL_47;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
    if (*(_BYTE *)(a2 + *v5))
      v20 = 0;
LABEL_47:
    v31 = 8;
LABEL_48:
    *(_QWORD *)&a1[v31] = v20;
    goto LABEL_49;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id HKAudiogramEarLocalizedDisplayNameForEar(uint64_t a1, char a2)
{
  void *v3;
  const __CFString *v4;
  void *v5;

  if (a1 == 2)
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if ((a2 & 1) != 0)
      v4 = CFSTR("RIGHT_ABBREVIATED");
    else
      v4 = CFSTR("RIGHT_FULL");
    goto LABEL_10;
  }
  if (a1 == 1)
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if ((a2 & 1) != 0)
      v4 = CFSTR("LEFT_ABBREVIATED");
    else
      v4 = CFSTR("LEFT_FULL");
LABEL_10:
    objc_msgSend(v3, "localizedStringForKey:value:table:", v4, &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    return v5;
  }
  v5 = 0;
  return v5;
}

__CFString *HKAudiogramEarLocalizedKeyForEar(uint64_t a1, int a2)
{
  __CFString *v2;
  const __CFString *v3;

  if (a1 == 2)
  {
    v2 = CFSTR("RIGHT_FULL");
    v3 = CFSTR("RIGHT_ABBREVIATED");
  }
  else
  {
    if (a1 != 1)
      return &stru_1E9C4C428;
    v2 = CFSTR("LEFT_FULL");
    v3 = CFSTR("LEFT_ABBREVIATED");
  }
  if (a2)
    v2 = (__CFString *)v3;
  return v2;
}

void sub_1D7A72FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void HKUIAddDefaultSampleDetailValuesToSection(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  double v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  _QWORD v48[2];
  _QWORD v49[2];
  _QWORD v50[2];
  _QWORD v51[2];
  _QWORD v52[3];

  v52[2] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend(v3, "sampleType");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "identifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  HKDateFormatterFromTemplate(32);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "startDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "endDate");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v8, "isEqualToDate:", v9);

  objc_msgSend(v3, "startDate");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "stringFromDate:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "localizedStringForKey:value:table:", CFSTR("DATE"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v52[0] = v6;
    v52[1] = CFSTR("Date");
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v52, 2);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    HKUIJoinStringsForAutomationIdentifier(v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addText:detail:baseIdentifier:", v12, v14, v16);
  }
  else
  {
    v17 = v6;
    objc_msgSend(v3, "endDate");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "stringFromDate:", v18);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    v19 = v4;
    if (objc_msgSend(v3, "hasUndeterminedDuration"))
    {
      objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "localizedStringForKey:value:table:", CFSTR("ONGOING_DATE"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
      v21 = objc_claimAutoreleasedReturnValue();

      v13 = (void *)v21;
    }
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"), v7);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "localizedStringForKey:value:table:", CFSTR("START_TIME"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = v17;
    v51[0] = v17;
    v51[1] = CFSTR("StartTime");
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v51, 2);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    HKUIJoinStringsForAutomationIdentifier(v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "addText:detail:baseIdentifier:", v12, v23, v26);

    v4 = v19;
    v6 = v24;
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "localizedStringForKey:value:table:", CFSTR("END_TIME"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v50[0] = v24;
    v50[1] = CFSTR("EndTime");
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v50, 2);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    HKUIJoinStringsForAutomationIdentifier(v16);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addText:detail:baseIdentifier:", v13, v15, v27);

    v7 = v45;
  }

  objc_msgSend(v3, "_source");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "name");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  if (v29)
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "localizedStringForKey:value:table:", CFSTR("SOURCE"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v49[0] = v6;
    v49[1] = CFSTR("Source");
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v49, 2);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    HKUIJoinStringsForAutomationIdentifier(v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addText:detail:baseIdentifier:", v29, v31, v33);

  }
  objc_msgSend(v3, "_creationTimestamp");
  if (v34 != 2.22507386e-308)
  {
    objc_msgSend(v3, "_creationDate");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "stringFromDate:", v47);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.HealthUI"));
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "localizedStringForKey:value:table:", CFSTR("DATE_ADDED_TO_HEALTH"), &stru_1E9C4C428, CFSTR("HealthUI-Localizable"));
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v48[0] = v6;
    v48[1] = CFSTR("DateAdded");
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v48, 2);
    v37 = v29;
    v38 = v28;
    v39 = v6;
    v40 = v4;
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    HKUIJoinStringsForAutomationIdentifier(v41);
    v42 = v3;
    v43 = v7;
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "addText:detail:baseIdentifier:", v35, v36, v44);

    v7 = v43;
    v3 = v42;

    v4 = v40;
    v6 = v39;
    v28 = v38;
    v29 = v37;

  }
}

__CFString *HKOrganDonationFlowImpressionEventAsString(uint64_t a1)
{
  __CFString *v1;

  if (!(_DWORD)a1)
    return CFSTR("SetUpBuddy");
  if ((_DWORD)a1 == 1)
  {
    v1 = CFSTR("MedicalID");
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), a1);
    v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  return v1;
}

void sub_1D7A7F3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCNLabeledValueClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!ContactsUILibraryCore_frameworkLibrary_1)
  {
    v4 = xmmword_1E9C46200;
    v5 = 0;
    ContactsUILibraryCore_frameworkLibrary_1 = _sl_dlopen();
  }
  if (!ContactsUILibraryCore_frameworkLibrary_1)
    __getCNLabeledValueClass_block_invoke_cold_1(&v3);
  result = objc_getClass("CNLabeledValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getCNLabeledValueClass_block_invoke_cold_2();
  getCNLabeledValueClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t HKCodableElectrocardiogramSampleReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  HKCodableDateInterval *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  void *v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(HKCodableDateInterval);
        objc_storeStrong((id *)(a1 + 48), v17);
        if (PBReaderPlaceMark() && HKCodableDateIntervalReadFrom((uint64_t)v17, a2))
          goto LABEL_33;
        goto LABEL_75;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 64) |= 2u;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_59;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_59:
        v42 = 16;
        goto LABEL_72;
      case 3u:
        v17 = objc_alloc_init(HKCodableQuantity);
        objc_storeStrong((id *)(a1 + 40), v17);
        if (PBReaderPlaceMark() && (HKCodableQuantityReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_33:
          PBReaderRecallMark();

LABEL_73:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_75:

        return 0;
      case 4u:
        v25 = 0;
        v26 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 64) |= 8u;
        while (2)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v21 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_63;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_63:
        v42 = 32;
        goto LABEL_72;
      case 5u:
        v30 = 0;
        v31 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 64) |= 4u;
        while (2)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
            *(_QWORD *)(a2 + v32) = v33 + 1;
            v21 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              v14 = v31++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_67;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_67:
        v42 = 24;
        goto LABEL_72;
      case 6u:
        PBReaderReadData();
        v35 = objc_claimAutoreleasedReturnValue();
        v36 = *(void **)(a1 + 56);
        *(_QWORD *)(a1 + 56) = v35;

        goto LABEL_73;
      case 7u:
        v37 = 0;
        v38 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 64) |= 1u;
        while (2)
        {
          v39 = *v3;
          v40 = *(_QWORD *)(a2 + v39);
          if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
            *(_QWORD *)(a2 + v39) = v40 + 1;
            v21 |= (unint64_t)(v41 & 0x7F) << v37;
            if (v41 < 0)
            {
              v37 += 7;
              v14 = v38++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_71;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_71:
        v42 = 8;
LABEL_72:
        *(_QWORD *)(a1 + v42) = v21;
        goto LABEL_73;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_73;
    }
  }
}

void sub_1D7A884C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id HKBluetoothIcon()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v0 = (void *)MEMORY[0x1E0DC3870];
  HKHealthUIFrameworkBundle();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "imageNamed:inBundle:", CFSTR("bluetooth_sharing"), v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0DC3658], "hk_sourceIconTintColor");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_flatImageWithColor:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id HKDeviceImage(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  CGContext *CurrentContext;
  id v9;
  uint64_t v10;
  void *v11;
  CGSize v13;
  CGRect v14;
  CGRect v15;

  v1 = a1;
  if (!v1)
    goto LABEL_3;
  v2 = (void *)MEMORY[0x1E0DC3870];
  HKHealthUIFrameworkBundle();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "imageNamed:inBundle:", v1, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0DC3658], "hk_sourceIconTintColor");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "_flatImageWithColor:", v5);
  v6 = (id)objc_claimAutoreleasedReturnValue();

  if (!v6)
  {
LABEL_3:
    v7 = (void *)HKDeviceImage_fallback;
    if (!HKDeviceImage_fallback)
    {
      v13.width = 29.0;
      v13.height = 29.0;
      UIGraphicsBeginImageContextWithOptions(v13, 1, 0.0);
      CurrentContext = UIGraphicsGetCurrentContext();
      if (objc_msgSend(MEMORY[0x1E0CB6F18], "isAppleInternalInstall"))
      {
        CGContextSetRGBFillColor(CurrentContext, 0.800000012, 0.800000012, 0.800000012, 1.0);
        v14.origin.x = 0.0;
        v14.origin.y = 0.0;
        v14.size.width = 29.0;
        v14.size.height = 29.0;
        CGContextFillRect(CurrentContext, v14);
        CGContextSetRGBStrokeColor(CurrentContext, 0.899999976, 0.100000001, 0.100000001, 1.0);
        CGContextMoveToPoint(CurrentContext, 0.0, 0.0);
        CGContextAddLineToPoint(CurrentContext, 29.0, 29.0);
        CGContextMoveToPoint(CurrentContext, 0.0, 29.0);
        CGContextAddLineToPoint(CurrentContext, 29.0, 0.0);
        CGContextStrokePath(CurrentContext);
      }
      else
      {
        CGContextSetRGBFillColor(CurrentContext, 1.0, 1.0, 1.0, 1.0);
        v15.origin.x = 0.0;
        v15.origin.y = 0.0;
        v15.size.width = 29.0;
        v15.size.height = 29.0;
        CGContextFillRect(CurrentContext, v15);
        objc_msgSend(MEMORY[0x1E0DC3658], "hk_sourceIconTintColor");
        v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        CGContextSetFillColorWithColor(CurrentContext, (CGColorRef)objc_msgSend(v9, "CGColor"));

        CGContextAddArc(CurrentContext, 14.5, 14.5, 7.25, 0.0, 6.28318531, 1);
        CGContextFillPath(CurrentContext);
      }
      UIGraphicsGetImageFromCurrentImageContext();
      v10 = objc_claimAutoreleasedReturnValue();
      UIGraphicsEndImageContext();
      v11 = (void *)HKDeviceImage_fallback;
      HKDeviceImage_fallback = v10;

      v7 = (void *)HKDeviceImage_fallback;
    }
    v6 = v7;
  }

  return v6;
}

__CFString *HKOrganDonationErrorTypeAsString(uint64_t a1)
{
  if (a1 < 5)
    return off_1E9C464B0[(int)a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

uint64_t HKDisplayCategoryIdentifierFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayCategoryIdentifierVitalSigns")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayCategoryIdentifierFitness")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayCategoryIdentifierNutrition")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayCategoryIdentifierSleep")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayCategoryIdentifierBodyMeasurements")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayCategoryIdentifierMe")) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayCategoryIdentifierReproductiveHealth")) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayCategoryIdentifierClinicalDocuments")) & 1) != 0)
  {
    v2 = 9;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayCategoryIdentifierMindfulness")) & 1) != 0)
  {
    v2 = 10;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayCategoryIdentifierHeart")) & 1) != 0)
  {
    v2 = 11;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayCategoryIdentifierHearingHealth")) & 1) != 0)
  {
    v2 = 12;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayCategoryIdentifierRespiratory")) & 1) != 0)
  {
    v2 = 13;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayCategoryIdentifierOther")) & 1) != 0)
  {
    v2 = 14;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayCategoryIdentifierHealthRecords")) & 1) != 0)
  {
    v2 = 15;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayCategoryIdentifierAllergies")) & 1) != 0)
  {
    v2 = 16;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayCategoryIdentifierClinicalVitals")) & 1) != 0)
  {
    v2 = 17;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayCategoryIdentifierConditions")) & 1) != 0)
  {
    v2 = 18;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayCategoryIdentifierImmunizations")) & 1) != 0)
  {
    v2 = 19;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayCategoryIdentifierLabResults")) & 1) != 0)
  {
    v2 = 20;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayCategoryIdentifierMedications")) & 1) != 0)
  {
    v2 = 21;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayCategoryIdentifierProcedures")) & 1) != 0)
  {
    v2 = 22;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayCategoryIdentifierMobility")) & 1) != 0)
  {
    v2 = 23;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayCategoryIdentifierSymptoms")) & 1) != 0)
  {
    v2 = 26;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayCategoryIdentifierInsurance")) & 1) != 0)
  {
    v2 = 27;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayCategoryIdentifierClinicalNotes")) & 1) != 0)
  {
    v2 = 30;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayCategoryIdentifierMedicationTracking")))
  {
    v2 = 31;
  }
  else
  {
    v2 = -1;
  }

  return v2;
}

__CFString *HKDisplayCategoryIdentifierToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x1E)
    return 0;
  else
    return off_1E9C46500[a1 - 1];
}

uint64_t HKCodableSummaryWalkingSteadinessValueReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  HKCodableLevelViewDataConfiguration *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(HKCodableLevelViewDataConfiguration);
        objc_storeStrong((id *)(a1 + 16), v18);
        if (!PBReaderPlaceMark() || (HKCodableLevelViewDataConfigurationReadFrom(v18, a2) & 1) == 0)
        {
LABEL_42:

          return 0;
        }
      }
      else
      {
        if ((_DWORD)v17 == 2)
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 32) |= 1u;
          while (1)
          {
            v22 = *v3;
            v23 = *(_QWORD *)(a2 + v22);
            if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
              break;
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0)
              goto LABEL_37;
            v19 += 7;
            v14 = v20++ >= 9;
            if (v14)
            {
              v21 = 0;
              goto LABEL_39;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
          if (*(_BYTE *)(a2 + *v5))
            v21 = 0;
LABEL_39:
          *(_QWORD *)(a1 + 8) = v21;
          continue;
        }
        if ((_DWORD)v17 != 1)
        {
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
        }
        v18 = objc_alloc_init(HKCodableSummaryQuantityValue);
        objc_storeStrong((id *)(a1 + 24), v18);
        if (!PBReaderPlaceMark() || (HKCodableSummaryQuantityValueReadFrom((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_42;
      }
      PBReaderRecallMark();

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id _workoutValidationRanges()
{
  if (_workoutValidationRanges_onceToken[0] != -1)
    dispatch_once(_workoutValidationRanges_onceToken, &__block_literal_global_86);
  return (id)_workoutValidationRanges_workoutPropertyKeyToRangeDict;
}

void ___workoutValidationRanges_block_invoke()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  _QWORD v36[2];
  _QWORD v37[2];
  _QWORD v38[2];
  _QWORD v39[2];
  _QWORD v40[2];
  _QWORD v41[4];

  v41[2] = *MEMORY[0x1E0C80C00];
  v40[0] = CFSTR("_HKManualEntryWorkoutDistanceKey");
  v38[0] = CFSTR("_HKManualEntryConfirmRangeKey");
  v0 = (void *)MEMORY[0x1E0CB6A38];
  v1 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mi"));
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "quantityWithUnit:doubleValue:", v35, 0.0);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mi"));
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "quantityWithUnit:doubleValue:", v34, 150.0);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "inclusiveRangeWithMinimum:maximum:", v33, v32);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v39[0] = v31;
  v38[1] = CFSTR("_HKManualEntryAbsoluteRangeKey");
  v3 = (void *)MEMORY[0x1E0CB6A38];
  v4 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mi"));
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "quantityWithUnit:doubleValue:", v30, 0.0);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("mi"));
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "quantityWithUnit:doubleValue:", v29, 500.0);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "inclusiveRangeWithMinimum:maximum:", v28, v27);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v39[1] = v26;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v39, v38, 2);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v40[1] = CFSTR("_HKManualEntryWorkoutEnergyBurnedKey");
  v41[0] = v25;
  v36[0] = CFSTR("_HKManualEntryConfirmRangeKey");
  v6 = (void *)MEMORY[0x1E0CB6A38];
  v7 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("kcal"));
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "quantityWithUnit:doubleValue:", v24, 0.0);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("kcal"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "quantityWithUnit:doubleValue:", v9, 4000.0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "inclusiveRangeWithMinimum:maximum:", v23, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v36[1] = CFSTR("_HKManualEntryAbsoluteRangeKey");
  v37[0] = v11;
  v12 = (void *)MEMORY[0x1E0CB6A38];
  v13 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("kcal"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "quantityWithUnit:doubleValue:", v14, 0.0);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = (void *)MEMORY[0x1E0CB6A28];
  objc_msgSend(MEMORY[0x1E0CB6CD0], "unitFromString:", CFSTR("kcal"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "quantityWithUnit:doubleValue:", v17, 10000.0);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "inclusiveRangeWithMinimum:maximum:", v15, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v37[1] = v19;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v37, v36, 2);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v41[1] = v20;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v41, v40, 2);
  v21 = objc_claimAutoreleasedReturnValue();
  v22 = (void *)_workoutValidationRanges_workoutPropertyKeyToRangeDict;
  _workoutValidationRanges_workoutPropertyKeyToRangeDict = v21;

}

void sub_1D7A91010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  uint64_t v21;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v21 - 80));
  _Unwind_Resume(a1);
}

void sub_1D7A938C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

id OUTLINED_FUNCTION_3_10(id a1)
{
  return a1;
}

void sub_1D7A94460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v39 - 240), 8);
  _Unwind_Resume(a1);
}

void sub_1D7A963D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t HKDisplayTypeIdentifierFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierBodyMassIndex")) & 1) != 0)
  {
    v2 = 0;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierBodyFatPercentage")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierHeight")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierBodyMass")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierLeanBodyMass")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierHeartRate")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierSteps")) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDistanceWalkingRunning")) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierBasalEnergyBurned")) & 1) != 0)
  {
    v2 = 9;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierActiveEnergy")) & 1) != 0)
  {
    v2 = 10;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierFlightsClimbed")) & 1) != 0)
  {
    v2 = 12;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierNikeFuel")) & 1) != 0)
  {
    v2 = 13;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierOxygenSaturation")) & 1) != 0)
  {
    v2 = 14;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierBloodGlucose")) & 1) != 0)
  {
    v2 = 15;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierBloodAlcoholContent")) & 1) != 0)
  {
    v2 = 18;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierPeripheralPerfusionIndex")) & 1) != 0)
  {
    v2 = 19;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryFatTotal")) & 1) != 0)
  {
    v2 = 20;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryFatPolyunsaturated")) & 1) != 0)
  {
    v2 = 21;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryFatMonounsaturated")) & 1) != 0)
  {
    v2 = 22;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryFatSaturated")) & 1) != 0)
  {
    v2 = 23;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryCholesterol")) & 1) != 0)
  {
    v2 = 24;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietarySodium")) & 1) != 0)
  {
    v2 = 25;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryCarbohydrates")) & 1) != 0)
  {
    v2 = 26;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryFiber")) & 1) != 0)
  {
    v2 = 27;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietarySugar")) & 1) != 0)
  {
    v2 = 28;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryEnergy")) & 1) != 0)
  {
    v2 = 29;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryProtein")) & 1) != 0)
  {
    v2 = 30;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryVitaminA")) & 1) != 0)
  {
    v2 = 31;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryVitaminB6")) & 1) != 0)
  {
    v2 = 32;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryVitaminB12")) & 1) != 0)
  {
    v2 = 33;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryVitaminC")) & 1) != 0)
  {
    v2 = 34;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryVitaminD")) & 1) != 0)
  {
    v2 = 35;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryVitaminE")) & 1) != 0)
  {
    v2 = 36;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryVitaminK")) & 1) != 0)
  {
    v2 = 37;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryCalcium")) & 1) != 0)
  {
    v2 = 38;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryIron")) & 1) != 0)
  {
    v2 = 39;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryThiamin")) & 1) != 0)
  {
    v2 = 40;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryRiboflavin")) & 1) != 0)
  {
    v2 = 41;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryNiacin")) & 1) != 0)
  {
    v2 = 42;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryFolate")) & 1) != 0)
  {
    v2 = 43;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryBiotin")) & 1) != 0)
  {
    v2 = 44;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryPantothenicAcid")) & 1) != 0)
  {
    v2 = 45;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryPhosphorus")) & 1) != 0)
  {
    v2 = 46;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryIodine")) & 1) != 0)
  {
    v2 = 47;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryMagnesium")) & 1) != 0)
  {
    v2 = 48;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryZinc")) & 1) != 0)
  {
    v2 = 49;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietarySelenium")) & 1) != 0)
  {
    v2 = 50;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryCopper")) & 1) != 0)
  {
    v2 = 51;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryManganese")) & 1) != 0)
  {
    v2 = 52;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryChromium")) & 1) != 0)
  {
    v2 = 53;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryMolybdenum")) & 1) != 0)
  {
    v2 = 54;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryChloride")) & 1) != 0)
  {
    v2 = 55;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryPotassium")) & 1) != 0)
  {
    v2 = 56;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierNumberOfTimesFallen")) & 1) != 0)
  {
    v2 = 57;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierElectrodermalActivity")) & 1) != 0)
  {
    v2 = 58;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierInhalerUsage")) & 1) != 0)
  {
    v2 = 60;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierRespiratoryRate")) & 1) != 0)
  {
    v2 = 61;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierBodyTemperature")) & 1) != 0)
  {
    v2 = 62;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierSleepAnalysis")) & 1) != 0)
  {
    v2 = 63;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierBiologicalSex")) & 1) != 0)
  {
    v2 = 64;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDateOfBirth")) & 1) != 0)
  {
    v2 = 65;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierBloodType")) & 1) != 0)
  {
    v2 = 66;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierAppleStandHour")) & 1) != 0)
  {
    v2 = 70;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierForcedVitalCapacity")) & 1) != 0)
  {
    v2 = 71;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierForcedExpiratoryVolume1")) & 1) != 0)
  {
    v2 = 72;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierPeakExpiratoryFlowRate")) & 1) != 0)
  {
    v2 = 73;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierAppleExerciseTime")) & 1) != 0)
  {
    v2 = 75;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryCaffeine")) & 1) != 0)
  {
    v2 = 78;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierWorkout")) & 1) != 0)
  {
    v2 = 79;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierBloodPressure")) & 1) != 0)
  {
    v2 = 80;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierCyclingDistance")) & 1) != 0)
  {
    v2 = 83;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDietaryWater")) & 1) != 0)
  {
    v2 = 87;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierFitzpatrickSkinType")) & 1) != 0)
  {
    v2 = 88;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierUVExposure")) & 1) != 0)
  {
    v2 = 89;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierBasalBodyTemperature")) & 1) != 0)
  {
    v2 = 90;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierCervicalMucusQuality")) & 1) != 0)
  {
    v2 = 91;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierOvulationTestResult")) & 1) != 0)
  {
    v2 = 92;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierMenstruation")) & 1) != 0)
  {
    v2 = 95;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierIntermenstrualBleeding")) & 1) != 0)
  {
    v2 = 96;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierSexualActivity")) & 1) != 0)
  {
    v2 = 97;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierMindfulSession")) & 1) != 0)
  {
    v2 = 99;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierActivitySummary")) & 1) != 0)
  {
    v2 = 100;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierPushCount")) & 1) != 0)
  {
    v2 = 101;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierLocationSeries")) & 1) != 0)
  {
    v2 = 102;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierWheelchairUse")) & 1) != 0)
  {
    v2 = 103;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierCDADocument")) & 1) != 0)
  {
    v2 = 107;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierSwimmingDistance")) & 1) != 0)
  {
    v2 = 110;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierSwimmingStrokes")) & 1) != 0)
  {
    v2 = 111;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierWheelchairDistance")) & 1) != 0)
  {
    v2 = 113;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierWaistCircumference")) & 1) != 0)
  {
    v2 = 114;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierRestingHeartRate")) & 1) != 0)
  {
    v2 = 118;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierHeartbeatSeries")) & 1) != 0)
  {
    v2 = 119;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierVO2Max")) & 1) != 0)
  {
    v2 = 124;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierInsulinDelivery")) & 1) != 0)
  {
    v2 = 125;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierWalkingHeartRateAverage")) & 1) != 0)
  {
    v2 = 137;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDownhillSnowSportsDistance")) & 1) != 0)
  {
    v2 = 138;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierHeartRateVariability")) & 1) != 0)
  {
    v2 = 139;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierTachycardiaEvent")) & 1) != 0)
  {
    v2 = 140;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierElectrocardiogram")) & 1) != 0)
  {
    v2 = 144;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierAudiogram")) & 1) != 0)
  {
    v2 = 145;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierBradycardiaEvent")) & 1) != 0)
  {
    v2 = 147;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierAllergyRecord")) & 1) != 0)
  {
    v2 = 149;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierConditionRecord")) & 1) != 0)
  {
    v2 = 150;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierImmunizationRecord")) & 1) != 0)
  {
    v2 = 151;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierLabResultRecord")) & 1) != 0)
  {
    v2 = 152;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierMedicationRecord")) & 1) != 0)
  {
    v2 = 153;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierProcedureRecord")) & 1) != 0)
  {
    v2 = 154;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierVitalSignRecord")) & 1) != 0)
  {
    v2 = 155;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierAtrialFibrillationEvent")) & 1) != 0)
  {
    v2 = 156;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierAbdominalCramps")) & 1) != 0)
  {
    v2 = 157;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierBreastPain")) & 1) != 0)
  {
    v2 = 158;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierBloating")) & 1) != 0)
  {
    v2 = 159;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierHeadache")) & 1) != 0)
  {
    v2 = 160;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierAcne")) & 1) != 0)
  {
    v2 = 161;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierLowerBackPain")) & 1) != 0)
  {
    v2 = 162;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierPelvicPain")) & 1) != 0)
  {
    v2 = 163;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierMoodChanges")) & 1) != 0)
  {
    v2 = 164;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierConstipation")) & 1) != 0)
  {
    v2 = 165;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDiarrhea")) & 1) != 0)
  {
    v2 = 166;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierFatigue")) & 1) != 0)
  {
    v2 = 167;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierNausea")) & 1) != 0)
  {
    v2 = 168;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierSleepChanges")) & 1) != 0)
  {
    v2 = 169;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierAppetiteChanges")) & 1) != 0)
  {
    v2 = 170;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierHotFlashes")) & 1) != 0)
  {
    v2 = 171;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierEnvironmentalAudioExposure")) & 1) != 0)
  {
    v2 = 172;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierHeadphoneAudioExposure")) & 1) != 0)
  {
    v2 = 173;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierActivityMoveMode")) & 1) != 0)
  {
    v2 = 177;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierEnvironmentalAudioExposureEvent")) & 1) != 0)
  {
    v2 = 178;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierAppleMoveTime")) & 1) != 0)
  {
    v2 = 179;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierWalkingDoubleSupportPercentage")) & 1) != 0)
  {
    v2 = 182;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierSixMinuteWalkTestDistance")) & 1) != 0)
  {
    v2 = 183;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierAppleStandTime")) & 1) != 0)
  {
    v2 = 186;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierWalkingSpeed")) & 1) != 0)
  {
    v2 = 187;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierWalkingStepLength")) & 1) != 0)
  {
    v2 = 188;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierToothbrushingEvent")) & 1) != 0)
  {
    v2 = 189;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierPregnancy")) & 1) != 0)
  {
    v2 = 191;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierLactation")) & 1) != 0)
  {
    v2 = 192;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierContraceptive")) & 1) != 0)
  {
    v2 = 193;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierWalkingAsymmetryPercentage")) & 1) != 0)
  {
    v2 = 194;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierStairAscentSpeed")) & 1) != 0)
  {
    v2 = 195;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierStairDescentSpeed")) & 1) != 0)
  {
    v2 = 196;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierSleepDurationGoal")) & 1) != 0)
  {
    v2 = 197;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierSleepSchedule")) & 1) != 0)
  {
    v2 = 198;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierHeadphoneAudioExposureEvent")) & 1) != 0)
  {
    v2 = 199;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierRapidPoundingOrFlutteringHeartbeat")) & 1) != 0)
  {
    v2 = 201;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierSkippedHeartbeat")) & 1) != 0)
  {
    v2 = 202;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierFever")) & 1) != 0)
  {
    v2 = 203;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierShortnessOfBreath")) & 1) != 0)
  {
    v2 = 204;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierChestTightnessOrPain")) & 1) != 0)
  {
    v2 = 205;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierFainting")) & 1) != 0)
  {
    v2 = 206;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDizziness")) & 1) != 0)
  {
    v2 = 207;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierInsuranceRecord")) & 1) != 0)
  {
    v2 = 217;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierCardioFitnessMedicationsUse")) & 1) != 0)
  {
    v2 = 218;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierVomiting")) & 1) != 0)
  {
    v2 = 220;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierHeartburn")) & 1) != 0)
  {
    v2 = 221;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierCoughing")) & 1) != 0)
  {
    v2 = 222;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierWheezing")) & 1) != 0)
  {
    v2 = 223;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierSoreThroat")) & 1) != 0)
  {
    v2 = 224;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierCongestion")) & 1) != 0)
  {
    v2 = 225;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierRunnyNose")) & 1) != 0)
  {
    v2 = 226;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierVaginalDryness")) & 1) != 0)
  {
    v2 = 229;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierNightSweats")) & 1) != 0)
  {
    v2 = 230;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierChills")) & 1) != 0)
  {
    v2 = 231;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierHairLoss")) & 1) != 0)
  {
    v2 = 232;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierDrySkin")) & 1) != 0)
  {
    v2 = 233;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierBladderIncontinence")) & 1) != 0)
  {
    v2 = 234;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierMemoryLapse")) & 1) != 0)
  {
    v2 = 235;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierLowCardioFitnessEvent")) & 1) != 0)
  {
    v2 = 236;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierHandwashingEvent")) & 1) != 0)
  {
    v2 = 237;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierGeneralizedBodyAche")) & 1) != 0)
  {
    v2 = 240;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierLossOfSmell")) & 1) != 0)
  {
    v2 = 241;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierLossOfTaste")) & 1) != 0)
  {
    v2 = 242;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierPregnancyTestResult")) & 1) != 0)
  {
    v2 = 243;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierProgesteroneTestResult")) & 1) != 0)
  {
    v2 = 244;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierAtrialFibrillationBurden")) & 1) != 0)
  {
    v2 = 248;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierAppleWalkingSteadiness")) & 1) != 0)
  {
    v2 = 249;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierAppleWalkingSteadinessEvent")) & 1) != 0)
  {
    v2 = 250;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierNumberOfAlcoholicBeverages")) & 1) != 0)
  {
    v2 = 251;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierAppleSleepingWristTemperature")) & 1) != 0)
  {
    v2 = 256;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierVisionPrescription")) & 1) != 0)
  {
    v2 = 257;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierRunningStrideLength")) & 1) != 0)
  {
    v2 = 258;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierRunningVerticalOscillation")) & 1) != 0)
  {
    v2 = 259;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierRunningGroundContactTime")) & 1) != 0)
  {
    v2 = 260;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierPersistentIntermenstrualBleeding")) & 1) != 0)
  {
    v2 = 262;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierProlongedMenstrualPeriods")) & 1) != 0)
  {
    v2 = 263;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierIrregularMenstrualCycles")) & 1) != 0)
  {
    v2 = 264;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierInfrequentMenstrualCycles")) & 1) != 0)
  {
    v2 = 265;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierHeartRateRecovery")) & 1) != 0)
  {
    v2 = 266;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierClinicalNoteRecord")) & 1) != 0)
  {
    v2 = 268;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierUnderwaterDepth")) & 1) != 0)
  {
    v2 = 269;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierRunningPower")) & 1) != 0)
  {
    v2 = 270;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierEnvironmentalSoundReduction")) & 1) != 0)
  {
    v2 = 272;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierMedicationDoseEvent")) & 1) != 0)
  {
    v2 = 273;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierRunningSpeed")) & 1) != 0)
  {
    v2 = 274;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierAppleSleepingBreathingDisturbances")) & 1) != 0)
  {
    v2 = 275;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierSleepApneaEvent")) & 1) != 0)
  {
    v2 = 276;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierWaterTemperature")) & 1) != 0)
  {
    v2 = 277;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierTimeInDaylight")) & 1) != 0)
  {
    v2 = 279;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierCyclingPower")) & 1) != 0)
  {
    v2 = 280;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierCyclingSpeed")) & 1) != 0)
  {
    v2 = 281;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierCyclingCadence")) & 1) != 0)
  {
    v2 = 282;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierCyclingFunctionalThresholdPower")) & 1) != 0)
  {
    v2 = 283;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierStateOfMind")) & 1) != 0)
  {
    v2 = 284;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierPhysicalEffort")) & 1) != 0)
  {
    v2 = 286;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierGAD7")) & 1) != 0)
  {
    v2 = 287;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierPHQ9")) & 1) != 0)
  {
    v2 = 288;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierPaddleSportsDistance")) & 1) != 0)
  {
    v2 = 294;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierRowingDistance")) & 1) != 0)
  {
    v2 = 295;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierCrossCountrySkiingDistance")) & 1) != 0)
  {
    v2 = 296;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierSkatingSportsDistance")) & 1) != 0)
  {
    v2 = 297;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierEstimatedWorkoutEffortScore")) & 1) != 0)
  {
    v2 = 298;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierRowingSpeed")) & 1) != 0)
  {
    v2 = 301;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierCrossCountrySkiingSpeed")) & 1) != 0)
  {
    v2 = 302;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierPaddleSportsSpeed")) & 1) != 0)
  {
    v2 = 303;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierWorkoutEffortScore")) & 1) != 0)
  {
    v2 = 304;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierAppleBalanceMetrics")) & 1) != 0)
  {
    v2 = 305;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierBleedingDuringPregnancy")) & 1) != 0)
  {
    v2 = 313;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("HKDisplayTypeIdentifierBleedingAfterPregnancy")))
  {
    v2 = 314;
  }
  else
  {
    v2 = HKDisplayTypeIdentifierEnding;
  }

  return v2;
}

__CFString *HKDisplayTypeIdentifierToString(unint64_t a1)
{
  if (a1 > 0x13A)
    return 0;
  else
    return off_1E9C46A38[a1];
}

void sub_1D7A99828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL HKCodableRGBConfigurationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int *v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      switch((v10 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 40) |= 8u;
          v18 = *v3;
          v19 = *(_QWORD *)(a2 + v18);
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
            *(_QWORD *)(a2 + v18) = v19 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v27 = &OBJC_IVAR___HKCodableRGBConfiguration__red;
          goto LABEL_41;
        case 2u:
          *(_BYTE *)(a1 + 40) |= 4u;
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v22 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v27 = &OBJC_IVAR___HKCodableRGBConfiguration__green;
          goto LABEL_41;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 2u;
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v27 = &OBJC_IVAR___HKCodableRGBConfiguration__blue;
          goto LABEL_41;
        case 4u:
          *(_BYTE *)(a1 + 40) |= 1u;
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v26);
            *(_QWORD *)(a2 + v25) = v26 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v27 = &OBJC_IVAR___HKCodableRGBConfiguration__alpha;
LABEL_41:
          *(_QWORD *)(a1 + *v27) = v20;
          goto LABEL_42;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_42:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HKCodableSummaryTrendChartViewModelReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  void *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  HKCodableDateInterval *v27;
  uint64_t v28;
  uint64_t v29;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 56;
        goto LABEL_24;
      case 2u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 48;
        goto LABEL_24;
      case 3u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 64;
LABEL_24:
        v20 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_46;
      case 4u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 72) |= 1u;
        while (2)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              v14 = v22++ >= 9;
              if (v14)
              {
                v23 = 0;
                goto LABEL_45;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
LABEL_45:
        *(_QWORD *)(a1 + 8) = v23;
        goto LABEL_46;
      case 5u:
        v27 = objc_alloc_init(HKCodableDateInterval);
        v28 = 16;
        goto LABEL_35;
      case 6u:
        v27 = objc_alloc_init(HKCodableQuantity);
        v29 = 24;
        goto LABEL_39;
      case 7u:
        v27 = objc_alloc_init(HKCodableDateInterval);
        v28 = 32;
LABEL_35:
        objc_storeStrong((id *)(a1 + v28), v27);
        if (!PBReaderPlaceMark() || !HKCodableDateIntervalReadFrom((uint64_t)v27, a2))
          goto LABEL_48;
        goto LABEL_41;
      case 8u:
        v27 = objc_alloc_init(HKCodableQuantity);
        v29 = 40;
LABEL_39:
        objc_storeStrong((id *)(a1 + v29), v27);
        if (PBReaderPlaceMark() && (HKCodableQuantityReadFrom((uint64_t)v27, a2) & 1) != 0)
        {
LABEL_41:
          PBReaderRecallMark();

LABEL_46:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_48:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_46;
    }
  }
}

double StateOfMindBucketData.valenceRange.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t StateOfMindBucketData.sampleCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t StateOfMindBucketData.reflectiveInterval.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t StateOfMindBucketData.init(valenceRange:sampleCount:reflectiveInterval:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  *(double *)a3 = a4;
  *(double *)(a3 + 8) = a5;
  *(_QWORD *)(a3 + 16) = result;
  *(_QWORD *)(a3 + 24) = a2;
  return result;
}

uint64_t sub_1D7AA35DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE v13[24];

  v3 = sub_1D7B49198();
  v4 = *(_QWORD *)(v3 - 8);
  ((void (*)(void))MEMORY[0x1E0C80A78])();
  sub_1D7AA787C(0, (unint64_t *)&qword_1F014D000, v5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v6 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v6);
  v10 = &v13[-v9];
  v11 = v1 + OBJC_IVAR____TtC8HealthUI21StateOfMindChartPoint____lazy_storage___dateIntervalMidpoint;
  swift_beginAccess();
  sub_1D7AA7B0C(v11, (uint64_t)v10);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3) != 1)
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v4 + 32))(a1, v10, v3);
  sub_1D7AA79D0((uint64_t)v10);
  sub_1D7B48D6C();
  sub_1D7B48D60();
  sub_1D7B4912C();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(v8, a1, v3);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  swift_beginAccess();
  sub_1D7AA7B68((uint64_t)v8, v11);
  return swift_endAccess();
}

uint64_t sub_1D7AA37AC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1D7AA37F4();
  *a1 = result;
  return result;
}

_QWORD *sub_1D7AA37D4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *a2 + OBJC_IVAR____TtC8HealthUI21StateOfMindChartPoint____lazy_storage___totalSampleCount;
  *(_QWORD *)v2 = *result;
  *(_BYTE *)(v2 + 8) = 0;
  return result;
}

uint64_t sub_1D7AA37F4()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  BOOL v7;

  v1 = (_BYTE *)(v0 + OBJC_IVAR____TtC8HealthUI21StateOfMindChartPoint____lazy_storage___totalSampleCount);
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC8HealthUI21StateOfMindChartPoint____lazy_storage___totalSampleCount + 8) != 1)
    return *(_QWORD *)v1;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8HealthUI21StateOfMindChartPoint_buckets);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    result = 0;
    v5 = (uint64_t *)(v2 + 48);
    while (1)
    {
      v6 = *v5;
      v5 += 4;
      v7 = __OFADD__(result, v6);
      result += v6;
      if (v7)
        break;
      if (!--v3)
        goto LABEL_9;
    }
    __break(1u);
  }
  else
  {
    result = 0;
LABEL_9:
    *(_QWORD *)v1 = result;
    v1[8] = 0;
  }
  return result;
}

id StateOfMindChartPoint.__allocating_init(dateInterval:buckets:isSharingPreview:)(uint64_t a1, uint64_t a2, char a3)
{
  objc_class *v3;
  id v7;

  v7 = objc_allocWithZone(v3);
  return StateOfMindChartPoint.init(dateInterval:buckets:isSharingPreview:)(a1, a2, a3);
}

id StateOfMindChartPoint.init(dateInterval:buckets:isSharingPreview:)(uint64_t a1, uint64_t a2, char a3)
{
  char *v3;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  objc_super v16;
  uint64_t v17;

  v7 = &v3[OBJC_IVAR____TtC8HealthUI21StateOfMindChartPoint____lazy_storage___dateIntervalMidpoint];
  v8 = sub_1D7B49198();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = &v3[OBJC_IVAR____TtC8HealthUI21StateOfMindChartPoint____lazy_storage___totalSampleCount];
  *(_QWORD *)v9 = 0;
  v9[8] = 1;
  v10 = &v3[OBJC_IVAR____TtC8HealthUI21StateOfMindChartPoint_dateInterval];
  v11 = sub_1D7B48D78();
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v10, a1, v11);
  v17 = a2;
  v13 = v3;
  swift_bridgeObjectRetain();
  sub_1D7AA544C(&v17);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v13[OBJC_IVAR____TtC8HealthUI21StateOfMindChartPoint_buckets] = v17;
  v13[OBJC_IVAR____TtC8HealthUI21StateOfMindChartPoint_isSharingPreview] = a3 & 1;

  v16.receiver = v13;
  v16.super_class = (Class)type metadata accessor for StateOfMindChartPoint();
  v14 = objc_msgSendSuper2(&v16, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v11);
  return v14;
}

id StateOfMindChartPoint.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void StateOfMindChartPoint.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id StateOfMindChartPoint.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StateOfMindChartPoint();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t StateOfMindChartPoint.xValueAsGenericType()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *boxed_opaque_existential_0;

  a1[3] = sub_1D7B49198();
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(a1);
  return sub_1D7AA35DC((uint64_t)boxed_opaque_existential_0);
}

uint64_t _s8HealthUI21StateOfMindChartPointC22minXValueAsGenericTypeypyF_0()
{
  void *v0;
  id v1;

  v1 = objc_msgSend(v0, sel_xValueAsGenericType);
  sub_1D7B4A770();
  return swift_unknownObjectRelease();
}

double StateOfMindChartPoint.yValue()@<D0>(_OWORD *a1@<X8>)
{
  void *v1;
  double result;

  if (objc_msgSend(v1, sel_minYValue))
  {
    sub_1D7B4A770();
    swift_unknownObjectRelease();
  }
  else
  {
    result = 0.0;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

double StateOfMindChartPoint.yValue(forKey:)@<D0>(_OWORD *a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint8_t *v15;
  double result;
  void *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v2 = v1;
  swift_getObjectType();
  v4 = sub_1D7B4969C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7B49678();
  v8 = sub_1D7B49684();
  v9 = sub_1D7B4A608();
  if (os_log_type_enabled(v8, v9))
  {
    v18 = a1;
    v10 = swift_slowAlloc();
    v17 = v2;
    v11 = (uint8_t *)v10;
    v12 = swift_slowAlloc();
    v20 = v12;
    *(_DWORD *)v11 = 136315138;
    v13 = sub_1D7B4AA94();
    v19 = sub_1D7AA4DE4(v13, v14, &v20);
    a1 = v18;
    sub_1D7B4A704();
    swift_bridgeObjectRelease();
    swift_arrayDestroy();
    MEMORY[0x1D829FFF4](v12, -1, -1);
    v15 = v11;
    v2 = v17;
    MEMORY[0x1D829FFF4](v15, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (objc_msgSend(v2, sel_yValue))
  {
    sub_1D7B4A770();
    swift_unknownObjectRelease();
  }
  else
  {
    result = 0.0;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

uint64_t StateOfMindChartPoint.allYValues()()
{
  void *v0;
  uint64_t v1;
  __int128 v3;
  _OWORD v4[2];
  _OWORD v5[2];

  if (!objc_msgSend(v0, sel_minYValue))
    return MEMORY[0x1E0DEE9D8];
  sub_1D7B4A770();
  swift_unknownObjectRelease();
  sub_1D7AA552C(v4, v5);
  if (!objc_msgSend(v0, sel_maxYValue))
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v5);
    return MEMORY[0x1E0DEE9D8];
  }
  sub_1D7B4A770();
  swift_unknownObjectRelease();
  sub_1D7AA552C(&v3, v4);
  sub_1D7AA7E70(0, (unint64_t *)&qword_1F014CFC0, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1D7B82CE0;
  sub_1D7AA553C((uint64_t)v5, v1 + 32);
  sub_1D7AA552C(v4, (_OWORD *)(v1 + 64));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v5);
  return v1;
}

double StateOfMindChartPoint.minYValue()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8HealthUI21StateOfMindChartPoint_buckets);
  if (*(_QWORD *)(v2 + 16))
  {
    result = *(double *)(v2 + 32);
    *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DEB070];
    *(double *)a1 = result;
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

double StateOfMindChartPoint.maxYValue()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8HealthUI21StateOfMindChartPoint_buckets);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    result = *(double *)(v2 + 32 * v3 + 8);
    *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DEB070];
    *(double *)a1 = result;
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

id sub_1D7AA4300(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr))
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  _QWORD v10[3];
  uint64_t v11;

  a3(v10);
  v3 = v11;
  if (!v11)
    return 0;
  v4 = __swift_project_boxed_opaque_existential_0(v10, v11);
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v7);
  v8 = (void *)sub_1D7B4A92C();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v3);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v10);
  return v8;
}

id StateOfMindChartPoint.userInfo()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  char *v36;
  char *v37;
  uint64_t v38;
  char v39;
  objc_class *v40;
  _BYTE *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  id v46;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  objc_super v55;
  uint64_t v56;

  v1 = v0;
  v2 = sub_1D7B48D78();
  v3 = *(_QWORD *)(v2 - 8);
  v52 = v2;
  v53 = v3;
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8HealthUI21StateOfMindChartPoint_buckets);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain();
    v8 = (_QWORD *)(v6 + 56);
    v9 = MEMORY[0x1E0DEE9D8];
    do
    {
      if (*v8 == 2)
      {
        v54 = *(_OWORD *)(v8 - 3);
        v13 = *(v8 - 1);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v56 = v9;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1D7AA5ED4(0, *(_QWORD *)(v9 + 16) + 1, 1);
          v9 = v56;
        }
        v11 = *(_QWORD *)(v9 + 16);
        v10 = *(_QWORD *)(v9 + 24);
        if (v11 >= v10 >> 1)
        {
          sub_1D7AA5ED4(v10 > 1, v11 + 1, 1);
          v9 = v56;
        }
        *(_QWORD *)(v9 + 16) = v11 + 1;
        v12 = v9 + 32 * v11;
        *(_OWORD *)(v12 + 32) = v54;
        *(_QWORD *)(v12 + 48) = v13;
        *(_QWORD *)(v12 + 56) = 2;
      }
      v8 += 4;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = MEMORY[0x1E0DEE9D8];
  }
  v48 = sub_1D7AA7230(v9);
  v50 = v16;
  v51 = v15;
  v49 = v17;
  swift_release();
  v18 = *(_QWORD *)(v6 + 16);
  if (v18)
  {
    swift_bridgeObjectRetain();
    v19 = (_QWORD *)(v6 + 56);
    v20 = MEMORY[0x1E0DEE9D8];
    do
    {
      if (*v19 == 1)
      {
        v54 = *(_OWORD *)(v19 - 3);
        v24 = *(v19 - 1);
        v25 = swift_isUniquelyReferenced_nonNull_native();
        v56 = v20;
        if ((v25 & 1) == 0)
        {
          sub_1D7AA5ED4(0, *(_QWORD *)(v20 + 16) + 1, 1);
          v20 = v56;
        }
        v22 = *(_QWORD *)(v20 + 16);
        v21 = *(_QWORD *)(v20 + 24);
        if (v22 >= v21 >> 1)
        {
          sub_1D7AA5ED4(v21 > 1, v22 + 1, 1);
          v20 = v56;
        }
        *(_QWORD *)(v20 + 16) = v22 + 1;
        v23 = v20 + 32 * v22;
        *(_OWORD *)(v23 + 32) = v54;
        *(_QWORD *)(v23 + 48) = v24;
        *(_QWORD *)(v23 + 56) = 1;
      }
      v19 += 4;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    v20 = MEMORY[0x1E0DEE9D8];
  }
  v26 = sub_1D7AA7230(v20);
  v28 = v27;
  *(_QWORD *)&v54 = v29;
  v31 = v30;
  swift_release();
  v32 = v1 + OBJC_IVAR____TtC8HealthUI21StateOfMindChartPoint_dateInterval;
  v33 = v1;
  v34 = v53;
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v53 + 16);
  v36 = v5;
  v37 = v5;
  v38 = v52;
  v35(v37, v32, v52);
  v39 = *(_BYTE *)(v33 + OBJC_IVAR____TtC8HealthUI21StateOfMindChartPoint_isSharingPreview);
  v40 = (objc_class *)type metadata accessor for StateOfMindCoordinateInfo();
  v41 = objc_allocWithZone(v40);
  v35(&v41[OBJC_IVAR____TtC8HealthUI25StateOfMindCoordinateInfo_dateInterval], (uint64_t)v36, v38);
  *(_QWORD *)&v41[OBJC_IVAR____TtC8HealthUI25StateOfMindCoordinateInfo_dailyReflectiveCount] = v48;
  v42 = &v41[OBJC_IVAR____TtC8HealthUI25StateOfMindCoordinateInfo_dailyValenceRange];
  v43 = v50;
  *(_QWORD *)v42 = v51;
  *((_QWORD *)v42 + 1) = v43;
  v42[16] = v49 & 1;
  *(_QWORD *)&v41[OBJC_IVAR____TtC8HealthUI25StateOfMindCoordinateInfo_momentaryReflectiveCount] = v26;
  v44 = &v41[OBJC_IVAR____TtC8HealthUI25StateOfMindCoordinateInfo_momentaryValenceRange];
  v45 = v54;
  *(_QWORD *)v44 = v28;
  *((_QWORD *)v44 + 1) = v45;
  v44[16] = v31 & 1;
  v41[OBJC_IVAR____TtC8HealthUI25StateOfMindCoordinateInfo_isSharingPreview] = v39;
  v55.receiver = v41;
  v55.super_class = v40;
  v46 = objc_msgSendSuper2(&v55, sel_init);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v38);
  return v46;
}

uint64_t static StateOfMindChartPoint.countAndValence(bucketData:)(uint64_t a1)
{
  return sub_1D7AA7230(a1);
}

void ClosedRange<>.merge(with:)(double a1, double a2, double a3, double a4)
{
  if (a1 >= a3)
    a1 = a3;
  if (a4 > a2)
    a2 = a4;
  if (a1 > a2)
    __break(1u);
}

_QWORD *sub_1D7AA47AC@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_1D7AA47BC(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_1D7AA47C8(uint64_t a1, uint64_t a2)
{
  return sub_1D7AA4C70(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1940]);
}

uint64_t sub_1D7AA47EC()
{
  return sub_1D7B4A98C();
}

BOOL sub_1D7AA4818(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1D7AA4830(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_1D7B4A3A4();
  *a2 = 0;
  return result;
}

uint64_t sub_1D7AA48A4(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_1D7B4A3B0();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1D7AA4920@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_1D7B4A3BC();
  v2 = sub_1D7B4A38C();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1D7AA4960()
{
  sub_1D7B4A980();
  sub_1D7B4A98C();
  return sub_1D7B4A998();
}

uint64_t sub_1D7AA49A4()
{
  sub_1D7B4A980();
  sub_1D7B4A98C();
  return sub_1D7B4A998();
}

uint64_t sub_1D7AA49E8()
{
  sub_1D7AA76D4((unint64_t *)&qword_1F014DC40, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1D7B833E4);
  sub_1D7AA76D4(&qword_1F014D190, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1D7B8311C);
  return sub_1D7B4A8F0();
}

uint64_t sub_1D7AA4A6C()
{
  sub_1D7AA76D4(&qword_1F014D198, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_1D7B83018);
  sub_1D7AA76D4(&qword_1F014D1A0, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_1D7B82FB8);
  return sub_1D7B4A8F0();
}

uint64_t sub_1D7AA4AF0()
{
  sub_1D7AA76D4((unint64_t *)&qword_1F014D2D0, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1D7B83844);
  sub_1D7AA76D4(&qword_1F014D2D8, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1D7B83798);
  return sub_1D7B4A8F0();
}

uint64_t sub_1D7AA4B74@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1D7B4A38C();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1D7AA4BB8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1D7B4A3BC();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1D7AA4BE0()
{
  sub_1D7AA76D4(&qword_1F014D2E0, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1D7B83638);
  sub_1D7AA76D4(&qword_1F014D2E8, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1D7B835D8);
  return sub_1D7B4A8F0();
}

uint64_t sub_1D7AA4C64(uint64_t a1, uint64_t a2)
{
  return sub_1D7AA4C70(a1, a2, MEMORY[0x1E0DEA950]);
}

uint64_t sub_1D7AA4C70(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1D7B4A3BC();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1D7AA4CAC()
{
  sub_1D7B4A3BC();
  sub_1D7B4A3F8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7AA4CEC()
{
  uint64_t v0;

  sub_1D7B4A3BC();
  sub_1D7B4A980();
  sub_1D7B4A3F8();
  v0 = sub_1D7B4A998();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1D7AA4D5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_1D7B4A3BC();
  v2 = v1;
  if (v0 == sub_1D7B4A3BC() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_1D7B4A938();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1D7AA4DE4(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_1D7AA4EB4(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1D7AA553C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1D7AA553C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t sub_1D7AA4EB4(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1D7B4A710();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_1D7AA506C(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_1D7B4A824();
  if (!v8)
  {
    sub_1D7B4A884();
    __break(1u);
LABEL_17:
    result = sub_1D7B4A8E4();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_1D7AA506C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_1D7AA5100(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1D7AA52EC(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1D7AA52EC(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1D7AA5100(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_1D7AA5274(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_1D7B4A7E8();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_1D7B4A884();
      __break(1u);
LABEL_10:
      v2 = sub_1D7B4A434();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    sub_1D7B4A8E4();
    __break(1u);
LABEL_14:
    result = sub_1D7B4A884();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

_QWORD *sub_1D7AA5274(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1D7AA7E70(0, &qword_1ED0AC808, MEMORY[0x1E0DEDE70], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1D7AA52EC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1D7AA7E70(0, &qword_1ED0AC808, MEMORY[0x1E0DEDE70], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1D7B4A8E4();
  __break(1u);
  return result;
}

uint64_t sub_1D7AA544C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1D7AFB5F0(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_1D7AA5578(v5);
  *a1 = v2;
  return result;
}

uint64_t type metadata accessor for StateOfMindChartPoint()
{
  uint64_t result;

  result = qword_1F014CFF0;
  if (!qword_1F014CFF0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

_OWORD *sub_1D7AA552C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1D7AA553C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1D7AA5578(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  double *v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  char v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  double *__dst;

  v3 = a1[1];
  result = sub_1D7B4A908();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v89 = *a1;
      v90 = -1;
      v91 = 1;
      v92 = *a1;
      do
      {
        v93 = *(double *)(v89 + 32 * v91);
        v94 = v90;
        v95 = v92;
        do
        {
          if (v93 >= *(double *)v95)
            break;
          if (!v89)
            goto LABEL_141;
          v96 = *(_QWORD *)(v95 + 40);
          v97 = *(_OWORD *)(v95 + 48);
          v98 = *(_OWORD *)(v95 + 16);
          *(_OWORD *)(v95 + 32) = *(_OWORD *)v95;
          *(_OWORD *)(v95 + 48) = v98;
          *(double *)v95 = v93;
          *(_QWORD *)(v95 + 8) = v96;
          *(_OWORD *)(v95 + 16) = v97;
          v95 -= 32;
        }
        while (!__CFADD__(v94++, 1));
        ++v91;
        v92 += 32;
        --v90;
      }
      while (v91 != v3);
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_146;
  v6 = result;
  v109 = a1;
  if (v3 < 2)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    __dst = (double *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v12 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_103:
      v100 = v12;
      v111 = v9;
      if (v13 >= 2)
      {
        v101 = *v109;
        do
        {
          v102 = v13 - 2;
          if (v13 < 2)
            goto LABEL_132;
          if (!v101)
            goto LABEL_145;
          v103 = v100;
          v104 = *(_QWORD *)&v100[16 * v102 + 32];
          v105 = *(_QWORD *)&v100[16 * v13 + 24];
          sub_1D7AA5C5C((double *)(v101 + 32 * v104), (double *)(v101 + 32 * *(_QWORD *)&v100[16 * v13 + 16]), v101 + 32 * v105, __dst);
          if (v1)
            break;
          if (v105 < v104)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v103 = sub_1D7AFAA98((uint64_t)v103);
          if (v102 >= *((_QWORD *)v103 + 2))
            goto LABEL_134;
          v106 = &v103[16 * v102 + 32];
          *(_QWORD *)v106 = v104;
          *((_QWORD *)v106 + 1) = v105;
          v107 = *((_QWORD *)v103 + 2);
          if (v13 > v107)
            goto LABEL_135;
          memmove(&v103[16 * v13 + 16], &v103[16 * v13 + 32], 16 * (v107 - v13));
          v100 = v103;
          *((_QWORD *)v103 + 2) = v107 - 1;
          v13 = v107 - 1;
        }
        while (v107 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v111 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v111 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v7 = v5 >> 1;
    v8 = sub_1D7B4A4D0();
    *(_QWORD *)(v8 + 16) = v7;
    v111 = v8;
    __dst = (double *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v110 = *a1 + 64;
  v108 = *a1 + 16;
  v12 = (char *)MEMORY[0x1E0DEE9D8];
  v112 = v6;
  v113 = v3;
  v114 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(double *)(v11 + 32 * v10);
      v16 = 32 * v14;
      v17 = *(double *)(v11 + 32 * v14);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v18 = (double *)(v110 + 32 * v14);
        v19 = v15;
        while (1)
        {
          v20 = v19;
          v19 = *v18;
          if (v15 < v17 == *v18 >= v20)
            break;
          ++v10;
          v18 += 4;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v15 < v17)
      {
        if (v10 < v14)
          goto LABEL_138;
        if (v14 < v10)
        {
          v21 = 32 * v10;
          v22 = v10;
          v23 = v14;
          do
          {
            if (v23 != --v22)
            {
              if (!v11)
                goto LABEL_144;
              v24 = (_OWORD *)(v11 + v16);
              v25 = v11 + v21;
              v27 = *(_OWORD *)(v11 + v16);
              v26 = *(_OWORD *)(v11 + v16 + 16);
              v28 = *(_OWORD *)(v11 + v21 - 16);
              *v24 = *(_OWORD *)(v11 + v21 - 32);
              v24[1] = v28;
              *(_OWORD *)(v25 - 32) = v27;
              *(_OWORD *)(v25 - 16) = v26;
            }
            ++v23;
            v21 -= 32;
            v16 += 32;
          }
          while (v23 < v22);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v10, v14))
      goto LABEL_136;
    if (v10 - v14 >= v6)
      goto LABEL_46;
    v29 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_139;
    if (v29 >= v3)
      v29 = v3;
    if (v29 < v14)
      break;
    if (v10 != v29)
    {
      v30 = v108 + 32 * v10;
      do
      {
        v31 = *(double *)(v11 + 32 * v10);
        v32 = v14;
        v33 = v30;
        do
        {
          v34 = (__int128 *)(v33 - 48);
          if (v31 >= *(double *)(v33 - 48))
            break;
          if (!v11)
            goto LABEL_142;
          v36 = *v34;
          v35 = *(_OWORD *)(v33 - 32);
          *(_OWORD *)(v33 - 32) = *(_OWORD *)v33;
          v33 -= 32;
          v37 = *(_QWORD *)(v33 + 24);
          v34[2] = v36;
          v34[3] = v35;
          *(double *)(v33 - 16) = v31;
          *(_QWORD *)(v33 - 8) = v37;
          ++v32;
        }
        while (v10 != v32);
        ++v10;
        v30 += 32;
      }
      while (v10 != v29);
      v10 = v29;
    }
LABEL_46:
    if (v10 < v14)
      goto LABEL_131;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = sub_1D7AFA7AC(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v39 = *((_QWORD *)v12 + 2);
    v38 = *((_QWORD *)v12 + 3);
    v13 = v39 + 1;
    v11 = v114;
    if (v39 >= v38 >> 1)
    {
      v88 = sub_1D7AFA7AC((char *)(v38 > 1), v39 + 1, 1, v12);
      v11 = v114;
      v12 = v88;
    }
    *((_QWORD *)v12 + 2) = v13;
    v40 = v12 + 32;
    v41 = &v12[16 * v39 + 32];
    *(_QWORD *)v41 = v14;
    *((_QWORD *)v41 + 1) = v10;
    if (v39)
    {
      while (1)
      {
        v42 = v13 - 1;
        if (v13 >= 4)
        {
          v47 = &v40[16 * v13];
          v48 = *((_QWORD *)v47 - 8);
          v49 = *((_QWORD *)v47 - 7);
          v53 = __OFSUB__(v49, v48);
          v50 = v49 - v48;
          if (v53)
            goto LABEL_120;
          v52 = *((_QWORD *)v47 - 6);
          v51 = *((_QWORD *)v47 - 5);
          v53 = __OFSUB__(v51, v52);
          v45 = v51 - v52;
          v46 = v53;
          if (v53)
            goto LABEL_121;
          v54 = v13 - 2;
          v55 = &v40[16 * v13 - 32];
          v57 = *(_QWORD *)v55;
          v56 = *((_QWORD *)v55 + 1);
          v53 = __OFSUB__(v56, v57);
          v58 = v56 - v57;
          if (v53)
            goto LABEL_123;
          v53 = __OFADD__(v45, v58);
          v59 = v45 + v58;
          if (v53)
            goto LABEL_126;
          if (v59 >= v50)
          {
            v77 = &v40[16 * v42];
            v79 = *(_QWORD *)v77;
            v78 = *((_QWORD *)v77 + 1);
            v53 = __OFSUB__(v78, v79);
            v80 = v78 - v79;
            if (v53)
              goto LABEL_130;
            v70 = v45 < v80;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v71 = *((_QWORD *)v12 + 4);
            v72 = *((_QWORD *)v12 + 5);
            v53 = __OFSUB__(v72, v71);
            v64 = v72 - v71;
            v65 = v53;
            goto LABEL_77;
          }
          v44 = *((_QWORD *)v12 + 4);
          v43 = *((_QWORD *)v12 + 5);
          v53 = __OFSUB__(v43, v44);
          v45 = v43 - v44;
          v46 = v53;
        }
        if ((v46 & 1) != 0)
          goto LABEL_122;
        v54 = v13 - 2;
        v60 = &v40[16 * v13 - 32];
        v62 = *(_QWORD *)v60;
        v61 = *((_QWORD *)v60 + 1);
        v63 = __OFSUB__(v61, v62);
        v64 = v61 - v62;
        v65 = v63;
        if (v63)
          goto LABEL_125;
        v66 = &v40[16 * v42];
        v68 = *(_QWORD *)v66;
        v67 = *((_QWORD *)v66 + 1);
        v53 = __OFSUB__(v67, v68);
        v69 = v67 - v68;
        if (v53)
          goto LABEL_128;
        if (__OFADD__(v64, v69))
          goto LABEL_129;
        if (v64 + v69 >= v45)
        {
          v70 = v45 < v69;
LABEL_83:
          if (v70)
            v42 = v54;
          goto LABEL_85;
        }
LABEL_77:
        if ((v65 & 1) != 0)
          goto LABEL_124;
        v73 = &v40[16 * v42];
        v75 = *(_QWORD *)v73;
        v74 = *((_QWORD *)v73 + 1);
        v53 = __OFSUB__(v74, v75);
        v76 = v74 - v75;
        if (v53)
          goto LABEL_127;
        if (v76 < v64)
          goto LABEL_15;
LABEL_85:
        v81 = v42 - 1;
        if (v42 - 1 >= v13)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v11)
          goto LABEL_143;
        v82 = v12;
        v83 = &v40[16 * v81];
        v84 = *(_QWORD *)v83;
        v85 = &v40[16 * v42];
        v86 = *((_QWORD *)v85 + 1);
        sub_1D7AA5C5C((double *)(v11 + 32 * *(_QWORD *)v83), (double *)(v11 + 32 * *(_QWORD *)v85), v11 + 32 * v86, __dst);
        if (v1)
          goto LABEL_93;
        if (v86 < v84)
          goto LABEL_117;
        if (v42 > *((_QWORD *)v82 + 2))
          goto LABEL_118;
        *(_QWORD *)v83 = v84;
        *(_QWORD *)&v40[16 * v81 + 8] = v86;
        v87 = *((_QWORD *)v82 + 2);
        if (v42 >= v87)
          goto LABEL_119;
        v12 = v82;
        v13 = v87 - 1;
        memmove(&v40[16 * v42], v85 + 16, 16 * (v87 - 1 - v42));
        *((_QWORD *)v82 + 2) = v87 - 1;
        v11 = v114;
        if (v87 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v112;
    v3 = v113;
    if (v10 >= v113)
    {
      v9 = v111;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = sub_1D7B4A884();
  __break(1u);
  return result;
}

uint64_t sub_1D7AA5C5C(double *__src, double *a2, unint64_t a3, double *__dst)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double *v18;
  double *v19;
  double *v20;
  double *v21;
  double v22;
  __int128 v23;
  __int128 v24;
  uint64_t result;
  double *v26;
  double *v27;
  double *v28;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 31;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 5;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 31;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 5;
  v28 = __src;
  v27 = __dst;
  if (v10 >= v12 >> 5)
  {
    if (v11 >= -31)
    {
      if (__dst != a2 || &a2[4 * v13] <= __dst)
        memmove(__dst, a2, 32 * v13);
      v18 = &v4[4 * v13];
      v26 = v18;
      v28 = v6;
      if (v7 < v6 && v11 >= 32)
      {
        v19 = (double *)(a3 - 32);
        v20 = v6;
        while (1)
        {
          v21 = v19 + 4;
          v22 = *(v20 - 4);
          v20 -= 4;
          if (*(v18 - 4) >= v22)
          {
            v26 = v18 - 4;
            if (v21 < v18 || v19 >= v18 || v21 != v18)
            {
              v24 = *((_OWORD *)v18 - 1);
              *(_OWORD *)v19 = *((_OWORD *)v18 - 2);
              *((_OWORD *)v19 + 1) = v24;
            }
            v20 = v6;
            v18 -= 4;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v21 != v6 || v19 >= v6)
            {
              v23 = *((_OWORD *)v20 + 1);
              *(_OWORD *)v19 = *(_OWORD *)v20;
              *((_OWORD *)v19 + 1) = v23;
            }
            v28 = v20;
            if (v20 <= v7)
              goto LABEL_42;
          }
          v19 -= 4;
          v6 = v20;
          if (v18 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -31)
  {
    if (__dst != __src || &__src[4 * v10] <= __dst)
      memmove(__dst, __src, 32 * v10);
    v14 = &v4[4 * v10];
    v26 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 32)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4)
          {
            v17 = *((_OWORD *)v4 + 1);
            *(_OWORD *)v7 = *(_OWORD *)v4;
            *((_OWORD *)v7 + 1) = v17;
          }
          v4 += 4;
          v27 = v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 4;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
          {
            v16 = *((_OWORD *)v6 + 1);
            *(_OWORD *)v7 = *(_OWORD *)v6;
            *((_OWORD *)v7 + 1) = v16;
          }
        }
        v7 += 4;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v28 = v7;
    }
LABEL_42:
    sub_1D7AFA8A0((void **)&v28, (const void **)&v27, &v26);
    return 1;
  }
  result = sub_1D7B4A8E4();
  __break(1u);
  return result;
}

uint64_t sub_1D7AA5ED4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1D7AA60D8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1D7AA5EF0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1D7AA69CC(a1, a2, a3, (_QWORD *)*v3, &qword_1F014D248, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240]);
  *v3 = result;
  return result;
}

uint64_t sub_1D7AA5F1C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1D7AA6248(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1D7AA5F38(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1D7AA69CC(a1, a2, a3, (_QWORD *)*v3, (unint64_t *)&unk_1F014D208, (uint64_t (*)(uint64_t))MEMORY[0x1E0D29090]);
  *v3 = result;
  return result;
}

uint64_t sub_1D7AA5F64(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1D7AA63C4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1D7AA5F80(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1D7AA6BBC(a1, a2, a3, *v3, (unint64_t *)&unk_1F014D1F0, (uint64_t (*)(uint64_t))sub_1D7AA78D4);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1D7AA5FAC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1D7AA6548(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1D7AA5FC8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1D7AA66C4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1D7AA5FE4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1D7AA69CC(a1, a2, a3, (_QWORD *)*v3, &qword_1F014D1E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1F30]);
  *v3 = result;
  return result;
}

uint64_t sub_1D7AA6010(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1D7AA685C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1D7AA602C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1D7AA69CC(a1, a2, a3, (_QWORD *)*v3, &qword_1F014D1D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D290D0]);
  *v3 = result;
  return result;
}

uint64_t sub_1D7AA6058(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1D7AA6BBC(a1, a2, a3, *v3, &qword_1F014D228, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1D7AA6084(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1D7AA6D24(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1D7AA60A0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1D7AA6EEC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1D7AA60BC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1D7AA7080(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1D7AA60D8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1D7AA7E70(0, (unint64_t *)&unk_1F014D250, (uint64_t)&type metadata for StateOfMindBucketData, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    memcpy(v13, v14, 32 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1D7B4A8E4();
  __break(1u);
  return result;
}

uint64_t sub_1D7AA6248(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1D7AA7E70(0, (unint64_t *)&qword_1F01492C0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1D7B4A8E4();
  __break(1u);
  return result;
}

uint64_t sub_1D7AA63C4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1D7AA7E70(0, &qword_1F014D1E0, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1D7B4A8E4();
  __break(1u);
  return result;
}

uint64_t sub_1D7AA6534(char a1, int64_t a2, char a3, char *a4)
{
  return sub_1D7AA6BBC(a1, a2, a3, a4, (unint64_t *)&unk_1F014D1F0, (uint64_t (*)(uint64_t))sub_1D7AA78D4);
}

uint64_t sub_1D7AA6548(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1D7AA7E70(0, (unint64_t *)&unk_1F014D1A8, (uint64_t)&type metadata for AccessoryRectangularTitleView.TitleDetail, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1D7B4A8E4();
  __break(1u);
  return result;
}

uint64_t sub_1D7AA66C4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_1D7AA787C(0, &qword_1F014D230, (uint64_t (*)(uint64_t))sub_1D7AA7A70, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8)
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_1D7AA7A70();
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1D7B4A8E4();
  __break(1u);
  return result;
}

uint64_t sub_1D7AA685C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1D7AA7E70(0, &qword_1F014D1D0, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1D7B4A8E4();
  __break(1u);
  return result;
}

uint64_t sub_1D7AA69CC(char a1, int64_t a2, char a3, _QWORD *a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  sub_1D7AA787C(0, a5, a6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = sub_1D7B4A8E4();
  __break(1u);
  return result;
}

uint64_t sub_1D7AA6BBC(char a1, int64_t a2, char a3, char *a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v8 = *((_QWORD *)a4 + 3);
    v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v9 = a2;
    }
  }
  else
  {
    v9 = a2;
  }
  v10 = *((_QWORD *)a4 + 2);
  if (v9 <= v10)
    v11 = *((_QWORD *)a4 + 2);
  else
    v11 = v9;
  if (v11)
  {
    sub_1D7AA787C(0, a5, a6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v12 = (char *)swift_allocObject();
    v13 = _swift_stdlib_malloc_size(v12);
    v14 = v13 - 32;
    if (v13 < 32)
      v14 = v13 - 17;
    *((_QWORD *)v12 + 2) = v10;
    *((_QWORD *)v12 + 3) = 2 * (v14 >> 4);
  }
  else
  {
    v12 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v15 = v12 + 32;
  v16 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v15 >= &v16[16 * v10])
      memmove(v15, v16, 16 * v10);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v16 >= &v15[16 * v10] || v15 >= &v16[16 * v10])
  {
    memcpy(v15, v16, 16 * v10);
LABEL_30:
    swift_release();
    return (uint64_t)v12;
  }
LABEL_32:
  result = sub_1D7B4A8E4();
  __break(1u);
  return result;
}

uint64_t sub_1D7AA6D24(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_1D7AA7820(0, &qword_1F014D218, (unint64_t *)&qword_1F014D220);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8)
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    sub_1D7AA7A24(0, (unint64_t *)&qword_1F014D220);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1D7B4A8E4();
  __break(1u);
  return result;
}

uint64_t sub_1D7AA6EEC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1D7AA7E70(0, &qword_1F014D1C8, (uint64_t)&type metadata for HKMultiLineSeriesCoordinate, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8])
      memmove(v12, v13, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[40 * v8] || v12 >= &v13[40 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1D7B4A8E4();
  __break(1u);
  return result;
}

uint64_t sub_1D7AA7080(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_1D7AA7820(0, &qword_1F014D1B8, &qword_1F014D1C0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8)
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_1D7AA7A24(0, &qword_1F014D1C0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1D7B4A8E4();
  __break(1u);
  return result;
}

uint64_t sub_1D7AA7230(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  double v9;
  double v10;
  double *i;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 48);
  v5 = v1;
  do
  {
    v6 = *v4;
    v4 += 4;
    v7 = __OFADD__(result, v6);
    result += v6;
    if (v7)
    {
      __break(1u);
      goto LABEL_17;
    }
    --v5;
  }
  while (v5);
  v8 = v1 - 1;
  if (v1 == 1)
    return result;
  v9 = *(double *)(a1 + 32);
  v10 = *(double *)(a1 + 40);
  for (i = (double *)(a1 + 72); ; i += 4)
  {
    if (*(i - 1) < v9)
      v9 = *(i - 1);
    if (*i >= v10)
      v10 = *i;
    if (v9 > v10)
      break;
    if (!--v8)
      return result;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for StateOfMindBucketData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for StateOfMindBucketData(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for StateOfMindBucketData(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for StateOfMindBucketData()
{
  return &type metadata for StateOfMindBucketData;
}

uint64_t sub_1D7AA7364()
{
  return type metadata accessor for StateOfMindChartPoint();
}

void sub_1D7AA736C()
{
  unint64_t v0;
  unint64_t v1;

  sub_1D7B48D78();
  if (v0 <= 0x3F)
  {
    sub_1D7AA787C(319, (unint64_t *)&qword_1F014D000, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for StateOfMindChartPoint()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of StateOfMindChartPoint.totalSampleCount.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of StateOfMindChartPoint.__allocating_init(dateInterval:buckets:isSharingPreview:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
  sub_1D7AA7E70(a1, &qword_1F014D0D0, (uint64_t)&unk_1E9C47B18, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for HKOverlayRoomViewControllerMode(uint64_t a1)
{
  sub_1D7AA7E70(a1, &qword_1F014D0D8, (uint64_t)&unk_1E9C47B48, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for HKHealthRecordsAccountsEvent(uint64_t a1)
{
  sub_1D7AA7E70(a1, &qword_1F014D0E0, (uint64_t)&unk_1E9C47B68, MEMORY[0x1E0DEEC78]);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_1D7AA7E70(a1, &qword_1F014D0E8, (uint64_t)&unk_1E9C47BE0, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for __HKStateOfMindReflectiveInterval(uint64_t a1)
{
  sub_1D7AA7E70(a1, &qword_1F014D0F0, (uint64_t)&unk_1E9C47C08, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_1D7AA7E70(a1, &qword_1F014D0F8, (uint64_t)&unk_1E9C47C80, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_1D7AA7E70(a1, &qword_1F014D100, (uint64_t)&unk_1E9C47CA8, MEMORY[0x1E0DEEC78]);
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_1D7AA7540(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1D7AA7560(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 64) = v3;
  return result;
}

void type metadata accessor for HKGraphSeriesDataPointPathRange(uint64_t a1)
{
  sub_1D7AA7E70(a1, &qword_1F014D108, (uint64_t)&unk_1E9C47D28, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for HKAudiogramEar(uint64_t a1)
{
  sub_1D7AA7E70(a1, &qword_1F014D110, (uint64_t)&unk_1E9C47D50, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for CLKDeviceProductFamilyType(uint64_t a1)
{
  sub_1D7AA7E70(a1, &qword_1F014D118, (uint64_t)&unk_1E9C47D70, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for CLKDeviceSizeClass(uint64_t a1)
{
  sub_1D7AA7E70(a1, &qword_1F014D120, (uint64_t)&unk_1E9C47D90, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for Key(uint64_t a1)
{
  sub_1D7AA7E70(a1, &qword_1F014D128, (uint64_t)&unk_1E9C47DB0, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for _NSRange(uint64_t a1)
{
  sub_1D7AA7E70(a1, &qword_1F014D130, (uint64_t)&unk_1E9C47E30, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for UIContentSizeCategory(uint64_t a1)
{
  sub_1D7AA7E70(a1, (unint64_t *)&unk_1F014D138, (uint64_t)&unk_1E9C47E58, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for HKWidthDesignation(uint64_t a1)
{
  sub_1D7AA7E70(a1, &qword_1F0149310, (uint64_t)&unk_1E9C47E80, MEMORY[0x1E0DEEC78]);
}

uint64_t sub_1D7AA767C()
{
  return sub_1D7AA76D4(&qword_1F014D148, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_1D7B82F7C);
}

uint64_t sub_1D7AA76A8()
{
  return sub_1D7AA76D4(&qword_1F014D150, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_1D7B82F50);
}

uint64_t sub_1D7AA76D4(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1D829FF28](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D7AA7714()
{
  return sub_1D7AA76D4(&qword_1F014D158, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_1D7B82FEC);
}

uint64_t sub_1D7AA7740()
{
  return sub_1D7AA76D4(&qword_1F014D160, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1D7B830E0);
}

uint64_t sub_1D7AA776C()
{
  return sub_1D7AA76D4(&qword_1F014D168, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1D7B830B4);
}

uint64_t sub_1D7AA7798()
{
  return sub_1D7AA76D4(&qword_1F014D170, (uint64_t (*)(uint64_t))type metadata accessor for CLKDeviceProductFamilyType, (uint64_t)&unk_1D7B83310);
}

uint64_t sub_1D7AA77C4()
{
  return sub_1D7AA76D4(&qword_1F014D178, (uint64_t (*)(uint64_t))type metadata accessor for CLKDeviceSizeClass, (uint64_t)&unk_1D7B831C8);
}

uint64_t sub_1D7AA77F0()
{
  return sub_1D7AA76D4((unint64_t *)&unk_1F014D180, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1D7B83150);
}

void sub_1D7AA7820(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_1D7AA7A24(255, a3);
    v4 = sub_1D7B4A920();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_1D7AA787C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_1D7AA78D4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014EDF0)
  {
    sub_1D7AA792C();
    v0 = sub_1D7B4A314();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014EDF0);
  }
}

unint64_t sub_1D7AA792C()
{
  unint64_t result;

  result = qword_1F014D200;
  if (!qword_1F014D200)
  {
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0DEF068], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&qword_1F014D200);
  }
  return result;
}

uint64_t sub_1D7AA7970(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1D7AA7E70(0, (unint64_t *)&qword_1ED0AC810, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D7AA79D0(uint64_t a1)
{
  uint64_t v2;

  sub_1D7AA787C(0, (unint64_t *)&qword_1F014D000, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1D7AA7A24(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void sub_1D7AA7A70()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1F014D238)
  {
    sub_1D7AA7AD0();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1F014D238);
  }
}

unint64_t sub_1D7AA7AD0()
{
  unint64_t result;

  result = qword_1F014D240;
  if (!qword_1F014D240)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1F014D240);
  }
  return result;
}

uint64_t sub_1D7AA7B0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1D7AA787C(0, (unint64_t *)&qword_1F014D000, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D7AA7B68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1D7AA787C(0, (unint64_t *)&qword_1F014D000, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void type metadata accessor for CGColor(uint64_t a1)
{
  sub_1D7AA7E70(a1, &qword_1F014D260, (uint64_t)&unk_1E9C47EA0, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for AttributeName(uint64_t a1)
{
  sub_1D7AA7E70(a1, &qword_1F014D268, (uint64_t)&unk_1E9C47ED0, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for HKGraphZoomLevelResolution(uint64_t a1)
{
  sub_1D7AA7E70(a1, &qword_1F014D270, (uint64_t)&unk_1E9C47EF8, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for HKTimeScope(uint64_t a1)
{
  sub_1D7AA7E70(a1, &qword_1F014D278, (uint64_t)&unk_1E9C47F18, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for Name(uint64_t a1)
{
  sub_1D7AA7E70(a1, &qword_1F014D280, (uint64_t)&unk_1E9C47F38, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for CGContext(uint64_t a1)
{
  sub_1D7AA7E70(a1, &qword_1F014D288, (uint64_t)&unk_1E9C47F60, MEMORY[0x1E0DEEC78]);
}

uint64_t sub_1D7AA7C6C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1D7AA7C8C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_1D7AA7E70(a1, &qword_1F014D290, (uint64_t)&unk_1E9C47FE8, MEMORY[0x1E0DEEC78]);
}

void type metadata accessor for HKGraphSeriesDataPointPath(uint64_t a1)
{
  sub_1D7AA7E70(a1, &qword_1F014D298, (uint64_t)&unk_1E9C48068, MEMORY[0x1E0DEEC78]);
}

uint64_t sub_1D7AA7CEC()
{
  return sub_1D7AA76D4(&qword_1F014D2A0, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1D7B8359C);
}

uint64_t sub_1D7AA7D18()
{
  return sub_1D7AA76D4(&qword_1F014D2A8, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1D7B83570);
}

uint64_t sub_1D7AA7D44()
{
  return sub_1D7AA76D4(&qword_1F014D2B0, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1D7B8360C);
}

uint64_t sub_1D7AA7D70()
{
  return sub_1D7AA76D4(&qword_1F014D2B8, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1D7B8375C);
}

uint64_t sub_1D7AA7D9C()
{
  return sub_1D7AA76D4(&qword_1F014D2C0, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1D7B83730);
}

uint64_t sub_1D7AA7DC8()
{
  return sub_1D7AA76D4(&qword_1F014D2C8, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_1D7B837CC);
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_1D7AA7E08(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1D7AA7E28(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

void type metadata accessor for HKGraphSeriesDataBlockPath(uint64_t a1)
{
  sub_1D7AA7E70(a1, (unint64_t *)&unk_1F014D2F0, (uint64_t)&unk_1E9C480E8, MEMORY[0x1E0DEEC78]);
}

void sub_1D7AA7E70(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, a3);
    if (!v6)
      atomic_store(v5, a2);
  }
}

UIColor __swiftcall UIColor.dynamic(light:dark:)(UIColor light, UIColor dark)
{
  UIColor *v4;
  id v5;
  void *v6;
  objc_class *v7;
  objc_class *v8;
  id v9;
  _QWORD v11[6];

  v4 = (UIColor *)swift_allocObject();
  v4[2].super.isa = light.super.isa;
  v4[3].super.isa = dark.super.isa;
  v5 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
  v11[4] = sub_1D7AA7FE0;
  v11[5] = v4;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1107296256;
  v11[2] = sub_1D7AA82BC;
  v11[3] = &block_descriptor;
  v6 = _Block_copy(v11);
  v7 = light.super.isa;
  v8 = dark.super.isa;
  v9 = objc_msgSend(v5, sel_initWithDynamicProvider_, v6);
  _Block_release(v6);
  swift_release();
  return (UIColor)v9;
}

uint64_t sub_1D7AA7FB4()
{
  uint64_t v0;

  return swift_deallocObject();
}

id sub_1D7AA7FE0(void *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;

  v2 = *(void **)(v1 + 16);
  v3 = *(void **)(v1 + 24);
  v4 = objc_msgSend(a1, sel_userInterfaceStyle);
  if (v4 == (id)2)
    v5 = v3;
  else
    v5 = v2;
  if (v4)
    v6 = v5;
  else
    v6 = v3;
  return v6;
}

id static UIColor.dynamic(light:dark:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  id v9;
  void *v10;
  id v11;
  _QWORD v13[6];

  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  v9 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
  v13[4] = sub_1D7AA8350;
  v13[5] = v8;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 1107296256;
  v13[2] = sub_1D7AA82BC;
  v13[3] = &block_descriptor_6;
  v10 = _Block_copy(v13);
  swift_retain();
  swift_retain();
  v11 = objc_msgSend(v9, sel_initWithDynamicProvider_, v10);
  _Block_release(v10);
  swift_release();
  return v11;
}

id static UIColor.stateOfMindChartVeryUnpleasant.getter()
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, 0.360784314, 0.239215686, 0.8, 1.0);
}

id static UIColor.stateOfMindChartUnpleasant.getter()
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, 0.270588235, 0.403921569, 0.901960784, 1.0);
}

id static UIColor.stateOfMindChartSlightlyUnpleasant.getter()
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, 0.270588235, 0.545098039, 0.901960784, 1.0);
}

id static UIColor.stateOfMindChartNeutral.getter()
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, 0.321568627, 0.8, 0.768627451, 1.0);
}

id static UIColor.stateOfMindChartSlightlyPleasant.getter()
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, 0.57254902, 0.850980392, 0.0862745098, 1.0);
}

id static UIColor.stateOfMindChartPleasant.getter()
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, 1.0, 0.623529412, 0.0, 1.0);
}

id static UIColor.stateOfMindChartVeryPleasant.getter()
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithRed_green_blue_alpha_, 1.0, 0.431372549, 0.160784314, 1.0);
}

id sub_1D7AA82BC(uint64_t a1, void *a2)
{
  uint64_t (*v3)(void);
  id v4;
  void *v5;

  v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v5 = (void *)v3();
  swift_release();

  return v5;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_1D7AA8324()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1D7AA8350(void *a1)
{
  uint64_t v1;
  uint64_t (*v3)(void *);
  uint64_t (*v4)(void *);
  id v5;
  BOOL v6;

  v3 = *(uint64_t (**)(void *))(v1 + 16);
  v4 = *(uint64_t (**)(void *))(v1 + 32);
  v5 = objc_msgSend(a1, sel_userInterfaceStyle);
  if (v5)
    v6 = v5 == (id)2;
  else
    v6 = 1;
  if (v6)
    return v4(a1);
  else
    return v3(a1);
}

uint64_t AccessoryCircularSymbolDetailView.Options.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

HealthUI::AccessoryCircularSymbolDetailView::Options __swiftcall AccessoryCircularSymbolDetailView.Options.init(rawValue:)(HealthUI::AccessoryCircularSymbolDetailView::Options rawValue)
{
  HealthUI::AccessoryCircularSymbolDetailView::Options *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static AccessoryCircularSymbolDetailView.Options.useLargerSizing.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static AccessoryCircularSymbolDetailView.Options.hideWidgetBackground.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

_QWORD *sub_1D7AA83EC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_1D7AA83F8(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_1D7AA8400@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_1D7AA8414@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_1D7AA8428@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1D7AA843C(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_1D7AA846C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1D7AA8498@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_1D7AA84BC(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_1D7AA84D0(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_1D7AA84E4(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_1D7AA84F8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1D7AA850C(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1D7AA8520(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1D7AA8534(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_1D7AA8548()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_1D7AA8558()
{
  return sub_1D7B4A794();
}

_QWORD *sub_1D7AA8570(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t AccessoryCircularSymbolDetailView.init(symbolName:detailOptions:options:baseAccessibilityIdentifier:customSymbolVoiceOverString:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int *v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t *v29;
  char *v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;

  v41 = a9;
  v42 = a5;
  v39 = a1;
  v40 = a2;
  v14 = sub_1D7B48FD0();
  MEMORY[0x1E0C80A78](v14);
  v15 = sub_1D7B48F4C();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = *a4;
  v19 = *(_QWORD *)(a3 + 16);
  if (v19)
  {
    v35 = a6;
    v36 = a7;
    v37 = a8;
    v43 = MEMORY[0x1E0DEE9D8];
    sub_1D7AA5EF0(0, v19, 0);
    v20 = a3;
    v21 = v43;
    v34 = v20;
    v22 = v20 + 40;
    do
    {
      swift_bridgeObjectRetain_n();
      sub_1D7B48FC4();
      sub_1D7B48F58();
      swift_bridgeObjectRelease();
      v43 = v21;
      v24 = *(_QWORD *)(v21 + 16);
      v23 = *(_QWORD *)(v21 + 24);
      if (v24 >= v23 >> 1)
      {
        sub_1D7AA5EF0(v23 > 1, v24 + 1, 1);
        v21 = v43;
      }
      v22 += 16;
      *(_QWORD *)(v21 + 16) = v24 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v21+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v24, v18, v15);
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
    a7 = v36;
    a8 = v37;
    a6 = v35;
  }
  else
  {
    swift_bridgeObjectRelease();
    v21 = MEMORY[0x1E0DEE9D8];
  }
  v25 = (int *)type metadata accessor for AccessoryCircularSymbolDetailView();
  v26 = v41;
  v27 = (_QWORD *)((char *)v41 + v25[10]);
  *v27 = swift_getKeyPath();
  v28 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0];
  sub_1D7AA787C(0, &qword_1ED0AC8C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFDA8], MEMORY[0x1E0CD87D0]);
  swift_storeEnumTagMultiPayload();
  v29 = (_QWORD *)((char *)v26 + v25[11]);
  *v29 = swift_getKeyPath();
  sub_1D7AA787C(0, &qword_1ED0AC8C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFFC0], v28);
  swift_storeEnumTagMultiPayload();
  v30 = (char *)v26 + v25[12];
  result = swift_getKeyPath();
  *(_QWORD *)v30 = result;
  v30[8] = 0;
  v32 = v40;
  *v26 = v39;
  v26[1] = v32;
  v26[2] = 0;
  v26[3] = v21;
  v33 = v42;
  v26[4] = v38;
  v26[5] = v33;
  v26[6] = a6;
  v26[7] = a7;
  v26[8] = a8;
  return result;
}

uint64_t AccessoryCircularSymbolDetailView.init(symbolName:symbol:attributedDetailOptions:options:baseAccessibilityIdentifier:customSymbolVoiceOverString:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10)
{
  uint64_t v15;
  int *v16;
  uint64_t *v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t *v19;
  char *v20;
  uint64_t result;

  v15 = *a5;
  v16 = (int *)type metadata accessor for AccessoryCircularSymbolDetailView();
  v17 = (_QWORD *)((char *)a9 + v16[10]);
  *v17 = swift_getKeyPath();
  v18 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0];
  sub_1D7AA787C(0, &qword_1ED0AC8C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFDA8], MEMORY[0x1E0CD87D0]);
  swift_storeEnumTagMultiPayload();
  v19 = (_QWORD *)((char *)a9 + v16[11]);
  *v19 = swift_getKeyPath();
  sub_1D7AA787C(0, &qword_1ED0AC8C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFFC0], v18);
  swift_storeEnumTagMultiPayload();
  v20 = (char *)a9 + v16[12];
  result = swift_getKeyPath();
  *(_QWORD *)v20 = result;
  v20[8] = 0;
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = v15;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  a9[8] = a10;
  return result;
}

uint64_t AccessoryCircularSymbolDetailView.init(symbol:detailOptions:options:baseAccessibilityIdentifier:customSymbolVoiceOverString:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  uint64_t *v31;
  char *v32;
  uint64_t result;
  uint64_t v34;
  _QWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v41 = a4;
  v42 = a7;
  v40 = a8;
  v13 = sub_1D7B48FD0();
  MEMORY[0x1E0C80A78](v13);
  v14 = sub_1D7B48F4C();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](a2);
  v18 = (char *)v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = *a3;
  v19 = *(_QWORD *)(v16 + 16);
  v20 = MEMORY[0x1E0DEE9D8];
  if (v19)
  {
    v37 = a5;
    v38 = a6;
    v43 = MEMORY[0x1E0DEE9D8];
    v36 = a1;
    v21 = v16;
    swift_retain();
    sub_1D7AA5EF0(0, v19, 0);
    v20 = v43;
    v35[1] = v21;
    v22 = v21 + 40;
    do
    {
      swift_bridgeObjectRetain_n();
      sub_1D7B48FC4();
      sub_1D7B48F58();
      swift_bridgeObjectRelease();
      v43 = v20;
      v24 = *(_QWORD *)(v20 + 16);
      v23 = *(_QWORD *)(v20 + 24);
      if (v24 >= v23 >> 1)
      {
        sub_1D7AA5EF0(v23 > 1, v24 + 1, 1);
        v20 = v43;
      }
      v22 += 16;
      *(_QWORD *)(v20 + 16) = v24 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v20+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(_QWORD *)(v15 + 72) * v24, v18, v14);
      --v19;
    }
    while (v19);
    v25 = v36;
    swift_release();
    v26 = v42;
    a5 = v37;
    a6 = v38;
  }
  else
  {
    v25 = a1;
    v26 = v42;
  }
  swift_bridgeObjectRelease();
  v27 = (int *)type metadata accessor for AccessoryCircularSymbolDetailView();
  v28 = v40;
  v29 = (_QWORD *)((char *)v40 + v27[10]);
  *v29 = swift_getKeyPath();
  v30 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0];
  sub_1D7AA787C(0, &qword_1ED0AC8C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFDA8], MEMORY[0x1E0CD87D0]);
  swift_storeEnumTagMultiPayload();
  v31 = (_QWORD *)((char *)v28 + v27[11]);
  *v31 = swift_getKeyPath();
  sub_1D7AA787C(0, &qword_1ED0AC8C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFFC0], v30);
  swift_storeEnumTagMultiPayload();
  v32 = (char *)v28 + v27[12];
  result = swift_getKeyPath();
  *(_QWORD *)v32 = result;
  v32[8] = 0;
  *v28 = 0;
  v28[1] = 0;
  v28[2] = v25;
  v28[3] = v20;
  v34 = v41;
  v28[4] = v39;
  v28[5] = v34;
  v28[6] = a5;
  v28[7] = a6;
  v28[8] = v26;
  return result;
}

uint64_t AccessoryCircularSymbolDetailView.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  *a1 = sub_1D7B4A11C();
  a1[1] = v3;
  sub_1D7AAA830();
  return sub_1D7AA8C78(v1, (uint64_t)a1 + *(int *)(v4 + 44));
}

uint64_t sub_1D7AA8C78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t KeyPath;
  uint64_t *v40;
  uint64_t (*v41)(uint64_t);
  uint64_t (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v49 = a2;
  sub_1D7AAA9CC();
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AAB2B4(0, &qword_1ED0AC960, v6, MEMORY[0x1E0CD9778], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
  v47 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v46 - v8;
  sub_1D7AAA930();
  v48 = v10;
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v46 - v14;
  sub_1D7AA787C(0, &qword_1ED0ACAE0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFBB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v46 - v20;
  v22 = a1 + *(int *)(type metadata accessor for AccessoryCircularSymbolDetailView() + 48);
  v23 = *(_QWORD *)v22;
  v24 = *(_BYTE *)(v22 + 8);
  sub_1D7AABD10(*(_QWORD *)v22, v24);
  v25 = sub_1D7AD13F4(v23, v24);
  sub_1D7AABE44(v23, v24);
  if ((v25 & 1) != 0 || (*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    v27 = sub_1D7B4A1DC();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v21, 1, 1, v27);
  }
  else
  {
    sub_1D7B4A1D0();
    v26 = sub_1D7B4A1DC();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v21, 0, 1, v26);
  }
  *(_QWORD *)v5 = sub_1D7B49B1C();
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 0;
  sub_1D7AAC9F4();
  sub_1D7AA9044((_QWORD *)a1, (uint64_t)&v5[*(int *)(v28 + 44)]);
  sub_1D7AAA534();
  v29 = sub_1D7B49D38();
  sub_1D7B49864();
  v31 = v30;
  v33 = v32;
  v35 = v34;
  v37 = v36;
  sub_1D7AAD16C((uint64_t)v5, (uint64_t)v9, (uint64_t (*)(_QWORD))sub_1D7AAA9CC);
  v38 = &v9[*(int *)(v47 + 36)];
  *v38 = v29;
  *((_QWORD *)v38 + 1) = v31;
  *((_QWORD *)v38 + 2) = v33;
  *((_QWORD *)v38 + 3) = v35;
  *((_QWORD *)v38 + 4) = v37;
  v38[40] = 0;
  sub_1D7AAD1B0((uint64_t)v5, (uint64_t (*)(_QWORD))sub_1D7AAA9CC);
  KeyPath = swift_getKeyPath();
  sub_1D7AACB08((uint64_t)v9, (uint64_t)v13);
  v40 = (uint64_t *)&v13[*(int *)(v48 + 36)];
  *v40 = KeyPath;
  v40[1] = 0x3FE3333333333333;
  sub_1D7AACB6C((uint64_t)v9);
  sub_1D7AACCDC((uint64_t)v13, (uint64_t)v15, (uint64_t (*)(_QWORD))sub_1D7AAA930);
  v41 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFBB0];
  v42 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1D7AAD0E0((uint64_t)v21, (uint64_t)v19, &qword_1ED0ACAE0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFBB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  sub_1D7AAD16C((uint64_t)v15, (uint64_t)v13, (uint64_t (*)(_QWORD))sub_1D7AAA930);
  v43 = v49;
  sub_1D7AAD0E0((uint64_t)v19, v49, &qword_1ED0ACAE0, v41, v42);
  sub_1D7AAA8AC();
  sub_1D7AAD16C((uint64_t)v13, v43 + *(int *)(v44 + 48), (uint64_t (*)(_QWORD))sub_1D7AAA930);
  sub_1D7AAD1B0((uint64_t)v15, (uint64_t (*)(_QWORD))sub_1D7AAA930);
  sub_1D7AAD130((uint64_t)v21, &qword_1ED0ACAE0, v41, v42);
  sub_1D7AAD1B0((uint64_t)v13, (uint64_t (*)(_QWORD))sub_1D7AAA930);
  return sub_1D7AAD130((uint64_t)v19, &qword_1ED0ACAE0, v41, v42);
}

uint64_t sub_1D7AA9044@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t KeyPath;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t (*v90)(uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _BYTE *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;

  v132 = a2;
  v3 = type metadata accessor for AccessoryCircularSymbolDetailView();
  v103 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v104 = v4;
  v105 = (uint64_t)&v95 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AAB408();
  v128 = *(_QWORD *)(v5 - 8);
  v129 = v5;
  MEMORY[0x1E0C80A78](v5);
  v106 = (char *)&v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AA787C(0, &qword_1ED0AC8D8, v7, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v9 = MEMORY[0x1E0C80A78](v8);
  v131 = (uint64_t)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v130 = (uint64_t)&v95 - v11;
  sub_1D7AAD020(0, &qword_1ED0AC9A0, (uint64_t (*)(uint64_t))sub_1D7AAAB10, (uint64_t (*)(uint64_t))sub_1D7AAAB94, MEMORY[0x1E0CDB848]);
  v125 = v12;
  MEMORY[0x1E0C80A78](v12);
  v126 = (uint64_t)&v95 - v13;
  v98 = sub_1D7B49CC0();
  v97 = *(_QWORD *)(v98 - 8);
  MEMORY[0x1E0C80A78](v98);
  v95 = (char *)&v95 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AAAC38(0, &qword_1ED0ACA78, (uint64_t (*)(uint64_t))sub_1D7AAAB94, (uint64_t (*)(void))sub_1D7AAB314, MEMORY[0x1E0CDEA98]);
  v101 = v15;
  v100 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v99 = (char *)&v95 - v16;
  sub_1D7AAAB10();
  v124 = v17;
  v18 = MEMORY[0x1E0C80A78](v17);
  v96 = (char *)&v95 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v102 = (uint64_t)&v95 - v20;
  v118 = sub_1D7B4A200();
  v116 = *(_QWORD *)(v118 - 8);
  v21 = MEMORY[0x1E0C80A78](v118);
  v115 = (char *)&v95 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v117 = (uint64_t)&v95 - v23;
  v24 = sub_1D7B4A20C();
  v108 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)&v95 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AAAD54(0);
  v107 = v27;
  MEMORY[0x1E0C80A78](v27);
  v29 = (char *)&v95 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AAAC38(0, &qword_1ED0ACA68, v30, (uint64_t (*)(void))sub_1D7AAAF48, MEMORY[0x1E0CDDF98]);
  v114 = v31;
  v113 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v133 = (char *)&v95 - v32;
  sub_1D7AAACB8();
  v112 = v33;
  MEMORY[0x1E0C80A78](v33);
  v35 = (char *)&v95 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AAAC38(0, &qword_1ED0ACA60, v36, (uint64_t (*)(void))sub_1D7AAB1C8, MEMORY[0x1E0CEFB08]);
  v111 = v37;
  v110 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37);
  v109 = (char *)&v95 - v38;
  sub_1D7AAAB94();
  v119 = v39;
  MEMORY[0x1E0C80A78](v39);
  v120 = (char *)&v95 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AAAAEC(0);
  v122 = v41;
  MEMORY[0x1E0C80A78](v41);
  v123 = (char *)&v95 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AAAAC8(0);
  v44 = MEMORY[0x1E0C80A78](v43);
  v127 = (uint64_t)&v95 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = MEMORY[0x1E0C80A78](v44);
  v121 = (char *)&v95 - v47;
  MEMORY[0x1E0C80A78](v46);
  v134 = (uint64_t)&v95 - v48;
  if (a1[2])
  {
    v49 = a1[2];
  }
  else
  {
    if (a1[1])
    {
      swift_bridgeObjectRetain();
      v50 = sub_1D7B49FFC();
    }
    else
    {
      v50 = sub_1D7B4A02C();
    }
    v49 = v50;
  }
  swift_retain();
  sub_1D7AD117C((uint64_t)v26);
  v51 = a1[4];
  if (*(_QWORD *)(a1[3] + 16))
    v52 = sub_1D7B49E10();
  else
    v52 = sub_1D7B49DA4();
  sub_1D7AA9C8C(v51 & 1, v52, v49, (uint64_t)v29);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v108 + 8))(v26, v24);
  sub_1D7AAAF48();
  sub_1D7B49EE8();
  sub_1D7AAD1B0((uint64_t)v29, (uint64_t (*)(_QWORD))sub_1D7AAAD54);
  v53 = v117;
  sub_1D7AD1150(v117);
  v54 = v115;
  sub_1D7B4A1F4();
  v55 = sub_1D7B4A1E8();
  v56 = *(void (**)(char *, uint64_t))(v116 + 8);
  v57 = v118;
  v56(v54, v118);
  if ((v55 & 1) != 0)
    v58 = sub_1D7B49FC0();
  else
    v58 = sub_1D7B49F90();
  v59 = v58;
  v61 = v119;
  v60 = (uint64_t)v120;
  v56((char *)v53, v57);
  KeyPath = swift_getKeyPath();
  v63 = v113;
  v64 = v133;
  v65 = v114;
  (*(void (**)(char *, char *, uint64_t))(v113 + 16))(v35, v133, v114);
  v66 = (uint64_t *)&v35[*(int *)(v112 + 36)];
  *v66 = KeyPath;
  v66[1] = v59;
  (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v65);
  sub_1D7AAB1C8();
  v67 = v109;
  sub_1D7B49EC4();
  sub_1D7AAD1B0((uint64_t)v35, (uint64_t (*)(_QWORD))sub_1D7AAACB8);
  v68 = v110;
  v69 = v111;
  (*(void (**)(uint64_t, char *, uint64_t))(v110 + 16))(v60, v67, v111);
  *(_QWORD *)(v60 + *(int *)(v61 + 36)) = 0x3FF0000000000000;
  (*(void (**)(char *, uint64_t))(v68 + 8))(v67, v69);
  if (a1[8])
  {
    swift_bridgeObjectRetain();
    v70 = v95;
    sub_1D7B49C9C();
    v71 = sub_1D7AAB314();
    v72 = v99;
    sub_1D7B49F24();
    (*(void (**)(char *, uint64_t))(v97 + 8))(v70, v98);
    v135 = v61;
    v136 = v71;
    swift_getOpaqueTypeConformance2();
    v73 = (uint64_t)v96;
    v74 = v101;
    sub_1D7B49EF4();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v100 + 8))(v72, v74);
    v75 = v102;
    sub_1D7AACCDC(v73, v102, (uint64_t (*)(_QWORD))sub_1D7AAAB10);
    sub_1D7AAD16C(v75, v126, (uint64_t (*)(_QWORD))sub_1D7AAAB10);
    swift_storeEnumTagMultiPayload();
    sub_1D7AACBD0();
    v76 = (uint64_t)v123;
    sub_1D7B49BF4();
    sub_1D7AAD1B0(v75, (uint64_t (*)(_QWORD))sub_1D7AAAB10);
  }
  else
  {
    sub_1D7AAD16C(v60, v126, (uint64_t (*)(_QWORD))sub_1D7AAAB94);
    swift_storeEnumTagMultiPayload();
    sub_1D7AACBD0();
    sub_1D7AAB314();
    v76 = (uint64_t)v123;
    sub_1D7B49BF4();
  }
  sub_1D7AAD1B0(v60, (uint64_t (*)(_QWORD))sub_1D7AAAB94);
  v77 = a1[6];
  v135 = a1[5];
  v136 = v77;
  swift_bridgeObjectRetain();
  sub_1D7B4A41C();
  sub_1D7AACC74();
  v78 = (uint64_t)v121;
  sub_1D7B49F3C();
  swift_bridgeObjectRelease();
  sub_1D7AAD1B0(v76, (uint64_t (*)(_QWORD))sub_1D7AAAAEC);
  sub_1D7AACCDC(v78, v134, (uint64_t (*)(_QWORD))sub_1D7AAAAC8);
  v79 = a1[3];
  if (*(_QWORD *)(v79 + 16))
  {
    v80 = sub_1D7B49D08();
    v81 = (uint64_t)v106;
    *v106 = v80;
    sub_1D7AACD20();
    v135 = v79;
    swift_getKeyPath();
    v82 = v105;
    sub_1D7AAD16C((uint64_t)a1, v105, (uint64_t (*)(_QWORD))type metadata accessor for AccessoryCircularSymbolDetailView);
    v83 = (*(unsigned __int8 *)(v103 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80);
    v84 = swift_allocObject();
    sub_1D7AACCDC(v82, v84 + v83, (uint64_t (*)(_QWORD))type metadata accessor for AccessoryCircularSymbolDetailView);
    v85 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240];
    sub_1D7AA787C(0, &qword_1ED0ACAF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1D7AAB538(0);
    sub_1D7AAB6C0();
    sub_1D7AA76D4(&qword_1ED0AC8B8, v85, MEMORY[0x1E0CAF260]);
    sub_1D7AAB780();
    swift_bridgeObjectRetain();
    sub_1D7B4A0D4();
    v86 = v130;
    sub_1D7AACCDC(v81, v130, (uint64_t (*)(_QWORD))sub_1D7AAB408);
    v87 = 0;
  }
  else
  {
    v87 = 1;
    v86 = v130;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v128 + 56))(v86, v87, 1, v129);
  v88 = v134;
  v89 = v127;
  sub_1D7AAD16C(v134, v127, (uint64_t (*)(_QWORD))sub_1D7AAAAC8);
  v90 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  v91 = v131;
  sub_1D7AAD0E0(v86, v131, &qword_1ED0AC8D8, (uint64_t (*)(uint64_t))sub_1D7AAB408, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v92 = v132;
  sub_1D7AAD16C(v89, v132, (uint64_t (*)(_QWORD))sub_1D7AAAAC8);
  sub_1D7AAAA44();
  sub_1D7AAD0E0(v91, v92 + *(int *)(v93 + 48), &qword_1ED0AC8D8, (uint64_t (*)(uint64_t))sub_1D7AAB408, v90);
  sub_1D7AAD130(v86, &qword_1ED0AC8D8, (uint64_t (*)(uint64_t))sub_1D7AAB408, v90);
  sub_1D7AAD1B0(v88, (uint64_t (*)(_QWORD))sub_1D7AAAAC8);
  sub_1D7AAD130(v91, &qword_1ED0AC8D8, (uint64_t (*)(uint64_t))sub_1D7AAB408, v90);
  return sub_1D7AAD1B0(v89, (uint64_t (*)(_QWORD))sub_1D7AAAAC8);
}

uint64_t sub_1D7AA9C8C@<X0>(int a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v43 = a2;
  v44 = a3;
  LODWORD(v40) = a1;
  v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDB848];
  sub_1D7AAD020(0, &qword_1ED0AC9B0, (uint64_t (*)(uint64_t))sub_1D7AAAD78, (uint64_t (*)(uint64_t))sub_1D7AAAE74, MEMORY[0x1E0CDB848]);
  v45 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (uint64_t *)((char *)&v36 - v7);
  sub_1D7AAD020(0, &qword_1ED0AC9A8, (uint64_t (*)(uint64_t))sub_1D7AAAD9C, (uint64_t (*)(uint64_t))sub_1D7AAADF8, v5);
  v38 = v9;
  MEMORY[0x1E0C80A78](v9);
  v39 = (uint64_t)&v36 - v10;
  sub_1D7AA787C(0, &qword_1ED0ACA40, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDF7E8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDCF68]);
  v12 = v11;
  MEMORY[0x1E0C80A78](v11);
  v14 = (uint64_t *)((char *)&v36 - v13);
  v15 = sub_1D7B4A014();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AAADF8();
  v41 = v19;
  v20 = MEMORY[0x1E0C80A78](v19);
  v22 = (uint64_t *)((char *)&v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v36 - v23;
  sub_1D7AAAD78(0);
  v42 = v25;
  MEMORY[0x1E0C80A78](v25);
  v37 = (char *)&v36 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath();
  v28 = KeyPath;
  if ((v40 & 1) != 0)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, *MEMORY[0x1E0CDF7C0], v15);
    v29 = swift_getKeyPath();
    v40 = a4;
    v30 = v29;
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))((char *)v14 + *(int *)(v12 + 28), v18, v15);
    *v14 = v30;
    v31 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CDF7E8];
    sub_1D7AAD0E0((uint64_t)v14, (uint64_t)v22 + *(int *)(v41 + 36), &qword_1ED0ACA40, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDF7E8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDCF68]);
    v32 = v43;
    *v22 = v44;
    v22[1] = v28;
    v22[2] = v32;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1D7AAD130((uint64_t)v14, &qword_1ED0ACA40, v31, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDCF68]);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    swift_release();
    sub_1D7AACCDC((uint64_t)v22, (uint64_t)v24, (uint64_t (*)(_QWORD))sub_1D7AAADF8);
    sub_1D7AAD16C((uint64_t)v24, v39, (uint64_t (*)(_QWORD))sub_1D7AAADF8);
    swift_storeEnumTagMultiPayload();
    sub_1D7AAAD9C();
    sub_1D7AAB018();
    sub_1D7AAB078();
    v33 = (uint64_t)v37;
    sub_1D7B49BF4();
    sub_1D7AAD1B0((uint64_t)v24, (uint64_t (*)(_QWORD))sub_1D7AAADF8);
    sub_1D7AAD16C(v33, (uint64_t)v8, (uint64_t (*)(_QWORD))sub_1D7AAAD78);
    swift_storeEnumTagMultiPayload();
    sub_1D7AAAE74();
    sub_1D7AAAFB0();
    sub_1D7AAB0E0();
    sub_1D7B49BF4();
    return sub_1D7AAD1B0(v33, (uint64_t (*)(_QWORD))sub_1D7AAAD78);
  }
  else
  {
    v35 = v43;
    *v8 = v44;
    v8[1] = KeyPath;
    v8[2] = v35;
    swift_storeEnumTagMultiPayload();
    sub_1D7AAAE74();
    sub_1D7AAAFB0();
    sub_1D7AAB0E0();
    swift_retain();
    swift_retain();
    return sub_1D7B49BF4();
  }
}

uint64_t sub_1D7AAA0D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  void (*v32)(_BYTE *, uint64_t);
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  _BYTE *v41;
  uint64_t KeyPath;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v53[4];
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;

  v65 = a3;
  v66 = a2;
  v4 = sub_1D7B4A200();
  v5 = *(_QWORD *)(v4 - 8);
  v55 = v4;
  v56 = v5;
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = &v53[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v6);
  v10 = &v53[-v9];
  v11 = sub_1D7B48F4C();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = &v53[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1D7AAB654();
  v60 = *(_QWORD *)(v15 - 8);
  v61 = v15;
  MEMORY[0x1E0C80A78](v15);
  v58 = &v53[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1D7AAB5D8();
  v57 = v17;
  MEMORY[0x1E0C80A78](v17);
  v59 = &v53[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1D7AAB55C();
  v63 = v19;
  MEMORY[0x1E0C80A78](v19);
  v64 = &v53[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1D7AAB538(0);
  MEMORY[0x1E0C80A78](v21);
  v62 = &v53[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  v23 = sub_1D7B49EAC();
  v25 = v24;
  LOBYTE(v12) = v26 & 1;
  sub_1D7B49D98();
  v27 = sub_1D7B49E88();
  v29 = v28;
  v54 = v30;
  v31 = v55;
  swift_release();
  sub_1D7AACF84(v23, v25, v12);
  swift_bridgeObjectRelease();
  type metadata accessor for AccessoryCircularSymbolDetailView();
  sub_1D7AD1150((uint64_t)v10);
  sub_1D7B4A1F4();
  LOBYTE(v12) = sub_1D7B4A1E8();
  v32 = *(void (**)(_BYTE *, uint64_t))(v56 + 8);
  v32(v8, v31);
  if ((v12 & 1) != 0)
    sub_1D7B49FC0();
  else
    sub_1D7B49FCC();
  v33 = v54 & 1;
  v32(v10, v31);
  v34 = sub_1D7B49E70();
  v36 = v35;
  v38 = v37;
  v40 = v39 & 1;
  sub_1D7AACF84(v27, v29, v33);
  swift_release();
  swift_bridgeObjectRelease();
  v67 = v34;
  v68 = v36;
  v69 = v40;
  v70 = v38;
  v41 = v58;
  sub_1D7B49F18();
  sub_1D7AACF84(v34, v36, v40);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath();
  v44 = (uint64_t)v59;
  v43 = v60;
  v45 = v61;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v60 + 16))(v59, v41, v61);
  v46 = v44 + *(int *)(v57 + 36);
  *(_QWORD *)v46 = KeyPath;
  *(_QWORD *)(v46 + 8) = 2;
  *(_BYTE *)(v46 + 16) = 0;
  (*(void (**)(_BYTE *, uint64_t))(v43 + 8))(v41, v45);
  v47 = swift_getKeyPath();
  v48 = v64;
  sub_1D7AAD16C(v44, (uint64_t)v64, (uint64_t (*)(_QWORD))sub_1D7AAB5D8);
  v49 = &v48[*(int *)(v63 + 36)];
  *(_QWORD *)v49 = v47;
  v49[8] = 1;
  sub_1D7AAD1B0(v44, (uint64_t (*)(_QWORD))sub_1D7AAB5D8);
  v50 = *(_QWORD *)(v66 + 48);
  v67 = *(_QWORD *)(v66 + 40);
  v68 = v50;
  swift_bridgeObjectRetain();
  sub_1D7B4A41C();
  sub_1D7AAB800();
  v51 = (uint64_t)v62;
  sub_1D7B49F3C();
  swift_bridgeObjectRelease();
  sub_1D7AAD1B0((uint64_t)v48, (uint64_t (*)(_QWORD))sub_1D7AAB55C);
  return sub_1D7AACCDC(v51, v65, (uint64_t (*)(_QWORD))sub_1D7AAB538);
}

void sub_1D7AAA534()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;

  v1 = type metadata accessor for AccessoryCircularSymbolDetailView();
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(v0 + 32);
  sub_1D7AAD16C(v0, (uint64_t)v3, v5);
  if ((v4 & 1) != 0)
  {
    v6 = *((_QWORD *)v3 + 4);
    sub_1D7AAD1B0((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for AccessoryCircularSymbolDetailView);
    if ((v6 & 2) != 0)
      return;
  }
  else
  {
    sub_1D7AAD1B0((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for AccessoryCircularSymbolDetailView);
  }
  v7 = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (v7)
  {
    v8 = v7;
    objc_msgSend(v7, sel_isAppleWatch);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1D7AAA630()
{
  return sub_1D7B49F00();
}

uint64_t sub_1D7AAA648@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  *a1 = sub_1D7B4A11C();
  a1[1] = v3;
  sub_1D7AAA830();
  return sub_1D7AA8C78(v1, (uint64_t)a1 + *(int *)(v4 + 44));
}

uint64_t sub_1D7AAA684()
{
  return sub_1D7B49A98();
}

uint64_t sub_1D7AAA6A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D7AACF94(a1, a2, a3, a4, (void (*)(_QWORD))MEMORY[0x1E0CEFDA8], MEMORY[0x1E0CEF9A0]);
}

uint64_t sub_1D7AAA6B8()
{
  unsigned __int8 v1;

  sub_1D7B49A80();
  sub_1D7AA76D4(&qword_1F014D398, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEF8C8], MEMORY[0x1E0CEF8B8]);
  sub_1D7B49AEC();
  return v1;
}

uint64_t sub_1D7AAA718@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  sub_1D7B49A80();
  sub_1D7AA76D4(&qword_1F014D398, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEF8C8], MEMORY[0x1E0CEF8B8]);
  result = sub_1D7B49AEC();
  *a1 = v3;
  return result;
}

uint64_t type metadata accessor for AccessoryCircularSymbolDetailView()
{
  uint64_t result;

  result = qword_1ED0ACB10;
  if (!qword_1ED0ACB10)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1D7AAA7C8()
{
  return sub_1D7B49A98();
}

uint64_t sub_1D7AAA7E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D7AACF94(a1, a2, a3, a4, (void (*)(_QWORD))MEMORY[0x1E0CEFDA8], MEMORY[0x1E0CEF9A0]);
}

uint64_t sub_1D7AAA80C()
{
  return sub_1D7B49A8C();
}

void sub_1D7AAA830()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED0AC8E8)
  {
    sub_1D7AA787C(255, &qword_1ED0ACAB8, (uint64_t (*)(uint64_t))sub_1D7AAA8AC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    v0 = sub_1D7B49924();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED0AC8E8);
  }
}

void sub_1D7AAA8AC()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED0ACAE8)
  {
    sub_1D7AA787C(255, &qword_1ED0ACAE0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFBB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    sub_1D7AAA930();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED0ACAE8);
  }
}

void sub_1D7AAA930()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED0AC988)
  {
    sub_1D7AAB2B4(255, &qword_1ED0AC960, (uint64_t (*)(uint64_t))sub_1D7AAA9CC, MEMORY[0x1E0CD9778], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    sub_1D7AA7E70(255, &qword_1ED0AC9F8, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CDCF68]);
    v0 = sub_1D7B49978();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED0AC988);
  }
}

void sub_1D7AAA9CC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED0ACA88)
  {
    sub_1D7AA787C(255, &qword_1ED0ACAC8, (uint64_t (*)(uint64_t))sub_1D7AAAA44, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    sub_1D7AAB974();
    v0 = sub_1D7B4A0B0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED0ACA88);
  }
}

void sub_1D7AAAA44()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED0AC8F8)
  {
    sub_1D7AAAAC8(255);
    sub_1D7AA787C(255, &qword_1ED0AC8D8, (uint64_t (*)(uint64_t))sub_1D7AAB408, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED0AC8F8);
  }
}

void sub_1D7AAAAC8(uint64_t a1)
{
  sub_1D7AAD020(a1, &qword_1ED0AC8F0, (uint64_t (*)(uint64_t))sub_1D7AAAAEC, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDCFD0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
}

void sub_1D7AAAAEC(uint64_t a1)
{
  sub_1D7AAD020(a1, &qword_1ED0AC9C0, (uint64_t (*)(uint64_t))sub_1D7AAAB10, (uint64_t (*)(uint64_t))sub_1D7AAAB94, MEMORY[0x1E0CDB880]);
}

void sub_1D7AAAB10()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED0AC938)
  {
    sub_1D7AAAC38(255, &qword_1ED0ACA78, (uint64_t (*)(uint64_t))sub_1D7AAAB94, (uint64_t (*)(void))sub_1D7AAB314, MEMORY[0x1E0CDEA98]);
    sub_1D7B49CF0();
    v0 = sub_1D7B49978();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED0AC938);
  }
}

void sub_1D7AAAB94()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED0AC908)
  {
    sub_1D7AAAC38(255, &qword_1ED0ACA60, (uint64_t (*)(uint64_t))sub_1D7AAACB8, (uint64_t (*)(void))sub_1D7AAB1C8, MEMORY[0x1E0CEFB08]);
    sub_1D7AAB2B4(255, &qword_1ED0AC9F0, MEMORY[0x1E0CDBFF0], MEMORY[0x1E0CDBFE8], MEMORY[0x1E0CDBED0]);
    v0 = sub_1D7B49978();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED0AC908);
  }
}

void sub_1D7AAAC38(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  if (!*a2)
  {
    v11[0] = a3(255);
    v11[1] = a4();
    v9 = MEMORY[0x1D829FEEC](a1, v11, a5, 0);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void sub_1D7AAACB8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED0AC918)
  {
    sub_1D7AAAC38(255, &qword_1ED0ACA68, (uint64_t (*)(uint64_t))sub_1D7AAAD54, (uint64_t (*)(void))sub_1D7AAAF48, MEMORY[0x1E0CDDF98]);
    sub_1D7AAAEE8(255, &qword_1ED0ACA30, &qword_1ED0ACA80, MEMORY[0x1E0CDF5D0]);
    v0 = sub_1D7B49978();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED0AC918);
  }
}

void sub_1D7AAAD54(uint64_t a1)
{
  sub_1D7AAD020(a1, &qword_1ED0AC9E0, (uint64_t (*)(uint64_t))sub_1D7AAAD78, (uint64_t (*)(uint64_t))sub_1D7AAAE74, MEMORY[0x1E0CDB880]);
}

void sub_1D7AAAD78(uint64_t a1)
{
  sub_1D7AAD020(a1, &qword_1ED0AC9D0, (uint64_t (*)(uint64_t))sub_1D7AAAD9C, (uint64_t (*)(uint64_t))sub_1D7AAADF8, MEMORY[0x1E0CDB880]);
}

void sub_1D7AAAD9C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED0AC948)
  {
    v0 = sub_1D7B49978();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED0AC948);
  }
}

void sub_1D7AAADF8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED0AC980)
  {
    sub_1D7AAAE74();
    sub_1D7AA787C(255, &qword_1ED0ACA40, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDF7E8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDCF68]);
    v0 = sub_1D7B49978();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED0AC980);
  }
}

void sub_1D7AAAE74()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED0AC958)
  {
    sub_1D7AAAEE8(255, &qword_1ED0ACA20, &qword_1ED0ACA58, MEMORY[0x1E0CDD840]);
    v0 = sub_1D7B49978();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED0AC958);
  }
}

void sub_1D7AAAEE8(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_1D7AA7E70(255, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v5 = sub_1D7B49CE4();
    if (!v6)
      atomic_store(v5, a2);
  }
}

unint64_t sub_1D7AAAF48()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1ED0AC9D8;
  if (!qword_1ED0AC9D8)
  {
    sub_1D7AAAD54(255);
    v2 = v1;
    v3[0] = sub_1D7AAAFB0();
    v3[1] = sub_1D7AAB0E0();
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CDB8A0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1ED0AC9D8);
  }
  return result;
}

unint64_t sub_1D7AAAFB0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1ED0AC9C8;
  if (!qword_1ED0AC9C8)
  {
    sub_1D7AAAD78(255);
    v2 = v1;
    v3[0] = sub_1D7AAB018();
    v3[1] = sub_1D7AAB078();
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CDB8A0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1ED0AC9C8);
  }
  return result;
}

unint64_t sub_1D7AAB018()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1ED0AC940;
  if (!qword_1ED0AC940)
  {
    sub_1D7AAAD9C();
    v2[0] = MEMORY[0x1E0CDF820];
    v2[1] = MEMORY[0x1E0CDB158];
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1ED0AC940);
  }
  return result;
}

unint64_t sub_1D7AAB078()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1ED0AC978;
  if (!qword_1ED0AC978)
  {
    sub_1D7AAADF8();
    v2 = v1;
    v3[0] = sub_1D7AAB0E0();
    v3[1] = sub_1D7AAB168();
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1ED0AC978);
  }
  return result;
}

unint64_t sub_1D7AAB0E0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_1ED0AC950;
  if (!qword_1ED0AC950)
  {
    sub_1D7AAAE74();
    v2 = v1;
    v3 = sub_1D7AAB274((unint64_t *)&unk_1ED0ACA10, &qword_1ED0ACA20, &qword_1ED0ACA58, MEMORY[0x1E0CDD840]);
    v4[0] = MEMORY[0x1E0CDF820];
    v4[1] = v3;
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CD9C20], v2, v4);
    atomic_store(result, (unint64_t *)&qword_1ED0AC950);
  }
  return result;
}

unint64_t sub_1D7AAB168()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED0ACA38;
  if (!qword_1ED0ACA38)
  {
    sub_1D7AA787C(255, &qword_1ED0ACA40, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDF7E8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDCF68]);
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CDCF80], v1);
    atomic_store(result, (unint64_t *)&qword_1ED0ACA38);
  }
  return result;
}

unint64_t sub_1D7AAB1C8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  result = qword_1ED0AC910;
  if (!qword_1ED0AC910)
  {
    sub_1D7AAACB8();
    v2 = v1;
    sub_1D7AAAD54(255);
    v4[2] = v3;
    v4[3] = sub_1D7AAAF48();
    v4[0] = swift_getOpaqueTypeConformance2();
    v4[1] = sub_1D7AAB274(&qword_1ED0ACA28, &qword_1ED0ACA30, &qword_1ED0ACA80, MEMORY[0x1E0CDF5D0]);
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CD9C20], v2, v4);
    atomic_store(result, (unint64_t *)&qword_1ED0AC910);
  }
  return result;
}

uint64_t sub_1D7AAB274(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    sub_1D7AAAEE8(255, a2, a3, a4);
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CDCF80], v6);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1D7AAB2B4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3(255);
    v10 = a5(a1, v9, a4);
    if (!v11)
      atomic_store(v10, a2);
  }
}

unint64_t sub_1D7AAB314()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  result = qword_1ED0AC900;
  if (!qword_1ED0AC900)
  {
    sub_1D7AAAB94();
    v2 = v1;
    sub_1D7AAACB8();
    v4[2] = v3;
    v4[3] = sub_1D7AAB1C8();
    v4[0] = swift_getOpaqueTypeConformance2();
    v4[1] = sub_1D7AAB3A0();
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CD9C20], v2, v4);
    atomic_store(result, (unint64_t *)&qword_1ED0AC900);
  }
  return result;
}

unint64_t sub_1D7AAB3A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED0AC9E8;
  if (!qword_1ED0AC9E8)
  {
    sub_1D7AAB2B4(255, &qword_1ED0AC9F0, MEMORY[0x1E0CDBFF0], MEMORY[0x1E0CDBFE8], MEMORY[0x1E0CDBED0]);
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CDBEF0], v1);
    atomic_store(result, (unint64_t *)&qword_1ED0AC9E8);
  }
  return result;
}

void sub_1D7AAB408()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED0AC8D0)
  {
    sub_1D7AAB468();
    sub_1D7AAB720();
    v0 = sub_1D7B498D0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED0AC8D0);
  }
}

void sub_1D7AAB468()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_1ED0ACAA8)
  {
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240];
    sub_1D7AA787C(255, &qword_1ED0ACAF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1D7B48F4C();
    sub_1D7AAB538(255);
    sub_1D7AAB6C0();
    sub_1D7AA76D4(&qword_1ED0AC8B8, v0, MEMORY[0x1E0CAF260]);
    v1 = sub_1D7B4A0E0();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_1ED0ACAA8);
  }
}

void sub_1D7AAB538(uint64_t a1)
{
  sub_1D7AAD020(a1, &qword_1ED0AC998, (uint64_t (*)(uint64_t))sub_1D7AAB55C, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDCFD0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
}

void sub_1D7AAB55C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED0AC970)
  {
    sub_1D7AAB5D8();
    sub_1D7AA7E70(255, &qword_1ED0ACA08, MEMORY[0x1E0CD9070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CDCF68]);
    v0 = sub_1D7B49978();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED0AC970);
  }
}

void sub_1D7AAB5D8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED0AC928)
  {
    sub_1D7AAB654();
    sub_1D7AAAEE8(255, (unint64_t *)&qword_1ED0ACA50, &qword_1ED0ACB08, MEMORY[0x1E0DEB418]);
    v0 = sub_1D7B49978();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED0AC928);
  }
}

void sub_1D7AAB654()
{
  unint64_t v0;
  uint64_t v1;
  _QWORD v2[2];

  if (!qword_1ED0ACA70)
  {
    v2[0] = MEMORY[0x1E0CDDD78];
    v2[1] = MEMORY[0x1E0CDDD58];
    v0 = MEMORY[0x1D829FEEC](0, v2, MEMORY[0x1E0CDE648], 0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED0ACA70);
  }
}

unint64_t sub_1D7AAB6C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED0ACAF8;
  if (!qword_1ED0ACAF8)
  {
    sub_1D7AA787C(255, &qword_1ED0ACAF0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0DEAF48], v1);
    atomic_store(result, (unint64_t *)&qword_1ED0ACAF8);
  }
  return result;
}

unint64_t sub_1D7AAB720()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1ED0ACAA0;
  if (!qword_1ED0ACAA0)
  {
    sub_1D7AAB468();
    v2 = v1;
    v3 = sub_1D7AAB780();
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CDFEE8], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1ED0ACAA0);
  }
  return result;
}

unint64_t sub_1D7AAB780()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1ED0AC990;
  if (!qword_1ED0AC990)
  {
    sub_1D7AAB538(255);
    v2 = v1;
    v3[0] = sub_1D7AAB800();
    v3[1] = sub_1D7AA76D4(&qword_1F014D360, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDCFD0], MEMORY[0x1E0CDCFB8]);
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1ED0AC990);
  }
  return result;
}

unint64_t sub_1D7AAB800()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1ED0AC968;
  if (!qword_1ED0AC968)
  {
    sub_1D7AAB55C();
    v2 = v1;
    v3[0] = sub_1D7AAB868();
    v3[1] = sub_1D7AAB914();
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1ED0AC968);
  }
  return result;
}

unint64_t sub_1D7AAB868()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[4];

  result = qword_1ED0AC920;
  if (!qword_1ED0AC920)
  {
    sub_1D7AAB5D8();
    v2 = v1;
    v3[2] = MEMORY[0x1E0CDDD78];
    v3[3] = MEMORY[0x1E0CDDD58];
    v3[0] = swift_getOpaqueTypeConformance2();
    v3[1] = sub_1D7AAB274(&qword_1ED0ACA48, (unint64_t *)&qword_1ED0ACA50, &qword_1ED0ACB08, MEMORY[0x1E0DEB418]);
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1ED0AC920);
  }
  return result;
}

unint64_t sub_1D7AAB914()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED0ACA00;
  if (!qword_1ED0ACA00)
  {
    sub_1D7AA7E70(255, &qword_1ED0ACA08, MEMORY[0x1E0CD9070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CDCF68]);
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CDCF80], v1);
    atomic_store(result, (unint64_t *)&qword_1ED0ACA00);
  }
  return result;
}

unint64_t sub_1D7AAB974()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED0ACAC0;
  if (!qword_1ED0ACAC0)
  {
    sub_1D7AA787C(255, &qword_1ED0ACAC8, (uint64_t (*)(uint64_t))sub_1D7AAAA44, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CE0680], v1);
    atomic_store(result, (unint64_t *)&qword_1ED0ACAC0);
  }
  return result;
}

unint64_t sub_1D7AAB9D8()
{
  unint64_t result;

  result = qword_1F014D368;
  if (!qword_1F014D368)
  {
    result = MEMORY[0x1D829FF28](&protocol conformance descriptor for AccessoryCircularSymbolDetailView.Options, &type metadata for AccessoryCircularSymbolDetailView.Options);
    atomic_store(result, (unint64_t *)&qword_1F014D368);
  }
  return result;
}

unint64_t sub_1D7AABA20()
{
  unint64_t result;

  result = qword_1F014D370;
  if (!qword_1F014D370)
  {
    result = MEMORY[0x1D829FF28](&protocol conformance descriptor for AccessoryCircularSymbolDetailView.Options, &type metadata for AccessoryCircularSymbolDetailView.Options);
    atomic_store(result, (unint64_t *)&qword_1F014D370);
  }
  return result;
}

unint64_t sub_1D7AABA68()
{
  unint64_t result;

  result = qword_1ED0ACAD0;
  if (!qword_1ED0ACAD0)
  {
    result = MEMORY[0x1D829FF28](&protocol conformance descriptor for AccessoryCircularSymbolDetailView.Options, &type metadata for AccessoryCircularSymbolDetailView.Options);
    atomic_store(result, (unint64_t *)&qword_1ED0ACAD0);
  }
  return result;
}

unint64_t sub_1D7AABAB0()
{
  unint64_t result;

  result = qword_1ED0ACAD8;
  if (!qword_1ED0ACAD8)
  {
    result = MEMORY[0x1D829FF28](&protocol conformance descriptor for AccessoryCircularSymbolDetailView.Options, &type metadata for AccessoryCircularSymbolDetailView.Options);
    atomic_store(result, (unint64_t *)&qword_1ED0ACAD8);
  }
  return result;
}

uint64_t sub_1D7AABAF4()
{
  return swift_getOpaqueTypeConformance2();
}

_QWORD *initializeBufferWithCopyOfBuffer for AccessoryCircularSymbolDetailView(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD *v24;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    v9 = a2[7];
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_QWORD *)(a1 + 56) = v9;
    v10 = a3[10];
    v24 = (_QWORD *)(a1 + v10);
    v11 = (uint64_t *)((char *)a2 + v10);
    *(_QWORD *)(a1 + 64) = a2[8];
    sub_1D7AA787C(0, &qword_1ED0AC8C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFDA8], MEMORY[0x1E0CD87D0]);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v12 = sub_1D7B4A200();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v24, v11, v12);
    }
    else
    {
      *v24 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v14 = a3[11];
    v15 = (_QWORD *)((char *)v4 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    sub_1D7AA787C(0, &qword_1ED0AC8C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFFC0], MEMORY[0x1E0CD87D0]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v17 = sub_1D7B4A20C();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    }
    else
    {
      *v15 = *v16;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v18 = a3[12];
    v19 = (char *)v4 + v18;
    v20 = (uint64_t)a2 + v18;
    v21 = *(_QWORD *)v20;
    v22 = *(_BYTE *)(v20 + 8);
    sub_1D7AABD10(*(_QWORD *)v20, v22);
    *(_QWORD *)v19 = v21;
    v19[8] = v22;
  }
  return v4;
}

uint64_t sub_1D7AABD10(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return swift_retain();
  return result;
}

uint64_t destroy for AccessoryCircularSymbolDetailView(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[10];
  sub_1D7AA787C(0, &qword_1ED0AC8C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFDA8], MEMORY[0x1E0CD87D0]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = sub_1D7B4A200();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  v6 = a1 + a2[11];
  sub_1D7AA787C(0, &qword_1ED0AC8C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFFC0], MEMORY[0x1E0CD87D0]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = sub_1D7B4A20C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  return sub_1D7AABE44(*(_QWORD *)(a1 + a2[12]), *(_BYTE *)(a1 + a2[12] + 8));
}

uint64_t sub_1D7AABE44(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for AccessoryCircularSymbolDetailView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  v8 = a3[10];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  sub_1D7AA787C(0, &qword_1ED0AC8C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFDA8], MEMORY[0x1E0CD87D0]);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v11 = sub_1D7B4A200();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  else
  {
    *v9 = *v10;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v12 = a3[11];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  sub_1D7AA787C(0, &qword_1ED0AC8C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFFC0], MEMORY[0x1E0CD87D0]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v15 = sub_1D7B4A20C();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  else
  {
    *v13 = *v14;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v16 = a3[12];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = *(_QWORD *)v18;
  v20 = *(_BYTE *)(v18 + 8);
  sub_1D7AABD10(*(_QWORD *)v18, v20);
  *(_QWORD *)v17 = v19;
  *(_BYTE *)(v17 + 8) = v20;
  return a1;
}

_QWORD *assignWithCopy for AccessoryCircularSymbolDetailView(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v6 = a3[10];
    v7 = (_QWORD *)((char *)a1 + v6);
    v8 = (_QWORD *)((char *)a2 + v6);
    v9 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFDA8];
    v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0];
    sub_1D7AAD130((uint64_t)a1 + v6, &qword_1ED0AC8C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFDA8], MEMORY[0x1E0CD87D0]);
    sub_1D7AA787C(0, &qword_1ED0AC8C0, v9, v10);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v11 = sub_1D7B4A200();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v7, v8, v11);
    }
    else
    {
      *v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v12 = a3[11];
    v13 = (_QWORD *)((char *)a1 + v12);
    v14 = (_QWORD *)((char *)a2 + v12);
    v15 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFFC0];
    sub_1D7AAD130((uint64_t)a1 + v12, &qword_1ED0AC8C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFFC0], v10);
    sub_1D7AA787C(0, &qword_1ED0AC8C8, v15, v10);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v16 = sub_1D7B4A20C();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    }
    else
    {
      *v13 = *v14;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v17 = a3[12];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = *(_QWORD *)v19;
  v21 = v19[8];
  sub_1D7AABD10(*(_QWORD *)v19, v21);
  v22 = *(_QWORD *)v18;
  v23 = v18[8];
  *(_QWORD *)v18 = v20;
  v18[8] = v21;
  sub_1D7AABE44(v22, v23);
  return a1;
}

uint64_t initializeWithTake for AccessoryCircularSymbolDetailView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v6 = a3[10];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  sub_1D7AA787C(0, &qword_1ED0AC8C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFDA8], MEMORY[0x1E0CD87D0]);
  v10 = v9;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v11 = sub_1D7B4A200();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v7, v8, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v12 = a3[11];
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  sub_1D7AA787C(0, &qword_1ED0AC8C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFFC0], MEMORY[0x1E0CD87D0]);
  v16 = v15;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v17 = sub_1D7B4A20C();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v13, v14, v17);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  v18 = a3[12];
  v19 = a1 + v18;
  v20 = a2 + v18;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  return a1;
}

uint64_t assignWithTake for AccessoryCircularSymbolDetailView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v8 = a3[10];
    v9 = (void *)(a1 + v8);
    v10 = (const void *)(a2 + v8);
    v11 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFDA8];
    v12 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0];
    sub_1D7AAD130(a1 + v8, &qword_1ED0AC8C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFDA8], MEMORY[0x1E0CD87D0]);
    sub_1D7AA787C(0, &qword_1ED0AC8C0, v11, v12);
    v14 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v15 = sub_1D7B4A200();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v9, v10, v15);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    v16 = a3[11];
    v17 = (void *)(a1 + v16);
    v18 = (const void *)(a2 + v16);
    v19 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFFC0];
    sub_1D7AAD130(a1 + v16, &qword_1ED0AC8C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFFC0], v12);
    sub_1D7AA787C(0, &qword_1ED0AC8C8, v19, v12);
    v21 = v20;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v22 = sub_1D7B4A20C();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v17, v18, v22);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
  }
  v23 = a3[12];
  v24 = a1 + v23;
  v25 = (uint64_t *)(a2 + v23);
  v26 = *v25;
  LOBYTE(v25) = *((_BYTE *)v25 + 8);
  v27 = *(_QWORD *)v24;
  v28 = *(_BYTE *)(v24 + 8);
  *(_QWORD *)v24 = v26;
  *(_BYTE *)(v24 + 8) = (_BYTE)v25;
  sub_1D7AABE44(v27, v28);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryCircularSymbolDetailView()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D7AAC640(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_1D7AA787C(0, &qword_1F014D378, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFDA8], MEMORY[0x1E0CD87E8]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 40);
    }
    else
    {
      sub_1D7AA787C(0, &qword_1F014D380, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFFC0], MEMORY[0x1E0CD87E8]);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a3 + 44);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AccessoryCircularSymbolDetailView()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D7AAC71C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    sub_1D7AA787C(0, &qword_1F014D378, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFDA8], MEMORY[0x1E0CD87E8]);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 40);
    }
    else
    {
      sub_1D7AA787C(0, &qword_1F014D380, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFFC0], MEMORY[0x1E0CD87E8]);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a4 + 44);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_1D7AAC7E8()
{
  unint64_t v0;
  unint64_t v1;

  sub_1D7AA787C(319, &qword_1ED0AC8C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFDA8], MEMORY[0x1E0CD87D0]);
  if (v0 <= 0x3F)
  {
    sub_1D7AA787C(319, &qword_1ED0AC8C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFFC0], MEMORY[0x1E0CD87D0]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

ValueMetadata *type metadata accessor for AccessoryCircularSymbolDetailView.Options()
{
  return &type metadata for AccessoryCircularSymbolDetailView.Options;
}

uint64_t sub_1D7AAC8F0()
{
  return sub_1D7AA76D4(&qword_1ED0ACA90, (uint64_t (*)(uint64_t))sub_1D7AAC91C, MEMORY[0x1E0CDFCF8]);
}

void sub_1D7AAC91C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED0ACA98)
  {
    sub_1D7AA787C(255, &qword_1ED0ACAB8, (uint64_t (*)(uint64_t))sub_1D7AAA8AC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    sub_1D7AAC994();
    v0 = sub_1D7B4A0BC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED0ACA98);
  }
}

unint64_t sub_1D7AAC994()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED0ACAB0;
  if (!qword_1ED0ACAB0)
  {
    sub_1D7AA787C(255, &qword_1ED0ACAB8, (uint64_t (*)(uint64_t))sub_1D7AAA8AC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CE0680], v1);
    atomic_store(result, (unint64_t *)&qword_1ED0ACAB0);
  }
  return result;
}

void sub_1D7AAC9F4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED0AC8E0)
  {
    sub_1D7AA787C(255, &qword_1ED0ACAC8, (uint64_t (*)(uint64_t))sub_1D7AAAA44, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    v0 = sub_1D7B49924();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED0AC8E0);
  }
}

uint64_t sub_1D7AACA70@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1D7B49A20();
  *a1 = v3;
  return result;
}

uint64_t sub_1D7AACA98@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1D7B49A20();
  *a1 = v3;
  return result;
}

uint64_t sub_1D7AACAC0()
{
  return sub_1D7B49A2C();
}

uint64_t sub_1D7AACAE4()
{
  return sub_1D7B49A2C();
}

uint64_t sub_1D7AACB08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1D7AAB2B4(0, &qword_1ED0AC960, (uint64_t (*)(uint64_t))sub_1D7AAA9CC, MEMORY[0x1E0CD9778], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D7AACB6C(uint64_t a1)
{
  uint64_t v2;

  sub_1D7AAB2B4(0, &qword_1ED0AC960, (uint64_t (*)(uint64_t))sub_1D7AAA9CC, MEMORY[0x1E0CD9778], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1D7AACBD0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  result = qword_1ED0AC930;
  if (!qword_1ED0AC930)
  {
    sub_1D7AAAB10();
    v2 = v1;
    sub_1D7AAAB94();
    v4[2] = v3;
    v4[3] = sub_1D7AAB314();
    v4[0] = swift_getOpaqueTypeConformance2();
    v4[1] = sub_1D7AA76D4(&qword_1F014D360, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDCFD0], MEMORY[0x1E0CDCFB8]);
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CD9C20], v2, v4);
    atomic_store(result, (unint64_t *)&qword_1ED0AC930);
  }
  return result;
}

unint64_t sub_1D7AACC74()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1ED0AC9B8;
  if (!qword_1ED0AC9B8)
  {
    sub_1D7AAAAEC(255);
    v2 = v1;
    v3[0] = sub_1D7AACBD0();
    v3[1] = sub_1D7AAB314();
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CDB8A0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1ED0AC9B8);
  }
  return result;
}

uint64_t sub_1D7AACCDC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_1D7AACD20()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014D388)
  {
    sub_1D7AAB468();
    sub_1D7AACD88();
    v0 = sub_1D7B49924();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014D388);
  }
}

unint64_t sub_1D7AACD88()
{
  unint64_t result;

  result = qword_1F014D390;
  if (!qword_1F014D390)
  {
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CDA290], MEMORY[0x1E0CDA2A8]);
    atomic_store(result, (unint64_t *)&qword_1F014D390);
  }
  return result;
}

uint64_t sub_1D7AACDCC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (int *)type metadata accessor for AccessoryCircularSymbolDetailView();
  v2 = *(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = v3 + v1[10];
  sub_1D7AA787C(0, &qword_1ED0AC8C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFDA8], MEMORY[0x1E0CD87D0]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = sub_1D7B4A200();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  v6 = v3 + v1[11];
  sub_1D7AA787C(0, &qword_1ED0AC8C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFFC0], MEMORY[0x1E0CD87D0]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = sub_1D7B4A20C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  sub_1D7AABE44(*(_QWORD *)(v3 + v1[12]), *(_BYTE *)(v3 + v1[12] + 8));
  return swift_deallocObject();
}

uint64_t sub_1D7AACF38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AccessoryCircularSymbolDetailView() - 8) + 80);
  return sub_1D7AAA0D0(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_1D7AACF84(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release();
  else
    return swift_bridgeObjectRelease();
}

uint64_t sub_1D7AACF94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  a5(0);
  MEMORY[0x1E0C80A78]();
  v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v12 - v8, a1);
  return a6(v9);
}

void sub_1D7AAD020(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*a2)
  {
    v9 = a3(255);
    v10 = a4(255);
    v11 = a5(a1, v9, v10);
    if (!v12)
      atomic_store(v11, a2);
  }
}

uint64_t sub_1D7AAD09C()
{
  return sub_1D7B499B4();
}

uint64_t sub_1D7AAD0BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1D7AACF94(a1, a2, a3, a4, (void (*)(_QWORD))MEMORY[0x1E0CDF7E8], MEMORY[0x1E0CDA4B0]);
}

uint64_t sub_1D7AAD0E0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v7;

  sub_1D7AA787C(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t sub_1D7AAD130(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v5;

  sub_1D7AA787C(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_1D7AAD16C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1D7AAD1B0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_1D7AAD1F0()
{
  sub_1D7AAD218();
}

void sub_1D7AAD204()
{
  sub_1D7AAD218();
}

void sub_1D7AAD218()
{
  id v0;
  id v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;

  v0 = objc_msgSend(objc_allocWithZone((Class)HKUIMetricColors), sel_init);
  if (qword_1F014CF90 != -1)
    swift_once();
  v1 = (id)qword_1F0154598;
  v2 = (void *)sub_1D7B4A38C();
  v3 = (void *)objc_opt_self();
  v4 = objc_msgSend(v3, sel_colorNamed_inBundle_compatibleWithTraitCollection_, v2, v1, 0);

  if (v4)
  {
    objc_msgSend(v0, sel_setKeyColor_, v4);

    v5 = objc_msgSend(v3, sel_hk_chartOverlayPillLightColor);
    objc_msgSend(v0, sel_setContextViewPrimaryTextColor_, v5);

    v6 = objc_msgSend(v3, sel_hk_defaultSecondaryTextColor);
    objc_msgSend(v0, sel_setContextViewSecondaryTextColor_, v6);

  }
  else
  {
    __break(1u);
  }
}

id Locale.isIn24HourTime.getter()
{
  void *v0;
  id v1;

  v0 = (void *)sub_1D7B491D4();
  v1 = objc_msgSend(v0, sel_hk_isIn24HourTime);

  return v1;
}

BOOL Locale.isAMPMSymbolBeforeTime.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  void (**v51)(char *, void (*)(char *, char *, uint64_t));
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char v60;
  void (*v61)(char *, uint64_t);
  void (*v62)(char *, _QWORD);
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  _BOOL8 v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  void (*v83)(char *, _QWORD, uint64_t);
  char v84;
  void (*v85)(char *, uint64_t);
  void (*v86)(char *, char *, uint64_t);
  char *v87;
  char *v88;
  char v89;
  char *v90;
  char *v91;
  char *v92;
  char v93;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  void (**v123)(char *, void (*)(char *, char *, uint64_t));
  void (*v124)(char *, char *, uint64_t);
  char *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char v135[8];

  sub_1D7AAE0AC(0, &qword_1F014D3A0, (void (*)(uint64_t))MEMORY[0x1E0CAEDD0]);
  MEMORY[0x1E0C80A78](v0);
  v114 = (char *)&v95 - v1;
  sub_1D7AADFD8();
  v115 = v2;
  v116 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v117 = (char *)&v95 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = sub_1D7B48FD0();
  v122 = *(_QWORD *)(v118 - 8);
  MEMORY[0x1E0C80A78](v118);
  v120 = (char *)&v95 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = sub_1D7B48E20();
  v119 = *(_QWORD *)(v121 - 8);
  v5 = MEMORY[0x1E0C80A78](v121);
  v108 = (char *)&v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v112 = (char *)&v95 - v8;
  MEMORY[0x1E0C80A78](v7);
  v113 = (char *)&v95 - v9;
  v134 = sub_1D7B48F04();
  v109 = *(_QWORD *)(v134 - 8);
  MEMORY[0x1E0C80A78](v134);
  v133 = (char *)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AAE0AC(0, &qword_1F014D3B0, v11);
  MEMORY[0x1E0C80A78](v12);
  v127 = (char *)&v95 - v13;
  v14 = sub_1D7B48F10();
  v131 = *(_QWORD *)(v14 - 8);
  v132 = v14;
  v15 = MEMORY[0x1E0C80A78](v14);
  v128 = (char *)&v95 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v130 = (char *)&v95 - v17;
  v95 = sub_1D7B48F1C();
  v125 = *(char **)(v95 - 8);
  MEMORY[0x1E0C80A78](v95);
  v19 = (char *)&v95 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AAE034();
  v126 = v20;
  v21 = MEMORY[0x1E0C80A78](v20);
  v110 = (char *)&v95 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v129 = (char *)&v95 - v23;
  v24 = sub_1D7B49144();
  v123 = *(void (***)(char *, void (*)(char *, char *, uint64_t)))(v24 - 8);
  v124 = (void (*)(char *, char *, uint64_t))v24;
  MEMORY[0x1E0C80A78](v24);
  v111 = (char *)&v95 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_1D7B48F4C();
  v103 = *(_QWORD *)(v104 - 8);
  MEMORY[0x1E0C80A78](v104);
  v27 = (char *)&v95 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_1D7B4906C();
  MEMORY[0x1E0C80A78](v28);
  v29 = sub_1D7B493C0();
  MEMORY[0x1E0C80A78](v29);
  v30 = sub_1D7B49300();
  MEMORY[0x1E0C80A78](v30);
  v31 = sub_1D7B4921C();
  MEMORY[0x1E0C80A78](v31);
  sub_1D7AAE0AC(0, &qword_1F014D3C8, (void (*)(uint64_t))MEMORY[0x1E0CB03F8]);
  MEMORY[0x1E0C80A78](v32);
  v34 = (char *)&v95 - v33;
  sub_1D7AAE0AC(0, &qword_1F014D3D0, (void (*)(uint64_t))MEMORY[0x1E0CB0428]);
  MEMORY[0x1E0C80A78](v35);
  v37 = (char *)&v95 - v36;
  v101 = sub_1D7B49120();
  v100 = *(_QWORD *)(v101 - 8);
  MEMORY[0x1E0C80A78](v101);
  v39 = (char *)&v95 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_1D7B49198();
  v97 = *(_QWORD *)(v98 - 8);
  MEMORY[0x1E0C80A78](v98);
  v41 = (char *)&v95 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7B4918C();
  sub_1D7B490F0();
  v42 = sub_1D7B490FC();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v37, 0, 1, v42);
  sub_1D7B490CC();
  v43 = sub_1D7B490D8();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v34, 0, 1, v43);
  sub_1D7B491E0();
  sub_1D7B492B8();
  sub_1D7B493B4();
  sub_1D7B49060();
  v44 = (uint64_t)v129;
  v45 = v95;
  sub_1D7B49114();
  v46 = v111;
  v99 = v39;
  sub_1D7B49108();
  v96 = v41;
  sub_1D7B49138();
  v123[1](v46, v124);
  v102 = v27;
  sub_1D7B48F28();
  v47 = v125;
  v48 = (uint64_t)v110;
  v124 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v125 + 2);
  v124(v110, v19, v45);
  v49 = sub_1D7AA76D4(&qword_1F014D3C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF160], MEMORY[0x1E0CAF180]);
  v50 = v130;
  sub_1D7B4A578();
  v51 = (void (**)(char *, void (*)(char *, char *, uint64_t)))*((_QWORD *)v47 + 1);
  v52 = v109;
  v125 = v19;
  v123 = v51;
  ((void (*)(char *, uint64_t))v51)(v19, v45);
  v53 = v126;
  v54 = v131;
  (*(void (**)(uint64_t, char *, uint64_t))(v131 + 32))(v48 + *(int *)(v126 + 36), v50, v132);
  sub_1D7AAE0F8(v48, v44);
  v55 = (char *)(v44 + *(int *)(v53 + 36));
  v126 = *(_QWORD *)(v54 + 16);
  v107 = *MEMORY[0x1E0CAEDC0];
  v106 = *MEMORY[0x1E0CAEDC8];
  v105 = *MEMORY[0x1E0CAEDB8];
  v111 = (char *)v49;
  v110 = v55;
  while (1)
  {
    while (1)
    {
      v56 = v130;
      v57 = v132;
      ((void (*)(char *, char *, uint64_t))v126)(v130, v55, v132);
      v58 = v128;
      sub_1D7B4A590();
      sub_1D7AA76D4(&qword_1F014D3D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF150], MEMORY[0x1E0CAF158]);
      v59 = v44;
      v60 = sub_1D7B4A320();
      v61 = *(void (**)(char *, uint64_t))(v131 + 8);
      v61(v58, v57);
      v61(v56, v57);
      if ((v60 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56))(v127, 1, 1, v134);
        v70 = 0;
LABEL_11:
        v44 = v59;
        goto LABEL_14;
      }
      v62 = (void (*)(char *, _QWORD))sub_1D7B4A5A8();
      v63 = v127;
      v64 = v134;
      (*(void (**)(char *))(v52 + 16))(v127);
      v62(v135, 0);
      v65 = v125;
      v124(v125, (char *)v59, v45);
      sub_1D7B4A59C();
      v66 = v65;
      v67 = v64;
      v68 = v45;
      ((void (*)(char *, uint64_t))v123)(v66, v45);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v63, 0, 1, v64);
      v69 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 48))(v63, 1, v64);
      v70 = v69 != 1;
      if (v69 == 1)
        goto LABEL_11;
      v71 = v118;
      v72 = v133;
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v133, v63, v67);
      v73 = v67;
      v74 = v120;
      sub_1D7B48EE0();
      swift_getKeyPath();
      v75 = v52;
      sub_1D7B48E5C();
      v76 = v117;
      sub_1D7B48F94();
      swift_release();
      (*(void (**)(char *, uint64_t))(v122 + 8))(v74, v71);
      swift_getKeyPath();
      sub_1D7AAE1BC();
      v77 = (uint64_t)v114;
      v78 = v115;
      sub_1D7B49048();
      swift_release();
      (*(void (**)(char *, uint64_t))(v116 + 8))(v76, v78);
      v79 = v119;
      v80 = v121;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v119 + 48))(v77, 1, v121) != 1)
        break;
      (*(void (**)(char *, uint64_t))(v75 + 8))(v72, v73);
      sub_1D7AAE200(v77);
      v52 = v75;
      v44 = (uint64_t)v129;
      v45 = v68;
      v55 = v110;
    }
    v81 = v112;
    v82 = v113;
    (*(void (**)(char *, uint64_t, uint64_t))(v79 + 32))(v113, v77, v80);
    v83 = *(void (**)(char *, _QWORD, uint64_t))(v79 + 104);
    v83(v81, v107, v80);
    v84 = sub_1D7B48E14();
    v85 = *(void (**)(char *, uint64_t))(v79 + 8);
    v85(v81, v80);
    v86 = *(void (**)(char *, char *, uint64_t))(v79 + 16);
    v87 = v108;
    v86(v108, v82, v80);
    if ((v84 & 1) != 0)
      break;
    v83(v81, v106, v80);
    v88 = v87;
    v89 = sub_1D7B48E14();
    v85(v81, v80);
    v85(v88, v80);
    v90 = v133;
    if ((v89 & 1) != 0)
      goto LABEL_13;
    v91 = v112;
    v83(v112, v105, v80);
    v92 = v113;
    v93 = sub_1D7B48E14();
    v85(v91, v80);
    v85(v92, v80);
    v52 = v109;
    (*(void (**)(char *, uint64_t))(v109 + 8))(v90, v134);
    v44 = (uint64_t)v129;
    v45 = v68;
    v55 = v110;
    if ((v93 & 1) != 0)
      goto LABEL_14;
  }
  v85(v87, v80);
  v90 = v133;
LABEL_13:
  v85(v113, v80);
  (*(void (**)(char *, uint64_t))(v109 + 8))(v90, v134);
  v70 = 0;
  v44 = (uint64_t)v129;
LABEL_14:
  sub_1D7AAE13C(v44);
  (*(void (**)(char *, uint64_t))(v103 + 8))(v102, v104);
  (*(void (**)(char *, uint64_t))(v100 + 8))(v99, v101);
  (*(void (**)(char *, uint64_t))(v97 + 8))(v96, v98);
  return v70;
}

void sub_1D7AADFD8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014D3A8)
  {
    sub_1D7B48E5C();
    v0 = sub_1D7B49054();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014D3A8);
  }
}

void sub_1D7AAE034()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014D3B8)
  {
    sub_1D7B48F1C();
    sub_1D7AA76D4(&qword_1F014D3C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF160], MEMORY[0x1E0CAF180]);
    v0 = sub_1D7B4A878();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014D3B8);
  }
}

void sub_1D7AAE0AC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_1D7B4A6F8();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_1D7AAE0F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1D7AAE034();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D7AAE13C(uint64_t a1)
{
  uint64_t v2;

  sub_1D7AAE034();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1D7AAE178@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  sub_1D7B48E68();
  result = sub_1D7B48E5C();
  *a1 = result;
  return result;
}

void sub_1D7AAE1A4()
{
  sub_1D7B48E50();
  __break(1u);
}

unint64_t sub_1D7AAE1BC()
{
  unint64_t result;

  result = qword_1F014D3E0;
  if (!qword_1F014D3E0)
  {
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CAEDD8], MEMORY[0x1E0CAEDE8]);
    atomic_store(result, (unint64_t *)&qword_1F014D3E0);
  }
  return result;
}

uint64_t sub_1D7AAE200(uint64_t a1)
{
  uint64_t v2;

  sub_1D7AAE0AC(0, &qword_1F014D3A0, (void (*)(uint64_t))MEMORY[0x1E0CAEDD0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id HKInteractiveChartInteractionAnalyticsManager.__allocating_init(healthStore:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = sub_1D7AAE7D8(a1);

  return v4;
}

id HKInteractiveChartInteractionAnalyticsManager.init(healthStore:)(void *a1)
{
  id v2;

  v2 = sub_1D7AAE7D8(a1);

  return v2;
}

void sub_1D7AAE2E8(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t ObjectType;
  uint64_t v5;
  void *v6;
  _QWORD v7[6];

  v2 = *(void **)(v1 + OBJC_IVAR____TtC8HealthUI45HKInteractiveChartInteractionAnalyticsManager_submissionManager);
  if (v2)
  {
    ObjectType = swift_getObjectType();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = ObjectType;
    v7[4] = sub_1D7AAEA1C;
    v7[5] = v5;
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 1107296256;
    v7[2] = sub_1D7AAE5D0;
    v7[3] = &block_descriptor_0;
    v6 = _Block_copy(v7);
    swift_release();
    objc_msgSend(v2, sel_submitEvent_completion_, a1, v6);
    _Block_release(v6);
  }
}

void sub_1D7AAE3B4(char a1, id a2)
{
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if ((a1 & 1) == 0)
  {
    if (a2)
    {
      v13 = (uint64_t)a2;
      v2 = a2;
      sub_1D7AAEAB4();
      v3 = sub_1D7B4A3E0();
      v5 = v4;
    }
    else
    {
      v5 = 0xE400000000000000;
      v3 = 1701736270;
    }
    if (qword_1F01492C8 != -1)
      swift_once();
    v6 = sub_1D7B4969C();
    __swift_project_value_buffer(v6, (uint64_t)qword_1F0154438);
    swift_bridgeObjectRetain();
    v7 = sub_1D7B49684();
    v8 = sub_1D7B4A608();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc();
      v10 = swift_slowAlloc();
      v13 = v10;
      *(_DWORD *)v9 = 136446466;
      v11 = sub_1D7B4AA94();
      sub_1D7AA4DE4(v11, v12, &v13);
      sub_1D7B4A704();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2080;
      swift_bridgeObjectRetain();
      sub_1D7AA4DE4(v3, v5, &v13);
      sub_1D7B4A704();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1D7813000, v7, v8, "[%{public}s] Failed to submit analytics with error %s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1D829FFF4](v10, -1, -1);
      MEMORY[0x1D829FFF4](v9, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

void sub_1D7AAE5D0(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(uint64_t, void *);
  id v6;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

id HKInteractiveChartInteractionAnalyticsManager.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void HKInteractiveChartInteractionAnalyticsManager.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id HKInteractiveChartInteractionAnalyticsManager.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HKInteractiveChartInteractionAnalyticsManager();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_1D7AAE7D8(void *a1)
{
  void *v1;
  void *v2;
  char *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  objc_class *v16;
  uint64_t v18;
  objc_super v19;

  v2 = v1;
  swift_getObjectType();
  v4 = v2;
  v5 = objc_msgSend(a1, sel_profileIdentifier);
  v6 = objc_msgSend(v5, sel_type);

  if (v6 == (id)1)
  {
    v7 = (id)HKLogAnalytics();
    v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB62B8]), sel_initWithLoggingCategory_healthDataSource_, v7, a1);

    *(_QWORD *)&v4[OBJC_IVAR____TtC8HealthUI45HKInteractiveChartInteractionAnalyticsManager_submissionManager] = v8;
  }
  else
  {
    if (qword_1F01492C8 != -1)
      swift_once();
    v9 = sub_1D7B4969C();
    __swift_project_value_buffer(v9, (uint64_t)qword_1F0154438);
    v10 = sub_1D7B49684();
    v11 = sub_1D7B4A620();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v18 = v13;
      *(_DWORD *)v12 = 136446210;
      v14 = sub_1D7B4AA94();
      sub_1D7AA4DE4(v14, v15, &v18);
      sub_1D7B4A704();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D7813000, v10, v11, "[%{public}s] Will omit analytics for non-primary profile.", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D829FFF4](v13, -1, -1);
      MEMORY[0x1D829FFF4](v12, -1, -1);
    }

    *(_QWORD *)&v4[OBJC_IVAR____TtC8HealthUI45HKInteractiveChartInteractionAnalyticsManager_submissionManager] = 0;
  }

  v16 = (objc_class *)type metadata accessor for HKInteractiveChartInteractionAnalyticsManager();
  v19.receiver = v4;
  v19.super_class = v16;
  return objc_msgSendSuper2(&v19, sel_init);
}

uint64_t sub_1D7AAEA0C()
{
  return swift_deallocObject();
}

void sub_1D7AAEA1C(char a1, id a2)
{
  sub_1D7AAE3B4(a1, a2);
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t type metadata accessor for HKInteractiveChartInteractionAnalyticsManager()
{
  return objc_opt_self();
}

uint64_t method lookup function for HKInteractiveChartInteractionAnalyticsManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HKInteractiveChartInteractionAnalyticsManager.__allocating_init(healthStore:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of HKInteractiveChartInteractionAnalyticsManager.submit(event:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t sub_1D7AAEA8C()
{
  return swift_deallocObject();
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

unint64_t sub_1D7AAEAB4()
{
  unint64_t result;

  result = qword_1F014D760;
  if (!qword_1F014D760)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1F014D760);
  }
  return result;
}

uint64_t Collection<>.uniqued()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  v7 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = &v12[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_getAssociatedTypeWitness();
  v17 = sub_1D7B4A224();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v9, v3, a1);
  v13 = a1;
  v14 = a2;
  v15 = a3;
  v16 = &v17;
  v10 = sub_1D7B4A464();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1D7AAEC04(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, AssociatedTypeWitness);
  sub_1D7B4A560();
  v9 = sub_1D7B4A554();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, AssociatedTypeWitness);
  return v9 & 1;
}

uint64_t sub_1D7AAED04(uint64_t a1)
{
  return sub_1D7AAEC04(a1) & 1;
}

uint64_t sub_1D7AAED24(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t inited;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  uint64_t result;
  uint64_t v37;

  v37 = a2;
  sub_1D7AA787C(0, (unint64_t *)&qword_1F014DFD0, (uint64_t (*)(uint64_t))MEMORY[0x1E0D28FE0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v37 - v4;
  v6 = objc_msgSend(a1, sel_displayTypeController);
  v7 = objc_msgSend((id)objc_opt_self(), sel_appleBalanceMetricsType);
  v8 = objc_msgSend(v6, sel_displayTypeForObjectType_, v7);

  if (v8)
  {
    v9 = objc_msgSend(v8, sel_displayCategory);
    v10 = objc_msgSend(a1, sel_unitController);
    v11 = objc_msgSend(a1, sel_chartDataCacheController);
    v12 = objc_msgSend(v8, sel_hk_standardSeriesForTimeScope_displayCategory_unitController_dataCacheController_, 6, v9, v10, v11);

    if (v12)
    {
      type metadata accessor for BalanceSeries();
      v13 = swift_dynamicCastClass();
      if (v13)
      {
        v14 = v13;
        v15 = objc_msgSend(v8, sel_displayCategory);
        v16 = objc_msgSend(a1, sel_unitController);
        v17 = objc_msgSend(a1, sel_chartDataCacheController);
        v18 = objc_msgSend(v8, sel_hk_standardSeriesForTimeScope_displayCategory_unitController_dataCacheController_, 5, v15, v16, v17);

        if (v18)
        {
          v19 = swift_dynamicCastClass();
          if (v19)
          {
            v20 = v19;
            v21 = v37;
            sub_1D7AAF5A8(v37, (uint64_t)v5);
            v22 = v14 + OBJC_IVAR___HKBalanceSeries_selectedMetric;
            swift_beginAccess();
            sub_1D7AAF604((uint64_t)v5, v22);
            swift_endAccess();
            sub_1D7AAF5A8(v21, (uint64_t)v5);
            v23 = v20 + OBJC_IVAR___HKBalanceSeries_selectedMetric;
            swift_beginAccess();
            sub_1D7AAF604((uint64_t)v5, v23);
            swift_endAccess();
            v24 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for BalanceChartFormatter()), sel_init);
            sub_1D7AA787C(0, &qword_1F014D3F8, (uint64_t (*)(uint64_t))sub_1D7AAF660, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
            inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = xmmword_1D7B83E20;
            *(_QWORD *)(inited + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, 6);
            *(_QWORD *)(inited + 40) = v14;
            v26 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
            v27 = v12;
            *(_QWORD *)(inited + 48) = objc_msgSend(v26, sel_initWithInteger_, 5);
            *(_QWORD *)(inited + 56) = v20;
            v28 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
            v29 = v18;
            *(_QWORD *)(inited + 64) = objc_msgSend(v28, sel_initWithInteger_, 4);
            *(_QWORD *)(inited + 72) = v20;
            v30 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
            v31 = v29;
            *(_QWORD *)(inited + 80) = objc_msgSend(v30, sel_initWithInteger_, 3);
            *(_QWORD *)(inited + 88) = v20;
            v32 = v31;
            sub_1D7ADFB5C(inited);
            v33 = objc_allocWithZone((Class)HKInteractiveChartDisplayType);
            sub_1D7AAF6EC(0, (unint64_t *)&qword_1F014D240);
            sub_1D7AAF6EC(0, &qword_1F014D408);
            sub_1D7AAF724();
            v34 = (void *)sub_1D7B4A230();
            swift_bridgeObjectRelease();
            v35 = objc_msgSend(v33, sel_initWithBaseDisplayType_valueFormatter_dataTypeCode_seriesForTimeScopeMapping_, v8, v24, 305, v34);

            return (uint64_t)v35;
          }

        }
      }

    }
  }
  result = sub_1D7B4A890();
  __break(1u);
  return result;
}

id sub_1D7AAF1F4(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  int v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  void (*v15)(char *, uint64_t);
  id v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  __int128 v36;
  uint64_t v37;

  v4 = sub_1D7B49588();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + OBJC_IVAR____TtC8HealthUI48BalanceClassificationDateRangeDataSourceDelegate_classification;
  v9 = objc_msgSend(objc_allocWithZone((Class)HKDateRangeDataSource), sel_initWithSourceDelegate_, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v10 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v10 == *MEMORY[0x1E0D29080])
  {
    v11 = a1;
    v12 = 2;
  }
  else if (v10 == *MEMORY[0x1E0D29078])
  {
    v13 = a1;
    v12 = 1;
  }
  else if (v10 == *MEMORY[0x1E0D29088])
  {
    v14 = a1;
    v12 = 3;
  }
  else
  {
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16 = a1;
    v15(v7, v4);
    v12 = 0;
  }
  v17 = objc_msgSend(objc_allocWithZone((Class)HKLevelOverlaySeries), sel_initWithDisplayType_dataSource_options_, a1, v9, v12);

  v18 = (void *)objc_opt_self();
  sub_1D7B22954();
  v20 = v19;
  v21 = objc_msgSend(v18, sel_presentationStyleWithColor_options_, v19, 0);

  objc_msgSend(v21, sel_setAxisAnnotationStyle_, 0);
  sub_1D7AAF550();
  v22 = swift_allocObject();
  v36 = xmmword_1D7B83E30;
  *(_OWORD *)(v22 + 16) = xmmword_1D7B83E30;
  *(_QWORD *)(v22 + 32) = v21;
  v37 = v22;
  sub_1D7B4A4B8();
  sub_1D7AAF6EC(0, (unint64_t *)&qword_1F014D3F0);
  v23 = v17;
  v24 = v21;
  v25 = (void *)sub_1D7B4A4A0();
  swift_bridgeObjectRelease();
  objc_msgSend(v23, sel_setUnhighlightedPresentationStyles_, v25);

  v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = v36;
  *(_QWORD *)(v26 + 32) = v24;
  v37 = v26;
  sub_1D7B4A4B8();
  v27 = v23;
  v28 = v24;
  v29 = (void *)sub_1D7B4A4A0();
  swift_bridgeObjectRelease();
  objc_msgSend(v27, sel_setHighlightedPresentationStyles_, v29);

  objc_msgSend(v27, sel_setInactivePresentationStyle_, v28);
  v30 = objc_allocWithZone((Class)type metadata accessor for BalanceChartFormatter());
  v31 = a1;
  v32 = v27;
  v33 = objc_msgSend(v30, sel_init);
  v34 = objc_msgSend(objc_allocWithZone((Class)HKInteractiveChartDisplayType), sel_initWithGraphSeries_baseDisplayType_valueFormatter_dataTypeCode_, v32, v31, v33, 305);

  return v34;
}

void sub_1D7AAF550()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F01493B0)
  {
    v0 = sub_1D7B4A920();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F01493B0);
  }
}

uint64_t sub_1D7AAF5A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1D7AA787C(0, (unint64_t *)&qword_1F014DFD0, (uint64_t (*)(uint64_t))MEMORY[0x1E0D28FE0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D7AAF604(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1D7AA787C(0, (unint64_t *)&qword_1F014DFD0, (uint64_t (*)(uint64_t))MEMORY[0x1E0D28FE0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1D7AAF660()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1F014D400)
  {
    sub_1D7AAF6EC(255, (unint64_t *)&qword_1F014D240);
    sub_1D7AAF6EC(255, &qword_1F014D408);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1F014D400);
  }
}

uint64_t sub_1D7AAF6EC(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_1D7AAF724()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F014D410;
  if (!qword_1F014D410)
  {
    v1 = sub_1D7AAF6EC(255, (unint64_t *)&qword_1F014D240);
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&qword_1F014D410);
  }
  return result;
}

void sub_1D7AAF77C(void **a1, _QWORD *a2)
{
  void *v2;
  void **v3;
  void *v4;
  id v5;

  v2 = *a1;
  v3 = (void **)(*a2 + OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_collectionViewDataSource);
  swift_beginAccess();
  v4 = *v3;
  *v3 = v2;
  v5 = v2;

}

void *sub_1D7AAF7DC()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_collectionViewDataSource);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void sub_1D7AAF828(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_collectionViewDataSource);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*sub_1D7AAF878())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_1D7AAF8C0()
{
  void *v0;
  id v1;

  v1 = objc_msgSend(v0, sel_collectionViewLayout);
  type metadata accessor for CalendarViewLayout();
  return swift_dynamicCastClassUnconditional();
}

id sub_1D7AAF910()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  id v5;

  v1 = OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController____lazy_storage___yearOverlay;
  v2 = *(void **)&v0[OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController____lazy_storage___yearOverlay];
  v3 = v2;
  if (v2 == (void *)1)
  {
    v3 = sub_1D7AAF97C(v0);
    v4 = *(void **)&v0[v1];
    *(_QWORD *)&v0[v1] = v3;
    v5 = v3;
    sub_1D7AB1270(v4);
  }
  sub_1D7AB1280(v2);
  return v3;
}

id sub_1D7AAF97C(void *a1)
{
  id result;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  result = objc_msgSend(a1, sel_collectionView);
  if (!result)
  {
    __break(1u);
    return result;
  }
  v2 = result;
  v3 = (void *)sub_1D7B4A38C();
  v4 = objc_msgSend(v2, sel__visibleDecorationViewsOfKind_, v3);

  if (!v4)
  {
    v7 = 0u;
    v8 = 0u;
    goto LABEL_10;
  }
  v5 = sub_1D7B4A4AC();

  if (!*(_QWORD *)(v5 + 16))
  {
    v7 = 0u;
    v8 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  sub_1D7AA553C(v5 + 32, (uint64_t)&v7);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v8 + 1))
  {
LABEL_10:
    sub_1D7AB1290((uint64_t)&v7);
    return 0;
  }
  type metadata accessor for CalendarYearOverlayView();
  if (swift_dynamicCast())
    return (id)v6;
  else
    return 0;
}

double static BaseCalendarViewController.dataFetchingPauseVelocity.getter()
{
  return 1.5;
}

id BaseCalendarViewController.__allocating_init(collectionViewLayout:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCollectionViewLayout_, a1);

  return v3;
}

id BaseCalendarViewController.init(collectionViewLayout:)(void *a1)
{
  _BYTE *v1;
  char *v3;
  id v4;
  objc_super v6;

  *(_QWORD *)&v1[OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_collectionViewDataSource] = 0;
  v1[OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_isYearOverlayVisible] = 0;
  v3 = &v1[OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_decelerationTargetContentOffset];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  v3[16] = 1;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController____lazy_storage___yearOverlay] = 1;
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for BaseCalendarViewController();
  v4 = objc_msgSendSuper2(&v6, sel_initWithCollectionViewLayout_, a1);

  return v4;
}

uint64_t type metadata accessor for BaseCalendarViewController()
{
  return objc_opt_self();
}

id BaseCalendarViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  objc_class *v4;
  void *v6;
  id v7;

  v4 = v3;
  if (a2)
  {
    v6 = (void *)sub_1D7B4A38C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

id BaseCalendarViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  _BYTE *v3;
  char *v5;
  void *v6;
  id v7;
  objc_super v9;

  *(_QWORD *)&v3[OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_collectionViewDataSource] = 0;
  v3[OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_isYearOverlayVisible] = 0;
  v5 = &v3[OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_decelerationTargetContentOffset];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 1;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController____lazy_storage___yearOverlay] = 1;
  if (a2)
  {
    v6 = (void *)sub_1D7B4A38C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  v9.receiver = v3;
  v9.super_class = (Class)type metadata accessor for BaseCalendarViewController();
  v7 = objc_msgSendSuper2(&v9, sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

id BaseCalendarViewController.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id BaseCalendarViewController.init(coder:)(void *a1)
{
  _BYTE *v1;
  char *v3;
  id v4;
  objc_super v6;

  *(_QWORD *)&v1[OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_collectionViewDataSource] = 0;
  v1[OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_isYearOverlayVisible] = 0;
  v3 = &v1[OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_decelerationTargetContentOffset];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  v3[16] = 1;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController____lazy_storage___yearOverlay] = 1;
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for BaseCalendarViewController();
  v4 = objc_msgSendSuper2(&v6, sel_initWithCoder_, a1);

  return v4;
}

id BaseCalendarViewController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BaseCalendarViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

Swift::Void __swiftcall BaseCalendarViewController.scrollViewWillBeginDragging(_:)(UIScrollView *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_decelerationTargetContentOffset;
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 16) = 1;
  BaseCalendarViewController.updateYearOverlay()();
}

void BaseCalendarViewController.scrollViewWillEndDragging(_:withVelocity:targetContentOffset:)(uint64_t a1, CGPoint *a2)
{
  BaseCalendarViewController.updateYearOverlayForScrollViewWillEndDragging(targetContentOffset:)(*a2);
}

Swift::Void __swiftcall BaseCalendarViewController.updateYearOverlayForScrollViewWillEndDragging(targetContentOffset:)(CGPoint targetContentOffset)
{
  char *v1;
  void *v2;
  double y;
  CGFloat x;
  double *v5;
  id v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  id v11;
  double *v12;
  double v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;

  v2 = v1;
  y = targetContentOffset.y;
  x = targetContentOffset.x;
  swift_getObjectType();
  v5 = (double *)&v1[OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_decelerationTargetContentOffset];
  *v5 = x;
  v5[1] = y;
  *((_BYTE *)v5 + 16) = 0;
  v6 = objc_msgSend(v1, sel_collectionView);
  if (v6)
  {
    v7 = v6;
    objc_msgSend(v6, sel_contentOffset);
    v9 = v8;

    v10 = vabdd_f64(y, v9);
    v11 = objc_msgSend(v2, sel_collectionViewLayout);
    type metadata accessor for CalendarViewLayout();
    v12 = (double *)(swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8HealthUI18CalendarViewLayout_itemHeight);
    swift_beginAccess();
    v13 = *v12;

    if (v13 * 5.5 < v10)
    {
      if (qword_1F014CF00 != -1)
        swift_once();
      v14 = sub_1D7B4969C();
      __swift_project_value_buffer(v14, (uint64_t)qword_1F01544B8);
      v15 = sub_1D7B49684();
      v16 = sub_1D7B4A620();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc();
        v18 = swift_slowAlloc();
        v24 = v18;
        *(_DWORD *)v17 = 136446210;
        v19 = sub_1D7B4AA94();
        sub_1D7AA4DE4(v19, v20, &v24);
        sub_1D7B4A704();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1D7813000, v15, v16, "[%{public}s] Triggering the year overlay on drag end", v17, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D829FFF4](v18, -1, -1);
        MEMORY[0x1D829FFF4](v17, -1, -1);
      }

      *((_BYTE *)v2 + OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_isYearOverlayVisible) = 1;
      v21 = sub_1D7AAF910();
      if (v21)
      {
        v22 = v21;
        v23 = swift_allocObject();
        swift_unknownObjectWeakInit();
        swift_retain();
        sub_1D7B189B8(1, (uint64_t)sub_1D7AB0D38, v23, 0.25);

        swift_release_n();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall BaseCalendarViewController.scrollViewDidEndDragging(_:willDecelerate:)(UIScrollView *_, Swift::Bool willDecelerate)
{
  sub_1D7AB0D40(willDecelerate);
}

Swift::Void __swiftcall BaseCalendarViewController.scrollViewDidEndScrollingAnimation(_:)(UIScrollView *a1)
{
  sub_1D7AB0EEC("[%{public}s] scrollViewDidEndScrollingAnimation: resuming data fetching");
}

Swift::Void __swiftcall BaseCalendarViewController.scrollViewDidEndDecelerating(_:)(UIScrollView *a1)
{
  sub_1D7AB0EEC("[%{public}s] scrollViewDidEndDecelerating: resuming data fetching");
}

double BaseCalendarViewController.decelerationDistanceThresholdForDisplayingMonthBanner.getter()
{
  void *v0;
  id v1;
  double *v2;
  double v3;

  v1 = objc_msgSend(v0, sel_collectionViewLayout);
  type metadata accessor for CalendarViewLayout();
  v2 = (double *)(swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8HealthUI18CalendarViewLayout_itemHeight);
  swift_beginAccess();
  v3 = *v2;

  return v3 * 5.5;
}

double BaseCalendarViewController.decelerationDistanceThresholdToStopShowingMonthBanner.getter()
{
  void *v0;
  id v1;
  double *v2;
  double v3;

  v1 = objc_msgSend(v0, sel_collectionViewLayout);
  type metadata accessor for CalendarViewLayout();
  v2 = (double *)(swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8HealthUI18CalendarViewLayout_itemHeight);
  swift_beginAccess();
  v3 = *v2;

  return v3 * 1.1;
}

Swift::Void __swiftcall BaseCalendarViewController.updateYearOverlay()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  id v14;
  void *v15;
  unsigned int v16;
  uint64_t v17;
  double v18;
  id v19;
  void *v20;
  double v21;
  double v22;
  double v23;
  id v24;
  double *v25;
  double v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  id v41;
  void *v42;
  uint64_t v43;
  id v44;
  void *v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  id *v50;
  id v51;
  uint64_t v52;
  void (*v53)(uint64_t);
  uint64_t v54;
  _BYTE v55[24];
  uint64_t v56;
  uint64_t v57[3];

  v1 = v0;
  swift_getObjectType();
  sub_1D7AAE0AC(0, (unint64_t *)&qword_1F014D000, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = &v55[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v3);
  v7 = &v55[-v6];
  sub_1D7AAE0AC(0, &qword_1F014D438, (void (*)(uint64_t))MEMORY[0x1E0CB1658]);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = &v55[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v9);
  v13 = &v55[-v12];
  v14 = objc_msgSend(v0, sel_collectionView);
  if (!v14)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v15 = v14;
  v16 = objc_msgSend(v14, sel_isDragging);

  v17 = OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_isYearOverlayVisible;
  if (!v16
    || *((_BYTE *)v1 + OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_isYearOverlayVisible) != 1
    || (*((_BYTE *)v1 + OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_decelerationTargetContentOffset + 16) & 1) != 0)
  {
LABEL_12:
    if (*((_BYTE *)v1 + v17) != 1)
      return;
    if (qword_1F014CF00 != -1)
      swift_once();
    v33 = sub_1D7B4969C();
    __swift_project_value_buffer(v33, (uint64_t)qword_1F01544B8);
    v34 = sub_1D7B49684();
    v35 = sub_1D7B4A620();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc();
      v37 = swift_slowAlloc();
      v57[0] = v37;
      *(_DWORD *)v36 = 136446210;
      v38 = sub_1D7B4AA94();
      v56 = sub_1D7AA4DE4(v38, v39, v57);
      sub_1D7B4A704();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D7813000, v34, v35, "[%{public}s] Hiding the visible year overlay", v36, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D829FFF4](v37, -1, -1);
      MEMORY[0x1D829FFF4](v36, -1, -1);
    }

    *((_BYTE *)v1 + v17) = 0;
    v40 = (char *)v1 + OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_decelerationTargetContentOffset;
    *(_QWORD *)v40 = 0;
    *((_QWORD *)v40 + 1) = 0;
    v40[16] = 1;
    v41 = sub_1D7AAF910();
    if (v41)
    {
      v42 = v41;
      v43 = swift_allocObject();
      swift_unknownObjectWeakInit();
      swift_retain();
      sub_1D7B189B8(0, (uint64_t)sub_1D7AB1098, v43, 0.75);

      swift_release_n();
    }
    v44 = objc_msgSend(v1, sel_collectionView);
    if (v44)
    {
      v45 = v44;
      objc_msgSend(v44, sel__verticalVelocity);
      v47 = v46;

      if (v47 <= 1.5)
        (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0xD8))();
      return;
    }
    goto LABEL_29;
  }
  v18 = *(double *)((char *)v1
                  + OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_decelerationTargetContentOffset
                  + 8);
  v19 = objc_msgSend(v1, sel_collectionView);
  if (!v19)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v20 = v19;
  objc_msgSend(v19, sel_contentOffset);
  v22 = v21;

  v23 = vabdd_f64(v18, v22);
  v24 = objc_msgSend(v1, sel_collectionViewLayout);
  type metadata accessor for CalendarViewLayout();
  v25 = (double *)(swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8HealthUI18CalendarViewLayout_itemHeight);
  swift_beginAccess();
  v26 = *v25;

  if (v26 * 1.1 >= v23)
  {
    v17 = OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_isYearOverlayVisible;
    goto LABEL_12;
  }
  v27 = sub_1D7AAF910();
  if (v27)
  {
    v28 = v27;
    v29 = objc_msgSend(v1, sel_collectionView);
    if (v29)
    {
      v30 = v29;
      objc_msgSend(v28, sel_center);
      v31 = objc_msgSend(v30, sel_indexPathForItemAtPoint_);

      if (v31)
      {
        sub_1D7B49438();

        v32 = sub_1D7B49474();
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v11, 0, 1, v32);
      }
      else
      {
        v32 = sub_1D7B49474();
        (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v11, 1, 1, v32);
      }
      sub_1D7AB10A0((uint64_t)v11, (uint64_t)v13);
      sub_1D7B49474();
      v48 = *(_QWORD *)(v32 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v48 + 48))(v13, 1, v32) == 1)
      {

        sub_1D7AB1148((uint64_t)v13, &qword_1F014D438, (void (*)(uint64_t))MEMORY[0x1E0CB1658]);
        return;
      }
      v49 = sub_1D7B49468();
      (*(void (**)(_BYTE *, uint64_t))(v48 + 8))(v13, v32);
      v50 = (id *)((char *)v1 + OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_collectionViewDataSource);
      swift_beginAccess();
      if (*v50)
      {
        v51 = *v50;
        CalendarViewDataSource.startDate(forSection:)(v49, (uint64_t)v7);

        v52 = sub_1D7B49198();
        v53 = (void (*)(uint64_t))MEMORY[0x1E0CB0870];
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v7, 0, 1, v52);
        v54 = (uint64_t)v28 + OBJC_IVAR____TtC8HealthUI23CalendarYearOverlayView_displayDate;
        swift_beginAccess();
        sub_1D7AA7B0C(v54, (uint64_t)v5);
        swift_beginAccess();
        sub_1D7AB10F4((uint64_t)v7, v54);
        swift_endAccess();
        sub_1D7B182D4((uint64_t)v5);
        sub_1D7AB1148((uint64_t)v7, (unint64_t *)&qword_1F014D000, v53);
        sub_1D7AB1148((uint64_t)v5, (unint64_t *)&qword_1F014D000, v53);

        return;
      }
      goto LABEL_32;
    }
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
}

void sub_1D7AB0C18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1D82A00A8](v1);
  if (v2)
  {
    v3 = (void *)v2;
    if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_isYearOverlayVisible) & 1) == 0)
    {
      v4 = sub_1D7AAF910();
      if (v4)
      {
        v5 = v4;
        objc_msgSend(v4, sel_setHidden_, 1);

      }
    }

  }
}

void sub_1D7AB0C94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1D82A00A8](v1);
  if (v2)
  {
    v3 = (void *)v2;
    if (*(_BYTE *)(v2 + OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_isYearOverlayVisible) == 1)
    {
      v4 = sub_1D7AAF910();
      if (v4)
      {
        v5 = v4;
        objc_msgSend(v4, sel_setHidden_, 0);

      }
    }

  }
}

uint64_t sub_1D7AB0D14()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1D7AB0D38()
{
  uint64_t v0;

  sub_1D7AB0C94(v0);
}

void sub_1D7AB0D40(char a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = v1;
  swift_getObjectType();
  if ((a1 & 1) == 0)
  {
    if (qword_1F014CF00 != -1)
      swift_once();
    v4 = sub_1D7B4969C();
    __swift_project_value_buffer(v4, (uint64_t)qword_1F01544B8);
    v5 = sub_1D7B49684();
    v6 = sub_1D7B4A620();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v13 = v8;
      *(_DWORD *)v7 = 136446210;
      v9 = sub_1D7B4AA94();
      sub_1D7AA4DE4(v9, v10, &v13);
      sub_1D7B4A704();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D7813000, v5, v6, "[%{public}s] scrollViewDidEndDragging without deceleration: resuming data fetching", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D829FFF4](v8, -1, -1);
      MEMORY[0x1D829FFF4](v7, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v2) + 0xD8))(v11, v12);
    BaseCalendarViewController.updateYearOverlay()();
  }
}

void sub_1D7AB0EEC(const char *a1)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = v1;
  swift_getObjectType();
  if (qword_1F014CF00 != -1)
    swift_once();
  v4 = sub_1D7B4969C();
  __swift_project_value_buffer(v4, (uint64_t)qword_1F01544B8);
  v5 = sub_1D7B49684();
  v6 = sub_1D7B4A620();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v13 = v8;
    *(_DWORD *)v7 = 136446210;
    v9 = sub_1D7B4AA94();
    sub_1D7AA4DE4(v9, v10, &v13);
    sub_1D7B4A704();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D7813000, v5, v6, a1, v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D829FFF4](v8, -1, -1);
    MEMORY[0x1D829FFF4](v7, -1, -1);
  }

  (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v3) + 0xD8))(v11, v12);
  BaseCalendarViewController.updateYearOverlay()();
}

void sub_1D7AB1098()
{
  uint64_t v0;

  sub_1D7AB0C18(v0);
}

uint64_t sub_1D7AB10A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1D7AAE0AC(0, &qword_1F014D438, (void (*)(uint64_t))MEMORY[0x1E0CB1658]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D7AB10F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1D7AAE0AC(0, (unint64_t *)&qword_1F014D000, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D7AB1148(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  sub_1D7AAE0AC(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

id sub_1D7AB1184@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  void **v3;
  void *v4;

  v3 = (void **)(*a1 + OBJC_IVAR____TtC8HealthUI26BaseCalendarViewController_collectionViewDataSource);
  swift_beginAccess();
  v4 = *v3;
  *a2 = *v3;
  return v4;
}

uint64_t method lookup function for BaseCalendarViewController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of BaseCalendarViewController.collectionViewDataSource.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of BaseCalendarViewController.collectionViewDataSource.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of BaseCalendarViewController.collectionViewDataSource.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of BaseCalendarViewController.calendarViewLayout.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of BaseCalendarViewController.resumeDataFetching()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD8))();
}

void sub_1D7AB1270(id a1)
{
  if (a1 != (id)1)

}

id sub_1D7AB1280(id result)
{
  if (result != (id)1)
    return result;
  return result;
}

uint64_t sub_1D7AB1290(uint64_t a1)
{
  uint64_t v2;

  sub_1D7AB12CC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1D7AB12CC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED0AC810)
  {
    v0 = sub_1D7B4A6F8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED0AC810);
  }
}

void static DailyModelProvider.FetchState.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t State;
  uint64_t v12;
  uint64_t v13;
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char *v20;
  _QWORD v21[5];
  uint64_t v22;

  v22 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v21[1] = (char *)v21 - v9;
  v21[2] = a3;
  State = type metadata accessor for DailyModelProvider.FetchState(0, a3, a4, v10);
  v12 = *(_QWORD *)(State - 8);
  MEMORY[0x1E0C80A78](State);
  v21[4] = (char *)v21 - v13;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v15 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v17 = (char *)v21 - v16;
  v18 = (char *)v21 + *(int *)(v15 + 48) - v16;
  v21[3] = v12;
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v19((char *)v21 - v16, a1, State);
  v19(v18, v22, State);
  v20 = (char *)sub_1D7AB1488
      + 4
      * byte_1D7B83E80[(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v17, 3, AssociatedTypeWitness)];
  __asm { BR              X10 }
}

uint64_t sub_1D7AB1488()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(_QWORD, uint64_t, uint64_t);
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);

  v3(*(_QWORD *)(v9 - 96), v2, v0);
  if (v4(v6, 3, v1))
  {
    (*(void (**)(_QWORD, uint64_t))(v8 + 8))(*(_QWORD *)(v9 - 96), v1);
    v10 = 0;
  }
  else
  {
    v11 = *(_QWORD *)(v9 - 120);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v11, v6, v1);
    swift_getAssociatedConformanceWitness();
    v12 = *(_QWORD *)(v9 - 96);
    v10 = sub_1D7B4A320();
    v13 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v13(v11, v1);
    v13(v12, v1);
    v7 = *(_QWORD *)(v9 - 104);
    v5 = v0;
  }
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v5);
  return v10 & 1;
}

uint64_t type metadata accessor for DailyModelProvider.FetchState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DailyModelProvider.FetchState);
}

void sub_1D7AB15D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  static DailyModelProvider.FetchState.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t DailyModelProvider.dataSource.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 96));
}

uint64_t DailyModelProvider.daysUpdatedPublisher.getter()
{
  return swift_retain();
}

uint64_t sub_1D7AB160C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 112);
  swift_beginAccess();
  v4 = sub_1D7B49390();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1D7AB1670(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 112);
  swift_beginAccess();
  v4 = sub_1D7B49390();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t sub_1D7AB16DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 120);
  swift_beginAccess();
  v4 = sub_1D7B49390();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t *DailyModelProvider.__allocating_init(dataSource:minimumBufferDuration:prefetchMultiplier:cacheLimit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v10;

  v5 = v4;
  swift_allocObject();
  v10 = sub_1D7AB616C(a1, a2, a3, a4);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 80) - 8) + 8))(a1);
  return v10;
}

uint64_t *DailyModelProvider.init(dataSource:minimumBufferDuration:prefetchMultiplier:cacheLimit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;

  v6 = *v4;
  v7 = sub_1D7AB616C(a1, a2, a3, a4);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v6 + 80) - 8) + 8))(a1);
  return v7;
}

uint64_t *DailyModelProvider.deinit()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v1 = v0;
  v2 = *v0;
  v3 = *v0;
  if (*(uint64_t *)((char *)v0 + *(_QWORD *)(*v0 + 128)))
  {
    swift_retain();
    sub_1D7B49774();
    swift_release();
    v3 = *v0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(v3 + 96));
  swift_release();
  v4 = (uint64_t)v0 + *(_QWORD *)(*v0 + 112);
  v5 = sub_1D7B49390();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v6((uint64_t)v1 + *(_QWORD *)(*v1 + 120), v5);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1D7AB1148((uint64_t)v1 + *(_QWORD *)(*v1 + 168), &qword_1F014D440, (void (*)(uint64_t))sub_1D7AB6310);
  return v1;
}

uint64_t DailyModelProvider.__deallocating_deinit()
{
  DailyModelProvider.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_1D7AB192C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  sub_1D7AAE0AC(0, &qword_1F014D440, (void (*)(uint64_t))sub_1D7AB6310);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v6 - v3;
  sub_1D7AB6388(a1, (uint64_t)&v6 - v3);
  return sub_1D7AB228C((uint64_t)v4);
}

uint64_t sub_1D7AB19B0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  os_log_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  os_log_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  os_log_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81[3];

  v2 = v1;
  v4 = *v1;
  sub_1D7AB6310();
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  v8 = MEMORY[0x1E0C80A78](v5);
  v71 = (uint64_t)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v69 = (uint64_t)&v66 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v77 = (char *)&v66 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v78 = (uint64_t)&v66 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v73 = (uint64_t)&v66 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v74 = (uint64_t)&v66 - v19;
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v66 - v20;
  sub_1D7AAE0AC(0, &qword_1F014D440, v22);
  v24 = MEMORY[0x1E0C80A78](v23);
  v70 = (uint64_t)&v66 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24);
  v75 = (os_log_t)((char *)&v66 - v27);
  v28 = MEMORY[0x1E0C80A78](v26);
  v30 = (char *)&v66 - v29;
  MEMORY[0x1E0C80A78](v28);
  v32 = (char *)&v66 - v31;
  sub_1D7AB79B0();
  v34 = v33;
  MEMORY[0x1E0C80A78](v33);
  v36 = (char *)&v66 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = v4;
  v37 = (uint64_t)v2 + *(_QWORD *)(v4 + 168);
  swift_beginAccess();
  v38 = (uint64_t)&v36[*(int *)(v34 + 48)];
  v76 = a1;
  sub_1D7AB6388(a1, (uint64_t)v36);
  sub_1D7AB6388(v37, v38);
  v72 = v7;
  v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (v39((uint64_t)v36, 1, v6) == 1)
  {
    if (v39(v38, 1, v6) == 1)
      return sub_1D7AB1148((uint64_t)v36, &qword_1F014D440, (void (*)(uint64_t))sub_1D7AB6310);
    goto LABEL_6;
  }
  sub_1D7AB6388((uint64_t)v36, (uint64_t)v32);
  v79 = v6;
  if (v39(v38, 1, v6) == 1)
  {
    sub_1D7AAD1B0((uint64_t)v32, (uint64_t (*)(_QWORD))sub_1D7AB6310);
    v6 = v79;
LABEL_6:
    sub_1D7AAD1B0((uint64_t)v36, (uint64_t (*)(_QWORD))sub_1D7AB79B0);
    goto LABEL_11;
  }
  v67 = v2;
  sub_1D7AB72E8(v38, (uint64_t)v21);
  sub_1D7B4A1C4();
  v66 = sub_1D7AA76D4(&qword_1F014D5E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB44E0], MEMORY[0x1E0CB4500]);
  v41 = sub_1D7B4A320();
  v42 = v74;
  sub_1D7AB771C((uint64_t)v32, v74);
  v43 = v73;
  sub_1D7AB771C((uint64_t)v21, v73);
  if ((v41 & 1) != 0)
  {
    v44 = sub_1D7B4A320();
    sub_1D7AAD1B0(v43, (uint64_t (*)(_QWORD))sub_1D7AB6310);
    sub_1D7AAD1B0(v42, (uint64_t (*)(_QWORD))sub_1D7AB6310);
    sub_1D7AAD1B0((uint64_t)v21, (uint64_t (*)(_QWORD))sub_1D7AB6310);
    v6 = v79;
    sub_1D7AAD1B0((uint64_t)v32, (uint64_t (*)(_QWORD))sub_1D7AB6310);
    result = sub_1D7AB1148((uint64_t)v36, &qword_1F014D440, (void (*)(uint64_t))sub_1D7AB6310);
    v2 = v67;
    if ((v44 & 1) != 0)
      return result;
  }
  else
  {
    sub_1D7AAD1B0(v43, (uint64_t (*)(_QWORD))sub_1D7AB6310);
    sub_1D7AAD1B0(v42, (uint64_t (*)(_QWORD))sub_1D7AB6310);
    sub_1D7AAD1B0((uint64_t)v21, (uint64_t (*)(_QWORD))sub_1D7AB6310);
    sub_1D7AAD1B0((uint64_t)v32, (uint64_t (*)(_QWORD))sub_1D7AB6310);
    sub_1D7AB1148((uint64_t)v36, &qword_1F014D440, (void (*)(uint64_t))sub_1D7AB6310);
    v2 = v67;
    v6 = v79;
  }
LABEL_11:
  sub_1D7AB6388(v37, (uint64_t)v30);
  if (v39((uint64_t)v30, 1, v6) != 1)
  {
    v46 = (uint64_t)v30;
    v47 = v78;
    sub_1D7AB72E8(v46, v78);
    v48 = *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 144));
    v49 = *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 152));
    if ((unsigned __int128)(v48 * (__int128)v49) >> 64 == (v48 * v49) >> 63)
    {
      v21 = v77;
      sub_1D7B4A5B4();
      v79 = v6;
      sub_1D7B4A1C4();
      sub_1D7AA76D4(&qword_1F014D560, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB44E0], MEMORY[0x1E0CB4508]);
      sub_1D7B4A728();
      v6 = *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 + 160));
      if (v6 >= v81[0])
      {
LABEL_22:
        sub_1D7AB24A8(v47);
        sub_1D7AAD1B0((uint64_t)v21, (uint64_t (*)(_QWORD))sub_1D7AB6310);
        return sub_1D7AAD1B0(v47, (uint64_t (*)(_QWORD))sub_1D7AB6310);
      }
      if (qword_1F014CF00 == -1)
      {
LABEL_17:
        v50 = sub_1D7B4969C();
        __swift_project_value_buffer(v50, (uint64_t)qword_1F01544B8);
        v51 = v69;
        sub_1D7AB771C(v47, v69);
        swift_retain_n();
        v52 = sub_1D7B49684();
        v53 = sub_1D7B4A614();
        v54 = v53;
        if (os_log_type_enabled(v52, v53))
        {
          v55 = swift_slowAlloc();
          v76 = swift_slowAlloc();
          v81[0] = v76;
          *(_DWORD *)v55 = 136447234;
          v75 = v52;
          v56 = sub_1D7B4AA94();
          LODWORD(v74) = v54;
          v80 = sub_1D7AA4DE4(v56, v57, v81);
          sub_1D7B4A704();
          swift_bridgeObjectRelease();
          *(_WORD *)(v55 + 12) = 2050;
          sub_1D7B4A728();
          v58 = v80;
          sub_1D7AAD1B0(v51, (uint64_t (*)(_QWORD))sub_1D7AB6310);
          v80 = v58;
          sub_1D7B4A704();
          *(_WORD *)(v55 + 22) = 2048;
          swift_release();
          v80 = v48;
          sub_1D7B4A704();
          swift_release();
          *(_WORD *)(v55 + 32) = 2048;
          swift_release();
          v80 = v49;
          sub_1D7B4A704();
          swift_release();
          *(_WORD *)(v55 + 42) = 2048;
          swift_release();
          v80 = v6;
          sub_1D7B4A704();
          swift_release();
          v59 = v75;
          _os_log_impl(&dword_1D7813000, v75, (os_log_type_t)v74, "[%{public}s] Cache limit too small for active day range: %{public}ld +/- %ld * %ld > %ld", (uint8_t *)v55, 0x34u);
          v60 = v76;
          swift_arrayDestroy();
          MEMORY[0x1D829FFF4](v60, -1, -1);
          v61 = v55;
          v21 = v77;
          MEMORY[0x1D829FFF4](v61, -1, -1);

        }
        else
        {
          swift_release_n();
          sub_1D7AAD1B0(v51, (uint64_t (*)(_QWORD))sub_1D7AB6310);

          swift_release_n();
        }
        v47 = v78;
        goto LABEL_22;
      }
    }
    else
    {
      __break(1u);
    }
    swift_once();
    goto LABEL_17;
  }
  sub_1D7AB1148((uint64_t)v30, &qword_1F014D440, (void (*)(uint64_t))sub_1D7AB6310);
  v45 = v75;
  sub_1D7AB6388(v76, (uint64_t)v75);
  if (v39((uint64_t)v45, 1, v6) == 1)
    return sub_1D7AB1148((uint64_t)v45, &qword_1F014D440, (void (*)(uint64_t))sub_1D7AB6310);
  v62 = (uint64_t)v45;
  v63 = v71;
  sub_1D7AB72E8(v62, v71);
  v64 = v63;
  v65 = v70;
  sub_1D7AB72E8(v64, v70);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v72 + 56))(v65, 0, 1, v6);
  swift_beginAccess();
  sub_1D7AB7A20(v65, v37);
  return swift_endAccess();
}

uint64_t sub_1D7AB223C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 168);
  swift_beginAccess();
  return sub_1D7AB6388(v3, a1);
}

uint64_t sub_1D7AB228C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE v8[24];

  sub_1D7AAE0AC(0, &qword_1F014D440, (void (*)(uint64_t))sub_1D7AB6310);
  MEMORY[0x1E0C80A78](v3);
  v5 = &v8[-v4];
  v6 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 168);
  swift_beginAccess();
  sub_1D7AB6388(v6, (uint64_t)v5);
  swift_beginAccess();
  sub_1D7AB63DC(a1, v6);
  swift_endAccess();
  sub_1D7AB19B0((uint64_t)v5);
  sub_1D7AB1148(a1, &qword_1F014D440, (void (*)(uint64_t))sub_1D7AB6310);
  return sub_1D7AB1148((uint64_t)v5, &qword_1F014D440, (void (*)(uint64_t))sub_1D7AB6310);
}

void (*sub_1D7AB2384(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_1D7AAE0AC(0, &qword_1F014D440, (void (*)(uint64_t))sub_1D7AB6310);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64);
  v3[4] = malloc(v5);
  v6 = malloc(v5);
  v3[5] = v6;
  v7 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 168);
  swift_beginAccess();
  sub_1D7AB6388(v7, (uint64_t)v6);
  return sub_1D7AB2430;
}

void sub_1D7AB2430(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 32);
  v4 = *(void **)(*(_QWORD *)a1 + 40);
  if ((a2 & 1) != 0)
  {
    sub_1D7AB6388((uint64_t)v4, (uint64_t)v3);
    sub_1D7AB228C((uint64_t)v3);
    sub_1D7AB1148((uint64_t)v4, &qword_1F014D440, (void (*)(uint64_t))sub_1D7AB6310);
  }
  else
  {
    sub_1D7AB228C((uint64_t)v4);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t sub_1D7AB24A8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(void);
  char *v56;
  char *v57;
  void (*v58)(uint64_t, uint64_t);
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  void (*v66)(uint64_t *, _QWORD);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  void (*v92)(char *, char *, uint64_t);
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  _QWORD *v101;
  uint64_t v102[5];

  v3 = *v1;
  sub_1D7AAE0AC(0, &qword_1F014DEC0, (void (*)(uint64_t))MEMORY[0x1E0DF0750]);
  MEMORY[0x1E0C80A78](v4);
  v88 = (char *)&v77 - v5;
  sub_1D7AB7760(0, &qword_1F014D5F0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1358], &qword_1F014D5F8, MEMORY[0x1E0CB1378]);
  v84 = v6;
  MEMORY[0x1E0C80A78](v6);
  v79 = (char *)&v77 - v7;
  v8 = sub_1D7B49360();
  v87 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x1E0C80A78](v8);
  v85 = v10;
  v86 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v94 = (char *)&v77 - v11;
  sub_1D7AB6310();
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1D7B49390();
  v92 = *(void (**)(char *, char *, uint64_t))(v15 - 8);
  v16 = v92;
  v17 = MEMORY[0x1E0C80A78](v15);
  v82 = (char *)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v98 = (char *)&v77 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v77 - v22;
  v96 = (char *)&v77 - v22;
  v24 = MEMORY[0x1E0C80A78](v21);
  v99 = (char *)&v77 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v28 = (char *)&v77 - v27;
  v29 = MEMORY[0x1E0C80A78](v26);
  v31 = (char *)&v77 - v30;
  v100 = (char *)&v77 - v30;
  v32 = MEMORY[0x1E0C80A78](v29);
  v34 = (char *)&v77 - v33;
  v35 = MEMORY[0x1E0C80A78](v32);
  v95 = (char *)&v77 - v36;
  MEMORY[0x1E0C80A78](v35);
  v97 = (char *)&v77 - v37;
  v91 = v3;
  v38 = *(_QWORD *)((char *)v101 + *(_QWORD *)(v3 + 144));
  v83 = a1;
  v89 = v38;
  sub_1D7B4A5B4();
  sub_1D7B4A5C0();
  v81 = v14;
  sub_1D7AAD1B0((uint64_t)v14, (uint64_t (*)(_QWORD))sub_1D7AB6310);
  sub_1D7AB160C((uint64_t)v31);
  v39 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v16 + 2);
  v93 = v28;
  v39(v28, v34, v15);
  v39(v23, v34, v15);
  v39(v98, v31, v15);
  v40 = sub_1D7AA76D4(&qword_1F014D568, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0], MEMORY[0x1E0CB13E8]);
  v41 = v99;
  sub_1D7B4A788();
  v42 = v95;
  v43 = v41;
  sub_1D7B4A77C();
  v44 = (void (*)(char *, uint64_t))*((_QWORD *)v92 + 1);
  v44(v43, v15);
  v45 = v100;
  v44(v100, v15);
  v44(v34, v15);
  sub_1D7AB16DC((uint64_t)v34);
  v39(v45, v42, v15);
  v46 = v42;
  v39(v43, v42, v15);
  v92 = v39;
  v39(v96, v34, v15);
  v47 = v97;
  v48 = (uint64_t)v93;
  sub_1D7B4A788();
  v80 = v40;
  sub_1D7B4A77C();
  v49 = v48;
  v44((char *)v48, v15);
  v90 = v34;
  v44(v34, v15);
  v44(v46, v15);
  result = sub_1D7B4933C();
  v51 = *v101;
  if ((result & 1) != 0)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)(v91 + 88) + 40))(*(_QWORD *)(v91 + 80));
    return ((uint64_t (*)(char *, uint64_t))v44)(v47, v15);
  }
  else
  {
    v77 = (void (*)(uint64_t, uint64_t))v44;
    v78 = v15;
    if ((unsigned __int128)(v89 * (__int128)*(uint64_t *)((char *)v101 + *(_QWORD *)(v51 + 152))) >> 64 == (v89 * *(_QWORD *)((char *)v101 + *(_QWORD *)(v51 + 152))) >> 63)
    {
      v52 = (uint64_t)v81;
      sub_1D7B4A5B4();
      v53 = (uint64_t)v100;
      sub_1D7B4A5C0();
      sub_1D7AAD1B0(v52, (uint64_t (*)(_QWORD))sub_1D7AB6310);
      sub_1D7AB160C(v48);
      v54 = v78;
      v55 = (void (*)(void))v92;
      v92(v99, (char *)v53, v78);
      v55();
      ((void (*)(char *, uint64_t, uint64_t))v55)(v82, v48, v54);
      v56 = v96;
      sub_1D7B4A788();
      v57 = v90;
      sub_1D7B4A77C();
      v58 = v77;
      v77((uint64_t)v56, v54);
      v58(v49, v54);
      v58(v53, v54);
      sub_1D7AB16DC(v53);
      ((void (*)(uint64_t, char *, uint64_t))v55)(v49, v57, v54);
      ((void (*)(char *, char *, uint64_t))v55)(v56, v57, v54);
      ((void (*)(char *, uint64_t, uint64_t))v55)(v98, v53, v54);
      v59 = v99;
      sub_1D7B4A788();
      v60 = v95;
      sub_1D7B4A77C();
      v58((uint64_t)v59, v54);
      v58(v53, v54);
      v58((uint64_t)v90, v54);
      sub_1D7B4936C();
      v58((uint64_t)v60, v54);
      v61 = (uint64_t)v79;
      sub_1D7B49354();
      v62 = (uint64_t *)(v61 + *(int *)(v84 + 36));
      sub_1D7AA76D4(&qword_1F014D5F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1358], MEMORY[0x1E0CB1378]);
      v63 = *v62;
      sub_1D7B4A590();
      v64 = v86;
      v65 = v87;
      if (v63 != v102[0])
      {
        do
        {
          v66 = (void (*)(uint64_t *, _QWORD))sub_1D7B4A5A8();
          v66(v102, 0);
          (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v64, v61, v8);
          sub_1D7B4A59C();
          (*(void (**)(char *, uint64_t))(v65 + 8))(v64, v8);
          swift_beginAccess();
          sub_1D7B49324();
          swift_endAccess();
          v67 = *v62;
          sub_1D7B4A590();
        }
        while (v67 != v102[0]);
      }
      sub_1D7AB77E0(v61, &qword_1F014D5F0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1358], &qword_1F014D5F8, MEMORY[0x1E0CB1378]);
      v68 = sub_1D7B4A530();
      v69 = (uint64_t)v88;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v88, 1, 1, v68);
      (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v64, v94, v8);
      sub_1D7B4A50C();
      v70 = v101;
      swift_retain();
      v71 = sub_1D7B4A500();
      v72 = (*(unsigned __int8 *)(v65 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
      v73 = (v85 + v72 + 7) & 0xFFFFFFFFFFFFFFF8;
      v74 = (char *)swift_allocObject();
      v75 = MEMORY[0x1E0DF06E8];
      *((_QWORD *)v74 + 2) = v71;
      *((_QWORD *)v74 + 3) = v75;
      v76 = v91;
      *((_QWORD *)v74 + 4) = *(_QWORD *)(v91 + 80);
      *((_QWORD *)v74 + 5) = *(_QWORD *)(v76 + 88);
      (*(void (**)(char *, char *, uint64_t))(v65 + 32))(&v74[v72], v64, v8);
      *(_QWORD *)&v74[v73] = v70;
      *(_QWORD *)&v74[(v73 + 15) & 0xFFFFFFFFFFFFFFF8] = v76;
      sub_1D7B1C1F4(v69, (uint64_t)&unk_1F014D608, (uint64_t)v74);
      swift_release();
      (*(void (**)(char *, uint64_t))(v65 + 8))(v94, v8);
      return ((uint64_t (*)(char *, uint64_t))v77)(v97, v78);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1D7AB2DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;

  v6[31] = a5;
  v6[32] = a6;
  v6[30] = a4;
  v6[33] = *a5;
  sub_1D7AB6310();
  v6[34] = swift_task_alloc();
  v6[35] = swift_task_alloc();
  v7 = sub_1D7B49360();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1358];
  v6[36] = v7;
  v6[37] = *(_QWORD *)(v7 - 8);
  v6[38] = swift_task_alloc();
  sub_1D7AB7760(0, &qword_1F014D5F0, v8, &qword_1F014D5F8, MEMORY[0x1E0CB1378]);
  v6[39] = v9;
  v6[40] = swift_task_alloc();
  sub_1D7B4A50C();
  v6[41] = sub_1D7B4A500();
  v6[42] = sub_1D7B4A4F4();
  v6[43] = v10;
  return swift_task_switch();
}

uint64_t sub_1D7AB2EE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD);
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(_QWORD, uint64_t, uint64_t);
  uint64_t v29;

  v2 = *(_QWORD *)(v0 + 312);
  v1 = *(_QWORD *)(v0 + 320);
  v3 = *(uint64_t **)(v0 + 248);
  sub_1D7B49354();
  v4 = *(int *)(v2 + 36);
  *(_DWORD *)(v0 + 432) = v4;
  v5 = *v3;
  *(_QWORD *)(v0 + 352) = *(_QWORD *)(*v3 + 96);
  *(_QWORD *)(v0 + 360) = *(_QWORD *)(v5 + 120);
  *(_QWORD *)(v0 + 368) = *(_QWORD *)(v5 + 104);
  v6 = *(_QWORD *)(v1 + v4);
  *(_QWORD *)(v0 + 376) = sub_1D7AA76D4(&qword_1F014D5F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1358], MEMORY[0x1E0CB1378]);
  sub_1D7B4A590();
  if (v6 == *(_QWORD *)(v0 + 224))
  {
    sub_1D7AB77E0(*(_QWORD *)(v0 + 320), &qword_1F014D5F0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1358], &qword_1F014D5F8, MEMORY[0x1E0CB1378]);
    swift_release();
    sub_1D7AB57C4();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 320);
    v9 = *(_QWORD *)(v0 + 296);
    v10 = *(_QWORD *)(v0 + 304);
    v11 = *(_QWORD *)(v0 + 288);
    v12 = (void (*)(uint64_t, _QWORD))sub_1D7B4A5A8();
    v14 = *v13;
    *(_QWORD *)(v0 + 384) = *v13;
    v27 = v13[1];
    *(_QWORD *)(v0 + 392) = v27;
    v12(v0 + 16, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v10, v8, v11);
    sub_1D7B4A59C();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    if (qword_1F014CF00 != -1)
      swift_once();
    v15 = sub_1D7B4969C();
    *(_QWORD *)(v0 + 400) = __swift_project_value_buffer(v15, (uint64_t)qword_1F01544B8);
    v16 = sub_1D7B49684();
    v17 = sub_1D7B4A5FC();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc();
      v26 = swift_slowAlloc();
      v29 = v26;
      *(_DWORD *)v18 = 136446466;
      v19 = sub_1D7B4AA94();
      *(_QWORD *)(v0 + 200) = sub_1D7AA4DE4(v19, v20, &v29);
      sub_1D7B4A704();
      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 12) = 2080;
      *(_QWORD *)(v0 + 208) = v14;
      *(_QWORD *)(v0 + 216) = v27;
      *(_QWORD *)(v0 + 72) = 0;
      *(_QWORD *)(v0 + 80) = 0xE000000000000000;
      sub_1D7B4A86C();
      sub_1D7B4A41C();
      sub_1D7B4A86C();
      *(_QWORD *)(v0 + 232) = sub_1D7AA4DE4(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), &v29);
      sub_1D7B4A704();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D7813000, v16, v17, "[%{public}s] Fetching values in %s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1D829FFF4](v26, -1, -1);
      MEMORY[0x1D829FFF4](v18, -1, -1);

    }
    else
    {

    }
    v21 = *(_QWORD *)(v0 + 264);
    sub_1D7B4A5CC();
    v24 = v21 + 80;
    v23 = *(_QWORD *)(v21 + 80);
    v22 = *(_QWORD *)(v24 + 8);
    v28 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v22 + 24) + *(_QWORD *)(v22 + 24));
    v25 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 408) = v25;
    *v25 = v0;
    v25[1] = sub_1D7AB3330;
    return v28(*(_QWORD *)(v0 + 280), v23, v22);
  }
}

uint64_t sub_1D7AB3330(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  *(_QWORD *)(*v2 + 416) = v1;
  swift_task_dealloc();
  v5 = *(_QWORD *)(v4 + 280);
  if (!v1)
    *(_QWORD *)(v4 + 424) = a1;
  sub_1D7AAD1B0(v5, (uint64_t (*)(_QWORD))sub_1D7AB6310);
  return swift_task_switch();
}

uint64_t sub_1D7AB33C0()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, _QWORD);
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(_QWORD, uint64_t, uint64_t);
  uint64_t v35;

  sub_1D7AB4368();
  swift_bridgeObjectRelease();
  v1 = sub_1D7B49684();
  v2 = sub_1D7B4A5FC();
  if (os_log_type_enabled(v1, v2))
  {
    v4 = *(_QWORD *)(v0 + 384);
    v3 = *(_QWORD *)(v0 + 392);
    v5 = swift_slowAlloc();
    v31 = swift_slowAlloc();
    v35 = v31;
    *(_DWORD *)v5 = 136446466;
    v6 = sub_1D7B4AA94();
    *(_QWORD *)(v0 + 160) = sub_1D7AA4DE4(v6, v7, &v35);
    sub_1D7B4A704();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    *(_QWORD *)(v0 + 176) = v3;
    *(_QWORD *)(v0 + 168) = v4;
    *(_QWORD *)(v0 + 88) = 0;
    *(_QWORD *)(v0 + 96) = 0xE000000000000000;
    sub_1D7B4A86C();
    sub_1D7B4A41C();
    sub_1D7B4A86C();
    *(_QWORD *)(v0 + 192) = sub_1D7AA4DE4(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), &v35);
    sub_1D7B4A704();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D7813000, v1, v2, "[%{public}s] Finished fetching in %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1D829FFF4](v31, -1, -1);
    MEMORY[0x1D829FFF4](v5, -1, -1);
  }

  v8 = *(int *)(v0 + 432);
  v9 = *(_QWORD *)(v0 + 320);
  v10 = *(_QWORD *)(v0 + 272);
  swift_beginAccess();
  sub_1D7B49330();
  swift_endAccess();
  sub_1D7B4A5CC();
  sub_1D7B4978C();
  sub_1D7AAD1B0(v10, (uint64_t (*)(_QWORD))sub_1D7AB6310);
  v11 = *(_QWORD *)(v9 + v8);
  sub_1D7B4A590();
  v12 = *(_QWORD *)(v0 + 320);
  v13 = *(_QWORD *)(v0 + 304);
  if (v11 == *(_QWORD *)(v0 + 224))
  {
    sub_1D7AB77E0(*(_QWORD *)(v0 + 320), &qword_1F014D5F0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1358], &qword_1F014D5F8, MEMORY[0x1E0CB1378]);
    swift_release();
    sub_1D7AB57C4();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 288);
    v15 = *(_QWORD *)(v0 + 296);
    v17 = (void (*)(uint64_t, _QWORD))sub_1D7B4A5A8();
    v19 = *v18;
    *(_QWORD *)(v0 + 384) = *v18;
    v33 = v18[1];
    *(_QWORD *)(v0 + 392) = v33;
    v17(v0 + 16, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, v12, v16);
    sub_1D7B4A59C();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v16);
    if (qword_1F014CF00 != -1)
      swift_once();
    v20 = sub_1D7B4969C();
    *(_QWORD *)(v0 + 400) = __swift_project_value_buffer(v20, (uint64_t)qword_1F01544B8);
    v21 = sub_1D7B49684();
    v22 = sub_1D7B4A5FC();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc();
      v32 = swift_slowAlloc();
      v35 = v32;
      *(_DWORD *)v23 = 136446466;
      v24 = sub_1D7B4AA94();
      *(_QWORD *)(v0 + 200) = sub_1D7AA4DE4(v24, v25, &v35);
      sub_1D7B4A704();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2080;
      *(_QWORD *)(v0 + 208) = v19;
      *(_QWORD *)(v0 + 216) = v33;
      *(_QWORD *)(v0 + 72) = 0;
      *(_QWORD *)(v0 + 80) = 0xE000000000000000;
      sub_1D7B4A86C();
      sub_1D7B4A41C();
      sub_1D7B4A86C();
      *(_QWORD *)(v0 + 232) = sub_1D7AA4DE4(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), &v35);
      sub_1D7B4A704();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D7813000, v21, v22, "[%{public}s] Fetching values in %s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1D829FFF4](v32, -1, -1);
      MEMORY[0x1D829FFF4](v23, -1, -1);
    }

    v26 = *(_QWORD *)(v0 + 264);
    sub_1D7B4A5CC();
    v29 = v26 + 80;
    v28 = *(_QWORD *)(v26 + 80);
    v27 = *(_QWORD *)(v29 + 8);
    v34 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v27 + 24) + *(_QWORD *)(v27 + 24));
    v30 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 408) = v30;
    *v30 = v0;
    v30[1] = sub_1D7AB3330;
    return v34(*(_QWORD *)(v0 + 280), v28, v27);
  }
}

uint64_t sub_1D7AB3A1C()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, _QWORD);
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t type;
  uint64_t v41;
  uint64_t (*v42)(_QWORD, uint64_t, uint64_t);
  uint64_t v43;

  v1 = *(void **)(v0 + 416);
  v2 = v1;
  v3 = v1;
  v4 = sub_1D7B49684();
  v5 = sub_1D7B4A608();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 416);
    v8 = *(_QWORD *)(v0 + 384);
    v7 = *(_QWORD *)(v0 + 392);
    v9 = swift_slowAlloc();
    v39 = swift_slowAlloc();
    v43 = v39;
    *(_DWORD *)v9 = 136446722;
    v10 = sub_1D7B4AA94();
    *(_QWORD *)(v0 + 184) = sub_1D7AA4DE4(v10, v11, &v43);
    sub_1D7B4A704();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2082;
    *(_QWORD *)(v0 + 128) = v8;
    *(_QWORD *)(v0 + 120) = v7;
    *(_QWORD *)(v0 + 104) = 0;
    *(_QWORD *)(v0 + 112) = 0xE000000000000000;
    sub_1D7B4A86C();
    sub_1D7B4A41C();
    sub_1D7B4A86C();
    *(_QWORD *)(v0 + 136) = sub_1D7AA4DE4(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), &v43);
    sub_1D7B4A704();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 22) = 2082;
    *(_QWORD *)(v0 + 144) = v6;
    v12 = v6;
    sub_1D7AAEAB4();
    v13 = sub_1D7B4A3E0();
    *(_QWORD *)(v0 + 152) = sub_1D7AA4DE4(v13, v14, &v43);
    sub_1D7B4A704();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1D7813000, v4, v5, "[%{public}s] Error fetching values in %{public}s: %{public}s", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1D829FFF4](v39, -1, -1);
    MEMORY[0x1D829FFF4](v9, -1, -1);

  }
  else
  {
    v15 = *(void **)(v0 + 416);

  }
  v16 = *(int *)(v0 + 432);
  v17 = *(_QWORD *)(v0 + 320);
  v18 = *(_QWORD *)(v0 + 272);
  swift_beginAccess();
  sub_1D7B49330();
  swift_endAccess();
  sub_1D7B4A5CC();
  sub_1D7B4978C();
  sub_1D7AAD1B0(v18, (uint64_t (*)(_QWORD))sub_1D7AB6310);
  v19 = *(_QWORD *)(v17 + v16);
  sub_1D7B4A590();
  v20 = *(_QWORD *)(v0 + 320);
  v21 = *(_QWORD *)(v0 + 304);
  if (v19 == *(_QWORD *)(v0 + 224))
  {
    sub_1D7AB77E0(*(_QWORD *)(v0 + 320), &qword_1F014D5F0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1358], &qword_1F014D5F8, MEMORY[0x1E0CB1378]);
    swift_release();
    sub_1D7AB57C4();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v24 = *(_QWORD *)(v0 + 288);
    v23 = *(_QWORD *)(v0 + 296);
    v25 = (void (*)(uint64_t, _QWORD))sub_1D7B4A5A8();
    v27 = *v26;
    *(_QWORD *)(v0 + 384) = *v26;
    v41 = v26[1];
    *(_QWORD *)(v0 + 392) = v41;
    v25(v0 + 16, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v21, v20, v24);
    sub_1D7B4A59C();
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v24);
    if (qword_1F014CF00 != -1)
      swift_once();
    v28 = sub_1D7B4969C();
    *(_QWORD *)(v0 + 400) = __swift_project_value_buffer(v28, (uint64_t)qword_1F01544B8);
    v29 = sub_1D7B49684();
    v30 = sub_1D7B4A5FC();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = swift_slowAlloc();
      type = swift_slowAlloc();
      v43 = type;
      *(_DWORD *)v31 = 136446466;
      v32 = sub_1D7B4AA94();
      *(_QWORD *)(v0 + 200) = sub_1D7AA4DE4(v32, v33, &v43);
      sub_1D7B4A704();
      swift_bridgeObjectRelease();
      *(_WORD *)(v31 + 12) = 2080;
      *(_QWORD *)(v0 + 208) = v27;
      *(_QWORD *)(v0 + 216) = v41;
      *(_QWORD *)(v0 + 72) = 0;
      *(_QWORD *)(v0 + 80) = 0xE000000000000000;
      sub_1D7B4A86C();
      sub_1D7B4A41C();
      sub_1D7B4A86C();
      *(_QWORD *)(v0 + 232) = sub_1D7AA4DE4(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), &v43);
      sub_1D7B4A704();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D7813000, v29, v30, "[%{public}s] Fetching values in %s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1D829FFF4](type, -1, -1);
      MEMORY[0x1D829FFF4](v31, -1, -1);
    }

    v34 = *(_QWORD *)(v0 + 264);
    sub_1D7B4A5CC();
    v37 = v34 + 80;
    v36 = *(_QWORD *)(v34 + 80);
    v35 = *(_QWORD *)(v37 + 8);
    v42 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v35 + 24) + *(_QWORD *)(v35 + 24));
    v38 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 408) = v38;
    *v38 = v0;
    v38[1] = sub_1D7AB3330;
    return v42(*(_QWORD *)(v0 + 280), v36, v35);
  }
}

uint64_t sub_1D7AB4110@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD v26[2];
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;

  v29 = a2;
  v4 = *v2;
  v27 = sub_1D7B49390();
  v26[0] = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27);
  v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = sub_1D7B4A6F8();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v26 - v10;
  v12 = *(_QWORD *)(v4 + 136);
  v28 = v2;
  v13 = (_QWORD *)((char *)v2 + v12);
  swift_beginAccess();
  v14 = *v13;
  v15 = sub_1D7B4A1C4();
  v16 = sub_1D7AA76D4((unint64_t *)&unk_1F014DF30, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB44E0], MEMORY[0x1E0CB44F0]);
  swift_bridgeObjectRetain();
  v26[1] = a1;
  MEMORY[0x1D829E1DC](a1, v14, v15, AssociatedTypeWitness, v16);
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v11, 1, AssociatedTypeWitness) == 1)
  {
    v18 = v29;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    sub_1D7AB160C((uint64_t)v6);
    sub_1D7B4A1AC();
    v19 = sub_1D7B49348();
    v20 = *(void (**)(char *, uint64_t))(v26[0] + 8);
    v21 = v27;
    v20(v6, v27);
    if ((v19 & 1) != 0)
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v18, 3, 3, AssociatedTypeWitness);
    }
    else
    {
      sub_1D7AB16DC((uint64_t)v6);
      sub_1D7B4A1AC();
      v24 = sub_1D7B49348();
      v20(v6, v21);
      if ((v24 & 1) != 0)
        v25 = 1;
      else
        v25 = 2;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v18, v25, 3, AssociatedTypeWitness);
    }
  }
  else
  {
    v23 = v29;
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v29, v11, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v23, 0, 3, AssociatedTypeWitness);
  }
}

uint64_t sub_1D7AB4368()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  _BYTE v9[16];
  uint64_t v10;
  uint64_t v11;

  v1 = (uint64_t)v0;
  v2 = *v0;
  sub_1D7AB6310();
  MEMORY[0x1E0C80A78](v3);
  v5 = &v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1D7B4A5CC();
  sub_1D7AB49AC((void (*)(uint64_t))sub_1D7AB757C, v1);
  sub_1D7AAD1B0((uint64_t)v5, (uint64_t (*)(_QWORD))sub_1D7AB6310);
  v6 = *(_QWORD *)(v2 + 88);
  v10 = *(_QWORD *)(v2 + 80);
  v11 = v6;
  swift_beginAccess();
  sub_1D7B4A1C4();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB44E0];
  swift_getAssociatedTypeWitness();
  sub_1D7AA76D4((unint64_t *)&unk_1F014DF30, v7, MEMORY[0x1E0CB44F0]);
  sub_1D7B4A278();
  swift_bridgeObjectRetain();
  sub_1D7B4A26C();
  swift_endAccess();
  swift_beginAccess();
  sub_1D7B49324();
  return swift_endAccess();
}

uint64_t sub_1D7AB4514(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = sub_1D7B4A6F8();
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v11 - v4;
  v6 = sub_1D7B4A1C4();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB44E0];
  MEMORY[0x1E0C80A78](v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v5, 1, 1, AssociatedTypeWitness);
  swift_beginAccess();
  sub_1D7AA76D4((unint64_t *)&unk_1F014DF30, v7, MEMORY[0x1E0CB44F0]);
  sub_1D7B4A278();
  sub_1D7B4A290();
  return swift_endAccess();
}

uint64_t sub_1D7AB468C(void (*a1)(_QWORD *), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char v20;
  void (*v21)(char *, uint64_t);
  void (*v22)(_QWORD *, _QWORD);
  uint64_t *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v28)(char *, uint64_t, uint64_t);
  char *v29;
  uint64_t v30;
  void (*v31)(_QWORD *);
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _QWORD v38[4];
  uint64_t v39;

  v31 = a1;
  v32 = a2;
  v3 = sub_1D7B4930C();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v36 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v35 = (char *)&v28 - v7;
  v8 = sub_1D7B49390();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0];
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AB7760(0, &qword_1F014D570, v9, &qword_1F014D578, MEMORY[0x1E0CB13E0]);
  v14 = v13;
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v28 - v15;
  v30 = v10;
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v28(v12, v2, v8);
  sub_1D7AA76D4(&qword_1F014D580, v9, MEMORY[0x1E0CB13D0]);
  v29 = v12;
  sub_1D7B4A458();
  v17 = &v16[*(int *)(v14 + 36)];
  v37 = v4;
  v33 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v34 = v16;
  v18 = v35;
  v19 = v36;
  while (1)
  {
    v33(v18, v17, v3);
    sub_1D7AA76D4(&qword_1F014D578, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0], MEMORY[0x1E0CB13E0]);
    sub_1D7B4A590();
    sub_1D7AA76D4(&qword_1F014D588, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1248], MEMORY[0x1E0CB1260]);
    v20 = sub_1D7B4A320();
    v21 = *(void (**)(char *, uint64_t))(v37 + 8);
    v21(v19, v3);
    v21(v18, v3);
    if ((v20 & 1) != 0)
      break;
    v22 = (void (*)(_QWORD *, _QWORD))sub_1D7B4A5A8();
    v24 = *v23;
    v22(v38, 0);
    v25 = v29;
    v28(v29, (uint64_t)v16, v8);
    sub_1D7B4A59C();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v25, v8);
    v38[0] = v24;
    v26 = v39;
    v31(v38);
    if (v26)
      break;
    v39 = 0;
  }
  return sub_1D7AB77E0((uint64_t)v16, &qword_1F014D570, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0], &qword_1F014D578, MEMORY[0x1E0CB13E0]);
}

uint64_t sub_1D7AB49AC(void (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v2;
  void (*v3)(char *, uint64_t);
  void (*v4)(char *, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  uint64_t result;
  char *v57;
  void (*v58)(uint64_t, uint64_t);
  char *v59;
  void (*v60)(char *, uint64_t, uint64_t, uint64_t);
  char *v61;
  void (*v62)(char *, uint64_t);
  _QWORD v63[2];
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  void (*v70)(uint64_t);
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  void (*v79)(char *, uint64_t);
  char *v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t, uint64_t);
  char *v84;
  uint64_t v85;

  v4 = v3;
  v5 = v2;
  v69 = a2;
  v70 = a1;
  sub_1D7AB7284();
  v77 = v6;
  v7 = MEMORY[0x1E0C80A78](v6);
  v76 = (char *)v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v75 = (char *)v63 - v9;
  sub_1D7AB6310();
  v11 = v10;
  v12 = MEMORY[0x1E0C80A78](v10);
  v74 = (uint64_t)v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v73 = (char *)v63 - v15;
  MEMORY[0x1E0C80A78](v14);
  v72 = (uint64_t)v63 - v16;
  v17 = sub_1D7B4A1C4();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v68 = (char *)v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v71 = (char *)v63 - v22;
  MEMORY[0x1E0C80A78](v21);
  v67 = (char *)v63 - v23;
  sub_1D7AAE0AC(0, &qword_1F014D5C8, v24);
  MEMORY[0x1E0C80A78](v25);
  v84 = (char *)v63 - v26;
  sub_1D7AB75F8();
  v28 = v27;
  MEMORY[0x1E0C80A78](v27);
  v30 = (char *)v63 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AB771C(v5, (uint64_t)v30);
  v31 = *(int *)(v28 + 36);
  v32 = v18;
  v33 = &v30[v31];
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v34(&v30[v31], v5, v17);
  v35 = v11;
  v36 = *(int *)(v11 + 36);
  v78 = v30;
  v37 = &v30[v36];
  v38 = sub_1D7AA76D4(&qword_1F014D5E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB44E0], MEMORY[0x1E0CB4500]);
  if ((sub_1D7B4A320() & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56))(v84, 1, 1, v17);
    return sub_1D7AAD1B0((uint64_t)v78, (uint64_t (*)(_QWORD))sub_1D7AB75F8);
  }
  else
  {
    v82 = v32;
    v63[1] = v38;
    v83 = v34;
    v65 = v33;
    v66 = v35;
    v64 = v37;
    while (1)
    {
      v39 = v83;
      v83(v84, (uint64_t)v33, v17);
      v40 = sub_1D7AA76D4((unint64_t *)&unk_1F014F450, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB44E0], MEMORY[0x1E0CB44F8]);
      v41 = (uint64_t)v78;
      v81 = v40;
      if ((sub_1D7B4A308() & 1) == 0)
        break;
      v79 = v4;
      v42 = v77;
      v43 = v75;
      v44 = &v75[*(int *)(v77 + 48)];
      v39(v75, v41, v17);
      v80 = v44;
      v39(v44, (uint64_t)v37, v17);
      v45 = v76;
      v46 = &v76[*(int *)(v42 + 48)];
      v39(v76, (uint64_t)v43, v17);
      v39(v46, (uint64_t)v44, v17);
      v47 = v82;
      v48 = *(char **)(v82 + 32);
      v49 = (uint64_t)v73;
      ((void (*)(char *, char *, uint64_t))v48)(v73, v45, v17);
      v50 = *(void (**)(char *, uint64_t))(v47 + 8);
      v50(v46, v17);
      v51 = &v45[*(int *)(v42 + 48)];
      ((void (*)(char *, char *, uint64_t))v48)(v45, v43, v17);
      ((void (*)(char *, char *, uint64_t))v48)(v51, v80, v17);
      v52 = v49 + *(int *)(v66 + 36);
      v4 = v50;
      v80 = v48;
      ((void (*)(uint64_t, char *, uint64_t))v48)(v52, v51, v17);
      v50(v45, v17);
      v53 = v72;
      sub_1D7AB72E8(v49, v72);
      v54 = v65;
      LOBYTE(v48) = sub_1D7B4A308();
      v41 = (uint64_t)v71;
      v83(v71, (uint64_t)v54, v17);
      v35 = v74;
      sub_1D7AB771C(v53, v74);
      if ((v48 & 1) == 0)
        goto LABEL_14;
      v55 = sub_1D7B4A2F0();
      sub_1D7AAD1B0(v35, (uint64_t (*)(_QWORD))sub_1D7AB6310);
      result = ((uint64_t (*)(uint64_t, uint64_t))v4)(v41, v17);
      if ((v55 & 1) == 0)
        goto LABEL_15;
      sub_1D7AAD1B0(v53, (uint64_t (*)(_QWORD))sub_1D7AB6310);
      v85 = 1;
      sub_1D7AA76D4(&qword_1F014D560, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB44E0], MEMORY[0x1E0CB4508]);
      v57 = v67;
      sub_1D7B4A71C();
      v58 = (void (*)(uint64_t, uint64_t))v4;
      v4(v54, v17);
      v59 = v80;
      ((void (*)(char *, char *, uint64_t))v80)(v54, v57, v17);
      v60 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v82 + 56);
      v61 = v84;
      v60(v84, 0, 1, v17);
      v35 = (uint64_t)v68;
      ((void (*)(char *, char *, uint64_t))v59)(v68, v61, v17);
      v62 = v79;
      v70(v35);
      v4 = v62;
      if (v62)
      {
        v58(v35, v17);
        return sub_1D7AAD1B0((uint64_t)v78, (uint64_t (*)(_QWORD))sub_1D7AB75F8);
      }
      v58(v35, v17);
      v33 = v54;
      v37 = v64;
      if ((sub_1D7B4A320() & 1) != 0)
      {
        v60(v84, 1, 1, v17);
        return sub_1D7AAD1B0((uint64_t)v78, (uint64_t (*)(_QWORD))sub_1D7AB75F8);
      }
    }
    __break(1u);
LABEL_14:
    sub_1D7AAD1B0(v35, (uint64_t (*)(_QWORD))sub_1D7AB6310);
    result = ((uint64_t (*)(uint64_t, uint64_t))v4)(v41, v17);
LABEL_15:
    __break(1u);
  }
  return result;
}

uint64_t sub_1D7AB4F84()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;

  v1 = *v0;
  sub_1D7AAE0AC(0, &qword_1F014D590, (void (*)(uint64_t))MEMORY[0x1E0DEF868]);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v23 - v3;
  v5 = sub_1D7B4A158();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AB7344();
  v10 = *(_QWORD *)(v9 - 8);
  v24 = v9;
  v25 = v10;
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v1 + 88);
  v14 = *(_QWORD *)(v1 + 80);
  v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 32))(v14, v13);
  sub_1D7AB7474();
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0DEF538], v5);
  v15 = (void *)sub_1D7B4A668();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v26 = v15;
  v16 = sub_1D7B4A650();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v4, 1, 1, v16);
  sub_1D7AB740C();
  sub_1D7AA76D4(&qword_1F014D5A8, (uint64_t (*)(uint64_t))sub_1D7AB740C, MEMORY[0x1E0C95D90]);
  sub_1D7AA76D4(&qword_1F014D5B0, (uint64_t (*)(uint64_t))sub_1D7AB7474, MEMORY[0x1E0DEF7F8]);
  sub_1D7B4984C();
  sub_1D7AB1148((uint64_t)v4, &qword_1F014D590, (void (*)(uint64_t))MEMORY[0x1E0DEF868]);

  swift_release();
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = v14;
  v17[3] = v13;
  v17[4] = v1;
  v18 = swift_allocObject();
  swift_weakInit();
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = v14;
  v19[3] = v13;
  v19[4] = v18;
  sub_1D7AA76D4(&qword_1F014D5B8, (uint64_t (*)(uint64_t))sub_1D7AB7344, MEMORY[0x1E0C95CB8]);
  v20 = v24;
  v21 = sub_1D7B49840();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v20);
  return v21;
}

void sub_1D7AB5278(void **a1)
{
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  NSObject *oslog;
  uint64_t v14;

  v1 = *a1;
  if (qword_1F014CF00 != -1)
    swift_once();
  v2 = sub_1D7B4969C();
  __swift_project_value_buffer(v2, (uint64_t)qword_1F01544B8);
  v3 = v1;
  v4 = v1;
  oslog = sub_1D7B49684();
  v5 = sub_1D7B4A620();
  if (os_log_type_enabled(oslog, v5))
  {
    v6 = swift_slowAlloc();
    v7 = swift_slowAlloc();
    v14 = v7;
    *(_DWORD *)v6 = 136446466;
    v8 = sub_1D7B4AA94();
    sub_1D7AA4DE4(v8, v9, &v14);
    sub_1D7B4A704();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    v10 = v1;
    sub_1D7AB7520();
    v11 = sub_1D7B4A3E0();
    sub_1D7AA4DE4(v11, v12, &v14);
    sub_1D7B4A704();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1D7813000, oslog, v5, "[%{public}s] Error observing model change: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1D829FFF4](v7, -1, -1);
    MEMORY[0x1D829FFF4](v6, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_1D7AB5498()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    sub_1D7AB54EC();
    return swift_release();
  }
  return result;
}

uint64_t sub_1D7AB54EC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD v20[2];
  uint64_t v21[3];

  v1 = v0;
  v2 = *v0;
  sub_1D7AAE0AC(0, &qword_1F014D440, (void (*)(uint64_t))sub_1D7AB6310);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v20 - v4;
  sub_1D7AB6310();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (uint64_t)v1 + *(_QWORD *)(v2 + 168);
  swift_beginAccess();
  sub_1D7AB6388(v11, (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7) == 1)
    return sub_1D7AB1148((uint64_t)v5, &qword_1F014D440, (void (*)(uint64_t))sub_1D7AB6310);
  sub_1D7AB72E8((uint64_t)v5, (uint64_t)v10);
  if (qword_1F014CF00 != -1)
    swift_once();
  v13 = sub_1D7B4969C();
  __swift_project_value_buffer(v13, (uint64_t)qword_1F01544B8);
  v14 = sub_1D7B49684();
  v15 = sub_1D7B4A620();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    v17 = swift_slowAlloc();
    v21[0] = v17;
    *(_DWORD *)v16 = 136446210;
    v18 = sub_1D7B4AA94();
    v20[1] = sub_1D7AA4DE4(v18, v19, v21);
    sub_1D7B4A704();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D7813000, v14, v15, "[%{public}s] Model change detected: reloading all data", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D829FFF4](v17, -1, -1);
    MEMORY[0x1D829FFF4](v16, -1, -1);
  }

  swift_beginAccess();
  sub_1D7B49378();
  swift_endAccess();
  swift_beginAccess();
  sub_1D7B49378();
  swift_endAccess();
  sub_1D7AB24A8((uint64_t)v10);
  return sub_1D7AAD1B0((uint64_t)v10, (uint64_t (*)(_QWORD))sub_1D7AB6310);
}

uint64_t sub_1D7AB57C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  void (*v67)(void);
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;

  sub_1D7AB7284();
  v82 = v1;
  v2 = MEMORY[0x1E0C80A78](v1);
  v83 = (char *)&v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v81 = (char *)&v75 - v4;
  v87 = sub_1D7B49390();
  v84 = *(_QWORD *)(v87 - 8);
  v5 = MEMORY[0x1E0C80A78](v87);
  v88 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v91 = (char *)&v75 - v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v89 = (char *)&v75 - v10;
  v11 = MEMORY[0x1E0C80A78](v9);
  v95 = (char *)&v75 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v86 = (uint64_t)&v75 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v85 = (uint64_t)&v75 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v93 = (char *)&v75 - v18;
  MEMORY[0x1E0C80A78](v17);
  v92 = (char *)&v75 - v19;
  v20 = sub_1D7B4A1C4();
  v21 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB44E0];
  v80 = *(_QWORD *)(v20 - 8);
  v22 = MEMORY[0x1E0C80A78](v20);
  v90 = (char *)&v75 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v94 = (char *)&v75 - v24;
  sub_1D7AAE0AC(0, &qword_1F014D440, (void (*)(uint64_t))sub_1D7AB6310);
  MEMORY[0x1E0C80A78](v25);
  v27 = (char *)&v75 - v26;
  sub_1D7AB6310();
  v29 = v28;
  v30 = *(_QWORD *)(v28 - 8);
  v31 = MEMORY[0x1E0C80A78](v28);
  v78 = (char *)&v75 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x1E0C80A78](v31);
  v79 = (uint64_t)&v75 - v34;
  MEMORY[0x1E0C80A78](v33);
  v36 = (char *)&v75 - v35;
  swift_beginAccess();
  swift_getAssociatedTypeWitness();
  sub_1D7AA76D4((unint64_t *)&unk_1F014DF30, v21, MEMORY[0x1E0CB44F0]);
  swift_bridgeObjectRetain();
  v37 = v20;
  v38 = sub_1D7B4A260();
  result = swift_bridgeObjectRelease();
  v40 = *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 160));
  if (v40 < v38)
  {
    v41 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 168);
    swift_beginAccess();
    sub_1D7AB6388(v41, (uint64_t)v27);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v27, 1, v29) == 1)
      return sub_1D7AB1148((uint64_t)v27, &qword_1F014D440, (void (*)(uint64_t))sub_1D7AB6310);
    v77 = v0;
    v42 = (uint64_t)v36;
    sub_1D7AB72E8((uint64_t)v27, (uint64_t)v36);
    sub_1D7AA76D4(&qword_1F014D560, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB44E0], MEMORY[0x1E0CB4508]);
    v43 = v37;
    sub_1D7B4A728();
    if (v96 <= v40)
      v44 = v40;
    else
      v44 = v96;
    result = sub_1D7B4A728();
    if (__OFSUB__(v44, v96))
    {
      __break(1u);
    }
    else
    {
      v45 = v94;
      sub_1D7B4A188();
      v46 = v90;
      sub_1D7B4A170();
      sub_1D7AA76D4((unint64_t *)&unk_1F014F450, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB44E0], MEMORY[0x1E0CB44F8]);
      result = sub_1D7B4A308();
      if ((result & 1) != 0)
      {
        v47 = v82;
        v48 = v81;
        v49 = &v81[*(int *)(v82 + 48)];
        v50 = v45;
        v51 = v80;
        v52 = *(void (**)(char *, char *, uint64_t))(v80 + 16);
        v52(v81, v50, v43);
        v76 = v42;
        v53 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
        v53(v49, v46, v43);
        v54 = v83;
        v55 = &v83[*(int *)(v47 + 48)];
        v52(v83, v48, v43);
        v52(v55, v49, v43);
        v56 = (uint64_t)v78;
        v53(v78, v54, v43);
        v57 = *(void (**)(char *, uint64_t))(v51 + 8);
        v57(v55, v43);
        v90 = (char *)v57;
        v58 = &v54[*(int *)(v47 + 48)];
        v53(v54, v48, v43);
        v53(v58, v49, v43);
        v53((char *)(v56 + *(int *)(v29 + 36)), v58, v43);
        v57(v54, v43);
        v59 = v79;
        sub_1D7AB72E8(v56, v79);
        v60 = v93;
        sub_1D7B4A5C0();
        sub_1D7AAD1B0(v59, (uint64_t (*)(_QWORD))sub_1D7AB6310);
        v61 = v85;
        sub_1D7AB160C(v85);
        v62 = v92;
        sub_1D7B49318();
        v63 = v84;
        v64 = *(void (**)(uint64_t, uint64_t))(v84 + 8);
        v65 = v87;
        v64(v61, v87);
        v64((uint64_t)v60, v65);
        v66 = v86;
        sub_1D7AB160C(v86);
        v67 = *(void (**)(void))(v63 + 16);
        ((void (*)(char *, uint64_t, uint64_t))v67)(v95, v66, v65);
        v84 = v43;
        v67();
        v68 = v88;
        ((void (*)(char *, char *, uint64_t))v67)(v88, v62, v65);
        sub_1D7AA76D4(&qword_1F014D568, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0], MEMORY[0x1E0CB13E8]);
        v69 = v89;
        sub_1D7B4A788();
        v70 = v95;
        sub_1D7B4A77C();
        v64((uint64_t)v69, v65);
        v64(v66, v65);
        sub_1D7AB16DC(v66);
        ((void (*)(char *, uint64_t, uint64_t))v67)(v70, v61, v65);
        ((void (*)(char *, uint64_t, uint64_t))v67)(v91, v61, v65);
        ((void (*)(char *, uint64_t, uint64_t))v67)(v68, v66, v65);
        sub_1D7B4A788();
        v71 = v93;
        sub_1D7B4A77C();
        v64((uint64_t)v69, v65);
        v64(v66, v65);
        v64(v61, v65);
        v72 = (uint64_t)v71;
        sub_1D7AB468C((void (*)(_QWORD *))sub_1D7AB732C, v77);
        v64((uint64_t)v71, v65);
        v73 = v71;
        v74 = v92;
        ((void (*)(char *, char *, uint64_t))v67)(v73, v92, v65);
        sub_1D7AB1670(v72);
        v64((uint64_t)v74, v65);
        ((void (*)(char *, uint64_t))v90)(v94, v84);
        return sub_1D7AAD1B0(v76, (uint64_t (*)(_QWORD))sub_1D7AB6310);
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1D7AB5FEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v0 = sub_1D7B4A1C4();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  v4 = sub_1D7B4A6F8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v9 - v6;
  sub_1D7B4A1A0();
  swift_beginAccess();
  sub_1D7AA76D4((unint64_t *)&unk_1F014DF30, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB44E0], MEMORY[0x1E0CB44F0]);
  sub_1D7B4A278();
  sub_1D7B4A248();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return swift_endAccess();
}

uint64_t *sub_1D7AB616C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = v4;
  v10 = *v4;
  v11 = *(_QWORD *)(*v4 + 104);
  sub_1D7AB7A74();
  swift_allocObject();
  *(uint64_t *)((char *)v4 + v11) = sub_1D7B49798();
  sub_1D7B49384();
  sub_1D7B49384();
  *(uint64_t *)((char *)v4 + *(_QWORD *)(*v4 + 128)) = 0;
  v12 = *(_QWORD *)(*v4 + 136);
  sub_1D7B4A1C4();
  v13 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB44E0];
  v14 = *(_QWORD *)(v10 + 80);
  swift_getAssociatedTypeWitness();
  sub_1D7AA76D4((unint64_t *)&unk_1F014DF30, v13, MEMORY[0x1E0CB44F0]);
  *(uint64_t *)((char *)v4 + v12) = sub_1D7B4A218();
  v15 = (uint64_t)v5 + *(_QWORD *)(*v5 + 168);
  sub_1D7AB6310();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))((uint64_t)v5 + *(_QWORD *)(*v5 + 96), a1, v14);
  *(uint64_t *)((char *)v5 + *(_QWORD *)(*v5 + 144)) = a2;
  *(uint64_t *)((char *)v5 + *(_QWORD *)(*v5 + 152)) = a3;
  *(uint64_t *)((char *)v5 + *(_QWORD *)(*v5 + 160)) = a4;
  *(uint64_t *)((char *)v5 + *(_QWORD *)(*v5 + 128)) = sub_1D7AB4F84();
  swift_release();
  return v5;
}

void sub_1D7AB6310()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014D448[0])
  {
    sub_1D7B4A1C4();
    sub_1D7AA76D4((unint64_t *)&unk_1F014F450, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB44E0], MEMORY[0x1E0CB44F8]);
    v0 = sub_1D7B4A5D8();
    if (!v1)
      atomic_store(v0, qword_1F014D448);
  }
}

uint64_t sub_1D7AB6388(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1D7AAE0AC(0, &qword_1F014D440, (void (*)(uint64_t))sub_1D7AB6310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D7AB63DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1D7AAE0AC(0, &qword_1F014D440, (void (*)(uint64_t))sub_1D7AB6310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D7AB6430@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7AB223C(a1);
}

uint64_t sub_1D7AB6454()
{
  return 16;
}

__n128 sub_1D7AB6460(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_1D7AB6470()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    sub_1D7B49390();
    if (v1 <= 0x3F)
    {
      sub_1D7AAE0AC(319, &qword_1F014D440, (void (*)(uint64_t))sub_1D7AB6310);
      if (v2 <= 0x3F)
        swift_initClassMetadata2();
    }
  }
}

uint64_t type metadata accessor for DailyModelProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DailyModelProvider);
}

uint64_t method lookup function for DailyModelProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DailyModelProvider.__allocating_init(dataSource:minimumBufferDuration:prefetchMultiplier:cacheLimit:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t dispatch thunk of DailyModelProvider.activeDayIndexRange.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of DailyModelProvider.activeDayIndexRange.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of DailyModelProvider.activeDayIndexRange.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of DailyModelProvider.subscript.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t sub_1D7AB65AC()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1D7AB65B4()
{
  uint64_t result;
  unint64_t v1;

  result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_1D7AB6618(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _BOOL8 v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _BOOL8 v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7;
  if (v6 <= 2)
  {
    if (v7 <= 3)
    {
      v10 = (~(-1 << (8 * v7)) - v6 + 3) >> (8 * v7);
      if (v10 > 0xFFFE)
      {
        v9 = 4;
      }
      else
      {
        v11 = v10 != 0;
        v12 = v10 >= 0xFF;
        v9 = 2;
        if (!v12)
          v9 = v11;
      }
    }
    else
    {
      v9 = 1;
    }
    v8 = v9 + v7;
  }
  v13 = *(_DWORD *)(v5 + 80);
  if (v13 <= 7 && v8 <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v5 + 48))(a2, 3, AssociatedTypeWitness))
    {
      if (v6 <= 2)
      {
        if (v7 <= 3)
        {
          v18 = (~(-1 << (8 * v7)) - v6 + 3) >> (8 * v7);
          if (v18 > 0xFFFE)
          {
            v17 = 4;
          }
          else
          {
            v19 = v18 != 0;
            v12 = v18 >= 0xFF;
            v17 = 2;
            if (!v12)
              v17 = v19;
          }
        }
        else
        {
          v17 = 1;
        }
        v7 += v17;
      }
      memcpy(a1, a2, v7);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 3, AssociatedTypeWitness);
    }
  }
  else
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v13 + 16) & ~v13));
    swift_retain();
  }
  return a1;
}

uint64_t sub_1D7AB67C8(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t result;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 3, AssociatedTypeWitness);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  return result;
}

void *sub_1D7AB6844(void *a1, const void *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  uint64_t v8;
  unsigned int v9;
  _BOOL8 v10;
  BOOL v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 3, AssociatedTypeWitness))
  {
    v6 = *(_DWORD *)(v5 + 84);
    v7 = *(_QWORD *)(v5 + 64);
    if (v6 <= 2)
    {
      if (v7 <= 3)
      {
        v9 = (~(-1 << (8 * v7)) - v6 + 3) >> (8 * v7);
        if (v9 > 0xFFFE)
        {
          v8 = 4;
        }
        else
        {
          v10 = v9 != 0;
          v11 = v9 >= 0xFF;
          v8 = 2;
          if (!v11)
            v8 = v10;
        }
      }
      else
      {
        v8 = 1;
      }
      v7 += v8;
    }
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 3, AssociatedTypeWitness);
  }
  return a1;
}

void *sub_1D7AB694C(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  unsigned int v9;
  size_t v10;
  uint64_t v11;
  unsigned int v12;
  _BOOL8 v13;
  BOOL v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 3, AssociatedTypeWitness);
  v8 = v6(a2, 3, AssociatedTypeWitness);
  if (v7)
  {
    if (v8)
    {
      v9 = *(_DWORD *)(v5 + 84);
      v10 = *(_QWORD *)(v5 + 64);
      if (v9 <= 2)
      {
        if (v10 > 3)
        {
LABEL_5:
          v11 = 1;
LABEL_16:
          v10 += v11;
          goto LABEL_17;
        }
LABEL_9:
        v12 = (~(-1 << (8 * v10)) - v9 + 3) >> (8 * v10);
        if (v12 > 0xFFFE)
        {
          v11 = 4;
        }
        else
        {
          v13 = v12 != 0;
          v14 = v12 >= 0xFF;
          v11 = 2;
          if (!v14)
            v11 = v13;
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 3, AssociatedTypeWitness);
  }
  else
  {
    if (v8)
    {
      (*(void (**)(void *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
      v9 = *(_DWORD *)(v5 + 84);
      v10 = *(_QWORD *)(v5 + 64);
      if (v9 <= 2)
      {
        if (v10 > 3)
          goto LABEL_5;
        goto LABEL_9;
      }
LABEL_17:
      memcpy(a1, a2, v10);
      return a1;
    }
    (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  }
  return a1;
}

void *sub_1D7AB6AB8(void *a1, const void *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  uint64_t v8;
  unsigned int v9;
  _BOOL8 v10;
  BOOL v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 3, AssociatedTypeWitness))
  {
    v6 = *(_DWORD *)(v5 + 84);
    v7 = *(_QWORD *)(v5 + 64);
    if (v6 <= 2)
    {
      if (v7 <= 3)
      {
        v9 = (~(-1 << (8 * v7)) - v6 + 3) >> (8 * v7);
        if (v9 > 0xFFFE)
        {
          v8 = 4;
        }
        else
        {
          v10 = v9 != 0;
          v11 = v9 >= 0xFF;
          v8 = 2;
          if (!v11)
            v8 = v10;
        }
      }
      else
      {
        v8 = 1;
      }
      v7 += v8;
    }
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 3, AssociatedTypeWitness);
  }
  return a1;
}

void *sub_1D7AB6BC0(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  unsigned int v9;
  size_t v10;
  uint64_t v11;
  unsigned int v12;
  _BOOL8 v13;
  BOOL v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 3, AssociatedTypeWitness);
  v8 = v6(a2, 3, AssociatedTypeWitness);
  if (v7)
  {
    if (v8)
    {
      v9 = *(_DWORD *)(v5 + 84);
      v10 = *(_QWORD *)(v5 + 64);
      if (v9 <= 2)
      {
        if (v10 > 3)
        {
LABEL_5:
          v11 = 1;
LABEL_16:
          v10 += v11;
          goto LABEL_17;
        }
LABEL_9:
        v12 = (~(-1 << (8 * v10)) - v9 + 3) >> (8 * v10);
        if (v12 > 0xFFFE)
        {
          v11 = 4;
        }
        else
        {
          v13 = v12 != 0;
          v14 = v12 >= 0xFF;
          v11 = 2;
          if (!v14)
            v11 = v13;
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 3, AssociatedTypeWitness);
  }
  else
  {
    if (v8)
    {
      (*(void (**)(void *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
      v9 = *(_DWORD *)(v5 + 84);
      v10 = *(_QWORD *)(v5 + 64);
      if (v9 <= 2)
      {
        if (v10 > 3)
          goto LABEL_5;
        goto LABEL_9;
      }
LABEL_17:
      memcpy(a1, a2, v10);
      return a1;
    }
    (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  }
  return a1;
}

uint64_t sub_1D7AB6D2C(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _BOOL8 v10;
  BOOL v11;
  char v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;

  v4 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 3;
  v7 = *(_QWORD *)(v4 + 64);
  if (v5 <= 2)
  {
    v6 = 0;
    if (v7 <= 3)
    {
      v9 = (~(-1 << (8 * v7)) - v5 + 3) >> (8 * v7);
      if (v9 > 0xFFFE)
      {
        v8 = 4;
      }
      else
      {
        v10 = v9 != 0;
        v11 = v9 >= 0xFF;
        v8 = 2;
        if (!v11)
          v8 = v10;
      }
    }
    else
    {
      v8 = 1;
    }
    v7 += v8;
  }
  if (!a2)
    return 0;
  if (a2 <= v6)
    goto LABEL_27;
  v12 = 8 * v7;
  if (v7 <= 3)
  {
    v14 = ((a2 - v6 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v14))
    {
      v13 = *(_DWORD *)(a1 + v7);
      if (!v13)
        goto LABEL_27;
      goto LABEL_20;
    }
    if (v14 > 0xFF)
    {
      v13 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_27;
      goto LABEL_20;
    }
    if (v14 < 2)
    {
LABEL_27:
      if (v6)
      {
        v16 = (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
        if (v16 >= 4)
          return v16 - 3;
        else
          return 0;
      }
      return 0;
    }
  }
  v13 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_27;
LABEL_20:
  v15 = (v13 - 1) << v12;
  if (v7 > 3)
    v15 = 0;
  if ((_DWORD)v7)
  {
    if (v7 > 3)
      LODWORD(v7) = 4;
    __asm { BR              X12 }
  }
  return v6 + v15 + 1;
}

void sub_1D7AB6ED8(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  uint64_t v10;
  unsigned int v11;
  _BOOL8 v12;
  BOOL v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = v7 - 3;
  v9 = *(_QWORD *)(v6 + 64);
  if (v7 <= 2)
  {
    v8 = 0;
    if (v9 <= 3)
    {
      v11 = (~(-1 << (8 * v9)) - v7 + 3) >> (8 * v9);
      if (v11 > 0xFFFE)
      {
        v10 = 4;
      }
      else
      {
        v12 = v11 != 0;
        v13 = v11 >= 0xFF;
        v10 = 2;
        if (!v13)
          v10 = v12;
      }
    }
    else
    {
      v10 = 1;
    }
    v9 += v10;
  }
  if (a3 <= v8)
  {
    v14 = 0u;
  }
  else if (v9 <= 3)
  {
    v16 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
    if (HIWORD(v16))
    {
      v14 = 4u;
    }
    else if (v16 >= 0x100)
    {
      v14 = 2;
    }
    else
    {
      v14 = v16 > 1;
    }
  }
  else
  {
    v14 = 1u;
  }
  if (v8 < a2)
  {
    v15 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v17 = v15 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if ((_DWORD)v9 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_1D7AB7110(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 48))(a1, 3, AssociatedTypeWitness);
}

uint64_t sub_1D7AB715C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a1, a2, 3, AssociatedTypeWitness);
}

uint64_t dispatch thunk of DailyModelProviderDataSource.fetchModels(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 24) + *(_QWORD *)(a3 + 24));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1D7AB7224;
  return v9(a1, a2, a3);
}

uint64_t sub_1D7AB7224(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t dispatch thunk of DailyModelProviderDataSource.modelsDidChangePublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of DailyModelProviderDataSource.__unitTest_noFetchNecessary()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

void sub_1D7AB7284()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1F014D558)
  {
    sub_1D7B4A1C4();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1F014D558);
  }
}

uint64_t sub_1D7AB72E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1D7AB6310();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D7AB732C()
{
  return sub_1D7AB5FEC();
}

void sub_1D7AB7344()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014D598)
  {
    sub_1D7AB740C();
    sub_1D7AB7474();
    sub_1D7AA76D4(&qword_1F014D5A8, (uint64_t (*)(uint64_t))sub_1D7AB740C, MEMORY[0x1E0C95D90]);
    sub_1D7AA76D4(&qword_1F014D5B0, (uint64_t (*)(uint64_t))sub_1D7AB7474, MEMORY[0x1E0DEF7F8]);
    v0 = sub_1D7B49738();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014D598);
  }
}

void sub_1D7AB740C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014D5A0)
  {
    sub_1D7AAEAB4();
    v0 = sub_1D7B49750();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014D5A0);
  }
}

unint64_t sub_1D7AB7474()
{
  unint64_t result;

  result = qword_1F01505F0;
  if (!qword_1F01505F0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1F01505F0);
  }
  return result;
}

uint64_t sub_1D7AB74B0()
{
  return swift_deallocObject();
}

void sub_1D7AB74C0(void **a1)
{
  sub_1D7AB5278(a1);
}

uint64_t sub_1D7AB74CC()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1D7AB74F0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1D7AB7514()
{
  return sub_1D7AB5498();
}

void sub_1D7AB7520()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014D5C0)
  {
    sub_1D7AAEAB4();
    v0 = sub_1D7B49744();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014D5C0);
  }
}

uint64_t sub_1D7AB757C(uint64_t a1)
{
  return sub_1D7AB4514(a1);
}

uint64_t sub_1D7AB7594@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a2, a1, AssociatedTypeWitness);
}

void sub_1D7AB75F8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014D5D0)
  {
    sub_1D7AB6310();
    sub_1D7AB7658();
    v0 = sub_1D7B4A878();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014D5D0);
  }
}

unint64_t sub_1D7AB7658()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1F014D5D8;
  if (!qword_1F014D5D8)
  {
    sub_1D7AB6310();
    v2 = v1;
    v3[0] = sub_1D7AA76D4(&qword_1F014D560, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB44E0], MEMORY[0x1E0CB4508]);
    v3[1] = sub_1D7AB76D8();
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0DEB8C0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1F014D5D8);
  }
  return result;
}

unint64_t sub_1D7AB76D8()
{
  unint64_t result;

  result = qword_1F014D5E0;
  if (!qword_1F014D5E0)
  {
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0DEB440], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&qword_1F014D5E0);
  }
  return result;
}

uint64_t sub_1D7AB771C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1D7AB6310();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1D7AB7760(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    a3(255);
    sub_1D7AA76D4(a4, a3, a5);
    v9 = sub_1D7B4A878();
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_1D7AB77E0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v6;

  sub_1D7AB7760(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t sub_1D7AB781C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1D7B49360();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1D7AB78B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(sub_1D7B49360() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(v1 + 16);
  v8 = *(_QWORD *)(v1 + 24);
  v9 = v1 + v5;
  v10 = *(_QWORD **)(v1 + v6);
  v11 = *(_QWORD *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFF8));
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_1D7AB7968;
  return sub_1D7AB2DC8(a1, v7, v8, v9, v10, v11);
}

uint64_t sub_1D7AB7968()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void sub_1D7AB79B0()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1F014D610)
  {
    sub_1D7AAE0AC(255, &qword_1F014D440, (void (*)(uint64_t))sub_1D7AB6310);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1F014D610);
  }
}

uint64_t sub_1D7AB7A20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1D7AAE0AC(0, &qword_1F014D440, (void (*)(uint64_t))sub_1D7AB6310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1D7AB7A74()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014D618)
  {
    sub_1D7AB6310();
    v0 = sub_1D7B497A4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014D618);
  }
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x1D829FE98](a1, v6, a5);
}

uint64_t static HKTraitWidthDesignation.defaultValue.getter()
{
  return 1;
}

void sub_1D7AB7B0C(uint64_t a1)
{
  sub_1D7AB7B5C(a1, (SEL *)&selRef_identifier, &qword_1F01492D0, &qword_1F01492D8);
}

uint64_t static HKTraitWidthDesignation.identifier.getter()
{
  return sub_1D7AB7BE8(&qword_1F01492E0, &qword_1F01492D0);
}

void sub_1D7AB7B44(uint64_t a1)
{
  sub_1D7AB7B5C(a1, (SEL *)&selRef_name, &qword_1F01492E8, &qword_1F01492F0);
}

void sub_1D7AB7B5C(uint64_t a1, SEL *a2, uint64_t *a3, _QWORD *a4)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = objc_msgSend((id)objc_opt_self(), *a2);
  v7 = sub_1D7B4A3BC();
  v9 = v8;

  *a3 = v7;
  *a4 = v9;
}

uint64_t static HKTraitWidthDesignation.name.getter()
{
  return sub_1D7AB7BE8(&qword_1F01492A8, &qword_1F01492E8);
}

uint64_t sub_1D7AB7BE8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

void sub_1D7AB7C38(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1D7AB7C44(uint64_t a1, uint64_t a2)
{
  return sub_1D7AB7C84(a1, a2, &qword_1F01492E0, &qword_1F01492D0);
}

uint64_t sub_1D7AB7C64(uint64_t a1, uint64_t a2)
{
  return sub_1D7AB7C84(a1, a2, &qword_1F01492A8, &qword_1F01492E8);
}

uint64_t sub_1D7AB7C84(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v5;

  if (*a3 != -1)
    swift_once();
  v5 = *a4;
  swift_bridgeObjectRetain();
  return v5;
}

id HKWidthDesignation.init(viewWidth:)(double a1)
{
  return objc_msgSend((id)objc_opt_self(), sel_widthDesignationFromViewWidth_, a1);
}

uint64_t sub_1D7AB7D1C(unint64_t *a1, unint64_t *a2)
{
  return _sSo18HKWidthDesignationV8HealthUIE1loiySbAB_ABtFZ_0(*a1, *a2);
}

uint64_t sub_1D7AB7D28(unint64_t *a1, unint64_t *a2)
{
  return sub_1D7AB7D34(*a1, *a2);
}

uint64_t sub_1D7AB7D34(unint64_t a1, unint64_t a2)
{
  uint64_t result;

  type metadata accessor for HKWidthDesignation(0);
  if (a2 - 1 < 6 && a1 - 1 < 6)
    return a2 >= a1;
  result = sub_1D7B4A950();
  __break(1u);
  return result;
}

uint64_t sub_1D7AB7DA8(unint64_t *a1, unint64_t *a2)
{
  return sub_1D7AB7DB4(*a1, *a2);
}

uint64_t sub_1D7AB7DB4(unint64_t a1, unint64_t a2)
{
  uint64_t result;

  type metadata accessor for HKWidthDesignation(0);
  if (a1 - 1 < 6 && a2 - 1 < 6)
    return a1 >= a2;
  result = sub_1D7B4A950();
  __break(1u);
  return result;
}

uint64_t sub_1D7AB7E28(unint64_t *a1, unint64_t *a2)
{
  return sub_1D7AB7E34(*a1, *a2);
}

uint64_t sub_1D7AB7E34(unint64_t a1, unint64_t a2)
{
  uint64_t result;

  type metadata accessor for HKWidthDesignation(0);
  if (a2 - 1 < 6 && a1 - 1 < 6)
    return a2 < a1;
  result = sub_1D7B4A950();
  __break(1u);
  return result;
}

uint64_t UIMutableTraits.widthDesignation.getter()
{
  uint64_t v1;

  sub_1D7AB82CC();
  sub_1D7AB8378((unint64_t *)&unk_1F0149300, (uint64_t)&unk_1D7B83428);
  sub_1D7B496A8();
  return v1;
}

uint64_t UIMutableTraits.widthDesignation.setter()
{
  sub_1D7AB82CC();
  sub_1D7AB8378((unint64_t *)&unk_1F0149300, (uint64_t)&unk_1D7B83428);
  return sub_1D7B496B4();
}

uint64_t (*UIMutableTraits.widthDesignation.modify(uint64_t *a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v3;

  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  *a1 = UIMutableTraits.widthDesignation.getter();
  return sub_1D7AB7FD0;
}

uint64_t sub_1D7AB7FD0()
{
  return UIMutableTraits.widthDesignation.setter();
}

uint64_t UITraitCollection.widthDesignation.getter()
{
  uint64_t v1;

  sub_1D7AB82CC();
  sub_1D7AB8378((unint64_t *)&unk_1F0149300, (uint64_t)&unk_1D7B83428);
  sub_1D7B4A674();
  return v1;
}

uint64_t sub_1D7AB8050()
{
  sub_1D7AB8378(&qword_1F014D628, (uint64_t)&unk_1D7B83338);
  return sub_1D7B49930();
}

uint64_t EnvironmentValues.widthDesignation.getter()
{
  uint64_t v1;

  sub_1D7AB8310();
  sub_1D7B49AD4();
  return v1;
}

uint64_t EnvironmentValues.widthDesignation.setter()
{
  sub_1D7AB8310();
  return sub_1D7B49AE0();
}

uint64_t (*EnvironmentValues.widthDesignation.modify(uint64_t a1))(_QWORD *a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(_QWORD *)(a1 + 24) = sub_1D7AB8310();
  sub_1D7B49AD4();
  return sub_1D7AB816C;
}

uint64_t sub_1D7AB816C(_QWORD *a1)
{
  a1[1] = *a1;
  return sub_1D7B49AE0();
}

uint64_t sub_1D7AB81A0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  sub_1D7AB82CC();
  sub_1D7AB8378((unint64_t *)&unk_1F0149300, (uint64_t)&unk_1D7B83428);
  result = sub_1D7B4A674();
  *a1 = v3;
  return result;
}

uint64_t sub_1D7AB8210(uint64_t a1)
{
  __swift_mutable_project_boxed_opaque_existential_1(a1, *(_QWORD *)(a1 + 24));
  return UIMutableTraits.widthDesignation.setter();
}

uint64_t _sSo18HKWidthDesignationV8HealthUIE1loiySbAB_ABtFZ_0(unint64_t a1, unint64_t a2)
{
  uint64_t result;

  type metadata accessor for HKWidthDesignation(0);
  if (a1 - 1 < 6 && a2 - 1 < 6)
    return a1 < a2;
  result = sub_1D7B4A950();
  __break(1u);
  return result;
}

unint64_t sub_1D7AB82CC()
{
  unint64_t result;

  result = qword_1F01492F8;
  if (!qword_1F01492F8)
  {
    result = MEMORY[0x1D829FF28](&protocol conformance descriptor for HKTraitWidthDesignation, &type metadata for HKTraitWidthDesignation);
    atomic_store(result, (unint64_t *)&qword_1F01492F8);
  }
  return result;
}

unint64_t sub_1D7AB8310()
{
  unint64_t result;

  result = qword_1F014D620;
  if (!qword_1F014D620)
  {
    result = MEMORY[0x1D829FF28](&unk_1D7B840A4, &type metadata for HKTraitWidthDesignationKey);
    atomic_store(result, (unint64_t *)&qword_1F014D620);
  }
  return result;
}

uint64_t sub_1D7AB8354()
{
  return sub_1D7AB8378(&qword_1F014D628, (uint64_t)&unk_1D7B83338);
}

uint64_t sub_1D7AB8378(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for HKWidthDesignation(255);
    result = MEMORY[0x1D829FF28](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D7AB83B8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = UIMutableTraits.widthDesignation.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1D7AB83E8()
{
  return UIMutableTraits.widthDesignation.setter();
}

uint64_t sub_1D7AB8414()
{
  return 16;
}

__n128 sub_1D7AB8420(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1D7AB842C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  sub_1D7AB8310();
  result = sub_1D7B49AD4();
  *a1 = v3;
  return result;
}

uint64_t sub_1D7AB8478()
{
  sub_1D7AB8310();
  return sub_1D7B49AE0();
}

ValueMetadata *type metadata accessor for HKTraitWidthDesignation()
{
  return &type metadata for HKTraitWidthDesignation;
}

ValueMetadata *type metadata accessor for HKTraitWidthDesignationKey()
{
  return &type metadata for HKTraitWidthDesignationKey;
}

unint64_t sub_1D7AB84E4()
{
  unint64_t result;

  result = qword_1F014D630;
  if (!qword_1F014D630)
  {
    result = MEMORY[0x1D829FF28](&unk_1D7B8406C, &type metadata for HKTraitWidthDesignationKey);
    atomic_store(result, (unint64_t *)&qword_1F014D630);
  }
  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

id sub_1D7AB8658(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  void *v4;
  void *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  objc_class *v19;
  objc_super v21;

  v5 = v4;
  v10 = sub_1D7B49300();
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 == 6)
  {
    (*(void (**)(char *, uint64_t))(v11 + 16))(v13, a3);
    v14 = objc_allocWithZone((Class)type metadata accessor for BalanceDayXAxis());
    v15 = sub_1D7B2C170((uint64_t)v13);
    v16 = objc_allocWithZone((Class)HKDateGraphViewController);
    v17 = (void *)sub_1D7B492AC();
    v18 = objc_msgSend(v16, sel_initWithDateZoom_previousDateZoom_previousXAxisSpace_currentCalendar_customDateAxis_, 6, a2, v17, v15, a4);

  }
  else
  {
    v17 = (void *)sub_1D7B492AC();
    v19 = (objc_class *)type metadata accessor for BalanceInteractiveChartViewController();
    v21.receiver = v5;
    v21.super_class = v19;
    v18 = objc_msgSendSuper2(&v21, sel_makePrimaryGraphViewControllerWithDateZoom_previousDateZoom_previousXAxisSpace_currentCalendar_, a1, a2, v17, a4);
  }

  return v18;
}

id sub_1D7AB8A54(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  objc_class *v23;

  v15 = sub_1D7B49198();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(a8, 1, v15) != 1)
  {
    v17 = (void *)sub_1D7B49150();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a8, v15);
  }
  v18 = sub_1D7B49300();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(a9, 1, v18) != 1)
  {
    v20 = (void *)sub_1D7B492AC();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a9, v18);
  }
  v21 = objc_msgSend(objc_allocWithZone(v23), sel_initWithHealthStore_primaryDisplayType_unitPreferenceController_dateCache_chartDataCacheController_selectedTimeScopeController_sampleTypeDateRangeController_initialXValue_currentCalendarOverride_options_, a1, a2, a3, a4, a5, a6, a7, v17, v20, a10);

  return v21;
}

id sub_1D7AB930C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BalanceInteractiveChartViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for BalanceInteractiveChartViewController()
{
  return objc_opt_self();
}

void sub_1D7AB935C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014D668)
  {
    sub_1D7AAF6EC(255, &qword_1F014D670);
    v0 = sub_1D7B4A4E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014D668);
  }
}

id sub_1D7AB93C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  objc_class *v27;
  id v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  objc_super v36;

  v11 = v10;
  v32 = a7;
  v33 = a4;
  v34 = a5;
  v35 = a6;
  v30 = a2;
  v31 = a3;
  sub_1D7AAE0AC(0, &qword_1F014D660, (void (*)(uint64_t))MEMORY[0x1E0CB11F0]);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v30 - v15;
  v17 = (void (*)(uint64_t))MEMORY[0x1E0CB0870];
  sub_1D7AAE0AC(0, (unint64_t *)&qword_1F014D000, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v30 - v19;
  sub_1D7AB9BC4(a8, (uint64_t)&v30 - v19, (unint64_t *)&qword_1F014D000, v17);
  v21 = sub_1D7B49198();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) != 1)
  {
    v23 = (void *)sub_1D7B49150();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v20, v21);
  }
  sub_1D7AB9BC4(a9, (uint64_t)v16, &qword_1F014D660, (void (*)(uint64_t))MEMORY[0x1E0CB11F0]);
  v24 = sub_1D7B49300();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v16, 1, v24) != 1)
  {
    v26 = (void *)sub_1D7B492AC();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v16, v24);
  }
  v27 = (objc_class *)type metadata accessor for BalanceInteractiveChartViewController();
  v36.receiver = v11;
  v36.super_class = v27;
  v28 = objc_msgSendSuper2(&v36, sel_initWithHealthStore_primaryDisplayType_unitPreferenceController_dateCache_chartDataCacheController_selectedTimeScopeController_sampleTypeDateRangeController_initialXValue_currentCalendarOverride_options_, a1, v30, v31, v33, v34, v35, v32, v23, v26, a10);

  sub_1D7AB1148(a9, &qword_1F014D660, (void (*)(uint64_t))MEMORY[0x1E0CB11F0]);
  sub_1D7AB1148(a8, (unint64_t *)&qword_1F014D000, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  return v28;
}

id sub_1D7AB95EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  objc_class *v27;
  id v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  objc_super v38;

  v12 = v11;
  v33 = a7;
  v34 = a8;
  v36 = a5;
  v37 = a6;
  v35 = a4;
  v31 = a2;
  v32 = a3;
  sub_1D7AAE0AC(0, &qword_1F014D660, (void (*)(uint64_t))MEMORY[0x1E0CB11F0]);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v30 - v14;
  v16 = (void (*)(uint64_t))MEMORY[0x1E0CB0870];
  sub_1D7AAE0AC(0, (unint64_t *)&qword_1F014D000, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v30 - v18;
  sub_1D7AAF6EC(0, (unint64_t *)&qword_1F014D240);
  sub_1D7AAF6EC(0, &qword_1F014D678);
  sub_1D7AAF724();
  v20 = (void *)sub_1D7B4A230();
  swift_bridgeObjectRelease();
  sub_1D7AB9BC4(a9, (uint64_t)v19, (unint64_t *)&qword_1F014D000, v16);
  v21 = sub_1D7B49198();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v19, 1, v21) != 1)
  {
    v23 = (void *)sub_1D7B49150();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
  }
  sub_1D7AB9BC4(a10, (uint64_t)v15, &qword_1F014D660, (void (*)(uint64_t))MEMORY[0x1E0CB11F0]);
  v24 = sub_1D7B49300();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v15, 1, v24) != 1)
  {
    v26 = (void *)sub_1D7B492AC();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v15, v24);
  }
  v27 = (objc_class *)type metadata accessor for BalanceInteractiveChartViewController();
  v38.receiver = v12;
  v38.super_class = v27;
  v28 = objc_msgSendSuper2(&v38, sel_initWithTimeScopeRanges_healthStore_primaryDisplayType_unitPreferenceController_dateCache_chartDataCacheController_selectedTimeScopeController_sampleTypeDateRangeController_initialXValue_currentCalendarOverride_options_, v20, v31, v32, v35, v36, v37, v33, v34, v23, v26, a11);

  sub_1D7AB1148(a10, &qword_1F014D660, (void (*)(uint64_t))MEMORY[0x1E0CB11F0]);
  sub_1D7AB1148(a9, (unint64_t *)&qword_1F014D000, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  return v28;
}

id sub_1D7AB9880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  objc_class *v29;
  id v30;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  objc_super v40;
  _QWORD v41[3];
  uint64_t v42;

  v33 = a2;
  v34 = a7;
  v35 = a8;
  v37 = a5;
  v38 = a6;
  v36 = a4;
  sub_1D7AAE0AC(0, &qword_1F014D660, (void (*)(uint64_t))MEMORY[0x1E0CB11F0]);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v32 - v15;
  sub_1D7AB935C();
  v17 = (void *)sub_1D7B4A4A0();
  swift_bridgeObjectRelease();
  if (a3)
  {
    sub_1D7AAF6EC(0, &qword_1F014D680);
    v18 = (void *)sub_1D7B4A4A0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = 0;
  }
  v39 = a10;
  sub_1D7AB9B80(a10, (uint64_t)v41);
  v19 = v42;
  if (v42)
  {
    v20 = __swift_project_boxed_opaque_existential_0(v41, v42);
    v21 = *(_QWORD *)(v19 - 8);
    MEMORY[0x1E0C80A78](v20);
    v23 = (char *)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v21 + 16))(v23);
    v24 = sub_1D7B4A92C();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v19);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v41);
  }
  else
  {
    v24 = 0;
  }
  sub_1D7AB9BC4(a11, (uint64_t)v16, &qword_1F014D660, (void (*)(uint64_t))MEMORY[0x1E0CB11F0]);
  v25 = sub_1D7B49300();
  v26 = *(_QWORD *)(v25 - 8);
  v27 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v16, 1, v25) != 1)
  {
    v27 = (void *)sub_1D7B492AC();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v16, v25);
  }
  if (a13)
  {
    sub_1D7AAF6EC(0, (unint64_t *)&qword_1F014D240);
    sub_1D7AAF6EC(0, &qword_1F014D678);
    sub_1D7AAF724();
    v28 = (void *)sub_1D7B4A230();
    swift_bridgeObjectRelease();
  }
  else
  {
    v28 = 0;
  }
  v29 = (objc_class *)type metadata accessor for BalanceInteractiveChartViewController();
  v40.receiver = v32;
  v40.super_class = v29;
  v30 = objc_msgSendSuper2(&v40, sel_initWithStackedDisplayTypes_primaryDisplayTypeStackIndex_stackedDisplayTypeHeights_healthStore_unitPreferenceController_dateCache_chartDataCacheController_selectedTimeScopeController_sampleTypeDateRangeController_initialXValue_currentCalendarOverride_options_timeScopeRanges_, v17, v33, v18, v36, v37, v38, v34, v35, a9, v24, v27, a12, v28);

  swift_unknownObjectRelease();
  sub_1D7AB1148(a11, &qword_1F014D660, (void (*)(uint64_t))MEMORY[0x1E0CB11F0]);
  sub_1D7AB1290(v39);
  return v30;
}

uint64_t sub_1D7AB9B80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1D7AB12CC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D7AB9BC4(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  sub_1D7AAE0AC(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t AttributedString.ranges<A>(of:options:locale:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t result;
  void (*v35)(_QWORD, _QWORD, _QWORD);
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(_QWORD, _QWORD, _QWORD);
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;

  v81 = a2;
  v82 = a3;
  v8 = sub_1D7B48FE8();
  v78 = *(_QWORD *)(v8 - 8);
  v79 = v8;
  MEMORY[0x1E0C80A78](v8);
  v77 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7ABA1DC();
  v76 = v10;
  v11 = MEMORY[0x1E0C80A78](v10);
  v74 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v75 = (char *)&v64 - v13;
  sub_1D7AA787C(0, &qword_1F01493E8, (uint64_t (*)(uint64_t))sub_1D7ABA240, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v64 - v15;
  sub_1D7ABA240();
  v18 = v17;
  v19 = *(_QWORD *)(v17 - 8);
  v20 = MEMORY[0x1E0C80A78](v17);
  v22 = (char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v20);
  v73 = (char *)&v64 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v72 = (uint64_t)&v64 - v26;
  MEMORY[0x1E0C80A78](v25);
  v86 = (uint64_t)&v64 - v27;
  v28 = sub_1D7B48F34();
  v85 = *(_QWORD *)(v28 - 8);
  v29 = MEMORY[0x1E0C80A78](v28);
  v31 = (char *)&v64 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29);
  v33 = (char *)&v64 - v32;
  v83 = a4;
  v84 = a5;
  v80 = a1;
  if (sub_1D7B4A584() < 1)
    return MEMORY[0x1E0DEE9D8];
  sub_1D7B48EB0();
  sub_1D7B48F40();
  v66 = sub_1D7AA76D4(&qword_1F01493D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF1B0], MEMORY[0x1E0CAF1C0]);
  result = sub_1D7B4A308();
  if ((result & 1) != 0)
  {
    v35 = *(void (**)(_QWORD, _QWORD, _QWORD))(v85 + 16);
    v87 = MEMORY[0x1E0DEE9D8];
    v70 = v18;
    v71 = v19;
    v68 = v22;
    v67 = v31;
    v69 = v33;
    v65 = v35;
    while (1)
    {
      v36 = v16;
      v38 = v75;
      v37 = v76;
      v39 = &v75[*(int *)(v76 + 48)];
      v40 = (void (*)(char *, char *, uint64_t))v35;
      v35(v75, v33, v28);
      v41 = v85;
      v42 = *(void (**)(char *, char *, uint64_t))(v85 + 32);
      v42(v39, v31, v28);
      v43 = v74;
      v44 = &v74[*(int *)(v37 + 48)];
      v40(v74, v38, v28);
      v40(v44, v39, v28);
      v45 = (uint64_t)v73;
      v42(v73, v43, v28);
      v46 = *(void (**)(char *, uint64_t))(v41 + 8);
      v46(v44, v28);
      v47 = *(int *)(v37 + 48);
      v16 = v36;
      v48 = &v43[v47];
      v49 = v38;
      v50 = v70;
      v42(v43, v49, v28);
      v42(v48, v39, v28);
      v42((char *)(v45 + *(int *)(v50 + 36)), v48, v28);
      v46(v43, v28);
      v51 = v72;
      sub_1D7ABA2B8(v45, v72);
      sub_1D7AA76D4(&qword_1F01493F0, (uint64_t (*)(uint64_t))sub_1D7ABA240, MEMORY[0x1E0DEB8A8]);
      v52 = v77;
      sub_1D7B48F70();
      sub_1D7ABA2FC(v51);
      sub_1D7AA76D4(&qword_1F01493D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF5A8], MEMORY[0x1E0CAF5A0]);
      v53 = v79;
      sub_1D7B4903C();
      v54 = v53;
      v55 = v71;
      (*(void (**)(char *, uint64_t))(v78 + 8))(v52, v54);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v16, 1, v50) == 1)
        break;
      v56 = v86;
      sub_1D7ABA2B8((uint64_t)v16, v86);
      v57 = (uint64_t)v68;
      sub_1D7ABA38C(v56, (uint64_t)v68);
      v58 = v87;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v58 = sub_1D7ABA630(0, *(_QWORD *)(v58 + 16) + 1, 1, v58, &qword_1F01493F8, (uint64_t (*)(uint64_t))sub_1D7ABA240);
      v60 = *(_QWORD *)(v58 + 16);
      v59 = *(_QWORD *)(v58 + 24);
      if (v60 >= v59 >> 1)
        v58 = sub_1D7ABA630(v59 > 1, v60 + 1, 1, v58, &qword_1F01493F8, (uint64_t (*)(uint64_t))sub_1D7ABA240);
      *(_QWORD *)(v58 + 16) = v60 + 1;
      v61 = (*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
      v87 = v58;
      sub_1D7ABA2B8(v57, v58 + v61 + *(_QWORD *)(v55 + 72) * v60);
      v62 = v69;
      v46(v69, v28);
      v33 = v62;
      v63 = v86;
      v35 = v65;
      v65(v33, v86 + *(int *)(v50 + 36), v28);
      sub_1D7ABA2FC(v63);
      v31 = v67;
      sub_1D7B48F40();
      result = sub_1D7B4A308();
      if ((result & 1) == 0)
        goto LABEL_13;
    }
    v46(v69, v28);
    sub_1D7ABA338((uint64_t)v16);
    return v87;
  }
  else
  {
LABEL_13:
    __break(1u);
  }
  return result;
}

void sub_1D7ABA1DC()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1F01493C8)
  {
    sub_1D7B48F34();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1F01493C8);
  }
}

void sub_1D7ABA240()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F01493E0)
  {
    sub_1D7B48F34();
    sub_1D7AA76D4(&qword_1F01493D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF1B0], MEMORY[0x1E0CAF1C0]);
    v0 = sub_1D7B4A5D8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F01493E0);
  }
}

uint64_t sub_1D7ABA2B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1D7ABA240();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D7ABA2FC(uint64_t a1)
{
  uint64_t v2;

  sub_1D7ABA240();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1D7ABA338(uint64_t a1)
{
  uint64_t v2;

  sub_1D7AA787C(0, &qword_1F01493E8, (uint64_t (*)(uint64_t))sub_1D7ABA240, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1D7ABA38C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1D7ABA240();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *sub_1D7ABA3D0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1D7AA787C(0, (unint64_t *)&unk_1F014D1F0, (uint64_t (*)(uint64_t))sub_1D7AA78D4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D7ABABC4(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D7ABA4F0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1D7ABA630(a1, a2, a3, a4, &qword_1F01493F8, (uint64_t (*)(uint64_t))sub_1D7ABA240);
}

_QWORD *sub_1D7ABA504(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1D7ABB0F8(0, (unint64_t *)&unk_1F014D690);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D7ABAD9C(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D7ABA61C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1D7ABA630(a1, a2, a3, a4, &qword_1F014D1D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D290D0]);
}

uint64_t sub_1D7ABA630(char a1, int64_t a2, char a3, unint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  sub_1D7AA787C(0, a5, a6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = sub_1D7B4A884();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1D7ABAF8C(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

_QWORD *sub_1D7ABA84C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1D7ABB0F8(0, (unint64_t *)&unk_1F014D1A8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D7ABACAC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D7ABA964(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1D7ABB0F8(0, &qword_1F014D1D0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D7ABAD9C(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1D7ABAA7C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1D7AA787C(0, &qword_1F014D218, (uint64_t (*)(uint64_t))sub_1D7ABB0A4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1D7ABAE84(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D7ABABB0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1D7ABA630(a1, a2, a3, a4, &qword_1F014D688, (uint64_t (*)(uint64_t))type metadata accessor for OverlayConfiguration);
}

char *sub_1D7ABABC4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1D7B4A8E4();
  __break(1u);
  return result;
}

uint64_t sub_1D7ABACAC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1D7B4A8E4();
  __break(1u);
  return result;
}

char *sub_1D7ABAD9C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1D7B4A8E4();
  __break(1u);
  return result;
}

uint64_t sub_1D7ABAE84(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      sub_1D7ABB0A4();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1D7B4A8E4();
  __break(1u);
  return result;
}

uint64_t sub_1D7ABAF8C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = sub_1D7B4A8E4();
  __break(1u);
  return result;
}

unint64_t sub_1D7ABB0A4()
{
  unint64_t result;

  result = qword_1F014D220;
  if (!qword_1F014D220)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1F014D220);
  }
  return result;
}

void sub_1D7ABB0F8(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_1D7B4A920();
    if (!v4)
      atomic_store(v3, a2);
  }
}

id sub_1D7ABB13C(void *a1, void *a2)
{
  char *v2;
  char *v3;
  objc_class *ObjectType;
  uint64_t v7;
  void *v8;
  id v9;
  char *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  objc_super v18;
  uint64_t v19;

  v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType();
  v7 = OBJC_IVAR___HKClinicalAuthorizationFlowManager_ingestionObserverSet;
  v8 = (void *)*MEMORY[0x1E0CB52D8];
  v9 = objc_allocWithZone(MEMORY[0x1E0CB6988]);
  v10 = v3;
  v11 = v8;
  v12 = (void *)sub_1D7B4A38C();
  v13 = objc_msgSend(v9, sel_initWithName_loggingCategory_, v12, v11);

  *(_QWORD *)&v3[v7] = v13;
  *(_QWORD *)&v10[OBJC_IVAR___HKClinicalAuthorizationFlowManager_healthStore] = a1;
  *(_QWORD *)&v10[OBJC_IVAR___HKClinicalAuthorizationFlowManager_healthRecordsStore] = a2;
  v19 = 0;
  sub_1D7ABBEE8(0, &qword_1F014D770, MEMORY[0x1E0C95F88]);
  swift_allocObject();
  v14 = a1;
  v15 = a2;
  *(_QWORD *)&v10[OBJC_IVAR___HKClinicalAuthorizationFlowManager_ingestionStatus] = sub_1D7B497C8();
  sub_1D7ABBEE8(0, (unint64_t *)&qword_1F014FC10, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD))MEMORY[0x1E0C95F28]);
  swift_allocObject();
  *(_QWORD *)&v10[OBJC_IVAR___HKClinicalAuthorizationFlowManager_accountsEvents] = sub_1D7B49798();

  v18.receiver = v10;
  v18.super_class = ObjectType;
  v16 = objc_msgSendSuper2(&v18, sel_init);
  objc_msgSend(v15, sel_registerAccountsEventListener_, v16);

  return v16;
}

uint64_t sub_1D7ABB340()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = v0;
  return swift_task_switch();
}

uint64_t sub_1D7ABB358()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(void **)(v0[16] + OBJC_IVAR___HKClinicalAuthorizationFlowManager_healthRecordsStore);
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_1D7ABB3F8;
  v2 = swift_continuation_init();
  v0[10] = MEMORY[0x1E0C809B0];
  v3 = v0 + 10;
  v3[1] = 0x40000000;
  v3[2] = sub_1D7ABB700;
  v3[3] = &block_descriptor_1;
  v3[4] = v2;
  objc_msgSend(v1, sel_fetchClinicalConnectedAccountsWithCompletion_, v3);
  return swift_continuation_await();
}

uint64_t sub_1D7ABB3F8()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 136) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_1D7ABB458()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 120));
}

uint64_t sub_1D7ABB464()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  swift_willThrow();
  if (qword_1F014CF20 != -1)
    swift_once();
  v2 = *(void **)(v0 + 128);
  v1 = *(void **)(v0 + 136);
  v3 = sub_1D7B4969C();
  __swift_project_value_buffer(v3, (uint64_t)qword_1F0154500);
  v4 = v2;
  v5 = v1;
  v6 = v4;
  v7 = v1;
  v8 = sub_1D7B49684();
  v9 = sub_1D7B4A608();
  v10 = os_log_type_enabled(v8, v9);
  v12 = *(void **)(v0 + 128);
  v11 = *(void **)(v0 + 136);
  if (v10)
  {
    v13 = swift_slowAlloc();
    v22 = (_QWORD *)swift_slowAlloc();
    v23 = swift_slowAlloc();
    v24 = v23;
    *(_DWORD *)v13 = 136315394;
    v14 = v12;
    v15 = objc_msgSend(v14, sel_description);
    v16 = sub_1D7B4A3BC();
    v18 = v17;

    *(_QWORD *)(v0 + 80) = sub_1D7AA4DE4(v16, v18, &v24);
    sub_1D7B4A704();
    swift_bridgeObjectRelease();

    *(_WORD *)(v13 + 12) = 2112;
    v19 = v11;
    v20 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 80) = v20;
    sub_1D7B4A704();
    *v22 = v20;

    _os_log_impl(&dword_1D7813000, v8, v9, "%s failed to load connected accounts: %@", (uint8_t *)v13, 0x16u);
    sub_1D7ABBB38();
    swift_arrayDestroy();
    MEMORY[0x1D829FFF4](v22, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1D829FFF4](v23, -1, -1);
    MEMORY[0x1D829FFF4](v13, -1, -1);
  }
  else
  {

  }
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(MEMORY[0x1E0DEE9D8]);
}

uint64_t sub_1D7ABB700(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  _QWORD *v5;
  id v6;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    sub_1D7AAEAB4();
    swift_allocError();
    *v5 = a3;
    v6 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    sub_1D7AAF6EC(0, (unint64_t *)&qword_1F014D758);
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = sub_1D7B4A4AC();
    return swift_continuation_throwingResume();
  }
}

void sub_1D7ABB7A4(uint64_t a1)
{
  char *v1;
  void *v2;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD v9[6];

  v2 = v1;
  v4 = *(void **)&v1[OBJC_IVAR___HKClinicalAuthorizationFlowManager_ingestionObserverSet];
  sub_1D7AAF6EC(0, (unint64_t *)&qword_1F01505F0);
  v5 = (void *)sub_1D7B4A65C();
  objc_msgSend(v4, sel_registerObserver_queue_, a1, v5);

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v2;
  v9[4] = sub_1D7ABBE98;
  v9[5] = v6;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1107296256;
  v9[2] = sub_1D7ABB8B4;
  v9[3] = &block_descriptor_8;
  v7 = _Block_copy(v9);
  v8 = v2;
  swift_release();
  objc_msgSend(v4, sel_notifyObserver_handler_, a1, v7);
  _Block_release(v7);
}

uint64_t sub_1D7ABB8B4(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

id sub_1D7ABBA7C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ClinicalAuthorizationFlowManager()
{
  return objc_opt_self();
}

void sub_1D7ABBB38()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED0AC7F0)
  {
    sub_1D7AAF6EC(255, (unint64_t *)&qword_1ED0AC800);
    v0 = sub_1D7B4A6F8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED0AC7F0);
  }
}

void sub_1D7ABBB9C(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  NSObject *oslog;
  uint64_t aBlock[6];
  uint64_t v14;

  swift_getObjectType();
  if ((unint64_t)(a1 - 3) >= 3)
  {
    if ((unint64_t)(a1 - 1) > 1)
    {
      if (qword_1F014CF20 != -1)
        swift_once();
      v6 = sub_1D7B4969C();
      __swift_project_value_buffer(v6, (uint64_t)qword_1F0154500);
      oslog = sub_1D7B49684();
      v7 = sub_1D7B4A608();
      if (os_log_type_enabled(oslog, v7))
      {
        v8 = swift_slowAlloc();
        v9 = swift_slowAlloc();
        aBlock[0] = v9;
        *(_DWORD *)v8 = 136315394;
        v10 = sub_1D7B4AA94();
        v14 = sub_1D7AA4DE4(v10, v11, aBlock);
        sub_1D7B4A704();
        swift_bridgeObjectRelease();
        *(_WORD *)(v8 + 12) = 2048;
        v14 = a1;
        sub_1D7B4A704();
        _os_log_impl(&dword_1D7813000, oslog, v7, "%s observed unknown accounts event %lu", (uint8_t *)v8, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1D829FFF4](v9, -1, -1);
        MEMORY[0x1D829FFF4](v8, -1, -1);

      }
      else
      {

      }
    }
    else
    {
      aBlock[0] = a1;
      sub_1D7B497B0();
      v3 = *(void **)(v1 + OBJC_IVAR___HKClinicalAuthorizationFlowManager_ingestionObserverSet);
      v4 = swift_allocObject();
      *(_QWORD *)(v4 + 16) = a1;
      aBlock[4] = (uint64_t)sub_1D7ABBE4C;
      aBlock[5] = v4;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1D7ABB8B4;
      aBlock[3] = (uint64_t)&block_descriptor_2;
      v5 = _Block_copy(aBlock);
      swift_release();
      objc_msgSend(v3, sel_notifyObservers_, v5);
      _Block_release(v5);
    }
  }
  else
  {
    aBlock[0] = a1;
    sub_1D7B4978C();
  }
}

uint64_t sub_1D7ABBE3C()
{
  return swift_deallocObject();
}

id sub_1D7ABBE4C(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, sel_ingestionStatusDidChangeTo_, *(_QWORD *)(v1 + 16));
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t sub_1D7ABBE74()
{
  uint64_t v0;

  return swift_deallocObject();
}

id sub_1D7ABBE98(void *a1)
{
  uint64_t v3;

  sub_1D7B497BC();
  return objc_msgSend(a1, sel_ingestionStatusDidChangeTo_, v3);
}

void sub_1D7ABBEE8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, _QWORD))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    type metadata accessor for HKHealthRecordsAccountsEvent(255);
    v7 = a3(a1, v6, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1D7ABBF58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t result;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  _QWORD v61[2];
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v75 = a3;
  v76 = a4;
  v6 = sub_1D7B48FE8();
  v73 = *(_QWORD *)(v6 - 8);
  v74 = v6;
  MEMORY[0x1E0C80A78](v6);
  v72 = (char *)v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7ABA1DC();
  v71 = v8;
  v9 = MEMORY[0x1E0C80A78](v8);
  v69 = (char *)v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v70 = (char *)v61 - v11;
  sub_1D7AAE0AC(0, &qword_1F01493E8, (void (*)(uint64_t))sub_1D7ABA240);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v61 - v13;
  sub_1D7ABA240();
  v16 = v15;
  v17 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v18);
  v68 = (char *)v61 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v67 = (uint64_t)v61 - v24;
  MEMORY[0x1E0C80A78](v23);
  v78 = (uint64_t)v61 - v25;
  v26 = sub_1D7B48F34();
  v77 = *(_QWORD *)(v26 - 8);
  v27 = MEMORY[0x1E0C80A78](v26);
  v29 = (char *)v61 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27);
  v31 = (char *)v61 - v30;
  v80 = a1;
  v81 = a2;
  if (sub_1D7B4A404() < 1)
    return MEMORY[0x1E0DEE9D8];
  sub_1D7B48EB0();
  sub_1D7B48F40();
  v61[1] = sub_1D7AA76D4(&qword_1F01493D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF1B0], MEMORY[0x1E0CAF1C0]);
  result = sub_1D7B4A308();
  if ((result & 1) != 0)
  {
    v33 = *(void (**)(char *, char *, uint64_t))(v77 + 16);
    v79 = MEMORY[0x1E0DEE9D8];
    v65 = v16;
    v66 = v17;
    v62 = v29;
    v63 = v20;
    v64 = v31;
    v61[0] = v33;
    while (1)
    {
      v34 = v71;
      v35 = v14;
      v36 = v70;
      v37 = &v70[*(int *)(v71 + 48)];
      v38 = v33;
      v33(v70, v31, v26);
      v39 = v77;
      v40 = *(void (**)(char *, char *, uint64_t))(v77 + 32);
      v40(v37, v29, v26);
      v41 = v69;
      v42 = &v69[*(int *)(v34 + 48)];
      v38(v69, v36, v26);
      v38(v42, v37, v26);
      v43 = (uint64_t)v68;
      v40(v68, v41, v26);
      v44 = *(void (**)(char *, uint64_t))(v39 + 8);
      v44(v42, v26);
      v45 = &v41[*(int *)(v34 + 48)];
      v46 = v36;
      v14 = v35;
      v47 = v65;
      v40(v41, v46, v26);
      v40(v45, v37, v26);
      v40((char *)(v43 + *(int *)(v47 + 36)), v45, v26);
      v44(v41, v26);
      v48 = v67;
      sub_1D7ABA2B8(v43, v67);
      sub_1D7AA76D4(&qword_1F01493F0, (uint64_t (*)(uint64_t))sub_1D7ABA240, MEMORY[0x1E0DEB8A8]);
      v49 = v72;
      sub_1D7B48F70();
      sub_1D7ABA2FC(v48);
      sub_1D7AA76D4(&qword_1F01493D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF5A8], MEMORY[0x1E0CAF5A0]);
      sub_1D7ABCCEC();
      v50 = v74;
      sub_1D7B4903C();
      v51 = v50;
      v52 = v66;
      (*(void (**)(char *, uint64_t))(v73 + 8))(v49, v51);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v14, 1, v47) == 1)
        break;
      v53 = v78;
      sub_1D7ABA2B8((uint64_t)v14, v78);
      v54 = (uint64_t)v63;
      sub_1D7ABA38C(v53, (uint64_t)v63);
      v55 = v79;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v55 = sub_1D7ABA4F0(0, *(_QWORD *)(v55 + 16) + 1, 1, v55);
      v57 = *(_QWORD *)(v55 + 16);
      v56 = *(_QWORD *)(v55 + 24);
      if (v57 >= v56 >> 1)
        v55 = sub_1D7ABA4F0(v56 > 1, v57 + 1, 1, v55);
      *(_QWORD *)(v55 + 16) = v57 + 1;
      v58 = (*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
      v79 = v55;
      sub_1D7ABA2B8(v54, v55 + v58 + *(_QWORD *)(v52 + 72) * v57);
      v59 = v64;
      v44(v64, v26);
      v31 = v59;
      v60 = v78;
      v33 = (void (*)(char *, char *, uint64_t))v61[0];
      ((void (*)(char *, uint64_t, uint64_t))v61[0])(v31, v78 + *(int *)(v47 + 36), v26);
      sub_1D7ABA2FC(v60);
      v29 = v62;
      sub_1D7B48F40();
      result = sub_1D7B4A308();
      if ((result & 1) == 0)
        goto LABEL_13;
    }
    v44(v64, v26);
    sub_1D7AB1148((uint64_t)v14, &qword_1F01493E8, (void (*)(uint64_t))sub_1D7ABA240);
    return v79;
  }
  else
  {
LABEL_13:
    __break(1u);
  }
  return result;
}

uint64_t String.lettersSmallCaps()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t KeyPath;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void (*v45)(uint64_t *, _QWORD);
  _QWORD v47[3];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;

  v50 = a3;
  sub_1D7AAE0AC(0, &qword_1F014D778, (void (*)(uint64_t))MEMORY[0x1E0CDDC68]);
  MEMORY[0x1E0C80A78](v5);
  v55 = (char *)v47 - v6;
  sub_1D7ABA240();
  v56 = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v54 = (char *)v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v53 = (char *)v47 - v11;
  sub_1D7AAE0AC(0, &qword_1F01493E8, v12);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)v47 - v14;
  v16 = sub_1D7B48FD0();
  MEMORY[0x1E0C80A78](v16);
  v57 = (char *)v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1D7B48F4C();
  v48 = *(_QWORD *)(v18 - 8);
  v49 = v18;
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1D7B48D24();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x1E0C80A78](v21);
  v25 = (char *)v47 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v27 = (char *)v47 - v26;
  v58 = a1;
  v59 = a2;
  sub_1D7ABCCEC();
  v52 = sub_1D7B4A74C();
  v29 = v28;
  v58 = v52;
  v59 = v28;
  sub_1D7B48D0C();
  sub_1D7B48D18();
  v30 = *(void (**)(char *, uint64_t))(v22 + 8);
  v30(v27, v21);
  v31 = sub_1D7B4A734();
  v30(v25, v21);
  v32 = sub_1D7ABD81C(v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1D7B48FC4();
  v47[2] = v29;
  sub_1D7B48F58();
  v57 = v20;
  v33 = sub_1D7ABCD30(v32, (uint64_t)v20);
  v34 = *(_QWORD *)(v33 + 16);
  v47[0] = v33;
  v47[1] = v32;
  if (v34)
  {
    v35 = v33 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v52 = *(_QWORD *)(v8 + 72);
    v36 = v56;
    v38 = (uint64_t)v53;
    v37 = (uint64_t)v54;
    while (1)
    {
      sub_1D7ABA38C(v35, (uint64_t)v15);
      v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
      v39(v15, 0, 1, v36);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v15, 1, v36) == 1)
        break;
      v51 = v39;
      sub_1D7ABA2B8((uint64_t)v15, v38);
      sub_1D7ABA38C(v38, v37);
      KeyPath = swift_getKeyPath();
      v47[-2] = MEMORY[0x1E0C80A78](KeyPath);
      swift_getKeyPath();
      v41 = v15;
      v42 = v8;
      v43 = v55;
      sub_1D7B49E94();
      v44 = sub_1D7B49EA0();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v43, 0, 1, v44);
      sub_1D7AA76D4(&qword_1F01493F0, (uint64_t (*)(uint64_t))sub_1D7ABA240, MEMORY[0x1E0DEB8A8]);
      v45 = (void (*)(uint64_t *, _QWORD))sub_1D7B48F64();
      sub_1D7ABD8CC();
      v8 = v42;
      v15 = v41;
      sub_1D7B48FDC();
      v45(&v58, 0);
      v36 = v56;
      sub_1D7ABA2FC(v37);
      sub_1D7ABA2FC(v38);
      v35 += v52;
      if (!--v34)
      {
        v51(v41, 1, 1, v36);
        break;
      }
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v15, 1, 1, v56);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, char *, uint64_t))(v48 + 32))(v50, v57, v49);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t String.smallCaps(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t KeyPath;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, _QWORD);
  _QWORD v29[2];
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char v37[40];

  sub_1D7AAE0AC(0, &qword_1F014D778, (void (*)(uint64_t))MEMORY[0x1E0CDDC68]);
  MEMORY[0x1E0C80A78](v4);
  v34 = (char *)v29 - v5;
  sub_1D7ABA240();
  v36 = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v33 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v32 = (char *)v29 - v10;
  sub_1D7AAE0AC(0, &qword_1F01493E8, v11);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v29 - v13;
  v15 = sub_1D7B48FD0();
  MEMORY[0x1E0C80A78](v15);
  swift_bridgeObjectRetain();
  sub_1D7B48FC4();
  sub_1D7B48F58();
  v35 = a2;
  v16 = sub_1D7ABCD30(a1, a2);
  v17 = *(_QWORD *)(v16 + 16);
  v29[1] = v16;
  if (v17)
  {
    v18 = v16 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v31 = *(_QWORD *)(v7 + 72);
    v19 = v36;
    v21 = (uint64_t)v32;
    v20 = (uint64_t)v33;
    while (1)
    {
      sub_1D7ABA38C(v18, (uint64_t)v14);
      v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
      v22(v14, 0, 1, v19);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v14, 1, v19) == 1)
        break;
      v30 = v22;
      sub_1D7ABA2B8((uint64_t)v14, v21);
      sub_1D7ABA38C(v21, v20);
      KeyPath = swift_getKeyPath();
      v29[-2] = MEMORY[0x1E0C80A78](KeyPath);
      swift_getKeyPath();
      v24 = v7;
      v25 = v34;
      sub_1D7B49E94();
      v26 = sub_1D7B49EA0();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 0, 1, v26);
      sub_1D7AA76D4(&qword_1F01493F0, (uint64_t (*)(uint64_t))sub_1D7ABA240, MEMORY[0x1E0DEB8A8]);
      v27 = (void (*)(char *, _QWORD))sub_1D7B48F64();
      sub_1D7ABD8CC();
      v7 = v24;
      sub_1D7B48FDC();
      v27(v37, 0);
      v19 = v36;
      sub_1D7ABA2FC(v20);
      sub_1D7ABA2FC(v21);
      v18 += v31;
      if (!--v17)
      {
        v30(v14, 1, 1, v19);
        return swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v14, 1, 1, v36);
  }
  return swift_bridgeObjectRelease();
}

unint64_t sub_1D7ABCCEC()
{
  unint64_t result;

  result = qword_1F014DB20;
  if (!qword_1F014DB20)
  {
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1F014DB20);
  }
  return result;
}

uint64_t sub_1D7ABCD30(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a2;
  sub_1D7AAE0AC(0, &qword_1F014D7B0, (void (*)(uint64_t))MEMORY[0x1E0CB0E38]);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v26 - v4;
  v6 = sub_1D7B48F4C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x1E0DEE9D8];
  v10 = *(_QWORD *)(a1 + 56);
  v27 = a1 + 56;
  v11 = 1 << *(_BYTE *)(a1 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v28 = (unint64_t)(v11 + 63) >> 6;
  v30 = a1;
  result = swift_bridgeObjectRetain();
  v15 = 0;
  while (1)
  {
    if (v13)
    {
      v16 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v17 = v16 | (v15 << 6);
      goto LABEL_5;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v23 >= v28)
      goto LABEL_23;
    v24 = *(_QWORD *)(v27 + 8 * v23);
    ++v15;
    if (!v24)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v28)
        goto LABEL_23;
      v24 = *(_QWORD *)(v27 + 8 * v15);
      if (!v24)
      {
        v15 = v23 + 2;
        if (v23 + 2 >= v28)
          goto LABEL_23;
        v24 = *(_QWORD *)(v27 + 8 * v15);
        if (!v24)
        {
          v15 = v23 + 3;
          if (v23 + 3 >= v28)
            goto LABEL_23;
          v24 = *(_QWORD *)(v27 + 8 * v15);
          if (!v24)
            break;
        }
      }
    }
LABEL_22:
    v13 = (v24 - 1) & v24;
    v17 = __clz(__rbit64(v24)) + (v15 << 6);
LABEL_5:
    v18 = (uint64_t *)(*(_QWORD *)(v30 + 48) + 16 * v17);
    v20 = *v18;
    v19 = v18[1];
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v29, v6);
    v21 = sub_1D7B4921C();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v5, 1, 1, v21);
    swift_bridgeObjectRetain();
    v22 = sub_1D7ABBF58(v20, v19, 0, (uint64_t)v5);
    sub_1D7AB1148((uint64_t)v5, &qword_1F014D7B0, (void (*)(uint64_t))MEMORY[0x1E0CB0E38]);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    swift_bridgeObjectRelease();
    result = sub_1D7AE7DFC(v22);
  }
  v25 = v23 + 4;
  if (v25 >= v28)
  {
LABEL_23:
    swift_release();
    return v31;
  }
  v24 = *(_QWORD *)(v27 + 8 * v25);
  if (v24)
  {
    v15 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    v15 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v15 >= v28)
      goto LABEL_23;
    v24 = *(_QWORD *)(v27 + 8 * v15);
    ++v25;
    if (v24)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1D7ABCFF8()
{
  sub_1D7ABDB28();
  return sub_1D7B4A320() & 1;
}

id String.designatorSmallCaps(dateFormatter:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t inited;
  id result;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t KeyPath;
  uint64_t v46;
  void (*v47)(char *, _QWORD);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char v58[40];

  v53 = a2;
  sub_1D7AAE0AC(0, &qword_1F014D778, (void (*)(uint64_t))MEMORY[0x1E0CDDC68]);
  MEMORY[0x1E0C80A78](v7);
  v54 = (char *)&v48 - v8;
  sub_1D7ABA240();
  v10 = *(_QWORD *)(v9 - 8);
  v55 = v9;
  v56 = v10;
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v48 - v14;
  sub_1D7AAE0AC(0, &qword_1F01493E8, v16);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v48 - v18;
  v20 = sub_1D7B48FD0();
  MEMORY[0x1E0C80A78](v20);
  v21 = sub_1D7B48F4C();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v57 = (char *)&v48 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = a1;
  if ((sub_1D7ABD540() & 1) == 0)
  {
    swift_bridgeObjectRetain();
    sub_1D7B48FC4();
    return (id)sub_1D7B48F58();
  }
  v25 = v53;
  v52 = a4;
  if (((unint64_t)objc_msgSend(v24, sel_formattingContext) & 0xFFFFFFFFFFFFFFFELL) != 4)
    return (id)String.lettersSmallCaps()(v25, a3, v52);
  v51 = a3;
  sub_1D7ABD9A4();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7B82CE0;
  result = objc_msgSend(v24, sel_AMSymbol);
  if (!result)
  {
    __break(1u);
    goto LABEL_16;
  }
  v28 = result;
  v49 = v22;
  v50 = v21;
  v29 = sub_1D7B4A3BC();
  v31 = v30;

  *(_QWORD *)(inited + 32) = v29;
  *(_QWORD *)(inited + 40) = v31;
  result = objc_msgSend(v24, sel_PMSymbol);
  if (!result)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  v32 = result;
  v33 = sub_1D7B4A3BC();
  v35 = v34;

  *(_QWORD *)(inited + 48) = v33;
  *(_QWORD *)(inited + 56) = v35;
  v36 = sub_1D7ABD81C(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_bridgeObjectRetain();
  sub_1D7B48FC4();
  v37 = (uint64_t)v57;
  sub_1D7B48F58();
  v51 = v36;
  v38 = sub_1D7ABCD30(v36, v37);
  v39 = *(_QWORD *)(v38 + 16);
  v48 = v38;
  if (v39)
  {
    v40 = v55;
    v41 = v38 + ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80));
    v53 = *(_QWORD *)(v56 + 72);
    v42 = v54;
    while (1)
    {
      sub_1D7ABA38C(v41, (uint64_t)v19);
      v43 = v56;
      v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v56 + 56);
      v44(v19, 0, 1, v40);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v19, 1, v40) == 1)
        break;
      sub_1D7ABA2B8((uint64_t)v19, (uint64_t)v15);
      sub_1D7ABA38C((uint64_t)v15, (uint64_t)v13);
      KeyPath = swift_getKeyPath();
      *(&v48 - 2) = MEMORY[0x1E0C80A78](KeyPath);
      swift_getKeyPath();
      sub_1D7B49E94();
      v46 = sub_1D7B49EA0();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v42, 0, 1, v46);
      sub_1D7AA76D4(&qword_1F01493F0, (uint64_t (*)(uint64_t))sub_1D7ABA240, MEMORY[0x1E0DEB8A8]);
      v47 = (void (*)(char *, _QWORD))sub_1D7B48F64();
      sub_1D7ABD8CC();
      sub_1D7B48FDC();
      v40 = v55;
      v47(v58, 0);
      sub_1D7ABA2FC((uint64_t)v13);
      sub_1D7ABA2FC((uint64_t)v15);
      v41 += v53;
      if (!--v39)
        goto LABEL_13;
    }
  }
  else
  {
    v40 = v55;
    v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v56 + 56);
LABEL_13:
    v44(v19, 1, 1, v40);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, char *, uint64_t))(v49 + 32))(v52, v57, v50);
  return (id)swift_bridgeObjectRelease();
}

uint64_t sub_1D7ABD540()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v1 = objc_msgSend(v0, sel_AMSymbol);
  if (!v1)
    goto LABEL_14;
  v2 = v1;
  v3 = sub_1D7B4A3BC();
  v5 = v4;

  v6 = objc_msgSend(v0, sel_PMSymbol);
  if (!v6)
  {
LABEL_13:
    swift_bridgeObjectRelease();
LABEL_14:
    v18 = 0;
    return v18 & 1;
  }
  v7 = v6;
  v8 = sub_1D7B4A3BC();
  v10 = v9;

  sub_1D7ABCCEC();
  v11 = sub_1D7B4A74C();
  v13 = v12;
  v14 = sub_1D7B4A74C();
  v16 = v15;
  if (v11 != v3 || v13 != v5)
  {
    v17 = sub_1D7B4A938();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v17 & 1) != 0)
      goto LABEL_8;
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  swift_bridgeObjectRelease_n();
LABEL_8:
  if (v14 == v8 && v16 == v10)
  {
    swift_bridgeObjectRelease_n();
    v18 = 1;
  }
  else
  {
    v18 = sub_1D7B4A938();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v18 & 1;
}

uint64_t NSDateFormatter.AttributedStringFormatOptions.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t NSDateFormatter.AttributedStringFormatOptions.init(rawValue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static NSDateFormatter.AttributedStringFormatOptions.designatorSmallCaps.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t NSDateFormatter.attributedString(from:options:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = v2;
  v6 = sub_1D7B48FD0();
  MEMORY[0x1E0C80A78](v6);
  v7 = *a1;
  v8 = (void *)sub_1D7B49150();
  v9 = objc_msgSend(v3, sel_stringFromDate_, v8);

  v10 = sub_1D7B4A3BC();
  v12 = v11;

  if ((v7 & 1) != 0)
  {
    String.designatorSmallCaps(dateFormatter:)(v3, v10, v12, a2);
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1D7B48FC4();
    return sub_1D7B48F58();
  }
}

uint64_t sub_1D7ABD81C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_1D7B4A548();
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      sub_1D7AD1830(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

void sub_1D7ABD8B0()
{
  sub_1D7B48E98();
  __break(1u);
}

unint64_t sub_1D7ABD8CC()
{
  unint64_t result;

  result = qword_1F014D780;
  if (!qword_1F014D780)
  {
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CD8198], MEMORY[0x1E0CD81A8]);
    atomic_store(result, (unint64_t *)&qword_1F014D780);
  }
  return result;
}

void sub_1D7ABD910()
{
  sub_1D7ABD8CC();
  sub_1D7B49018();
  __break(1u);
}

uint64_t sub_1D7ABD934()
{
  return 8;
}

uint64_t sub_1D7ABD940()
{
  return swift_release();
}

uint64_t sub_1D7ABD948(_QWORD *a1, _QWORD *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_1D7ABD958()
{
  sub_1D7ABDB28();
  return sub_1D7B4A2B4();
}

_QWORD *sub_1D7ABD998(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

void sub_1D7ABD9A4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F01492C0)
  {
    v0 = sub_1D7B4A920();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F01492C0);
  }
}

unint64_t sub_1D7ABD9FC()
{
  unint64_t result;

  result = qword_1F014D788;
  if (!qword_1F014D788)
  {
    result = MEMORY[0x1D829FF28](&protocol conformance descriptor for NSDateFormatter.AttributedStringFormatOptions, &type metadata for NSDateFormatter.AttributedStringFormatOptions);
    atomic_store(result, (unint64_t *)&qword_1F014D788);
  }
  return result;
}

unint64_t sub_1D7ABDA44()
{
  unint64_t result;

  result = qword_1F014D790;
  if (!qword_1F014D790)
  {
    result = MEMORY[0x1D829FF28](&protocol conformance descriptor for NSDateFormatter.AttributedStringFormatOptions, &type metadata for NSDateFormatter.AttributedStringFormatOptions);
    atomic_store(result, (unint64_t *)&qword_1F014D790);
  }
  return result;
}

unint64_t sub_1D7ABDA8C()
{
  unint64_t result;

  result = qword_1F014D798;
  if (!qword_1F014D798)
  {
    result = MEMORY[0x1D829FF28](&protocol conformance descriptor for NSDateFormatter.AttributedStringFormatOptions, &type metadata for NSDateFormatter.AttributedStringFormatOptions);
    atomic_store(result, (unint64_t *)&qword_1F014D798);
  }
  return result;
}

unint64_t sub_1D7ABDAD4()
{
  unint64_t result;

  result = qword_1F014D7A0;
  if (!qword_1F014D7A0)
  {
    result = MEMORY[0x1D829FF28](&protocol conformance descriptor for NSDateFormatter.AttributedStringFormatOptions, &type metadata for NSDateFormatter.AttributedStringFormatOptions);
    atomic_store(result, (unint64_t *)&qword_1F014D7A0);
  }
  return result;
}

ValueMetadata *type metadata accessor for NSDateFormatter.AttributedStringFormatOptions()
{
  return &type metadata for NSDateFormatter.AttributedStringFormatOptions;
}

void sub_1D7ABDB28()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014D7A8)
  {
    sub_1D7B48EA4();
    v0 = sub_1D7B4A9A4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014D7A8);
  }
}

void *HKAdaptiveModalPresented<>.makeDoneButtonForModalDismiss()(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;

  sub_1D7AAF6EC(0, &qword_1F014D7B8);
  v2 = (void *)sub_1D7B4A62C();
  sub_1D7AAF6EC(0, &qword_1F014D7C0);
  v3 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = v3;
  v7 = v4;
  v5 = (void *)sub_1D7B4A6EC();
  objc_msgSend(v2, sel_setPrimaryAction_, v5, 0, 0, 0, sub_1D7ABDD44, v7);

  return v2;
}

uint64_t sub_1D7ABDC9C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1D7ABDCC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = (void *)MEMORY[0x1D82A00A8](v2);
  if (v3)
  {
    v4 = v3;
    objc_msgSend(v3, sel_dismissViewControllerAnimated_completion_, 1, 0);

  }
}

uint64_t sub_1D7ABDD20()
{
  swift_release();
  return swift_deallocObject();
}

void sub_1D7ABDD44(uint64_t a1)
{
  uint64_t v1;

  sub_1D7ABDCC0(a1, *(_QWORD *)(v1 + 24));
}

void UIViewController._hk_showAdaptively(_:sender:animated:)(void *a1, uint64_t a2, char a3)
{
  void *v3;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v6 = objc_msgSend(v3, sel_traitCollection);
  v7 = objc_msgSend(v6, sel_horizontalSizeClass);

  if (v7 == (id)2)
  {
    v9 = objc_msgSend(objc_allocWithZone((Class)HKNavigationController), sel_initWithRootViewController_, a1);
    objc_msgSend(a1, sel_viewControllerWillEnterAdaptiveModal);
    v10 = v9;
    objc_msgSend(v10, sel_setModalPresentationStyle_, objc_msgSend(a1, sel_modalPresentationStyle));

    objc_msgSend(v3, sel_presentViewController_animated_completion_, v10, a3 & 1, 0);
LABEL_8:

    return;
  }
  if (v7 == (id)1)
  {
    v8 = objc_msgSend(v3, sel_navigationController);
    if (!v8)
      return;
    goto LABEL_7;
  }
  v8 = objc_msgSend(v3, sel_navigationController);
  if (v8)
  {
LABEL_7:
    v10 = v8;
    objc_msgSend(v8, sel_pushViewController_animated_, a1, 1);
    goto LABEL_8;
  }
}

uint64_t sub_1D7ABDEB0(void *a1, uint64_t a2, void *a3, uint64_t a4, char a5)
{
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  _OWORD v14[2];

  if (a4)
  {
    v8 = a3;
    v9 = a1;
    swift_unknownObjectRetain();
    sub_1D7B4A770();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v14, 0, sizeof(v14));
    v11 = a3;
    v12 = a1;
  }
  UIViewController._hk_showAdaptively(_:sender:animated:)(a3, v10, a5);

  return sub_1D7AB1290((uint64_t)v14);
}

uint64_t destroy for ListValueCell()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ListValueCell(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ListValueCell(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for ListValueCell(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ListValueCell(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ListValueCell(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ListValueCell()
{
  return &type metadata for ListValueCell;
}

uint64_t sub_1D7ABE0E8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1D7ABE0F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  char v16;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[328];
  _BYTE v23[320];
  _BYTE v24[327];
  _BYTE v25[336];

  v19 = a3;
  v20 = a4;
  v18[1] = a1;
  v18[2] = a2;
  v21 = a5;
  v5 = sub_1D7B49CC0();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7ABEAA4(0);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1D7B49D08();
  v15 = sub_1D7B49D20();
  v16 = sub_1D7B49D14();
  sub_1D7B49D14();
  if (sub_1D7B49D14() != v14)
    v16 = sub_1D7B49D14();
  sub_1D7B49D14();
  if (sub_1D7B49D14() != v15)
    v16 = sub_1D7B49D14();
  sub_1D7ABE2C8(v19, v23);
  memcpy(&v24[7], v23, 0x140uLL);
  v22[0] = v16;
  memcpy(&v22[1], v24, 0x147uLL);
  sub_1D7B49CA8();
  sub_1D7ABEB18();
  sub_1D7ABEF50();
  sub_1D7B49F24();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  memcpy(v25, v22, 0x148uLL);
  sub_1D7ABEF98((uint64_t)v25);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(v21, v13, v10);
}

uint64_t sub_1D7ABE2C8@<X0>(uint64_t a1@<X2>, void *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  _OWORD v7[8];
  uint64_t v8;
  _OWORD v9[9];
  char v10;
  _OWORD v11[8];
  uint64_t v12;
  _OWORD v13[9];
  char v14;
  __int128 v15;
  _BYTE v16[144];
  __int128 v17;
  _BYTE v18[144];
  _OWORD __src[20];
  _QWORD v20[2];
  char v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[31];
  _QWORD v30[2];
  char v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[31];

  v5 = sub_1D7B49B04();
  sub_1D7ABE5B0(a1, (uint64_t)v7);
  *(_OWORD *)((char *)&v9[5] + 7) = v7[5];
  *(_OWORD *)((char *)&v9[6] + 7) = v7[6];
  *(_OWORD *)((char *)&v9[7] + 7) = v7[7];
  *(_OWORD *)((char *)&v9[1] + 7) = v7[1];
  *(_OWORD *)((char *)&v9[2] + 7) = v7[2];
  *(_OWORD *)((char *)&v9[3] + 7) = v7[3];
  *(_OWORD *)((char *)&v9[4] + 7) = v7[4];
  v10 = 1;
  *(_QWORD *)((char *)&v9[8] + 7) = v8;
  *(_OWORD *)((char *)v9 + 7) = v7[0];
  v3 = sub_1D7B49B28();
  sub_1D7ABE824(a1, (uint64_t)v11);
  *(_QWORD *)((char *)&v13[8] + 7) = v12;
  *(_OWORD *)((char *)&v13[5] + 7) = v11[5];
  *(_OWORD *)((char *)&v13[6] + 7) = v11[6];
  *(_OWORD *)((char *)&v13[7] + 7) = v11[7];
  *(_OWORD *)((char *)&v13[1] + 7) = v11[1];
  *(_OWORD *)((char *)&v13[2] + 7) = v11[2];
  *(_OWORD *)((char *)&v13[3] + 7) = v11[3];
  *(_OWORD *)((char *)&v13[4] + 7) = v11[4];
  *(_OWORD *)((char *)v13 + 7) = v11[0];
  *(_OWORD *)&v16[81] = v9[5];
  *(_OWORD *)&v16[97] = v9[6];
  *(_OWORD *)&v16[113] = v9[7];
  *(_OWORD *)&v16[128] = *(_OWORD *)((char *)&v9[7] + 15);
  *(_OWORD *)&v16[17] = v9[1];
  *(_OWORD *)&v16[33] = v9[2];
  *(_OWORD *)&v16[49] = v9[3];
  *(_OWORD *)&v16[65] = v9[4];
  *(_OWORD *)&v16[1] = v9[0];
  *(_OWORD *)&v18[81] = v13[5];
  *(_OWORD *)&v18[97] = v13[6];
  *(_OWORD *)&v18[113] = v13[7];
  *(_OWORD *)&v18[128] = *(_OWORD *)((char *)&v13[7] + 15);
  *(_OWORD *)&v18[17] = v13[1];
  *(_OWORD *)&v18[33] = v13[2];
  *(_OWORD *)&v18[49] = v13[3];
  v14 = 1;
  v15 = (unint64_t)v5;
  v16[0] = 1;
  v17 = (unint64_t)v3;
  v18[0] = 1;
  *(_OWORD *)&v18[65] = v13[4];
  *(_OWORD *)&v18[1] = v13[0];
  __src[7] = *(_OWORD *)&v16[96];
  __src[8] = *(_OWORD *)&v16[112];
  __src[9] = *(_OWORD *)((char *)&v9[7] + 15);
  __src[2] = *(_OWORD *)&v16[16];
  __src[3] = *(_OWORD *)&v16[32];
  __src[4] = *(_OWORD *)&v16[48];
  __src[5] = *(_OWORD *)&v16[64];
  __src[6] = *(_OWORD *)&v16[80];
  __src[0] = (unint64_t)v5;
  __src[1] = *(_OWORD *)v16;
  __src[16] = *(_OWORD *)&v18[80];
  __src[17] = *(_OWORD *)&v18[96];
  __src[18] = *(_OWORD *)&v18[112];
  __src[19] = *(_OWORD *)((char *)&v13[7] + 15);
  __src[12] = *(_OWORD *)&v18[16];
  __src[13] = *(_OWORD *)&v18[32];
  __src[14] = *(_OWORD *)&v18[48];
  __src[15] = *(_OWORD *)&v18[64];
  __src[10] = (unint64_t)v3;
  __src[11] = *(_OWORD *)v18;
  memcpy(a2, __src, 0x140uLL);
  v27 = v13[5];
  v28 = v13[6];
  *(_OWORD *)v29 = v13[7];
  *(_OWORD *)&v29[15] = *(_OWORD *)((char *)&v13[7] + 15);
  v23 = v13[1];
  v24 = v13[2];
  v25 = v13[3];
  v26 = v13[4];
  v20[0] = v3;
  v20[1] = 0;
  v21 = 1;
  v22 = v13[0];
  sub_1D7ABF0D8((uint64_t)&v15);
  sub_1D7ABF0D8((uint64_t)&v17);
  sub_1D7ABF178((uint64_t)v20);
  v37 = v9[5];
  v38 = v9[6];
  *(_OWORD *)v39 = v9[7];
  *(_OWORD *)&v39[15] = *(_OWORD *)((char *)&v9[7] + 15);
  v33 = v9[1];
  v34 = v9[2];
  v35 = v9[3];
  v36 = v9[4];
  v30[0] = v5;
  v30[1] = 0;
  v31 = 1;
  v32 = v9[0];
  return sub_1D7ABF178((uint64_t)v30);
}

uint64_t sub_1D7ABE5B0@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[7];
  _BYTE v29[7];
  _BYTE v30[7];
  _BYTE v31[7];

  sub_1D7ABCCEC();
  swift_bridgeObjectRetain();
  v24 = sub_1D7B49EB8();
  v25 = v4;
  v26 = v5;
  v7 = v6 & 1;
  v27 = a1;
  swift_bridgeObjectRetain();
  v8 = sub_1D7B49EB8();
  v10 = v9;
  v12 = v11 & 1;
  sub_1D7B49FD8();
  v13 = sub_1D7B49E70();
  v15 = v14;
  v17 = v16;
  v23 = v18;
  swift_release();
  sub_1D7AACF84(v8, v10, v12);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath();
  v20 = swift_getKeyPath();
  v21 = swift_getKeyPath();
  *(_DWORD *)(a2 + 17) = v27;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)((char *)&v27 + 3);
  *(_DWORD *)(a2 + 41) = *(_DWORD *)v31;
  *(_DWORD *)(a2 + 44) = *(_DWORD *)&v31[3];
  *(_DWORD *)(a2 + 65) = *(_DWORD *)v30;
  *(_DWORD *)(a2 + 68) = *(_DWORD *)&v30[3];
  *(_DWORD *)(a2 + 97) = *(_DWORD *)v29;
  *(_DWORD *)(a2 + 100) = *(_DWORD *)&v29[3];
  *(_DWORD *)(a2 + 113) = *(_DWORD *)v28;
  *(_DWORD *)(a2 + 116) = *(_DWORD *)&v28[3];
  *(_QWORD *)a2 = v24;
  *(_QWORD *)(a2 + 8) = v26;
  *(_BYTE *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 24) = v25;
  *(_QWORD *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_QWORD *)(a2 + 48) = v13;
  *(_QWORD *)(a2 + 56) = v15;
  *(_BYTE *)(a2 + 64) = v17 & 1;
  *(_QWORD *)(a2 + 72) = v23;
  *(_QWORD *)(a2 + 80) = KeyPath;
  *(_QWORD *)(a2 + 88) = 1;
  *(_BYTE *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = v20;
  *(_BYTE *)(a2 + 112) = 1;
  *(_QWORD *)(a2 + 120) = v21;
  *(_QWORD *)(a2 + 128) = 0x3FC999999999999ALL;
  sub_1D7ABF0C8(v24, v26, v7);
  swift_bridgeObjectRetain();
  sub_1D7ABF0C8(v13, v15, v17 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1D7AACF84(v13, v15, v17 & 1);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1D7AACF84(v24, v26, v7);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7ABE824@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[7];
  _BYTE v29[7];
  _BYTE v30[7];
  _BYTE v31[7];

  sub_1D7ABCCEC();
  swift_bridgeObjectRetain();
  v24 = sub_1D7B49EB8();
  v25 = v4;
  v26 = v5;
  v7 = v6 & 1;
  v27 = a1;
  swift_bridgeObjectRetain();
  v8 = sub_1D7B49EB8();
  v10 = v9;
  v12 = v11 & 1;
  sub_1D7B49FD8();
  v13 = sub_1D7B49E70();
  v15 = v14;
  v17 = v16;
  v23 = v18;
  swift_release();
  sub_1D7AACF84(v8, v10, v12);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath();
  v20 = swift_getKeyPath();
  v21 = swift_getKeyPath();
  *(_DWORD *)(a2 + 17) = v27;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)((char *)&v27 + 3);
  *(_DWORD *)(a2 + 41) = *(_DWORD *)v31;
  *(_DWORD *)(a2 + 44) = *(_DWORD *)&v31[3];
  *(_DWORD *)(a2 + 65) = *(_DWORD *)v30;
  *(_DWORD *)(a2 + 68) = *(_DWORD *)&v30[3];
  *(_DWORD *)(a2 + 97) = *(_DWORD *)v29;
  *(_DWORD *)(a2 + 100) = *(_DWORD *)&v29[3];
  *(_DWORD *)(a2 + 113) = *(_DWORD *)v28;
  *(_DWORD *)(a2 + 116) = *(_DWORD *)&v28[3];
  *(_QWORD *)a2 = v24;
  *(_QWORD *)(a2 + 8) = v26;
  *(_BYTE *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 24) = v25;
  *(_QWORD *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_QWORD *)(a2 + 48) = v13;
  *(_QWORD *)(a2 + 56) = v15;
  *(_BYTE *)(a2 + 64) = v17 & 1;
  *(_QWORD *)(a2 + 72) = v23;
  *(_QWORD *)(a2 + 80) = KeyPath;
  *(_QWORD *)(a2 + 88) = 0;
  *(_BYTE *)(a2 + 96) = 1;
  *(_QWORD *)(a2 + 104) = v20;
  *(_BYTE *)(a2 + 112) = 1;
  *(_QWORD *)(a2 + 120) = v21;
  *(_QWORD *)(a2 + 128) = 0x3FC999999999999ALL;
  sub_1D7ABF0C8(v24, v26, v7);
  swift_bridgeObjectRetain();
  sub_1D7ABF0C8(v13, v15, v17 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1D7AACF84(v13, v15, v17 & 1);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1D7AACF84(v24, v26, v7);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7ABEA98@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1D7ABE0F8(*v1, v1[1], v1[2], v1[3], a1);
}

void sub_1D7ABEAA4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_1F014D7C8)
  {
    sub_1D7ABEB18();
    v5[0] = v2;
    v5[1] = sub_1D7ABEF50();
    v3 = MEMORY[0x1D829FEEC](a1, v5, MEMORY[0x1E0CDEA98], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1F014D7C8);
  }
}

void sub_1D7ABEB18()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014D7D0)
  {
    sub_1D7ABEC34(255, &qword_1F014D7D8, (void (*)(uint64_t))sub_1D7ABEBA8);
    sub_1D7ABEF10(&qword_1F014D830, &qword_1F014D7D8, (void (*)(uint64_t))sub_1D7ABEBA8);
    v0 = sub_1D7B498D0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014D7D0);
  }
}

void sub_1D7ABEBA8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1F014D7E0)
  {
    sub_1D7ABEE7C(255, &qword_1F014D7E8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDFAF0]);
    sub_1D7ABEE7C(255, &qword_1F014D828, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CDFCA0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1F014D7E0);
  }
}

void sub_1D7ABEC34(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_1D7B4A134();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_1D7ABEC80()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_1F014D7F8)
  {
    sub_1D7ABED30(255, &qword_1F014D800, sub_1D7ABED0C, &qword_1ED0AC9F8, MEMORY[0x1E0DEF040]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1F014D7F8);
  }
}

void sub_1D7ABED0C(uint64_t a1)
{
  sub_1D7ABED30(a1, &qword_1F014D808, (void (*)(uint64_t))sub_1D7ABEDB4, &qword_1F014D818, MEMORY[0x1E0DEAFA0]);
}

void sub_1D7ABED30(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    a3(255);
    sub_1D7AA7E70(255, a4, a5, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CDCF68]);
    v8 = sub_1D7B49978();
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_1D7ABEDB4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014D810)
  {
    sub_1D7ABEE10();
    v0 = sub_1D7B49978();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014D810);
  }
}

void sub_1D7ABEE10()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED0ACA50)
  {
    sub_1D7AA7E70(255, &qword_1ED0ACB08, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = sub_1D7B49CE4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED0ACA50);
  }
}

void sub_1D7ABEE7C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_1D7ABEC34(255, &qword_1F014D7F0, (void (*)(uint64_t))sub_1D7ABEC80);
    v7 = v6;
    v8 = sub_1D7ABEF10(&qword_1F014D820, &qword_1F014D7F0, (void (*)(uint64_t))sub_1D7ABEC80);
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_1D7ABEF10(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_1D7ABEC34(255, a2, a3);
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CE0680], v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1D7ABEF50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F014D838;
  if (!qword_1F014D838)
  {
    sub_1D7ABEB18();
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CD8CC8], v1);
    atomic_store(result, (unint64_t *)&qword_1F014D838);
  }
  return result;
}

uint64_t sub_1D7ABEF98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_BYTE *)(a1 + 96);
  v5 = *(_QWORD *)(a1 + 192);
  v7 = *(_BYTE *)(a1 + 208);
  v8 = *(_QWORD *)(a1 + 200);
  v10 = *(_QWORD *)(a1 + 248);
  v11 = *(_QWORD *)(a1 + 240);
  v9 = *(_BYTE *)(a1 + 256);
  sub_1D7AACF84(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
  swift_bridgeObjectRelease();
  sub_1D7AACF84(v2, v3, v4);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1D7AACF84(v5, v8, v7);
  swift_bridgeObjectRelease();
  sub_1D7AACF84(v11, v10, v9);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1D7ABF0C8(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain();
  else
    return swift_bridgeObjectRetain();
}

uint64_t sub_1D7ABF0D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_BYTE *)(a1 + 88);
  sub_1D7ABF0C8(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain();
  sub_1D7ABF0C8(v2, v3, v4);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1D7ABF178(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_BYTE *)(a1 + 88);
  sub_1D7AACF84(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRelease();
  sub_1D7AACF84(v2, v3, v4);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1D7ABF230()
{
  sub_1D7ABEB18();
  sub_1D7ABEF50();
  return swift_getOpaqueTypeConformance2();
}

char *sub_1D7ABF278(char *a1, char **a2, uint64_t a3)
{
  int v4;
  char *v5;
  char **v8;
  __int128 v9;
  uint64_t v10;
  void (*v11)(char *, char **, uint64_t);
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    v8 = a2 + 1;
    v9 = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 2) = v9;
    v10 = v9;
    v11 = **(void (***)(char *, char **, uint64_t))(v9 - 8);
    v12 = v5;
    v11(a1 + 8, v8, v10);
    v13 = *(int *)(a3 + 24);
    v14 = &a1[v13];
    v15 = (uint64_t)a2 + v13;
    sub_1D7ABF340();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return a1;
}

void sub_1D7ABF340()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014D840)
  {
    sub_1D7ABF398();
    v0 = sub_1D7B498C4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014D840);
  }
}

unint64_t sub_1D7ABF398()
{
  unint64_t result;

  result = qword_1F014D848;
  if (!qword_1F014D848)
  {
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0DEB078], MEMORY[0x1E0DEB070]);
    atomic_store(result, (unint64_t *)&qword_1F014D848);
  }
  return result;
}

uint64_t sub_1D7ABF3DC(id *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v4 = (uint64_t)(a1 + 1);

  __swift_destroy_boxed_opaque_existential_0(v4);
  v5 = (char *)a1 + *(int *)(a2 + 24);
  sub_1D7ABF340();
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t sub_1D7ABF438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v7 = a1 + 8;
  v8 = a2 + 8;
  v9 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v9;
  v10 = v9;
  v11 = **(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8);
  v12 = v6;
  v11(v7, v8, v10);
  v13 = *(int *)(a3 + 24);
  v14 = a1 + v13;
  v15 = a2 + v13;
  sub_1D7ABF340();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  return a1;
}

void **sub_1D7ABF4DC(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t *v7;
  void *v8;
  uint64_t *v9;
  id v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v7 = (uint64_t *)(a2 + 1);
  v6 = *a2;
  v8 = *a1;
  *a1 = *a2;
  v9 = (uint64_t *)(a1 + 1);
  v10 = v6;

  __swift_assign_boxed_opaque_existential_1(v9, v7);
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  sub_1D7ABF340();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t sub_1D7ABF6D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  sub_1D7ABF340();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_1D7ABF744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  __swift_destroy_boxed_opaque_existential_0(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  sub_1D7ABF340();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_1D7ABF7D0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D7ABF7DC(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_1D7ABF340();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t sub_1D7ABF858()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1D7ABF864(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    sub_1D7ABF340();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ClinicalAccountBrandLogoView()
{
  uint64_t result;

  result = qword_1F014D8A8;
  if (!qword_1F014D8A8)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1D7ABF914()
{
  unint64_t v0;

  sub_1D7ABF340();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_1D7ABF994()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1D7ABF9A4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
    return sub_1D7B4A440();
  else
    return 0;
}

uint64_t sub_1D7ABF9E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v37[40];
  _BYTE v38[40];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int16 v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  _QWORD v52[2];
  char v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  _OWORD v68[3];

  v3 = type metadata accessor for ClinicalAccountBrandLogoView();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v37[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v52[0] = sub_1D7B49B1C();
  v52[1] = 0;
  v53 = 1;
  sub_1D7AC0938(v1 + 8, (uint64_t)v68);
  sub_1D7AAD16C(v1, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalAccountBrandLogoView);
  v7 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v8 = swift_allocObject();
  sub_1D7AACCDC((uint64_t)v6, v8 + v7, (uint64_t (*)(_QWORD))type metadata accessor for ClinicalAccountBrandLogoView);
  *(_QWORD *)&v39 = swift_getKeyPath();
  BYTE8(v39) = 0;
  sub_1D7AC0938((uint64_t)v68, (uint64_t)v38);
  sub_1D7AC0938((uint64_t)v38, (uint64_t)v37);
  sub_1D7AC0AAC();
  sub_1D7B4A038();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v38);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v68);
  *(_QWORD *)&v40 = sub_1D7AC0A14;
  *((_QWORD *)&v40 + 1) = v8;
  v56 = v41;
  v57 = v42;
  v58 = v43;
  v54 = v39;
  v55 = v40;
  sub_1D7AAD16C((uint64_t)v52, (uint64_t)&v39, (uint64_t (*)(_QWORD))sub_1D7AC0B00);
  v44 = 0x3FF0000000000000;
  v45 = 0;
  sub_1D7AAD1B0((uint64_t)v52, (uint64_t (*)(_QWORD))sub_1D7AC0B00);
  sub_1D7ABF340();
  sub_1D7B498B8();
  sub_1D7B498B8();
  sub_1D7B4A11C();
  sub_1D7B498DC();
  sub_1D7AAD16C((uint64_t)&v39, (uint64_t)v52, (uint64_t (*)(_QWORD))sub_1D7AC1280);
  v59 = v68[0];
  v60 = v68[1];
  v61 = v68[2];
  sub_1D7AAD1B0((uint64_t)&v39, (uint64_t (*)(_QWORD))sub_1D7AC1280);
  v9 = sub_1D7B49D68();
  sub_1D7B49864();
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  sub_1D7AAD16C((uint64_t)v52, (uint64_t)&v39, (uint64_t (*)(_QWORD))sub_1D7AC12F8);
  v46 = v9;
  v47 = v11;
  v48 = v13;
  v49 = v15;
  v50 = v17;
  v51 = 0;
  sub_1D7AAD1B0((uint64_t)v52, (uint64_t (*)(_QWORD))sub_1D7AC12F8);
  v18 = sub_1D7B49D44();
  sub_1D7B49864();
  v20 = v19;
  v22 = v21;
  v24 = v23;
  v26 = v25;
  sub_1D7AAD16C((uint64_t)&v39, (uint64_t)v52, (uint64_t (*)(_QWORD))sub_1D7AC1314);
  v62 = v18;
  v63 = v20;
  v64 = v22;
  v65 = v24;
  v66 = v26;
  v67 = 0;
  sub_1D7AAD1B0((uint64_t)&v39, (uint64_t (*)(_QWORD))sub_1D7AC1314);
  v27 = sub_1D7B49D5C();
  sub_1D7B49864();
  v29 = v28;
  v31 = v30;
  v33 = v32;
  v35 = v34;
  sub_1D7AAD16C((uint64_t)v52, a1, (uint64_t (*)(_QWORD))sub_1D7AC1330);
  *(_BYTE *)(a1 + 264) = v27;
  *(_QWORD *)(a1 + 272) = v29;
  *(_QWORD *)(a1 + 280) = v31;
  *(_QWORD *)(a1 + 288) = v33;
  *(_QWORD *)(a1 + 296) = v35;
  *(_BYTE *)(a1 + 304) = 0;
  return sub_1D7AAD1B0((uint64_t)v52, (uint64_t (*)(_QWORD))sub_1D7AC1330);
}

uint64_t sub_1D7ABFD28@<X0>(id *a1@<X0>, id *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t (*v48)(void);
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(void);
  uint64_t v57;
  char *v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  unsigned int v79;
  int v80;
  uint64_t v81;
  id *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;

  v82 = a2;
  v89 = a3;
  sub_1D7AC0E40();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_1D7B49990();
  MEMORY[0x1E0C80A78](v87);
  v8 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AC0D34();
  v85 = v9;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AC0CBC();
  v84 = v12;
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1D7B4A008();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AC0C1C(0);
  v83 = v19;
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AC0BF8(0);
  v90 = v22;
  MEMORY[0x1E0C80A78](v22);
  v86 = (char *)&v76 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AAD020(0, &qword_1F014D9F0, v24, (uint64_t (*)(uint64_t))sub_1D7AC0EE8, MEMORY[0x1E0CDB848]);
  v88 = v25;
  MEMORY[0x1E0C80A78](v25);
  v27 = (char *)&v76 - v26;
  if ((unint64_t)a1 >> 62)
  {
    v69 = sub_1D7B4A11C();
    v71 = v70;
    sub_1D7AC0444(v82, (uint64_t)&v91);
    *(_QWORD *)v27 = v69;
    *((_QWORD *)v27 + 1) = v71;
    v72 = v98;
    *((_OWORD *)v27 + 7) = v97;
    *((_OWORD *)v27 + 8) = v72;
    *((_OWORD *)v27 + 9) = v99;
    *((_QWORD *)v27 + 20) = v100;
    v73 = v94;
    *((_OWORD *)v27 + 3) = v93;
    *((_OWORD *)v27 + 4) = v73;
    v74 = v96;
    *((_OWORD *)v27 + 5) = v95;
    *((_OWORD *)v27 + 6) = v74;
    v75 = v92;
    *((_OWORD *)v27 + 1) = v91;
    *((_OWORD *)v27 + 2) = v75;
    swift_storeEnumTagMultiPayload();
    sub_1D7AC0EE8();
    sub_1D7AC11B4(&qword_1F014D998, (uint64_t (*)(uint64_t))sub_1D7AC0BF8, sub_1D7AC1190, sub_1D7AC1264);
    sub_1D7AA76D4(&qword_1F014D9C0, (uint64_t (*)(uint64_t))sub_1D7AC0EE8, MEMORY[0x1E0CDFCF8]);
    return sub_1D7B49BF4();
  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, *MEMORY[0x1E0CDF6F8], v15);
    swift_retain();
    v81 = sub_1D7B4A020();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    v80 = sub_1D7B49D38();
    sub_1D7B49864();
    v29 = v28;
    v31 = v30;
    v33 = v32;
    v35 = v34;
    v77 = sub_1D7B4A11C();
    v76 = v36;
    v37 = &v8[*(int *)(v87 + 20)];
    v79 = *MEMORY[0x1E0CDB0C0];
    v38 = v79;
    v39 = sub_1D7B49B10();
    v40 = *(_QWORD *)(v39 - 8);
    v82 = a1;
    v41 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 104);
    v41(v37, v38, v39);
    __asm { FMOV            V0.2D, #3.0 }
    v78 = _Q0;
    *(_OWORD *)v8 = _Q0;
    v47 = sub_1D7B49FC0();
    v48 = MEMORY[0x1E0CDA088];
    sub_1D7AAD16C((uint64_t)v8, (uint64_t)v11, (uint64_t (*)(_QWORD))MEMORY[0x1E0CDA088]);
    v49 = v85;
    *(_QWORD *)&v11[*(int *)(v85 + 52)] = v47;
    *(_WORD *)&v11[*(int *)(v49 + 56)] = 256;
    sub_1D7AAD1B0((uint64_t)v8, (uint64_t (*)(_QWORD))v48);
    sub_1D7AACCDC((uint64_t)v11, (uint64_t)v14, (uint64_t (*)(_QWORD))sub_1D7AC0D34);
    v50 = (uint64_t *)&v14[*(int *)(v84 + 36)];
    v51 = v76;
    *v50 = v77;
    v50[1] = v51;
    sub_1D7AAD16C((uint64_t)v14, (uint64_t)&v21[*(int *)(v83 + 36)], (uint64_t (*)(_QWORD))sub_1D7AC0CBC);
    *(_QWORD *)v21 = v81;
    *((_QWORD *)v21 + 1) = 0;
    *((_WORD *)v21 + 8) = 1;
    v21[24] = v80;
    *((_QWORD *)v21 + 4) = v29;
    *((_QWORD *)v21 + 5) = v31;
    *((_QWORD *)v21 + 6) = v33;
    *((_QWORD *)v21 + 7) = v35;
    v21[64] = 0;
    sub_1D7AAD1B0((uint64_t)v14, (uint64_t (*)(_QWORD))sub_1D7AC0CBC);
    v85 = sub_1D7B4A11C();
    v53 = v52;
    v54 = (uint64_t)v86;
    v55 = (uint64_t)&v86[*(int *)(v90 + 36)];
    v41(&v8[*(int *)(v87 + 20)], v79, v39);
    *(_OWORD *)v8 = v78;
    LODWORD(v48) = sub_1D7B49C54();
    sub_1D7B49888();
    v56 = MEMORY[0x1E0CDA088];
    sub_1D7AAD16C((uint64_t)v8, (uint64_t)v6, (uint64_t (*)(_QWORD))MEMORY[0x1E0CDA088]);
    sub_1D7AC134C();
    v58 = &v6[*(int *)(v57 + 36)];
    v59 = v92;
    *(_OWORD *)v58 = v91;
    *((_OWORD *)v58 + 1) = v59;
    *((_QWORD *)v58 + 4) = v93;
    sub_1D7AC13C4();
    *(_DWORD *)&v6[*(int *)(v60 + 52)] = (_DWORD)v48;
    *(_WORD *)&v6[*(int *)(v60 + 56)] = 256;
    v61 = sub_1D7B4A11C();
    v63 = v62;
    sub_1D7AC1458();
    v65 = (uint64_t *)&v6[*(int *)(v64 + 36)];
    *v65 = v61;
    v65[1] = v63;
    sub_1D7AAD1B0((uint64_t)v8, (uint64_t (*)(_QWORD))v56);
    sub_1D7AACCDC((uint64_t)v6, v55, (uint64_t (*)(_QWORD))sub_1D7AC0E40);
    sub_1D7AC0DC8();
    v67 = (uint64_t *)(v55 + *(int *)(v66 + 36));
    *v67 = v85;
    v67[1] = v53;
    sub_1D7AACCDC((uint64_t)v21, v54, (uint64_t (*)(_QWORD))sub_1D7AC0C1C);
    sub_1D7AAD16C(v54, (uint64_t)v27, (uint64_t (*)(_QWORD))sub_1D7AC0BF8);
    swift_storeEnumTagMultiPayload();
    sub_1D7AC0EE8();
    sub_1D7AC11B4(&qword_1F014D998, (uint64_t (*)(uint64_t))sub_1D7AC0BF8, sub_1D7AC1190, sub_1D7AC1264);
    sub_1D7AA76D4(&qword_1F014D9C0, (uint64_t (*)(uint64_t))sub_1D7AC0EE8, MEMORY[0x1E0CDFCF8]);
    sub_1D7B49BF4();
    sub_1D7AC1524((unint64_t)v82);
    return sub_1D7AAD1B0(v54, (uint64_t (*)(_QWORD))sub_1D7AC0BF8);
  }
}

uint64_t sub_1D7AC0444@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  _OWORD v71[9];
  _OWORD v72[9];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;

  v67 = a1;
  v69 = a2;
  sub_1D7AA787C(0, &qword_1F014DA20, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDD560], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3);
  v70 = (char *)&v64 - v4;
  v5 = sub_1D7B49F9C();
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v8 + 104))(v7, *MEMORY[0x1E0CDF3E0]);
  v68 = MEMORY[0x1D829DF3C](v7, 0.650980392, 0.650980392, 0.650980392, 1.0);
  v9 = objc_msgSend(*a1, sel_title);
  v10 = sub_1D7B4A3BC();
  v12 = v11;

  *(_QWORD *)&v73 = v10;
  *((_QWORD *)&v73 + 1) = v12;
  sub_1D7ABCCEC();
  v13 = sub_1D7B4A740();
  v15 = v14;
  swift_bridgeObjectRelease();
  v16 = sub_1D7ABF9A4(v13, v15);
  v18 = v17;
  swift_bridgeObjectRelease();
  if (v18)
    v19 = v16;
  else
    v19 = 0;
  v20 = 0xE000000000000000;
  if (v18)
    v20 = v18;
  *(_QWORD *)&v73 = v19;
  *((_QWORD *)&v73 + 1) = v20;
  v21 = sub_1D7B49EB8();
  v23 = v22;
  v25 = v24 & 1;
  *(_QWORD *)&v73 = sub_1D7B49FC0();
  v26 = sub_1D7B49E7C();
  v28 = v27;
  v30 = v29 & 1;
  sub_1D7AACF84(v21, v23, v25);
  swift_release();
  swift_bridgeObjectRelease();
  type metadata accessor for ClinicalAccountBrandLogoView();
  sub_1D7ABF340();
  sub_1D7B498B8();
  v31 = sub_1D7B49DB0();
  v32 = *(_QWORD *)(v31 - 8);
  v65 = v31;
  v66 = v32;
  v67 = *(id **)(v32 + 56);
  v33 = (uint64_t)v70;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v67)(v70, 1, 1, v31);
  sub_1D7B49DD4();
  sub_1D7AC1544(v33);
  v34 = sub_1D7B49E88();
  v36 = v35;
  v38 = v37;
  swift_release();
  v39 = v38 & 1;
  sub_1D7AACF84(v26, v28, v30);
  swift_bridgeObjectRelease();
  sub_1D7B49DC8();
  v40 = sub_1D7B49E64();
  v42 = v41;
  LOBYTE(v26) = v43 & 1;
  sub_1D7AACF84(v34, v36, v39);
  swift_bridgeObjectRelease();
  v44 = v65;
  v45 = (uint64_t)v70;
  (*(void (**)(char *, _QWORD, uint64_t))(v66 + 104))(v70, *MEMORY[0x1E0CDD550], v65);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v67)(v45, 0, 1, v44);
  v46 = sub_1D7B49E58();
  v48 = v47;
  v50 = v49;
  LOBYTE(v36) = v51 & 1;
  sub_1D7AACF84(v40, v42, v26);
  swift_bridgeObjectRelease();
  sub_1D7AC1544(v45);
  v52 = sub_1D7B4A11C();
  sub_1D7AFE81C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v73, 0.0, 1, 0.0, 1, v52, v53, v46, v48, v36, v50);
  sub_1D7AACF84(v46, v48, v36);
  swift_bridgeObjectRelease();
  v54 = v77;
  v72[5] = v78;
  v72[6] = v79;
  v55 = v79;
  v56 = v80;
  v72[7] = v80;
  v72[8] = v81;
  v57 = v74;
  v58 = v73;
  v72[1] = v74;
  v72[2] = v75;
  v59 = v75;
  v60 = v76;
  v72[3] = v76;
  v72[4] = v77;
  v71[6] = v79;
  v71[7] = v80;
  v71[8] = v81;
  v72[0] = v73;
  v71[2] = v75;
  v71[3] = v76;
  v71[4] = v77;
  v71[5] = v78;
  v71[0] = v73;
  v71[1] = v74;
  v62 = v68;
  v61 = v69;
  *(_OWORD *)(v69 + 88) = v78;
  *(_OWORD *)(v61 + 104) = v55;
  *(_OWORD *)(v61 + 120) = v56;
  *(_OWORD *)(v61 + 136) = v81;
  *(_OWORD *)(v61 + 24) = v57;
  *(_OWORD *)(v61 + 40) = v59;
  *(_OWORD *)(v61 + 56) = v60;
  *(_OWORD *)(v61 + 72) = v54;
  *(_OWORD *)(v61 + 8) = v58;
  *(_QWORD *)v61 = v62;
  swift_retain();
  sub_1D7AC1598((uint64_t)v71);
  sub_1D7AC15D4((uint64_t)v72);
  return swift_release();
}

uint64_t sub_1D7AC0938(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1D7AC097C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id *v3;
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for ClinicalAccountBrandLogoView();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (id *)(v0 + ((v2 + 16) & ~v2));

  __swift_destroy_boxed_opaque_existential_0((uint64_t)(v3 + 1));
  v4 = (char *)v3 + *(int *)(v1 + 24);
  sub_1D7ABF340();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_deallocObject();
}

uint64_t sub_1D7AC0A14@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ClinicalAccountBrandLogoView() - 8) + 80);
  return sub_1D7ABFD28(a1, (id *)(v2 + ((v5 + 16) & ~v5)), a2);
}

uint64_t sub_1D7AC0A60@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1D7B499C0();
  *a1 = v3;
  return result;
}

uint64_t sub_1D7AC0A88()
{
  return sub_1D7B499CC();
}

unint64_t sub_1D7AC0AAC()
{
  unint64_t result;

  result = qword_1F014D8E8;
  if (!qword_1F014D8E8)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1F014D8E8);
  }
  return result;
}

void sub_1D7AC0B00()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014D8F0)
  {
    sub_1D7AC0B78(255);
    sub_1D7AA76D4(&qword_1F014D9C8, (uint64_t (*)(uint64_t))sub_1D7AC0B78, (uint64_t)&unk_1D7B84970);
    v0 = sub_1D7B4A0B0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014D8F0);
  }
}

void sub_1D7AC0B78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!qword_1F014D8F8)
  {
    sub_1D7AAD020(255, &qword_1F014D900, (uint64_t (*)(uint64_t))sub_1D7AC0BF8, (uint64_t (*)(uint64_t))sub_1D7AC0EE8, MEMORY[0x1E0CDB880]);
    v3 = v2;
    v4 = sub_1D7AC10C8();
    v6 = type metadata accessor for LoadableImage(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_1F014D8F8);
  }
}

void sub_1D7AC0BF8(uint64_t a1)
{
  sub_1D7AAD020(a1, &qword_1F014D908, (uint64_t (*)(uint64_t))sub_1D7AC0C1C, (uint64_t (*)(uint64_t))sub_1D7AC0DC8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
}

void sub_1D7AC0C1C(uint64_t a1)
{
  sub_1D7AAD020(a1, &qword_1F014D910, (uint64_t (*)(uint64_t))sub_1D7AC0C40, (uint64_t (*)(uint64_t))sub_1D7AC0CBC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
}

void sub_1D7AC0C40()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014D918)
  {
    sub_1D7AC14DC(255, (unint64_t *)&qword_1ED0AC948, MEMORY[0x1E0CDF840], MEMORY[0x1E0CDB178], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    v0 = sub_1D7B49978();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014D918);
  }
}

void sub_1D7AC0CBC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014D920)
  {
    sub_1D7AC0D34();
    sub_1D7AA76D4(&qword_1F014D938, (uint64_t (*)(uint64_t))sub_1D7AC0D34, MEMORY[0x1E0CD8668]);
    v0 = sub_1D7B49BE8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014D920);
  }
}

void sub_1D7AC0D34()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014D928)
  {
    sub_1D7B49990();
    sub_1D7AA76D4(&qword_1F014D930, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDA088], MEMORY[0x1E0CDA078]);
    v0 = sub_1D7B4987C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014D928);
  }
}

void sub_1D7AC0DC8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014D940)
  {
    sub_1D7AC0E40();
    sub_1D7AA76D4(&qword_1F014D950, (uint64_t (*)(uint64_t))sub_1D7AC0E40, MEMORY[0x1E0CD9D18]);
    v0 = sub_1D7B499A8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014D940);
  }
}

void sub_1D7AC0E40()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014D948)
  {
    sub_1D7B49990();
    sub_1D7AA76D4(&qword_1F014D930, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDA088], MEMORY[0x1E0CDA078]);
    v0 = sub_1D7B49984();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014D948);
  }
}

void sub_1D7AC0EE8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014D958)
  {
    sub_1D7AA787C(255, &qword_1F014D960, (uint64_t (*)(uint64_t))sub_1D7AC0F60, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    sub_1D7AC1068();
    v0 = sub_1D7B4A0BC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014D958);
  }
}

void sub_1D7AC0F60()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1F014D968)
  {
    sub_1D7AC0FEC();
    sub_1D7AC14DC(255, (unint64_t *)&qword_1F014D980, MEMORY[0x1E0CDDD78], MEMORY[0x1E0CDA240], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1F014D968);
  }
}

void sub_1D7AC0FEC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014D970)
  {
    sub_1D7AC14DC(255, &qword_1F014D978, MEMORY[0x1E0CDF5D0], MEMORY[0x1E0CDF598], MEMORY[0x1E0CDC700]);
    v0 = sub_1D7B49978();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014D970);
  }
}

unint64_t sub_1D7AC1068()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F014D988;
  if (!qword_1F014D988)
  {
    sub_1D7AA787C(255, &qword_1F014D960, (uint64_t (*)(uint64_t))sub_1D7AC0F60, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CE0680], v1);
    atomic_store(result, (unint64_t *)&qword_1F014D988);
  }
  return result;
}

unint64_t sub_1D7AC10C8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1F014D990;
  if (!qword_1F014D990)
  {
    sub_1D7AAD020(255, &qword_1F014D900, (uint64_t (*)(uint64_t))sub_1D7AC0BF8, (uint64_t (*)(uint64_t))sub_1D7AC0EE8, MEMORY[0x1E0CDB880]);
    v2 = v1;
    v3[0] = sub_1D7AC11B4(&qword_1F014D998, (uint64_t (*)(uint64_t))sub_1D7AC0BF8, sub_1D7AC1190, sub_1D7AC1264);
    v3[1] = sub_1D7AA76D4(&qword_1F014D9C0, (uint64_t (*)(uint64_t))sub_1D7AC0EE8, MEMORY[0x1E0CDFCF8]);
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CDB8A0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1F014D990);
  }
  return result;
}

uint64_t sub_1D7AC1190()
{
  return sub_1D7AC11B4(&qword_1F014D9A0, (uint64_t (*)(uint64_t))sub_1D7AC0C1C, sub_1D7AC1224, sub_1D7AC1248);
}

uint64_t sub_1D7AC11B4(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = a2(255);
    v9[0] = a3();
    v9[1] = a4();
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CD9C20], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D7AC1224()
{
  return sub_1D7AC1644(&qword_1F014D9A8, (uint64_t (*)(uint64_t))sub_1D7AC0C40, (uint64_t (*)(void))sub_1D7AAB018, MEMORY[0x1E0CD9758]);
}

uint64_t sub_1D7AC1248()
{
  return sub_1D7AA76D4(&qword_1F014D9B0, (uint64_t (*)(uint64_t))sub_1D7AC0CBC, MEMORY[0x1E0CDB838]);
}

uint64_t sub_1D7AC1264()
{
  return sub_1D7AA76D4(&qword_1F014D9B8, (uint64_t (*)(uint64_t))sub_1D7AC0DC8, MEMORY[0x1E0CDA280]);
}

void sub_1D7AC1280(uint64_t a1)
{
  sub_1D7AC129C(a1, &qword_1F014D9D0, (void (*)(uint64_t))sub_1D7AC0B00);
}

void sub_1D7AC129C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_1D7B49978();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_1D7AC12F8(uint64_t a1)
{
  sub_1D7AC129C(a1, &qword_1F014D9D8, sub_1D7AC1280);
}

void sub_1D7AC1314(uint64_t a1)
{
  sub_1D7AC129C(a1, &qword_1F014D9E0, sub_1D7AC12F8);
}

void sub_1D7AC1330(uint64_t a1)
{
  sub_1D7AC129C(a1, &qword_1F014D9E8, sub_1D7AC1314);
}

void sub_1D7AC134C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014D9F8)
  {
    sub_1D7B49990();
    sub_1D7AA76D4(&qword_1F014D930, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDA088], MEMORY[0x1E0CDA078]);
    v0 = sub_1D7B4990C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014D9F8);
  }
}

void sub_1D7AC13C4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014DA00)
  {
    sub_1D7AC134C();
    sub_1D7AA76D4(&qword_1F014DA08, (uint64_t (*)(uint64_t))sub_1D7AC134C, MEMORY[0x1E0CD9140]);
    v0 = sub_1D7B4987C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014DA00);
  }
}

void sub_1D7AC1458()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014DA10)
  {
    sub_1D7AC13C4();
    sub_1D7AC14DC(255, &qword_1F014DA18, MEMORY[0x1E0CE0428], MEMORY[0x1E0CE0400], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CDB820]);
    v0 = sub_1D7B49978();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014DA10);
  }
}

void sub_1D7AC14DC(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v6 = a5(0, a3, a4);
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_1D7AC1524(unint64_t a1)
{
  if (a1 >> 62 == 1)
  {

  }
  else if (!(a1 >> 62))
  {
    swift_release();
  }
}

uint64_t sub_1D7AC1544(uint64_t a1)
{
  uint64_t v2;

  sub_1D7AA787C(0, &qword_1F014DA20, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDD560], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1D7AC1598(uint64_t a1)
{
  sub_1D7ABF0C8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1D7AC15D4(uint64_t a1)
{
  sub_1D7AACF84(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1D7AC1610()
{
  return sub_1D7AC1644(&qword_1F014DA28, (uint64_t (*)(uint64_t))sub_1D7AC16AC, sub_1D7AC16C8, MEMORY[0x1E0CD9758]);
}

uint64_t sub_1D7AC1644(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = a2(255);
    v9[0] = a3();
    v9[1] = a4;
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CD9C20], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1D7AC16AC(uint64_t a1)
{
  sub_1D7AC129C(a1, &qword_1F014DA30, sub_1D7AC1330);
}

uint64_t sub_1D7AC16C8()
{
  return sub_1D7AC1644(&qword_1F014DA38, (uint64_t (*)(uint64_t))sub_1D7AC1330, sub_1D7AC16EC, MEMORY[0x1E0CD9758]);
}

uint64_t sub_1D7AC16EC()
{
  return sub_1D7AC1644(&qword_1F014DA40, (uint64_t (*)(uint64_t))sub_1D7AC1314, sub_1D7AC1710, MEMORY[0x1E0CD9758]);
}

uint64_t sub_1D7AC1710()
{
  return sub_1D7AC1644(&qword_1F014DA48, (uint64_t (*)(uint64_t))sub_1D7AC12F8, sub_1D7AC1734, MEMORY[0x1E0CD8D70]);
}

uint64_t sub_1D7AC1734()
{
  return sub_1D7AC1644(&qword_1F014DA50, (uint64_t (*)(uint64_t))sub_1D7AC1280, sub_1D7AC1758, MEMORY[0x1E0CDB158]);
}

uint64_t sub_1D7AC1758()
{
  return sub_1D7AA76D4(&qword_1F014DA58, (uint64_t (*)(uint64_t))sub_1D7AC0B00, MEMORY[0x1E0CDFCC0]);
}

uint64_t sub_1D7AC1774()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  _QWORD *v21;
  uint64_t v22;
  char v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int isUniquelyReferenced_nonNull_native;
  char v29;
  unint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, unint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;

  v1 = sub_1D7B495C4();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1D7B49504();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = OBJC_IVAR____TtC8HealthUI17BalanceChartPoint____lazy_storage___valuesByMetric;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC8HealthUI17BalanceChartPoint____lazy_storage___valuesByMetric))
  {
    v10 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8HealthUI17BalanceChartPoint____lazy_storage___valuesByMetric);
LABEL_30:
    swift_bridgeObjectRetain();
    return v10;
  }
  v11 = sub_1D7B494F8();
  v56 = sub_1D7ADFC60(MEMORY[0x1E0DEE9D8]);
  v51 = *(_QWORD *)(v11 + 16);
  if (!v51)
  {
LABEL_29:
    swift_bridgeObjectRelease();
    v41 = v56;
    *(_QWORD *)(v0 + v9) = v56;
    v10 = v41;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  v44 = v9;
  v45 = v0;
  v49 = v11 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  v48 = (_QWORD *)(v0 + OBJC_IVAR____TtC8HealthUI17BalanceChartPoint_collection);
  v12 = *(_QWORD *)(v6 + 72);
  v53 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  v54 = v12;
  v43 = v11;
  swift_bridgeObjectRetain();
  v13 = 0;
  v57 = v2;
  v46 = v5;
  v47 = v6;
  v50 = v8;
  while (1)
  {
    v55 = v13;
    v53(v8, v49 + v54 * v13, v5);
    __swift_project_boxed_opaque_existential_0(v48, v48[3]);
    v15 = sub_1D7B4960C();
    v16 = *(_QWORD *)(v15 + 16);
    if (v16)
    {
      v17 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
      v52 = v15;
      v18 = v15 + v17;
      v19 = *(_QWORD *)(v2 + 72);
      v20 = *(void (**)(char *, unint64_t, uint64_t))(v2 + 16);
      v21 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v20(v4, v15 + v17, v1);
      while (1)
      {
        v22 = sub_1D7B4954C();
        v24 = v23;
        (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
        if ((v24 & 1) == 0)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v21 = sub_1D7ABA504(0, v21[2] + 1, 1, v21);
          v26 = v21[2];
          v25 = v21[3];
          if (v26 >= v25 >> 1)
            v21 = sub_1D7ABA504((_QWORD *)(v25 > 1), v26 + 1, 1, v21);
          v21[2] = v26 + 1;
          v21[v26 + 4] = v22;
          v2 = v57;
        }
        v18 += v19;
        if (!--v16)
          break;
        v20(v4, v18, v1);
      }
      swift_bridgeObjectRelease();
      v5 = v46;
    }
    else
    {
      swift_bridgeObjectRelease();
      v21 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    v27 = v56;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v58 = (_QWORD *)v27;
    v8 = v50;
    v30 = sub_1D7AF4524((uint64_t)v50);
    v31 = *(_QWORD *)(v27 + 16);
    v32 = (v29 & 1) == 0;
    v33 = v31 + v32;
    if (__OFADD__(v31, v32))
      break;
    v34 = v29;
    if (*(_QWORD *)(v27 + 24) >= v33)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_1D7AF5F94();
    }
    else
    {
      sub_1D7AF4BD4(v33, isUniquelyReferenced_nonNull_native);
      v35 = sub_1D7AF4524((uint64_t)v8);
      if ((v34 & 1) != (v36 & 1))
        goto LABEL_33;
      v30 = v35;
    }
    v37 = v58;
    v56 = (unint64_t)v58;
    if ((v34 & 1) != 0)
    {
      v14 = v58[7];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v14 + 8 * v30) = v21;
    }
    else
    {
      v58[(v30 >> 6) + 8] |= 1 << v30;
      v53((char *)(v37[6] + v30 * v54), (unint64_t)v8, v5);
      *(_QWORD *)(v37[7] + 8 * v30) = v21;
      v38 = v37[2];
      v39 = __OFADD__(v38, 1);
      v40 = v38 + 1;
      if (v39)
        goto LABEL_32;
      v37[2] = v40;
    }
    v13 = v55 + 1;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v8, v5);
    if (v13 == v51)
    {
      swift_bridgeObjectRelease();
      v9 = v44;
      v0 = v45;
      goto LABEL_29;
    }
  }
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  result = sub_1D7B4A974();
  __break(1u);
  return result;
}

void sub_1D7AC1B78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  double v5;
  double v6;
  char v7;
  char v8;
  double v9;
  double v10;

  v1 = v0 + OBJC_IVAR____TtC8HealthUI17BalanceChartPoint____lazy_storage___valueRange;
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC8HealthUI17BalanceChartPoint____lazy_storage___valueRange + 16) & 1) != 0)
  {
    v2 = sub_1D7AC1774();
    *(double *)&v3 = COERCE_DOUBLE(sub_1D7B1B094(v2));
    if ((v4 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v9 = 0.0;
      v10 = 0.0;
    }
    else
    {
      v5 = *(double *)&v3;
      v6 = COERCE_DOUBLE(sub_1D7B1B2F8(v2));
      v8 = v7;
      swift_bridgeObjectRelease();
      v9 = 0.0;
      v10 = 0.0;
      if ((v8 & 1) == 0)
      {
        v9 = v5;
        v10 = v6;
        if (v5 > v6)
        {
          __break(1u);
          return;
        }
      }
    }
    *(double *)v1 = v9;
    *(double *)(v1 + 8) = v10;
    *(_BYTE *)(v1 + 16) = 0;
  }
}

uint64_t sub_1D7AC1C20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  double v3;
  double v4;

  v1 = v0 + OBJC_IVAR____TtC8HealthUI17BalanceChartPoint____lazy_storage___valueMedialRange;
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC8HealthUI17BalanceChartPoint____lazy_storage___valueMedialRange + 16) & 1) != 0)
  {
    result = sub_1D7B495A0();
    if (v3 > v4)
    {
      __break(1u);
    }
    else
    {
      *(double *)v1 = v3;
      *(double *)(v1 + 8) = v4;
      *(_BYTE *)(v1 + 16) = 0;
    }
  }
  return result;
}

unint64_t sub_1D7AC1C6C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  unint64_t result;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC8HealthUI17BalanceChartPoint____lazy_storage___warmupRange;
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC8HealthUI17BalanceChartPoint____lazy_storage___warmupRange + 17) & 1) == 0)
    return *(_QWORD *)v1;
  __swift_project_boxed_opaque_existential_0((_QWORD *)(v0 + OBJC_IVAR____TtC8HealthUI17BalanceChartPoint_collection), *(_QWORD *)(v0 + OBJC_IVAR____TtC8HealthUI17BalanceChartPoint_collection + 24));
  v2 = sub_1D7B49630();
  if ((v2 & 1) != 0)
    result = 0xBFFCCCCCCCCCCCCDLL;
  else
    result = 0;
  if ((v2 & 1) != 0)
    v4 = 0x3FFCCCCCCCCCCCCDLL;
  else
    v4 = 0;
  *(_QWORD *)v1 = result;
  *(_QWORD *)(v1 + 8) = v4;
  *(_WORD *)(v1 + 16) = (v2 & 1) == 0;
  return result;
}

uint64_t sub_1D7AC1D18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  char v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  unint64_t v22;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  _QWORD *v54;

  v1 = sub_1D7B49504();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1D7B495C4();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = OBJC_IVAR____TtC8HealthUI17BalanceChartPoint____lazy_storage___warmupRangeByMetric;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC8HealthUI17BalanceChartPoint____lazy_storage___warmupRangeByMetric))
  {
    v10 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8HealthUI17BalanceChartPoint____lazy_storage___warmupRangeByMetric);
LABEL_26:
    swift_bridgeObjectRetain();
    return v10;
  }
  v53 = v4;
  v11 = sub_1D7B494F8();
  v51 = sub_1D7ADFE14(MEMORY[0x1E0DEE9D8]);
  v48 = *(_QWORD *)(v11 + 16);
  if (!v48)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    v39 = v51;
    *(_QWORD *)(v0 + v9) = v51;
    v10 = v39;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  v42 = v9;
  v43 = v0;
  v47 = v11 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v46 = (_QWORD *)(v0 + OBJC_IVAR____TtC8HealthUI17BalanceChartPoint_collection);
  v50 = *(_QWORD *)(v2 + 72);
  v41 = v11;
  swift_bridgeObjectRetain();
  v12 = 0;
  v45 = xmmword_1D7B84550;
  v49 = v2;
  v44 = v1;
  while (1)
  {
    v13 = v47 + v50 * v12;
    __swift_project_boxed_opaque_existential_0(v46, v46[3]);
    v52 = v13;
    v14 = sub_1D7B4960C();
    v15 = *(_QWORD *)(v14 + 16);
    if (v15)
    {
      v16 = v14 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
      v17 = *(_QWORD *)(v6 + 72);
      v18 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
      while (1)
      {
        v18(v8, v16, v5);
        v19 = sub_1D7B49558();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        if ((v19 & 1) == 0)
          break;
        v16 += v17;
        if (!--v15)
        {
          swift_bridgeObjectRelease();
          v1 = v44;
          v2 = v49;
          goto LABEL_14;
        }
      }
      swift_bridgeObjectRelease();
      v1 = v44;
      v2 = v49;
      goto LABEL_7;
    }
    swift_bridgeObjectRelease();
LABEL_14:
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v2 + 16);
    v21 = (uint64_t)v53;
    v20(v53, v52, v1);
    v22 = v51;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v54 = (_QWORD *)v22;
    v24 = sub_1D7AF4524(v21);
    v26 = v22;
    v27 = v24;
    v28 = *(_QWORD *)(v22 + 16);
    v29 = (v25 & 1) == 0;
    v30 = v28 + v29;
    if (__OFADD__(v28, v29))
      break;
    v31 = v25;
    if (*(_QWORD *)(v26 + 24) >= v30)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_1D7AF5FB0();
    }
    else
    {
      sub_1D7AF4BF0(v30, isUniquelyReferenced_nonNull_native);
      v32 = sub_1D7AF4524((uint64_t)v53);
      if ((v31 & 1) != (v33 & 1))
        goto LABEL_29;
      v27 = v32;
    }
    v34 = (uint64_t)v53;
    v35 = v54;
    v51 = (unint64_t)v54;
    if ((v31 & 1) != 0)
    {
      *(_OWORD *)(v54[7] + 16 * v27) = v45;
    }
    else
    {
      v54[(v27 >> 6) + 8] |= 1 << v27;
      v20((char *)(v35[6] + v27 * v50), v34, v1);
      *(_OWORD *)(v35[7] + 16 * v27) = v45;
      v36 = v35[2];
      v37 = __OFADD__(v36, 1);
      v38 = v36 + 1;
      if (v37)
        goto LABEL_28;
      v35[2] = v38;
    }
    swift_bridgeObjectRelease();
    v2 = v49;
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v34, v1);
LABEL_7:
    if (++v12 == v48)
    {
      swift_bridgeObjectRelease();
      v9 = v42;
      v0 = v43;
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  result = sub_1D7B4A974();
  __break(1u);
  return result;
}

id sub_1D7AC20AC(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  objc_super v13;

  *(_QWORD *)&v2[OBJC_IVAR____TtC8HealthUI17BalanceChartPoint____lazy_storage___valuesByMetric] = 0;
  v5 = &v2[OBJC_IVAR____TtC8HealthUI17BalanceChartPoint____lazy_storage___valueRange];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 1;
  v6 = &v2[OBJC_IVAR____TtC8HealthUI17BalanceChartPoint____lazy_storage___valueMedialRange];
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  v7 = &v2[OBJC_IVAR____TtC8HealthUI17BalanceChartPoint____lazy_storage___warmupRange];
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  v7[16] = 0;
  v7[17] = 1;
  *(_QWORD *)&v2[OBJC_IVAR____TtC8HealthUI17BalanceChartPoint____lazy_storage___warmupRangeByMetric] = 0;
  sub_1D7AC0938(a1, (uint64_t)&v2[OBJC_IVAR____TtC8HealthUI17BalanceChartPoint_collection]);
  v8 = &v2[OBJC_IVAR____TtC8HealthUI17BalanceChartPoint_date];
  v9 = sub_1D7B49198();
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v8, a2, v9);
  v13.receiver = v2;
  v13.super_class = (Class)type metadata accessor for BalanceChartPoint();
  v11 = objc_msgSendSuper2(&v13, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
  __swift_destroy_boxed_opaque_existential_0(a1);
  return v11;
}

id sub_1D7AC21E8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BalanceChartPoint();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1D7AC228C()
{
  return type metadata accessor for BalanceChartPoint();
}

uint64_t type metadata accessor for BalanceChartPoint()
{
  uint64_t result;

  result = qword_1F014DAB8;
  if (!qword_1F014DAB8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1D7AC22D0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1D7B49198();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

double sub_1D7AC2508@<D0>(_OWORD *a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint8_t *v15;
  double result;
  void *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v2 = v1;
  swift_getObjectType();
  v4 = sub_1D7B4969C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7B4966C();
  v8 = sub_1D7B49684();
  v9 = sub_1D7B4A608();
  if (os_log_type_enabled(v8, v9))
  {
    v18 = a1;
    v10 = swift_slowAlloc();
    v17 = v2;
    v11 = (uint8_t *)v10;
    v12 = swift_slowAlloc();
    v20 = v12;
    *(_DWORD *)v11 = 136315138;
    v13 = sub_1D7B4AA94();
    v19 = sub_1D7AA4DE4(v13, v14, &v20);
    a1 = v18;
    sub_1D7B4A704();
    swift_bridgeObjectRelease();
    swift_arrayDestroy();
    MEMORY[0x1D829FFF4](v12, -1, -1);
    v15 = v11;
    v2 = v17;
    MEMORY[0x1D829FFF4](v15, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (objc_msgSend(v2, sel_yValue))
  {
    sub_1D7B4A770();
    swift_unknownObjectRelease();
  }
  else
  {
    result = 0.0;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

uint64_t sub_1D7AC27DC()
{
  void *v0;
  uint64_t v1;
  __int128 v3;
  _OWORD v4[2];
  _OWORD v5[2];

  if (!objc_msgSend(v0, sel_minYValue))
    return MEMORY[0x1E0DEE9D8];
  sub_1D7B4A770();
  swift_unknownObjectRelease();
  sub_1D7AA552C(v4, v5);
  if (!objc_msgSend(v0, sel_maxYValue))
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v5);
    return MEMORY[0x1E0DEE9D8];
  }
  sub_1D7B4A770();
  swift_unknownObjectRelease();
  sub_1D7AA552C(&v3, v4);
  sub_1D7AC2AD8(0, (unint64_t *)&qword_1F014CFC0, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1D7B82CE0;
  sub_1D7AA553C((uint64_t)v5, v1 + 32);
  sub_1D7AA552C(v4, (_OWORD *)(v1 + 64));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v5);
  return v1;
}

void sub_1D7AC2AD8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, MEMORY[0x1E0DEE9B8] + 8);
    if (!v5)
      atomic_store(v4, a2);
  }
}

void UIViewController.hk_updateNavigationBarMargins(for:)(uint64_t a1)
{
  void *v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  id v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  id v22;
  id v23;
  void *v24;
  id v25;

  objc_msgSend((id)objc_opt_self(), sel_edgeInsetsForWidthDesignation_, a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = objc_msgSend(v1, sel_navigationItem);
  objc_msgSend(v10, sel_largeTitleInsets);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v18 = v17;

  if (v3 != v12 || v5 != v14 || v7 != v16 || v9 != v18)
  {
    v22 = objc_msgSend(v1, sel_navigationItem);
    objc_msgSend(v22, sel_setLargeTitleInsets_, v3, v5, v7, v9);

    v23 = objc_msgSend(v1, sel_navigationController);
    if (v23)
    {
      v24 = v23;
      v25 = objc_msgSend(v23, sel_navigationBar);

      objc_msgSend(v25, sel_setNeedsLayout);
    }
  }
}

void UICollectionViewController.hk_updateCollectionViewMargins(for:)(uint64_t a1)
{
  void *v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  id v23;
  id v24;

  objc_msgSend((id)objc_opt_self(), sel_edgeInsetsForWidthDesignation_, a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = objc_msgSend(v1, sel_collectionView);
  if (!v10)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    return;
  }
  v11 = v10;
  objc_msgSend(v10, sel_directionalLayoutMargins);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18;

  if (v3 != v13 || v5 != v15 || v7 != v17 || v9 != v19)
  {
    v23 = objc_msgSend(v1, sel_collectionView);
    if (v23)
    {
      v24 = v23;
      objc_msgSend(v23, sel_setDirectionalLayoutMargins_, v3, v5, v7, v9);

      return;
    }
    goto LABEL_16;
  }
}

id AudiogramCurrentValueViewDataSource.__allocating_init(applicationItems:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  objc_super v5;

  v3 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v3[OBJC_IVAR___HKAudiogramCurrentValueViewDataSource____lazy_storage___chartFormatter] = 0;
  *(_QWORD *)&v3[OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_audiogram] = 0;
  *(_QWORD *)&v3[OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_applicationItems] = a1;
  *(_QWORD *)&v3[OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_keyValueLabels] = MEMORY[0x1E0DEE9D8];
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id AudiogramCurrentValueViewDataSource.init(applicationItems:)(uint64_t a1)
{
  char *v1;
  objc_super v3;

  *(_QWORD *)&v1[OBJC_IVAR___HKAudiogramCurrentValueViewDataSource____lazy_storage___chartFormatter] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_audiogram] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_applicationItems] = a1;
  *(_QWORD *)&v1[OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_keyValueLabels] = MEMORY[0x1E0DEE9D8];
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for AudiogramCurrentValueViewDataSource();
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t type metadata accessor for AudiogramCurrentValueViewDataSource()
{
  return objc_opt_self();
}

void sub_1D7AC2F4C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  _QWORD *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;

  v2 = OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_audiogram;
  v3 = *(void **)(v1 + OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_audiogram);
  *(_QWORD *)(v1 + OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_audiogram) = a1;
  v4 = a1;

  v5 = (_QWORD *)(v1 + OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_keyValueLabels);
  swift_beginAccess();
  *v5 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  v6 = *(void **)(v1 + v2);
  if (v6)
  {
    v7 = v6;
    sub_1D7AC34F4(v7);
    v9 = v8;
    swift_beginAccess();
    v10 = v9;
    MEMORY[0x1D829E3EC]();
    if (*(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1D7B4A4C4();
    sub_1D7B4A4DC();
    sub_1D7B4A4B8();
    swift_endAccess();

  }
}

uint64_t sub_1D7AC30F0()
{
  return 0;
}

uint64_t sub_1D7AC3100()
{
  uint64_t v0;
  unint64_t *v1;
  unint64_t v2;
  uint64_t v3;

  v1 = (unint64_t *)(v0 + OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_keyValueLabels);
  swift_beginAccess();
  v2 = *v1;
  if (!(v2 >> 62))
    return *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v3 = sub_1D7B4A8A8();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1D7AC3238(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  id v8;
  uint64_t v9;

  v5 = (uint64_t *)(v2 + OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_keyValueLabels);
  result = swift_beginAccess();
  v7 = *v5;
  if ((*v5 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    v8 = (id)MEMORY[0x1D829E758](a1, v7);
    swift_bridgeObjectRelease();
    if (a2)
      goto LABEL_5;
    goto LABEL_7;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10) > a1)
  {
    v8 = *(id *)(v7 + 8 * a1 + 32);
    if (a2)
    {
LABEL_5:
      v9 = 0;
LABEL_8:
      objc_msgSend(v8, sel_setOrientation_, v9);
      return (uint64_t)v8;
    }
LABEL_7:
    v9 = 1;
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D7AC33E8()
{
  return 0;
}

void sub_1D7AC33F8()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;

  v1 = (_QWORD *)(v0 + OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_keyValueLabels);
  swift_beginAccess();
  *v1 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  v2 = *(void **)(v0 + OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_audiogram);
  if (v2)
  {
    v3 = v2;
    sub_1D7AC34F4(v3);
    v5 = v4;
    swift_beginAccess();
    v6 = v5;
    MEMORY[0x1D829E3EC]();
    if (*(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1D7B4A4C4();
    sub_1D7B4A4DC();
    sub_1D7B4A4B8();
    swift_endAccess();

  }
}

void sub_1D7AC34F4(void *a1)
{
  uint64_t v1;
  id v3;
  void *v4;
  id v5;
  id v6;
  objc_class *v7;
  char *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  objc_super v29;

  v3 = objc_msgSend(objc_allocWithZone((Class)HKSelectedRangeData), sel_initWithStatisticsType_, 3);
  objc_msgSend(v3, sel_setDataType_, 0);
  v4 = *(void **)(v1 + OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_applicationItems);
  v5 = a1;
  v6 = objc_msgSend(v4, sel_healthStore);
  v7 = (objc_class *)type metadata accessor for AudiogramCurrentValueDataProvider();
  v8 = (char *)objc_allocWithZone(v7);
  *(_QWORD *)&v8[OBJC_IVAR____TtC8HealthUI33AudiogramCurrentValueDataProvider_audiogram] = v5;
  *(_QWORD *)&v8[OBJC_IVAR____TtC8HealthUI33AudiogramCurrentValueDataProvider_healthStore] = v6;
  *(_QWORD *)&v8[OBJC_IVAR____TtC8HealthUI33AudiogramCurrentValueDataProvider_options] = 1;
  v28 = v5;
  v29.receiver = v8;
  v29.super_class = v7;
  v9 = objc_msgSendSuper2(&v29, sel_init);
  v10 = objc_msgSend(v4, sel_displayTypeController);
  v11 = objc_msgSend((id)objc_opt_self(), sel_audiogramSampleType);
  v12 = objc_msgSend(v10, sel_displayTypeForObjectType_, v11);

  if (v12)
  {
    v13 = objc_msgSend(v4, sel_unitController);
    v14 = (void *)objc_opt_self();
    v15 = objc_msgSend(v14, sel_hk_chartCurrentValueValueFont);
    v16 = objc_msgSend(v14, sel_hk_chartCurrentValueUnitFont);
    v17 = objc_msgSend(v4, sel_dateCache);
    v18 = (void *)objc_opt_self();
    v19 = objc_msgSend(v18, sel_labelColor);
    v20 = objc_msgSend(v18, sel_secondaryLabelColor);
    sub_1D7AC46C8(v12, v13, v15, v19, v16, v20);
    v22 = v21;

    objc_msgSend(v3, sel_setAttributedString_, v22);
    sub_1D7AC3950(v28);
    v23 = (void *)sub_1D7B4A38C();
    swift_bridgeObjectRelease();
    objc_msgSend(v3, sel_setTitleOverride_, v23);

    v24 = objc_msgSend(objc_allocWithZone((Class)HKInteractiveChartAnnotationViewKeyValueLabel), sel_init);
    v25 = objc_msgSend(v24, sel_keyLabel);
    objc_msgSend(v25, sel_setSelectedRangeData_, v3);

    v26 = objc_msgSend(v24, sel_valueLabel);
    v27 = objc_msgSend(v3, sel_attributedString);
    objc_msgSend(v26, sel_setAttributedText_, v27);

  }
  else
  {
    __break(1u);
  }
}

id AudiogramCurrentValueViewDataSource.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void AudiogramCurrentValueViewDataSource.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id AudiogramCurrentValueViewDataSource.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AudiogramCurrentValueViewDataSource();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_1D7AC3950(void *a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  void *v22;

  v2 = objc_msgSend(a1, sel_hearingLevelSummary);
  v3 = objc_msgSend(v2, sel_overallMetrics);

  v4 = objc_msgSend(v3, sel_averageSensitivity);
  if (!v4)
  {
    if (qword_1F014CF90 != -1)
      swift_once();
    v21 = (id)qword_1F0154598;
    sub_1D7B48F7C();

    sub_1D7ABCCEC();
    v9 = sub_1D7B4A74C();
    swift_bridgeObjectRelease();
    return (id)v9;
  }
  v5 = objc_msgSend(a1, sel_roundedAverageLeftEarSensitivity);
  v6 = objc_msgSend(a1, sel_roundedAverageRightEarSensitivity);
  result = HKAudiogramEarLocalizedDisplayNameForEar(1, 0);
  if (result)
  {
    v8 = result;
    v9 = sub_1D7B4A3BC();
    v11 = v10;

    result = HKAudiogramEarLocalizedDisplayNameForEar(2, 0);
    if (result)
    {
      v12 = result;
      v22 = v5;
      v13 = sub_1D7B4A3BC();
      v15 = v14;

      sub_1D7AC4004(0, (unint64_t *)&qword_1F01492C0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DED1E8]);
      v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_1D7B82CE0;
      *(_QWORD *)(v16 + 32) = v9;
      *(_QWORD *)(v16 + 40) = v11;
      *(_QWORD *)(v16 + 48) = v13;
      *(_QWORD *)(v16 + 56) = v15;
      v17 = qword_1F014CF90;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v17 != -1)
        swift_once();
      v18 = (id)qword_1F0154598;
      sub_1D7B48F7C();

      sub_1D7AC4004(0, &qword_1F014DB30, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
      sub_1D7AC404C();
      v19 = sub_1D7B4A2D8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v6)
      {
        v20 = v22;
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        if (v20)
        {

          return (id)v19;
        }
        else
        {
          return (id)v13;
        }
      }
      else
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      return (id)v9;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1D7AC3CF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void *v11;
  id v12;
  void (*v13)(char *, char *, uint64_t);
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  sub_1D7AC3FB0();
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1D7B49198();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v19 - v9;
  v11 = *(void **)(v0 + OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_audiogram);
  if (!v11)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
    goto LABEL_5;
  }
  v12 = objc_msgSend(v11, sel_endDate);
  sub_1D7B49168();

  v13 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
  v13(v3, v8, v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v3, 0, 1, v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
LABEL_5:
    sub_1D7AA79D0((uint64_t)v3);
    sub_1D7B49174();
    v14 = objc_msgSend(*(id *)(v0 + OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_applicationItems), sel_dateCache);
    sub_1D7B1AD68((uint64_t)v8, v14, 0);
    v16 = v17;
    goto LABEL_6;
  }
  v13(v10, v3, v4);
  v14 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                              + OBJC_IVAR___HKAudiogramCurrentValueViewDataSource_applicationItems), sel_dateCache));
  sub_1D7B1AD68((uint64_t)v10, v14, 1);
  v16 = v15;
  v8 = v10;
LABEL_6:

  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v16;
}

uint64_t method lookup function for AudiogramCurrentValueViewDataSource()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AudiogramCurrentValueViewDataSource.__allocating_init(applicationItems:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of AudiogramCurrentValueViewDataSource.update(audiogram:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of AudiogramCurrentValueViewDataSource.dateView(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of AudiogramCurrentValueViewDataSource.leftMarginView(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of AudiogramCurrentValueViewDataSource.numberOfValues(forAnnotationView:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of AudiogramCurrentValueViewDataSource.valueViewForColumn(at:orientation:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of AudiogramCurrentValueViewDataSource.showSeparators()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x108))();
}

void sub_1D7AC3FB0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014D000)
  {
    sub_1D7B49198();
    v0 = sub_1D7B4A6F8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014D000);
  }
}

void sub_1D7AC4004(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, MEMORY[0x1E0DEA968]);
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t sub_1D7AC404C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F014DB38;
  if (!qword_1F014DB38)
  {
    sub_1D7AC4004(255, &qword_1F014DB30, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&qword_1F014DB38);
  }
  return result;
}

uint64_t sub_1D7AC40A8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

id AudiogramCurrentValueDataProvider.__allocating_init(audiogram:healthStore:options:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  objc_class *v3;
  char *v7;
  uint64_t v8;
  objc_super v10;

  v7 = (char *)objc_allocWithZone(v3);
  v8 = *a3;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8HealthUI33AudiogramCurrentValueDataProvider_audiogram] = a1;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8HealthUI33AudiogramCurrentValueDataProvider_healthStore] = a2;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8HealthUI33AudiogramCurrentValueDataProvider_options] = v8;
  v10.receiver = v7;
  v10.super_class = v3;
  return objc_msgSendSuper2(&v10, sel_init);
}

uint64_t AudiogramCurrentValueOptions.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

HealthUI::AudiogramCurrentValueOptions __swiftcall AudiogramCurrentValueOptions.init(rawValue:)(HealthUI::AudiogramCurrentValueOptions rawValue)
{
  HealthUI::AudiogramCurrentValueOptions *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static AudiogramCurrentValueOptions.shortenedSupplementaryValue.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1D7AC4190@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D7AC40A8(a1, a2);
}

void sub_1D7AC41A4()
{
  uint64_t v0;
  id v1;

  v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8HealthUI33AudiogramCurrentValueDataProvider_audiogram), sel_startDate);
  sub_1D7B49168();

}

id AudiogramCurrentValueDataProvider.init(audiogram:healthStore:options:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  char *v3;
  uint64_t v4;
  objc_super v6;

  v4 = *a3;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8HealthUI33AudiogramCurrentValueDataProvider_audiogram] = a1;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8HealthUI33AudiogramCurrentValueDataProvider_healthStore] = a2;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8HealthUI33AudiogramCurrentValueDataProvider_options] = v4;
  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for AudiogramCurrentValueDataProvider();
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t type metadata accessor for AudiogramCurrentValueDataProvider()
{
  return objc_opt_self();
}

uint64_t sub_1D7AC4270(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v12;

  v3 = sub_1D7B49198();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8HealthUI33AudiogramCurrentValueDataProvider_audiogram), sel_startDate);
  sub_1D7B49168();

  v8 = (void *)sub_1D7B49150();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v9 = HKLastUpdatedText(v8, a1);

  if (!v9)
    return 0;
  v10 = sub_1D7B4A3BC();

  return v10;
}

uint64_t sub_1D7AC4378(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v12;

  v3 = sub_1D7B49198();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8HealthUI33AudiogramCurrentValueDataProvider_audiogram), sel_startDate);
  sub_1D7B49168();

  v8 = (void *)sub_1D7B49150();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v9 = HKMostRecentSampleEndDateText(v8, a1, 0);

  if (!v9)
    return 0;
  v10 = sub_1D7B4A3BC();

  return v10;
}

id sub_1D7AC4484(void *a1, uint64_t a2, void *a3, void (*a4)(id))
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v6 = a3;
  v7 = a1;
  a4(v6);
  v9 = v8;

  if (v9)
  {
    v10 = (void *)sub_1D7B4A38C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0;
  }
  return v10;
}

uint64_t sub_1D7AC4500(void *a1, void *a2, void *a3, void *a4)
{
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;

  v8 = (void *)objc_opt_self();
  v9 = objc_msgSend(v8, sel_labelColor);
  v10 = objc_msgSend(v8, sel_secondaryLabelColor);
  sub_1D7AC46C8(a1, a2, a3, v9, a4, v10);
  v12 = v11;

  return v12;
}

void sub_1D7AC46C8(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v6;
  id v13;
  id v14;
  void *v15;
  id v16;
  char v17;
  id v18;
  uint64_t inited;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  void *v44;
  void *v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;

  if (a3)
  {
    v13 = a3;
    v53 = a6;
    if (a5)
    {
LABEL_3:
      v14 = a3;
      v48 = a5;
      goto LABEL_6;
    }
  }
  else
  {
    v13 = objc_msgSend((id)objc_opt_self(), sel_hk_chartCurrentValueValueFont);
    v53 = a6;
    if (a5)
      goto LABEL_3;
  }
  v15 = (void *)objc_opt_self();
  v16 = a3;
  v48 = objc_msgSend(v15, sel_hk_chartCurrentValueUnitFont);
LABEL_6:
  v17 = *(_DWORD *)(v6 + OBJC_IVAR____TtC8HealthUI33AudiogramCurrentValueDataProvider_options) & 1;
  v18 = a5;
  sub_1D7AC4BC8(a1, a2, v17);
  sub_1D7AC5AB8(0, (unint64_t *)&qword_1F014DC20, (void (*)(uint64_t))sub_1D7AC5B04);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7B82CE0;
  v20 = (void *)*MEMORY[0x1E0DC1138];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0DC1138];
  v52 = sub_1D7AAF6EC(0, (unint64_t *)&qword_1F014DC30);
  *(_QWORD *)(inited + 40) = v13;
  v21 = (void *)*MEMORY[0x1E0DC1140];
  *(_QWORD *)(inited + 64) = v52;
  *(_QWORD *)(inited + 72) = v21;
  v51 = sub_1D7AAF6EC(0, &qword_1F014E8C0);
  *(_QWORD *)(inited + 104) = v51;
  *(_QWORD *)(inited + 80) = a4;
  swift_bridgeObjectRetain();
  v49 = v20;
  v47 = v13;
  v22 = v21;
  v23 = a4;
  sub_1D7ADFFC8(inited);
  v24 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
  v25 = (void *)sub_1D7B4A38C();
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  sub_1D7AC5B6C();
  v26 = MEMORY[0x1E0DEE9B8] + 8;
  v27 = (void *)sub_1D7B4A230();
  swift_bridgeObjectRelease();
  v50 = objc_msgSend(v24, sel_initWithString_attributes_, v25, v27);
  swift_bridgeObjectRelease();

  v28 = objc_msgSend((id)objc_opt_self(), sel_decibelHearingLevelUnit);
  v29 = objc_msgSend(a2, sel_localizedDisplayNameForUnit_value_, v28, 0);

  sub_1D7B4A3BC();
  v30 = swift_initStackObject();
  *(_OWORD *)(v30 + 16) = xmmword_1D7B82CE0;
  *(_QWORD *)(v30 + 32) = v49;
  *(_QWORD *)(v30 + 40) = v48;
  *(_QWORD *)(v30 + 64) = v52;
  *(_QWORD *)(v30 + 72) = v22;
  *(_QWORD *)(v30 + 104) = v51;
  *(_QWORD *)(v30 + 80) = v53;
  swift_bridgeObjectRetain();
  v31 = v49;
  v32 = v48;
  v33 = v22;
  v34 = v53;
  sub_1D7ADFFC8(v30);
  v35 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
  v36 = (void *)sub_1D7B4A38C();
  swift_bridgeObjectRelease();
  v37 = (void *)sub_1D7B4A230();
  swift_bridgeObjectRelease();
  v38 = objc_msgSend(v35, sel_initWithString_attributes_, v36, v37);
  swift_bridgeObjectRelease();

  if (qword_1F014CF90 != -1)
    swift_once();
  v39 = (id)qword_1F0154598;
  sub_1D7B48F7C();

  sub_1D7AA7E70(0, (unint64_t *)&qword_1F014CFC0, v26, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_1D7B82CE0;
  v41 = sub_1D7AAF6EC(0, (unint64_t *)&qword_1F014DC50);
  *(_QWORD *)(v40 + 32) = v50;
  *(_QWORD *)(v40 + 88) = v41;
  *(_QWORD *)(v40 + 56) = v41;
  *(_QWORD *)(v40 + 64) = v38;
  v42 = v50;
  v43 = v38;
  v44 = (void *)sub_1D7B4A4A0();
  swift_bridgeObjectRelease();
  v45 = (void *)sub_1D7B4A38C();
  swift_bridgeObjectRelease();
  v46 = HKUIJoinAttributedStringsWithFormat(v44, v45);

  if (v46)
  {

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1D7AC4BC8(void *a1, void *a2, char a3)
{
  uint64_t v3;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  void *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  id v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v7 = *(void **)(v3 + OBJC_IVAR____TtC8HealthUI33AudiogramCurrentValueDataProvider_audiogram);
  v8 = objc_msgSend(v7, sel_averageLeftEarSensitivity);
  v9 = objc_msgSend(v7, sel_averageRightEarSensitivity);
  if (!v8)
  {
    if (!v9)
      return sub_1D7AC542C(a1, a2);
    v21 = v9;
    v22 = v21;
    v23 = a3 & 1;
    v24 = 2;
LABEL_10:
    v25 = sub_1D7AC4F84(v21, v24, a1, a2, v23);

    return v25;
  }
  if (!v9)
  {
    v21 = v8;
    v22 = v21;
    v23 = a3 & 1;
    v24 = 1;
    goto LABEL_10;
  }
  v10 = v9;
  v11 = v8;
  v12 = sub_1D7AC4F84(v11, 1, a1, a2, a3 & 1);
  v14 = v13;
  v15 = sub_1D7AC4F84(v10, 2, a1, a2, a3 & 1);
  v17 = v16;
  if ((a3 & 1) != 0)
  {
    sub_1D7AA7E70(0, (unint64_t *)&qword_1F01492C0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_1D7B82CE0;
    *(_QWORD *)(v18 + 32) = v12;
    *(_QWORD *)(v18 + 40) = v14;
    *(_QWORD *)(v18 + 48) = v15;
    *(_QWORD *)(v18 + 56) = v17;
    if (qword_1F014CF90 != -1)
      swift_once();
    v19 = (id)qword_1F0154598;
    sub_1D7B48F7C();

    sub_1D7AA7E70(0, &qword_1F014DB30, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1D7AC404C();
    v20 = sub_1D7B4A2D8();
    swift_bridgeObjectRelease();

  }
  else
  {
    if (qword_1F014CF90 != -1)
      swift_once();
    v27 = (id)qword_1F0154598;
    sub_1D7B48F7C();

    sub_1D7AC5AB8(0, (unint64_t *)&qword_1F014DC00, (void (*)(uint64_t))sub_1D7AC5A20);
    v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_1D7B82CE0;
    v29 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v28 + 56) = MEMORY[0x1E0DEA968];
    v30 = sub_1D7AC5A74();
    *(_QWORD *)(v28 + 32) = v12;
    *(_QWORD *)(v28 + 40) = v14;
    *(_QWORD *)(v28 + 96) = v29;
    *(_QWORD *)(v28 + 104) = v30;
    *(_QWORD *)(v28 + 64) = v30;
    *(_QWORD *)(v28 + 72) = v15;
    *(_QWORD *)(v28 + 80) = v17;
    v20 = sub_1D7B4A3C8();

  }
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t sub_1D7AC4F84(void *a1, uint64_t a2, void *a3, void *a4, char a5)
{
  id v10;
  double v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;

  swift_getObjectType();
  v10 = objc_msgSend((id)objc_opt_self(), sel_decibelHearingLevelUnit);
  objc_msgSend(a1, sel_doubleValueForUnit_, v10);
  HKRoundWithPositiveZeroForDoubleValue(v11);
  v12 = (id)sub_1D7B494BC();
  v13 = HKIntegerFormatter();
  v14 = HKFormattedStringFromValue(v12, a3, a4, 1, v13);

  if (!v14)
  {
    if (qword_1F014CF18 != -1)
      swift_once();
    v18 = sub_1D7B4969C();
    __swift_project_value_buffer(v18, (uint64_t)qword_1F01544E8);
    v19 = v12;
    v20 = sub_1D7B49684();
    v21 = sub_1D7B4A608();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc();
      v23 = swift_slowAlloc();
      v31 = v23;
      *(_DWORD *)v22 = 136315650;
      v24 = sub_1D7B4AA94();
      sub_1D7AA4DE4(v24, v25, &v31);
      sub_1D7B4A704();
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2080;
      sub_1D7AA4DE4(0xD000000000000048, 0x80000001D7BA4C40, &v31);
      sub_1D7B4A704();
      *(_WORD *)(v22 + 22) = 2080;
      swift_getObjectType();
      v26 = sub_1D7B4AA94();
      sub_1D7AA4DE4(v26, v27, &v31);
      sub_1D7B4A704();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D7813000, v20, v21, "[%s][%s] Unable to format string from value. Found type: %s", (uint8_t *)v22, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1D829FFF4](v23, -1, -1);
      MEMORY[0x1D829FFF4](v22, -1, -1);

    }
    else
    {

    }
    return 0;
  }
  v15 = sub_1D7B4A3BC();
  v17 = v16;

  if ((a5 & 1) != 0 || !a2)
  {

    return v15;
  }
  if (a2 == 2)
  {
    if (qword_1F014CF90 == -1)
      goto LABEL_16;
    goto LABEL_18;
  }
  if (a2 == 1)
  {
    if (qword_1F014CF90 == -1)
    {
LABEL_16:
      v28 = (id)qword_1F0154598;
      sub_1D7B48F7C();

      sub_1D7AC5AB8(0, (unint64_t *)&qword_1F014DC00, (void (*)(uint64_t))sub_1D7AC5A20);
      v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = xmmword_1D7B84630;
      *(_QWORD *)(v29 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v29 + 64) = sub_1D7AC5A74();
      *(_QWORD *)(v29 + 32) = v15;
      *(_QWORD *)(v29 + 40) = v17;
      v15 = sub_1D7B4A3C8();

      swift_bridgeObjectRelease();
      return v15;
    }
LABEL_18:
    swift_once();
    goto LABEL_16;
  }
  type metadata accessor for HKAudiogramEar(0);
  result = sub_1D7B4A950();
  __break(1u);
  return result;
}

uint64_t sub_1D7AC542C(void *a1, void *a2)
{
  uint64_t v2;
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v5 = objc_msgSend((id)objc_opt_self(), sel_decibelHearingLevelUnit);
  v6 = *(void **)(v2 + OBJC_IVAR____TtC8HealthUI33AudiogramCurrentValueDataProvider_audiogram);
  v7 = objc_msgSend(v6, sel_roundedMinimumSensitivity);
  v8 = v7;
  if (v7)
  {
    objc_msgSend(v7, sel_doubleValueForUnit_, v5);

    v9 = (void *)sub_1D7B494BC();
    v10 = HKIntegerFormatter();
    v11 = HKFormattedStringFromValue(v9, a1, a2, 1, v10);

    if (v11)
    {
      v12 = sub_1D7B4A3BC();
      v8 = v13;

    }
    else
    {
      v12 = 0;
      v8 = 0;
    }
  }
  else
  {
    v12 = 0;
  }
  v14 = objc_msgSend(v6, sel_roundedMaximumSensitivity);
  if (!v14)
    goto LABEL_11;
  v15 = v14;
  objc_msgSend(v14, sel_doubleValueForUnit_, v5);

  v16 = (void *)sub_1D7B494BC();
  v17 = HKIntegerFormatter();
  v18 = HKFormattedStringFromValue(v16, a1, a2, 1, v17);

  if (v18)
  {
    v19 = sub_1D7B4A3BC();
    v21 = v20;

    if (!v8)
      goto LABEL_9;
  }
  else
  {
LABEL_11:
    v19 = 0;
    v21 = 0;
    if (!v8)
    {
LABEL_9:

      if (!v21)
        return 0;
      return v19;
    }
  }
  if (!v21)
  {
LABEL_17:

    return v12;
  }
  if (v12 == v19 && v8 == v21 || (sub_1D7B4A938() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (qword_1F014CF90 != -1)
    swift_once();
  v23 = (id)qword_1F0154598;
  sub_1D7B48F7C();

  sub_1D7AC5AB8(0, (unint64_t *)&qword_1F014DC00, (void (*)(uint64_t))sub_1D7AC5A20);
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_1D7B82CE0;
  v25 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v24 + 56) = MEMORY[0x1E0DEA968];
  v26 = sub_1D7AC5A74();
  *(_QWORD *)(v24 + 32) = v12;
  *(_QWORD *)(v24 + 40) = v8;
  *(_QWORD *)(v24 + 96) = v25;
  *(_QWORD *)(v24 + 104) = v26;
  *(_QWORD *)(v24 + 64) = v26;
  *(_QWORD *)(v24 + 72) = v19;
  *(_QWORD *)(v24 + 80) = v21;
  v19 = sub_1D7B4A3C8();
  swift_bridgeObjectRelease();

  return v19;
}

id AudiogramCurrentValueDataProvider.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void AudiogramCurrentValueDataProvider.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id AudiogramCurrentValueDataProvider.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AudiogramCurrentValueDataProvider();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t sub_1D7AC581C()
{
  unint64_t result;

  result = qword_1F014DB58;
  if (!qword_1F014DB58)
  {
    result = MEMORY[0x1D829FF28](&protocol conformance descriptor for AudiogramCurrentValueOptions, &type metadata for AudiogramCurrentValueOptions);
    atomic_store(result, (unint64_t *)&qword_1F014DB58);
  }
  return result;
}

unint64_t sub_1D7AC5864()
{
  unint64_t result;

  result = qword_1F014DB60;
  if (!qword_1F014DB60)
  {
    result = MEMORY[0x1D829FF28](&protocol conformance descriptor for AudiogramCurrentValueOptions, &type metadata for AudiogramCurrentValueOptions);
    atomic_store(result, (unint64_t *)&qword_1F014DB60);
  }
  return result;
}

unint64_t sub_1D7AC58AC()
{
  unint64_t result;

  result = qword_1F014DB68;
  if (!qword_1F014DB68)
  {
    result = MEMORY[0x1D829FF28](&protocol conformance descriptor for AudiogramCurrentValueOptions, &type metadata for AudiogramCurrentValueOptions);
    atomic_store(result, (unint64_t *)&qword_1F014DB68);
  }
  return result;
}

unint64_t sub_1D7AC58F4()
{
  unint64_t result;

  result = qword_1F014DB70;
  if (!qword_1F014DB70)
  {
    result = MEMORY[0x1D829FF28](&protocol conformance descriptor for AudiogramCurrentValueOptions, &type metadata for AudiogramCurrentValueOptions);
    atomic_store(result, (unint64_t *)&qword_1F014DB70);
  }
  return result;
}

ValueMetadata *type metadata accessor for AudiogramCurrentValueOptions()
{
  return &type metadata for AudiogramCurrentValueOptions;
}

uint64_t method lookup function for AudiogramCurrentValueDataProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AudiogramCurrentValueDataProvider.date.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of AudiogramCurrentValueDataProvider.__allocating_init(audiogram:healthStore:options:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of AudiogramCurrentValueDataProvider.lastUpdatedDescription(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of AudiogramCurrentValueDataProvider.lastUpdatedShortDescription(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of AudiogramCurrentValueDataProvider.attributedString(with:unitController:valueFont:unitFont:dateCache:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of AudiogramCurrentValueDataProvider.attributedSupplementaryString(with:unitController:font:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

unint64_t sub_1D7AC5A20()
{
  unint64_t result;

  result = qword_1F014FCD0;
  if (!qword_1F014FCD0)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1F014FCD0);
  }
  return result;
}

unint64_t sub_1D7AC5A74()
{
  unint64_t result;

  result = qword_1F014DC10;
  if (!qword_1F014DC10)
  {
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CB1A70], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1F014DC10);
  }
  return result;
}

void sub_1D7AC5AB8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_1D7B4A920();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_1D7AC5B04()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1F014E8B0)
  {
    type metadata accessor for Key(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1F014E8B0);
  }
}

unint64_t sub_1D7AC5B6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F014DC40;
  if (!qword_1F014DC40)
  {
    type metadata accessor for Key(255);
    result = MEMORY[0x1D829FF28](&unk_1D7B833E4, v1);
    atomic_store(result, (unint64_t *)&qword_1F014DC40);
  }
  return result;
}

uint64_t sub_1D7AC5BB4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[8];
  uint64_t v44[9];

  v3 = (void *)v1[2];
  v4 = v1[3];
  v6 = v1[4];
  v5 = (void *)v1[5];
  v8 = v1[6];
  v7 = v1[7];
  if (!v3)
  {
    v13 = v1[6];
    v39 = 0;
    v40 = 0;
    v10 = 0;
    v41 = 0;
    v42 = 0;
    v11 = 0;
    v12 = 0;
    v37 = 0;
    v38 = 0;
    v35 = 0;
    v36 = 0;
    v34 = 0;
    v14 = 0;
    if (v5)
      goto LABEL_3;
LABEL_5:
    v4 = 0;
    v22 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v21 = v5;
    v20 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v13 = 0;
    v16 = 0;
    goto LABEL_6;
  }
  v9 = v1[7];
  v39 = *v1;
  v10 = v1[1];
  sub_1D7AC5E74(*v1, v10, v3);
  swift_bridgeObjectRetain();
  sub_1D7B153A4(v43);
  v7 = v9;
  v11 = v43[2];
  v41 = v43[1];
  v42 = v43[0];
  v12 = v43[4];
  v40 = v43[3];
  v13 = v8;
  v34 = v7;
  v35 = v8;
  v37 = v43[6];
  v38 = v43[5];
  v36 = v43[7];
  v14 = v3;
  if (!v5)
    goto LABEL_5;
LABEL_3:
  v15 = v7;
  swift_bridgeObjectRetain();
  sub_1D7AC5E74(v4, v6, v5);
  sub_1D7B153A4(v44);
  v16 = v15;
  v17 = v44[0];
  v18 = v44[1];
  v19 = v44[2];
  v20 = v44[3];
  v21 = v5;
  v22 = v6;
  v23 = v44[4];
  v24 = v44[5];
  v25 = v44[6];
  v26 = v44[7];
LABEL_6:
  *a1 = v39;
  a1[1] = v10;
  v33 = v14;
  v27 = v14;
  a1[2] = (uint64_t)v14;
  a1[3] = v42;
  a1[4] = v41;
  a1[5] = v11;
  a1[6] = v40;
  a1[7] = v12;
  a1[8] = v38;
  a1[9] = v37;
  a1[10] = v36;
  a1[11] = v35;
  a1[12] = v34;
  a1[13] = v4;
  a1[14] = v22;
  a1[15] = (uint64_t)v21;
  a1[16] = v17;
  a1[17] = v18;
  a1[18] = v19;
  a1[19] = v20;
  a1[20] = v23;
  a1[21] = v24;
  a1[22] = v25;
  a1[23] = v26;
  a1[24] = v13;
  a1[25] = v16;
  v28 = v22;
  v31 = v22;
  v29 = v21;
  v32 = v21;
  sub_1D7AC6B4C(v39, v10, v27);
  sub_1D7AC6B4C(v4, v28, v29);
  sub_1D7AC6BC4(v4, v31, v32);
  return sub_1D7AC6BC4(v39, v10, v33);
}

id PairedDeviceFeatureAttributes.localFeatureAttributes.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = v1[1];
  v4 = (void *)v1[2];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = (uint64_t)v4;
  return sub_1D7AC5E74(v2, v3, v4);
}

id sub_1D7AC5E74(uint64_t a1, uint64_t a2, void *a3)
{
  id result;

  if (a3)
  {
    swift_bridgeObjectRetain();
    return a3;
  }
  return result;
}

__n128 PairedDeviceFeatureAttributes.localFeatureAttributes.setter(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  __n128 result;
  __n128 v4;

  v4 = *a1;
  v2 = a1[1].n128_u64[0];
  sub_1D7AC5EE8(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(void **)(v1 + 16));
  result = v4;
  *(__n128 *)v1 = v4;
  *(_QWORD *)(v1 + 16) = v2;
  return result;
}

uint64_t sub_1D7AC5EE8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result;

  if (a3)
  {

    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t (*PairedDeviceFeatureAttributes.localFeatureAttributes.modify())()
{
  return nullsub_1;
}

id PairedDeviceFeatureAttributes.remoteFeatureAttributes.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = v1[3];
  v3 = v1[4];
  v4 = (void *)v1[5];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = (uint64_t)v4;
  return sub_1D7AC5E74(v2, v3, v4);
}

__n128 PairedDeviceFeatureAttributes.remoteFeatureAttributes.setter(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  __n128 result;
  __n128 v4;

  v4 = *a1;
  v2 = a1[1].n128_u64[0];
  sub_1D7AC5EE8(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40));
  result = v4;
  *(__n128 *)(v1 + 24) = v4;
  *(_QWORD *)(v1 + 40) = v2;
  return result;
}

uint64_t (*PairedDeviceFeatureAttributes.remoteFeatureAttributes.modify())()
{
  return nullsub_1;
}

uint64_t PairedDeviceFeatureAttributes.init(localFeatureAttributes:remoteFeatureAttributes:)@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  __int128 v11;

  result = a1[1];
  v6 = a1[2];
  v7 = *a2;
  v8 = *((_QWORD *)a2 + 2);
  if (v8)
    v9 = 1;
  else
    v9 = v6 == 0;
  if (v9)
  {
    v10 = *a1;
  }
  else
  {
    v11 = *a2;
    swift_bridgeObjectRelease();
    v7 = v11;
    result = 0;
    v10 = 0;
  }
  *(_QWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = result;
  *(_QWORD *)(a3 + 16) = v6;
  *(_OWORD *)(a3 + 24) = v7;
  *(_QWORD *)(a3 + 40) = v8;
  return result;
}

BOOL _s8HealthUI29PairedDeviceFeatureAttributesV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v3 = *a1;
  v2 = a1[1];
  v5 = (void *)a1[2];
  v4 = a1[3];
  v7 = a1[4];
  v6 = (void *)a1[5];
  v8 = *a2;
  v9 = a2[1];
  v11 = (void *)a2[2];
  v10 = a2[3];
  v12 = a2[4];
  v13 = (void *)a2[5];
  if (!v5)
  {
    v40 = a1[3];
    if (!v11)
      goto LABEL_11;
    goto LABEL_21;
  }
  if (!v11)
  {
    swift_bridgeObjectRetain();
    v24 = v5;
LABEL_21:
    sub_1D7AC5E74(v8, v9, v11);
    sub_1D7AC5EE8(v3, v2, v5);
    v25 = v8;
    v26 = v9;
    v27 = v11;
LABEL_30:
    sub_1D7AC5EE8(v25, v26, v27);
    return 0;
  }
  if (!v2)
  {
    if (!v9)
      goto LABEL_8;
    goto LABEL_23;
  }
  if (!v9
    || (v3 != v8 || v2 != v9) && (v36 = a2[3], v38 = a2[4], v14 = sub_1D7B4A938(), v10 = v36, v12 = v38, (v14 & 1) == 0))
  {
LABEL_23:
    swift_bridgeObjectRetain();
    v28 = v5;
    v25 = v3;
    v26 = v2;
    v27 = v5;
    goto LABEL_30;
  }
LABEL_8:
  v37 = v10;
  v39 = v12;
  v40 = v4;
  sub_1D7AC6C3C();
  sub_1D7AC5E74(v3, v2, v5);
  sub_1D7AC5E74(v3, v2, v5);
  sub_1D7AC5E74(v8, v9, v11);
  v15 = sub_1D7B4A6E0();
  sub_1D7AC5EE8(v8, v9, v11);

  swift_bridgeObjectRelease();
  sub_1D7AC5EE8(v3, v2, v5);
  v10 = v37;
  v12 = v39;
  if ((v15 & 1) == 0)
    return 0;
LABEL_11:
  v16 = v7;
  if (!v6)
  {
    if (!v13)
      return 1;
    goto LABEL_27;
  }
  if (!v13)
  {
    v30 = v12;
    v31 = v10;
    swift_bridgeObjectRetain();
    v32 = v6;
    v10 = v31;
    v12 = v30;
LABEL_27:
    v33 = v10;
    v34 = v12;
    sub_1D7AC5E74(v10, v12, v13);
    sub_1D7AC5EE8(v40, v7, v6);
    v25 = v33;
    v26 = v34;
    v27 = v13;
    goto LABEL_30;
  }
  if (!v7)
  {
    if (!v12)
      goto LABEL_18;
    goto LABEL_29;
  }
  if (!v12
    || (v40 != v10 || v7 != v12) && (v17 = v10, v18 = v12, v19 = sub_1D7B4A938(), v10 = v17, v12 = v18, (v19 & 1) == 0))
  {
LABEL_29:
    swift_bridgeObjectRetain();
    v35 = v6;
    v25 = v40;
    v26 = v7;
    v27 = v6;
    goto LABEL_30;
  }
LABEL_18:
  v20 = v12;
  v21 = v10;
  sub_1D7AC6C3C();
  v22 = v16;
  sub_1D7AC5E74(v40, v16, v6);
  sub_1D7AC5E74(v40, v16, v6);
  sub_1D7AC5E74(v21, v20, v13);
  v23 = sub_1D7B4A6E0();
  sub_1D7AC5EE8(v21, v20, v13);

  swift_bridgeObjectRelease();
  sub_1D7AC5EE8(v40, v22, v6);
  return (v23 & 1) != 0;
}

uint64_t destroy for PairedDeviceFeatureAttributes(uint64_t result)
{
  uint64_t v1;
  void *v2;
  void *v3;

  v1 = result;
  v2 = *(void **)(result + 16);
  if (v2)
  {

    result = swift_bridgeObjectRelease();
  }
  v3 = *(void **)(v1 + 40);
  if (v3)
  {

    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for PairedDeviceFeatureAttributes(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;

  v4 = *(void **)(a2 + 16);
  if (!v4)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v7 = *(void **)(a2 + 40);
    if (v7)
      goto LABEL_3;
LABEL_5:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    return a1;
  }
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain();
  v6 = v4;
  v7 = *(void **)(a2 + 40);
  if (!v7)
    goto LABEL_5;
LABEL_3:
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRetain();
  v9 = v7;
  return a1;
}

_QWORD *assignWithCopy for PairedDeviceFeatureAttributes(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  __int128 v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  __int128 v21;

  v4 = a2[2];
  if (a1[2])
  {
    if (v4)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v5 = (void *)a2[2];
      v6 = (void *)a1[2];
      a1[2] = v5;
      v7 = v5;

    }
    else
    {
      sub_1D7AC6558((uint64_t)a1);
      v10 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v10;
    }
  }
  else if (v4)
  {
    *a1 = *a2;
    a1[1] = a2[1];
    v8 = (void *)a2[2];
    a1[2] = v8;
    swift_bridgeObjectRetain();
    v9 = v8;
  }
  else
  {
    v11 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v11;
  }
  v12 = a1 + 3;
  v13 = a2 + 3;
  v14 = a2[5];
  if (a1[5])
  {
    if (v14)
    {
      a1[3] = a2[3];
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v15 = (void *)a2[5];
      v16 = (void *)a1[5];
      a1[5] = v15;
      v17 = v15;

    }
    else
    {
      sub_1D7AC6558((uint64_t)(a1 + 3));
      v20 = a2[5];
      *v12 = *v13;
      a1[5] = v20;
    }
  }
  else if (v14)
  {
    a1[3] = a2[3];
    a1[4] = a2[4];
    v18 = (void *)a2[5];
    a1[5] = v18;
    swift_bridgeObjectRetain();
    v19 = v18;
  }
  else
  {
    v21 = *v13;
    a1[5] = a2[5];
    *v12 = v21;
  }
  return a1;
}

uint64_t sub_1D7AC6558(uint64_t a1)
{
  destroy for DeviceFeatureAttributes(a1);
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for PairedDeviceFeatureAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  if (*(_QWORD *)(a1 + 16))
  {
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v5;
      swift_bridgeObjectRelease();
      v6 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v4;

      goto LABEL_6;
    }
    sub_1D7AC6558(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
LABEL_6:
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_10:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    return a1;
  }
  v7 = *(_QWORD *)(a2 + 40);
  if (!v7)
  {
    sub_1D7AC6558(a1 + 24);
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease();
  v9 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7;

  return a1;
}

uint64_t getEnumTagSinglePayload for PairedDeviceFeatureAttributes(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PairedDeviceFeatureAttributes(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PairedDeviceFeatureAttributes()
{
  return &type metadata for PairedDeviceFeatureAttributes;
}

uint64_t destroy for PairedDeviceFeatureAttributesSections(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {

    swift_bridgeObjectRelease();
  }
  v3 = *(void **)(a1 + 40);
  if (v3)
  {

    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PairedDeviceFeatureAttributesSections(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;

  v4 = *(void **)(a2 + 16);
  if (!v4)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v7 = *(void **)(a2 + 40);
    if (v7)
      goto LABEL_3;
LABEL_5:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    goto LABEL_6;
  }
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain();
  v6 = v4;
  v7 = *(void **)(a2 + 40);
  if (!v7)
    goto LABEL_5;
LABEL_3:
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRetain();
  v9 = v7;
LABEL_6:
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PairedDeviceFeatureAttributesSections(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  __int128 v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  __int128 v21;

  v4 = a2[2];
  if (a1[2])
  {
    if (v4)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v5 = (void *)a2[2];
      v6 = (void *)a1[2];
      a1[2] = v5;
      v7 = v5;

    }
    else
    {
      sub_1D7AC6558((uint64_t)a1);
      v10 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v10;
    }
  }
  else if (v4)
  {
    *a1 = *a2;
    a1[1] = a2[1];
    v8 = (void *)a2[2];
    a1[2] = v8;
    swift_bridgeObjectRetain();
    v9 = v8;
  }
  else
  {
    v11 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v11;
  }
  v12 = a1 + 3;
  v13 = a2 + 3;
  v14 = a2[5];
  if (a1[5])
  {
    if (v14)
    {
      a1[3] = a2[3];
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v15 = (void *)a2[5];
      v16 = (void *)a1[5];
      a1[5] = v15;
      v17 = v15;

    }
    else
    {
      sub_1D7AC6558((uint64_t)(a1 + 3));
      v20 = a2[5];
      *v12 = *v13;
      a1[5] = v20;
    }
  }
  else if (v14)
  {
    a1[3] = a2[3];
    a1[4] = a2[4];
    v18 = (void *)a2[5];
    a1[5] = v18;
    swift_bridgeObjectRetain();
    v19 = v18;
  }
  else
  {
    v21 = *v13;
    a1[5] = a2[5];
    *v12 = v21;
  }
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PairedDeviceFeatureAttributesSections(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  if (*(_QWORD *)(a1 + 16))
  {
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v5;
      swift_bridgeObjectRelease();
      v6 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v4;

      goto LABEL_6;
    }
    sub_1D7AC6558(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
LABEL_6:
  if (!*(_QWORD *)(a1 + 40))
  {
LABEL_10:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    goto LABEL_11;
  }
  v7 = *(_QWORD *)(a2 + 40);
  if (!v7)
  {
    sub_1D7AC6558(a1 + 24);
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease();
  v9 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7;

LABEL_11:
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PairedDeviceFeatureAttributesSections(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PairedDeviceFeatureAttributesSections(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PairedDeviceFeatureAttributesSections()
{
  return &type metadata for PairedDeviceFeatureAttributesSections;
}

uint64_t sub_1D7AC6B3C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1D7AC6B4C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRetain();
    v4 = a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1D7AC6BC4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result;

  if (a3)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1D7AC6C3C()
{
  unint64_t result;

  result = qword_1ED0AC800;
  if (!qword_1ED0AC800)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED0AC800);
  }
  return result;
}

unint64_t sub_1D7AC6C7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F014DC60;
  if (!qword_1F014DC60)
  {
    sub_1D7AC6CC4();
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CE0680], v1);
    atomic_store(result, (unint64_t *)&qword_1F014DC60);
  }
  return result;
}

void sub_1D7AC6CC4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014DC68)
  {
    sub_1D7AC6D18();
    v0 = sub_1D7B4A134();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014DC68);
  }
}

void sub_1D7AC6D18()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1F014DC70)
  {
    sub_1D7AC6D78();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1F014DC70);
  }
}

void sub_1D7AC6D78()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014DC78)
  {
    v0 = sub_1D7B4A6F8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014DC78);
  }
}

unint64_t *initializeBufferWithCopyOfBuffer for LoadableImagePhase(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  sub_1D7AC6DFC(*a2);
  *a1 = v3;
  return a1;
}

unint64_t sub_1D7AC6DFC(unint64_t result)
{
  if (result >> 62 == 1)
    return (unint64_t)(id)(result & 0x3FFFFFFFFFFFFFFFLL);
  if (!(result >> 62))
    return swift_retain();
  return result;
}

void destroy for LoadableImagePhase(unint64_t *a1)
{
  sub_1D7AC1524(*a1);
}

unint64_t *assignWithCopy for LoadableImagePhase(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  sub_1D7AC6DFC(*a2);
  v4 = *a1;
  *a1 = v3;
  sub_1D7AC1524(v4);
  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

unint64_t *assignWithTake for LoadableImagePhase(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  sub_1D7AC1524(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for LoadableImagePhase(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 126);
  v3 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for LoadableImagePhase(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7D)
  {
    *(_QWORD *)result = a2 - 126;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1D7AC6F44(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 62;
  if (v1 <= 1)
    return v1;
  else
    return (*a1 >> 3) + 2;
}

_QWORD *sub_1D7AC6F60(_QWORD *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_1D7AC6F70(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 2)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 62;
  }
  else
  {
    v2 = 8 * (a2 - 2);
    v3 = 0x8000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for LoadableImagePhase()
{
  return &type metadata for LoadableImagePhase;
}

uint64_t sub_1D7AC6FAC()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1D7AC6FB4(uint64_t a1)
{
  sub_1D7AABE44(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(a1 + 32);
  return swift_release();
}

uint64_t sub_1D7AC6FF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_1D7AABD10(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v7;
  v8 = v7;
  v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  swift_retain();
  v9(a1 + 32, a2 + 32, v8);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain();
  return a1;
}

uint64_t sub_1D7AC7084(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_1D7AABD10(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_1D7AABE44(v6, v7);
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 32), (uint64_t *)(a2 + 32));
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t sub_1D7AC7130(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_1D7AABE44(v6, v7);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(a1 + 32);
  v8 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 48) = v8;
  v9 = a2[9];
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_QWORD *)(a1 + 72) = v9;
  swift_release();
  return a1;
}

uint64_t sub_1D7AC71A0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1D7AC71E8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for LoadableImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LoadableImage);
}

uint64_t sub_1D7AC7248()
{
  return swift_getOpaqueTypeConformance2();
}

double sub_1D7AC727C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  double v3;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  sub_1D7AABD10(v1, v2);
  v3 = sub_1D7AD15AC(v1, v2);
  sub_1D7AABE44(v1, v2);
  return v3;
}

uint64_t sub_1D7AC72D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;
  void (*v26)(unint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v33 = a2;
  v4 = sub_1D7B4A530();
  v31 = *(_QWORD *)(v4 - 8);
  v32 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v27 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v29 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7B49918();
  v10 = sub_1D7B49978();
  v30 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v28 = (uint64_t)&v25 - v14;
  v26 = *(void (**)(unint64_t))(v2 + 16);
  sub_1D7AC7710();
  sub_1D7B4A044();
  __swift_project_boxed_opaque_existential_0(&v35, *((uint64_t *)&v36 + 1));
  type metadata accessor for ClinicalAccountLogoLoader();
  v15 = sub_1D7B3470C();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v35);
  v26(v15);
  sub_1D7AC1524(v15);
  (*(void (**)(__int128 *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(&v35, v2, a1);
  v16 = swift_allocObject();
  v17 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v16 + 16) = v7;
  *(_QWORD *)(v16 + 24) = v17;
  v18 = v38;
  *(_OWORD *)(v16 + 64) = v37;
  *(_OWORD *)(v16 + 80) = v18;
  *(_OWORD *)(v16 + 96) = v39;
  v19 = v36;
  *(_OWORD *)(v16 + 32) = v35;
  *(_OWORD *)(v16 + 48) = v19;
  v20 = v27;
  sub_1D7B4A518();
  sub_1D7B49F54();
  swift_release();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v20, v32);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v7);
  v21 = sub_1D7AC7804();
  v34[0] = v17;
  v34[1] = v21;
  MEMORY[0x1D829FF28](MEMORY[0x1E0CD9C20], v10, v34);
  v22 = v28;
  sub_1D7AD3D10((uint64_t)v13, v10, v28);
  v23 = *(void (**)(char *, uint64_t))(v30 + 8);
  v23(v13, v10);
  sub_1D7ACE490(v22, v10, v33);
  return ((uint64_t (*)(uint64_t, uint64_t))v23)(v22, v10);
}

uint64_t sub_1D7AC7588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[8] = a2;
  v3[9] = a3;
  v3[7] = a1;
  sub_1D7B4A50C();
  v3[10] = sub_1D7B4A500();
  v3[11] = sub_1D7B4A4F4();
  v3[12] = v4;
  return swift_task_switch();
}

uint64_t sub_1D7AC75F8()
{
  _QWORD *v0;
  double v1;
  _QWORD *v2;

  sub_1D7AC7710();
  sub_1D7B4A044();
  __swift_project_boxed_opaque_existential_0(v0 + 2, v0[5]);
  v1 = sub_1D7AC727C();
  v2 = (_QWORD *)swift_task_alloc();
  v0[13] = v2;
  *v2 = v0;
  v2[1] = sub_1D7AC7684;
  return sub_1D7B336C0(v1);
}

uint64_t sub_1D7AC7684()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1D7AC76D0()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1D7AC7710()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014DD00)
  {
    sub_1D7AC0AAC();
    v0 = sub_1D7B4A068();
    if (!v1)
      atomic_store(v0, &qword_1F014DD00);
  }
}

uint64_t sub_1D7AC7764()
{
  uint64_t v0;

  sub_1D7AABE44(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v0 + 64);
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1D7AC77A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1D7AC78A8;
  return sub_1D7AC7588(v0 + 32, v2, v3);
}

unint64_t sub_1D7AC7804()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F014DD18;
  if (!qword_1F014DD18)
  {
    v1 = sub_1D7B49918();
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CD9158], v1);
    atomic_store(result, (unint64_t *)&qword_1F014DD18);
  }
  return result;
}

uint64_t sub_1D7AC784C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  sub_1D7B49918();
  v2 = sub_1D7B49978();
  v4[0] = v1;
  v4[1] = sub_1D7AC7804();
  return MEMORY[0x1D829FF28](MEMORY[0x1E0CD9C20], v2, v4);
}

Swift::Bool __swiftcall AudiogramAverageLevelSeries.supportsMultiTouchSelection()()
{
  return 0;
}

id AudiogramAverageLevelSeries.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_1D7AC7964(void *a1)
{
  id v2;
  id v3;
  id v4;
  id result;
  void *v6;
  void *v7;
  id v8;
  id v9;

  v2 = objc_msgSend((id)objc_opt_self(), sel_strokeStyleWithColor_lineWidth_, a1, 2.0);
  objc_msgSend(v2, sel_setDashStyle_, 0);
  v3 = objc_msgSend(objc_allocWithZone((Class)HKLineSeriesPresentationStyle), sel_init);
  objc_msgSend(v3, sel_setStrokeStyle_, v2);
  objc_msgSend(v3, sel_setShouldNegateAnnotationValue_, 1);
  objc_msgSend(v3, sel_setPointMarkerStyle_, 0);
  v4 = objc_msgSend((id)objc_opt_self(), sel_hk_roundedSystemFontWithSize_weight_textStyle_, *MEMORY[0x1E0DC4AB8], 18.0, *MEMORY[0x1E0DC1438]);
  result = HKIntegerFormatter();
  if (result)
  {
    v6 = result;
    v7 = (void *)objc_opt_self();
    v8 = a1;
    v9 = objc_msgSend(v7, sel_labelStyleWithColor_font_horizontalAlignment_verticalAlignment_numberFormatter_, v8, v4, 0, 2, v6);

    objc_msgSend(v3, sel_setAxisAnnotationStyle_, v9);
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id _s8HealthUI27AudiogramAverageLevelSeriesC04makecdeF012primaryColorACSo7UIColorC_tFZ_0(void *a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  void *v23;

  v2 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AudiogramAverageLevelSeries()), sel_init);
  objc_msgSend(v2, sel_setAllowsSelection_, 1);
  objc_msgSend(v2, sel_setFlatLastValue_, 1);
  objc_msgSend(v2, sel_setExtendFirstValue_, 1);
  objc_msgSend(v2, sel_setExtendLastValue_, 1);
  v3 = objc_allocWithZone((Class)HKNumericAxisConfiguration);
  v4 = v2;
  v5 = objc_msgSend(v3, sel_init);
  v6 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DecibelsHearingLossAxisLabelDimension()), sel_init);
  objc_msgSend(v5, sel_setLabelDimension_, v6);

  objc_msgSend(v5, sel_setMaxLabels_, 7);
  v7 = objc_msgSend((id)objc_opt_self(), sel_standardNumericYAxisWithConfigurationOverrides_, v5);

  objc_msgSend(v4, sel_setYAxis_, v7);
  v8 = qword_1F014CF88;
  v9 = v4;
  if (v8 != -1)
    swift_once();
  v10 = objc_msgSend((id)objc_opt_self(), sel_ruleWithDefaultAxisBounds_axisBoundsOverrides_noDataAxisBounds_, qword_1F014FAD0, 0, qword_1F014FAD0);
  objc_msgSend(v9, sel_setAxisScalingRule_, v10);

  v11 = sub_1D7AC7964(a1);
  sub_1D7AAF550();
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1D7B83E30;
  *(_QWORD *)(v12 + 32) = v11;
  sub_1D7B4A4B8();
  sub_1D7AC7E70();
  v13 = v9;
  v14 = v11;
  v15 = (void *)sub_1D7B4A4A0();
  swift_bridgeObjectRelease();
  objc_msgSend(v13, sel_setUnhighlightedPresentationStyles_, v15);

  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1D7B83E30;
  *(_QWORD *)(v16 + 32) = v14;
  sub_1D7B4A4B8();
  v17 = v13;
  v18 = v14;
  v19 = (void *)sub_1D7B4A4A0();
  swift_bridgeObjectRelease();
  objc_msgSend(v17, sel_setHighlightedPresentationStyles_, v19);

  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_1D7B83E30;
  *(_QWORD *)(v20 + 32) = v18;
  sub_1D7B4A4B8();
  v21 = v17;
  v22 = v18;
  v23 = (void *)sub_1D7B4A4A0();
  swift_bridgeObjectRelease();
  objc_msgSend(v21, sel_setSelectedPresentationStyles_, v23);

  objc_msgSend(v21, sel_setInactivePresentationStyle_, v22);
  return v21;
}

uint64_t type metadata accessor for AudiogramAverageLevelSeries()
{
  return objc_opt_self();
}

unint64_t sub_1D7AC7E70()
{
  unint64_t result;

  result = qword_1F014D3F0;
  if (!qword_1F014D3F0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1F014D3F0);
  }
  return result;
}

uint64_t sub_1D7AC7EAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v15 = sub_1D7B49588();
  v3 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = MEMORY[0x1E0DEE9D8];
  if (v6)
  {
    v14 = v1;
    v16 = MEMORY[0x1E0DEE9D8];
    sub_1D7AA5F38(0, v6, 0);
    v7 = v16;
    v8 = *(_QWORD *)(sub_1D7B495C4() - 8);
    v9 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v10 = *(_QWORD *)(v8 + 72);
    do
    {
      sub_1D7B49594();
      v16 = v7;
      v12 = *(_QWORD *)(v7 + 16);
      v11 = *(_QWORD *)(v7 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_1D7AA5F38(v11 > 1, v12 + 1, 1);
        v7 = v16;
      }
      *(_QWORD *)(v7 + 16) = v12 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v7+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v12, v5, v15);
      v9 += v10;
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t sub_1D7AC8004(unint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  char *v4;
  void *v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t v11;

  v11 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_11;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; v2 = sub_1D7B4A8A8())
  {
    for (i = 4; ; ++i)
    {
      v4 = (a1 & 0xC000000000000001) != 0
         ? (char *)MEMORY[0x1D829E758](i - 4, a1)
         : (char *)*(id *)(a1 + 8 * i);
      v5 = v4;
      v6 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v7 = &v4[OBJC_IVAR____TtC8HealthUI17BalanceChartPoint_collection];
      swift_beginAccess();
      __swift_project_boxed_opaque_existential_0(v7, *((_QWORD *)v7 + 3));
      v8 = v5;
      v9 = sub_1D7B49618();
      swift_endAccess();

      sub_1D7AE7E10(v9);
      if (v6 == v2)
      {
        swift_bridgeObjectRelease();
        return v11;
      }
    }
    __break(1u);
LABEL_11:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E0DEE9D8];
}

id sub_1D7AC8184(unint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  _BYTE v13[16];

  sub_1D7AC8308();
  MEMORY[0x1E0C80A78](v6);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ((a3 & 1) != 0)
    return sub_1D7AC835C();
  v9 = sub_1D7AC8004(a1);
  v10 = sub_1D7AC7EAC(v9);
  swift_bridgeObjectRelease();
  sub_1D7ADF01C(v10, (uint64_t)v8);
  swift_bridgeObjectRelease();
  if (MEMORY[0x1D82A00A8](v3 + OBJC_IVAR____TtC8HealthUI47BalanceMostFrequentClassificationOverlayContext_delegate))
  {
    sub_1D7B12C10((uint64_t)v8);
    swift_unknownObjectRelease();
  }
  v11 = sub_1D7AC835C();
  sub_1D7AC85A0((uint64_t)v8);
  return v11;
}

uint64_t sub_1D7AC8274()
{
  uint64_t v0;

  return sub_1D7AC82E4(v0 + OBJC_IVAR____TtC8HealthUI47BalanceMostFrequentClassificationOverlayContext_delegate);
}

id sub_1D7AC8284()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BalanceMostFrequentClassificationOverlayContext();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for BalanceMostFrequentClassificationOverlayContext()
{
  return objc_opt_self();
}

uint64_t sub_1D7AC82E4(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

void sub_1D7AC8308()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014DD78)
  {
    sub_1D7B49588();
    v0 = sub_1D7B4A6F8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014DD78);
  }
}

id sub_1D7AC835C()
{
  id v0;
  void *v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v14;

  v0 = objc_msgSend(objc_allocWithZone((Class)HKDisplayTypeContextItem), sel_init);
  v1 = (void *)objc_opt_self();
  v2 = (void *)sub_1D7B4A38C();
  v3 = objc_msgSend(v1, sel_hk_chartOverlayAccessibilityIdentifier_, v2);

  if (v3)
  {
    v14 = 0;
    sub_1D7B4A3B0();

    v3 = 0;
  }
  objc_msgSend(v0, sel_setAccessibilityIdentifier_, v3, v14);

  v4 = (void *)objc_opt_self();
  v5 = objc_msgSend((id)objc_opt_self(), sel_tertiarySystemBackgroundColor);
  v6 = objc_msgSend(v4, sel_defaultContextViewColorsUsingColor_, v5);

  objc_msgSend(v0, sel_setMetricColors_, v6);
  v7 = objc_msgSend((id)objc_opt_self(), sel_defaultMetricColorsForOverlayMode_, 1);
  objc_msgSend(v0, sel_setMetricColors_, v7);

  v8 = (void *)sub_1D7B4A38C();
  objc_msgSend(v0, sel_setTitle_, v8);

  sub_1D7AAD1F0();
  v10 = v9;
  objc_msgSend(v0, sel_setSelectedMetricColors_, v9);

  v11 = (void *)sub_1D7B4A38C();
  v12 = HKUILocalizedString(v11);

  objc_msgSend(v0, sel_setValue_, v12);
  objc_msgSend(v0, sel_setInfoHidden_, 1);
  return v0;
}

uint64_t sub_1D7AC85A0(uint64_t a1)
{
  uint64_t v2;

  sub_1D7AC8308();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_1D7AC85DC()
{
  char *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC8HealthUI12GradientView____lazy_storage___gradientLayer;
  v2 = *(void **)&v0[OBJC_IVAR____TtC8HealthUI12GradientView____lazy_storage___gradientLayer];
  v3 = v2;
  if (v2 == (void *)1)
  {
    v4 = objc_msgSend(v0, sel_layer);
    objc_opt_self();
    v3 = (void *)swift_dynamicCastObjCClass();
    if (!v3)

    v5 = *(void **)&v0[v1];
    *(_QWORD *)&v0[v1] = v3;
    v6 = v3;
    sub_1D7AB1270(v5);
  }
  sub_1D7AB1280(v2);
  return v3;
}

unint64_t sub_1D7AC8694()
{
  unint64_t result;

  result = qword_1F014DD80;
  if (!qword_1F014DD80)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1F014DD80);
  }
  return result;
}

void sub_1D7AC86D0(void *a1, void *a2)
{
  sub_1D7AC86E8(a1, a2, 0.0, 1.0);
}

void sub_1D7AC86DC(void *a1, void *a2)
{
  sub_1D7AC86E8(a1, a2, 1.0, 0.0);
}

void sub_1D7AC86E8(void *a1, void *a2, double a3, double a4)
{
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;

  v8 = sub_1D7AC85DC();
  if (v8)
  {
    v9 = v8;
    objc_msgSend(v8, sel_setStartPoint_, 0.0, 0.0);

  }
  v10 = sub_1D7AC85DC();
  if (v10)
  {
    v11 = v10;
    objc_msgSend(v10, sel_setEndPoint_, a3, a4);

  }
  v13 = a1;
  v12 = a2;
  sub_1D7AC8AD0(a1, a2);

}

id GradientView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), sel_initWithFrame_, a1, a2, a3, a4);
}

id GradientView.init(frame:)(double a1, double a2, double a3, double a4)
{
  char *v4;
  char *v9;
  objc_class *v10;
  objc_super v12;

  *(_QWORD *)&v4[OBJC_IVAR____TtC8HealthUI12GradientView____lazy_storage___gradientLayer] = 1;
  v9 = &v4[OBJC_IVAR____TtC8HealthUI12GradientView_gradientColors];
  v10 = (objc_class *)type metadata accessor for GradientView();
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  v12.receiver = v4;
  v12.super_class = v10;
  return objc_msgSendSuper2(&v12, sel_initWithFrame_, a1, a2, a3, a4);
}

id GradientView.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id GradientView.init(coder:)(void *a1)
{
  char *v1;
  char *v3;
  objc_class *v4;
  id v5;
  objc_super v7;

  *(_QWORD *)&v1[OBJC_IVAR____TtC8HealthUI12GradientView____lazy_storage___gradientLayer] = 1;
  v3 = &v1[OBJC_IVAR____TtC8HealthUI12GradientView_gradientColors];
  v4 = (objc_class *)type metadata accessor for GradientView();
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  v7.receiver = v1;
  v7.super_class = v4;
  v5 = objc_msgSendSuper2(&v7, sel_initWithCoder_, a1);

  return v5;
}

id GradientView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GradientView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_1D7AC8AD0(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;

  v3 = v2 + OBJC_IVAR____TtC8HealthUI12GradientView_gradientColors;
  v4 = *(void **)(v2 + OBJC_IVAR____TtC8HealthUI12GradientView_gradientColors);
  v5 = *(void **)(v2 + OBJC_IVAR____TtC8HealthUI12GradientView_gradientColors + 8);
  *(_QWORD *)v3 = a1;
  *(_QWORD *)(v3 + 8) = a2;
  sub_1D7AC8E48(a1, a2);
  sub_1D7AC8DC4(v4, v5);
  if (*(_QWORD *)v3)
  {
    v6 = *(void **)(v3 + 8);
    v16 = *(id *)v3;
    v7 = v6;
    v8 = sub_1D7AC85DC();
    if (v8)
    {
      v9 = v8;
      sub_1D7AC8DF0();
      v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16) = xmmword_1D7B82CE0;
      v11 = objc_msgSend(v16, sel_CGColor);
      type metadata accessor for CGColor(0);
      v13 = v12;
      *(_QWORD *)(v10 + 56) = v12;
      *(_QWORD *)(v10 + 32) = v11;
      v14 = objc_msgSend(v7, sel_CGColor);
      *(_QWORD *)(v10 + 88) = v13;
      *(_QWORD *)(v10 + 64) = v14;
      v15 = sub_1D7B4A4A0();
      swift_bridgeObjectRelease();
      objc_msgSend(v9, sel_setColors_, v15);

      v7 = v9;
      v16 = (id)v15;
    }

  }
}

void sub_1D7AC8C24()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC8HealthUI12GradientView_gradientColors);
  if (v1)
  {
    v2 = *(void **)(v0 + OBJC_IVAR____TtC8HealthUI12GradientView_gradientColors + 8);
    v12 = v1;
    v3 = v2;
    v4 = sub_1D7AC85DC();
    if (v4)
    {
      v5 = v4;
      sub_1D7AC8DF0();
      v6 = swift_allocObject();
      *(_OWORD *)(v6 + 16) = xmmword_1D7B82CE0;
      v7 = objc_msgSend(v12, sel_CGColor);
      type metadata accessor for CGColor(0);
      v9 = v8;
      *(_QWORD *)(v6 + 56) = v8;
      *(_QWORD *)(v6 + 32) = v7;
      v10 = objc_msgSend(v3, sel_CGColor);
      *(_QWORD *)(v6 + 88) = v9;
      *(_QWORD *)(v6 + 64) = v10;
      v11 = sub_1D7B4A4A0();
      swift_bridgeObjectRelease();
      objc_msgSend(v5, sel_setColors_, v11);

      v3 = v5;
      v12 = (id)v11;
    }

  }
}

uint64_t type metadata accessor for GradientView()
{
  return objc_opt_self();
}

uint64_t method lookup function for GradientView()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GradientView.setGradientColors(topColor:bottomColor:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of GradientView.setGradientColors(leftColor:rightColor:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

void sub_1D7AC8DC4(void *a1, void *a2)
{
  if (a1)
  {

  }
}

void sub_1D7AC8DF0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014CFC0)
  {
    v0 = sub_1D7B4A920();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014CFC0);
  }
}

id sub_1D7AC8E48(id result, void *a2)
{
  id v2;

  if (result)
  {
    v2 = result;
    return a2;
  }
  return result;
}

id sub_1D7AC8EC0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StateOfMindCoordinate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for StateOfMindCoordinate()
{
  return objc_opt_self();
}

void sub_1D7AC8FB4(CGFloat *a1)
{
  uint64_t v1;
  CGFloat a;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  CGFloat *v11;
  double v12;
  CGPoint v13;
  CGFloat v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  CGFloat *v21;
  double v22;
  CGPoint v23;
  CGFloat v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  objc_class *v29;
  char *v30;
  uint64_t v31;
  CGFloat v32;
  CGFloat y;
  CGFloat point;
  CGFloat pointa;
  CGFloat x;
  CGFloat v37;
  CGFloat v38;
  objc_super v39;
  uint64_t v40;
  CGAffineTransform v41;
  CGPoint v42;
  CGPoint v43;
  CGPoint v44;
  CGPoint v45;
  CGPoint v46;
  CGPoint v47;
  CGPoint v48;

  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v42.x = *(CGFloat *)(v1 + OBJC_IVAR____TtC8HealthUI21StateOfMindCoordinate_xValue);
  v41.a = *a1;
  a = v41.a;
  v41.b = v3;
  v41.c = v4;
  v41.d = v5;
  v41.tx = v6;
  v41.ty = v7;
  v42.y = 0.0;
  x = v42.x;
  v31 = *(_OWORD *)&CGPointApplyAffineTransform(v42, &v41);
  v43.y = *(CGFloat *)(v1 + OBJC_IVAR____TtC8HealthUI21StateOfMindCoordinate_maxYValue);
  v41.a = a;
  v41.b = v3;
  v41.c = v4;
  v41.d = v5;
  v41.tx = v6;
  v41.ty = v7;
  v43.x = 0.0;
  y = CGPointApplyAffineTransform(v43, &v41).y;
  v44.y = *(CGFloat *)(v1 + OBJC_IVAR____TtC8HealthUI21StateOfMindCoordinate_minYValue);
  v37 = v3;
  v38 = a;
  v41.a = a;
  v41.b = v3;
  v41.c = v4;
  v41.d = v5;
  v41.tx = v6;
  v41.ty = v7;
  v44.x = 0.0;
  v32 = CGPointApplyAffineTransform(v44, &v41).y;
  v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8HealthUI21StateOfMindCoordinate_dailyYValueRanges);
  v9 = *(_QWORD *)(v8 + 16);
  v10 = MEMORY[0x1E0DEE9D8];
  if (v9)
  {
    v40 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1D7AA5F80(0, v9, 0);
    v10 = v40;
    v11 = (CGFloat *)(v8 + 40);
    while (1)
    {
      v45.y = *(v11 - 1);
      point = *v11;
      v41.a = v38;
      v41.b = v37;
      v41.c = v4;
      v41.d = v5;
      v41.tx = v6;
      v41.ty = v7;
      v45.x = x;
      v12 = CGPointApplyAffineTransform(v45, &v41).y;
      v41.a = v38;
      v41.b = v37;
      v41.c = v4;
      v41.d = v5;
      v41.tx = v6;
      v41.ty = v7;
      v46.x = x;
      v46.y = point;
      v13 = CGPointApplyAffineTransform(v46, &v41);
      if (v12 <= v13.y)
      {
        v14 = v12;
        v12 = v13.y;
      }
      else
      {
        v14 = v13.y;
        if (v13.y > v12)
        {
          __break(1u);
LABEL_22:
          __break(1u);
          return;
        }
      }
      v40 = v10;
      v16 = *(_QWORD *)(v10 + 16);
      v15 = *(_QWORD *)(v10 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_1D7AA5F80(v15 > 1, v16 + 1, 1);
        v10 = v40;
      }
      *(_QWORD *)(v10 + 16) = v16 + 1;
      v17 = v10 + 16 * v16;
      *(CGFloat *)(v17 + 32) = v14;
      *(double *)(v17 + 40) = v12;
      v11 += 2;
      if (!--v9)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  v18 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8HealthUI21StateOfMindCoordinate_momentaryYValueRanges);
  v19 = *(_QWORD *)(v18 + 16);
  v20 = MEMORY[0x1E0DEE9D8];
  if (v19)
  {
    v40 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1D7AA5F80(0, v19, 0);
    v20 = v40;
    v21 = (CGFloat *)(v18 + 40);
    do
    {
      v47.y = *(v21 - 1);
      pointa = *v21;
      v41.a = v38;
      v41.b = v37;
      v41.c = v4;
      v41.d = v5;
      v41.tx = v6;
      v41.ty = v7;
      v47.x = x;
      v22 = CGPointApplyAffineTransform(v47, &v41).y;
      v41.a = v38;
      v41.b = v37;
      v41.c = v4;
      v41.d = v5;
      v41.tx = v6;
      v41.ty = v7;
      v48.x = x;
      v48.y = pointa;
      v23 = CGPointApplyAffineTransform(v48, &v41);
      if (v22 <= v23.y)
      {
        v24 = v22;
        v22 = v23.y;
      }
      else
      {
        v24 = v23.y;
        if (v23.y > v22)
          goto LABEL_22;
      }
      v40 = v20;
      v26 = *(_QWORD *)(v20 + 16);
      v25 = *(_QWORD *)(v20 + 24);
      if (v26 >= v25 >> 1)
      {
        sub_1D7AA5F80(v25 > 1, v26 + 1, 1);
        v20 = v40;
      }
      *(_QWORD *)(v20 + 16) = v26 + 1;
      v27 = v20 + 16 * v26;
      *(CGFloat *)(v27 + 32) = v24;
      *(double *)(v27 + 40) = v22;
      v21 += 2;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
  }
  v28 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8HealthUI21StateOfMindCoordinate_userInfo);
  v29 = (objc_class *)type metadata accessor for StateOfMindCoordinate();
  v30 = (char *)objc_allocWithZone(v29);
  *(_QWORD *)&v30[OBJC_IVAR____TtC8HealthUI21StateOfMindCoordinate_xValue] = v31;
  *(CGFloat *)&v30[OBJC_IVAR____TtC8HealthUI21StateOfMindCoordinate_maxYValue] = y;
  *(CGFloat *)&v30[OBJC_IVAR____TtC8HealthUI21StateOfMindCoordinate_minYValue] = v32;
  *(_QWORD *)&v30[OBJC_IVAR____TtC8HealthUI21StateOfMindCoordinate_dailyYValueRanges] = v10;
  *(_QWORD *)&v30[OBJC_IVAR____TtC8HealthUI21StateOfMindCoordinate_momentaryYValueRanges] = v20;
  *(_QWORD *)&v30[OBJC_IVAR____TtC8HealthUI21StateOfMindCoordinate_userInfo] = v28;
  v39.receiver = v30;
  v39.super_class = v29;
  swift_unknownObjectRetain();
  -[CGFloat init](&v39, sel_init);
}

uint64_t sub_1D7AC9354(unint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  char *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  _BYTE v40[16];
  unint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;

  v49 = a2;
  sub_1D7ACB9A8();
  v52 = v3;
  v42 = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x1E0C80A78](v3);
  v44 = &v40[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = MEMORY[0x1E0C80A78](v4);
  v43 = &v40[-v7];
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = &v40[-v9];
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = &v40[-v12];
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = &v40[-v15];
  MEMORY[0x1E0C80A78](v14);
  v56 = &v40[-v17];
  v57 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
  {
LABEL_23:
    swift_bridgeObjectRetain();
    v18 = sub_1D7B4A8A8();
    if (v18)
      goto LABEL_3;
  }
  else
  {
    v18 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v18)
    {
LABEL_3:
      v19 = 0;
      v47 = a1 & 0xC000000000000001;
      v41 = a1 + 32;
      v45 = v18;
      v46 = a1;
      v53 = v10;
      while (1)
      {
        if (v47)
        {
          v22 = (char *)MEMORY[0x1D829E758](v19, a1);
          v23 = __OFADD__(v19, 1);
          v24 = v19 + 1;
          if (v23)
            goto LABEL_22;
        }
        else
        {
          v22 = (char *)*(id *)(v41 + 8 * v19);
          v23 = __OFADD__(v19, 1);
          v24 = v19 + 1;
          if (v23)
          {
LABEL_22:
            __break(1u);
            goto LABEL_23;
          }
        }
        v51 = v24;
        v25 = *v49;
        v50 = v22;
        v26 = &v22[OBJC_IVAR____TtC8HealthUI17BalanceChartPoint_collection];
        v27 = *((_QWORD *)v26 + 3);
        v48 = v26;
        __swift_project_boxed_opaque_existential_0(v26, v27);
        swift_bridgeObjectRetain();
        sub_1D7B49600();
        v55 = v25;
        if (*(_QWORD *)(v25 + 16))
        {
          v28 = v55;
          sub_1D7B4A980();
          sub_1D7B4A1C4();
          sub_1D7AA76D4((unint64_t *)&unk_1F014DF30, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB44E0], MEMORY[0x1E0CB44F0]);
          sub_1D7B4A2A8();
          sub_1D7B4A2A8();
          v29 = sub_1D7B4A998();
          v30 = -1 << *(_BYTE *)(v28 + 32);
          v31 = v29 & ~v30;
          v32 = v28 + 56;
          if (((*(_QWORD *)(v28 + 56 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) != 0)
          {
            v54 = ~v30;
            v33 = *(_QWORD *)(v42 + 72);
            do
            {
              sub_1D7ACBA20(*(_QWORD *)(v55 + 48) + v33 * v31, (uint64_t)v16);
              sub_1D7AA76D4(&qword_1F014D5E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB44E0], MEMORY[0x1E0CB4500]);
              v34 = v56;
              v35 = sub_1D7B4A320();
              sub_1D7ACBA20((uint64_t)v16, (uint64_t)v13);
              v36 = (uint64_t)v34;
              v10 = v13;
              v37 = (uint64_t)v53;
              sub_1D7ACBA20(v36, (uint64_t)v53);
              if ((v35 & 1) != 0)
              {
                v38 = sub_1D7B4A320();
                sub_1D7AAD1B0(v37, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
                sub_1D7AAD1B0((uint64_t)v10, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
                sub_1D7AAD1B0((uint64_t)v16, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
                v13 = v10;
                if ((v38 & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  sub_1D7AAD1B0((uint64_t)v56, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);

                  goto LABEL_7;
                }
              }
              else
              {
                sub_1D7AAD1B0(v37, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
                sub_1D7AAD1B0((uint64_t)v10, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
                sub_1D7AAD1B0((uint64_t)v16, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
                v13 = v10;
              }
              v31 = (v31 + 1) & v54;
            }
            while (((*(_QWORD *)(v32 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) != 0);
          }
        }
        swift_bridgeObjectRelease();
        sub_1D7AAD1B0((uint64_t)v56, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
        __swift_project_boxed_opaque_existential_0(v48, *((_QWORD *)v48 + 3));
        v10 = v44;
        sub_1D7B49600();
        v20 = v43;
        sub_1D7AD19DC((uint64_t)v43, (uint64_t)v10);
        v21 = sub_1D7AAD1B0((uint64_t)v20, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
        MEMORY[0x1D829E3EC](v21);
        if (*(_QWORD *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1D7B4A4C4();
        sub_1D7B4A4DC();
        sub_1D7B4A4B8();
LABEL_7:
        a1 = v46;
        v19 = v51;
        if (v51 == v45)
        {
          swift_bridgeObjectRelease();
          return v57;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1D7AC9880(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  uint64_t v4;
  _QWORD *v6;
  id v7;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 32);
  if (a4)
  {
    sub_1D7AAEAB4();
    swift_allocError();
    *v6 = a4;
    v7 = a4;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    sub_1D7ACBA64();
    v10 = sub_1D7B4A4AC();
    v11 = *(_QWORD *)(*(_QWORD *)(v4 + 64) + 40);
    *(_QWORD *)v11 = v10;
    *(_BYTE *)(v11 + 8) = a3;
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_1D7AC9A70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;

  v6[5] = a5;
  v6[6] = a6;
  v6[3] = a2;
  v6[4] = a3;
  v6[2] = a1;
  v7 = sub_1D7B48D78();
  v6[7] = v7;
  v6[8] = *(_QWORD *)(v7 - 8);
  v6[9] = swift_task_alloc();
  sub_1D7B4A50C();
  v6[10] = sub_1D7B4A500();
  sub_1D7B4A4F4();
  return swift_task_switch();
}

uint64_t sub_1D7AC9B0C()
{
  _QWORD *v0;
  const void *v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  v1 = (const void *)v0[5];
  v2 = (void *)v0[6];
  v3 = (void *)v0[3];
  swift_release();
  v0[11] = _Block_copy(v1);
  sub_1D7B48D3C();
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1F014DF08 + dword_1F014DF08);
  v4 = v3;
  v5 = v2;
  v6 = (_QWORD *)swift_task_alloc();
  v0[12] = v6;
  *v6 = v0;
  v6[1] = sub_1D7AC9BB8;
  return v8(v0[9], v0[3], v0[4]);
}

uint64_t sub_1D7AC9BB8(char a1)
{
  void *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  v4 = *v2;
  swift_task_dealloc();
  v5 = *(_QWORD *)(v4 + 88);
  v6 = *(void **)(v4 + 48);
  v7 = *(void **)(v4 + 24);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v4 + 64) + 8))(*(_QWORD *)(v4 + 72), *(_QWORD *)(v4 + 56));

  if (v1)
  {
    v8 = (void *)sub_1D7B49024();

    (*(void (**)(uint64_t, _QWORD, void *))(v5 + 16))(v5, 0, v8);
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v5 + 16))(v5, a1 & 1, 0);
  }
  _Block_release(*(const void **)(v4 + 88));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v4 + 8))();
}

void sub_1D7AC9D1C()
{
  sub_1D7B4A890();
  __break(1u);
}

id sub_1D7AC9DA0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BalanceOverlayContext();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for BalanceOverlayContext()
{
  return objc_opt_self();
}

uint64_t sub_1D7AC9E38()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 48));
  return swift_deallocObject();
}

uint64_t sub_1D7AC9E74()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v7 = v0[6];
  v6 = v0[7];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = sub_1D7AB7968;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1F014DEC8
                                                                                       + dword_1F014DEC8))(v2, v3, v4, v5, v7, v6);
}

uint64_t sub_1D7AC9F00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_1D7ACB9A8();
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4);
  v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)v21 - v11;
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)v21 - v13;
  if (*(_QWORD *)(a2 + 16))
  {
    sub_1D7B4A980();
    sub_1D7B4A1C4();
    sub_1D7AA76D4((unint64_t *)&unk_1F014DF30, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB44E0], MEMORY[0x1E0CB44F0]);
    sub_1D7B4A2A8();
    v21[1] = v5;
    sub_1D7B4A2A8();
    v15 = sub_1D7B4A998();
    v16 = -1 << *(_BYTE *)(a2 + 32);
    v17 = v15 & ~v16;
    v24 = a2 + 56;
    if (((*(_QWORD *)(a2 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
    {
      v22 = ~v16;
      v23 = *(_QWORD *)(v6 + 72);
      do
      {
        sub_1D7ACBA20(*(_QWORD *)(a2 + 48) + v23 * v17, (uint64_t)v14);
        sub_1D7AA76D4(&qword_1F014D5E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB44E0], MEMORY[0x1E0CB4500]);
        v18 = sub_1D7B4A320();
        sub_1D7ACBA20((uint64_t)v14, (uint64_t)v12);
        sub_1D7ACBA20(a1, (uint64_t)v9);
        if ((v18 & 1) != 0)
        {
          v19 = sub_1D7B4A320();
          sub_1D7AAD1B0((uint64_t)v9, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
          sub_1D7AAD1B0((uint64_t)v12, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
          sub_1D7AAD1B0((uint64_t)v14, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
          if ((v19 & 1) != 0)
            return 1;
        }
        else
        {
          sub_1D7AAD1B0((uint64_t)v9, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
          sub_1D7AAD1B0((uint64_t)v12, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
          sub_1D7AAD1B0((uint64_t)v14, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
        }
        v17 = (v17 + 1) & v22;
      }
      while (((*(_QWORD *)(v24 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0);
    }
  }
  return 0;
}

uint64_t sub_1D7ACA18C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_1D7AC78A8;
  return v6();
}

uint64_t sub_1D7ACA1E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1D7AC78A8;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1F014DED8 + dword_1F014DED8))(v2, v3, v4);
}

uint64_t sub_1D7ACA25C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_1D7AC78A8;
  return v7();
}

uint64_t objectdestroy_4Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1D7ACA2E0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1D7AC78A8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1F014DEE8 + dword_1F014DEE8))(a1, v4, v5, v6);
}

uint64_t sub_1D7ACA364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1D7B4A530();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1D7B4A524();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_1D7AB1148(a1, &qword_1F014DEC0, (void (*)(uint64_t))MEMORY[0x1E0DF0750]);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1D7B4A4F4();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1D7ACA4B8(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1D7ACA51C;
  return v6(a1);
}

uint64_t sub_1D7ACA51C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1D7ACA568()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1D7ACA58C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1D7AB7968;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1F014DEF8 + dword_1F014DEF8))(a1, v4);
}

uint64_t sub_1D7ACA5FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;

  v4[25] = a3;
  v4[26] = v3;
  v4[23] = a1;
  v4[24] = a2;
  v4[27] = swift_getObjectType();
  v5 = sub_1D7B4969C();
  v4[28] = v5;
  v4[29] = *(_QWORD *)(v5 - 8);
  v4[30] = swift_task_alloc();
  v4[31] = swift_task_alloc();
  v4[32] = swift_task_alloc();
  v4[33] = swift_task_alloc();
  v6 = sub_1D7B48D78();
  v4[34] = v6;
  v4[35] = *(_QWORD *)(v6 - 8);
  v4[36] = swift_task_alloc();
  v7 = sub_1D7B49198();
  v8 = (void (*)(uint64_t))MEMORY[0x1E0CB0870];
  v4[37] = v7;
  v4[38] = *(_QWORD *)(v7 - 8);
  v4[39] = swift_task_alloc();
  sub_1D7ACB938();
  v4[40] = v9;
  v4[41] = swift_task_alloc();
  v4[42] = swift_task_alloc();
  sub_1D7AAE0AC(0, (unint64_t *)&qword_1F014D000, v8);
  v4[43] = swift_task_alloc();
  v4[44] = swift_task_alloc();
  v4[45] = swift_task_alloc();
  v4[46] = swift_task_alloc();
  v4[47] = swift_task_alloc();
  v4[48] = swift_task_alloc();
  sub_1D7B4A50C();
  v4[49] = sub_1D7B4A500();
  v4[50] = sub_1D7B4A4F4();
  v4[51] = v10;
  return swift_task_switch();
}

uint64_t sub_1D7ACA7C0()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  void (*v58)(uint64_t);
  id v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t);
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t);
  NSObject *v84;
  os_log_type_t v85;
  _BOOL4 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t);
  char v99;
  void (*v100)(uint64_t, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  void (*v106)(uint64_t, uint64_t);
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  id v122;
  id v123;
  void *v124;
  uint64_t v125;

  v1 = objc_msgSend(*(id *)(*(_QWORD *)(v0 + 208) + OBJC_IVAR____TtC8HealthUI21BalanceOverlayContext_baseDisplayType), sel_graphSeriesForTimeScope_, *(_QWORD *)(v0 + 200));
  *(_QWORD *)(v0 + 416) = v1;
  if (!v1)
  {
    swift_release();
    sub_1D7B4966C();
    v11 = sub_1D7B49684();
    v12 = sub_1D7B4A608();
    v13 = os_log_type_enabled(v11, v12);
    v14 = *(_QWORD *)(v0 + 248);
    v16 = *(_QWORD *)(v0 + 224);
    v15 = *(_QWORD *)(v0 + 232);
    if (v13)
    {
      v17 = (uint8_t *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      v125 = v18;
      *(_DWORD *)v17 = 136446210;
      v19 = sub_1D7B4AA94();
      *(_QWORD *)(v0 + 144) = sub_1D7AA4DE4(v19, v20, &v125);
      sub_1D7B4A704();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D7813000, v11, v12, "[%{public}s] cannot update context item without a graph series", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D829FFF4](v18, -1, -1);
      v21 = v17;
      v1 = 0;
      MEMORY[0x1D829FFF4](v21, -1, -1);

    }
    else
    {

    }
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    v49 = *(_QWORD **)(v0 + 208);
    v50 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v49) + 0xB8))(MEMORY[0x1E0DEE9D8], *(_QWORD *)(v0 + 200), 0);
    v51 = *(void **)((char *)v49 + OBJC_IVAR____TtC8HealthUI21BalanceOverlayContext_currentContextItem);
    *(_QWORD *)((char *)v49 + OBJC_IVAR____TtC8HealthUI21BalanceOverlayContext_currentContextItem) = v50;

    goto LABEL_29;
  }
  v2 = objc_msgSend(*(id *)(v0 + 192), sel_primaryGraphViewController);
  v3 = objc_msgSend(v2, sel_graphView);

  v4 = objc_msgSend(v3, sel_effectiveVisibleRangeActive);
  *(_QWORD *)(v0 + 424) = v4;

  v122 = v4;
  v5 = objc_msgSend(v4, sel_startDate);
  v6 = *(_QWORD *)(v0 + 384);
  v8 = *(_QWORD *)(v0 + 296);
  v7 = *(_QWORD *)(v0 + 304);
  v124 = v1;
  if (v5)
  {
    v9 = v5;
    sub_1D7B49168();

    v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v10(v6, 0, 1, v8);
  }
  else
  {
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v10(v6, 1, 1, v8);
  }
  v23 = *(_QWORD *)(v0 + 376);
  v22 = *(_QWORD *)(v0 + 384);
  v24 = *(_QWORD *)(v0 + 336);
  v25 = *(_QWORD *)(v0 + 320);
  v27 = *(_QWORD *)(v0 + 296);
  v26 = *(_QWORD *)(v0 + 304);
  sub_1D7B48D60();
  v10(v23, 0, 1, v27);
  v28 = v24 + *(int *)(v25 + 48);
  sub_1D7AA7B0C(v22, v24);
  sub_1D7AA7B0C(v23, v28);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
  if (v29(v24, 1, v27) == 1)
  {
    v30 = *(_QWORD *)(v0 + 384);
    v31 = *(_QWORD *)(v0 + 296);
    v32 = (void (*)(uint64_t))MEMORY[0x1E0CB0870];
    sub_1D7AB1148(*(_QWORD *)(v0 + 376), (unint64_t *)&qword_1F014D000, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    sub_1D7AB1148(v30, (unint64_t *)&qword_1F014D000, v32);
    if (v29(v28, 1, v31) == 1)
    {
      v34 = *(_QWORD *)(v0 + 280);
      v33 = *(_QWORD *)(v0 + 288);
      v35 = *(_QWORD *)(v0 + 272);
      v36 = *(_QWORD *)(v0 + 184);
      sub_1D7AB1148(*(_QWORD *)(v0 + 336), (unint64_t *)&qword_1F014D000, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v33, v36, v35);
      goto LABEL_17;
    }
    goto LABEL_12;
  }
  v37 = *(_QWORD *)(v0 + 296);
  sub_1D7AA7B0C(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 368));
  v38 = v29(v28, 1, v37);
  v40 = *(_QWORD *)(v0 + 376);
  v39 = *(_QWORD *)(v0 + 384);
  v41 = *(_QWORD *)(v0 + 368);
  if (v38 == 1)
  {
    v43 = *(_QWORD *)(v0 + 296);
    v42 = *(_QWORD *)(v0 + 304);
    v44 = (void (*)(uint64_t))MEMORY[0x1E0CB0870];
    sub_1D7AB1148(*(_QWORD *)(v0 + 376), (unint64_t *)&qword_1F014D000, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    sub_1D7AB1148(v39, (unint64_t *)&qword_1F014D000, v44);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v43);
LABEL_12:
    v45 = *(_QWORD *)(v0 + 280);
    v46 = *(_QWORD *)(v0 + 288);
    v47 = *(_QWORD *)(v0 + 272);
    v48 = *(_QWORD *)(v0 + 184);
    sub_1D7AAD1B0(*(_QWORD *)(v0 + 336), (uint64_t (*)(_QWORD))sub_1D7ACB938);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16))(v46, v48, v47);
LABEL_13:
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 8))(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 272));
    goto LABEL_26;
  }
  v118 = v25;
  v52 = *(_QWORD *)(v0 + 304);
  v53 = *(_QWORD *)(v0 + 312);
  v54 = *(_QWORD *)(v0 + 296);
  v110 = *(_QWORD *)(v0 + 280);
  v111 = *(_QWORD *)(v0 + 336);
  v113 = *(_QWORD *)(v0 + 272);
  v115 = *(_QWORD *)(v0 + 288);
  v112 = *(_QWORD *)(v0 + 184);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v53, v28, v54);
  sub_1D7AA76D4((unint64_t *)&qword_1F014FA00, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B8]);
  v55 = sub_1D7B4A320();
  v56 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
  v56(v53, v54);
  v57 = v40;
  v58 = (void (*)(uint64_t))MEMORY[0x1E0CB0870];
  sub_1D7AB1148(v57, (unint64_t *)&qword_1F014D000, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  sub_1D7AB1148(v39, (unint64_t *)&qword_1F014D000, v58);
  v56(v41, v54);
  v25 = v118;
  sub_1D7AB1148(v111, (unint64_t *)&qword_1F014D000, v58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v110 + 16))(v115, v112, v113);
  if ((v55 & 1) == 0)
    goto LABEL_13;
LABEL_17:
  v59 = objc_msgSend(v122, sel_endDate);
  if (v59)
  {
    v60 = v59;
    sub_1D7B49168();

    v61 = 0;
  }
  else
  {
    v61 = 1;
  }
  v63 = *(_QWORD *)(v0 + 352);
  v62 = *(_QWORD *)(v0 + 360);
  v64 = *(_QWORD *)(v0 + 328);
  v65 = *(_QWORD *)(v0 + 296);
  v10(v62, v61, 1, v65);
  sub_1D7B48D48();
  v10(v63, 0, 1, v65);
  v66 = v64 + *(int *)(v25 + 48);
  sub_1D7AA7B0C(v62, v64);
  sub_1D7AA7B0C(v63, v66);
  if (v29(v64, 1, v65) != 1)
  {
    v73 = *(_QWORD *)(v0 + 296);
    v74 = *(_QWORD *)(v0 + 304);
    sub_1D7AA7B0C(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 344));
    v75 = v29(v66, 1, v73);
    v76 = *(_QWORD *)(v0 + 352);
    v77 = *(_QWORD *)(v0 + 360);
    v78 = *(_QWORD *)(v0 + 344);
    if (v75 != 1)
    {
      v95 = *(_QWORD *)(v0 + 312);
      v96 = *(_QWORD *)(v0 + 296);
      v117 = *(_QWORD *)(v0 + 288);
      v121 = *(_QWORD *)(v0 + 328);
      v97 = *(_QWORD *)(v0 + 280);
      v114 = *(_QWORD *)(v0 + 272);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 304) + 32))(v95, v66, v96);
      v98 = (void (*)(uint64_t))MEMORY[0x1E0CB0870];
      sub_1D7AA76D4((unint64_t *)&qword_1F014FA00, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B8]);
      v99 = sub_1D7B4A320();
      v100 = *(void (**)(uint64_t, uint64_t))(v74 + 8);
      v100(v95, v96);
      sub_1D7AB1148(v76, (unint64_t *)&qword_1F014D000, v98);
      sub_1D7AB1148(v77, (unint64_t *)&qword_1F014D000, v98);
      (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v117, v114);
      v100(v78, v96);
      sub_1D7AB1148(v121, (unint64_t *)&qword_1F014D000, v98);
      if ((v99 & 1) != 0)
        goto LABEL_31;
      goto LABEL_26;
    }
    v79 = *(_QWORD *)(v0 + 288);
    v119 = *(_QWORD *)(v0 + 296);
    v80 = v74;
    v82 = *(_QWORD *)(v0 + 272);
    v81 = *(_QWORD *)(v0 + 280);
    v83 = (void (*)(uint64_t))MEMORY[0x1E0CB0870];
    sub_1D7AB1148(v76, (unint64_t *)&qword_1F014D000, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    sub_1D7AB1148(v77, (unint64_t *)&qword_1F014D000, v83);
    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v79, v82);
    (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v78, v119);
    goto LABEL_25;
  }
  v67 = *(_QWORD *)(v0 + 360);
  v69 = *(_QWORD *)(v0 + 288);
  v68 = *(_QWORD *)(v0 + 296);
  v70 = *(_QWORD *)(v0 + 272);
  v71 = *(_QWORD *)(v0 + 280);
  v72 = (void (*)(uint64_t))MEMORY[0x1E0CB0870];
  sub_1D7AB1148(*(_QWORD *)(v0 + 352), (unint64_t *)&qword_1F014D000, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  sub_1D7AB1148(v67, (unint64_t *)&qword_1F014D000, v72);
  (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v69, v70);
  if (v29(v66, 1, v68) != 1)
  {
LABEL_25:
    sub_1D7AAD1B0(*(_QWORD *)(v0 + 328), (uint64_t (*)(_QWORD))sub_1D7ACB938);
LABEL_26:
    swift_release();
    sub_1D7B4966C();
    v84 = sub_1D7B49684();
    v85 = sub_1D7B4A620();
    v86 = os_log_type_enabled(v84, v85);
    v87 = *(_QWORD *)(v0 + 256);
    v88 = *(_QWORD *)(v0 + 224);
    v89 = *(_QWORD *)(v0 + 232);
    if (v86)
    {
      v120 = *(_QWORD *)(v0 + 224);
      v116 = *(_QWORD *)(v0 + 256);
      v90 = (uint8_t *)swift_slowAlloc();
      v91 = swift_slowAlloc();
      v125 = v91;
      *(_DWORD *)v90 = 136446210;
      v92 = sub_1D7B4AA94();
      *(_QWORD *)(v0 + 136) = sub_1D7AA4DE4(v92, v93, &v125);
      sub_1D7B4A704();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D7813000, v84, v85, "[%{public}s] skipping update for out of range dates", v90, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D829FFF4](v91, -1, -1);
      MEMORY[0x1D829FFF4](v90, -1, -1);

      v1 = v124;
      (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v116, v120);
    }
    else
    {

      v1 = v124;
      (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v87, v88);
    }
LABEL_29:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(BOOL))(v0 + 8))(v1 != 0);
  }
  sub_1D7AB1148(*(_QWORD *)(v0 + 328), (unint64_t *)&qword_1F014D000, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
LABEL_31:
  v101 = *(_QWORD *)(v0 + 304);
  v102 = *(_QWORD *)(v0 + 312);
  v103 = *(_QWORD *)(v0 + 296);
  v104 = *(void **)(v0 + 192);
  v123 = *(id *)(v0 + 200);
  sub_1D7B48D60();
  v105 = sub_1D7B49150();
  *(_QWORD *)(v0 + 432) = v105;
  v106 = *(void (**)(uint64_t, uint64_t))(v101 + 8);
  v106(v102, v103);
  sub_1D7B48D48();
  v107 = sub_1D7B49150();
  *(_QWORD *)(v0 + 440) = v107;
  v106(v102, v103);
  *(_QWORD *)(v0 + 56) = v0 + 120;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_1D7ACB2C0;
  v108 = swift_continuation_init();
  *(_QWORD *)(v0 + 80) = MEMORY[0x1E0C809B0];
  v109 = (_QWORD *)(v0 + 80);
  v109[1] = 0x40000000;
  v109[2] = sub_1D7AC9880;
  v109[3] = &block_descriptor_2;
  v109[4] = v108;
  objc_msgSend(v104, sel_cachedDataForCustomGraphSeries_timeScope_resolution_startDate_endDate_completion_, v124, v123, 0, v105, v107, v109);
  return swift_continuation_await();
}

uint64_t sub_1D7ACB2C0()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 448) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_1D7ACB31C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  unint64_t v3;
  unint64_t v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v25;
  uint64_t v26;
  uint64_t v27[2];

  v2 = *(void **)(v0 + 432);
  v1 = *(void **)(v0 + 440);
  swift_release();
  v3 = *(_QWORD *)(v0 + 120);

  v4 = sub_1D7AE2490(v3);
  swift_bridgeObjectRelease();
  if (v4)
  {
    v6 = *(void **)(v0 + 416);
    v5 = *(void **)(v0 + 424);
    v8 = *(_QWORD *)(v0 + 200);
    v7 = *(_QWORD **)(v0 + 208);
    v27[0] = MEMORY[0x1E0DEE9E8];
    v9 = sub_1D7AC9354(v4, v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v7) + 0xB8))(v9, v8, 0);
    swift_bridgeObjectRelease();
    v11 = *(void **)((char *)v7 + OBJC_IVAR____TtC8HealthUI21BalanceOverlayContext_currentContextItem);
    *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC8HealthUI21BalanceOverlayContext_currentContextItem) = v10;

  }
  else
  {
    sub_1D7B4966C();
    v12 = sub_1D7B49684();
    v13 = sub_1D7B4A608();
    v14 = os_log_type_enabled(v12, v13);
    v15 = *(void **)(v0 + 416);
    v16 = *(void **)(v0 + 424);
    v17 = *(_QWORD *)(v0 + 264);
    v18 = *(_QWORD *)(v0 + 224);
    v19 = *(_QWORD *)(v0 + 232);
    if (v14)
    {
      v26 = *(_QWORD *)(v0 + 264);
      v20 = (uint8_t *)swift_slowAlloc();
      v25 = v15;
      v21 = swift_slowAlloc();
      v27[0] = v21;
      *(_DWORD *)v20 = 136446210;
      v22 = sub_1D7B4AA94();
      *(_QWORD *)(v0 + 176) = sub_1D7AA4DE4(v22, v23, v27);
      sub_1D7B4A704();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D7813000, v12, v13, "[%{public}s] skipping update for incompatible chart points", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D829FFF4](v21, -1, -1);
      MEMORY[0x1D829FFF4](v20, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v26, v18);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(BOOL))(v0 + 8))(v4 != 0);
}

uint64_t sub_1D7ACB630()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[2];

  v2 = *(void **)(v0 + 440);
  v1 = *(void **)(v0 + 448);
  v4 = *(void **)(v0 + 424);
  v3 = *(void **)(v0 + 432);
  swift_release();
  swift_willThrow();

  sub_1D7B4966C();
  v5 = v1;
  v6 = v1;
  v7 = sub_1D7B49684();
  v8 = sub_1D7B4A608();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = *(void **)(v0 + 448);
    v10 = *(void **)(v0 + 416);
    v23 = *(_QWORD *)(v0 + 232);
    v24 = *(_QWORD *)(v0 + 224);
    v25 = *(_QWORD *)(v0 + 240);
    v11 = swift_slowAlloc();
    v12 = swift_slowAlloc();
    v26[0] = v12;
    *(_DWORD *)v11 = 136446466;
    v13 = sub_1D7B4AA94();
    *(_QWORD *)(v0 + 152) = sub_1D7AA4DE4(v13, v14, v26);
    sub_1D7B4A704();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    *(_QWORD *)(v0 + 160) = v9;
    v15 = v9;
    sub_1D7AAEAB4();
    v16 = sub_1D7B4A3E0();
    *(_QWORD *)(v0 + 168) = sub_1D7AA4DE4(v16, v17, v26);
    sub_1D7B4A704();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1D7813000, v7, v8, "[%{public}s] skipping update due to fetch error: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1D829FFF4](v12, -1, -1);
    MEMORY[0x1D829FFF4](v11, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v24);
  }
  else
  {
    v18 = *(void **)(v0 + 448);
    v20 = *(_QWORD *)(v0 + 232);
    v19 = *(_QWORD *)(v0 + 240);
    v21 = *(_QWORD *)(v0 + 224);

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

void sub_1D7ACB938()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1F014DF10)
  {
    sub_1D7AAE0AC(255, (unint64_t *)&qword_1F014D000, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1F014DF10);
  }
}

void sub_1D7ACB9A8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014DF20)
  {
    sub_1D7B4A1C4();
    sub_1D7AA76D4((unint64_t *)&unk_1F014F450, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB44E0], MEMORY[0x1E0CB44F8]);
    v0 = sub_1D7B4A314();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014DF20);
  }
}

uint64_t sub_1D7ACBA20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1D7ACB9A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1D7ACBA64()
{
  unint64_t result;

  result = qword_1F014DF40;
  if (!qword_1F014DF40)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1F014DF40);
  }
  return result;
}

BOOL AttributedDurationFormatterUnitsStyle.init(rawValue:)(uint64_t a1)
{
  return a1 && a1 == 1;
}

_QWORD *sub_1D7ACBADC@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;

  v2 = *result != 1 && *result != 0;
  *(_QWORD *)a2 = *result == 1;
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t sub_1D7ACBB84(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _QWORD v19[2];

  v8 = sub_1D7B4AA58();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1D7B48F4C();
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1D7B4AA88();
  v17 = v16;
  if (a1 == 1)
  {
    sub_1D7B4AA4C();
LABEL_5:
    sub_1D7ACBCF0();
    sub_1D7ACBECC(v15, v17, (uint64_t)v11, a2, a3, a4, (uint64_t)v14);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return sub_1D7B4A680();
  }
  if (!a1)
  {
    sub_1D7B4AA34();
    goto LABEL_5;
  }
  v19[1] = a1;
  result = sub_1D7B4A950();
  __break(1u);
  return result;
}

unint64_t sub_1D7ACBCF0()
{
  unint64_t result;

  result = qword_1F014DC50;
  if (!qword_1F014DC50)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1F014DC50);
  }
  return result;
}

uint64_t sub_1D7ACBECC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t KeyPath;
  void *v31;
  id v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;

  v53 = a5;
  v54 = a6;
  v51 = a7;
  v52 = a4;
  v42 = a3;
  v9 = sub_1D7B48F1C();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v49 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1D7B48F4C();
  v50 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v48 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1D7B4AA04();
  MEMORY[0x1E0C80A78](v14);
  v41 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1D7B4A9C8();
  MEMORY[0x1E0C80A78](v16);
  v17 = sub_1D7B4AA58();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1D7B4AA64();
  v39 = *(_QWORD *)(v21 - 8);
  v40 = v21;
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v36 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1D7B4A9E0();
  v44 = *(_QWORD *)(v24 - 8);
  v45 = v24;
  MEMORY[0x1E0C80A78](v24);
  v43 = (char *)&v36 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7B4AA88();
  v46 = a1;
  v47 = a2;
  if ((sub_1D7B4AA7C() & 1) != 0)
    return sub_1D7ACC87C(v52, v53, v54, v51);
  sub_1D7AA787C(0, &qword_1F014DF90, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB27F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v38 = v12;
  sub_1D7B4AA28();
  v36 = v10;
  v37 = v9;
  v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_1D7B82CE0;
  sub_1D7B4AA10();
  sub_1D7B4AA1C();
  sub_1D7AE6C7C(v27);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v42, v17);
  sub_1D7B4A9BC();
  sub_1D7B4A9F8();
  sub_1D7B4A9B0();
  v28 = v43;
  sub_1D7B4A9EC();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v23, v40);
  v29 = (uint64_t)v48;
  sub_1D7B4A9D4();
  KeyPath = swift_getKeyPath();
  *(&v36 - 2) = MEMORY[0x1E0C80A78](KeyPath);
  swift_getKeyPath();
  v31 = v52;
  v55 = v52;
  sub_1D7ACCFEC();
  v32 = v31;
  sub_1D7B48EBC();
  v33 = (uint64_t)v49;
  sub_1D7B48F28();
  v34 = v53;
  v35 = v54;
  sub_1D7ACD0CC(v33, v29, v34, v35);

  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v33, v37);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v28, v45);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))(v51, v29, v38);
}

uint64_t sub_1D7ACC308(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  int v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  uint64_t v39;
  id v40;
  void (*v41)(char *, _QWORD);
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t KeyPath;
  char v50[32];
  void *v51;

  v43 = a3;
  v44 = a4;
  v46 = a2;
  sub_1D7ABA240();
  v45 = v4;
  MEMORY[0x1E0C80A78](v4);
  v47 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7ACD4D8();
  v7 = v6;
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7ACD560(0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v43 - v15;
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v43 - v17;
  sub_1D7ACD544(0);
  v20 = MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v43 - v23;
  KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  sub_1D7AA76D4(&qword_1F014DFB8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAECD8], MEMORY[0x1E0CAECD0]);
  sub_1D7B48EEC();
  swift_release();
  v48 = swift_getKeyPath();
  swift_getKeyPath();
  sub_1D7ACD5E0();
  sub_1D7B48EEC();
  swift_release();
  v25 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_1D7AACCDC((uint64_t)v24, (uint64_t)v9, (uint64_t (*)(_QWORD))sub_1D7ACD544);
  sub_1D7AACCDC((uint64_t)v18, v25, (uint64_t (*)(_QWORD))sub_1D7ACD560);
  v26 = sub_1D7B48DF0();
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v9, 1, v26) == 1)
    goto LABEL_14;
  sub_1D7AAD16C((uint64_t)v9, (uint64_t)v22, (uint64_t (*)(_QWORD))sub_1D7ACD544);
  v28 = (*(uint64_t (**)(char *, uint64_t))(v27 + 88))(v22, v26);
  if (v28 != *MEMORY[0x1E0CAECB0])
  {
    if (v28 == *MEMORY[0x1E0CAECA8])
    {
      v26 = sub_1D7B48E08();
      v35 = *(_QWORD *)(v26 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v25, 1, v26) == 1)
        goto LABEL_14;
      sub_1D7AAD16C(v25, (uint64_t)v13, (uint64_t (*)(_QWORD))sub_1D7ACD560);
      v36 = (*(uint64_t (**)(char *, uint64_t))(v35 + 88))(v13, v26);
      if (v36 == *MEMORY[0x1E0CAED30] || v36 == *MEMORY[0x1E0CAED40])
        goto LABEL_14;
      v37 = *(void (**)(char *, uint64_t))(v35 + 8);
      v38 = v13;
    }
    else
    {
      v37 = *(void (**)(char *, uint64_t))(v27 + 8);
      v38 = v22;
    }
    v37(v38, v26);
LABEL_14:
    v32 = (uint64_t)v47;
    sub_1D7B48EF8();
    v39 = swift_getKeyPath();
    *(&v43 - 2) = (void *)MEMORY[0x1E0C80A78](v39);
    swift_getKeyPath();
    v34 = v44;
    goto LABEL_15;
  }
  v29 = sub_1D7B48E08();
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v25, 1, v29) == 1)
    goto LABEL_14;
  sub_1D7AAD16C(v25, (uint64_t)v16, (uint64_t (*)(_QWORD))sub_1D7ACD560);
  v31 = (*(uint64_t (**)(char *, uint64_t))(v30 + 88))(v16, v29);
  if (v31 != *MEMORY[0x1E0CAED30] && v31 != *MEMORY[0x1E0CAED40])
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v16, v29);
    goto LABEL_14;
  }
  v32 = (uint64_t)v47;
  sub_1D7B48EF8();
  v33 = swift_getKeyPath();
  *(&v43 - 2) = (void *)MEMORY[0x1E0C80A78](v33);
  swift_getKeyPath();
  v34 = v43;
LABEL_15:
  v51 = v34;
  v40 = v34;
  sub_1D7AA76D4(&qword_1F01493F0, (uint64_t (*)(uint64_t))sub_1D7ABA240, MEMORY[0x1E0DEB8A8]);
  v41 = (void (*)(char *, _QWORD))sub_1D7B48F64();
  sub_1D7ACD070();
  sub_1D7B48FDC();
  v41(v50, 0);
  sub_1D7AAD1B0(v32, (uint64_t (*)(_QWORD))sub_1D7ABA240);
  sub_1D7AAD1B0(v25, (uint64_t (*)(_QWORD))sub_1D7ACD560);
  return sub_1D7AAD1B0((uint64_t)v9, (uint64_t (*)(_QWORD))sub_1D7ACD544);
}

uint64_t sub_1D7ACC828()
{
  sub_1D7ACD698();
  return sub_1D7B4A320() & 1;
}

uint64_t sub_1D7ACC87C@<X0>(void *a1@<X1>, void *a2@<X2>, void *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  id v38;
  unint64_t v39;
  char *v40;
  char *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v47 = a3;
  v42 = a2;
  v52 = a4;
  sub_1D7ACCFAC(0);
  MEMORY[0x1E0C80A78](v5);
  v51 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7ACCFC8(0);
  MEMORY[0x1E0C80A78](v7);
  v50 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7ABA240();
  v48 = *(_QWORD *)(v9 - 8);
  v49 = v9;
  MEMORY[0x1E0C80A78](v9);
  v37 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1D7B4921C();
  v44 = *(_QWORD *)(v11 - 8);
  v45 = v11;
  MEMORY[0x1E0C80A78](v11);
  v41 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1D7B4A380();
  MEMORY[0x1E0C80A78](v13);
  v40 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1D7B4A368();
  MEMORY[0x1E0C80A78](v15);
  v16 = sub_1D7B48FD0();
  MEMORY[0x1E0C80A78](v16);
  v43 = sub_1D7B48F4C();
  v46 = *(_QWORD *)(v43 - 8);
  MEMORY[0x1E0C80A78](v43);
  v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1F014CF90 != -1)
    swift_once();
  v19 = (id)qword_1F0154598;
  v39 = 0x80000001D7BA4B20;
  v20 = sub_1D7B48F7C();
  v22 = v21;

  swift_bridgeObjectRetain();
  sub_1D7B48FC4();
  sub_1D7B48F58();
  KeyPath = swift_getKeyPath();
  MEMORY[0x1E0C80A78](KeyPath);
  swift_getKeyPath();
  v53 = (uint64_t)a1;
  sub_1D7ACCFEC();
  v38 = a1;
  sub_1D7B48EBC();
  v24 = swift_getKeyPath();
  MEMORY[0x1E0C80A78](v24);
  swift_getKeyPath();
  v25 = v42;
  v53 = (uint64_t)v42;
  sub_1D7ACD070();
  v26 = v25;
  sub_1D7B48EBC();
  sub_1D7B4A35C();
  sub_1D7B4A350();
  sub_1D7B4A344();
  sub_1D7B4A350();
  sub_1D7B4A374();
  v27 = (id)qword_1F0154598;
  sub_1D7B49210();
  sub_1D7B4A3D4();
  sub_1D7B48FC4();
  sub_1D7B48F58();
  v28 = swift_getKeyPath();
  MEMORY[0x1E0C80A78](v28);
  swift_getKeyPath();
  v53 = (uint64_t)a1;
  v29 = v38;
  sub_1D7B48EBC();
  v30 = swift_getKeyPath();
  MEMORY[0x1E0C80A78](v30);
  swift_getKeyPath();
  v53 = (uint64_t)v47;
  v31 = v47;
  sub_1D7B48EBC();
  v53 = v20;
  v54 = v22;
  v32 = (uint64_t)v51;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v44 + 56))(v51, 1, 1, v45);
  sub_1D7AA76D4(&qword_1F014DF88, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], MEMORY[0x1E0CAF230]);
  sub_1D7ABCCEC();
  v33 = (uint64_t)v50;
  v34 = v43;
  sub_1D7B4903C();
  sub_1D7AAD1B0(v32, (uint64_t (*)(_QWORD))sub_1D7ACCFAC);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v33, 1, v49) == 1)
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v18, v34);
    return sub_1D7AAD1B0(v33, (uint64_t (*)(_QWORD))sub_1D7ACCFC8);
  }
  else
  {
    v36 = v37;
    sub_1D7AACCDC(v33, v37, (uint64_t (*)(_QWORD))sub_1D7ABA240);
    sub_1D7AA76D4(&qword_1F01493F0, (uint64_t (*)(uint64_t))sub_1D7ABA240, MEMORY[0x1E0DEB8A8]);
    sub_1D7B48EC8();
    sub_1D7AAD1B0(v36, (uint64_t (*)(_QWORD))sub_1D7ABA240);
    return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v18, v34);
  }
}

id AttributedDurationFormatter.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AttributedDurationFormatter();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for AttributedDurationFormatter()
{
  return objc_opt_self();
}

unint64_t sub_1D7ACCF44()
{
  unint64_t result;

  result = qword_1F014DF48;
  if (!qword_1F014DF48)
  {
    result = MEMORY[0x1D829FF28](&protocol conformance descriptor for AttributedDurationFormatterUnitsStyle, &type metadata for AttributedDurationFormatterUnitsStyle);
    atomic_store(result, (unint64_t *)&qword_1F014DF48);
  }
  return result;
}

ValueMetadata *type metadata accessor for AttributedDurationFormatterUnitsStyle()
{
  return &type metadata for AttributedDurationFormatterUnitsStyle;
}

uint64_t method lookup function for AttributedDurationFormatter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static AttributedDurationFormatter.formattedValue(duration:unitsStyle:font:valueColor:unitColor:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

void sub_1D7ACCFAC(uint64_t a1)
{
  sub_1D7AA787C(a1, &qword_1F014D7B0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void sub_1D7ACCFC8(uint64_t a1)
{
  sub_1D7AA787C(a1, &qword_1F01493E8, (uint64_t (*)(uint64_t))sub_1D7ABA240, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

unint64_t sub_1D7ACCFEC()
{
  unint64_t result;

  result = qword_1F014DF78;
  if (!qword_1F014DF78)
  {
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0DC1948], MEMORY[0x1E0DC1958]);
    atomic_store(result, (unint64_t *)&qword_1F014DF78);
  }
  return result;
}

uint64_t sub_1D7ACD034()
{
  return 8;
}

uint64_t sub_1D7ACD040()
{
  return swift_release();
}

uint64_t sub_1D7ACD048(_QWORD *a1, _QWORD *a2)
{
  *a2 = *a1;
  return swift_retain();
}

_QWORD *sub_1D7ACD05C(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

unint64_t sub_1D7ACD070()
{
  unint64_t result;

  result = qword_1F014DF80;
  if (!qword_1F014DF80)
  {
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0DC18E8], MEMORY[0x1E0DC18F8]);
    atomic_store(result, (unint64_t *)&qword_1F014DF80);
  }
  return result;
}

uint64_t sub_1D7ACD0B8()
{
  return 8;
}

uint64_t sub_1D7ACD0CC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char v27;
  void (*v28)(char *, uint64_t);
  void (*v29)(char *, _QWORD);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void (*v42)(char *, uint64_t, uint64_t);
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char v53[32];
  uint64_t v54;

  v40 = a3;
  v41 = a4;
  v39 = a2;
  v5 = sub_1D7B48F04();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF138];
  v46 = *(_QWORD *)(v5 - 8);
  v47 = v5;
  MEMORY[0x1E0C80A78](v5);
  v38 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1D7B48F10();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v51 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v50 = (char *)&v37 - v12;
  sub_1D7AA787C(0, &qword_1F014D3B0, v6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v13);
  v45 = (char *)&v37 - v14;
  v15 = sub_1D7B48F1C();
  v16 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF160];
  v17 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AAE034();
  v21 = v20;
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = v17;
  v42 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v42(v19, a1, v15);
  sub_1D7AA76D4(&qword_1F014DF98, v16, MEMORY[0x1E0CAF178]);
  v43 = v19;
  sub_1D7B4A458();
  v24 = &v23[*(int *)(v21 + 36)];
  v52 = v9;
  v48 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v49 = v23;
  while (1)
  {
    v25 = v50;
    v48(v50, v24, v8);
    sub_1D7ACD4BC();
    v26 = v51;
    sub_1D7B4A590();
    sub_1D7AA76D4(&qword_1F014D3D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF150], MEMORY[0x1E0CAF158]);
    v27 = sub_1D7B4A320();
    v28 = *(void (**)(char *, uint64_t))(v52 + 8);
    v28(v26, v8);
    v28(v25, v8);
    if ((v27 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56))(v45, 1, 1, v47);
      return sub_1D7AAD1B0((uint64_t)v23, (uint64_t (*)(_QWORD))sub_1D7AAE034);
    }
    v29 = (void (*)(char *, _QWORD))sub_1D7B4A5A8();
    v31 = v45;
    v30 = v46;
    v32 = v47;
    (*(void (**)(char *))(v46 + 16))(v45);
    v29(v53, 0);
    v33 = v43;
    v42(v43, (uint64_t)v23, v15);
    sub_1D7B4A59C();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v33, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v31, 0, 1, v32);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v31, 1, v32) == 1)
      return sub_1D7AAD1B0((uint64_t)v23, (uint64_t (*)(_QWORD))sub_1D7AAE034);
    v34 = (uint64_t)v38;
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v38, v31, v32);
    v35 = v54;
    sub_1D7ACC308(v34, v39, v40, v41);
    if (v35)
      break;
    v54 = 0;
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v34, v32);
  }
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v34, v32);
  return sub_1D7AAD1B0((uint64_t)v23, (uint64_t (*)(_QWORD))sub_1D7AAE034);
}

uint64_t sub_1D7ACD4BC()
{
  return sub_1D7AA76D4(&qword_1F014D3C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF160], MEMORY[0x1E0CAF180]);
}

void sub_1D7ACD4D8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1F014DFA0)
  {
    sub_1D7ACD544(255);
    sub_1D7ACD560(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1F014DFA0);
  }
}

void sub_1D7ACD544(uint64_t a1)
{
  sub_1D7AA787C(a1, &qword_1F014DFA8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAECB8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void sub_1D7ACD560(uint64_t a1)
{
  sub_1D7AA787C(a1, &qword_1F014DFB0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAED48], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t sub_1D7ACD580()
{
  return sub_1D7AA76D4(&qword_1F014DFB8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAECD8], MEMORY[0x1E0CAECD0]);
}

uint64_t sub_1D7ACD5B0()
{
  return 8;
}

void sub_1D7ACD5C4()
{
  sub_1D7B48E38();
  __break(1u);
}

unint64_t sub_1D7ACD5E0()
{
  unint64_t result;

  result = qword_1F014DFC0;
  if (!qword_1F014DFC0)
  {
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CAED58], MEMORY[0x1E0CAED68]);
    atomic_store(result, (unint64_t *)&qword_1F014DFC0);
  }
  return result;
}

void sub_1D7ACD624()
{
  sub_1D7ACD5E0();
  sub_1D7B49000();
  __break(1u);
}

uint64_t sub_1D7ACD648()
{
  return 8;
}

uint64_t sub_1D7ACD658()
{
  sub_1D7ACD698();
  return sub_1D7B4A2B4();
}

void sub_1D7ACD698()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014DFC8)
  {
    sub_1D7B48E5C();
    v0 = sub_1D7B4A9A4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014DFC8);
  }
}

BOOL static BalanceCoordinateInfo.Context.TimeScope.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t BalanceCoordinateInfo.Context.TimeScope.hash(into:)()
{
  return sub_1D7B4A98C();
}

uint64_t BalanceCoordinateInfo.Context.TimeScope.hashValue.getter()
{
  sub_1D7B4A980();
  sub_1D7B4A98C();
  return sub_1D7B4A998();
}

BOOL sub_1D7ACD798(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1D7ACD7AC()
{
  sub_1D7B4A980();
  sub_1D7B4A98C();
  return sub_1D7B4A998();
}

uint64_t sub_1D7ACD7F0()
{
  return sub_1D7B4A98C();
}

uint64_t sub_1D7ACD818()
{
  sub_1D7B4A980();
  sub_1D7B4A98C();
  return sub_1D7B4A998();
}

uint64_t BalanceCoordinateInfo.Context.init(selectedMetric:timeScope:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v4;
  uint64_t result;

  v4 = *a2;
  sub_1D7ACD890(a1, a3);
  result = type metadata accessor for BalanceCoordinateInfo.Context(0);
  *(_BYTE *)(a3 + *(int *)(result + 20)) = v4;
  return result;
}

uint64_t sub_1D7ACD890(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1D7ACD8D4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1D7ACD8D4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014DFD0)
  {
    sub_1D7B49504();
    v0 = sub_1D7B4A6F8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014DFD0);
  }
}

uint64_t type metadata accessor for BalanceCoordinateInfo.Context(uint64_t a1)
{
  return sub_1D7ACDAE8(a1, qword_1F014E0D8);
}

id BalanceCoordinateInfo.__allocating_init(collection:context:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;
  id v6;
  objc_super v8;

  v5 = objc_allocWithZone(v2);
  sub_1D7AC0938(a1, (uint64_t)v5 + OBJC_IVAR____TtC8HealthUI21BalanceCoordinateInfo_collection);
  sub_1D7ACDA54(a2, (uint64_t)v5 + OBJC_IVAR____TtC8HealthUI21BalanceCoordinateInfo_context);
  v8.receiver = v5;
  v8.super_class = v2;
  v6 = objc_msgSendSuper2(&v8, sel_init);
  sub_1D7ACDA98(a2);
  __swift_destroy_boxed_opaque_existential_0(a1);
  return v6;
}

id BalanceCoordinateInfo.init(collection:context:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v5;
  objc_super v7;

  sub_1D7AC0938(a1, (uint64_t)v2 + OBJC_IVAR____TtC8HealthUI21BalanceCoordinateInfo_collection);
  sub_1D7ACDA54(a2, (uint64_t)v2 + OBJC_IVAR____TtC8HealthUI21BalanceCoordinateInfo_context);
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for BalanceCoordinateInfo(0);
  v5 = objc_msgSendSuper2(&v7, sel_init);
  sub_1D7ACDA98(a2);
  __swift_destroy_boxed_opaque_existential_0(a1);
  return v5;
}

uint64_t sub_1D7ACDA54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BalanceCoordinateInfo.Context(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D7ACDA98(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BalanceCoordinateInfo.Context(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for BalanceCoordinateInfo(uint64_t a1)
{
  return sub_1D7ACDAE8(a1, (uint64_t *)&unk_1F014E070);
}

uint64_t sub_1D7ACDAE8(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

id BalanceCoordinateInfo.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void BalanceCoordinateInfo.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id BalanceCoordinateInfo.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BalanceCoordinateInfo(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t sub_1D7ACDBCC()
{
  unint64_t result;

  result = qword_1F014DFE0;
  if (!qword_1F014DFE0)
  {
    result = MEMORY[0x1D829FF28](&protocol conformance descriptor for BalanceCoordinateInfo.Context.TimeScope, &type metadata for BalanceCoordinateInfo.Context.TimeScope);
    atomic_store(result, (unint64_t *)&qword_1F014DFE0);
  }
  return result;
}

uint64_t sub_1D7ACDC48()
{
  return type metadata accessor for BalanceCoordinateInfo(0);
}

uint64_t sub_1D7ACDC50()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for BalanceCoordinateInfo.Context(319);
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for BalanceCoordinateInfo()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of BalanceCoordinateInfo.__allocating_init(collection:context:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t *initializeBufferWithCopyOfBuffer for BalanceCoordinateInfo.Context(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1D7B49504();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      sub_1D7ACD8D4();
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t destroy for BalanceCoordinateInfo.Context(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = sub_1D7B49504();
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

void *initializeWithCopy for BalanceCoordinateInfo.Context(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1D7B49504();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    sub_1D7ACD8D4();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *assignWithCopy for BalanceCoordinateInfo.Context(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;

  v6 = sub_1D7B49504();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    sub_1D7ACD8D4();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *initializeWithTake for BalanceCoordinateInfo.Context(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1D7B49504();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    sub_1D7ACD8D4();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *assignWithTake for BalanceCoordinateInfo.Context(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;

  v6 = sub_1D7B49504();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    sub_1D7ACD8D4();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for BalanceCoordinateInfo.Context()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D7ACE1AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  sub_1D7ACD8D4();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 3)
    return v9 - 2;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for BalanceCoordinateInfo.Context()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1D7ACE230(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  sub_1D7ACD8D4();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
}

void sub_1D7ACE2A8()
{
  unint64_t v0;

  sub_1D7ACD8D4();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for BalanceCoordinateInfo.Context.TimeScope(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BalanceCoordinateInfo.Context.TimeScope(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1D7ACE400 + 4 * byte_1D7B84DA5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1D7ACE434 + 4 * byte_1D7B84DA0[v4]))();
}

uint64_t sub_1D7ACE434(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D7ACE43C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D7ACE444);
  return result;
}

uint64_t sub_1D7ACE450(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D7ACE458);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1D7ACE45C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D7ACE464(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D7ACE470(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1D7ACE478(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for BalanceCoordinateInfo.Context.TimeScope()
{
  return &type metadata for BalanceCoordinateInfo.Context.TimeScope;
}

uint64_t sub_1D7ACE490@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t sub_1D7ACE4A8(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t TupleTypeMetadata;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v4 = a1;
  v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    TupleTypeMetadata = *v5;
    MEMORY[0x1E0C80A78](a1);
    v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
LABEL_12:
    v22 = 32;
    v23 = a2;
    do
    {
      if (a2 == 1)
        v24 = 0;
      else
        v24 = *(_DWORD *)(TupleTypeMetadata + v22);
      v26 = *v5++;
      v25 = v26;
      v27 = *v4++;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(&v8[v24], v27);
      v22 += 16;
      --v23;
    }
    while (v23);
    return sub_1D7B4A140();
  }
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v11 = 0;
    if (a2 < 4)
      goto LABEL_9;
    if ((unint64_t)(v10 - (char *)v5) < 0x20)
      goto LABEL_9;
    v11 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (__int128 *)(v5 + 2);
    v13 = v10 + 16;
    v14 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v11 != a2)
    {
LABEL_9:
      v16 = a2 - v11;
      v17 = v11;
      v18 = &v10[8 * v11];
      v19 = &v5[v17];
      do
      {
        v20 = *v19++;
        *(_QWORD *)v18 = v20;
        v18 += 8;
        --v16;
      }
      while (v16);
    }
  }
  TupleTypeMetadata = swift_getTupleTypeMetadata();
  MEMORY[0x1E0C80A78](TupleTypeMetadata);
  v8 = (char *)&v29 - v21;
  if (a2)
    goto LABEL_12;
  return sub_1D7B4A140();
}

uint64_t sub_1D7ACE65C(void (*a1)(uint64_t *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t result;
  _QWORD v24[2];
  uint64_t v25;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  if (!v5)
    return MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v7 = (uint64_t *)(a3 + 40);
  v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v9 = *v7;
    v24[0] = *(v7 - 1);
    v24[1] = v9;
    swift_bridgeObjectRetain();
    a1(&v25, v24);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v8;
    }
    swift_bridgeObjectRelease();
    v10 = v25;
    v11 = *(_QWORD *)(v25 + 16);
    v12 = v8[2];
    v13 = v12 + v11;
    if (__OFADD__(v12, v11))
      break;
    isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
    if ((_DWORD)isUniquelyReferenced_nonNull_native && v13 <= v8[3] >> 1)
    {
      if (*(_QWORD *)(v10 + 16))
        goto LABEL_15;
    }
    else
    {
      if (v12 <= v13)
        v15 = v12 + v11;
      else
        v15 = v12;
      v8 = sub_1D7ABA84C(isUniquelyReferenced_nonNull_native, v15, 1, v8);
      if (*(_QWORD *)(v10 + 16))
      {
LABEL_15:
        v16 = v8[2];
        if ((v8[3] >> 1) - v16 < v11)
          goto LABEL_30;
        v17 = (unint64_t)&v8[4 * v16 + 4];
        if (v10 + 32 < v17 + 32 * v11 && v17 < v10 + 32 + 32 * v11)
          goto LABEL_32;
        swift_arrayInitWithCopy();
        if (v11)
        {
          v19 = v8[2];
          v20 = __OFADD__(v19, v11);
          v21 = v19 + v11;
          if (v20)
            goto LABEL_31;
          v8[2] = v21;
        }
        goto LABEL_4;
      }
    }
    if (v11)
      goto LABEL_29;
LABEL_4:
    v7 += 2;
    swift_bridgeObjectRelease();
    if (!--v5)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v8;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  result = sub_1D7B4A8E4();
  __break(1u);
  return result;
}

uint64_t AccessoryRectangularChartView.init(titleOptions:detailOptions:baseAccessibilityIdentifier:chartContent:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
  return result;
}

uint64_t AccessoryRectangularChartView.body.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  _OWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  void (*v19)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  _QWORD v29[2];
  _OWORD v30[3];

  v23 = a1;
  v25 = a2;
  type metadata accessor for AccessoryRectangularTitleView();
  v4 = *(_QWORD *)(a1 + 16);
  swift_getTupleTypeMetadata3();
  v5 = sub_1D7B4A134();
  MEMORY[0x1D829FF28](MEMORY[0x1E0CE0680], v5);
  v6 = sub_1D7B4A0B0();
  v24 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v22 - v7;
  v9 = sub_1D7B49978();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v22 - v14;
  v16 = v2[1];
  v30[0] = *v2;
  v30[1] = v16;
  v30[2] = v2[2];
  sub_1D7B49B28();
  v17 = *(_QWORD *)(v23 + 24);
  v26 = v4;
  v27 = v17;
  v28 = v30;
  sub_1D7B4A0A4();
  sub_1D7B4A128();
  v21 = MEMORY[0x1D829FF28](MEMORY[0x1E0CDFCC0], v6);
  sub_1D7B49F60();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v6);
  v29[0] = v21;
  v29[1] = MEMORY[0x1E0CDA228];
  MEMORY[0x1D829FF28](MEMORY[0x1E0CD9C20], v9, v29);
  v18 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v18(v15, v13, v9);
  v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v13, v9);
  v18(v25, v15, v9);
  return ((uint64_t (*)(char *, uint64_t))v19)(v15, v9);
}

uint64_t type metadata accessor for AccessoryRectangularTitleView()
{
  uint64_t result;

  result = qword_1F014E1E8;
  if (!qword_1F014E1E8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1D7ACEB20@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t *v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  void (*v26)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  uint64_t v35;
  char v36;
  uint64_t v37[3];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v29 = a3;
  v30 = a4;
  v6 = *(_QWORD *)(a2 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v28 - v10;
  v12 = type metadata accessor for AccessoryRectangularTitleView();
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v28 - v17;
  v19 = *a1;
  v39 = a1[1];
  v20 = v39;
  v40 = v19;
  v38 = *((_OWORD *)a1 + 1);
  v21 = v38;
  *(_QWORD *)v15 = v19;
  *((_QWORD *)v15 + 1) = v20;
  *((_OWORD *)v15 + 1) = v21;
  v22 = (uint64_t *)&v15[*(int *)(v16 + 28)];
  *v22 = swift_getKeyPath();
  sub_1D7AA787C(0, &qword_1ED0AC8C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFDA8], MEMORY[0x1E0CD87D0]);
  swift_storeEnumTagMultiPayload();
  sub_1D7AACCDC((uint64_t)v15, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for AccessoryRectangularTitleView);
  v23 = (void (*)(uint64_t))a1[4];
  sub_1D7AD3B3C((uint64_t)&v40);
  sub_1D7AD3B3C((uint64_t)&v39);
  v24 = sub_1D7AD3B64((uint64_t)&v38);
  v23(v24);
  v25 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v25(v11, v9, a2);
  v26 = *(void (**)(char *, uint64_t))(v6 + 8);
  v26(v9, a2);
  sub_1D7AAD16C((uint64_t)v18, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for AccessoryRectangularTitleView);
  v37[0] = (uint64_t)v15;
  v25(v9, v11, a2);
  v35 = 0;
  v36 = 0;
  v37[1] = (uint64_t)v9;
  v37[2] = (uint64_t)&v35;
  v34[0] = v12;
  v34[1] = a2;
  v34[2] = MEMORY[0x1E0CDFC10];
  v31 = sub_1D7AA76D4(&qword_1F014E300, (uint64_t (*)(uint64_t))type metadata accessor for AccessoryRectangularTitleView, (uint64_t)&unk_1D7B84F88);
  v32 = v29;
  v33 = MEMORY[0x1E0CDFBE8];
  sub_1D7ACE4A8(v37, 3uLL, (uint64_t)v34);
  v26(v11, a2);
  sub_1D7AAD1B0((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for AccessoryRectangularTitleView);
  v26(v9, a2);
  return sub_1D7AAD1B0((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for AccessoryRectangularTitleView);
}

uint64_t sub_1D7ACED80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1D7ACEB20(*(uint64_t **)(v1 + 32), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1D7ACED8C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1D7ACEDC4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1D7ACEDFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *sub_1D7ACEE70(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1D7ACEF04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = v4;
  swift_release();
  return a1;
}

uint64_t sub_1D7ACEF68(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1D7ACEFB0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for AccessoryRectangularChartView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessoryRectangularChartView);
}

uint64_t sub_1D7ACF008()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  type metadata accessor for AccessoryRectangularTitleView();
  swift_getTupleTypeMetadata3();
  v0 = sub_1D7B4A134();
  MEMORY[0x1D829FF28](MEMORY[0x1E0CE0680], v0);
  v1 = sub_1D7B4A0B0();
  v2 = sub_1D7B49978();
  v4[0] = MEMORY[0x1D829FF28](MEMORY[0x1E0CDFCC0], v1);
  v4[1] = MEMORY[0x1E0CDA228];
  return MEMORY[0x1D829FF28](MEMORY[0x1E0CD9C20], v2, v4);
}

uint64_t *sub_1D7ACF0D0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    a1[3] = a2[3];
    v7 = *(int *)(a3 + 28);
    v8 = (uint64_t *)((char *)a1 + v7);
    v9 = (uint64_t *)((char *)a2 + v7);
    sub_1D7AA787C(0, &qword_1ED0AC8C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFDA8], MEMORY[0x1E0CD87D0]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v10 = sub_1D7B4A200();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      *v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return v5;
}

uint64_t sub_1D7ACF1F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  sub_1D7AA787C(0, &qword_1ED0AC8C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFDA8], MEMORY[0x1E0CD87D0]);
  if (swift_getEnumCaseMultiPayload() != 1)
    return swift_release();
  v5 = sub_1D7B4A200();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_1D7ACF28C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 28);
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (_QWORD *)((char *)a2 + v6);
  sub_1D7AA787C(0, &qword_1ED0AC8C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFDA8], MEMORY[0x1E0CD87D0]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v9 = sub_1D7B4A200();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  }
  else
  {
    *v7 = *v8;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *sub_1D7ACF374(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v6 = *(int *)(a3 + 28);
    v7 = (_QWORD *)((char *)a1 + v6);
    v8 = (_QWORD *)((char *)a2 + v6);
    v9 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFDA8];
    v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0];
    sub_1D7AAD130((uint64_t)a1 + v6, &qword_1ED0AC8C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFDA8], MEMORY[0x1E0CD87D0]);
    sub_1D7AA787C(0, &qword_1ED0AC8C0, v9, v10);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v11 = sub_1D7B4A200();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v7, v8, v11);
    }
    else
    {
      *v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *sub_1D7ACF4AC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 28);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  sub_1D7AA787C(0, &qword_1ED0AC8C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFDA8], MEMORY[0x1E0CD87D0]);
  v9 = v8;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = sub_1D7B4A200();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v6, v7, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  return a1;
}

_QWORD *sub_1D7ACF568(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t (*v10)(uint64_t);
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v7 = *(int *)(a3 + 28);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFDA8];
    v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0];
    sub_1D7AAD130((uint64_t)a1 + v7, &qword_1ED0AC8C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFDA8], MEMORY[0x1E0CD87D0]);
    sub_1D7AA787C(0, &qword_1ED0AC8C0, v10, v11);
    v13 = v12;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v14 = sub_1D7B4A200();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v8, v9, v14);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1D7ACF684()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D7ACF690(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_1D7AA787C(0, &qword_1F014D378, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFDA8], MEMORY[0x1E0CD87E8]);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v8);
  }
}

uint64_t sub_1D7ACF724()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1D7ACF730(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    sub_1D7AA787C(0, &qword_1F014D378, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFDA8], MEMORY[0x1E0CD87E8]);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

void sub_1D7ACF7BC()
{
  unint64_t v0;

  sub_1D7AA787C(319, &qword_1ED0AC8C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFDA8], MEMORY[0x1E0CD87D0]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_1D7ACF858()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1D7ACF868()
{
  sub_1D7B4A980();
  swift_bridgeObjectRetain();
  sub_1D7B4A3F8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1D7B4A3F8();
  swift_bridgeObjectRelease();
  return sub_1D7B4A998();
}

uint64_t sub_1D7ACF8EC()
{
  swift_bridgeObjectRetain();
  sub_1D7B4A3F8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1D7B4A3F8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7ACF95C()
{
  sub_1D7B4A980();
  swift_bridgeObjectRetain();
  sub_1D7B4A3F8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1D7B4A3F8();
  swift_bridgeObjectRelease();
  return sub_1D7B4A998();
}

uint64_t sub_1D7ACF9DC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  uint64_t result;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a2[2];
  v5 = a2[3];
  v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (v7 = sub_1D7B4A938(), result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
      return 1;
    else
      return sub_1D7B4A938();
  }
  return result;
}

uint64_t sub_1D7ACFA6C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  uint64_t v25;
  uint64_t OpaqueTypeConformance2;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;

  v2 = v1;
  v4 = type metadata accessor for AccessoryRectangularTitleView();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4);
  sub_1D7AD0A84();
  v30 = *(_QWORD *)(v7 - 8);
  v31 = v7;
  v8 = MEMORY[0x1E0C80A78](v7);
  v29 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v28 - v10;
  *a1 = sub_1D7B49D08();
  v32 = MEMORY[0x1E0DEE9E8];
  v12 = swift_bridgeObjectRetain();
  v13 = (_QWORD *)sub_1D7AD3444(v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v13[2])
  {
    swift_bridgeObjectRelease();
    v13 = &unk_1E9C477F8;
  }
  sub_1D7AD35AC();
  v15 = &a1[*(int *)(v14 + 44)];
  MEMORY[0x1E0C80A78](v14);
  OpaqueTypeConformance2 = v2;
  v16 = sub_1D7ACE65C((void (*)(uint64_t *__return_ptr, _QWORD *))sub_1D7AD3614, (uint64_t)(&v28 - 4), (uint64_t)v13);
  swift_bridgeObjectRelease();
  v34 = v16;
  swift_getKeyPath();
  sub_1D7AAD16C(v2, (uint64_t)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for AccessoryRectangularTitleView);
  v17 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v18 = swift_allocObject();
  sub_1D7AACCDC((uint64_t)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17, (uint64_t (*)(_QWORD))type metadata accessor for AccessoryRectangularTitleView);
  sub_1D7AA7E70(0, &qword_1F014E230, (uint64_t)&type metadata for AccessoryRectangularTitleView.TitleDetail, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1D7AD0B34(0);
  sub_1D7AD10AC();
  sub_1D7AD110C();
  sub_1D7AD0BA8();
  v20 = v19;
  v21 = sub_1D7AD0F2C();
  v32 = v20;
  v33 = v21;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v22 = v29;
  sub_1D7B4A0D4();
  v23 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
  v24 = v22;
  v25 = v31;
  v23(v11, v24, v31);
  return ((uint64_t (*)(_BYTE *, char *, uint64_t))v23)(v15, v11, v25);
}

uint64_t sub_1D7ACFD1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t KeyPath;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v26[2];

  v26[0] = a4;
  v26[1] = a5;
  sub_1D7AD0CA4();
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AD0C3C(0, &qword_1F014E248, (void (*)(uint64_t))sub_1D7AD0CA4, (void (*)(uint64_t))sub_1D7ABEE10);
  v13 = v12;
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v26 - v14;
  sub_1D7AD0BA8();
  v17 = v16;
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v11 = sub_1D7B49B04();
  *((_QWORD *)v11 + 1) = 0;
  v11[16] = 0;
  sub_1D7AD3754();
  sub_1D7ACFFFC(a1, a2, v5, a3, v26[0], (uint64_t)&v11[*(int *)(v20 + 44)]);
  KeyPath = swift_getKeyPath();
  sub_1D7AAD16C((uint64_t)v11, (uint64_t)v15, (uint64_t (*)(_QWORD))sub_1D7AD0CA4);
  v22 = &v15[*(int *)(v13 + 36)];
  *(_QWORD *)v22 = KeyPath;
  *((_QWORD *)v22 + 1) = 1;
  v22[16] = 0;
  sub_1D7AAD1B0((uint64_t)v11, (uint64_t (*)(_QWORD))sub_1D7AD0CA4);
  v23 = swift_getKeyPath();
  sub_1D7AD387C((uint64_t)v15, (uint64_t)v19, &qword_1F014E248, (void (*)(uint64_t))sub_1D7AD0CA4, (void (*)(uint64_t))sub_1D7ABEE10);
  v24 = &v19[*(int *)(v17 + 36)];
  *(_QWORD *)v24 = v23;
  v24[8] = 1;
  sub_1D7AD38CC((uint64_t)v15, &qword_1F014E248, (void (*)(uint64_t))sub_1D7AD0CA4, (void (*)(uint64_t))sub_1D7ABEE10);
  sub_1D7AD0F2C();
  sub_1D7B49F18();
  return sub_1D7AAD1B0((uint64_t)v19, (uint64_t (*)(_QWORD))sub_1D7AD0BA8);
}

uint64_t sub_1D7ACFF28@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_bridgeObjectRetain();
  v6 = (_QWORD *)sub_1D7AD3444(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v6[2])
  {
    swift_bridgeObjectRelease();
    v6 = &unk_1E9C47828;
  }
  swift_bridgeObjectRetain();
  v7 = sub_1D7AD3350((uint64_t)v6, v4, v3);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a2 = v7;
  return result;
}

uint64_t sub_1D7ACFFFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  _QWORD *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  void (*v63)(_BYTE *, uint64_t);
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  _BYTE *v72;
  unsigned __int8 v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  _BYTE *v91;
  void (*v92)(uint64_t);
  _BYTE *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE v99[12];
  int v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  _BYTE *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  _BYTE *v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE *v115;
  uint64_t v116;
  _BYTE *v117;
  _BYTE *v118;
  _BYTE *v119;
  uint64_t v120;
  _BYTE *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;

  v107 = a5;
  v106 = a4;
  v122 = a3;
  v120 = a6;
  sub_1D7AD0E60();
  v114 = v8;
  v113 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v111 = &v99[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1D7AD0E04();
  v116 = v10;
  MEMORY[0x1E0C80A78](v10);
  v117 = &v99[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1D7AD0C3C(0, &qword_1F014E270, v12, (void (*)(uint64_t))MEMORY[0x1E0CDCFD0]);
  v14 = MEMORY[0x1E0C80A78](v13);
  v119 = &v99[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = MEMORY[0x1E0C80A78](v14);
  v112 = &v99[-v17];
  MEMORY[0x1E0C80A78](v16);
  v118 = &v99[-v18];
  v123 = sub_1D7B4A200();
  v105 = *(_QWORD **)(v123 - 8);
  v19 = MEMORY[0x1E0C80A78](v123);
  v108 = &v99[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = &v99[-v22];
  MEMORY[0x1E0C80A78](v21);
  v25 = &v99[-v24];
  sub_1D7AD0DA8();
  v27 = MEMORY[0x1E0C80A78](v26);
  v115 = &v99[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v29 = MEMORY[0x1E0C80A78](v27);
  v104 = &v99[-v30];
  MEMORY[0x1E0C80A78](v29);
  v121 = &v99[-v31];
  v109 = a1;
  v126 = a1;
  v127 = a2;
  v32 = sub_1D7ABCCEC();
  v110 = a2;
  swift_bridgeObjectRetain();
  v103 = v32;
  v33 = sub_1D7B49EB8();
  v35 = v34;
  v37 = v36 & 1;
  sub_1D7AD08B4();
  v38 = sub_1D7B49E88();
  v40 = v39;
  v100 = v41;
  swift_release();
  sub_1D7AACF84(v33, v35, v37);
  swift_bridgeObjectRelease();
  v42 = v122 + *(int *)(type metadata accessor for AccessoryRectangularTitleView() + 28);
  v101 = (unint64_t)"gularChartView.DetailText";
  v102 = v42;
  sub_1D7AD11AC(&qword_1ED0AC8C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFDA8], 0xD000000000000013, 0x80000001D7BA5220, (uint64_t)v25);
  sub_1D7B4A1F4();
  LOBYTE(v42) = sub_1D7B4A1E8();
  v43 = (_QWORD *)v105[1];
  ((void (*)(_BYTE *, uint64_t))v43)(v23, v123);
  if ((v42 & 1) != 0)
    sub_1D7B49FC0();
  else
    sub_1D7B49FCC();
  ((void (*)(_BYTE *, uint64_t))v43)(v25, v123);
  v105 = v43;
  v44 = v100 & 1;
  v45 = sub_1D7B49E70();
  v47 = v46;
  v49 = v48;
  v51 = v50 & 1;
  sub_1D7AACF84(v38, v40, v44);
  swift_release();
  swift_bridgeObjectRelease();
  v126 = v45;
  v127 = v47;
  v128 = v51;
  v129 = v49;
  v52 = *(_QWORD *)(v122 + 24);
  v124 = *(_QWORD *)(v122 + 16);
  v125 = v52;
  swift_bridgeObjectRetain();
  sub_1D7B4A41C();
  v53 = (uint64_t)v104;
  sub_1D7B49F3C();
  swift_bridgeObjectRelease();
  sub_1D7AACF84(v45, v47, v51);
  swift_bridgeObjectRelease();
  sub_1D7AACCDC(v53, (uint64_t)v121, (uint64_t (*)(_QWORD))sub_1D7AD0DA8);
  v126 = v106;
  v127 = v107;
  swift_bridgeObjectRetain();
  v54 = sub_1D7B49EB8();
  v56 = v55;
  LOBYTE(v45) = v57 & 1;
  sub_1D7AD08B4();
  v58 = sub_1D7B49E88();
  v60 = v59;
  v62 = v61;
  swift_release();
  sub_1D7AACF84(v54, v56, v45);
  v63 = (void (*)(_BYTE *, uint64_t))v105;
  swift_bridgeObjectRelease();
  v64 = v108;
  sub_1D7AD11AC(&qword_1ED0AC8C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFDA8], 0xD000000000000013, v101 | 0x8000000000000000, (uint64_t)v108);
  sub_1D7B4A1F4();
  LOBYTE(v54) = sub_1D7B4A1E8();
  v63(v23, v123);
  if ((v54 & 1) != 0)
    sub_1D7B49FB4();
  else
    sub_1D7B49F90();
  v63(v64, v123);
  v65 = sub_1D7B49E70();
  v67 = v66;
  v69 = v68;
  v71 = v70 & 1;
  sub_1D7AACF84(v58, v60, v62 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  v126 = v65;
  v127 = v67;
  v128 = v71;
  v129 = v69;
  v72 = v111;
  sub_1D7B49EC4();
  sub_1D7AACF84(v65, v67, v71);
  swift_bridgeObjectRelease();
  v73 = sub_1D7B49D44();
  v74 = sub_1D7B49D50();
  sub_1D7B49D50();
  if (sub_1D7B49D50() != v73)
    v74 = sub_1D7B49D50();
  sub_1D7B49864();
  v76 = v75;
  v78 = v77;
  v80 = v79;
  v82 = v81;
  v83 = v113;
  v84 = (uint64_t)v117;
  v85 = v114;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v113 + 16))(v117, v72, v114);
  v86 = v84 + *(int *)(v116 + 36);
  *(_BYTE *)v86 = v74;
  *(_QWORD *)(v86 + 8) = v76;
  *(_QWORD *)(v86 + 16) = v78;
  *(_QWORD *)(v86 + 24) = v80;
  *(_QWORD *)(v86 + 32) = v82;
  *(_BYTE *)(v86 + 40) = 0;
  (*(void (**)(_BYTE *, uint64_t))(v83 + 8))(v72, v85);
  v87 = *(_QWORD *)(v122 + 24);
  v126 = *(_QWORD *)(v122 + 16);
  v127 = v87;
  swift_bridgeObjectRetain();
  sub_1D7B4A41C();
  sub_1D7AD3908();
  v88 = (uint64_t)v112;
  sub_1D7B49F3C();
  swift_bridgeObjectRelease();
  sub_1D7AAD1B0(v84, (uint64_t (*)(_QWORD))sub_1D7AD0E04);
  v89 = v118;
  sub_1D7AD3994(v88, (uint64_t)v118);
  v90 = v121;
  v91 = v115;
  sub_1D7AAD16C((uint64_t)v121, (uint64_t)v115, (uint64_t (*)(_QWORD))sub_1D7AD0DA8);
  v92 = (void (*)(uint64_t))MEMORY[0x1E0CDCFD0];
  v93 = v119;
  sub_1D7AD387C((uint64_t)v89, (uint64_t)v119, &qword_1F014E270, (void (*)(uint64_t))sub_1D7AD0E04, (void (*)(uint64_t))MEMORY[0x1E0CDCFD0]);
  v94 = v120;
  sub_1D7AAD16C((uint64_t)v91, v120, (uint64_t (*)(_QWORD))sub_1D7AD0DA8);
  sub_1D7AD0D1C();
  v96 = v95;
  sub_1D7AD387C((uint64_t)v93, v94 + *(int *)(v95 + 48), &qword_1F014E270, (void (*)(uint64_t))sub_1D7AD0E04, v92);
  v97 = v94 + *(int *)(v96 + 64);
  *(_QWORD *)v97 = 0;
  *(_BYTE *)(v97 + 8) = 0;
  sub_1D7AD38CC((uint64_t)v89, &qword_1F014E270, (void (*)(uint64_t))sub_1D7AD0E04, v92);
  sub_1D7AAD1B0((uint64_t)v90, (uint64_t (*)(_QWORD))sub_1D7AD0DA8);
  sub_1D7AD38CC((uint64_t)v93, &qword_1F014E270, (void (*)(uint64_t))sub_1D7AD0E04, v92);
  return sub_1D7AAD1B0((uint64_t)v91, (uint64_t (*)(_QWORD))sub_1D7AD0DA8);
}

id sub_1D7AD08B4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id result;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_1D7AA787C(0, &qword_1F014DA20, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDD560], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v15 - v1;
  v3 = sub_1D7B49D8C();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (result)
  {
    v8 = result;
    v9 = objc_msgSend(result, sel_isAppleWatch);

    if (v9)
    {
      return (id)sub_1D7B49E04();
    }
    else
    {
      sub_1D7B49D80();
      v10 = *MEMORY[0x1E0CDD550];
      v11 = sub_1D7B49DB0();
      v12 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CDD560];
      v13 = *(_QWORD *)(v11 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 104))(v2, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v2, 0, 1, v11);
      sub_1D7B49DE0();
      sub_1D7AAD130((uint64_t)v2, &qword_1F014DA20, v12, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      sub_1D7B49DC8();
      v14 = sub_1D7B49DF8();
      swift_release();
      return (id)v14;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1D7AD0A84()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014E228)
  {
    sub_1D7AA7E70(255, &qword_1F014E230, (uint64_t)&type metadata for AccessoryRectangularTitleView.TitleDetail, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1D7AD0B34(255);
    sub_1D7AD10AC();
    sub_1D7AD110C();
    v0 = sub_1D7B4A0E0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014E228);
  }
}

void sub_1D7AD0B34(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_1F014E238)
  {
    sub_1D7AD0BA8();
    v5[0] = v2;
    v5[1] = sub_1D7AD0F2C();
    v3 = MEMORY[0x1D829FEEC](a1, v5, MEMORY[0x1E0CDE648], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1F014E238);
  }
}

void sub_1D7AD0BA8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014E240)
  {
    sub_1D7AD0C3C(255, &qword_1F014E248, (void (*)(uint64_t))sub_1D7AD0CA4, (void (*)(uint64_t))sub_1D7ABEE10);
    sub_1D7AA7E70(255, &qword_1F014D818, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CDCF68]);
    v0 = sub_1D7B49978();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014E240);
  }
}

void sub_1D7AD0C3C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a3(255);
    a4(255);
    v6 = sub_1D7B49978();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_1D7AD0CA4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014E250)
  {
    sub_1D7AA787C(255, &qword_1F014E258, (uint64_t (*)(uint64_t))sub_1D7AD0D1C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    sub_1D7AD0ECC();
    v0 = sub_1D7B4A098();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014E250);
  }
}

void sub_1D7AD0D1C()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_1F014E260)
  {
    sub_1D7AD0DA8();
    sub_1D7AD0C3C(255, &qword_1F014E270, (void (*)(uint64_t))sub_1D7AD0E04, (void (*)(uint64_t))MEMORY[0x1E0CDCFD0]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1F014E260);
  }
}

void sub_1D7AD0DA8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014E268)
  {
    sub_1D7B49CF0();
    v0 = sub_1D7B49978();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014E268);
  }
}

void sub_1D7AD0E04()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014E278)
  {
    sub_1D7AD0E60();
    v0 = sub_1D7B49978();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014E278);
  }
}

void sub_1D7AD0E60()
{
  unint64_t v0;
  uint64_t v1;
  _QWORD v2[2];

  if (!qword_1F014E280)
  {
    v2[0] = MEMORY[0x1E0CDDD78];
    v2[1] = MEMORY[0x1E0CDDD58];
    v0 = MEMORY[0x1D829FEEC](0, v2, MEMORY[0x1E0CEFB08], 0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014E280);
  }
}

unint64_t sub_1D7AD0ECC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F014E288;
  if (!qword_1F014E288)
  {
    sub_1D7AA787C(255, &qword_1F014E258, (uint64_t (*)(uint64_t))sub_1D7AD0D1C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CE0680], v1);
    atomic_store(result, (unint64_t *)&qword_1F014E288);
  }
  return result;
}

unint64_t sub_1D7AD0F2C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1F014E290;
  if (!qword_1F014E290)
  {
    sub_1D7AD0BA8();
    v2 = v1;
    v3[0] = sub_1D7AD0F94();
    v3[1] = sub_1D7AD104C();
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1F014E290);
  }
  return result;
}

unint64_t sub_1D7AD0F94()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1F014E298;
  if (!qword_1F014E298)
  {
    sub_1D7AD0C3C(255, &qword_1F014E248, (void (*)(uint64_t))sub_1D7AD0CA4, (void (*)(uint64_t))sub_1D7ABEE10);
    v2 = v1;
    v3[0] = sub_1D7AA76D4(&qword_1F014E2A0, (uint64_t (*)(uint64_t))sub_1D7AD0CA4, MEMORY[0x1E0CDFB10]);
    v3[1] = sub_1D7AA76D4(&qword_1ED0ACA48, (uint64_t (*)(uint64_t))sub_1D7ABEE10, MEMORY[0x1E0CDCF80]);
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1F014E298);
  }
  return result;
}

unint64_t sub_1D7AD104C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F014E2A8;
  if (!qword_1F014E2A8)
  {
    sub_1D7AA7E70(255, &qword_1F014D818, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0CDCF68]);
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CDCF80], v1);
    atomic_store(result, (unint64_t *)&qword_1F014E2A8);
  }
  return result;
}

unint64_t sub_1D7AD10AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F014E2B0;
  if (!qword_1F014E2B0)
  {
    sub_1D7AA7E70(255, &qword_1F014E230, (uint64_t)&type metadata for AccessoryRectangularTitleView.TitleDetail, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0DEAF48], v1);
    atomic_store(result, (unint64_t *)&qword_1F014E2B0);
  }
  return result;
}

unint64_t sub_1D7AD110C()
{
  unint64_t result;

  result = qword_1F014E2B8;
  if (!qword_1F014E2B8)
  {
    result = MEMORY[0x1D829FF28](&unk_1D7B850BC, &type metadata for AccessoryRectangularTitleView.TitleDetail);
    atomic_store(result, (unint64_t *)&qword_1F014E2B8);
  }
  return result;
}

uint64_t sub_1D7AD1150@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7AD11AC(&qword_1ED0AC8C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFDA8], 0xD000000000000013, 0x80000001D7BA5220, a1);
}

uint64_t sub_1D7AD117C@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7AD11AC(&qword_1ED0AC8C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFFC0], 0x6146746567646957, 0xEC000000796C696DLL, a1);
}

uint64_t sub_1D7AD11AC@<X0>(unint64_t *a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  os_log_type_t v20;
  NSObject *v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v28 = a3;
  v9 = v5;
  v11 = sub_1D7B49AC8();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AA787C(0, a1, a2, MEMORY[0x1E0CD87D0]);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v25 - v16;
  sub_1D7AD3B8C(v9, (uint64_t)&v25 - v16, a1, a2);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v18 = a2(0);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a5, v17, v18);
  }
  else
  {
    v20 = sub_1D7B4A614();
    v21 = sub_1D7B49CFC();
    if (os_log_type_enabled(v21, v20))
    {
      v26 = a4;
      v22 = swift_slowAlloc();
      v27 = a5;
      v23 = (uint8_t *)v22;
      v24 = swift_slowAlloc();
      v30 = v24;
      *(_DWORD *)v23 = 136315138;
      v29 = sub_1D7AA4DE4(v28, v26, &v30);
      sub_1D7B4A704();
      _os_log_impl(&dword_1D7813000, v21, v20, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D829FFF4](v24, -1, -1);
      MEMORY[0x1D829FFF4](v23, -1, -1);
    }

    sub_1D7B49ABC();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_1D7AD13F4(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  os_log_type_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v4 = sub_1D7B49AC8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return a1 & 1;
  swift_retain();
  v8 = sub_1D7B4A614();
  v9 = sub_1D7B49CFC();
  v10 = v8;
  if (os_log_type_enabled(v9, v8))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v15 = v12;
    *(_DWORD *)v11 = 136315138;
    v14 = sub_1D7AA4DE4(1819242306, 0xE400000000000000, &v15);
    sub_1D7B4A704();
    _os_log_impl(&dword_1D7813000, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D829FFF4](v12, -1, -1);
    MEMORY[0x1D829FFF4](v11, -1, -1);
  }

  sub_1D7B49ABC();
  swift_getAtKeyPath();
  sub_1D7AABE44(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v15;
}

double sub_1D7AD15AC(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  os_log_type_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v14;
  double v15;

  v4 = sub_1D7B49AC8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return *(double *)&a1;
  swift_retain();
  v8 = sub_1D7B4A614();
  v9 = sub_1D7B49CFC();
  v10 = v8;
  if (os_log_type_enabled(v9, v8))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v15 = *(double *)&v12;
    *(_DWORD *)v11 = 136315138;
    v14 = sub_1D7AA4DE4(0x74616F6C464743, 0xE700000000000000, (uint64_t *)&v15);
    sub_1D7B4A704();
    _os_log_impl(&dword_1D7813000, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D829FFF4](v12, -1, -1);
    MEMORY[0x1D829FFF4](v11, -1, -1);
  }

  sub_1D7B49ABC();
  swift_getAtKeyPath();
  sub_1D7AABE44(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v15;
}

uint64_t sub_1D7AD176C@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7AD11AC(&qword_1F014E2F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9030], 0x414C52556E65704FLL, 0xED00006E6F697463, a1);
}

uint64_t sub_1D7AD17A0@<X0>(uint64_t a1@<X8>)
{
  return sub_1D7AD11AC(&qword_1F014E2F0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9958], 0x5463696D616E7944, 0xEF657A6953657079, a1);
}

uint64_t sub_1D7AD17D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_1D7B49AA4();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1D7AD1804()
{
  return sub_1D7B49AB0();
}

uint64_t sub_1D7AD1830(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_1D7B4A980();
  swift_bridgeObjectRetain();
  sub_1D7B4A3F8();
  v8 = sub_1D7B4A998();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_1D7B4A938() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_1D7B4A938() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1D7AD241C(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1D7AD19DC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v30;
  uint64_t *v31;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v36 = a1;
  sub_1D7ACB9A8();
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4);
  v41 = (uint64_t)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v34 - v10;
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v34 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v34 - v15;
  v35 = v2;
  v17 = *v2;
  sub_1D7B4A980();
  sub_1D7B4A1C4();
  sub_1D7AA76D4((unint64_t *)&unk_1F014DF30, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB44E0], MEMORY[0x1E0CB44F0]);
  swift_bridgeObjectRetain();
  sub_1D7B4A2A8();
  v37 = v5;
  v42 = a2;
  sub_1D7B4A2A8();
  v18 = sub_1D7B4A998();
  v19 = -1 << *(_BYTE *)(v17 + 32);
  v20 = v18 & ~v19;
  v21 = v17;
  v40 = v17 + 56;
  if (((*(_QWORD *)(v17 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) != 0)
  {
    v34 = v16;
    v38 = ~v19;
    v39 = *(_QWORD *)(v6 + 72);
    do
    {
      v22 = v21;
      v23 = v39 * v20;
      sub_1D7AAD16C(*(_QWORD *)(v21 + 48) + v39 * v20, (uint64_t)v14, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
      sub_1D7AA76D4(&qword_1F014D5E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB44E0], MEMORY[0x1E0CB4500]);
      v24 = v42;
      v25 = sub_1D7B4A320();
      sub_1D7AAD16C((uint64_t)v14, (uint64_t)v11, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
      v26 = v24;
      v27 = v41;
      sub_1D7AAD16C(v26, v41, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
      if ((v25 & 1) != 0)
      {
        v28 = sub_1D7B4A320();
        sub_1D7AAD1B0(v27, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
        sub_1D7AAD1B0((uint64_t)v11, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
        sub_1D7AAD1B0((uint64_t)v14, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
        if ((v28 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          sub_1D7AAD1B0(v42, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
          sub_1D7AAD16C(*(_QWORD *)(*v35 + 48) + v23, v36, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
          return 0;
        }
      }
      else
      {
        sub_1D7AAD1B0(v27, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
        sub_1D7AAD1B0((uint64_t)v11, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
        sub_1D7AAD1B0((uint64_t)v14, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
      }
      v20 = (v20 + 1) & v38;
      v21 = v22;
    }
    while (((*(_QWORD *)(v40 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) != 0);
    swift_bridgeObjectRelease();
    v31 = v35;
    v30 = v36;
    v16 = v34;
  }
  else
  {
    swift_bridgeObjectRelease();
    v31 = v35;
    v30 = v36;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v33 = v42;
  sub_1D7AAD16C(v42, (uint64_t)v16, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
  v43 = *v31;
  *v31 = 0x8000000000000000;
  sub_1D7AD25B4((uint64_t)v16, v20, isUniquelyReferenced_nonNull_native);
  *v31 = v43;
  swift_bridgeObjectRelease();
  sub_1D7AACCDC(v33, v30, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
  return 1;
}

uint64_t sub_1D7AD1D6C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  sub_1D7AD39F0();
  v3 = sub_1D7B4A7B8();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      sub_1D7B4A980();
      sub_1D7B4A3F8();
      result = sub_1D7B4A998();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1D7AD2044()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = v0;
  sub_1D7ACB9A8();
  v34 = *(_QWORD *)(v2 - 8);
  v35 = v2;
  MEMORY[0x1E0C80A78](v2);
  v36 = (uint64_t)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *v0;
  sub_1D7AD3A4C(0, &qword_1F014E2E0, v5, (uint64_t (*)(void))sub_1D7AD3ABC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v6 = sub_1D7B4A7B8();
  v7 = v6;
  if (*(_QWORD *)(v4 + 16))
  {
    v31 = v0;
    v8 = 1 << *(_BYTE *)(v4 + 32);
    v9 = *(_QWORD *)(v4 + 56);
    v33 = (_QWORD *)(v4 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & v9;
    v32 = (unint64_t)(v8 + 63) >> 6;
    v12 = v6 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v32)
          goto LABEL_33;
        v19 = v33[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v32)
            goto LABEL_33;
          v19 = v33[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v32)
              goto LABEL_33;
            v19 = v33[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v32)
              {
LABEL_33:
                swift_release();
                v1 = v31;
                v29 = 1 << *(_BYTE *)(v4 + 32);
                if (v29 > 63)
                  bzero(v33, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v29;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_39;
                  if (v14 >= v32)
                    goto LABEL_33;
                  v19 = v33[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_23;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_23:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = *(_QWORD *)(v34 + 72);
      sub_1D7AACCDC(*(_QWORD *)(v4 + 48) + v21 * v17, v36, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
      sub_1D7B4A980();
      sub_1D7B4A1C4();
      sub_1D7AA76D4((unint64_t *)&unk_1F014DF30, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB44E0], MEMORY[0x1E0CB44F0]);
      sub_1D7B4A2A8();
      sub_1D7B4A2A8();
      result = sub_1D7B4A998();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      result = sub_1D7AACCDC(v36, *(_QWORD *)(v7 + 48) + v15 * v21, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v1 = v7;
  return result;
}

uint64_t sub_1D7AD241C(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_1D7AD1D6C();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_1D7AD28D4();
      goto LABEL_22;
    }
    sub_1D7AD2CBC();
  }
  v11 = *v4;
  sub_1D7B4A980();
  sub_1D7B4A3F8();
  result = sub_1D7B4A998();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_1D7B4A938(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_1D7B4A968();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_1D7B4A938();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

uint64_t sub_1D7AD25B4(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  sub_1D7ACB9A8();
  v33 = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v30 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v30 - v15;
  v17 = *(_QWORD *)(*v3 + 16);
  v18 = *(_QWORD *)(*v3 + 24);
  v31 = v8;
  v32 = v3;
  if (v18 > v17 && (a3 & 1) != 0)
    goto LABEL_15;
  if ((a3 & 1) != 0)
  {
    sub_1D7AD2044();
  }
  else
  {
    if (v18 > v17)
    {
      sub_1D7AD2A80();
      goto LABEL_15;
    }
    sub_1D7AD2F64();
  }
  v19 = *v3;
  sub_1D7B4A980();
  sub_1D7B4A1C4();
  sub_1D7AA76D4((unint64_t *)&unk_1F014DF30, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB44E0], MEMORY[0x1E0CB44F0]);
  sub_1D7B4A2A8();
  sub_1D7B4A2A8();
  v20 = sub_1D7B4A998();
  v21 = -1 << *(_BYTE *)(v19 + 32);
  a2 = v20 & ~v21;
  v35 = v19 + 56;
  v36 = v19;
  if (((*(_QWORD *)(v19 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v34 = ~v21;
    v22 = *(_QWORD *)(v8 + 72);
    do
    {
      sub_1D7AAD16C(*(_QWORD *)(v36 + 48) + v22 * a2, (uint64_t)v16, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
      sub_1D7AA76D4(&qword_1F014D5E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB44E0], MEMORY[0x1E0CB4500]);
      v23 = sub_1D7B4A320();
      sub_1D7AAD16C((uint64_t)v16, (uint64_t)v14, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
      sub_1D7AAD16C(a1, (uint64_t)v11, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
      if ((v23 & 1) != 0)
      {
        v24 = sub_1D7B4A320();
        sub_1D7AAD1B0((uint64_t)v11, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
        sub_1D7AAD1B0((uint64_t)v14, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
        sub_1D7AAD1B0((uint64_t)v16, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
        if ((v24 & 1) != 0)
        {
          sub_1D7B4A968();
          __break(1u);
          break;
        }
      }
      else
      {
        sub_1D7AAD1B0((uint64_t)v11, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
        sub_1D7AAD1B0((uint64_t)v14, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
        sub_1D7AAD1B0((uint64_t)v16, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
      }
      a2 = (a2 + 1) & v34;
    }
    while (((*(_QWORD *)(v35 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_15:
  v25 = *v32;
  *(_QWORD *)(*v32 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_1D7AACCDC(a1, *(_QWORD *)(v25 + 48) + *(_QWORD *)(v31 + 72) * a2, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
  v27 = *(_QWORD *)(v25 + 16);
  v28 = __OFADD__(v27, 1);
  v29 = v27 + 1;
  if (v28)
    __break(1u);
  else
    *(_QWORD *)(v25 + 16) = v29;
  return result;
}

void *sub_1D7AD28D4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_1D7AD39F0();
  v2 = *v0;
  v3 = sub_1D7B4A7AC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1D7AD2A80()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  uint64_t v11;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  sub_1D7ACB9A8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AD3A4C(0, &qword_1F014E2E0, v6, (uint64_t (*)(void))sub_1D7AD3ABC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v7 = *v0;
  v8 = sub_1D7B4A7AC();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v1 = v9;
    return result;
  }
  v26 = v1;
  result = (void *)(v8 + 56);
  v11 = v7 + 56;
  v12 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 56 + 8 * v12)
    result = memmove(result, (const void *)(v7 + 56), 8 * v12);
  v14 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v15 = 1 << *(_BYTE *)(v7 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v7 + 56);
  v18 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v22 >= v18)
      goto LABEL_28;
    v23 = *(_QWORD *)(v11 + 8 * v22);
    ++v14;
    if (!v23)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v18)
        goto LABEL_28;
      v23 = *(_QWORD *)(v11 + 8 * v14);
      if (!v23)
      {
        v14 = v22 + 2;
        if (v22 + 2 >= v18)
          goto LABEL_28;
        v23 = *(_QWORD *)(v11 + 8 * v14);
        if (!v23)
          break;
      }
    }
LABEL_27:
    v17 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_12:
    v21 = *(_QWORD *)(v3 + 72) * v20;
    sub_1D7AAD16C(*(_QWORD *)(v7 + 48) + v21, (uint64_t)v5, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
    result = (void *)sub_1D7AACCDC((uint64_t)v5, *(_QWORD *)(v9 + 48) + v21, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
  }
  v24 = v22 + 3;
  if (v24 >= v18)
  {
LABEL_28:
    result = (void *)swift_release();
    v1 = v26;
    goto LABEL_30;
  }
  v23 = *(_QWORD *)(v11 + 8 * v24);
  if (v23)
  {
    v14 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    v14 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v14 >= v18)
      goto LABEL_28;
    v23 = *(_QWORD *)(v11 + 8 * v14);
    ++v24;
    if (v23)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_1D7AD2CBC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  sub_1D7AD39F0();
  v3 = sub_1D7B4A7B8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_1D7B4A980();
    swift_bridgeObjectRetain();
    sub_1D7B4A3F8();
    result = sub_1D7B4A998();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1D7AD2F64()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = v0;
  sub_1D7ACB9A8();
  v35 = *(_QWORD *)(v2 - 8);
  v36 = v2;
  MEMORY[0x1E0C80A78](v2);
  v37 = (uint64_t)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *v0;
  sub_1D7AD3A4C(0, &qword_1F014E2E0, v5, (uint64_t (*)(void))sub_1D7AD3ABC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC268]);
  v6 = sub_1D7B4A7B8();
  v7 = v6;
  if (!*(_QWORD *)(v4 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v7;
    return result;
  }
  v8 = 1 << *(_BYTE *)(v4 + 32);
  v9 = *(_QWORD *)(v4 + 56);
  v32 = v0;
  v33 = v4 + 56;
  if (v8 < 64)
    v10 = ~(-1 << v8);
  else
    v10 = -1;
  v11 = v10 & v9;
  v34 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 56;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v34)
      goto LABEL_33;
    v19 = *(_QWORD *)(v33 + 8 * v18);
    ++v14;
    if (!v19)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v34)
        goto LABEL_33;
      v19 = *(_QWORD *)(v33 + 8 * v14);
      if (!v19)
      {
        v14 = v18 + 2;
        if (v18 + 2 >= v34)
          goto LABEL_33;
        v19 = *(_QWORD *)(v33 + 8 * v14);
        if (!v19)
          break;
      }
    }
LABEL_23:
    v11 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    v21 = v4;
    v22 = *(_QWORD *)(v4 + 48);
    v23 = *(_QWORD *)(v35 + 72);
    sub_1D7AAD16C(v22 + v23 * v17, v37, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
    sub_1D7B4A980();
    sub_1D7B4A1C4();
    sub_1D7AA76D4((unint64_t *)&unk_1F014DF30, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB44E0], MEMORY[0x1E0CB44F0]);
    sub_1D7B4A2A8();
    sub_1D7B4A2A8();
    result = sub_1D7B4A998();
    v24 = -1 << *(_BYTE *)(v7 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v26);
      }
      while (v30 == -1);
      v15 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    result = sub_1D7AACCDC(v37, *(_QWORD *)(v7 + 48) + v15 * v23, (uint64_t (*)(_QWORD))sub_1D7ACB9A8);
    ++*(_QWORD *)(v7 + 16);
    v4 = v21;
  }
  v20 = v18 + 3;
  if (v20 >= v34)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v32;
    goto LABEL_35;
  }
  v19 = *(_QWORD *)(v33 + 8 * v20);
  if (v19)
  {
    v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    v14 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v14 >= v34)
      goto LABEL_33;
    v19 = *(_QWORD *)(v33 + 8 * v14);
    ++v20;
    if (v19)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1D7AD3300@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1D7B49A08();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1D7AD332C()
{
  return sub_1D7B49A14();
}

uint64_t sub_1D7AD3350(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v16 = MEMORY[0x1E0DEE9D8];
    sub_1D7AA5FAC(0, v3, 0);
    v4 = v16;
    v7 = (uint64_t *)(a1 + 40);
    v8 = a2;
    do
    {
      v10 = *(v7 - 1);
      v9 = *v7;
      v11 = *(_QWORD *)(v16 + 16);
      v12 = *(_QWORD *)(v16 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v11 >= v12 >> 1)
      {
        sub_1D7AA5FAC(v12 > 1, v11 + 1, 1);
        v8 = a2;
      }
      v7 += 2;
      *(_QWORD *)(v16 + 16) = v11 + 1;
      v13 = (_QWORD *)(v16 + 32 * v11);
      v13[4] = v8;
      v13[5] = a3;
      v13[6] = v10;
      v13[7] = v9;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t sub_1D7AD3444(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  v2 = 0;
  v3 = result + 40;
  v4 = -(uint64_t)v1;
  v5 = MEMORY[0x1E0DEE9D8];
  v15 = result + 40;
  v16 = *(_QWORD *)(result + 16);
  do
  {
    if (v2 <= v1)
      v6 = v1;
    else
      v6 = v2;
    v7 = -(uint64_t)v6;
    for (i = (uint64_t *)(v3 + 16 * v2++); ; i += 2)
    {
      if (v7 + v2 == 1)
      {
        __break(1u);
        return result;
      }
      v10 = *(i - 1);
      v9 = *i;
      swift_bridgeObjectRetain_n();
      v11 = sub_1D7AD1830(&v17, v10, v9);
      swift_bridgeObjectRelease();
      if ((v11 & 1) != 0)
        break;
      result = swift_bridgeObjectRelease();
      ++v2;
      if (v4 + v2 == 1)
        return v5;
    }
    result = swift_isUniquelyReferenced_nonNull_native();
    v18 = v5;
    if ((result & 1) == 0)
    {
      result = sub_1D7AA5F1C(0, *(_QWORD *)(v5 + 16) + 1, 1);
      v5 = v18;
    }
    v13 = *(_QWORD *)(v5 + 16);
    v12 = *(_QWORD *)(v5 + 24);
    if (v13 >= v12 >> 1)
    {
      result = sub_1D7AA5F1C(v12 > 1, v13 + 1, 1);
      v5 = v18;
    }
    *(_QWORD *)(v5 + 16) = v13 + 1;
    v14 = v5 + 16 * v13;
    *(_QWORD *)(v14 + 32) = v10;
    *(_QWORD *)(v14 + 40) = v9;
    v3 = v15;
    v1 = v16;
  }
  while (v4 + v2);
  return v5;
}

void sub_1D7AD35AC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014E2C0)
  {
    sub_1D7AD0A84();
    sub_1D7AACD88();
    v0 = sub_1D7B49924();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014E2C0);
  }
}

uint64_t sub_1D7AD3614@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1D7ACFF28(a1, a2);
}

uint64_t sub_1D7AD362C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = type metadata accessor for AccessoryRectangularTitleView();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3 = v0 + ((v2 + 16) & ~v2) + *(int *)(v1 + 28);
  sub_1D7AA787C(0, &qword_1ED0AC8C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CEFDA8], MEMORY[0x1E0CD87D0]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = sub_1D7B4A200();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  }
  else
  {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t sub_1D7AD3700@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for AccessoryRectangularTitleView();
  return sub_1D7ACFD1C(*a1, a1[1], a1[2], a1[3], a2);
}

void sub_1D7AD3754()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014E2C8)
  {
    sub_1D7AA787C(255, &qword_1F014E258, (uint64_t (*)(uint64_t))sub_1D7AD0D1C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    v0 = sub_1D7B49924();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014E2C8);
  }
}

uint64_t sub_1D7AD37D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_1D7B49AA4();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1D7AD3800()
{
  return sub_1D7B49AB0();
}

uint64_t sub_1D7AD382C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1D7B49A08();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1D7AD3858()
{
  return sub_1D7B49A14();
}

uint64_t sub_1D7AD387C(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t), void (*a5)(uint64_t))
{
  uint64_t v7;

  sub_1D7AD0C3C(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t sub_1D7AD38CC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  uint64_t v5;

  sub_1D7AD0C3C(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

unint64_t sub_1D7AD3908()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[4];

  result = qword_1F014E2D0;
  if (!qword_1F014E2D0)
  {
    sub_1D7AD0E04();
    v2 = v1;
    v3[2] = MEMORY[0x1E0CDDD78];
    v3[3] = MEMORY[0x1E0CDDD58];
    v3[0] = swift_getOpaqueTypeConformance2();
    v3[1] = MEMORY[0x1E0CD9758];
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1F014E2D0);
  }
  return result;
}

uint64_t sub_1D7AD3994(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1D7AD0C3C(0, &qword_1F014E270, (void (*)(uint64_t))sub_1D7AD0E04, (void (*)(uint64_t))MEMORY[0x1E0CDCFD0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1D7AD39F0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014E2D8)
  {
    v0 = sub_1D7B4A7D0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014E2D8);
  }
}

void sub_1D7AD3A4C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*a2)
  {
    v9 = a3(255);
    v10 = a4();
    v11 = a5(a1, v9, v10);
    if (!v12)
      atomic_store(v11, a2);
  }
}

unint64_t sub_1D7AD3ABC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_1F014E2E8;
  if (!qword_1F014E2E8)
  {
    sub_1D7ACB9A8();
    v2 = v1;
    v3 = sub_1D7AA76D4((unint64_t *)&unk_1F014DF30, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB44E0], MEMORY[0x1E0CB44F0]);
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0DEA4D0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1F014E2E8);
  }
  return result;
}

uint64_t sub_1D7AD3B3C(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1D7AD3B64(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1D7AD3B8C(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_1D7AA787C(0, a3, a4, MEMORY[0x1E0CD87D0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

ValueMetadata *type metadata accessor for AccessoryRectangularTitleView.TitleDetail()
{
  return &type metadata for AccessoryRectangularTitleView.TitleDetail;
}

uint64_t sub_1D7AD3BF4()
{
  return sub_1D7AA76D4(&qword_1F014E308, (uint64_t (*)(uint64_t))sub_1D7AD3C20, MEMORY[0x1E0CD8CC8]);
}

void sub_1D7AD3C20(uint64_t a1)
{
  sub_1D7AD3A4C(a1, &qword_1F014E310, (uint64_t (*)(uint64_t))sub_1D7AD0A84, (uint64_t (*)(void))sub_1D7AD3C44, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD8CB0]);
}

unint64_t sub_1D7AD3C44()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[3];

  result = qword_1F014E318;
  if (!qword_1F014E318)
  {
    sub_1D7AD0A84();
    v2 = v1;
    sub_1D7AD0BA8();
    v4[1] = v3;
    v4[2] = sub_1D7AD0F2C();
    v4[0] = swift_getOpaqueTypeConformance2();
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CDFEE8], v2, v4);
    atomic_store(result, (unint64_t *)&qword_1F014E318);
  }
  return result;
}

unint64_t sub_1D7AD3CCC()
{
  unint64_t result;

  result = qword_1F014E320;
  if (!qword_1F014E320)
  {
    result = MEMORY[0x1D829FF28](&unk_1D7B85094, &type metadata for AccessoryRectangularTitleView.TitleDetail);
    atomic_store(result, (unint64_t *)&qword_1F014E320);
  }
  return result;
}

uint64_t FeatureRegulatoryInfoView.init(infoProvider:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = swift_getKeyPath();
  sub_1D7AA787C(0, &qword_1F014E2F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9030], MEMORY[0x1E0CD87D0]);
  swift_storeEnumTagMultiPayload();
  v2 = type metadata accessor for FeatureRegulatoryInfoView(0);
  v3 = (uint64_t *)((char *)a1 + *(int *)(v2 + 24));
  v8 = sub_1D7B4A3BC();
  v9 = v4;
  sub_1D7B4A41C();
  *v3 = v8;
  v3[1] = v9;
  v5 = (uint64_t *)((char *)a1 + *(int *)(v2 + 20));
  type metadata accessor for FeatureRegulatoryInfoProvider();
  sub_1D7AA76D4(&qword_1F014E328, (uint64_t (*)(uint64_t))type metadata accessor for FeatureRegulatoryInfoProvider, (uint64_t)&protocol conformance descriptor for FeatureRegulatoryInfoProvider);
  result = sub_1D7B49954();
  *v5 = result;
  v5[1] = v7;
  return result;
}

uint64_t FeatureRegulatoryInfoView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t OpaqueTypeConformance2;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v2 = v1;
  v36 = a1;
  v3 = sub_1D7B49CC0();
  v32 = *(_QWORD *)(v3 - 8);
  v33 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1D7B49C3C();
  v30 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AD7E84();
  v10 = v9;
  v29 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AD84AC(0);
  v14 = v13;
  v31 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AD855C(0);
  v34 = *(_QWORD *)(v17 - 8);
  v35 = v17;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = v2;
  sub_1D7AA787C(0, &qword_1F014E338, (uint64_t (*)(uint64_t))sub_1D7AD7F18, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
  sub_1D7AD844C();
  sub_1D7B49E40();
  sub_1D7B49C30();
  v20 = sub_1D7AA76D4(&qword_1F014E3E8, (uint64_t (*)(uint64_t))sub_1D7AD7E84, MEMORY[0x1E0CDD950]);
  v21 = MEMORY[0x1E0CDBD50];
  sub_1D7B49F78();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v10);
  sub_1D7B49CB4();
  v40 = v10;
  v41 = v6;
  v42 = v20;
  v43 = v21;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  sub_1D7B49F24();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v5, v33);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v16, v14);
  v40 = 0;
  v41 = 0xE000000000000000;
  sub_1D7B4A7DC();
  swift_bridgeObjectRelease();
  if (qword_1F014CF90 != -1)
    swift_once();
  v23 = (id)qword_1F0154598;
  v24 = sub_1D7B48F7C();
  v26 = v25;

  v40 = v24;
  v41 = v26;
  v38 = v14;
  v39 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  sub_1D7ABCCEC();
  v27 = v35;
  sub_1D7B49F0C();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v19, v27);
}

uint64_t sub_1D7AD41C0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  void *v54;
  id v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t *v70;
  char *v71;
  void *v72;
  id v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  void (*v101)(char *, char *, uint64_t);
  void (*v102)(char *, char *, uint64_t);
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  void (*v123)(char *, uint64_t);
  void (*v124)(char *, uint64_t);
  uint64_t v125;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  char v176;
  uint64_t v177;

  v148 = a1;
  v147 = a2;
  sub_1D7AD842C(0);
  v134 = v2;
  v133 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v132 = (char *)&v127 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AD8418(0);
  v146 = v4;
  v145 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v131 = (char *)&v127 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AD8714(0);
  MEMORY[0x1E0C80A78](v6);
  v142 = (uint64_t)&v127 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = sub_1D7B490A8();
  v143 = *(_QWORD *)(v144 - 8);
  MEMORY[0x1E0C80A78](v144);
  v130 = (char *)&v127 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AD83FC(0);
  v10 = MEMORY[0x1E0C80A78](v9);
  v165 = (uint64_t)&v127 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v164 = (uint64_t)&v127 - v12;
  v13 = sub_1D7B48F4C();
  MEMORY[0x1E0C80A78](v13);
  v128 = (uint64_t)&v127 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AD86E4(0);
  MEMORY[0x1E0C80A78](v15);
  v139 = (uint64_t)&v127 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(0);
  v137 = *(_QWORD *)(v138 - 8);
  MEMORY[0x1E0C80A78](v138);
  v129 = (uint64_t)&v127 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AD832C();
  v19 = MEMORY[0x1E0C80A78](v18);
  v163 = (uint64_t)&v127 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v168 = (uint64_t)&v127 - v21;
  sub_1D7AD8044(0, &qword_1F014E358, sub_1D7AD80A8);
  v169 = v22;
  v167 = *(_QWORD *)(v22 - 8);
  v23 = MEMORY[0x1E0C80A78](v22);
  v162 = (char *)&v127 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v135 = (char *)&v127 - v26;
  MEMORY[0x1E0C80A78](v25);
  v166 = (char *)&v127 - v27;
  v157 = type metadata accessor for FeatureRegulatoryInfo(0);
  v28 = MEMORY[0x1E0C80A78](v157);
  v141 = (char *)&v127 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x1E0C80A78](v28);
  v32 = (char *)&v127 - v31;
  MEMORY[0x1E0C80A78](v30);
  v34 = (uint64_t *)((char *)&v127 - v33);
  sub_1D7AD8044(0, &qword_1F014E348, (void (*)(uint64_t))sub_1D7AD0DA8);
  v36 = v35;
  v37 = *(_QWORD *)(v35 - 8);
  v38 = MEMORY[0x1E0C80A78](v35);
  v160 = (char *)&v127 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = MEMORY[0x1E0C80A78](v38);
  v42 = (char *)&v127 - v41;
  MEMORY[0x1E0C80A78](v40);
  v44 = (char *)&v127 - v43;
  v174 = 0;
  v175 = 0xE000000000000000;
  sub_1D7B4A7DC();
  swift_bridgeObjectRelease();
  if (qword_1F014CF90 != -1)
    swift_once();
  v45 = (id)qword_1F0154598;
  v46 = sub_1D7B48F7C();
  v48 = v47;

  v174 = v46;
  v175 = v48;
  sub_1D7ABCCEC();
  v174 = sub_1D7B49EB8();
  v175 = v49;
  v176 = v50 & 1;
  v177 = v51;
  MEMORY[0x1E0C80A78](v174);
  v52 = v148;
  sub_1D7AD0DA8();
  sub_1D7AD82AC();
  sub_1D7B4A0EC();
  v158 = v44;
  v159 = v37;
  v53 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
  v161 = v36;
  v53(v44, v42, v36);
  v136 = type metadata accessor for FeatureRegulatoryInfoView(0);
  v150 = v52 + *(int *)(v136 + 20);
  v54 = *(void **)(v150 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  v55 = v54;
  sub_1D7B4981C();

  swift_release();
  swift_release();
  v56 = (void *)v34[4];
  v57 = v34[5];
  v59 = (void *)v34[6];
  v58 = v34[7];
  v60 = v34[8];
  v61 = (void *)v34[9];
  sub_1D7AD8640(v56, v57, v59, v58, v60, v61);
  v62 = sub_1D7AAD1B0((uint64_t)v34, type metadata accessor for FeatureRegulatoryInfo);
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v149 = 0;
  if (v59 != (void *)1)
  {
    v70 = (uint64_t *)(v52 + *(int *)(v136 + 24));
    v69 = *v70;
    v149 = v70[1];
    v62 = swift_bridgeObjectRetain();
    v63 = (uint64_t)v56;
    v64 = v57;
    v65 = v59;
    v66 = v58;
    v67 = v60;
    v68 = v61;
  }
  v151 = v68;
  v152 = v67;
  v140 = v66;
  v153 = v65;
  v154 = v64;
  v155 = v63;
  MEMORY[0x1E0C80A78](v62);
  sub_1D7AD80A8(0);
  sub_1D7AA76D4(&qword_1F014E600, (uint64_t (*)(uint64_t))sub_1D7AD80A8, MEMORY[0x1E0CE0680]);
  v71 = v135;
  sub_1D7B4A0F8();
  (*(void (**)(char *, char *, uint64_t))(v167 + 32))(v166, v71, v169);
  v72 = *(void **)(v150 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  v73 = v72;
  sub_1D7B4981C();

  swift_release();
  swift_release();
  v74 = v139;
  sub_1D7AAD16C((uint64_t)&v32[*(int *)(v157 + 32)], v139, (uint64_t (*)(_QWORD))sub_1D7AD86E4);
  sub_1D7AAD1B0((uint64_t)v32, type metadata accessor for FeatureRegulatoryInfo);
  v75 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v137 + 48))(v74, 1, v138);
  v156 = v69;
  if (v75 == 1)
  {
    sub_1D7AAD1B0(v74, (uint64_t (*)(_QWORD))sub_1D7AD86E4);
    sub_1D7AD8044(0, &qword_1F014E3B0, (void (*)(uint64_t))sub_1D7AD83A0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v168, 1, 1, v76);
  }
  else
  {
    v77 = v129;
    sub_1D7AACCDC(v74, v129, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
    sub_1D7AD5B78(v128);
    v170 = sub_1D7B49EAC();
    v171 = v78;
    v172 = v79 & 1;
    v173 = v80;
    MEMORY[0x1E0C80A78](v170);
    sub_1D7AD83A0();
    sub_1D7AA76D4(&qword_1F014E608, (uint64_t (*)(uint64_t))sub_1D7AD83A0, MEMORY[0x1E0CDFA58]);
    v81 = v168;
    sub_1D7B4A104();
    sub_1D7AD8044(0, &qword_1F014E3B0, (void (*)(uint64_t))sub_1D7AD83A0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56))(v81, 0, 1, v82);
    sub_1D7AAD1B0(v77, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
  }
  v83 = v164;
  v84 = v144;
  v85 = v143;
  v86 = v159;
  v87 = *(void **)(v150 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  v88 = v87;
  v89 = (uint64_t)v141;
  sub_1D7B4981C();

  swift_release();
  swift_release();
  v90 = v142;
  sub_1D7AAD16C(v89 + *(int *)(v157 + 36), v142, (uint64_t (*)(_QWORD))sub_1D7AD8714);
  sub_1D7AAD1B0(v89, type metadata accessor for FeatureRegulatoryInfo);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48))(v90, 1, v84) == 1)
  {
    sub_1D7AAD1B0(v90, (uint64_t (*)(_QWORD))sub_1D7AD8714);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v145 + 56))(v83, 1, 1, v146);
  }
  else
  {
    v91 = v130;
    v92 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v85 + 32))(v130, v90, v84);
    MEMORY[0x1E0C80A78](v92);
    v93 = v148;
    sub_1D7AD83A0();
    sub_1D7AA76D4(&qword_1F014E608, (uint64_t (*)(uint64_t))sub_1D7AD83A0, MEMORY[0x1E0CDFA58]);
    v94 = v132;
    sub_1D7B4A0F8();
    v95 = (uint64_t *)(v93 + *(int *)(v136 + 24));
    v96 = v95[1];
    v170 = *v95;
    v171 = v96;
    swift_bridgeObjectRetain();
    sub_1D7B4A41C();
    sub_1D7ADAFE4();
    v97 = (uint64_t)v131;
    v98 = v134;
    sub_1D7B49F3C();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v133 + 8))(v94, v98);
    sub_1D7AACCDC(v97, v83, (uint64_t (*)(_QWORD))sub_1D7AD8418);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v145 + 56))(v83, 0, 1, v146);
    (*(void (**)(char *, uint64_t))(v85 + 8))(v91, v84);
  }
  v100 = v160;
  v99 = v161;
  v101 = *(void (**)(char *, char *, uint64_t))(v86 + 16);
  v101(v160, v158, v161);
  v102 = *(void (**)(char *, char *, uint64_t))(v167 + 16);
  v103 = v162;
  v102(v162, v166, v169);
  v104 = v163;
  sub_1D7AAD16C(v168, v163, (uint64_t (*)(_QWORD))sub_1D7AD832C);
  sub_1D7AAD16C(v83, v165, (uint64_t (*)(_QWORD))sub_1D7AD83FC);
  v105 = v147;
  v101(v147, v100, v99);
  sub_1D7AD7F18();
  v107 = v106;
  v108 = &v105[*(int *)(v106 + 48)];
  v109 = v155;
  v110 = v154;
  *(_QWORD *)v108 = v155;
  *((_QWORD *)v108 + 1) = v110;
  v111 = v140;
  *((_QWORD *)v108 + 2) = v153;
  *((_QWORD *)v108 + 3) = v111;
  v112 = v151;
  *((_QWORD *)v108 + 4) = v152;
  *((_QWORD *)v108 + 5) = v112;
  v113 = v149;
  *((_QWORD *)v108 + 6) = v156;
  *((_QWORD *)v108 + 7) = v113;
  v114 = v103;
  v115 = v169;
  v102(&v105[*(int *)(v106 + 64)], v114, v169);
  sub_1D7AAD16C(v104, (uint64_t)&v105[*(int *)(v107 + 80)], (uint64_t (*)(_QWORD))sub_1D7AD832C);
  v116 = v165;
  sub_1D7AAD16C(v165, (uint64_t)&v105[*(int *)(v107 + 96)], (uint64_t (*)(_QWORD))sub_1D7AD83FC);
  v117 = v109;
  v118 = v110;
  v119 = v153;
  v120 = v152;
  v121 = v112;
  v122 = v156;
  sub_1D7ADAF3C(v117, v118, v153, v111, v152, v121, v156, v113);
  sub_1D7AAD1B0(v164, (uint64_t (*)(_QWORD))sub_1D7AD83FC);
  sub_1D7AAD1B0(v168, (uint64_t (*)(_QWORD))sub_1D7AD832C);
  v123 = *(void (**)(char *, uint64_t))(v167 + 8);
  v123(v166, v115);
  v124 = *(void (**)(char *, uint64_t))(v159 + 8);
  v125 = v161;
  v124(v158, v161);
  sub_1D7AAD1B0(v116, (uint64_t (*)(_QWORD))sub_1D7AD83FC);
  sub_1D7AAD1B0(v163, (uint64_t (*)(_QWORD))sub_1D7AD832C);
  v123(v162, v115);
  sub_1D7ADAF8C(v155, v154, v119, v111, v120, v151, v122, v113);
  return ((uint64_t (*)(char *, uint64_t))v124)(v160, v125);
}

uint64_t sub_1D7AD5028(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  v2 = type metadata accessor for FeatureRegulatoryInfo(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (_QWORD *)((char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for FeatureRegulatoryInfoView(0);
  v6 = *(void **)(a1 + *(int *)(v5 + 20) + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  v7 = v6;
  sub_1D7B4981C();

  swift_release();
  swift_release();
  v9 = *v4;
  v8 = v4[1];
  swift_bridgeObjectRetain();
  sub_1D7AAD1B0((uint64_t)v4, type metadata accessor for FeatureRegulatoryInfo);
  v19 = v9;
  v20 = v8;
  sub_1D7ABCCEC();
  v10 = sub_1D7B49EB8();
  v12 = v11;
  LOBYTE(v9) = v13 & 1;
  v19 = v10;
  v20 = v11;
  v21 = v13 & 1;
  v22 = v14;
  v15 = (_QWORD *)(a1 + *(int *)(v5 + 24));
  v16 = v15[1];
  v18[0] = *v15;
  v18[1] = v16;
  swift_bridgeObjectRetain();
  sub_1D7B4A41C();
  sub_1D7B49F3C();
  swift_bridgeObjectRelease();
  sub_1D7AACF84(v10, v12, v9);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7AD51D4@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD v79[4];
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;

  v92 = a1;
  v96 = a2;
  sub_1D7AD0DA8();
  v79[3] = v2;
  MEMORY[0x1E0C80A78](v2);
  v79[2] = (char *)v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AD8210(0);
  v83 = v4;
  v82 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v81 = (char *)v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AD8198(0);
  v93 = *(_QWORD *)(v6 - 8);
  v94 = v6;
  MEMORY[0x1E0C80A78](v6);
  v80 = (char *)v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AD817C(0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v95 = (uint64_t)v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v98 = (uint64_t)v79 - v11;
  sub_1D7ADB344(0);
  v87 = v12;
  v13 = MEMORY[0x1E0C80A78](v12);
  v86 = (uint64_t)v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v79 - v15;
  v17 = type metadata accessor for FeatureRegulatoryInfo(0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for InstructionsForUseWebViewContainer(0);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)v79 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AD8144(0);
  v89 = *(_QWORD *)(v23 - 8);
  v90 = v23;
  MEMORY[0x1E0C80A78](v23);
  v88 = (char *)v79 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AD8130(0);
  v26 = MEMORY[0x1E0C80A78](v25);
  v97 = (char *)v79 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v91 = (uint64_t)v79 - v28;
  v101 = 0;
  v102 = 0xE000000000000000;
  sub_1D7B4A7DC();
  swift_bridgeObjectRelease();
  if (qword_1F014CF90 != -1)
    swift_once();
  v29 = (id)qword_1F0154598;
  v79[1] = 0x80000001D7BA5270;
  v30 = sub_1D7B48F7C();
  v32 = v31;

  v101 = v30;
  v102 = v32;
  v84 = type metadata accessor for FeatureRegulatoryInfoView(0);
  v33 = v92;
  v85 = v92 + *(int *)(v84 + 20);
  v34 = *(void **)(v85 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  v35 = v34;
  sub_1D7B4981C();

  swift_release();
  swift_release();
  v36 = *((_QWORD *)v19 + 2);
  v37 = *((_QWORD *)v19 + 3);
  swift_bridgeObjectRetain();
  sub_1D7AAD1B0((uint64_t)v19, type metadata accessor for FeatureRegulatoryInfo);
  LOBYTE(v99) = 0;
  sub_1D7B4A038();
  v38 = v106;
  *v22 = v105;
  *((_QWORD *)v22 + 1) = v38;
  v39 = type metadata accessor for ErrorDetails(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v16, 1, 1, v39);
  sub_1D7AAD16C((uint64_t)v16, v86, (uint64_t (*)(_QWORD))sub_1D7ADB344);
  sub_1D7B4A038();
  sub_1D7AAD1B0((uint64_t)v16, (uint64_t (*)(_QWORD))sub_1D7ADB344);
  v40 = &v22[*(int *)(v20 + 24)];
  *(_QWORD *)v40 = v36;
  *((_QWORD *)v40 + 1) = v37;
  sub_1D7AD8160();
  v41 = sub_1D7ABCCEC();
  v42 = v88;
  sub_1D7B4993C();
  v43 = (uint64_t *)(v33 + *(int *)(v84 + 24));
  v44 = v43[1];
  v101 = *v43;
  v102 = v44;
  swift_bridgeObjectRetain();
  sub_1D7B4A41C();
  sub_1D7AA76D4(&qword_1F014E628, (uint64_t (*)(uint64_t))sub_1D7AD8144, MEMORY[0x1E0CD9468]);
  v45 = (uint64_t)v97;
  v46 = v90;
  sub_1D7B49F3C();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v89 + 8))(v42, v46);
  v47 = v91;
  sub_1D7AACCDC(v45, v91, (uint64_t (*)(_QWORD))sub_1D7AD8130);
  v48 = *(void **)(v85 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  v49 = v48;
  sub_1D7B4981C();

  swift_release();
  swift_release();
  LODWORD(v46) = v19[80];
  sub_1D7AAD1B0((uint64_t)v19, type metadata accessor for FeatureRegulatoryInfo);
  v50 = 1;
  v51 = v45;
  if ((_DWORD)v46 == 1)
  {
    v101 = 0;
    v102 = 0xE000000000000000;
    sub_1D7B4A7DC();
    swift_bridgeObjectRelease();
    v52 = (id)qword_1F0154598;
    v53 = sub_1D7B48F7C();
    v55 = v54;

    v105 = v53;
    v106 = v55;
    v101 = 0;
    v102 = 0xE000000000000000;
    sub_1D7B4A7DC();
    swift_bridgeObjectRelease();
    v56 = (id)qword_1F0154598;
    v57 = sub_1D7B48F7C();
    v59 = v58;

    v101 = v57;
    v102 = v59;
    v60 = sub_1D7B49EB8();
    v62 = v61;
    v101 = v60;
    v102 = v61;
    v92 = v41;
    v63 = v47;
    v65 = v64 & 1;
    v103 = v64 & 1;
    v104 = v66;
    v99 = 0;
    v100 = 0xE000000000000000;
    sub_1D7B4A7DC();
    v68 = *v43;
    v67 = v43[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v99 = v68;
    v100 = v67;
    sub_1D7B4A41C();
    sub_1D7B49F3C();
    swift_bridgeObjectRelease();
    v69 = v60;
    v51 = (uint64_t)v97;
    v70 = v65;
    v47 = v63;
    sub_1D7AACF84(v69, v62, v70);
    swift_bridgeObjectRelease();
    sub_1D7AD82AC();
    v71 = v81;
    sub_1D7B4993C();
    v101 = 0;
    v102 = 0xE000000000000000;
    sub_1D7B4A7DC();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v101 = v68;
    v102 = v67;
    sub_1D7B4A41C();
    sub_1D7AA76D4(&qword_1F014E630, (uint64_t (*)(uint64_t))sub_1D7AD8210, MEMORY[0x1E0CD9468]);
    v72 = (uint64_t)v80;
    v73 = v83;
    sub_1D7B49F3C();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v82 + 8))(v71, v73);
    sub_1D7AACCDC(v72, v98, (uint64_t (*)(_QWORD))sub_1D7AD8198);
    v50 = 0;
  }
  v74 = v98;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v93 + 56))(v98, v50, 1, v94);
  sub_1D7AAD16C(v47, v51, (uint64_t (*)(_QWORD))sub_1D7AD8130);
  v75 = v95;
  sub_1D7AAD16C(v74, v95, (uint64_t (*)(_QWORD))sub_1D7AD817C);
  v76 = v96;
  sub_1D7AAD16C(v51, v96, (uint64_t (*)(_QWORD))sub_1D7AD8130);
  sub_1D7AD80C4();
  sub_1D7AAD16C(v75, v76 + *(int *)(v77 + 48), (uint64_t (*)(_QWORD))sub_1D7AD817C);
  sub_1D7AAD1B0(v74, (uint64_t (*)(_QWORD))sub_1D7AD817C);
  sub_1D7AAD1B0(v47, (uint64_t (*)(_QWORD))sub_1D7AD8130);
  sub_1D7AAD1B0(v75, (uint64_t (*)(_QWORD))sub_1D7AD817C);
  return sub_1D7AAD1B0(v51, (uint64_t (*)(_QWORD))sub_1D7AD8130);
}

uint64_t sub_1D7AD5B78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  id v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t KeyPath;
  char *v50;
  char *v51;
  void (*v52)(uint64_t *, _QWORD);
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;

  v2 = v1;
  v66 = a1;
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1D7AA787C(0, &qword_1F014D7B0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4);
  v61 = (char *)&v53 - v5;
  sub_1D7AA787C(0, &qword_1F01493E8, (uint64_t (*)(uint64_t))sub_1D7ABA240, v3);
  MEMORY[0x1E0C80A78](v6);
  v62 = (char *)&v53 - v7;
  sub_1D7ABA240();
  v64 = v8;
  v60 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v53 - v12;
  v14 = sub_1D7B48FD0();
  MEMORY[0x1E0C80A78](v14);
  v15 = sub_1D7B48F4C();
  v63 = *(_QWORD *)(v15 - 8);
  v16 = MEMORY[0x1E0C80A78](v15);
  v59 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v65 = (char *)&v53 - v18;
  sub_1D7AD8714(0);
  v20 = MEMORY[0x1E0C80A78](v19);
  v58 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v53 - v22;
  v24 = sub_1D7B490A8();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v53 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(0);
  sub_1D7AAD16C(v2 + *(int *)(v28 + 28), (uint64_t)v23, (uint64_t (*)(_QWORD))sub_1D7AD8714);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) == 1)
  {
    sub_1D7AAD1B0((uint64_t)v23, (uint64_t (*)(_QWORD))sub_1D7AD8714);
    swift_bridgeObjectRetain();
    sub_1D7B48FC4();
    return sub_1D7B48F58();
  }
  else
  {
    v53 = v13;
    v54 = v11;
    v56 = v27;
    v57 = v15;
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v27, v23, v24);
    v67 = 0;
    v68 = 0xE000000000000000;
    sub_1D7B4A7DC();
    swift_bridgeObjectRelease();
    if (qword_1F014CF90 != -1)
      swift_once();
    v30 = (id)qword_1F0154598;
    v55 = sub_1D7B48F7C();

    v67 = 0;
    v68 = 0xE000000000000000;
    sub_1D7B4A7DC();
    swift_bridgeObjectRelease();
    v31 = (id)qword_1F0154598;
    v32 = sub_1D7B48F7C();
    v34 = v33;

    sub_1D7AA787C(0, (unint64_t *)&qword_1F014DC00, (uint64_t (*)(uint64_t))sub_1D7AC5A20, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_1D7B82CE0;
    v36 = *(_QWORD *)(v2 + 16);
    v37 = *(_QWORD *)(v2 + 24);
    v38 = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v35 + 56) = MEMORY[0x1E0DEA968];
    v39 = sub_1D7AC5A74();
    *(_QWORD *)(v35 + 32) = v36;
    *(_QWORD *)(v35 + 40) = v37;
    *(_QWORD *)(v35 + 96) = v38;
    *(_QWORD *)(v35 + 104) = v39;
    *(_QWORD *)(v35 + 64) = v39;
    *(_QWORD *)(v35 + 72) = v32;
    *(_QWORD *)(v35 + 80) = v34;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1D7B4A3C8();
    swift_bridgeObjectRelease();
    sub_1D7B48FC4();
    v40 = v65;
    sub_1D7B48F58();
    v41 = v63;
    v42 = v59;
    v43 = v57;
    (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v59, v40, v57);
    v67 = v32;
    v68 = v34;
    v44 = sub_1D7B4921C();
    v45 = (uint64_t)v61;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v61, 1, 1, v44);
    sub_1D7AA76D4(&qword_1F014DF88, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], MEMORY[0x1E0CAF230]);
    sub_1D7ABCCEC();
    v46 = (uint64_t)v62;
    sub_1D7B4903C();
    sub_1D7AAD130(v45, &qword_1F014D7B0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0E38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v46, 1, v64) == 1)
    {
      (*(void (**)(char *, uint64_t))(v25 + 8))(v56, v24);
      sub_1D7AAD130(v46, &qword_1F01493E8, (uint64_t (*)(uint64_t))sub_1D7ABA240, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    }
    else
    {
      v47 = (uint64_t)v53;
      sub_1D7AACCDC(v46, (uint64_t)v53, (uint64_t (*)(_QWORD))sub_1D7ABA240);
      v48 = (uint64_t)v54;
      sub_1D7AAD16C(v47, (uint64_t)v54, (uint64_t (*)(_QWORD))sub_1D7ABA240);
      KeyPath = swift_getKeyPath();
      MEMORY[0x1E0C80A78](KeyPath);
      v62 = (char *)swift_getKeyPath();
      v50 = v58;
      v51 = v56;
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v58, v56, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v50, 0, 1, v24);
      sub_1D7AA76D4(&qword_1F01493F0, (uint64_t (*)(uint64_t))sub_1D7ABA240, MEMORY[0x1E0DEB8A8]);
      v52 = (void (*)(uint64_t *, _QWORD))sub_1D7B48F64();
      sub_1D7ADB08C();
      sub_1D7B48FDC();
      v52(&v67, 0);
      v40 = v65;
      sub_1D7AAD1B0(v48, (uint64_t (*)(_QWORD))sub_1D7ABA240);
      sub_1D7AAD1B0(v47, (uint64_t (*)(_QWORD))sub_1D7ABA240);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v51, v24);
    }
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v41 + 32))(v66, v40, v43);
  }
}

uint64_t sub_1D7AD62B4()
{
  sub_1D7ABCCEC();
  swift_bridgeObjectRetain();
  swift_retain();
  return sub_1D7B4A080();
}

uint64_t sub_1D7AD632C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v19 = a1;
  v20 = a2;
  v21 = a3;
  v3 = sub_1D7B490A8();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x1E0C80A78](v3);
  v6 = type metadata accessor for FeatureRegulatoryInfoView(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = 0;
  v23 = 0xE000000000000000;
  sub_1D7B4A7DC();
  swift_bridgeObjectRelease();
  if (qword_1F014CF90 != -1)
    swift_once();
  v10 = (id)qword_1F0154598;
  v11 = sub_1D7B48F7C();
  v13 = v12;

  v22 = v11;
  v23 = v13;
  sub_1D7AAD16C(v19, (uint64_t)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for FeatureRegulatoryInfoView);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v20, v3);
  v14 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v15 = (v8 + *(unsigned __int8 *)(v4 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v16 = swift_allocObject();
  sub_1D7AACCDC((uint64_t)v9, v16 + v14, type metadata accessor for FeatureRegulatoryInfoView);
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v16 + v15, (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  sub_1D7ABCCEC();
  return sub_1D7B4A080();
}

uint64_t sub_1D7AD6544()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = sub_1D7B49900();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AD176C((uint64_t)v3);
  sub_1D7B498F4();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t FeatureRegulatoryInfo.productDisplayName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FeatureRegulatoryInfo.productDisplayName.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*FeatureRegulatoryInfo.productDisplayName.modify())()
{
  return nullsub_1;
}

uint64_t FeatureRegulatoryInfo.IFUURLProductName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FeatureRegulatoryInfo.IFUURLProductName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*FeatureRegulatoryInfo.IFUURLProductName.modify())()
{
  return nullsub_1;
}

id FeatureRegulatoryInfo.pairedDeviceAttributes.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void *)v1[4];
  v3 = v1[5];
  v4 = (void *)v1[6];
  v5 = v1[7];
  v6 = v1[8];
  v7 = (void *)v1[9];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  return sub_1D7AD8640(v2, v3, v4, v5, v6, v7);
}

__n128 FeatureRegulatoryInfo.pairedDeviceAttributes.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;
  __int128 v6;

  v5 = (__n128)a1[1];
  v6 = *a1;
  v2 = *((_QWORD *)a1 + 4);
  v3 = *((_QWORD *)a1 + 5);
  sub_1D7AD8688(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(void **)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(void **)(v1 + 72));
  result = v5;
  *(_OWORD *)(v1 + 32) = v6;
  *(__n128 *)(v1 + 48) = v5;
  *(_QWORD *)(v1 + 64) = v2;
  *(_QWORD *)(v1 + 72) = v3;
  return result;
}

uint64_t (*FeatureRegulatoryInfo.pairedDeviceAttributes.modify())()
{
  return nullsub_1;
}

uint64_t FeatureRegulatoryInfo.showManufacturersAddress.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t FeatureRegulatoryInfo.showManufacturersAddress.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 80) = result;
  return result;
}

uint64_t (*FeatureRegulatoryInfo.showManufacturersAddress.modify())()
{
  return nullsub_1;
}

uint64_t FeatureRegulatoryInfo.reenableActionConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FeatureRegulatoryInfo(0);
  return sub_1D7AAD16C(v1 + *(int *)(v3 + 32), a1, (uint64_t (*)(_QWORD))sub_1D7AD86E4);
}

uint64_t FeatureRegulatoryInfo.reenableActionConfiguration.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FeatureRegulatoryInfo(0);
  return sub_1D7AD8730(a1, v1 + *(int *)(v3 + 32), (uint64_t (*)(_QWORD))sub_1D7AD86E4);
}

uint64_t (*FeatureRegulatoryInfo.reenableActionConfiguration.modify())()
{
  type metadata accessor for FeatureRegulatoryInfo(0);
  return nullsub_1;
}

uint64_t FeatureRegulatoryInfo.contactAppleSupportURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FeatureRegulatoryInfo(0);
  return sub_1D7AAD16C(v1 + *(int *)(v3 + 36), a1, (uint64_t (*)(_QWORD))sub_1D7AD8714);
}

uint64_t FeatureRegulatoryInfo.contactAppleSupportURL.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FeatureRegulatoryInfo(0);
  return sub_1D7AD8730(a1, v1 + *(int *)(v3 + 36), (uint64_t (*)(_QWORD))sub_1D7AD8714);
}

uint64_t (*FeatureRegulatoryInfo.contactAppleSupportURL.modify())()
{
  type metadata accessor for FeatureRegulatoryInfo(0);
  return nullsub_1;
}

uint64_t FeatureRegulatoryInfo.init(productDisplayName:IFUURLProductName:pairedDeviceAttributes:showManufacturersAddress:reenableActionConfiguration:contactAppleSupportURL:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23;
  __int128 v24;

  v23 = a5[1];
  v24 = *a5;
  v15 = *((_QWORD *)a5 + 4);
  v16 = *((_QWORD *)a5 + 5);
  v17 = type metadata accessor for FeatureRegulatoryInfo(0);
  v18 = a9 + *(int *)(v17 + 32);
  v19 = type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  v20 = a9 + *(int *)(v17 + 36);
  v21 = sub_1D7B490A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_OWORD *)(a9 + 32) = v24;
  *(_OWORD *)(a9 + 48) = v23;
  *(_QWORD *)(a9 + 64) = v15;
  *(_QWORD *)(a9 + 72) = v16;
  *(_BYTE *)(a9 + 80) = a6;
  sub_1D7AD8730(a7, v18, (uint64_t (*)(_QWORD))sub_1D7AD86E4);
  return sub_1D7AD8730(a8, v20, (uint64_t (*)(_QWORD))sub_1D7AD8714);
}

uint64_t (*FeatureRegulatoryInfo.ReenableActionConfiguration.buttonTitle.modify())()
{
  return nullsub_1;
}

uint64_t (*FeatureRegulatoryInfo.ReenableActionConfiguration.footerText.modify())()
{
  return nullsub_1;
}

uint64_t sub_1D7AD69D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(a2 + 32) = sub_1D7ADAF04;
  *(_QWORD *)(a2 + 40) = v5;
  return result;
}

uint64_t FeatureRegulatoryInfo.ReenableActionConfiguration.action.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_retain();
  return v1;
}

uint64_t FeatureRegulatoryInfo.ReenableActionConfiguration.action.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*FeatureRegulatoryInfo.ReenableActionConfiguration.action.modify())()
{
  return nullsub_1;
}

uint64_t FeatureRegulatoryInfo.ReenableActionConfiguration.learnMoreURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(0);
  return sub_1D7AAD16C(v1 + *(int *)(v3 + 28), a1, (uint64_t (*)(_QWORD))sub_1D7AD8714);
}

uint64_t FeatureRegulatoryInfo.ReenableActionConfiguration.learnMoreURL.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(0);
  return sub_1D7AD8730(a1, v1 + *(int *)(v3 + 28), (uint64_t (*)(_QWORD))sub_1D7AD8714);
}

uint64_t (*FeatureRegulatoryInfo.ReenableActionConfiguration.learnMoreURL.modify())()
{
  type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(0);
  return nullsub_1;
}

uint64_t FeatureRegulatoryInfo.ReenableActionConfiguration.requiresPairedDevice.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(0)
                                     + 32));
}

uint64_t FeatureRegulatoryInfo.ReenableActionConfiguration.requiresPairedDevice.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*FeatureRegulatoryInfo.ReenableActionConfiguration.requiresPairedDevice.modify())()
{
  type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(0);
  return nullsub_1;
}

uint64_t FeatureRegulatoryInfo.ReenableActionConfiguration.init(buttonTitle:footerText:action:learnMoreURL:requiresPairedDevice:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, _QWORD *a9@<X8>)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v17 = type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(0);
  v18 = (uint64_t)a9 + *(int *)(v17 + 28);
  v19 = sub_1D7B490A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  result = sub_1D7AD8730(a7, v18, (uint64_t (*)(_QWORD))sub_1D7AD8714);
  *((_BYTE *)a9 + *(int *)(v17 + 32)) = a8;
  return result;
}

uint64_t sub_1D7AD6C80()
{
  sub_1D7ADB164();
  return sub_1D7B4A320() & 1;
}

uint64_t FeatureRegulatoryInfo.isEquivalent(to:)(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  char v39;
  char v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  void *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  char *v76;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  void *v80;
  void *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97[6];
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;

  v2 = v1;
  v88 = sub_1D7B490A8();
  v4 = *(_QWORD *)(v88 - 8);
  MEMORY[0x1E0C80A78](v88);
  v83 = (char *)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AD8714(0);
  MEMORY[0x1E0C80A78](v6);
  v84 = (uint64_t)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AD87C0(0, &qword_1F014E408, v8);
  v85 = v9;
  MEMORY[0x1E0C80A78](v9);
  v87 = (uint64_t)&v78 - v10;
  v89 = type metadata accessor for FeatureRegulatoryInfo(0);
  v11 = MEMORY[0x1E0C80A78](v89);
  v13 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v78 - v15;
  v17 = MEMORY[0x1E0C80A78](v14);
  v95 = (char *)&v78 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v96 = (char *)&v78 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v94 = (uint64_t)&v78 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v93 = (uint64_t)&v78 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v27 = (uint64_t *)((char *)&v78 - v26);
  v28 = MEMORY[0x1E0C80A78](v25);
  v30 = (uint64_t *)((char *)&v78 - v29);
  v31 = MEMORY[0x1E0C80A78](v28);
  v33 = (char *)&v78 - v32;
  MEMORY[0x1E0C80A78](v31);
  v35 = (char *)&v78 - v34;
  v36 = v2[1];
  v37 = a1[1];
  v38 = *v2 == *a1;
  v86 = v4;
  if (v38 && v36 == v37)
  {
    sub_1D7AAD16C((uint64_t)v2, (uint64_t)&v78 - v34, type metadata accessor for FeatureRegulatoryInfo);
    sub_1D7AAD16C((uint64_t)a1, (uint64_t)v33, type metadata accessor for FeatureRegulatoryInfo);
  }
  else
  {
    v39 = sub_1D7B4A938();
    sub_1D7AAD16C((uint64_t)v2, (uint64_t)v35, type metadata accessor for FeatureRegulatoryInfo);
    sub_1D7AAD16C((uint64_t)a1, (uint64_t)v33, type metadata accessor for FeatureRegulatoryInfo);
    if ((v39 & 1) == 0)
    {
      sub_1D7AAD1B0((uint64_t)v35, type metadata accessor for FeatureRegulatoryInfo);
      sub_1D7AAD1B0((uint64_t)v33, type metadata accessor for FeatureRegulatoryInfo);
      sub_1D7AAD16C((uint64_t)v2, (uint64_t)v30, type metadata accessor for FeatureRegulatoryInfo);
      sub_1D7AAD16C((uint64_t)a1, (uint64_t)v27, type metadata accessor for FeatureRegulatoryInfo);
      goto LABEL_17;
    }
  }
  if (*((_QWORD *)v35 + 2) == *((_QWORD *)v33 + 2) && *((_QWORD *)v35 + 3) == *((_QWORD *)v33 + 3))
  {
    sub_1D7AAD1B0((uint64_t)v35, type metadata accessor for FeatureRegulatoryInfo);
    sub_1D7AAD1B0((uint64_t)v33, type metadata accessor for FeatureRegulatoryInfo);
    sub_1D7AAD16C((uint64_t)v2, (uint64_t)v30, type metadata accessor for FeatureRegulatoryInfo);
    sub_1D7AAD16C((uint64_t)a1, (uint64_t)v27, type metadata accessor for FeatureRegulatoryInfo);
    goto LABEL_10;
  }
  v40 = sub_1D7B4A938();
  sub_1D7AAD1B0((uint64_t)v35, type metadata accessor for FeatureRegulatoryInfo);
  sub_1D7AAD1B0((uint64_t)v33, type metadata accessor for FeatureRegulatoryInfo);
  sub_1D7AAD16C((uint64_t)v2, (uint64_t)v30, type metadata accessor for FeatureRegulatoryInfo);
  sub_1D7AAD16C((uint64_t)a1, (uint64_t)v27, type metadata accessor for FeatureRegulatoryInfo);
  if ((v40 & 1) == 0)
  {
LABEL_17:
    sub_1D7AAD1B0((uint64_t)v27, type metadata accessor for FeatureRegulatoryInfo);
    sub_1D7AAD1B0((uint64_t)v30, type metadata accessor for FeatureRegulatoryInfo);
    goto LABEL_18;
  }
LABEL_10:
  v90 = v13;
  v91 = v16;
  v41 = (void *)v30[4];
  v42 = v30[5];
  v44 = (void *)v30[6];
  v43 = v30[7];
  v46 = v30[8];
  v45 = (void *)v30[9];
  v48 = (void *)v27[4];
  v47 = (void *)v27[5];
  v50 = (void *)v27[6];
  v49 = v27[7];
  v52 = v27[8];
  v51 = (void *)v27[9];
  v92 = (uint64_t)v41;
  if (v44 == (void *)1)
  {
    v82 = (uint64_t)v48;
    v81 = v47;
    v78 = v49;
    v79 = v52;
    v80 = v51;
    sub_1D7AD8640(v48, (uint64_t)v47, v50, v49, v52, v51);
    sub_1D7AAD1B0((uint64_t)v27, type metadata accessor for FeatureRegulatoryInfo);
    sub_1D7AAD1B0((uint64_t)v30, type metadata accessor for FeatureRegulatoryInfo);
    if (v50 == (void *)1)
    {
      sub_1D7AD8688(v92, v42, (void *)1, v43, v46, v45);
      v53 = v93;
      sub_1D7AAD16C((uint64_t)v2, v93, type metadata accessor for FeatureRegulatoryInfo);
      v54 = v94;
      sub_1D7AAD16C((uint64_t)a1, v94, type metadata accessor for FeatureRegulatoryInfo);
      v13 = v90;
      v16 = v91;
      v56 = (uint64_t)v95;
      v55 = (uint64_t)v96;
      goto LABEL_25;
    }
    goto LABEL_15;
  }
  v98 = (uint64_t)v41;
  v99 = v42;
  v100 = v44;
  v101 = v43;
  v102 = v46;
  v103 = v45;
  if (v50 == (void *)1)
  {
    v82 = (uint64_t)v48;
    v81 = v47;
    v80 = v51;
    v79 = v52;
    v78 = v49;
    sub_1D7AC5E74((uint64_t)v41, v42, v44);
    sub_1D7AC5E74(v43, v46, v45);
    sub_1D7AC5E74(v92, v42, v44);
    sub_1D7AC5E74(v43, v46, v45);
    v89 = v46;
    sub_1D7AAD1B0((uint64_t)v27, type metadata accessor for FeatureRegulatoryInfo);
    v46 = v89;
    sub_1D7AAD1B0((uint64_t)v30, type metadata accessor for FeatureRegulatoryInfo);
    sub_1D7AC5EE8(v92, v42, v44);
    sub_1D7AC5EE8(v43, v46, v45);
LABEL_15:
    sub_1D7AD8688(v92, v42, v44, v43, v46, v45);
    sub_1D7AD8688(v82, (uint64_t)v81, v50, v78, v79, v80);
    v13 = v90;
    v16 = v91;
LABEL_18:
    v56 = (uint64_t)v95;
    v55 = (uint64_t)v96;
    v53 = v93;
    v54 = v94;
    sub_1D7AAD16C((uint64_t)v2, v93, type metadata accessor for FeatureRegulatoryInfo);
    sub_1D7AAD16C((uint64_t)a1, v54, type metadata accessor for FeatureRegulatoryInfo);
LABEL_19:
    sub_1D7AAD1B0(v54, type metadata accessor for FeatureRegulatoryInfo);
    sub_1D7AAD1B0(v53, type metadata accessor for FeatureRegulatoryInfo);
    sub_1D7AAD16C((uint64_t)v2, v55, type metadata accessor for FeatureRegulatoryInfo);
    sub_1D7AAD16C((uint64_t)a1, v56, type metadata accessor for FeatureRegulatoryInfo);
LABEL_20:
    sub_1D7AAD1B0(v56, type metadata accessor for FeatureRegulatoryInfo);
    sub_1D7AAD1B0(v55, type metadata accessor for FeatureRegulatoryInfo);
    sub_1D7AAD16C((uint64_t)v2, (uint64_t)v16, type metadata accessor for FeatureRegulatoryInfo);
    sub_1D7AAD16C((uint64_t)a1, (uint64_t)v13, type metadata accessor for FeatureRegulatoryInfo);
LABEL_21:
    sub_1D7AAD1B0((uint64_t)v13, type metadata accessor for FeatureRegulatoryInfo);
    sub_1D7AAD1B0((uint64_t)v16, type metadata accessor for FeatureRegulatoryInfo);
    goto LABEL_22;
  }
  v97[0] = (uint64_t)v48;
  v97[1] = (uint64_t)v47;
  v97[2] = (uint64_t)v50;
  v97[3] = v49;
  v97[4] = v52;
  v97[5] = (uint64_t)v51;
  v59 = v41;
  sub_1D7AD8640(v41, v42, v44, v43, v46, v45);
  sub_1D7AD8640(v59, v42, v44, v43, v46, v45);
  LODWORD(v82) = _s8HealthUI29PairedDeviceFeatureAttributesV2eeoiySbAC_ACtFZ_0(&v98, v97);
  v81 = v45;
  sub_1D7AAD1B0((uint64_t)v27, type metadata accessor for FeatureRegulatoryInfo);
  sub_1D7AAD1B0((uint64_t)v30, type metadata accessor for FeatureRegulatoryInfo);
  v60 = v101;
  v62 = v102;
  v61 = v103;
  sub_1D7AC5EE8(v98, v99, v100);
  sub_1D7AC5EE8(v60, v62, v61);
  sub_1D7AD8688(v92, v42, v44, v43, v46, v81);
  v53 = v93;
  sub_1D7AAD16C((uint64_t)v2, v93, type metadata accessor for FeatureRegulatoryInfo);
  v54 = v94;
  sub_1D7AAD16C((uint64_t)a1, v94, type metadata accessor for FeatureRegulatoryInfo);
  v13 = v90;
  v16 = v91;
  v56 = (uint64_t)v95;
  v55 = (uint64_t)v96;
  if ((v82 & 1) == 0)
    goto LABEL_19;
LABEL_25:
  v63 = v53;
  v64 = *(unsigned __int8 *)(v53 + 80);
  sub_1D7AAD1B0(v63, type metadata accessor for FeatureRegulatoryInfo);
  v65 = *(unsigned __int8 *)(v54 + 80);
  sub_1D7AAD1B0(v54, type metadata accessor for FeatureRegulatoryInfo);
  sub_1D7AAD16C((uint64_t)v2, v55, type metadata accessor for FeatureRegulatoryInfo);
  sub_1D7AAD16C((uint64_t)a1, v56, type metadata accessor for FeatureRegulatoryInfo);
  if (v64 != v65)
    goto LABEL_20;
  v66 = v89;
  v67 = Optional<A>.isEquivalent(to:)(v56 + *(int *)(v89 + 32));
  sub_1D7AAD1B0(v56, type metadata accessor for FeatureRegulatoryInfo);
  sub_1D7AAD1B0(v55, type metadata accessor for FeatureRegulatoryInfo);
  sub_1D7AAD16C((uint64_t)v2, (uint64_t)v16, type metadata accessor for FeatureRegulatoryInfo);
  sub_1D7AAD16C((uint64_t)a1, (uint64_t)v13, type metadata accessor for FeatureRegulatoryInfo);
  if ((v67 & 1) == 0)
    goto LABEL_21;
  v68 = *(int *)(v66 + 36);
  v69 = (uint64_t)&v13[v68];
  v70 = v87;
  v71 = v87 + *(int *)(v85 + 48);
  sub_1D7AAD16C((uint64_t)&v16[v68], v87, (uint64_t (*)(_QWORD))sub_1D7AD8714);
  sub_1D7AAD16C(v69, v71, (uint64_t (*)(_QWORD))sub_1D7AD8714);
  v72 = v86;
  v73 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v86 + 48);
  v74 = v88;
  if (v73(v70, 1, v88) == 1)
  {
    sub_1D7AAD1B0((uint64_t)v13, type metadata accessor for FeatureRegulatoryInfo);
    sub_1D7AAD1B0((uint64_t)v16, type metadata accessor for FeatureRegulatoryInfo);
    if (v73(v71, 1, v74) == 1)
    {
      sub_1D7AAD1B0(v70, (uint64_t (*)(_QWORD))sub_1D7AD8714);
      v57 = 1;
      return v57 & 1;
    }
  }
  else
  {
    v75 = v84;
    sub_1D7AAD16C(v70, v84, (uint64_t (*)(_QWORD))sub_1D7AD8714);
    if (v73(v71, 1, v74) != 1)
    {
      v76 = v83;
      (*(void (**)(char *, uint64_t, uint64_t))(v72 + 32))(v83, v71, v74);
      sub_1D7AA76D4(&qword_1F014E410, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0028]);
      v57 = sub_1D7B4A320();
      v77 = *(void (**)(char *, uint64_t))(v72 + 8);
      v77(v76, v74);
      sub_1D7AAD1B0((uint64_t)v13, type metadata accessor for FeatureRegulatoryInfo);
      sub_1D7AAD1B0((uint64_t)v16, type metadata accessor for FeatureRegulatoryInfo);
      v77((char *)v75, v74);
      sub_1D7AAD1B0(v70, (uint64_t (*)(_QWORD))sub_1D7AD8714);
      return v57 & 1;
    }
    sub_1D7AAD1B0((uint64_t)v13, type metadata accessor for FeatureRegulatoryInfo);
    sub_1D7AAD1B0((uint64_t)v16, type metadata accessor for FeatureRegulatoryInfo);
    (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v75, v74);
  }
  sub_1D7AD8774(v70);
LABEL_22:
  v57 = 0;
  return v57 & 1;
}

uint64_t Optional<A>.isEquivalent(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  char v18;
  uint64_t (*v19)(_QWORD);
  uint64_t v20;
  uint64_t v22;

  v2 = v1;
  v4 = type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (uint64_t *)((char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v22 - v9;
  sub_1D7AD87C0(0, &qword_1F014E418, sub_1D7AD86E4);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v22 - v13;
  v15 = (char *)&v22 + *(int *)(v12 + 48) - v13;
  sub_1D7AAD16C(v2, (uint64_t)&v22 - v13, (uint64_t (*)(_QWORD))sub_1D7AD86E4);
  sub_1D7AAD16C(a1, (uint64_t)v15, (uint64_t (*)(_QWORD))sub_1D7AD86E4);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  LODWORD(v2) = v16(v14, 1, v4);
  v17 = v16(v15, 1, v4);
  if ((_DWORD)v2 != 1)
  {
    if (v17 != 1)
    {
      sub_1D7AACCDC((uint64_t)v14, (uint64_t)v10, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
      sub_1D7AACCDC((uint64_t)v15, (uint64_t)v8, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
      v18 = FeatureRegulatoryInfo.ReenableActionConfiguration.isEquivalent(to:)(v8);
      sub_1D7AAD1B0((uint64_t)v8, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
      sub_1D7AAD1B0((uint64_t)v10, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
      return v18 & 1;
    }
    v19 = type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration;
    v20 = (uint64_t)v14;
    goto LABEL_7;
  }
  if (v17 != 1)
  {
    v19 = (uint64_t (*)(_QWORD))sub_1D7AD86E4;
    v20 = (uint64_t)v15;
LABEL_7:
    sub_1D7AAD1B0(v20, v19);
    v18 = 0;
    return v18 & 1;
  }
  v18 = 1;
  return v18 & 1;
}

uint64_t FeatureRegulatoryInfo.ReenableActionConfiguration.isEquivalent(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char v24;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  char v33;
  uint64_t v34;
  char *v35;
  void (*v36)(char *, uint64_t);
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v2 = (uint64_t)v1;
  v4 = sub_1D7B490A8();
  v42 = *(_QWORD *)(v4 - 8);
  v43 = v4;
  MEMORY[0x1E0C80A78](v4);
  v39 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AD8714(0);
  MEMORY[0x1E0C80A78](v6);
  v40 = (uint64_t)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AD87C0(0, &qword_1F014E408, v8);
  v41 = v9;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v38 - v10;
  v12 = type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v38 - v17;
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v38 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v38 - v22;
  if (*v1 == *a1 && v1[1] == a1[1])
  {
    sub_1D7AAD16C((uint64_t)v1, (uint64_t)&v38 - v22, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
    sub_1D7AAD16C((uint64_t)a1, (uint64_t)v21, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
  }
  else
  {
    v24 = sub_1D7B4A938();
    sub_1D7AAD16C(v2, (uint64_t)v23, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
    sub_1D7AAD16C((uint64_t)a1, (uint64_t)v21, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
    if ((v24 & 1) == 0)
    {
      sub_1D7AAD1B0((uint64_t)v23, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
      sub_1D7AAD1B0((uint64_t)v21, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
      sub_1D7AAD16C(v2, (uint64_t)v18, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
      sub_1D7AAD16C((uint64_t)a1, (uint64_t)v15, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
LABEL_19:
      sub_1D7AAD1B0((uint64_t)v15, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
      sub_1D7AAD1B0((uint64_t)v18, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
      v33 = 0;
      return v33 & 1;
    }
  }
  if (*((_QWORD *)v23 + 2) == *((_QWORD *)v21 + 2) && *((_QWORD *)v23 + 3) == *((_QWORD *)v21 + 3))
  {
    sub_1D7AAD1B0((uint64_t)v23, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
    sub_1D7AAD1B0((uint64_t)v21, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
    sub_1D7AAD16C(v2, (uint64_t)v18, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
    sub_1D7AAD16C((uint64_t)a1, (uint64_t)v15, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
  }
  else
  {
    v26 = sub_1D7B4A938();
    sub_1D7AAD1B0((uint64_t)v23, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
    sub_1D7AAD1B0((uint64_t)v21, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
    sub_1D7AAD16C(v2, (uint64_t)v18, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
    sub_1D7AAD16C((uint64_t)a1, (uint64_t)v15, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
    if ((v26 & 1) == 0)
      goto LABEL_19;
  }
  v27 = *(int *)(v12 + 28);
  v28 = (uint64_t)&v15[v27];
  v29 = (uint64_t)&v11[*(int *)(v41 + 48)];
  sub_1D7AAD16C((uint64_t)&v18[v27], (uint64_t)v11, (uint64_t (*)(_QWORD))sub_1D7AD8714);
  sub_1D7AAD16C(v28, v29, (uint64_t (*)(_QWORD))sub_1D7AD8714);
  v31 = v42;
  v30 = v43;
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48);
  if (v32((uint64_t)v11, 1, v43) != 1)
  {
    v34 = v40;
    sub_1D7AAD16C((uint64_t)v11, v40, (uint64_t (*)(_QWORD))sub_1D7AD8714);
    if (v32(v29, 1, v30) != 1)
    {
      v35 = v39;
      (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(v39, v29, v30);
      sub_1D7AA76D4(&qword_1F014E410, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0028]);
      v33 = sub_1D7B4A320();
      v36 = *(void (**)(char *, uint64_t))(v31 + 8);
      v36(v35, v30);
      sub_1D7AAD1B0((uint64_t)v15, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
      sub_1D7AAD1B0((uint64_t)v18, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
      v36((char *)v34, v30);
      sub_1D7AAD1B0((uint64_t)v11, (uint64_t (*)(_QWORD))sub_1D7AD8714);
      return v33 & 1;
    }
    sub_1D7AAD1B0((uint64_t)v15, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
    sub_1D7AAD1B0((uint64_t)v18, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v34, v30);
    goto LABEL_17;
  }
  sub_1D7AAD1B0((uint64_t)v15, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
  sub_1D7AAD1B0((uint64_t)v18, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
  if (v32(v29, 1, v30) != 1)
  {
LABEL_17:
    sub_1D7AD8774((uint64_t)v11);
    v33 = 0;
    return v33 & 1;
  }
  sub_1D7AAD1B0((uint64_t)v11, (uint64_t (*)(_QWORD))sub_1D7AD8714);
  v33 = 1;
  return v33 & 1;
}

uint64_t sub_1D7AD7DB0()
{
  return sub_1D7B49A68();
}

uint64_t sub_1D7AD7DD0()
{
  return sub_1D7B49A68();
}

uint64_t sub_1D7AD7DF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = sub_1D7B49900();
  MEMORY[0x1E0C80A78](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return sub_1D7B49A74();
}

uint64_t type metadata accessor for FeatureRegulatoryInfoView(uint64_t a1)
{
  return sub_1D7ACDAE8(a1, qword_1F014E480);
}

void sub_1D7AD7E84()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014E330)
  {
    sub_1D7AA787C(255, &qword_1F014E338, (uint64_t (*)(uint64_t))sub_1D7AD7F18, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    sub_1D7AD844C();
    v0 = sub_1D7B49E4C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014E330);
  }
}

void sub_1D7AD7F18()
{
  unint64_t TupleTypeMetadata;
  uint64_t v1;

  if (!qword_1F014E340)
  {
    sub_1D7AD8044(255, &qword_1F014E348, (void (*)(uint64_t))sub_1D7AD0DA8);
    sub_1D7AD7FF0();
    sub_1D7AD8044(255, &qword_1F014E358, sub_1D7AD80A8);
    sub_1D7AD832C();
    sub_1D7AD83FC(255);
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v1)
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_1F014E340);
  }
}

void sub_1D7AD7FF0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014E350)
  {
    v0 = sub_1D7B4A6F8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014E350);
  }
}

void sub_1D7AD8044(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_1D7B4A110();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_1D7AD80A8(uint64_t a1)
{
  sub_1D7AA787C(a1, &qword_1F014E360, (uint64_t (*)(uint64_t))sub_1D7AD80C4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
}

void sub_1D7AD80C4()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1F014E368)
  {
    sub_1D7AD8130(255);
    sub_1D7AD817C(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1F014E368);
  }
}

void sub_1D7AD8130(uint64_t a1)
{
  sub_1D7AD81AC(a1, &qword_1F014E370, sub_1D7AD8144);
}

void sub_1D7AD8144(uint64_t a1)
{
  sub_1D7AD822C(a1, &qword_1F014E378, (void (*)(uint64_t))type metadata accessor for InstructionsForUseWebViewContainer, (void (*)(void))sub_1D7AD8160);
}

uint64_t sub_1D7AD8160()
{
  return sub_1D7AA76D4(&qword_1F014E380, type metadata accessor for InstructionsForUseWebViewContainer, (uint64_t)&unk_1D7B86F50);
}

void sub_1D7AD817C(uint64_t a1)
{
  sub_1D7AA787C(a1, &qword_1F014E388, (uint64_t (*)(uint64_t))sub_1D7AD8198, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void sub_1D7AD8198(uint64_t a1)
{
  sub_1D7AD81AC(a1, &qword_1F014E390, sub_1D7AD8210);
}

void sub_1D7AD81AC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    sub_1D7B49CF0();
    v4 = sub_1D7B49978();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_1D7AD8210(uint64_t a1)
{
  sub_1D7AD822C(a1, &qword_1F014E398, (void (*)(uint64_t))sub_1D7AD0DA8, (void (*)(void))sub_1D7AD82AC);
}

void sub_1D7AD822C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a3(255);
    a4();
    v6 = sub_1D7B49948();
    if (!v7)
      atomic_store(v6, a2);
  }
}

unint64_t sub_1D7AD82AC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_1F014E3A0;
  if (!qword_1F014E3A0)
  {
    sub_1D7AD0DA8();
    v2 = v1;
    v3 = sub_1D7AA76D4(&qword_1F014D360, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDCFD0], MEMORY[0x1E0CDCFB8]);
    v4[0] = MEMORY[0x1E0CDDD58];
    v4[1] = v3;
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CD9C20], v2, v4);
    atomic_store(result, (unint64_t *)&qword_1F014E3A0);
  }
  return result;
}

void sub_1D7AD832C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014E3A8)
  {
    sub_1D7AD8044(255, &qword_1F014E3B0, (void (*)(uint64_t))sub_1D7AD83A0);
    v0 = sub_1D7B4A6F8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014E3A8);
  }
}

void sub_1D7AD83A0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014E3B8)
  {
    v0 = sub_1D7B4A08C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014E3B8);
  }
}

void sub_1D7AD83FC(uint64_t a1)
{
  sub_1D7AA787C(a1, &qword_1F014E3C0, (uint64_t (*)(uint64_t))sub_1D7AD8418, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void sub_1D7AD8418(uint64_t a1)
{
  sub_1D7AD81AC(a1, &qword_1F014E3C8, sub_1D7AD842C);
}

void sub_1D7AD842C(uint64_t a1)
{
  sub_1D7AD8044(a1, &qword_1F014E3D0, (void (*)(uint64_t))sub_1D7AD83A0);
}

unint64_t sub_1D7AD844C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F014E3D8;
  if (!qword_1F014E3D8)
  {
    sub_1D7AA787C(255, &qword_1F014E338, (uint64_t (*)(uint64_t))sub_1D7AD7F18, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CE0680], v1);
    atomic_store(result, (unint64_t *)&qword_1F014E3D8);
  }
  return result;
}

void sub_1D7AD84AC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[4];

  if (!qword_1F014E3E0)
  {
    sub_1D7AD7E84();
    v5[0] = v2;
    v5[1] = sub_1D7B49C3C();
    v5[2] = sub_1D7AA76D4(&qword_1F014E3E8, (uint64_t (*)(uint64_t))sub_1D7AD7E84, MEMORY[0x1E0CDD950]);
    v5[3] = MEMORY[0x1E0CDBD50];
    v3 = MEMORY[0x1D829FEEC](a1, v5, MEMORY[0x1E0CDF2C8], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1F014E3E0);
  }
}

void sub_1D7AD855C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!qword_1F014E3F0)
  {
    sub_1D7AD84AC(255);
    v3 = v2;
    sub_1D7AD7E84();
    sub_1D7B49C3C();
    v6[2] = sub_1D7AA76D4(&qword_1F014E3E8, (uint64_t (*)(uint64_t))sub_1D7AD7E84, MEMORY[0x1E0CDD950]);
    v6[3] = MEMORY[0x1E0CDBD50];
    v6[0] = v3;
    v6[1] = swift_getOpaqueTypeConformance2();
    v4 = MEMORY[0x1D829FEEC](a1, v6, MEMORY[0x1E0CDEA98], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1F014E3F0);
  }
}

uint64_t sub_1D7AD8638@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_1D7AD41C0(*(_QWORD *)(v1 + 16), a1);
}

id sub_1D7AD8640(id result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (a3 != (void *)1)
  {
    sub_1D7AC5E74((uint64_t)result, a2, a3);
    return sub_1D7AC5E74(a4, a5, a6);
  }
  return result;
}

uint64_t sub_1D7AD8688(uint64_t result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (a3 != (void *)1)
  {
    sub_1D7AC5EE8(result, a2, a3);
    return sub_1D7AC5EE8(a4, a5, a6);
  }
  return result;
}

uint64_t type metadata accessor for FeatureRegulatoryInfo(uint64_t a1)
{
  return sub_1D7ACDAE8(a1, qword_1F014E518);
}

void sub_1D7AD86E4(uint64_t a1)
{
  sub_1D7AA787C(a1, &qword_1F014E3F8, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(uint64_t a1)
{
  return sub_1D7ACDAE8(a1, qword_1F014E5B8);
}

void sub_1D7AD8714(uint64_t a1)
{
  sub_1D7AA787C(a1, &qword_1F014E400, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t sub_1D7AD8730(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_1D7AD8774(uint64_t a1)
{
  uint64_t v2;

  sub_1D7AD87C0(0, &qword_1F014E408, sub_1D7AD8714);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1D7AD87C0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t sub_1D7AD8818()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1D7AD8828@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *a2 = sub_1D7ADAF04;
  a2[1] = (uint64_t (*)())v5;
  return swift_retain();
}

uint64_t *initializeBufferWithCopyOfBuffer for FeatureRegulatoryInfoView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  id v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_1D7AA787C(0, &qword_1F014E2F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9030], MEMORY[0x1E0CD87D0]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = sub_1D7B49900();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v9 = *(int *)(a3 + 20);
    v10 = *(int *)(a3 + 24);
    v11 = (uint64_t *)((char *)a1 + v9);
    v12 = (uint64_t *)((char *)a2 + v9);
    v14 = *v12;
    v13 = (void *)v12[1];
    *v11 = v14;
    v11[1] = v13;
    v15 = (uint64_t *)((char *)a1 + v10);
    v16 = (uint64_t *)((char *)a2 + v10);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = v13;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for FeatureRegulatoryInfoView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1D7AA787C(0, &qword_1F014E2F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9030], MEMORY[0x1E0CD87D0]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = sub_1D7B49900();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }

  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for FeatureRegulatoryInfoView(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  id v16;

  sub_1D7AA787C(0, &qword_1F014E2F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9030], MEMORY[0x1E0CD87D0]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_1D7B49900();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)((char *)a1 + v7);
  v10 = (_QWORD *)((char *)a2 + v7);
  v12 = *v10;
  v11 = (void *)v10[1];
  *v9 = v12;
  v9[1] = v11;
  v13 = (_QWORD *)((char *)a1 + v8);
  v14 = (_QWORD *)((char *)a2 + v8);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = v11;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for FeatureRegulatoryInfoView(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t);
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  if (a1 != a2)
  {
    v6 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9030];
    v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0];
    sub_1D7AAD130((uint64_t)a1, &qword_1F014E2F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9030], MEMORY[0x1E0CD87D0]);
    sub_1D7AA787C(0, &qword_1F014E2F8, v6, v7);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v8 = sub_1D7B49900();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v9 = *(int *)(a3 + 20);
  v10 = (_QWORD *)((char *)a1 + v9);
  v11 = (_QWORD *)((char *)a2 + v9);
  *v10 = *v11;
  v12 = (void *)v11[1];
  v13 = (void *)v10[1];
  v10[1] = v12;
  v14 = v12;

  v15 = *(int *)(a3 + 24);
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for FeatureRegulatoryInfoView(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_1D7AA787C(0, &qword_1F014E2F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9030], MEMORY[0x1E0CD87D0]);
  v7 = v6;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = sub_1D7B49900();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  v9 = *(int *)(a3 + 24);
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  return a1;
}

char *assignWithTake for FeatureRegulatoryInfoView(char *a1, char *a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t);
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 != a2)
  {
    v6 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9030];
    v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0];
    sub_1D7AAD130((uint64_t)a1, &qword_1F014E2F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9030], MEMORY[0x1E0CD87D0]);
    sub_1D7AA787C(0, &qword_1F014E2F8, v6, v7);
    v9 = v8;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v10 = sub_1D7B49900();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
  }
  v11 = *(int *)(a3 + 20);
  v12 = &a1[v11];
  v13 = &a2[v11];
  v15 = *(_QWORD *)v13;
  v14 = *((_QWORD *)v13 + 1);
  v16 = (void *)*((_QWORD *)v12 + 1);
  *(_QWORD *)v12 = v15;
  *((_QWORD *)v12 + 1) = v14;

  v17 = *(int *)(a3 + 24);
  v18 = &a1[v17];
  v19 = &a2[v17];
  v21 = *(_QWORD *)v19;
  v20 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v18 = v21;
  *((_QWORD *)v18 + 1) = v20;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FeatureRegulatoryInfoView()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D7AD8E28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  sub_1D7AA787C(0, &qword_1F014E420, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9030], MEMORY[0x1E0CD87E8]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for FeatureRegulatoryInfoView()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1D7AD8ECC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  sub_1D7AA787C(0, &qword_1F014E420, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9030], MEMORY[0x1E0CD87E8]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
}

void sub_1D7AD8F60()
{
  unint64_t v0;

  sub_1D7AA787C(319, &qword_1F014E2F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9030], MEMORY[0x1E0CD87D0]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for FeatureRegulatoryInfo(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  void *v11;
  __int128 v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  char *__dst;
  unsigned int (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
    return a1;
  }
  v7 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v7;
  v8 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v8;
  v9 = (_OWORD *)(a1 + 32);
  v10 = a2 + 4;
  v11 = (void *)a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v11)
  {
    *v9 = *v10;
    *(_QWORD *)(a1 + 48) = a2[6];
    v14 = (void *)a2[9];
    if (!v14)
    {
LABEL_9:
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
      *(_QWORD *)(a1 + 72) = a2[9];
      goto LABEL_10;
    }
LABEL_7:
    v15 = a2[8];
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_QWORD *)(a1 + 64) = v15;
    *(_QWORD *)(a1 + 72) = v14;
    swift_bridgeObjectRetain();
    v16 = v14;
    goto LABEL_10;
  }
  if (v11 != (void *)1)
  {
    v17 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v17;
    *(_QWORD *)(a1 + 48) = v11;
    swift_bridgeObjectRetain();
    v18 = v11;
    v14 = (void *)a2[9];
    if (!v14)
      goto LABEL_9;
    goto LABEL_7;
  }
  v12 = *((_OWORD *)a2 + 3);
  *v9 = *v10;
  *(_OWORD *)(a1 + 48) = v12;
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
LABEL_10:
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  v19 = *(int *)(a3 + 32);
  v20 = (_QWORD *)(a1 + v19);
  v21 = (uint64_t *)((char *)a2 + v19);
  v22 = type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(0);
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    sub_1D7AD86E4(0);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v41 = v23;
    v25 = v21[1];
    *v20 = *v21;
    v20[1] = v25;
    v20[2] = v21[2];
    v26 = v21[5];
    *(_OWORD *)(v20 + 3) = *(_OWORD *)(v21 + 3);
    v20[5] = v26;
    v27 = *(int *)(v22 + 28);
    __dst = (char *)v20 + v27;
    v28 = (char *)v21 + v27;
    v29 = sub_1D7B490A8();
    v38 = *(_QWORD *)(v29 - 8);
    v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    if (v40(v28, 1, v29))
    {
      sub_1D7AD8714(0);
      memcpy(__dst, v28, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 16))(__dst, v28, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(__dst, 0, 1, v29);
    }
    *((_BYTE *)v20 + *(int *)(v22 + 32)) = *((_BYTE *)v21 + *(int *)(v22 + 32));
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v20, 0, 1, v22);
  }
  v31 = *(int *)(a3 + 36);
  v32 = (void *)(a1 + v31);
  v33 = (char *)a2 + v31;
  v34 = sub_1D7B490A8();
  v35 = *(_QWORD *)(v34 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
  {
    sub_1D7AD8714(0);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v35 + 16))(v32, v33, v34);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  }
  return a1;
}

uint64_t destroy for FeatureRegulatoryInfo(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 48);
  if (v4)
  {
    if (v4 == (void *)1)
      goto LABEL_6;

    swift_bridgeObjectRelease();
  }
  v5 = *(void **)(a1 + 72);
  if (v5)
  {

    swift_bridgeObjectRelease();
  }
LABEL_6:
  v6 = a1 + *(int *)(a2 + 32);
  v7 = type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v8 = v6 + *(int *)(v7 + 28);
    v9 = sub_1D7B490A8();
    v10 = *(_QWORD *)(v9 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  v11 = a1 + *(int *)(a2 + 36);
  v12 = sub_1D7B490A8();
  v13 = *(_QWORD *)(v12 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  return result;
}

uint64_t initializeWithCopy for FeatureRegulatoryInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  void *v10;
  __int128 v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  unsigned int (*v37)(char *, uint64_t, uint64_t);
  char *__dst;
  uint64_t v39;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = (_OWORD *)(a1 + 32);
  v9 = (_OWORD *)(a2 + 32);
  v10 = *(void **)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v10)
  {
    if (v10 == (void *)1)
    {
      v11 = v9[1];
      *v8 = *v9;
      *(_OWORD *)(a1 + 48) = v11;
      *(_OWORD *)(a1 + 64) = v9[2];
      goto LABEL_8;
    }
    v15 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v15;
    *(_QWORD *)(a1 + 48) = v10;
    swift_bridgeObjectRetain();
    v16 = v10;
    v12 = *(void **)(a2 + 72);
    if (!v12)
      goto LABEL_7;
LABEL_5:
    v13 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = v13;
    *(_QWORD *)(a1 + 72) = v12;
    swift_bridgeObjectRetain();
    v14 = v12;
    goto LABEL_8;
  }
  *v8 = *v9;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)v9 + 2);
  v12 = *(void **)(a2 + 72);
  if (v12)
    goto LABEL_5;
LABEL_7:
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
LABEL_8:
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v17 = *(int *)(a3 + 32);
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  v20 = type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    sub_1D7AD86E4(0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v39 = a3;
    v23 = v19[1];
    *v18 = *v19;
    v18[1] = v23;
    v18[2] = v19[2];
    v24 = v19[5];
    *(_OWORD *)(v18 + 3) = *(_OWORD *)(v19 + 3);
    v18[5] = v24;
    v25 = *(int *)(v20 + 28);
    __dst = (char *)v18 + v25;
    v26 = (char *)v19 + v25;
    v27 = sub_1D7B490A8();
    v36 = *(_QWORD *)(v27 - 8);
    v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    if (v37(v26, 1, v27))
    {
      sub_1D7AD8714(0);
      memcpy(__dst, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(__dst, v26, v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(__dst, 0, 1, v27);
    }
    *((_BYTE *)v18 + *(int *)(v20 + 32)) = *((_BYTE *)v19 + *(int *)(v20 + 32));
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    a3 = v39;
  }
  v29 = *(int *)(a3 + 36);
  v30 = (void *)(a1 + v29);
  v31 = (const void *)(a2 + v29);
  v32 = sub_1D7B490A8();
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
  {
    sub_1D7AD8714(0);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v33 + 16))(v30, v31, v32);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  }
  return a1;
}

uint64_t assignWithCopy for FeatureRegulatoryInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void *v14;
  void *v15;
  id v16;
  __int128 v17;
  void *v18;
  id v19;
  __int128 v20;
  void *v21;
  id v22;
  uint64_t v23;
  __int128 v24;
  __int128 *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(_QWORD *, uint64_t, uint64_t);
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(char *, uint64_t, uint64_t);
  int v52;
  uint64_t v53;
  size_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(void *, uint64_t, uint64_t);
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v68;
  unsigned int (*v69)(char *, uint64_t, uint64_t);
  char *v70;
  void *v71;
  char *__dst;
  uint64_t v73;
  uint64_t v74;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (__int128 *)(a1 + 32);
  v7 = (__int128 *)(a2 + 32);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a2 + 48);
  if (v8 == 1)
  {
    if (v9)
    {
      if (v9 == 1)
      {
        v10 = *v7;
        v11 = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 64) = v11;
LABEL_5:
        *v6 = v10;
        goto LABEL_24;
      }
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      v18 = *(void **)(a2 + 48);
      *(_QWORD *)(a1 + 48) = v18;
      swift_bridgeObjectRetain();
      v19 = v18;
      if (!*(_QWORD *)(a2 + 72))
        goto LABEL_14;
    }
    else
    {
      v17 = *v7;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *v6 = v17;
      if (!*(_QWORD *)(a2 + 72))
      {
LABEL_14:
        v20 = *(_OWORD *)(a2 + 56);
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 56) = v20;
        goto LABEL_24;
      }
    }
    goto LABEL_23;
  }
  if (v9 == 1)
  {
    sub_1D7AD9D4C(a1 + 32);
    v13 = *(_OWORD *)(a2 + 48);
    v12 = *(_OWORD *)(a2 + 64);
    *v6 = *v7;
    *(_OWORD *)(a1 + 48) = v13;
    *(_OWORD *)(a1 + 64) = v12;
    goto LABEL_24;
  }
  if (v8)
  {
    if (v9)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v14 = *(void **)(a2 + 48);
      v15 = *(void **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v14;
      v16 = v14;

    }
    else
    {
      sub_1D7AC6558(a1 + 32);
      v23 = *(_QWORD *)(a2 + 48);
      *v6 = *v7;
      *(_QWORD *)(a1 + 48) = v23;
    }
  }
  else if (v9)
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    v21 = *(void **)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v21;
    swift_bridgeObjectRetain();
    v22 = v21;
  }
  else
  {
    v24 = *v7;
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *v6 = v24;
  }
  v6 = (__int128 *)(a1 + 56);
  v25 = (__int128 *)(a2 + 56);
  v26 = *(_QWORD *)(a2 + 72);
  if (!*(_QWORD *)(a1 + 72))
  {
    if (!v26)
    {
      v10 = *v25;
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      goto LABEL_5;
    }
LABEL_23:
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    v30 = *(void **)(a2 + 72);
    *(_QWORD *)(a1 + 72) = v30;
    swift_bridgeObjectRetain();
    v31 = v30;
    goto LABEL_24;
  }
  if (v26)
  {
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v27 = *(void **)(a2 + 72);
    v28 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v27;
    v29 = v27;

  }
  else
  {
    sub_1D7AC6558(a1 + 56);
    v56 = *(_QWORD *)(a2 + 72);
    *v6 = *v25;
    *(_QWORD *)(a1 + 72) = v56;
  }
LABEL_24:
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v32 = *(int *)(a3 + 32);
  v33 = (_QWORD *)(a1 + v32);
  v34 = (_QWORD *)(a2 + v32);
  v35 = type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(0);
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v36 + 48);
  v38 = v37(v33, 1, v35);
  v39 = v37(v34, 1, v35);
  if (!v38)
  {
    if (v39)
    {
      sub_1D7AAD1B0((uint64_t)v33, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
      goto LABEL_30;
    }
    v74 = a3;
    *v33 = *v34;
    v33[1] = v34[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v33[2] = v34[2];
    v33[3] = v34[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v45 = v34[5];
    v33[4] = v34[4];
    v33[5] = v45;
    swift_retain();
    swift_release();
    v46 = *(int *)(v35 + 28);
    v47 = (char *)v33 + v46;
    v48 = (char *)v34 + v46;
    v49 = sub_1D7B490A8();
    v50 = *(_QWORD *)(v49 - 8);
    v51 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 48);
    v71 = v47;
    LODWORD(v47) = v51(v47, 1, v49);
    v52 = v51(v48, 1, v49);
    if ((_DWORD)v47)
    {
      if (!v52)
      {
        (*(void (**)(void *, char *, uint64_t))(v50 + 16))(v71, v48, v49);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v71, 0, 1, v49);
        goto LABEL_43;
      }
      sub_1D7AD8714(0);
      v54 = *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64);
      v55 = v71;
    }
    else
    {
      if (!v52)
      {
        (*(void (**)(void *, char *, uint64_t))(v50 + 24))(v71, v48, v49);
        goto LABEL_43;
      }
      (*(void (**)(void *, uint64_t))(v50 + 8))(v71, v49);
      sub_1D7AD8714(0);
      v54 = *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64);
      v55 = v71;
    }
    memcpy(v55, v48, v54);
LABEL_43:
    a3 = v74;
    *((_BYTE *)v33 + *(int *)(v35 + 32)) = *((_BYTE *)v34 + *(int *)(v35 + 32));
    goto LABEL_44;
  }
  if (v39)
  {
LABEL_30:
    sub_1D7AD86E4(0);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    goto LABEL_44;
  }
  *v33 = *v34;
  v33[1] = v34[1];
  v33[2] = v34[2];
  v33[3] = v34[3];
  v40 = v34[5];
  v33[4] = v34[4];
  v33[5] = v40;
  v41 = *(int *)(v35 + 28);
  __dst = (char *)v33 + v41;
  v73 = a3;
  v70 = (char *)v34 + v41;
  v42 = sub_1D7B490A8();
  v68 = *(_QWORD *)(v42 - 8);
  v69 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v69(v70, 1, v42))
  {
    sub_1D7AD8714(0);
    memcpy(__dst, v70, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v68 + 16))(__dst, v70, v42);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(__dst, 0, 1, v42);
  }
  a3 = v73;
  *((_BYTE *)v33 + *(int *)(v35 + 32)) = *((_BYTE *)v34 + *(int *)(v35 + 32));
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
LABEL_44:
  v58 = *(int *)(a3 + 36);
  v59 = (void *)(a1 + v58);
  v60 = (void *)(a2 + v58);
  v61 = sub_1D7B490A8();
  v62 = *(_QWORD *)(v61 - 8);
  v63 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v62 + 48);
  v64 = v63(v59, 1, v61);
  v65 = v63(v60, 1, v61);
  if (!v64)
  {
    if (!v65)
    {
      (*(void (**)(void *, void *, uint64_t))(v62 + 24))(v59, v60, v61);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v62 + 8))(v59, v61);
    goto LABEL_49;
  }
  if (v65)
  {
LABEL_49:
    sub_1D7AD8714(0);
    memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v62 + 16))(v59, v60, v61);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
  return a1;
}

uint64_t sub_1D7AD9D4C(uint64_t a1)
{
  destroy for PairedDeviceFeatureAttributes(a1);
  return a1;
}

uint64_t initializeWithTake for FeatureRegulatoryInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *__dst;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  v8 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v9 = *(int *)(a3 + 32);
  v10 = (_OWORD *)(a1 + v9);
  v11 = (_OWORD *)(a2 + v9);
  *(_OWORD *)(a1 + 64) = v8;
  v12 = type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    sub_1D7AD86E4(0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v15 = v11[1];
    *v10 = *v11;
    v10[1] = v15;
    v10[2] = v11[2];
    v16 = *(int *)(v12 + 28);
    __dst = (char *)v10 + v16;
    v17 = (char *)v11 + v16;
    v18 = sub_1D7B490A8();
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      sub_1D7AD8714(0);
      memcpy(__dst, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(__dst, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
    }
    *((_BYTE *)v10 + *(int *)(v12 + 32)) = *((_BYTE *)v11 + *(int *)(v12 + 32));
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v21 = *(int *)(a3 + 36);
  v22 = (void *)(a1 + v21);
  v23 = (const void *)(a2 + v21);
  v24 = sub_1D7B490A8();
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    sub_1D7AD8714(0);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v22, v23, v24);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  return a1;
}

uint64_t assignWithTake for FeatureRegulatoryInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(_OWORD *, uint64_t, uint64_t);
  int v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(char *, uint64_t, uint64_t);
  int v39;
  uint64_t v40;
  size_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(void *, uint64_t, uint64_t);
  int v53;
  int v54;
  uint64_t v55;
  void *v57;
  uint64_t v58;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  v8 = (_OWORD *)(a1 + 32);
  v9 = (_OWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a1 + 48);
  if (v10 == 1)
    goto LABEL_4;
  v11 = *(_QWORD *)(a2 + 48);
  if (v11 == 1)
  {
    sub_1D7AD9D4C(a1 + 32);
LABEL_4:
    v12 = *(_OWORD *)(a2 + 48);
    *v8 = *v9;
    *(_OWORD *)(a1 + 48) = v12;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    goto LABEL_5;
  }
  if (v10)
  {
    if (v11)
    {
      v29 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = v29;
      swift_bridgeObjectRelease();
      v30 = *(void **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v11;

      goto LABEL_22;
    }
    sub_1D7AC6558(a1 + 32);
  }
  *v8 = *v9;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
LABEL_22:
  if (*(_QWORD *)(a1 + 72))
  {
    v43 = *(_QWORD *)(a2 + 72);
    if (v43)
    {
      v44 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = v44;
      swift_bridgeObjectRelease();
      v45 = *(void **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v43;

      goto LABEL_5;
    }
    sub_1D7AC6558(a1 + 56);
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
LABEL_5:
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v13 = *(int *)(a3 + 32);
  v14 = (_OWORD *)(a1 + v13);
  v15 = (_OWORD *)(a2 + v13);
  v16 = type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      v58 = a3;
      v21 = v15[1];
      *v14 = *v15;
      v14[1] = v21;
      v14[2] = v15[2];
      v22 = *(int *)(v16 + 28);
      v23 = (char *)v14 + v22;
      v24 = (char *)v15 + v22;
      v25 = sub_1D7B490A8();
      v26 = *(_QWORD *)(v25 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        sub_1D7AD8714(0);
        memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v23, v24, v25);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      }
      *((_BYTE *)v14 + *(int *)(v16 + 32)) = *((_BYTE *)v15 + *(int *)(v16 + 32));
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_33;
    }
LABEL_11:
    sub_1D7AD86E4(0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_34;
  }
  if (v20)
  {
    sub_1D7AAD1B0((uint64_t)v14, type metadata accessor for FeatureRegulatoryInfo.ReenableActionConfiguration);
    goto LABEL_11;
  }
  v58 = a3;
  v31 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = v31;
  swift_bridgeObjectRelease();
  v32 = *((_QWORD *)v15 + 3);
  *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);
  *((_QWORD *)v14 + 3) = v32;
  swift_bridgeObjectRelease();
  v14[2] = v15[2];
  swift_release();
  v33 = *(int *)(v16 + 28);
  v34 = (char *)v14 + v33;
  v35 = (char *)v15 + v33;
  v36 = sub_1D7B490A8();
  v37 = *(_QWORD *)(v36 - 8);
  v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48);
  v57 = v34;
  LODWORD(v34) = v38(v34, 1, v36);
  v39 = v38(v35, 1, v36);
  if ((_DWORD)v34)
  {
    if (!v39)
    {
      (*(void (**)(void *, char *, uint64_t))(v37 + 32))(v57, v35, v36);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v57, 0, 1, v36);
      goto LABEL_32;
    }
    sub_1D7AD8714(0);
    v41 = *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64);
    v42 = v57;
  }
  else
  {
    if (!v39)
    {
      (*(void (**)(void *, char *, uint64_t))(v37 + 40))(v57, v35, v36);
      goto LABEL_32;
    }
    (*(void (**)(void *, uint64_t))(v37 + 8))(v57, v36);
    sub_1D7AD8714(0);
    v41 = *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64);
    v42 = v57;
  }
  memcpy(v42, v35, v41);
LABEL_32:
  *((_BYTE *)v14 + *(int *)(v16 + 32)) = *((_BYTE *)v15 + *(int *)(v16 + 32));
LABEL_33:
  a3 = v58;
LABEL_34:
  v47 = *(int *)(a3 + 36);
  v48 = (void *)(a1 + v47);
  v49 = (void *)(a2 + v47);
  v50 = sub_1D7B490A8();
  v51 = *(_QWORD *)(v50 - 8);
  v52 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v51 + 48);
  v53 = v52(v48, 1, v50);
  v54 = v52(v49, 1, v50);
  if (!v53)
  {
    if (!v54)
    {
      (*(void (**)(void *, void *, uint64_t))(v51 + 40))(v48, v49, v50);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v51 + 8))(v48, v50);
    goto LABEL_39;
  }
  if (v54)
  {
LABEL_39:
    sub_1D7AD8714(0);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v51 + 32))(v48, v49, v50);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
  return a1;
}

uint64_t getEnumTagSinglePayload for FeatureRegulatoryInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D7ADA3F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_1D7AD86E4(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 32);
    }
    else
    {
      sub_1D7AD8714(0);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a3 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for FeatureRegulatoryInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D7ADA4A0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_1D7AD86E4(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 32);
    }
    else
    {
      sub_1D7AD8714(0);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a4 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_1D7ADA53C()
{
  unint64_t v0;
  unint64_t v1;

  sub_1D7AD86E4(319);
  if (v0 <= 0x3F)
  {
    sub_1D7AD8714(319);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for FeatureRegulatoryInfo.ReenableActionConfiguration(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(const void *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = a2[2];
    v8 = a2[5];
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    v9 = *(int *)(a3 + 28);
    v10 = (void *)(a1 + v9);
    v11 = (char *)a2 + v9;
    *(_QWORD *)(a1 + 40) = v8;
    v12 = sub_1D7B490A8();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    if (v14(v11, 1, v12))
    {
      sub_1D7AD8714(0);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    *((_BYTE *)v4 + *(int *)(a3 + 32)) = *((_BYTE *)a2 + *(int *)(a3 + 32));
  }
  return v4;
}

uint64_t destroy for FeatureRegulatoryInfo.ReenableActionConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = sub_1D7B490A8();
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

uint64_t initializeWithCopy for FeatureRegulatoryInfo.ReenableActionConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  uint64_t v14;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *(int *)(a3 + 28);
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = sub_1D7B490A8();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v13(v10, 1, v11))
  {
    sub_1D7AD8714(0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  *(_BYTE *)(a1 + *(int *)(a3 + 32)) = *(_BYTE *)(a2 + *(int *)(a3 + 32));
  return a1;
}

_QWORD *assignWithCopy for FeatureRegulatoryInfo.ReenableActionConfiguration(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_retain();
  swift_release();
  v7 = *(int *)(a3 + 28);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1D7B490A8();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    sub_1D7AD8714(0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(a3 + 32)) = *((_BYTE *)a2 + *(int *)(a3 + 32));
  return a1;
}

_OWORD *initializeWithTake for FeatureRegulatoryInfo.ReenableActionConfiguration(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = *(int *)(a3 + 28);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1D7B490A8();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    sub_1D7AD8714(0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 32)) = *((_BYTE *)a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t assignWithTake for FeatureRegulatoryInfo.ReenableActionConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  v8 = *(int *)(a3 + 28);
  v9 = (void *)(a1 + v8);
  v10 = (void *)(a2 + v8);
  v11 = sub_1D7B490A8();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    sub_1D7AD8714(0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  *(_BYTE *)(a1 + *(int *)(a3 + 32)) = *(_BYTE *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t getEnumTagSinglePayload for FeatureRegulatoryInfo.ReenableActionConfiguration()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D7ADAC70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_1D7AD8714(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for FeatureRegulatoryInfo.ReenableActionConfiguration()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D7ADACF8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_1D7AD8714(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

void sub_1D7ADAD6C()
{
  unint64_t v0;

  sub_1D7AD8714(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_1D7ADADF8()
{
  sub_1D7AD855C(255);
  sub_1D7AD84AC(255);
  sub_1D7AD7E84();
  sub_1D7B49C3C();
  sub_1D7AA76D4(&qword_1F014E3E8, (uint64_t (*)(uint64_t))sub_1D7AD7E84, MEMORY[0x1E0CDD950]);
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeConformance2();
  sub_1D7ABCCEC();
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1D7ADAEE0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1D7ADAF04()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1D7ADAF24()
{
  uint64_t v0;

  return sub_1D7AD5028(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1D7ADAF34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1D7AD51D4(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1D7ADAF3C(uint64_t result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  if (a8)
  {
    sub_1D7AC5E74(result, a2, a3);
    sub_1D7AC5E74(a4, a5, a6);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1D7ADAF8C(uint64_t result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  if (a8)
  {
    sub_1D7AC5EE8(result, a2, a3);
    sub_1D7AC5EE8(a4, a5, a6);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1D7ADAFDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1D7AD632C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_1D7ADAFE4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[3];

  result = qword_1F014E610;
  if (!qword_1F014E610)
  {
    sub_1D7AD842C(255);
    v2 = v1;
    v3 = sub_1D7AA76D4(&qword_1F014E608, (uint64_t (*)(uint64_t))sub_1D7AD83A0, MEMORY[0x1E0CDFA58]);
    v4[0] = MEMORY[0x1E0CE0400];
    v4[1] = v3;
    v4[2] = MEMORY[0x1E0CE0400];
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CDFF98], v2, v4);
    atomic_store(result, (unint64_t *)&qword_1F014E610);
  }
  return result;
}

uint64_t sub_1D7ADB068()
{
  return sub_1D7AD62B4();
}

void sub_1D7ADB070()
{
  sub_1D7B48E44();
  __break(1u);
}

unint64_t sub_1D7ADB08C()
{
  unint64_t result;

  result = qword_1F014E618;
  if (!qword_1F014E618)
  {
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CAED98], MEMORY[0x1E0CAEDA8]);
    atomic_store(result, (unint64_t *)&qword_1F014E618);
  }
  return result;
}

void sub_1D7ADB0D0()
{
  sub_1D7ADB08C();
  sub_1D7B49000();
  __break(1u);
}

uint64_t sub_1D7ADB0F4()
{
  return 8;
}

uint64_t sub_1D7ADB100()
{
  return swift_release();
}

uint64_t sub_1D7ADB108(_QWORD *a1, _QWORD *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_1D7ADB118()
{
  sub_1D7ADB164();
  return sub_1D7B4A2B4();
}

_QWORD *sub_1D7ADB158(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

void sub_1D7ADB164()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014E620)
  {
    sub_1D7B48E5C();
    v0 = sub_1D7B4A9A4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014E620);
  }
}

uint64_t sub_1D7ADB1C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for FeatureRegulatoryInfoView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = sub_1D7B490A8();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  sub_1D7AA787C(0, &qword_1F014E2F8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9030], MEMORY[0x1E0CD87D0]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = sub_1D7B49900();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v3, v8);
  }
  else
  {
    swift_release();
  }

  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + ((v3 + v4 + v7) & ~v7), v5);
  return swift_deallocObject();
}

uint64_t sub_1D7ADB2E4()
{
  type metadata accessor for FeatureRegulatoryInfoView(0);
  sub_1D7B490A8();
  return sub_1D7AD6544();
}

void sub_1D7ADB344(uint64_t a1)
{
  sub_1D7AA787C(a1, (unint64_t *)&unk_1F0150790, type metadata accessor for ErrorDetails, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t sub_1D7ADB374()
{
  return MEMORY[0x1E0DEA528];
}

uint64_t sub_1D7ADB380@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  sub_1D7ADB3C0();
  result = sub_1D7B4A7F4();
  *a1 = result;
  return result;
}

unint64_t sub_1D7ADB3C0()
{
  unint64_t result;

  result = qword_1F014D758;
  if (!qword_1F014D758)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1F014D758);
  }
  return result;
}

uint64_t sub_1D7ADB3FC(void (*a1)(uint64_t *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v16;
  uint64_t v17;
  uint64_t v18;

  v4 = v3;
  if (a3 >> 62)
    goto LABEL_18;
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v7 = MEMORY[0x1E0DEE9D8];
    if (!v6)
      return v7;
    v18 = MEMORY[0x1E0DEE9D8];
    result = sub_1D7AA5F64(0, v6 & ~(v6 >> 63), 0);
    if (v6 < 0)
      break;
    v9 = 0;
    v7 = v18;
    while (v6 != v9)
    {
      if ((a3 & 0xC000000000000001) != 0)
        v10 = (id)MEMORY[0x1D829E758](v9, a3);
      else
        v10 = *(id *)(a3 + 8 * v9 + 32);
      v11 = v10;
      v16 = v10;
      a1(&v17, &v16);
      if (v4)
      {
        swift_release();

        return v7;
      }
      v4 = 0;

      v12 = v17;
      v18 = v7;
      v14 = *(_QWORD *)(v7 + 16);
      v13 = *(_QWORD *)(v7 + 24);
      if (v14 >= v13 >> 1)
      {
        sub_1D7AA5F64(v13 > 1, v14 + 1, 1);
        v7 = v18;
      }
      ++v9;
      *(_QWORD *)(v7 + 16) = v14 + 1;
      *(_QWORD *)(v7 + 8 * v14 + 32) = v12;
      if (v6 == v9)
        return v7;
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    v6 = sub_1D7B4A8A8();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1D7ADB584(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v16;
  uint64_t v17;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v17 = MEMORY[0x1E0DEE9D8];
    sub_1D7AA5F64(0, v5, 0);
    v6 = v17;
    v8 = *(_QWORD *)(sub_1D7B495C4() - 8);
    v9 = a3 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v10 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      a1(&v16, v9);
      if (v4)
        break;
      v4 = 0;
      v11 = v16;
      v17 = v6;
      v13 = *(_QWORD *)(v6 + 16);
      v12 = *(_QWORD *)(v6 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_1D7AA5F64(v12 > 1, v13 + 1, 1);
        v6 = v17;
      }
      *(_QWORD *)(v6 + 16) = v13 + 1;
      *(_QWORD *)(v6 + 8 * v13 + 32) = v11;
      v9 += v10;
      if (!--v5)
        return v6;
    }
    swift_release();
  }
  return v6;
}

_QWORD *sub_1D7ADB6A0(unint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  void (*v16)(_BYTE *, _QWORD, uint64_t);
  _QWORD *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  void (*v23)(_BYTE *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char v34;
  _BYTE v35[4];
  int v36;
  uint64_t v37;
  _BYTE v38[16];
  uint64_t v39;
  _BYTE *v40;

  v36 = a3;
  v6 = sub_1D7B49588();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = &v35[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = &v35[-v12];
  MEMORY[0x1E0C80A78](v11);
  v15 = &v35[-v14];
  v16 = *(void (**)(_BYTE *, _QWORD, uint64_t))(v7 + 104);
  v16(&v35[-v14], *MEMORY[0x1E0D29080], v6);
  v39 = v3;
  v40 = v15;
  result = (_QWORD *)sub_1D7ADB3FC((void (*)(uint64_t *__return_ptr, id *))sub_1D7ADC2B8, (uint64_t)v38, a1);
  v18 = result[2];
  v37 = a2;
  v19 = 0;
  if (v18)
  {
    v20 = result + 4;
    while (1)
    {
      v21 = *v20++;
      v22 = __OFADD__(v19, v21);
      v19 += v21;
      if (v22)
        break;
      if (!--v18)
        goto LABEL_5;
    }
    __break(1u);
    goto LABEL_19;
  }
LABEL_5:
  swift_bridgeObjectRelease();
  v23 = *(void (**)(_BYTE *, uint64_t))(v7 + 8);
  v23(v15, v6);
  v24 = ((uint64_t (*)(_BYTE *, _QWORD, uint64_t))v16)(v13, *MEMORY[0x1E0D29078], v6);
  MEMORY[0x1E0C80A78](v24);
  *(_QWORD *)&v35[-16] = v3;
  *(_QWORD *)&v35[-8] = v13;
  result = (_QWORD *)sub_1D7ADB3FC((void (*)(uint64_t *__return_ptr, id *))sub_1D7ADC344, (uint64_t)&v35[-32], a1);
  v25 = result[2];
  if (v25)
  {
    v26 = 0;
    v27 = result + 4;
    while (1)
    {
      v28 = *v27++;
      v22 = __OFADD__(v26, v28);
      v26 += v28;
      if (v22)
        break;
      if (!--v25)
        goto LABEL_11;
    }
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v26 = 0;
LABEL_11:
  swift_bridgeObjectRelease();
  v23(v13, v6);
  v29 = ((uint64_t (*)(_BYTE *, _QWORD, uint64_t))v16)(v10, *MEMORY[0x1E0D29088], v6);
  MEMORY[0x1E0C80A78](v29);
  *(_QWORD *)&v35[-16] = v3;
  *(_QWORD *)&v35[-8] = v10;
  result = (_QWORD *)sub_1D7ADB3FC((void (*)(uint64_t *__return_ptr, id *))sub_1D7ADC344, (uint64_t)&v35[-32], a1);
  v30 = result[2];
  if (v30)
  {
    v31 = 0;
    v32 = result + 4;
    while (1)
    {
      v33 = *v32++;
      v22 = __OFADD__(v31, v33);
      v31 += v33;
      if (v22)
        goto LABEL_20;
      if (!--v30)
        goto LABEL_17;
    }
  }
  v31 = 0;
LABEL_17:
  swift_bridgeObjectRelease();
  v34 = v36 & 1;
  v23(v10, v6);
  return sub_1D7ADB920(v19, v26, v31, v37, v34);
}

id sub_1D7ADB920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  char *v27;
  id v28;
  char *v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;

  v10 = sub_1D7B4A368();
  MEMORY[0x1E0C80A78](v10);
  v11 = sub_1D7B4921C();
  MEMORY[0x1E0C80A78](v11);
  v12 = sub_1D7B4A380();
  v13 = MEMORY[0x1E0C80A78](v12);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v44 - v14;
  v16 = __OFADD__(a1, a2);
  v17 = a1 + a2;
  if (v16)
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v17 >= 1)
  {
    if ((a5 & 1) == 0 && a4 == 6)
    {
      sub_1D7B4A32C();
      v45 = 0;
      v46 = 0xE000000000000000;
      sub_1D7B4A7DC();
      swift_bridgeObjectRelease();
      if (qword_1F014CF90 == -1)
        goto LABEL_14;
      goto LABEL_32;
    }
    sub_1D7ADC2F0();
    v18 = swift_allocObject();
    v19 = MEMORY[0x1E0DEB418];
    *(_OWORD *)(v18 + 16) = xmmword_1D7B84630;
    v20 = MEMORY[0x1E0DEB490];
    *(_QWORD *)(v18 + 56) = v19;
    *(_QWORD *)(v18 + 64) = v20;
    *(_QWORD *)(v18 + 32) = v17;
    sub_1D7B4A398();
    v15 = v21;
    swift_bridgeObjectRelease();
    sub_1D7B4A35C();
    sub_1D7B4A350();
    v45 = v17;
    sub_1D7B4A338();
    sub_1D7B4A350();
    sub_1D7B4A374();
    v45 = 0;
    v46 = 0xE000000000000000;
    sub_1D7B4A7DC();
    swift_bridgeObjectRelease();
    if (qword_1F014CF90 == -1)
    {
LABEL_10:
      v22 = (id)qword_1F0154598;
      sub_1D7B49210();
      sub_1D7B4A3D4();
      v24 = v23;
      goto LABEL_16;
    }
LABEL_31:
    swift_once();
    goto LABEL_10;
  }
  if (a3 < 1)
  {
    v25 = (void *)sub_1D7B4A38C();
    v26 = HKUILocalizedString(v25);

    if (v26)
    {
      sub_1D7B4A3BC();
      v15 = v27;

    }
    else
    {
      v15 = 0;
    }
    goto LABEL_15;
  }
  sub_1D7B4A32C();
  v45 = 0;
  v46 = 0xE000000000000000;
  sub_1D7B4A7DC();
  swift_bridgeObjectRelease();
  if (qword_1F014CF90 != -1)
LABEL_32:
    swift_once();
LABEL_14:
  v28 = (id)qword_1F0154598;
  sub_1D7B49210();
  sub_1D7B4A3D4();
  v15 = v29;
LABEL_15:
  v24 = 0;
LABEL_16:
  v30 = objc_msgSend(objc_allocWithZone((Class)HKDisplayTypeContextItem), sel_init);
  v31 = (void *)sub_1D7B494E0();
  v32 = objc_msgSend(v31, sel_identifier);

  if (!v32)
  {
    sub_1D7B4A3BC();
    v32 = (id)sub_1D7B4A38C();
    swift_bridgeObjectRelease();
  }
  v33 = objc_msgSend((id)objc_opt_self(), sel_hk_chartOverlayAccessibilityIdentifier_, v32);

  if (v33 && (v45 = 0, v46 = 0, sub_1D7B4A3B0(), v33, v46))
  {
    v34 = (void *)sub_1D7B4A38C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v34 = 0;
  }
  objc_msgSend(v30, sel_setAccessibilityIdentifier_, v34);

  sub_1D7B1EE54();
  v35 = (void *)sub_1D7B4A38C();
  swift_bridgeObjectRelease();
  objc_msgSend(v30, sel_setTitle_, v35);

  v36 = (void *)objc_opt_self();
  v37 = objc_msgSend((id)objc_opt_self(), sel_tertiarySystemBackgroundColor);
  v38 = objc_msgSend(v36, sel_defaultContextViewColorsUsingColor_, v37);

  objc_msgSend(v30, sel_setMetricColors_, v38);
  sub_1D7AAD1F0();
  v40 = v39;
  objc_msgSend(v30, sel_setSelectedMetricColors_, v39);

  if (v15)
  {
    v41 = (void *)sub_1D7B4A38C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v41 = 0;
  }
  objc_msgSend(v30, sel_setValue_, v41);

  if (v24)
  {
    v42 = (void *)sub_1D7B4A38C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v42 = 0;
  }
  objc_msgSend(v30, sel_setUnit_, v42);

  objc_msgSend(v30, sel_setInfoHidden_, 0);
  return v30;
}

uint64_t sub_1D7ADBFB8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  _QWORD v13[3];

  __swift_project_boxed_opaque_existential_0((_QWORD *)(*a1 + OBJC_IVAR____TtC8HealthUI17BalanceChartPoint_collection), *(_QWORD *)(*a1 + OBJC_IVAR____TtC8HealthUI17BalanceChartPoint_collection + 24));
  v5 = sub_1D7B4960C();
  v13[2] = a2;
  v6 = sub_1D7ADB584((void (*)(uint64_t *__return_ptr, uint64_t))sub_1D7ADC2D4, (uint64_t)v13, v5);
  result = swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(v6 + 16);
  if (v8)
  {
    v9 = 0;
    v10 = (uint64_t *)(v6 + 32);
    while (1)
    {
      v11 = *v10++;
      v12 = __OFADD__(v9, v11);
      v9 += v11;
      if (v12)
        break;
      if (!--v8)
        goto LABEL_7;
    }
    __break(1u);
  }
  else
  {
    v9 = 0;
LABEL_7:
    result = swift_bridgeObjectRelease();
    *a3 = v9;
  }
  return result;
}

uint64_t sub_1D7ADC0AC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char v6;
  uint64_t result;
  uint64_t v8;

  v2 = sub_1D7B49588();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7B49594();
  v6 = sub_1D7B4957C();
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *a1 = v6 & 1;
  return result;
}

uint64_t sub_1D7ADC15C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC8HealthUI27BalanceMetricOverlayContext_selectedMetric;
  v2 = sub_1D7B49504();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

id sub_1D7ADC198()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BalanceMetricOverlayContext();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1D7ADC208()
{
  return type metadata accessor for BalanceMetricOverlayContext();
}

uint64_t type metadata accessor for BalanceMetricOverlayContext()
{
  uint64_t result;

  result = qword_1F014E660;
  if (!qword_1F014E660)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1D7ADC24C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1D7B49504();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1D7ADC2B8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1D7ADBFB8(a1, *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_1D7ADC2D4@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D7ADC0AC(a1);
}

void sub_1D7ADC2F0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014DC00)
  {
    sub_1D7AC5A20();
    v0 = sub_1D7B4A920();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014DC00);
  }
}

uint64_t sub_1D7ADC344@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D7ADC2B8(a1, a2);
}

uint64_t *sub_1D7ADC358@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if ((unint64_t)*result >= 3)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

void sub_1D7ADC370(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

id AudiogramLineSeriesPresentationStyle.__allocating_init(seriesEar:selectedEar:disableConnectionLines:disabledStyleOverride:)(uint64_t a1, uint64_t a2, char a3, char a4)
{
  objc_class *v4;
  id v9;

  v9 = objc_allocWithZone(v4);
  return AudiogramLineSeriesPresentationStyle.init(seriesEar:selectedEar:disableConnectionLines:disabledStyleOverride:)(a1, a2, a3, a4);
}

id AudiogramLineSeriesPresentationStyle.init(seriesEar:selectedEar:disableConnectionLines:disabledStyleOverride:)(uint64_t a1, uint64_t a2, char a3, char a4)
{
  _BYTE *v4;
  char v5;
  char v6;
  objc_super v8;

  *(_QWORD *)&v4[OBJC_IVAR___HKAudiogramLineSeriesPresentationStyle_seriesEar] = a1;
  *(_QWORD *)&v4[OBJC_IVAR___HKAudiogramLineSeriesPresentationStyle_selectedEar] = a2;
  if (a1 == a2)
    v5 = 1;
  else
    v5 = 2;
  if (!a2)
    v5 = 0;
  if ((a4 & 1) != 0)
    v6 = 2;
  else
    v6 = v5;
  v4[OBJC_IVAR___HKAudiogramLineSeriesPresentationStyle_displayState] = v6;
  v4[OBJC_IVAR___HKAudiogramLineSeriesPresentationStyle_disableConnectionLines] = a3 & 1;
  v8.receiver = v4;
  v8.super_class = (Class)type metadata accessor for AudiogramLineSeriesPresentationStyle();
  return objc_msgSendSuper2(&v8, sel_init);
}

id sub_1D7ADC500()
{
  uint64_t v0;
  id v1;
  char v2;
  id v3;
  id v4;
  id v5;
  id v6;
  char v7;
  double v8;
  id v9;
  id v10;
  id result;
  void *v12;
  id v13;
  uint64_t v14;
  __CFString *v15;
  void *v16;
  id v17;

  v1 = objc_msgSend(objc_allocWithZone((Class)HKLineSeriesPresentationStyle), sel_init);
  v2 = *(_BYTE *)(v0 + OBJC_IVAR___HKAudiogramLineSeriesPresentationStyle_disableConnectionLines);
  if ((v2 & 1) != 0)
  {
    v3 = 0;
  }
  else
  {
    v4 = sub_1D7ADC7B0();
    v3 = objc_msgSend((id)objc_opt_self(), sel_strokeStyleWithColor_lineWidth_, v4, 2.0);

    objc_msgSend(v3, sel_setDashStyle_, *(unsigned __int8 *)(v0 + OBJC_IVAR___HKAudiogramLineSeriesPresentationStyle_displayState) == 2);
  }
  objc_msgSend(v1, sel_setStrokeStyle_, v3);

  v5 = sub_1D7ADC7D8();
  v6 = objc_msgSend(objc_allocWithZone((Class)HKLineSeriesPointMarkerStyle), sel_initWithColor_radius_style_, v5, 1, 4.0);

  objc_msgSend(v1, sel_setPointMarkerStyle_, v6);
  if (*(_QWORD *)(v0 + OBJC_IVAR___HKAudiogramLineSeriesPresentationStyle_selectedEar))
    v7 = 1;
  else
    v7 = v2;
  if ((v7 & 1) != 0)
    return v1;
  v8 = *MEMORY[0x1E0DC1438];
  v9 = sub_1D7ADC7C4();
  v10 = objc_msgSend((id)objc_opt_self(), sel_hk_roundedSystemFontWithSize_weight_, 18.0, v8);
  result = HKIntegerFormatter();
  if (result)
  {
    v12 = result;
    v13 = objc_msgSend((id)objc_opt_self(), sel_labelStyleWithColor_font_horizontalAlignment_verticalAlignment_numberFormatter_, v9, v10, 0, 2, result);

    v14 = *(_QWORD *)(v0 + OBJC_IVAR___HKAudiogramLineSeriesPresentationStyle_seriesEar);
    v15 = HKAudiogramEarLocalizedKeyForEar(v14, 1);
    sub_1D7B4A3BC();

    v16 = (void *)sub_1D7B4A38C();
    swift_bridgeObjectRelease();
    v17 = objc_msgSend((id)objc_opt_self(), sel_annotationStyleWithLabelStyle_localizedLabelKey_leftOfSeries_, v13, v16, v14 == 1);

    objc_msgSend(v1, sel_setLegendAnnotationStyle_, v17);
    return v1;
  }
  __break(1u);
  return result;
}

id sub_1D7ADC7B0()
{
  return sub_1D7ADC7EC((SEL *)&selRef_hk_hearingHealthAudiogramLeftEarLineColor, (SEL *)&selRef_hk_hearingHealthAudiogramRightEarLineColor);
}

id sub_1D7ADC7C4()
{
  return sub_1D7ADC7EC((SEL *)&selRef_hk_hearingHealthAudiogramLeftEarAnnotationColor, (SEL *)&selRef_hk_hearingHealthAudiogramRightEarAnnotationColor);
}

id sub_1D7ADC7D8()
{
  return sub_1D7ADC7EC((SEL *)&selRef_hk_hearingHealthAudiogramLeftEarPointMarkerColor, (SEL *)&selRef_hk_hearingHealthAudiogramRightEarPointMarkerColor);
}

id sub_1D7ADC7EC(SEL *a1, SEL *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id result;
  int v13;
  void *v14;
  id v15;

  v3 = *(_QWORD *)(v2 + OBJC_IVAR___HKAudiogramLineSeriesPresentationStyle_seriesEar);
  switch(v3)
  {
    case 0:
      return objc_msgSend((id)objc_opt_self(), sel_hk_hearingHealthAudiogramDisabledLineColor);
    case 2:
      v5 = *(unsigned __int8 *)(v2 + OBJC_IVAR___HKAudiogramLineSeriesPresentationStyle_displayState);
      v6 = (void *)objc_opt_self();
      v7 = objc_msgSend(v6, *a2);
      v8 = objc_msgSend(v6, sel_hk_hearingHealthAudiogramRightEarDeemphasizedColor);
      v9 = objc_msgSend(v6, sel_hk_hearingHealthAudiogramDisabledLineColor);
      v10 = v7;
      if (!v5)
        goto LABEL_11;
      v10 = v8;
      if (v5 == 1)
        goto LABEL_11;
      goto LABEL_10;
    case 1:
      v13 = *(unsigned __int8 *)(v2 + OBJC_IVAR___HKAudiogramLineSeriesPresentationStyle_displayState);
      v14 = (void *)objc_opt_self();
      v7 = objc_msgSend(v14, *a1);
      v8 = objc_msgSend(v14, sel_hk_hearingHealthAudiogramLeftEarDeemphasizedColor);
      v9 = objc_msgSend(v14, sel_hk_hearingHealthAudiogramDisabledLineColor);
      v10 = v7;
      if (!v13)
        goto LABEL_11;
      v10 = v8;
      if (v13 == 1)
        goto LABEL_11;
LABEL_10:
      v10 = v9;
LABEL_11:
      v15 = v10;

      return v15;
  }
  type metadata accessor for HKAudiogramEar(0);
  result = (id)sub_1D7B4A950();
  __break(1u);
  return result;
}

id AudiogramLineSeriesPresentationStyle.__deallocating_deinit()
{
  return sub_1D7ADCDB4(type metadata accessor for AudiogramLineSeriesPresentationStyle);
}

char *sub_1D7ADC9C8(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1D7ADCE14(a1, a2, a3, 0, 0);
}

uint64_t sub_1D7ADCA68(uint64_t a1, uint64_t a2, CGFloat *a3, CGContext *a4, uint64_t a5, id a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10)
{
  char *v10;
  char *v11;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  double v28;
  CGAffineTransform v33;
  objc_super v34;
  CGPoint v35;

  v11 = v10;
  v18 = *a3;
  v19 = a3[1];
  v20 = a3[2];
  v21 = a3[3];
  v23 = a3[4];
  v22 = a3[5];
  v24 = objc_msgSend(a6, sel_axisAnnotationDelegateForSeries_, v10);
  if (((objc_msgSend(a6, sel_seriesDrawingDuringScrolling) & 1) != 0
     || (objc_msgSend(a6, sel_seriesDrawingDuringTiling) & 1) != 0
     || objc_msgSend(a6, sel_seriesDrawingDuringAutoscale))
    && v24)
  {
    objc_msgSend(v24, sel_clearAxisAnnotations);
  }
  v34.receiver = v11;
  v34.super_class = (Class)type metadata accessor for AudiogramLineSeries();
  v33.a = v18;
  v33.b = v19;
  v33.c = v20;
  v33.d = v21;
  v33.tx = v23;
  v33.ty = v22;
  objc_msgSendSuper2(&v34, sel_drawSeriesWithBlockCoordinates_axisRect_zoomLevelConfiguration_pointTransform_renderContext_secondaryRenderContext_seriesRenderingDelegate_, a1, a2, &v33, a4, a5, a6, a7, a8, a9, a10);
  v25 = *(void **)&v11[OBJC_IVAR___HKAudiogramLineSeries_selectedFrequency];
  if (v25)
  {
    v26 = (void *)objc_opt_self();
    v27 = v25;
    sub_1D7B494B0();
    objc_msgSend(v26, sel_axisValueFromFrequency_);
    v33.a = v18;
    v33.b = v19;
    v33.c = v20;
    v33.d = v21;
    v33.tx = v23;
    v33.ty = v22;
    v35.y = 0.0;
    *(_QWORD *)&v28 = *(_OWORD *)&CGPointApplyAffineTransform(v35, &v33);
    sub_1D7ADD238(a4, v28, a7, a8, a9, a10);

  }
  return swift_unknownObjectRelease();
}

id AudiogramLineSeries.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void AudiogramLineSeries.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id AudiogramLineSeries.__deallocating_deinit()
{
  return sub_1D7ADCDB4(type metadata accessor for AudiogramLineSeries);
}

id sub_1D7ADCDB4(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for AudiogramLineSeriesPresentationStyle()
{
  return objc_opt_self();
}

char *sub_1D7ADCE14(uint64_t a1, uint64_t a2, char a3, char a4, void *a5)
{
  objc_class *v10;
  char *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  char *v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  char *v27;
  id v28;
  void *v29;
  uint64_t v30;
  char *v31;
  id v32;
  void *v33;
  uint64_t v34;
  char *v35;
  id v36;
  void *v37;
  char *v38;
  id v39;
  objc_super v41;

  v10 = (objc_class *)type metadata accessor for AudiogramLineSeries();
  v11 = (char *)objc_allocWithZone(v10);
  *(_QWORD *)&v11[OBJC_IVAR___HKAudiogramLineSeries_selectedFrequency] = 0;
  *(_QWORD *)&v11[OBJC_IVAR___HKAudiogramLineSeries_seriesEar] = a1;
  v41.receiver = v11;
  v41.super_class = v10;
  v12 = objc_msgSendSuper2(&v41, sel_init);
  objc_msgSend(v12, sel_setDrawSelectionLineBehindAllSeries_, 1);
  objc_msgSend(v12, sel_setAllowsSelection_, a2 == 0);
  v13 = objc_allocWithZone((Class)HKNumericAxisConfiguration);
  v14 = v12;
  v15 = objc_msgSend(v13, sel_init);
  v16 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DecibelsHearingLossAxisLabelDimension()), sel_init);
  objc_msgSend(v15, sel_setLabelDimension_, v16);

  objc_msgSend(v15, sel_setMaxLabels_, 7);
  v17 = objc_msgSend((id)objc_opt_self(), sel_standardNumericYAxisWithConfigurationOverrides_, v15);

  objc_msgSend(v14, sel_setYAxis_, v17);
  v18 = qword_1F014CF88;
  v19 = (char *)v14;
  if (v18 != -1)
    swift_once();
  v20 = objc_msgSend((id)objc_opt_self(), sel_ruleWithDefaultAxisBounds_axisBoundsOverrides_noDataAxisBounds_, qword_1F014FAD0, 0, qword_1F014FAD0);
  objc_msgSend(v19, sel_setAxisScalingRule_, v20);

  v21 = *(void **)&v19[OBJC_IVAR___HKAudiogramLineSeries_selectedFrequency];
  *(_QWORD *)&v19[OBJC_IVAR___HKAudiogramLineSeries_selectedFrequency] = a5;
  v22 = a5;

  v23 = objc_allocWithZone((Class)type metadata accessor for AudiogramLineSeriesPresentationStyle());
  v24 = AudiogramLineSeriesPresentationStyle.init(seriesEar:selectedEar:disableConnectionLines:disabledStyleOverride:)(a1, a2, a3 & 1, a4 & 1);
  v25 = sub_1D7ADC500();
  sub_1D7AAF550();
  v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_1D7B83E30;
  *(_QWORD *)(v26 + 32) = v25;
  sub_1D7B4A4B8();
  sub_1D7AC7E70();
  v27 = v19;
  v28 = v25;
  v29 = (void *)sub_1D7B4A4A0();
  swift_bridgeObjectRelease();
  objc_msgSend(v27, sel_setUnhighlightedPresentationStyles_, v29);

  v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_1D7B83E30;
  *(_QWORD *)(v30 + 32) = v28;
  sub_1D7B4A4B8();
  v31 = v27;
  v32 = v28;
  v33 = (void *)sub_1D7B4A4A0();
  swift_bridgeObjectRelease();
  objc_msgSend(v31, sel_setHighlightedPresentationStyles_, v33);

  v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_1D7B83E30;
  *(_QWORD *)(v34 + 32) = v32;
  sub_1D7B4A4B8();
  v35 = v31;
  v36 = v32;
  v37 = (void *)sub_1D7B4A4A0();
  swift_bridgeObjectRelease();
  objc_msgSend(v35, sel_setSelectedPresentationStyles_, v37);

  objc_msgSend(v35, sel_setInactivePresentationStyle_, v36);
  v38 = v35;
  v39 = objc_msgSend(v36, sel_pointMarkerStyle);
  objc_msgSend(v38, sel_setSelectedPointMarkerStyle_, v39);

  return v38;
}

uint64_t type metadata accessor for AudiogramLineSeries()
{
  return objc_opt_self();
}

void sub_1D7ADD238(CGContext *a1, double a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  id v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double MinY;
  CGFloat Height;
  id v24;
  CGRect v25;
  CGRect v26;

  CGContextSaveGState(a1);
  v12 = objc_msgSend((id)objc_opt_self(), sel_hk_roundedSystemFontWithSize_weight_, 11.0, *MEMORY[0x1E0DC1438]);
  v24 = objc_msgSend((id)objc_opt_self(), sel_configurationWithFont_scale_, v12, 1);
  v13 = (void *)sub_1D7B4A38C();
  v14 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_withConfiguration_, v13, v24);

  if (v14)
  {
    v15 = objc_msgSend((id)objc_opt_self(), sel_labelColor);
    v16 = objc_msgSend(v14, sel_imageWithTintColor_renderingMode_, v15, 1);

    objc_msgSend(v14, sel_size);
    v18 = v17;
    v20 = v19;
    v21 = a2 + v17 * -0.5;
    v25.origin.x = a3;
    v25.origin.y = a4;
    v25.size.width = a5;
    v25.size.height = a6;
    MinY = CGRectGetMinY(v25);
    v26.origin.x = a3;
    v26.origin.y = a4;
    v26.size.width = a5;
    v26.size.height = a6;
    Height = CGRectGetHeight(v26);
    CGContextTranslateCTM(a1, 0.0, Height + v20 * -1.5);
    objc_msgSend(v16, sel_drawInRect_, v21, MinY, v18, v20);
    CGContextRestoreGState(a1);

    v12 = v14;
    v24 = v16;
  }
  else
  {
    CGContextRestoreGState(a1);
  }

}

uint64_t method lookup function for AudiogramLineSeriesPresentationStyle()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AudiogramLineSeriesPresentationStyle.__allocating_init(seriesEar:selectedEar:disableConnectionLines:disabledStyleOverride:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of AudiogramLineSeriesPresentationStyle.lineSeriesPresentationStyle()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t method lookup function for AudiogramLineSeries()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static AudiogramLineSeries.makeAudiogramLineSeries(seriesEar:selectedEar:disableConnectionLines:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of static AudiogramLineSeries.makeAudiogramLineSeries(seriesEar:selectedEar:disableConnectionLines:disabledStyleOverride:selectedFrequency:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t storeEnumTagSinglePayload for AudiogramLineSeriesPresentationStyle.DisplayState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1D7ADD500 + 4 * byte_1D7B853B5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1D7ADD534 + 4 * asc_1D7B853B0[v4]))();
}

uint64_t sub_1D7ADD534(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D7ADD53C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1D7ADD544);
  return result;
}

uint64_t sub_1D7ADD550(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1D7ADD558);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1D7ADD55C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1D7ADD564(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AudiogramLineSeriesPresentationStyle.DisplayState()
{
  return &type metadata for AudiogramLineSeriesPresentationStyle.DisplayState;
}

unint64_t sub_1D7ADD584()
{
  unint64_t result;

  result = qword_1F014E6F0;
  if (!qword_1F014E6F0)
  {
    result = MEMORY[0x1D829FF28](&unk_1D7B854B0, &type metadata for AudiogramLineSeriesPresentationStyle.DisplayState);
    atomic_store(result, (unint64_t *)&qword_1F014E6F0);
  }
  return result;
}

Swift::Void __swiftcall NSMutableAttributedString.setContentSizeCategory(_:)(__C::UIContentSizeCategory a1)
{
  void *v1;
  uint64_t v3;
  id v4;
  __C::UIContentSizeCategory *v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  _QWORD v10[6];

  v3 = *MEMORY[0x1E0DC1138];
  v4 = objc_msgSend(v1, sel_length);
  v5 = (__C::UIContentSizeCategory *)swift_allocObject();
  v5[2]._rawValue = a1._rawValue;
  v5[3]._rawValue = v1;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = sub_1D7ADDA98;
  *(_QWORD *)(v6 + 24) = v5;
  v10[4] = sub_1D7ADAF04;
  v10[5] = v6;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1107296256;
  v10[2] = sub_1D7ADD9E4;
  v10[3] = &block_descriptor_3;
  v7 = _Block_copy(v10);
  v8 = a1._rawValue;
  v9 = v1;
  swift_retain();
  swift_release();
  objc_msgSend(v9, sel_enumerateAttribute_inRange_options_usingBlock_, v3, 0, v4, 0, v7);
  _Block_release(v7);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((v3 & 1) != 0)
    __break(1u);
}

void sub_1D7ADD734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  unint64_t v14;
  char v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  id v22;
  __int128 v23;
  __int128 v24;

  sub_1D7AB9B80(a1, (uint64_t)&v23);
  if (!*((_QWORD *)&v24 + 1))
    goto LABEL_13;
  sub_1D7ADDAC8();
  if ((swift_dynamicCast() & 1) == 0)
    return;
  v10 = objc_msgSend(v22, sel_fontDescriptor);
  v11 = objc_msgSend(v10, sel_fontAttributes);

  type metadata accessor for AttributeName(0);
  sub_1D7ADDB04();
  v12 = sub_1D7B4A23C();

  if (*(_QWORD *)(v12 + 16))
  {
    v13 = (id)*MEMORY[0x1E0DC13B8];
    v14 = sub_1D7AF45BC((uint64_t)v13);
    if ((v15 & 1) != 0)
    {
      sub_1D7AA553C(*(_QWORD *)(v12 + 56) + 32 * v14, (uint64_t)&v23);
    }
    else
    {
      v23 = 0u;
      v24 = 0u;
    }

  }
  else
  {
    v23 = 0u;
    v24 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v24 + 1))
  {

LABEL_13:
    sub_1D7AB1290((uint64_t)&v23);
    return;
  }
  if ((swift_dynamicCast() & 1) != 0)
  {
    v16 = (void *)objc_opt_self();
    v17 = (void *)sub_1D7B4A38C();
    swift_bridgeObjectRelease();
    v18 = objc_msgSend((id)objc_opt_self(), sel_traitCollectionWithPreferredContentSizeCategory_, a5);
    v19 = objc_msgSend(v16, sel_preferredFontDescriptorWithTextStyle_compatibleWithTraitCollection_, v17, v18);

    v20 = objc_msgSend((id)objc_opt_self(), sel_fontWithDescriptor_size_, v19, 0.0);
    v21 = *MEMORY[0x1E0DC1138];
    objc_msgSend(a6, sel_removeAttribute_range_, *MEMORY[0x1E0DC1138], a2, a3);
    objc_msgSend(a6, sel_addAttribute_value_range_, v21, v20, a2, a3);

  }
  else
  {

  }
}

uint64_t sub_1D7ADD9C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t sub_1D7ADD9E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v9)(__int128 *, uint64_t, uint64_t, uint64_t);
  __int128 v11;
  __int128 v12;

  v9 = *(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(a1 + 32);
  if (a2)
  {
    *((_QWORD *)&v12 + 1) = swift_getObjectType();
    *(_QWORD *)&v11 = a2;
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
  }
  swift_unknownObjectRetain();
  v9(&v11, a3, a4, a5);
  return sub_1D7AB1290((uint64_t)&v11);
}

uint64_t sub_1D7ADDA6C()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_1D7ADDA98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_1D7ADD734(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(void **)(v4 + 24));
}

uint64_t sub_1D7ADDAA0()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

unint64_t sub_1D7ADDAC8()
{
  unint64_t result;

  result = qword_1F014DC30;
  if (!qword_1F014DC30)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1F014DC30);
  }
  return result;
}

unint64_t sub_1D7ADDB04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F014D2D0;
  if (!qword_1F014D2D0)
  {
    type metadata accessor for AttributeName(255);
    result = MEMORY[0x1D829FF28](&unk_1D7B83844, v1);
    atomic_store(result, (unint64_t *)&qword_1F014D2D0);
  }
  return result;
}

id AudiogramAnnotationViewDataSource.__allocating_init(applicationItems:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = sub_1D7ADE704(a1);

  return v4;
}

id AudiogramAnnotationViewDataSource.init(applicationItems:)(void *a1)
{
  id v2;

  v2 = sub_1D7ADE704(a1);

  return v2;
}

uint64_t sub_1D7ADDBE8(unint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  v7 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v3
                                                             + OBJC_IVAR___HKAudiogramAnnotationViewDataSource_applicationItems), sel_dateCache));
  sub_1D7B1AD68(a2, v7, 1);
  v9 = v8;

  v10 = *(void **)(v3 + OBJC_IVAR___HKAudiogramAnnotationViewDataSource_currentDateView);
  *(_QWORD *)(v3 + OBJC_IVAR___HKAudiogramAnnotationViewDataSource_currentDateView) = v9;

  sub_1D7ADE020(a1, a3);
  *(_QWORD *)(v3 + OBJC_IVAR___HKAudiogramAnnotationViewDataSource_keyValuePairs) = v11;
  return swift_bridgeObjectRelease();
}

void *sub_1D7ADDD70()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR___HKAudiogramAnnotationViewDataSource_currentDateView);
  v2 = v1;
  return v1;
}

uint64_t sub_1D7ADDDB4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___HKAudiogramAnnotationViewDataSource_keyValuePairs);
  if (!(v1 >> 62))
    return *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v3 = sub_1D7B4A8A8();
  swift_bridgeObjectRelease();
  return v3;
}

unint64_t sub_1D7ADDEA0(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;

  v4 = result;
  v5 = *(_QWORD *)(v2 + OBJC_IVAR___HKAudiogramAnnotationViewDataSource_keyValuePairs);
  if ((v5 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    v6 = (id)MEMORY[0x1D829E758](v4, v5);
    swift_bridgeObjectRelease();
    if (a2)
      goto LABEL_5;
    goto LABEL_7;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10) > result)
  {
    v6 = *(id *)(v5 + 8 * result + 32);
    if (a2)
    {
LABEL_5:
      v7 = 0;
LABEL_8:
      objc_msgSend(v6, sel_setOrientation_, v7);
      return (unint64_t)v6;
    }
LABEL_7:
    v7 = 1;
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

void sub_1D7ADE020(unint64_t a1, char a2)
{
  unint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  void *v8;
  id v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  char v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;

  LOBYTE(v3) = a2;
  v4 = a1;
  v41 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_35;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; v5 = sub_1D7B4A8A8())
  {
    v33 = v3;
    v6 = 0;
    v38 = v4;
    v39 = v4 & 0xC000000000000001;
    v36 = v4 & 0xFFFFFFFFFFFFFF8;
    v37 = v5;
    v34 = v2;
    v35 = v4 + 32;
    while (1)
    {
      if (v39)
      {
        v7 = (id)MEMORY[0x1D829E758](v6, v4);
      }
      else
      {
        if (v6 >= *(_QWORD *)(v36 + 16))
          goto LABEL_34;
        v7 = *(id *)(v35 + 8 * v6);
      }
      v8 = v7;
      if (__OFADD__(v6++, 1))
        break;
      v10 = objc_msgSend(v7, sel_userInfo);
      if (v10)
      {
        v11 = v10;
        sub_1D7ADE914(0, &qword_1F014E7C8);
        v12 = sub_1D7B4A4AC();

        v40 = MEMORY[0x1E0DEE9D8];
        if (v12 >> 62)
        {
          swift_bridgeObjectRetain();
          LOBYTE(v3) = sub_1D7B4A8A8();
          swift_bridgeObjectRelease();
          v2 = &v40;
          sub_1D7B4A848();
          swift_bridgeObjectRetain();
          v13 = sub_1D7B4A8A8();
          swift_bridgeObjectRelease();
          if (v13)
          {
LABEL_13:
            if ((v12 & 0xC000000000000001) != 0)
            {
              v3 = 0;
              while (1)
              {
                v14 = MEMORY[0x1D829E758](v3, v12);
                v4 = v3 + 1;
                if (__OFADD__(v3, 1))
                  break;
                v2 = (unint64_t *)v14;
                if (!swift_dynamicCastObjCProtocolConditional())
                {
                  swift_unknownObjectRelease();
                  goto LABEL_25;
                }
                sub_1D7B4A830();
                sub_1D7B4A854();
                sub_1D7B4A860();
                v2 = &v40;
                sub_1D7B4A83C();
                ++v3;
                if (v4 == v13)
                  goto LABEL_23;
              }
              __break(1u);
            }
            else
            {
              v15 = 0;
              while (1)
              {
                v4 = v15 + 1;
                if (__OFADD__(v15, 1))
                  break;
                v2 = *(unint64_t **)(v12 + 32 + 8 * v15);
                v16 = swift_dynamicCastObjCProtocolConditional();
                if (!v16)
                {
LABEL_25:

                  swift_bridgeObjectRelease();
                  swift_release();
                  goto LABEL_26;
                }
                LOBYTE(v3) = v16;
                swift_unknownObjectRetain();
                sub_1D7B4A830();
                sub_1D7B4A854();
                sub_1D7B4A860();
                v2 = &v40;
                sub_1D7B4A83C();
                ++v15;
                if (v4 == v13)
                  goto LABEL_23;
              }
            }
            __break(1u);
            break;
          }
        }
        else
        {
          v2 = &v40;
          sub_1D7B4A848();
          v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v13)
            goto LABEL_13;
        }
LABEL_23:
        v17 = v40;
        swift_bridgeObjectRelease();
        v2 = (unint64_t *)&v41;
        sub_1D7AE80E0(v17);

LABEL_26:
        v5 = v37;
        v4 = v38;
        if (v6 == v37)
        {
LABEL_30:
          swift_bridgeObjectRelease();
          v2 = v34;
          LOBYTE(v3) = v33;
          goto LABEL_37;
        }
      }
      else
      {

        if (v6 == v5)
          goto LABEL_30;
      }
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
LABEL_37:
  v18 = &OBJC_IVAR___HKAudiogramAnnotationViewDataSource_averageSensitivityFormatter;
  if ((v3 & 1) == 0)
    v18 = &OBJC_IVAR___HKAudiogramAnnotationViewDataSource_hearingSensitivityFormatter;
  v19 = *(void **)((char *)v2 + *v18);
  sub_1D7ADE914(0, (unint64_t *)&qword_1F014E870);
  v20 = v19;
  v21 = (void *)sub_1D7B4A4A0();
  swift_bridgeObjectRelease();
  v22 = objc_msgSend(v20, sel_formattedSelectedRangeLabelDataWithChartData_context_, v21, 0);

  sub_1D7AAF6EC(0, &qword_1F014E7C0);
  v23 = sub_1D7B4A4AC();

  v40 = MEMORY[0x1E0DEE9D8];
  if (!(v23 >> 62))
  {
    v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v24)
      goto LABEL_41;
LABEL_49:

    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v24 = sub_1D7B4A8A8();
  swift_bridgeObjectRelease();
  if (!v24)
    goto LABEL_49;
LABEL_41:
  if (v24 >= 1)
  {
    v25 = 0;
    do
    {
      if ((v23 & 0xC000000000000001) != 0)
        v26 = (id)MEMORY[0x1D829E758](v25, v23);
      else
        v26 = *(id *)(v23 + 8 * v25 + 32);
      v27 = v26;
      v28 = objc_msgSend(objc_allocWithZone((Class)HKInteractiveChartAnnotationViewKeyValueLabel), sel_init);
      v29 = objc_msgSend(v28, sel_keyLabel);
      objc_msgSend(v29, sel_setSelectedRangeData_, v27);

      v30 = objc_msgSend(v28, sel_valueLabel);
      v31 = objc_msgSend(v27, sel_attributedString);
      objc_msgSend(v30, sel_setAttributedText_, v31);

      v32 = v28;
      MEMORY[0x1D829E3EC]();
      if (*(_QWORD *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1D7B4A4C4();
      ++v25;
      sub_1D7B4A4DC();
      sub_1D7B4A4B8();

    }
    while (v24 != v25);
    goto LABEL_49;
  }
  __break(1u);
}

id AudiogramAnnotationViewDataSource.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void AudiogramAnnotationViewDataSource.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id AudiogramAnnotationViewDataSource.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AudiogramAnnotationViewDataSource();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_1D7ADE704(void *a1)
{
  char *v1;
  char *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  objc_super v10;

  *(_QWORD *)&v1[OBJC_IVAR___HKAudiogramAnnotationViewDataSource_currentDateView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___HKAudiogramAnnotationViewDataSource_applicationItems] = a1;
  v3 = v1;
  v4 = a1;
  v5 = objc_msgSend(v4, sel_unitController);
  v6 = objc_msgSend(objc_allocWithZone((Class)HKInteractiveChartHearingSensitivityFormatter), sel_initWithUnitController_, v5);

  *(_QWORD *)&v3[OBJC_IVAR___HKAudiogramAnnotationViewDataSource_hearingSensitivityFormatter] = v6;
  v7 = objc_msgSend(v4, sel_unitController);
  v8 = objc_allocWithZone((Class)type metadata accessor for AudiogramAverageSensitivityChartFormatter());
  *(_QWORD *)&v3[OBJC_IVAR___HKAudiogramAnnotationViewDataSource_averageSensitivityFormatter] = AudiogramChartDataFormatter.init(displayType:unitController:)(0, v7);
  *(_QWORD *)&v3[OBJC_IVAR___HKAudiogramAnnotationViewDataSource_keyValuePairs] = MEMORY[0x1E0DEE9D8];

  v10.receiver = v3;
  v10.super_class = (Class)type metadata accessor for AudiogramAnnotationViewDataSource();
  return objc_msgSendSuper2(&v10, sel_init);
}

uint64_t type metadata accessor for AudiogramAnnotationViewDataSource()
{
  return objc_opt_self();
}

uint64_t method lookup function for AudiogramAnnotationViewDataSource()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AudiogramAnnotationViewDataSource.__allocating_init(applicationItems:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of AudiogramAnnotationViewDataSource.update(pointSelectionContexts:date:isAverage:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of AudiogramAnnotationViewDataSource.dateView(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of AudiogramAnnotationViewDataSource.leftMarginView(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of AudiogramAnnotationViewDataSource.numberOfValues(forAnnotationView:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of AudiogramAnnotationViewDataSource.valueViewForColumn(at:orientation:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of AudiogramAnnotationViewDataSource.showSeparators()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of AudiogramAnnotationViewDataSource.reverseColumnsInRightToLeftLayoutDirection()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE0))();
}

uint64_t sub_1D7ADE914(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

id StateOfMindCoordinateInfo.__allocating_init(dateInterval:dailyReflectiveCount:dailyValenceRange:momentaryReflectiveCount:momentaryValenceRange:isSharingPreview:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  objc_class *v10;
  _BYTE *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  id v22;
  objc_super v27;

  v16 = objc_allocWithZone(v10);
  v17 = &v16[OBJC_IVAR____TtC8HealthUI25StateOfMindCoordinateInfo_dateInterval];
  v18 = sub_1D7B48D78();
  v19 = *(_QWORD *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v17, a1, v18);
  *(_QWORD *)&v16[OBJC_IVAR____TtC8HealthUI25StateOfMindCoordinateInfo_dailyReflectiveCount] = a2;
  v20 = &v16[OBJC_IVAR____TtC8HealthUI25StateOfMindCoordinateInfo_dailyValenceRange];
  *(_QWORD *)v20 = a3;
  *((_QWORD *)v20 + 1) = a4;
  v20[16] = a5 & 1;
  *(_QWORD *)&v16[OBJC_IVAR____TtC8HealthUI25StateOfMindCoordinateInfo_momentaryReflectiveCount] = a6;
  v21 = &v16[OBJC_IVAR____TtC8HealthUI25StateOfMindCoordinateInfo_momentaryValenceRange];
  *(_QWORD *)v21 = a7;
  *((_QWORD *)v21 + 1) = a8;
  v21[16] = a9 & 1;
  v16[OBJC_IVAR____TtC8HealthUI25StateOfMindCoordinateInfo_isSharingPreview] = a10;
  v27.receiver = v16;
  v27.super_class = v10;
  v22 = objc_msgSendSuper2(&v27, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a1, v18);
  return v22;
}

id StateOfMindCoordinateInfo.init(dateInterval:dailyReflectiveCount:dailyValenceRange:momentaryReflectiveCount:momentaryValenceRange:isSharingPreview:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  _BYTE *v10;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  id v21;
  objc_super v26;

  v16 = &v10[OBJC_IVAR____TtC8HealthUI25StateOfMindCoordinateInfo_dateInterval];
  v17 = sub_1D7B48D78();
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v16, a1, v17);
  *(_QWORD *)&v10[OBJC_IVAR____TtC8HealthUI25StateOfMindCoordinateInfo_dailyReflectiveCount] = a2;
  v19 = &v10[OBJC_IVAR____TtC8HealthUI25StateOfMindCoordinateInfo_dailyValenceRange];
  *(_QWORD *)v19 = a3;
  *((_QWORD *)v19 + 1) = a4;
  v19[16] = a5 & 1;
  *(_QWORD *)&v10[OBJC_IVAR____TtC8HealthUI25StateOfMindCoordinateInfo_momentaryReflectiveCount] = a6;
  v20 = &v10[OBJC_IVAR____TtC8HealthUI25StateOfMindCoordinateInfo_momentaryValenceRange];
  *(_QWORD *)v20 = a7;
  *((_QWORD *)v20 + 1) = a8;
  v20[16] = a9 & 1;
  v10[OBJC_IVAR____TtC8HealthUI25StateOfMindCoordinateInfo_isSharingPreview] = a10;
  v26.receiver = v10;
  v26.super_class = (Class)type metadata accessor for StateOfMindCoordinateInfo();
  v21 = objc_msgSendSuper2(&v26, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a1, v17);
  return v21;
}

uint64_t type metadata accessor for StateOfMindCoordinateInfo()
{
  uint64_t result;

  result = qword_1F014E7F8;
  if (!qword_1F014E7F8)
    return swift_getSingletonMetadata();
  return result;
}

id StateOfMindCoordinateInfo.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void StateOfMindCoordinateInfo.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id StateOfMindCoordinateInfo.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StateOfMindCoordinateInfo();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1D7ADECF4()
{
  return type metadata accessor for StateOfMindCoordinateInfo();
}

uint64_t sub_1D7ADECFC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1D7B48D78();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for StateOfMindCoordinateInfo()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of StateOfMindCoordinateInfo.__allocating_init(dateInterval:dailyReflectiveCount:dailyValenceRange:momentaryReflectiveCount:momentaryValenceRange:isSharingPreview:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v5 + 128))(a1, a2, a3, a4, a5 & 1);
}

uint64_t sub_1D7ADEDB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v7 = MEMORY[0x1E0DEE9D8];
    sub_1D7B4A848();
    v4 = *(_QWORD *)(sub_1D7B49504() - 8);
    v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      sub_1D7B494E0();
      sub_1D7B4A830();
      sub_1D7B4A854();
      sub_1D7B4A860();
      sub_1D7B4A83C();
      v5 += v6;
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

id sub_1D7ADEE84()
{
  uint64_t v0;
  void *v1;

  v0 = sub_1D7B494F8();
  sub_1D7ADEDB8(v0);
  swift_bridgeObjectRelease();
  sub_1D7ADEFE0();
  v1 = (void *)sub_1D7B4A4A0();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t static HKSampleType.associatedBalanceMetricsTypes.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = sub_1D7B494F8();
  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v7 = MEMORY[0x1E0DEE9D8];
    sub_1D7B4A848();
    v2 = *(_QWORD *)(sub_1D7B49504() - 8);
    v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v4 = *(_QWORD *)(v2 + 72);
    do
    {
      sub_1D7B494E0();
      sub_1D7B4A830();
      sub_1D7B4A854();
      sub_1D7B4A860();
      sub_1D7B4A83C();
      v3 += v4;
      --v1;
    }
    while (v1);
    v5 = v7;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  return v5;
}

unint64_t sub_1D7ADEFE0()
{
  unint64_t result;

  result = qword_1F014E810;
  if (!qword_1F014E810)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1F014E810);
  }
  return result;
}

uint64_t sub_1D7ADF01C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, unint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  void (*v23)(char *, uint64_t);
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  char *v32;
  int isUniquelyReferenced_nonNull_native;
  char v34;
  unint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  unsigned int v61;
  void (*v62)(char *, unint64_t, uint64_t);
  uint64_t v63;
  char *v64;

  v58 = a2;
  sub_1D7ADF4C8();
  MEMORY[0x1E0C80A78](v3);
  v57 = (unint64_t)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1D7B49588();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v54 - v11;
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v54 - v14;
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v54 - v16;
  v18 = (void (*)(char *, unint64_t, uint64_t))MEMORY[0x1E0DEE9D8];
  v64 = (char *)MEMORY[0x1E0DEE9D8];
  v19 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v63 = v6;
  if (v19)
  {
    v55 = v15;
    v56 = a1;
    v20 = *(_QWORD *)(v6 + 72);
    v59 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v21 = a1 + v59;
    v62 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    v61 = *MEMORY[0x1E0D29068];
    v60 = v9;
    v62(v17, a1 + v59, v5);
    while (1)
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v12, v61, v5);
      sub_1D7ADF584();
      v22 = sub_1D7B4A320();
      v23 = *(void (**)(char *, uint64_t))(v6 + 8);
      v23(v12, v5);
      if ((v22 & 1) != 0)
      {
        v23(v17, v5);
      }
      else
      {
        v24 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
        v24(v9, v17, v5);
        v25 = v64;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1D7AA5F38(0, *((_QWORD *)v25 + 2) + 1, 1);
          v25 = v64;
        }
        v27 = *((_QWORD *)v25 + 2);
        v26 = *((_QWORD *)v25 + 3);
        if (v27 >= v26 >> 1)
        {
          sub_1D7AA5F38(v26 > 1, v27 + 1, 1);
          v25 = v64;
        }
        *((_QWORD *)v25 + 2) = v27 + 1;
        v9 = v60;
        v24(&v25[v59 + v27 * v20], v60, v5);
        v64 = v25;
        v6 = v63;
      }
      v21 += v20;
      if (!--v19)
        break;
      v62(v17, v21, v5);
    }
    v18 = (void (*)(char *, unint64_t, uint64_t))v64;
    v15 = v55;
  }
  swift_bridgeObjectRelease();
  v28 = *((_QWORD *)v18 + 2);
  if (v28)
  {
    v29 = (uint64_t)v18 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v30 = *(_QWORD *)(v6 + 72);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v62 = v18;
    swift_retain();
    v32 = (char *)MEMORY[0x1E0DEE9E0];
    while (1)
    {
      v31(v15, v29, v5);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v64 = v32;
      v35 = sub_1D7AF463C((uint64_t)v15);
      v36 = *((_QWORD *)v32 + 2);
      v37 = (v34 & 1) == 0;
      v38 = v36 + v37;
      if (__OFADD__(v36, v37))
        break;
      v39 = v34;
      if (*((_QWORD *)v32 + 3) >= v38)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1D7AF6380();
          v32 = v64;
        }
      }
      else
      {
        sub_1D7AF5250(v38, isUniquelyReferenced_nonNull_native);
        v32 = v64;
        v40 = sub_1D7AF463C((uint64_t)v15);
        if ((v39 & 1) != (v41 & 1))
          goto LABEL_35;
        v35 = v40;
      }
      swift_bridgeObjectRelease();
      if ((v39 & 1) == 0)
      {
        *(_QWORD *)&v32[8 * (v35 >> 6) + 64] |= 1 << v35;
        v31((char *)(*((_QWORD *)v32 + 6) + v35 * v30), (uint64_t)v15, v5);
        *(_QWORD *)(*((_QWORD *)v32 + 7) + 8 * v35) = 0;
        v42 = *((_QWORD *)v32 + 2);
        v43 = __OFADD__(v42, 1);
        v44 = v42 + 1;
        if (v43)
          goto LABEL_34;
        *((_QWORD *)v32 + 2) = v44;
      }
      v45 = *((_QWORD *)v32 + 7);
      v46 = *(_QWORD *)(v45 + 8 * v35);
      v43 = __OFADD__(v46, 1);
      v47 = v46 + 1;
      if (v43)
        goto LABEL_33;
      *(_QWORD *)(v45 + 8 * v35) = v47;
      v6 = v63;
      (*(void (**)(char *, uint64_t))(v63 + 8))(v15, v5);
      v29 += v30;
      if (!--v28)
      {
        swift_release_n();
        goto LABEL_28;
      }
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    result = sub_1D7B4A974();
    __break(1u);
  }
  else
  {
    swift_release();
LABEL_28:
    v48 = swift_bridgeObjectRetain();
    v49 = v57;
    sub_1D7ADF5CC(v48, v57);
    swift_bridgeObjectRelease();
    sub_1D7ADF51C();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 48))(v49, 1, v50) == 1)
    {
      sub_1D7AAD1B0(v49, (uint64_t (*)(_QWORD))sub_1D7ADF4C8);
      v51 = 1;
      v52 = v58;
    }
    else
    {
      v52 = v58;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v58, v49, v5);
      v51 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v52, v51, 1, v5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1D7ADF4C8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014E818)
  {
    sub_1D7ADF51C();
    v0 = sub_1D7B4A6F8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014E818);
  }
}

void sub_1D7ADF51C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1F014E820)
  {
    sub_1D7B49588();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1F014E820);
  }
}

unint64_t sub_1D7ADF584()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F014EDD0;
  if (!qword_1F014EDD0)
  {
    v1 = sub_1D7B49588();
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0D290A8], v1);
    atomic_store(result, (unint64_t *)&qword_1F014EDD0);
  }
  return result;
}

uint64_t sub_1D7ADF5CC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, unint64_t, uint64_t);
  uint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t);
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;

  sub_1D7ADF51C();
  v6 = v5;
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v44 - v11;
  v13 = MEMORY[0x1E0C80A78](v10);
  v48 = (char *)&v44 - v14;
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v44 - v16;
  v18 = *(_QWORD *)(a1 + 64);
  v49 = a1 + 64;
  v19 = *(_BYTE *)(a1 + 32);
  v20 = 1 << v19;
  v21 = -1;
  if (1 << v19 < 64)
    v21 = ~(-1 << (1 << v19));
  v22 = v21 & v18;
  if (v22)
  {
    v44 = v15;
    v45 = a2;
    v46 = v2;
    v23 = 0;
    v24 = __clz(__rbit64(v22));
    a2 = (v22 - 1) & v22;
    v50 = (unint64_t)(v20 + 63) >> 6;
    while (1)
    {
      v25 = *(_QWORD *)(a1 + 48);
      v26 = sub_1D7B49588();
      v27 = *(_QWORD *)(v26 - 8);
      v52 = *(_QWORD *)(v27 + 72);
      v47 = v24;
      v28 = v25 + v52 * v24;
      v29 = *(void (**)(char *, unint64_t, uint64_t))(v27 + 16);
      v30 = (uint64_t)v48;
      v51 = v26;
      v31 = v29;
      ((void (*)(char *, uint64_t))v29)(v48, v28);
      *(_QWORD *)(v30 + *(int *)(v6 + 48)) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v47);
      sub_1D7ADFA0C(v30, (uint64_t)v17);
      swift_bridgeObjectRetain();
      while (a2)
      {
        while (1)
        {
          v33 = __clz(__rbit64(a2));
          a2 &= a2 - 1;
          v34 = v33 | (v23 << 6);
LABEL_25:
          v31(v9, *(_QWORD *)(a1 + 48) + v34 * v52, v51);
          *(_QWORD *)&v9[*(int *)(v6 + 48)] = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v34);
          sub_1D7ADFA0C((uint64_t)v9, (uint64_t)v12);
          if (*(_QWORD *)&v17[*(int *)(v6 + 48)] < *(_QWORD *)&v12[*(int *)(v6 + 48)])
            break;
          sub_1D7AAD1B0((uint64_t)v12, (uint64_t (*)(_QWORD))sub_1D7ADF51C);
          if (!a2)
            goto LABEL_9;
        }
        sub_1D7AAD1B0((uint64_t)v17, (uint64_t (*)(_QWORD))sub_1D7ADF51C);
        sub_1D7ADFA0C((uint64_t)v12, (uint64_t)v17);
      }
LABEL_9:
      v35 = v23 + 1;
      if (__OFADD__(v23, 1))
      {
        __break(1u);
LABEL_39:
        if (v32 < 9)
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(a2, 1, 1, v6);
        v40 = *(_QWORD *)(a1 + 96);
        if (v40)
        {
          v23 = 4;
          goto LABEL_32;
        }
        v40 = *(_QWORD *)(a1 + 104);
        if (v40)
        {
          v23 = 5;
          goto LABEL_32;
        }
      }
      else
      {
        if (v35 >= v50)
          goto LABEL_28;
        v36 = *(_QWORD *)(v49 + 8 * v35);
        ++v23;
        if (v36)
          goto LABEL_24;
        v23 = v35 + 1;
        if (v35 + 1 >= v50)
          goto LABEL_28;
        v36 = *(_QWORD *)(v49 + 8 * v23);
        if (v36)
          goto LABEL_24;
        v23 = v35 + 2;
        if (v35 + 2 >= v50)
          goto LABEL_28;
        v36 = *(_QWORD *)(v49 + 8 * v23);
        if (v36)
          goto LABEL_24;
        v23 = v35 + 3;
        if (v35 + 3 >= v50)
          goto LABEL_28;
        v36 = *(_QWORD *)(v49 + 8 * v23);
        if (v36)
          goto LABEL_24;
        v37 = v35 + 4;
        if (v37 >= v50)
        {
LABEL_28:
          swift_release();
          v38 = v45;
          sub_1D7ADFA0C((uint64_t)v17, v45);
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v44 + 56))(v38, 0, 1, v6);
        }
        v36 = *(_QWORD *)(v49 + 8 * v37);
        if (v36)
        {
          v23 = v37;
LABEL_24:
          a2 = (v36 - 1) & v36;
          v34 = __clz(__rbit64(v36)) + (v23 << 6);
          goto LABEL_25;
        }
        while (1)
        {
          v23 = v37 + 1;
          if (__OFADD__(v37, 1))
            break;
          if (v23 >= v50)
            goto LABEL_28;
          v36 = *(_QWORD *)(v49 + 8 * v23);
          ++v37;
          if (v36)
            goto LABEL_24;
        }
        __break(1u);
      }
      v41 = 0;
      v42 = 6;
      if (v50 > 6)
        v42 = v50;
      v43 = v42 - 6;
      do
      {
        if (v43 == v41)
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(a2, 1, 1, v6);
        v40 = *(_QWORD *)(a1 + 112 + 8 * v41++);
      }
      while (!v40);
      v23 = v41 + 5;
LABEL_32:
      a2 = (v40 - 1) & v40;
      v24 = __clz(__rbit64(v40)) + (v23 << 6);
    }
  }
  v32 = v19 & 0x3F;
  if (v32 > 6)
  {
    v50 = (unint64_t)(v20 + 63) >> 6;
    v40 = *(_QWORD *)(a1 + 72);
    if (v40)
    {
      v44 = v15;
      v45 = a2;
      v46 = v2;
      v23 = 1;
      goto LABEL_32;
    }
    if (v32 >= 8)
    {
      v40 = *(_QWORD *)(a1 + 80);
      v45 = a2;
      v46 = v2;
      v44 = v15;
      if (v40)
      {
        v23 = 2;
      }
      else
      {
        v40 = *(_QWORD *)(a1 + 88);
        if (!v40)
          goto LABEL_39;
        v23 = 3;
      }
      goto LABEL_32;
    }
  }
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(a2, 1, 1, v6);
}

uint64_t sub_1D7ADFA0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1D7ADF51C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

Swift::Bool __swiftcall UITraitEnvironment.contentSizeCategoryIsEqual(to:)(UITraitCollection_optional to)
{
  void *v1;
  objc_class *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  if (!to.value.super.isa)
    return 0;
  v2 = to.value.super.isa;
  v3 = objc_msgSend(v1, sel_traitCollection);
  v4 = objc_msgSend(v3, sel_preferredContentSizeCategory);

  v5 = -[objc_class preferredContentSizeCategory](v2, sel_preferredContentSizeCategory);
  v6 = sub_1D7B4A3BC();
  v8 = v7;
  if (v6 == sub_1D7B4A3BC() && v8 == v9)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    v11 = sub_1D7B4A938();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
      return 0;
  }
  return 1;
}

unint64_t sub_1D7ADFB5C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  void *v5;
  id v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1D7AE20FC();
  v2 = (_QWORD *)sub_1D7B4A8CC();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = *(v4 - 1);
    v7 = v5;
    result = sub_1D7AF44F4((uint64_t)v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v2[6] + v10) = v6;
    *(_QWORD *)(v2[7] + v10) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D7ADFC60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[2];

  sub_1D7AE2348(0, &qword_1F014E850, (void (*)(uint64_t))sub_1D7AE23B8);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)v23 - v5;
  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1D7AE2264(0, (unint64_t *)&unk_1F014EE20, (void (*)(uint64_t))sub_1D7AE23B8);
  v7 = sub_1D7B4A8CC();
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = *(int *)(v3 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v23[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v4 + 72);
  swift_retain();
  while (1)
  {
    sub_1D7AE22FC(v13, (uint64_t)v6, &qword_1F014E850, (void (*)(uint64_t))sub_1D7AE23B8);
    result = sub_1D7AF4524((uint64_t)v6);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = sub_1D7B49504();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v6, v19);
    *(_QWORD *)(v8[7] + 8 * v17) = *(_QWORD *)&v6[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_11;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D7ADFE14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[2];

  sub_1D7AE2348(0, &qword_1F014E840, (void (*)(uint64_t))sub_1D7AA78D4);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)v23 - v5;
  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1D7AE2264(0, (unint64_t *)&qword_1F014E848, (void (*)(uint64_t))sub_1D7AA78D4);
  v7 = sub_1D7B4A8CC();
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = *(int *)(v3 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v23[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v4 + 72);
  swift_retain();
  while (1)
  {
    sub_1D7AE22FC(v13, (uint64_t)v6, &qword_1F014E840, (void (*)(uint64_t))sub_1D7AA78D4);
    result = sub_1D7AF4524((uint64_t)v6);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = sub_1D7B49504();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v6, v19);
    *(_OWORD *)(v8[7] + 16 * v17) = *(_OWORD *)&v6[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_11;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D7ADFFC8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1D7AE240C();
  v2 = sub_1D7B4A8CC();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1D7AAD16C(v6, (uint64_t)&v13, (uint64_t (*)(_QWORD))sub_1D7AC5B04);
    v7 = v13;
    result = sub_1D7AF45BC(v13);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    result = (unint64_t)sub_1D7AA552C(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D7AE00F0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1D7AE2194();
  v2 = sub_1D7B4A8CC();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1D7AAD16C(v6, (uint64_t)&v15, (uint64_t (*)(_QWORD))sub_1D7AE21FC);
    v7 = v15;
    v8 = v16;
    result = sub_1D7AF46D4(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_1D7AA552C(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1D7AE0220(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1D7AE2088();
  v2 = (_QWORD *)sub_1D7B4A8CC();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 48);
  while (1)
  {
    v5 = (uint64_t)*(v4 - 2);
    v6 = (uint64_t)*(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    v8 = v7;
    result = sub_1D7AF46D4(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void static NSAttributedString.AccessoryImageAlignment.baseline.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void static NSAttributedString.AccessoryImageAlignment.center.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

void static NSAttributedString.AccessoryImageAlignment.descender.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 2;
}

id NSAttributedString.init(leadingSymbolName:leadingImage:symbolColor:symbolScale:symbolContentSizeCategory:symbolAlignment:text:spacer:textColor:font:numericFont:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5, void *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  char v18;
  uint64_t v19;
  id v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t inited;
  void *v33;
  void *v34;
  uint64_t v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  id v40;
  uint64_t v41;
  id v42;
  id v43;
  id v44;
  void *v45;
  id v46;
  id v47;
  void *v48;
  id v49;
  uint64_t v50;
  void *v51;
  id v52;
  id v53;
  void **v54;
  uint64_t v55;
  void *v56;
  id v57;
  id v58;
  void *v59;
  void *v60;
  id v61;
  uint64_t v62;
  void *v63;
  id v64;
  id v65;
  void *v66;
  id v67;
  id v68;
  id v69;
  uint64_t v73;
  uint64_t v76;
  unint64_t v77;

  v14 = a4;
  v15 = a14;
  if (a2 | a3)
  {
    v18 = *((_BYTE *)a7 + 8);
    v19 = *a7;
    sub_1D7AAF6EC(0, (unint64_t *)&qword_1F014DC50);
    v76 = v19;
    v15 = a14;
    LOBYTE(v77) = v18;
    v23 = a6;
    v24 = a13;
    v25 = (id)a3;
    v26 = a4;
    v27 = (void *)a3;
    v14 = a4;
    NSAttributedString.init(symbolName:image:symbolColor:symbolContentSizeCategory:symbolAlignment:font:scale:)(a1, a2, v27, a4, a6, (uint64_t)&v76, v24, a5);
    v16 = v28;
  }
  else
  {
    v16 = 0;
  }
  v29 = a12;
  v76 = a10;
  v77 = a11;
  sub_1D7B4A41C();
  swift_bridgeObjectRelease();
  v31 = v76;
  v30 = v77;
  if (v15)
  {
    sub_1D7AE0958();
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D7B84630;
    v33 = (void *)*MEMORY[0x1E0DC1138];
    *(_QWORD *)(inited + 32) = *MEMORY[0x1E0DC1138];
    v34 = v16;
    v35 = sub_1D7AAF6EC(0, (unint64_t *)&qword_1F014DC30);
    *(_QWORD *)(inited + 64) = v35;
    *(_QWORD *)(inited + 40) = a13;
    v36 = a13;
    v37 = v15;
    v38 = v14;
    v39 = v37;
    v73 = v31;
    v40 = v33;
    sub_1D7ADFFC8(inited);
    v41 = swift_initStackObject();
    *(_OWORD *)(v41 + 16) = xmmword_1D7B84630;
    *(_QWORD *)(v41 + 64) = v35;
    v16 = v34;
    v29 = a12;
    *(_QWORD *)(v41 + 32) = v40;
    *(_QWORD *)(v41 + 40) = v39;
    v42 = v39;
    v14 = v38;
    v43 = v42;
    v44 = v40;
    sub_1D7ADFFC8(v41);
    v45 = _sSo18NSAttributedStringC8HealthUIE16numericFormatted6string0E10Attributes05otherH0ABSS_SDySo0aB3KeyaypGAJtFZ_0(v73, v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v46 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3778]), sel_initWithAttributedString_, v45);
  }
  else
  {
    v47 = objc_allocWithZone(MEMORY[0x1E0CB3778]);
    v48 = (void *)sub_1D7B4A38C();
    swift_bridgeObjectRelease();
    v49 = objc_msgSend(v47, sel_initWithString_, v48);

    sub_1D7AE0958();
    v50 = swift_initStackObject();
    *(_OWORD *)(v50 + 16) = xmmword_1D7B84630;
    v51 = (void *)*MEMORY[0x1E0DC1138];
    *(_QWORD *)(v50 + 32) = *MEMORY[0x1E0DC1138];
    *(_QWORD *)(v50 + 64) = sub_1D7AAF6EC(0, (unint64_t *)&qword_1F014DC30);
    *(_QWORD *)(v50 + 40) = a13;
    v52 = a13;
    v43 = v49;
    v53 = v51;
    sub_1D7ADFFC8(v50);
    type metadata accessor for Key(0);
    sub_1D7AA76D4((unint64_t *)&qword_1F014DC40, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1D7B833E4);
    v45 = (void *)sub_1D7B4A230();
    swift_bridgeObjectRelease();
    objc_msgSend(v43, sel_addAttributes_range_, v45, 0, objc_msgSend(v43, sel_length));
    v46 = v43;
  }

  v54 = (void **)MEMORY[0x1E0DC1140];
  if (v29)
  {
    sub_1D7AE0958();
    v55 = swift_initStackObject();
    *(_OWORD *)(v55 + 16) = xmmword_1D7B84630;
    v56 = *v54;
    *(_QWORD *)(v55 + 32) = *v54;
    *(_QWORD *)(v55 + 64) = sub_1D7AAF6EC(0, &qword_1F014E8C0);
    *(_QWORD *)(v55 + 40) = v29;
    v57 = v29;
    v58 = v56;
    sub_1D7ADFFC8(v55);
    type metadata accessor for Key(0);
    sub_1D7AA76D4((unint64_t *)&qword_1F014DC40, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1D7B833E4);
    v59 = (void *)sub_1D7B4A230();
    swift_bridgeObjectRelease();
    objc_msgSend(v46, sel_addAttributes_range_, v59, 0, objc_msgSend(v46, sel_length));

  }
  v60 = a14;
  if (v16)
  {
    v61 = v16;
    objc_msgSend(v46, sel_insertAttributedString_atIndex_, v61, 0);
    if (v14)
    {
      sub_1D7AE0958();
      v62 = swift_initStackObject();
      *(_OWORD *)(v62 + 16) = xmmword_1D7B84630;
      v63 = *v54;
      *(_QWORD *)(v62 + 32) = *v54;
      *(_QWORD *)(v62 + 64) = sub_1D7AAF6EC(0, &qword_1F014E8C0);
      *(_QWORD *)(v62 + 40) = v14;
      v64 = v14;
      v65 = v63;
      v60 = a14;
      sub_1D7ADFFC8(v62);
      type metadata accessor for Key(0);
      sub_1D7AA76D4((unint64_t *)&qword_1F014DC40, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1D7B833E4);
      v66 = (void *)sub_1D7B4A230();
      swift_bridgeObjectRelease();
      objc_msgSend(v46, sel_addAttributes_range_, v66, 0, objc_msgSend(v61, (SEL)&selRef_isLikePhoneNumber_));

    }
  }
  v67 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v68 = v46;
  v69 = objc_msgSend(v67, sel_initWithAttributedString_, v68);

  return v69;
}

void sub_1D7AE0958()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014DC20)
  {
    sub_1D7AC5B04();
    v0 = sub_1D7B4A920();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014DC20);
  }
}

void NSAttributedString.init(symbolName:image:symbolColor:symbolContentSizeCategory:symbolAlignment:font:scale:)(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7, uint64_t a8)
{
  void *v10;
  int v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  uint64_t inited;
  void *v33;
  id v34;
  id v35;
  void *v36;
  int v37;

  v10 = a4;
  v11 = *(unsigned __int8 *)(a6 + 8);
  if (!a2)
  {
    if (a3)
      v19 = a3;
    else
      v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3870]), sel_init);
    v23 = v19;
    if (!v10)
      goto LABEL_10;
    goto LABEL_9;
  }
  v37 = *(unsigned __int8 *)(a6 + 8);
  v12 = objc_msgSend((id)objc_opt_self(), sel_configurationWithFont_scale_, a7, a8);
  v13 = a5;
  if (a5)
  {
    v14 = (void *)objc_opt_self();
    v15 = v12;
    v16 = v13;
    v17 = v13;
    v18 = objc_msgSend(v14, sel_traitCollectionWithPreferredContentSizeCategory_, v17);
    v12 = objc_msgSend(v15, sel_configurationWithTraitCollection_, v18);

  }
  else
  {
    v16 = 0;
  }
  v20 = v12;
  v21 = (void *)sub_1D7B4A38C();
  swift_bridgeObjectRelease();
  v22 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_withConfiguration_, v21, v20);

  if (!v22)
  {
    __break(1u);
    return;
  }
  v23 = objc_msgSend(v22, sel_imageWithRenderingMode_, 2);

  a5 = v16;
  v10 = a4;
  v11 = v37;
  if (a4)
  {
LABEL_9:
    v24 = v10;
    v25 = objc_msgSend(v23, sel_imageWithTintColor_, v24);

    v23 = v25;
  }
LABEL_10:
  v26 = objc_msgSend((id)objc_opt_self(), sel_textAttachmentWithImage_, v23);
  v27 = v26;
  if (v11 != 255)
  {
    v28 = objc_msgSend(v26, sel_image);
    if (v28)
    {
      v29 = v28;
      if (v11)
      {
        if (v11 == 1)
        {
          objc_msgSend(a7, sel_capHeight);
          objc_msgSend(v29, sel_size);
        }
        else
        {
          objc_msgSend(a7, sel_descender);
        }
      }
      objc_msgSend(v29, sel_size);
      objc_msgSend(v29, sel_size);
      objc_msgSend(v27, sel_setBounds_, CGRectMake());

    }
  }
  v30 = objc_msgSend((id)objc_opt_self(), sel_attributedStringWithAttachment_, v27);
  v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3778]), sel_initWithAttributedString_, v30);

  if (!a5)
  {
    sub_1D7AE0958();
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D7B84630;
    v33 = (void *)*MEMORY[0x1E0DC1138];
    *(_QWORD *)(inited + 32) = *MEMORY[0x1E0DC1138];
    *(_QWORD *)(inited + 64) = sub_1D7AAF6EC(0, (unint64_t *)&qword_1F014DC30);
    *(_QWORD *)(inited + 40) = a7;
    v34 = v33;
    v35 = a7;
    sub_1D7ADFFC8(inited);
    type metadata accessor for Key(0);
    sub_1D7AA76D4((unint64_t *)&qword_1F014DC40, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1D7B833E4);
    v36 = (void *)sub_1D7B4A230();
    swift_bridgeObjectRelease();
    objc_msgSend(v31, sel_addAttributes_range_, v36, 0, objc_msgSend(v31, sel_length));

    a5 = 0;
  }
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithAttributedString_, v31);

}

id NSAttributedString.init(leadingSymbolName:leadingImage:paletteColors:symbolScale:symbolContentSizeCategory:symbolAlignment:text:spacer:textColor:font:numericFont:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, void *a12, void *a13, void *a14)
{
  void *v15;
  char v17;
  uint64_t v19;
  id v21;
  id v22;
  id v23;
  void *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t inited;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  uint64_t v35;
  id v36;
  id v37;
  void *v38;
  char **v39;
  id v40;
  char **v41;
  char **v42;
  id v43;
  void *v44;
  id v45;
  uint64_t v46;
  void *v47;
  id v48;
  id v49;
  uint64_t v50;
  char **v51;
  void *v52;
  id v53;
  id v54;
  void *v55;
  id v56;
  id v57;
  id v58;
  void *v62;
  uint64_t v64;
  unint64_t v65;

  v15 = (void *)a3;
  if (a2 | a3)
  {
    v17 = *(_BYTE *)(a7 + 8);
    v19 = *(_QWORD *)a7;
    sub_1D7AAF6EC(0, (unint64_t *)&qword_1F014DC50);
    v64 = v19;
    v15 = (void *)a3;
    LOBYTE(v65) = v17;
    v21 = a6;
    v22 = a13;
    v23 = (id)a3;
    NSAttributedString.init(symbolName:image:paletteColors:symbolContentSizeCategory:symbolAlignment:font:scale:)(a1, a2, (void *)a3, a4, a6, (uint64_t)&v64, v22, a5);
    v62 = v24;
  }
  else
  {
    swift_bridgeObjectRelease();
    v62 = 0;
  }
  v64 = a10;
  v65 = a11;
  sub_1D7B4A41C();
  swift_bridgeObjectRelease();
  v26 = v64;
  v25 = v65;
  if (a14)
  {
    sub_1D7AE0958();
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D7B84630;
    v28 = (void *)*MEMORY[0x1E0DC1138];
    *(_QWORD *)(inited + 32) = *MEMORY[0x1E0DC1138];
    v29 = sub_1D7AAF6EC(0, (unint64_t *)&qword_1F014DC30);
    *(_QWORD *)(inited + 64) = v29;
    *(_QWORD *)(inited + 40) = a13;
    v30 = a13;
    v31 = a14;
    v32 = v28;
    v33 = v15;
    v34 = v32;
    sub_1D7ADFFC8(inited);
    v35 = swift_initStackObject();
    *(_OWORD *)(v35 + 16) = xmmword_1D7B84630;
    *(_QWORD *)(v35 + 64) = v29;
    *(_QWORD *)(v35 + 32) = v34;
    *(_QWORD *)(v35 + 40) = v31;
    v36 = v31;
    v37 = v34;
    v15 = v33;
    sub_1D7ADFFC8(v35);
    v38 = _sSo18NSAttributedStringC8HealthUIE16numericFormatted6string0E10Attributes05otherH0ABSS_SDySo0aB3KeyaypGAJtFZ_0(v26, v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v39 = &selRef_hk_populationChartLevelBackgroundColor;
    v40 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3778]), sel_initWithAttributedString_, v38);
    v41 = (char **)0x1F259C000;
    v42 = &selRef_initWithQueryAlignment_fromEndDate_;
  }
  else
  {
    v43 = objc_allocWithZone(MEMORY[0x1E0CB3778]);
    v44 = (void *)sub_1D7B4A38C();
    swift_bridgeObjectRelease();
    v45 = objc_msgSend(v43, sel_initWithString_, v44);

    sub_1D7AE0958();
    v46 = swift_initStackObject();
    *(_OWORD *)(v46 + 16) = xmmword_1D7B84630;
    v47 = (void *)*MEMORY[0x1E0DC1138];
    *(_QWORD *)(v46 + 32) = *MEMORY[0x1E0DC1138];
    *(_QWORD *)(v46 + 64) = sub_1D7AAF6EC(0, (unint64_t *)&qword_1F014DC30);
    *(_QWORD *)(v46 + 40) = a13;
    v48 = a13;
    v36 = v45;
    v49 = v47;
    sub_1D7ADFFC8(v46);
    type metadata accessor for Key(0);
    sub_1D7AA76D4((unint64_t *)&qword_1F014DC40, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1D7B833E4);
    v38 = (void *)sub_1D7B4A230();
    swift_bridgeObjectRelease();
    v41 = &selRef__timeZone;
    objc_msgSend(v36, sel_addAttributes_range_, v38, 0, objc_msgSend(v36, sel_length));
    v40 = v36;
    v39 = (char **)0x1F25E8000;
    v42 = &selRef_initWithQueryAlignment_fromEndDate_;
  }

  if (a12)
  {
    sub_1D7AE0958();
    v50 = swift_initStackObject();
    *(_OWORD *)(v50 + 16) = xmmword_1D7B84630;
    v51 = v41;
    v52 = (void *)*MEMORY[0x1E0DC1140];
    *(_QWORD *)(v50 + 32) = *MEMORY[0x1E0DC1140];
    *(_QWORD *)(v50 + 64) = sub_1D7AAF6EC(0, &qword_1F014E8C0);
    *(_QWORD *)(v50 + 40) = a12;
    v53 = a12;
    v54 = v52;
    sub_1D7ADFFC8(v50);
    type metadata accessor for Key(0);
    sub_1D7AA76D4((unint64_t *)&qword_1F014DC40, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1D7B833E4);
    v55 = (void *)sub_1D7B4A230();
    swift_bridgeObjectRelease();
    objc_msgSend(v40, (SEL)v51 + 2325, v55, 0, objc_msgSend(v40, v42[455]));

  }
  if (v62)
    objc_msgSend(v40, sel_insertAttributedString_atIndex_, v62, 0);
  v56 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v57 = v40;
  v58 = objc_msgSend(v56, v39[236], v57);

  return v58;
}

void NSAttributedString.init(symbolName:image:paletteColors:symbolContentSizeCategory:symbolAlignment:font:scale:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, void *a7, uint64_t a8)
{
  int v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  uint64_t inited;
  void *v35;
  id v36;
  id v37;
  void *v38;

  v11 = *(unsigned __int8 *)(a6 + 8);
  if (!a2)
  {
    if (a3)
      v19 = a3;
    else
      v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3870]), sel_init);
    v23 = v19;
    if (!a4)
      goto LABEL_14;
    goto LABEL_12;
  }
  v12 = objc_msgSend((id)objc_opt_self(), sel_configurationWithFont_scale_, a7, a8);
  v13 = a5;
  if (a5)
  {
    v14 = (void *)objc_opt_self();
    v15 = v12;
    v16 = v13;
    v17 = v13;
    v18 = objc_msgSend(v14, sel_traitCollectionWithPreferredContentSizeCategory_, v17);
    v12 = objc_msgSend(v15, sel_configurationWithTraitCollection_, v18);

  }
  else
  {
    v16 = 0;
  }
  v20 = v12;
  v21 = (void *)sub_1D7B4A38C();
  swift_bridgeObjectRelease();
  v22 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_withConfiguration_, v21, v20);

  if (!v22)
  {
    __break(1u);
    goto LABEL_26;
  }
  v23 = objc_msgSend(v22, sel_imageWithRenderingMode_, 2);

  a5 = v16;
  if (a4)
  {
LABEL_12:
    sub_1D7AAF6EC(0, &qword_1F014E8C0);
    v24 = (void *)sub_1D7B4A4A0();
    swift_bridgeObjectRelease();
    v25 = objc_msgSend((id)objc_opt_self(), sel_configurationWithPaletteColors_, v24);

    v26 = objc_msgSend(v23, sel_imageByApplyingSymbolConfiguration_, v25);
    if (v26)
    {
      v27 = v26;

      v23 = v27;
      goto LABEL_14;
    }
LABEL_26:
    __break(1u);
    return;
  }
LABEL_14:
  v28 = objc_msgSend((id)objc_opt_self(), sel_textAttachmentWithImage_, v23);
  v29 = v28;
  if (v11 != 255)
  {
    v30 = objc_msgSend(v28, sel_image);
    if (v30)
    {
      v31 = v30;
      if (v11)
      {
        if (v11 == 1)
        {
          objc_msgSend(a7, sel_capHeight);
          objc_msgSend(v31, sel_size);
        }
        else
        {
          objc_msgSend(a7, sel_descender);
        }
      }
      objc_msgSend(v31, sel_size);
      objc_msgSend(v31, sel_size);
      objc_msgSend(v29, sel_setBounds_, CGRectMake());

    }
  }
  v32 = objc_msgSend((id)objc_opt_self(), sel_attributedStringWithAttachment_, v29);
  v33 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3778]), sel_initWithAttributedString_, v32);

  if (!a5)
  {
    sub_1D7AE0958();
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D7B84630;
    v35 = (void *)*MEMORY[0x1E0DC1138];
    *(_QWORD *)(inited + 32) = *MEMORY[0x1E0DC1138];
    *(_QWORD *)(inited + 64) = sub_1D7AAF6EC(0, (unint64_t *)&qword_1F014DC30);
    *(_QWORD *)(inited + 40) = a7;
    v36 = v35;
    v37 = a7;
    sub_1D7ADFFC8(inited);
    type metadata accessor for Key(0);
    sub_1D7AA76D4((unint64_t *)&qword_1F014DC40, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1D7B833E4);
    v38 = (void *)sub_1D7B4A230();
    swift_bridgeObjectRelease();
    objc_msgSend(v33, sel_addAttributes_range_, v38, 0, objc_msgSend(v33, sel_length));

  }
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithAttributedString_, v33);

}

double NSAttributedString.expectedSize(forWidth:)(double a1)
{
  void *v1;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v6;
  CGRect v8;
  CGRect v9;

  objc_msgSend(v1, sel_boundingRectWithSize_options_context_, 3, 0, a1, 1.79769313e308);
  x = v8.origin.x;
  y = v8.origin.y;
  width = v8.size.width;
  height = v8.size.height;
  v6 = CGRectGetWidth(v8);
  v9.origin.x = x;
  v9.origin.y = y;
  v9.size.width = width;
  v9.size.height = height;
  CGRectGetHeight(v9);
  return v6;
}

double NSAttributedString.expectedSize(forHeight:)(double a1)
{
  void *v1;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v6;
  CGRect v8;
  CGRect v9;

  objc_msgSend(v1, sel_boundingRectWithSize_options_context_, 3, 0, 1.79769313e308, a1);
  x = v8.origin.x;
  y = v8.origin.y;
  width = v8.size.width;
  height = v8.size.height;
  v6 = CGRectGetWidth(v8);
  v9.origin.x = x;
  v9.origin.y = y;
  v9.size.width = width;
  v9.size.height = height;
  CGRectGetHeight(v9);
  return v6;
}

double NSAttributedString.expectedWidth(forHeight:)(double a1)
{
  void *v1;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v6;
  CGRect v8;
  CGRect v9;

  objc_msgSend(v1, sel_boundingRectWithSize_options_context_, 3, 0, 1.79769313e308, a1);
  x = v8.origin.x;
  y = v8.origin.y;
  width = v8.size.width;
  height = v8.size.height;
  v6 = CGRectGetWidth(v8);
  v9.origin.x = x;
  v9.origin.y = y;
  v9.size.width = width;
  v9.size.height = height;
  CGRectGetHeight(v9);
  return v6;
}

double NSAttributedString.expectedHeight(forWidth:)(double a1)
{
  void *v1;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGRect v7;
  CGRect v8;

  objc_msgSend(v1, sel_boundingRectWithSize_options_context_, 3, 0, a1, 1.79769313e308);
  x = v7.origin.x;
  y = v7.origin.y;
  width = v7.size.width;
  height = v7.size.height;
  CGRectGetWidth(v7);
  v8.origin.x = x;
  v8.origin.y = y;
  v8.size.width = width;
  v8.size.height = height;
  return CGRectGetHeight(v8);
}

id NSAttributedString.expectedNumberOfLines(forWidth:font:)(void *a1, double a2)
{
  void *v2;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v8;
  id result;
  double v10;
  double v11;
  CGRect v12;
  CGRect v13;

  objc_msgSend(v2, sel_boundingRectWithSize_options_context_, 3, 0, a2, 1.79769313e308);
  x = v12.origin.x;
  y = v12.origin.y;
  width = v12.size.width;
  height = v12.size.height;
  CGRectGetWidth(v12);
  v13.origin.x = x;
  v13.origin.y = y;
  v13.size.width = width;
  v13.size.height = height;
  v8 = CGRectGetHeight(v13);
  result = objc_msgSend(a1, sel_lineHeight);
  v11 = round(v8 / v10);
  if ((~*(_QWORD *)&v11 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v11 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v11 < 9.22337204e18)
    return (id)(uint64_t)v11;
LABEL_7:
  __break(1u);
  return result;
}

BOOL NSAttributedString.isTaller(than:forWidth:returnLongerIfTied:)(void *a1, char a2, double a3)
{
  void *v3;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  double v16;
  _BOOL8 result;
  id v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;

  objc_msgSend(v3, sel_boundingRectWithSize_options_context_, 3, 0, a3, 1.79769313e308);
  x = v19.origin.x;
  y = v19.origin.y;
  width = v19.size.width;
  height = v19.size.height;
  CGRectGetWidth(v19);
  v20.origin.x = x;
  v20.origin.y = y;
  v20.size.width = width;
  v20.size.height = height;
  v11 = CGRectGetHeight(v20);
  objc_msgSend(a1, sel_boundingRectWithSize_options_context_, 3, 0, a3, 1.79769313e308);
  v12 = v21.origin.x;
  v13 = v21.origin.y;
  v14 = v21.size.width;
  v15 = v21.size.height;
  CGRectGetWidth(v21);
  v22.origin.x = v12;
  v22.origin.y = v13;
  v22.size.width = v14;
  v22.size.height = v15;
  v16 = CGRectGetHeight(v22);
  if (v16 < v11)
    return 1;
  result = 0;
  if (v11 == v16 && (a2 & 1) != 0)
  {
    v18 = objc_msgSend(v3, sel_length);
    return (uint64_t)objc_msgSend(a1, sel_length) < (uint64_t)v18;
  }
  return result;
}

NSAttributedString __swiftcall NSAttributedString.withContentSizeCategory(_:)(__C::UIContentSizeCategory a1)
{
  uint64_t v1;
  id v3;
  uint64_t v4;
  id v5;
  __C::UIContentSizeCategory *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  NSAttributedString result;
  _QWORD v12[6];

  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3778]), sel_initWithAttributedString_, v1);
  v4 = *MEMORY[0x1E0DC1138];
  v5 = objc_msgSend(v3, sel_length);
  v6 = (__C::UIContentSizeCategory *)swift_allocObject();
  v6[2]._rawValue = a1._rawValue;
  v6[3]._rawValue = v3;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = sub_1D7ADDA98;
  *(_QWORD *)(v7 + 24) = v6;
  v12[4] = sub_1D7AE1FA8;
  v12[5] = v7;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 1107296256;
  v12[2] = sub_1D7ADD9E4;
  v12[3] = &block_descriptor_4;
  v8 = _Block_copy(v12);
  v9 = a1._rawValue;
  v10 = v3;
  swift_retain();
  swift_release();
  objc_msgSend(v10, sel_enumerateAttribute_inRange_options_usingBlock_, v4, 0, v5, 0, v8);
  _Block_release(v8);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result.super.isa = (Class)swift_release();
  if ((v4 & 1) == 0)
    return (NSAttributedString)v10;
  __break(1u);
  return result;
}

id _sSo18NSAttributedStringC8HealthUIE16numericFormatted6string0E10Attributes05otherH0ABSS_SDySo0aB3KeyaypGAJtFZ_0(uint64_t a1, unint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3778]), sel_init);
  v5 = HIBYTE(a2) & 0xF;
  v14 = a1;
  v15 = a2;
  if ((a2 & 0x2000000000000000) == 0)
    v5 = a1 & 0xFFFFFFFFFFFFLL;
  v16 = 0;
  v17 = v5;
  swift_bridgeObjectRetain();
  sub_1D7B4A428();
  if (v6)
  {
    do
    {
      sub_1D7B4A2C0();
      swift_bridgeObjectRetain();
      v7 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
      v8 = (void *)sub_1D7B4A38C();
      swift_bridgeObjectRelease();
      type metadata accessor for Key(0);
      sub_1D7AA76D4((unint64_t *)&qword_1F014DC40, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1D7B833E4);
      v9 = (void *)sub_1D7B4A230();
      swift_bridgeObjectRelease();
      v10 = objc_msgSend(v7, sel_initWithString_attributes_, v8, v9, v14, v15, v16, v17);

      objc_msgSend(v4, sel_appendAttributedString_, v10);
      sub_1D7B4A428();
    }
    while (v11);
  }
  swift_bridgeObjectRelease();
  v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3498]), sel_initWithAttributedString_, v4);

  return v12;
}

double CGRectMake()
{
  return 0.0;
}

uint64_t sub_1D7AE1F6C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1D7AE1F98()
{
  return swift_deallocObject();
}

uint64_t sub_1D7AE1FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1D7ADD9C4(a1, a2, a3, a4, *(uint64_t (**)(void))(v4 + 16));
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t _s23AccessoryImageAlignmentOwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s23AccessoryImageAlignmentOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_1D7AE2068(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1D7AE2070(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for NSAttributedString.AccessoryImageAlignment()
{
  return &type metadata for NSAttributedString.AccessoryImageAlignment;
}

void sub_1D7AE2088()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014E828)
  {
    sub_1D7AAF6EC(255, (unint64_t *)&unk_1F014EDB0);
    v0 = sub_1D7B4A8D8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014E828);
  }
}

void sub_1D7AE20FC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014E830)
  {
    sub_1D7AAF6EC(255, (unint64_t *)&qword_1F014D240);
    sub_1D7AAF6EC(255, &qword_1F014D408);
    sub_1D7AAF724();
    v0 = sub_1D7B4A8D8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014E830);
  }
}

void sub_1D7AE2194()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F0149318)
  {
    v0 = sub_1D7B4A8D8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F0149318);
  }
}

void sub_1D7AE21FC()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1F014E838)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1F014E838);
  }
}

void sub_1D7AE2264(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t (*v5)(uint64_t);
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    sub_1D7B49504();
    v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D28FE0];
    a3(255);
    sub_1D7AA76D4((unint64_t *)&unk_1F014EE00, v5, MEMORY[0x1E0D28FF0]);
    v6 = sub_1D7B4A8D8();
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_1D7AE22FC(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  sub_1D7AE2348(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void sub_1D7AE2348(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!*a2)
  {
    sub_1D7B49504();
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void sub_1D7AE23B8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014E858)
  {
    v0 = sub_1D7B4A4E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014E858);
  }
}

void sub_1D7AE240C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014E860)
  {
    type metadata accessor for Key(255);
    sub_1D7AA76D4((unint64_t *)&qword_1F014DC40, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1D7B833E4);
    v0 = sub_1D7B4A8D8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014E860);
  }
}

uint64_t sub_1D7AE2490(unint64_t a1)
{
  return sub_1D7AE26A8(a1, (void (*)(_QWORD))type metadata accessor for BalanceChartPoint);
}

uint64_t sub_1D7AE249C(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t j;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = a1;
  v9 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_18;
  sub_1D7B4A848();
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      for (i = 0; ; ++i)
      {
        MEMORY[0x1D829E758](i, v1);
        v4 = i + 1;
        if (__OFADD__(i, 1))
          break;
        objc_opt_self();
        if (!swift_dynamicCastObjCClass())
        {
          swift_unknownObjectRelease();
          goto LABEL_15;
        }
        sub_1D7B4A830();
        sub_1D7B4A854();
        sub_1D7B4A860();
        sub_1D7B4A83C();
        if (v4 == v2)
          return v9;
      }
      __break(1u);
    }
    else
    {
      for (j = 0; ; ++j)
      {
        v6 = j + 1;
        if (__OFADD__(j, 1))
          break;
        objc_opt_self();
        v7 = swift_dynamicCastObjCClass();
        if (!v7)
        {
LABEL_15:
          swift_release();
          return 0;
        }
        v1 = v7;
        swift_unknownObjectRetain();
        sub_1D7B4A830();
        sub_1D7B4A854();
        sub_1D7B4A860();
        sub_1D7B4A83C();
        if (v6 == v2)
          return v9;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    sub_1D7B4A8A8();
    swift_bridgeObjectRelease();
    sub_1D7B4A848();
    swift_bridgeObjectRetain();
    v2 = sub_1D7B4A8A8();
    swift_bridgeObjectRelease();
  }
  return v9;
}

uint64_t sub_1D7AE2684(unint64_t a1)
{
  return sub_1D7AE26A8(a1, (void (*)(_QWORD))type metadata accessor for StateOfMindChartPoint);
}

uint64_t sub_1D7AE2690(unint64_t a1)
{
  return sub_1D7AE26A8(a1, (void (*)(_QWORD))type metadata accessor for BalanceCoordinateInfo);
}

uint64_t sub_1D7AE269C(unint64_t a1)
{
  return sub_1D7AE26A8(a1, (void (*)(_QWORD))type metadata accessor for StateOfMindCoordinateInfo);
}

uint64_t sub_1D7AE26A8(unint64_t a1, void (*a2)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t j;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = a1;
  v11 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_18;
  sub_1D7B4A848();
  v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v4)
  {
    if ((v3 & 0xC000000000000001) != 0)
    {
      for (i = 0; ; ++i)
      {
        MEMORY[0x1D829E758](i, v3);
        v6 = i + 1;
        if (__OFADD__(i, 1))
          break;
        a2(0);
        if (!swift_dynamicCastClass())
        {
          swift_unknownObjectRelease();
          goto LABEL_15;
        }
        sub_1D7B4A830();
        sub_1D7B4A854();
        sub_1D7B4A860();
        sub_1D7B4A83C();
        if (v6 == v4)
          return v11;
      }
      __break(1u);
    }
    else
    {
      for (j = 0; ; ++j)
      {
        v8 = j + 1;
        if (__OFADD__(j, 1))
          break;
        a2(0);
        v9 = swift_dynamicCastClass();
        if (!v9)
        {
LABEL_15:
          swift_release();
          return 0;
        }
        v3 = v9;
        swift_unknownObjectRetain();
        sub_1D7B4A830();
        sub_1D7B4A854();
        sub_1D7B4A860();
        sub_1D7B4A83C();
        if (v8 == v4)
          return v11;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    sub_1D7B4A8A8();
    swift_bridgeObjectRelease();
    sub_1D7B4A848();
    swift_bridgeObjectRetain();
    v4 = sub_1D7B4A8A8();
    swift_bridgeObjectRelease();
  }
  return v11;
}

uint64_t sub_1D7AE288C(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;

  v1 = a1;
  v2 = a1 >> 62;
  if (a1 >> 62)
    goto LABEL_40;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v25 = MEMORY[0x1E0DEE9D8];
    sub_1D7AA60BC(0, v3 & ~(v3 >> 63), 0);
    v4 = v25;
    if (v2)
      break;
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v2)
      return v4;
LABEL_7:
    if ((v1 & 0xC000000000000001) != 0)
    {
      for (i = 0; ; ++i)
      {
        v6 = MEMORY[0x1D829E758](i, v1);
        v7 = i + 1;
        if (__OFADD__(i, 1))
          break;
        v8 = v6;
        swift_getObjectType();
        v9 = swift_conformsToProtocol2();
        if (v9)
          v10 = v9;
        else
          v10 = 0;
        if (v9)
          v11 = v8;
        else
          v11 = 0;
        if (!v11)
        {
          swift_release();
          swift_unknownObjectRelease();
          return 0;
        }
        v13 = *(_QWORD *)(v25 + 16);
        v12 = *(_QWORD *)(v25 + 24);
        if (v13 >= v12 >> 1)
          sub_1D7AA60BC(v12 > 1, v13 + 1, 1);
        *(_QWORD *)(v25 + 16) = v13 + 1;
        v14 = v25 + 16 * v13;
        *(_QWORD *)(v14 + 32) = v11;
        *(_QWORD *)(v14 + 40) = v10;
        if (v7 == v2)
          return v4;
      }
      __break(1u);
    }
    else
    {
      v15 = 0;
      v24 = v1 + 32;
      while (1)
      {
        v16 = v15 + 1;
        if (__OFADD__(v15, 1))
          break;
        v17 = *(_QWORD *)(v24 + 8 * v15);
        swift_getObjectType();
        v18 = swift_conformsToProtocol2();
        if (v18)
          v19 = v18;
        else
          v19 = 0;
        if (v18)
          v20 = v17;
        else
          v20 = 0;
        if (!v20)
        {
          swift_release();
          return 0;
        }
        v1 = *(_QWORD *)(v25 + 16);
        v21 = *(_QWORD *)(v25 + 24);
        swift_unknownObjectRetain();
        if (v1 >= v21 >> 1)
          sub_1D7AA60BC(v21 > 1, v1 + 1, 1);
        *(_QWORD *)(v25 + 16) = v1 + 1;
        v22 = v25 + 16 * v1;
        *(_QWORD *)(v22 + 32) = v20;
        *(_QWORD *)(v22 + 40) = v19;
        ++v15;
        if (v16 == v2)
          return v4;
      }
    }
    __break(1u);
LABEL_40:
    swift_bridgeObjectRetain();
    v3 = sub_1D7B4A8A8();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v2 = sub_1D7B4A8A8();
  swift_bridgeObjectRelease();
  if (v2)
    goto LABEL_7;
  return v4;
}

uint64_t sub_1D7AE2AC8(unint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  objc_class *v16;
  id v17;
  id v18;
  uint64_t v19;
  objc_super v21;
  objc_super v22;
  uint64_t v23;
  uint64_t v24;
  objc_super v25;

  v3 = v2;
  swift_getObjectType();
  if (!(a1 >> 62))
  {
    if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
    return MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRetain();
  v19 = sub_1D7B4A8A8();
  swift_bridgeObjectRelease();
  if (!v19)
    return MEMORY[0x1E0DEE9D8];
LABEL_3:
  v6 = sub_1D7AE249C(a1);
  if (!v6)
  {
    if (qword_1F014CF10 != -1)
      swift_once();
    v8 = sub_1D7B4969C();
    __swift_project_value_buffer(v8, (uint64_t)qword_1F01544D0);
    v9 = sub_1D7B49684();
    v10 = sub_1D7B4A608();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      v24 = v12;
      *(_DWORD *)v11 = 136446210;
      v13 = sub_1D7B4AA94();
      v23 = sub_1D7AA4DE4(v13, v14, &v24);
      sub_1D7B4A704();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D7813000, v9, v10, "[%{public}s] Asked to create selected range data for incompatible chart data", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D829FFF4](v12, -1, -1);
      MEMORY[0x1D829FFF4](v11, -1, -1);
    }

    sub_1D7AE309C();
    v15 = (void *)sub_1D7B4A4A0();
    v16 = (objc_class *)type metadata accessor for SleepApneaEventInteractiveChartFormatter();
    v25.receiver = v3;
    v25.super_class = v16;
    v17 = objc_msgSendSuper2(&v25, sel_formattedSelectedRangeLabelDataWithChartData_context_, v15, a2);
    goto LABEL_18;
  }
  if (a2 == 1)
  {
    if (v6 >> 62)
    {
      sub_1D7AE309C();
      sub_1D7B4A89C();
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_1D7B4A944();
      sub_1D7AE309C();
    }
    swift_bridgeObjectRelease();
    sub_1D7AE309C();
    v15 = (void *)sub_1D7B4A4A0();
    swift_bridgeObjectRelease();
    v21.receiver = v3;
    v21.super_class = (Class)type metadata accessor for SleepApneaEventInteractiveChartFormatter();
    v17 = objc_msgSendSuper2(&v21, sel_formattedSelectedRangeLabelDataWithChartData_context_, v15, 1);
    goto LABEL_18;
  }
  if (a2)
  {
    if (v6 >> 62)
    {
      sub_1D7AE309C();
      sub_1D7B4A89C();
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_1D7B4A944();
      sub_1D7AE309C();
    }
    swift_bridgeObjectRelease();
    sub_1D7AE309C();
    v15 = (void *)sub_1D7B4A4A0();
    swift_bridgeObjectRelease();
    v22.receiver = v3;
    v22.super_class = (Class)type metadata accessor for SleepApneaEventInteractiveChartFormatter();
    v17 = objc_msgSendSuper2(&v22, sel_formattedSelectedRangeLabelDataWithChartData_context_, v15, a2);
LABEL_18:
    v18 = v17;

    sub_1D7AAF6EC(0, &qword_1F014E7C0);
    v7 = sub_1D7B4A4AC();

    return v7;
  }
  v7 = sub_1D7AE3110();
  swift_bridgeObjectRelease();
  return v7;
}

id SleepApneaEventInteractiveChartFormatter.__allocating_init(localizedCategoryName:)()
{
  objc_class *v0;
  id v1;
  void *v2;
  id v3;

  v1 = objc_allocWithZone(v0);
  v2 = (void *)sub_1D7B4A38C();
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v1, sel_initWithLocalizedCategoryName_, v2);

  return v3;
}

id SleepApneaEventInteractiveChartFormatter.init(localizedCategoryName:)()
{
  void *v0;
  void *v1;
  id v2;
  objc_super v4;

  v1 = (void *)sub_1D7B4A38C();
  swift_bridgeObjectRelease();
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for SleepApneaEventInteractiveChartFormatter();
  v2 = objc_msgSendSuper2(&v4, sel_initWithLocalizedCategoryName_, v1);

  return v2;
}

id SleepApneaEventInteractiveChartFormatter.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepApneaEventInteractiveChartFormatter();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t sub_1D7AE309C()
{
  unint64_t result;

  result = qword_1F014E870;
  if (!qword_1F014E870)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1F014E870);
  }
  return result;
}

uint64_t type metadata accessor for SleepApneaEventInteractiveChartFormatter()
{
  return objc_opt_self();
}

uint64_t sub_1D7AE3110()
{
  void *v0;
  id v1;
  id v2;
  uint64_t inited;
  void *v4;
  id v5;
  id v6;
  void **v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v18;

  v1 = objc_msgSend(objc_allocWithZone((Class)HKSelectedRangeData), sel_initWithStatisticsType_, 32);
  sub_1D7B4A7DC();
  swift_bridgeObjectRelease();
  if (qword_1F014CF90 != -1)
    swift_once();
  v2 = (id)qword_1F0154598;
  sub_1D7B48F7C();

  sub_1D7AE0958();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D7B82CE0;
  v4 = (void *)*MEMORY[0x1E0DC1138];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0DC1138];
  v5 = v4;
  v6 = objc_msgSend(v0, sel_majorFont, 0xE000000000000000);
  *(_QWORD *)(inited + 64) = sub_1D7AAF6EC(0, (unint64_t *)&qword_1F014DC30);
  if (!v6)
    v6 = objc_msgSend((id)objc_opt_self(), sel_preferredFontForTextStyle_, *MEMORY[0x1E0DC4A88]);
  v7 = (void **)MEMORY[0x1E0DC1140];
  *(_QWORD *)(inited + 40) = v6;
  v8 = *v7;
  *(_QWORD *)(inited + 72) = *v7;
  v9 = (void *)objc_opt_self();
  v10 = v8;
  v11 = objc_msgSend(v9, sel_hk_chartLollipopValueColor);
  *(_QWORD *)(inited + 104) = sub_1D7AAF6EC(0, &qword_1F014E8C0);
  *(_QWORD *)(inited + 80) = v11;
  sub_1D7ADFFC8(inited);
  v12 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
  v13 = (void *)sub_1D7B4A38C();
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  sub_1D7AC5B6C();
  v14 = (void *)sub_1D7B4A230();
  swift_bridgeObjectRelease();
  v15 = objc_msgSend(v12, sel_initWithString_attributes_, v13, v14);

  objc_msgSend(v1, sel_setAttributedString_, v15);
  sub_1D7AAF550();
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1D7B83E30;
  *(_QWORD *)(v16 + 32) = v1;
  v18 = v16;
  sub_1D7B4A4B8();
  return v18;
}

uint64_t method lookup function for SleepApneaEventInteractiveChartFormatter()
{
  return swift_lookUpClassMethod();
}

id sub_1D7AE3430(uint64_t a1)
{
  return sub_1D7AE3DFC(a1, _s26ActivePairedDeviceProviderCMa);
}

uint64_t _s26ActivePairedDeviceProviderCMa()
{
  return objc_opt_self();
}

uint64_t sub_1D7AE346C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtCC8HealthUI46DefaultPairedDeviceFeatureAttributesDataSource26ActivePairedDeviceProvider_provider
                 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(ObjectType, v1);
}

uint64_t sub_1D7AE34A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtCC8HealthUI46DefaultPairedDeviceFeatureAttributesDataSource26ActivePairedDeviceProvider_provider
                 + 8);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 24))(ObjectType, v1);
}

uint64_t sub_1D7AE34E4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  _s26ActivePairedDeviceProviderCMa();
  result = sub_1D7B49780();
  *a1 = result;
  return result;
}

uint64_t sub_1D7AE351C()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  _OWORD v5[2];
  __int128 v6;
  __int128 v7;

  v1 = objc_msgSend(*(id *)(v0+ OBJC_IVAR____TtCC8HealthUI46DefaultPairedDeviceFeatureAttributesDataSourceP33_3C865D9EABCD2E889047E2D14D69B8F938NanoRegistryActivePairedDeviceProvider_pairedDeviceRegistry), sel_getActivePairedDevice);
  if (!v1)
  {
    v6 = 0u;
    v7 = 0u;
LABEL_11:
    sub_1D7AB1290((uint64_t)&v6);
    return 0;
  }
  v2 = v1;
  v3 = objc_msgSend(v1, sel_valueForProperty_, *MEMORY[0x1E0D51710]);

  if (v3)
  {
    sub_1D7B4A770();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_1D7AA7970((uint64_t)v5, (uint64_t)&v6);
  if (!*((_QWORD *)&v7 + 1))
    goto LABEL_11;
  if (swift_dynamicCast())
    return *(_QWORD *)&v5[0];
  else
    return 0;
}

uint64_t sub_1D7AE3618()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void (*v19)(unint64_t, char *, uint64_t);
  id v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  id v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id *v34;
  char *v35;
  uint64_t v36;
  uint64_t ObjectType;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  id v42;

  ObjectType = swift_getObjectType();
  v0 = sub_1D7B4A68C();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AE4114();
  v38 = v4;
  v36 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v35 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (void *)*MEMORY[0x1E0D517D0];
  v40 = (id)*MEMORY[0x1E0D517C0];
  v41 = v6;
  v42 = (id)*MEMORY[0x1E0D517A8];
  v7 = v42;
  v39 = MEMORY[0x1E0DEE9D8];
  v8 = v40;
  v9 = v6;
  v10 = v7;
  sub_1D7AA5FE4(0, 3, 0);
  v11 = v39;
  v12 = (void *)objc_opt_self();
  v13 = v8;
  v14 = objc_msgSend(v12, sel_defaultCenter);
  sub_1D7B4A698();

  v16 = *(_QWORD *)(v11 + 16);
  v15 = *(_QWORD *)(v11 + 24);
  if (v16 >= v15 >> 1)
  {
    sub_1D7AA5FE4(v15 > 1, v16 + 1, 1);
    v11 = v39;
  }
  v34 = &v40;
  *(_QWORD *)(v11 + 16) = v16 + 1;
  v17 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v18 = *(_QWORD *)(v1 + 72);
  v19 = *(void (**)(unint64_t, char *, uint64_t))(v1 + 32);
  v19(v11 + v17 + v18 * v16, v3, v0);
  v20 = v41;
  v21 = objc_msgSend(v12, sel_defaultCenter);
  sub_1D7B4A698();

  v39 = v11;
  v23 = *(_QWORD *)(v11 + 16);
  v22 = *(_QWORD *)(v11 + 24);
  if (v23 >= v22 >> 1)
  {
    sub_1D7AA5FE4(v22 > 1, v23 + 1, 1);
    v11 = v39;
  }
  *(_QWORD *)(v11 + 16) = v23 + 1;
  v19(v11 + v17 + v18 * v23, v3, v0);
  v24 = v42;
  v25 = objc_msgSend(v12, sel_defaultCenter);
  sub_1D7B4A698();

  v39 = v11;
  v27 = *(_QWORD *)(v11 + 16);
  v26 = *(_QWORD *)(v11 + 24);
  if (v27 >= v26 >> 1)
  {
    sub_1D7AA5FE4(v26 > 1, v27 + 1, 1);
    v11 = v39;
  }
  *(_QWORD *)(v11 + 16) = v27 + 1;
  v19(v11 + v17 + v18 * v27, v3, v0);
  type metadata accessor for Name(0);
  swift_arrayDestroy();
  v39 = v11;
  sub_1D7AE4190();
  sub_1D7AE4234(&qword_1F014E970, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1F30], MEMORY[0x1E0CB1F20]);
  sub_1D7AE4234(&qword_1F014E980, 255, (uint64_t (*)(uint64_t))sub_1D7AE4190, MEMORY[0x1E0DEAF38]);
  v28 = v35;
  sub_1D7B4972C();
  v29 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v30 = swift_allocObject();
  v31 = ObjectType;
  *(_QWORD *)(v30 + 16) = v29;
  *(_QWORD *)(v30 + 24) = v31;
  sub_1D7AE4234(&qword_1F014E988, 255, (uint64_t (*)(uint64_t))sub_1D7AE4114, MEMORY[0x1E0C95C80]);
  v32 = v38;
  sub_1D7B49858();
  swift_release();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v28, v32);
  swift_beginAccess();
  sub_1D7B4975C();
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1D7AE3A7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  os_log_type_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  os_log_t v26;
  uint64_t v27;
  uint64_t result;
  void *v29;
  _QWORD v30[2];
  int v31;
  os_log_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[3];

  v4 = sub_1D7B48D90();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1D7B4969C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a2 + 16;
  swift_beginAccess();
  v13 = MEMORY[0x1D82A00A8](v12);
  if (v13)
  {
    v14 = (void *)v13;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v13+ OBJC_IVAR____TtCC8HealthUI46DefaultPairedDeviceFeatureAttributesDataSourceP33_3C865D9EABCD2E889047E2D14D69B8F938NanoRegistryActivePairedDeviceProvider_logger, v8);

    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
    v15 = sub_1D7B49684();
    v16 = sub_1D7B4A620();
    v17 = v16;
    if (os_log_type_enabled(v15, v16))
    {
      v18 = swift_slowAlloc();
      v35 = v9;
      v19 = v18;
      v33 = swift_slowAlloc();
      v37[0] = v33;
      *(_DWORD *)v19 = 136446466;
      v32 = v15;
      v20 = sub_1D7B4AA94();
      v34 = v8;
      v36 = sub_1D7AA4DE4(v20, v21, v37);
      sub_1D7B4A704();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2080;
      v30[1] = v19 + 14;
      v22 = (void *)sub_1D7B48D84();
      v23 = sub_1D7B4A3BC();
      v31 = v17;
      v25 = v24;

      v36 = sub_1D7AA4DE4(v23, v25, v37);
      sub_1D7B4A704();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      v26 = v32;
      _os_log_impl(&dword_1D7813000, v32, (os_log_type_t)v31, "[%{public}s] Received paired device change notification: %s", (uint8_t *)v19, 0x16u);
      v27 = v33;
      swift_arrayDestroy();
      MEMORY[0x1D829FFF4](v27, -1, -1);
      MEMORY[0x1D829FFF4](v19, -1, -1);

      (*(void (**)(char *, uint64_t))(v35 + 8))(v11, v34);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);

      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
  }
  swift_beginAccess();
  result = MEMORY[0x1D82A00A8](v12);
  if (result)
  {
    v29 = (void *)result;
    swift_retain();

    sub_1D7AE40AC();
    sub_1D7AE4234(&qword_1F0150610, 255, (uint64_t (*)(uint64_t))sub_1D7AE40AC, MEMORY[0x1E0C95F40]);
    sub_1D7B497EC();
    return swift_release();
  }
  return result;
}

id sub_1D7AE3DEC()
{
  return sub_1D7AE3DFC(0, _s38NanoRegistryActivePairedDeviceProviderCMa);
}

id sub_1D7AE3DFC(uint64_t a1, uint64_t (*a2)(void))
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

uint64_t sub_1D7AE3E9C()
{
  return _s38NanoRegistryActivePairedDeviceProviderCMa();
}

uint64_t _s38NanoRegistryActivePairedDeviceProviderCMa()
{
  uint64_t result;

  result = qword_1F014E940;
  if (!qword_1F014E940)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1D7AE3EE0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1D7B4969C();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1D7AE3F78()
{
  return MEMORY[0x1E0C96020];
}

uint64_t sub_1D7AE3F88()
{
  sub_1D7AE40AC();
  sub_1D7AE4234(&qword_1F0150530, 255, (uint64_t (*)(uint64_t))sub_1D7AE40AC, MEMORY[0x1E0C95F48]);
  return sub_1D7B49834();
}

uint64_t sub_1D7AE3FF4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  _s38NanoRegistryActivePairedDeviceProviderCMa();
  result = sub_1D7B49780();
  *a1 = result;
  return result;
}

uint64_t sub_1D7AE4030(uint64_t a1)
{
  uint64_t result;

  result = sub_1D7AE4234(&qword_1F014E950, 255, (uint64_t (*)(uint64_t))_s38NanoRegistryActivePairedDeviceProviderCMa, (uint64_t)&unk_1D7B85658);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1D7AE4070(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1D7AE4234(&qword_1F014E958, a2, (uint64_t (*)(uint64_t))_s26ActivePairedDeviceProviderCMa, (uint64_t)&unk_1D7B856AC);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_1D7AE40AC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014E960)
  {
    v0 = sub_1D7B497A4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014E960);
  }
}

void sub_1D7AE4114()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014E968)
  {
    sub_1D7B4A68C();
    sub_1D7AE4234(&qword_1F014E970, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1F30], MEMORY[0x1E0CB1F20]);
    v0 = sub_1D7B49720();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014E968);
  }
}

void sub_1D7AE4190()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014E978)
  {
    sub_1D7B4A68C();
    v0 = sub_1D7B4A4E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014E978);
  }
}

uint64_t sub_1D7AE41E4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1D7AE4208()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1D7AE422C(uint64_t a1)
{
  uint64_t v1;

  return sub_1D7AE3A7C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1D7AE4234(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x1D829FF28](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D7AE4274@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t result;
  _QWORD v25[2];
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  sub_1D7AD8714(0);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v25 - v10;
  sub_1D7B4909C();
  v12 = sub_1D7B490A8();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v14(v11, 1, v12) != 1)
  {
    v9 = v11;
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a3, v9, v12);
  }
  sub_1D7AE4794((uint64_t)v11);
  if (qword_1F014CF20 != -1)
    swift_once();
  v15 = sub_1D7B4969C();
  __swift_project_value_buffer(v15, (uint64_t)qword_1F0154500);
  swift_bridgeObjectRetain_n();
  v16 = sub_1D7B49684();
  v17 = sub_1D7B4A614();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc();
    v27 = a3;
    v19 = (uint8_t *)v18;
    v20 = swift_slowAlloc();
    v26 = v14;
    v21 = v20;
    v29 = v20;
    *(_DWORD *)v19 = 136315138;
    v25[1] = v19 + 4;
    swift_bridgeObjectRetain();
    v28 = sub_1D7AA4DE4(a1, a2, &v29);
    sub_1D7B4A704();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1D7813000, v16, v17, "HKClinicalAuthorizationSequenceContext failed to create Health App url from %s, returning static ViewHealthRecords deep link", v19, 0xCu);
    swift_arrayDestroy();
    v22 = v21;
    v14 = v26;
    MEMORY[0x1D829FFF4](v22, -1, -1);
    v23 = v19;
    a3 = v27;
    MEMORY[0x1D829FFF4](v23, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_1D7B4909C();
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v14)(v9, 1, v12);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a3, v9, v12);
  __break(1u);
  return result;
}

uint64_t sub_1D7AE451C@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  id v3;
  id v4;

  sub_1D7B4A7DC();
  sub_1D7B4A41C();
  v3 = objc_msgSend(v1, sel_source);
  v4 = objc_msgSend(v3, sel_bundleIdentifier);

  sub_1D7B4A3BC();
  sub_1D7B4A41C();
  swift_bridgeObjectRelease();
  sub_1D7AE4274(0, 0xE000000000000000, a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D7AE460C@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  id v3;
  id v4;

  sub_1D7B4A7DC();
  sub_1D7B4A41C();
  sub_1D7B491C8();
  sub_1D7AE474C();
  sub_1D7B4A914();
  sub_1D7B4A41C();
  swift_bridgeObjectRelease();
  sub_1D7B4A41C();
  v3 = objc_msgSend(v1, sel_source);
  v4 = objc_msgSend(v3, sel_bundleIdentifier);

  sub_1D7B4A3BC();
  sub_1D7B4A41C();
  swift_bridgeObjectRelease();
  sub_1D7AE4274(0, 0xE000000000000000, a1);
  return swift_bridgeObjectRelease();
}

unint64_t sub_1D7AE474C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F014E990;
  if (!qword_1F014E990)
  {
    v1 = sub_1D7B491C8();
    result = MEMORY[0x1D829FF28](MEMORY[0x1E0CB09F0], v1);
    atomic_store(result, (unint64_t *)&qword_1F014E990);
  }
  return result;
}

uint64_t sub_1D7AE4794(uint64_t a1)
{
  uint64_t v2;

  sub_1D7AD8714(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t CalendarViewDataSource.startDate(forSection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];

  v23 = a2;
  v4 = sub_1D7B49198();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1D7B492E8();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AA787C(0, (unint64_t *)&qword_1F014D000, v5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v19 - v14;
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E0CB1160], v9);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v20 = v2 + OBJC_IVAR____TtC8HealthUI22CalendarViewDataSource_startDate;
  v21 = v16;
  ((void (*)(char *))v16)(v8);
  v22 = a1;
  sub_1D7B492D0();
  v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17(v8, v4);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v15, 1, v4) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(v23, v15, v4);
  sub_1D7AA79D0((uint64_t)v15);
  v25[0] = 0;
  v25[1] = 0xE000000000000000;
  sub_1D7B4A7DC();
  swift_bridgeObjectRelease();
  strcpy((char *)v25, "Unable to add ");
  HIBYTE(v25[1]) = -18;
  v24 = v22;
  sub_1D7B4A914();
  sub_1D7B4A41C();
  swift_bridgeObjectRelease();
  sub_1D7B4A41C();
  v21(v8, v20, v4);
  sub_1D7AA76D4((unint64_t *)&unk_1F014E9A0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08F0]);
  sub_1D7B4A914();
  sub_1D7B4A41C();
  swift_bridgeObjectRelease();
  v17(v8, v4);
  result = sub_1D7B4A890();
  __break(1u);
  return result;
}

uint64_t CalendarViewDataSource.calendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8HealthUI22CalendarViewDataSource_calendar;
  v4 = sub_1D7B49300();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t CalendarViewDataSource.__allocating_init(cellProvider:calendar:currentDate:startDate:endDate:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, char *a5, char *a6)
{
  objc_class *v6;
  id v13;
  uint64_t v14;

  v13 = objc_allocWithZone(v6);
  v14 = sub_1D7AE717C(a1, a2, a3, a4, a5, a6);
  swift_unknownObjectRelease();
  return v14;
}

uint64_t CalendarViewDataSource.init(cellProvider:calendar:currentDate:startDate:endDate:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, char *a5, char *a6)
{
  uint64_t v6;

  v6 = sub_1D7AE717C(a1, a2, a3, a4, a5, a6);
  swift_unknownObjectRelease();
  return v6;
}

uint64_t CalendarViewDataSource.__allocating_init(cellProvider:calendar:currentDate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  void *v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  id v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;

  v54 = a2;
  v55 = a1;
  v56 = sub_1D7B49300();
  v58 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56);
  v52 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1D7B492E8();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AA787C(0, (unint64_t *)&qword_1F014D000, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v45 - v12;
  v14 = sub_1D7B49198();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v46 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v53 = (char *)&v45 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v51 = (char *)&v45 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v50 = (char *)&v45 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v45 - v25;
  MEMORY[0x1E0C80A78](v24);
  v28 = (char *)&v45 - v27;
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0CB1158], v7);
  v57 = a4;
  sub_1D7B492D0();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_1D7AA79D0((uint64_t)v13);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v46, v57, v14);
    v59 = 0;
    v60 = 0xE000000000000000;
    sub_1D7B4A7DC();
    swift_bridgeObjectRelease();
    v59 = 0xD00000000000002CLL;
    v60 = 0x80000001D7BA5C60;
    sub_1D7AA76D4((unint64_t *)&unk_1F014E9A0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08F0]);
    sub_1D7B4A914();
    sub_1D7B4A41C();
    swift_bridgeObjectRelease();
    result = sub_1D7B4A890();
    __break(1u);
  }
  else
  {
    v29 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v49 = v28;
    v29(v28, v13, v14);
    v47 = v15;
    v48 = a3;
    v30 = (void *)sub_1D7B492AC();
    v31 = (void *)sub_1D7B49150();
    v32 = v14;
    v33 = objc_msgSend(v30, sel_hk_startOfYearForDate_addingYears_, v31, 0);

    sub_1D7B49168();
    v34 = (uint64_t)v52;
    v35 = v56;
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v52, a3, v56);
    v36 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
    v37 = v50;
    v38 = v57;
    v36(v50, v57, v32);
    v39 = v51;
    v36(v51, (uint64_t)v26, v32);
    v40 = v53;
    v36(v53, v38, v32);
    v41 = objc_allocWithZone((Class)type metadata accessor for CalendarViewDataSource());
    v42 = sub_1D7AE717C(v55, v54, v34, v37, v39, v40);
    swift_unknownObjectRelease();
    v43 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
    v43(v38, v32);
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v48, v35);
    v43((uint64_t)v26, v32);
    v43((uint64_t)v49, v32);
    return v42;
  }
  return result;
}

id CalendarViewDataSource.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CalendarViewDataSource.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id CalendarViewDataSource.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CalendarViewDataSource();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t _s8HealthUI22CalendarViewDataSourceC16numberOfSections2inSiSo012UICollectionD0C_tF_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  char v20;
  uint64_t result;
  _QWORD v22[2];
  unint64_t v23;
  unint64_t v24;

  v1 = sub_1D7B48DE4();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x1E0C80A78](v1);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v3);
  v8 = (char *)v22 - v7;
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v22 - v9;
  v22[1] = v0 + OBJC_IVAR____TtC8HealthUI22CalendarViewDataSource_calendar;
  sub_1D7AA787C(0, &qword_1F014E9B0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11B8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v11 = sub_1D7B492E8();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1D7B84630;
  (*(void (**)(unint64_t, _QWORD, uint64_t))(v12 + 104))(v14 + v13, *MEMORY[0x1E0CB1160], v11);
  sub_1D7AE6EFC(v14);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v15 = v0 + OBJC_IVAR____TtC8HealthUI22CalendarViewDataSource_startComponents;
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v16(v8, v0 + OBJC_IVAR____TtC8HealthUI22CalendarViewDataSource_startComponents, v1);
  v17 = v0 + OBJC_IVAR____TtC8HealthUI22CalendarViewDataSource_endComponents;
  v16(v5, v0 + OBJC_IVAR____TtC8HealthUI22CalendarViewDataSource_endComponents, v1);
  sub_1D7B49258();
  swift_bridgeObjectRelease();
  v18 = *(void (**)(char *, uint64_t))(v2 + 8);
  v18(v5, v1);
  v18(v8, v1);
  v19 = sub_1D7B48DD8();
  LOBYTE(v5) = v20;
  v18(v10, v1);
  if ((v5 & 1) == 0)
    return v19;
  v23 = 0;
  v24 = 0xE000000000000000;
  sub_1D7B4A7DC();
  swift_bridgeObjectRelease();
  v23 = 0xD00000000000001CLL;
  v24 = 0x80000001D7BA5DC0;
  v16(v8, v15, v1);
  sub_1D7AA76D4((unint64_t *)&unk_1F014FD80, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], MEMORY[0x1E0CAEAF0]);
  sub_1D7B4A914();
  sub_1D7B4A41C();
  swift_bridgeObjectRelease();
  v18(v8, v1);
  sub_1D7B4A41C();
  v16(v8, v17, v1);
  sub_1D7B4A914();
  sub_1D7B4A41C();
  swift_bridgeObjectRelease();
  v18(v8, v1);
  result = sub_1D7B4A890();
  __break(1u);
  return result;
}

uint64_t CalendarViewDataSource.startDate(for:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v2 = sub_1D7B49198();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1D7B49468();
  CalendarViewDataSource.startDate(forSection:)(v6, (uint64_t)v5);
  v7 = sub_1D7AE55E0((uint64_t)v5);
  result = sub_1D7B4945C();
  if (__OFSUB__(result, v7))
  {
    __break(1u);
  }
  else
  {
    sub_1D7AE5800((result - v7) & ~((result - v7) >> 63), a1);
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return result;
}

uint64_t sub_1D7AE55E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, _QWORD, uint64_t);
  uint64_t v14;
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t result;
  unint64_t v18;
  unint64_t v19;

  v2 = sub_1D7B49198();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1D7B492E8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v18 - v11;
  v13 = *(void (**)(char *, _QWORD, uint64_t))(v7 + 104);
  v13((char *)&v18 - v11, *MEMORY[0x1E0CB1198], v6);
  v13(v10, *MEMORY[0x1E0CB10F8], v6);
  v14 = sub_1D7B49240();
  LOBYTE(v13) = v15;
  v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v16(v10, v6);
  v16(v12, v6);
  if ((v13 & 1) != 0)
    goto LABEL_5;
  result = v14 - 1;
  if (__OFSUB__(v14, 1))
  {
    __break(1u);
LABEL_5:
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
    v18 = 0;
    v19 = 0xE000000000000000;
    sub_1D7B4A7DC();
    swift_bridgeObjectRelease();
    v18 = 0xD000000000000024;
    v19 = 0x80000001D7BA5DE0;
    sub_1D7AA76D4((unint64_t *)&unk_1F014E9A0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08F0]);
    sub_1D7B4A914();
    sub_1D7B4A41C();
    swift_bridgeObjectRelease();
    result = sub_1D7B4A890();
    __break(1u);
  }
  return result;
}

uint64_t sub_1D7AE5800@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD v22[2];

  v5 = sub_1D7B49198();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v20 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1D7B492E8();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AA787C(0, (unint64_t *)&qword_1F014D000, v6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v18 - v14;
  v19 = v2;
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E0CB1130], v9);
  sub_1D7B492D0();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v15, 1, v5) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a2, v15, v5);
  sub_1D7AA79D0((uint64_t)v15);
  v22[0] = 0;
  v22[1] = 0xE000000000000000;
  sub_1D7B4A7DC();
  swift_bridgeObjectRelease();
  strcpy((char *)v22, "Unable to add ");
  HIBYTE(v22[1]) = -18;
  v21 = a1;
  sub_1D7B4A914();
  sub_1D7B4A41C();
  swift_bridgeObjectRelease();
  sub_1D7B4A41C();
  v17 = v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v20, v19 + OBJC_IVAR____TtC8HealthUI22CalendarViewDataSource_startDate, v5);
  sub_1D7AA76D4((unint64_t *)&unk_1F014E9A0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08F0]);
  sub_1D7B4A914();
  sub_1D7B4A41C();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v5);
  result = sub_1D7B4A890();
  __break(1u);
  return result;
}

uint64_t sub_1D7AE5AD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *);
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v2 = v1;
  v28 = sub_1D7B48DE4();
  v26 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1D7B49198();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
  v8 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6);
  v25 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v24 - v11;
  v13 = *(void (**)(char *))(v8 + 16);
  v27 = v2 + OBJC_IVAR____TtC8HealthUI22CalendarViewDataSource_startDate;
  v13((char *)&v24 - v11);
  sub_1D7AA76D4(qword_1F014FCE0, v7, MEMORY[0x1E0CB08B0]);
  v29 = a1;
  LOBYTE(a1) = sub_1D7B4A2F0();
  v14 = *(void (**)(char *, uint64_t))(v8 + 8);
  v14(v12, v6);
  v15 = 0;
  if ((a1 & 1) != 0)
    return v15;
  ((void (*)(char *, uint64_t, uint64_t))v13)(v12, v2 + OBJC_IVAR____TtC8HealthUI22CalendarViewDataSource_endDate, v6);
  v16 = sub_1D7B4A2F0();
  v14(v12, v6);
  if ((v16 & 1) != 0)
  {
    v17 = _s8HealthUI22CalendarViewDataSourceC16numberOfSections2inSiSo012UICollectionD0C_tF_0();
    if (!__OFSUB__(v17, 1))
      return (v17 - 1) & ~((v17 - 1) >> 63);
    __break(1u);
  }
  else
  {
    sub_1D7AA787C(0, &qword_1F014E9B0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11B8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v18 = sub_1D7B492E8();
    v19 = *(_QWORD *)(v18 - 8);
    v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_1D7B84630;
    (*(void (**)(unint64_t, _QWORD, uint64_t))(v19 + 104))(v21 + v20, *MEMORY[0x1E0CB1160], v18);
    sub_1D7AE6EFC(v21);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    v2 = v27;
    ((void (*)(char *, uint64_t, uint64_t))v13)(v12, v27, v6);
    sub_1D7B49264();
    swift_bridgeObjectRelease();
    v14(v12, v6);
    v15 = sub_1D7B48DD8();
    LOBYTE(v21) = v22;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v5, v28);
    if ((v21 & 1) == 0)
      return v15;
  }
  ((void (*)(char *, uint64_t, uint64_t))v13)(v25, v29, v6);
  v30 = 0;
  v31 = 0xE000000000000000;
  sub_1D7B4A7DC();
  swift_bridgeObjectRelease();
  v30 = 0xD00000000000001CLL;
  v31 = 0x80000001D7BA5DC0;
  ((void (*)(char *, uint64_t, uint64_t))v13)(v12, v2, v6);
  sub_1D7AA76D4((unint64_t *)&unk_1F014E9A0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08F0]);
  sub_1D7B4A914();
  sub_1D7B4A41C();
  swift_bridgeObjectRelease();
  v14(v12, v6);
  sub_1D7B4A41C();
  sub_1D7B4A914();
  sub_1D7B4A41C();
  swift_bridgeObjectRelease();
  result = sub_1D7B4A890();
  __break(1u);
  return result;
}

uint64_t CalendarViewDataSource.indexPath(containing:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;

  v5 = sub_1D7B48DE4();
  v41 = *(_QWORD *)(v5 - 8);
  v42 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1D7B49198();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v40 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v35 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v35 - v15;
  v17 = sub_1D7AE5AD4(a1);
  v39 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v39(v16, v2 + OBJC_IVAR____TtC8HealthUI22CalendarViewDataSource_startDate, v8);
  sub_1D7AA76D4(qword_1F014FCE0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B0]);
  v18 = sub_1D7B4A2F0();
  v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v16, v8);
  if ((v18 & 1) != 0)
    return MEMORY[0x1D829D3A8](0, v17);
  v38 = a2;
  CalendarViewDataSource.startDate(forSection:)(v17, (uint64_t)v14);
  v21 = sub_1D7AE55E0((uint64_t)v14);
  v22 = sub_1D7B4927C();
  v23 = v21 + v22;
  if (__OFADD__(v21, v22))
  {
    __break(1u);
    goto LABEL_13;
  }
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v35 = v25;
  v36 = v17;
  v37 = v19;
  sub_1D7AA787C(0, &qword_1F014E9B0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11B8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v26 = sub_1D7B492E8();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_1D7B84630;
  (*(void (**)(unint64_t, _QWORD, uint64_t))(v27 + 104))(v29 + v28, *MEMORY[0x1E0CB1130], v26);
  sub_1D7AE6EFC(v29);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_1D7B49264();
  swift_bridgeObjectRelease();
  v30 = sub_1D7B48DC0();
  LOBYTE(v29) = v31;
  (*(void (**)(char *, uint64_t))(v41 + 8))(v7, v42);
  if ((v29 & 1) != 0)
  {
LABEL_15:
    v39(v40, a1, v8);
    v43 = 0;
    v44 = 0xE000000000000000;
    sub_1D7B4A7DC();
    swift_bridgeObjectRelease();
    v43 = 0xD00000000000001ALL;
    v44 = 0x80000001D7BA5CB0;
    sub_1D7AA76D4((unint64_t *)&unk_1F014E9A0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08F0]);
    sub_1D7B4A914();
    sub_1D7B4A41C();
    swift_bridgeObjectRelease();
    sub_1D7B4A41C();
    sub_1D7B4A914();
    sub_1D7B4A41C();
    swift_bridgeObjectRelease();
    result = sub_1D7B4A890();
    __break(1u);
    return result;
  }
  v24 = __OFADD__(v21, v30);
  v32 = v21 + v30;
  v33 = (uint64_t (*)(char *, uint64_t))v37;
  if (v24)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v35 >= v32)
    v34 = v32;
  else
    v34 = v35;
  MEMORY[0x1D829D3A8](v34, v36);
  return v33(v14, v8);
}

Swift::Int __swiftcall CalendarViewDataSource.collectionView(_:numberOfItemsInSection:)(UICollectionView *_, Swift::Int numberOfItemsInSection)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;

  v3 = sub_1D7B49198();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  CalendarViewDataSource.startDate(forSection:)(numberOfItemsInSection, (uint64_t)v6);
  v7 = sub_1D7AE55E0((uint64_t)v6);
  v8 = sub_1D7B4927C();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  result = v7 + v8;
  if (__OFADD__(v7, v8))
    __break(1u);
  return result;
}

uint64_t CalendarViewDataSource.collectionView(_:cellForItemAt:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t ObjectType;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = v2;
  v31 = a1;
  v5 = sub_1D7B492E8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1D7B49198();
  v32 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v29 - v13;
  v15 = sub_1D7B49468();
  CalendarViewDataSource.startDate(forSection:)(v15, (uint64_t)v14);
  v16 = sub_1D7AE55E0((uint64_t)v14);
  if (sub_1D7B4945C() < v16)
  {
    v17 = v2 + OBJC_IVAR____TtC8HealthUI22CalendarViewDataSource_cellProvider;
    result = MEMORY[0x1D82A00A8](v3 + OBJC_IVAR____TtC8HealthUI22CalendarViewDataSource_cellProvider);
    if (result)
    {
      v19 = *(_QWORD *)(v17 + 8);
      ObjectType = swift_getObjectType();
      v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 16))(v3, v31, a2, ObjectType, v19);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v9);
      return v21;
    }
    goto LABEL_9;
  }
  v22 = sub_1D7B4945C();
  v23 = __OFSUB__(v22, v16);
  result = v22 - v16;
  if (v23)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v30 = v9;
  sub_1D7AE5800(result, (uint64_t)v12);
  v24 = v2 + OBJC_IVAR____TtC8HealthUI22CalendarViewDataSource_cellProvider;
  result = MEMORY[0x1D82A00A8](v3 + OBJC_IVAR____TtC8HealthUI22CalendarViewDataSource_cellProvider);
  if (result)
  {
    v25 = *(_QWORD *)(v24 + 8);
    v29 = swift_getObjectType();
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0CB1130], v5);
    v26 = sub_1D7B492F4();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v21 = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 8))(v3, v31, v12, v26, a2, v29, v25);
    swift_unknownObjectRelease();
    v27 = *(void (**)(char *, uint64_t))(v32 + 8);
    v28 = v30;
    v27(v12, v30);
    v27(v14, v28);
    return v21;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t CalendarViewDataSource.collectionView(_:viewForSupplementaryElementOfKind:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t ObjectType;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v5 = v4;
  v10 = sub_1D7B49198();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1D7B4A3BC() != a2 || v14 != a3)
  {
    v16 = sub_1D7B4A938();
    swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
      goto LABEL_8;
    v23 = 0;
    v24 = 0xE000000000000000;
    sub_1D7B4A7DC();
    swift_bridgeObjectRelease();
    v23 = 0xD000000000000029;
    v24 = 0x80000001D7BA5CD0;
    sub_1D7B4A41C();
    sub_1D7B4A890();
    __break(1u);
  }
  swift_bridgeObjectRelease();
LABEL_8:
  v17 = sub_1D7B49468();
  CalendarViewDataSource.startDate(forSection:)(v17, (uint64_t)v13);
  v18 = v4 + OBJC_IVAR____TtC8HealthUI22CalendarViewDataSource_cellProvider;
  result = MEMORY[0x1D82A00A8](v5 + OBJC_IVAR____TtC8HealthUI22CalendarViewDataSource_cellProvider);
  if (result)
  {
    v20 = *(_QWORD *)(v18 + 8);
    ObjectType = swift_getObjectType();
    result = sub_1D7AE55E0((uint64_t)v13);
    if (!__OFADD__(result, 1))
    {
      v22 = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 24))(v5, a1, v13, result + 1, a4, ObjectType, v20);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      return v22;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t CalendarViewDataSource.day(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void (*v10)(char *, uint64_t);
  uint64_t v11;

  v0 = sub_1D7B49198();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v11 - v5;
  v7 = sub_1D7B49468();
  CalendarViewDataSource.startDate(forSection:)(v7, (uint64_t)v4);
  v8 = sub_1D7AE55E0((uint64_t)v4);
  result = sub_1D7B4945C();
  if (__OFSUB__(result, v8))
  {
    __break(1u);
  }
  else
  {
    sub_1D7AE5800((result - v8) & ~((result - v8) >> 63), (uint64_t)v6);
    v10 = *(void (**)(char *, uint64_t))(v1 + 8);
    v10(v4, v0);
    sub_1D7B49294();
    return ((uint64_t (*)(char *, uint64_t))v10)(v6, v0);
  }
  return result;
}

uint64_t CalendarViewDataSource.indexPath(from:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = sub_1D7B49198();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7B4A1B8();
  CalendarViewDataSource.indexPath(containing:)((uint64_t)v5, a1);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1D7AE6C7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;

  v2 = sub_1D7B4AA28();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v33 = (char *)&v28 - v7;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    sub_1D7AE7C1C(0, &qword_1F014EA38, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB27F0], &qword_1F014EA40, MEMORY[0x1E0CB2800]);
    v9 = sub_1D7B4A7C4();
    v10 = 0;
    v32 = v9 + 56;
    v11 = *(unsigned __int8 *)(v3 + 80);
    v29 = v8;
    v30 = a1 + ((v11 + 32) & ~v11);
    v12 = *(_QWORD *)(v3 + 72);
    v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    while (1)
    {
      v31 = v10;
      v13(v33, v30 + v12 * v10, v2);
      sub_1D7AA76D4(&qword_1F014EA40, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB27F0], MEMORY[0x1E0CB2800]);
      v14 = sub_1D7B4A29C();
      v15 = ~(-1 << *(_BYTE *)(v9 + 32));
      v16 = v14 & v15;
      v17 = (v14 & (unint64_t)v15) >> 6;
      v18 = *(_QWORD *)(v32 + 8 * v17);
      v19 = 1 << (v14 & v15);
      if ((v19 & v18) != 0)
      {
        do
        {
          v13(v6, *(_QWORD *)(v9 + 48) + v16 * v12, v2);
          sub_1D7AA76D4(&qword_1F014EA48, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB27F0], MEMORY[0x1E0CB2808]);
          v20 = sub_1D7B4A320();
          v21 = v3;
          v22 = *(void (**)(char *, uint64_t))(v3 + 8);
          v22(v6, v2);
          if ((v20 & 1) != 0)
          {
            v22(v33, v2);
            v3 = v21;
            v8 = v29;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v15;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v32 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v21;
        }
        while ((v18 & (1 << v16)) != 0);
        v8 = v29;
      }
      v23 = v33;
      *(_QWORD *)(v32 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v9 + 48) + v16 * v12, v23, v2);
      v25 = *(_QWORD *)(v9 + 16);
      v26 = __OFADD__(v25, 1);
      v27 = v25 + 1;
      if (v26)
        break;
      *(_QWORD *)(v9 + 16) = v27;
LABEL_4:
      v10 = v31 + 1;
      if (v31 + 1 == v8)
        return v9;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E8];
  }
  return result;
}

uint64_t sub_1D7AE6EFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;

  v2 = sub_1D7B492E8();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v33 = (char *)&v28 - v7;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    sub_1D7AE7C1C(0, &qword_1F014EA20, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11B8], &qword_1F014EA28, MEMORY[0x1E0CB11D0]);
    v9 = sub_1D7B4A7C4();
    v10 = 0;
    v32 = v9 + 56;
    v11 = *(unsigned __int8 *)(v3 + 80);
    v29 = v8;
    v30 = a1 + ((v11 + 32) & ~v11);
    v12 = *(_QWORD *)(v3 + 72);
    v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    while (1)
    {
      v31 = v10;
      v13(v33, v30 + v12 * v10, v2);
      sub_1D7AA76D4(&qword_1F014EA28, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11B8], MEMORY[0x1E0CB11D0]);
      v14 = sub_1D7B4A29C();
      v15 = ~(-1 << *(_BYTE *)(v9 + 32));
      v16 = v14 & v15;
      v17 = (v14 & (unint64_t)v15) >> 6;
      v18 = *(_QWORD *)(v32 + 8 * v17);
      v19 = 1 << (v14 & v15);
      if ((v19 & v18) != 0)
      {
        do
        {
          v13(v6, *(_QWORD *)(v9 + 48) + v16 * v12, v2);
          sub_1D7AA76D4(&qword_1F014EA30, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11B8], MEMORY[0x1E0CB11D8]);
          v20 = sub_1D7B4A320();
          v21 = v3;
          v22 = *(void (**)(char *, uint64_t))(v3 + 8);
          v22(v6, v2);
          if ((v20 & 1) != 0)
          {
            v22(v33, v2);
            v3 = v21;
            v8 = v29;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v15;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v32 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v21;
        }
        while ((v18 & (1 << v16)) != 0);
        v8 = v29;
      }
      v23 = v33;
      *(_QWORD *)(v32 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v9 + 48) + v16 * v12, v23, v2);
      v25 = *(_QWORD *)(v9 + 16);
      v26 = __OFADD__(v25, 1);
      v27 = v25 + 1;
      if (v26)
        break;
      *(_QWORD *)(v9 + 16) = v27;
LABEL_4:
      v10 = v31 + 1;
      if (v31 + 1 == v8)
        return v9;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E8];
  }
  return result;
}

uint64_t sub_1D7AE717C(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, char *a5, char *a6)
{
  _BYTE *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t);
  uint64_t v39;
  char *v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  void (*v53)(char *, uint64_t);
  void *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  NSObject *v59;
  os_log_type_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  objc_class *v74;
  id v75;
  uint64_t result;
  _QWORD v77[2];
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  __int128 v83;
  unsigned int v84;
  void (*v85)(char *, char *, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  void (*v93)(char *, char *, uint64_t);
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  objc_super v107;
  char *v108;
  unint64_t v109;

  v104 = a5;
  v105 = a6;
  v99 = a4;
  v103 = a3;
  v77[1] = swift_getObjectType();
  v10 = sub_1D7B492E8();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v92 = (char *)v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D7AA787C(0, (unint64_t *)&qword_1F014D000, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v13);
  v91 = (char *)v77 - v14;
  v15 = sub_1D7B49198();
  v16 = *(_QWORD *)(v15 - 8);
  v79 = v15;
  v17 = v16;
  v80 = v16;
  v18 = MEMORY[0x1E0C80A78](v15);
  v77[0] = (char *)v77 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v100 = (char *)v77 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v96 = (char *)v77 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v95 = (char *)v77 - v25;
  MEMORY[0x1E0C80A78](v24);
  v102 = (char *)v77 - v26;
  v101 = sub_1D7B48DE4();
  v94 = *(char **)(v101 - 8);
  MEMORY[0x1E0C80A78](v101);
  v28 = (char *)v77 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v6[OBJC_IVAR____TtC8HealthUI22CalendarViewDataSource_cellProvider + 8] = 0;
  v29 = swift_unknownObjectWeakInit();
  v6[OBJC_IVAR____TtC8HealthUI22CalendarViewDataSource_includeSpacerCellsFromFirstWeekday] = 1;
  *(_QWORD *)(v29 + 8) = a2;
  swift_unknownObjectWeakAssign();
  v30 = &v6[OBJC_IVAR____TtC8HealthUI22CalendarViewDataSource_calendar];
  v31 = sub_1D7B49300();
  v97 = *(_QWORD *)(v31 - 8);
  v98 = v31;
  (*(void (**)(char *, uint64_t))(v97 + 16))(v30, a3);
  v93 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  v93(&v6[OBJC_IVAR____TtC8HealthUI22CalendarViewDataSource_startDate], a5, v15);
  sub_1D7AA787C(0, &qword_1F014E9B0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11B8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v32 = *(_QWORD *)(v11 + 72);
  v33 = *(unsigned __int8 *)(v11 + 80);
  v78 = v11;
  v34 = (v33 + 32) & ~v33;
  v88 = v35;
  v87 = v34 + 3 * v32;
  v86 = v33 | 7;
  v36 = swift_allocObject();
  v83 = xmmword_1D7B85700;
  *(_OWORD *)(v36 + 16) = xmmword_1D7B85700;
  v89 = v34;
  v37 = v36 + v34;
  v38 = *(void (**)(uint64_t))(v11 + 104);
  v84 = *MEMORY[0x1E0CB1138];
  v38(v37);
  v82 = *MEMORY[0x1E0CB1158];
  v38(v37 + v32);
  v90 = 2 * v32;
  v39 = *MEMORY[0x1E0CB1160];
  ((void (*)(uint64_t, uint64_t, uint64_t))v38)(v37 + 2 * v32, v39, v10);
  v40 = v6;
  sub_1D7AE6EFC(v36);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_1D7B49270();
  swift_bridgeObjectRelease();
  v41 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v94 + 4);
  v94 = v28;
  v85 = v41;
  v41(&v40[OBJC_IVAR____TtC8HealthUI22CalendarViewDataSource_startComponents], v28, v101);
  v42 = v92;
  v81 = v39;
  ((void (*)(char *, uint64_t, uint64_t))v38)(v92, v39, v10);
  v43 = (uint64_t)v91;
  sub_1D7B492D0();
  v44 = v79;
  (*(void (**)(char *, uint64_t))(v78 + 8))(v42, v10);
  v45 = v80;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48))(v43, 1, v44) == 1)
  {
    sub_1D7AA79D0(v43);
    v93((char *)v77[0], v105, v44);
    v108 = 0;
    v109 = 0xE000000000000000;
    sub_1D7B4A7DC();
    swift_bridgeObjectRelease();
    v108 = (char *)0xD00000000000001ALL;
    v109 = 0x80000001D7BA5E10;
    sub_1D7AA76D4((unint64_t *)&unk_1F014E9A0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08F0]);
    sub_1D7B4A914();
    sub_1D7B4A41C();
    swift_bridgeObjectRelease();
    result = sub_1D7B4A890();
    __break(1u);
  }
  else
  {
    v46 = v102;
    (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v102, v43, v44);
    v47 = &v40[OBJC_IVAR____TtC8HealthUI22CalendarViewDataSource_endDate];
    v48 = v93;
    v93(&v40[OBJC_IVAR____TtC8HealthUI22CalendarViewDataSource_endDate], v46, v44);
    v49 = swift_allocObject();
    *(_OWORD *)(v49 + 16) = v83;
    v50 = v49 + v89;
    ((void (*)(uint64_t, _QWORD, uint64_t))v38)(v49 + v89, v84, v10);
    ((void (*)(uint64_t, _QWORD, uint64_t))v38)(v50 + v32, v82, v10);
    ((void (*)(uint64_t, _QWORD, uint64_t))v38)(v50 + v90, v81, v10);
    sub_1D7AE6EFC(v49);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    v51 = v95;
    v48(v95, v47, v44);
    v52 = v94;
    sub_1D7B49270();
    swift_bridgeObjectRelease();
    v53 = *(void (**)(char *, uint64_t))(v45 + 8);
    v53(v51, v44);
    v85(&v40[OBJC_IVAR____TtC8HealthUI22CalendarViewDataSource_endComponents], v52, v101);

    v54 = v40;
    v55 = v44;
    if (qword_1F014CF00 != -1)
      swift_once();
    v56 = sub_1D7B4969C();
    __swift_project_value_buffer(v56, (uint64_t)qword_1F01544B8);
    v57 = v96;
    v48(v96, v104, v44);
    v58 = v100;
    v48(v100, v105, v44);
    v59 = sub_1D7B49684();
    v60 = sub_1D7B4A5FC();
    v61 = v60;
    if (os_log_type_enabled(v59, v60))
    {
      v62 = swift_slowAlloc();
      v95 = (char *)swift_slowAlloc();
      v108 = v95;
      *(_DWORD *)v62 = 136446722;
      v63 = sub_1D7B4AA94();
      v106 = sub_1D7AA4DE4(v63, v64, (uint64_t *)&v108);
      v101 = (uint64_t)v54;
      sub_1D7B4A704();
      swift_bridgeObjectRelease();
      *(_WORD *)(v62 + 12) = 2080;
      sub_1D7AA76D4((unint64_t *)&unk_1F014E9A0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08F0]);
      v65 = sub_1D7B4A914();
      v106 = sub_1D7AA4DE4(v65, v66, (uint64_t *)&v108);
      sub_1D7B4A704();
      swift_bridgeObjectRelease();
      v55 = v44;
      LODWORD(v96) = v61;
      v67 = (void *)v101;
      v53(v57, v44);
      *(_WORD *)(v62 + 22) = 2080;
      v68 = v100;
      v69 = sub_1D7B4A914();
      v106 = sub_1D7AA4DE4(v69, v70, (uint64_t *)&v108);
      sub_1D7B4A704();
      swift_bridgeObjectRelease();
      v71 = v68;
      v54 = v67;
      v53(v71, v44);
      _os_log_impl(&dword_1D7813000, v59, (os_log_type_t)v96, "[%{public}s] Created in range %s to %s", (uint8_t *)v62, 0x20u);
      v72 = v95;
      swift_arrayDestroy();
      MEMORY[0x1D829FFF4](v72, -1, -1);
      MEMORY[0x1D829FFF4](v62, -1, -1);
    }
    else
    {
      v53(v57, v44);
      v53(v58, v44);
    }

    v73 = v102;
    v74 = (objc_class *)type metadata accessor for CalendarViewDataSource();
    v107.receiver = v54;
    v107.super_class = v74;
    v75 = objc_msgSendSuper2(&v107, sel_init);
    v53(v105, v55);
    v53(v104, v55);
    v53(v99, v55);
    (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v103, v98);
    v53(v73, v55);
    return (uint64_t)v75;
  }
  return result;
}

uint64_t type metadata accessor for CalendarViewDataSource()
{
  uint64_t result;

  result = qword_1F014EA08;
  if (!qword_1F014EA08)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1D7AE7B30()
{
  return type metadata accessor for CalendarViewDataSource();
}

uint64_t sub_1D7AE7B38()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = sub_1D7B49300();
  if (v1 <= 0x3F)
  {
    result = sub_1D7B49198();
    if (v2 <= 0x3F)
    {
      result = sub_1D7B48DE4();
      if (v3 <= 0x3F)
        return swift_updateClassMetadata2();
    }
  }
  return result;
}

uint64_t method lookup function for CalendarViewDataSource()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CalendarViewDataSource.__allocating_init(cellProvider:calendar:currentDate:startDate:endDate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t dispatch thunk of CalendarViewDataSourceCellProvider.calendarDataSource(_:cellForItemIn:date:dayComponent:indexPath:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 8))();
}

uint64_t dispatch thunk of CalendarViewDataSourceCellProvider.calendarDataSource(_:spacerCellForItemIn:indexPath:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of CalendarViewDataSourceCellProvider.calendarDataSource(_:headerForSectionIn:date:startOfMonthWeekday:indexPath:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 24))();
}

void sub_1D7AE7C1C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    a3(255);
    sub_1D7AA76D4(a4, a3, a5);
    v9 = sub_1D7B4A7D0();
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_1D7AE7C9C(uint64_t a1)
{
  return sub_1D7AE7D48(a1, qword_1F01544B8);
}

uint64_t sub_1D7AE7CBC(uint64_t a1)
{
  return sub_1D7AE7D48(a1, qword_1F0154438);
}

uint64_t sub_1D7AE7CE0(uint64_t a1)
{
  return sub_1D7AE7D48(a1, qword_1F01544D0);
}

uint64_t sub_1D7AE7CFC(uint64_t a1)
{
  return sub_1D7AE7D48(a1, qword_1F01544E8);
}

uint64_t sub_1D7AE7D1C(uint64_t a1)
{
  return sub_1D7AE7D48(a1, qword_1F0154500);
}

uint64_t sub_1D7AE7D48(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_1D7B4969C();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return sub_1D7B49690();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_1D7AE7DFC(uint64_t a1)
{
  return sub_1D7AE7E24(a1, (uint64_t (*)(void))sub_1D7ABA4F0, (uint64_t (*)(_QWORD))sub_1D7ABA240);
}

uint64_t sub_1D7AE7E10(uint64_t a1)
{
  return sub_1D7AE7E24(a1, (uint64_t (*)(void))sub_1D7ABA61C, (uint64_t (*)(_QWORD))MEMORY[0x1E0D290D0]);
}

uint64_t sub_1D7AE7E24(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(_QWORD))
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v6 + v4 <= *(_QWORD *)(v5 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_15;
  }
  v5 = a2();
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_15:
    if (!v4)
      goto LABEL_16;
    goto LABEL_18;
  }
LABEL_5:
  v10 = *(_QWORD *)(v5 + 16);
  v11 = (*(_QWORD *)(v5 + 24) >> 1) - v10;
  v12 = a3(0);
  if (v11 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v15 = *(_QWORD *)(v13 + 72);
  v16 = v5 + v14 + v15 * v10;
  v17 = a1 + v14;
  v18 = v15 * v4;
  v19 = v16 + v18;
  v20 = v17 + v18;
  if (v17 < v19 && v16 < v20)
    goto LABEL_21;
  swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_16:
    result = swift_bridgeObjectRelease();
    *v3 = v5;
    return result;
  }
  v22 = *(_QWORD *)(v5 + 16);
  v23 = __OFADD__(v22, v4);
  v24 = v22 + v4;
  if (!v23)
  {
    *(_QWORD *)(v5 + 16) = v24;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  result = sub_1D7B4A8E4();
  __break(1u);
  return result;
}

uint64_t sub_1D7AE7F9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_1D7ABA3D0(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[2 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[2 * v2] && (unint64_t)v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 16 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_1D7B4A8E4();
  __break(1u);
  return result;
}

uint64_t sub_1D7AE80E0(unint64_t a1)
{
  return sub_1D7AE82EC(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t))sub_1D7AFAAAC);
}

uint64_t sub_1D7AE80EC(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_1D7B4A8A8();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v20 = sub_1D7B4A8A8();
    swift_bridgeObjectRelease();
    v5 = v20 + v3;
    if (!__OFADD__(v20, v3))
      goto LABEL_5;
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v4 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v5 = v4 + v3;
  if (__OFADD__(v4, v3))
    goto LABEL_24;
LABEL_5:
  v6 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v6;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v9 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v5 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v8 = 1;
  }
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1D7B4A8A8();
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v10 <= v5)
    v10 = v5;
  swift_bridgeObjectRetain();
  v11 = MEMORY[0x1D829E764](v8, v10, 1, v6);
  swift_bridgeObjectRelease();
  *v1 = v11;
  v9 = v11 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (*(_QWORD *)(v9 + 24) >> 1) - v12;
  result = sub_1D7AFACE8(v9 + 8 * v12 + 32, v13, a1);
  if (v15 < v3)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v16 = v15;
  if (v15 < 1)
    goto LABEL_19;
  v17 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v18 = __OFADD__(v17, v15);
  v19 = v17 + v15;
  if (!v18)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v19;
LABEL_19:
    swift_bridgeObjectRelease();
    if (v16 != v13)
      return sub_1D7B4A4B8();
LABEL_26:
    sub_1D7AE9C70(0, &qword_1F014EFA0, (unint64_t *)&unk_1F014F770, 0x1E0DC3F20, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    return sub_1D7B4A4B8();
  }
  __break(1u);
  return result;
}

uint64_t sub_1D7AE82E0(unint64_t a1)
{
  return sub_1D7AE82EC(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t))sub_1D7AFAF2C);
}

uint64_t sub_1D7AE82EC(unint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, unint64_t))
{
  unint64_t *v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_1D7B4A8A8();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = *v2;
  if (*v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1D7B4A8A8();
    swift_bridgeObjectRelease();
    v8 = v7 + v5;
    if (!__OFADD__(v7, v5))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  v8 = v7 + v5;
  if (__OFADD__(v7, v5))
    goto LABEL_23;
LABEL_5:
  v6 = *v2;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v2 = v6;
  v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v7 = 1;
  }
  if (v6 >> 62)
    goto LABEL_25;
  v11 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v11 <= v8)
      v11 = v8;
    swift_bridgeObjectRetain();
    v6 = MEMORY[0x1D829E764](v7, v11, 1, v6);
    swift_bridgeObjectRelease();
    *v2 = v6;
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = a2(v10 + 8 * *(_QWORD *)(v10 + 16) + 32, (*(_QWORD *)(v10 + 24) >> 1) - *(_QWORD *)(v10 + 16), a1);
    if (v13 >= v5)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v11 = sub_1D7B4A8A8();
    swift_bridgeObjectRelease();
  }
  if (v13 < 1)
    goto LABEL_19;
  v14 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v15 = __OFADD__(v14, v13);
  v16 = v14 + v13;
  if (!v15)
  {
    *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
LABEL_19:
    swift_bridgeObjectRelease();
    return sub_1D7B4A4B8();
  }
  __break(1u);
  return result;
}

uint64_t sub_1D7AE84A8(unint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_1D7B4A8A8();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_1D7B4A8A8();
    swift_bridgeObjectRelease();
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_23;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x1D829E764](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_1D7AFB3AC(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v9 = sub_1D7B4A8A8();
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return sub_1D7B4A4B8();
  }
  __break(1u);
  return result;
}

double UIViewController.adaptiveReparentingManager.getter@<D0>(uint64_t a1@<X8>)
{
  void *v1;
  double result;

  if (!objc_msgSend(v1, sel_splitViewController)
    || (sub_1D7AAF6EC(0, &qword_1F014EA50), sub_1D7AE86F0(), (swift_dynamicCast() & 1) == 0))
  {
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

unint64_t sub_1D7AE86F0()
{
  unint64_t result;

  result = qword_1F014EA58;
  if (!qword_1F014EA58)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1F014EA58);
  }
  return result;
}

void UIViewController.showAdaptivelyIfPossible(_:sender:)(void *a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26[3];
  uint64_t v27;
  id v28;
  void *v29;

  swift_getObjectType();
  v29 = &unk_1F01C62D0;
  v5 = swift_dynamicCastObjCProtocolConditional();
  if (v5)
  {
    v6 = v5;
    sub_1D7AB9B80(a2, (uint64_t)v26);
    v7 = v27;
    if (v27)
    {
      v8 = __swift_project_boxed_opaque_existential_0(v26, v27);
      v9 = *(_QWORD *)(v7 - 8);
      MEMORY[0x1E0C80A78](v8);
      v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v9 + 16))(v11);
      v12 = a1;
      v13 = sub_1D7B4A92C();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v7);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v26);
    }
    else
    {
      v16 = a1;
      v13 = 0;
    }
    objc_msgSend(v2, sel_showAdaptively_sender_, v6, v13);

    swift_unknownObjectRelease();
  }
  else
  {
    v14 = objc_msgSend(v2, sel_navigationController);
    if (v14)
    {
      v15 = v14;
      objc_msgSend(v14, sel_pushViewController_animated_, a1, 1);
    }
    else
    {
      if (qword_1F014CF00 != -1)
        swift_once();
      v17 = sub_1D7B4969C();
      __swift_project_value_buffer(v17, (uint64_t)qword_1F01544B8);
      v15 = v2;
      v18 = sub_1D7B49684();
      v19 = sub_1D7B4A608();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = swift_slowAlloc();
        v21 = swift_slowAlloc();
        v26[0] = v21;
        *(_DWORD *)v20 = 136315394;
        v22 = sub_1D7B4AA94();
        v28 = (id)sub_1D7AA4DE4(v22, v23, v26);
        sub_1D7B4A704();
        swift_bridgeObjectRelease();
        *(_WORD *)(v20 + 12) = 2080;
        v28 = objc_msgSend(v15, sel_navigationController, v26[0]);
        sub_1D7AE9C70(0, &qword_1F014EA60, &qword_1F014EA68, 0x1E0DC3A40, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        v24 = sub_1D7B4A3E0();
        v28 = (id)sub_1D7AA4DE4(v24, v25, v26);
        sub_1D7B4A704();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1D7813000, v18, v19, "[%s]: Unable to show adaptively or fallback. Navigation controller=%s", (uint8_t *)v20, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1D829FFF4](v21, -1, -1);
        MEMORY[0x1D829FFF4](v20, -1, -1);

        return;
      }

    }
  }
}

Swift::Void __swiftcall HKNavigationController.reparentViewControllerIfNecessary(traitCollection:previousTraitCollection:)(UITraitCollection traitCollection, UITraitCollection_optional previousTraitCollection)
{
  Class isa;
  id v4;
  id v5;
  id v6;
  id v7;

  isa = previousTraitCollection.value.super.isa;
  if (previousTraitCollection.value.super.isa)
    v4 = -[objc_class horizontalSizeClass](previousTraitCollection.value.super.isa, sel_horizontalSizeClass, *(_QWORD *)&previousTraitCollection.is_nil);
  else
    v4 = 0;
  v5 = -[objc_class horizontalSizeClass](traitCollection.super.isa, sel_horizontalSizeClass);
  if (!isa || v4 != v5)
  {
    if (isa)
    {
      v6 = -[objc_class horizontalSizeClass](isa, sel_horizontalSizeClass);
      v7 = -[objc_class horizontalSizeClass](traitCollection.super.isa, sel_horizontalSizeClass);
      if (v6 != (id)2)
      {
        if (v6 != (id)1)
          return;
        goto LABEL_12;
      }
      if (v7 != (id)1)
        return;
    }
    else
    {
      v7 = -[objc_class horizontalSizeClass](traitCollection.super.isa, sel_horizontalSizeClass);
      if (v7 != (id)1)
      {
LABEL_12:
        if (v7 == (id)2)
          HKNavigationController.reparentPushToModalIfPossible()();
        return;
      }
    }
    HKNavigationController.reparentModalToPushIfPossible()();
  }
}

Swift::Void __swiftcall HKNavigationController.reparentPushToModalIfPossible()()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char **v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t i;
  id v29;
  void *v30;
  id v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _QWORD v36[3];
  uint64_t v37;
  uint64_t v38;

  v1 = v0;
  v2 = objc_msgSend(v0, sel_splitViewController);
  if (!v2 || (v36[0] = v2, sub_1D7AAF6EC(0, &qword_1F014EA50), sub_1D7AE86F0(), (swift_dynamicCast() & 1) == 0))
  {
    v35 = 0;
    v33 = 0u;
    v34 = 0u;
    goto LABEL_19;
  }
  if (!*((_QWORD *)&v34 + 1))
  {
LABEL_19:
    sub_1D7AE9AE0((uint64_t)&v33);
    return;
  }
  sub_1D7AE9B70(&v33, (uint64_t)v36);
  v3 = v37;
  v4 = v38;
  __swift_project_boxed_opaque_existential_0(v36, v37);
  if (((*(uint64_t (**)(void *, uint64_t, uint64_t))(v4 + 8))(v0, v3, v4) & 1) == 0)
    goto LABEL_49;
  v5 = objc_msgSend(v0, sel_presentedViewController);

  if (v5)
    goto LABEL_49;
  v6 = objc_msgSend(v1, sel_view);
  if (!v6)
    goto LABEL_51;
  v7 = v6;
  v8 = objc_msgSend(v6, sel_window);

  if (!v8)
  {
LABEL_49:
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v36);
    return;
  }
  v9 = objc_msgSend(v1, sel_viewControllers);
  v10 = sub_1D7AAF6EC(0, (unint64_t *)&unk_1F014F770);
  v11 = sub_1D7B4A4AC();

  if (v11 >> 62)
  {
LABEL_39:
    swift_bridgeObjectRetain();
    v12 = sub_1D7B4A8A8();
    swift_bridgeObjectRelease();
    if (v12)
      goto LABEL_10;
    goto LABEL_17;
  }
  v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v12)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    goto LABEL_49;
  }
LABEL_10:
  v13 = 0;
  v14 = &selRef_setViewControllers_animated_;
  while (1)
  {
    v15 = (v11 & 0xC000000000000001) != 0
        ? (id)MEMORY[0x1D829E758](v13, v11)
        : *(id *)(v11 + 8 * v13 + 32);
    v16 = (uint64_t)v15;
    if (swift_dynamicCastObjCProtocolConditional())
      break;

    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    ++v13;
    if (v17 == v12)
      goto LABEL_17;
  }
  swift_bridgeObjectRelease();

  v18 = objc_msgSend(v1, sel_viewControllers);
  v19 = sub_1D7B4A4AC();

  if ((v19 & 0xC000000000000001) != 0)
  {
    v20 = (id)MEMORY[0x1D829E758](v13, v19);
  }
  else
  {
    if ((unint64_t)v13 >= *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_43;
    }
    v20 = *(id *)(v19 + 8 * v13 + 32);
  }
  v18 = v20;
  swift_bridgeObjectRelease();
  v21 = swift_dynamicCastObjCProtocolConditional();
  if (!v21)
  {

    goto LABEL_49;
  }
  v19 = v21;
  v14 = (char **)(v13 - 1);
  v22 = objc_msgSend(v1, sel_viewControllers);
  v16 = sub_1D7B4A4AC();

  if ((v16 & 0xC000000000000001) == 0)
  {
    if (v13 < 1)
    {
      __break(1u);
    }
    else if ((unint64_t)v14 < *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v23 = *(id *)(v16 + 8 * v13 + 24);
      goto LABEL_28;
    }
    __break(1u);
    goto LABEL_46;
  }
LABEL_43:
  v23 = (id)MEMORY[0x1D829E758](v14, v16);
LABEL_28:
  v24 = v23;
  swift_bridgeObjectRelease();
  v16 = (uint64_t)objc_msgSend(objc_allocWithZone((Class)HKNavigationController), sel_init);
  v25 = objc_msgSend(v1, sel_popToViewController_animated_, v24, 0);
  if (!v25)
  {
LABEL_48:
    objc_msgSend((id)v19, sel_viewControllerWillEnterAdaptiveModal);
    v31 = (id)v16;
    objc_msgSend(v31, sel_setModalPresentationStyle_, objc_msgSend((id)v19, sel_modalPresentationStyle));

    objc_msgSend(v1, sel_presentViewController_animated_completion_, v31, 0, 0);
    goto LABEL_49;
  }
  v26 = v25;
  v10 = sub_1D7B4A4AC();

  v32 = v24;
  if (v10 >> 62)
  {
LABEL_46:
    swift_bridgeObjectRetain();
    v27 = sub_1D7B4A8A8();
    if (v27)
      goto LABEL_31;
LABEL_47:
    swift_bridgeObjectRelease_n();
    v24 = v32;
    goto LABEL_48;
  }
  v27 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v27)
    goto LABEL_47;
LABEL_31:
  if (v27 >= 1)
  {
    for (i = 0; i != v27; ++i)
    {
      if ((v10 & 0xC000000000000001) != 0)
        v29 = (id)MEMORY[0x1D829E758](i, v10);
      else
        v29 = *(id *)(v10 + 8 * i + 32);
      v30 = v29;
      objc_msgSend((id)v16, sel_pushViewController_animated_, v29, 0);

    }
    goto LABEL_47;
  }
  __break(1u);
LABEL_51:
  __break(1u);
}

Swift::Void __swiftcall HKNavigationController.reparentModalToPushIfPossible()()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  unint64_t v11;
  id v12;
  void *v13;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  unint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  id v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  id v28;
  void *v29;
  uint64_t v30;
  id v31;
  id v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _QWORD v36[3];
  uint64_t v37;
  uint64_t v38;

  v1 = v0;
  v2 = objc_msgSend(v0, sel_presentedViewController);
  if (v2)
  {
    v31 = v2;
    v3 = objc_msgSend(v2, sel_presentedViewController);

    if (v3)
    {

      return;
    }
    v4 = objc_msgSend(v1, sel_splitViewController);
    if (v4 && (v32 = v4, sub_1D7AAF6EC(0, &qword_1F014EA50), sub_1D7AE86F0(), (swift_dynamicCast() & 1) != 0))
    {
      if (*((_QWORD *)&v34 + 1))
      {
        sub_1D7AE9B70(&v33, (uint64_t)v36);
        v5 = v37;
        v6 = v38;
        __swift_project_boxed_opaque_existential_0(v36, v37);
        if (((*(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 8))(v1, v5, v6) & 1) == 0)
        {

          goto LABEL_54;
        }
        *(_QWORD *)&v33 = MEMORY[0x1E0DEE9D8];
        if (swift_dynamicCastObjCProtocolConditional())
        {
          v7 = v31;
          MEMORY[0x1D829E3EC]();
          if (*(_QWORD *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_1D7B4A4C4();
          sub_1D7B4A4DC();
          sub_1D7B4A4B8();
          goto LABEL_12;
        }
        objc_opt_self();
        v15 = swift_dynamicCastObjCClass();
        if (v15)
        {
          v16 = (void *)v15;
          v17 = v31;
          v18 = objc_msgSend(v16, sel_viewControllers);
          sub_1D7AAF6EC(0, (unint64_t *)&unk_1F014F770);
          v19 = sub_1D7B4A4AC();

          if (v19 >> 62)
          {
            swift_bridgeObjectRetain();
            v30 = sub_1D7B4A8A8();
            swift_bridgeObjectRelease();
            if (v30)
              goto LABEL_30;
          }
          else if (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
LABEL_30:
            if ((v19 & 0xC000000000000001) != 0)
            {
              v20 = (id)MEMORY[0x1D829E758](0, v19);
            }
            else
            {
              if (!*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
LABEL_57:
                __break(1u);
                return;
              }
              v20 = *(id *)(v19 + 32);
            }
            v21 = v20;
            swift_bridgeObjectRelease();
            v22 = swift_dynamicCastObjCProtocolConditional();

            if (v22)
            {
              v23 = objc_msgSend(v16, sel_viewControllers);
              v24 = sub_1D7B4A4AC();

              sub_1D7AE80EC(v24);
            }

            goto LABEL_12;
          }

          swift_bridgeObjectRelease();
        }
LABEL_12:
        v8 = v33;
        v9 = (unint64_t)v33 >> 62;
        if ((unint64_t)v33 >> 62)
          goto LABEL_39;
        v10 = v31;
        if (*(_QWORD *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          objc_msgSend(v31, sel_dismissViewControllerAnimated_completion_, 0, 0);
          v11 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain_n();
          if (v11)
          {
            while (!__OFSUB__(v11--, 1))
            {
              if ((v8 & 0xC000000000000001) != 0)
              {
                v12 = (id)MEMORY[0x1D829E758](v11, v8);
LABEL_17:
                v13 = v12;
                v32 = v12;
                sub_1D7AE963C(&v32);

                if (!v11)
                  goto LABEL_41;
              }
              else
              {
                if ((v11 & 0x8000000000000000) != 0)
                  goto LABEL_37;
                if (v11 < *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
                {
                  v12 = *(id *)(v8 + 32 + 8 * v11);
                  goto LABEL_17;
                }
LABEL_38:
                __break(1u);
LABEL_39:
                swift_bridgeObjectRetain();
                v25 = sub_1D7B4A8A8();
                swift_bridgeObjectRelease();
                v10 = v31;
                if (!v25)
                  goto LABEL_49;
                objc_msgSend(v31, sel_dismissViewControllerAnimated_completion_, 0, 0);
                swift_bridgeObjectRetain_n();
                v11 = sub_1D7B4A8A8();
                if (!v11)
                  goto LABEL_41;
              }
            }
            __break(1u);
LABEL_37:
            __break(1u);
            goto LABEL_38;
          }
LABEL_41:
          swift_bridgeObjectRelease_n();
          if (v9)
          {
            swift_bridgeObjectRetain_n();
            v26 = sub_1D7B4A8A8();
            if (v26)
            {
LABEL_43:
              if (v26 >= 1)
              {
                for (i = 0; i != v26; ++i)
                {
                  if ((v8 & 0xC000000000000001) != 0)
                    v28 = (id)MEMORY[0x1D829E758](i, v8);
                  else
                    v28 = *(id *)(v8 + 8 * i + 32);
                  v29 = v28;
                  objc_msgSend(v1, sel_pushViewController_animated_, v28, 0);

                }
                goto LABEL_53;
              }
              goto LABEL_57;
            }
          }
          else
          {
            v26 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain_n();
            if (v26)
              goto LABEL_43;
          }
LABEL_53:

          swift_bridgeObjectRelease_n();
          goto LABEL_54;
        }
LABEL_49:

        swift_bridgeObjectRelease();
LABEL_54:
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v36);
        return;
      }
    }
    else
    {
      v35 = 0;
      v33 = 0u;
      v34 = 0u;
    }

    sub_1D7AE9AE0((uint64_t)&v33);
  }
}

void sub_1D7AE963C(id *a1)
{
  id v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  char v8;
  id v9;
  unint64_t v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;

  v1 = *a1;
  v2 = objc_msgSend(*a1, sel_navigationController);
  if (!v2)
    goto LABEL_12;
  v3 = v2;
  v4 = objc_msgSend(v2, sel_topViewController);
  if (!v4)
    goto LABEL_11;
  v5 = v4;
  sub_1D7AAF6EC(0, (unint64_t *)&unk_1F014F770);
  v6 = v1;
  v7 = v5;
  v8 = sub_1D7B4A6E0();

  if ((v8 & 1) == 0)
  {
LABEL_11:

LABEL_12:
    objc_msgSend(v1, sel_dismissViewControllerAnimated_completion_, 0, 0);
    goto LABEL_13;
  }
  v9 = objc_msgSend(v3, sel_viewControllers);
  v10 = sub_1D7B4A4AC();

  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    v17 = sub_1D7B4A8A8();
    swift_bridgeObjectRelease();
    if (v17)
    {
LABEL_6:
      if ((v10 & 0xC000000000000001) != 0)
      {
        v11 = (id)MEMORY[0x1D829E758](0, v10);
      }
      else
      {
        if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        v11 = *(id *)(v10 + 32);
      }
      v12 = v11;
      swift_bridgeObjectRelease();
      v13 = v6;
      v14 = v12;
      LOBYTE(v12) = sub_1D7B4A6E0();

      if ((v12 & 1) != 0)
      {
        v15 = (void *)sub_1D7B4A4A0();
        objc_msgSend(v3, sel_setViewControllers_animated_, v15, 0);

        goto LABEL_13;
      }
      goto LABEL_18;
    }
  }
  else if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
LABEL_18:

LABEL_13:
  v16 = (void *)swift_dynamicCastObjCProtocolConditional();
  if (v16)
    objc_msgSend(v16, sel_viewControllerDidLeaveAdaptiveModal);
}

uint64_t (*sub_1D7AE9880(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1D7AE9A00(v6, a2, a3);
  return sub_1D7AE98D4;
}

uint64_t (*sub_1D7AE98D8(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1D7AE9A74(v6, a2, a3);
  return sub_1D7AE98D4;
}

uint64_t (*sub_1D7AE992C(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1D7AE9B90(v6, a2, a3);
  return sub_1D7AE98D4;
}

uint64_t (*sub_1D7AE9980(void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1D7AE9BFC(v6, a2, a3);
  return sub_1D7AE98D4;
}

void sub_1D7AE99D4(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*sub_1D7AE9A00(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x1D829E758](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_unknownObjectRetain();
LABEL_5:
    *v3 = v4;
    return sub_1D7AE9A6C;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D7AE9A6C()
{
  return swift_unknownObjectRelease();
}

uint64_t (*sub_1D7AE9A74(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v3)();
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x1D829E758](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_1D7AE9CD4;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D7AE9AE0(uint64_t a1)
{
  uint64_t v2;

  sub_1D7AE9B1C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1D7AE9B1C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014EA70)
  {
    sub_1D7AE86F0();
    v0 = sub_1D7B4A6F8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014EA70);
  }
}

uint64_t sub_1D7AE9B70(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t dispatch thunk of HKAdaptiveReparentingManager.shouldReparent(viewController:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t (*sub_1D7AE9B90(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x1D829E758](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_unknownObjectRetain();
LABEL_5:
    *v3 = v4;
    return sub_1D7AE9CD0;
  }
  __break(1u);
  return result;
}

void (*sub_1D7AE9BFC(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x1D829E758](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_1D7AE9C68;
  }
  __break(1u);
  return result;
}

void sub_1D7AE9C68(id *a1)
{

}

void sub_1D7AE9C70(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = sub_1D7AAF6EC(255, a3);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

id sub_1D7AE9CD8(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  id result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  double v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int64_t v24;
  int v25;
  uint64_t v26;
  id v27;
  uint64_t v28;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (!v1)
    return (id)v2;
  v3 = a1;
  v28 = MEMORY[0x1E0DEE9D8];
  sub_1D7AA5FC8(0, v1, 0);
  v2 = v28;
  result = (id)sub_1D7AEAA8C(v3);
  v6 = (uint64_t)result;
  v7 = 0;
  v8 = v3 + 64;
  v23 = v3 + 80;
  v24 = v1;
  v25 = v5;
  v26 = v3 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(v3 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(v3 + 36) != v5)
      goto LABEL_24;
    v12 = *(double *)(*(_QWORD *)(v3 + 56) + 8 * v6);
    v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedInteger_, *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v6));
    result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithDouble_, v12);
    v13 = result;
    v14 = v3;
    v16 = *(_QWORD *)(v28 + 16);
    v15 = *(_QWORD *)(v28 + 24);
    if (v16 >= v15 >> 1)
      result = (id)sub_1D7AA5FC8(v15 > 1, v16 + 1, 1);
    *(_QWORD *)(v28 + 16) = v16 + 1;
    v17 = v28 + 16 * v16;
    *(_QWORD *)(v17 + 32) = v27;
    *(_QWORD *)(v17 + 40) = v13;
    v9 = 1 << *(_BYTE *)(v14 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = v26;
    v18 = *(_QWORD *)(v26 + 8 * v11);
    if ((v18 & (1 << v6)) == 0)
      goto LABEL_26;
    v3 = v14;
    v5 = v25;
    if (*(_DWORD *)(v14 + 36) != v25)
      goto LABEL_27;
    v19 = v18 & (-2 << (v6 & 0x3F));
    if (v19)
    {
      v9 = __clz(__rbit64(v19)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v24;
    }
    else
    {
      v20 = v11 + 1;
      v21 = (unint64_t)(v9 + 63) >> 6;
      v10 = v24;
      if (v11 + 1 < v21)
      {
        v22 = *(_QWORD *)(v26 + 8 * v20);
        if (v22)
        {
LABEL_20:
          v9 = __clz(__rbit64(v22)) + (v20 << 6);
        }
        else
        {
          while (v21 - 2 != v11)
          {
            v22 = *(_QWORD *)(v23 + 8 * v11++);
            if (v22)
            {
              v20 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v7;
    v6 = v9;
    if (v7 == v10)
      return (id)v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

double CLKDevice.scaledValue(_:overrides:)(uint64_t a1, double a2)
{
  return sub_1D7AE9FC4(a1, (SEL *)&selRef_scaledValue_withOverrides_, a2);
}

void sub_1D7AE9F30()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1F014EE30)
  {
    sub_1D7AA7AD0();
    sub_1D7AA76D4((unint64_t *)&qword_1F014D410, (uint64_t (*)(uint64_t))sub_1D7AA7AD0, MEMORY[0x1E0DEFCF8]);
    v0 = sub_1D7B4A8D8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1F014EE30);
  }
}

double CLKDevice.scaledValueFromPixels(_:overrides:)(uint64_t a1)
{
  return sub_1D7AEA12C(a1, (double (*)(void))CLKDevice.scaledValue(_:overrides:));
}

double CLKDevice.constantValue(_:overrides:)(uint64_t a1, double a2)
{
  return sub_1D7AE9FC4(a1, (SEL *)&selRef_constantValue_withOverrides_, a2);
}

double sub_1D7AE9FC4(uint64_t a1, SEL *a2, double a3)
{
  uint64_t v3;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  double v11;
  double v12;
  uint64_t v14;

  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C944C0]), sel_initWithDevice_identitySizeClass_, v3, 2);
  if (*((_QWORD *)sub_1D7AE9CD8(a1) + 2))
  {
    sub_1D7AE9F30();
    v8 = sub_1D7B4A8CC();
  }
  else
  {
    v8 = MEMORY[0x1E0DEE9E0];
  }
  v14 = v8;
  v9 = (_QWORD *)swift_bridgeObjectRetain();
  sub_1D7AEA714(v9, 1, &v14);
  swift_bridgeObjectRelease();
  sub_1D7AA7AD0();
  sub_1D7AA76D4((unint64_t *)&qword_1F014D410, (uint64_t (*)(uint64_t))sub_1D7AA7AD0, MEMORY[0x1E0DEFCF8]);
  v10 = (void *)sub_1D7B4A230();
  swift_release();
  objc_msgSend(v7, *a2, v10, a3);
  v12 = v11;

  return v12;
}

double CLKDevice.constantValueFromPixels(_:overrides:)(uint64_t a1)
{
  return sub_1D7AEA12C(a1, (double (*)(void))CLKDevice.constantValue(_:overrides:));
}

double sub_1D7AEA12C(uint64_t a1, double (*a2)(void))
{
  void *v2;
  double v3;
  double v4;

  v3 = a2();
  objc_msgSend(v2, sel_screenScale);
  return v3 / v4;
}

uint64_t CLKDevice.specificValue<A>(_:overrides:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1D7AEA1A8(a1, a2, a3, (SEL *)&selRef_sizeClass, (uint64_t (*)(uint64_t))type metadata accessor for CLKDeviceSizeClass, &qword_1F014EA78, (uint64_t)&unk_1D7B833A4, a4);
}

uint64_t CLKDevice.deviceValue<A>(_:overrides:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1D7AEA1A8(a1, a2, a3, (SEL *)&selRef_productFamilyType, (uint64_t (*)(uint64_t))type metadata accessor for CLKDeviceProductFamilyType, &qword_1F014EA80, (uint64_t)&unk_1D7B83364, a4);
}

uint64_t sub_1D7AEA1A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, SEL *a4@<X3>, uint64_t (*a5)(uint64_t)@<X4>, unint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  void *v8;
  void *v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;

  v13 = v8;
  v25 = a1;
  v26 = a8;
  v16 = sub_1D7B4A6F8();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v24 - v18;
  v27 = objc_msgSend(v13, *a4);
  v20 = a5(0);
  v21 = sub_1D7AA76D4(a6, a5, a7);
  MEMORY[0x1D829E1DC](&v27, a2, v20, a3, v21);
  v22 = *(_QWORD *)(a3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v19, 1, a3) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v22 + 32))(v26, v19, a3);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v26, v25, a3);
}

uint64_t CLKDevice.deviceValue<A>(_:overrides:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  uint64_t (*v44)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  char *v48;
  _QWORD v49[2];
  _QWORD *v50;
  char *v51;
  uint64_t v52;
  unsigned int (*v53)(char *, uint64_t, uint64_t);
  uint64_t v54;
  _QWORD *v55;

  v5 = v4;
  v50 = a1;
  v51 = a4;
  v8 = sub_1D7B4A6F8();
  v52 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)v49 - v13;
  v15 = *(_QWORD **)(a3 - 8);
  v16 = MEMORY[0x1E0C80A78](v12);
  v18 = (char *)v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v53 = (unsigned int (*)(char *, uint64_t, uint64_t))((char *)v49 - v19);
  v20 = objc_msgSend(v5, sel_productFamilyType);
  v55 = v20;
  type metadata accessor for CLKDeviceProductFamilyType(0);
  v22 = v21;
  v23 = sub_1D7AA76D4(&qword_1F014EA80, (uint64_t (*)(uint64_t))type metadata accessor for CLKDeviceProductFamilyType, (uint64_t)&unk_1D7B83364);
  MEMORY[0x1D829E1DC](&v55, a2, v22, a3, v23);
  v24 = (unsigned int (*)(char *, uint64_t, uint64_t))v15[6];
  if (v24(v14, 1, a3) == 1)
  {
    v49[0] = v15;
    v52 = *(_QWORD *)(v52 + 8);
    v53 = v24;
    ((void (*)(char *, uint64_t))v52)(v14, v8);
    v25 = v50;
    v55 = v50;
    v26 = sub_1D7B4A254();
    v49[1] = MEMORY[0x1D829FF28](MEMORY[0x1E0DE9ED0], v26);
    sub_1D7AA76D4(&qword_1F014EA88, (uint64_t (*)(uint64_t))type metadata accessor for CLKDeviceProductFamilyType, (uint64_t)&protocol conformance descriptor for CLKDeviceProductFamilyType);
    v54 = sub_1D7B4A470();
    sub_1D7AEAB14();
    MEMORY[0x1D829FF28](MEMORY[0x1E0DEAF20], v27);
    result = sub_1D7B4A2CC();
    v29 = v55;
    v30 = v55[2];
    if (v30)
    {
      v31 = v25;
      v32 = v22;
      v33 = v23;
      v34 = v30 + 3;
      while ((unint64_t)(v34 - 4) < v29[2])
      {
        v35 = v29[v34];
        if (v20 == (_QWORD *)-1 || (v35 != -1 ? (v36 = (uint64_t)v20 < v35) : (v36 = 1), !v36))
        {
          v37 = v18;
          v55 = (_QWORD *)v29[v34];
          v38 = v31;
          v39 = v32;
          v40 = v33;
          MEMORY[0x1D829E1DC](&v55);
          if (v53(v11, 1, a3) != 1)
          {
            swift_bridgeObjectRelease();
            v46 = v49[0];
            v47 = *(void (**)(char *, char *, uint64_t))(v49[0] + 32);
            v47(v37, v11, a3);
            v48 = v51;
            v47(v51, v37, a3);
            v44 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v46 + 56);
            v45 = v48;
            return v44((uint64_t)v45, 0, 1, a3);
          }
          result = ((uint64_t (*)(char *, uint64_t))v52)(v11, v8);
          v31 = v38;
          v18 = v37;
          v32 = v39;
          v33 = v40;
        }
        if (--v34 == 3)
          goto LABEL_17;
      }
      __break(1u);
    }
    else
    {
LABEL_17:
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v49[0] + 56))(v51, 1, 1, a3);
    }
  }
  else
  {
    v41 = v51;
    v42 = (void (*)(char *, char *, uint64_t))v15[4];
    v43 = (char *)v53;
    v42((char *)v53, v14, a3);
    v42(v41, v43, a3);
    v44 = (uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v15[7];
    v45 = v41;
    return v44((uint64_t)v45, 0, 1, a3);
  }
  return result;
}

