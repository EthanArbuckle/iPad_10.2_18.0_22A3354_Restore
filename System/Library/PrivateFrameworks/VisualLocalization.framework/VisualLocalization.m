void sub_210B27D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,id a56)
{
  void *v56;
  void *v57;
  void *v58;
  void *v59;

  _Block_object_dispose(&a51, 8);
  _Unwind_Resume(a1);
}

void sub_210B28178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_210B2844C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_210B288FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  void *v30;
  void *v31;
  id *v32;
  uint64_t v33;

  objc_destroyWeak(v32);

  objc_destroyWeak((id *)(v33 - 112));
  _Block_object_dispose(&a25, 8);

  _Block_object_dispose((const void *)(v33 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_210B28A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_210B28A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_210B28D80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_210B28F8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_210B29C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void ___ZL20VLGetTileProviderLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.VisualLocalization", "TileProvider");
  v1 = (void *)_MergedGlobals_1;
  _MergedGlobals_1 = (uint64_t)v0;

}

float64x2_t VLECEFFromCoordinate@<Q0>(float64x2_t *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>)
{
  __double2 v7;
  float64x2_t v8;
  __double2 v9;
  double v10;
  float64x2_t result;

  v7 = __sincos_stret(a2 * 0.0174532925);
  v9 = __sincos_stret(a3 * 0.0174532925);
  v8.f64[0] = v9.__cosval;
  v10 = 6378137.0 / sqrt(v7.__sinval * -0.00669437999 * v7.__sinval + 1.0);
  v8.f64[1] = v9.__sinval;
  result = vmulq_n_f64(v8, v7.__cosval * (a4 + v10));
  v8.f64[0] = v7.__sinval * (a4 + v10 * 0.99330562);
  *a1 = result;
  a1[1] = v8;
  return result;
}

double VLCoordinateFromECEF(float64x2_t *a1)
{
  float64x2_t v1;
  long double v2;
  double v3;
  double v4;
  double v5;
  unsigned int v6;
  double v7;
  double v9;
  __double2 v10;
  double v11;
  double v12;
  double v14;
  float64x2_t v15;
  long double __y;

  v1 = *a1;
  v2 = a1->f64[1];
  v3 = sqrt(vmlad_n_f64(vmuld_lane_f64(v2, *a1, 1), v1.f64[0], v1.f64[0]));
  v4 = v3 * 0.99330562;
  v5 = 1.57079633;
  if (v3 * 0.99330562 != 0.0)
  {
    v14 = a1->f64[1];
    v15 = *a1;
    v6 = 0;
    __y = a1[1].f64[0];
    v5 = 0.0;
    v7 = 0.0;
    do
    {
      v9 = v5;
      v5 = atan2(__y, v4);
      v10 = __sincos_stret(v5);
      v11 = 6378137.0 / sqrt(v10.__sinval * -0.00669437999 * v10.__sinval + 1.0);
      v12 = v3 / v10.__cosval - v11;
      if (vabdd_f64(v9, v5) < 0.000001)
      {
        if (vabdd_f64(v7, v12) < 0.001 || v6 >= 9)
        {
LABEL_10:
          v1.f64[0] = v15.f64[0];
          v2 = v14;
          goto LABEL_12;
        }
      }
      else if (v6 > 8)
      {
        goto LABEL_10;
      }
      ++v6;
      v4 = v3 * (v11 / (v11 + v12) * -0.00669437999 + 1.0);
      v7 = v3 / v10.__cosval - v11;
    }
    while (v4 != 0.0);
    v1.f64[0] = v15.f64[0];
    v5 = 1.57079633;
    v2 = v14;
  }
LABEL_12:
  atan2(v2, v1.f64[0]);
  return v5 / 0.0174532925;
}

long double VLHeadingForTransform(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7, float64x2_t a8)
{
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  __int128 v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  double v33;
  double v34;
  float64x2_t v35;
  double v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  double v43;
  int8x16_t v44;
  int64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  int64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  double v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  int8x16_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  double v96;

  v9 = *(float64x2_t *)(a1 + 96);
  v10 = *(float64x2_t *)(a1 + 112);
  v11 = vmulq_f64(v10, v10);
  v11.f64[0] = 1.0 / sqrt(v11.f64[0] + vaddvq_f64(vmulq_f64(v9, v9)));
  v12 = vmulq_f64(v10, v11);
  v13 = vmulq_n_f64(v9, v11.f64[0]);
  v14 = (float64x2_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL);
  a8.f64[0] = -*(double *)(a1 + 16);
  v15 = vnegq_f64(*(float64x2_t *)a1);
  v16 = (float64x2_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL);
  v18 = *(float64x2_t *)(a1 + 32);
  v17 = *(_OWORD *)(a1 + 48);
  if (vmulq_f64(a8, v12).f64[0] + vaddvq_f64(vmulq_f64(v15, v13)) >= 0.0)
  {
    v51 = vaddq_f64(v15, v13);
    v52 = vaddq_f64(a8, v12);
    v8.f64[0] = 1.0 / sqrt(vmulq_f64(v52, v52).f64[0] + vaddvq_f64(vmulq_f64(v51, v51)));
    v53 = vmulq_n_f64(v51, v8.f64[0]);
    v54 = vmulq_f64(v52, v8);
    v55.f64[0] = -*(double *)(a1 + 16);
    v55.f64[1] = v15.f64[0];
    v15.f64[1] = v16.f64[0];
    *(_QWORD *)&v50.f64[0] = *(_OWORD *)&vmlaq_f64(vmulq_laneq_f64(vnegq_f64(a8), v53, 1), v54, v16);
    v56.f64[0] = v54.f64[0];
    v56.f64[1] = v53.f64[0];
    v57 = (int64x2_t)vmlaq_f64(vmulq_f64(v56, vnegq_f64(v15)), v53, v55);
    *(_QWORD *)&v50.f64[1] = v57.i64[0];
    *(_QWORD *)&v49.f64[0] = vdupq_laneq_s64(v57, 1).u64[0];
    v49.f64[1] = vmulq_f64(a8, v54).f64[0] + vaddvq_f64(vmulq_f64(v15, v53));
  }
  else
  {
    v19.f64[0] = v15.f64[0];
    v19.f64[1] = v16.f64[0];
    v20 = vmulq_f64(v19, v19);
    v20.f64[0] = 1.0 / sqrt(vmulq_f64(a8, a8).f64[0] + vaddvq_f64(v20));
    v21.f64[0] = v13.f64[0];
    v21.f64[1] = v14.f64[0];
    v8.f64[0] = 1.0 / sqrt(vmulq_f64(v12, v12).f64[0] + vaddvq_f64(vmulq_f64(v21, v21)));
    v22 = vmulq_f64(v12, v8);
    v23 = vaddq_f64(vmulq_n_f64(v19, v20.f64[0]), vmulq_n_f64(v21, v8.f64[0]));
    v24 = vaddq_f64(vmulq_f64(a8, v20), v22);
    v25 = vmulq_f64(v23, v23);
    v25.f64[0] = vmulq_f64(v24, v24).f64[0] + vaddvq_f64(v25);
    if (v25.f64[0] <= 4.93038066e-32)
    {
      v77.f64[0] = v15.f64[0];
      v77.f64[1] = v16.f64[0];
      v78 = vabsq_f64(v77);
      v79 = vabsq_f64(a8);
      if (v78.f64[0] > v78.f64[1] || v78.f64[0] > v79.f64[0])
      {
        if (v78.f64[1] <= v79.f64[0])
        {
          v92.f64[0] = v15.f64[0];
          v92.f64[1] = v16.f64[0];
          v93 = vmulq_f64(v92, (float64x2_t)vdupq_n_s64(0x8000000000000000));
          v85 = vnegq_f64(a8);
          a8.f64[1] = v15.f64[0];
          v86 = vmlaq_f64(v93, (float64x2_t)xmmword_210BCA930, a8);
          _Q6 = 0uLL;
        }
        else
        {
          v79.f64[0] = -0.0;
          v84.f64[0] = v15.f64[0];
          v84.f64[1] = v16.f64[0];
          v85 = vmulq_f64(a8, v79);
          a8.f64[1] = v15.f64[0];
          v86 = vmlaq_f64(vmulq_f64(v84, (float64x2_t)xmmword_210BCA940), (float64x2_t)0, a8);
          __asm { FMOV            V6.2D, #1.0 }
        }
        v94 = vmlaq_f64(v85, _Q6, v16);
        v95 = vmulq_f64(v86, v86);
        v96 = vmulq_f64(v94, v94).f64[0];
        v94.f64[1] = v86.f64[0];
        v95.f64[0] = 1.0 / sqrt(v95.f64[1] + v96 + v95.f64[0]);
        v50 = vmulq_n_f64(v94, v95.f64[0]);
        v49 = (float64x2_t)(unint64_t)*(_OWORD *)&vmulq_laneq_f64(v95, v86, 1);
      }
      else
      {
        v80.f64[0] = -*(double *)(a1 + 16);
        v80.f64[1] = v15.f64[0];
        v15.f64[1] = v16.f64[0];
        v24.f64[0] = -0.0;
        v81 = vmlaq_f64(vmulq_f64(v15, (float64x2_t)xmmword_210BCA950), (float64x2_t)xmmword_210BCA960, v80);
        v82 = vmlaq_f64(vmulq_f64(a8, v24), (float64x2_t)0, v16);
        v83 = vmulq_f64(v81, v81);
        v80.f64[0] = vmulq_f64(v82, v82).f64[0];
        v82.f64[1] = v81.f64[0];
        v83.f64[0] = 1.0 / sqrt(v83.f64[1] + v80.f64[0] + v83.f64[0]);
        v50 = vmulq_n_f64(v82, v83.f64[0]);
        v49 = (float64x2_t)(unint64_t)*(_OWORD *)&vmulq_laneq_f64(v83, v81, 1);
      }
    }
    else
    {
      v25.f64[0] = 1.0 / sqrt(v25.f64[0]);
      *(_QWORD *)&v23.f64[1] = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u64[0];
      v26 = vmulq_f64(v24, v25);
      v27 = vmulq_n_f64(v23, v25.f64[0]);
      v28 = vaddq_f64(v15, v27);
      v29 = vaddq_f64(a8, v26);
      v30 = vmulq_f64(v29, v29);
      v30.f64[0] = 1.0 / sqrt(v30.f64[0] + vaddvq_f64(vmulq_f64(v28, v28)));
      v31 = vmulq_n_f64(v28, v30.f64[0]);
      v32 = vmulq_f64(v29, v30);
      v30.f64[0] = -*(double *)(a1 + 16);
      v30.f64[1] = v15.f64[0];
      v15.f64[1] = v16.f64[0];
      *(_QWORD *)&v33 = *(_OWORD *)&vmlaq_f64(vmulq_laneq_f64(vnegq_f64(a8), v31, 1), v32, v16);
      v34 = vmulq_f64(a8, v32).f64[0];
      v32.f64[1] = v31.f64[0];
      v35 = vmlaq_f64(vmulq_f64(v32, vnegq_f64(v15)), v31, v30);
      v36 = v34 + vaddvq_f64(vmulq_f64(v15, v31));
      v37 = vaddq_f64(v13, v27);
      v38 = vaddq_f64(v12, v26);
      v39 = vmulq_f64(v38, v38);
      v39.f64[0] = 1.0 / sqrt(v39.f64[0] + vaddvq_f64(vmulq_f64(v37, v37)));
      v40 = vmulq_n_f64(v37, v39.f64[0]);
      v41 = vmulq_f64(v38, v39);
      v42 = vnegq_f64(v26);
      v43 = vmulq_f64(v26, v41).f64[0];
      v26.f64[1] = v27.f64[0];
      v44 = (int8x16_t)vmlaq_laneq_f64(vmulq_laneq_f64(v42, v40, 1), v41, v27, 1);
      v41.f64[1] = v40.f64[0];
      v45 = (int64x2_t)vmlaq_f64(vmulq_f64(v41, vnegq_f64(v27)), v40, v26);
      *(_QWORD *)&v26.f64[0] = v44.i64[0];
      *(_QWORD *)&v26.f64[1] = v45.i64[0];
      v40.f64[0] = vaddvq_f64(vmulq_f64(v27, v40));
      *(_QWORD *)&v27.f64[0] = vdupq_laneq_s64(v45, 1).u64[0];
      v27.f64[1] = v43 + v40.f64[0];
      v46 = vnegq_f64(v26);
      v47 = (float64x2_t)vextq_s8((int8x16_t)v27, (int8x16_t)vnegq_f64(v27), 8uLL);
      v48 = vmlaq_laneq_f64(vmulq_n_f64(v26, v36), (float64x2_t)vextq_s8((int8x16_t)v46, v44, 8uLL), v35, 1);
      v49 = vaddq_f64(vmlaq_laneq_f64(vmulq_n_f64(v27, v36), v47, v35, 1), vmlaq_n_f64(vmulq_n_f64(v46, v35.f64[0]), (float64x2_t)vzip1q_s64(v45, (int64x2_t)v46), v33));
      v50 = vaddq_f64(v48, vmlaq_n_f64(vmulq_n_f64(v27, v35.f64[0]), v47, v33));
    }
  }
  v58.f64[0] = v12.f64[0];
  v58.f64[1] = v13.f64[0];
  v13.f64[1] = v14.f64[0];
  v59 = vmlaq_f64(vmulq_f64(v58, (float64x2_t)vdupq_n_s64(0x8000000000000000)), (float64x2_t)xmmword_210BCA960, v13);
  v60 = vmlaq_f64(vnegq_f64(v14), (float64x2_t)0, v12);
  v61 = vmulq_f64(v59, v59);
  v62 = vmulq_f64(v60, v60).f64[0];
  v60.f64[1] = v59.f64[0];
  v61.f64[0] = 1.0 / sqrt(v61.f64[1] + v62 + v61.f64[0]);
  v63 = vmulq_n_f64(v60, v61.f64[0]);
  v64 = vmulq_laneq_f64(v61, v59, 1);
  *(_QWORD *)&v65.f64[0] = *(_OWORD *)&vmlaq_f64(vmulq_laneq_f64(vnegq_f64(v12), v63, 1), v64, v14);
  v66 = vmulq_f64(v49, (float64x2_t)xmmword_210BCA970);
  v67 = (int8x16_t)vnegq_f64(v50);
  v68 = (float64x2_t)vextq_s8((int8x16_t)v66, (int8x16_t)vnegq_f64(v66), 8uLL);
  v69 = vmlaq_n_f64(vmlaq_n_f64(vmulq_laneq_f64(v50, v18, 1), (float64x2_t)vextq_s8(v67, (int8x16_t)v50, 8uLL), v18.f64[0]), v68, *(double *)&v17);
  v70 = vmlaq_n_f64(vmlaq_n_f64(vmulq_laneq_f64(v66, v18, 1), v68, v18.f64[0]), (float64x2_t)vextq_s8((int8x16_t)v50, v67, 8uLL), *(double *)&v17);
  v71 = vnegq_f64(v70);
  v72 = (float64x2_t)vextq_s8((int8x16_t)v69, (int8x16_t)vnegq_f64(v69), 8uLL);
  v73 = vaddq_f64(vmlaq_n_f64(vmulq_laneq_f64(v69, v49, 1), v72, v49.f64[0]), vmlaq_n_f64(vmulq_laneq_f64(v71, v50, 1), (float64x2_t)vextq_s8((int8x16_t)v70, (int8x16_t)v71, 8uLL), v50.f64[0]));
  v68.f64[0] = vmulq_f64(v64, v73).f64[0];
  v64.f64[1] = v63.f64[0];
  v74 = vmlaq_f64(vmulq_f64(v64, vnegq_f64(v13)), v63, v58);
  v65.f64[1] = v74.f64[0];
  v75 = vaddq_f64(vmlaq_n_f64(vmulq_laneq_f64(v70, v49, 1), (float64x2_t)vextq_s8((int8x16_t)v71, (int8x16_t)v70, 8uLL), v49.f64[0]), vmlaq_n_f64(vmulq_laneq_f64(v69, v50, 1), v72, v50.f64[0]));
  return (atan2(v68.f64[0] + vaddvq_f64(vmulq_f64(v63, v75)), vmulq_laneq_f64(v73, v74, 1).f64[0] + vaddvq_f64(vmulq_f64(v65, v75)))+ -1.57079633)* 180.0/ 3.14159265;
}

void VLLocationFromCLLocation(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  __double2 v10;
  __double2 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  int v17;
  double v18;
  int v19;
  int v20;

  v3 = a1;
  objc_msgSend(v3, "coordinate");
  v5 = v4;
  objc_msgSend(v3, "coordinate");
  v7 = v6;
  objc_msgSend(v3, "altitude");
  v9 = v8;
  v10 = __sincos_stret(v5 * 0.0174532925);
  v11 = __sincos_stret(v7 * 0.0174532925);
  v12 = 6378137.0 / sqrt(v10.__sinval * -0.00669437999 * v10.__sinval + 1.0);
  v13 = v10.__cosval * (v9 + v12);
  v14 = v11.__cosval * v13;
  v15 = v11.__sinval * v13;
  v16 = v10.__sinval * (v9 + v12 * 0.99330562);
  v17 = objc_msgSend(v3, "isCoordinateFused");
  *(double *)a2 = v14;
  *(double *)(a2 + 8) = v15;
  *(double *)(a2 + 16) = v16;
  objc_msgSend(v3, "horizontalAccuracy");
  *(float *)&v18 = v18;
  *(_DWORD *)(a2 + 24) = LODWORD(v18);
  *(_DWORD *)(a2 + 28) = v17;
  v19 = objc_msgSend(v3, "type");

  if ((v19 - 1) > 0xC)
    v20 = 0;
  else
    v20 = dword_210BCA980[v19 - 1];
  *(_DWORD *)(a2 + 32) = v20;
}

void sub_210B2D354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_210B2D36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

Class __getCIImageClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_253E9A208)
  {
    qword_253E9A208 = _sl_dlopen();
    if (!qword_253E9A208)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("CIImage");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  _MergedGlobals_0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getCIContextClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_253E9A208)
  {
    qword_253E9A208 = _sl_dlopen();
    if (!qword_253E9A208)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("CIContext");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  qword_253E9A210 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_210B300B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_210B30114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VLTileDataProvider;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void sub_210B302D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_210B302F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_210B3064C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_210B30700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_210B30718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_210B30798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_210B30D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  id *v30;
  uint64_t v31;
  id *v32;

  v32 = v30;
  objc_destroyWeak(v32);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v31 - 112), 8);
  _Block_object_dispose((const void *)(v31 - 192), 8);

  _Unwind_Resume(a1);
}

void sub_210B319EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;
  uint64_t v23;

  _Block_object_dispose((const void *)(v23 - 232), 8);
  _Unwind_Resume(a1);
}

_QWORD *std::list<VLLocalizationDataKey>::remove(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  void *__p;
  uint64_t v22;

  v20 = &v20;
  __p = &v20;
  v22 = 0;
  v2 = (_QWORD *)result[1];
  if (v2 != result)
  {
    if (&v20 == result)
    {
      do
      {
        v12 = (_QWORD *)v2[1];
        if (v2[2] == *(_QWORD *)a2 && v2[3] == *(_QWORD *)(a2 + 8))
        {
          if (v12 == result)
          {
            v14 = 1;
LABEL_34:
            v12 = result;
          }
          else
          {
            while (1)
            {
              v14 = *((_OWORD *)v12 + 1) == *(_OWORD *)a2;
              if (*((_OWORD *)v12 + 1) != *(_OWORD *)a2)
                break;
              v12 = (_QWORD *)v12[1];
              if (v12 == result)
                goto LABEL_34;
            }
          }
          if (v2 != v12)
          {
            v15 = *v12;
            v16 = *v2;
            *(_QWORD *)(v16 + 8) = *(_QWORD *)(*v12 + 8);
            **(_QWORD **)(v15 + 8) = v16;
            v17 = *result;
            *(_QWORD *)(v17 + 8) = v2;
            *v2 = v17;
            *result = v15;
            *(_QWORD *)(v15 + 8) = result;
          }
          if (!v14)
            v12 = (_QWORD *)v12[1];
        }
        v2 = v12;
      }
      while (v12 != result);
    }
    else
    {
      v3 = 0;
      v4 = &v20;
      do
      {
        v5 = (_QWORD *)v2[1];
        if (v2[2] == *(_QWORD *)a2 && v2[3] == *(_QWORD *)(a2 + 8))
        {
          if (v5 == result)
          {
            v7 = 1;
LABEL_15:
            v5 = result;
          }
          else
          {
            while (1)
            {
              v7 = *((_OWORD *)v5 + 1) == *(_OWORD *)a2;
              if (*((_OWORD *)v5 + 1) != *(_OWORD *)a2)
                break;
              v5 = (_QWORD *)v5[1];
              if (v5 == result)
                goto LABEL_15;
            }
          }
          if (v2 != v5)
          {
            v4 = (_QWORD *)*v5;
            v8 = 1;
            if ((_QWORD *)*v5 != v2)
            {
              v9 = v2;
              do
              {
                v9 = (_QWORD *)v9[1];
                ++v8;
              }
              while (v9 != v4);
            }
            result[2] -= v8;
            v3 += v8;
            v22 = v3;
            v10 = *v2;
            *(_QWORD *)(v10 + 8) = v4[1];
            *(_QWORD *)v4[1] = v10;
            v11 = v20;
            v20[1] = v2;
            *v2 = v11;
            v20 = v4;
            v4[1] = &v20;
          }
          if (!v7)
            v5 = (_QWORD *)v5[1];
        }
        v2 = v5;
      }
      while (v5 != result);
      if (v3)
      {
        result = __p;
        v18 = *(_QWORD *)__p;
        *(_QWORD *)(v18 + 8) = v4[1];
        *(_QWORD *)v4[1] = v18;
        v22 = 0;
        if (result != &v20)
        {
          do
          {
            v19 = (_QWORD *)result[1];
            operator delete(result);
            result = v19;
          }
          while (v19 != &v20);
        }
      }
    }
  }
  return result;
}

void sub_210B320B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  void *v22;
  id *v23;

  objc_destroyWeak(v23);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_210B322FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

uint64_t _vlTrackCallback(void *a1, _DWORD *a2, char **a3)
{
  void *v6;
  id v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  const char *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int v20;
  id v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v6 = (void *)MEMORY[0x212BCF144]();
  v7 = a1;
  if (v7)
  {
    a1 = v7;
    if (qword_253E9A288 == -1)
    {
      v8 = qword_253E9A280;
      if (!os_log_type_enabled((os_log_t)qword_253E9A280, OS_LOG_TYPE_DEBUG))
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT))
    {
      LOWORD(v22) = 0;
      _os_log_fault_impl(&dword_210B26000, MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT, "Assertion failed: self != ((void *)0)", (uint8_t *)&v22, 2u);
    }
    __break(1u);
  }
  dispatch_once(&qword_253E9A288, &__block_literal_global_201);
  v8 = qword_253E9A280;
  if (os_log_type_enabled((os_log_t)qword_253E9A280, OS_LOG_TYPE_DEBUG))
  {
LABEL_4:
    v9 = a2[1];
    v10 = a2[2];
    v11 = a2[3];
    v22 = (id)__PAIR64__(*a2, 67109888);
    v23 = 1024;
    v24 = v9;
    v25 = 1024;
    v26 = v10;
    v27 = 1024;
    v28 = v11;
    _os_log_impl(&dword_210B26000, v8, OS_LOG_TYPE_DEBUG, "Loading track: <z: %i, x: %i, y: %i, uncertainty: %i>", (uint8_t *)&v22, 0x1Au);
  }
LABEL_5:
  v22 = 0;
  objc_msgSend(a1, "_fileURLForTile:error:", a2, &v22);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v22;
  v14 = v13;
  if (v12)
  {
    objc_msgSend(v12, "path");
    v15 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v16 = (const char *)objc_msgSend(v15, "UTF8String");
    objc_msgSend(v12, "path");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *a3 = strndup(v16, objc_msgSend(v17, "lengthOfBytesUsingEncoding:", 4));

    v18 = 0;
  }
  else if (objc_msgSend(v13, "code") == 1)
  {
    objc_msgSend(v14, "domain");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v19, "isEqualToString:", CFSTR("VLLocalizationDataProviderErrorDomain"));

    if (v20)
      v18 = 1;
    else
      v18 = 2;
  }
  else
  {
    v18 = 2;
  }

  objc_autoreleasePoolPop(v6);
  return v18;
}

void _vlLogCallback(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (qword_253E9A298 == -1)
  {
    v3 = qword_253E9A290;
    if (!os_log_type_enabled((os_log_t)qword_253E9A290, OS_LOG_TYPE_INFO))
      return;
  }
  else
  {
    dispatch_once(&qword_253E9A298, &__block_literal_global_204);
    v3 = qword_253E9A290;
    if (!os_log_type_enabled((os_log_t)qword_253E9A290, OS_LOG_TYPE_INFO))
      return;
  }
  v4 = 136315138;
  v5 = a2;
  _os_log_impl(&dword_210B26000, v3, OS_LOG_TYPE_INFO, "%s", (uint8_t *)&v4, 0xCu);
}

void _prepareAltitudeQuery(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, void *a5)
{
  NSObject *v9;
  id v10;
  long double v11;
  long double v12;
  double v13;
  double v14;
  double v15;
  unsigned int v16;
  double v17;
  double v18;
  __double2 v19;
  double v20;
  double v21;
  long double v23;
  long double v24;
  double v25;
  double v26;
  double v27;
  __double2 v28;
  double v29;
  float v30;
  float v31;
  int altitudes;
  NSObject *v33;
  unint64_t v34;
  dispatch_time_t v35;
  __int128 v36;
  uint64_t v37;
  const char *v38;
  uint8_t *v39;
  NSObject *v40;
  os_log_type_t v41;
  uint32_t v42;
  double v43;
  uint64_t v44;
  double v45;
  double v46;
  long double __y;
  _QWORD block[4];
  dispatch_queue_t v49;
  id v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  unint64_t v55;
  __int16 v56;
  int v57;
  _BYTE buf[12];
  __int16 v59;
  double v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v9 = a4;
  v10 = a5;
  if (!a3)
  {
    v23 = *(double *)a2;
    v24 = *(double *)(a2 + 8);
    v25 = *(double *)(a2 + 16);
    v26 = sqrt(v24 * v24 + v23 * v23);
    if (v26 >= 0.001)
    {
      v27 = atan2(*(long double *)(a2 + 16), v26 * 0.996647189);
    }
    else
    {
      v27 = dbl_210BCAB20[v25 < 0.0];
      v26 = 0.001;
    }
    v28 = __sincos_stret(v27);
    v29 = atan2(v24, v23);
    *(_QWORD *)buf = 0;
    v30 = atan2(v25 + v28.__sinval * (v28.__sinval * v28.__sinval) * 42841.3115, v26 + v28.__cosval * (v28.__cosval * v28.__cosval) * -42697.6727);
    v31 = v29;
    altitudes = vl_get_altitudes(a1, &v57, buf, v30, v31);
    if (*(_QWORD *)buf)
      free(*(void **)buf);
    if (!altitudes)
    {
      if (qword_253E9A288 == -1)
      {
        v37 = qword_253E9A280;
        if (!os_log_type_enabled((os_log_t)qword_253E9A280, OS_LOG_TYPE_DEBUG))
          goto LABEL_39;
      }
      else
      {
        dispatch_once(&qword_253E9A288, &__block_literal_global_201);
        v37 = qword_253E9A280;
        if (!os_log_type_enabled((os_log_t)qword_253E9A280, OS_LOG_TYPE_DEBUG))
          goto LABEL_39;
      }
      v56 = 0;
      v38 = "Existing tile is usable for location. No need to vl_update";
      v39 = (uint8_t *)&v56;
      goto LABEL_32;
    }
    if (vl_update(a1, a2))
      goto LABEL_22;
LABEL_26:
    if (qword_253E9A288 == -1)
    {
      v37 = qword_253E9A280;
      if (!os_log_type_enabled((os_log_t)qword_253E9A280, OS_LOG_TYPE_DEBUG))
        goto LABEL_39;
    }
    else
    {
      dispatch_once(&qword_253E9A288, &__block_literal_global_201);
      v37 = qword_253E9A280;
      if (!os_log_type_enabled((os_log_t)qword_253E9A280, OS_LOG_TYPE_DEBUG))
        goto LABEL_39;
    }
    *(_WORD *)buf = 0;
    v38 = "vl_update succeeded";
    v39 = buf;
LABEL_32:
    v40 = v37;
    v41 = OS_LOG_TYPE_DEBUG;
    v42 = 2;
LABEL_38:
    _os_log_impl(&dword_210B26000, v40, v41, v38, v39, v42);
    goto LABEL_39;
  }
  if (!vl_update(a1, a2))
    goto LABEL_26;
  if (a3 > 0x63)
  {
    v12 = *(double *)a2;
    v11 = *(double *)(a2 + 8);
    v13 = sqrt(v11 * v11 + v12 * v12);
    v14 = v13 * 0.99330562;
    v15 = 1.57079633;
    if (v13 * 0.99330562 != 0.0)
    {
      v45 = *(double *)(a2 + 8);
      v46 = *(double *)a2;
      v16 = 0;
      __y = *(double *)(a2 + 16);
      v15 = 0.0;
      v17 = 0.0;
      do
      {
        v18 = v15;
        v15 = atan2(__y, v14);
        v19 = __sincos_stret(v15);
        v20 = 6378137.0 / sqrt(v19.__sinval * -0.00669437999 * v19.__sinval + 1.0);
        v21 = v13 / v19.__cosval - v20;
        if (vabdd_f64(v18, v15) >= 0.000001)
        {
          if (v16 > 8)
            goto LABEL_34;
        }
        else if (vabdd_f64(v17, v21) < 0.001 || v16 >= 9)
        {
          goto LABEL_34;
        }
        ++v16;
        v14 = v13 * (v20 / (v20 + v21) * -0.00669437999 + 1.0);
        v17 = v13 / v19.__cosval - v20;
      }
      while (v14 != 0.0);
      v15 = 1.57079633;
LABEL_34:
      v11 = v45;
      v12 = v46;
    }
    v43 = atan2(v11, v12);
    if (qword_253E9A288 != -1)
    {
      dispatch_once(&qword_253E9A288, &__block_literal_global_201);
      v44 = qword_253E9A280;
      if (!os_log_type_enabled((os_log_t)qword_253E9A280, OS_LOG_TYPE_ERROR))
        goto LABEL_39;
      goto LABEL_37;
    }
    v44 = qword_253E9A280;
    if (os_log_type_enabled((os_log_t)qword_253E9A280, OS_LOG_TYPE_ERROR))
    {
LABEL_37:
      *(_DWORD *)buf = 134218240;
      *(double *)&buf[4] = v15 / 0.0174532925;
      v59 = 2048;
      v60 = v43 / 0.0174532925;
      v38 = "vl_update failed, but have retried too many times for location: <%f, %f>";
      v39 = buf;
      v40 = v44;
      v41 = OS_LOG_TYPE_ERROR;
      v42 = 22;
      goto LABEL_38;
    }
LABEL_39:
    dispatch_async(v9, v10);
    goto LABEL_40;
  }
LABEL_22:
  if (qword_253E9A288 != -1)
  {
    dispatch_once(&qword_253E9A288, &__block_literal_global_201);
    v33 = qword_253E9A280;
    if (!os_log_type_enabled((os_log_t)qword_253E9A280, OS_LOG_TYPE_DEBUG))
      goto LABEL_25;
    goto LABEL_24;
  }
  v33 = qword_253E9A280;
  if (os_log_type_enabled((os_log_t)qword_253E9A280, OS_LOG_TYPE_DEBUG))
  {
LABEL_24:
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_210B26000, v33, OS_LOG_TYPE_DEBUG, "vl_update failed, sleeping for a while before trying again", buf, 2u);
  }
LABEL_25:
  v34 = a3 + 1;
  v35 = dispatch_time(0, 100000000);
  block[1] = 3221225472;
  v36 = *(_OWORD *)(a2 + 16);
  v52 = *(_OWORD *)a2;
  block[0] = MEMORY[0x24BDAC760];
  block[2] = ___prepareAltitudeQuery_block_invoke;
  block[3] = &unk_24CA9BC88;
  v51 = a1;
  v53 = v36;
  v54 = *(_QWORD *)(a2 + 32);
  v55 = v34;
  v49 = v9;
  v50 = v10;
  dispatch_after(v35, v49, block);

LABEL_40:
}

id getCLLocationClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_253E9A2A0;
  v7 = qword_253E9A2A0;
  if (!qword_253E9A2A0)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = __getCLLocationClass_block_invoke;
    v3[3] = &unk_24CA9B760;
    v3[4] = &v4;
    __getCLLocationClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_210B37BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_210B3983C(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x220], 8);
  _Unwind_Resume(a1);
}

void sub_210B39854(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x220], 8);
  _Unwind_Resume(a1);
}

uint64_t ___prepareAltitudeQuery_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _OWORD v8[2];
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_QWORD *)(a1 + 96) + 1;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_OWORD *)(a1 + 72);
  v8[0] = *(_OWORD *)(a1 + 56);
  v8[1] = v6;
  v9 = v3;
  return _prepareAltitudeQuery(v2, v8, v4, v5, v1);
}

Class __getCLLocationClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_253E9A2A8)
  {
    qword_253E9A2A8 = _sl_dlopen();
    if (!qword_253E9A2A8)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("CLLocation");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  qword_253E9A2A0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getCIImageClass_block_invoke_0(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_253E9A2B8)
  {
    qword_253E9A2B8 = _sl_dlopen();
    if (!qword_253E9A2B8)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("CIImage");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  qword_253E9A2B0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getCIContextClass_block_invoke_0(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_253E9A2B8)
  {
    qword_253E9A2B8 = _sl_dlopen();
    if (!qword_253E9A2B8)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("CIContext");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  qword_253E9A2C0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void g_jac_right_jacobian_so3(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  __double2 v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[2];
  *a1 = 1.0;
  a1[1] = 0.0;
  a1[2] = 0.0;
  a1[3] = 0.0;
  a1[4] = 1.0;
  a1[5] = 0.0;
  a1[6] = 0.0;
  a1[7] = 0.0;
  a1[8] = 1.0;
  v5 = v2 * v2 + 0.0 + v3 * v3 + v4 * v4;
  if (v5 != 0.0)
  {
    v7 = a2[1];
    v8 = a2[2];
    v9 = *a2;
    v10 = 0.0 - v8 * v8;
    v11 = v10 - v7 * v7;
    v12 = 0.0 - v8 * 0.0 - v8 * 0.0 + v7 * *a2;
    v13 = v7 * 0.0 + 0.0 + v8 * *a2 + v7 * 0.0;
    v14 = v8 * 0.0 + 0.0 + v8 * 0.0 + *a2 * v7;
    v15 = v10 + 0.0 - v9 * v9;
    v16 = v8 * v7 + 0.0;
    v17 = v16 - *a2 * 0.0 - *a2 * 0.0;
    v18 = 0.0 - v7 * 0.0 + *a2 * v8 - v7 * 0.0;
    v19 = v16 + *a2 * 0.0 + *a2 * 0.0;
    v20 = 0.0 - v7 * v7 - v9 * v9 + 0.0;
    if (v5 >= 0.00001)
    {
      v23 = sqrt(v5);
      v33 = v15;
      v34 = v11;
      v31 = 0.0 - v7 * 0.0 + *a2 * v8 - v7 * 0.0;
      v32 = v7 * 0.0 + 0.0 + v8 * *a2 + v7 * 0.0;
      v30 = v16 + *a2 * 0.0 + *a2 * 0.0;
      v24 = __sincos_stret(v23);
      v20 = 0.0 - v7 * v7 - v9 * v9 + 0.0;
      v19 = v30;
      v18 = v31;
      v13 = v32;
      v15 = v33;
      v11 = v34;
      v21 = (v24.__cosval + -1.0) / v5;
      v22 = (1.0 - v24.__sinval / v23) / v5;
    }
    else
    {
      v21 = v5 / 24.0 + -0.5;
      v22 = v5 / -120.0 + 0.166666667;
    }
    v25 = v21 * 0.0;
    v26 = v7 * v21;
    v27 = v8 * v21;
    v28 = v9 * v21;
    v29 = v25 + 1.0;
    *a1 = v29 + v11 * v22;
    a1[1] = v12 * v22 + 0.0 - v27;
    a1[2] = v13 * v22 + v26 + 0.0;
    a1[3] = v14 * v22 + v27 + 0.0;
    a1[4] = v29 + v15 * v22;
    a1[5] = v17 * v22 + 0.0 - v28;
    a1[6] = v18 * v22 + 0.0 - v26;
    a1[7] = v19 * v22 + v28 + 0.0;
    a1[8] = v29 + v20 * v22;
  }
}

void g_jac_apply_proj(double *a1, uint64_t a2, uint64_t a3, double *a4, int a5)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  int v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  double *v41;
  double *v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  double v56;
  double v57;
  uint64_t v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  uint64_t v67;
  double v68;
  double v69;
  double v70;
  uint64_t v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  uint64_t v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  uint64_t v97;
  double *v98;
  double *v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  uint64_t v116;
  double *v117;
  double *v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  uint64_t v148;
  double *v149;
  double *v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  int v159;
  int v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  uint64_t v210;
  double *v211;
  double *v212;
  double v213;
  double v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double v221;
  double v222;
  double v223;
  double v224;
  double v225;
  double v226;
  double v227;
  double v228;
  double v229;
  double v230;
  double v231;
  double v232;
  double v233;
  double v234;
  double v235;
  double v236;
  double v237;
  double v238;
  double v239;
  double v240;
  double v241;
  double v242;
  double v243;
  double v244;
  double v245;
  uint64_t v246;
  double *v247;
  double *v248;
  double v249;
  double v250;
  double v251;
  double v252;
  double v253;
  uint64_t v254;
  double *v255;
  double *v256;
  double v257;
  double v258;
  double v259;
  double v260;
  double v261;
  uint64_t v262;
  double *v263;
  double *v264;
  double v265;
  double v266;
  double v267;
  double v268;
  double v269;
  double v270;
  double v271;
  double v272;
  double v273;
  double v274;
  double v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t *v279;
  uint64_t v280;
  const double *v281;
  uint64_t v282;
  double *v283;
  double *v284;
  double v285;
  double v286;
  double v287;
  double v288;
  double v289;
  double v290;
  double v291;
  double v292;
  double v293;
  double v294;
  double v295;
  double v296;
  double v297;
  double v298;
  double v299;
  double v300;
  double v301;
  double v302;
  double v303;
  double v304;
  uint64_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t *v310;
  uint64_t v311;
  double *v312;
  uint64_t v313;
  uint64_t v314;
  double *v315;
  double *v316;
  double v317;
  double v318;
  double v319;
  double v320;
  double v321;
  double v322;
  double v323;
  double v324;
  double v325;
  double v326;
  double v327;
  double v328;
  uint64_t v329;
  double v330;
  double v331;
  double v332;
  double v333;
  double v334;
  double v335;
  double v336;
  double v337;
  double v338;
  double v339;
  double v340;
  double v341;
  double v342;
  double v343;
  double v344;
  uint64_t v345;
  double *v346;
  double *v347;
  double v348;
  double v349;
  double v350;
  double v351;
  double v352;
  double v353;
  double v354;
  double v355;
  double v356;
  double v357;
  double v358;
  double v359;
  double v360;
  double v361;
  double v362;
  double v363;
  double v364;
  float64x2_t v365;
  double v366;
  double v367;
  uint64_t v368;
  float64x2x2_t v369;
  float64x2x2_t v370;
  float64x2x2_t v371;
  float64x2x3_t v372;

  v368 = *MEMORY[0x24BDAC8D0];
  v9 = *a1;
  v10 = a1[1];
  v11 = v10 / *a1;
  v12 = a1[2];
  v13 = v12 / *a1;
  v14 = -v10;
  v15 = -v10 / (v9 * v9);
  v16 = -v12 / (v9 * v9);
  v17 = *(_DWORD *)a2;
  v18 = 1.0 / *a1;
  switch(*(_DWORD *)a2)
  {
    case 0:
      if (a5 >= 1)
      {
        v19 = v11 + *(double *)(a2 + 56);
        v20 = v13 + *(double *)(a2 + 64);
        v21 = sqrt(v19 * v19 + v20 * v20);
        v22 = *(double *)(a2 + 72);
        v23 = *(double *)(a2 + 80);
        v24 = *(double *)(a2 + 88);
        v25 = v22 * (v21 * v21) + 1.0 + v23 * (v21 * (v21 * v21)) + v24 * (v21 * (v21 * (v21 * v21)));
        v26 = v23 * 3.0 * v21 + v22 * 2.0 + v24 * 4.0 * (v21 * v21);
        v27 = *(double *)(a2 + 8);
        v28 = *(double *)(a2 + 16);
        v29 = v27 * (v25 + v19 * v19 * v26);
        v30 = v19 * v20 * v26;
        v31 = v28 * v30;
        v32 = v27 * v30;
        v33 = v28 * (v25 + v20 * v20 * v26);
        v34 = v15 * v29 + 0.0 + v16 * (v27 * v30);
        v35 = v15 * v31 + 0.0 + v16 * v33;
        v36 = v18 * v29 + 0.0 + v27 * v30 * 0.0;
        v37 = v18 * v31 + 0.0 + v33 * 0.0;
        v38 = v29 * 0.0 + 0.0 + v18 * v32;
        v39 = v31 * 0.0 + 0.0 + v18 * v33;
        v40 = a5;
        v41 = (double *)(a3 + 16);
        v42 = a4 + 1;
        do
        {
          *(v42 - 1) = 0.0;
          v43 = *(v41 - 2) * v34 + 0.0;
          *(v42 - 1) = v43;
          v44 = v43 + *(v41 - 1) * v36;
          *(v42 - 1) = v44;
          *(v42 - 1) = v44 + *v41 * v38;
          *v42 = 0.0;
          v45 = *(v41 - 2) * v35 + 0.0;
          *v42 = v45;
          v46 = v45 + *(v41 - 1) * v37;
          *v42 = v46;
          v47 = *v41;
          v41 += 3;
          *v42 = v46 + v47 * v39;
          v42 += 2;
          --v40;
        }
        while (v40);
      }
      return;
    case 1:
      v48 = tan(*(double *)(a2 + 32) * 0.5);
      v49 = sqrt(v10 * v10 + v9 * v9);
      v50 = v49 * v49;
      v51 = v49 * (v49 * v49);
      v52 = 0.0;
      v53 = 0.0;
      v54 = 0.0;
      if (v49 * v49 != 0.0)
      {
        v55 = *(int *)(a2 + 168);
        v56 = *(double *)(a2 + 24);
        v53 = v14 * (double)v55 / v56 / v50;
        v54 = v9 * (double)v55 / v56 / v50;
      }
      v57 = 0.0;
      if (v51 != 0.0)
      {
        v58 = *(int *)(a2 + 172);
        v52 = v12 * -(v9 * (double)v58) * 0.5 / v51 / v48;
        v57 = v12 * (v14 * (double)v58) * 0.5 / v51 / v48;
      }
      if (v49 == 0.0)
      {
        v59 = 0.0;
        if (a5 < 1)
          return;
      }
      else
      {
        v59 = (double)*(int *)(a2 + 172) * 0.5 / v49 / v48;
        if (a5 < 1)
          return;
      }
      v254 = a5;
      v255 = (double *)(a3 + 16);
      v256 = a4 + 1;
      do
      {
        *(v256 - 1) = 0.0;
        v257 = *(v255 - 2) * v53 + 0.0;
        *(v256 - 1) = v257;
        v258 = v257 + *(v255 - 1) * v54;
        *(v256 - 1) = v258;
        *(v256 - 1) = v258 + *v255 * 0.0;
        *v256 = 0.0;
        v259 = *(v255 - 2) * v52 + 0.0;
        *v256 = v259;
        v260 = v259 + *(v255 - 1) * v57;
        *v256 = v260;
        v261 = *v255;
        v255 += 3;
        *v256 = v260 + v261 * v59;
        v256 += 2;
        --v254;
      }
      while (v254);
      return;
    case 2:
      v60 = v10 * v10 + v9 * v9;
      v61 = sqrt(v60);
      v62 = v61 * v61;
      v63 = v60 + v12 * v12;
      v64 = 0.0;
      v65 = 0.0;
      v66 = 0.0;
      if (v61 * v61 != 0.0)
      {
        v67 = *(int *)(a2 + 168);
        v68 = *(double *)(a2 + 24);
        v65 = v14 / v62 * (double)v67 / v68;
        v66 = v9 / v62 * (double)v67 / v68;
      }
      v69 = v63 * v61;
      v70 = 0.0;
      if (v63 * v61 != 0.0)
      {
        v71 = *(int *)(a2 + 172);
        v72 = *(double *)(a2 + 32);
        v64 = -(v9 * v12) / v69 * (double)v71 / v72;
        v70 = v12 * v14 / v69 * (double)v71 / v72;
      }
      if (v63 == 0.0)
      {
        v73 = 0.0;
        if (a5 < 1)
          return;
      }
      else
      {
        v73 = v61 / v63 * (double)*(int *)(a2 + 172) / *(double *)(a2 + 32);
        if (a5 < 1)
          return;
      }
      v262 = a5;
      v263 = (double *)(a3 + 16);
      v264 = a4 + 1;
      do
      {
        *(v264 - 1) = 0.0;
        v265 = *(v263 - 2) * v65 + 0.0;
        *(v264 - 1) = v265;
        v266 = v265 + *(v263 - 1) * v66;
        *(v264 - 1) = v266;
        *(v264 - 1) = v266 + *v263 * 0.0;
        *v264 = 0.0;
        v267 = *(v263 - 2) * v64 + 0.0;
        *v264 = v267;
        v268 = v267 + *(v263 - 1) * v70;
        *v264 = v268;
        v269 = *v263;
        v263 += 3;
        *v264 = v268 + v269 * v73;
        v264 += 2;
        --v262;
      }
      while (v262);
      return;
    case 3:
      v74 = sqrt(v11 * v11 + v13 * v13);
      v75 = 0.0;
      if (v74 == 0.0)
      {
        v76 = 1.0;
        v77 = 0.0;
        v78 = 1.0;
        v79 = v13;
        v80 = v10 / *a1;
        if ((2 * a5) < 0x97)
          goto LABEL_22;
LABEL_84:
        __assert_rtn("g_jac_apply_proj", "g_jac.c", 592, "ARR_SIZE(J_tmp) >= n_par * 2");
      }
      v358 = v15;
      v361 = v16;
      v364 = 1.0 / *a1;
      v270 = atan(v74);
      v271 = v270 / v74;
      v80 = v11 * (v270 / v74);
      v79 = v13 * (v270 / v74);
      v76 = 1.0;
      if (v270 / v74 == 1.0)
      {
        v77 = 0.0;
        v78 = 1.0;
        v16 = v361;
        v18 = v364;
        v15 = v358;
        if ((2 * a5) >= 0x97)
          goto LABEL_84;
      }
      else
      {
        v272 = v74 * v74 + 1.0;
        v273 = v74 * (v74 * v74);
        v274 = v11 / v74 / v272 / v74 + v270 * (-v11 / v273);
        v76 = v271 + v274 * v11;
        v75 = v13 * v274;
        v275 = v13 / v74 / v272 / v74 + v270 * (-v13 / v273);
        v77 = v11 * v275;
        v78 = v271 + v275 * v13;
        v16 = v361;
        v18 = v364;
        v15 = v358;
        if ((2 * a5) >= 0x97)
          goto LABEL_84;
      }
LABEL_22:
      v81 = *(double *)(a2 + 56);
      v82 = *(double *)(a2 + 64);
      v83 = *(double *)(a2 + 72);
      v84 = *(double *)(a2 + 80);
      v85 = *(double *)(a2 + 88);
      v86 = *(double *)(a2 + 8);
      v87 = *(double *)(a2 + 16);
      if (a5 < 1)
        goto LABEL_66;
      if (a5 == 1)
      {
        v88 = 0;
LABEL_64:
        v282 = a5 - v88;
        v283 = &v365.f64[2 * v88 + 1];
        v284 = (double *)(a3 + 24 * v88 + 16);
        do
        {
          v285 = *(v284 - 2);
          v286 = *(v284 - 1);
          v287 = *v284;
          v284 += 3;
          *(v283 - 1) = v285 * v15 + 0.0 + v286 * v18 + v287 * 0.0;
          *v283 = v285 * v16 + 0.0 + v286 * 0.0 + v287 * v18;
          v283 += 2;
          --v282;
        }
        while (v282);
        goto LABEL_66;
      }
      v88 = a5 & 0xFFFFFFFE;
      v276 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v15, 0);
      v277 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v18, 0);
      v278 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v16, 0);
      v279 = &v365;
      v280 = v88;
      v281 = (const double *)a3;
      do
      {
        v372 = vld3q_f64(v281);
        v281 += 6;
        v371.val[0] = vmlaq_f64(vmlaq_f64(vmlaq_f64((float64x2_t)0, v276, v372.val[0]), v277, v372.val[1]), (float64x2_t)0, v372.val[2]);
        v371.val[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64((float64x2_t)0, v278, v372.val[0]), (float64x2_t)0, v372.val[1]), v277, v372.val[2]);
        vst2q_f64(v279->f64, v371);
        v279 += 2;
        v280 -= 2;
      }
      while (v280);
      if (v88 != a5)
        goto LABEL_64;
LABEL_66:
      if (a5 < 1)
        return;
      v288 = v80 + v81;
      v289 = v79 + v82;
      v290 = sqrt(v288 * v288 + v289 * v289);
      v291 = v85 * 4.0;
      v292 = v83 * (v290 * v290) + 1.0 + v84 * (v290 * (v290 * v290)) + v85 * (v290 * (v290 * (v290 * v290)));
      v293 = v84 * 3.0 * v290 + v83 * 2.0 + v291 * (v290 * v290);
      v294 = v292 + v288 * v288 * v293;
      v295 = v288 * v289 * v293;
      v296 = v292 + v289 * v289 * v293;
      v297 = v86 * v294;
      v298 = v87 * v295;
      v299 = v86 * v295;
      v300 = v87 * v296;
      v301 = v76 * v297 + 0.0 + v75 * v299;
      v302 = v76 * v298 + 0.0 + v75 * v300;
      v303 = v77 * v297 + 0.0 + v78 * v299;
      v304 = v77 * v298 + 0.0 + v78 * v300;
      if (a5 == 1)
      {
        v305 = 0;
LABEL_72:
        v313 = a5 - v305;
        v314 = (16 * v305) | 8;
        v315 = (double *)((char *)a4 + v314);
        v316 = (double *)((char *)v365.f64 + v314);
        do
        {
          v317 = *(v316 - 1);
          v318 = v317 * v301 + 0.0 + *v316 * v303;
          v319 = v317 * v302 + 0.0 + *v316 * v304;
          *(v315 - 1) = v318;
          *v315 = v319;
          v315 += 2;
          v316 += 2;
          --v313;
        }
        while (v313);
        return;
      }
      v306 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v301, 0);
      v307 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v303, 0);
      v308 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v302, 0);
      v305 = a5 & 0xFFFFFFFE;
      v309 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v304, 0);
      v310 = &v365;
      v311 = v305;
      v312 = a4;
      do
      {
        v369 = vld2q_f64(v310->f64);
        v310 += 2;
        v370.val[0] = vmlaq_f64(vmlaq_f64((float64x2_t)0, v306, v369.val[0]), v307, v369.val[1]);
        v370.val[1] = vmlaq_f64(vmlaq_f64((float64x2_t)0, v308, v369.val[0]), v309, v369.val[1]);
        vst2q_f64(v312, v370);
        v312 += 4;
        v311 -= 2;
      }
      while (v311);
      if (v305 != a5)
        goto LABEL_72;
      return;
    case 4:
      if (a5 >= 1)
      {
        v89 = *(double *)(a2 + 8);
        v90 = *(double *)(a2 + 16);
        v91 = v15 * v89 + 0.0 + v16 * 0.0;
        v92 = v15 * 0.0 + 0.0 + v16 * v90;
        v93 = v18 * v89 + 0.0 + 0.0;
        v94 = v18 * 0.0 + 0.0 + v90 * 0.0;
        v95 = v89 * 0.0 + 0.0 + v18 * 0.0;
        v96 = v18 * v90 + 0.0;
        v97 = a5;
        v98 = (double *)(a3 + 16);
        v99 = a4 + 1;
        do
        {
          *(v99 - 1) = 0.0;
          v100 = *(v98 - 2) * v91 + 0.0;
          *(v99 - 1) = v100;
          v101 = v100 + *(v98 - 1) * v93;
          *(v99 - 1) = v101;
          *(v99 - 1) = v101 + *v98 * v95;
          *v99 = 0.0;
          v102 = *(v98 - 2) * v92 + 0.0;
          *v99 = v102;
          v103 = v102 + *(v98 - 1) * v94;
          *v99 = v103;
          v104 = *v98;
          v98 += 3;
          *v99 = v103 + v104 * v96;
          v99 += 2;
          --v97;
        }
        while (v97);
      }
      return;
    case 5:
      v105 = v10 * v10 + v12 * v12;
      v106 = sqrt(v105);
      v107 = atan2(v106, *a1);
      v108 = 0.0;
      v109 = 0.0;
      if (v9 != 0.0)
      {
        if (v106 == 0.0)
        {
          v108 = 0.707106781 / v9;
          v109 = 0.707106781 / v9;
        }
        else
        {
          v320 = v9 + v106 * v106 / v9;
          v108 = v10 / v106 / v320;
          v109 = v12 / v106 / v320;
        }
      }
      if (v106 == 0.0)
      {
        v321 = 0.707106781;
        v322 = -0.707106781;
        if (a5 < 1)
          return;
      }
      else
      {
        v322 = -v12 / v105 * v107;
        v321 = 1.0 / (v10 + v12 * v12 / v10) * v107;
        if (a5 < 1)
          return;
      }
      v324 = *(double *)(a2 + 80);
      v323 = *(double *)(a2 + 88);
      v325 = *(double *)(a2 + 72);
      v326 = v10 / (v106 + 1.0e-20);
      v327 = v12 / (v106 + 1.0e-20);
      v328 = v107 * (v107 * (v324 * 4.0) + v325 * 3.0 + v107 * (v323 * 5.0) * v107) * v107 + 1.0;
      v329 = *(int *)(a2 + 168);
      v330 = *(double *)(a2 + 24);
      v331 = *(double *)(a2 + 32);
      v332 = (double)*(int *)(a2 + 172);
      v333 = v325 * (v107 * v107) + 1.0 + v324 * (v107 * (v107 * v107)) + v323 * (v107 * (v107 * (v107 * v107)));
      v334 = -v106 / (v9 * v9 + v106 * v106);
      v335 = v326 * v328 / v330 * (double)v329;
      v336 = v327 * v328 / v331 * v332;
      v337 = -(v327 * v333) / v330 * (double)v329;
      v338 = v326 * v333 / v331 * v332;
      v339 = v334 * v335 + 0.0 + v337 * 0.0;
      v340 = v334 * v336 + 0.0 + v338 * 0.0;
      v341 = v108 * v335 + 0.0 + v322 * v337;
      v342 = v108 * v336 + 0.0 + v322 * v338;
      v343 = v109 * v335 + 0.0 + v321 * v337;
      v344 = v109 * v336 + 0.0 + v321 * v338;
      v345 = a5;
      v346 = (double *)(a3 + 16);
      v347 = a4 + 1;
      do
      {
        *(v347 - 1) = 0.0;
        v348 = *(v346 - 2) * v339 + 0.0;
        *(v347 - 1) = v348;
        v349 = v348 + *(v346 - 1) * v341;
        *(v347 - 1) = v349;
        *(v347 - 1) = v349 + *v346 * v343;
        *v347 = 0.0;
        v350 = *(v346 - 2) * v340 + 0.0;
        *v347 = v350;
        v351 = v350 + *(v346 - 1) * v342;
        *v347 = v351;
        v352 = *v346;
        v346 += 3;
        *v347 = v351 + v352 * v344;
        v347 += 2;
        --v345;
      }
      while (v345);
      return;
    case 8:
      if (a5 >= 1)
      {
        v124 = sqrt(v11 * v11 + v13 * v13);
        v125 = v124 * v124;
        v126 = v125 * (v125 * v125);
        v127 = v124 * v124 * v126;
        v129 = *(double *)(a2 + 80);
        v128 = *(double *)(a2 + 88);
        v131 = *(double *)(a2 + 64);
        v130 = *(double *)(a2 + 72);
        v132 = *(double *)(a2 + 56);
        v133 = v124
             * (v130 + v124 * (v128 + v124 * (v129 + v124 * (v132 + v124 * v131 * v124) * v124) * v124) * v124)
             * v124
             + 1.0;
        v134 = v125 * (v128 * 4.0) + v130 * 2.0 + v129 * 6.0 * (v125 * v125) + v132 * 8.0 * v126 + v131 * 10.0 * v127;
        v135 = *(double *)(a2 + 8);
        v136 = *(double *)(a2 + 16);
        v137 = v135 * (v133 + v11 * v11 * v134);
        v138 = v11 * v13 * v134;
        v139 = v136 * v138;
        v140 = v135 * v138;
        v141 = v136 * (v133 + v13 * v13 * v134);
        v142 = v15 * v137 + 0.0 + v16 * (v135 * v138);
        v143 = v15 * (v136 * v138) + 0.0 + v16 * v141;
        v144 = v18 * v137 + 0.0 + v135 * v138 * 0.0;
        v145 = v18 * (v136 * v138) + 0.0 + v141 * 0.0;
        v146 = v137 * 0.0 + 0.0 + v18 * v140;
        v147 = v139 * 0.0 + 0.0 + v18 * v141;
        v148 = a5;
        v149 = (double *)(a3 + 16);
        v150 = a4 + 1;
        do
        {
          *(v150 - 1) = 0.0;
          v151 = *(v149 - 2) * v142 + 0.0;
          *(v150 - 1) = v151;
          v152 = v151 + *(v149 - 1) * v144;
          *(v150 - 1) = v152;
          *(v150 - 1) = v152 + *v149 * v146;
          *v150 = 0.0;
          v153 = *(v149 - 2) * v143 + 0.0;
          *v150 = v153;
          v154 = v153 + *(v149 - 1) * v145;
          *v150 = v154;
          v155 = *v149;
          v149 += 3;
          *v150 = v154 + v155 * v147;
          v150 += 2;
          --v148;
        }
        while (v148);
      }
      return;
    case 0xA:
      v156 = *(double *)(a2 + 72);
      v157 = *(double *)(a2 + 80);
      v158 = *(double *)(a2 + 96);
      v353 = *(double *)(a2 + 88);
      v354 = *(double *)(a2 + 24);
      v355 = *(double *)(a2 + 32);
      v160 = *(_DWORD *)(a2 + 168);
      v159 = *(_DWORD *)(a2 + 172);
      v161 = v11 + *(double *)(a2 + 56);
      v162 = v13 + *(double *)(a2 + 64);
      v163 = sqrt(v162 * v162 + v161 * v161);
      v360 = v16;
      v363 = 1.0 / *a1;
      v357 = v15;
      v164 = atan2(v163, 1.0);
      if (a5 >= 1)
      {
        v165 = v161 / (v163 + 1.0e-20);
        v166 = v162 / (v163 + 1.0e-20);
        v167 = v164 * v164;
        v168 = v167 * (v167 * v167);
        v169 = v156 * (v164 * v164) + 1.0 + v157 * (v167 * v167) + v353 * v168 + v158 * (v167 * v167 * (v167 * v167));
        v170 = 1.0 / (v163 * v163 + 1.0);
        v171 = v170 * (v360 * (v162 / v163) + v161 / v163 * v357);
        v172 = v170 * (v162 / v163 * 0.0 + v161 / v163 * v363);
        v173 = v170 * (v363 * (v162 / v163) + v161 / v163 * 0.0);
        v174 = v157 * 4.0 * (v164 * (v164 * v164))
             + (v156 + v156) * v164
             + v353 * 6.0 * (v164 * (v167 * v167))
             + v158 * 8.0 * (v164 * v168);
        v175 = 1.0 / (v163 + 1.0e-20);
        v176 = (v163 + 1.0e-20) * (v163 + 1.0e-20);
        v177 = -v161 / v176;
        v178 = v175 + v177 * (v161 / v163);
        v179 = v162 / v163 * v177;
        v180 = v360 * v179 + v178 * v357;
        v181 = v179 * 0.0 + v178 * v363;
        v182 = v363 * v179 + v178 * 0.0;
        v183 = -v162 / v176;
        v184 = v161 / v163 * v183;
        v185 = v175 + v183 * (v162 / v163);
        v186 = v360 * v185 + v184 * v357;
        v187 = v185 * 0.0 + v184 * v363;
        v188 = v363 * v185 + v184 * 0.0;
        v189 = v164 * (v171 * v174);
        v190 = v171 * v169;
        v191 = v164 * v169;
        v192 = v165 * (v171 * v169) + v189 * v165 + v164 * v169 * v180;
        v193 = v164 * (v172 * v174);
        v194 = v172 * v169;
        v195 = v165 * v194 + v193 * v165 + v164 * v169 * v181;
        v196 = v164 * (v173 * v174);
        v197 = v173 * v169;
        v198 = v165 * v197 + v196 * v165 + v191 * v182;
        v199 = v166 * v190 + v189 * v166 + v191 * v186;
        v200 = v166 * v194 + v193 * v166 + v191 * v187;
        v201 = v166 * v197 + v196 * v166 + v191 * v188;
        v202 = (double)v160 / v354;
        v203 = v202 * v192;
        v204 = v202 * v195;
        v205 = v202 * v198;
        v206 = (double)v159 / v355;
        v207 = v206 * v199;
        v208 = v206 * v200;
        v209 = v206 * v201;
        v210 = a5;
        v211 = (double *)(a3 + 16);
        v212 = a4 + 1;
        do
        {
          *(v212 - 1) = 0.0;
          v213 = *(v211 - 2) * v203 + 0.0;
          *(v212 - 1) = v213;
          v214 = v213 + *(v211 - 1) * v204;
          *(v212 - 1) = v214;
          *(v212 - 1) = v214 + *v211 * v205;
          *v212 = 0.0;
          v215 = *(v211 - 2) * v207 + 0.0;
          *v212 = v215;
          v216 = v215 + *(v211 - 1) * v208;
          *v212 = v216;
          v217 = *v211;
          v211 += 3;
          *v212 = v216 + v217 * v209;
          v212 += 2;
          --v210;
        }
        while (v210);
      }
      return;
    case 0xB:
      if (a5 >= 1)
      {
        v218 = v11 + *(double *)(a2 + 56);
        v219 = v13 + *(double *)(a2 + 64);
        v220 = sqrt(v218 * v218 + v219 * v219);
        v221 = v220 * v220;
        v222 = v221 * (v221 * v221);
        v223 = v220 * v220 * v222;
        v224 = *(double *)(a2 + 72);
        v225 = *(double *)(a2 + 80);
        v226 = *(double *)(a2 + 88);
        v227 = *(double *)(a2 + 96);
        v228 = *(double *)(a2 + 104);
        v229 = *(double *)(a2 + 112);
        v230 = *(double *)(a2 + 120);
        v231 = v220
             * (v224
              + v220
              * (v225
               + v220
               * (v226 + v220 * (v227 + v220 * (v228 + v220 * (v229 + v220 * v230 * v220) * v220) * v220) * v220)
               * v220)
              * v220)
             * v220
             + 1.0;
        v232 = v225 * 4.0 * v221
             + v224 * 2.0
             + v226 * 6.0 * (v221 * v221)
             + v227 * 8.0 * v222
             + v228 * 10.0 * v223
             + v229 * 12.0 * v223
             + v230 * 14.0 * v223;
        v233 = *(double *)(a2 + 8);
        v234 = *(double *)(a2 + 16);
        v235 = v233 * (v231 + v218 * v218 * v232);
        v236 = v218 * v219 * v232;
        v237 = v234 * v236;
        v238 = v233 * v236;
        v239 = v234 * (v231 + v219 * v219 * v232);
        v240 = v15 * v235 + 0.0 + v16 * v238;
        v241 = v15 * v237 + 0.0 + v16 * v239;
        v242 = v18 * v235 + 0.0 + v238 * 0.0;
        v243 = v18 * v237 + 0.0 + v239 * 0.0;
        v244 = v235 * 0.0 + 0.0 + v18 * v238;
        v245 = v237 * 0.0 + 0.0 + v18 * v239;
        v246 = a5;
        v247 = (double *)(a3 + 16);
        v248 = a4 + 1;
        do
        {
          *(v248 - 1) = 0.0;
          v249 = *(v247 - 2) * v240 + 0.0;
          *(v248 - 1) = v249;
          v250 = v249 + *(v247 - 1) * v242;
          *(v248 - 1) = v250;
          *(v248 - 1) = v250 + *v247 * v244;
          *v248 = 0.0;
          v251 = *(v247 - 2) * v241 + 0.0;
          *v248 = v251;
          v252 = v251 + *(v247 - 1) * v243;
          *v248 = v252;
          v253 = *v247;
          v247 += 3;
          *v248 = v252 + v253 * v245;
          v248 += 2;
          --v246;
        }
        while (v246);
      }
      return;
    default:
      if ((v17 - 15) < 0xFFFFFFFD)
        __assert_rtn("g_jac_apply_proj", "g_jac.c", 700, "0 && \"Not implemented!\"");
      v356 = -v10 / (v9 * v9);
      v359 = -v12 / (v9 * v9);
      v362 = 1.0 / *a1;
      if ((v17 - 12) >= 3)
        __assert_rtn("g_proj_bspline_cnt", "g_camera.c", 924, "0 && \"Not a spline based camera model.\"");
      g_pinhole_to_pixel_jac(0, 0, v17, (double *)(a2 + 72), dword_210BCAB98[v17 - 12], *(_DWORD *)(a2 + 168), *(_DWORD *)(a2 + 172), &v365, v11, v13, *(double *)(a2 + 8), *(double *)(a2 + 16), *(double *)(a2 + 40), *(double *)(a2 + 48), *(double *)(a2 + 56), *(double *)(a2 + 64), 0, 0, 0,
        0,
        0);
      if (a5 >= 1)
      {
        v110 = v356 * v365.f64[0] + 0.0 + v359 * v365.f64[1];
        v111 = v356 * v366 + 0.0 + v359 * v367;
        v112 = v362 * v365.f64[0] + 0.0 + v365.f64[1] * 0.0;
        v113 = v362 * v366 + 0.0 + v367 * 0.0;
        v114 = v365.f64[0] * 0.0 + 0.0 + v362 * v365.f64[1];
        v115 = v366 * 0.0 + 0.0 + v362 * v367;
        v116 = a5;
        v117 = (double *)(a3 + 16);
        v118 = a4 + 1;
        do
        {
          *(v118 - 1) = 0.0;
          v119 = *(v117 - 2) * v110 + 0.0;
          *(v118 - 1) = v119;
          v120 = v119 + *(v117 - 1) * v112;
          *(v118 - 1) = v120;
          *(v118 - 1) = v120 + *v117 * v114;
          *v118 = 0.0;
          v121 = *(v117 - 2) * v111 + 0.0;
          *v118 = v121;
          v122 = v121 + *(v117 - 1) * v113;
          *v118 = v122;
          v123 = *v117;
          v117 += 3;
          *v118 = v122 + v123 * v115;
          v118 += 2;
          --v116;
        }
        while (v116);
      }
      return;
  }
}

void g_jac_rel_pose_so3_scale(uint64_t a1, double *a2, double *a3, double *a4, int a5, unsigned int a6, int a7, int a8, int a9, double *a10, double *a11)
{
  double v19;
  double v20;
  __double2 v21;
  __double2 v22;
  __double2 v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  __double2 v41;
  __double2 v42;
  __double2 v43;
  float64x2_t v44;
  __int128 v45;
  __int128 v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  float64_t v52;
  double v53;
  double v54;
  float64_t v55;
  double v56;
  float64_t v57;
  float64_t v58;
  float64_t v59;
  float64_t v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  float64x2_t v67;
  double v68;
  double v69;
  double v70;
  BOOL v71;
  double v72;
  double v73;
  double *v74;
  double v75;
  double v76;
  double v77;
  float64_t v78;
  double v79;
  double v80;
  double v81;
  float64x2_t v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  BOOL v130;
  uint64_t v131;
  double *v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  float64x2_t v143;
  float64_t v144;
  double v145;
  double v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  double v150;
  double v151;
  double v152;
  float64x2_t v153;
  double v154;
  double v155;
  double v156;
  float64x2_t v157;
  double v158;
  float64x2_t v159;
  double v160;
  float64x2_t v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  float64x2_t v175;
  _OWORD v176[2];
  float64x2_t v177;
  __int128 v178;
  __int128 v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189[9];
  double v190[9];
  __int128 v191;
  uint64_t v192;
  uint64_t v193;

  v193 = *MEMORY[0x24BDAC8D0];
  if (a6 == 6)
  {
    v173 = a10[1];
    v174 = *a10;
    v172 = a10[2];
    v19 = a10[4];
    v20 = a10[5];
    v21 = __sincos_stret(a10[3]);
    v22 = __sincos_stret(v19);
    v23 = __sincos_stret(v20);
    v24 = v21.__cosval * v22.__cosval;
    v25 = v21.__cosval * v22.__sinval * v23.__sinval - v21.__sinval * v23.__cosval;
    v26 = v21.__sinval * v23.__sinval + v21.__cosval * v22.__sinval * v23.__cosval;
    v27 = v21.__sinval * v22.__cosval;
    v28 = v21.__cosval * v23.__cosval + v21.__sinval * v22.__sinval * v23.__sinval;
    v29 = v21.__sinval * v22.__sinval * v23.__cosval - v21.__cosval * v23.__sinval;
    v30 = -v22.__sinval;
    v31 = v22.__cosval * v23.__sinval;
    v32 = v22.__cosval * v23.__cosval;
    v178 = 0u;
    v179 = 0u;
    v177 = 0u;
    v175 = 0u;
    memset(v176, 0, sizeof(v176));
    if (a4)
    {
LABEL_3:
      v33 = v26;
      v170 = v31;
      v34 = v27;
      v35 = v28;
      v36 = v32;
      v37 = v24;
      v38 = v29;
      g_coords_diff((double *)a1, a4, (uint64_t)&v175);
      v29 = v38;
      v24 = v37;
      v32 = v36;
      v28 = v35;
      v27 = v34;
      v31 = v170;
      v26 = v33;
      goto LABEL_7;
    }
  }
  else
  {
    if (a6 != 3)
      return;
    v39 = a10[1];
    v40 = a10[2];
    v41 = __sincos_stret(*a10);
    v42 = __sincos_stret(v39);
    v43 = __sincos_stret(v40);
    v24 = v41.__cosval * v42.__cosval;
    v25 = v41.__cosval * v42.__sinval * v43.__sinval - v41.__sinval * v43.__cosval;
    v26 = v41.__sinval * v43.__sinval + v41.__cosval * v42.__sinval * v43.__cosval;
    v27 = v41.__sinval * v42.__cosval;
    v28 = v41.__cosval * v43.__cosval + v41.__sinval * v42.__sinval * v43.__sinval;
    v29 = v41.__sinval * v42.__sinval * v43.__cosval - v41.__cosval * v43.__sinval;
    v30 = -v42.__sinval;
    v31 = v42.__cosval * v43.__sinval;
    v32 = v42.__cosval * v43.__cosval;
    v173 = 0.0;
    v174 = 0.0;
    v172 = 0.0;
    v178 = 0u;
    v179 = 0u;
    v177 = 0u;
    v175 = 0u;
    memset(v176, 0, sizeof(v176));
    if (a4)
      goto LABEL_3;
  }
  v44 = *(float64x2_t *)(a1 + 48);
  v176[1] = *(_OWORD *)(a1 + 32);
  v177 = v44;
  v45 = *(_OWORD *)(a1 + 80);
  v178 = *(_OWORD *)(a1 + 64);
  v179 = v45;
  v46 = *(_OWORD *)(a1 + 16);
  v175 = *(float64x2_t *)a1;
  v176[0] = v46;
LABEL_7:
  v47 = a2[1];
  v49 = a2[2];
  v48 = a2[3];
  v50 = a2[6];
  v51 = a2[7];
  v52 = v175.f64[0] * *a2 + 0.0 + *((double *)v176 + 1) * v48 + v177.f64[0] * v50;
  v53 = a2[4];
  v54 = a2[5];
  v55 = v175.f64[0] * v47 + 0.0 + *((double *)v176 + 1) * v53 + v177.f64[0] * v51;
  v56 = a2[8];
  v57 = v175.f64[0] * v49 + 0.0 + *((double *)v176 + 1) * v54 + v177.f64[0] * v56;
  v58 = v175.f64[1] * *a2 + 0.0 + *(double *)&v176[1] * v48 + v177.f64[1] * v50;
  v59 = v175.f64[1] * v47 + 0.0 + *(double *)&v176[1] * v53 + v177.f64[1] * v51;
  v60 = v175.f64[1] * v49 + 0.0 + *(double *)&v176[1] * v54 + v177.f64[1] * v56;
  v61 = *(double *)v176 * *a2 + 0.0 + *((double *)&v176[1] + 1) * v48 + *(double *)&v178 * v50;
  v62 = *(double *)v176 * v47 + 0.0 + *((double *)&v176[1] + 1) * v53 + *(double *)&v178 * v51;
  v63 = *(double *)v176 * v49 + 0.0 + *((double *)&v176[1] + 1) * v54 + *(double *)&v178 * v56;
  v190[0] = v24 * v52 + 0.0 + v27 * v58 + v30 * v61;
  v190[1] = v24 * v55 + 0.0 + v27 * v59 + v30 * v62;
  v190[2] = v24 * v57 + 0.0 + v27 * v60 + v30 * v63;
  v190[3] = v25 * v52 + 0.0 + v28 * v58 + v31 * v61;
  v190[4] = v25 * v55 + 0.0 + v28 * v59 + v31 * v62;
  v190[5] = v25 * v57 + 0.0 + v28 * v60 + v31 * v63;
  v166 = v55;
  v168 = v52;
  v158 = v58;
  v155 = v62;
  v156 = v61;
  v160 = v59;
  v190[6] = v26 * v52 + 0.0 + v29 * v58 + v32 * v61;
  v190[7] = v26 * v55 + 0.0 + v29 * v59 + v32 * v62;
  v162 = v60;
  v164 = v57;
  v154 = v63;
  v190[8] = v26 * v57 + 0.0 + v29 * v60 + v32 * v63;
  g_log_so3((double *)&v191, v190);
  v64 = a2[9];
  v65 = a2[10];
  v66 = a2[11];
  v67 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64((float64x2_t)0, v175, v64 - *((double *)&v178 + 1)), *(float64x2_t *)((char *)v176 + 8), v65 - *(double *)&v179), v177, v66 - *((double *)&v179 + 1));
  v68 = *(double *)v176 * (v64 - *((double *)&v178 + 1))
      + 0.0
      + *((double *)&v176[1] + 1) * (v65 - *(double *)&v179)
      + *(double *)&v178 * (v66 - *((double *)&v179 + 1));
  if (a5)
  {
    v69 = sqrt((*(double *)(a1 + 80) - v65) * (*(double *)(a1 + 80) - v65)+ (*(double *)(a1 + 72) - v64) * (*(double *)(a1 + 72) - v64)+ (*(double *)(a1 + 88) - v66) * (*(double *)(a1 + 88) - v66));
    v70 = 1.0 / v69;
    v71 = v69 > 0.000001;
    v72 = 1000000.0;
    if (v71)
      v72 = v70;
    v67 = vmulq_n_f64(v67, v72);
    v171 = v72;
    v68 = v68 * v72;
    if (v71)
      v73 = v70;
    else
      v73 = 0.0;
  }
  else
  {
    v171 = 1.0;
    v73 = 1.0;
  }
  v74 = a11;
  v75 = v174;
  v76 = v173;
  v77 = v172;
  if (a3)
  {
    v75 = v174 * *a3;
    v76 = v173 * *a3;
    v77 = v172 * *a3;
  }
  v78 = v67.f64[1];
  *(_OWORD *)a10 = v191;
  *((_QWORD *)a10 + 2) = v192;
  if (a6 != 3)
  {
    a10[3] = v75 - v67.f64[0];
    a10[4] = v76 - v67.f64[1];
    a10[5] = v77 - v68;
  }
  if (a11)
  {
    v153 = v67;
    g_jac_right_jacobian_so3(v189, (double *)&v191);
    g_inv_3x3(&v180, v189);
    if (a5)
    {
      if (a4)
        __assert_rtn("g_jac_rel_pose_so3_scale", "g_jac.c", 2657, "!dpos");
      v79 = *(double *)(a1 + 72) - a2[9];
      v80 = *(double *)(a1 + 80) - a2[10];
      v81 = *(double *)(a1 + 88) - a2[11];
      v82 = vnegq_f64(v153);
      v148 = vmulq_n_f64(vmulq_n_f64(v82, v80), v73 * v73);
      v149 = vmulq_n_f64(vmulq_n_f64(v82, v79), v73 * v73);
      v147 = vmulq_n_f64(vmulq_n_f64(v82, v81), v73 * v73);
      v150 = v73 * v73 * -(v68 * v80);
      v151 = v73 * v73 * -(v68 * v81);
      v152 = v73 * v73 * -(v68 * v79);
      if (a7 <= 0)
      {
LABEL_42:
        if (a8 >= 1)
        {
LABEL_43:
          v157 = v175;
          v159 = *(float64x2_t *)((char *)v176 + 8);
          v163 = *(double *)v176;
          v165 = *((double *)&v176[1] + 1);
          v161 = v177;
          v112 = v180;
          v113 = v181;
          v114 = v182;
          v115 = v183;
          v116 = v184;
          v167 = *(double *)&v178;
          v169 = v185;
          v74 = &a11[a7 * a6];
          v117 = v186;
          v118 = v187;
          v119 = v188;
          bzero(v74, 8 * a6 * (unint64_t)a8);
          v120 = -v112;
          v121 = -v113;
          v122 = -v114;
          v123 = -v115;
          v124 = -v116;
          v125 = -v169;
          v126 = -v117;
          v127 = -v118;
          v128 = -v119;
          v130 = a6 == 6 && a8 == 6;
          if (a6 == 3 && a8 == 3)
          {
            *v74 = v122;
            v74[1] = v125;
            v74[6] = v120;
            v74[7] = v123;
            v74[2] = v128;
            v74[3] = v121;
            v131 = 8;
            v74[4] = v124;
            v74[5] = v127;
          }
          else if (a6 == 3 && a8 == 6)
          {
            v74[9] = v122;
            v74[10] = v125;
            v74[15] = v120;
            v74[16] = v123;
            v74[11] = v128;
            v74[12] = v121;
            v131 = 17;
            v74[13] = v124;
            v74[14] = v127;
          }
          else
          {
            if (!v130)
            {
              log_msg(1, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/pwin/core/base/g_jac.c", 2716, (uint64_t)"g_jac_rel_pose_so3_scale", "%s doesn't support n_par2 = %d and n_res = %d", "g_jac_rel_pose_so3_scale", a8, a6);
              abort();
            }
            v74[18] = v122;
            v74[19] = v125;
            *(float64x2_t *)(v74 + 3) = vmlaq_n_f64(vnegq_f64(v149), v157, v171);
            v74[24] = v121;
            v74[25] = v124;
            *(float64x2_t *)(v74 + 9) = vmlaq_n_f64(vnegq_f64(v148), v159, v171);
            v74[30] = v120;
            v74[31] = v123;
            *(float64x2_t *)(v74 + 15) = vmlaq_n_f64(vnegq_f64(v147), v161, v171);
            v74[20] = v128;
            v74[5] = -(v152 - v163 * v171);
            v74[26] = v127;
            v74[11] = -(v150 - v165 * v171);
            v74[32] = v126;
            v126 = -(v151 - v167 * v171);
            v131 = 17;
          }
          v74[v131] = v126;
        }
LABEL_58:
        if (a3)
        {
          if (a9 >= 1)
          {
            v132 = &v74[a8 * a6];
            bzero(v132, 8 * a6 * (unint64_t)a9);
            v132[3] = -(v174 * v171);
            v132[4] = -(v173 * v171);
            v132[5] = -(v172 * v171);
          }
        }
        return;
      }
      v143 = v82;
      v142 = -v68;
    }
    else
    {
      if (a7 <= 0)
      {
        v150 = 0.0;
        v151 = 0.0;
        v152 = 0.0;
        v148 = 0u;
        v149 = 0u;
        v147 = 0u;
        if (a8 >= 1)
          goto LABEL_43;
        goto LABEL_58;
      }
      v143 = vnegq_f64(v153);
      v142 = -v68;
      if (a4)
      {
        v144 = v78;
        v145 = v68;
        v83 = a4[1];
        v84 = a4[2];
        v85 = a4[3];
        v86 = a4[4];
        v87 = a4[5];
        v134 = v175.f64[0] * v85 + 0.0 + *((double *)v176 + 1) * v86 + v177.f64[0] * v87;
        v135 = v175.f64[0] * *a4 + 0.0 + *((double *)v176 + 1) * v83 + v177.f64[0] * v84;
        v88 = a4[6];
        v89 = a4[7];
        v90 = a4[8];
        v133 = v175.f64[0] * v88 + 0.0 + *((double *)v176 + 1) * v89 + v177.f64[0] * v90;
        v136 = v175.f64[1] * v85 + 0.0 + *(double *)&v176[1] * v86 + v177.f64[1] * v87;
        v137 = v175.f64[1] * v88 + 0.0 + *(double *)&v176[1] * v89 + v177.f64[1] * v90;
        v138 = v175.f64[1] * *a4 + 0.0 + *(double *)&v176[1] * v83 + v177.f64[1] * v84;
        v140 = *(double *)v176 * v85 + 0.0 + *((double *)&v176[1] + 1) * v86 + *(double *)&v178 * v87;
        v141 = *(double *)v176 * *a4 + 0.0 + *((double *)&v176[1] + 1) * v83 + *(double *)&v178 * v84;
        v152 = 0.0;
        v139 = *(double *)v176 * v88 + 0.0 + *((double *)&v176[1] + 1) * v89 + *(double *)&v178 * v90;
        v150 = 0.0;
        v151 = 0.0;
        v148 = 0u;
        v149 = 0u;
        v147 = 0u;
        goto LABEL_27;
      }
      v151 = 0.0;
      v152 = 0.0;
      v150 = 0.0;
      v148 = 0u;
      v149 = 0u;
      v147 = 0u;
    }
    v144 = v78;
    v145 = v68;
    v134 = *((double *)v176 + 1);
    v135 = v175.f64[0];
    v140 = *((double *)&v176[1] + 1);
    v136 = *(double *)&v176[1];
    v141 = *(double *)v176;
    v137 = v177.f64[1];
    v133 = v177.f64[0];
    v138 = v175.f64[1];
    v139 = *(double *)&v178;
LABEL_27:
    v91 = v180;
    v92 = v181;
    v93 = v182;
    v94 = v183;
    v95 = v184;
    v96 = v185;
    v97 = v186;
    v98 = v187;
    v146 = v188;
    bzero(a11, 8 * a6 * (unint64_t)a7);
    v99 = v91 * v168 + 0.0 + v92 * v166 + v93 * v164;
    v100 = v91 * v158 + 0.0 + v92 * v160 + v93 * v162;
    v101 = v91 * v156 + 0.0 + v92 * v155 + v93 * v154;
    v102 = v94 * v168 + 0.0 + v95 * v166 + v96 * v164;
    v103 = v94 * v158 + 0.0 + v95 * v160 + v96 * v162;
    v104 = v94 * v156 + 0.0 + v95 * v155 + v96 * v154;
    v105 = v97 * v168 + 0.0 + v98 * v166 + v146 * v164;
    v106 = v97 * v158 + 0.0 + v98 * v160 + v146 * v162;
    v107 = v97 * v156 + 0.0 + v98 * v155 + v146 * v154;
    v109 = a6 == 6 && a7 == 6;
    if (a6 == 3 && a7 == 3)
    {
      *a11 = v101;
      a11[1] = v104;
      a11[3] = v100;
      a11[4] = v103;
      a11[6] = v99;
      a11[7] = v102;
      v110 = 8;
      v111 = 5;
      a11[2] = v107;
    }
    else if (a6 == 3 && a7 == 6)
    {
      a11[9] = v101;
      a11[10] = v104;
      a11[12] = v100;
      a11[13] = v103;
      a11[15] = v99;
      a11[16] = v102;
      v110 = 17;
      v111 = 14;
      a11[11] = v107;
    }
    else
    {
      if (!v109)
      {
        log_msg(1, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/pwin/core/base/g_jac.c", 2692, (uint64_t)"g_jac_rel_pose_so3_scale", "%s doesn't support n_par1 = %d and n_res = %d", "g_jac_rel_pose_so3_scale", a7, a6);
        abort();
      }
      a11[33] = 0.0;
      a11[18] = v101;
      a11[19] = v104;
      a11[3] = v149.f64[0] - v135 * v171;
      a11[4] = v149.f64[1] - v138 * v171;
      a11[24] = v100;
      a11[25] = v103;
      a11[9] = v148.f64[0] - v134 * v171;
      a11[10] = v148.f64[1] - v136 * v171;
      a11[28] = 0.0;
      a11[15] = v147.f64[0] - v133 * v171;
      a11[16] = v147.f64[1] - v137 * v171;
      a11[34] = v145;
      a11[21] = v144;
      a11[22] = v143.f64[0];
      a11[20] = v107;
      a11[5] = v152 - v141 * v171;
      a11[23] = 0.0;
      a11[26] = v106;
      a11[27] = v142;
      a11[11] = v150 - v140 * v171;
      a11[29] = v153.f64[0];
      a11[30] = v99;
      a11[31] = v102;
      a11[32] = v105;
      v106 = v151 - v139 * v171;
      v105 = v143.f64[1];
      v110 = 35;
      v111 = 17;
    }
    a11[v111] = v106;
    a11[v110] = v105;
    goto LABEL_42;
  }
}

void g_jac_abs_pose_so3(double *a1, double *a2, int a3, int a4, double *a5, uint64_t a6)
{
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  __double2 v39;
  __double2 v40;
  __double2 v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  int v55;
  int v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  double v111;
  double v112;
  double v113;
  uint64_t v114;
  uint64_t v115;
  double v116;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128[9];
  double v129[9];
  __int128 v130;
  uint64_t v131;
  uint64_t v132;

  v132 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    if (a2)
    {
      v10 = *a2;
      v11 = a1[3];
      v12 = a2[3];
      v115 = (uint64_t)(a2 + 3);
      v13 = a2[6];
      v114 = (uint64_t)(a2 + 6);
      v14 = a1[6];
      v15 = *a1 * *a2 + 0.0 + v11 * v12 + v14 * v13;
      v16 = (uint64_t)(a2 + 1);
      v17 = a2[1];
      v18 = (uint64_t)(a2 + 4);
      v19 = a2[4];
      v20 = (uint64_t)(a2 + 7);
      v21 = a2[7];
      v22 = *a1 * v17 + 0.0 + v11 * v19 + v14 * v21;
      v23 = (uint64_t)(a2 + 2);
      v24 = a2[2];
      v116 = 0.0;
      v25 = (uint64_t)(a2 + 5);
      v26 = a2[5];
      v27 = *a1 * v24 + 0.0 + v11 * v26;
      v110 = 0.0;
      v111 = 0.0;
      v112 = 0.0;
      v113 = 0.0;
      v28 = 0.0;
      v29 = (uint64_t)(a2 + 8);
      v30 = a2[8];
      v31 = 0.0;
      v32 = 0.0;
      v33 = 0.0;
      v34 = 0.0;
      v35 = 0.0;
      v36 = 0.0;
    }
    else
    {
      v110 = *a5;
      v111 = a5[1];
      v116 = a5[2];
      v37 = a5[4];
      v38 = a5[5];
      v39 = __sincos_stret(a5[3]);
      v40 = __sincos_stret(v37);
      v41 = __sincos_stret(v38);
      v36 = v39.__cosval * v40.__cosval;
      v17 = v39.__cosval * v40.__sinval * v41.__sinval - v39.__sinval * v41.__cosval;
      v34 = v39.__sinval * v41.__sinval + v39.__cosval * v40.__sinval * v41.__cosval;
      v12 = v39.__sinval * v40.__cosval;
      v32 = v39.__cosval * v41.__cosval + v39.__sinval * v40.__sinval * v41.__sinval;
      v26 = v39.__sinval * v40.__sinval * v41.__cosval - v39.__cosval * v41.__sinval;
      v21 = v40.__cosval * v41.__sinval;
      v30 = v40.__cosval * v41.__cosval;
      v42 = a1[3];
      v14 = a1[6];
      v15 = *a1 * (v39.__cosval * v40.__cosval) + 0.0 + v42 * (v39.__sinval * v40.__cosval) - v14 * v40.__sinval;
      v22 = *a1 * v17 + 0.0 + v42 * v32 + v14 * (v40.__cosval * v41.__sinval);
      v25 = 40;
      v20 = 56;
      v16 = 8;
      v115 = 24;
      v114 = 48;
      v18 = 32;
      v23 = 16;
      v29 = 64;
      v28 = v40.__cosval * v41.__sinval;
      v31 = v26;
      v33 = v39.__sinval * v40.__cosval;
      v35 = v17;
      v10 = v39.__cosval * v40.__cosval;
      v27 = *a1 * v34 + 0.0 + v42 * v26;
      v112 = -v40.__sinval;
      v113 = v40.__cosval * v41.__cosval;
      v13 = -v40.__sinval;
      v19 = v32;
      v24 = v34;
    }
    v129[0] = v15;
    v129[1] = v22;
    v43 = a1[1];
    v44 = a1[2];
    v45 = a1[4];
    v46 = a1[5];
    v47 = a1[7];
    v48 = a1[8];
    v129[2] = v27 + v14 * v30;
    v129[3] = v43 * v10 + 0.0 + v45 * v12 + v47 * v13;
    v129[4] = v43 * v17 + 0.0 + v45 * v19 + v47 * v21;
    v129[5] = v43 * v24 + 0.0 + v45 * v26 + v47 * v30;
    v129[6] = v44 * v10 + 0.0 + v46 * v12 + v48 * v13;
    v129[7] = v44 * v17 + 0.0 + v46 * v19 + v48 * v21;
    v129[8] = v44 * v24 + 0.0 + v46 * v26 + v48 * v30;
    g_log_so3((double *)&v130, v129);
    g_jac_right_jacobian_so3(v128, (double *)&v130);
    g_inv_3x3(&v119, v128);
    if (a2)
    {
      v36 = *a2;
      v35 = *(double *)v16;
      v49 = v121;
      v34 = *(double *)v23;
      v50 = v119 * *a2 + 0.0 + v120 * *(double *)v16 + v121 * *(double *)v23;
      v33 = *(double *)v115;
      v32 = *(double *)v18;
      v31 = *(double *)v25;
      v51 = v119 * *(double *)v115 + 0.0 + v120 * *(double *)v18 + v121 * *(double *)v25;
      v52 = *(double *)v114;
      v28 = *(double *)v20;
      v53 = v119 * *(double *)v114 + 0.0 + v120 * *(double *)v20;
      v54 = *(double *)v29;
      v56 = a4;
      v55 = a3;
    }
    else
    {
      v49 = v121;
      v50 = v119 * v36 + 0.0 + v120 * v35 + v121 * v34;
      v51 = v119 * v33 + 0.0 + v120 * v32 + v121 * v31;
      v52 = v112;
      v53 = v119 * v112 + 0.0 + v120 * v28;
      v56 = a4;
      v55 = a3;
      v54 = v113;
    }
    v58 = v122;
    v57 = v123;
    v59 = v124;
    v60 = v125;
    v62 = v126;
    v61 = v127;
    v63 = *a1;
    v64 = a1[1];
    v65 = a1[6];
    v66 = a1[7];
    v68 = a1[2];
    v67 = a1[3];
    v70 = a1[4];
    v69 = a1[5];
    v71 = a1[8];
    *(_OWORD *)a5 = v130;
    *((_QWORD *)a5 + 2) = v131;
    v72 = v116;
    if (v55 == 6)
    {
      if (a2)
      {
        a5[3] = a2[9] - a1[9];
        a5[4] = a2[10] - a1[10];
        v72 = a2[11];
      }
      else
      {
        a5[3] = v110 - a1[9];
        a5[4] = v111 - a1[10];
      }
      a5[5] = v72 - a1[11];
    }
    if (v56 && a6)
    {
      if (v56 != v55)
        __assert_rtn("g_jac_abs_pose_so3", "g_jac.c", 2875, "n_par == n_res");
      v73 = v60 * v36 + 0.0;
      v74 = v58 * v36 + 0.0 + v57 * v35;
      v75 = v52;
      v76 = v74 + v59 * v34;
      v77 = v73 + v62 * v35 + v61 * v34;
      v78 = v58 * v33 + 0.0 + v57 * v32 + v59 * v31;
      v79 = v58 * v75 + 0.0 + v57 * v28;
      v80 = v60 * v33 + 0.0 + v62 * v32 + v61 * v31;
      v81 = v53 + v49 * v54;
      v82 = v79 + v59 * v54;
      v83 = v60 * v75 + 0.0 + v62 * v28 + v61 * v54;
      v84 = v50 * v63 + 0.0 + v51 * v67;
      v85 = v50 * v64 + 0.0 + v51 * v70;
      v86 = v50 * v68 + 0.0 + v51 * v69;
      v87 = v76 * v63 + 0.0 + v78 * v67;
      v88 = v76 * v64 + 0.0 + v78 * v70;
      v89 = v76 * v68 + 0.0 + v78 * v69;
      v90 = v77 * v63 + 0.0 + v80 * v67;
      v91 = v77 * v64 + 0.0 + v80 * v70;
      v92 = v77 * v68 + 0.0 + v80 * v69;
      v93 = v84 + v81 * v65;
      v94 = v85 + v81 * v66;
      v95 = v86 + v81 * v71;
      v96 = v87 + v82 * v65;
      v97 = v88 + v82 * v66;
      v98 = v89 + v82 * v71;
      v99 = v90 + v83 * v65;
      v100 = v91 + v83 * v66;
      v101 = v92 + v83 * v71;
      if (v55 == 6)
      {
        *(_OWORD *)(a6 + 256) = 0u;
        *(_OWORD *)(a6 + 272) = 0u;
        *(_OWORD *)(a6 + 224) = 0u;
        *(_OWORD *)(a6 + 240) = 0u;
        *(_OWORD *)(a6 + 192) = 0u;
        *(_OWORD *)(a6 + 208) = 0u;
        *(_OWORD *)(a6 + 160) = 0u;
        *(_OWORD *)(a6 + 176) = 0u;
        *(_OWORD *)(a6 + 128) = 0u;
        *(_OWORD *)(a6 + 144) = 0u;
        *(_OWORD *)(a6 + 96) = 0u;
        *(_OWORD *)(a6 + 112) = 0u;
        *(_OWORD *)(a6 + 64) = 0u;
        *(_OWORD *)(a6 + 80) = 0u;
        *(_OWORD *)(a6 + 32) = 0u;
        *(_OWORD *)(a6 + 48) = 0u;
        v102 = 3;
        v103 = 10;
        *(double *)(a6 + 192) = v94;
        v104 = 17;
        v105 = 32;
        *(double *)(a6 + 240) = v93;
        v106 = 26;
        v107 = 20;
        v108 = 31;
        v109 = 25;
        *(double *)(a6 + 144) = v95;
        *(double *)(a6 + 152) = v98;
        v94 = v97;
        v93 = v96;
        v98 = v92 + v83 * v71;
        v97 = v91 + v83 * v66;
        v96 = v99;
        v101 = 1.0;
        v100 = 1.0;
        v99 = 1.0;
        *(_OWORD *)a6 = 0u;
        *(_OWORD *)(a6 + 16) = 0u;
      }
      else
      {
        if (v55 != 3)
          return;
        *(double *)a6 = v95;
        v102 = 8;
        v103 = 5;
        v104 = 2;
        v105 = 7;
        v106 = 4;
        v107 = 1;
        v108 = 6;
        v109 = 3;
      }
      *(double *)(a6 + 8 * v109) = v94;
      *(double *)(a6 + 8 * v108) = v93;
      *(double *)(a6 + 8 * v107) = v98;
      *(double *)(a6 + 8 * v106) = v97;
      *(double *)(a6 + 8 * v105) = v96;
      *(double *)(a6 + 8 * v104) = v101;
      *(double *)(a6 + 8 * v103) = v100;
      *(double *)(a6 + 8 * v102) = v99;
    }
  }
}

uint64_t int_pair_cmp_dec(int *a1, int *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  BOOL v6;
  BOOL v7;
  unsigned int v8;
  unsigned int v10;

  v2 = *a1;
  v3 = *a2;
  if (*a1 == *a2)
  {
    v4 = a1[1];
    v5 = a2[1];
    v7 = __OFSUB__(v4, v5);
    v6 = v4 - v5 < 0;
    if (v4 <= v5)
      v8 = 0;
    else
      v8 = -1;
    if (v6 != v7)
      return 1;
    else
      return v8;
  }
  else
  {
    if (v2 <= v3)
      v10 = 0;
    else
      v10 = -1;
    if (v2 >= v3)
      return v10;
    else
      return 1;
  }
}

float vl_gt_get_pose_err(float32x2_t *a1, float32x2_t *a2, float *a3, float *a4)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float result;
  _OWORD v17[6];
  _OWORD v18[6];

  *a3 = 0.0;
  v5 = a1[4].f32[1] - a2[4].f32[1];
  v6 = (float)(v5 * v5) + 0.0;
  *a3 = v6;
  v7 = a1[5].f32[0] - a2[5].f32[0];
  v8 = v6 + (float)(v7 * v7);
  *a3 = v8;
  v9 = a1[5].f32[1] - a2[5].f32[1];
  *a3 = sqrtf(v8 + (float)(v9 * v9));
  v10 = vcvtq_f64_f32(a2[1]);
  v18[0] = vcvtq_f64_f32(*a2);
  v18[1] = v10;
  *(float32x2_t *)&v10.f64[0] = a2[4];
  v11 = vcvtq_f64_f32(a2[5]);
  v12 = vcvtq_f64_f32(a2[3]);
  v18[2] = vcvtq_f64_f32(a2[2]);
  v18[3] = v12;
  v18[4] = vcvtq_f64_f32(*(float32x2_t *)&v10.f64[0]);
  v18[5] = v11;
  *(float32x2_t *)&v10.f64[0] = a1[4];
  v13 = vcvtq_f64_f32(a1[5]);
  v14 = vcvtq_f64_f32(a1[1]);
  v17[0] = vcvtq_f64_f32(*a1);
  v17[1] = v14;
  v15 = vcvtq_f64_f32(a1[3]);
  v17[2] = vcvtq_f64_f32(a1[2]);
  v17[3] = v15;
  v17[4] = vcvtq_f64_f32(*(float32x2_t *)&v10.f64[0]);
  v17[5] = v13;
  result = g_coords_angle_diff((double *)v18, (double *)v17);
  *a4 = result;
  return result;
}

uint64_t vl_kpts_extract()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  int v4;
  uint64_t *v5;
  uint64_t *v6;
  float *v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  BOOL v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  float *v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void **v52;
  void *v53;
  unsigned int v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t i;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  float v79;
  uint64_t v80;
  float v81;
  float v82;
  unint64_t v83;
  float v84;
  float v85;
  float v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  float v93;
  float v94;
  uint64_t v95;
  float v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  float v105;
  float v106;
  float v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t j;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _DWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t k;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  int v135;
  _OWORD v136[17];
  int v137;
  _BYTE v138[2400];
  uint64_t v139;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = v0;
  v139 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(v0 + 212))
  {
    *(_QWORD *)(v0 + 120) -= mach_absolute_time();
    v12 = *v8;
    v13 = *(_DWORD *)v8 == 1000 || LODWORD(v12) == 2;
    if (v13)
      goto LABEL_17;
  }
  else
  {
    clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(v0 + 32));
    clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(v11 + 16));
    clock_gettime(_CLOCK_MONOTONIC, (timespec *)v11);
    v12 = *v8;
    if (*(_DWORD *)v8 == 1000 || LODWORD(v12) == 2)
      goto LABEL_17;
  }
  if (v12 == 0.0)
  {
    if (!*((_DWORD *)v8 + 1))
    {
      vl_dog_calculate_keypoints(v10, (uint64_t)(v8 + 9), (_QWORD *)(v11 + 1296), v6, v11 + 1320, v11 + 216, v11 + 432);
      v15 = *((_DWORD *)v8 + 1);
      if (v15 == 1000)
        goto LABEL_28;
      goto LABEL_18;
    }
    printf("%sError : ", (const char *)&unk_210BC3C5E);
    printf("VL_KPTS_DET_DOG requires VL_KPTS_DESC_SIFT as descriptor");
  }
  else
  {
    printf("%sError : ", (const char *)&unk_210BC3C5E);
    printf("Unsupported detection method %d");
  }
  putchar(10);
LABEL_17:
  v15 = *((_DWORD *)v8 + 1);
  if (v15 == 1000)
    goto LABEL_28;
LABEL_18:
  if (v15 == 1)
  {
    if (!v2)
    {
      if (*(_BYTE *)(v11 + 1368) || *((_DWORD *)v8 + 29))
      {
        vl_lbl_desc(*((unsigned int *)v8 + 22), v10, v10 + 232, *((_DWORD *)v8 + 22), v11 + 1344, v11 + 648, v11 + 864, v6);
      }
      else if (v4)
      {
        v130 = v6[3];
        v131 = v6[5];
        if (v131 < 0)
          v6[5] = (2 * v131) & ~((2 * v131) >> 63);
        if (v130 < 0)
          bzero((void *)(4 * v130 + v6[4]), -4 * v130);
        v6[3] = 0;
      }
    }
    if (v8[27] > 0.0)
    {
      v137 = 0;
      memset(v136, 0, sizeof(v136));
      lbl_par_ver((uint64_t)v136, *((_DWORD *)v8 + 22));
      vl_kpts_filter_lbl();
    }
  }
  else if (v15)
  {
    printf("%sError : ", (const char *)&unk_210BC3C5E);
    printf("Unsupported extraction method %d", *((_DWORD *)v8 + 1));
    putchar(10);
  }
  else
  {
    vl_sift_desc(v11 + 1296, v6, v11 + 1320, v11 + 864);
  }
LABEL_28:
  *(_QWORD *)(v11 + 1320) = 0;
  printf("Verbose : ");
  printf("KPTS:  Extracted %s%llu%s kpts", (const char *)&unk_210BC3C5E, *v6, (const char *)&unk_210BC3C5E);
  putchar(10);
  if (*(_DWORD *)(v11 + 212))
  {
    *(_QWORD *)(v11 + 120) += mach_absolute_time();
    v23 = v11;
    if (*(_DWORD *)(v11 + 212))
      goto LABEL_30;
LABEL_33:
    result = log_col_app((uint64_t)"%s%s%s:%s%7.1fms%s", v16, v17, v18, v19, v20, v21, v22, (char)&str_4_1);
    if (!*(_QWORD *)(v23 + 1888))
      return result;
    goto LABEL_34;
  }
  clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(v11 + 64));
  clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(v11 + 80));
  clock_gettime(_CLOCK_MONOTONIC, (timespec *)(v11 + 48));
  v25 = *(_QWORD *)(v11 + 56) - *(_QWORD *)(v11 + 8) + 1000000000 * (*(_QWORD *)(v11 + 48) - *(_QWORD *)v11);
  v26 = *(_QWORD *)(v11 + 72) - *(_QWORD *)(v11 + 24) + 1000000000 * (*(_QWORD *)(v11 + 64) - *(_QWORD *)(v11 + 16));
  v27 = *(_QWORD *)(v11 + 88) - *(_QWORD *)(v11 + 40) + 1000000000 * (*(_QWORD *)(v11 + 80) - *(_QWORD *)(v11 + 32));
  v28 = *(_QWORD *)(v11 + 128);
  v29 = v25 + *(_QWORD *)(v11 + 120);
  *(_QWORD *)(v11 + 96) = v25;
  *(_QWORD *)(v11 + 104) = v26;
  v30 = v26 + v28;
  *(_QWORD *)(v11 + 112) = v27;
  *(_QWORD *)(v11 + 120) = v29;
  v31 = v27 + *(_QWORD *)(v11 + 136);
  *(_QWORD *)(v11 + 128) = v30;
  *(_QWORD *)(v11 + 136) = v31;
  ++*(_DWORD *)(v11 + 144);
  v23 = v11;
  if (!*(_DWORD *)(v11 + 212))
    goto LABEL_33;
LABEL_30:
  printf("Verbose : ");
  printf("Total time for %40s : %7.3f ms", (const char *)(v23 + 148), (double)*(uint64_t *)(v23 + 120) * 0.000001);
  result = putchar(10);
  if (!*(_QWORD *)(v23 + 1888))
    return result;
LABEL_34:
  v32 = v23;
  if (*(_QWORD *)(v23 + 1896))
  {
    v33 = *(_DWORD *)(v10 + 8);
    v34 = *(_DWORD *)(v10 + 12);
    LODWORD(v35) = *(_DWORD *)(v23 + 1904);
    if ((int)v35 <= 100)
      v35 = 100;
    else
      v35 = v35;
    v132 = v35;
    bzero(v138, 0x960uLL);
    v36 = *v6;
    v134 = v23;
    if (*v6 < 1)
      goto LABEL_135;
    v37 = 0;
    v38 = 0;
    v39 = (float)v33 / 10.0;
    v40 = (float)v34 / 10.0;
    v133 = v6;
    do
    {
      v41 = (float *)(v6[1] + v37);
      v42 = v41[1];
      v43 = (int)(float)(*v41 / v39);
      v44 = (int)(float)(v42 / v40);
      v45 = (uint64_t *)&v138[240 * v43 + 24 * v44];
      v46 = *v45;
      v47 = *v45 + 1;
      v48 = v45[2];
      if (*v45 >= v48)
      {
        v49 = 2 * v48;
        v13 = v48 == 0;
        v50 = 32;
        if (!v13)
          v50 = v49;
        if (v50 <= v46)
          v51 = *v45 + 1;
        else
          v51 = v50;
        if (v51)
        {
          v52 = (void **)&v138[240 * (int)v43 + 24 * (int)v44];
          v135 = (int)(float)(v42 / v40);
          v53 = malloc_type_realloc(v52[1], 8 * v51, 0x5371AD0AuLL);
          LODWORD(v44) = v135;
          v52[1] = v53;
          v6 = v133;
          v36 = *v133;
        }
        v45[2] = v51;
      }
      *v45 = v47;
      *(_QWORD *)(*(_QWORD *)&v138[240 * (int)v43 + 8 + 24 * (int)v44] + 8 * v46) = v41;
      ++v38;
      v37 += 288;
    }
    while (v36 > v38);
    v32 = v134;
    if (v36 < 1)
    {
LABEL_135:
      v63 = (char *)malloc_type_malloc(0x200uLL, 0x74F846BDuLL);
      v55 = 0;
      v56 = 0;
    }
    else
    {
      v54 = 0;
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v58 = v132;
      do
      {
        v59 = v54 / 0x64uLL;
        if (*(_QWORD *)&v138[240 * (v54 % 0x64 / 0xA) + 24 * (v54 % 0x64 % 0xA)] > v59)
        {
          v60 = *(_QWORD *)(*(_QWORD *)&v138[240 * (v54 % 0x64 / 0xA) + 8 + 24 * (v54 % 0x64 % 0xA)] + 8 * v59);
          if (v55 >= v57)
          {
            v61 = 2 * v57;
            if (!v57)
              v61 = 32;
            if (v61 <= v55)
              v57 = v55 + 1;
            else
              v57 = v61;
            if (v57)
            {
              v62 = (char *)malloc_type_realloc(v56, 8 * v57, 0xA7D75265uLL);
              v58 = v132;
              v56 = v62;
              v36 = *v6;
            }
          }
          *(_QWORD *)&v56[8 * v55++] = v60;
          v32 = v134;
        }
        if (v55 >= v58)
          break;
        ++v54;
      }
      while (v55 < v36);
      v63 = (char *)malloc_type_malloc(0x200uLL, 0x74F846BDuLL);
      if (v55)
      {
        v64 = 0;
        v65 = 1;
        v66 = 32;
        v67 = v55;
        v68 = v56;
        while (1)
        {
          v69 = v64;
          while (1)
          {
            if (!v65)
            {
              --v69;
              v70 = &v63[16 * v69];
              v67 = *((_QWORD *)v70 + 1);
              v68 = &v56[8 * *(_QWORD *)v70];
            }
            if ((uint64_t)v67 > 15)
              break;
            if ((uint64_t)v67 > 1)
            {
              v71 = 0;
              v72 = v68 + 8;
              for (i = 1; i != v67; ++i)
              {
                v74 = v71;
                do
                {
                  v75 = *(_QWORD *)&v68[8 * v74];
                  v76 = *(_QWORD *)&v72[8 * v74];
                  if ((float)(*(float *)(v75 + 16) - *(float *)(v76 + 16)) >= 0.0)
                    break;
                  *(_QWORD *)&v72[8 * v74] = v75;
                  *(_QWORD *)&v68[8 * v74] = v76;
                  v77 = v74-- + 1;
                }
                while (v77 > 1);
                ++v71;
              }
            }
            v65 = 0;
            v67 = 0;
            if (v69 < 1)
              goto LABEL_136;
          }
          if (v67 > 0x27)
            break;
          v78 = v67 >> 1;
          v79 = *(float *)(*(_QWORD *)&v68[8 * (v67 >> 1)] + 16);
          v80 = *(_QWORD *)v68;
          v81 = *(float *)(*(_QWORD *)v68 + 16);
          v82 = v79 - v81;
          v83 = v67 - 1;
          v84 = *(float *)(*(_QWORD *)&v68[8 * v67 - 8] + 16);
          v85 = v84 - v81;
          v86 = v84 - v79;
          if (v86 >= 0.0)
            v87 = v67 >> 1;
          else
            v87 = v67 - 1;
          if (v85 >= 0.0)
            v83 = 0;
          else
            v87 = 0;
          if (v86 >= 0.0)
            v78 = v83;
          if (v82 >= 0.0)
            v78 = v87;
LABEL_122:
          v108 = 0;
          v109 = 0;
          v110 = 8 * v78;
          *(_QWORD *)v68 = *(_QWORD *)&v68[v110];
          *(_QWORD *)&v68[v110] = v80;
          for (j = 1; j != v67; ++j)
          {
            v112 = *(_QWORD *)&v68[8 * j];
            if ((float)(*(float *)(*(_QWORD *)v68 + 16) - *(float *)(v112 + 16)) <= 0.0)
            {
              ++v109;
              *(_QWORD *)&v68[8 * j] = *(_QWORD *)&v68[8 * v109];
              *(_QWORD *)&v68[8 * v109] = v112;
              if ((float)(*(float *)(*(_QWORD *)v68 + 16) - *(float *)(*(_QWORD *)&v68[8 * j] + 16)) == 0.0)
              {
                ++v108;
                *(_QWORD *)&v68[8 * v109] = *(_QWORD *)&v68[8 * v108];
                *(_QWORD *)&v68[8 * v108] = v112;
              }
            }
          }
          v113 = 8 * v109 - 8 * v108;
          v114 = v108;
          do
          {
            v115 = *(_QWORD *)&v68[v113];
            *(_QWORD *)&v68[v113] = *(_QWORD *)&v68[8 * v114];
            *(_QWORD *)&v68[8 * v114] = v115;
            v113 += 8;
          }
          while (v114-- > 0);
          v64 = v69 + 1;
          if (v69 + 1 >= v66)
          {
            v117 = 2 * v66;
            v63 = (char *)malloc_type_realloc(v63, 32 * v66, 0x8C45E77AuLL);
            v66 = v117;
            v32 = v134;
          }
          v118 = &v63[16 * v69];
          *(_QWORD *)v118 = v109 + ((v68 - v56) >> 3) + 1;
          *((_QWORD *)v118 + 1) = v67 + ~v109;
          v67 = v109 - v108;
          v65 = v109 != v108;
          if (v69 < 0 && !v67)
            goto LABEL_136;
        }
        v88 = 0;
        v89 = 0;
        if (v67 <= 0x7D0)
          v90 = 8;
        else
          v90 = 26;
        if (v67 <= 0x7D0)
          v91 = 3;
        else
          v91 = 9;
        while (1)
        {
          v92 = (uint64_t)(v67 - 1 + v88) / v90;
          v93 = *(float *)(*(_QWORD *)&v68[8 * v92] + 16);
          v94 = *(float *)(*(_QWORD *)&v68[8 * (v88 / v90)] + 16);
          v95 = (uint64_t)(2 * v67 - 2 + v88) / v90;
          v96 = *(float *)(*(_QWORD *)&v68[8 * v95] + 16);
          if ((float)(v93 - v94) >= 0.0)
          {
            if ((float)(v96 - v94) < 0.0)
              goto LABEL_103;
            if ((float)(v96 - v93) < 0.0)
            {
LABEL_105:
              *((_QWORD *)v136 + v89) = v95;
              goto LABEL_97;
            }
          }
          else if ((float)(v96 - v93) >= 0.0)
          {
            if ((float)(v96 - v94) < 0.0)
              goto LABEL_105;
LABEL_103:
            *((_QWORD *)v136 + v89) = v88 / v90;
            goto LABEL_97;
          }
          *((_QWORD *)v136 + v89) = v92;
LABEL_97:
          ++v89;
          v88 += 3 * v67 - 3;
          if (v91 == v89)
          {
            while (1)
            {
              v97 = 0;
              v98 = 0;
              v99 = v91;
              v91 /= 3uLL;
              if (v91 <= 1)
                v100 = 1;
              else
                v100 = v91;
              v101 = 8 * v100;
              do
              {
                v102 = *(_QWORD *)((char *)v136 + v97);
                v103 = *(_QWORD *)((char *)v136 + v97 + 8);
                v104 = *(_QWORD *)((char *)&v136[1] + v97);
                v105 = *(float *)(*(_QWORD *)&v68[8 * v103] + 16);
                v106 = *(float *)(*(_QWORD *)&v68[8 * v102] + 16);
                v107 = *(float *)(*(_QWORD *)&v68[8 * v104] + 16);
                if ((float)(v105 - v106) >= 0.0)
                {
                  if ((float)(v107 - v106) < 0.0)
                    goto LABEL_118;
                  if ((float)(v107 - v105) >= 0.0)
                  {
LABEL_111:
                    *(_QWORD *)((char *)v136 + v98) = v103;
                    goto LABEL_112;
                  }
                }
                else
                {
                  if ((float)(v107 - v105) < 0.0)
                    goto LABEL_111;
                  if ((float)(v107 - v106) >= 0.0)
                  {
LABEL_118:
                    *(_QWORD *)((char *)v136 + v98) = v102;
                    goto LABEL_112;
                  }
                }
                *(_QWORD *)((char *)v136 + v98) = v104;
LABEL_112:
                v98 += 8;
                v97 += 24;
              }
              while (v101 != v98);
              if (v99 < 9)
              {
                v78 = *(_QWORD *)&v136[0];
                v80 = *(_QWORD *)v68;
                goto LABEL_122;
              }
            }
          }
        }
      }
    }
LABEL_136:
    free(v63);
    v119 = *(int *)(v32 + 1904);
    if (v55 < v119)
      v119 = v55;
    if (v119 < 1)
    {
      v122 = 0;
      v121 = 0;
    }
    else
    {
      v120 = 0;
      v121 = 0;
      v122 = 0;
      v123 = 0;
      do
      {
        v125 = v121;
        v126 = *(_DWORD **)&v56[8 * v120];
        if (v121 >= v123)
        {
          v127 = 2 * v123;
          if (!v123)
            v127 = 64;
          if (v127 <= v121 + 1)
            v123 = v121 + 1;
          else
            v123 = v127;
          v122 = malloc_type_realloc(v122, 4 * v123, 0x8A6A4D9DuLL);
        }
        *((_DWORD *)v122 + v121) = *v126;
        v121 += 2;
        if (v125 + 2 > v123)
        {
          v128 = 2 * v123;
          if (!v123)
            v128 = 64;
          if (v128 <= v121)
            v123 = v125 + 2;
          else
            v123 = v128;
          if (v123)
            v122 = malloc_type_realloc(v122, 4 * v123, 0x36DEF258uLL);
        }
        *((_DWORD *)v122 + v125 + 1) = v126[1];
        ++v120;
        v124 = *(int *)(v32 + 1904);
        if (v55 < v124)
          v124 = v55;
      }
      while (v124 > v120);
    }
    for (k = 0; k != 2400; k += 240)
    {
      free(*(void **)&v138[k + 8]);
      free(*(void **)&v138[k + 32]);
      free(*(void **)&v138[k + 56]);
      free(*(void **)&v138[k + 80]);
      free(*(void **)&v138[k + 104]);
      free(*(void **)&v138[k + 128]);
      free(*(void **)&v138[k + 152]);
      free(*(void **)&v138[k + 176]);
      free(*(void **)&v138[k + 200]);
      free(*(void **)&v138[k + 224]);
    }
    free(v56);
    return (*(uint64_t (**)(_QWORD, uint64_t, void *))(v134 + 1888))(*(_QWORD *)(v134 + 1896), v121, v122);
  }
  return result;
}

uint64_t g_ps_cyl_z(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  float *v16;
  float32x2_t *v17;
  float32x2_t *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float32x2_t *v35;
  float v36;
  uint64_t v37;
  float v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float **v43;
  float *v44;
  float *v45;
  uint64_t v46;
  float *v47;
  float *v48;
  uint64_t v49;
  int v50;
  float v51;
  __int32 v52;
  float v53;
  float32x2_t *v54;
  int v55;
  int v56;
  unsigned int v57;
  float v58;
  float32x2_t v59;
  int v60;
  float32x2_t v61;
  _QWORD *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  int v70;
  float v71;
  float32x2_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  signed int v80;
  int v81;
  signed int v82;
  int v83;
  float v84;
  float v85;
  float v86;
  float v87;
  uint64_t i;
  uint64_t v90;
  uint64_t v91;
  int v92;
  float v93;
  float v94;
  float v95;
  float v96;
  signed int v97;
  int v98;
  int v99;
  uint64_t v100;
  int v101;
  __int32 v102;
  float v103;
  float v104;
  float v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  float *v111;
  uint64_t v112;
  uint64_t v113;
  int *v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  float v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _WORD *v131;
  unsigned __int16 v132;
  char *v133;
  uint64_t v134;
  char *v135;
  char *v136;
  unsigned __int16 v137;
  unsigned int v138;
  BOOL v139;
  unint64_t v140;
  uint64_t v141;
  _WORD *v142;
  uint64_t v143;
  uint64_t v144;
  float v145;
  float *v146;
  float v147;
  float32x2_t v148;
  float v149;
  int v150;
  unsigned int v151;
  int v152;
  unsigned int v153;
  int v154;
  char v155;
  BOOL v156;
  float32x2_t v157;
  uint64_t v158;
  unsigned int v159;
  float32x2_t v161;
  int v162;
  uint64_t v163;
  unsigned int v164;
  unsigned int v165;
  float32x2_t v166;
  int v167;
  uint64_t v168;
  unsigned int v169;
  unsigned int v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  BOOL v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  char *v184;
  uint64_t j;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  float v191;
  uint64_t v192;
  float v193;
  float v194;
  uint64_t v195;
  float v196;
  float v197;
  float v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  float v205;
  float v206;
  uint64_t v207;
  float v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  float v217;
  float v218;
  float v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t k;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  void *v234;
  uint64_t v235;
  float v236;
  int v237;
  int v238;
  int v239;
  int v240;
  __int32 v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  uint64_t v253;
  float32x2_t *v254;
  uint64_t v255;
  int32x2_t v256;
  float v257;
  float *v258;
  float v259;
  BOOL v260;
  float v261;
  float v262;
  float v263;
  float v265;
  float32x2_t v267;
  float32x2_t v268;
  float64x2_t v269;
  int32x2_t v270;
  int64x2_t v271;
  float64x2_t v272;
  float *v273;
  int v274;
  int v275;
  int v276;
  int v277;
  int v278;
  int v279;
  int v280;
  uint64_t v282;
  uint64_t v283;
  float *v284;
  float32x2_t v286;
  float32x2_t *v287;
  uint64_t v288;
  float *v289;
  float *v290;
  uint64_t v291;
  uint64_t v292;
  void *v293;
  uint64_t v294;
  int v295;
  float v296;
  float v297;
  float v298;
  float v299;
  float v300;
  float v301;
  float v302;
  double v303;
  __double2 v304;
  float v305;
  int v306;
  BOOL v307;
  unsigned int v308;
  BOOL v309;
  BOOL v310;
  int v311;
  int v312;
  float v313;
  float v314;
  float v315;
  int v316;
  float v317;
  float v318;
  float v319;
  float v320;
  float v321;
  float v322;
  float v323;
  float v324;
  float v325;
  float v326;
  float *v327;
  float *v328;
  float *v329;
  uint64_t v330;
  unsigned __int8 *v331;
  float v332;
  float v333;
  float v334;
  float v335;
  unsigned int v336;
  float v337;
  unsigned int v338;
  unsigned int v339;
  unsigned int v340;
  unsigned int v341;
  unsigned int v342;
  unsigned int v343;
  unsigned int v344;
  unsigned int v345;
  unsigned int v346;
  unsigned int v347;
  unsigned int v348;
  unsigned int v349;
  unsigned int v350;
  unsigned int v351;
  float v352;
  float v353;
  double v354;
  double v355;
  double v356;
  float v357;
  float v358;
  float v359;
  float v360;
  float v361;
  float v362;
  float v363;
  float v364;
  float v365;
  float v366;
  float v367;
  float v368;
  float v369;
  float v370;
  float v371;
  float v372;
  float v373;
  float v374;
  float v375;
  float v376;
  float v377;
  float v378;
  float v379;
  float v380;
  float v381;
  float v382;
  float v383;
  float v384;
  float v385;
  float v386;
  float v387;
  float v388;
  float v389;
  float v390;
  float v391;
  float v392;
  float v393;
  unsigned int v394;
  unsigned int v395;
  float v396;
  unsigned int v397;
  float v398;
  unsigned int v399;
  float v400;
  unsigned int v401;
  unsigned int v402;
  float v403;
  unsigned int v404;
  unsigned int v405;
  unsigned int v406;
  float v407;
  float v408;
  float v409;
  unsigned int v410;
  unsigned int v411;
  float v412;
  unsigned int v413;
  unsigned int v414;
  float v415;
  unsigned int v416;
  unsigned int v417;
  float v418;
  unsigned int v419;
  unsigned int v420;
  float v421;
  float v422;
  float v423;
  unsigned int v424;
  unsigned int v425;
  float v426;
  float v427;
  unsigned int v428;
  unint64_t v430;
  float *v431;
  uint64_t v432;
  float *v433;
  float v434;
  float *v435;
  uint64_t v436;
  uint64_t v437;
  float *v438;
  float *v439;
  uint64_t v440;
  float v441;
  float *v442;
  float v443;
  float *v444;
  uint64_t v445;
  float v446;
  float v447;
  float v448;
  float v449;
  double v450;
  double v451;
  __double2 v452;
  __double2 v453;
  double v454;
  __double2 v455;
  double v456;
  double v457;
  double v458;
  double v459;
  int v460;
  float *v461;
  float *v462;
  float v463;
  float *v464;
  uint64_t v465;
  unsigned __int8 *v466;
  float v467;
  float v468;
  float v469;
  double v470;
  double v471;
  double v472;
  float v473;
  float v474;
  float v475;
  float v476;
  float v477;
  float v478;
  __double2 v480;
  __double2 v481;
  double v482;
  __double2 v483;
  double v484;
  double v485;
  double v486;
  double v487;
  float *v488;
  float *v489;
  float *v490;
  uint64_t v491;
  unsigned __int8 *v492;
  float v493;
  float v494;
  float v495;
  double v496;
  double v497;
  double v498;
  float v499;
  float v500;
  float v501;
  float v502;
  float v503;
  float v504;
  float v506;
  float *v508;
  float *v509;
  unsigned __int8 *v510;
  float *v511;
  uint64_t v512;
  float v513;
  int v514;
  float v515;
  float v516;
  double v517;
  double v518;
  double v519;
  float v520;
  float v521;
  float v522;
  float v523;
  float v524;
  float v525;
  float v526;
  int v527;
  float v528;
  _BOOL4 v529;
  uint64_t v530;
  uint64_t v531;
  double v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  float v536;
  float v537;
  float v538;
  float v539;
  double v540;
  float v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  __int128 *v545;
  uint64_t v546;
  uint64_t v547;
  float *v548;
  uint64_t v549;
  __int128 v550;
  __int128 *v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  _OWORD *v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 *v566;
  uint64_t v567;
  uint64_t v568;
  float *v569;
  uint64_t v570;
  __int128 v571;
  __int128 *v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  __int128 v579;
  __int128 v580;
  __int128 v581;
  __int128 v582;
  float v583;
  uint64_t v584;
  uint64_t v585;
  _QWORD *v586;
  char *v587;
  uint64_t v588;
  float *v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  _DWORD **v594;
  uint64_t v595;
  float v596;
  float v597;
  _DWORD *v598;
  char v599;
  int v600;
  char v601;
  signed int v602;
  signed int v603;
  uint64_t v604;
  float v605;
  float v606;
  signed int v607;
  float v608;
  float v609;
  _QWORD *v611;
  _QWORD *v612;
  uint64_t v613;
  uint64_t v614;
  int v615;
  float v616;
  float v617;
  float v618;
  float v619;
  float v621;
  signed int v623;
  _QWORD *v624;
  _QWORD *v625;
  uint64_t v626;
  uint64_t v627;
  int v628;
  float v629;
  float v630;
  float v631;
  float v632;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  float v637;
  uint64_t v638;
  uint64_t result;
  int v640;
  int v641;
  float *v642;
  uint64_t v643;
  float v644;
  float v645;
  float v646;
  uint64_t v647;
  float *v648;
  float v649;
  __int128 *v650;
  _BYTE *v651;
  uint64_t v652;
  float v653;
  __int32 v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  float *v660;
  float *v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  int *ptr;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  float v671;
  float v672;
  float v673;
  unsigned int v674;
  float v675;
  uint64_t v676;
  float32x2_t *v677;
  uint64_t v678;
  int v679;
  _QWORD *v680;
  unsigned __int8 *v681;
  int v682;
  float v683;
  float v684;
  float v685;
  float v686;
  float v687;
  float v688;
  float v689;
  float v690;
  float v691;
  float v692;
  float v693;
  double v694;
  double v695;
  double v696;
  double v697;
  double v698;
  double v699;
  double v700;
  double v701;
  double v702;
  double v703;
  double cosval;
  double sinval;
  float v706;
  float v707;
  float v708;
  float v709;
  float v710;
  double v711;
  float v712;
  float v713;
  float v714;
  float v715;
  float v716;
  float v717;
  float v718;
  float v719;
  float v720;
  float v721;
  float v722;
  float v723;
  float v724;
  float v725;
  float v726;
  float v727;
  float v728;
  float v729;
  float v730;
  float v731;
  float v732;
  float v733;
  float v734;
  float v735;
  float v736;
  float v737;
  float v738;
  float v739;
  float v740;
  float v741;
  __int128 v742;
  float v743;
  float v744;
  float v745;
  float v746;
  float v747;
  double v748;
  float v749;
  double v750;
  float v751;
  double v752;
  float v753;
  double v754;
  float v755;
  double v756;
  float v757;
  double v758;
  float v759;
  double v760;
  _DWORD **v761;
  float v762;
  double v763;
  uint64_t v764;
  float v765;
  double v766;
  uint64_t v767;
  int v768;
  __int32 v769;
  float v770;
  double v771;
  char v772;
  int v773;
  int v774;
  float v775;
  double v776;
  float v777;
  int v778;
  uint64_t v779;
  unsigned int v780;
  float v781;
  double v782;
  float v783;
  char v784;
  uint64_t v785;
  void *v786;
  uint64_t v787;
  float v788;
  uint64_t v789;
  __int128 v790;
  __int128 v791;
  __int128 v792;
  __int128 v793;
  __int128 v794;
  __int128 v795;
  __int128 v796;
  __int128 v797;
  __int128 v798;
  __int128 v799;
  __int128 v800;
  __int128 v801;
  __int128 v802;
  __int128 v803;
  __int128 v804;
  __int128 v805;
  unint64_t v806;
  float v807;
  float v808;
  float v809;
  float v810;
  float v811;
  float v812;
  float v813;
  float v814;
  float v815;
  float v816;
  float v817;
  float v818;
  float v819;
  float v820;
  float v821;
  float v822;
  float v823;
  float v824;
  float v825;
  float v826;
  float v827;
  float v828;
  float v829;
  float v830;
  float v831;
  float v832;
  float v833;
  float v834;
  float v835;
  float v836;
  float v837;
  float v838;
  float v839;
  uint64_t v840;

  v12 = MEMORY[0x24BDAC7A8](a1, a2);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v663 = v21;
  v664 = v12;
  v665 = v22;
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v30 = v29;
  v32 = v31;
  v33 = a11;
  v34 = a12;
  v840 = *MEMORY[0x24BDAC8D0];
  v651 = malloc_type_calloc(v19, 1uLL, 0x5AF481C9uLL);
  v786 = 0;
  v785 = 0;
  v787 = 0;
  if (v18)
    v35 = v18;
  else
    v35 = (float32x2_t *)v16;
  v677 = v35;
  v673 = v28;
  v675 = v30;
  v36 = v24;
  if (a10 >= 1)
  {
    v37 = 0;
    v38 = -INFINITY;
    v39 = INFINITY;
    do
    {
      v40 = v14 + 24 * v37;
      v41 = *(unsigned int *)(v40 + 12);
      if ((int)v41 >= 1 && *(int *)(v14 + 24 * v37 + 8) >= 1)
      {
        v42 = 0;
        v43 = (float **)(a9 + 24 * v37);
        v44 = *(float **)v40;
        v45 = *v43;
        v46 = 4 * (_QWORD)v43[2];
        do
        {
          v47 = v44;
          v48 = v45;
          v49 = *(unsigned int *)(v14 + 24 * v37 + 8);
          do
          {
            if (v39 >= (float)(*v47 - *v48))
              v39 = *v47 - *v48;
            if (v38 <= (float)(*v47 + *v48))
              v38 = *v47 + *v48;
            ++v48;
            ++v47;
            --v49;
          }
          while (v49);
          ++v42;
          v45 = (float *)((char *)v45 + v46);
          v44 += *(_QWORD *)(v14 + 24 * v37 + 16);
        }
        while (v42 != v41);
      }
      ++v37;
    }
    while (v37 != a10);
    if (v39 <= v38)
    {
      v50 = 1 << *(_DWORD *)(a11 + 12);
      v51 = *(float *)(a11 + 4) / (float)v50;
      v52 = *(_DWORD *)(a11 + 24);
      v53 = *(float *)(a11 + 8) / (float)v50;
      v54 = (float32x2_t *)malloc_type_calloc(1uLL, 0x40uLL, 0x10A004074A90200uLL);
      v55 = (int)(float)((float)(v38 - v39) / v53);
      v56 = (int)(float)((float)(v36 + v36) / v51) + 1;
      if (v56 <= v55 + 1)
        v56 = v55 + 1;
      v57 = vcvtps_s32_f32(log2f((float)v56));
      v58 = (float)((1 << v57) + 1);
      v54[1] = vmla_n_f32(*v677, (float32x2_t)0x3F0000003F000000, -(float)(v58 * v51));
      v54[2].f32[0] = (float)((float)(v53 * v58) * -0.5) + (float)((float)(v39 + v38) * 0.5);
      v54[2].f32[1] = v51;
      v54[3].f32[0] = v53;
      v54[3].i32[1] = v57;
      v54[4].i32[0] = v52;
      v59 = v54[5];
      v60 = 16 * v52;
      v655 = v32;
      v768 = v20;
      if (v59)
      {
        v61 = (float32x2_t)(*(_QWORD *)&v59 - 1);
        v54[5] = v61;
        v62 = *(_QWORD **)(*(_QWORD *)&v54[6] + 8 * *(_QWORD *)&v61);
        bzero(v62, v60 + 2432);
      }
      else
      {
        v62 = malloc_type_calloc(1uLL, v60 + 2432, 0x8B962782uLL);
      }
      v63 = v54[4].i32[0];
      v62[2] = v62 + 304;
      v63 *= 2;
      v64 = (char *)v62 + v63 + 2432;
      v62[40] = v64;
      v65 = &v64[v63];
      v62[78] = v65;
      v66 = &v65[v63];
      v62[116] = v66;
      v67 = &v66[v63];
      v62[154] = v67;
      v68 = &v67[v63];
      v62[192] = v68;
      v69 = &v68[v63];
      v62[230] = v69;
      v62[268] = &v69[v63];
      *v54 = (float32x2_t)v62;
      LODWORD(v69) = v54[3].i32[1] - *(_DWORD *)(a11 + 12);
      v70 = v69 & ~((int)v69 >> 31);
      v71 = -v675;
      v72 = v677;
      if (v70 != 31)
      {
        v80 = 0;
        v81 = 1 << v70;
        if (1 << v70 <= 1)
          v81 = 1;
        v773 = v81;
        do
        {
          v82 = 0;
          do
          {
            v83 = 1 << (v54[3].i32[1] - v70);
            v84 = v54[2].f32[1];
            v85 = v54[1].f32[0] + (float)((float)((float)((float)v80 + 0.5) * (float)v83) * v84);
            v86 = v54[1].f32[1] + (float)((float)((float)((float)v82 + 0.5) * (float)v83) * v84);
            v87 = (float)((float)(v86 - v72->f32[1]) * (float)(v86 - v72->f32[1]))
                + (float)((float)(v85 - v72->f32[0]) * (float)(v85 - v72->f32[0]));
            if (v87 <= (float)(v36 * v36) && v87 >= (float)(v26 * v26))
            {
              for (i = 0; i != a10; ++i)
              {
                v90 = v14 + 24 * i;
                v91 = *(unsigned int *)(v90 + 8);
                LODWORD(v72) = vcvtms_s32_f32((float)(v85 - (float)(*v16 + (float)(v71 * 0.5))) * (float)((float)(int)v91 / v675));
                if ((v72 & 0x80000000) == 0 && (int)v91 > (int)v72)
                {
                  v92 = *(_DWORD *)(v90 + 12);
                  LODWORD(v91) = vcvtms_s32_f32((float)(v86 - (float)(v16[1] + (float)((float)-v673 * 0.5)))* (float)((float)v92 / v673));
                  if ((v91 & 0x80000000) == 0 && v92 > (int)v91)
                  {
                    v93 = *(float *)(*(_QWORD *)v90 + 4 * ((_QWORD)v72 + *(_QWORD *)(v14 + 24 * i + 16) * v91));
                    v94 = *(float *)(*(_QWORD *)(a9 + 24 * i) + 4 * ((_QWORD)v72 + *(_QWORD *)(a9 + 24 * i + 16) * v91));
                    v95 = v54[2].f32[0];
                    v96 = v54[3].f32[0];
                    v72 = (float32x2_t *)(int)(float)((float)((float)(v93 + v94) - v95) / v96);
                    v97 = (int)(float)((float)((float)(v93 - v94) - v95) / v96) >> (v54[3].i8[4] - v70);
                    v98 = (int)v72 >> (v54[3].i8[4] - v70);
                    if (v97 <= v98)
                    {
                      v99 = v98 + 1;
                      do
                        octnode_insert((uint64_t)v54, *v54, v70, v80, v82, v97++);
                      while (v99 != v97);
                    }
                  }
                }
                v71 = -v675;
              }
            }
            ++v82;
            v72 = v677;
          }
          while (v82 != v773);
          ++v80;
        }
        while (v80 != v773);
      }
      if (v768 < 1)
      {
        v75 = 0;
        ptr = 0;
        v73 = 0;
        v34 = a12;
        v76 = v655;
      }
      else
      {
        v73 = 0;
        ptr = 0;
        v74 = 0;
        v75 = v768;
        v34 = a12;
        v76 = v655;
        do
        {
          v77 = v75;
          v78 = v74 + 1;
          if (v74 >= v73)
          {
            v79 = 2 * v73;
            if (!v73)
              v79 = 64;
            if (v79 <= v74)
              v73 = v74 + 1;
            else
              v73 = v79;
            if (v73)
              ptr = (int *)malloc_type_realloc(ptr, 4 * v73, 0xB2B63D52uLL);
          }
          ptr[v74] = v74;
          ++v74;
          v75 = v77;
        }
        while (v77 != v78);
      }
      v100 = a11;
      v101 = *(_DWORD *)(a11 + 12);
      if ((v101 & 0x80000000) == 0)
      {
        v652 = v73;
        v102 = v54[3].i32[1];
        v654 = v102 - v101;
        v684 = v36 * v36;
        v683 = v26 * v26;
        v650 = (__int128 *)(v34 + 104);
        v680 = (_QWORD *)(v14 + 16);
        v103 = 0.5;
        v104 = v673;
        v105 = v675;
        while (1)
        {
          v106 = v75;
          if (v75 < 1)
          {
            v667 = 0;
            v108 = v654;
          }
          else
          {
            v107 = 0;
            v108 = v654;
            if (v654 == v102 - *(_DWORD *)(v100 + 12))
              v109 = -1;
            else
              v109 = v654 - 1;
            do
            {
              v113 = ptr[v107];
              if (v76)
                v110 = *(unsigned __int16 *)(v76 + 2 * v113);
              else
                v110 = 1;
              if (v663)
                v111 = (float *)(v663 + 8 * v113);
              else
                v111 = 0;
              if ((int)v113 <= 0)
                v112 = -(-(int)v113 & 0x7FF);
              else
                v112 = v113 & 0x7FF;
              v651[v113] = compute_score(v54, (uint64_t)*v54, v110, (float32x2_t *)(v665 + 12 * (int)v113), v111, a11, v654, v112, *(float *)(v664 + 8 * v113), *(float *)(v664 + 8 * v113 + 4), v109) == 0;
              ++v107;
            }
            while (v106 != v107);
            v667 = 0;
            v114 = ptr;
            v115 = v106;
            v100 = a11;
            do
            {
              v117 = *v114++;
              v116 = v117;
              if (!v651[v117])
                ptr[v667++] = v116;
              --v115;
            }
            while (v115);
          }
          v118 = v667;
          if (v667 <= v652)
            goto LABEL_88;
          v119 = 2 * v652;
          if (!v652)
            v119 = 64;
          if (v119 <= v667)
            v119 = v667;
          if (v119)
            break;
          v652 = 0;
          v120 = v667 - v106;
          if (v667 > v106)
            goto LABEL_89;
LABEL_90:
          integrate_score_to_leafs((uint64_t)*v54, 0, v108, v100);
          v785 = 0;
          v121 = *(int *)(v100 + 16);
          get_level(*v54, v108, (uint64_t)&v785);
          v123 = v785;
          if (v785 >= 1)
          {
            v124 = v786;
            v125 = v54[4].u32[0];
            v126 = (uint64_t *)v786;
            v127 = v785;
            if ((int)v125 <= 1)
            {
              do
              {
                v141 = *v126++;
                v142 = *(_WORD **)(v141 + 16);
                *(_DWORD *)(v141 + 24) = 0;
                LOWORD(v122) = *v142;
                v122 = (float)LODWORD(v122);
                *(float *)(v141 + 32) = v122;
                --v127;
              }
              while (v127);
            }
            else
            {
              v128 = 0;
              v129 = v125 - 1;
              do
              {
                v130 = v124[v128];
                v131 = *(_WORD **)(v130 + 16);
                v133 = (char *)(v131 + 1);
                v132 = *v131;
                v134 = v129;
                v135 = (char *)v131;
                v136 = (char *)(v131 + 1);
                do
                {
                  v138 = *(unsigned __int16 *)v136;
                  v136 += 2;
                  v137 = v138;
                  v139 = v132 >= v138;
                  if (v132 <= v138)
                    v132 = v137;
                  if (!v139)
                    v135 = v133;
                  v133 = v136;
                  --v134;
                }
                while (v134);
                v140 = (unint64_t)(v135 - (char *)v131) >> 1;
                *(_DWORD *)(v130 + 24) = v140;
                LOWORD(v122) = v131[(int)v140];
                v122 = (float)LODWORD(v122);
                *(float *)(v130 + 32) = v122;
                ++v128;
              }
              while (v128 != v123);
            }
            v143 = 0;
            v144 = 0;
            v145 = *(float *)(a11 + 36) * 32.0;
            while (1)
            {
              v146 = (float *)v124[v144];
              v147 = v146[8];
              if (v147 < v145)
                goto LABEL_104;
              v148 = *v54;
              v149 = *v146;
              v150 = *((_DWORD *)v146 + 1);
              v152 = *((_DWORD *)v146 + 2);
              v151 = *((_DWORD *)v146 + 3);
              v153 = v150 - 1;
              if (v150 >= 1)
              {
                v154 = **(_DWORD **)&v148;
                v155 = LOBYTE(v149) + ~**(_DWORD **)&v148;
                if (v152 < 0 || v153 >> v155 > 1 || (v151 & 0x80000000) != 0)
                  goto LABEL_121;
                v156 = v152 >> v155 > 1 || v151 >> v155 > 1;
                if (v156)
                  goto LABEL_121;
                v157 = *v54;
                if (v154 == LODWORD(v149))
                {
LABEL_118:
                  LOWORD(v147) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)&v157 + 16)
                                          + 2 * *(int *)(*(_QWORD *)&v157 + 24));
                  HIWORD(v159) = 16243;
                  v147 = (float)LODWORD(v147) * 0.95;
                  LOWORD(v159) = *(_WORD *)(*((_QWORD *)v146 + 2) + 2 * *((int *)v146 + 6));
                  if (v147 > (float)v159)
                    goto LABEL_104;
                }
                else
                {
                  v157 = *v54;
                  while (1)
                  {
                    v158 = *(_QWORD *)(*(_QWORD *)&v157 + 296);
                    if (!v158)
                      break;
                    v157 = (float32x2_t)(v158
                                       + 304
                                       * ((v153 >> (LOBYTE(v149) + ~(_BYTE)v154)) & 1 | (2
                                                                                       * ((v152 >> (LOBYTE(v149) + ~(_BYTE)v154)) & 1)) & 0xFFFFFFFB | (4 * ((v151 >> (LOBYTE(v149) + ~(_BYTE)v154)) & 1))));
                    v154 = **(_DWORD **)&v157;
                    if (**(_DWORD **)&v157 == LODWORD(v149))
                      goto LABEL_118;
                  }
                }
              }
              if (v150 >= -1)
              {
                v154 = **(_DWORD **)&v148;
                v155 = LOBYTE(v149) + ~**(_DWORD **)&v148;
LABEL_121:
                if ((v152 & 0x80000000) == 0
                  && (v150 + 1) >> v155 <= 1
                  && (v151 & 0x80000000) == 0
                  && v152 >> v155 <= 1
                  && v151 >> v155 <= 1)
                {
                  v161 = *v54;
                  if (v154 == LODWORD(v149))
                  {
LABEL_132:
                    LOWORD(v147) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)&v161 + 16)
                                            + 2 * *(int *)(*(_QWORD *)&v161 + 24));
                    HIWORD(v164) = 16243;
                    v147 = (float)LODWORD(v147) * 0.95;
                    LOWORD(v164) = *(_WORD *)(*((_QWORD *)v146 + 2) + 2 * *((int *)v146 + 6));
                    if (v147 > (float)v164)
                      goto LABEL_104;
                  }
                  else
                  {
                    LOBYTE(v162) = v154;
                    v161 = *v54;
                    while (1)
                    {
                      v163 = *(_QWORD *)(*(_QWORD *)&v161 + 296);
                      if (!v163)
                        break;
                      v161 = (float32x2_t)(v163
                                         + 304
                                         * (((v150 + 1) >> (LOBYTE(v149) + ~(_BYTE)v162)) & 1 | (2 * ((v152 >> (LOBYTE(v149) + ~(_BYTE)v162)) & 1)) & 0xFFFFFFFB | (4 * ((v151 >> (LOBYTE(v149) + ~(_BYTE)v162)) & 1))));
                      v162 = **(_DWORD **)&v161;
                      if (**(_DWORD **)&v161 == LODWORD(v149))
                        goto LABEL_132;
                    }
                  }
                }
                if ((v150 & 0x80000000) == 0)
                {
                  v165 = v150 >> v155;
                  if (v152 >= 1
                    && v165 <= 1
                    && (v151 & 0x80000000) == 0
                    && (v152 - 1) >> v155 <= 1
                    && v151 >> v155 <= 1)
                  {
                    v166 = *v54;
                    if (v154 == LODWORD(v149))
                    {
LABEL_143:
                      LOWORD(v147) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)&v166 + 16)
                                              + 2 * *(int *)(*(_QWORD *)&v166 + 24));
                      HIWORD(v169) = 16243;
                      v147 = (float)LODWORD(v147) * 0.95;
                      LOWORD(v169) = *(_WORD *)(*((_QWORD *)v146 + 2) + 2 * *((int *)v146 + 6));
                      if (v147 > (float)v169)
                        goto LABEL_104;
                    }
                    else
                    {
                      LOBYTE(v167) = v154;
                      v166 = *v54;
                      while (1)
                      {
                        v168 = *(_QWORD *)(*(_QWORD *)&v166 + 296);
                        if (!v168)
                          break;
                        v166 = (float32x2_t)(v168
                                           + 304
                                           * ((v150 >> (LOBYTE(v149) + ~(_BYTE)v167)) & 1 | (2 * (((v152 - 1) >> (LOBYTE(v149) + ~(_BYTE)v167)) & 1)) & 0xFFFFFFFB | (4 * ((v151 >> (LOBYTE(v149) + ~(_BYTE)v167)) & 1))));
                        v167 = **(_DWORD **)&v166;
                        if (**(_DWORD **)&v166 == LODWORD(v149))
                          goto LABEL_143;
                      }
                    }
                  }
                  if (v152 >= -1 && v165 <= 1 && (v151 & 0x80000000) == 0)
                  {
                    v170 = v152 + 1;
                    if (v170 >> v155 <= 1 && v151 >> v155 <= 1)
                    {
                      if (v154 == LODWORD(v149))
                      {
LABEL_152:
                        LOWORD(v147) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)&v148 + 16)
                                                + 2 * *(int *)(*(_QWORD *)&v148 + 24));
                        HIWORD(v172) = 16243;
                        LOWORD(v172) = *(_WORD *)(*((_QWORD *)v146 + 2) + 2 * *((int *)v146 + 6));
                        if ((float)((float)LODWORD(v147) * 0.95) > (float)v172)
                          goto LABEL_104;
                      }
                      else
                      {
                        while (1)
                        {
                          v171 = *(_QWORD *)(*(_QWORD *)&v148 + 296);
                          if (!v171)
                            break;
                          v148 = (float32x2_t)(v171
                                             + 304
                                             * ((v150 >> (LOBYTE(v149) + ~(_BYTE)v154)) & 1 | (2 * ((v170 >> (LOBYTE(v149) + ~(_BYTE)v154)) & 1)) & 0xFFFFFFFB | (4 * ((v151 >> (LOBYTE(v149) + ~(_BYTE)v154)) & 1))));
                          v154 = **(_DWORD **)&v148;
                          if (**(_DWORD **)&v148 == LODWORD(v149))
                            goto LABEL_152;
                        }
                      }
                    }
                  }
                }
              }
              v124[v143++] = v146;
LABEL_104:
              if (++v144 == v123)
                goto LABEL_155;
            }
          }
          v143 = 0;
LABEL_155:
          if (v143 <= v787)
          {
            v175 = v143 - v123;
            if (v143 <= v123)
              goto LABEL_164;
          }
          else
          {
            v173 = 32;
            if (v787)
              v173 = 2 * v787;
            if (v173 <= v143)
              v174 = v143;
            else
              v174 = v173;
            if (v174)
              v786 = malloc_type_realloc(v786, 8 * v174, 0x67F96349uLL);
            v787 = v174;
            v175 = v143 - v123;
            if (v143 <= v123)
            {
LABEL_164:
              v785 = v143;
              v176 = (char *)malloc_type_malloc(0x200uLL, 0xF3239948uLL);
              if (v143)
                goto LABEL_168;
              goto LABEL_236;
            }
          }
          bzero((char *)v786 + 8 * v123, 8 * v175);
          v785 = v143;
          v176 = (char *)malloc_type_malloc(0x200uLL, 0xF3239948uLL);
          if (v143)
          {
LABEL_168:
            v177 = 0;
            v178 = 1;
            v179 = (char *)v786;
            v180 = 32;
            while (1)
            {
              v181 = v177;
              while (1)
              {
                if (!v178)
                {
                  --v181;
                  v182 = &v176[16 * v181];
                  v143 = *((_QWORD *)v182 + 1);
                  v179 = (char *)v786 + 8 * *(_QWORD *)v182;
                }
                if (v143 > 15)
                  break;
                if (v143 > 1)
                {
                  v183 = 0;
                  v184 = v179 + 8;
                  for (j = 1; j != v143; ++j)
                  {
                    v186 = v183;
                    do
                    {
                      v187 = *(_QWORD *)&v179[8 * v186];
                      v188 = *(_QWORD *)&v184[8 * v186];
                      if ((float)(*(float *)(v187 + 32) - *(float *)(v188 + 32)) >= 0.0)
                        break;
                      *(_QWORD *)&v184[8 * v186] = v187;
                      *(_QWORD *)&v179[8 * v186] = v188;
                      v189 = v186-- + 1;
                    }
                    while (v189 > 1);
                    ++v183;
                  }
                }
                v178 = 0;
                v143 = 0;
                if (v181 < 1)
                  goto LABEL_236;
              }
              if ((unint64_t)v143 > 0x27)
                break;
              v190 = (unint64_t)v143 >> 1;
              v191 = *(float *)(*(_QWORD *)&v179[8 * ((unint64_t)v143 >> 1)] + 32);
              v192 = *(_QWORD *)v179;
              v193 = *(float *)(*(_QWORD *)v179 + 32);
              v194 = v191 - v193;
              v195 = v143 - 1;
              v196 = *(float *)(*(_QWORD *)&v179[8 * v143 - 8] + 32);
              v197 = v196 - v193;
              v198 = v196 - v191;
              if (v198 >= 0.0)
                v199 = (unint64_t)v143 >> 1;
              else
                v199 = v143 - 1;
              if (v197 >= 0.0)
                v195 = 0;
              else
                v199 = 0;
              if (v198 >= 0.0)
                v190 = v195;
              if (v194 >= 0.0)
                v190 = v199;
LABEL_224:
              v220 = 0;
              v221 = 0;
              v222 = 8 * v190;
              *(_QWORD *)v179 = *(_QWORD *)&v179[v222];
              *(_QWORD *)&v179[v222] = v192;
              for (k = 1; k != v143; ++k)
              {
                v224 = *(_QWORD *)&v179[8 * k];
                if ((float)(*(float *)(*(_QWORD *)v179 + 32) - *(float *)(v224 + 32)) <= 0.0)
                {
                  ++v221;
                  *(_QWORD *)&v179[8 * k] = *(_QWORD *)&v179[8 * v221];
                  *(_QWORD *)&v179[8 * v221] = v224;
                  if ((float)(*(float *)(*(_QWORD *)v179 + 32) - *(float *)(*(_QWORD *)&v179[8 * k] + 32)) == 0.0)
                  {
                    ++v220;
                    *(_QWORD *)&v179[8 * v221] = *(_QWORD *)&v179[8 * v220];
                    *(_QWORD *)&v179[8 * v220] = v224;
                  }
                }
              }
              v225 = 8 * v221 - 8 * v220;
              v226 = v220;
              do
              {
                v227 = *(_QWORD *)&v179[v225];
                *(_QWORD *)&v179[v225] = *(_QWORD *)&v179[8 * v226];
                *(_QWORD *)&v179[8 * v226] = v227;
                v225 += 8;
                v156 = v226-- <= 0;
              }
              while (!v156);
              v177 = v181 + 1;
              if (v181 + 1 >= v180)
              {
                v228 = 2 * v180;
                v176 = (char *)malloc_type_realloc(v176, 32 * v180, 0xB6BF364FuLL);
                v180 = v228;
              }
              v229 = &v176[16 * v181];
              *(_QWORD *)v229 = v221 + ((v179 - (_BYTE *)v786) >> 3) + 1;
              *((_QWORD *)v229 + 1) = v143 + ~v221;
              v143 = v221 - v220;
              v178 = v221 != v220;
              v118 = v667;
              if (v181 < 0 && !v143)
                goto LABEL_236;
            }
            v200 = 0;
            v201 = 0;
            v202 = 26;
            if ((unint64_t)v143 <= 0x7D0)
              v202 = 8;
            v203 = 3;
            if ((unint64_t)v143 > 0x7D0)
              v203 = 9;
            while (2)
            {
              v204 = (v143 - 1 + v200) / v202;
              v205 = *(float *)(*(_QWORD *)&v179[8 * v204] + 32);
              v206 = *(float *)(*(_QWORD *)&v179[8 * (v200 / v202)] + 32);
              v207 = (2 * v143 - 2 + v200) / v202;
              v208 = *(float *)(*(_QWORD *)&v179[8 * v207] + 32);
              if ((float)(v205 - v206) >= 0.0)
              {
                if ((float)(v208 - v206) < 0.0)
                  goto LABEL_205;
                if ((float)(v208 - v205) < 0.0)
                  goto LABEL_207;
              }
              else if ((float)(v208 - v205) >= 0.0)
              {
                if ((float)(v208 - v206) < 0.0)
                {
LABEL_207:
                  *((_QWORD *)&v796 + v201) = v207;
LABEL_199:
                  ++v201;
                  v200 += 3 * v143 - 3;
                  if (v203 != v201)
                    continue;
                  while (2)
                  {
                    v209 = 0;
                    v210 = 0;
                    v211 = v203;
                    v203 /= 3uLL;
                    if (v203 <= 1)
                      v212 = 1;
                    else
                      v212 = v203;
                    v213 = 8 * v212;
LABEL_215:
                    v214 = *(_QWORD *)((char *)&v796 + v209);
                    v215 = *(_QWORD *)((char *)&v796 + v209 + 8);
                    v216 = *(_QWORD *)((char *)&v796 + v209 + 16);
                    v217 = *(float *)(*(_QWORD *)&v179[8 * v215] + 32);
                    v218 = *(float *)(*(_QWORD *)&v179[8 * v214] + 32);
                    v219 = *(float *)(*(_QWORD *)&v179[8 * v216] + 32);
                    if ((float)(v217 - v218) >= 0.0)
                    {
                      if ((float)(v219 - v218) < 0.0)
                        goto LABEL_220;
                      if ((float)(v219 - v217) < 0.0)
                        goto LABEL_222;
                    }
                    else if ((float)(v219 - v217) >= 0.0)
                    {
                      if ((float)(v219 - v218) < 0.0)
                      {
LABEL_222:
                        *(_QWORD *)((char *)&v796 + v210) = v216;
LABEL_214:
                        v210 += 8;
                        v209 += 24;
                        if (v213 == v210)
                        {
                          if (v211 < 9)
                          {
                            v190 = v796;
                            v192 = *(_QWORD *)v179;
                            goto LABEL_224;
                          }
                          continue;
                        }
                        goto LABEL_215;
                      }
LABEL_220:
                      *(_QWORD *)((char *)&v796 + v210) = v214;
                      goto LABEL_214;
                    }
                    break;
                  }
                  *(_QWORD *)((char *)&v796 + v210) = v215;
                  goto LABEL_214;
                }
LABEL_205:
                *((_QWORD *)&v796 + v201) = v200 / v202;
                goto LABEL_199;
              }
              break;
            }
            *((_QWORD *)&v796 + v201) = v204;
            goto LABEL_199;
          }
LABEL_236:
          free(v176);
          v230 = v785;
          v34 = a12;
          v100 = a11;
          if (v785 > v121)
          {
            if (v787 < v121)
            {
              v231 = 32;
              if (v787)
                v231 = 2 * v787;
              if (v231 <= v121)
                v232 = v121;
              else
                v232 = v231;
              if (v232)
                v786 = malloc_type_realloc(v786, 8 * v232, 0x170297F0uLL);
              v787 = v232;
            }
            v785 = v121;
            v230 = v121;
          }
          v653 = *(float *)(a12 + 104 * *(int *)(a11 + 52) - 8);
          if (v230 >= 1)
          {
            v233 = 0;
            v659 = 0;
            v660 = 0;
            v657 = 0;
            v658 = 0;
            v234 = 0;
            v661 = 0;
            v662 = 0;
            while (1)
            {
              v235 = *((_QWORD *)v786 + v233);
              v794 = 0u;
              v795 = 0u;
              v792 = 0u;
              v793 = 0u;
              v790 = 0u;
              v791 = 0u;
              v236 = *(float *)(v34 + 104 * *(int *)(v100 + 52) - 8);
              if (*(float *)(v235 + 32) >= v236)
              {
                v237 = *(_DWORD *)v235;
                v239 = *(_DWORD *)(v235 + 4);
                v238 = *(_DWORD *)(v235 + 8);
                v240 = *(_DWORD *)(v235 + 12);
                v241 = v54[3].i32[1];
                v243 = v54[1].f32[0];
                v242 = v54[1].f32[1];
                v244 = v54[2].f32[0];
                v245 = v54[2].f32[1];
                v246 = v54[3].f32[0];
                v656 = v233;
                if (v118 >= 1)
                {
                  v769 = v54[3].i32[1];
                  v774 = *(_DWORD *)v235;
                  v247 = 0;
                  v248 = 0;
                  v249 = 0;
                  v779 = v235 + 40;
                  while (1)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        while (1)
                        {
                          while (1)
                          {
                            while (1)
                            {
                              v250 = v249;
                              v251 = ptr[v247];
                              v252 = ptr[v247] & 0x7FF;
                              if ((int)v251 <= 0)
                                v252 = -(-(int)v251 & 0x7FF);
                              if (((*(_QWORD *)(v779 + 8 * (v252 >> 6)) >> v252) & 1) != 0)
                                break;
                              v249 = v250;
                              if (v118 <= ++v247)
                                goto LABEL_338;
                            }
                            v253 = v248;
                            v668 = v118;
                            LODWORD(v796) = 0;
                            v789 = 0;
                            v254 = (float32x2_t *)(v665 + 12 * (int)v251);
                            v788 = 0.0;
                            v255 = v235;
                            if (compute_theta_alpha_node(v54, v235, v254, (float *)&v796, (float *)&v789 + 1, (float *)&v789, &v788))break;
                            v249 = v250;
                            v248 = v253;
                            v235 = v255;
                            v118 = v668;
                            if (v668 <= ++v247)
                              goto LABEL_338;
                          }
                          v257 = *(float *)(v664 + 8 * v251 + 4);
                          v258 = (float *)(v663 + 8 * v251);
                          if (!v663)
                            v258 = 0;
                          v259 = *(float *)(v100 + 28);
                          v260 = (float)(*(float *)&v796 - v259) > v257 || (float)(*((float *)&v789 + 1) + v259) < v257;
                          v248 = v253;
                          if (!v260)
                            break;
                          v249 = v250;
                          v235 = v255;
                          v118 = v668;
                          if (v668 <= ++v247)
                            goto LABEL_338;
                        }
                        v256.i32[0] = v789;
                        v235 = v255;
                        if (!v258)
                          break;
                        v261 = *v258;
                        v262 = v258[1];
                        v263 = (float)(*(float *)&v789 - *v258)
                             + (double)(int)((__PAIR64__((int)((float)(*(float *)&v789 - *v258) * 0.159154943), *(float *)&v789 - *v258)- COERCE_UNSIGNED_INT(0.0)) >> 32)* -6.28318531;
                        if (v263 > 0.0 && v262 > v263)
                          break;
                        v265 = (float)(v788 - v261)
                             + (double)(int)((__PAIR64__((int)((float)(v788 - v261) * 0.159154943), v788 - v261)
                                            - COERCE_UNSIGNED_INT(0.0)) >> 32)
                             * -6.28318531;
                        if (v265 > 0.0 && v262 > v265)
                          break;
                        v267.f32[0] = v261 + (float)(v262 * 0.5);
                        v267.f32[1] = v788;
                        v268 = vsub_f32(v267, (float32x2_t)vdup_lane_s32(v256, 0));
                        v269 = vcvtq_f64_f32(v268);
                        v270 = vadd_s32(vmovn_s64(vcvtq_s64_f64(vmulq_f64(v269, (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL)))), vcltz_f32(v268));
                        v271.i64[0] = v270.i32[0];
                        v271.i64[1] = v270.i32[1];
                        v272 = vmlaq_f64(v269, (float64x2_t)vdupq_n_s64(0xC01921FB54442D18), vcvtq_f64_s64(v271));
                        if ((vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v272, 1), v272))).u8[0] & 1) == 0)break;
                        v249 = v250;
                        v118 = v668;
                        if (v668 <= ++v247)
                          goto LABEL_338;
                      }
                      v273 = (float *)(v664 + 8 * v251);
                      v274 = *(_DWORD *)(v100 + 24);
                      v275 = (int)(float)((float)((float)((float)(*(float *)&v789 - *v273) * 0.15915)
                                                - (float)(int)((__PAIR64__((int)(float)((float)(*(float *)&v789 - *v273) * 0.15915), (float)(*(float *)&v789 - *v273) * 0.15915)- COERCE_UNSIGNED_INT(0.0)) >> 32))* (float)v274);
                      if (v274 - 1 < v275)
                        v275 = v274 - 1;
                      v276 = (int)(float)((float)((float)((float)(v788 - *v273) * 0.15915)
                                                - (float)(int)((__PAIR64__((int)(float)((float)(v788 - *v273) * 0.15915), (float)(v788 - *v273) * 0.15915)- COERCE_UNSIGNED_INT(0.0)) >> 32))* (float)v274);
                      if (v274 - 1 < v276)
                        v276 = v274 - 1;
                      if (v276 >= v275)
                        v277 = v275;
                      else
                        v277 = v276;
                      if (v276 > v275)
                        v275 = v276;
                      v278 = v275 - v277;
                      if (v275 - v277 < 0)
                        v278 = v277 - v275;
                      v279 = v274 >= 0 ? *(_DWORD *)(v100 + 24) : v274 + 1;
                      v280 = *(_DWORD *)(v255 + 24);
                      if (v278 < v279 >> 1)
                        break;
                      if (v275 > v280 && v280 > v277)
                        goto LABEL_315;
LABEL_304:
                      v282 = v253 + 1;
                      if (v253 >= v659)
                      {
                        v283 = 2 * v659;
                        if (!v659)
                          v283 = 21;
                        if (v283 <= v253)
                          v283 = v253 + 1;
                        if (v283)
                        {
                          v659 = v283;
                          v284 = (float *)malloc_type_realloc(v660, 12 * v283, 0xE91C7A4FuLL);
                          v273 = (float *)(v664 + 8 * v251);
                          v282 = v253 + 1;
                          v235 = v255;
                          v248 = v253;
                          v660 = v284;
                        }
                        else
                        {
                          v659 = 0;
                        }
                      }
                      v286 = *v254;
                      v287 = (float32x2_t *)&v660[3 * v248];
                      v287[1].i32[0] = v254[1].i32[0];
                      *v287 = v286;
                      if (v250 >= v657)
                      {
                        v288 = 2 * v657;
                        if (!v657)
                          v288 = 32;
                        if (v288 <= v250)
                          v288 = v250 + 1;
                        if (v288)
                        {
                          v657 = v288;
                          v289 = v273;
                          v290 = (float *)malloc_type_realloc(v661, 8 * v288, 0x9DF99B6EuLL);
                          v273 = v289;
                          v235 = v255;
                          v661 = v290;
                        }
                        else
                        {
                          v657 = 0;
                        }
                      }
                      *(_QWORD *)&v661[2 * v250] = *(_QWORD *)v273;
                      v291 = v662;
                      if (v662 < v658)
                        goto LABEL_333;
                      v292 = 2 * v658;
                      if (!v658)
                        v292 = 64;
                      v291 = v662;
                      if (v292 <= v662)
                        v292 = v662 + 1;
                      if (v292)
                      {
                        v658 = v292;
                        v293 = malloc_type_realloc(v234, 4 * v292, 0x38B56759uLL);
                        v235 = v255;
                        v291 = v662;
                        v234 = v293;
LABEL_333:
                        v294 = v655;
                        if (!v655)
                          goto LABEL_336;
                        goto LABEL_334;
                      }
                      v658 = 0;
                      v294 = v655;
                      if (!v655)
                      {
LABEL_336:
                        v295 = 1;
                        goto LABEL_337;
                      }
LABEL_334:
                      v295 = *(unsigned __int16 *)(v294 + 2 * v251);
LABEL_337:
                      *((float *)v234 + v291) = (float)v295;
                      v249 = v250 + 1;
                      ++v662;
                      v248 = v282;
                      v100 = a11;
                      v118 = v668;
                      if (v668 <= ++v247)
                      {
LABEL_338:
                        v669 = v118;
                        v236 = *(float *)(a12 + 104 * *(int *)(v100 + 52) - 8);
                        LOBYTE(v237) = v774;
                        LOBYTE(v241) = v769;
                        goto LABEL_340;
                      }
                    }
                    if (v277 <= v280 && v280 <= v275)
                      goto LABEL_304;
LABEL_315:
                    v100 = a11;
                    v249 = v250;
                    v118 = v668;
                    if (v668 <= ++v247)
                      goto LABEL_338;
                  }
                }
                v669 = v118;
                LODWORD(v249) = 0;
LABEL_340:
                v296 = (float)(1 << (v241 - v237));
                v297 = v243 + (float)((float)((float)((float)v239 + 0.5) * v296) * v245);
                v298 = v242 + (float)((float)((float)((float)v238 + 0.5) * v296) * v245);
                v299 = v244 + (float)((float)((float)((float)v240 + 0.5) * v296) * v246);
                v300 = (float)((float)*(int *)(v235 + 24) + 0.5) / (float)v54[4].i32[0];
                v301 = (float)(v300 + v300) * 3.14159265;
                v302 = *(float *)v100 * 32.0;
                if ((float)((float)(*(float *)(v100 + 36) * 0.5) * 32.0) > v236)
                  v236 = (float)(*(float *)(v100 + 36) * 0.5) * 32.0;
                v671 = v236;
                v695 = v298;
                v696 = v297;
                v694 = v299;
                v303 = v301;
                v676 = (int)v249;
                v681 = (unsigned __int8 *)malloc_type_calloc((int)v249, 1uLL, 0xEFCCC514uLL);
                v304 = __sincos_stret(v303);
                v674 = 0;
                cosval = v304.__cosval;
                sinval = v304.__sinval;
                v701 = v304.__cosval * 0.0 + v304.__sinval * 0.0;
                v702 = -(v304.__sinval - v304.__cosval * 0.0 * 0.0);
                v703 = 0.0;
                v699 = v304.__sinval * 0.0 - v304.__cosval * 0.0;
                v700 = v304.__cosval + v304.__sinval * 0.0 * 0.0;
                v672 = v302 * 3.0;
                v678 = v249;
                v698 = -0.0;
                v697 = 1.0;
                v679 = v249;
                do
                {
                  v311 = 0;
                  do
                  {
                    v682 = v311;
                    v806 = 0;
                    v804 = 0u;
                    v805 = 0u;
                    v802 = 0u;
                    v803 = 0u;
                    v800 = 0u;
                    v801 = 0u;
                    v798 = 0u;
                    v799 = 0u;
                    v796 = 0u;
                    v797 = 0u;
                    if ((int)v249 < 1)
                    {
                      v316 = 0;
                      v740 = 0.0;
                    }
                    else
                    {
                      v316 = 0;
                      v317 = cosval;
                      v693 = -v317;
                      v318 = v702;
                      v692 = -v318;
                      v319 = v701;
                      v691 = -v319;
                      v320 = sinval;
                      v690 = -v320;
                      v321 = v700;
                      v689 = -v321;
                      v322 = v699;
                      v688 = -v322;
                      v323 = v698;
                      v687 = -v323;
                      v324 = v703;
                      v686 = -v324;
                      v325 = v697;
                      v685 = -v325;
                      v326 = 0.0;
                      v328 = v661 + 1;
                      v327 = v660 + 1;
                      v329 = (float *)v234;
                      v330 = v676;
                      v331 = v681;
                      v332 = 0.0;
                      v333 = 0.0;
                      v334 = 0.0;
                      v335 = 0.0;
                      *(float *)&v336 = 0.0;
                      v337 = 0.0;
                      *(float *)&v338 = 0.0;
                      *(float *)&v339 = 0.0;
                      *(float *)&v340 = 0.0;
                      *(float *)&v341 = 0.0;
                      *(float *)&v342 = 0.0;
                      *(float *)&v343 = 0.0;
                      *(float *)&v344 = 0.0;
                      *(float *)&v345 = 0.0;
                      *(float *)&v346 = 0.0;
                      *(float *)&v347 = 0.0;
                      *(float *)&v348 = 0.0;
                      *(float *)&v349 = 0.0;
                      *(float *)&v350 = 0.0;
                      *(float *)&v351 = 0.0;
                      v775 = 0.0;
                      v770 = 0.0;
                      v765 = 0.0;
                      v738 = 0.0;
                      v736 = 0.0;
                      v762 = 0.0;
                      v759 = 0.0;
                      v757 = 0.0;
                      v755 = 0.0;
                      v735 = 0.0;
                      v734 = 0.0;
                      v753 = 0.0;
                      v751 = 0.0;
                      v749 = 0.0;
                      v747 = 0.0;
                      v733 = 0.0;
                      v732 = 0.0;
                      v742 = 0uLL;
                      v740 = 0.0;
                      do
                      {
                        if (!*v331++)
                        {
                          v731 = v326;
                          v730 = v332;
                          v729 = v333;
                          v728 = v334;
                          v727 = v335;
                          v726 = *(float *)&v336;
                          v725 = v337;
                          v724 = *(float *)&v338;
                          v723 = *(float *)&v339;
                          v722 = *(float *)&v340;
                          v721 = *(float *)&v341;
                          v720 = *(float *)&v342;
                          v719 = *(float *)&v343;
                          v718 = *(float *)&v344;
                          v717 = *(float *)&v345;
                          v716 = *(float *)&v346;
                          v715 = *(float *)&v347;
                          v714 = *(float *)&v348;
                          v713 = *(float *)&v349;
                          v712 = *(float *)&v350;
                          v781 = *(float *)&v351;
                          if (v234)
                            v352 = *v329;
                          else
                            v352 = 1.0;
                          v353 = *(v328 - 1);
                          v709 = *v328;
                          v354 = *(v327 - 1) - v696;
                          v355 = *v327 - v695;
                          v356 = v327[1] - v694;
                          v357 = sinval * v355 + cosval * v354 + v698 * v356;
                          v358 = v700 * v355 + v702 * v354 + v703 * v356;
                          v359 = v699 * v355 + v701 * v354 + v697 * v356;
                          v360 = atan2f(v358, v357);
                          v361 = (float)(v358 * v358) + (float)(v357 * v357);
                          v362 = sqrtf(v361);
                          v363 = atanf(v359 / v362);
                          v711 = ((float)(v353 - v360)
                                + 3.14159265
                                + (double)((int)(((float)(v353 - v360) + 3.14159265) * 0.159154943)
                                         - ((float)(v353 - v360) + 3.14159265 < 0.0))
                                * -6.28318531
                                + -3.14159265)
                               * v352;
                          v364 = (float)(v359 * v359) + (float)(v362 * v362);
                          v365 = (float)-v359 / v364;
                          v366 = v352 * (float)((float)-v358 / v361);
                          v367 = v352 * (float)((float)(v357 / v362) * v365);
                          v368 = v352 * (float)(v357 / v361);
                          v369 = v352 * (float)((float)(v358 / v362) * v365);
                          v370 = (float)((float)(v367 * v693) + 0.0) + (float)(v369 * v692);
                          v710 = v709 - v363;
                          v371 = (float)((float)(v367 * v690) + 0.0) + (float)(v369 * v689);
                          v372 = (float)((float)(v367 * v687) + 0.0) + (float)(v369 * v686);
                          v373 = (float)((float)(v367 * v358) + 0.0) - (float)(v369 * v357);
                          v374 = v352 * (float)(v362 / v364);
                          v375 = (float)((float)(0.0 - (float)(v366 * v359)) + (float)(v368 * 0.0))
                               + (float)((float)(v352 * 0.0) * v357);
                          v376 = (float)((float)(0.0 - (float)(v367 * v359)) + (float)(v369 * 0.0))
                               + (float)(v374 * v357);
                          v377 = (float)((float)((float)(v366 * v693) + 0.0) + (float)(v368 * v692))
                               + (float)((float)(v352 * 0.0) * v691);
                          v378 = (float)((float)((float)(v366 * v690) + 0.0) + (float)(v368 * v689))
                               + (float)((float)(v352 * 0.0) * v688);
                          v379 = (float)((float)((float)(v366 * v687) + 0.0) + (float)(v368 * v686))
                               + (float)((float)(v352 * 0.0) * v685);
                          v380 = (float)((float)((float)(v366 * v358) + 0.0) - (float)(v368 * v357))
                               + (float)((float)(v352 * 0.0) * 0.0);
                          v381 = (float)((float)((float)(v366 * 0.0) + 0.0) + (float)(v368 * v359))
                               - (float)((float)(v352 * 0.0) * v358);
                          v382 = (float)((float)((float)(v367 * 0.0) + 0.0) + (float)(v369 * v359))
                               - (float)(v374 * v358);
                          v383 = v370 + (float)(v374 * v691);
                          v384 = v371 + (float)(v374 * v688);
                          v385 = v372 + (float)(v374 * v685);
                          v386 = v373 + (float)(v374 * 0.0);
                          *(float *)&v742 = *(float *)&v742
                                          + (float)((float)((float)(v377 * v377) + 0.0) + (float)(v383 * v383));
                          v387 = (float)((float)(v378 * v377) + 0.0) + (float)(v384 * v383);
                          *((float *)&v742 + 1) = *((float *)&v742 + 1) + v387;
                          v747 = v747 + v387;
                          v749 = v749 + (float)((float)((float)(v378 * v378) + 0.0) + (float)(v384 * v384));
                          v388 = (float)((float)(v379 * v377) + 0.0) + (float)(v385 * v383);
                          *((float *)&v742 + 2) = *((float *)&v742 + 2) + v388;
                          v755 = v755 + v388;
                          v389 = (float)((float)(v379 * v378) + 0.0) + (float)(v385 * v384);
                          v751 = v751 + v389;
                          v757 = v757 + v389;
                          v759 = v759 + (float)((float)((float)(v379 * v379) + 0.0) + (float)(v385 * v385));
                          v390 = (float)((float)(v380 * v377) + 0.0) + (float)(v386 * v383);
                          *((float *)&v742 + 3) = *((float *)&v742 + 3) + v390;
                          v765 = v765 + v390;
                          v391 = (float)((float)(v380 * v378) + 0.0) + (float)(v386 * v384);
                          v753 = v753 + v391;
                          v770 = v770 + v391;
                          v392 = (float)((float)(v380 * v379) + 0.0) + (float)(v386 * v385);
                          v762 = v762 + v392;
                          v775 = v775 + v392;
                          *(float *)&v780 = v781 + (float)((float)((float)(v380 * v380) + 0.0) + (float)(v386 * v386));
                          v393 = (float)((float)(v375 * v377) + 0.0) + (float)(v376 * v383);
                          *(float *)&v394 = v732 + v393;
                          *(float *)&v395 = v714 + v393;
                          v396 = (float)((float)(v375 * v378) + 0.0) + (float)(v376 * v384);
                          *(float *)&v397 = v734 + v396;
                          v398 = v352;
                          *(float *)&v399 = v715 + v396;
                          v400 = (float)((float)(v375 * v379) + 0.0) + (float)(v376 * v385);
                          *(float *)&v401 = v736 + v400;
                          *(float *)&v402 = v716 + v400;
                          v707 = v380;
                          v708 = v386;
                          v403 = (float)((float)(v375 * v380) + 0.0) + (float)(v376 * v386);
                          *(float *)&v404 = v712 + v403;
                          *(float *)&v405 = v717 + v403;
                          v706 = v376;
                          *(float *)&v406 = v718 + (float)((float)((float)(v375 * v375) + 0.0) + (float)(v376 * v376));
                          v407 = v381;
                          v408 = v382;
                          v409 = (float)((float)(v381 * v377) + 0.0) + (float)(v382 * v383);
                          *(float *)&v410 = v733 + v409;
                          *(float *)&v411 = v720 + v409;
                          v412 = (float)((float)(v381 * v378) + 0.0) + (float)(v382 * v384);
                          *(float *)&v413 = v735 + v412;
                          *(float *)&v414 = v721 + v412;
                          v415 = (float)((float)(v381 * v379) + 0.0) + (float)(v382 * v385);
                          *(float *)&v416 = v738 + v415;
                          *(float *)&v417 = v722 + v415;
                          v418 = (float)((float)(v381 * v380) + 0.0) + (float)(v408 * v708);
                          *(float *)&v419 = v713 + v418;
                          *(float *)&v420 = v723 + v418;
                          v421 = v407;
                          v422 = (float)((float)(v407 * v375) + 0.0) + (float)(v408 * v376);
                          v423 = v408;
                          *(float *)&v424 = v719 + v422;
                          *(float *)&v425 = v724 + v422;
                          v337 = v725 + (float)((float)((float)(v421 * v421) + 0.0) + (float)(v423 * v423));
                          v426 = v398 * v710;
                          v427 = v711;
                          *(float *)&v428 = (float)(v726 + (float)(v377 * v427)) + (float)(v383 * v426);
                          v335 = (float)(v727 + (float)(v378 * v427)) + (float)(v384 * v426);
                          v334 = (float)(v728 + (float)(v379 * v427)) + (float)(v385 * v426);
                          v333 = (float)(v729 + (float)(v707 * v427)) + (float)(v708 * v426);
                          v332 = (float)(v730 + (float)(v375 * v427)) + (float)(v706 * v426);
                          v326 = (float)(v731 + (float)(v421 * v427)) + (float)(v423 * v426);
                          v740 = v740 + (float)((float)(v426 * v426) + (float)(v427 * v427));
                          v796 = v742;
                          v732 = *(float *)&v394;
                          *(_QWORD *)&v797 = __PAIR64__(v410, v394);
                          v733 = *(float *)&v410;
                          *((_QWORD *)&v797 + 1) = __PAIR64__(LODWORD(v749), LODWORD(v747));
                          *(_QWORD *)&v798 = __PAIR64__(LODWORD(v753), LODWORD(v751));
                          v734 = *(float *)&v397;
                          *((_QWORD *)&v798 + 1) = __PAIR64__(v413, v397);
                          v735 = *(float *)&v413;
                          *(_QWORD *)&v799 = __PAIR64__(LODWORD(v757), LODWORD(v755));
                          *((_QWORD *)&v799 + 1) = __PAIR64__(LODWORD(v762), LODWORD(v759));
                          v736 = *(float *)&v401;
                          *(_QWORD *)&v800 = __PAIR64__(v416, v401);
                          v738 = *(float *)&v416;
                          *((_QWORD *)&v800 + 1) = __PAIR64__(LODWORD(v770), LODWORD(v765));
                          *(_QWORD *)&v801 = __PAIR64__(v780, LODWORD(v775));
                          v351 = v780;
                          v350 = v404;
                          *((_QWORD *)&v801 + 1) = __PAIR64__(v419, v404);
                          v349 = v419;
                          v348 = v395;
                          *(_QWORD *)&v802 = __PAIR64__(v399, v395);
                          v347 = v399;
                          v346 = v402;
                          *((_QWORD *)&v802 + 1) = __PAIR64__(v405, v402);
                          v345 = v405;
                          v344 = v406;
                          *(_QWORD *)&v803 = __PAIR64__(v424, v406);
                          v343 = v424;
                          v342 = v411;
                          *((_QWORD *)&v803 + 1) = __PAIR64__(v414, v411);
                          v341 = v414;
                          v340 = v417;
                          *(_QWORD *)&v804 = __PAIR64__(v420, v417);
                          v339 = v420;
                          v338 = v425;
                          *((_QWORD *)&v804 + 1) = __PAIR64__(LODWORD(v337), v425);
                          v336 = v428;
                          *(_QWORD *)&v805 = __PAIR64__(LODWORD(v335), v428);
                          *((_QWORD *)&v805 + 1) = __PAIR64__(LODWORD(v333), LODWORD(v334));
                          v806 = __PAIR64__(LODWORD(v326), LODWORD(v332));
                          ++v316;
                        }
                        ++v329;
                        v327 += 3;
                        v328 += 2;
                        --v330;
                      }
                      while (v330);
                    }
                    v430 = 0;
                    v431 = (float *)&v796;
                    v432 = 2;
                    v433 = &v819;
                    do
                    {
                      v434 = *v431;
                      *v433 = *v431;
                      if (v430)
                      {
                        v435 = &v433[-v430];
                        v436 = -(uint64_t)v430;
                        do
                        {
                          v434 = v434 - (float)(v433[v436] * v433[v436]);
                          *v433 = v434;
                          v139 = __CFADD__(v436++, 1);
                        }
                        while (!v139);
                        *v433 = sqrtf(v434);
                        v437 = v430 + 1;
                        v438 = v431 + 1;
                        if (v430 <= 4)
                        {
                          v439 = &v433[v430 + 1];
                          v440 = v432;
                          do
                          {
                            v441 = *v438;
                            *v439 = *v438;
                            v442 = &v439[-v430];
                            v443 = v441 - (float)(*v442 * *v435);
                            *v439 = v443;
                            if (v430 != 1)
                            {
                              v443 = v443 - (float)(v442[1] * v435[1]);
                              *v439 = v443;
                              if (v430 != 2)
                              {
                                v443 = v443 - (float)(v442[2] * v435[2]);
                                *v439 = v443;
                                if (v430 != 3)
                                {
                                  v443 = v443 - (float)(v442[3] * v435[3]);
                                  *v439 = v443;
                                }
                              }
                            }
                            *v439 = v443 / *v433;
                            v439 += v440;
                            ++v438;
                            ++v440;
                          }
                          while (v440 != 7);
                        }
                      }
                      else
                      {
                        *v433 = sqrtf(v434);
                        v444 = v433 + 1;
                        v438 = v431 + 1;
                        v445 = v432;
                        do
                        {
                          v446 = *v438++;
                          *v444 = v446;
                          *v444 = v446 / *v433;
                          v444 += v445++;
                        }
                        while (v445 != 7);
                        v437 = 1;
                      }
                      v433 += v430 + 2;
                      v431 = &v438[v437];
                      ++v432;
                      v430 = v437;
                    }
                    while (v437 != 6);
                    v813 = *(float *)&v805 / v819;
                    v814 = (float)(*((float *)&v805 + 1) - (float)(v820 * (float)(*(float *)&v805 / v819))) / v821;
                    v447 = (float)((float)(*((float *)&v805 + 2) - (float)(v822 * (float)(*(float *)&v805 / v819)))
                                 - (float)(v823 * v814))
                         / v824;
                    v815 = v447;
                    v816 = (float)((float)((float)(*((float *)&v805 + 3)
                                                 - (float)(v825 * (float)(*(float *)&v805 / v819)))
                                         - (float)(v826 * v814))
                                 - (float)(v827 * v447))
                         / v828;
                    v448 = (float)((float)((float)((float)(*(float *)&v806
                                                         - (float)(v829 * (float)(*(float *)&v805 / v819)))
                                                 - (float)(v830 * v814))
                                         - (float)(v831 * v447))
                                 - (float)(v832 * v816))
                         / v833;
                    v817 = v448;
                    v818 = (float)((float)((float)((float)((float)(*((float *)&v806 + 1)
                                                                 - (float)(v834 * (float)(*(float *)&v805 / v819)))
                                                         - (float)(v835 * v814))
                                                 - (float)(v836 * v447))
                                         - (float)(v837 * v816))
                                 - (float)(v838 * v448))
                         / v839;
                    v812 = v818 / v839;
                    v811 = (float)(v448 - (float)(v838 * (float)(v818 / v839))) / v833;
                    v449 = (float)((float)(v816 - (float)(v832 * v811)) - (float)(v837 * (float)(v818 / v839))) / v828;
                    v810 = v449;
                    v809 = (float)((float)((float)(v447 - (float)(v827 * v449)) - (float)(v831 * v811))
                                 - (float)(v836 * (float)(v818 / v839)))
                         / v824;
                    v808 = (float)((float)((float)((float)(v814 - (float)(v823 * v809)) - (float)(v826 * v449))
                                         - (float)(v830 * v811))
                                 - (float)(v835 * (float)(v818 / v839)))
                         / v821;
                    v807 = (float)((float)((float)((float)((float)((float)(*(float *)&v805 / v819) - (float)(v820 * v808))
                                                         - (float)(v822 * v809))
                                                 - (float)(v825 * v449))
                                         - (float)(v829 * v811))
                                 - (float)(v834 * (float)(v818 / v839)))
                         / v819;
                    v737 = v807;
                    v782 = v696 + v807;
                    v739 = v808;
                    v776 = v695 + v808;
                    v743 = v809;
                    v771 = v694 + v809;
                    v744 = v449;
                    v745 = v811;
                    v450 = v811;
                    v746 = v818 / v839;
                    v451 = (float)(v818 / v839);
                    v452 = __sincos_stret(v449);
                    v453 = __sincos_stret(v450);
                    v454 = v453.__cosval;
                    v455 = __sincos_stret(v451);
                    v456 = v453.__sinval * v452.__cosval * v455.__sinval - v452.__sinval * v455.__cosval;
                    v457 = v455.__sinval * v452.__sinval + v453.__sinval * v452.__cosval * v455.__cosval;
                    v458 = v455.__cosval * v452.__cosval + v453.__sinval * v452.__sinval * v455.__sinval;
                    v459 = v453.__sinval * v452.__sinval * v455.__cosval - v452.__cosval * v455.__sinval;
                    v766 = cosval * (v454 * v452.__cosval) + 0.0 + v702 * (v454 * v452.__sinval) - v701 * v453.__sinval;
                    v763 = cosval * v456 + 0.0 + v702 * v458 + v701 * (v455.__sinval * v453.__cosval);
                    v760 = cosval * v457 + 0.0 + v702 * v459 + v701 * (v455.__cosval * v453.__cosval);
                    v758 = sinval * (v454 * v452.__cosval) + 0.0 + v700 * (v454 * v452.__sinval) - v699 * v453.__sinval;
                    v756 = sinval * v456 + 0.0 + v700 * v458 + v699 * (v455.__sinval * v453.__cosval);
                    v754 = sinval * v457 + 0.0 + v700 * v459 + v699 * (v455.__cosval * v453.__cosval);
                    v752 = v698 * (v454 * v452.__cosval) + 0.0 + v703 * (v454 * v452.__sinval) - v697 * v453.__sinval;
                    v750 = v698 * v456 + 0.0 + v703 * v458 + v697 * (v455.__sinval * v453.__cosval);
                    v748 = v698 * v457 + 0.0 + v703 * v459 + v697 * (v455.__cosval * v453.__cosval);
                    if ((int)v249 < 1)
                    {
                      v460 = 0;
                      v463 = 0.0;
                      v103 = 0.5;
                    }
                    else
                    {
                      v460 = 0;
                      v461 = v661 + 1;
                      v462 = v660 + 1;
                      v463 = 0.0;
                      v464 = (float *)v234;
                      v465 = v678;
                      v466 = v681;
                      v103 = 0.5;
                      do
                      {
                        if (!*v466++)
                        {
                          if (v234)
                            v467 = *v464;
                          else
                            v467 = 1.0;
                          v469 = *(v461 - 1);
                          v468 = *v461;
                          v470 = *(v462 - 1) - v782;
                          v471 = *v462 - v776;
                          v472 = v462[1] - v771;
                          v473 = v758 * v471 + v766 * v470 + v752 * v472;
                          v474 = v756 * v471 + v763 * v470 + v750 * v472;
                          v475 = v754 * v471 + v760 * v470 + v748 * v472;
                          v476 = atan2f(v474, v473);
                          v477 = atanf(v475 / sqrtf((float)(v474 * v474) + (float)(v473 * v473)));
                          v478 = ((float)(v469 - v476)
                                + 3.14159265
                                + (double)((int)(((float)(v469 - v476) + 3.14159265) * 0.159154943)
                                         - ((float)(v469 - v476) + 3.14159265 < 0.0))
                                * -6.28318531
                                + -3.14159265)
                               * v467;
                          v463 = v463
                               + (float)((float)((float)(v467 * (float)(v468 - v477))
                                               * (float)(v467 * (float)(v468 - v477)))
                                       + (float)(v478 * v478));
                          ++v460;
                          v103 = 0.5;
                        }
                        ++v464;
                        v462 += 3;
                        v461 += 2;
                        --v465;
                      }
                      while (v465);
                    }
                    v314 = v463 / (float)v460;
                    LODWORD(v249) = v679;
                    if (v314 >= (float)(v740 / (float)v316))
                    {
                      v741 = v740 / (float)v316;
                      v807 = v737 * v103;
                      v808 = v739 * v103;
                      v809 = v743 * v103;
                      v810 = v744 * v103;
                      v811 = v745 * v103;
                      v812 = v746 * v103;
                      v782 = v696 + (float)(v737 * v103);
                      v776 = v695 + (float)(v739 * v103);
                      v771 = v694 + (float)(v743 * v103);
                      v480 = __sincos_stret((float)(v744 * v103));
                      v481 = __sincos_stret((float)(v745 * v103));
                      v482 = v481.__cosval;
                      v483 = __sincos_stret((float)(v746 * v103));
                      v484 = v481.__sinval * v480.__cosval * v483.__sinval - v480.__sinval * v483.__cosval;
                      v485 = v483.__sinval * v480.__sinval + v481.__sinval * v480.__cosval * v483.__cosval;
                      v486 = v483.__cosval * v480.__cosval + v481.__sinval * v480.__sinval * v483.__sinval;
                      v487 = v481.__sinval * v480.__sinval * v483.__cosval - v480.__cosval * v483.__sinval;
                      v766 = cosval * (v482 * v480.__cosval)
                           + 0.0
                           + v702 * (v482 * v480.__sinval)
                           - v701 * v481.__sinval;
                      v763 = cosval * v484 + 0.0 + v702 * v486 + v701 * (v483.__sinval * v481.__cosval);
                      v760 = cosval * v485 + 0.0 + v702 * v487 + v701 * (v483.__cosval * v481.__cosval);
                      v758 = sinval * (v482 * v480.__cosval)
                           + 0.0
                           + v700 * (v482 * v480.__sinval)
                           - v699 * v481.__sinval;
                      v756 = sinval * v484 + 0.0 + v700 * v486 + v699 * (v483.__sinval * v481.__cosval);
                      v754 = sinval * v485 + 0.0 + v700 * v487 + v699 * (v483.__cosval * v481.__cosval);
                      v752 = v698 * (v482 * v480.__cosval) + 0.0 + v703 * (v482 * v480.__sinval) - v697 * v481.__sinval;
                      v750 = v698 * v484 + 0.0 + v703 * v486 + v697 * (v483.__sinval * v481.__cosval);
                      v748 = v698 * v485 + 0.0 + v703 * v487 + v697 * (v483.__cosval * v481.__cosval);
                      if (v679 < 1)
                      {
                        v312 = 0;
                        v313 = 0.0;
                        v103 = 0.5;
                      }
                      else
                      {
                        v312 = 0;
                        v488 = v661 + 1;
                        v489 = v660 + 1;
                        v313 = 0.0;
                        v490 = (float *)v234;
                        v491 = v678;
                        v492 = v681;
                        v103 = 0.5;
                        do
                        {
                          if (!*v492++)
                          {
                            if (v234)
                              v493 = *v490;
                            else
                              v493 = 1.0;
                            v494 = *(v488 - 1);
                            v495 = *v488;
                            v496 = *(v489 - 1) - v782;
                            v497 = *v489 - v776;
                            v498 = v489[1] - v771;
                            v499 = v758 * v497 + v766 * v496 + v752 * v498;
                            v500 = v756 * v497 + v763 * v496 + v750 * v498;
                            v501 = v754 * v497 + v760 * v496 + v748 * v498;
                            v502 = atan2f(v500, v499);
                            v503 = atanf(v501 / sqrtf((float)(v500 * v500) + (float)(v499 * v499)));
                            v504 = ((float)(v494 - v502)
                                  + 3.14159265
                                  + (double)((int)(((float)(v494 - v502) + 3.14159265) * 0.159154943)
                                           - ((float)(v494 - v502) + 3.14159265 < 0.0))
                                  * -6.28318531
                                  + -3.14159265)
                                 * v493;
                            v313 = v313
                                 + (float)((float)((float)(v493 * (float)(v495 - v503))
                                                 * (float)(v493 * (float)(v495 - v503)))
                                         + (float)(v504 * v504));
                            ++v312;
                            v103 = 0.5;
                          }
                          ++v490;
                          v489 += 3;
                          v488 += 2;
                          --v491;
                        }
                        while (v491);
                      }
                      v314 = v313 / (float)v312;
                      v315 = v741;
                      LODWORD(v249) = v679;
                      if (v314 >= v741)
                        break;
                    }
                    v311 = v682 + 1;
                    v701 = v760;
                    v702 = v763;
                    cosval = v766;
                    sinval = v758;
                    v699 = v754;
                    v700 = v756;
                    v703 = v750;
                    v697 = v748;
                    v698 = v752;
                    v695 = v776;
                    v696 = v782;
                    v694 = v771;
                    v315 = v314;
                  }
                  while (v682 != 3);
                  v506 = sqrtf(v315);
                  if (v506 <= v672 || v674 >= 0x12)
                    v506 = v672;
                  v777 = v506;
                  if ((int)v249 < 1)
                  {
                    v305 = 0.0;
                    v306 = 1;
                  }
                  else
                  {
                    v783 = v506 * v506;
                    v306 = 1;
                    v509 = v661 + 1;
                    v508 = v660 + 1;
                    v305 = 0.0;
                    v510 = v681;
                    v511 = (float *)v234;
                    v512 = v678;
                    do
                    {
                      if (v234)
                        v513 = *v511;
                      else
                        v513 = 1.0;
                      v514 = *v510;
                      v516 = *(v509 - 1);
                      v515 = *v509;
                      v517 = *(v508 - 1) - v696;
                      v518 = *v508 - v695;
                      v519 = v508[1] - v694;
                      v520 = sinval * v518 + cosval * v517 + v698 * v519;
                      v521 = v700 * v518 + v702 * v517 + v703 * v519;
                      v522 = v699 * v518 + v701 * v517 + v697 * v519;
                      v523 = atan2f(v521, v520);
                      v524 = atanf(v522 / sqrtf((float)(v521 * v521) + (float)(v520 * v520)));
                      v525 = ((float)(v516 - v523)
                            + 3.14159265
                            + (double)((int)(((float)(v516 - v523) + 3.14159265) * 0.159154943)
                                     - ((float)(v516 - v523) + 3.14159265 < 0.0))
                            * -6.28318531
                            + -3.14159265)
                           * v513;
                      v526 = (float)((float)(v513 * (float)(v515 - v524)) * (float)(v513 * (float)(v515 - v524)))
                           + (float)(v525 * v525);
                      v527 = v526 > v783;
                      *v510 = v527;
                      v528 = 0.0;
                      if (v526 <= v783)
                        v528 = 1.0;
                      v529 = v514 == v527;
                      if (v234)
                      {
                        v103 = 0.5;
                        if (v526 <= v783)
                          v528 = *v511;
                      }
                      else
                      {
                        v103 = 0.5;
                      }
                      v306 &= v529;
                      ++v511;
                      v305 = v305 + v528;
                      ++v510;
                      v509 += 2;
                      v508 += 3;
                      --v512;
                    }
                    while (v512);
                  }
                  if (v306)
                    v307 = v777 == v672;
                  else
                    v307 = 0;
                  v308 = v674 + 1;
                  v309 = v307 || v305 < v671;
                  ++v674;
                  v310 = v309 || v308 == 20;
                  LODWORD(v249) = v679;
                }
                while (!v310);
                *(double *)&v790 = cosval;
                *((double *)&v790 + 1) = v702;
                *(double *)&v791 = v701;
                *((double *)&v791 + 1) = sinval;
                *(double *)&v792 = v700;
                *((double *)&v792 + 1) = v699;
                *(double *)&v793 = v698;
                *((double *)&v793 + 1) = v703;
                *(double *)&v794 = v697;
                *((double *)&v794 + 1) = v696;
                *(double *)&v795 = v695;
                *((double *)&v795 + 1) = v694;
                free(v681);
                v100 = a11;
                v530 = *(int *)(a11 + 52);
                v531 = v530 - 1;
                v34 = a12;
                v104 = v673;
                v105 = v675;
                if (v305 <= *(float *)(a12 + 104 * (v530 - 1) + 96))
                {
                  v118 = v669;
LABEL_444:
                  v233 = v656;
                  goto LABEL_250;
                }
                v532 = *(double *)&v794;
                v118 = v669;
                if (v532 > cosf(*(float *)(a11 + 32)))
                {
                  if ((int)v530 < 1)
                  {
LABEL_436:
                    v562 = (_OWORD *)(a12 + 104 * v531);
                    v563 = v793;
                    v562[2] = v792;
                    v562[3] = v563;
                    v564 = v795;
                    v562[4] = v794;
                    v562[5] = v564;
                    v565 = v791;
                    *v562 = v790;
                    v562[1] = v565;
                    LODWORD(v562) = *(_DWORD *)(v100 + 52);
                    *(float *)(a12 + 104 * ((int)v562 - 1) + 96) = v305;
                    if ((int)v562 > 1)
                    {
                      v566 = v650;
                      v567 = 2;
                      v568 = 1;
                      do
                      {
                        v569 = (float *)v566;
                        v570 = v567;
                        do
                        {
                          if ((float)(*(float *)(a12 + 104 * (v570 - 2) + 96) - v569[24]) >= 0.0)
                            break;
                          v571 = *((_OWORD *)v569 + 5);
                          v572 = (__int128 *)(a12 + 104 * (v570 - 2));
                          v800 = *((_OWORD *)v569 + 4);
                          v801 = v571;
                          *(_QWORD *)&v802 = *((_QWORD *)v569 + 12);
                          v573 = *((_OWORD *)v569 + 1);
                          v796 = *(_OWORD *)v569;
                          v797 = v573;
                          v574 = *((_OWORD *)v569 + 3);
                          v798 = *((_OWORD *)v569 + 2);
                          v799 = v574;
                          v576 = v572[1];
                          v575 = v572[2];
                          *(_OWORD *)v569 = *v572;
                          *((_OWORD *)v569 + 1) = v576;
                          *((_OWORD *)v569 + 2) = v575;
                          v578 = v572[4];
                          v577 = v572[5];
                          v579 = v572[3];
                          *((_QWORD *)v569 + 12) = *((_QWORD *)v572 + 12);
                          *((_OWORD *)v569 + 4) = v578;
                          *((_OWORD *)v569 + 5) = v577;
                          *((_OWORD *)v569 + 3) = v579;
                          v580 = v797;
                          *v572 = v796;
                          v572[1] = v580;
                          *((_QWORD *)v572 + 12) = v802;
                          v581 = v801;
                          v572[4] = v800;
                          v572[5] = v581;
                          v582 = v799;
                          --v570;
                          v569 -= 26;
                          v572[2] = v798;
                          v572[3] = v582;
                        }
                        while (v570 > 1);
                        ++v568;
                        ++v567;
                        v566 = (__int128 *)((char *)v566 + 104);
                      }
                      while (*(_DWORD *)(v100 + 52) > (int)v568);
                    }
                  }
                  else
                  {
                    v533 = 0;
                    v534 = a12;
                    while (1)
                    {
                      v536 = (*((double *)&v794 + 1) - *(double *)(v534 + 72))
                           * (*((double *)&v794 + 1) - *(double *)(v534 + 72))
                           + 0.0;
                      v537 = v536
                           + (*(double *)&v795 - *(double *)(v534 + 80)) * (*(double *)&v795 - *(double *)(v534 + 80));
                      v538 = v537
                           + (*((double *)&v795 + 1) - *(double *)(v534 + 88))
                           * (*((double *)&v795 + 1) - *(double *)(v534 + 88));
                      v539 = sqrtf(v538);
                      v540 = g_coords_angle_diff((double *)&v790, (double *)v534);
                      v100 = a11;
                      if (v539 < *(float *)(a11 + 44))
                      {
                        v541 = v540;
                        if (*(float *)(a11 + 48) > v541)
                          break;
                      }
                      ++v533;
                      v535 = *(int *)(a11 + 52);
                      v534 += 104;
                      if (v533 >= v535)
                      {
                        v531 = v535 - 1;
                        goto LABEL_436;
                      }
                    }
                    if (*(float *)(v534 + 96) <= v305)
                    {
                      v542 = v791;
                      *(_OWORD *)v534 = v790;
                      *(_OWORD *)(v534 + 16) = v542;
                      v543 = v795;
                      *(_OWORD *)(v534 + 64) = v794;
                      *(_OWORD *)(v534 + 80) = v543;
                      v544 = v793;
                      *(_OWORD *)(v534 + 32) = v792;
                      *(_OWORD *)(v534 + 48) = v544;
                      *(float *)(v534 + 96) = v305;
                      if (*(int *)(a11 + 52) >= 2)
                      {
                        v545 = v650;
                        v546 = 2;
                        v547 = 1;
                        do
                        {
                          v548 = (float *)v545;
                          v549 = v546;
                          do
                          {
                            if ((float)(*(float *)(a12 + 104 * (v549 - 2) + 96) - v548[24]) >= 0.0)
                              break;
                            v550 = *((_OWORD *)v548 + 5);
                            v551 = (__int128 *)(a12 + 104 * (v549 - 2));
                            v800 = *((_OWORD *)v548 + 4);
                            v801 = v550;
                            *(_QWORD *)&v802 = *((_QWORD *)v548 + 12);
                            v552 = *((_OWORD *)v548 + 1);
                            v796 = *(_OWORD *)v548;
                            v797 = v552;
                            v553 = *((_OWORD *)v548 + 3);
                            v798 = *((_OWORD *)v548 + 2);
                            v799 = v553;
                            v555 = v551[1];
                            v554 = v551[2];
                            *(_OWORD *)v548 = *v551;
                            *((_OWORD *)v548 + 1) = v555;
                            *((_OWORD *)v548 + 2) = v554;
                            v557 = v551[4];
                            v556 = v551[5];
                            v558 = v551[3];
                            *((_QWORD *)v548 + 12) = *((_QWORD *)v551 + 12);
                            *((_OWORD *)v548 + 4) = v557;
                            *((_OWORD *)v548 + 5) = v556;
                            *((_OWORD *)v548 + 3) = v558;
                            v559 = v797;
                            *v551 = v796;
                            v551[1] = v559;
                            *((_QWORD *)v551 + 12) = v802;
                            v560 = v801;
                            v551[4] = v800;
                            v551[5] = v560;
                            v561 = v799;
                            --v549;
                            v548 -= 26;
                            v551[2] = v798;
                            v551[3] = v561;
                          }
                          while (v549 > 1);
                          ++v547;
                          ++v546;
                          v545 = (__int128 *)((char *)v545 + 104);
                        }
                        while (*(_DWORD *)(a11 + 52) > (int)v547);
                      }
                    }
                  }
                  if (*(float *)(a12 + 96) >= (float)(*(float *)(v100 + 40) * 32.0))
                    goto LABEL_446;
                  goto LABEL_444;
                }
                v233 = v656;
              }
LABEL_250:
              if (v785 <= ++v233)
                goto LABEL_446;
            }
          }
          v660 = 0;
          v661 = 0;
          v234 = 0;
LABEL_446:
          free(v660);
          free(v661);
          free(v234);
          v583 = *(float *)(v34 + 104 * *(int *)(v100 + 52) - 8);
          if ((float)(v653 / v583) >= 0.98 || *(float *)(v34 + 96) >= (float)(*(float *)(v100 + 40) * 32.0))
            goto LABEL_511;
          v584 = v785;
          if (v785 < 1)
          {
            v585 = 0;
            v589 = (float *)v677;
          }
          else
          {
            v585 = 0;
            v586 = v786;
            v587 = (char *)v786;
            v588 = v785;
            v589 = (float *)v677;
            do
            {
              if (*(float *)(*(_QWORD *)v587 + 32) > v583)
                v586[v585++] = *(_QWORD *)v587;
              v587 += 8;
              --v588;
            }
            while (v588);
          }
          if (v585 <= v787)
          {
            v670 = v118;
            v592 = v585 - v584;
            if (v585 <= v584)
              goto LABEL_463;
          }
          else
          {
            v590 = 32;
            if (v787)
              v590 = 2 * v787;
            if (v590 <= v585)
              v591 = v585;
            else
              v591 = v590;
            if (v591)
              v786 = malloc_type_realloc(v786, 8 * v591, 0x822BDEF7uLL);
            v787 = v591;
            v670 = v118;
            v592 = v585 - v584;
            if (v585 <= v584)
            {
LABEL_463:
              v785 = v585;
              if (v654 < v54[3].i32[1])
                goto LABEL_467;
              goto LABEL_60;
            }
          }
          bzero((char *)v786 + 8 * v584, 8 * v592);
          v785 = v585;
          if (v654 < v54[3].i32[1])
          {
LABEL_467:
            deactivate_tree((uint64_t)v54, (uint64_t)*v54);
            if (v585 < 1)
            {
              remove_inactive_nodes(v54, (uint64_t)*v54);
            }
            else
            {
              v593 = 0;
              v594 = (_DWORD **)v786;
              do
              {
                octnode_insert((uint64_t)v54, *v54, *v594[v593], v594[v593][1], v594[v593][2], v594[v593][3]);
                ++v593;
              }
              while (v585 != v593);
              remove_inactive_nodes(v54, (uint64_t)*v54);
              v595 = 0;
              v596 = -v675;
              v597 = -v673;
              v764 = v585;
              v761 = v594;
              do
              {
                v778 = 0;
                v767 = v595;
                v598 = v594[v595];
                v599 = 1;
                do
                {
                  v600 = 0;
                  v772 = v599;
                  v601 = 1;
                  do
                  {
                    v784 = v601;
                    v602 = v778 | (2 * v598[1]);
                    v603 = v600 | (2 * v598[2]);
                    v604 = (1 << (v54[3].i32[1] + ~*v598));
                    v605 = v54[2].f32[1];
                    v606 = v54[1].f32[0] + (float)((float)((float)((float)v602 + v103) * (float)(int)v604) * v605);
                    v607 = 2 * v598[3];
                    v608 = v54[1].f32[1] + (float)((float)((float)((float)v603 + v103) * (float)(int)v604) * v605);
                    v609 = (float)((float)(v608 - v589[1]) * (float)(v608 - v589[1]))
                         + (float)((float)(v606 - *v589) * (float)(v606 - *v589));
                    if (v609 <= v684 && v609 >= v683)
                    {
                      v611 = v680;
                      v612 = (_QWORD *)(a9 + 16);
                      v613 = a10;
                      do
                      {
                        v614 = *((unsigned int *)v611 - 2);
                        LODWORD(v604) = vcvtms_s32_f32((float)(v606 - (float)(*v16 + (float)(v596 * v103)))* (float)((float)(int)v614 / v105));
                        if ((v604 & 0x80000000) == 0 && (int)v614 > (int)v604)
                        {
                          v615 = *((_DWORD *)v611 - 1);
                          LODWORD(v614) = vcvtms_s32_f32((float)(v608 - (float)(v16[1] + (float)(v597 * v103)))* (float)((float)v615 / v104));
                          if ((v614 & 0x80000000) == 0 && v615 > (int)v614)
                          {
                            v616 = *(float *)(*(v611 - 2) + 4 * (v604 + *v611 * v614));
                            v617 = *(float *)(*(v612 - 2) + 4 * (v604 + *v612 * v614));
                            v618 = v54[2].f32[0];
                            v619 = v54[3].f32[0];
                            v604 = ((int)(float)((float)((float)(v616 - v617) - v618) / v619) >> (v54[3].i8[4] - (*(_BYTE *)v598 + 1)));
                            if ((int)v604 <= v607
                              && v607 <= (int)(float)((float)((float)(v616 + v617) - v618) / v619) >> (v54[3].i8[4] - (*(_BYTE *)v598 + 1)))
                            {
                              octnode_insert((uint64_t)v54, *v54, *v598 + 1, v602, v603, v607);
                              v597 = -v673;
                              v596 = -v675;
                            }
                          }
                        }
                        v612 += 3;
                        v611 += 3;
                        --v613;
                      }
                      while (v613);
                      v621 = v54[2].f32[1];
                      v589 = (float *)v677;
                      v602 = v778 | (2 * v598[1]);
                      v603 = v600 | (2 * v598[2]);
                      v607 = 2 * v598[3];
                      v604 = (1 << (v54[3].i32[1] + ~*v598));
                      v606 = v54[1].f32[0] + (float)((float)((float)((float)v602 + v103) * (float)(int)v604) * v621);
                      v608 = v54[1].f32[1] + (float)((float)((float)((float)v603 + v103) * (float)(int)v604) * v621);
                      v609 = (float)((float)(v608 - v677->f32[1]) * (float)(v608 - v677->f32[1]))
                           + (float)((float)(v606 - v677->f32[0]) * (float)(v606 - v677->f32[0]));
                    }
                    if (v609 <= v684 && v609 >= v683)
                    {
                      v623 = v607 | 1;
                      v624 = v680;
                      v625 = (_QWORD *)(a9 + 16);
                      v626 = a10;
                      do
                      {
                        v627 = *((unsigned int *)v624 - 2);
                        LODWORD(v604) = vcvtms_s32_f32((float)(v606 - (float)(*v16 + (float)(v596 * v103)))* (float)((float)(int)v627 / v105));
                        if ((v604 & 0x80000000) == 0 && (int)v627 > (int)v604)
                        {
                          v628 = *((_DWORD *)v624 - 1);
                          LODWORD(v627) = vcvtms_s32_f32((float)(v608 - (float)(v16[1] + (float)(v597 * v103)))* (float)((float)v628 / v104));
                          if ((v627 & 0x80000000) == 0 && v628 > (int)v627)
                          {
                            v629 = *(float *)(*(v624 - 2) + 4 * (v604 + *v624 * v627));
                            v630 = *(float *)(*(v625 - 2) + 4 * (v604 + *v625 * v627));
                            v631 = v54[2].f32[0];
                            v632 = v54[3].f32[0];
                            v604 = ((int)(float)((float)((float)(v629 - v630) - v631) / v632) >> (v54[3].i8[4] - (*(_BYTE *)v598 + 1)));
                            if ((int)v604 <= v623
                              && v623 <= (int)(float)((float)((float)(v629 + v630) - v631) / v632) >> (v54[3].i8[4] - (*(_BYTE *)v598 + 1)))
                            {
                              octnode_insert((uint64_t)v54, *v54, *v598 + 1, v602, v603, v623);
                              v597 = -v673;
                              v596 = -v675;
                            }
                          }
                        }
                        v625 += 3;
                        v624 += 3;
                        --v626;
                      }
                      while (v626);
                    }
                    v601 = 0;
                    v600 = 1;
                  }
                  while ((v784 & 1) != 0);
                  v599 = 0;
                  v778 = 1;
                }
                while ((v772 & 1) != 0);
                v595 = v767 + 1;
                v594 = v761;
              }
              while (v767 + 1 != v764);
            }
          }
LABEL_60:
          v102 = v54[3].i32[1];
          v156 = v654++ < v102;
          v34 = a12;
          v76 = v655;
          v100 = a11;
          v75 = v670;
          if (!v156)
            goto LABEL_511;
        }
        v652 = v119;
        ptr = (int *)malloc_type_realloc(ptr, 4 * v119, 0x1AAE717CuLL);
LABEL_88:
        v120 = v667 - v106;
        if (v667 <= v106)
          goto LABEL_90;
LABEL_89:
        bzero(&ptr[v106], 4 * v120);
        goto LABEL_90;
      }
LABEL_511:
      v634 = (uint64_t)*v54;
      if (*(_QWORD *)(v100 + 56))
        *(_QWORD *)(v100 + 56) = mem_usage((uint64_t *)v54, (uint64_t)*v54);
      otree_free_children(v634);
      free(*(void **)v54);
      if (*(_QWORD *)&v54[5] >= 1)
      {
        v635 = 0;
        do
          free(*(void **)(*(_QWORD *)&v54[6] + 8 * v635++));
        while (v635 < *(_QWORD *)&v54[5]);
      }
      free(*(void **)&v54[6]);
      free(v54);
      free(v651);
      free(v786);
      free(ptr);
      v33 = v100;
    }
  }
  v636 = *(unsigned int *)(v33 + 52);
  if ((int)v636 < 1)
    return 0;
  v637 = *(float *)(v33 + 36) * 32.0;
  if ((_DWORD)v636 == 1)
  {
    v638 = 0;
    LODWORD(result) = 0;
LABEL_528:
    v647 = v636 - v638;
    v648 = (float *)(v34 + 104 * v638 + 96);
    do
    {
      v649 = *v648;
      v648 += 26;
      if (v649 < v637)
        result = result;
      else
        result = (result + 1);
      --v647;
    }
    while (v647);
    return result;
  }
  v640 = 0;
  v641 = 0;
  v638 = v636 & 0xFFFFFFFE;
  v642 = (float *)(v34 + 200);
  v643 = v638;
  do
  {
    v644 = *(v642 - 26);
    v645 = *v642;
    v642 += 52;
    v646 = v645;
    if (v644 >= v637)
      ++v640;
    if (v646 >= v637)
      ++v641;
    v643 -= 2;
  }
  while (v643);
  result = (v641 + v640);
  if (v638 != v636)
    goto LABEL_528;
  return result;
}

uint64_t compute_score(float32x2_t *a1, uint64_t a2, uint64_t a3, float32x2_t *a4, float *a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, float a10, int a11)
{
  int v21;
  int v22;
  int v23;
  int32x2_t v24;
  float v25;
  float v27;
  float v28;
  float v29;
  BOOL v30;
  float v31;
  float32x2_t v33;
  float32x2_t v34;
  float64x2_t v35;
  int32x2_t v36;
  int64x2_t v37;
  float64x2_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int16x8_t v52;
  int16x8_t *v53;
  unint64_t v54;
  int16x8_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int16x8_t v74;
  int16x8_t *v75;
  uint64_t v76;
  int16x8_t v77;
  int v78;
  _WORD *v79;
  int16x8_t *v80;
  uint64_t v81;
  uint64_t v82;
  int16x8_t v83;
  int16x8_t *v84;
  uint64_t v85;
  int16x8_t v86;
  uint64_t v87;
  __int16 *v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;

  if (!*(_DWORD *)(a2 + 28))
    return 0;
  v21 = *(_DWORD *)a2;
  v91 = 0;
  v92 = 0;
  v22 = (int)a8 >> 6;
  if (v21 <= a11 && ((*(_QWORD *)(a2 + 8 * v22 + 40) >> a8) & 1) == 0)
    return 0;
  v23 = compute_theta_alpha_node(a1, a2, a4, (float *)&v92 + 1, (float *)&v92, (float *)&v91 + 1, (float *)&v91);
  if (v23)
  {
    v25 = *(float *)(a6 + 28);
    if ((float)(*((float *)&v92 + 1) - v25) > a10 || (float)(*(float *)&v92 + v25) < a10)
      return 0;
    if (a5)
    {
      v24.i32[0] = HIDWORD(v91);
      v27 = *a5;
      v28 = a5[1];
      v29 = (float)(*((float *)&v91 + 1) - *a5)
          + (double)(int)((__PAIR64__((int)((float)(*((float *)&v91 + 1) - *a5) * 0.159154943), *((float *)&v91 + 1) - *a5)- COERCE_UNSIGNED_INT(0.0)) >> 32)* -6.28318531;
      v30 = v29 <= 0.0 || v28 <= v29;
      if (v30)
      {
        v31 = (float)(*(float *)&v91 - v27)
            + (double)(int)((__PAIR64__((int)((float)(*(float *)&v91 - v27) * 0.159154943), *(float *)&v91 - v27)
                           - COERCE_UNSIGNED_INT(0.0)) >> 32)
            * -6.28318531;
        if (v31 <= 0.0 || v28 <= v31)
        {
          v33.f32[0] = v27 + (float)(v28 * 0.5);
          v33.i32[1] = v91;
          v34 = vsub_f32(v33, (float32x2_t)vdup_lane_s32(v24, 0));
          v35 = vcvtq_f64_f32(v34);
          v36 = vadd_s32(vmovn_s64(vcvtq_s64_f64(vmulq_f64(v35, (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL)))), vcltz_f32(v34));
          v37.i64[0] = v36.i32[0];
          v37.i64[1] = v36.i32[1];
          v38 = vmlaq_f64(v35, (float64x2_t)vdupq_n_s64(0xC01921FB54442D18), vcvtq_f64_s64(v37));
          if ((vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v38, 1), v38))).u32[0] & 1) != 0)
            return 0;
        }
      }
    }
  }
  *(_QWORD *)(a2 + 8 * v22 + 40) |= 1 << a8;
  if (v21 < (int)a7 || !v23)
  {
    if (v21 < (int)a7)
    {
      v56 = *(_QWORD *)(a2 + 296);
      if (v56)
      {
        v57 = ((uint64_t (*)(float32x2_t *, uint64_t, uint64_t, float32x2_t *, float *, uint64_t, uint64_t, uint64_t, float, float, int))compute_score)(a1, v56, a3, a4, a5, a6, a7, a8, a9, a10, a11);
        compute_score(a1, *(_QWORD *)(a2 + 296) + 304, a3, a4, a5, a6, a7, a8, a9, a10, a11);
        v89 = v58 | v57;
        compute_score(a1, *(_QWORD *)(a2 + 296) + 608, a3, a4, a5, a6, a7, a8, a9, a10, a11);
        v60 = v59;
        compute_score(a1, *(_QWORD *)(a2 + 296) + 912, a3, a4, a5, a6, a7, a8, a9, a10, a11);
        v90 = v89 | v60 | v61;
        compute_score(a1, *(_QWORD *)(a2 + 296) + 1216, a3, a4, a5, a6, a7, a8, a9, a10, a11);
        v63 = v62;
        compute_score(a1, *(_QWORD *)(a2 + 296) + 1520, a3, a4, a5, a6, a7, a8, a9, a10, a11);
        v65 = v63 | v64;
        compute_score(a1, *(_QWORD *)(a2 + 296) + 1824, a3, a4, a5, a6, a7, a8, a9, a10, a11);
        v67 = v90 | v65 | v66;
        compute_score(a1, *(_QWORD *)(a2 + 296) + 2128, a3, a4, a5, a6, a7, a8, a9, a10, a11);
        return v67 | v68;
      }
    }
    return 0;
  }
  v39 = *(_DWORD *)(a6 + 24);
  v40 = v39 - 1;
  v41 = (int)(float)((float)((float)((float)(*((float *)&v91 + 1) - a9) * 0.15915)
                           - (float)(int)((__PAIR64__((int)(float)((float)(*((float *)&v91 + 1) - a9) * 0.15915), (float)(*((float *)&v91 + 1) - a9) * 0.15915)- COERCE_UNSIGNED_INT(0.0)) >> 32))* (float)v39);
  if (v39 - 1 >= v41)
    LODWORD(v42) = (int)(float)((float)((float)((float)(*((float *)&v91 + 1) - a9) * 0.15915)
                                      - (float)(int)((__PAIR64__((int)(float)((float)(*((float *)&v91 + 1) - a9) * 0.15915), (float)(*((float *)&v91 + 1) - a9) * 0.15915)- COERCE_UNSIGNED_INT(0.0)) >> 32))* (float)v39);
  else
    LODWORD(v42) = v39 - 1;
  v43 = (int)(float)((float)((float)((float)(*(float *)&v91 - a9) * 0.15915)
                           - (float)(int)((__PAIR64__((int)(float)((float)(*(float *)&v91 - a9) * 0.15915), (float)(*(float *)&v91 - a9) * 0.15915)- COERCE_UNSIGNED_INT(0.0)) >> 32))* (float)v39);
  if (v40 >= v43)
    v44 = (int)(float)((float)((float)((float)(*(float *)&v91 - a9) * 0.15915)
                             - (float)(int)((__PAIR64__((int)(float)((float)(*(float *)&v91 - a9) * 0.15915), (float)(*(float *)&v91 - a9) * 0.15915)- COERCE_UNSIGNED_INT(0.0)) >> 32))* (float)v39);
  else
    v44 = v39 - 1;
  if (v44 >= (int)v42)
    v45 = v42;
  else
    v45 = v44;
  if (v44 > (int)v42)
    LODWORD(v42) = v44;
  if (v39 >= 0)
    v46 = *(_DWORD *)(a6 + 24);
  else
    v46 = v39 + 1;
  if ((int)(v42 - v45) < v46 >> 1)
  {
    v47 = *(_QWORD *)(a2 + 16);
    if (v41 >= v43)
      v48 = v43;
    else
      v48 = v41;
    if (v48 >= v40)
      v48 = v40;
    v49 = v48;
    if (v41 >= v40)
      v41 = v40;
    if (v48 <= v41)
      v48 = v41;
    if (v43 < v40)
      v40 = v43;
    if (v48 <= v40)
      v48 = v40;
    v50 = v48 - v49 + 1;
    v51 = v49;
    if (v50 < 0x10)
      goto LABEL_79;
    v51 = (v50 & 0xFFFFFFFFFFFFFFF0) + v49;
    v52 = vdupq_n_s16(a3);
    v53 = (int16x8_t *)(v47 + 2 * v49 + 16);
    v54 = v50 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v55 = vaddq_s16(*v53, v52);
      v53[-1] = vaddq_s16(v53[-1], v52);
      *v53 = v55;
      v53 += 2;
      v54 -= 16;
    }
    while (v54);
    if (v50 != (v50 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_79:
      do
      {
        *(_WORD *)(v47 + 2 * v51) += a3;
        v30 = v51++ < (int)v42;
      }
      while (v30);
    }
    return 1;
  }
  if ((int)v42 < v39)
  {
    v70 = *(_QWORD *)(a2 + 16);
    v71 = (int)v42;
    v72 = (v39 + ~(_DWORD)v42);
    v42 = (int)v42;
    if (v72 < 0xF)
      goto LABEL_66;
    v73 = v72 + 1;
    v42 = (v73 & 0x1FFFFFFF0) + (int)v42;
    v74 = vdupq_n_s16(a3);
    v75 = (int16x8_t *)(v70 + 2 * v71 + 16);
    v76 = v73 & 0x1FFFFFFF0;
    do
    {
      v77 = vaddq_s16(*v75, v74);
      v75[-1] = vaddq_s16(v75[-1], v74);
      *v75 = v77;
      v75 += 2;
      v76 -= 16;
    }
    while (v76);
    if (v73 != (v73 & 0x1FFFFFFF0))
    {
LABEL_66:
      v78 = v39 - v42;
      v79 = (_WORD *)(v70 + 2 * v42);
      do
      {
        *v79++ += a3;
        --v78;
      }
      while (v78);
    }
  }
  if ((v45 & 0x80000000) != 0)
    return 1;
  v80 = *(int16x8_t **)(a2 + 16);
  v81 = v45 + 1;
  if (v45 >= 0xF)
  {
    v82 = v81 & 0xFFFFFFF0;
    v83 = vdupq_n_s16(a3);
    v84 = v80 + 1;
    v85 = v82;
    do
    {
      v86 = vaddq_s16(*v84, v83);
      v84[-1] = vaddq_s16(v84[-1], v83);
      *v84 = v86;
      v84 += 2;
      v85 -= 16;
    }
    while (v85);
    if (v82 == v81)
      return 1;
  }
  else
  {
    v82 = 0;
  }
  v87 = v81 - v82;
  v88 = &v80->i16[v82];
  do
  {
    *v88++ += a3;
    --v87;
  }
  while (v87);
  return 1;
}

uint64_t integrate_score_to_leafs(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  int16x8_t *v12;
  int16x8_t *v13;
  uint64_t v14;
  int16x8_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 *v18;
  _WORD *v19;
  __int16 v20;
  uint64_t v21;

  if (*(_DWORD *)(result + 28))
  {
    v6 = result;
    while (1)
    {
      if (!a2)
        goto LABEL_18;
      v7 = *(unsigned int *)(a4 + 24);
      if ((int)v7 < 1)
        goto LABEL_18;
      v8 = *(_QWORD *)(v6 + 16);
      v9 = *(_QWORD *)(a2 + 16);
      if (v7 >= 0x10 && (v8 < v9 + 2 * v7 ? (v10 = v9 >= v8 + 2 * v7) : (v10 = 1), v10))
      {
        v11 = v7 & 0x7FFFFFF0;
        v12 = (int16x8_t *)(v8 + 16);
        v13 = (int16x8_t *)(v9 + 16);
        v14 = v7 & 0xFFFFFFF0;
        do
        {
          v15 = vaddq_s16(*v12, *v13);
          v12[-1] = vaddq_s16(v12[-1], v13[-1]);
          *v12 = v15;
          v12 += 2;
          v13 += 2;
          v14 -= 16;
        }
        while (v14);
        if (v11 == v7)
          goto LABEL_18;
      }
      else
      {
        v11 = 0;
      }
      v16 = v7 - v11;
      v17 = 2 * v11;
      v18 = (__int16 *)(v9 + v17);
      v19 = (_WORD *)(v8 + v17);
      do
      {
        v20 = *v18++;
        *v19++ += v20;
        --v16;
      }
      while (v16);
LABEL_18:
      result = *(_QWORD *)(v6 + 296);
      if (result)
      {
        if (*(_DWORD *)v6 < (int)a3)
        {
          ((void (*)(void))integrate_score_to_leafs)();
          integrate_score_to_leafs(*(_QWORD *)(v6 + 296) + 304, v6, a3, a4);
          integrate_score_to_leafs(*(_QWORD *)(v6 + 296) + 608, v6, a3, a4);
          integrate_score_to_leafs(*(_QWORD *)(v6 + 296) + 912, v6, a3, a4);
          integrate_score_to_leafs(*(_QWORD *)(v6 + 296) + 1216, v6, a3, a4);
          integrate_score_to_leafs(*(_QWORD *)(v6 + 296) + 1520, v6, a3, a4);
          result = integrate_score_to_leafs(*(_QWORD *)(v6 + 296) + 1824, v6, a3, a4);
          v21 = *(_QWORD *)(v6 + 296);
          a2 = v6;
          v6 = v21 + 2128;
          if (*(_DWORD *)(v21 + 2156))
            continue;
        }
      }
      return result;
    }
  }
  return result;
}

uint64_t mem_usage(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;

  v3 = 0;
  v15 = *a1;
  if (*a1 == a2)
    goto LABEL_4;
  while (1)
  {
    v4 = 0;
    v5 = *(_QWORD *)(a2 + 296);
    if (!v5)
      break;
    while (1)
    {
      v16 = 16 * *((_DWORD *)a1 + 8) + 2432;
      v7 = mem_usage(a1, v5);
      v8 = mem_usage(a1, v5 + 304);
      v9 = mem_usage(a1, v5 + 608);
      v10 = mem_usage(a1, v5 + 912);
      v11 = mem_usage(a1, v5 + 1216);
      v12 = mem_usage(a1, v5 + 1520);
      v13 = mem_usage(a1, v5 + 1824);
      a2 = v5 + 2128;
      v3 += v4 + v7 + v8 + v16 + v9 + v10 + v11 + v12 + v13;
      if (v15 != v5 + 2128)
        break;
LABEL_4:
      v6 = 16 * *((_DWORD *)a1 + 8) + 2432;
      v4 = v6 + 8 * a1[7] + a1[5] * v6;
      v5 = *(_QWORD *)(a2 + 296);
      if (!v5)
        return v4 + v3;
    }
  }
  return v4 + v3;
}

void octnode_insert(uint64_t a1, _DWORD *a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  int v6;
  _OWORD *v11;
  _OWORD *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  int32x4_t v21;
  int32x4_t v22;
  uint64_t v23;
  uint64_t v24;

  a2[7] = 1;
  v6 = *a2;
  if (*a2 != a3)
  {
    v11 = a2;
    do
    {
      v13 = (_OWORD *)*((_QWORD *)v11 + 37);
      if (!v13)
      {
        v23 = *(_QWORD *)(a1 + 40);
        if (v23)
        {
          v24 = v23 - 1;
          *(_QWORD *)(a1 + 40) = v24;
          v13 = *(_OWORD **)(*(_QWORD *)(a1 + 48) + 8 * v24);
          bzero(v13, 16 * *(_DWORD *)(a1 + 32) + 2432);
        }
        else
        {
          v13 = malloc_type_calloc(1uLL, 16 * *(_DWORD *)(a1 + 32) + 2432, 0x8B962782uLL);
        }
        v14 = *(int *)(a1 + 32);
        *((_QWORD *)v13 + 2) = v13 + 152;
        v14 *= 2;
        v15 = (char *)v13 + v14 + 2432;
        *((_QWORD *)v13 + 40) = v15;
        v16 = &v15[v14];
        *((_QWORD *)v13 + 78) = v16;
        v17 = &v16[v14];
        *((_QWORD *)v13 + 116) = v17;
        v18 = &v17[v14];
        *((_QWORD *)v13 + 154) = v18;
        v19 = &v18[v14];
        *((_QWORD *)v13 + 192) = v19;
        v20 = &v19[v14];
        *((_QWORD *)v13 + 230) = v20;
        *((_QWORD *)v13 + 268) = &v20[v14];
        v21.i64[0] = 0x100000001;
        v21.i64[1] = 0x100000001;
        v22 = vaddq_s32(*(int32x4_t *)v11, *(int32x4_t *)v11);
        v22.i32[0] = vaddq_s32(*(int32x4_t *)v11, v21).u32[0];
        *((_QWORD *)v11 + 37) = v13;
        *v13 = v22;
        LODWORD(v14) = *((_DWORD *)v11 + 1);
        *((_DWORD *)v13 + 76) = *(_DWORD *)v11 + 1;
        *((_DWORD *)v13 + 77) = (2 * v14) | 1;
        *((int32x2_t *)v13 + 39) = vadd_s32(*(int32x2_t *)((char *)v11 + 8), *(int32x2_t *)((char *)v11 + 8));
        v21.i32[0] = vadd_s32(*(int32x2_t *)v11, (int32x2_t)0x100000001).u32[0];
        v21.i32[1] = vadd_s32(*(int32x2_t *)v11, *(int32x2_t *)v11).i32[1];
        *((_QWORD *)v13 + 76) = v21.i64[0];
        LODWORD(v14) = *((_DWORD *)v11 + 3);
        *((_DWORD *)v13 + 154) = (2 * *((_DWORD *)v11 + 2)) | 1;
        *((_DWORD *)v13 + 155) = 2 * v14;
        *((_DWORD *)v13 + 228) = *(_DWORD *)v11 + 1;
        *(_QWORD *)((char *)v13 + 916) = *(_QWORD *)&vadd_s32(*(int32x2_t *)((char *)v11 + 4), *(int32x2_t *)((char *)v11 + 4)) | 0x100000001;
        *((_DWORD *)v13 + 231) = 2 * *((_DWORD *)v11 + 3);
        v21.i32[0] = vadd_s32(*(int32x2_t *)v11, (int32x2_t)0x100000001).u32[0];
        v21.i32[1] = vadd_s32(*(int32x2_t *)v11, *(int32x2_t *)v11).i32[1];
        *((_QWORD *)v13 + 152) = v21.i64[0];
        LODWORD(v14) = *((_DWORD *)v11 + 3);
        *((_DWORD *)v13 + 306) = 2 * *((_DWORD *)v11 + 2);
        *((_DWORD *)v13 + 307) = (2 * v14) | 1;
        LODWORD(v14) = *((_DWORD *)v11 + 1);
        *((_DWORD *)v13 + 380) = *(_DWORD *)v11 + 1;
        *((_DWORD *)v13 + 381) = (2 * v14) | 1;
        LODWORD(v14) = *((_DWORD *)v11 + 3);
        *((_DWORD *)v13 + 382) = 2 * *((_DWORD *)v11 + 2);
        *((_DWORD *)v13 + 383) = (2 * v14) | 1;
        v21.i32[0] = vadd_s32(*(int32x2_t *)v11, (int32x2_t)0x100000001).u32[0];
        v21.i32[1] = vadd_s32(*(int32x2_t *)v11, *(int32x2_t *)v11).i32[1];
        *((_QWORD *)v13 + 228) = v21.i64[0];
        *((_QWORD *)v13 + 229) = *(_QWORD *)&vadd_s32(*(int32x2_t *)((char *)v11 + 8), *(int32x2_t *)((char *)v11 + 8)) | 0x100000001;
        *((_DWORD *)v13 + 532) = *(_DWORD *)v11 + 1;
        *(_QWORD *)((char *)v13 + 2132) = *(_QWORD *)&vadd_s32(*(int32x2_t *)((char *)v11 + 4), *(int32x2_t *)((char *)v11 + 4)) | 0x100000001;
        *((_DWORD *)v13 + 535) = (2 * *((_DWORD *)v11 + 3)) | 1;
        v6 = *(_DWORD *)v11;
      }
      v11 = &v13[19
               * ((a4 >> (~(_BYTE)v6 + a3)) & 1 | (2 * ((a5 >> (~(_BYTE)v6 + a3)) & 1)) & 0xFFFFFFFB | (4 * ((a6 >> (~(_BYTE)v6 + a3)) & 1)))];
      *((_DWORD *)v11 + 7) = 1;
      v6 = *(_DWORD *)v11;
    }
    while (*(_DWORD *)v11 != a3);
  }
}

uint64_t compute_theta_alpha_node(float32x2_t *a1, uint64_t a2, float32x2_t *a3, float *a4, float *a5, float *a6, float *a7)
{
  float v7;
  float v8;
  float v9;
  float32x2_t v10;
  float v11;
  float v12;
  float v13;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  BOOL v21;
  float v22;
  float v23;
  float v24;
  float v25;
  BOOL v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  BOOL v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  int32x2_t v41;
  __int8 v42;
  BOOL v43;
  float v44;
  float v45;
  float v46;
  float v47;

  v7 = (float)(1 << (a1[3].i32[1] - *(_DWORD *)a2));
  v8 = a1[2].f32[1];
  v9 = (float)(v8 * v7) * 0.5;
  v10 = vsub_f32(*a3, vmla_n_f32(a1[1], vmul_n_f32(vadd_f32(vcvt_f32_s32(*(int32x2_t *)(a2 + 4)), (float32x2_t)0x3F0000003F000000), v7), v8));
  v11 = v10.f32[1];
  v12 = sqrtf(vmlas_n_f32(vmuls_lane_f32(v10.f32[1], v10, 1), v10.f32[0], v10.f32[0]));
  v13 = v9 * 1.4142;
  if (v12 < (float)(v9 * 1.4142))
    return 0;
  v15 = a1[3].f32[0];
  v16 = (float)(v15 * v7) * 0.5;
  v17 = a3[1].f32[0] - (float)(a1[2].f32[0] + (float)((float)((float)((float)*(int *)(a2 + 12) + 0.5) * v7) * v15));
  v18 = v17 - v16;
  v19 = (float)(v17 - v16) / (float)(v12 + (float)(v9 * -1.4142));
  if (v19 >= 0.0)
    v20 = (float)(v17 - v16) / (float)(v12 + (float)(v9 * -1.4142));
  else
    v20 = -v19;
  v21 = v20 < 1.0;
  if (v20 >= 1.0)
    v20 = 1.0 / v20;
  v22 = v20
      + (float)((float)((float)(v20 * v20)
                      * (float)((float)((float)((float)((float)(v20 * v20) * -0.046496) + 0.15931) * (float)(v20 * v20))
                              + -0.32762))
              * v20);
  if (!v21)
    v22 = 1.5708 - v22;
  v21 = v19 < 0.0;
  v23 = -v22;
  if (!v21)
    v23 = v22;
  v24 = v18 / (float)(v12 + (float)(v9 * 1.4142));
  v25 = -v24;
  if (v24 >= 0.0)
    v25 = v18 / (float)(v12 + (float)(v9 * 1.4142));
  v26 = v25 < 1.0;
  if (v25 >= 1.0)
    v25 = 1.0 / v25;
  v27 = v25
      + (float)((float)((float)(v25 * v25)
                      * (float)((float)((float)((float)((float)(v25 * v25) * -0.046496) + 0.15931) * (float)(v25 * v25))
                              + -0.32762))
              * v25);
  if (!v26)
    v27 = 1.5708 - v27;
  v21 = v24 < 0.0;
  v28 = -v27;
  if (!v21)
    v28 = v27;
  if (v18 > 0.0)
    v29 = v28;
  else
    v29 = v23;
  *a4 = v29;
  v30 = v16 + v17;
  v31 = v30 / (float)(v12 + (float)(v9 * 1.4142));
  v32 = -v31;
  if (v31 >= 0.0)
    v32 = v30 / (float)(v12 + (float)(v9 * 1.4142));
  v33 = v32 < 1.0;
  if (v32 >= 1.0)
    v32 = 1.0 / v32;
  v34 = v32
      + (float)((float)((float)(v32 * v32)
                      * (float)((float)((float)((float)((float)(v32 * v32) * -0.046496) + 0.15931) * (float)(v32 * v32))
                              + -0.32762))
              * v32);
  if (!v33)
    v34 = 1.5708 - v34;
  v21 = v31 < 0.0;
  v35 = -v34;
  if (!v21)
    v35 = v34;
  v36 = v30 / (float)(v12 + (float)(v9 * -1.4142));
  v37 = -v36;
  if (v36 >= 0.0)
    v37 = v36;
  if (v37 >= 1.0)
    v38 = 1.0 / v37;
  else
    v38 = v37;
  v39 = v38
      + (float)((float)((float)(v38 * v38)
                      * (float)((float)((float)((float)((float)(v38 * v38) * -0.046496) + 0.15931) * (float)(v38 * v38))
                              + -0.32762))
              * v38);
  if (v37 >= 1.0)
    v39 = 1.5708 - v39;
  v21 = v36 < 0.0;
  v40 = -v39;
  if (!v21)
    v40 = v39;
  if (v30 <= 0.0)
    v40 = v35;
  v41 = vcltz_f32(v10);
  v42 = v41.i8[0];
  if ((v41.i8[0] & 1) != 0)
    v10.f32[0] = -v10.f32[0];
  if ((v41.i8[4] & 1) != 0)
    v11 = -v10.f32[1];
  v43 = v10.f32[0] < v11;
  if (v10.f32[0] >= v11)
    v44 = v11;
  else
    v44 = v10.f32[0];
  if (v10.f32[0] <= v11)
    v10.f32[0] = v11;
  v45 = v44 / v10.f32[0];
  v46 = v45
      + (float)((float)((float)(v45 * v45)
                      * (float)((float)((float)((float)((float)(v45 * v45) * -0.046496) + 0.15931) * (float)(v45 * v45))
                              + -0.32762))
              * v45);
  if (v43)
    v46 = 1.5708 - v46;
  if ((v42 & 1) != 0)
    v46 = 3.1416 - v46;
  *a5 = v40;
  if ((v41.i8[4] & 1) != 0)
    v46 = -v46;
  v47 = v13 / v12;
  *a6 = v46 - v47;
  *a7 = v47 + v46;
  return 1;
}

_DWORD *get_level(_DWORD *result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;

  if (result[7])
  {
    v5 = result;
    while (*v5 != (_DWORD)a2)
    {
      if (*v5 <= (int)a2)
      {
        result = (_DWORD *)*((_QWORD *)v5 + 37);
        if (result)
        {
          get_level(result, a2, a3);
          get_level(*((_QWORD *)v5 + 37) + 304, a2, a3);
          get_level(*((_QWORD *)v5 + 37) + 608, a2, a3);
          get_level(*((_QWORD *)v5 + 37) + 912, a2, a3);
          get_level(*((_QWORD *)v5 + 37) + 1216, a2, a3);
          get_level(*((_QWORD *)v5 + 37) + 1520, a2, a3);
          result = (_DWORD *)get_level(*((_QWORD *)v5 + 37) + 1824, a2, a3);
          v6 = *((_QWORD *)v5 + 37);
          v5 = (_DWORD *)(v6 + 2128);
          if (*(_DWORD *)(v6 + 2156))
            continue;
        }
      }
      return result;
    }
    v7 = *(_QWORD *)a3;
    v8 = *(_QWORD *)(a3 + 16);
    if (*(_QWORD *)a3 >= v8)
    {
      v9 = 2 * v8;
      v10 = v8 == 0;
      v11 = 32;
      if (!v10)
        v11 = v9;
      if (v11 <= v7)
        v12 = v7 + 1;
      else
        v12 = v11;
      if (v12)
      {
        result = malloc_type_realloc(*(void **)(a3 + 8), 8 * v12, 0xC46EAF16uLL);
        *(_QWORD *)(a3 + 8) = result;
        v7 = *(_QWORD *)a3;
      }
      *(_QWORD *)(a3 + 16) = v12;
    }
    *(_QWORD *)a3 = v7 + 1;
    *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8 * v7) = v5;
  }
  return result;
}

void deactivate_tree(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = a2;
  *(_DWORD *)(a2 + 28) = 0;
  v4 = *(unsigned int *)(a1 + 32);
  if ((int)v4 >= 1)
LABEL_2:
    bzero(*(void **)(v2 + 16), 2 * v4);
  while (1)
  {
    *(_DWORD *)(v2 + 24) = 0;
    *(_DWORD *)(v2 + 32) = 0;
    if (!*(_QWORD *)(v2 + 296))
      break;
    deactivate_tree(a1);
    deactivate_tree(a1);
    deactivate_tree(a1);
    deactivate_tree(a1);
    deactivate_tree(a1);
    deactivate_tree(a1);
    deactivate_tree(a1);
    v2 = *(_QWORD *)(v2 + 296) + 2128;
    *(_DWORD *)(v2 + 28) = 0;
    v4 = *(unsigned int *)(a1 + 32);
    if ((int)v4 >= 1)
      goto LABEL_2;
  }
}

void *remove_inactive_nodes(void *result, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_QWORD *)(a2 + 296))
  {
    v3 = result;
    ((void (*)(void))remove_inactive_nodes)();
    remove_inactive_nodes(v3, *(_QWORD *)(a2 + 296) + 304);
    remove_inactive_nodes(v3, *(_QWORD *)(a2 + 296) + 608);
    remove_inactive_nodes(v3, *(_QWORD *)(a2 + 296) + 912);
    remove_inactive_nodes(v3, *(_QWORD *)(a2 + 296) + 1216);
    remove_inactive_nodes(v3, *(_QWORD *)(a2 + 296) + 1520);
    remove_inactive_nodes(v3, *(_QWORD *)(a2 + 296) + 1824);
    result = (void *)remove_inactive_nodes(v3, *(_QWORD *)(a2 + 296) + 2128);
    if (!*(_DWORD *)(a2 + 28))
    {
      v4 = *((_QWORD *)v3 + 5);
      v5 = *((_QWORD *)v3 + 7);
      if (v4 >= v5)
      {
        v6 = 2 * v5;
        v7 = v5 == 0;
        v8 = 32;
        if (!v7)
          v8 = v6;
        if (v8 <= v4)
          v9 = v4 + 1;
        else
          v9 = v8;
        if (v9)
        {
          result = malloc_type_realloc(*((void **)v3 + 6), 8 * v9, 0x85CDE417uLL);
          *((_QWORD *)v3 + 6) = result;
          v4 = *((_QWORD *)v3 + 5);
        }
        *((_QWORD *)v3 + 7) = v9;
      }
      *((_QWORD *)v3 + 5) = v4 + 1;
      *(_QWORD *)(*((_QWORD *)v3 + 6) + 8 * v4) = *(_QWORD *)(a2 + 296);
      *(_QWORD *)(a2 + 296) = 0;
    }
  }
  return result;
}

void otree_free_children(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 296))
  {
    ((void (*)(void))otree_free_children)();
    otree_free_children(*(_QWORD *)(a1 + 296) + 304);
    otree_free_children(*(_QWORD *)(a1 + 296) + 608);
    otree_free_children(*(_QWORD *)(a1 + 296) + 912);
    otree_free_children(*(_QWORD *)(a1 + 296) + 1216);
    otree_free_children(*(_QWORD *)(a1 + 296) + 1520);
    otree_free_children(*(_QWORD *)(a1 + 296) + 1824);
    otree_free_children(*(_QWORD *)(a1 + 296) + 2128);
    free(*(void **)(a1 + 296));
    *(_QWORD *)(a1 + 296) = 0;
  }
}

void vl_ps_get_hyps(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float *v43;
  uint64_t v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  __double2 v50;
  float cosval;
  float sinval;
  float v53;
  float v54;
  float v55;
  __double2 v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  double v65;
  float v66;
  float v67;
  float v68;
  void *v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v75;
  int v76;
  float v77;
  uint64_t *v78;
  float v79;
  uint64_t v80;
  float v81;
  int v82;
  float v83;

  v6 = a1[6];
  v7 = *(int *)(a4 + 80);
  v8 = malloc_type_calloc(1uLL, 0x30uLL, 0x1030040F6295BD8uLL);
  *v8 = malloc_type_malloc(0x5B8uLL, 0x1080040A085CBA5uLL);
  v69 = v8;
  *((_OWORD *)v8 + 2) = xmmword_210BCAC10;
  if (*a3 >= 1)
  {
    v10 = a3[1];
    if (v10)
    {
      v11 = 0;
      v12 = 1;
LABEL_4:
      v13 = v10 + v11;
      free(*(void **)(v10 + v11 + 144));
      free(*(void **)(v13 + 120));
      free(*(void **)(v13 + 96));
      while (v12 < *a3)
      {
        v10 = a3[1];
        ++v12;
        v11 += 160;
        if (v10)
          goto LABEL_4;
      }
    }
  }
  *a3 = 0;
  v14 = v7 + 1;
  v15 = a3[2];
  v82 = v7 + 1;
  if (v15 < v7 + 1)
  {
    if (v15)
      v16 = 2 * v15;
    else
      v16 = 1;
    if (v16 <= v14)
      v17 = v7 + 1;
    else
      v17 = v16;
    if (v17)
    {
      v18 = malloc_type_realloc((void *)a3[1], 160 * v17, 0xB5968FC3uLL);
      v14 = v7 + 1;
      a3[1] = (uint64_t)v18;
    }
    a3[2] = v17;
  }
  if ((v7 & 0x80000000) == 0)
  {
    bzero((void *)(a3[1] + 160 * *a3), 160 * v14);
    v14 = v7 + 1;
  }
  v76 = v7;
  v78 = a3;
  *a3 = v14;
  if ((int)v6 < 1)
  {
    v20 = 0;
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = v6;
    v80 = a3[1];
    do
    {
      v26 = a1[7];
      v27 = v19 % v26;
      v28 = *(_QWORD *)(a1[4] + 8 * (v19 / v26));
      v29 = (uint64_t *)(v28 + 52 * (v19 % v26));
      if (*((_WORD *)v29 + 22))
      {
        if (*((_DWORD *)v69 + 9) != v20)
          __assert_rtn("vl_ps_get_hyps", "vl_pose_ps.c", 228, "pq->n == hyp_added");
        if (v20 == (_DWORD)v14)
        {
          v20 = v14;
          v22 = pqueue_delete((void **)v69, 1, 0);
          free(*(void **)(v22 + 144));
          free(*(void **)(v22 + 120));
          free(*(void **)(v22 + 96));
        }
        else
        {
          v22 = v80 + 160 * v20++;
        }
        *(_OWORD *)(v22 + 128) = 0u;
        *(_OWORD *)(v22 + 144) = 0u;
        *(_OWORD *)(v22 + 96) = 0u;
        *(_OWORD *)(v22 + 112) = 0u;
        *(_OWORD *)(v22 + 64) = 0u;
        *(_OWORD *)(v22 + 80) = 0u;
        *(_OWORD *)(v22 + 32) = 0u;
        *(_OWORD *)(v22 + 48) = 0u;
        *(_OWORD *)v22 = 0u;
        *(_OWORD *)(v22 + 16) = 0u;
        v23 = (float)*((unsigned __int16 *)v29 + 22);
        *(float *)v22 = v23;
        v24 = v28 + 52 * v27;
        LOWORD(v9) = *(_WORD *)(v24 + 48);
        *(float *)(v22 + 20) = (float)((float)v9 + 0.5) * 0.012272;
        v25 = *v29;
        *(_DWORD *)(v22 + 16) = *((_DWORD *)v29 + 2);
        *(_QWORD *)(v22 + 8) = v25;
        *(_QWORD *)(v22 + 24) = *(_QWORD *)(v24 + 16);
        *(_DWORD *)(v22 + 32) = *(_DWORD *)(v24 + 24);
        *(_DWORD *)(v22 + 36) = 1011421147;
        pqueue_push((uint64_t)v69, v22, (float)-v23 + *(float *)(v24 + 12) * 0.001);
        LODWORD(v14) = v82;
      }
      ++v19;
    }
    while (v19 != v21);
  }
  if (v20 > (int)v14)
    __assert_rtn("vl_ps_get_hyps", "vl_pose_ps.c", 240, "hyp_added <= max_hyp+1");
  v30 = *v78;
  v31 = v78[2];
  if (v31 >= v20)
  {
    v32 = (char *)v78[1];
    v33 = v20 - v30;
    if (v20 <= v30)
      goto LABEL_33;
LABEL_44:
    bzero(&v32[160 * *v78], 160 * v33);
    v32 = (char *)v78[1];
    *v78 = v20;
    if (v20)
      goto LABEL_34;
    goto LABEL_45;
  }
  if (v31)
    v35 = 2 * v31;
  else
    v35 = 1;
  if (v35 <= v20)
    v36 = v20;
  else
    v36 = v35;
  if (v36)
    v78[1] = (uint64_t)malloc_type_realloc((void *)v78[1], 160 * v36, 0xCA829B2CuLL);
  v78[2] = v36;
  v32 = (char *)v78[1];
  v33 = v20 - v30;
  if (v20 > v30)
    goto LABEL_44;
LABEL_33:
  *v78 = v20;
  if (v20)
  {
LABEL_34:
    qsort(v32, v20, 0xA0uLL, (int (__cdecl *)(const void *, const void *))vl_ps_hyp_cmp);
    v34 = *v78;
    goto LABEL_46;
  }
LABEL_45:
  v34 = 0;
LABEL_46:
  if (v76 >= v20)
    v37 = v20;
  else
    v37 = v76;
  v38 = v37;
  v39 = v78[2];
  if (v39 < v38)
  {
    if (v39)
      v41 = 2 * v39;
    else
      v41 = 1;
    if (v41 <= v38)
      v42 = v38;
    else
      v42 = v41;
    if (v42)
      v78[1] = (uint64_t)malloc_type_realloc((void *)v78[1], 160 * v42, 0x982ABA18uLL);
    v78[2] = v42;
    v40 = v38 - v34;
    if (v38 <= v34)
    {
LABEL_51:
      *v78 = v38;
      if ((int)v38 < 1)
        goto LABEL_67;
      goto LABEL_63;
    }
  }
  else
  {
    v40 = v38 - v34;
    if (v38 <= v34)
      goto LABEL_51;
  }
  bzero((void *)(v78[1] + 160 * *v78), 160 * v40);
  *v78 = v38;
  if ((int)v38 < 1)
    goto LABEL_67;
LABEL_63:
  v43 = *(float **)(a2 + 144);
  v44 = v78[1] + 44;
  do
  {
    *(_OWORD *)(v44 - 4) = xmmword_210BCAB70;
    *(_OWORD *)(v44 + 12) = xmmword_210BCAB70;
    *(_DWORD *)(v44 + 28) = 1065353216;
    *(_QWORD *)(v44 + 32) = *(_QWORD *)(v44 - 36);
    v83 = *(float *)(v44 - 24);
    *(_DWORD *)(v44 + 40) = *(_DWORD *)(v44 - 28);
    v59 = v43[59];
    v60 = v43[60];
    v61 = v43[58];
    v62 = (float)(v59 * v59) - (float)(v60 * v61);
    v63 = (float)(v60 * v60) - (float)(v61 * v59);
    v64 = (float)(v61 * v61) - (float)(v59 * v60);
    v65 = sqrt((float)((float)((float)(v63 * v63) + (float)(v62 * v62)) + (float)(v64 * v64)));
    v66 = 0.0;
    v67 = 0.0;
    v68 = 0.0;
    if (v65 > 0.0)
    {
      v66 = v62 / v65;
      v67 = v63 / v65;
      v68 = v64 / v65;
    }
    v45 = (float)(v67 * v60) - (float)(v68 * v59);
    v46 = (float)(v68 * v61) - (float)(v66 * v60);
    v75 = (float)(v66 * v59) - (float)(v67 * v61);
    *(float *)(v44 - 4) = v45;
    *(float *)v44 = v66;
    *(float *)(v44 + 8) = v46;
    *(float *)(v44 + 12) = v67;
    *(float *)(v44 + 20) = v75;
    *(float *)(v44 + 24) = v68;
    v47 = v43[58];
    *(float *)(v44 + 4) = v47;
    v48 = v43[59];
    *(float *)(v44 + 16) = v48;
    v73 = v43[60];
    v49 = atan2(v66, v45);
    v50 = __sincos_stret((float)-v49);
    cosval = v50.__cosval;
    sinval = v50.__sinval;
    v81 = (float)((float)((float)(cosval * v45) + 0.0) - (float)(sinval * v66)) + (float)(v47 * 0.0);
    v79 = (float)((float)((float)(cosval * v46) + 0.0) - (float)(sinval * v67)) + (float)(v48 * 0.0);
    v77 = (float)((float)((float)(cosval * v75) + 0.0) - (float)(sinval * v68)) + (float)(v73 * 0.0);
    v71 = (float)((float)((float)(sinval * v46) + 0.0) + (float)(cosval * v67)) + (float)(v48 * 0.0);
    v72 = (float)((float)((float)(sinval * v45) + 0.0) + (float)(cosval * v66)) + (float)(v47 * 0.0);
    v70 = (float)((float)((float)(sinval * v75) + 0.0) + (float)(cosval * v68)) + (float)(v73 * 0.0);
    v53 = (float)((float)((float)(v45 * 0.0) + 0.0) + (float)(v66 * 0.0)) + v47;
    v54 = (float)((float)((float)(v46 * 0.0) + 0.0) + (float)(v67 * 0.0)) + v48;
    v55 = (float)((float)((float)(v75 * 0.0) + 0.0) + (float)(v68 * 0.0)) + v73;
    v56 = __sincos_stret(v83);
    v57 = v56.__cosval;
    v58 = v56.__sinval;
    *(float *)(v44 - 4) = (float)((float)((float)(v57 * v81) + 0.0) - (float)(v58 * v72)) + (float)(v53 * 0.0);
    *(float *)v44 = (float)((float)((float)(v57 * v79) + 0.0) - (float)(v58 * v71)) + (float)(v54 * 0.0);
    *(float *)(v44 + 4) = (float)((float)((float)(v57 * v77) + 0.0) - (float)(v58 * v70)) + (float)(v55 * 0.0);
    *(float *)(v44 + 8) = (float)((float)((float)(v58 * v81) + 0.0) + (float)(v57 * v72)) + (float)(v53 * 0.0);
    *(float *)(v44 + 12) = (float)((float)((float)(v58 * v79) + 0.0) + (float)(v57 * v71)) + (float)(v54 * 0.0);
    *(float *)(v44 + 16) = (float)((float)((float)(v58 * v77) + 0.0) + (float)(v57 * v70)) + (float)(v55 * 0.0);
    *(float *)(v44 + 20) = v53 + (float)((float)((float)(v81 * 0.0) + 0.0) + (float)(v72 * 0.0));
    *(float *)(v44 + 24) = v54 + (float)((float)((float)(v79 * 0.0) + 0.0) + (float)(v71 * 0.0));
    *(float *)(v44 + 28) = v55 + (float)((float)((float)(v77 * 0.0) + 0.0) + (float)(v70 * 0.0));
    v44 += 160;
    --v38;
  }
  while (v38);
LABEL_67:
  if (*(_QWORD *)v69)
    free(*(void **)v69);
  if (*((_DWORD *)v69 + 8))
    free(*((void **)v69 + 2));
  free(v69);
}

uint64_t vl_ps_hyp_cmp(float *a1, float *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;

  if (*a1 > *a2)
    return 0xFFFFFFFFLL;
  if (*a1 < *a2)
    return 1;
  v3 = a1[2];
  v4 = a2[2];
  if (v3 < v4)
    return 0xFFFFFFFFLL;
  if (v3 > v4)
    return 1;
  v5 = a1[3];
  v6 = a2[3];
  if (v5 < v6)
    return 0xFFFFFFFFLL;
  if (v5 > v6)
    return 1;
  v7 = a1[4];
  v8 = a2[4];
  if (v7 < v8)
    return 1;
  if (v7 <= v8)
    return 0;
  return 0xFFFFFFFFLL;
}

void vl_ps_precomp_create(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v12;
  int v13;
  double v14;
  float v15;
  __float2 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  int v26;
  unsigned int v27;
  BOOL v28;

  v7 = a2[9];
  v8 = v7;
  v9 = a2[18];
  v10 = *(float *)(v9 + 252);
  v28 = v10 != 0.0 && *(_DWORD *)(a4 + 64) != 0;
  v11 = *(float *)(v9 + 244);
  *(float *)a3 = v11;
  *(_QWORD *)(a3 + 8) = malloc_type_calloc((int)v7, 4uLL, 0x100004052888210uLL);
  *(_QWORD *)(a3 + 40) = malloc_type_calloc((int)v7, 4uLL, 0x100004052888210uLL);
  *(_QWORD *)(a3 + 48) = malloc_type_calloc((int)v7, 4uLL, 0x100004052888210uLL);
  *(_QWORD *)(a3 + 56) = malloc_type_calloc((int)v7, 4uLL, 0x100004052888210uLL);
  *(_QWORD *)(a3 + 64) = malloc_type_calloc((int)v7, 4uLL, 0x100004052888210uLL);
  *(_QWORD *)(a3 + 16) = malloc_type_calloc((int)v7, 4uLL, 0x100004052888210uLL);
  *(_QWORD *)(a3 + 24) = malloc_type_calloc((int)v7, 4uLL, 0x100004052888210uLL);
  *(_QWORD *)(a3 + 32) = malloc_type_calloc((int)v7, 4uLL, 0x100004052888210uLL);
  *(_QWORD *)(a3 + 72) = malloc_type_calloc((int)v7, 4uLL, 0x100004052888210uLL);
  *(_QWORD *)(a3 + 80) = malloc_type_calloc((int)v7, 4uLL, 0x100004052888210uLL);
  if ((int)v7 >= 1)
  {
    v12 = 0;
    v13 = 0;
    v14 = v10 + 0.785398163;
    while (1)
    {
      v21 = a2[10];
      v22 = *(_QWORD *)(a1 + 8);
      v23 = *(unsigned __int16 *)(v21 + v12);
      v24 = 4 * *(unsigned __int16 *)(v21 + v12 + 2);
      v25 = *(float *)(a2[1] + v24);
      v26 = *(_DWORD *)(a2[4] + v24);
      if (v28)
      {
        v15 = v11 + v25;
        *(float *)&v27 = (float)((float)((float)(v11 + v25) - *(float *)(*(_QWORD *)(a1 + 104) + 8 * v23 + 4)) + 3.1416)
                       + 3.1416;
        if (v14 < fabsf((float)(*(float *)&v27+ (float)((float)(int)((__PAIR64__((int)(float)(*(float *)&v27 * 0.15915), v27)- COERCE_UNSIGNED_INT(0.0)) >> 32)* -6.2832))+ -3.1416))goto LABEL_8;
      }
      else
      {
        v15 = v11 + v25;
      }
      *(_DWORD *)(*(_QWORD *)(a3 + 8) + 4 * v13) = *(_DWORD *)(v21 + v12);
      v16 = __sincosf_stret(v15);
      v17 = *(_QWORD *)(a3 + 32);
      *(float *)(*(_QWORD *)(a3 + 40) + 4 * v13) = v16.__cosval;
      v18 = *(_QWORD *)(a3 + 56);
      *(float *)(*(_QWORD *)(a3 + 48) + 4 * v13) = v16.__sinval;
      *(_DWORD *)(v18 + 4 * v13) = v26;
      *(float *)(*(_QWORD *)(a3 + 64) + 4 * v13) = v25;
      v19 = *(_QWORD *)(a3 + 24);
      *(_DWORD *)(*(_QWORD *)(a3 + 16) + 4 * v13) = *(_DWORD *)(v22 + 12 * v23);
      v20 = v22 + 12 * v23;
      *(_DWORD *)(v19 + 4 * v13) = *(_DWORD *)(v20 + 4);
      *(_DWORD *)(v17 + 4 * v13++) = *(_DWORD *)(v20 + 8);
LABEL_8:
      v12 += 4;
      if (4 * v8 == v12)
        goto LABEL_13;
    }
  }
  v13 = 0;
LABEL_13:
  *(_DWORD *)(a3 + 4) = v13;
}

double vl_ps_precomp_free(uint64_t a1)
{
  double result;

  free(*(void **)(a1 + 8));
  free(*(void **)(a1 + 40));
  free(*(void **)(a1 + 48));
  free(*(void **)(a1 + 56));
  free(*(void **)(a1 + 64));
  free(*(void **)(a1 + 16));
  free(*(void **)(a1 + 24));
  free(*(void **)(a1 + 32));
  free(*(void **)(a1 + 72));
  free(*(void **)(a1 + 80));
  *(_QWORD *)(a1 + 80) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

BOOL vl_ps_cam_init(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  float *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int32x4_t *v13;
  uint64_t v14;
  int32x4_t v15;
  int32x4_t *v16;
  int32x4_t v17;
  int32x4_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t i;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  float v47;
  float v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float v59;
  float v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t j;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  char *v71;
  float v72;
  float v73;
  BOOL v74;
  float v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned __int16 *v126;
  float *v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  uint64_t v138;
  float *v139;
  uint64_t v140;
  int v141;
  int v142;
  uint64_t v143;
  float v144;
  float v145;
  float v146;
  _BOOL8 result;
  double v148;
  float *v149;
  float v150;
  _QWORD *v151;
  uint64_t v152;
  float v153;
  uint64_t v154;
  float v155;
  float v156;
  int v157;
  float v158;
  uint64_t v159;
  _QWORD v160[2189];

  v2 = MEMORY[0x24BDAC7A8](a1, a2);
  v5 = v4;
  v6 = v3;
  v149 = v7;
  v8 = v2;
  v160[2187] = *MEMORY[0x24BDAC8D0];
  v151 = v9;
  v152 = v10;
  v11 = *v9;
  v159 = *v9;
  if (!v10)
    LODWORD(v11) = 0;
  v157 = v11;
  v12 = v3[3];
  v13 = (int32x4_t *)malloc_type_malloc(4 * (int)v12, 0x100004052888210uLL);
  if (*(int *)(v5 + 28) > 1)
  {
    printf("%sError : ", (const char *)&unk_210BC3C5E);
    printf("Can not run with more than %d nn", 1);
    putchar(10);
  }
  if ((int)v12 >= 1)
  {
    if (v12 < 8uLL)
    {
      v14 = 0;
      do
      {
LABEL_11:
        v13->i32[v14] = v14;
        ++v14;
      }
      while (v12 != v14);
      goto LABEL_12;
    }
    v14 = v12 & 0x7FFFFFF8;
    v15 = (int32x4_t)xmmword_210BCABD0;
    v16 = v13 + 1;
    v17.i64[0] = 0x400000004;
    v17.i64[1] = 0x400000004;
    v18.i64[0] = 0x800000008;
    v18.i64[1] = 0x800000008;
    v19 = v12 & 0xFFFFFFF8;
    do
    {
      v16[-1] = v15;
      *v16 = vaddq_s32(v15, v17);
      v15 = vaddq_s32(v15, v18);
      v16 += 2;
      v19 -= 8;
    }
    while (v19);
    if ((v12 & 7) != 0)
      goto LABEL_11;
  }
LABEL_12:
  v20 = (char *)malloc_type_malloc(0x200uLL, 0x1FC406B3uLL);
  if (v12 << 32)
  {
    v21 = 0;
    v22 = (int)v12;
    v23 = 1;
    v24 = 32;
    v25 = (char *)v13;
    while (1)
    {
      v26 = v21;
      while (1)
      {
        if (!v23)
        {
          --v26;
          v27 = &v20[16 * v26];
          v22 = *((_QWORD *)v27 + 1);
          v25 = &v13->i8[4 * *(_QWORD *)v27];
        }
        if ((uint64_t)v22 > 15)
          break;
        if ((uint64_t)v22 > 1)
        {
          v28 = 0;
          v29 = v6[4];
          v30 = (int *)(v25 + 4);
          for (i = 1; i != v22; ++i)
          {
            v32 = v28;
            do
            {
              v33 = v30[v32];
              v34 = *(int *)&v25[4 * v32];
              if ((float)(*(float *)(v29 + 8 * v33) - *(float *)(v29 + 8 * v34)) >= 0.0)
                break;
              v30[v32] = v34;
              *(_DWORD *)&v25[4 * v32] = v33;
              v35 = v32-- + 1;
            }
            while (v35 > 1);
            ++v28;
          }
        }
        v23 = 0;
        v22 = 0;
        if (v26 < 1)
          goto LABEL_83;
      }
      if (v22 > 0x27)
        break;
      v36 = v22 >> 1;
      v37 = v6[4];
      v38 = *(int *)v25;
      v39 = *(float *)(v37 + 8 * v38);
      v40 = *(float *)(v37 + 8 * *(int *)&v25[4 * (v22 >> 1)]);
      v41 = *(float *)(v37 + 8 * *(int *)&v25[4 * v22 - 4]);
      if ((float)(v39 - v40) >= 0.0)
      {
        if ((float)(v39 - v41) >= 0.0)
        {
          if ((float)(v40 - v41) < 0.0)
            v36 = v22 - 1;
        }
        else
        {
          v36 = 0;
        }
      }
      else if ((float)(v40 - v41) >= 0.0)
      {
        if ((float)(v39 - v41) >= 0.0)
          v36 = 0;
        else
          v36 = v22 - 1;
      }
LABEL_65:
      v62 = 0;
      v63 = 0;
      v64 = 4 * v36;
      *(_DWORD *)v25 = *(_DWORD *)&v25[v64];
      *(_DWORD *)&v25[v64] = v38;
      for (j = 1; j != v22; ++j)
      {
        v66 = *(int *)&v25[4 * j];
        if ((float)(*(float *)(v37 + 8 * v66) - *(float *)(v37 + 8 * *(int *)v25)) <= 0.0)
        {
          ++v63;
          *(_DWORD *)&v25[4 * j] = *(_DWORD *)&v25[4 * v63];
          *(_DWORD *)&v25[4 * v63] = v66;
          if ((float)(*(float *)(v37 + 8 * *(int *)&v25[4 * j]) - *(float *)(v37 + 8 * *(int *)v25)) == 0.0)
          {
            ++v62;
            *(_DWORD *)&v25[4 * v63] = *(_DWORD *)&v25[4 * v62];
            *(_DWORD *)&v25[4 * v62] = v66;
          }
        }
      }
      v67 = 4 * v63 - 4 * v62;
      v68 = v62;
      do
      {
        v69 = *(_DWORD *)&v25[v67];
        *(_DWORD *)&v25[v67] = *(_DWORD *)&v25[4 * v68];
        *(_DWORD *)&v25[4 * v68] = v69;
        v67 += 4;
      }
      while (v68-- > 0);
      v21 = v26 + 1;
      if (v26 + 1 >= v24)
      {
        v154 = 2 * v24;
        v20 = (char *)malloc_type_realloc(v20, 32 * v24, 0x90B28DBCuLL);
        v24 = v154;
        v21 = v26 + 1;
      }
      v71 = &v20[16 * v26];
      *(_QWORD *)v71 = v63 + ((v25 - (char *)v13) >> 2) + 1;
      *((_QWORD *)v71 + 1) = v22 + ~v63;
      v22 = v63 - v62;
      v23 = v63 != v62;
      if (v26 < 0 && !v22)
        goto LABEL_83;
    }
    v42 = 0;
    v43 = 0;
    if (v22 <= 0x7D0)
      v44 = 8;
    else
      v44 = 26;
    if (v22 <= 0x7D0)
      v45 = 3;
    else
      v45 = 9;
    v37 = v6[4];
    while (1)
    {
      v46 = (uint64_t)(v22 - 1 + v42) / v44;
      v47 = *(float *)(v37 + 8 * *(int *)&v25[4 * (v42 / v44)]);
      v48 = *(float *)(v37 + 8 * *(int *)&v25[4 * v46]);
      v49 = (uint64_t)(2 * v22 - 2 + v42) / v44;
      v50 = *(float *)(v37 + 8 * *(int *)&v25[4 * v49]);
      if ((float)(v47 - v48) >= 0.0)
      {
        if ((float)(v47 - v50) < 0.0)
          goto LABEL_46;
        if ((float)(v48 - v50) < 0.0)
        {
LABEL_48:
          v160[v43] = v49;
          goto LABEL_40;
        }
      }
      else if ((float)(v48 - v50) >= 0.0)
      {
        if ((float)(v47 - v50) < 0.0)
          goto LABEL_48;
LABEL_46:
        v160[v43] = v42 / v44;
        goto LABEL_40;
      }
      v160[v43] = v46;
LABEL_40:
      ++v43;
      v42 += 3 * v22 - 3;
      if (v45 == v43)
      {
        while (1)
        {
          v51 = 0;
          v52 = 0;
          v53 = v45;
          v45 /= 3uLL;
          if (v45 <= 1)
            v54 = 1;
          else
            v54 = v45;
          v55 = 8 * v54;
          do
          {
            v56 = v160[v51];
            v57 = v160[v51 + 1];
            v58 = v160[v51 + 2];
            v59 = *(float *)(v37 + 8 * *(int *)&v25[4 * v56]);
            v60 = *(float *)(v37 + 8 * *(int *)&v25[4 * v57]);
            v61 = *(float *)(v37 + 8 * *(int *)&v25[4 * v58]);
            if ((float)(v59 - v60) >= 0.0)
            {
              if ((float)(v59 - v61) < 0.0)
                goto LABEL_61;
              if ((float)(v60 - v61) >= 0.0)
              {
LABEL_54:
                v160[v52 / 8] = v57;
                goto LABEL_55;
              }
            }
            else
            {
              if ((float)(v60 - v61) < 0.0)
                goto LABEL_54;
              if ((float)(v59 - v61) >= 0.0)
              {
LABEL_61:
                v160[v52 / 8] = v56;
                goto LABEL_55;
              }
            }
            v160[v52 / 8] = v58;
LABEL_55:
            v52 += 8;
            v51 += 3;
          }
          while (v55 != v52);
          if (v53 < 9)
          {
            v36 = v160[0];
            LODWORD(v38) = *(_DWORD *)v25;
            goto LABEL_65;
          }
        }
      }
    }
  }
LABEL_83:
  free(v20);
  v72 = (float)*v6;
  v73 = *(float *)(v5 + 132) * v72;
  if (v73 <= v72)
    v72 = *(float *)(v5 + 132) * v72;
  v74 = v73 < 0.0;
  v75 = 0.0;
  if (!v74)
    v75 = v72;
  v76 = (int)v75;
  *(_QWORD *)(v8 + 72) = 0;
  if ((int)v76 >= 1)
  {
    v77 = 0;
    v78 = 0;
    LODWORD(v79) = *(_DWORD *)(v5 + 28);
    do
    {
      v80 = (_DWORD *)(v6[1] + 8 * v13->i32[v78]);
      if ((*v80 & 0x80000000) != 0)
      {
        if ((_DWORD)v79 != 1)
          __assert_rtn("vl_ps_cam_init", "vl_pose_ps.c", 463, "par->nn == 1 && \"does not work for nn > 1, fix or remove\"");
        LODWORD(v79) = 1;
      }
      else if ((int)v79 >= 1)
      {
        v81 = 0;
        do
        {
          v83 = *(_QWORD *)(v8 + 88);
          if (v77 >= v83)
          {
            if (v83)
              v84 = 2 * v83;
            else
              v84 = 64;
            if (v84 <= v77)
              v85 = v77 + 1;
            else
              v85 = v84;
            if (v85)
            {
              *(_QWORD *)(v8 + 80) = malloc_type_realloc(*(void **)(v8 + 80), 4 * v85, 0xDC147B87uLL);
              v77 = *(_QWORD *)(v8 + 72);
            }
            *(_QWORD *)(v8 + 88) = v85;
          }
          *(_QWORD *)(v8 + 72) = v77 + 1;
          *(_DWORD *)(*(_QWORD *)(v8 + 80) + 4 * v77) = 0;
          v77 = *(_QWORD *)(v8 + 72);
          v82 = *(_QWORD *)(v8 + 80) + 4 * v77;
          *(_WORD *)(v82 - 2) = v13->i32[v78];
          *(_WORD *)(v82 - 4) = v80[v81++];
          v79 = *(int *)(v5 + 28);
        }
        while (v81 < v79);
      }
      ++v78;
    }
    while (v78 != v76);
  }
  printf("Spam : ");
  printf("# correspondences used in scoring : %llu", *(_QWORD *)(v8 + 72));
  putchar(10);
  free(v13);
  v86 = *(_QWORD *)(v8 + 72);
  v87 = *(_QWORD *)v8;
  v88 = v157 + (int)v159;
  v89 = *(_QWORD *)(v8 + 16);
  if (v88 <= v89)
  {
    v94 = v88 - v87;
    if (v88 <= v87)
      goto LABEL_115;
  }
  else
  {
    v90 = 2 * v89;
    v91 = v89 == 0;
    v92 = 64;
    if (!v91)
      v92 = v90;
    if (v92 <= v88)
      v93 = v157 + (int)v159;
    else
      v93 = v92;
    if (v93)
      *(_QWORD *)(v8 + 8) = malloc_type_realloc(*(void **)(v8 + 8), 4 * v93, 0x3383BCFBuLL);
    *(_QWORD *)(v8 + 16) = v93;
    v94 = v88 - v87;
    if (v88 <= v87)
    {
LABEL_115:
      *(_QWORD *)v8 = v88;
      v95 = *(_QWORD *)(v8 + 24);
      v96 = *(_QWORD *)(v8 + 40);
      if (v88 > v96)
        goto LABEL_116;
LABEL_136:
      v100 = v88 - v95;
      if (v88 <= v95)
        goto LABEL_124;
      goto LABEL_137;
    }
  }
  bzero((void *)(*(_QWORD *)(v8 + 8) + 4 * *(_QWORD *)v8), 4 * v94);
  *(_QWORD *)v8 = v88;
  v95 = *(_QWORD *)(v8 + 24);
  v96 = *(_QWORD *)(v8 + 40);
  if (v88 <= v96)
    goto LABEL_136;
LABEL_116:
  v97 = 2 * v96;
  v91 = v96 == 0;
  v98 = 64;
  if (!v91)
    v98 = v97;
  if (v98 <= v88)
    v99 = v157 + (int)v159;
  else
    v99 = v98;
  if (v99)
    *(_QWORD *)(v8 + 32) = malloc_type_realloc(*(void **)(v8 + 32), 4 * v99, 0x640240CuLL);
  *(_QWORD *)(v8 + 40) = v99;
  v100 = v88 - v95;
  if (v88 <= v95)
  {
LABEL_124:
    *(_QWORD *)(v8 + 24) = v88;
    v101 = *(_QWORD *)(v8 + 48);
    v102 = *(_QWORD *)(v8 + 64);
    if (v88 > v102)
      goto LABEL_125;
LABEL_138:
    v106 = v88 - v101;
    if (v88 <= v101)
      goto LABEL_140;
    goto LABEL_139;
  }
LABEL_137:
  bzero((void *)(*(_QWORD *)(v8 + 32) + 4 * *(_QWORD *)(v8 + 24)), 4 * v100);
  *(_QWORD *)(v8 + 24) = v88;
  v101 = *(_QWORD *)(v8 + 48);
  v102 = *(_QWORD *)(v8 + 64);
  if (v88 <= v102)
    goto LABEL_138;
LABEL_125:
  v103 = 2 * v102;
  v91 = v102 == 0;
  v104 = 32;
  if (!v91)
    v104 = v103;
  if (v104 <= v88)
    v105 = v157 + (int)v159;
  else
    v105 = v104;
  if (v105)
    *(_QWORD *)(v8 + 56) = malloc_type_realloc(*(void **)(v8 + 56), 8 * v105, 0x204F70D1uLL);
  *(_QWORD *)(v8 + 64) = v105;
  v106 = v88 - v101;
  if (v88 > v101)
LABEL_139:
    bzero((void *)(*(_QWORD *)(v8 + 56) + 8 * *(_QWORD *)(v8 + 48)), 8 * v106);
LABEL_140:
  *(_QWORD *)(v8 + 48) = v88;
  v107 = v149[58];
  v108 = v149[59];
  v109 = v149[60];
  v110 = sqrtf((float)((float)(v108 * v108) + (float)(v107 * v107)) + (float)(v109 * v109));
  v111 = 0.0;
  v112 = 0.0;
  v113 = 0.0;
  if (v110 > 0.0)
  {
    v111 = v107 / v110;
    v112 = v108 / v110;
    v113 = v109 / v110;
  }
  v114 = (float)(v113 * -0.0) + (float)(v112 * 0.0);
  v115 = v113 + (float)(v111 * -0.0);
  v153 = v111;
  v116 = -(float)(v112 - (float)(v111 * 0.0));
  v117 = (float)((float)(v115 * v115) + (float)(v114 * v114)) + (float)(v116 * v116);
  v148 = sqrt(v117);
  v158 = v112;
  v156 = v113;
  if (v148 <= 0.00001)
  {
    printf("%sError : ", (const char *)&unk_210BC3C5E);
    printf("fix this case if needed");
    putchar(10);
    v113 = v156;
    v112 = v158;
  }
  v118 = sqrtf(v117);
  v155 = 0.0;
  v119 = 0.0;
  v120 = 0.0;
  if (v118 > 0.0)
  {
    v155 = v114 / v118;
    v119 = v115 / v118;
    v120 = v116 / v118;
  }
  if ((int)v86 >= 1)
  {
    v86 = v86;
    v121 = (float)(v120 * v153) - (float)(v155 * v113);
    v122 = (float)(v155 * v112) - (float)(v119 * v153);
    v150 = (float)(v119 * v113) - (float)(v120 * v112);
    v123 = *(_QWORD *)(v8 + 8);
    v124 = *(_QWORD *)(v8 + 32);
    v125 = *(_QWORD *)(v8 + 56);
    v126 = (unsigned __int16 *)(*(_QWORD *)(v8 + 80) + 2);
    do
    {
      v141 = *v126;
      v126 += 2;
      v140 = v141;
      v142 = v141 - v159;
      if (v141 >= (int)v159)
      {
        v127 = (float *)(*(_QWORD *)(v152 + 8) + 268 * v142);
        v129 = *v127;
        v128 = v127[1];
        v130 = v127[2];
        v131 = (float)((float)((float)(v150 * *v127) + 0.0) + (float)(v121 * v128)) + (float)(v122 * v130);
        v132 = (float)((float)((float)(v155 * *v127) + 0.0) + (float)(v119 * v128)) + (float)(v120 * v130);
        v133 = 1.0;
        v134 = 1.0 / sqrtf((float)(v132 * v132) + (float)(v131 * v131));
        v135 = (float)((float)((float)((float)(v153 * *v127) + 0.0) + (float)(v112 * v128)) + (float)(v113 * v130))
             * v134;
        v136 = atan2f(v132 * v134, v131 * v134);
        v137 = v130 / v129;
      }
      else
      {
        v143 = v151[1] + 288 * v140;
        v133 = *(float *)v143;
        v137 = *(float *)(v143 + 4);
        v144 = (float)((float)(v150 + 0.0) + (float)(v121 * *(float *)v143)) + (float)(v122 * v137);
        v145 = (float)((float)(v155 + 0.0) + (float)(v119 * *(float *)v143)) + (float)(v120 * v137);
        v146 = 1.0 / sqrtf((float)(v145 * v145) + (float)(v144 * v144));
        v135 = (float)((float)((float)(v153 + 0.0) + (float)(v112 * *(float *)v143)) + (float)(v113 * v137)) * v146;
        v136 = atan2((float)(v145 * v146), (float)(v144 * v146));
      }
      v138 = 4 * v140;
      *(float *)(v123 + v138) = v136;
      *(float *)(v124 + v138) = v135;
      v139 = (float *)(v125 + 8 * v140);
      *v139 = v133;
      v139[1] = v137;
      --v86;
      v112 = v158;
      v113 = v156;
    }
    while (v86);
  }
  result = v148 <= 0.00001;
  *(_QWORD *)(v8 + 144) = v149;
  return result;
}

uint64_t vl_ps_grid_cell_add(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(int *)(a1 + 76);
  if ((_DWORD)v2 == -1)
  {
    v9 = *(_QWORD *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 56);
    if (v9 == *(_QWORD *)(a1 + 24) * v10)
    {
      if ((52 * v10) >> 31 >= 5)
        __assert_rtn("vl_ps_grid_cell_add", "vl_pose_ps.c", 535, "n_bytes < 10*GB && \"Page size too large, try allocating smaller pages\"");
      v11 = malloc_type_malloc(52 * v10, 0xAA52A4A0uLL);
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(_QWORD *)(a1 + 40);
      if (v12 >= v13)
      {
        v14 = 2 * v13;
        v15 = v13 == 0;
        v16 = 32;
        if (!v15)
          v16 = v14;
        if (v16 <= v12)
          v17 = v12 + 1;
        else
          v17 = v16;
        if (v17)
        {
          *(_QWORD *)(a1 + 32) = malloc_type_realloc(*(void **)(a1 + 32), 8 * v17, 0xE6C7ABECuLL);
          v12 = *(_QWORD *)(a1 + 24);
        }
        *(_QWORD *)(a1 + 40) = v17;
      }
      *(_QWORD *)(a1 + 24) = v12 + 1;
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v12) = 0;
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * *(_QWORD *)(a1 + 24) - 8) = v11;
      v9 = *(_QWORD *)(a1 + 48);
      v10 = *(_QWORD *)(a1 + 56);
    }
    if (v9 % v10)
      v18 = *(_QWORD *)(a1 + 64) + 52;
    else
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (int)((int)v9 / v10)) + 52 * (int)((int)v9 % v10);
    *(_QWORD *)(a1 + 64) = v18;
    *(_QWORD *)(a1 + 48) = v9 + 1;
    *(_DWORD *)(v18 + 48) = 0;
    *(_OWORD *)(v18 + 16) = 0u;
    *(_OWORD *)(v18 + 32) = 0u;
    *(_OWORD *)v18 = 0u;
    result = *(_QWORD *)(a1 + 64);
    v8 = *(_DWORD *)(a1 + 48) - 1;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 56);
    v4 = v2 / v3;
    v5 = v2 % v3;
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (int)v4);
    if (*(_DWORD *)(v6 + 52 * v5 + 28) != -1)
      __assert_rtn("vl_ps_grid_cell_add", "vl_pose_ps.c", 528, "c->sub_region_flag == -1");
    result = v6 + 52 * v5;
    v8 = *(_DWORD *)(result + 36);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(result + 40);
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_DWORD *)(result + 48) = 0;
    *(_OWORD *)result = 0u;
  }
  *(_DWORD *)(result + 36) = v8;
  *(_DWORD *)(result + 40) = -1;
  return result;
}

float vl_ps_grid_setup(uint64_t a1, double *a2, __int128 *a3, int *a4, uint64_t a5, float a6)
{
  float v12;
  float v13;
  int v14;
  __int128 v15;
  int v16;
  float v17;
  float v18;
  float v19;
  int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  double v25;
  float v26;
  float v27;
  float v28;
  float *v29;
  int64_t v30;
  float *v31;
  int64_t v32;
  uint64_t v33;
  float *v34;
  float *v35;
  float v36;
  int64_t v37;
  float v38;
  uint64_t v39;
  void *v40;
  int64_t v41;
  float result;
  double v43;
  size_t __nel;
  void *__base;
  uint64_t v46;

  v12 = *(float *)(a5 + 16);
  v13 = ceilf((float)(a6 + a6) / v12);
  if (v13 < 1.0)
  {
    v14 = 1;
    if (*(int *)(a5 + 48) < 1)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (v13 <= 512.0)
  {
    v14 = (int)v13;
    if (*(int *)(a5 + 48) < 1)
      goto LABEL_9;
    goto LABEL_8;
  }
  v14 = 512;
  if (*(int *)(a5 + 48) >= 1)
  {
LABEL_8:
    printf("Verbose : ");
    printf("vl_ps_grid_setup: Testing %d cells (Search radius: %.1f m)\n", v14 * v14, a6);
    putchar(10);
  }
LABEL_9:
  v15 = *a3;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a1 = v15;
  if (v14 >= 1)
  {
    v16 = 0;
    v17 = (float)(v14 - 1);
    v18 = 0.0;
    v19 = -0.5;
    while (1)
    {
      v20 = 0;
      v21 = v12 * (float)((float)v16 + (float)(v17 * v19));
      v22 = v21 * v21;
      v43 = v21;
      do
      {
        while (1)
        {
          while (1)
          {
            __nel = 0;
            __base = 0;
            v46 = 0;
            v23 = v12 * (float)((float)v20 + (float)(v17 * v19));
            v24 = v22 + (float)(v23 * v23);
            if (v24 < (float)((float)((float)(v12 * 0.5) * (float)v14) * (float)((float)(v12 * 0.5) * (float)v14)))
              break;
            free(0);
            if (++v20 == v14)
              goto LABEL_11;
          }
          v25 = *(double *)(a1 + 8);
          v26 = *(double *)a1 + v23;
          v27 = v25 + v43;
          if (v18 <= v24)
            v18 = v22 + (float)(v23 * v23);
          v28 = v25 + v43;
          vl_height_get_for_cs(a4, a2, (uint64_t)&__nel, v26, v28);
          if (__nel)
          {
            v29 = (float *)__base;
            qsort(__base, __nel, 4uLL, (int (__cdecl *)(const void *, const void *))cmp_float_asc);
            v30 = __nel;
            if ((uint64_t)__nel < 2)
            {
              __nel = 1;
              break;
            }
            v31 = v29;
            v32 = 1;
            v33 = 1;
            do
            {
              v35 = v29;
              v36 = v29[1];
              ++v29;
              if (*v31 == v36)
              {
                v34 = v31;
              }
              else
              {
                v34 = v31 + 1;
                ++v32;
                if (v35 != v31)
                {
                  *v34 = *v29;
                  v30 = __nel;
                }
              }
              ++v33;
              v31 = v34;
            }
            while (v33 < v30);
            __nel = v32;
            if (v32 > 0)
              break;
          }
          v19 = -0.5;
          free(__base);
          if (++v20 == v14)
            goto LABEL_11;
        }
        v37 = 0;
        v38 = sqrtf(v24);
        do
        {
          v39 = vl_ps_grid_cell_add(a1);
          *(float *)v39 = v26;
          *(float *)(v39 + 4) = v27;
          *(float *)(v39 + 16) = v12;
          *(float *)(v39 + 20) = v12;
          *(float *)(v39 + 12) = v38;
          *(_DWORD *)(v39 + 24) = *(_DWORD *)(a5 + 20);
          v41 = __nel;
          v40 = __base;
          *(float *)(v39 + 8) = *((float *)__base + v37++) - *(float *)(a5 + 60);
        }
        while (v41 > v37);
        v19 = -0.5;
        free(v40);
        ++v20;
      }
      while (v20 != v14);
LABEL_11:
      if (++v16 == v14)
        goto LABEL_34;
    }
  }
  v18 = 0.0;
LABEL_34:
  if (*(int *)(a5 + 48) >= 1)
  {
    printf("Verbose : ");
    printf("vl_ps_grid_setup: Added %d cells of size %f from a %d x %d = grid.", *(_QWORD *)(a1 + 48), v12, v14, v14);
    putchar(10);
  }
  result = sqrtf(v18);
  *(float *)(a1 + 72) = result;
  return result;
}

uint64_t cmp_float_asc(float *a1, float *a2)
{
  unsigned int v2;

  if (*a1 >= *a2)
    v2 = 1;
  else
    v2 = -1;
  if (*a1 == *a2)
    return 0;
  else
    return v2;
}

void vl_ps_get_inliers(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  size_t v7;
  uint64_t v8;
  char *v9;
  __double2 v10;
  float v11;
  float32x2_t *v12;
  float32x2_t *v13;
  float64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  float64x2_t v20;
  float32x2_t *v21;
  float32x2_t *v22;
  float32x2_t *v23;
  float32x2_t *v24;
  float32x2_t v25;
  float64x2_t v26;
  float32x2_t v27;
  float64x2_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  float *v32;
  float *v33;
  float *v34;
  float v35;
  double v36;
  float v37;
  float v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v50;
  int v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;

  v7 = *(int *)(a2 + 4);
  v8 = *(unsigned int *)(a2 + 4);
  v9 = a4;
  if (!a4)
    v9 = (char *)malloc_type_calloc(v7, 4uLL, 0x100004052888210uLL);
  v10 = __sincos_stret((float)(*(float *)(a1 + 20) - *(float *)a2));
  v11 = *(float *)(a1 + 36) * 0.5;
  v12 = (float32x2_t *)malloc_type_malloc(4 * v7, 0x100004052888210uLL);
  v13 = (float32x2_t *)malloc_type_malloc(4 * v7, 0x100004052888210uLL);
  v52 = 0u;
  v53 = 0u;
  v54 = 0;
  v50 = *(_QWORD *)(a1 + 8);
  v51 = *(_DWORD *)(a1 + 16);
  *(_QWORD *)((char *)&v52 + 4) = *(_QWORD *)(a1 + 24);
  HIDWORD(v52) = *(_DWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a2 + 40);
  v16 = *(_QWORD *)(a2 + 48);
  if ((int)v8 >= 1)
  {
    v17 = -v10.__sinval;
    if (v7 < 8)
    {
      v18 = 0;
LABEL_14:
      v29 = v8 - v18;
      v30 = 4 * v18;
      v31 = (_DWORD *)v13 + v18;
      v32 = (float *)((char *)v12 + v30);
      v33 = (float *)(v16 + v30);
      v34 = (float *)(v15 + v30);
      do
      {
        v35 = *v34++;
        v36 = v35;
        v37 = *v33++;
        v38 = v17 * v37 + v10.__cosval * v36;
        v14.f64[0] = v10.__cosval * v37 + v10.__sinval * v36;
        *(float *)v14.f64 = v14.f64[0];
        *v32++ = v38;
        *v31++ = LODWORD(v14.f64[0]);
        --v29;
      }
      while (v29);
      goto LABEL_16;
    }
    v18 = 0;
    if ((unint64_t)((char *)v13 - (char *)v12) < 8)
      goto LABEL_14;
    if ((unint64_t)v12 - v15 < 8)
      goto LABEL_14;
    if ((unint64_t)v12 - v16 < 8)
      goto LABEL_14;
    if ((unint64_t)v13 - v15 < 8)
      goto LABEL_14;
    if ((unint64_t)v13 - v16 < 8)
      goto LABEL_14;
    v18 = v8 & 0xFFFFFFFE;
    v14 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v10.__cosval, 0);
    v19 = v18;
    v20 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v10.__sinval, 0);
    v21 = v13;
    v22 = v12;
    v23 = *(float32x2_t **)(a2 + 48);
    v24 = *(float32x2_t **)(a2 + 40);
    do
    {
      v25 = *v24++;
      v26 = vcvtq_f64_f32(v25);
      v27 = *v23++;
      v28 = vcvtq_f64_f32(v27);
      *v22++ = vcvt_f32_f64(vmlaq_f64(vmulq_n_f64(v28, v17), v26, v14));
      *v21++ = vcvt_f32_f64(vmlaq_f64(vmulq_n_f64(v28, v10.__cosval), v26, v20));
      v19 -= 2;
    }
    while (v19);
    if (v18 != v8)
      goto LABEL_14;
  }
LABEL_16:
  *(_QWORD *)(a2 + 40) = v12;
  *(_QWORD *)(a2 + 48) = v13;
  LODWORD(v14.f64[0]) = *(_DWORD *)(a3 + 136);
  vl_ps_filter_corr((float *)&v50, a2, a2, (uint64_t)v9, v11, v14.f64[0]);
  v39 = *(void **)(a2 + 40);
  v48 = *(void **)(a2 + 48);
  *(_QWORD *)(a2 + 40) = v15;
  *(_QWORD *)(a2 + 48) = v16;
  *(_QWORD *)(a1 + 88) = 0;
  if ((int)v8 >= 1)
  {
    v40 = 0;
    v41 = 0;
    do
    {
      if (*(_DWORD *)&v9[v40])
      {
        v42 = (unsigned __int16 *)(*(_QWORD *)(a2 + 8) + v40);
        v43 = *v42;
        v44 = v42[1];
        v45 = *(_QWORD *)(a1 + 104);
        if (v41 >= v45)
        {
          if (v45)
            v46 = 2 * v45;
          else
            v46 = 32;
          if (v46 <= v41)
            v47 = v41 + 1;
          else
            v47 = v46;
          if (v47)
          {
            *(_QWORD *)(a1 + 96) = malloc_type_realloc(*(void **)(a1 + 96), 8 * v47, 0xDCE4FB49uLL);
            v41 = *(_QWORD *)(a1 + 88);
          }
          *(_QWORD *)(a1 + 104) = v47;
        }
        *(_QWORD *)(a1 + 88) = v41 + 1;
        *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v41++) = __PAIR64__(v44, v43);
      }
      v40 += 4;
    }
    while (4 * v8 != v40);
  }
  free(v39);
  free(v48);
  if (!a4)
    free(v9);
}

uint64_t vl_ps_filter_corr(float *a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5, double a6)
{
  float32x2_t v6;
  uint64_t v11;
  int32x2_t v12;
  float32x2_t v13;
  __float2 v14;
  float v15;
  float v16;
  const float *v17;
  const float *v18;
  float32x4_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  float32x4_t v25;
  const float *v26;
  float32x4_t v27;
  float32x4_t v28;
  float v29;
  float32x4_t v30;
  int8x8_t v31;
  float32x4_t v37;
  int8x16_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int8x16_t v48;
  unsigned __int32 v49;
  float32x4_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  _BOOL4 v74;
  float v75;
  float v76;
  uint64_t v77;
  uint64_t v78;

  v6.f32[0] = a5;
  v11 = *(int *)(a2 + 4);
  v14 = __sincosf_stret(a5);
  *(float *)v12.i32 = v14.__cosval;
  v15 = a1[4] * 0.5;
  v16 = a1[6] * 0.5;
  v17 = a1;
  v19 = vld1q_dup_f32(v17);
  v18 = v17 + 1;
  if ((int)v11 <= 0)
    v20 = -(-(int)v11 & 3);
  else
    v20 = v11 & 3;
  v21 = (v11 - v20);
  if ((int)v21 < 1)
  {
    result = 0;
    LODWORD(v24) = 0;
    v29 = *(float *)&a6;
  }
  else
  {
    v22 = 0;
    result = 0;
    v24 = 0;
    v25 = vld1q_dup_f32(v18);
    v26 = a1 + 2;
    v27 = vld1q_dup_f32(v26);
    v28 = (float32x4_t)vdupq_lane_s32(v12, 0);
    v29 = *(float *)&a6;
    v30 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a6, 0);
    v13.i32[0] = 0;
    v31 = (int8x8_t)vdup_lane_s32(vcgt_f32(v6, v13), 0);
    __asm { FMOV            V19.4S, #1.0 }
    v37.i64[0] = 0x3F0000003F000000;
    v37.i64[1] = 0x3F0000003F000000;
    v38.i64[0] = 0x8000000080000000;
    v38.i64[1] = 0x8000000080000000;
    do
    {
      v39 = *(float32x4_t *)(*(_QWORD *)(a2 + 40) + v22);
      v40 = *(float32x4_t *)(*(_QWORD *)(a2 + 48) + v22);
      v41 = vsubq_f32(*(float32x4_t *)(*(_QWORD *)(a2 + 16) + v22), v19);
      v42 = vsubq_f32(*(float32x4_t *)(*(_QWORD *)(a2 + 24) + v22), v25);
      v43 = vaddq_f32(vmulq_f32(v41, v41), vmulq_f32(v42, v42));
      v44 = vdivq_f32(_Q19, vsqrtq_f32(v43));
      v45 = vmulq_n_f32(v44, v15);
      v46 = vsubq_f32(_Q19, vmulq_f32(vmulq_f32(v45, v45), v37));
      v47 = vmulq_f32(v44, vaddq_f32(vmulq_f32(v41, v39), vmulq_f32(v42, v40)));
      v48 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vand_s8(vorn_s8(vand_s8((int8x8_t)vmovn_s32((int32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vcltzq_f32(vaddq_f32(v28, v46)), (int8x16_t)vcltzq_f32(v46)), (int8x16_t)vcgtq_f32(v47, vsubq_f32(vmulq_n_f32(v46, v14.__cosval), vmulq_n_f32(v45, v14.__sinval))))), v31), v31), vand_s8((int8x8_t)vmovn_s32(vcgtq_f32(v43, v37)), (int8x8_t)vmovn_s32(vcgtq_f32(v30, vsubq_f32(vabdq_f32(vmulq_f32(
                                                                                    vsubq_f32(*(float32x4_t *)(*(_QWORD *)(a2 + 32) + v22), v27), v44), *(float32x4_t *)(*(_QWORD *)(a2 + 56)+ v22)), vmulq_n_f32(v44, v16))))))), 0x1FuLL));
      *(int8x16_t *)(a4 + v22) = v48;
      v49 = vqtbl1q_s8(v48, (int8x16_t)xmmword_210BCAC20).u32[0];
      if (v49)
      {
        v50 = vmulq_f32(vaddq_f32(v47, _Q19), (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vsubq_f32(vmulq_f32(v42, v39), vmulq_f32(v41, v40)), v38), (int8x16_t)_Q19));
        v51 = *(_QWORD *)(a3 + 72);
        v52 = *(_QWORD *)(a3 + 80);
        v53 = 4 * (int)result;
        *(_DWORD *)(v51 + v53) = v45.i32[0];
        *(_DWORD *)(v52 + v53) = v50.i32[0];
        if ((_BYTE)v49)
          v54 = result + 1;
        else
          v54 = result;
        v55 = 4 * (int)v54;
        *(_DWORD *)(v51 + v55) = v45.i32[1];
        *(_DWORD *)(v52 + v55) = v50.i32[1];
        if ((v49 & 0xFF00) != 0)
          ++v54;
        v56 = 4 * (int)v54;
        *(_DWORD *)(v51 + v56) = v45.i32[2];
        *(_DWORD *)(v52 + v56) = v50.i32[2];
        if ((v49 & 0xFF0000) != 0)
          ++v54;
        v57 = 4 * (int)v54;
        *(_DWORD *)(v51 + v57) = v45.i32[3];
        *(_DWORD *)(v52 + v57) = v50.i32[3];
        if ((v49 & 0xFF000000) != 0)
          result = v54 + 1;
        else
          result = v54;
      }
      v24 += 4;
      v22 += 16;
    }
    while (v24 < v21);
  }
  if ((int)v24 < (int)v11)
  {
    v58 = *(_QWORD *)(a2 + 16);
    v59 = *(_QWORD *)(a2 + 24);
    v60 = *(_QWORD *)(a2 + 32);
    v61 = *(_QWORD *)(a2 + 40);
    v62 = -v16;
    v24 = (int)v24;
    v63 = *(_QWORD *)(a2 + 48);
    v64 = *(_QWORD *)(a2 + 56);
    do
    {
      v65 = *(float *)(v58 + 4 * v24) - *a1;
      v66 = *(float *)(v59 + 4 * v24) - a1[1];
      v67 = (float)(v66 * v66) + (float)(v65 * v65);
      v68 = *(float *)(v61 + 4 * v24);
      v69 = 1.0 / sqrtf(v67);
      v70 = *(float *)(v63 + 4 * v24);
      v71 = v69 * (float)((float)(v66 * v70) + (float)(v65 * v68));
      v72 = v15 * v69;
      v73 = (float)((float)(v72 * v72) * -0.5) + 1.0;
      v74 = (float)(v14.__cosval + v73) < 0.0;
      if ((float)((float)(v73 * v14.__cosval) - (float)((float)(v15 * v69) * v14.__sinval)) < v71)
        v74 = 1;
      if (v73 < 0.0)
        v74 = 1;
      v75 = fabsf(-(float)(*(float *)(v64 + 4 * v24) - (float)((float)(*(float *)(v60 + 4 * v24) - a1[2]) * v69)))
          + (float)(v62 * v69);
      if (v6.f32[0] <= 0.0)
        v74 = 1;
      if (v75 >= v29)
        v74 = 0;
      if (v67 <= 0.5)
        v74 = 0;
      *(_DWORD *)(a4 + 4 * v24) = v74;
      if (v74)
      {
        if ((float)((float)(v66 * v68) - (float)(v65 * v70)) <= 0.0)
          v76 = -(float)(v71 + 1.0);
        else
          v76 = v71 + 1.0;
        v77 = 4 * (int)result;
        v78 = *(_QWORD *)(a3 + 80);
        *(float *)(*(_QWORD *)(a3 + 72) + v77) = v72;
        *(float *)(v78 + v77) = v76;
        result = (result + 1);
      }
      ++v24;
    }
    while (v11 != v24);
  }
  if ((int)result > (int)v11)
    __assert_rtn("vl_ps_filter_corr", "vl_pose_ps.c", 730, "n_matches <= n_corr");
  return result;
}

uint64_t vl_ps_vote_prio(uint64_t a1, uint64_t a2)
{
  float v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  int64x2_t *v15;
  int v16;
  _QWORD *v17;
  unsigned int v18;
  float v19;
  unint64_t v20;
  uint64_t v21;
  timespec *v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  double v27;
  double v28;
  float32x2_t *v29;
  __int32 v30;
  __int32 v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  int16x8_t v36;
  unsigned int v37;
  int64x2_t *v38;
  int8x16_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int8x16_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  __int32 v57;
  int v58;
  BOOL v59;
  int v60;
  int v61;
  double v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  float32x2_t v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  float32x2_t v74;
  mach_timebase_info *v75;
  unsigned int v76;
  unsigned int v77;
  float32x2_t *v78;
  float32x2_t v79;
  unint64_t v80;
  int v81;
  uint64_t v82;
  mach_timebase_info *v83;
  uint64_t v84;
  double v85;
  long double v86;
  __int32 v87;
  int v88;
  double v89;
  long double v90;
  float32x2_t v91;
  __int32 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  __int128 v98;
  int v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  BOOL v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t i;
  uint64_t v123;
  uint64_t v124;
  _OWORD *v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  mach_timebase_info v147;
  float v148;
  float v149;
  float v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  float v156;
  float v157;
  uint64_t v158;
  float v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  mach_timebase_info v165;
  mach_timebase_info v166;
  mach_timebase_info v167;
  float v168;
  float v169;
  float v170;
  uint64_t v171;
  uint64_t v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  _OWORD *v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  unint64_t v195;
  uint64_t v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 *v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 *v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  _OWORD *v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  _OWORD *v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  uint64_t v267;
  char *v268;
  uint64_t v270;
  timespec *v271;
  timespec *v272;
  timespec *v273;
  timespec *v274;
  uint64_t v275;
  int64x2_t *v276;
  void **v277;
  timespec *v278;
  timespec *v279;
  timespec *v280;
  timespec *v281;
  timespec *v282;
  timespec *v283;
  float v284;
  uint64_t v285;
  float v286;
  timespec *v287;
  timespec *v288;
  double v289;
  uint64_t v290;
  timespec *v291;
  uint64_t v292;
  void *v293;
  timespec *v294;
  uint64_t v295;
  int v296;
  float v297;
  int v298;
  float32x2_t v299;
  __int128 v300;
  float32x2_t v301;
  uint64_t v302;
  __int32 v303;
  int v304;
  double v305;
  mach_timebase_info info[2];
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  int16x8_t v338;
  uint64_t v339;
  unsigned __int128 v340;
  unsigned __int128 v341;
  unsigned __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  _DWORD v349[5];
  __int128 v350;
  __int128 v351;
  __int128 v352;
  int v353;
  uint64_t v354;

  v3 = MEMORY[0x24BDAC7A8](a1, a2);
  v5 = v4;
  v7 = v6;
  v290 = v8;
  v10 = v9;
  v12 = v11;
  v285 = v3;
  v354 = *MEMORY[0x24BDAC8D0];
  v13 = *(int *)(v9 + 4);
  v14 = *(float *)(*(_QWORD *)(v11 + 144) + 252);
  v15 = (int64x2_t *)malloc_type_malloc(0x402uLL, 0x100004040BEE09CuLL);
  v293 = malloc_type_malloc(4 * v13, 0x100004052888210uLL);
  if (4 * *(_DWORD *)(v12 + 200) <= 4)
    v16 = 4;
  else
    v16 = 4 * *(_DWORD *)(v12 + 200);
  v17 = malloc_type_calloc(1uLL, 0x30uLL, 0x1030040F6295BD8uLL);
  v18 = v16 | 1;
  *v17 = malloc_type_malloc(24 * v18, 0x1080040A085CBA5uLL);
  v17[4] = 0;
  *((_DWORD *)v17 + 10) = v18;
  *((_DWORD *)v17 + 11) = 0;
  v340 = 0u;
  v341 = 0u;
  v342 = 0u;
  v343 = 0u;
  v344 = 0u;
  v345 = 0u;
  v346 = 0u;
  v347 = 0u;
  v348 = 0u;
  v350 = unk_210BCAC80;
  v351 = xmmword_210BCAC90;
  v352 = unk_210BCACA0;
  v19 = *(float *)(v5 + 12);
  v349[0] = 0;
  *(_OWORD *)&v349[1] = *(_OWORD *)"timer";
  v353 = 1;
  *((_QWORD *)&v347 + 1) = -(uint64_t)mach_absolute_time();
  if (*(_DWORD *)(v5 + 124) * *(_DWORD *)(v5 + 124) * *(_DWORD *)(v5 + 128) > 64)
    __assert_rtn("vl_ps_vote_prio", "vl_pose_ps.c", 946, "SQR(par->cell_split_factor_xy) * par->cell_split_factor_z <= 64 && \"Too many children in cell split\"");
  if (*(uint64_t *)(v12 + 200) >= 1)
  {
    v20 = 0;
    do
    {
      pqueue_push((uint64_t)v17, *(_QWORD *)(*(_QWORD *)(v12 + 184) + 8 * (v20 / *(_QWORD *)(v12 + 208))) + 52 * (v20 % *(_QWORD *)(v12 + 208)), 3.40282347e38);
      ++v20;
    }
    while (*(_QWORD *)(v12 + 200) > (int64_t)v20);
  }
  v295 = v12;
  v276 = v15;
  v277 = (void **)v17;
  if (*((int *)v17 + 9) >= 1)
  {
    v21 = v12 + 152;
    v289 = v19;
    v271 = (timespec *)(v7 + 664);
    v272 = (timespec *)(v7 + 680);
    v282 = (timespec *)(v7 + 16);
    v283 = (timespec *)(v7 + 32);
    v22 = (timespec *)(v7 + 216);
    v280 = (timespec *)(v7 + 232);
    v281 = (timespec *)(v7 + 248);
    v294 = (timespec *)(v7 + 432);
    v278 = (timespec *)(v7 + 448);
    v279 = (timespec *)(v7 + 464);
    v287 = (timespec *)(v7 + 648);
    v288 = (timespec *)(v7 + 864);
    v23 = 0.0;
    v273 = (timespec *)(v7 + 880);
    v274 = (timespec *)(v7 + 896);
    v284 = v14;
    v286 = v19;
    v291 = (timespec *)(v7 + 216);
    v292 = v10;
    v275 = v7;
    while (1)
    {
      v305 = 0.0;
      if (v19 <= 0.0)
        goto LABEL_19;
      vl_timer_stop((uint64_t)&v340);
      if (v353)
      {
        v24 = *((_QWORD *)&v347 + 1);
        info[0] = 0;
        mach_timebase_info(info);
        v25 = v24 * info[0].numer;
        v22 = v291;
        LODWORD(v26) = info[0].denom;
        v27 = (double)v25 / ((double)v26 * 1000000.0);
        v28 = 0.001;
      }
      else
      {
        v27 = (double)(uint64_t)v347;
        v28 = 0.000000001;
      }
      if (v27 * v28 * 1000.0 > v289)
        goto LABEL_100;
      if (v353)
        break;
      clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)&v342);
      clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)&v341);
      clock_gettime(_CLOCK_MONOTONIC, (timespec *)&v340);
      if (*((_DWORD *)v17 + 9))
      {
LABEL_20:
        v29 = (float32x2_t *)pqueue_delete((void **)v17, 1, &v305);
        if (v305 <= v23)
          goto LABEL_100;
        goto LABEL_24;
      }
LABEL_23:
      v29 = 0;
      if (v305 <= v23)
        goto LABEL_100;
LABEL_24:
      v30 = v29[4].i32[0];
      v31 = *(_DWORD *)(v5 + 120);
      if (v30 == v31 && v29[5].i16[2])
      {
        v338 = 0uLL;
        v339 = 0;
        if (*(_DWORD *)(v7 + 860))
        {
          *(_QWORD *)(v7 + 768) -= mach_absolute_time();
        }
        else
        {
          clock_gettime(_CLOCK_THREAD_CPUTIME_ID, v272);
          clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, v271);
          clock_gettime(_CLOCK_MONOTONIC, v287);
        }
        LOWORD(v14) = v29[5].i16[2];
        LOWORD(v2) = v29[6].i16[0];
        v301 = *v29;
        v303 = v29[1].i32[0];
        v91 = v29[2];
        v92 = v29[3].i32[0];
        v93 = v338.i64[0];
        if (v338.i64[0] >= v339)
        {
          if (v339)
            v94 = 2 * v339;
          else
            v94 = 1;
          if (v94 <= v338.i64[0])
            v95 = v338.i64[0] + 1;
          else
            v95 = v94;
          if (v95)
          {
            v338.i64[1] = (uint64_t)malloc_type_realloc((void *)v338.i64[1], 160 * v95, 0xEEB1B0EFuLL);
            v93 = v338.i64[0];
          }
          v339 = v95;
          v22 = v291;
        }
        v338.i64[0] = v93 + 1;
        v96 = v338.i64[1] + 160 * v93;
        *(float *)v96 = (float)LODWORD(v14);
        *(_DWORD *)(v96 + 4) = 0;
        *(float32x2_t *)(v96 + 8) = v301;
        *(_DWORD *)(v96 + 16) = v303;
        *(float *)(v96 + 20) = (float)((float)LODWORD(v2) + 0.5) * 0.012272;
        *(float32x2_t *)(v96 + 24) = v91;
        *(_DWORD *)(v96 + 32) = v92;
        *(_DWORD *)(v96 + 36) = 1011421147;
        *(_OWORD *)(v96 + 40) = 0u;
        *(_OWORD *)(v96 + 56) = 0u;
        *(_OWORD *)(v96 + 72) = 0u;
        *(_OWORD *)(v96 + 88) = 0u;
        *(_OWORD *)(v96 + 104) = 0u;
        *(_OWORD *)(v96 + 120) = 0u;
        *(_OWORD *)(v96 + 136) = 0u;
        *(_QWORD *)(v96 + 152) = 0;
        vl_ps_refine(v285, v295);
        v97 = *(_DWORD *)v338.i64[1];
        v2 = *(float *)(v338.i64[1] + 4);
        v302 = *(_QWORD *)(v338.i64[1] + 8);
        v304 = *(_DWORD *)(v338.i64[1] + 16);
        v98 = *(_OWORD *)(v338.i64[1] + 20);
        v99 = *(_DWORD *)(v338.i64[1] + 36);
        v100 = *(_OWORD *)(v338.i64[1] + 120);
        v310 = *(_OWORD *)(v338.i64[1] + 104);
        v311 = v100;
        v312 = *(_OWORD *)(v338.i64[1] + 136);
        *(_QWORD *)&v313 = *(_QWORD *)(v338.i64[1] + 152);
        v101 = *(_OWORD *)(v338.i64[1] + 56);
        *(_OWORD *)&info[0].numer = *(_OWORD *)(v338.i64[1] + 40);
        v307 = v101;
        v102 = *(_OWORD *)(v338.i64[1] + 88);
        v308 = *(_OWORD *)(v338.i64[1] + 72);
        v309 = v102;
        if (v23 <= (float)(v2 * 0.03125))
          v23 = (float)(v2 * 0.03125);
        v103 = (_QWORD *)v290;
        v104 = *(_QWORD *)v290;
        v105 = *(_QWORD *)(v290 + 16);
        if (*(_QWORD *)v290 >= v105)
        {
          if (v105)
            v106 = 2 * v105;
          else
            v106 = 1;
          if (v106 <= v104)
            v107 = v104 + 1;
          else
            v107 = v106;
          v14 = v284;
          if (v107)
          {
            v300 = v98;
            v108 = malloc_type_realloc(*(void **)(v290 + 8), 160 * v107, 0x6984EA3CuLL);
            v98 = v300;
            v103 = (_QWORD *)v290;
            *(_QWORD *)(v290 + 8) = v108;
            v104 = *(_QWORD *)v290;
          }
          v103[2] = v107;
          v22 = v291;
        }
        else
        {
          v14 = v284;
        }
        *v103 = v104 + 1;
        v109 = v103[1] + 160 * v104;
        *(_DWORD *)v109 = v97;
        *(float *)(v109 + 4) = v2;
        *(_QWORD *)(v109 + 8) = v302;
        *(_DWORD *)(v109 + 16) = v304;
        *(_OWORD *)(v109 + 20) = v98;
        *(_DWORD *)(v109 + 36) = v99;
        *(_OWORD *)(v109 + 104) = v310;
        *(_OWORD *)(v109 + 120) = v311;
        *(_OWORD *)(v109 + 136) = v312;
        *(_QWORD *)(v109 + 152) = v313;
        *(_OWORD *)(v109 + 40) = *(_OWORD *)&info[0].numer;
        *(_OWORD *)(v109 + 56) = v307;
        *(_OWORD *)(v109 + 72) = v308;
        *(_OWORD *)(v109 + 88) = v309;
        free((void *)v338.i64[1]);
        v29[5].i32[0] = *(_DWORD *)(v295 + 228);
        v29[3].i32[1] = -1;
        *(_DWORD *)(v295 + 228) = v29[4].i32[1];
        vl_timer_stop((uint64_t)v287);
        v19 = v286;
        goto LABEL_11;
      }
      if (v30 > v31)
        __assert_rtn("vl_ps_vote_prio", "vl_pose_ps.c", 998, "cell->n_splits <= par->n_split_steps");
      if (*(_DWORD *)(v7 + 212))
      {
        *(_QWORD *)(v7 + 120) -= mach_absolute_time();
      }
      else
      {
        clock_gettime(_CLOCK_THREAD_CPUTIME_ID, v283);
        clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, v282);
        clock_gettime(_CLOCK_MONOTONIC, (timespec *)v7);
      }
      LODWORD(v32) = *(_DWORD *)(v5 + 136);
      v33 = vl_ps_filter_corr((float *)v29, v10, v10, (uint64_t)v293, v14, v32);
      vl_timer_stop(v7);
      if (*(_DWORD *)(v7 + 428))
      {
        *(_QWORD *)(v7 + 336) -= mach_absolute_time();
      }
      else
      {
        clock_gettime(_CLOCK_THREAD_CPUTIME_ID, v281);
        clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, v280);
        clock_gettime(_CLOCK_MONOTONIC, v22);
      }
      bzero(v15, 0x402uLL);
      v34 = v33;
      v10 = v292;
      vl_ps_cell_vote(v34, v292, (uint64_t)v15, v35);
      vl_timer_stop((uint64_t)v22);
      if (*(_DWORD *)(v7 + 644))
      {
        *(_QWORD *)(v7 + 552) -= mach_absolute_time();
      }
      else
      {
        clock_gettime(_CLOCK_THREAD_CPUTIME_ID, v279);
        clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, v278);
        clock_gettime(_CLOCK_MONOTONIC, v294);
      }
      v15->i16[0] = v15[64].i16[0];
      v36 = 0uLL;
      v37 = -8;
      v38 = v15;
      v39 = 0uLL;
      v40 = (int16x8_t)xmmword_210BCAC30;
      v41 = 0uLL;
      v42.i64[0] = 0x8000800080008;
      v42.i64[1] = 0x8000800080008;
      v43.i64[0] = 0xFFFF0000FFFF0000;
      v43.i64[1] = 0xFFFF0000FFFF0000;
      v44.i64[0] = 0xFFFFFFFF00000000;
      v44.i64[1] = 0xFFFFFFFF00000000;
      v45.i64[0] = 0xFFFF0000FFFFLL;
      v45.i64[1] = 0xFFFF0000FFFFLL;
      do
      {
        v46 = *(int16x8_t *)v38;
        if (vorrq_s8((int8x16_t)vdupq_laneq_s64(*v38, 1), *(int8x16_t *)v38).u64[0])
        {
          v47 = vaddq_s16(v46, (int16x8_t)vqtbl1q_s8((int8x16_t)v46, (int8x16_t)xmmword_210BCAC40));
          *(int32x2_t *)v48.i8 = vrev64_s32(*(int32x2_t *)v47.i8);
          v48.u64[1] = (unint64_t)vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL));
          v49 = vaddq_s16(v47, v48);
          v50 = (int16x8_t)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL);
          v51 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)v46, v45), v41), (int16x8_t)vandq_s8((int8x16_t)v47, v43)), (int16x8_t)vandq_s8((int8x16_t)v48, v44)), (int16x8_t)vandq_s8((int8x16_t)v50, (int8x16_t)xmmword_210BCAC50));
          v41 = vaddq_s16(vaddq_s16(v49, v41), v50);
          v52 = (int8x16_t)vcgtq_s16(v51, v36);
          v36 = vmaxq_s16(v51, v36);
          v39 = vbslq_s8(v52, (int8x16_t)v40, v39);
        }
        v40 = vaddq_s16(v40, v42);
        ++v38;
        v37 += 8;
      }
      while (v37 < 0x1F8);
      *(int8x16_t *)&info[0].numer = v39;
      v338 = v36;
      v53 = 2;
      if (*(unsigned __int16 *)((unint64_t)&v338 | (2 * (v36.u16[1] > v36.u16[0]))) >= v36.u16[2])
        v53 = v36.u16[1] > v36.u16[0];
      if (*(unsigned __int16 *)((unint64_t)&v338 | (2 * v53)) < v36.u16[3])
        v53 = 3;
      if (*(unsigned __int16 *)((unint64_t)&v338 | (2 * v53)) < v36.u16[4])
        v53 = 4;
      if (*(unsigned __int16 *)((unint64_t)&v338 | (2 * v53)) < v36.u16[5])
        v53 = 5;
      if (*(unsigned __int16 *)((unint64_t)&v338 | (2 * v53)) < v36.u16[6])
        v53 = 6;
      if (v338.u16[v53] < v36.u16[7])
        v53 = 7;
      v54 = v53;
      v29[6].i16[0] = *(_WORD *)((char *)&info[0].numer + v54 * 2);
      v29[5].i16[2] = v338.i16[v54];
      vl_timer_stop((uint64_t)v294);
      LOWORD(v55) = v29[5].i16[2];
      if (pow(*(float *)(v5 + 4), (double)(*(_DWORD *)(v5 + 120) - v29[4].i32[0])) * (double)v55 * *(float *)(v5 + 8) > v23)
      {
        if (*(_DWORD *)(v7 + 1076))
        {
          *(_QWORD *)(v7 + 984) -= mach_absolute_time();
          v57 = v29[4].i32[0];
          v58 = *(_DWORD *)(v5 + 120);
          v59 = __OFSUB__(v58, v57);
          v60 = v58 - v57;
          if (!((v60 < 0) ^ v59 | (v60 == 0)))
            goto LABEL_57;
LABEL_73:
          LOWORD(v56) = v29[5].i16[2];
          v89 = (double)v56;
          v90 = pow(*(float *)(v5 + 4), (double)v60);
          pqueue_push((uint64_t)v17, (uint64_t)v29, v90 * v89 * *(float *)(v5 + 8));
        }
        else
        {
          clock_gettime(_CLOCK_THREAD_CPUTIME_ID, v274);
          clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, v273);
          clock_gettime(_CLOCK_MONOTONIC, v288);
          v87 = v29[4].i32[0];
          v88 = *(_DWORD *)(v5 + 120);
          v59 = __OFSUB__(v88, v87);
          v60 = v88 - v87;
          if ((v60 < 0) ^ v59 | (v60 == 0))
            goto LABEL_73;
LABEL_57:
          v336 = 0u;
          v337 = 0u;
          v334 = 0u;
          v335 = 0u;
          v332 = 0u;
          v333 = 0u;
          v330 = 0u;
          v331 = 0u;
          v328 = 0u;
          v329 = 0u;
          v326 = 0u;
          v327 = 0u;
          v324 = 0u;
          v325 = 0u;
          v322 = 0u;
          v323 = 0u;
          v320 = 0u;
          v321 = 0u;
          v318 = 0u;
          v319 = 0u;
          v316 = 0u;
          v317 = 0u;
          v314 = 0u;
          v315 = 0u;
          v313 = 0u;
          v311 = 0u;
          v312 = 0u;
          v309 = 0u;
          v310 = 0u;
          v307 = 0u;
          v308 = 0u;
          *(_OWORD *)&info[0].numer = 0u;
          v61 = *(_DWORD *)(v5 + 124);
          v63 = *(int *)(v5 + 128);
          v62 = (double)v63;
          *(float *)&v63 = (float)v61;
          v64 = ceilf((float)(v29[3].f32[0] / v29[2].f32[0]) * (float)v61);
          if (v62 >= v64)
            v62 = v64;
          v298 = *(_DWORD *)(v5 + 124);
          v65 = v5;
          if (v61 >= 1)
          {
            v66 = (int)v62;
            if ((int)v62 >= 1)
            {
              v270 = v5;
              v67 = 0;
              v68 = 0;
              v2 = (float)v66;
              v69 = (float32x2_t)vdup_lane_s32((int32x2_t)v63, 0);
              do
              {
                v70 = 0;
                v296 = v68;
                v297 = (float)v68 + 0.5;
                do
                {
                  v71 = 0;
                  v72 = v67;
                  v73 = v67;
                  v74.f32[0] = v297;
                  v74.f32[1] = (float)v70 + 0.5;
                  v299 = v74;
                  v75 = &info[v67];
                  v76 = v67 + 1;
                  do
                  {
                    v77 = v76;
                    v78 = (float32x2_t *)vl_ps_grid_cell_add(v21);
                    *(float *)&v80 = v29[3].f32[0] / v2;
                    v78[3].i32[0] = v80;
                    v79 = vdiv_f32(v29[2], v69);
                    v78[2] = v79;
                    *v78 = vmla_f32(vmla_f32(*v29, (float32x2_t)0xBF000000BF000000, v29[2]), v79, v299);
                    *(float *)&v80 = (float)(v29[1].f32[0] + (float)(v29[3].f32[0] * -0.5))
                                   + (float)((float)((float)(int)v71 + 0.5) * *(float *)&v80);
                    v78[1].i32[0] = v80;
                    v78[1].i32[1] = -1082130432;
                    v78[4].i32[0] = v29[4].i32[0] + 1;
                    v78[5].i16[3] = v29[5].i16[2];
                    v75[v71++] = (mach_timebase_info)v78;
                    v76 = v77 + 1;
                  }
                  while (v66 != (_DWORD)v71);
                  ++v70;
                  v67 = v73 + v71;
                }
                while (v70 != v298);
                v68 = v296 + 1;
                v67 = v71 + v72;
              }
              while (v296 + 1 != v298);
              v81 = v72 + v71;
              v15 = v276;
              v17 = v277;
              v65 = v270;
              v19 = v286;
              if (v81 >= 1)
              {
                v82 = v77;
                v83 = info;
                do
                {
                  v84 = (uint64_t)*v83++;
                  LOWORD(v80) = v29[5].i16[2];
                  v85 = (double)v80;
                  v86 = pow(*(float *)(v270 + 4), (double)(*(_DWORD *)(v270 + 120) - v29[4].i32[0]));
                  pqueue_push((uint64_t)v277, v84, v86 * v85 * *(float *)(v270 + 8));
                  --v82;
                }
                while (v82);
              }
            }
          }
          v29[5].i32[0] = *(_DWORD *)(v295 + 228);
          v29[3].i32[1] = -1;
          *(_DWORD *)(v295 + 228) = v29[4].i32[1];
          v5 = v65;
          v7 = v275;
          v22 = v291;
          v10 = v292;
        }
        vl_timer_stop((uint64_t)v288);
        goto LABEL_11;
      }
      v29[5].i32[0] = *(_DWORD *)(v295 + 228);
      v29[3].i32[1] = -1;
      *(_DWORD *)(v295 + 228) = v29[4].i32[1];
LABEL_11:
      if (*((int *)v17 + 9) <= 0)
        goto LABEL_100;
    }
    *((_QWORD *)&v347 + 1) -= mach_absolute_time();
LABEL_19:
    if (*((_DWORD *)v17 + 9))
      goto LABEL_20;
    goto LABEL_23;
  }
LABEL_100:
  v110 = (char *)malloc_type_malloc(0x200uLL, 0x725B3E76uLL);
  v111 = v290;
  v112 = *(_QWORD *)v290;
  if (*(_QWORD *)v290)
  {
    v113 = 0;
    v114 = 1;
    v115 = *(_QWORD *)(v290 + 8);
    v116 = 32;
    v117 = 0uLL;
    while (1)
    {
      v118 = v113;
      while (1)
      {
        if (!v114)
        {
          --v118;
          v119 = &v110[16 * v118];
          v112 = *((_QWORD *)v119 + 1);
          v115 = *(_QWORD *)(v111 + 8) + 160 * *(_QWORD *)v119;
        }
        if ((uint64_t)v112 > 15)
          break;
        if ((uint64_t)v112 > 1)
        {
          v120 = v115 + 160;
          v121 = 2;
          for (i = 1; i != v112; ++i)
          {
            v123 = v120;
            v124 = v121;
            do
            {
              if ((float)(*(float *)(v115 + 160 * (v124 - 2) + 4) - *(float *)(v123 + 4)) >= 0.0)
                break;
              v125 = (_OWORD *)(v115 + 160 * (v124 - 2));
              v314 = v117;
              v315 = v117;
              v313 = v117;
              v311 = v117;
              v312 = v117;
              v309 = v117;
              v310 = v117;
              v307 = v117;
              v308 = v117;
              *(_OWORD *)&info[0].numer = v117;
              v126 = *(_OWORD *)(v123 + 16);
              *(_OWORD *)&info[0].numer = *(_OWORD *)v123;
              v307 = v126;
              v127 = *(_OWORD *)(v123 + 32);
              v128 = *(_OWORD *)(v123 + 48);
              v129 = *(_OWORD *)(v123 + 80);
              v310 = *(_OWORD *)(v123 + 64);
              v311 = v129;
              v308 = v127;
              v309 = v128;
              v130 = *(_OWORD *)(v123 + 96);
              v131 = *(_OWORD *)(v123 + 112);
              v132 = *(_OWORD *)(v123 + 144);
              v314 = *(_OWORD *)(v123 + 128);
              v315 = v132;
              v313 = v131;
              v312 = v130;
              v133 = v125[1];
              *(_OWORD *)v123 = *v125;
              *(_OWORD *)(v123 + 16) = v133;
              v134 = v125[2];
              v135 = v125[3];
              v136 = v125[5];
              *(_OWORD *)(v123 + 64) = v125[4];
              *(_OWORD *)(v123 + 80) = v136;
              *(_OWORD *)(v123 + 32) = v134;
              *(_OWORD *)(v123 + 48) = v135;
              v137 = v125[6];
              v138 = v125[7];
              v139 = v125[9];
              *(_OWORD *)(v123 + 128) = v125[8];
              *(_OWORD *)(v123 + 144) = v139;
              *(_OWORD *)(v123 + 96) = v137;
              *(_OWORD *)(v123 + 112) = v138;
              v140 = v307;
              *v125 = *(_OWORD *)&info[0].numer;
              v125[1] = v140;
              v141 = v308;
              v142 = v309;
              v143 = v311;
              v125[4] = v310;
              v125[5] = v143;
              v125[2] = v141;
              v125[3] = v142;
              v144 = v312;
              v145 = v313;
              v146 = v315;
              v125[8] = v314;
              v125[9] = v146;
              v125[6] = v144;
              v125[7] = v145;
              --v124;
              v123 -= 160;
            }
            while (v124 > 1);
            ++v121;
            v120 += 160;
          }
        }
        v114 = 0;
        v112 = 0;
        if (v118 < 1)
          goto LABEL_169;
      }
      if (v112 > 0x27)
        break;
      v147 = (mach_timebase_info)(v112 >> 1);
      v148 = *(float *)(v115 + 160 * (v112 >> 1) + 4);
      v149 = *(float *)(v115 + 4);
      v150 = *(float *)(v115 + 160 * (v112 - 1) + 4);
      if ((float)(v148 - v149) >= 0.0)
      {
        if ((float)(v150 - v149) >= 0.0)
        {
          if ((float)(v150 - v148) < 0.0)
            v147 = (mach_timebase_info)(v112 - 1);
        }
        else
        {
          v147 = 0;
        }
      }
      else if ((float)(v150 - v148) >= 0.0)
      {
        if ((float)(v150 - v149) >= 0.0)
          v147 = 0;
        else
          v147 = (mach_timebase_info)(v112 - 1);
      }
LABEL_152:
      v171 = 0;
      v172 = 0;
      v314 = v117;
      v315 = v117;
      v313 = v117;
      v311 = v117;
      v312 = v117;
      v309 = v117;
      v310 = v117;
      v307 = v117;
      v308 = v117;
      *(_OWORD *)&info[0].numer = v117;
      v173 = *(_OWORD *)(v115 + 16);
      *(_OWORD *)&info[0].numer = *(_OWORD *)v115;
      v307 = v173;
      v174 = *(_OWORD *)(v115 + 32);
      v175 = *(_OWORD *)(v115 + 48);
      v176 = *(_OWORD *)(v115 + 80);
      v310 = *(_OWORD *)(v115 + 64);
      v311 = v176;
      v308 = v174;
      v309 = v175;
      v177 = *(_OWORD *)(v115 + 96);
      v178 = *(_OWORD *)(v115 + 112);
      v179 = *(_OWORD *)(v115 + 144);
      v314 = *(_OWORD *)(v115 + 128);
      v315 = v179;
      v313 = v178;
      v312 = v177;
      v180 = (_OWORD *)(v115 + 160 * *(_QWORD *)&v147);
      v181 = v180[1];
      *(_OWORD *)v115 = *v180;
      *(_OWORD *)(v115 + 16) = v181;
      v182 = v180[2];
      v183 = v180[3];
      v184 = v180[5];
      *(_OWORD *)(v115 + 64) = v180[4];
      *(_OWORD *)(v115 + 80) = v184;
      *(_OWORD *)(v115 + 32) = v182;
      *(_OWORD *)(v115 + 48) = v183;
      v185 = v180[6];
      v186 = v180[7];
      v187 = v180[9];
      *(_OWORD *)(v115 + 128) = v180[8];
      *(_OWORD *)(v115 + 144) = v187;
      *(_OWORD *)(v115 + 96) = v185;
      *(_OWORD *)(v115 + 112) = v186;
      v188 = v307;
      *v180 = *(_OWORD *)&info[0].numer;
      v180[1] = v188;
      v189 = v308;
      v190 = v309;
      v191 = v311;
      v180[4] = v310;
      v180[5] = v191;
      v180[2] = v189;
      v180[3] = v190;
      v192 = v312;
      v193 = v313;
      v194 = v315;
      v180[8] = v314;
      v180[9] = v194;
      v180[6] = v192;
      v180[7] = v193;
      v195 = v112 - 1;
      v196 = v115 + 164;
      do
      {
        if ((float)(*(float *)(v115 + 4) - *(float *)v196) <= 0.0)
        {
          ++v172;
          v314 = v117;
          v315 = v117;
          v313 = v117;
          v311 = v117;
          v312 = v117;
          v309 = v117;
          v310 = v117;
          v307 = v117;
          v308 = v117;
          *(_OWORD *)&info[0].numer = v117;
          v197 = *(_OWORD *)(v196 + 12);
          *(_OWORD *)&info[0].numer = *(_OWORD *)(v196 - 4);
          v307 = v197;
          v198 = *(_OWORD *)(v196 + 28);
          v199 = *(_OWORD *)(v196 + 44);
          v200 = *(_OWORD *)(v196 + 76);
          v310 = *(_OWORD *)(v196 + 60);
          v311 = v200;
          v308 = v198;
          v309 = v199;
          v201 = *(_OWORD *)(v196 + 92);
          v202 = *(_OWORD *)(v196 + 108);
          v203 = *(_OWORD *)(v196 + 140);
          v314 = *(_OWORD *)(v196 + 124);
          v315 = v203;
          v313 = v202;
          v312 = v201;
          v204 = (__int128 *)(v115 + 160 * v172);
          v205 = *v204;
          *(_OWORD *)(v196 + 12) = v204[1];
          *(_OWORD *)(v196 - 4) = v205;
          v206 = v204[2];
          v207 = v204[3];
          v208 = v204[4];
          *(_OWORD *)(v196 + 76) = v204[5];
          *(_OWORD *)(v196 + 60) = v208;
          *(_OWORD *)(v196 + 44) = v207;
          *(_OWORD *)(v196 + 28) = v206;
          v209 = v204[6];
          v210 = v204[7];
          v211 = v204[8];
          *(_OWORD *)(v196 + 140) = v204[9];
          *(_OWORD *)(v196 + 124) = v211;
          *(_OWORD *)(v196 + 108) = v210;
          *(_OWORD *)(v196 + 92) = v209;
          v212 = v307;
          *v204 = *(_OWORD *)&info[0].numer;
          v204[1] = v212;
          v213 = v308;
          v214 = v309;
          v215 = v311;
          v204[4] = v310;
          v204[5] = v215;
          v204[2] = v213;
          v204[3] = v214;
          v216 = v312;
          v217 = v313;
          v218 = v315;
          v204[8] = v314;
          v204[9] = v218;
          v204[6] = v216;
          v204[7] = v217;
          if ((float)(*(float *)(v115 + 4) - *(float *)v196) == 0.0)
          {
            ++v171;
            v314 = v117;
            v315 = v117;
            v313 = v117;
            v311 = v117;
            v312 = v117;
            v309 = v117;
            v310 = v117;
            v307 = v117;
            v308 = v117;
            *(_OWORD *)&info[0].numer = v117;
            v219 = v204[1];
            *(_OWORD *)&info[0].numer = *v204;
            v307 = v219;
            v220 = v204[2];
            v221 = v204[3];
            v222 = v204[5];
            v310 = v204[4];
            v311 = v222;
            v308 = v220;
            v309 = v221;
            v223 = v204[6];
            v224 = v204[7];
            v225 = v204[9];
            v314 = v204[8];
            v315 = v225;
            v313 = v224;
            v312 = v223;
            v226 = (__int128 *)(v115 + 160 * v171);
            v227 = v226[1];
            *v204 = *v226;
            v204[1] = v227;
            v228 = v226[2];
            v229 = v226[3];
            v230 = v226[5];
            v204[4] = v226[4];
            v204[5] = v230;
            v204[2] = v228;
            v204[3] = v229;
            v231 = v226[6];
            v232 = v226[7];
            v233 = v226[9];
            v204[8] = v226[8];
            v204[9] = v233;
            v204[6] = v231;
            v204[7] = v232;
            v234 = v307;
            *v226 = *(_OWORD *)&info[0].numer;
            v226[1] = v234;
            v235 = v308;
            v236 = v309;
            v237 = v311;
            v226[4] = v310;
            v226[5] = v237;
            v226[2] = v235;
            v226[3] = v236;
            v238 = v312;
            v239 = v313;
            v240 = v315;
            v226[8] = v314;
            v226[9] = v240;
            v226[6] = v238;
            v226[7] = v239;
          }
        }
        v196 += 160;
        --v195;
      }
      while (v195);
      v241 = v171 + 1;
      v242 = 160 * v171;
      v243 = -160 * v171 + 160 * v172;
      do
      {
        v314 = v117;
        v315 = v117;
        v313 = v117;
        v311 = v117;
        v312 = v117;
        v309 = v117;
        v310 = v117;
        v307 = v117;
        v308 = v117;
        *(_OWORD *)&info[0].numer = v117;
        v244 = (_OWORD *)(v115 + v243);
        v245 = *(_OWORD *)(v115 + v243 + 16);
        *(_OWORD *)&info[0].numer = *(_OWORD *)(v115 + v243);
        v307 = v245;
        v246 = *(_OWORD *)(v115 + v243 + 32);
        v247 = *(_OWORD *)(v115 + v243 + 48);
        v248 = *(_OWORD *)(v115 + v243 + 80);
        v310 = *(_OWORD *)(v115 + v243 + 64);
        v311 = v248;
        v308 = v246;
        v309 = v247;
        v249 = *(_OWORD *)(v115 + v243 + 96);
        v250 = *(_OWORD *)(v115 + v243 + 112);
        v251 = *(_OWORD *)(v115 + v243 + 144);
        v314 = *(_OWORD *)(v115 + v243 + 128);
        v315 = v251;
        v313 = v250;
        v312 = v249;
        v252 = (_OWORD *)(v115 + v242);
        v253 = *(_OWORD *)(v115 + v242 + 16);
        *v244 = *(_OWORD *)(v115 + v242);
        v244[1] = v253;
        v254 = *(_OWORD *)(v115 + v242 + 32);
        v255 = *(_OWORD *)(v115 + v242 + 48);
        v256 = *(_OWORD *)(v115 + v242 + 80);
        v244[4] = *(_OWORD *)(v115 + v242 + 64);
        v244[5] = v256;
        v244[2] = v254;
        v244[3] = v255;
        v257 = *(_OWORD *)(v115 + v242 + 96);
        v258 = *(_OWORD *)(v115 + v242 + 112);
        v259 = *(_OWORD *)(v115 + v242 + 144);
        v244[8] = *(_OWORD *)(v115 + v242 + 128);
        v244[9] = v259;
        v244[6] = v257;
        v244[7] = v258;
        v260 = v307;
        *v252 = *(_OWORD *)&info[0].numer;
        v252[1] = v260;
        v261 = v308;
        v262 = v309;
        v263 = v311;
        v252[4] = v310;
        v252[5] = v263;
        v252[2] = v261;
        v252[3] = v262;
        v264 = v312;
        v265 = v313;
        v266 = v315;
        v252[8] = v314;
        v252[9] = v266;
        v252[6] = v264;
        v252[7] = v265;
        --v241;
        v242 -= 160;
        v243 += 160;
      }
      while (v241 > 0);
      v113 = v118 + 1;
      if (v118 + 1 >= v116)
      {
        v267 = 2 * v116;
        v110 = (char *)malloc_type_realloc(v110, 32 * v116, 0xEED9FCE9uLL);
        v117 = 0uLL;
        v111 = v290;
        v116 = v267;
      }
      v268 = &v110[16 * v118];
      *(_QWORD *)v268 = v172 - 0x3333333333333333 * ((v115 - *(_QWORD *)(v111 + 8)) >> 5) + 1;
      *((_QWORD *)v268 + 1) = v112 + ~v172;
      v112 = v172 - v171;
      v114 = v172 != v171;
      v15 = v276;
      if (v118 < 0 && !v112)
        goto LABEL_169;
    }
    v151 = 0;
    v152 = 0;
    if (v112 <= 0x7D0)
      v153 = 8;
    else
      v153 = 26;
    if (v112 <= 0x7D0)
      v154 = 3;
    else
      v154 = 9;
    while (1)
    {
      v155 = (uint64_t)(v112 - 1 + v151) / v153;
      v156 = *(float *)(v115 + 160 * v155 + 4);
      v157 = *(float *)(v115 + 160 * (v151 / v153) + 4);
      v158 = (uint64_t)(2 * v112 - 2 + v151) / v153;
      v159 = *(float *)(v115 + 160 * v158 + 4);
      if ((float)(v156 - v157) >= 0.0)
      {
        if ((float)(v159 - v157) < 0.0)
          goto LABEL_133;
        if ((float)(v159 - v156) < 0.0)
        {
LABEL_135:
          info[v152] = (mach_timebase_info)v158;
          goto LABEL_127;
        }
      }
      else if ((float)(v159 - v156) >= 0.0)
      {
        if ((float)(v159 - v157) < 0.0)
          goto LABEL_135;
LABEL_133:
        info[v152] = (mach_timebase_info)(v151 / v153);
        goto LABEL_127;
      }
      info[v152] = (mach_timebase_info)v155;
LABEL_127:
      ++v152;
      v151 += 3 * v112 - 3;
      if (v154 == v152)
      {
        while (1)
        {
          v160 = 0;
          v161 = 0;
          v162 = v154;
          v154 /= 3uLL;
          if (v154 <= 1)
            v163 = 1;
          else
            v163 = v154;
          v164 = 8 * v163;
          do
          {
            v165 = info[v160];
            v166 = info[v160 + 1];
            v167 = info[v160 + 2];
            v168 = *(float *)(v115 + 160 * *(_QWORD *)&v166 + 4);
            v169 = *(float *)(v115 + 160 * *(_QWORD *)&v165 + 4);
            v170 = *(float *)(v115 + 160 * *(_QWORD *)&v167 + 4);
            if ((float)(v168 - v169) >= 0.0)
            {
              if ((float)(v170 - v169) < 0.0)
                goto LABEL_148;
              if ((float)(v170 - v168) >= 0.0)
              {
LABEL_141:
                info[v161 / 8] = v166;
                goto LABEL_142;
              }
            }
            else
            {
              if ((float)(v170 - v168) < 0.0)
                goto LABEL_141;
              if ((float)(v170 - v169) >= 0.0)
              {
LABEL_148:
                info[v161 / 8] = v165;
                goto LABEL_142;
              }
            }
            info[v161 / 8] = v167;
LABEL_142:
            v161 += 8;
            v160 += 3;
          }
          while (v164 != v161);
          if (v162 < 9)
          {
            v147 = info[0];
            goto LABEL_152;
          }
        }
      }
    }
  }
LABEL_169:
  free(v110);
  if (*v277)
    free(*v277);
  if (*((_DWORD *)v277 + 8))
    free(v277[2]);
  free(v277);
  free(v15);
  free(v293);
  return 0;
}

uint64_t vl_timer_stop(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_DWORD *)(a1 + 212))
  {
    result = mach_absolute_time();
    *(_QWORD *)(a1 + 120) += result;
  }
  else
  {
    clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(a1 + 64));
    clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(a1 + 80));
    result = clock_gettime(_CLOCK_MONOTONIC, (timespec *)(a1 + 48));
    v3 = *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 8) + 1000000000 * (*(_QWORD *)(a1 + 48) - *(_QWORD *)a1);
    v4 = *(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 24) + 1000000000 * (*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 16));
    v5 = *(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 40) + 1000000000 * (*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 32));
    v6 = *(_QWORD *)(a1 + 128);
    v7 = v3 + *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 96) = v3;
    *(_QWORD *)(a1 + 104) = v4;
    v8 = v4 + v6;
    *(_QWORD *)(a1 + 112) = v5;
    *(_QWORD *)(a1 + 120) = v7;
    v9 = v5 + *(_QWORD *)(a1 + 136);
    *(_QWORD *)(a1 + 128) = v8;
    *(_QWORD *)(a1 + 136) = v9;
    ++*(_DWORD *)(a1 + 144);
  }
  return result;
}

uint64_t vl_ps_cell_vote(uint64_t result, uint64_t a2, uint64_t a3, double a4)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  float32x4_t v7;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t *v25;
  int8x16_t *v26;
  int8x16_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int32x4_t v44;
  int32x4_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  __int16 v60;
  unsigned int v61;
  _BOOL4 v62;
  unsigned int v63;
  int v64;
  float v65;

  if ((int)result <= 0)
    v4 = -(-(int)result & 3);
  else
    v4 = result & 3;
  v5 = (result - v4);
  LODWORD(a4) = *(_DWORD *)a2;
  if ((int)v5 < 1)
  {
    LODWORD(v6) = 0;
    if ((int)result <= 0)
      return result;
  }
  else
  {
    v6 = 0;
    v7 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
    __asm { FMOV            V2.4S, #1.0 }
    v13 = (float32x4_t)vdupq_n_s32(0x3E2AAAABu);
    v14 = (float32x4_t)vdupq_n_s32(0x3D99999Au);
    __asm { FMOV            V6.4S, #-1.0 }
    v16 = (float32x4_t)vdupq_n_s32(0xBC996E30);
    v17 = (float32x4_t)vdupq_n_s32(0x3D981627u);
    v18 = (float32x4_t)vdupq_n_s32(0xBE593484);
    v19 = (float32x4_t)vdupq_n_s32(0x3FC90DA4u);
    v20 = (float32x4_t)vdupq_n_s32(0x40490FDBu);
    v21.i64[0] = 0x8000000080000000;
    v21.i64[1] = 0x8000000080000000;
    v22 = (float32x4_t)vdupq_n_s32(0x42A2F983u);
    v23.i64[0] = 0x4400000044000000;
    v23.i64[1] = 0x4400000044000000;
    v24 = (float32x4_t)vdupq_n_s32(0x44004000u);
    v25 = *(float32x4_t **)(a2 + 72);
    v26 = *(int8x16_t **)(a2 + 80);
    v27.i64[0] = 0x100000001;
    v27.i64[1] = 0x100000001;
    v28.i64[0] = 0x100000001;
    v28.i64[1] = 0x100000001;
    do
    {
      v29 = *v25++;
      v30 = v29;
      v31 = *v26++;
      v32 = vmulq_f32(v30, v30);
      v33 = vmulq_f32(v30, v32);
      v34 = vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&v31 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), _Q6), _Q6), _Q2);
      v35 = vabsq_f32(v34);
      v36 = (int8x16_t)vclezq_f32(v34);
      v37 = vmulq_f32(vsqrtq_f32(vsubq_f32(_Q2, v35)), vmlaq_f32(v19, v35, vmlaq_f32(v18, v35, vmlaq_f32(v17, v16, v35))));
      v38 = (float32x4_t)vbslq_s8(vcltzq_s8((int8x16_t)vcgtq_f32(v30, _Q2)), (int8x16_t)xmmword_210BCAC60, (int8x16_t)vaddq_f32(v30, vaddq_f32(vmulq_f32(v33, v13), vmulq_f32(vmulq_f32(v32, v33), v14))));
      v39 = vaddq_f32(v7, vmulq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v20, v36), vsubq_f32(v37, (float32x4_t)vandq_s8((int8x16_t)vaddq_f32(v37, v37), v36))), (float32x4_t)vorrq_s8(vandq_s8(v31, v21), (int8x16_t)_Q2)));
      v40 = (int32x4_t)vandq_s8((int8x16_t)vcvtq_s32_f32(vaddq_f32(vmulq_f32(vsubq_f32(v39, v38), v22), v23)), v27);
      v41 = (int32x4_t)vandq_s8((int8x16_t)vcvtq_s32_f32(vaddq_f32(vmulq_f32(vaddq_f32(v39, v38), v22), v24)), v27);
      v42 = vorrq_s8(vbicq_s8((int8x16_t)vcgtq_u32((uint32x4_t)v40, (uint32x4_t)v41), (int8x16_t)vceqzq_s32(v41)), vorrq_s8((int8x16_t)vceqzq_s32(v40), (int8x16_t)vceqq_f32(v38, v20)));
      ++*(_WORD *)(a3 + 2 * v40.u32[0]);
      v43 = vbslq_s8(vcltzq_s8(v42), (int8x16_t)vminq_s32(v40, v41), (int8x16_t)v41);
      ++*(_WORD *)(a3 + 2 * v40.u32[1]);
      ++*(_WORD *)(a3 + 2 * v40.u32[2]);
      ++*(_WORD *)(a3 + 2 * v40.u32[3]);
      --*(_WORD *)(a3 + 2 * v43.i32[0]);
      --*(_WORD *)(a3 + 2 * v43.i32[1]);
      --*(_WORD *)(a3 + 2 * v43.i32[2]);
      --*(_WORD *)(a3 + 2 * v43.i32[3]);
      v44 = (int32x4_t)vandq_s8(v42, v28);
      v45 = vpaddq_s32(v44, v44);
      *(_WORD *)(a3 + 1024) += vpaddq_s32(v45, v45).u16[0];
      v6 += 4;
    }
    while (v6 < v5);
    if ((int)v6 >= (int)result)
      return result;
  }
  v46 = *(_QWORD *)(a2 + 72);
  v6 = (int)v6;
  v47 = (int)result;
  v48 = *(unsigned __int16 *)(a3 + 1024);
  result = 1078530011;
  do
  {
    while (1)
    {
      v65 = *(float *)(v46 + 4 * v6);
      if (v65 < 1.0)
        break;
      ++v48;
      if (v47 == ++v6)
        goto LABEL_32;
    }
    v49 = *(float *)(*(_QWORD *)(a2 + 80) + 4 * v6);
    v50 = (float)(v65 + (float)((float)(v65 * (float)(v65 * v65)) * 0.16667))
        + (float)((float)((float)(v65 * v65) * (float)(v65 * (float)(v65 * v65))) * 0.075);
    v51 = fabsf(v49) + -1.0;
    if (v51 <= 1.0)
      v52 = v51;
    else
      v52 = 1.0;
    if (v51 >= -1.0)
      v53 = v52;
    else
      v53 = -1.0;
    if (v49 <= 0.0)
      v54 = -1.0;
    else
      v54 = 1.0;
    if (v53 >= 0.0)
      v55 = 0.0;
    else
      v55 = 1.0;
    v56 = fabsf(v53);
    v57 = (float)(v56 * (float)((float)(v56 * (float)((float)(v56 * -0.018729) + 0.074261)) + -0.21211)) + 1.5707;
    v58 = sqrtf(1.0 - v56);
    v59 = *(float *)&a4
        + (float)(v54
                * (float)((float)((float)(v58 * v57) + (float)((float)(v55 * -2.0) * (float)(v58 * v57)))
                        + (float)(v55 * 3.1416)));
    v60 = vcvtms_s32_f32((float)(v59 - v50) * 81.487);
    v61 = vcvtms_s32_f32((float)((float)(v50 + v59) * 81.487) + 1.0) & 0x1FF;
    v62 = v61 < (v60 & 0x1FFu) && v61 != 0;
    v63 = v60 & 0x1FF;
    v64 = (v60 & 0x1FF) == 0 || v62;
    ++*(_WORD *)(a3 + 2 * v63);
    --*(_WORD *)(a3 + 2 * v61);
    v48 += v64;
    ++v6;
  }
  while (v47 != v6);
LABEL_32:
  *(_WORD *)(a3 + 1024) = v48;
  return result;
}

void vl_ps_vote(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  float v9;
  int64x2_t *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  double v17;
  unint64_t v18;
  uint64_t v19;
  double v20;
  int16x8_t v21;
  unsigned int v22;
  int64x2_t *v23;
  int8x16_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int8x16_t v37;
  uint64_t v39;
  timespec *v40;
  int16x8_t v41;
  int8x16_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v8 = *(int *)(a3 + 4);
  if (*(_DWORD *)(a5 + 64))
    v9 = *(float *)(*(_QWORD *)(a2 + 144) + 252);
  else
    v9 = 0.0;
  v10 = (int64x2_t *)malloc_type_malloc(0x402uLL, 0x100004040BEE09CuLL);
  v39 = (uint64_t)malloc_type_malloc(4 * v8, 0x100004052888210uLL);
  if ((v39 & 0xF) != 0)
    __assert_rtn("vl_ps_vote", "vl_pose_ps.c", 1072, "((size_t) flg) % 16 == 0");
  if ((uint64_t)a1[6] >= 1)
  {
    v11 = 0;
    v40 = (timespec *)(a4 + 432);
    do
    {
      v15 = a1[7];
      v16 = *(_QWORD *)(a1[4] + 8 * (v11 / v15));
      if (*(_DWORD *)(a4 + 212))
      {
        *(_QWORD *)(a4 + 120) -= mach_absolute_time();
      }
      else
      {
        clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(a4 + 32));
        clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(a4 + 16));
        clock_gettime(_CLOCK_MONOTONIC, (timespec *)a4);
      }
      v18 = v11 % v15;
      LODWORD(v17) = *(_DWORD *)(a5 + 136);
      v19 = vl_ps_filter_corr((float *)(v16 + 52 * v18), a3, a3, v39, v9, v17);
      vl_timer_stop(a4);
      if (*(_DWORD *)(a4 + 428))
      {
        *(_QWORD *)(a4 + 336) -= mach_absolute_time();
      }
      else
      {
        clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(a4 + 248));
        clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(a4 + 232));
        clock_gettime(_CLOCK_MONOTONIC, (timespec *)(a4 + 216));
      }
      bzero(v10, 0x402uLL);
      vl_ps_cell_vote(v19, a3, (uint64_t)v10, v20);
      vl_timer_stop(a4 + 216);
      if (*(_DWORD *)(a4 + 644))
      {
        *(_QWORD *)(a4 + 552) -= mach_absolute_time();
      }
      else
      {
        clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(a4 + 464));
        clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(a4 + 448));
        clock_gettime(_CLOCK_MONOTONIC, v40);
      }
      v10->i16[0] = v10[64].i16[0];
      v21 = 0uLL;
      v22 = -8;
      v23 = v10;
      v24 = 0uLL;
      v25 = (int16x8_t)xmmword_210BCAC30;
      v26 = 0uLL;
      v27.i64[0] = 0x8000800080008;
      v27.i64[1] = 0x8000800080008;
      v28.i64[0] = 0xFFFF0000FFFF0000;
      v28.i64[1] = 0xFFFF0000FFFF0000;
      v29.i64[0] = 0xFFFFFFFF00000000;
      v29.i64[1] = 0xFFFFFFFF00000000;
      v30.i64[0] = 0xFFFF0000FFFFLL;
      v30.i64[1] = 0xFFFF0000FFFFLL;
      do
      {
        v31 = *(int16x8_t *)v23;
        if (vorrq_s8((int8x16_t)vdupq_laneq_s64(*v23, 1), *(int8x16_t *)v23).u64[0])
        {
          v32 = vaddq_s16(v31, (int16x8_t)vqtbl1q_s8((int8x16_t)v31, (int8x16_t)xmmword_210BCAC40));
          *(int32x2_t *)v33.i8 = vrev64_s32(*(int32x2_t *)v32.i8);
          v33.u64[1] = (unint64_t)vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL));
          v34 = vaddq_s16(v32, v33);
          v35 = (int16x8_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL);
          v36 = vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vandq_s8((int8x16_t)v31, v30), v26), (int16x8_t)vandq_s8((int8x16_t)v32, v28)), (int16x8_t)vandq_s8((int8x16_t)v33, v29)), (int16x8_t)vandq_s8((int8x16_t)v35, (int8x16_t)xmmword_210BCAC50));
          v26 = vaddq_s16(vaddq_s16(v34, v26), v35);
          v37 = (int8x16_t)vcgtq_s16(v36, v21);
          v21 = vmaxq_s16(v36, v21);
          v24 = vbslq_s8(v37, (int8x16_t)v25, v24);
        }
        v25 = vaddq_s16(v25, v27);
        ++v23;
        v22 += 8;
      }
      while (v22 < 0x1F8);
      v12 = v16 + 52 * v18;
      v42 = v24;
      v41 = v21;
      v13 = 2;
      if (*(unsigned __int16 *)((unint64_t)&v41 | (2 * (v21.u16[1] > v21.u16[0]))) >= v21.u16[2])
        v13 = v21.u16[1] > v21.u16[0];
      if (*(unsigned __int16 *)((unint64_t)&v41 | (2 * v13)) < v21.u16[3])
        v13 = 3;
      if (*(unsigned __int16 *)((unint64_t)&v41 | (2 * v13)) < v21.u16[4])
        v13 = 4;
      if (*(unsigned __int16 *)((unint64_t)&v41 | (2 * v13)) < v21.u16[5])
        v13 = 5;
      if (*(unsigned __int16 *)((unint64_t)&v41 | (2 * v13)) < v21.u16[6])
        v13 = 6;
      if (v41.u16[v13] < v21.u16[7])
        v13 = 7;
      v14 = v13;
      *(_WORD *)(v12 + 48) = v42.i16[v14];
      *(_WORD *)(v12 + 44) = v41.i16[v14];
      vl_timer_stop((uint64_t)v40);
      ++v11;
    }
    while (a1[6] > v11);
  }
  free(v10);
  free((void *)v39);
}

void vl_stats_get(uint64_t a1, void **a2)
{
  void **v2;
  uint64_t v3;
  int v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v10;
  int64_t v11;
  double *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  float v25;
  BOOL v26;
  double *v27;
  double *v28;
  double *v29;
  double *v30;
  float v31;
  unsigned __int8 *v32;
  double *v33;
  int64_t v34;
  double v36;
  float v37;
  uint64_t v38;
  int64_t v39;
  double *v40;
  const void *v41;
  uint64_t v42;
  int v43;
  int v44;
  unint64_t v45;
  _DWORD *v46;
  unint64_t v47;
  int *v48;
  int v49;
  void **v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  double *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  float *v79;
  uint32_t v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  _DWORD *v86;
  double v87;
  double v88;
  double v89;
  _DWORD *v90;
  void *v91;
  uint64_t v92;
  int v93;
  unint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  int v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double *v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  unint64_t v129;
  int v130;
  uint64_t v131;
  int v132;
  int v133;
  double v134;
  double v135;
  int32x4_t *v136;
  int32x4_t *v137;
  _QWORD *v138;
  int v139;
  int v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  double v144;
  uint64_t v145;
  int32x4_t v146;
  int32x4_t *v147;
  int32x4_t v148;
  int32x4_t v149;
  uint64_t v150;
  double v151;
  double v152;
  size_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void **v157;
  double v158;
  double v159;
  void **v160;
  uint64_t v161;
  uint64_t v162;
  void **v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  pthread_mutex_t *v169;
  float v170;
  long double v171;
  _DWORD *v172;
  pthread_mutex_t *v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  unint64_t v177;
  unsigned int v178;
  unint64_t v179;
  uint64_t v180;
  unsigned int v181;
  unsigned int v182;
  uint64_t v183;
  float *v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  double v192;
  double v193;
  double v194;
  void **v195;
  size_t v196;
  size_t v197;
  double v198;
  int *v199;
  void *v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  double v205;
  void **v206;
  void *v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  char v212;
  __int32 v213;
  _QWORD *v214;
  uint64_t v215;
  _DWORD *v216;
  _DWORD *v217;
  int v218;
  unsigned int v219;
  uint64_t v220;
  size_t v221;
  void **v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  __int32 v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  _QWORD *v230;
  unsigned int v231;
  unint64_t v232;
  _DWORD *v233;
  _DWORD *v234;
  unsigned int v235;
  unsigned int v236;
  uint64_t v237;
  int *v238;
  size_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  __int128 *v244;
  uint64_t v245;
  _OWORD *v246;
  __int128 v247;
  __int128 v248;
  uint64_t v249;
  __int128 v250;
  __int128 v251;
  uint64_t v252;
  float32x4_t *v253;
  char *v254;
  uint64_t v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  __int128 *v259;
  _OWORD *v260;
  __int128 *v261;
  _OWORD *v262;
  uint64_t v263;
  __int128 v264;
  __int128 v265;
  uint64_t v266;
  uint64_t v267;
  char *v268;
  int *v269;
  char *v270;
  int *v271;
  int v272;
  int v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  _QWORD *v344;
  _QWORD *v345;
  _QWORD *v346;
  uint64_t tv_sec_low;
  _QWORD *v348;
  uint64_t v349;
  _QWORD *v350;
  _QWORD *v351;
  _QWORD *v352;
  _QWORD *v353;
  uint64_t v354;
  unint64_t v355;
  int v356;
  int v357;
  unint64_t v358;
  double *v359;
  unint64_t v360;
  double *v361;
  unint64_t v362;
  int v363;
  int v364;
  unint64_t v365;
  double *v366;
  uint64_t v367;
  void **v368;
  double *v369;
  _DWORD *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unint64_t v374;
  __int128 v375;
  double *v376;
  _QWORD *v377;
  uint64_t v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  uint64_t v391;
  unint64_t v392;
  double *v393;
  char *v394;
  unint64_t v395;
  unint64_t v396;
  const float *v397;
  unint64_t v398;
  char *v399;
  _DWORD *v400;
  char *v401;
  _WORD *v402;
  uint64_t v403;
  int v404;
  BOOL v405;
  unint64_t v406;
  int v407;
  double *v408;
  uint64_t v409;
  unint64_t v410;
  unint64_t v411;
  unint64_t v412;
  unint64_t v413;
  BOOL v415;
  BOOL v417;
  BOOL v419;
  int *v421;
  const float *v422;
  unint64_t v423;
  unint64_t v424;
  _OWORD *v425;
  float64x2_t *v426;
  const float *v427;
  float64x2_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  const double *v439;
  float64x2_t v440;
  float64x2_t v441;
  double v442;
  float64x2_t v443;
  const double *v444;
  double v445;
  float64x2_t v446;
  const double *v447;
  float64x2_t v448;
  double v449;
  double v450;
  float64x2_t v451;
  float64x2_t v452;
  const double *v453;
  float64x2_t v454;
  float64x2_t v455;
  double *v456;
  double *v457;
  double *v458;
  int *v459;
  int *v460;
  _DWORD *v461;
  _DWORD *v462;
  __int128 v463;
  uint64_t v464;
  _DWORD *v465;
  int v466;
  uint64_t v467;
  char *v468;
  int v469;
  float *v470;
  int *v471;
  double *v472;
  uint64_t v473;
  int *v474;
  double v475;
  double v476;
  float v477;
  double v478;
  double v479;
  double v480;
  double v481;
  double v482;
  double v483;
  int v484;
  int v485;
  int *v486;
  uint64_t v487;
  int v488;
  double *v489;
  void *v490;
  void *v491;
  void *v492;
  _QWORD *v493;
  __darwin_time_t v494;
  double v495;
  long double v496;
  long double v497;
  long double v498;
  long double v499;
  long double v500;
  long double v501;
  uint64_t v502;
  int v503;
  double *v504;
  float32x4_t *v505;
  uint64_t v506;
  uint64_t v507;
  double *v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  int v512;
  void **v513;
  uint64_t v514;
  _DWORD *v515;
  uint64_t v516;
  uint64_t v517;
  _DWORD *v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  _DWORD *v522;
  _OWORD *v523;
  __int128 v524;
  __int128 v525;
  uint64_t v526;
  __int128 v527;
  __int128 v528;
  uint64_t v529;
  uint64_t v530;
  unint64_t v531;
  uint64_t v532;
  uint64_t v533;
  unint64_t v534;
  uint64_t v535;
  uint64_t v536;
  unint64_t v537;
  uint64_t v538;
  uint64_t v539;
  unint64_t v540;
  uint64_t v541;
  uint64_t v542;
  unint64_t v543;
  uint64_t v544;
  uint64_t v545;
  unint64_t v546;
  uint64_t v547;
  uint64_t v548;
  unint64_t v549;
  uint64_t v550;
  uint64_t v551;
  unint64_t v552;
  uint64_t v553;
  uint64_t v554;
  unint64_t v555;
  uint64_t v556;
  uint64_t v557;
  unint64_t v558;
  uint64_t v559;
  uint64_t v560;
  unint64_t v561;
  uint64_t v562;
  uint64_t v563;
  unint64_t v564;
  uint64_t v565;
  uint64_t v566;
  unint64_t v567;
  uint64_t v568;
  uint64_t v569;
  unint64_t v570;
  uint64_t v571;
  uint64_t v572;
  unint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unint64_t v576;
  uint64_t v577;
  uint64_t v578;
  unint64_t v579;
  uint64_t v580;
  uint64_t v581;
  unint64_t v582;
  uint64_t v583;
  uint64_t v584;
  unint64_t v585;
  uint64_t v586;
  uint64_t v587;
  unint64_t v588;
  uint64_t v589;
  uint64_t v590;
  unint64_t v591;
  uint64_t v592;
  uint64_t v593;
  unint64_t v594;
  uint64_t v595;
  uint64_t v596;
  unint64_t v597;
  pthread_mutex_t *v598;
  _QWORD *v599;
  __darwin_time_t tv_sec;
  uint64_t tv_usec;
  uint64_t v602;
  int v603;
  int *v604;
  int v605;
  __int16 *v606;
  __int16 *v607;
  uint64_t v608;
  int v609;
  __int16 *v610;
  int *v611;
  __int16 v612;
  int v613;
  uint64_t v614;
  int *v615;
  int *v616;
  int v617;
  uint64_t v618;
  _DWORD *v619;
  __int16 *v620;
  int v621;
  char *v622;
  float *v623;
  __int16 *v624;
  unsigned int v625;
  uint64_t v626;
  int32x4_t *v627;
  _OWORD *v628;
  int32x4_t v629;
  __int128 v630;
  uint64_t v631;
  uint64_t v632;
  __int16 *v633;
  int32x2_t *v634;
  int32x2_t v635;
  int v636;
  uint64_t v637;
  int v638;
  char *v639;
  __int16 *v640;
  uint64_t v641;
  char *v642;
  char *v643;
  uint64_t v644;
  uint64_t v645;
  float *v646;
  int v647;
  uint64_t v648;
  int v649;
  __int16 *v650;
  int v651;
  uint64_t v652;
  float *v653;
  float v654;
  uint64_t v655;
  __int16 *v656;
  int *v657;
  int v658;
  int v659;
  int v660;
  int v661;
  unsigned __int16 *v662;
  int v663;
  int v664;
  uint64_t v665;
  uint64_t v666;
  float v667;
  int v668;
  void *v669;
  void *v670;
  void *v671;
  __darwin_time_t v672;
  uint64_t v673;
  __darwin_time_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  __darwin_time_t v682;
  double v683;
  double v684;
  int v685;
  int v686;
  double v687;
  double v688;
  double v689;
  double v690;
  double v691;
  long double v692;
  long double v693;
  double v694;
  double v695;
  double v696;
  int v697;
  double v698;
  double v699;
  uint64_t v700;
  double v701;
  int v702;
  int v703;
  uint64_t v704;
  double v705;
  uint64_t v706;
  double v707;
  int v708;
  size_t __n;
  size_t __na;
  double v711;
  int v712;
  pthread_mutex_t *v713;
  double v714;
  pthread_mutex_t *v715;
  double v716;
  void **v717;
  uint64_t v718;
  double v719;
  double *v720;
  int32x4_t *v721;
  double v722;
  pthread_mutex_t *v723;
  int v724;
  int v725;
  int v726;
  uint64_t v728;
  int v730;
  int v731;
  uint64_t v732;
  _QWORD *v733;
  __darwin_time_t v734;
  char __s[16];
  float64x2_t v736;
  float64x2_t v737;
  float64x2_t v738;
  float64x2_t v739;
  float64x2_t v740;
  mach_timebase_info info[2];
  __int128 v742;
  __int128 v743;
  __int128 v744;
  __int128 v745;
  __int128 v746;
  timeval v747;
  __int128 v748;
  __int128 v749;
  __int128 v750;
  __int128 v751;
  __int128 v752;
  float64x2x3_t v753;
  float64x2x3_t v754;
  float32x4x3_t v755;
  float32x4x3_t v756;
  float64x2x3_t v757;

  v2 = a2;
  v3 = a1;
  if (*(_DWORD *)(a1 + 976))
  {
    v747.tv_sec = 0;
    *(_QWORD *)&v747.tv_usec = 0;
    if (gettimeofday(&v747, 0) || (double)(v747.tv_usec + 1000000 * v747.tv_sec) / 1000000.0 <= 1514764800.0)
      goto LABEL_489;
    __n = v747.tv_usec + 1000000 * v747.tv_sec;
    v713 = (pthread_mutex_t *)(v3 + 11664);
    pthread_mutex_lock((pthread_mutex_t *)(v3 + 11664));
    if (*(_DWORD *)(v3 + 4) == 1)
      v4 = 64;
    else
      v4 = 256;
    v5 = *(unsigned int *)(v3 + 988);
    v6 = *(_QWORD *)(v3 + 11736);
    if ((v5 & 0x80000000) != 0)
    {
      if (v6 < 1)
      {
        v130 = 0;
        LODWORD(v42) = 0;
        v720 = 0;
        v131 = 0;
        v132 = 0;
        v133 = 0;
        goto LABEL_283;
      }
      v41 = *(const void **)(v3 + 11744);
      v12 = (double *)malloc_type_realloc(0, 864 * v6, 0x7BF64200uLL);
      v2 = a2;
      memcpy(v12, v41, 864 * *(_QWORD *)(v3 + 11736));
      v42 = *(_QWORD *)(v3 + 11736);
    }
    else
    {
      v7 = (v6 - 2);
      if ((int)v6 - 2 >= 0)
      {
        v8 = (_DWORD *)(*(_QWORD *)(v3 + 11744) + 864 * v7 + 4);
        while (!*v8)
        {
          v8 -= 216;
          if (v7-- <= 0)
          {
            LODWORD(v7) = -1;
            break;
          }
        }
      }
      if (v6 < 1)
      {
        v42 = 0;
        v12 = 0;
      }
      else
      {
        v730 = v4;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v14 = 0;
        v15 = (int)v7;
        do
        {
          if (v14 > v15)
          {
            v16 = *(_QWORD *)(a1 + 11744);
            if (v11 >= v13)
            {
              if (2 * v13 <= v11)
                v13 = v11 + 1;
              else
                v13 *= 2;
              if (v13)
                v12 = (double *)malloc_type_realloc(v12, 864 * v13, 0x21180E1BuLL);
            }
            memcpy(&v12[108 * v11], (const void *)(v16 + v10), 0x360uLL);
            v6 = *(_QWORD *)(a1 + 11736);
            ++v11;
            v2 = a2;
          }
          ++v14;
          v10 += 864;
        }
        while (v14 < v6);
        if (v11 <= v5)
        {
          v42 = v11;
          v3 = a1;
        }
        else
        {
          v21 = (unsigned __int8 *)malloc_type_calloc(v11, 1uLL, 0x100004077774924uLL);
          v21[v11 - 1] = 1;
          *v21 = 1;
          if ((int)v5 >= 3)
          {
            v22 = 2;
            do
            {
              v23 = 0;
              v24 = -1;
              v25 = -INFINITY;
              do
              {
                if (!v21[v23])
                {
                  v27 = &v12[108 * v23];
                  v28 = v27 + 2;
                  v29 = v27 + 5;
                  v30 = v27 + 8;
                  v31 = INFINITY;
                  v32 = v21;
                  v33 = v12 + 5;
                  v34 = v11;
                  do
                  {
                    if (*v32++)
                    {
                      v36 = *(v33 - 3);
                      v37 = 1.0
                          - (*v29 * *v33 + *v28 * v36 + *v30 * v33[3])
                          / (sqrt((*v29 * *v29 + *v28 * *v28 + *v30 * *v30) * (*v33 * *v33 + v36 * v36 + v33[3] * v33[3]))
                           + 1.0e-20);
                      if (v31 > v37)
                        v31 = v37;
                    }
                    v33 += 108;
                    --v34;
                  }
                  while (v34);
                  v26 = v31 > v25 || v24 == -1;
                  if (v26)
                  {
                    v25 = v31;
                    v24 = v23;
                  }
                }
                ++v23;
              }
              while (v23 != v11);
              if ((v24 & 0x80000000) != 0)
                __assert_rtn("vl_stats_pick_frames", "vl_stats.c", 273, "best_frame >= 0");
              v21[v24] = 1;
              ++v22;
            }
            while (v22 != (_DWORD)v5);
          }
          v38 = 0;
          if (v12)
          {
            v39 = 0;
            v40 = v12;
            v3 = a1;
            do
            {
              if (v21[v39])
                memcpy(&v12[108 * v38++], v40, 0x360uLL);
              ++v39;
              v40 += 108;
            }
            while (v39 < v11);
          }
          else
          {
            v3 = a1;
          }
          v2 = a2;
          if (v38 > v13)
          {
            v354 = 2 * v13;
            if (2 * v13 <= v38)
              v354 = v38;
            if (v354)
              v12 = (double *)malloc_type_realloc(v12, 864 * v354, 0x7B494C7BuLL);
          }
          if (v38 > v11)
            bzero(&v12[108 * v11], 864 * (v38 - v11));
          free(v21);
          v42 = v38;
        }
        v4 = v730;
      }
      if (v42 > *(int *)(v3 + 988))
        __assert_rtn("vl_stats_get_from_history", "vl_stats.c", 440, "da_size(&frames) <= vl->par.history.stats_max_frames");
    }
    v720 = v12;
    if (v42 < 1)
    {
      v130 = 0;
      v132 = 0;
      v133 = 0;
LABEL_282:
      v131 = v42;
LABEL_283:
      v732 = v131;
      v724 = v42;
      v2[62] = 0;
      *((_OWORD *)v2 + 29) = 0u;
      *((_OWORD *)v2 + 30) = 0u;
      *((_OWORD *)v2 + 27) = 0u;
      *((_OWORD *)v2 + 28) = 0u;
      *((_OWORD *)v2 + 25) = 0u;
      *((_OWORD *)v2 + 26) = 0u;
      *((_OWORD *)v2 + 23) = 0u;
      *((_OWORD *)v2 + 24) = 0u;
      *((_OWORD *)v2 + 21) = 0u;
      *((_OWORD *)v2 + 22) = 0u;
      *((_OWORD *)v2 + 19) = 0u;
      *((_OWORD *)v2 + 20) = 0u;
      *((_OWORD *)v2 + 17) = 0u;
      *((_OWORD *)v2 + 18) = 0u;
      *((_OWORD *)v2 + 15) = 0u;
      *((_OWORD *)v2 + 16) = 0u;
      *((_OWORD *)v2 + 13) = 0u;
      *((_OWORD *)v2 + 14) = 0u;
      *((_OWORD *)v2 + 11) = 0u;
      *((_OWORD *)v2 + 12) = 0u;
      *((_OWORD *)v2 + 9) = 0u;
      *((_OWORD *)v2 + 10) = 0u;
      *((_OWORD *)v2 + 7) = 0u;
      *((_OWORD *)v2 + 8) = 0u;
      *((_OWORD *)v2 + 5) = 0u;
      *((_OWORD *)v2 + 6) = 0u;
      *((_OWORD *)v2 + 3) = 0u;
      *((_OWORD *)v2 + 4) = 0u;
      *((_OWORD *)v2 + 1) = 0u;
      *((_OWORD *)v2 + 2) = 0u;
      *(_OWORD *)v2 = 0u;
      *(void **)((char *)v2 + 92) = 0;
      *((_DWORD *)v2 + 25) = 0;
      *((_DWORD *)v2 + 22) = v133;
      *((_DWORD *)v2 + 34) = v42;
      *((_DWORD *)v2 + 73) = v132;
      *((_DWORD *)v2 + 52) = v4;
      a2[10] = 0;
      *a2 = malloc_type_malloc(24 * v133, 0x100004000313F17uLL);
      a2[1] = malloc_type_malloc(8 * v133, 0x100004052888210uLL);
      a2[2] = malloc_type_malloc(4 * v133, 0x100004052888210uLL);
      a2[3] = malloc_type_malloc(2 * (int)v131, 0x1000040BDFB0063uLL);
      a2[4] = malloc_type_malloc(2 * v133, 0x1000040BDFB0063uLL);
      a2[8] = malloc_type_malloc(0, 0x100004052888210uLL);
      a2[9] = malloc_type_malloc(0, 0x100004052888210uLL);
      a2[13] = malloc_type_malloc(16 * (int)v131, 0x1000040451B5BE8uLL);
      a2[14] = malloc_type_calloc(16 * (int)v42, 1uLL, 0x100004077774924uLL);
      a2[15] = malloc_type_malloc(248 * (int)v131, 0x10000409B83B951uLL);
      a2[16] = malloc_type_malloc(4 * (int)v131, 0x100004052888210uLL);
      a2[30] = malloc_type_malloc((uint64_t)((unint64_t)(3 * v131) << 34) >> 30, 0x100004052888210uLL);
      a2[31] = malloc_type_malloc(8 * (int)v131, 0x100004000313F17uLL);
      a2[24] = malloc_type_malloc(12 * v132, 0x100004052888210uLL);
      a2[29] = malloc_type_malloc(4 * v132, 0x100004052888210uLL);
      a2[25] = malloc_type_malloc(*((int *)a2 + 52) * (uint64_t)v132, 0x100004077774924uLL);
      v368 = a2;
      a2[27] = malloc_type_malloc(8 * v132, 0x100004052888210uLL);
      a2[28] = malloc_type_malloc(4 * v132, 0x100004052888210uLL);
      a2[32] = malloc_type_malloc(4 * (int)v131, 0x100004052888210uLL);
      a2[33] = malloc_type_malloc((uint64_t)((unint64_t)(3 * v131) << 34) >> 30, 0x100004052888210uLL);
      a2[34] = malloc_type_malloc(36 * (_DWORD)v131, 0x100004052888210uLL);
      a2[35] = malloc_type_malloc(8 * (_DWORD)v42, 0x100004052888210uLL);
      if (v131)
      {
        v369 = v720;
        *((_DWORD *)a2 + 72) = *((_DWORD *)&v720[108 * v131 - 107] - 1) != 0;
        if (v130)
        {
          v370 = v720 + 1;
          v371 = v131;
          while (*v370 != 1)
          {
            v370 += 216;
            if (!--v371)
              goto LABEL_288;
          }
          *((_DWORD *)a2 + 13) = 1;
          v372 = v131;
          v718 = v131;
          if ((int)v42 >= 1)
            goto LABEL_293;
LABEL_344:
          v751 = 0u;
          v752 = 0u;
          v749 = 0u;
          v750 = 0u;
          v747 = (timeval)0;
          v748 = 0u;
          if (v372)
          {
            v486 = (int *)&v369[108 * v372 - 107];
            v487 = v372;
            while ((int)v487 >= 1)
            {
              --v487;
              v488 = *v486;
              v486 -= 216;
              if (v488 == 1)
                goto LABEL_353;
            }
            v487 = v732 - 1;
LABEL_353:
            v489 = &v369[108 * v487];
            v490 = (void *)*((_QWORD *)v489 + 11);
            *((_QWORD *)&v751 + 1) = v490;
            v491 = (void *)*((_QWORD *)v489 + 12);
            *(_QWORD *)&v752 = v491;
            v492 = (void *)*((_QWORD *)v489 + 13);
            *((_QWORD *)&v752 + 1) = v492;
            v494 = *((_QWORD *)v489 + 2);
            v493 = v489 + 2;
            v747.tv_sec = v494;
            *((_QWORD *)&v748 + 1) = v493[3];
            *(_QWORD *)&v750 = v493[6];
            *(_QWORD *)&v747.tv_usec = v493[1];
            *(_QWORD *)&v749 = v493[4];
            *((_QWORD *)&v750 + 1) = v493[7];
            *(_QWORD *)&v748 = v493[2];
            *((_QWORD *)&v749 + 1) = v493[5];
            *(_QWORD *)&v751 = v493[8];
            v495 = *((double *)v493 + 6);
            if (fabs(v495) >= 1.0)
            {
              v499 = *((double *)v493 + 1);
              if (*((double *)v493 + 6) <= -1.0)
              {
                v501 = atan2(v499, *((long double *)v493 + 2));
                v368 = a2;
                a2[18] = v490;
                a2[19] = v491;
                a2[20] = v492;
                a2[21] = 0;
                a2[22] = (void *)0x3FF921FB54442D18;
                *((long double *)a2 + 23) = v501 + 0.0;
                if (v724 < 1)
                  goto LABEL_350;
              }
              else
              {
                v500 = atan2(-v499, -*((double *)v493 + 2));
                v368 = a2;
                a2[18] = v490;
                a2[19] = v491;
                a2[20] = v492;
                a2[21] = 0;
                a2[22] = (void *)0xBFF921FB54442D18;
                *((long double *)a2 + 23) = v500;
                if (v724 < 1)
                {
LABEL_350:
                  if (*((_DWORD *)v368 + 73))
                    goto LABEL_493;
                  goto LABEL_369;
                }
              }
            }
            else
            {
              v496 = asin(-v495);
              v497 = atan2(*((long double *)v493 + 3), *(long double *)v493);
              v498 = atan2(*((long double *)v493 + 7), *((long double *)v493 + 8));
              v368 = a2;
              a2[18] = v490;
              a2[19] = v491;
              a2[20] = v492;
              *((long double *)a2 + 21) = v497;
              *((long double *)a2 + 22) = v496;
              *((long double *)a2 + 23) = v498;
              if (v724 < 1)
                goto LABEL_350;
            }
          }
          else
          {
            v368[18] = 0;
            v368[19] = 0;
            v368[20] = 0;
            v368[21] = 0;
            v368[22] = 0;
            v368[23] = 0;
            if (v724 < 1)
              goto LABEL_350;
          }
          v502 = 0;
          v503 = 0;
          do
          {
            v504 = &v369[108 * v502];
            *((double *)v368[31] + v502) = v504[68];
            v745 = 0u;
            v746 = 0u;
            v743 = 0u;
            v744 = 0u;
            *(_OWORD *)&info[0].numer = 0u;
            v742 = 0u;
            v739 = 0u;
            v740 = 0u;
            v737 = 0u;
            v738 = 0u;
            *(_OWORD *)__s = 0u;
            v736 = 0u;
            *((double *)&v745 + 1) = v504[11];
            v746 = *((_OWORD *)v504 + 6);
            info[0] = (mach_timebase_info)v504[2];
            *((double *)&v742 + 1) = v504[5];
            *(double *)&v744 = v504[8];
            info[1] = (mach_timebase_info)v504[3];
            *(double *)&v743 = v504[6];
            *((double *)&v744 + 1) = v504[9];
            *(double *)&v742 = v504[4];
            *((double *)&v743 + 1) = v504[7];
            *(double *)&v745 = v504[10];
            g_coords_diff((double *)info, (double *)&v747.tv_sec, (uint64_t)__s);
            v505 = (float32x4_t *)((char *)v368[30] + 4 * (12 * v502));
            *v505 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)__s), v736);
            v505[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v737), v738);
            v505[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v739), v740);
            if (*((uint64_t *)v504 + 78) >= 1)
            {
              v506 = 0;
              v507 = 0;
              v733 = v504 + 78;
              v508 = &v369[108 * v502 + 79];
              v509 = v502;
              v510 = v503;
              v511 = 2 * v503;
              v725 = v503;
              v512 = 2 * v503;
              v513 = v368;
              v514 = 4 * (v511 + v510);
              do
              {
                v515 = (_DWORD *)(*(_QWORD *)v508 + v506);
                v516 = (uint64_t)v513[24] + v514;
                *(_QWORD *)v516 = 0;
                *(_DWORD *)(v516 + 8) = 0;
                memcpy((char *)v513[25] + (v510 + v507) * *((int *)v513 + 52), v515 + 8, *((int *)v513 + 52));
                v517 = 2 * v507;
                *(_WORD *)((char *)v513[29] + v511 + v517) = 1;
                v518 = v513[27];
                v518[v512] = *v515;
                v518[v512 + 1] = v515[1];
                *(_WORD *)((char *)v513[28] + v511 + v517) = v509;
                ++v507;
                v512 += 2;
                v514 += 12;
                v506 += 288;
              }
              while (*v733 > v507);
              v3 = a1;
              v503 = v725 + v507;
              v368 = v513;
              v372 = v718;
              v369 = v720;
              v502 = v509;
            }
            ++v502;
          }
          while (v502 != v372);
          if (v503 != *((_DWORD *)v368 + 73))
LABEL_493:
            __assert_rtn("vl_stats_get_from_history_frames", "vl_stats.c", 397, "n_tracks == vl_stats->num_slam_pt3s");
          v519 = 0;
          v520 = 0;
          v521 = 0;
          v522 = (_DWORD *)v369 + 155;
          do
          {
            *((_DWORD *)v368[32] + v521) = *v522;
            v523 = (char *)v368[33] + v519;
            v524 = *((_OWORD *)v522 - 3);
            v525 = *((_OWORD *)v522 - 1);
            v523[1] = *((_OWORD *)v522 - 2);
            v523[2] = v525;
            *v523 = v524;
            v526 = (uint64_t)v368[34] + 4 * v520;
            v527 = *(_OWORD *)(v522 - 41);
            v528 = *(_OWORD *)(v522 - 37);
            *(_DWORD *)(v526 + 32) = *(v522 - 33);
            *(_OWORD *)v526 = v527;
            *(_OWORD *)(v526 + 16) = v528;
            *((_QWORD *)v368[35] + v521++) = *((_QWORD *)v522 - 16);
            v520 += 9;
            v519 += 48;
            v522 += 216;
          }
          while (v372 != v521);
LABEL_369:
          free(v369);
          *((_DWORD *)v368 + 10) = *(_DWORD *)(v3 + 1256);
          *((_DWORD *)v368 + 11) = *(_DWORD *)(v3 + 1260);
          *((_DWORD *)v368 + 12) = *(_DWORD *)(v3 + 1264);
          if (*(_DWORD *)(v3 + 3076))
          {
            v529 = *(_QWORD *)(v3 + 2984);
            v747.tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            v530 = v529 * LODWORD(v747.tv_sec);
            v368 = a2;
            LODWORD(v531) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 38) = (double)v530 / ((double)v531 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 3292))
              goto LABEL_371;
          }
          else
          {
            *((double *)v368 + 38) = (double)*(uint64_t *)(v3 + 2976) * 0.000000001;
            if (*(_DWORD *)(v3 + 3292))
            {
LABEL_371:
              v532 = *(_QWORD *)(v3 + 3200);
              v747.tv_sec = 0;
              mach_timebase_info((mach_timebase_info_t)&v747);
              v533 = v532 * LODWORD(v747.tv_sec);
              v368 = a2;
              LODWORD(v534) = HIDWORD(v747.tv_sec);
              *((double *)a2 + 39) = (double)v533 / ((double)v534 * 1000000.0) * 0.001;
              if (*(_DWORD *)(v3 + 3508))
                goto LABEL_372;
              goto LABEL_402;
            }
          }
          *((double *)v368 + 39) = (double)*(uint64_t *)(v3 + 3192) * 0.000000001;
          if (*(_DWORD *)(v3 + 3508))
          {
LABEL_372:
            v535 = *(_QWORD *)(v3 + 3416);
            v747.tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            v536 = v535 * LODWORD(v747.tv_sec);
            v368 = a2;
            LODWORD(v537) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 40) = (double)v536 / ((double)v537 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 3724))
              goto LABEL_373;
            goto LABEL_403;
          }
LABEL_402:
          *((double *)v368 + 40) = (double)*(uint64_t *)(v3 + 3408) * 0.000000001;
          if (*(_DWORD *)(v3 + 3724))
          {
LABEL_373:
            v538 = *(_QWORD *)(v3 + 3632);
            v747.tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            v539 = v538 * LODWORD(v747.tv_sec);
            v368 = a2;
            LODWORD(v540) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 41) = (double)v539 / ((double)v540 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 3940))
              goto LABEL_374;
            goto LABEL_404;
          }
LABEL_403:
          *((double *)v368 + 41) = (double)*(uint64_t *)(v3 + 3624) * 0.000000001;
          if (*(_DWORD *)(v3 + 3940))
          {
LABEL_374:
            v541 = *(_QWORD *)(v3 + 3848);
            v747.tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            v542 = v541 * LODWORD(v747.tv_sec);
            v368 = a2;
            LODWORD(v543) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 42) = (double)v542 / ((double)v543 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 4156))
              goto LABEL_375;
            goto LABEL_405;
          }
LABEL_404:
          *((double *)v368 + 42) = (double)*(uint64_t *)(v3 + 3840) * 0.000000001;
          if (*(_DWORD *)(v3 + 4156))
          {
LABEL_375:
            v544 = *(_QWORD *)(v3 + 4064);
            v747.tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            v545 = v544 * LODWORD(v747.tv_sec);
            v368 = a2;
            LODWORD(v546) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 45) = (double)v545 / ((double)v546 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 6124))
              goto LABEL_376;
            goto LABEL_406;
          }
LABEL_405:
          *((double *)v368 + 45) = (double)*(uint64_t *)(v3 + 4056) * 0.000000001;
          if (*(_DWORD *)(v3 + 6124))
          {
LABEL_376:
            v547 = *(_QWORD *)(v3 + 6032);
            v747.tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            v548 = v547 * LODWORD(v747.tv_sec);
            v368 = a2;
            LODWORD(v549) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 43) = (double)v548 / ((double)v549 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 6340))
              goto LABEL_377;
            goto LABEL_407;
          }
LABEL_406:
          *((double *)v368 + 43) = (double)*(uint64_t *)(v3 + 6024) * 0.000000001;
          if (*(_DWORD *)(v3 + 6340))
          {
LABEL_377:
            v550 = *(_QWORD *)(v3 + 6248);
            v747.tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            v551 = v550 * LODWORD(v747.tv_sec);
            v368 = a2;
            LODWORD(v552) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 44) = (double)v551 / ((double)v552 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 6556))
              goto LABEL_378;
            goto LABEL_408;
          }
LABEL_407:
          *((double *)v368 + 44) = (double)*(uint64_t *)(v3 + 6240) * 0.000000001;
          if (*(_DWORD *)(v3 + 6556))
          {
LABEL_378:
            v553 = *(_QWORD *)(v3 + 6464);
            v747.tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            v554 = v553 * LODWORD(v747.tv_sec);
            v368 = a2;
            LODWORD(v555) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 46) = (double)v554 / ((double)v555 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 6772))
              goto LABEL_379;
            goto LABEL_409;
          }
LABEL_408:
          *((double *)v368 + 46) = (double)*(uint64_t *)(v3 + 6456) * 0.000000001;
          if (*(_DWORD *)(v3 + 6772))
          {
LABEL_379:
            v556 = *(_QWORD *)(v3 + 6680);
            v747.tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            v557 = v556 * LODWORD(v747.tv_sec);
            v368 = a2;
            LODWORD(v558) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 47) = (double)v557 / ((double)v558 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 6988))
              goto LABEL_380;
            goto LABEL_410;
          }
LABEL_409:
          *((double *)v368 + 47) = (double)*(uint64_t *)(v3 + 6672) * 0.000000001;
          if (*(_DWORD *)(v3 + 6988))
          {
LABEL_380:
            v559 = *(_QWORD *)(v3 + 6896);
            v747.tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            v560 = v559 * LODWORD(v747.tv_sec);
            v368 = a2;
            LODWORD(v561) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 48) = (double)v560 / ((double)v561 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 7204))
              goto LABEL_381;
            goto LABEL_411;
          }
LABEL_410:
          *((double *)v368 + 48) = (double)*(uint64_t *)(v3 + 6888) * 0.000000001;
          if (*(_DWORD *)(v3 + 7204))
          {
LABEL_381:
            v562 = *(_QWORD *)(v3 + 7112);
            v747.tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            v563 = v562 * LODWORD(v747.tv_sec);
            v368 = a2;
            LODWORD(v564) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 49) = (double)v563 / ((double)v564 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 11484))
              goto LABEL_382;
            goto LABEL_412;
          }
LABEL_411:
          *((double *)v368 + 49) = (double)*(uint64_t *)(v3 + 7104) * 0.000000001;
          if (*(_DWORD *)(v3 + 11484))
          {
LABEL_382:
            v565 = *(_QWORD *)(v3 + 11392);
            v747.tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            v566 = v565 * LODWORD(v747.tv_sec);
            v368 = a2;
            LODWORD(v567) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 50) = (double)v566 / ((double)v567 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 8276))
              goto LABEL_383;
            goto LABEL_413;
          }
LABEL_412:
          *((double *)v368 + 50) = (double)*(uint64_t *)(v3 + 11384) * 0.000000001;
          if (*(_DWORD *)(v3 + 8276))
          {
LABEL_383:
            v568 = *(_QWORD *)(v3 + 8184);
            v747.tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            v569 = v568 * LODWORD(v747.tv_sec);
            v368 = a2;
            LODWORD(v570) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 51) = (double)v569 / ((double)v570 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 8492))
              goto LABEL_384;
            goto LABEL_414;
          }
LABEL_413:
          *((double *)v368 + 51) = (double)*(uint64_t *)(v3 + 8176) * 0.000000001;
          if (*(_DWORD *)(v3 + 8492))
          {
LABEL_384:
            v571 = *(_QWORD *)(v3 + 8400);
            v747.tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            v572 = v571 * LODWORD(v747.tv_sec);
            v368 = a2;
            LODWORD(v573) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 52) = (double)v572 / ((double)v573 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 8708))
              goto LABEL_385;
            goto LABEL_415;
          }
LABEL_414:
          *((double *)v368 + 52) = (double)*(uint64_t *)(v3 + 8392) * 0.000000001;
          if (*(_DWORD *)(v3 + 8708))
          {
LABEL_385:
            v574 = *(_QWORD *)(v3 + 8616);
            v747.tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            v575 = v574 * LODWORD(v747.tv_sec);
            v368 = a2;
            LODWORD(v576) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 53) = (double)v575 / ((double)v576 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 8924))
              goto LABEL_386;
            goto LABEL_416;
          }
LABEL_415:
          *((double *)v368 + 53) = (double)*(uint64_t *)(v3 + 8608) * 0.000000001;
          if (*(_DWORD *)(v3 + 8924))
          {
LABEL_386:
            v577 = *(_QWORD *)(v3 + 8832);
            v747.tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            v578 = v577 * LODWORD(v747.tv_sec);
            v368 = a2;
            LODWORD(v579) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 54) = (double)v578 / ((double)v579 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 9140))
              goto LABEL_387;
            goto LABEL_417;
          }
LABEL_416:
          *((double *)v368 + 54) = (double)*(uint64_t *)(v3 + 8824) * 0.000000001;
          if (*(_DWORD *)(v3 + 9140))
          {
LABEL_387:
            v580 = *(_QWORD *)(v3 + 9048);
            v747.tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            v581 = v580 * LODWORD(v747.tv_sec);
            v368 = a2;
            LODWORD(v582) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 55) = (double)v581 / ((double)v582 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 9356))
              goto LABEL_388;
            goto LABEL_418;
          }
LABEL_417:
          *((double *)v368 + 55) = (double)*(uint64_t *)(v3 + 9040) * 0.000000001;
          if (*(_DWORD *)(v3 + 9356))
          {
LABEL_388:
            v583 = *(_QWORD *)(v3 + 9264);
            v747.tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            v584 = v583 * LODWORD(v747.tv_sec);
            v368 = a2;
            LODWORD(v585) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 56) = (double)v584 / ((double)v585 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 7868))
              goto LABEL_389;
            goto LABEL_419;
          }
LABEL_418:
          *((double *)v368 + 56) = (double)*(uint64_t *)(v3 + 9256) * 0.000000001;
          if (*(_DWORD *)(v3 + 7868))
          {
LABEL_389:
            v586 = *(_QWORD *)(v3 + 7776);
            v747.tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            v587 = v586 * LODWORD(v747.tv_sec);
            v368 = a2;
            LODWORD(v588) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 57) = (double)v587 / ((double)v588 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 9916))
              goto LABEL_390;
            goto LABEL_420;
          }
LABEL_419:
          *((double *)v368 + 57) = (double)*(uint64_t *)(v3 + 7768) * 0.000000001;
          if (*(_DWORD *)(v3 + 9916))
          {
LABEL_390:
            v589 = *(_QWORD *)(v3 + 9824);
            v747.tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            v590 = v589 * LODWORD(v747.tv_sec);
            v368 = a2;
            LODWORD(v591) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 58) = (double)v590 / ((double)v591 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 11268))
              goto LABEL_391;
            goto LABEL_421;
          }
LABEL_420:
          *((double *)v368 + 58) = (double)*(uint64_t *)(v3 + 9816) * 0.000000001;
          if (*(_DWORD *)(v3 + 11268))
          {
LABEL_391:
            v592 = *(_QWORD *)(v3 + 11176);
            v747.tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            v593 = v592 * LODWORD(v747.tv_sec);
            v368 = a2;
            LODWORD(v594) = HIDWORD(v747.tv_sec);
            *((double *)a2 + 59) = (double)v593 / ((double)v594 * 1000000.0) * 0.001;
            if (*(_DWORD *)(v3 + 12076))
              goto LABEL_392;
            goto LABEL_422;
          }
LABEL_421:
          *((double *)v368 + 59) = (double)*(uint64_t *)(v3 + 11168) * 0.000000001;
          if (*(_DWORD *)(v3 + 12076))
          {
LABEL_392:
            v595 = *(_QWORD *)(v3 + 11984);
            v747.tv_sec = 0;
            mach_timebase_info((mach_timebase_info_t)&v747);
            v596 = v595 * LODWORD(v747.tv_sec);
            v368 = a2;
            LODWORD(v597) = HIDWORD(v747.tv_sec);
            v598 = v713;
            *((double *)a2 + 60) = (double)v596 / ((double)v597 * 1000000.0) * 0.001;
            v599 = *(_QWORD **)(v3 + 1016);
            if (!v599)
            {
LABEL_394:
              v368[61] = v599;
              *((_DWORD *)v368 + 124) = 0;
              pthread_mutex_unlock(v598);
              if (!*(_DWORD *)(v3 + 984) || !*((_DWORD *)v368 + 72))
                goto LABEL_482;
              v747.tv_sec = 0;
              *(_QWORD *)&v747.tv_usec = 0;
              gettimeofday(&v747, 0);
              tv_sec = v747.tv_sec;
              tv_usec = v747.tv_usec;
              v602 = *((int *)v368 + 73);
              v603 = *(_DWORD *)(v3 + 984) * *((_DWORD *)v368 + 52);
              v604 = (int *)malloc_type_malloc(4 * v602, 0x100004052888210uLL);
              v605 = vl_desc_cluster_similar((uint8x8_t *)v368[25], *((_DWORD *)v368 + 52), *((_DWORD *)v368 + 73), v604, v603, 0x7FFF);
              vl_desc_cluster_centroids((uint8x16_t *)v368[25], *((_DWORD *)v368 + 52), *((_DWORD *)v368 + 73), (char *)v368[25], v604, v605);
              v368[25] = malloc_type_realloc(v368[25], *((int *)v368 + 52) * (uint64_t)v605, 0x100004077774924uLL);
              v606 = (__int16 *)malloc_type_calloc(v605, 2uLL, 0x1000040BDFB0063uLL);
              v607 = v606;
              v608 = *((unsigned int *)v368 + 73);
              if ((int)v608 < 1)
              {
                v609 = 0;
              }
              else
              {
                v609 = 0;
                v610 = (__int16 *)v368[29];
                v611 = v604;
                do
                {
                  v613 = *v610++;
                  v612 = v613;
                  v609 += v613;
                  v614 = *v611++;
                  v606[v614] += v612;
                  --v608;
                }
                while (v608);
              }
              v615 = (int *)malloc_type_malloc(4 * v605, 0x100004052888210uLL);
              v616 = v615;
              *v615 = 0;
              if (v605 > 1)
              {
                v617 = 0;
                v618 = v605 - 1;
                v619 = v615 + 1;
                v620 = v607 + 1;
                do
                {
                  if (*v620 <= 0)
                    __assert_rtn("vl_stats_rebuild_slam_tracks", "vl_stats.c", 805, "slam_tracks_len[i] > 0");
                  v617 += *(v620 - 1);
                  *v619++ = v617;
                  ++v620;
                  --v618;
                }
                while (v618);
              }
              v726 = v602;
              v728 = tv_usec;
              v734 = tv_sec;
              v621 = 3 * v605;
              v622 = (char *)malloc_type_calloc(3 * v605, 4uLL, 0x100004052888210uLL);
              v623 = (float *)malloc_type_malloc(8 * v609, 0x100004052888210uLL);
              v624 = (__int16 *)malloc_type_malloc(4 * v609, 0x1000040BDFB0063uLL);
              if (v605 >= 1)
              {
                if (v621 <= 1)
                  v625 = 1;
                else
                  v625 = 3 * v605;
                memset_pattern16(v622, &unk_210BCACC0, 4 * v625);
              }
              if (v609 >= 1)
              {
                if (v609 >= 0x10)
                {
                  v626 = v609 & 0xFFFFFFF0;
                  v627 = (int32x4_t *)(v623 + 16);
                  v628 = v624 + 8;
                  v629 = vdupq_n_s32(0x7FC00000u);
                  *(_QWORD *)&v630 = -1;
                  *((_QWORD *)&v630 + 1) = -1;
                  v631 = v626;
                  do
                  {
                    v627[-2] = v629;
                    v627[-1] = v629;
                    v627[-4] = v629;
                    v627[-3] = v629;
                    v627[2] = v629;
                    v627[3] = v629;
                    *v627 = v629;
                    v627[1] = v629;
                    v627 += 8;
                    *(v628 - 1) = v630;
                    *v628 = v630;
                    v628 += 2;
                    v631 -= 16;
                  }
                  while (v631);
                  if (v626 == v609)
                    goto LABEL_442;
                }
                else
                {
                  v626 = 0;
                }
                v632 = v609 - v626;
                v633 = &v624[v626];
                v634 = (int32x2_t *)&v623[2 * v626];
                v635 = vdup_n_s32(0x7FC00000u);
                do
                {
                  *v634++ = v635;
                  *v633++ = -1;
                  --v632;
                }
                while (v632);
              }
LABEL_442:
              v636 = *((_DWORD *)a2 + 73);
              if (v636 >= 1)
              {
                v637 = 0;
                v638 = 0;
                v639 = (char *)a2[24];
                v640 = (__int16 *)a2[29];
                do
                {
                  v641 = v604[v637];
                  v642 = &v639[12 * v637];
                  *(_DWORD *)&v622[12 * v641] = *(_DWORD *)v642;
                  v643 = &v622[12 * (_DWORD)v641];
                  *((_DWORD *)v643 + 1) = *((_DWORD *)v642 + 1);
                  *((_DWORD *)v643 + 2) = *((_DWORD *)v642 + 2);
                  if (v640[v637] >= 1)
                  {
                    v644 = 0;
                    v645 = v616[v641];
                    v646 = (float *)a2[27];
                    v647 = v616[v641];
                    v648 = (uint64_t)a2[28] + 2 * v638;
                    v649 = 2 * v638;
                    v650 = &v624[v645];
                    v651 = 2 * v645;
                    do
                    {
                      v623[v651] = v646[v649];
                      v623[v651 + 1] = v646[v649 + 1];
                      v650[v644] = *(_WORD *)(v648 + 2 * v644);
                      ++v644;
                      v649 += 2;
                      v651 += 2;
                    }
                    while ((int)v644 < v640[v637]);
                    v638 += v644;
                    v616[v641] = v647 + v644;
                    v636 = *((_DWORD *)a2 + 73);
                  }
                  ++v637;
                }
                while (v637 < v636);
              }
              if (v605 >= 1)
              {
                if (v621 <= 1)
                  v652 = 1;
                else
                  v652 = v621;
                v653 = (float *)v622;
                do
                {
                  v654 = fabsf(*v653);
                  if (v654 >= INFINITY && v654 <= INFINITY)
                    __assert_rtn("vl_stats_rebuild_slam_tracks", "vl_stats.c", 845, "isfinite(slam_pt3s[i])");
                  ++v653;
                  --v652;
                }
                while (v652);
                if (*v616 != *v607)
                  goto LABEL_488;
                if (v605 != 1)
                {
                  v655 = v605 - 1;
                  v656 = v607 + 1;
                  v657 = v616 + 1;
                  v658 = 0;
                  while (1)
                  {
                    v659 = *v657++;
                    v660 = v659 - v616[v658];
                    v661 = *v656++;
                    if (v660 != v661)
                      break;
                    ++v658;
                    if (!--v655)
                      goto LABEL_463;
                  }
LABEL_488:
                  __assert_rtn("vl_stats_rebuild_slam_tracks", "vl_stats.c", 850, "n_i == slam_tracks_len[i]");
                }
              }
LABEL_463:
              if (v609 <= 0)
              {
                v662 = (unsigned __int16 *)a2[28];
              }
              else
              {
                if (fabsf(*v623) == INFINITY)
                  goto LABEL_473;
                v662 = (unsigned __int16 *)a2[28];
                if ((__int16)*v662 < 0)
LABEL_490:
                  __assert_rtn("vl_stats_rebuild_slam_tracks", "vl_stats.c", 856, "stats->slam_tracks_img_idx[i] >= 0");
                v663 = *((_DWORD *)a2 + 34);
                if (v663 <= *v662)
LABEL_491:
                  __assert_rtn("vl_stats_rebuild_slam_tracks", "vl_stats.c", 857, "stats->slam_tracks_img_idx[i] < stats->num_frames");
                v664 = *v624;
                if (v664 < 0 || v663 <= v664)
LABEL_492:
                  __assert_rtn("vl_stats_rebuild_slam_tracks", "vl_stats.c", 858, "slam_tracks_img_idx[i] >= 0 && slam_tracks_img_idx[i] < stats->num_frames");
                if (v609 != 1)
                {
                  v665 = v609 - 1;
                  v666 = 1;
                  while (1)
                  {
                    v667 = fabsf(v623[v666 * 2]);
                    if (v667 >= INFINITY && v667 <= INFINITY)
                      break;
                    if ((__int16)v662[v666] < 0)
                      goto LABEL_490;
                    if (v663 <= v662[v666])
                      goto LABEL_491;
                    v668 = v624[v666];
                    if (v668 < 0 || v663 <= v668)
                      goto LABEL_492;
                    ++v666;
                    if (!--v665)
                      goto LABEL_481;
                  }
LABEL_473:
                  __assert_rtn("vl_stats_rebuild_slam_tracks", "vl_stats.c", 854, "isfinite(slam_tracks[i*2+0])");
                }
              }
LABEL_481:
              *((_DWORD *)a2 + 73) = v605;
              v669 = a2[24];
              a2[24] = v622;
              v670 = a2[29];
              a2[28] = v624;
              a2[29] = v607;
              v671 = a2[27];
              a2[27] = v623;
              free(v616);
              free(v670);
              free(v662);
              free(v671);
              free(v669);
              free(v604);
              v747.tv_sec = 0;
              *(_QWORD *)&v747.tv_usec = 0;
              gettimeofday(&v747, 0);
              v672 = v747.tv_sec;
              v673 = v747.tv_usec;
              printf("Verbose (toc) : ");
              printf("Sparsified slam tracks: %d => %d (%.1f%%)", v726, *((_DWORD *)a2 + 73), (double)*((int *)a2 + 73) * 100.0 / ((double)v726 + 0.000000001));
              v674 = v672 - v734;
              v368 = a2;
              printf(": %f ms", (float)((float)(1000000 * v674 - v728 + v673) / 1000.0));
              putchar(10);
LABEL_482:
              v747.tv_sec = 0;
              *(_QWORD *)&v747.tv_usec = 0;
              if (!gettimeofday(&v747, 0))
              {
                v682 = v747.tv_usec + 1000000 * v747.tv_sec;
                if ((double)v682 / 1000000.0 > 1514764800.0)
                {
                  v683 = (double)(uint64_t)(v682 - __n);
                  *((double *)v368 + 49) = v683 / 1000000.0;
                  if (*((_DWORD *)v368 + 72))
                  {
                    v684 = v683 / 1000.0;
                    log_col_app((uint64_t)"track dedupe: %.1f ms", v675, v676, v677, v678, v679, v680, v681, SLOBYTE(v684));
                  }
                  return;
                }
              }
LABEL_489:
              __assert_rtn("u_timel", "arch_dtime.c", 118, "ret == 0 && result/1e6 > 1514764800L");
            }
LABEL_393:
            v599 = (_QWORD *)v599[95];
            goto LABEL_394;
          }
LABEL_422:
          v598 = v713;
          *((double *)v368 + 60) = (double)*(uint64_t *)(v3 + 11976) * 0.000000001;
          v599 = *(_QWORD **)(v3 + 1016);
          if (!v599)
            goto LABEL_394;
          goto LABEL_393;
        }
LABEL_288:
        *((_DWORD *)a2 + 13) = 0;
        v372 = v131;
        v718 = v131;
        if ((int)v42 < 1)
          goto LABEL_344;
      }
      else
      {
        *((_DWORD *)a2 + 72) = 0;
        v369 = v720;
        *((_DWORD *)a2 + 13) = 0;
        v372 = 0;
        v718 = 0;
        if ((int)v42 < 1)
          goto LABEL_344;
      }
LABEL_293:
      v373 = 0;
      LODWORD(v374) = 0;
      *(_QWORD *)&v375 = -1;
      *((_QWORD *)&v375 + 1) = -1;
      while (1)
      {
        v376 = &v369[108 * v373];
        v377 = (char *)v368[14] + 16 * v373;
        *v377 = 0;
        v377[1] = 0;
        *((_OWORD *)v368[13] + v373) = *(_OWORD *)(v376 + 55);
        v378 = (uint64_t)v368[15] + 248 * v373;
        v379 = *((_OWORD *)v376 + 1);
        v380 = *((_OWORD *)v376 + 2);
        v381 = *((_OWORD *)v376 + 4);
        *(_OWORD *)(v378 + 32) = *((_OWORD *)v376 + 3);
        *(_OWORD *)(v378 + 48) = v381;
        *(_OWORD *)v378 = v379;
        *(_OWORD *)(v378 + 16) = v380;
        v382 = *((_OWORD *)v376 + 5);
        v383 = *((_OWORD *)v376 + 6);
        v384 = *((_OWORD *)v376 + 8);
        *(_OWORD *)(v378 + 96) = *((_OWORD *)v376 + 7);
        *(_OWORD *)(v378 + 112) = v384;
        *(_OWORD *)(v378 + 64) = v382;
        *(_OWORD *)(v378 + 80) = v383;
        v385 = *((_OWORD *)v376 + 9);
        v386 = *((_OWORD *)v376 + 10);
        v387 = *((_OWORD *)v376 + 12);
        *(_OWORD *)(v378 + 160) = *((_OWORD *)v376 + 11);
        *(_OWORD *)(v378 + 176) = v387;
        *(_OWORD *)(v378 + 128) = v385;
        *(_OWORD *)(v378 + 144) = v386;
        v388 = *((_OWORD *)v376 + 13);
        v389 = *((_OWORD *)v376 + 14);
        v390 = *((_OWORD *)v376 + 15);
        *(double *)(v378 + 240) = v376[32];
        *(_OWORD *)(v378 + 208) = v389;
        *(_OWORD *)(v378 + 224) = v390;
        *(_OWORD *)(v378 + 192) = v388;
        *((_DWORD *)v368[16] + v373) = *((_DWORD *)v376 + 2);
        v391 = *((_QWORD *)v376 + 98);
        *((_WORD *)v368[3] + v373) = v391;
        v392 = v391 - 1;
        if (v391 >= 1)
        {
          v393 = &v369[108 * v373];
          v394 = (char *)(v393 + 84);
          v395 = (int)v374;
          v396 = *((_QWORD *)v376 + 99);
          v397 = (const float *)*((_QWORD *)v393 + 102);
          v398 = *((_QWORD *)v393 + 105);
          v399 = (char *)*v368;
          v400 = v368[1];
          v401 = (char *)v368[2];
          v402 = v368[4];
          if ((unint64_t)v391 >= 0x10)
          {
            v403 = 0;
            v404 = 2 * v374;
            v405 = !is_mul_ok(v392, 0x18uLL);
            v406 = (unint64_t)&v400[2 * (_DWORD)v374];
            if (v406 + 4 + 8 * v392 < v406 + 4
              || v406 + 8 * v392 < v406
              || 2 * ((int)v374 + (int)v392) < v404
              || (v407 = (2 * v374) | 1, ((v392 & 0x40000000) != 0) ^ __OFSUB__(v407 + 2 * v392, v407))
              || v392 >> 31
              || (v408 = (double *)&v399[24 * (int)v374], v409 = 3 * v392, &v408[v409 + 1] < v408 + 1)
              || v405
              || &v408[v409 + 2] < v408 + 2)
            {
              v368 = a2;
            }
            else if (v405 || &v408[v409] < v408 || v405)
            {
              v368 = a2;
            }
            else
            {
              v403 = 0;
              v410 = (unint64_t)(v376 + 84);
              v411 = (unint64_t)(v376 + 96);
              v412 = (unint64_t)&v400[v404];
              v413 = v412 + 8 * v391;
              v415 = (unint64_t)v397 < v413 && v412 < (unint64_t)&v397[3 * v391];
              v417 = v396 < v413 && v412 < v396 + 8 * v391;
              v419 = (unint64_t)&v401[4 * (int)v374] < v398 + 8 * v391 - 4
                  && v398 < (unint64_t)&v401[4 * v391 + 4 * (int)v374];
              if (v410 >= (unint64_t)&v399[24 * v391 + 24 * (int)v374]
                || (unint64_t)&v399[24 * (int)v374] >= v411)
              {
                v368 = a2;
                v372 = v718;
                v369 = v720;
                if (!v415 && !v417 && !v419)
                {
                  v403 = v391 & 0x7FFFFFFFFFFFFFF8;
                  v374 = (v391 & 0xFFFFFFFFFFFFFFF8) + (int)v374;
                  v421 = (int *)(v398 + 32);
                  v422 = v397;
                  v423 = v396;
                  v424 = v391 & 0xFFFFFFFFFFFFFFF8;
                  v425 = &v402[v395];
                  v426 = (float64x2_t *)&v401[4 * v395];
                  do
                  {
                    v427 = v422;
                    v755 = vld3q_f32(v427);
                    v427 += 12;
                    v428 = vcvtq_f64_f32(*(float32x2_t *)v755.val[0].f32);
                    v756 = vld3q_f32(v427);
                    v429 = vcvt_hight_f64_f32(v755.val[0]);
                    v430 = vcvtq_f64_f32(*(float32x2_t *)v756.val[0].f32);
                    v431 = vcvt_hight_f64_f32(v756.val[0]);
                    v432 = vcvt_hight_f64_f32(v756.val[1]);
                    v433 = vcvt_hight_f64_f32(v755.val[1]);
                    v434 = vcvtq_f64_f32(*(float32x2_t *)v756.val[1].f32);
                    v435 = vcvtq_f64_f32(*(float32x2_t *)v755.val[1].f32);
                    v436 = vcvt_hight_f64_f32(v756.val[2]);
                    v437 = vcvt_hight_f64_f32(v755.val[2]);
                    v438 = vcvtq_f64_f32(*(float32x2_t *)v755.val[2].f32);
                    v439 = (const double *)v394;
                    v440 = vcvtq_f64_f32(*(float32x2_t *)v756.val[2].f32);
                    v755.val[1] = (float32x4_t)vld1q_dup_f64(v439++);
                    v755.val[2] = (float32x4_t)vmlaq_f64(vmulq_n_f64(v432, *v439), v431, (float64x2_t)v755.val[1]);
                    v756.val[0] = (float32x4_t)vmlaq_f64(vmulq_n_f64(v434, *v439), v430, (float64x2_t)v755.val[1]);
                    v755.val[0] = (float32x4_t)vmlaq_f64(vmulq_n_f64(v433, *v439), v429, (float64x2_t)v755.val[1]);
                    v441 = vmlaq_f64(vmulq_n_f64(v435, *v439), v428, (float64x2_t)v755.val[1]);
                    v755.val[1].i64[0] = *((_QWORD *)v394 + 2);
                    v442 = *((double *)v394 + 3);
                    v443 = vmlaq_n_f64(v441, v438, *(double *)v755.val[1].i64);
                    v755.val[0] = (float32x4_t)vmlaq_n_f64((float64x2_t)v755.val[0], v437, *(double *)v755.val[1].i64);
                    v444 = (const double *)(v394 + 72);
                    v756.val[0] = (float32x4_t)vmlaq_n_f64((float64x2_t)v756.val[0], v440, *(double *)v755.val[1].i64);
                    v756.val[1] = (float32x4_t)vld1q_dup_f64(v444);
                    v756.val[2].i64[0] = *((_QWORD *)v394 + 4);
                    v445 = *((double *)v394 + 5);
                    v446 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v432, *(double *)v756.val[2].i64), v431, v442), v436, v445);
                    v447 = (const double *)(v394 + 80);
                    v448 = vld1q_dup_f64(v447);
                    v755.val[1] = (float32x4_t)vaddq_f64((float64x2_t)v756.val[1], vmlaq_n_f64((float64x2_t)v755.val[2], v436, *(double *)v755.val[1].i64));
                    v449 = *((double *)v394 + 6);
                    v450 = *((double *)v394 + 7);
                    v451 = vmlaq_n_f64(vmulq_n_f64(v432, v450), v431, v449);
                    v431.f64[0] = *((float64_t *)v394 + 8);
                    v755.val[2] = (float32x4_t)vaddq_f64(v448, v446);
                    v452 = vmlaq_n_f64(v451, v436, v431.f64[0]);
                    v453 = (const double *)(v394 + 88);
                    v454 = vld1q_dup_f64(v453);
                    v455 = vaddq_f64(v454, v452);
                    v754.val[0] = vaddq_f64((float64x2_t)v756.val[1], (float64x2_t)v756.val[0]);
                    v754.val[1] = vaddq_f64(v448, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v434, *(double *)v756.val[2].i64), v430, v442), v440, v445));
                    v754.val[2] = vaddq_f64(v454, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v434, v450), v430, v449), v440, v431.f64[0]));
                    v757.val[0] = vaddq_f64((float64x2_t)v756.val[1], (float64x2_t)v755.val[0]);
                    v757.val[1] = vaddq_f64(v448, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v433, *(double *)v756.val[2].i64), v429, v442), v437, v445));
                    v757.val[2] = vaddq_f64(v454, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v433, v450), v429, v449), v437, v431.f64[0]));
                    v753.val[0] = vaddq_f64((float64x2_t)v756.val[1], v443);
                    v753.val[1] = vaddq_f64(v448, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v435, *(double *)v756.val[2].i64), v428, v442), v438, v445));
                    v753.val[2] = vaddq_f64(v454, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v435, v450), v428, v449), v438, v431.f64[0]));
                    v456 = v408;
                    v457 = v408 + 12;
                    v458 = v408 + 18;
                    vst3q_f64(v456, v753);
                    v456 += 6;
                    vst3q_f64(v457, v754);
                    vst3q_f64(v458, *(float64x2x3_t *)((char *)&v755 + 16));
                    vst3q_f64(v456, v757);
                    v459 = v421 - 4;
                    v460 = v421 - 2;
                    v461 = v421 + 2;
                    v462 = v421 + 4;
                    v757.val[2] = *(float64x2_t *)v423;
                    v757.val[1] = *(float64x2_t *)(v423 + 16);
                    v463 = *(_OWORD *)(v423 + 48);
                    v464 = (uint64_t)&v400[v407 - 1];
                    *(_OWORD *)(v464 + 32) = *(_OWORD *)(v423 + 32);
                    *(_OWORD *)(v464 + 48) = v463;
                    *(float64x2_t *)v464 = v757.val[2];
                    *(float64x2_t *)(v464 + 16) = v757.val[1];
                    LODWORD(v757.val[1].f64[0]) = *(v421 - 8);
                    HIDWORD(v757.val[1].f64[0]) = *(v421 - 6);
                    v465 = v421 + 6;
                    v466 = *v421;
                    v421 += 16;
                    LODWORD(v757.val[2].f64[0]) = v466;
                    HIDWORD(v757.val[2].f64[0]) = *v461;
                    LODWORD(v757.val[1].f64[1]) = *v459;
                    LODWORD(v757.val[2].f64[1]) = *v462;
                    HIDWORD(v757.val[2].f64[1]) = *v465;
                    HIDWORD(v757.val[1].f64[1]) = *v460;
                    *v426 = v757.val[1];
                    v426[1] = v757.val[2];
                    v426 += 2;
                    *v425++ = v375;
                    v408 += 24;
                    v407 += 16;
                    v423 += 64;
                    v422 += 24;
                    v424 -= 8;
                  }
                  while (v424);
                  v395 = v374;
                  v3 = a1;
                  v368 = a2;
                  v372 = v718;
                  v369 = v720;
                  if (v391 == v403)
                    goto LABEL_294;
                }
              }
              else
              {
                v368 = a2;
                v372 = v718;
                v369 = v720;
              }
            }
          }
          else
          {
            v403 = 0;
          }
          v467 = 0;
          v468 = &v401[4 * v395];
          v469 = 2 * v395;
          v470 = (float *)&v397[3 * v403 + 2];
          v471 = (int *)(v398 + 8 * v403);
          v472 = (double *)&v399[24 * v395 + 16];
          v473 = v391 - v403;
          v474 = (int *)(v396 + 8 * v403 + 4);
          do
          {
            v475 = *(v470 - 2);
            v476 = *(v470 - 1);
            v477 = *v470;
            v470 += 3;
            v478 = *((double *)v394 + 4) * v476 + *((double *)v394 + 3) * v475 + *((double *)v394 + 5) * v477;
            v479 = *((double *)v394 + 8);
            v480 = *((double *)v394 + 9)
                 + *((double *)v394 + 1) * v476
                 + *(double *)v394 * v475
                 + *((double *)v394 + 2) * v477;
            v481 = *((double *)v394 + 7) * v476 + *((double *)v394 + 6) * v475;
            v482 = *((double *)v394 + 11);
            v483 = *((double *)v394 + 10) + v478;
            *(v472 - 2) = v480;
            *(v472 - 1) = v483;
            *v472 = v482 + v481 + v479 * v477;
            v472 += 3;
            v400[v469] = *(v474 - 1);
            v484 = *v474;
            v474 += 2;
            v400[v469 + 1] = v484;
            v485 = *v471;
            v471 += 2;
            *(_DWORD *)&v468[4 * v467] = v485;
            v402[v395 + v467++] = -1;
            v469 += 2;
          }
          while (v473 != v467);
          LODWORD(v374) = v395 + v467;
        }
LABEL_294:
        if (++v373 == v372)
          goto LABEL_344;
      }
    }
    if (v42 == 1)
    {
      v132 = 0;
      v355 = 0;
    }
    else
    {
      v356 = 0;
      v357 = 0;
      v355 = v42 & 0xFFFFFFFFFFFFFFFELL;
      v358 = v42 & 0xFFFFFFFFFFFFFFFELL;
      v359 = v12;
      do
      {
        v356 += *((_DWORD *)v359 + 156);
        v357 += *((_DWORD *)v359 + 372);
        v359 += 216;
        v358 -= 2;
      }
      while (v358);
      v132 = v357 + v356;
      if (v42 == v355)
      {
LABEL_274:
        if ((unint64_t)v42 >= 2)
        {
          v363 = 0;
          v364 = 0;
          v362 = v42 & 0xFFFFFFFFFFFFFFFELL;
          v365 = v42 & 0xFFFFFFFFFFFFFFFELL;
          v366 = v12;
          do
          {
            v363 += *((_DWORD *)v366 + 196);
            v364 += *((_DWORD *)v366 + 412);
            v366 += 216;
            v365 -= 2;
          }
          while (v365);
          v133 = v364 + v363;
          if (v42 == v362)
            goto LABEL_281;
        }
        else
        {
          v133 = 0;
          v362 = 0;
        }
        v367 = 864 * v362 + 784;
        do
        {
          v133 += *(_DWORD *)((char *)v12 + v367);
          ++v362;
          v367 += 864;
        }
        while (v42 != v362);
LABEL_281:
        v130 = 1;
        goto LABEL_282;
      }
    }
    v360 = v42 - v355;
    v361 = &v12[108 * v355 + 78];
    do
    {
      v132 += *(_DWORD *)v361;
      v361 += 108;
      --v360;
    }
    while (v360);
    goto LABEL_274;
  }
  v17 = *(_QWORD *)(a1 + 7208);
  v704 = *(_QWORD *)(a1 + 11512);
  *(_DWORD *)__s = 0;
  *(_QWORD *)&v752 = 0;
  v750 = 0u;
  v751 = 0u;
  v748 = 0u;
  v747 = (timeval)0;
  DWORD2(v748) = 4;
  *(_QWORD *)&v748 = 0x800000008;
  *(_QWORD *)&v749 = jenkins_hash;
  *((_QWORD *)&v749 + 1) = MEMORY[0x24BDAEE78];
  hash_map_grow((unsigned int *)&v747, 50);
  v18 = *(_QWORD *)(v3 + 7232);
  if (v18 < 1)
  {
    v19 = 0;
    goto LABEL_62;
  }
  if (v18 == 1)
  {
    v19 = 0;
    v20 = 0;
LABEL_60:
    v47 = v18 - v20;
    v48 = (int *)(*(_QWORD *)(v3 + 7240) + 80 * v20);
    do
    {
      v49 = *v48;
      v48 += 20;
      v19 += v49;
      --v47;
    }
    while (v47);
    goto LABEL_62;
  }
  v43 = 0;
  v44 = 0;
  v20 = v18 & 0xFFFFFFFFFFFFFFFELL;
  v45 = v18 & 0xFFFFFFFFFFFFFFFELL;
  v46 = *(_DWORD **)(v3 + 7240);
  do
  {
    v43 += *v46;
    v44 += v46[20];
    v46 += 40;
    v45 -= 2;
  }
  while (v45);
  v19 = v44 + v43;
  if (v18 != v20)
    goto LABEL_60;
LABEL_62:
  v2[1] = malloc_type_malloc(8 * v19, 0x96E97201uLL);
  v700 = v19;
  *v2 = malloc_type_malloc(24 * v19, 0x3AF1A546uLL);
  v702 = v19;
  v2[2] = malloc_type_malloc(4 * v19, 0x100004052888210uLL);
  a2[3] = malloc_type_malloc(2 * (int)v17, 0x1000040BDFB0063uLL);
  a2[13] = malloc_type_malloc(16 * (int)v17, 0x1000040451B5BE8uLL);
  a2[14] = malloc_type_malloc(16 * (int)v17, 0x7F76BDEEuLL);
  v50 = a2;
  a2[15] = malloc_type_malloc(248 * (int)v17, 0x10000409B83B951uLL);
  a2[16] = malloc_type_malloc(4 * (int)v17, 0x100004052888210uLL);
  *(_DWORD *)__s = 0;
  if ((int)v17 >= 1)
  {
    v51 = 0;
    do
    {
      v52 = *(_QWORD *)(v3 + 7240);
      v53 = (uint64_t *)(v52 + 80 * v51);
      v54 = *(_QWORD *)(v3 + 7288);
      v55 = *v53;
      *((_WORD *)a2[3] + v51) = *v53;
      *((_OWORD *)a2[13] + v51) = *(_OWORD *)(*(_QWORD *)(v3 + 7264) + 16 * v51);
      v56 = (uint64_t)a2[15] + 248 * v51;
      v57 = *(_QWORD *)(v3 + 7312) + 248 * v51;
      v58 = *(_OWORD *)(v57 + 112);
      v60 = *(_OWORD *)(v57 + 64);
      v59 = *(_OWORD *)(v57 + 80);
      *(_OWORD *)(v56 + 96) = *(_OWORD *)(v57 + 96);
      *(_OWORD *)(v56 + 112) = v58;
      *(_OWORD *)(v56 + 64) = v60;
      *(_OWORD *)(v56 + 80) = v59;
      v61 = *(_OWORD *)(v57 + 176);
      v63 = *(_OWORD *)(v57 + 128);
      v62 = *(_OWORD *)(v57 + 144);
      *(_OWORD *)(v56 + 160) = *(_OWORD *)(v57 + 160);
      *(_OWORD *)(v56 + 176) = v61;
      *(_OWORD *)(v56 + 128) = v63;
      *(_OWORD *)(v56 + 144) = v62;
      v65 = *(_OWORD *)(v57 + 208);
      v64 = *(_OWORD *)(v57 + 224);
      v66 = *(_OWORD *)(v57 + 192);
      *(_QWORD *)(v56 + 240) = *(_QWORD *)(v57 + 240);
      *(_OWORD *)(v56 + 208) = v65;
      *(_OWORD *)(v56 + 224) = v64;
      *(_OWORD *)(v56 + 192) = v66;
      v67 = *(_OWORD *)v57;
      v68 = *(_OWORD *)(v57 + 16);
      v69 = *(_OWORD *)(v57 + 48);
      *(_OWORD *)(v56 + 32) = *(_OWORD *)(v57 + 32);
      *(_OWORD *)(v56 + 48) = v69;
      *(_OWORD *)v56 = v67;
      *(_OWORD *)(v56 + 16) = v68;
      *((_DWORD *)a2[16] + v51) = *(_DWORD *)(*(_QWORD *)(v3 + 7336) + 4 * v51);
      if ((int)v55 >= 1)
      {
        v70 = 0;
        v71 = 0;
        v72 = (double *)(v54 + 112 * v51);
        v73 = v52 + 80 * v51;
        v74 = (_QWORD *)(v73 + 32);
        v75 = (_QWORD *)(v73 + 56);
        v76 = *(_DWORD *)__s;
        v77 = 12 * v55;
        do
        {
          v78 = v53[1];
          v79 = (float *)(*v74 + v71);
          v80 = *(_DWORD *)(*v75 + v70 + 4);
          v81 = *v79;
          v82 = v79[1];
          v83 = v79[2];
          info[0] = 0;
          v84 = v72[9] + v72[1] * v82 + *v72 * v81 + v72[2] * v83;
          v85 = v72[4] * v82 + v72[3] * v81 + v72[5] * v83;
          v86 = (_DWORD *)(v78 + v70);
          v87 = v72[7] * v82 + v72[6] * v81;
          v88 = v72[10] + v85;
          v89 = v72[11] + v87 + v72[8] * v83;
          v90 = a2[1];
          v90[2 * v76] = *v86;
          v90[2 * v76 + 1] = v86[1];
          v91 = *a2;
          *((double *)*a2 + 3 * v76) = v84;
          v92 = (uint64_t)v91 + 24 * v76;
          *(double *)(v92 + 8) = v88;
          *(double *)(v92 + 16) = v89;
          *((_DWORD *)a2[2] + v76) = *(_DWORD *)(*v75 + v70);
          info[0].numer = v51;
          info[0].denom = v80;
          hash_map_add((uint64_t)&v747, info, __s);
          v76 = ++*(_DWORD *)__s;
          v71 += 12;
          v70 += 8;
        }
        while (v77 != v71);
      }
      ++v51;
      v3 = a1;
    }
    while (v51 != v17);
  }
  v93 = v704;
  v94 = v704;
  v95 = *(_QWORD *)(v3 + 14424);
  if (!v95)
    goto LABEL_175;
  v96 = *(_DWORD *)(v3 + 4);
  if (v96 == 1)
    v97 = 64;
  else
    v97 = 256;
  v98 = *(_DWORD *)(v95 + 368);
  v99 = *(_QWORD *)(v3 + 7208);
  v731 = *(_DWORD *)(v95 + 588);
  v100 = *(_DWORD *)(v95 + 592);
  *((_DWORD *)a2 + 72) = *(_DWORD *)(v3 + 7360);
  *((_DWORD *)a2 + 13) = *(_DWORD *)(v3 + 7364);
  v101 = *(_DWORD *)(v3 + 660);
  if (v101 >= v98)
    v102 = v98;
  else
    v102 = *(_DWORD *)(v3 + 660);
  if (v101)
    v103 = v102;
  else
    v103 = v98;
  *((_DWORD *)a2 + 73) = v103;
  *((_DWORD *)a2 + 34) = v99;
  __na = v97;
  *((_DWORD *)a2 + 52) = v97;
  *((_DWORD *)a2 + 74) = *(_DWORD *)(v3 + 7352) - v99;
  v104 = *(double *)(v3 + 14432);
  v105 = *(double *)(v3 + 14480);
  v106 = *(double *)(v3 + 14440);
  v107 = *(double *)(v3 + 14488);
  v108 = *(double *)(v3 + 14448);
  v109 = *(double *)(v3 + 14496);
  v697 = v100;
  v110 = (double *)(*(_QWORD *)(v95 + 304) + 880 * v100);
  v111 = v110[1];
  v113 = v110[2];
  v112 = v110[3];
  v114 = v104 * *v110 + 0.0 + v106 * v111 + v108 * v113;
  v116 = v110[4];
  v115 = v110[5];
  v117 = v104 * v112 + 0.0 + v106 * v116 + v108 * v115;
  v119 = v110[6];
  v118 = v110[7];
  v120 = v104 * v119 + 0.0 + v106 * v118;
  v121 = v110[8];
  v714 = v110[9];
  v716 = *(double *)(v3 + 14456);
  v698 = v117;
  v699 = v120 + v108 * v121;
  v122 = *(double *)(v3 + 14464);
  v701 = *(double *)(v3 + 14472);
  v123 = v716 * *v110 + 0.0 + v122 * v111 + v701 * v113;
  v124 = v105 * *v110 + 0.0 + v107 * v111 + v109 * v113;
  v719 = v118;
  v722 = v115;
  v125 = v105 * v112 + 0.0 + v107 * v116 + v109 * v115;
  v688 = v121;
  v126 = v105 * v119 + 0.0 + v107 * v118 + v109 * v121;
  v689 = v110[11];
  v690 = v126;
  v127 = v125;
  v128 = v124;
  v703 = v99;
  v686 = v96;
  v695 = *(double *)(v3 + 14512);
  v696 = *(double *)(v3 + 14504);
  v694 = *(double *)(v3 + 14520);
  v687 = v110[10];
  v711 = v123;
  v705 = v119;
  v707 = v116;
  if (fabs(v124) >= 1.0)
  {
    if (v124 <= -1.0)
    {
      v691 = atan2(v117, v699) + 0.0;
      v692 = 0.0;
      *(double *)&v129 = 1.57079633;
    }
    else
    {
      v691 = atan2(-v117, -v699);
      v692 = 0.0;
      *(double *)&v129 = -1.57079633;
    }
    v693 = *(double *)&v129;
  }
  else
  {
    v693 = asin(-v124);
    v692 = atan2(v123, v114);
    v691 = atan2(v125, v126);
  }
  v134 = v114;
  v135 = v716 * v112 + 0.0;
  v136 = (int32x4_t *)malloc_type_calloc(v103, 4uLL, 0x100004052888210uLL);
  v137 = v136;
  v138 = *(_QWORD **)(v3 + 14424);
  v139 = *(_DWORD *)(v3 + 1032);
  v140 = *(_DWORD *)(v3 + 1036);
  v141 = *(_DWORD *)(v3 + 664);
  v142 = *((unsigned int *)a2 + 73);
  v143 = v138[46];
  v144 = v128;
  if ((int)v142 >= 1 && (_DWORD)v142 == (_DWORD)v143)
  {
    if (v142 >= 8)
    {
      v145 = v142 & 0x7FFFFFF8;
      v146 = (int32x4_t)xmmword_210BCABD0;
      v147 = v136 + 1;
      v148.i64[0] = 0x400000004;
      v148.i64[1] = 0x400000004;
      v149.i64[0] = 0x800000008;
      v149.i64[1] = 0x800000008;
      v150 = v142 & 0xFFFFFFF8;
      do
      {
        v147[-1] = v146;
        *v147 = vaddq_s32(v146, v148);
        v146 = vaddq_s32(v146, v149);
        v147 += 2;
        v150 -= 8;
      }
      while (v150);
      if (v145 == v142)
        goto LABEL_94;
    }
    else
    {
      v145 = 0;
    }
    do
    {
      v136->i32[v145] = v145;
      ++v145;
    }
    while (v142 != v145);
  }
LABEL_94:
  v151 = v135 + v122 * v707;
  v152 = v716 * v705 + 0.0;
  v685 = v139;
  v706 = (int)v142;
  v153 = (unint64_t)(ceil((double)v139 / (double)v141) * ceil((double)v140 / (double)v141));
  if (v153)
  {
    v154 = 0;
    v155 = 0;
    v156 = 0;
    v157 = 0;
    v158 = v127;
    v159 = v722;
    do
    {
      v161 = v155 + 1;
      if (v155 >= v156)
      {
        v162 = 2 * v156;
        if (!v156)
          v162 = 10;
        if (v162 <= v155)
          v156 = v155 + 1;
        else
          v156 = v162;
        v163 = (void **)malloc_type_realloc(v157, 24 * v156, 0x20C2751EuLL);
        v144 = v128;
        v158 = v127;
        v157 = v163;
      }
      v160 = &v157[v154];
      *v160 = 0;
      v160[1] = 0;
      v160[2] = 0;
      v154 += 3;
      v155 = v161;
    }
    while (v153 != v161);
  }
  else
  {
    v157 = 0;
    v158 = v127;
    v159 = v722;
  }
  v164 = v151 + v701 * v159;
  v165 = v152 + v122 * v719;
  v166 = v134 * v714 + 0.0;
  v167 = v711 * v714 + 0.0;
  v168 = v144 * v714 + 0.0;
  v721 = v137;
  if ((int)v143 < 1)
  {
    v708 = 0;
    v171 = v693;
  }
  else
  {
    v169 = 0;
    v708 = 0;
    v715 = (pthread_mutex_t *)v143;
    v717 = v157;
    v170 = (float)v141;
    v712 = v685 / v141;
    v171 = v693;
    do
    {
      v174 = 0;
      v723 = v169;
      v175 = (uint64_t *)(v138[40] + 24 * (_QWORD)v169);
      do
      {
        info[0] = 0;
        v177 = *(unsigned int *)(v175[1] + 4 * v174);
        v178 = *(_DWORD *)(v175[1] + 4 * v174) & 0x7FFF;
        v179 = v177 >> 15;
        v180 = v138[38];
        info[0] = (mach_timebase_info)(v177 & 0x7FFF);
        info[0].denom = v177 >> 15;
        v181 = ((uint64_t (*)(mach_timebase_info *, _QWORD))v749)(info, (int)v748);
        if (LODWORD(v747.tv_sec))
        {
          v182 = v181;
          v183 = *(_QWORD *)(v750 + 8 * (v181 % LODWORD(v747.tv_sec)));
          if (v183)
          {
            while (v182 != *(_DWORD *)(v183 + 8)
                 || (*((unsigned int (**)(mach_timebase_info *, _QWORD, _QWORD))&v749 + 1))(info, *(_QWORD *)v183, (int)v748))
            {
              v183 = *(_QWORD *)(v183 + 24);
              if (!v183)
                goto LABEL_111;
            }
            if (*(_QWORD *)(v183 + 16))
            {
              if (v708 >= (int)v706)
              {
                v157 = v717;
                v137 = v721;
                v158 = v127;
                v173 = v723;
              }
              else
              {
                v137 = v721;
                v173 = v723;
                v721->i32[v708++] = (int)v723;
                v158 = v127;
                v157 = v717;
              }
              goto LABEL_109;
            }
          }
        }
LABEL_111:
        ++v174;
        v176 = *v175;
      }
      while (*v175 > v174);
      v184 = (float *)(*(_QWORD *)(v180 + 880 * v178 + 376) + 8 * v179);
      v185 = (int)(vcvtms_s32_f32(*v184 / v170) + v712 * vcvtms_s32_f32(v184[1] / v170));
      v157 = v717;
      v186 = (uint64_t *)&v717[3 * v185];
      v187 = *v186;
      v188 = v186[2];
      if (*v186 < v188)
      {
        v137 = v721;
      }
      else
      {
        v189 = 2 * v188;
        v26 = v188 == 0;
        v190 = 32;
        if (!v26)
          v190 = v189;
        if (v190 <= v187)
          v191 = v187 + 1;
        else
          v191 = v190;
        v137 = v721;
        if (v191)
        {
          v717[3 * (int)v185 + 1] = malloc_type_realloc(v717[3 * (int)v185 + 1], 8 * v191, 0xE3AC5CB4uLL);
          v187 = *v186;
        }
        v186[2] = v191;
      }
      v158 = v127;
      *v186 = v187 + 1;
      v172 = (char *)v717[3 * (int)v185 + 1] + 8 * v187;
      v173 = v723;
      *v172 = v176;
      v172[1] = (_DWORD)v723;
LABEL_109:
      v169 = (pthread_mutex_t *)((char *)&v173->__sig + 1);
    }
    while (v169 != v715);
  }
  v192 = v165 + v701 * v688;
  v193 = v167 + v164 * v687;
  v194 = v168 + v158 * v687;
  v3 = a1;
  if (v153)
  {
    v195 = v157 + 1;
    v196 = v153;
    do
    {
      v197 = (size_t)*(v195 - 1);
      if (v197)
        qsort(*v195, v197, 8uLL, (int (__cdecl *)(const void *, const void *))int_pair_cmp_dec);
      v195 += 3;
      --v196;
    }
    while (v196);
  }
  v198 = v193 + v192 * v689;
  v199 = (int *)malloc_type_calloc(v153, 4uLL, 0x100004052888210uLL);
  v200 = v199;
  if (v708 < (int)v706)
  {
    LODWORD(v201) = 0;
    v202 = v708;
    do
    {
      v204 = v199[(int)v201];
      if ((uint64_t)v157[3 * (int)v201] > v204)
      {
        v203 = (int)v201;
      }
      else
      {
        do
        {
          v201 = ((int)v201 + 1) % v153;
          v204 = v199[(int)v201];
        }
        while ((uint64_t)v157[3 * (int)v201] <= v204);
        v203 = (int)v201;
      }
      v137->i32[v202] = *((_DWORD *)v157[3 * (int)v203 + 1] + 2 * v204 + 1);
      ++v199[v203];
      ++v202;
    }
    while (v202 != v706);
  }
  v205 = v695 - v198;
  if (v153)
  {
    v206 = v157 + 1;
    do
    {
      v207 = *v206;
      v206 += 3;
      free(v207);
      --v153;
    }
    while (v153);
  }
  free(v157);
  free(v200);
  *((double *)a2 + 18) = v696 - (v166 + v698 * v687 + v699 * v689);
  *((double *)a2 + 19) = v205;
  *((double *)a2 + 20) = v694 - (v194 + v690 * v689);
  *((long double *)a2 + 21) = v692;
  *((long double *)a2 + 22) = v171;
  *((double *)a2 + 23) = v691;
  a2[24] = malloc_type_malloc(12 * *((int *)a2 + 73), 0x2786B20BuLL);
  a2[25] = malloc_type_malloc(*((int *)a2 + 73) * (uint64_t)*((int *)a2 + 52), 0x837C128FuLL);
  a2[29] = malloc_type_malloc(2 * *((int *)a2 + 73), 0x1000040BDFB0063uLL);
  a2[4] = malloc_type_malloc(2 * v700, 0x1000040BDFB0063uLL);
  v208 = *((_DWORD *)a2 + 73);
  if (v208 < 1)
  {
    v220 = 0;
  }
  else
  {
    v209 = 0;
    v210 = 0;
    v211 = 0;
    if (v686 == 1)
      v212 = 6;
    else
      v212 = 8;
    do
    {
      v213 = v137->i32[v210];
      v214 = *(_QWORD **)(v3 + 14424);
      v215 = v214[40];
      v216 = (_DWORD *)(v214[47] + 12 * v213);
      v217 = (char *)a2[24] + v209;
      *v217 = *v216;
      v217[1] = v216[1];
      v217[2] = v216[2];
      v218 = *(__int16 *)(v215 + 24 * v213);
      *((_WORD *)a2[29] + v210) = *(_WORD *)(v215 + 24 * v213);
      if (v218)
      {
        v219 = **(_DWORD **)(v215 + 24 * v213 + 8);
        memcpy((char *)a2[25] + (int)((_DWORD)v210 << v212), (const void *)(*(_QWORD *)(v214[38] + 880 * (v219 & 0x7FFF) + 384) + (v219 >> 15 << v212)), __na);
        v208 = *((_DWORD *)a2 + 73);
      }
      v211 += v218;
      ++v210;
      v209 += 12;
      v3 = a1;
    }
    while (v210 < v208);
    v220 = v211;
  }
  a2[27] = malloc_type_malloc(8 * v220, 0x9F74F4A7uLL);
  v221 = 2 * v220;
  v222 = a2;
  a2[28] = malloc_type_malloc(v221, 0x1000040BDFB0063uLL);
  v223 = *((_DWORD *)a2 + 73);
  if (v223 >= 1)
  {
    v224 = 0;
    LODWORD(v225) = 0;
    do
    {
      v226 = v137->i32[v224];
      v227 = *(_QWORD *)(*(_QWORD *)(v3 + 14424) + 320);
      v228 = (uint64_t *)(v227 + 24 * v226);
      if (*v228 >= 1)
      {
        v229 = 0;
        v230 = (_QWORD *)(v227 + 24 * v226 + 8);
        v225 = (int)v225;
        do
        {
          info[0] = 0;
          v231 = *(_DWORD *)(*v230 + 4 * v229) & 0x7FFF;
          v232 = (unint64_t)*(unsigned int *)(*v230 + 4 * v229) >> 15;
          v233 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 14424) + 304) + 880 * v231 + 376) + 8 * v232);
          v234 = v222[27];
          v234[2 * (_DWORD)v225] = *v233;
          v234[2 * (int)v225 + 1] = v233[1];
          *((_WORD *)v222[28] + v225) = v231;
          info[0].numer = (int)(v231 - (v697 - v703 + 1)) % v731;
          info[0].denom = v232;
          v235 = ((uint64_t (*)(mach_timebase_info *, _QWORD))v749)(info, (int)v748);
          if (LODWORD(v747.tv_sec))
          {
            v236 = v235;
            v237 = *(_QWORD *)(v750 + 8 * (v235 % LODWORD(v747.tv_sec)));
            if (v237)
            {
              while (v236 != *(_DWORD *)(v237 + 8)
                   || (*((unsigned int (**)(mach_timebase_info *, _QWORD, _QWORD))&v749 + 1))(info, *(_QWORD *)v237, (int)v748))
              {
                v237 = *(_QWORD *)(v237 + 24);
                if (!v237)
                  goto LABEL_162;
              }
              v238 = *(int **)(v237 + 16);
              if (v238)
                *((_WORD *)a2[4] + *v238) = v224;
            }
          }
LABEL_162:
          ++v225;
          ++v229;
          v222 = a2;
        }
        while (*v228 > v229);
        v223 = *((_DWORD *)a2 + 73);
        v137 = v721;
      }
      ++v224;
    }
    while (v224 < v223);
  }
  a2[32] = malloc_type_malloc(4 * v703, 0x100004052888210uLL);
  v239 = 48 * v703;
  a2[33] = malloc_type_malloc(v239, 0xFFEAD3A3uLL);
  v50 = a2;
  a2[34] = malloc_type_malloc(36 * v703, 0x51322E9DuLL);
  a2[35] = malloc_type_malloc(8 * v703, 0x71992A8CuLL);
  a2[30] = malloc_type_malloc(v239, 0xFD21E773uLL);
  a2[31] = malloc_type_malloc(8 * v703, 0x100004000313F17uLL);
  if (v703 >= 1)
  {
    v240 = 0;
    v241 = 0;
    v242 = 0;
    v243 = 0;
    do
    {
      v244 = (__int128 *)(*(_QWORD *)(v3 + 7216) + v240);
      v245 = *(_QWORD *)(*(_QWORD *)(v3 + 14424) + 304) + 880 * ((v697 + v731 - v703 + 1 + (int)v243) % v731);
      *((_DWORD *)a2[32] + v243) = *((_DWORD *)v244 + 41);
      v246 = (char *)a2[33] + v241;
      v247 = *(__int128 *)((char *)v244 + 116);
      v248 = *(__int128 *)((char *)v244 + 148);
      v246[1] = *(__int128 *)((char *)v244 + 132);
      v246[2] = v248;
      *v246 = v247;
      v249 = (uint64_t)a2[34] + 4 * v242;
      v250 = *v244;
      v251 = v244[1];
      *(_DWORD *)(v249 + 32) = *((_DWORD *)v244 + 8);
      *(_OWORD *)v249 = v250;
      *(_OWORD *)(v249 + 16) = v251;
      v252 = 8 * v243;
      *(_QWORD *)((char *)a2[35] + v252) = *(_QWORD *)((char *)v244 + 36);
      v253 = (float32x4_t *)((char *)a2[30] + v241);
      *v253 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v245), *(float64x2_t *)(v245 + 16));
      v253[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v245 + 32)), *(float64x2_t *)(v245 + 48));
      v253[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v245 + 64)), *(float64x2_t *)(v245 + 80));
      *(_QWORD *)((char *)a2[31] + v252) = *(_QWORD *)(v245 + 504);
      ++v243;
      v242 += 9;
      v241 += 48;
      v240 += 168;
    }
    while (v703 != v243);
  }
  free(v137);
  v93 = v704;
  v94 = v704;
LABEL_175:
  v50[8] = malloc_type_malloc(4 * (int)v94, 0x100004052888210uLL);
  v254 = (char *)malloc_type_malloc(4 * (int)v94, 0x100004052888210uLL);
  v50[9] = v254;
  if (v93 < 1)
    goto LABEL_188;
  v255 = *(_QWORD *)(v3 + 11520);
  v256 = (char *)v50[8];
  v257 = *(_QWORD *)(v3 + 11544);
  if (v94 < 0x10)
  {
    v258 = 0;
LABEL_186:
    v266 = v94 - v258;
    v267 = 4 * v258;
    v268 = &v254[4 * v258];
    v269 = (int *)(v257 + v267);
    v270 = &v256[v267];
    v271 = (int *)(v255 + v267);
    do
    {
      v272 = *v271++;
      *(_DWORD *)v270 = v272;
      v270 += 4;
      v273 = *v269++;
      *(_DWORD *)v268 = v273;
      v268 += 4;
      --v266;
    }
    while (v266);
    goto LABEL_188;
  }
  v258 = 0;
  if ((unint64_t)(v254 - v256) < 0x20)
    goto LABEL_186;
  if ((unint64_t)&v256[-v255] < 0x20)
    goto LABEL_186;
  if ((unint64_t)(v257 - (_QWORD)v256) < 0x20)
    goto LABEL_186;
  if ((unint64_t)&v254[-v255] < 0x20)
    goto LABEL_186;
  if ((unint64_t)&v254[-v257] < 0x20)
    goto LABEL_186;
  v258 = v94 & 0xFFFFFFF8;
  v259 = (__int128 *)(v255 + 16);
  v260 = v256 + 16;
  v261 = (__int128 *)(v257 + 16);
  v262 = v254 + 16;
  v263 = v258;
  do
  {
    v264 = *v259;
    *(v260 - 1) = *(v259 - 1);
    *v260 = v264;
    v265 = *v261;
    v259 += 2;
    *(v262 - 1) = *(v261 - 1);
    *v262 = v265;
    v260 += 2;
    v261 += 2;
    v262 += 2;
    v263 -= 8;
  }
  while (v263);
  if ((v94 & 7) != 0)
    goto LABEL_186;
LABEL_188:
  *((_DWORD *)v50 + 10) = *(_DWORD *)(v3 + 1256);
  *((_DWORD *)v50 + 11) = *(_DWORD *)(v3 + 1260);
  *((_DWORD *)v50 + 12) = *(_DWORD *)(v3 + 1264);
  *((_DWORD *)v50 + 22) = v702;
  *((_DWORD *)v50 + 21) = *(_DWORD *)(v3 + 2128);
  *((_DWORD *)v50 + 23) = *(_QWORD *)(v3 + 1936);
  v274 = *(_QWORD *)(v3 + 1016);
  if (v274)
    LODWORD(v274) = *(_DWORD *)(v274 + 48);
  *((_DWORD *)v50 + 24) = v274;
  *((_DWORD *)v50 + 25) = *(_QWORD *)(v3 + 2008);
  *((_DWORD *)v50 + 20) = v93;
  *((_DWORD *)v50 + 14) = *(_DWORD *)(v3 + 8056);
  if (*(_DWORD *)(v3 + 3076))
  {
    v275 = *(_QWORD *)(v3 + 2984);
    info[0] = 0;
    mach_timebase_info(info);
    v276 = v275 * info[0].numer;
    v50 = a2;
    LODWORD(v277) = info[0].denom;
    *((double *)a2 + 38) = (double)v276 / ((double)v277 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 3292))
      goto LABEL_192;
  }
  else
  {
    *((double *)v50 + 38) = (double)*(uint64_t *)(v3 + 2976) * 0.000000001;
    if (*(_DWORD *)(v3 + 3292))
    {
LABEL_192:
      v278 = *(_QWORD *)(v3 + 3200);
      info[0] = 0;
      mach_timebase_info(info);
      v279 = v278 * info[0].numer;
      v50 = a2;
      LODWORD(v280) = info[0].denom;
      *((double *)a2 + 39) = (double)v279 / ((double)v280 * 1000000.0) * 0.001;
      if (*(_DWORD *)(v3 + 3508))
        goto LABEL_193;
      goto LABEL_221;
    }
  }
  *((double *)v50 + 39) = (double)*(uint64_t *)(v3 + 3192) * 0.000000001;
  if (*(_DWORD *)(v3 + 3508))
  {
LABEL_193:
    v281 = *(_QWORD *)(v3 + 3416);
    info[0] = 0;
    mach_timebase_info(info);
    v282 = v281 * info[0].numer;
    v50 = a2;
    LODWORD(v283) = info[0].denom;
    *((double *)a2 + 40) = (double)v282 / ((double)v283 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 3724))
      goto LABEL_194;
    goto LABEL_222;
  }
LABEL_221:
  *((double *)v50 + 40) = (double)*(uint64_t *)(v3 + 3408) * 0.000000001;
  if (*(_DWORD *)(v3 + 3724))
  {
LABEL_194:
    v284 = *(_QWORD *)(v3 + 3632);
    info[0] = 0;
    mach_timebase_info(info);
    v285 = v284 * info[0].numer;
    v50 = a2;
    LODWORD(v286) = info[0].denom;
    *((double *)a2 + 41) = (double)v285 / ((double)v286 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 3940))
      goto LABEL_195;
    goto LABEL_223;
  }
LABEL_222:
  *((double *)v50 + 41) = (double)*(uint64_t *)(v3 + 3624) * 0.000000001;
  if (*(_DWORD *)(v3 + 3940))
  {
LABEL_195:
    v287 = *(_QWORD *)(v3 + 3848);
    info[0] = 0;
    mach_timebase_info(info);
    v288 = v287 * info[0].numer;
    v50 = a2;
    LODWORD(v289) = info[0].denom;
    *((double *)a2 + 42) = (double)v288 / ((double)v289 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 4156))
      goto LABEL_196;
    goto LABEL_224;
  }
LABEL_223:
  *((double *)v50 + 42) = (double)*(uint64_t *)(v3 + 3840) * 0.000000001;
  if (*(_DWORD *)(v3 + 4156))
  {
LABEL_196:
    v290 = *(_QWORD *)(v3 + 4064);
    info[0] = 0;
    mach_timebase_info(info);
    v291 = v290 * info[0].numer;
    v50 = a2;
    LODWORD(v292) = info[0].denom;
    *((double *)a2 + 45) = (double)v291 / ((double)v292 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 6124))
      goto LABEL_197;
    goto LABEL_225;
  }
LABEL_224:
  *((double *)v50 + 45) = (double)*(uint64_t *)(v3 + 4056) * 0.000000001;
  if (*(_DWORD *)(v3 + 6124))
  {
LABEL_197:
    v293 = *(_QWORD *)(v3 + 6032);
    info[0] = 0;
    mach_timebase_info(info);
    v294 = v293 * info[0].numer;
    v50 = a2;
    LODWORD(v295) = info[0].denom;
    *((double *)a2 + 43) = (double)v294 / ((double)v295 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 6340))
      goto LABEL_198;
    goto LABEL_226;
  }
LABEL_225:
  *((double *)v50 + 43) = (double)*(uint64_t *)(v3 + 6024) * 0.000000001;
  if (*(_DWORD *)(v3 + 6340))
  {
LABEL_198:
    v296 = *(_QWORD *)(v3 + 6248);
    info[0] = 0;
    mach_timebase_info(info);
    v297 = v296 * info[0].numer;
    v50 = a2;
    LODWORD(v298) = info[0].denom;
    *((double *)a2 + 44) = (double)v297 / ((double)v298 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 6556))
      goto LABEL_199;
    goto LABEL_227;
  }
LABEL_226:
  *((double *)v50 + 44) = (double)*(uint64_t *)(v3 + 6240) * 0.000000001;
  if (*(_DWORD *)(v3 + 6556))
  {
LABEL_199:
    v299 = *(_QWORD *)(v3 + 6464);
    info[0] = 0;
    mach_timebase_info(info);
    v300 = v299 * info[0].numer;
    v50 = a2;
    LODWORD(v301) = info[0].denom;
    *((double *)a2 + 46) = (double)v300 / ((double)v301 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 6772))
      goto LABEL_200;
    goto LABEL_228;
  }
LABEL_227:
  *((double *)v50 + 46) = (double)*(uint64_t *)(v3 + 6456) * 0.000000001;
  if (*(_DWORD *)(v3 + 6772))
  {
LABEL_200:
    v302 = *(_QWORD *)(v3 + 6680);
    info[0] = 0;
    mach_timebase_info(info);
    v303 = v302 * info[0].numer;
    v50 = a2;
    LODWORD(v304) = info[0].denom;
    *((double *)a2 + 47) = (double)v303 / ((double)v304 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 6988))
      goto LABEL_201;
    goto LABEL_229;
  }
LABEL_228:
  *((double *)v50 + 47) = (double)*(uint64_t *)(v3 + 6672) * 0.000000001;
  if (*(_DWORD *)(v3 + 6988))
  {
LABEL_201:
    v305 = *(_QWORD *)(v3 + 6896);
    info[0] = 0;
    mach_timebase_info(info);
    v306 = v305 * info[0].numer;
    v50 = a2;
    LODWORD(v307) = info[0].denom;
    *((double *)a2 + 48) = (double)v306 / ((double)v307 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 7204))
      goto LABEL_202;
    goto LABEL_230;
  }
LABEL_229:
  *((double *)v50 + 48) = (double)*(uint64_t *)(v3 + 6888) * 0.000000001;
  if (*(_DWORD *)(v3 + 7204))
  {
LABEL_202:
    v308 = *(_QWORD *)(v3 + 7112);
    info[0] = 0;
    mach_timebase_info(info);
    v309 = v308 * info[0].numer;
    v50 = a2;
    LODWORD(v310) = info[0].denom;
    *((double *)a2 + 49) = (double)v309 / ((double)v310 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 11484))
      goto LABEL_203;
    goto LABEL_231;
  }
LABEL_230:
  *((double *)v50 + 49) = (double)*(uint64_t *)(v3 + 7104) * 0.000000001;
  if (*(_DWORD *)(v3 + 11484))
  {
LABEL_203:
    v311 = *(_QWORD *)(v3 + 11392);
    info[0] = 0;
    mach_timebase_info(info);
    v312 = v311 * info[0].numer;
    v50 = a2;
    LODWORD(v313) = info[0].denom;
    *((double *)a2 + 50) = (double)v312 / ((double)v313 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 8276))
      goto LABEL_204;
    goto LABEL_232;
  }
LABEL_231:
  *((double *)v50 + 50) = (double)*(uint64_t *)(v3 + 11384) * 0.000000001;
  if (*(_DWORD *)(v3 + 8276))
  {
LABEL_204:
    v314 = *(_QWORD *)(v3 + 8184);
    info[0] = 0;
    mach_timebase_info(info);
    v315 = v314 * info[0].numer;
    v50 = a2;
    LODWORD(v316) = info[0].denom;
    *((double *)a2 + 51) = (double)v315 / ((double)v316 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 8492))
      goto LABEL_205;
    goto LABEL_233;
  }
LABEL_232:
  *((double *)v50 + 51) = (double)*(uint64_t *)(v3 + 8176) * 0.000000001;
  if (*(_DWORD *)(v3 + 8492))
  {
LABEL_205:
    v317 = *(_QWORD *)(v3 + 8400);
    info[0] = 0;
    mach_timebase_info(info);
    v318 = v317 * info[0].numer;
    v50 = a2;
    LODWORD(v319) = info[0].denom;
    *((double *)a2 + 52) = (double)v318 / ((double)v319 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 8708))
      goto LABEL_206;
    goto LABEL_234;
  }
LABEL_233:
  *((double *)v50 + 52) = (double)*(uint64_t *)(v3 + 8392) * 0.000000001;
  if (*(_DWORD *)(v3 + 8708))
  {
LABEL_206:
    v320 = *(_QWORD *)(v3 + 8616);
    info[0] = 0;
    mach_timebase_info(info);
    v321 = v320 * info[0].numer;
    v50 = a2;
    LODWORD(v322) = info[0].denom;
    *((double *)a2 + 53) = (double)v321 / ((double)v322 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 8924))
      goto LABEL_207;
    goto LABEL_235;
  }
LABEL_234:
  *((double *)v50 + 53) = (double)*(uint64_t *)(v3 + 8608) * 0.000000001;
  if (*(_DWORD *)(v3 + 8924))
  {
LABEL_207:
    v323 = *(_QWORD *)(v3 + 8832);
    info[0] = 0;
    mach_timebase_info(info);
    v324 = v323 * info[0].numer;
    v50 = a2;
    LODWORD(v325) = info[0].denom;
    *((double *)a2 + 54) = (double)v324 / ((double)v325 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 9140))
      goto LABEL_208;
    goto LABEL_236;
  }
LABEL_235:
  *((double *)v50 + 54) = (double)*(uint64_t *)(v3 + 8824) * 0.000000001;
  if (*(_DWORD *)(v3 + 9140))
  {
LABEL_208:
    v326 = *(_QWORD *)(v3 + 9048);
    info[0] = 0;
    mach_timebase_info(info);
    v327 = v326 * info[0].numer;
    v50 = a2;
    LODWORD(v328) = info[0].denom;
    *((double *)a2 + 55) = (double)v327 / ((double)v328 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 9356))
      goto LABEL_209;
    goto LABEL_237;
  }
LABEL_236:
  *((double *)v50 + 55) = (double)*(uint64_t *)(v3 + 9040) * 0.000000001;
  if (*(_DWORD *)(v3 + 9356))
  {
LABEL_209:
    v329 = *(_QWORD *)(v3 + 9264);
    info[0] = 0;
    mach_timebase_info(info);
    v330 = v329 * info[0].numer;
    v50 = a2;
    LODWORD(v331) = info[0].denom;
    *((double *)a2 + 56) = (double)v330 / ((double)v331 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 7868))
      goto LABEL_210;
    goto LABEL_238;
  }
LABEL_237:
  *((double *)v50 + 56) = (double)*(uint64_t *)(v3 + 9256) * 0.000000001;
  if (*(_DWORD *)(v3 + 7868))
  {
LABEL_210:
    v332 = *(_QWORD *)(v3 + 7776);
    info[0] = 0;
    mach_timebase_info(info);
    v333 = v332 * info[0].numer;
    v50 = a2;
    LODWORD(v334) = info[0].denom;
    *((double *)a2 + 57) = (double)v333 / ((double)v334 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 9916))
      goto LABEL_211;
    goto LABEL_239;
  }
LABEL_238:
  *((double *)v50 + 57) = (double)*(uint64_t *)(v3 + 7768) * 0.000000001;
  if (*(_DWORD *)(v3 + 9916))
  {
LABEL_211:
    v335 = *(_QWORD *)(v3 + 9824);
    info[0] = 0;
    mach_timebase_info(info);
    v336 = v335 * info[0].numer;
    v50 = a2;
    LODWORD(v337) = info[0].denom;
    *((double *)a2 + 58) = (double)v336 / ((double)v337 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 11268))
      goto LABEL_212;
    goto LABEL_240;
  }
LABEL_239:
  *((double *)v50 + 58) = (double)*(uint64_t *)(v3 + 9816) * 0.000000001;
  if (*(_DWORD *)(v3 + 11268))
  {
LABEL_212:
    v338 = *(_QWORD *)(v3 + 11176);
    info[0] = 0;
    mach_timebase_info(info);
    v339 = v338 * info[0].numer;
    v50 = a2;
    LODWORD(v340) = info[0].denom;
    *((double *)a2 + 59) = (double)v339 / ((double)v340 * 1000000.0) * 0.001;
    if (*(_DWORD *)(v3 + 12076))
      goto LABEL_213;
    goto LABEL_241;
  }
LABEL_240:
  *((double *)v50 + 59) = (double)*(uint64_t *)(v3 + 11168) * 0.000000001;
  if (*(_DWORD *)(v3 + 12076))
  {
LABEL_213:
    v341 = *(_QWORD *)(v3 + 11984);
    info[0] = 0;
    mach_timebase_info(info);
    v342 = v341 * info[0].numer;
    v50 = a2;
    LODWORD(v343) = info[0].denom;
    *((double *)a2 + 60) = (double)v342 / ((double)v343 * 1000000.0) * 0.001;
    v344 = *(_QWORD **)(v3 + 1016);
    if (!v344)
      goto LABEL_215;
    goto LABEL_214;
  }
LABEL_241:
  *((double *)v50 + 60) = (double)*(uint64_t *)(v3 + 11976) * 0.000000001;
  v344 = *(_QWORD **)(v3 + 1016);
  if (v344)
LABEL_214:
    v344 = (_QWORD *)v344[95];
LABEL_215:
  v50[61] = v344;
  *((_DWORD *)v50 + 124) = 0;
  if ((_DWORD)v752)
  {
    v345 = (_QWORD *)*((_QWORD *)&v751 + 1);
    if (*((_QWORD *)&v751 + 1))
    {
      do
      {
        v346 = (_QWORD *)v345[2];
        free(v345);
        v345 = v346;
      }
      while (v346);
    }
  }
  else
  {
    tv_sec_low = LODWORD(v747.tv_sec);
    v348 = (_QWORD *)v750;
    if (SLODWORD(v747.tv_sec) >= 1)
    {
      v349 = 0;
      v350 = 0;
      do
      {
        v351 = (_QWORD *)v348[v349];
        if (v351)
        {
          v352 = v350;
          do
          {
            v350 = v351;
            v351 = (_QWORD *)v351[3];
            v350[3] = v352;
            v352 = v350;
          }
          while (v351);
        }
        ++v349;
      }
      while (v349 != tv_sec_low);
      if (v350)
      {
        do
        {
          v353 = (_QWORD *)v350[3];
          free(v350);
          v350 = v353;
        }
        while (v353);
        v348 = (_QWORD *)v750;
      }
    }
    free(v348);
  }
}

void vl_stats_free(void **a1)
{
  if (a1)
  {
    free(a1[1]);
    free(*a1);
    free(a1[2]);
    free(a1[3]);
    free(a1[4]);
    free(a1[13]);
    free(a1[14]);
    free(a1[15]);
    free(a1[16]);
    free(a1[8]);
    free(a1[9]);
    free(a1[24]);
    free(a1[25]);
    free(a1[29]);
    free(a1[27]);
    free(a1[28]);
    free(a1[32]);
    free(a1[33]);
    free(a1[34]);
    free(a1[35]);
    free(a1[30]);
    free(a1[31]);
  }
}

double vl_par_version@<D0>(int a1@<W0>, uint64_t a2@<X8>)
{
  double result;
  int v5;
  uint64_t v6;
  unsigned __int16 v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char __src[1008];

  *(_OWORD *)(a2 + 480) = 0u;
  *(_OWORD *)(a2 + 496) = 0u;
  *(_OWORD *)(a2 + 448) = 0u;
  *(_OWORD *)(a2 + 464) = 0u;
  *(_OWORD *)(a2 + 416) = 0u;
  *(_OWORD *)(a2 + 432) = 0u;
  *(_OWORD *)(a2 + 384) = 0u;
  *(_OWORD *)(a2 + 400) = 0u;
  *(_OWORD *)(a2 + 352) = 0u;
  *(_OWORD *)(a2 + 368) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  vl_par_default((char *)a2);
  printf("Verbose : ");
  printf("%s: %d \n", "vl_par_version", a1);
  putchar(10);
  if (a1 <= 1999)
  {
    switch(a1)
    {
      case 0:
        vl_par_default(__src);
        memcpy((void *)a2, __src, 0x3F0uLL);
        return result;
      case 1:
        vl_par_default(__src);
        memcpy((void *)a2, __src, 0x3F0uLL);
        *(_DWORD *)(a2 + 152) = 2;
        return result;
      case 2:
      case 3:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
      case 130:
      case 134:
      case 149:
      case 158:
      case 159:
      case 160:
      case 161:
      case 162:
      case 163:
      case 164:
      case 165:
      case 166:
      case 167:
      case 168:
      case 169:
      case 170:
      case 171:
      case 172:
      case 173:
      case 174:
      case 175:
      case 176:
      case 177:
      case 178:
      case 179:
      case 180:
      case 181:
      case 182:
      case 183:
      case 184:
      case 185:
      case 186:
      case 187:
      case 188:
      case 189:
      case 190:
      case 191:
      case 192:
      case 193:
      case 194:
      case 195:
      case 196:
      case 197:
      case 198:
      case 199:
      case 204:
      case 207:
      case 208:
      case 209:
      case 211:
      case 212:
      case 213:
      case 214:
      case 215:
      case 216:
      case 217:
      case 218:
      case 219:
      case 220:
      case 221:
      case 222:
      case 223:
      case 224:
      case 225:
      case 226:
      case 229:
      case 230:
      case 231:
      case 232:
      case 233:
      case 234:
      case 235:
      case 236:
      case 237:
      case 238:
      case 239:
      case 240:
      case 241:
      case 242:
      case 243:
      case 244:
      case 245:
      case 246:
      case 247:
      case 248:
      case 249:
      case 256:
      case 257:
      case 259:
      case 260:
      case 261:
      case 262:
      case 263:
      case 264:
      case 265:
      case 266:
      case 267:
      case 268:
      case 269:
      case 270:
      case 271:
      case 272:
      case 273:
      case 274:
      case 275:
      case 276:
      case 277:
      case 278:
      case 279:
      case 280:
      case 281:
      case 282:
      case 283:
      case 284:
      case 285:
      case 286:
      case 287:
      case 288:
      case 289:
      case 290:
      case 291:
      case 292:
      case 293:
      case 294:
      case 295:
      case 296:
      case 297:
      case 298:
      case 299:
      case 309:
      case 310:
      case 311:
      case 312:
      case 313:
      case 314:
      case 315:
      case 316:
      case 317:
      case 318:
      case 319:
      case 320:
      case 321:
      case 322:
      case 323:
      case 324:
      case 325:
      case 326:
      case 327:
      case 328:
      case 329:
      case 330:
      case 331:
      case 332:
      case 333:
      case 334:
      case 335:
      case 336:
      case 337:
      case 338:
      case 339:
      case 340:
      case 341:
      case 342:
      case 343:
      case 344:
      case 345:
      case 346:
      case 347:
      case 348:
      case 349:
      case 350:
      case 351:
      case 352:
      case 353:
      case 354:
      case 355:
      case 356:
      case 357:
      case 358:
      case 359:
      case 360:
      case 361:
      case 362:
      case 363:
      case 364:
      case 365:
      case 366:
      case 367:
      case 368:
      case 369:
      case 370:
      case 371:
      case 372:
      case 373:
      case 374:
      case 375:
      case 376:
      case 377:
      case 378:
      case 379:
      case 380:
      case 381:
      case 382:
      case 383:
      case 384:
      case 385:
      case 386:
      case 387:
      case 388:
      case 389:
      case 390:
      case 391:
      case 392:
      case 393:
      case 394:
      case 395:
      case 396:
      case 397:
      case 398:
      case 399:
      case 405:
      case 406:
      case 407:
      case 408:
      case 409:
      case 414:
      case 417:
      case 418:
      case 419:
      case 422:
      case 423:
      case 424:
      case 426:
      case 427:
      case 428:
      case 429:
      case 430:
      case 431:
      case 432:
      case 434:
      case 435:
      case 436:
      case 437:
      case 438:
      case 439:
      case 440:
      case 441:
      case 442:
      case 443:
      case 476:
      case 477:
      case 478:
      case 479:
      case 481:
      case 482:
      case 483:
      case 484:
      case 485:
      case 486:
      case 487:
      case 488:
      case 489:
      case 490:
      case 491:
      case 492:
      case 493:
      case 494:
      case 495:
      case 496:
      case 497:
      case 498:
      case 499:
      case 500:
      case 501:
      case 502:
      case 503:
      case 504:
      case 505:
      case 506:
      case 507:
      case 508:
      case 509:
      case 510:
      case 511:
      case 512:
      case 513:
      case 514:
      case 515:
      case 516:
      case 517:
      case 518:
      case 519:
      case 520:
      case 521:
      case 522:
      case 523:
      case 524:
      case 525:
      case 526:
      case 527:
      case 528:
      case 529:
      case 530:
      case 531:
      case 532:
      case 533:
      case 534:
      case 535:
      case 536:
      case 537:
      case 538:
      case 539:
      case 540:
      case 541:
      case 542:
      case 543:
      case 544:
      case 545:
      case 546:
      case 547:
      case 548:
      case 549:
      case 550:
      case 551:
      case 552:
      case 553:
      case 554:
      case 555:
      case 556:
      case 557:
      case 558:
      case 559:
      case 560:
      case 561:
      case 562:
      case 563:
      case 564:
      case 565:
      case 566:
      case 567:
      case 568:
      case 569:
      case 570:
      case 571:
      case 572:
      case 573:
      case 574:
      case 575:
      case 576:
      case 577:
      case 578:
      case 579:
      case 580:
      case 581:
      case 582:
      case 583:
      case 584:
      case 585:
      case 586:
      case 587:
      case 588:
      case 589:
      case 590:
      case 591:
      case 592:
      case 593:
      case 594:
      case 595:
      case 596:
      case 597:
      case 598:
      case 599:
      case 600:
      case 601:
      case 602:
      case 603:
      case 604:
      case 605:
      case 606:
      case 607:
      case 608:
      case 609:
      case 610:
      case 611:
      case 612:
      case 613:
      case 614:
      case 615:
      case 616:
      case 617:
      case 618:
      case 619:
      case 620:
      case 621:
      case 622:
      case 623:
      case 624:
      case 625:
      case 626:
      case 627:
      case 628:
      case 629:
      case 630:
      case 631:
      case 632:
      case 633:
      case 634:
      case 635:
      case 636:
      case 637:
      case 638:
      case 639:
      case 640:
      case 641:
      case 642:
      case 643:
      case 644:
      case 645:
      case 646:
      case 647:
      case 648:
      case 649:
      case 650:
      case 651:
      case 652:
      case 653:
      case 654:
      case 655:
      case 656:
      case 657:
      case 658:
      case 659:
      case 660:
      case 661:
      case 662:
      case 663:
      case 664:
      case 665:
      case 666:
      case 667:
      case 668:
      case 669:
      case 670:
      case 671:
      case 672:
      case 673:
      case 674:
      case 675:
      case 676:
      case 677:
      case 678:
      case 679:
      case 680:
      case 681:
      case 682:
      case 683:
      case 684:
      case 685:
      case 686:
      case 687:
      case 688:
      case 689:
      case 690:
      case 691:
      case 692:
      case 693:
      case 694:
      case 695:
      case 696:
      case 697:
      case 698:
      case 699:
      case 700:
      case 701:
      case 702:
      case 703:
      case 704:
      case 705:
      case 710:
      case 711:
      case 712:
      case 713:
      case 714:
      case 715:
      case 716:
      case 717:
      case 718:
      case 719:
      case 720:
      case 721:
      case 722:
      case 723:
      case 724:
      case 725:
      case 726:
      case 727:
      case 728:
      case 729:
      case 730:
      case 731:
      case 732:
      case 733:
      case 734:
      case 735:
      case 736:
      case 737:
      case 738:
      case 739:
      case 740:
      case 741:
      case 742:
      case 743:
      case 744:
      case 745:
      case 746:
      case 747:
      case 748:
      case 749:
      case 750:
      case 751:
      case 752:
      case 753:
      case 754:
      case 755:
      case 756:
      case 757:
      case 758:
      case 759:
      case 760:
      case 761:
      case 762:
      case 763:
      case 764:
      case 765:
      case 766:
      case 767:
      case 768:
      case 769:
      case 770:
      case 771:
      case 772:
      case 773:
      case 774:
      case 775:
      case 776:
      case 777:
      case 778:
      case 779:
      case 780:
      case 781:
      case 782:
      case 783:
      case 784:
      case 785:
      case 786:
      case 787:
      case 788:
      case 789:
      case 790:
      case 791:
      case 792:
      case 793:
      case 794:
      case 795:
      case 796:
      case 797:
      case 798:
      case 799:
      case 801:
      case 802:
      case 803:
      case 804:
      case 805:
      case 806:
      case 807:
      case 808:
      case 809:
      case 810:
      case 811:
      case 812:
      case 813:
      case 814:
      case 815:
      case 816:
      case 817:
      case 818:
      case 819:
      case 820:
      case 821:
      case 822:
      case 823:
      case 824:
      case 825:
      case 826:
      case 827:
      case 828:
      case 829:
      case 830:
      case 831:
      case 832:
      case 833:
      case 834:
      case 835:
      case 836:
      case 837:
      case 838:
      case 839:
      case 840:
      case 841:
      case 842:
      case 843:
      case 844:
      case 845:
      case 846:
      case 847:
      case 848:
      case 849:
        goto LABEL_139;
      case 4:
        vl_par_default(__src);
        memcpy((void *)a2, __src, 0x3F0uLL);
        *(_DWORD *)(a2 + 152) = 2;
        goto LABEL_175;
      case 10:
        vl_par_default(__src);
        memcpy((void *)a2, __src, 0x3F0uLL);
        *(_DWORD *)(a2 + 128) = 1;
        return result;
      case 102:
        vl_par_default(__src);
        memcpy((void *)a2, __src, 0x3F0uLL);
        *(_DWORD *)(a2 + 176) = 8;
        *(_DWORD *)(a2 + 252) = 1065353216;
        return result;
      case 103:
        vl_par_default(__src);
        memcpy((void *)a2, __src, 0x3F0uLL);
        *(_DWORD *)(a2 + 176) = 8;
        *(_DWORD *)(a2 + 252) = 1065353216;
        *(_DWORD *)(a2 + 500) = 1;
        *(_DWORD *)(a2 + 300) = 1;
        return result;
      case 104:
        vl_par_default(__src);
        memcpy((void *)a2, __src, 0x3F0uLL);
        *(_DWORD *)(a2 + 176) = 8;
        *(_DWORD *)(a2 + 252) = 1065353216;
        *(_DWORD *)(a2 + 300) = 1;
        return result;
      case 105:
        vl_par_default(__src);
        memcpy((void *)a2, __src, 0x3F0uLL);
        *(_DWORD *)(a2 + 176) = 8;
        *(_DWORD *)(a2 + 252) = 1065353216;
        *(_DWORD *)(a2 + 304) = 1;
        return result;
      case 106:
        vl_par_default(__src);
        memcpy((void *)a2, __src, 0x3F0uLL);
        *(_DWORD *)(a2 + 176) = 8;
        v6 = a2 + 176;
        *(_DWORD *)(v6 + 76) = 1065353216;
        *(_DWORD *)(v6 + 324) = 1;
        *(_QWORD *)(v6 + 124) = 0x100000001;
        return result;
      case 131:
      case 132:
      case 135:
        return vl_par_ver_131((_QWORD *)a2);
      case 133:
        return vl_par_ver_133((_QWORD *)a2);
      case 136:
        return vl_par_ver_136((_QWORD *)a2);
      case 137:
        *(float *)&result = vl_par_ver_137((_QWORD *)a2);
        return result;
      case 138:
        return vl_par_ver_138((_QWORD *)a2);
      case 139:
        return vl_par_ver_139((_QWORD *)a2);
      case 140:
        return vl_par_ver_140((_QWORD *)a2);
      case 141:
        *(float *)&result = vl_par_ver_141((_QWORD *)a2);
        return result;
      case 142:
        return vl_par_ver_142((_QWORD *)a2);
      case 143:
        return vl_par_ver_143((_QWORD *)a2);
      case 144:
        return vl_par_ver_144((_QWORD *)a2);
      case 145:
        return vl_par_ver_145((_QWORD *)a2);
      case 146:
        *(float *)&result = vl_par_ver_146((_QWORD *)a2);
        return result;
      case 147:
        return vl_par_ver_147((_QWORD *)a2);
      case 148:
        return vl_par_ver_148((_QWORD *)a2);
      case 150:
        return vl_par_ver_150((_QWORD *)a2);
      case 151:
        return vl_par_ver_151((_QWORD *)a2);
      case 152:
        return vl_par_ver_152((_QWORD *)a2);
      case 153:
        return vl_par_ver_153((_QWORD *)a2);
      case 154:
        *(float *)&result = vl_par_ver_154((_QWORD *)a2);
        return result;
      case 155:
        return vl_par_ver_155((_QWORD *)a2);
      case 156:
        *(float *)&result = vl_par_ver_156((_QWORD *)a2);
        return result;
      case 157:
        goto LABEL_26;
      case 200:
        return vl_par_ver_200((_QWORD *)a2);
      case 201:
        return vl_par_ver_201((_QWORD *)a2);
      case 202:
        return vl_par_ver_202((_QWORD *)a2);
      case 203:
        return vl_par_ver_203((_QWORD *)a2);
      case 205:
        return vl_par_ver_205((_QWORD *)a2);
      case 206:
        return vl_par_ver_206((_QWORD *)a2);
      case 210:
        return vl_par_ver_210((_QWORD *)a2);
      case 227:
        return vl_par_ver_227((_QWORD *)a2);
      case 228:
        return vl_par_ver_228((_QWORD *)a2);
      case 250:
        return vl_par_ver_250((_QWORD *)a2);
      case 251:
        return vl_par_ver_251((_QWORD *)a2);
      case 252:
        return vl_par_ver_252((_QWORD *)a2);
      case 253:
      case 258:
        return vl_par_ver_253((_QWORD *)a2);
      case 254:
        return vl_par_ver_254((_QWORD *)a2);
      case 255:
        return vl_par_ver_255((_QWORD *)a2);
      case 300:
        vl_par_default(__src);
        memcpy((void *)a2, __src, 0x3F0uLL);
        *(_DWORD *)(a2 + 84) = 12000;
        *(_QWORD *)(a2 + 52) = 0xB3CF5C28FLL;
        *(_QWORD *)&result = 0x6700000002;
        *(_QWORD *)(a2 + 152) = 0x6700000002;
        return result;
      case 301:
        return vl_par_ver_301(a2);
      case 302:
        return vl_par_ver_302(a2);
      case 303:
        return vl_par_ver_303(a2);
      case 304:
        return vl_par_ver_304(a2);
      case 305:
        return vl_par_ver_305(a2);
      case 306:
        return vl_par_ver_306(a2);
      case 307:
        return vl_par_ver_307(a2);
      case 308:
        return vl_par_ver_308(a2);
      case 400:
        return vl_par_ver_400((_QWORD *)a2);
      case 401:
        *(float *)&result = vl_par_ver_401((_QWORD *)a2);
        return result;
      case 402:
        return vl_par_ver_402((_QWORD *)a2);
      case 403:
        return vl_par_ver_403((_QWORD *)a2);
      case 404:
        return vl_par_ver_404((_QWORD *)a2);
      case 410:
        return vl_par_ver_410((_QWORD *)a2);
      case 411:
        return vl_par_ver_411((_QWORD *)a2);
      case 412:
        return vl_par_ver_412((_QWORD *)a2);
      case 413:
        return vl_par_ver_413((_QWORD *)a2);
      case 415:
        return vl_par_ver_415((_QWORD *)a2);
      case 416:
        return vl_par_ver_416((_QWORD *)a2);
      case 420:
        return vl_par_ver_420((_QWORD *)a2);
      case 421:
        return vl_par_ver_421((_QWORD *)a2);
      case 425:
        return vl_par_ver_425((_QWORD *)a2);
      case 433:
        return vl_par_ver_433((_QWORD *)a2);
      case 444:
        return vl_par_ver_444((_QWORD *)a2);
      case 445:
        return vl_par_ver_445((_QWORD *)a2);
      case 446:
        return vl_par_ver_446((_QWORD *)a2);
      case 447:
        return vl_par_ver_447((_QWORD *)a2);
      case 448:
        return vl_par_ver_448((_QWORD *)a2);
      case 449:
        return vl_par_ver_449((_QWORD *)a2);
      case 450:
        return vl_par_ver_450((_QWORD *)a2);
      case 451:
        return vl_par_ver_451((_QWORD *)a2);
      case 452:
        return vl_par_ver_452((_QWORD *)a2);
      case 453:
        return vl_par_ver_453((_QWORD *)a2);
      case 454:
        return vl_par_ver_454((_QWORD *)a2);
      case 455:
        return vl_par_ver_455((_QWORD *)a2);
      case 456:
        return vl_par_ver_456((_QWORD *)a2);
      case 457:
        return vl_par_ver_457((_QWORD *)a2);
      case 458:
        return vl_par_ver_458((_QWORD *)a2);
      case 459:
        return vl_par_ver_459((_QWORD *)a2);
      case 460:
        return vl_par_ver_460((_QWORD *)a2);
      case 461:
        return vl_par_ver_461((_QWORD *)a2);
      case 462:
        return vl_par_ver_462((_QWORD *)a2);
      case 463:
        return vl_par_ver_463((_QWORD *)a2);
      case 464:
        result = vl_par_ver_463((_QWORD *)a2);
        *(_DWORD *)(a2 + 564) = 253;
        return result;
      case 465:
        return vl_par_ver_465((_QWORD *)a2);
      case 466:
        vl_par_ver_463((_QWORD *)a2);
        *(_DWORD *)(a2 + 564) = 253;
        *(_DWORD *)(a2 + 236) = 1;
        result = 0.0000976562877;
        *(_QWORD *)(a2 + 240) = 0x3F19999A3F5EB852;
        *(_DWORD *)(a2 + 248) = 1128792064;
        return result;
      case 467:
        result = vl_par_ver_463((_QWORD *)a2);
        *(_DWORD *)(a2 + 564) = 253;
        *(_DWORD *)(a2 + 552) = 0;
        *(_DWORD *)(a2 + 640) = 1063675494;
        *(_DWORD *)(a2 + 300) = 0;
        return result;
      case 468:
        goto LABEL_18;
      case 469:
        result = vl_par_ver_463((_QWORD *)a2);
        *(_DWORD *)(a2 + 564) = 253;
        goto LABEL_122;
      case 470:
        result = vl_par_ver_463((_QWORD *)a2);
        *(_DWORD *)(a2 + 564) = 253;
        *(_DWORD *)(a2 + 88) = 3010;
LABEL_122:
        *(_DWORD *)(a2 + 648) = 1;
        return result;
      case 471:
        result = vl_par_ver_463((_QWORD *)a2);
        *(_DWORD *)(a2 + 564) = 253;
        *(_DWORD *)(a2 + 88) = 3010;
        *(_DWORD *)(a2 + 648) = 1;
        *(_DWORD *)(a2 + 656) = 1;
        return result;
      case 472:
        vl_par_ver_472(a2);
        return result;
      case 473:
        return vl_par_ver_473(a2);
      case 474:
        vl_par_ver_474(a2);
        return result;
      case 475:
        return vl_par_ver_475(a2);
      case 480:
        *(float *)&result = vl_par_ver_480((_QWORD *)a2);
        return result;
      case 706:
        return vl_par_ver_706((_QWORD *)a2);
      case 707:
        return vl_par_ver_707((_QWORD *)a2);
      case 708:
        return vl_par_ver_708((_QWORD *)a2);
      case 709:
        return vl_par_ver_709((_QWORD *)a2);
      case 800:
        return vl_par_ver_800((_QWORD *)a2);
      case 850:
        return vl_par_ver_850((_QWORD *)a2);
      case 851:
        return vl_par_ver_851((_QWORD *)a2);
      default:
        if (a1 == 1481)
        {
          result = vl_par_ver_1481((_QWORD *)a2);
        }
        else
        {
          if (a1 != 1946)
            goto LABEL_139;
LABEL_26:
          *(float *)&result = vl_par_ver_157((_QWORD *)a2);
        }
        break;
    }
    return result;
  }
  if (a1 <= 4469)
  {
    if (a1 > 2099)
    {
      if (a1 != 2100)
      {
        if (a1 == 2200)
        {
LABEL_21:
          vl_par_ver_463((_QWORD *)a2);
          *(_DWORD *)(a2 + 552) = 0;
          *(_QWORD *)&result = 0xFD00000000;
          *(_QWORD *)(a2 + 560) = 0xFD00000000;
          v5 = 1060320051;
        }
        else
        {
          if (a1 != 2300)
          {
LABEL_139:
            printf("%sError : ", (const char *)&unk_210BC3C5E);
            printf("%s: ver %d not implemented", "vl_par_version", a1);
            putchar(10);
            return result;
          }
LABEL_15:
          vl_par_ver_463((_QWORD *)a2);
          *(_DWORD *)(a2 + 552) = 0;
          *(_QWORD *)&result = 0xFD00000000;
          *(_QWORD *)(a2 + 560) = 0xFD00000000;
          v5 = 1053609165;
        }
        goto LABEL_22;
      }
LABEL_20:
      result = vl_par_ver_463((_QWORD *)a2);
      *(_DWORD *)(a2 + 564) = 253;
      *(_DWORD *)(a2 + 552) = 0;
      *(_DWORD *)(a2 + 640) = 1063675494;
      *(_DWORD *)(a2 + 300) = 0;
    }
    else
    {
      if (a1 != 2000)
      {
        if (a1 != 2050)
        {
          if (a1 == 2051)
          {
            result = vl_par_ver_463((_QWORD *)a2);
            *(_DWORD *)(a2 + 564) = 253;
            *(_DWORD *)(a2 + 552) = 0;
            *(_DWORD *)(a2 + 640) = 1063675494;
            *(_DWORD *)(a2 + 88) = 3010;
            *(_DWORD *)(a2 + 500) = 0;
            return result;
          }
          goto LABEL_139;
        }
LABEL_19:
        result = vl_par_ver_463((_QWORD *)a2);
        *(_DWORD *)(a2 + 564) = 253;
        *(_DWORD *)(a2 + 552) = 0;
        v5 = 1063675494;
LABEL_22:
        *(_DWORD *)(a2 + 640) = v5;
        goto LABEL_23;
      }
LABEL_18:
      result = vl_par_ver_463((_QWORD *)a2);
      *(_DWORD *)(a2 + 564) = 253;
    }
LABEL_23:
    *(_DWORD *)(a2 + 88) = 3010;
    return result;
  }
  switch(a1)
  {
    case 4470:
      return vl_par_ver_4470((_QWORD *)a2);
    case 4471:
      return vl_par_ver_4471((_QWORD *)a2);
    case 4472:
    case 4473:
    case 4474:
    case 4475:
    case 4476:
    case 4477:
    case 4478:
    case 4479:
    case 4482:
    case 4483:
    case 4484:
    case 4485:
    case 4486:
    case 4487:
    case 4488:
    case 4489:
    case 4492:
    case 4493:
    case 4494:
    case 4495:
    case 4496:
    case 4497:
    case 4498:
    case 4499:
    case 4500:
    case 4501:
    case 4502:
    case 4503:
    case 4504:
    case 4505:
    case 4506:
    case 4507:
    case 4508:
    case 4509:
    case 4510:
    case 4511:
    case 4512:
    case 4513:
    case 4514:
    case 4515:
    case 4516:
    case 4517:
    case 4518:
    case 4519:
    case 4520:
    case 4521:
    case 4522:
    case 4523:
    case 4524:
    case 4525:
    case 4526:
    case 4527:
    case 4528:
    case 4529:
    case 4530:
    case 4533:
    case 4534:
    case 4535:
    case 4536:
    case 4537:
    case 4538:
    case 4539:
    case 4540:
    case 4542:
    case 4543:
    case 4544:
    case 4545:
    case 4546:
    case 4547:
    case 4548:
    case 4549:
    case 4550:
    case 4552:
    case 4553:
    case 4554:
    case 4555:
    case 4556:
    case 4557:
    case 4558:
    case 4559:
    case 4560:
    case 4562:
    case 4563:
    case 4564:
    case 4565:
    case 4566:
    case 4567:
    case 4568:
    case 4569:
    case 4570:
    case 4577:
    case 4578:
    case 4579:
    case 4580:
    case 4581:
    case 4582:
    case 4583:
    case 4584:
    case 4585:
    case 4586:
    case 4587:
    case 4588:
    case 4589:
    case 4590:
    case 4591:
    case 4592:
    case 4593:
    case 4594:
    case 4595:
    case 4596:
    case 4597:
    case 4598:
    case 4599:
    case 4600:
    case 4603:
    case 4604:
    case 4605:
    case 4606:
    case 4607:
    case 4608:
    case 4609:
    case 4610:
    case 4611:
    case 4612:
    case 4613:
    case 4614:
    case 4615:
    case 4616:
    case 4617:
    case 4618:
    case 4619:
    case 4620:
    case 4621:
    case 4622:
    case 4623:
    case 4624:
    case 4625:
    case 4626:
    case 4627:
    case 4628:
    case 4629:
    case 4630:
    case 4637:
    case 4638:
    case 4639:
    case 4640:
    case 4645:
    case 4646:
    case 4647:
    case 4648:
    case 4649:
    case 4650:
    case 4653:
    case 4654:
    case 4655:
    case 4656:
    case 4657:
    case 4658:
    case 4659:
    case 4660:
    case 4663:
    case 4664:
    case 4665:
    case 4666:
    case 4667:
    case 4668:
    case 4669:
    case 4670:
    case 4671:
    case 4672:
    case 4673:
    case 4674:
    case 4675:
    case 4676:
    case 4677:
    case 4678:
    case 4679:
    case 4680:
    case 4685:
    case 4686:
    case 4687:
    case 4688:
    case 4689:
    case 4690:
    case 4691:
    case 4692:
    case 4693:
    case 4694:
    case 4695:
    case 4696:
    case 4697:
    case 4698:
    case 4699:
    case 4700:
    case 4701:
    case 4702:
    case 4703:
    case 4704:
    case 4705:
    case 4706:
    case 4707:
    case 4708:
    case 4709:
    case 4710:
    case 4711:
    case 4712:
    case 4713:
    case 4714:
    case 4715:
    case 4716:
    case 4717:
    case 4718:
    case 4719:
    case 4720:
    case 4721:
    case 4722:
    case 4723:
    case 4724:
    case 4725:
    case 4726:
    case 4727:
    case 4728:
    case 4729:
    case 4730:
    case 4734:
    case 4735:
    case 4736:
    case 4737:
    case 4738:
    case 4739:
    case 4740:
    case 4741:
    case 4742:
    case 4743:
    case 4744:
    case 4745:
    case 4746:
    case 4747:
    case 4748:
    case 4749:
    case 4750:
      goto LABEL_139;
    case 4480:
      return vl_par_ver_4480((_QWORD *)a2);
    case 4481:
      return vl_par_ver_4481((_QWORD *)a2);
    case 4490:
      return vl_par_ver_4490((_QWORD *)a2);
    case 4491:
      return vl_par_ver_4491((_QWORD *)a2);
    case 4531:
      return vl_par_ver_4531((_QWORD *)a2);
    case 4532:
      return vl_par_ver_4532((_QWORD *)a2);
    case 4541:
      return vl_par_ver_4541((_QWORD *)a2);
    case 4551:
      return vl_par_ver_4551((_QWORD *)a2);
    case 4561:
      return vl_par_ver_4561((_QWORD *)a2);
    case 4571:
      return vl_par_ver_4571((_QWORD *)a2);
    case 4572:
      return vl_par_ver_4572((_QWORD *)a2);
    case 4573:
      return vl_par_ver_4573((_QWORD *)a2);
    case 4574:
      return vl_par_ver_4574((_QWORD *)a2);
    case 4575:
      return vl_par_ver_4575((_QWORD *)a2);
    case 4576:
      return vl_par_ver_4576((_QWORD *)a2);
    case 4601:
      return vl_par_ver_4601((_QWORD *)a2);
    case 4602:
      return vl_par_ver_4602((_QWORD *)a2);
    case 4631:
      result = vl_par_ver_463((_QWORD *)a2);
      goto LABEL_172;
    case 4632:
      result = vl_par_ver_463((_QWORD *)a2);
      goto LABEL_174;
    case 4633:
      result = vl_par_ver_463((_QWORD *)a2);
      *(_DWORD *)(a2 + 552) = 0;
      *(_DWORD *)(a2 + 640) = 1063675494;
      *(_DWORD *)(a2 + 176) = 8;
      *(_DWORD *)(a2 + 132) = 0;
      *(_DWORD *)(a2 + 108) = 0;
      *(_DWORD *)(a2 + 88) = 3009;
      *(_DWORD *)(a2 + 116) = 1;
      return result;
    case 4634:
      result = vl_par_ver_463((_QWORD *)a2);
      v7 = 15204;
      goto LABEL_164;
    case 4635:
      result = vl_par_ver_463((_QWORD *)a2);
      v7 = -16777;
      goto LABEL_164;
    case 4636:
      result = vl_par_ver_463((_QWORD *)a2);
      v7 = -8389;
LABEL_164:
      *(_DWORD *)(a2 + 640) = v7 | 0x3F7F0000;
      return result;
    case 4641:
      result = vl_par_ver_463((_QWORD *)a2);
      *(_DWORD *)(a2 + 564) = 253;
      goto LABEL_172;
    case 4642:
      result = vl_par_ver_463((_QWORD *)a2);
      *(_DWORD *)(a2 + 564) = 253;
      goto LABEL_174;
    case 4643:
      vl_par_ver_463((_QWORD *)a2);
      *(_DWORD *)(a2 + 552) = 0;
      *(_QWORD *)&result = 0xFD00000000;
      *(_QWORD *)(a2 + 560) = 0xFD00000000;
      *(_DWORD *)(a2 + 640) = 1053609165;
      return result;
    case 4644:
      vl_par_ver_463((_QWORD *)a2);
      *(_DWORD *)(a2 + 552) = 0;
      *(_QWORD *)&result = 0xFD00000000;
      *(_QWORD *)(a2 + 560) = 0xFD00000000;
      *(_DWORD *)(a2 + 640) = 1060320051;
      return result;
    case 4651:
      return vl_par_ver_4651((_QWORD *)a2);
    case 4652:
      return vl_par_ver_4652((_QWORD *)a2);
    case 4661:
      vl_par_ver_463((_QWORD *)a2);
      *(_DWORD *)(a2 + 564) = 253;
      *(_DWORD *)(a2 + 236) = 1;
      result = 0.0000976562877;
      *(_QWORD *)(a2 + 240) = 0x3F19999A3F5EB852;
      *(_DWORD *)(a2 + 248) = 1128792064;
LABEL_172:
      *(_DWORD *)(a2 + 552) = 0;
      *(_DWORD *)(a2 + 640) = 1063675494;
      break;
    case 4662:
      vl_par_ver_463((_QWORD *)a2);
      *(_DWORD *)(a2 + 564) = 253;
      *(_DWORD *)(a2 + 236) = 1;
      result = 0.0000976562877;
      *(_QWORD *)(a2 + 240) = 0x3F19999A3F5EB852;
      *(_DWORD *)(a2 + 248) = 1128792064;
LABEL_174:
      *(_DWORD *)(a2 + 552) = 0;
      *(_DWORD *)(a2 + 640) = 1063675494;
LABEL_175:
      *(_DWORD *)(a2 + 176) = 8;
      break;
    case 4681:
      goto LABEL_19;
    case 4682:
      goto LABEL_20;
    case 4683:
      goto LABEL_21;
    case 4684:
      goto LABEL_15;
    case 4731:
      result = vl_par_ver_4731(a2);
      break;
    case 4732:
      result = vl_par_ver_4732(a2);
      break;
    case 4733:
      result = vl_par_ver_4733(a2);
      break;
    case 4751:
      result = vl_par_ver_4751(a2);
      break;
    case 4752:
      result = vl_par_ver_4752(a2);
      break;
    default:
      switch(a1)
      {
        case 46311:
          result = vl_par_ver_463((_QWORD *)a2);
          *(_DWORD *)(a2 + 552) = 0;
          *(_DWORD *)(a2 + 640) = 1063675494;
          *(_DWORD *)(a2 + 496) = 0;
          goto LABEL_182;
        case 46312:
          result = vl_par_ver_463((_QWORD *)a2);
          *(_DWORD *)(a2 + 552) = 0;
          *(_DWORD *)(a2 + 640) = 1063675494;
          *(_DWORD *)(a2 + 496) = 1;
LABEL_182:
          *(_DWORD *)(a2 + 176) = 64;
          return result;
        case 46313:
        case 46314:
        case 46315:
        case 46316:
        case 46317:
        case 46318:
        case 46319:
        case 46320:
        case 46321:
        case 46322:
        case 46323:
        case 46324:
        case 46325:
        case 46326:
        case 46327:
        case 46328:
        case 46329:
        case 46330:
        case 46331:
        case 46332:
        case 46333:
        case 46334:
        case 46335:
        case 46336:
        case 46337:
        case 46338:
        case 46339:
        case 46340:
        case 46341:
        case 46342:
        case 46343:
        case 46344:
        case 46345:
        case 46346:
        case 46347:
        case 46348:
        case 46349:
        case 46350:
        case 46351:
        case 46352:
        case 46353:
        case 46354:
        case 46355:
        case 46356:
        case 46357:
        case 46358:
        case 46359:
        case 46360:
        case 46361:
        case 46362:
        case 46363:
        case 46364:
        case 46365:
        case 46366:
        case 46367:
        case 46368:
        case 46369:
        case 46370:
        case 46371:
        case 46372:
        case 46373:
        case 46374:
        case 46375:
        case 46376:
        case 46377:
        case 46378:
        case 46379:
        case 46380:
        case 46381:
        case 46382:
        case 46383:
        case 46384:
        case 46385:
        case 46386:
        case 46387:
        case 46388:
        case 46389:
        case 46390:
        case 46391:
        case 46392:
        case 46393:
        case 46394:
        case 46395:
        case 46396:
        case 46397:
        case 46398:
        case 46399:
        case 46400:
        case 46401:
        case 46402:
        case 46403:
        case 46404:
        case 46405:
        case 46406:
        case 46407:
        case 46408:
        case 46409:
        case 46410:
        case 46421:
        case 46422:
        case 46423:
        case 46424:
        case 46425:
        case 46426:
        case 46427:
        case 46428:
        case 46429:
        case 46431:
        case 46433:
        case 46437:
        case 46438:
        case 46439:
        case 46440:
          goto LABEL_139;
        case 46411:
          result = vl_par_ver_463((_QWORD *)a2);
          *(_DWORD *)(a2 + 564) = 253;
          *(_DWORD *)(a2 + 552) = 0;
          v8 = 1063675494;
          goto LABEL_199;
        case 46412:
          result = vl_par_ver_463((_QWORD *)a2);
          *(_DWORD *)(a2 + 564) = 253;
          *(_DWORD *)(a2 + 552) = 0;
          v9 = 1063675494;
          goto LABEL_201;
        case 46413:
          result = vl_par_ver_463((_QWORD *)a2);
          *(_DWORD *)(a2 + 564) = 253;
          *(_DWORD *)(a2 + 552) = 0;
          v10 = 1063675494;
          goto LABEL_203;
        case 46414:
          return vl_par_ver_46414(a2);
        case 46415:
          result = vl_par_ver_463((_QWORD *)a2);
          *(_DWORD *)(a2 + 564) = 253;
          *(_DWORD *)(a2 + 552) = 0;
          v11 = 1063675494;
          goto LABEL_206;
        case 46416:
          return vl_par_ver_46416(a2);
        case 46417:
          return vl_par_ver_46417(a2);
        case 46418:
          result = vl_par_ver_463((_QWORD *)a2);
          *(_DWORD *)(a2 + 564) = 253;
          *(_DWORD *)(a2 + 552) = 0;
          *(_DWORD *)(a2 + 640) = 1063675494;
          *(_DWORD *)(a2 + 88) = 3011;
          v12 = 512;
          goto LABEL_208;
        case 46419:
          result = vl_par_ver_463((_QWORD *)a2);
          *(_DWORD *)(a2 + 564) = 253;
          *(_DWORD *)(a2 + 552) = 0;
          *(_DWORD *)(a2 + 640) = 1063675494;
          v13 = 3022;
          goto LABEL_207;
        case 46420:
          result = vl_par_ver_463((_QWORD *)a2);
          *(_DWORD *)(a2 + 564) = 253;
          *(_DWORD *)(a2 + 552) = 0;
          *(_DWORD *)(a2 + 640) = 1063675494;
          v13 = 3024;
          goto LABEL_207;
        case 46430:
          *(float *)&result = vl_par_ver_46430((_QWORD *)a2);
          return result;
        case 46432:
          *(float *)&result = vl_par_ver_46432((_QWORD *)a2);
          return result;
        case 46434:
          *(float *)&result = vl_par_ver_46434((_QWORD *)a2);
          return result;
        case 46435:
          return vl_par_ver_46435((_QWORD *)a2);
        case 46436:
          return vl_par_ver_46436((_QWORD *)a2);
        case 46441:
          vl_par_ver_463((_QWORD *)a2);
          *(_DWORD *)(a2 + 552) = 0;
          *(_QWORD *)&result = 0xFD00000000;
          *(_QWORD *)(a2 + 560) = 0xFD00000000;
          v8 = 1060320051;
LABEL_199:
          *(_DWORD *)(a2 + 640) = v8;
          v13 = 3011;
          goto LABEL_207;
        case 46442:
          vl_par_ver_463((_QWORD *)a2);
          *(_DWORD *)(a2 + 552) = 0;
          *(_QWORD *)&result = 0xFD00000000;
          *(_QWORD *)(a2 + 560) = 0xFD00000000;
          v9 = 1060320051;
LABEL_201:
          *(_DWORD *)(a2 + 640) = v9;
          *(_DWORD *)(a2 + 104) = 384;
          *(_DWORD *)(a2 + 116) = 0;
          *(_DWORD *)(a2 + 88) = 3021;
          return result;
        case 46443:
          vl_par_ver_463((_QWORD *)a2);
          *(_DWORD *)(a2 + 552) = 0;
          *(_QWORD *)&result = 0xFD00000000;
          *(_QWORD *)(a2 + 560) = 0xFD00000000;
          v10 = 1060320051;
LABEL_203:
          *(_DWORD *)(a2 + 640) = v10;
          *(_DWORD *)(a2 + 88) = 3011;
          *(_DWORD *)(a2 + 116) = 0;
          return result;
        case 46444:
          return vl_par_ver_46444(a2);
        case 46445:
          vl_par_ver_463((_QWORD *)a2);
          *(_DWORD *)(a2 + 552) = 0;
          *(_QWORD *)&result = 0xFD00000000;
          *(_QWORD *)(a2 + 560) = 0xFD00000000;
          v11 = 1060320051;
LABEL_206:
          *(_DWORD *)(a2 + 640) = v11;
          v13 = 3012;
LABEL_207:
          *(_DWORD *)(a2 + 88) = v13;
          v12 = 384;
LABEL_208:
          *(_DWORD *)(a2 + 104) = v12;
          *(_DWORD *)(a2 + 116) = 0;
          break;
        case 46446:
          result = vl_par_ver_46446(a2);
          break;
        case 46447:
          result = vl_par_ver_46447(a2);
          break;
        default:
          if (a1 != 46810)
            goto LABEL_139;
          vl_par_ver_463((_QWORD *)a2);
          *(_DWORD *)(a2 + 552) = 0;
          *(_DWORD *)(a2 + 640) = 1063675494;
          *(_DWORD *)(a2 + 88) = 3010;
          *(_QWORD *)&result = 0xFD00000000;
          *(_QWORD *)(a2 + 560) = 0xFD00000000;
          break;
      }
      break;
  }
  return result;
}

double vl_par_ver_131(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  result = 12831.713;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 38) = 2;
  return result;
}

double vl_par_ver_133(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  result = 12831.713;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 38) = 2;
  *((_DWORD *)a1 + 27) = 1082130432;
  return result;
}

double vl_par_ver_136(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *a1 = 0x100000002;
  result = 12831.713;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 38) = 2;
  *((_DWORD *)a1 + 63) = 1056964608;
  return result;
}

float vl_par_ver_137(_QWORD *a1)
{
  float result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 44) = 16;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *a1 = 0x100000002;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  result = *((float *)a1 + 100) + *((float *)a1 + 100);
  *((float *)a1 + 100) = result;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  *((_DWORD *)a1 + 40) = 1088421888;
  return result;
}

double vl_par_ver_138(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 44) = 16;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *a1 = 0x100000002;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *((float *)a1 + 100) = *((float *)a1 + 100) + *((float *)a1 + 100);
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(_QWORD *)&result = 0xC800000001;
  a1[70] = 0xC800000001;
  return result;
}

double vl_par_ver_139(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  a1[19] = 0x6700000002;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *a1 = 0x100000002;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *((float *)a1 + 100) = *((float *)a1 + 100) + *((float *)a1 + 100);
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  *(_QWORD *)((char *)a1 + 188) = 0x3F6666663F733333;
  *((_DWORD *)a1 + 40) = 0;
  *(_QWORD *)&result = 0x271000000002;
  a1[22] = 0x271000000002;
  return result;
}

double vl_par_ver_140(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  result = 12831.713;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 38) = 2;
  *((_DWORD *)a1 + 44) = 16;
  return result;
}

float vl_par_ver_141(_QWORD *a1)
{
  float result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 44) = 16;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  result = *((float *)a1 + 100) + *((float *)a1 + 100);
  *((float *)a1 + 100) = result;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  *((_DWORD *)a1 + 40) = 1088421888;
  return result;
}

double vl_par_ver_142(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 44) = 16;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *((float *)a1 + 100) = *((float *)a1 + 100) + *((float *)a1 + 100);
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[19] = 0x6700000000;
  *(_QWORD *)&result = 0x1400000001;
  a1[21] = 0x1400000001;
  return result;
}

double vl_par_ver_143(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  a1[19] = 0x6700000002;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *a1 = 0x100000002;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *((float *)a1 + 100) = *((float *)a1 + 100) + *((float *)a1 + 100);
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  *(_QWORD *)((char *)a1 + 188) = 0x3F6666663F733333;
  *((_DWORD *)a1 + 40) = 0;
  *((_DWORD *)a1 + 140) = 1;
  *(_QWORD *)&result = 0x271000000002;
  a1[22] = 0x271000000002;
  return result;
}

double vl_par_ver_144(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 44) = 16;
  a1[78] = 0x3FB657184AE74487;
  *a1 = 0x100000002;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *((float *)a1 + 100) = *((float *)a1 + 100) + *((float *)a1 + 100);
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 138) = 1;
  *((_DWORD *)a1 + 151) = 0;
  a1[76] = 0x900000000;
  a1[74] = 0;
  result = 2.00000047;
  a1[80] = 0x400000003F7FBE77;
  return result;
}

double vl_par_ver_145(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 44) = 16;
  a1[78] = 0x3FB657184AE74487;
  *a1 = 0x100000002;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *((float *)a1 + 100) = *((float *)a1 + 100) + *((float *)a1 + 100);
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 138) = 1;
  *((_DWORD *)a1 + 151) = 0;
  a1[76] = 0x900000000;
  a1[74] = 0;
  result = 2.00000047;
  a1[80] = 0x400000003F7FBE77;
  *((_DWORD *)a1 + 24) = 4;
  *((_DWORD *)a1 + 162) = 1;
  return result;
}

float vl_par_ver_146(_QWORD *a1)
{
  float result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 44) = 16;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *a1 = 0x100000002;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  result = *((float *)a1 + 100) + *((float *)a1 + 100);
  *((float *)a1 + 100) = result;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 125) = 1;
  return result;
}

double vl_par_ver_147(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 44) = 16;
  a1[78] = 0x3FB657184AE74487;
  *a1 = 0x100000002;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *((float *)a1 + 100) = *((float *)a1 + 100) + *((float *)a1 + 100);
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 138) = 1;
  *((_DWORD *)a1 + 151) = 0;
  a1[76] = 0x900000000;
  a1[74] = 0;
  result = 2.00000047;
  a1[80] = 0x400000003F7FBE77;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 125) = 1;
  return result;
}

double vl_par_ver_148(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 44) = 16;
  a1[78] = 0x3FB657184AE74487;
  *a1 = 0x100000002;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *((float *)a1 + 100) = *((float *)a1 + 100) + *((float *)a1 + 100);
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 138) = 1;
  *((_DWORD *)a1 + 151) = 0;
  a1[76] = 0x900000000;
  a1[74] = 0;
  a1[80] = 0x400000003F7FBE77;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 125) = 1;
  *(_QWORD *)&result = 0xFA00000001;
  a1[70] = 0xFA00000001;
  return result;
}

double vl_par_ver_1481(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  a1[19] = 0x6700000002;
  a1[78] = 0x3FB657184AE74487;
  *a1 = 0x100000002;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *((float *)a1 + 100) = *((float *)a1 + 100) + *((float *)a1 + 100);
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 138) = 1;
  *((_DWORD *)a1 + 151) = 0;
  a1[76] = 0x900000000;
  a1[74] = 0;
  a1[80] = 0x400000003F7FBE77;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 125) = 1;
  a1[70] = 0xFA00000001;
  *(_QWORD *)((char *)a1 + 188) = 0x3F6666663F733333;
  *(_QWORD *)&result = 0x271000000002;
  a1[22] = 0x271000000002;
  return result;
}

double vl_par_ver_150(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  result = 12831.713;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 38) = 2;
  *((_DWORD *)a1 + 125) = 0;
  *((_DWORD *)a1 + 27) = 1082130432;
  return result;
}

double vl_par_ver_151(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  result = 12831.713;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 38) = 2;
  *((_DWORD *)a1 + 125) = 0;
  *((_DWORD *)a1 + 27) = 1082130432;
  *((_DWORD *)a1 + 75) = 1;
  return result;
}

double vl_par_ver_152(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  result = 12831.713;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 38) = 2;
  *((_DWORD *)a1 + 125) = 0;
  *((_DWORD *)a1 + 27) = 1082130432;
  *(_QWORD *)((char *)a1 + 300) = 0x100000001;
  return result;
}

double vl_par_ver_153(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  result = 12831.713;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 38) = 2;
  *((_DWORD *)a1 + 125) = 0;
  *((_DWORD *)a1 + 27) = 1082130432;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 22) = 3004;
  return result;
}

float vl_par_ver_154(_QWORD *a1)
{
  float result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 44) = 16;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *a1 = 0x100000002;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  result = *((float *)a1 + 100) + *((float *)a1 + 100);
  *((float *)a1 + 100) = result;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 101) = 0x40000000;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  return result;
}

double vl_par_ver_155(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  a1[19] = 0x6700000002;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *a1 = 0x100000002;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *((float *)a1 + 100) = *((float *)a1 + 100) + *((float *)a1 + 100);
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 48) = 1065353216;
  a1[22] = 0x271000000001;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(_QWORD *)&result = 0x12C00000010;
  *(_QWORD *)((char *)a1 + 204) = 0x12C00000010;
  return result;
}

float vl_par_ver_156(_QWORD *a1)
{
  float result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 44) = 16;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *a1 = 0x100000002;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  result = *((float *)a1 + 100) + *((float *)a1 + 100);
  *((float *)a1 + 100) = result;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 22) = 3006;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 125) = 1;
  return result;
}

float vl_par_ver_157(_QWORD *a1)
{
  float result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 44) = 16;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *a1 = 0x100000002;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  result = *((float *)a1 + 100) + *((float *)a1 + 100);
  *((float *)a1 + 100) = result;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 22) = 3008;
  *((_DWORD *)a1 + 29) = 1;
  return result;
}

double vl_par_ver_200(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  result = 12831.713;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 38) = 2;
  *((_DWORD *)a1 + 27) = 1082130432;
  *((_DWORD *)a1 + 125) = 1;
  return result;
}

double vl_par_ver_201(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  result = 12831.713;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 38) = 2;
  *((_DWORD *)a1 + 27) = 1082130432;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 76) = 1;
  return result;
}

double vl_par_ver_202(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  result = 12831.713;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 38) = 2;
  *((_DWORD *)a1 + 27) = 1082130432;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  return result;
}

double vl_par_ver_203(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 38) = 2;
  *((_DWORD *)a1 + 125) = 1;
  *(_QWORD *)((char *)a1 + 300) = 0x100000001;
  result = 3.49370689e-30;
  *(_QWORD *)((char *)a1 + 108) = 0x39D1B71740800000;
  return result;
}

double vl_par_ver_205(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 38) = 2;
  *((_DWORD *)a1 + 125) = 1;
  *(_QWORD *)((char *)a1 + 300) = 0x100000001;
  result = 3.49370689e-30;
  *(_QWORD *)((char *)a1 + 108) = 0x39D1B71740800000;
  *((_DWORD *)a1 + 22) = 3004;
  return result;
}

double vl_par_ver_206(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 28) = 0;
  *(_QWORD *)&result = 0x6700000002;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  return result;
}

double vl_par_ver_210(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  result = 1.30048408e-36;
  *(_QWORD *)((char *)a1 + 108) = 0x387BA88240400000;
  return result;
}

double vl_par_ver_227(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 28) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 138) = 1;
  *(_QWORD *)((char *)a1 + 604) = 0;
  a1[74] = 0;
  result = 2.00000047;
  a1[80] = 0x400000003F7FBE77;
  return result;
}

double vl_par_ver_228(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 28) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 138) = 1;
  *(_QWORD *)((char *)a1 + 604) = 0;
  a1[74] = 0;
  a1[80] = 0x400000003F7FBE77;
  *(_QWORD *)&result = 0xFA00000001;
  a1[70] = 0xFA00000001;
  return result;
}

double vl_par_ver_250(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 38) = 2;
  *((_DWORD *)a1 + 125) = 1;
  *(_QWORD *)((char *)a1 + 300) = 0x100000001;
  result = 3.49370689e-30;
  *(_QWORD *)((char *)a1 + 108) = 0x39D1B71740800000;
  *((_DWORD *)a1 + 72) = 0;
  return result;
}

double vl_par_ver_251(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 28) = 0;
  *(_QWORD *)&result = 0x6700000002;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 22) = 3004;
  return result;
}

double vl_par_ver_252(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 28) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 138) = 1;
  *(_QWORD *)((char *)a1 + 604) = 0;
  a1[74] = 0;
  result = 2.00000047;
  a1[80] = 0x400000003F7FBE77;
  *((_DWORD *)a1 + 22) = 3004;
  return result;
}

double vl_par_ver_253(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 28) = 0;
  *(_QWORD *)&result = 0x6700000002;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 22) = 3004;
  *((_DWORD *)a1 + 125) = 0;
  return result;
}

double vl_par_ver_254(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 28) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 138) = 1;
  *(_QWORD *)((char *)a1 + 604) = 0;
  a1[74] = 0;
  result = 2.00000047;
  a1[80] = 0x400000003F7FBE77;
  *((_DWORD *)a1 + 22) = 3004;
  *((_DWORD *)a1 + 125) = 0;
  return result;
}

double vl_par_ver_255(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 28) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 138) = 1;
  *(_QWORD *)((char *)a1 + 604) = 0;
  a1[74] = 0;
  a1[80] = 0x400000003F7FBE77;
  *(_QWORD *)&result = 0xFA00000001;
  a1[70] = 0xFA00000001;
  *((_DWORD *)a1 + 22) = 3004;
  return result;
}

double vl_par_ver_301(uint64_t a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy((void *)a1, v3, 0x3F0uLL);
  *(_DWORD *)(a1 + 176) = 8;
  *(_DWORD *)(a1 + 252) = 1065353216;
  *(_DWORD *)(a1 + 84) = 12000;
  *(_QWORD *)(a1 + 52) = 0xB3CF5C28FLL;
  *(_QWORD *)&result = 0x6700000002;
  *(_QWORD *)(a1 + 152) = 0x6700000002;
  return result;
}

double vl_par_ver_302(uint64_t a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy((void *)a1, v3, 0x3F0uLL);
  *(_DWORD *)(a1 + 176) = 8;
  *(_DWORD *)(a1 + 252) = 1065353216;
  *(_DWORD *)(a1 + 84) = 10000;
  *(_QWORD *)(a1 + 52) = 0xB3CF5C28FLL;
  *(_QWORD *)&result = 0x6700000002;
  *(_QWORD *)(a1 + 152) = 0x6700000002;
  return result;
}

double vl_par_ver_303(uint64_t a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy((void *)a1, v3, 0x3F0uLL);
  *(_DWORD *)(a1 + 176) = 8;
  *(_DWORD *)(a1 + 252) = 1065353216;
  *(_DWORD *)(a1 + 84) = 8000;
  *(_QWORD *)(a1 + 52) = 0xB3CF5C28FLL;
  *(_QWORD *)&result = 0x6700000002;
  *(_QWORD *)(a1 + 152) = 0x6700000002;
  return result;
}

double vl_par_ver_304(uint64_t a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy((void *)a1, v3, 0x3F0uLL);
  *(_DWORD *)(a1 + 176) = 8;
  *(_DWORD *)(a1 + 252) = 1065353216;
  *(_DWORD *)(a1 + 84) = 6000;
  *(_QWORD *)(a1 + 52) = 0xB3CF5C28FLL;
  *(_QWORD *)&result = 0x6700000002;
  *(_QWORD *)(a1 + 152) = 0x6700000002;
  return result;
}

double vl_par_ver_305(uint64_t a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy((void *)a1, v3, 0x3F0uLL);
  *(_DWORD *)(a1 + 176) = 8;
  *(_DWORD *)(a1 + 252) = 1065353216;
  *(_DWORD *)(a1 + 84) = 4000;
  *(_QWORD *)(a1 + 52) = 0xB3CF5C28FLL;
  *(_QWORD *)&result = 0x6700000002;
  *(_QWORD *)(a1 + 152) = 0x6700000002;
  return result;
}

double vl_par_ver_306(uint64_t a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy((void *)a1, v3, 0x3F0uLL);
  *(_DWORD *)(a1 + 176) = 8;
  *(_DWORD *)(a1 + 252) = 1065353216;
  *(_DWORD *)(a1 + 84) = 2000;
  *(_QWORD *)(a1 + 52) = 0xB3CF5C28FLL;
  *(_QWORD *)&result = 0x6700000002;
  *(_QWORD *)(a1 + 152) = 0x6700000002;
  return result;
}

double vl_par_ver_307(uint64_t a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy((void *)a1, v3, 0x3F0uLL);
  *(_DWORD *)(a1 + 176) = 8;
  *(_DWORD *)(a1 + 252) = 1065353216;
  *(_DWORD *)(a1 + 84) = 1000;
  *(_QWORD *)(a1 + 52) = 0xB3CF5C28FLL;
  *(_QWORD *)&result = 0x6700000002;
  *(_QWORD *)(a1 + 152) = 0x6700000002;
  return result;
}

double vl_par_ver_308(uint64_t a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy((void *)a1, v3, 0x3F0uLL);
  *(_DWORD *)(a1 + 176) = 8;
  *(_DWORD *)(a1 + 252) = 1065353216;
  *(_DWORD *)(a1 + 84) = 800;
  *(_QWORD *)(a1 + 52) = 0xB3CF5C28FLL;
  *(_QWORD *)&result = 0x6700000002;
  *(_QWORD *)(a1 + 152) = 0x6700000002;
  return result;
}

double vl_par_ver_400(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *((_DWORD *)a1 + 63) = 1065353216;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 28) = 0;
  *(_QWORD *)&result = 0x6700000002;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  return result;
}

float vl_par_ver_401(_QWORD *a1)
{
  float result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 44) = 16;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *a1 = 0x100000002;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  result = *((float *)a1 + 100) + *((float *)a1 + 100);
  *((float *)a1 + 100) = result;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 103) = 0;
  return result;
}

double vl_par_ver_402(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 28) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000040000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB830;
  *(_QWORD *)&result = 0x3C0000001ELL;
  a1[39] = 0x3C0000001ELL;
  return result;
}

double vl_par_ver_403(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 28) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[78] = 0x3FB657184AE74487;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000040000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB830;
  a1[39] = 0x3C0000001ELL;
  *((_DWORD *)a1 + 138) = 1;
  *((_DWORD *)a1 + 151) = 0;
  a1[76] = 0x900000000;
  a1[74] = 0;
  a1[80] = 0x400000003F7FBE77;
  *(_QWORD *)&result = 0xFA00000001;
  a1[70] = 0xFA00000001;
  *((_DWORD *)a1 + 22) = 3004;
  return result;
}

double vl_par_ver_404(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 28) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[78] = 0x3FB657184AE74487;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000040000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB830;
  a1[39] = 0x3C0000001ELL;
  *((_DWORD *)a1 + 138) = 1;
  *((_DWORD *)a1 + 151) = 0;
  a1[76] = 0x900000000;
  a1[74] = 0;
  a1[80] = 0x400000003F7FBE77;
  *(_QWORD *)&result = 0xFA00000001;
  a1[70] = 0xFA00000001;
  return result;
}

double vl_par_ver_410(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 28) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *((_DWORD *)a1 + 80) = 1103626240;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  *(_QWORD *)&result = 0x780000001ELL;
  a1[39] = 0x780000001ELL;
  return result;
}

double vl_par_ver_411(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 28) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *((_DWORD *)a1 + 80) = 1103626240;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  *(_QWORD *)&result = 0x1E0000001ELL;
  a1[39] = 0x1E0000001ELL;
  return result;
}

double vl_par_ver_412(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 28) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 80) = 1103626240;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  *((_DWORD *)a1 + 138) = 1;
  *((_DWORD *)a1 + 151) = 0;
  a1[76] = 0x900000000;
  a1[74] = 0;
  a1[80] = 0x400000003F7FBE77;
  *(_QWORD *)&result = 0xFA00000001;
  a1[70] = 0xFA00000001;
  *((_DWORD *)a1 + 22) = 3004;
  return result;
}

double vl_par_ver_413(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 28) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 80) = 1103626240;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  *((_DWORD *)a1 + 138) = 1;
  *((_DWORD *)a1 + 151) = 0;
  a1[76] = 0x900000000;
  a1[74] = 0;
  a1[80] = 0x400000003F7FBE77;
  *(_QWORD *)&result = 0xFA00000001;
  a1[70] = 0xFA00000001;
  *((_DWORD *)a1 + 22) = 3006;
  return result;
}

double vl_par_ver_415(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 28) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *((_DWORD *)a1 + 80) = 1103626240;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  *((_DWORD *)a1 + 92) = 1056964608;
  *((_DWORD *)a1 + 95) = 8;
  *(_QWORD *)&result = 0xA00000001ELL;
  a1[39] = 0xA00000001ELL;
  return result;
}

double vl_par_ver_416(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 28) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *((_DWORD *)a1 + 80) = 1103626240;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  *((_DWORD *)a1 + 92) = 1053609165;
  *((_DWORD *)a1 + 95) = 6;
  *(_QWORD *)&result = 0x500000001ELL;
  a1[39] = 0x500000001ELL;
  return result;
}

double vl_par_ver_420(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 28) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *((_DWORD *)a1 + 64) = 1069547520;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  *((_DWORD *)a1 + 59) = 1;
  result = 0.0000976562877;
  *((_OWORD *)a1 + 15) = xmmword_210BCB850;
  return result;
}

double vl_par_ver_421(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 28) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *((_DWORD *)a1 + 64) = 1069547520;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  *((_DWORD *)a1 + 59) = 1;
  result = 0.0000976562877;
  *((_OWORD *)a1 + 15) = xmmword_210BCB860;
  return result;
}

double vl_par_ver_425(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 28) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *((_DWORD *)a1 + 64) = 1069547520;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  *((_DWORD *)a1 + 92) = 1056964608;
  *((_DWORD *)a1 + 95) = 8;
  a1[39] = 0xA00000001ELL;
  *((_DWORD *)a1 + 59) = 1;
  result = 0.0000976562877;
  *((_OWORD *)a1 + 15) = xmmword_210BCB870;
  return result;
}

double vl_par_ver_433(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 8;
  *a1 = 0x100000002;
  a1[34] = 0x40C90FDB447A0000;
  *((_DWORD *)a1 + 125) = 1;
  *((_DWORD *)a1 + 75) = 1;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 28) = 0;
  a1[19] = 0x6700000002;
  *((_DWORD *)a1 + 40) = 1088421888;
  *((_DWORD *)a1 + 138) = 1;
  *((_DWORD *)a1 + 151) = 0;
  a1[74] = 0;
  a1[80] = 0x400000003F7FBE77;
  a1[70] = 0xFA00000001;
  *((_DWORD *)a1 + 63) = 1065353216;
  a1[78] = 0x3FB657184AE74487;
  *(_QWORD *)&result = 0x900000000;
  a1[76] = 0x900000000;
  return result;
}

double vl_par_ver_444(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  a1[22] = 0x271000000019;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *((_DWORD *)a1 + 48) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(_QWORD *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *(_QWORD *)((char *)a1 + 156) = 0x40E0000000000067;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  result = 2.24711695e307;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  return result;
}

double vl_par_ver_445(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  a1[22] = 0x271000000019;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *((_DWORD *)a1 + 48) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(_QWORD *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *(_QWORD *)((char *)a1 + 156) = 0x40E0000000000067;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  result = 1.30048408e-36;
  *(_QWORD *)((char *)a1 + 108) = 0x387BA88240400000;
  return result;
}

double vl_par_ver_446(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[22] = 0x271000000019;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *((_DWORD *)a1 + 48) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(_QWORD *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *(_QWORD *)((char *)a1 + 156) = 0x40E0000000000067;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  result = 1.30048408e-36;
  *(_QWORD *)((char *)a1 + 108) = 0x387BA88240400000;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 138) = 1;
  a1[80] = 0x400000003F7FBE77;
  *((_DWORD *)a1 + 22) = 3004;
  return result;
}

double vl_par_ver_447(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  result = 0.00750000117;
  *((_DWORD *)a1 + 48) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(_QWORD *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *(_QWORD *)((char *)a1 + 156) = 0x40E0000000000067;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  a1[22] = 0x271000000008;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_4470(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  result = 0.00750000117;
  *((_DWORD *)a1 + 48) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(_QWORD *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *(_QWORD *)((char *)a1 + 156) = 0x40E0000000000067;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  *(_QWORD *)((char *)a1 + 108) = 0x387BA88240400000;
  a1[22] = 0x271000000008;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_4471(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  result = 0.00750000117;
  *((_DWORD *)a1 + 48) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(_QWORD *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *(_QWORD *)((char *)a1 + 156) = 0x40E0000000000067;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  *(_QWORD *)((char *)a1 + 108) = 0x387BA88240400000;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 138) = 1;
  a1[80] = 0x400000003F7FBE77;
  *((_DWORD *)a1 + 22) = 3004;
  a1[22] = 0x271000000008;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_448(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  result = 0.00750000117;
  *((_DWORD *)a1 + 48) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(_QWORD *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *(_QWORD *)((char *)a1 + 156) = 0x40E0000000000067;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  a1[22] = 0x271000000010;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_4480(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  result = 0.00750000117;
  *((_DWORD *)a1 + 48) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(_QWORD *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *(_QWORD *)((char *)a1 + 156) = 0x40E0000000000067;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  *(_QWORD *)((char *)a1 + 108) = 0x387BA88240400000;
  a1[22] = 0x271000000010;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_4481(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  result = 0.00750000117;
  *((_DWORD *)a1 + 48) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(_QWORD *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *(_QWORD *)((char *)a1 + 156) = 0x40E0000000000067;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  *(_QWORD *)((char *)a1 + 108) = 0x387BA88240400000;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 138) = 1;
  a1[80] = 0x400000003F7FBE77;
  *((_DWORD *)a1 + 22) = 3004;
  a1[22] = 0x271000000010;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_449(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  result = 0.00750000117;
  *((_DWORD *)a1 + 48) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(_QWORD *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *(_QWORD *)((char *)a1 + 156) = 0x40E0000000000067;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  a1[22] = 0x271000000001;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_4490(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  result = 0.00750000117;
  *((_DWORD *)a1 + 48) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(_QWORD *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *(_QWORD *)((char *)a1 + 156) = 0x40E0000000000067;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  *(_QWORD *)((char *)a1 + 108) = 0x387BA88240400000;
  a1[22] = 0x271000000001;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_4491(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  result = 0.00750000117;
  *((_DWORD *)a1 + 48) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(_QWORD *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *(_QWORD *)((char *)a1 + 156) = 0x40E0000000000067;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  *(_QWORD *)((char *)a1 + 108) = 0x387BA88240400000;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 138) = 1;
  a1[80] = 0x400000003F7FBE77;
  *((_DWORD *)a1 + 22) = 3004;
  a1[22] = 0x271000000001;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_450(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  result = 0.00750000117;
  *((_DWORD *)a1 + 48) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(_QWORD *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *(_QWORD *)((char *)a1 + 156) = 0x40E0000000000067;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  *(_QWORD *)((char *)a1 + 108) = 0x387BA88240400000;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 138) = 1;
  a1[80] = 0x400000003F7FBE77;
  *((_DWORD *)a1 + 22) = 3004;
  a1[22] = 0x271000000009;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_451(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  a1[22] = 0x271000000019;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *((_DWORD *)a1 + 48) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(_QWORD *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  result = 1.30048408e-36;
  *(_QWORD *)((char *)a1 + 108) = 0x387BA88240400000;
  *(_QWORD *)((char *)a1 + 156) = 0x40E0000000000068;
  return result;
}

double vl_par_ver_452(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[22] = 0x271000000019;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *((_DWORD *)a1 + 48) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(_QWORD *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  result = 1.30048408e-36;
  *(_QWORD *)((char *)a1 + 108) = 0x387BA88240400000;
  *(_QWORD *)((char *)a1 + 156) = 0x40E0000000000068;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 138) = 1;
  a1[80] = 0x400000003F7FBE77;
  *((_DWORD *)a1 + 22) = 3004;
  return result;
}

double vl_par_ver_453(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  *((_DWORD *)a1 + 48) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  *(_QWORD *)((char *)a1 + 108) = 0x387BA88240400000;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(_QWORD *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  a1[22] = 0xF424000000020;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *(_OWORD *)((char *)a1 + 204) = xmmword_210BCB880;
  *(_QWORD *)&result = 0x5DC0000012CLL;
  *(_QWORD *)((char *)a1 + 220) = 0x5DC0000012CLL;
  *((_DWORD *)a1 + 57) = 1069547520;
  return result;
}

double vl_par_ver_4531(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  *((_DWORD *)a1 + 48) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  *(_QWORD *)((char *)a1 + 108) = 0x387BA88240400000;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 138) = 1;
  a1[80] = 0x400000003F7FBE77;
  *((_DWORD *)a1 + 22) = 3004;
  *(_QWORD *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  a1[22] = 0xF424000000020;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *(_OWORD *)((char *)a1 + 204) = xmmword_210BCB880;
  *(_QWORD *)&result = 0x5DC0000012CLL;
  *(_QWORD *)((char *)a1 + 220) = 0x5DC0000012CLL;
  *((_DWORD *)a1 + 57) = 1069547520;
  return result;
}

double vl_par_ver_4532(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  *((_DWORD *)a1 + 48) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  *(_QWORD *)((char *)a1 + 108) = 0x387BA88240400000;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(_QWORD *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  a1[22] = 0xF424000000020;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *(_OWORD *)((char *)a1 + 204) = xmmword_210BCB880;
  *(_QWORD *)&result = 0x5DC0000012CLL;
  *(_QWORD *)((char *)a1 + 220) = 0x5DC0000012CLL;
  *((_DWORD *)a1 + 57) = 1069547520;
  *((_DWORD *)a1 + 26) = 2048;
  return result;
}

double vl_par_ver_454(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  *((_DWORD *)a1 + 48) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  *(_QWORD *)((char *)a1 + 108) = 0x387BA88240400000;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(_QWORD *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  a1[22] = 0xF424000000020;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *(_OWORD *)((char *)a1 + 204) = xmmword_210BCB890;
  *(_QWORD *)&result = 0x3E8000000C8;
  *(_QWORD *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  return result;
}

double vl_par_ver_4541(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  *((_DWORD *)a1 + 48) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  *(_QWORD *)((char *)a1 + 108) = 0x387BA88240400000;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 138) = 1;
  a1[80] = 0x400000003F7FBE77;
  *((_DWORD *)a1 + 22) = 3004;
  *(_QWORD *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  a1[22] = 0xF424000000020;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *(_OWORD *)((char *)a1 + 204) = xmmword_210BCB890;
  *(_QWORD *)&result = 0x3E8000000C8;
  *(_QWORD *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  return result;
}

double vl_par_ver_455(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  result = 0.00750000117;
  *((_DWORD *)a1 + 48) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(_QWORD *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  *(_QWORD *)((char *)a1 + 108) = 0x387BA88240400000;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[22] = 0x271000000008;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_4551(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  result = 0.00750000117;
  *((_DWORD *)a1 + 48) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(_QWORD *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  *(_QWORD *)((char *)a1 + 108) = 0x387BA88240400000;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 138) = 1;
  a1[80] = 0x400000003F7FBE77;
  *((_DWORD *)a1 + 22) = 3004;
  a1[22] = 0x271000000008;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_456(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  result = 0.00750000117;
  *((_DWORD *)a1 + 48) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(_QWORD *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  *(_QWORD *)((char *)a1 + 108) = 0x387BA88240400000;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[22] = 0x271000000010;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_4561(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  result = 0.00750000117;
  *((_DWORD *)a1 + 48) = 1065353216;
  *((_DWORD *)a1 + 56) = 1500;
  *((_DWORD *)a1 + 50) = 1064514355;
  *(_QWORD *)((char *)a1 + 204) = 0x12C00000010;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  *(_QWORD *)((char *)a1 + 108) = 0x387BA88240400000;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 138) = 1;
  a1[80] = 0x400000003F7FBE77;
  *((_DWORD *)a1 + 22) = 3004;
  a1[22] = 0x271000000010;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_457(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  result = 0.00750000117;
  *((_DWORD *)a1 + 48) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  *(_QWORD *)((char *)a1 + 108) = 0x387BA88240400000;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 138) = 1;
  a1[80] = 0x400000003F7FBE77;
  *((_DWORD *)a1 + 22) = 3004;
  *(_QWORD *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_210BCB890;
  *(_QWORD *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  a1[22] = 0xF424000000028;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_4571(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  result = 0.00750000117;
  *((_DWORD *)a1 + 48) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  *(_QWORD *)((char *)a1 + 108) = 0x387BA88240400000;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 22) = 3004;
  *(_QWORD *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_210BCB890;
  *(_QWORD *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  a1[22] = 0xF424000000028;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *((_DWORD *)a1 + 138) = 0;
  a1[80] = 0x400000003F666666;
  return result;
}

double vl_par_ver_4572(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  result = 0.00750000117;
  *((_DWORD *)a1 + 48) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  *(_QWORD *)((char *)a1 + 108) = 0x387BA88240400000;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 22) = 3004;
  *(_QWORD *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_210BCB890;
  *(_QWORD *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 138) = 0;
  a1[80] = 0x400000003F666666;
  a1[22] = 0xF424000000008;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_4573(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  *((_DWORD *)a1 + 48) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[70] = 0xFC00000001;
  *(_QWORD *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_210BCB890;
  *(_QWORD *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 138) = 0;
  a1[80] = 0x400000003F666666;
  a1[22] = 0xF424000000008;
  a1[23] = 0x3F7EB8523C23D70ALL;
  result = 1.3004839e-36;
  *(_QWORD *)((char *)a1 + 108) = 0x387BA88200000000;
  *((_DWORD *)a1 + 22) = 3009;
  *((_DWORD *)a1 + 29) = 1;
  return result;
}

double vl_par_ver_4574(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  *((_DWORD *)a1 + 48) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[70] = 0xFC00000001;
  *(_QWORD *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_210BCB890;
  *(_QWORD *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 138) = 0;
  a1[80] = 0x400000003F666666;
  a1[22] = 0xF424000000008;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *((_DWORD *)a1 + 22) = 3006;
  result = 3.49300435e-38;
  *(_QWORD *)((char *)a1 + 108) = 0x3827C5AC00000000;
  *((_DWORD *)a1 + 29) = 0;
  return result;
}

double vl_par_ver_4575(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  *((_DWORD *)a1 + 48) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[70] = 0xFC00000001;
  *(_QWORD *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_210BCB890;
  *(_QWORD *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 138) = 0;
  a1[80] = 0x400000003F666666;
  a1[22] = 0xF424000000008;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *((_DWORD *)a1 + 22) = 3006;
  result = 1.30048408e-36;
  *(_QWORD *)((char *)a1 + 108) = 0x387BA88240400000;
  *((_DWORD *)a1 + 29) = 0;
  return result;
}

double vl_par_ver_4576(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  *((_DWORD *)a1 + 48) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[70] = 0xFC00000001;
  *(_QWORD *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_210BCB890;
  *(_QWORD *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 138) = 0;
  a1[80] = 0x400000003F666666;
  a1[22] = 0xF424000000008;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *((_DWORD *)a1 + 22) = 3006;
  result = 1.3004839e-36;
  *(_QWORD *)((char *)a1 + 108) = 0x387BA88200000000;
  *((_DWORD *)a1 + 29) = 1;
  return result;
}

double vl_par_ver_458(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  *((_DWORD *)a1 + 48) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(_QWORD *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  a1[22] = 0xF424000000020;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *(_OWORD *)((char *)a1 + 204) = xmmword_210BCB890;
  *(_QWORD *)&result = 0x3E8000000C8;
  *(_QWORD *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 22) = 808;
  return result;
}

double vl_par_ver_459(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  result = 0.00750000117;
  *((_DWORD *)a1 + 48) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(_QWORD *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_210BCB890;
  *(_QWORD *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 22) = 808;
  a1[22] = 0xF424000000008;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_460(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  result = 0.00750000117;
  *((_DWORD *)a1 + 48) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(_QWORD *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_210BCB890;
  *(_QWORD *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 22) = 808;
  a1[22] = 0xF424000000028;
  a1[23] = 0x3F7EB8523C23D70ALL;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 138) = 1;
  a1[80] = 0x400000003F7EB852;
  return result;
}

double vl_par_ver_4601(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  result = 0.00750000117;
  *((_DWORD *)a1 + 48) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(_QWORD *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_210BCB890;
  *(_QWORD *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 22) = 808;
  a1[22] = 0xF424000000028;
  a1[23] = 0x3F7EB8523C23D70ALL;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 138) = 0;
  a1[80] = 0x400000003F666666;
  return result;
}

double vl_par_ver_4602(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  result = 0.00750000117;
  *((_DWORD *)a1 + 48) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(_QWORD *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_210BCB890;
  *(_QWORD *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 22) = 808;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 138) = 0;
  a1[80] = 0x400000003F666666;
  a1[22] = 0xF424000000008;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_461(_QWORD *a1)
{
  double result;
  _OWORD v3[18];
  char __src[1008];

  memset(v3, 0, 276);
  vl_par_default(__src);
  memcpy(a1, __src, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  *((_DWORD *)a1 + 48) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(_QWORD *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  a1[22] = 0xF424000000020;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *(_OWORD *)((char *)a1 + 204) = xmmword_210BCB890;
  *(_QWORD *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 22) = 808;
  lbl_par_ver((uint64_t)v3, 808);
  *((_DWORD *)a1 + 33) = 1;
  result = *(double *)((char *)&v3[16] + 12);
  a1[17] = *(_QWORD *)((char *)&v3[16] + 12);
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 22) = 3008;
  *((_DWORD *)a1 + 29) = 1;
  return result;
}

double vl_par_ver_462(_QWORD *a1)
{
  double result;
  _OWORD v3[18];
  char __src[1008];

  memset(v3, 0, 276);
  vl_par_default(__src);
  memcpy(a1, __src, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  *((_DWORD *)a1 + 48) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(_QWORD *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  a1[22] = 0xF424000000020;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *(_OWORD *)((char *)a1 + 204) = xmmword_210BCB890;
  *(_QWORD *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 22) = 808;
  lbl_par_ver((uint64_t)v3, 808);
  *((_DWORD *)a1 + 33) = 1;
  result = *(double *)((char *)&v3[16] + 12);
  a1[17] = *(_QWORD *)((char *)&v3[16] + 12);
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 22) = 3008;
  *((_DWORD *)a1 + 29) = 1;
  *((_DWORD *)a1 + 44) = 8;
  return result;
}

double vl_par_ver_463(_QWORD *a1)
{
  double result;
  _OWORD v3[18];
  char __src[1008];

  memset(v3, 0, 276);
  vl_par_default(__src);
  memcpy(a1, __src, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  *((_DWORD *)a1 + 48) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(_QWORD *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  a1[22] = 0xF424000000020;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *(_OWORD *)((char *)a1 + 204) = xmmword_210BCB890;
  *(_QWORD *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 22) = 808;
  lbl_par_ver((uint64_t)v3, 808);
  *((_DWORD *)a1 + 33) = 1;
  result = *(double *)((char *)&v3[16] + 12);
  a1[17] = *(_QWORD *)((char *)&v3[16] + 12);
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 22) = 3008;
  *((_DWORD *)a1 + 29) = 1;
  *((_DWORD *)a1 + 44) = 40;
  *((_DWORD *)a1 + 140) = 1;
  *((_DWORD *)a1 + 138) = 1;
  a1[80] = 0x400000003F7EB852;
  return result;
}

double vl_par_ver_46414(uint64_t a1)
{
  double result;

  vl_par_ver_463((_QWORD *)a1);
  *(_DWORD *)(a1 + 564) = 253;
  *(_DWORD *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 640) = 1063675494;
  *(_DWORD *)(a1 + 88) = 3011;
  *(_DWORD *)(a1 + 116) = 0;
  *(_QWORD *)&result = 0x100000001;
  *(_OWORD *)(a1 + 992) = xmmword_210BCB8A0;
  return result;
}

double vl_par_ver_46416(uint64_t a1)
{
  double result;

  vl_par_ver_463((_QWORD *)a1);
  *(_DWORD *)(a1 + 564) = 253;
  *(_DWORD *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 640) = 1063675494;
  *(_DWORD *)(a1 + 88) = 3011;
  *(_DWORD *)(a1 + 104) = 384;
  *(_DWORD *)(a1 + 116) = 0;
  *(_QWORD *)&result = 0x12000000180;
  *(_QWORD *)(a1 + 1000) = 0x12000000180;
  *(_DWORD *)(a1 + 992) = 1;
  *(_DWORD *)(a1 + 160) = 0;
  return result;
}

double vl_par_ver_46417(uint64_t a1)
{
  double result;

  vl_par_ver_463((_QWORD *)a1);
  *(_DWORD *)(a1 + 564) = 253;
  *(_DWORD *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 640) = 1063675494;
  *(_DWORD *)(a1 + 88) = 3011;
  *(_DWORD *)(a1 + 104) = 384;
  *(_DWORD *)(a1 + 116) = 0;
  *(_QWORD *)&result = 0xD800000180;
  *(_QWORD *)(a1 + 1000) = 0xD800000180;
  *(_DWORD *)(a1 + 992) = 1;
  *(_DWORD *)(a1 + 160) = 0;
  return result;
}

float vl_par_ver_46430(_QWORD *a1)
{
  _QWORD *v1;
  float result;

  v1 = a1;
  vl_par_ver_463(a1);
  *((_DWORD *)v1 + 44) = 16;
  v1 += 22;
  *((_DWORD *)v1 + 94) = 0;
  v1[48] = 0xFD00000000;
  *((_DWORD *)v1 + 116) = 1053609165;
  *((_DWORD *)v1 + 107) = 1;
  *((_DWORD *)v1 + 114) = 0x40000000;
  *((_DWORD *)v1 + 109) = 9;
  *((_DWORD *)v1 + 104) = 1;
  *((_DWORD *)v1 + 85) = 1065353216;
  *(_QWORD *)((char *)v1 + 196) = 0x3D0EFA353C8EFA35;
  v1[56] = 0x3FA1DF46A0000000;
  *(_QWORD *)((char *)v1 + 252) = 0x3D0EFA353C8EFA35;
  result = *((float *)v1 + 66) + *((float *)v1 + 66);
  *((float *)v1 + 66) = result;
  *(v1 - 2) = 0xA00000000;
  return result;
}

float vl_par_ver_46432(_QWORD *a1)
{
  _QWORD *v1;
  float result;

  v1 = a1;
  vl_par_ver_463(a1);
  *((_DWORD *)v1 + 44) = 16;
  v1 += 22;
  *((_DWORD *)v1 + 94) = 0;
  v1[48] = 0xFD00000000;
  *((_DWORD *)v1 + 116) = 1053609165;
  *((_DWORD *)v1 + 107) = 1;
  *((_DWORD *)v1 + 114) = 0x40000000;
  *((_DWORD *)v1 + 104) = 1;
  *((_DWORD *)v1 + 85) = 1065353216;
  *(_QWORD *)((char *)v1 + 196) = 0x3D0EFA353C8EFA35;
  v1[56] = 0x3FA1DF46A0000000;
  *(_QWORD *)((char *)v1 + 252) = 0x3D0EFA353C8EFA35;
  result = *((float *)v1 + 66) + *((float *)v1 + 66);
  *((float *)v1 + 66) = result;
  *(v1 - 2) = 0xA00000000;
  *((_DWORD *)v1 + 109) = 15;
  return result;
}

float vl_par_ver_46434(_QWORD *a1)
{
  _QWORD *v1;
  float result;

  v1 = a1;
  vl_par_ver_463(a1);
  *((_DWORD *)v1 + 44) = 48;
  v1 += 22;
  *((_DWORD *)v1 + 94) = 0;
  v1[48] = 0xFD00000000;
  *((_DWORD *)v1 + 107) = 1;
  *((_DWORD *)v1 + 114) = 0x40000000;
  *((_DWORD *)v1 + 104) = 1;
  *((_DWORD *)v1 + 85) = 1065353216;
  *(_QWORD *)((char *)v1 + 196) = 0x3D0EFA353C8EFA35;
  v1[56] = 0x3FA1DF46A0000000;
  *(_QWORD *)((char *)v1 + 252) = 0x3D0EFA353C8EFA35;
  result = *((float *)v1 + 66) + *((float *)v1 + 66);
  *((float *)v1 + 66) = result;
  *((_DWORD *)v1 + 109) = 4;
  *((_DWORD *)v1 + 116) = 0;
  *(_QWORD *)((char *)v1 - 20) = 101;
  *((_DWORD *)v1 - 3) = 10;
  return result;
}

double vl_par_ver_46435(_QWORD *a1)
{
  _QWORD *v1;
  double result;

  v1 = a1;
  vl_par_ver_463(a1);
  *((_DWORD *)v1 + 44) = 176;
  v1 += 22;
  *((_DWORD *)v1 + 94) = 0;
  v1[48] = 0xFD00000000;
  *((_DWORD *)v1 + 107) = 1;
  *((_DWORD *)v1 + 114) = 0x40000000;
  *((_DWORD *)v1 + 104) = 1;
  *(_QWORD *)((char *)v1 + 340) = 0x23F800000;
  *(_QWORD *)((char *)v1 + 196) = 0x3D5677503C8EFA35;
  *(_QWORD *)((char *)v1 + 252) = 0x3D5677503C8EFA35;
  *((float *)v1 + 66) = *((float *)v1 + 66) + *((float *)v1 + 66);
  *((_DWORD *)v1 + 109) = 4;
  *(_QWORD *)((char *)v1 - 20) = 101;
  *((_DWORD *)v1 - 3) = 10;
  *((_DWORD *)v1 + 56) = 995522384;
  *((_DWORD *)v1 + 82) = 0x40000000;
  v1[56] = 0x3FAACEEA00000000;
  result = -0.0078125;
  v1[58] = 0xBF80000000000000;
  *((_DWORD *)v1 + 30) = 1069547520;
  return result;
}

double vl_par_ver_46436(_QWORD *a1)
{
  _QWORD *v1;
  double result;

  v1 = a1;
  vl_par_ver_463(a1);
  *((_DWORD *)v1 + 44) = 176;
  v1 += 22;
  *((_DWORD *)v1 + 94) = 0;
  v1[48] = 0xFD00000000;
  *((_DWORD *)v1 + 107) = 1;
  *((_DWORD *)v1 + 114) = 0x40000000;
  *((_DWORD *)v1 + 104) = 1;
  *(_QWORD *)((char *)v1 + 340) = 0x23F800000;
  *(_QWORD *)((char *)v1 + 196) = 0x3D5677503C8EFA35;
  *(_QWORD *)((char *)v1 + 252) = 0x3D5677503C8EFA35;
  *((float *)v1 + 66) = *((float *)v1 + 66) + *((float *)v1 + 66);
  *((_DWORD *)v1 + 109) = 4;
  *(_QWORD *)((char *)v1 - 20) = 101;
  *((_DWORD *)v1 - 3) = 10;
  *((_DWORD *)v1 + 56) = 987133776;
  *((_DWORD *)v1 + 82) = 1077936128;
  v1[56] = 0x3FAACEEA00000000;
  result = -0.0078125;
  v1[58] = 0xBF80000000000000;
  *((_DWORD *)v1 + 30) = 1069547520;
  return result;
}

double vl_par_ver_46444(uint64_t a1)
{
  double result;

  vl_par_ver_463((_QWORD *)a1);
  *(_DWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 560) = 0xFD00000000;
  *(_DWORD *)(a1 + 640) = 1060320051;
  *(_DWORD *)(a1 + 88) = 3011;
  *(_DWORD *)(a1 + 116) = 0;
  *(_QWORD *)&result = 0x100000001;
  *(_OWORD *)(a1 + 992) = xmmword_210BCB8A0;
  return result;
}

double vl_par_ver_46446(uint64_t a1)
{
  double result;

  vl_par_ver_463((_QWORD *)a1);
  *(_DWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 560) = 0xFD00000000;
  *(_DWORD *)(a1 + 640) = 1060320051;
  *(_DWORD *)(a1 + 88) = 3011;
  *(_DWORD *)(a1 + 104) = 384;
  *(_DWORD *)(a1 + 116) = 0;
  *(_QWORD *)&result = 0x12000000180;
  *(_QWORD *)(a1 + 1000) = 0x12000000180;
  *(_DWORD *)(a1 + 992) = 1;
  *(_DWORD *)(a1 + 160) = 0;
  return result;
}

double vl_par_ver_46447(uint64_t a1)
{
  double result;

  vl_par_ver_463((_QWORD *)a1);
  *(_DWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 560) = 0xFD00000000;
  *(_DWORD *)(a1 + 640) = 1060320051;
  *(_DWORD *)(a1 + 88) = 3011;
  *(_DWORD *)(a1 + 104) = 384;
  *(_DWORD *)(a1 + 116) = 0;
  *(_QWORD *)&result = 0xD800000180;
  *(_QWORD *)(a1 + 1000) = 0xD800000180;
  *(_DWORD *)(a1 + 992) = 1;
  *(_DWORD *)(a1 + 160) = 0;
  return result;
}

double vl_par_ver_465(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  *((_DWORD *)a1 + 48) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(_QWORD *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_210BCB890;
  *(_QWORD *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 22) = 808;
  a1[22] = 0xF424000000028;
  a1[23] = 0x3F7EB8523C23D70ALL;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 138) = 1;
  a1[80] = 0x400000003F7EB852;
  *((_DWORD *)a1 + 59) = 1;
  result = 0.0000976562877;
  a1[30] = 0x3F19999A3F5EB852;
  *((_DWORD *)a1 + 62) = 1128792064;
  return result;
}

double vl_par_ver_4651(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  *((_DWORD *)a1 + 48) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(_QWORD *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_210BCB890;
  *(_QWORD *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 22) = 808;
  a1[22] = 0xF424000000028;
  a1[23] = 0x3F7EB8523C23D70ALL;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 59) = 1;
  a1[30] = 0x3F19999A3F5EB852;
  *((_DWORD *)a1 + 62) = 1128792064;
  *((_DWORD *)a1 + 138) = 0;
  result = 2.00000047;
  a1[80] = 0x400000003F666666;
  return result;
}

double vl_par_ver_4652(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  result = 0.00750000117;
  *((_DWORD *)a1 + 48) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(_QWORD *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_210BCB890;
  *(_QWORD *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 22) = 808;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 59) = 1;
  a1[30] = 0x3F19999A3F5EB852;
  *((_DWORD *)a1 + 62) = 1128792064;
  *((_DWORD *)a1 + 138) = 0;
  a1[80] = 0x400000003F666666;
  a1[22] = 0xF424000000008;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

void *vl_par_ver_472(uint64_t a1)
{
  _BYTE v3[304];

  vl_par_ver_463((_QWORD *)a1);
  *(_DWORD *)(a1 + 564) = 253;
  *(_DWORD *)(a1 + 88) = 3010;
  *(_DWORD *)(a1 + 648) = 1;
  slam_tracker_vo_par_ver(70, (uint64_t)v3);
  return memcpy((void *)(a1 + 672), v3, 0x130uLL);
}

double vl_par_ver_473(uint64_t a1)
{
  double result;
  _BYTE v3[304];

  vl_par_ver_463((_QWORD *)a1);
  *(_DWORD *)(a1 + 564) = 253;
  *(_DWORD *)(a1 + 88) = 3010;
  *(_DWORD *)(a1 + 648) = 1;
  slam_tracker_vo_par_ver(70, (uint64_t)v3);
  memcpy((void *)(a1 + 672), v3, 0x130uLL);
  *(_QWORD *)&result = 0x7D000000001;
  *(_QWORD *)(a1 + 656) = 0x7D000000001;
  return result;
}

double vl_par_ver_4731(uint64_t a1)
{
  double result;
  _BYTE v3[304];

  vl_par_ver_463((_QWORD *)a1);
  *(_DWORD *)(a1 + 564) = 253;
  *(_DWORD *)(a1 + 88) = 3010;
  *(_DWORD *)(a1 + 648) = 1;
  slam_tracker_vo_par_ver(70, (uint64_t)v3);
  memcpy((void *)(a1 + 672), v3, 0x130uLL);
  *(_QWORD *)&result = 0x7D000000001;
  *(_QWORD *)(a1 + 656) = 0x7D000000001;
  *(_DWORD *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 640) = 1063675494;
  return result;
}

double vl_par_ver_4732(uint64_t a1)
{
  double result;
  _BYTE v3[304];

  vl_par_ver_463((_QWORD *)a1);
  *(_DWORD *)(a1 + 564) = 253;
  *(_DWORD *)(a1 + 88) = 3010;
  *(_DWORD *)(a1 + 648) = 1;
  slam_tracker_vo_par_ver(70, (uint64_t)v3);
  memcpy((void *)(a1 + 672), v3, 0x130uLL);
  *(_QWORD *)&result = 0x7D000000001;
  *(_QWORD *)(a1 + 656) = 0x7D000000001;
  *(_DWORD *)(a1 + 88) = 3011;
  return result;
}

double vl_par_ver_4733(uint64_t a1)
{
  double result;
  _BYTE v3[304];

  vl_par_ver_463((_QWORD *)a1);
  *(_DWORD *)(a1 + 564) = 253;
  *(_DWORD *)(a1 + 88) = 3010;
  *(_DWORD *)(a1 + 648) = 1;
  slam_tracker_vo_par_ver(70, (uint64_t)v3);
  memcpy((void *)(a1 + 672), v3, 0x130uLL);
  *(_QWORD *)&result = 0x7D000000001;
  *(_QWORD *)(a1 + 656) = 0x7D000000001;
  *(_DWORD *)(a1 + 560) = 0;
  *(_DWORD *)(a1 + 976) = 1;
  *(_DWORD *)(a1 + 648) = 0;
  return result;
}

void *vl_par_ver_474(uint64_t a1)
{
  _BYTE v3[304];

  vl_par_ver_463((_QWORD *)a1);
  *(_DWORD *)(a1 + 564) = 253;
  *(_DWORD *)(a1 + 88) = 3010;
  *(_DWORD *)(a1 + 648) = 1;
  slam_tracker_vo_par_ver(70, (uint64_t)v3);
  memcpy((void *)(a1 + 672), v3, 0x130uLL);
  *(_QWORD *)(a1 + 656) = 0x7D000000001;
  slam_tracker_vo_par_ver(71, (uint64_t)v3);
  return memcpy((void *)(a1 + 672), v3, 0x130uLL);
}

double vl_par_ver_475(uint64_t a1)
{
  double result;
  _BYTE v3[304];

  vl_par_ver_463((_QWORD *)a1);
  *(_DWORD *)(a1 + 564) = 253;
  *(_DWORD *)(a1 + 88) = 3010;
  *(_DWORD *)(a1 + 648) = 1;
  slam_tracker_vo_par_ver(70, (uint64_t)v3);
  memcpy((void *)(a1 + 672), v3, 0x130uLL);
  *(_QWORD *)&result = 0x7D000000001;
  *(_QWORD *)(a1 + 656) = 0x7D000000001;
  *(_DWORD *)(a1 + 88) = 3011;
  *(_DWORD *)(a1 + 648) = 0;
  *(_DWORD *)(a1 + 976) = 1;
  *(_DWORD *)(a1 + 988) = 4;
  *(_DWORD *)(a1 + 640) = 1065017672;
  return result;
}

double vl_par_ver_4751(uint64_t a1)
{
  double result;
  _BYTE v3[304];

  vl_par_ver_463((_QWORD *)a1);
  *(_DWORD *)(a1 + 564) = 253;
  *(_DWORD *)(a1 + 88) = 3010;
  *(_DWORD *)(a1 + 648) = 1;
  slam_tracker_vo_par_ver(70, (uint64_t)v3);
  memcpy((void *)(a1 + 672), v3, 0x130uLL);
  *(_QWORD *)&result = 0x7D000000001;
  *(_QWORD *)(a1 + 656) = 0x7D000000001;
  *(_DWORD *)(a1 + 88) = 3011;
  *(_DWORD *)(a1 + 648) = 0;
  *(_DWORD *)(a1 + 976) = 1;
  *(_DWORD *)(a1 + 988) = 4;
  *(_DWORD *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 640) = 1063675494;
  return result;
}

double vl_par_ver_4752(uint64_t a1)
{
  double result;
  _BYTE v3[304];

  vl_par_ver_463((_QWORD *)a1);
  *(_DWORD *)(a1 + 564) = 253;
  *(_DWORD *)(a1 + 88) = 3010;
  *(_DWORD *)(a1 + 648) = 1;
  slam_tracker_vo_par_ver(70, (uint64_t)v3);
  memcpy((void *)(a1 + 672), v3, 0x130uLL);
  *(_QWORD *)&result = 0x7D000000001;
  *(_QWORD *)(a1 + 656) = 0x7D000000001;
  *(_DWORD *)(a1 + 88) = 3011;
  *(_DWORD *)(a1 + 648) = 0;
  *(_DWORD *)(a1 + 976) = 1;
  *(_DWORD *)(a1 + 988) = 4;
  *(_DWORD *)(a1 + 640) = 1065017672;
  *(_DWORD *)(a1 + 560) = 0;
  return result;
}

float vl_par_ver_480(_QWORD *a1)
{
  _QWORD *v1;
  float result;

  v1 = a1;
  vl_par_ver_463(a1);
  *((_DWORD *)v1 + 44) = 42;
  v1 += 22;
  *((_DWORD *)v1 + 94) = 0;
  v1[48] = 0xFD00000000;
  *((_DWORD *)v1 + 116) = 1053609165;
  *((_DWORD *)v1 + 107) = 1;
  *((_DWORD *)v1 + 114) = 0x40000000;
  *((_DWORD *)v1 + 104) = 1;
  *((_DWORD *)v1 + 85) = 1065353216;
  *(_QWORD *)((char *)v1 + 252) = 0x3D0EFA353C8EFA35;
  result = *((float *)v1 + 66) + *((float *)v1 + 66);
  *((float *)v1 + 66) = result;
  *(v1 - 2) = 0xA00000000;
  *((_DWORD *)v1 + 82) = 0x40000000;
  *((_DWORD *)v1 + 109) = 2;
  *(_QWORD *)((char *)v1 + 196) = 0x3DB2B8C23C8EFA35;
  v1[56] = 0x3FB6571840000000;
  return result;
}

double vl_par_ver_706(_QWORD *a1)
{
  double result;
  _OWORD v3[18];
  char __src[1008];

  memset(v3, 0, 276);
  vl_par_default(__src);
  memcpy(a1, __src, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  *((_DWORD *)a1 + 48) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(_QWORD *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  a1[22] = 0xF424000000020;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *(_OWORD *)((char *)a1 + 204) = xmmword_210BCB890;
  *(_QWORD *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 22) = 808;
  lbl_par_ver((uint64_t)v3, 808);
  *((_DWORD *)a1 + 33) = 1;
  a1[17] = *(_QWORD *)((char *)&v3[16] + 12);
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 22) = 3008;
  *((_DWORD *)a1 + 29) = 1;
  *((_DWORD *)a1 + 44) = 8;
  *(_QWORD *)&result = 0xFD00000001;
  a1[70] = 0xFD00000001;
  *((_DWORD *)a1 + 160) = 1063675494;
  return result;
}

double vl_par_ver_707(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  result = 0.00750000117;
  *((_DWORD *)a1 + 48) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 161) = 2143289344;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(_QWORD *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_210BCB890;
  *(_QWORD *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 22) = 808;
  a1[22] = 0xF424000000008;
  a1[23] = 0x3F7EB8523C23D70ALL;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 160) = 1063675494;
  return result;
}

double vl_par_ver_708(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  result = 0.00750000117;
  *((_DWORD *)a1 + 48) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 161) = 2143289344;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(_QWORD *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_210BCB890;
  *(_QWORD *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  a1[22] = 0xF424000000008;
  a1[23] = 0x3F7EB8523C23D70ALL;
  a1[70] = 0xFC00000001;
  *((_DWORD *)a1 + 160) = 1063675494;
  *((_DWORD *)a1 + 22) = 3007;
  return result;
}

double vl_par_ver_709(_QWORD *a1)
{
  double result;
  _OWORD v3[18];
  _OWORD v4[18];
  char __src[1008];

  memset(v3, 0, 276);
  memset(v4, 0, 276);
  vl_par_default(__src);
  memcpy(a1, __src, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  *((_DWORD *)a1 + 48) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(_QWORD *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  a1[22] = 0xF424000000020;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *(_OWORD *)((char *)a1 + 204) = xmmword_210BCB890;
  *(_QWORD *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 22) = 808;
  lbl_par_ver((uint64_t)v4, 808);
  *((_DWORD *)a1 + 33) = 1;
  a1[17] = *(_QWORD *)((char *)&v4[16] + 12);
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 22) = 3008;
  *((_DWORD *)a1 + 29) = 1;
  *((_DWORD *)a1 + 44) = 8;
  a1[70] = 0xFD00000001;
  *((_DWORD *)a1 + 160) = 1063675494;
  lbl_par_ver((uint64_t)v3, 3008);
  *((_DWORD *)a1 + 33) = 1;
  result = *(double *)((char *)&v3[16] + 12);
  a1[17] = *(_QWORD *)((char *)&v3[16] + 12);
  return result;
}

double vl_par_ver_800(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 44) = 16;
  a1[78] = 0x3FB657184AE74487;
  *((_DWORD *)a1 + 153) = 9;
  *a1 = 0x100000002;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *((float *)a1 + 100) = *((float *)a1 + 100) + *((float *)a1 + 100);
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  *((_DWORD *)a1 + 40) = 1088421888;
  a1[19] = 0x6700000000;
  *(_QWORD *)&result = 0x1400000001;
  a1[21] = 0x1400000001;
  return result;
}

double vl_par_ver_850(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  result = 0.00750000117;
  *((_DWORD *)a1 + 48) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(_QWORD *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_210BCB890;
  *(_QWORD *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 22) = 3008;
  *((_DWORD *)a1 + 29) = 1;
  a1[22] = 0xF424000000008;
  a1[23] = 0x3F7EB8523C23D70ALL;
  return result;
}

double vl_par_ver_851(_QWORD *a1)
{
  double result;
  char v3[1008];

  vl_par_default(v3);
  memcpy(a1, v3, 0x3F0uLL);
  *((_DWORD *)a1 + 75) = 1;
  *(_QWORD *)((char *)a1 + 500) = 0x40C0000000000001;
  *((_DWORD *)a1 + 130) = 0;
  *(_QWORD *)((char *)a1 + 252) = 0x3FC0000041000000;
  *((_DWORD *)a1 + 80) = 1103626240;
  *((_OWORD *)a1 + 22) = xmmword_210BCB840;
  a1[39] = 0x780000001ELL;
  a1[60] = 0x43C800007F800000;
  *((_DWORD *)a1 + 122) = 1142292480;
  *(_QWORD *)((char *)a1 + 436) = 0x41F0000040000000;
  a1[50] = 0x400000003A8EFA35;
  *(_QWORD *)((char *)a1 + 412) = 0xF00000001;
  result = 0.00750000117;
  *((_DWORD *)a1 + 48) = 1065353216;
  *a1 = 0x100000002;
  *((_DWORD *)a1 + 152) = 0;
  *((_OWORD *)a1 + 37) = xmmword_210BCAB60;
  a1[78] = 0x3FB657184AE74487;
  a1[80] = 0x7FC000003F3B0F28;
  *((_DWORD *)a1 + 141) = 252;
  *((_DWORD *)a1 + 39) = 104;
  *((_DWORD *)a1 + 40) = 1088421888;
  *(_QWORD *)((char *)a1 + 196) = 0x3F7FFFEF00000004;
  *(_OWORD *)((char *)a1 + 204) = xmmword_210BCB890;
  *(_QWORD *)((char *)a1 + 220) = 0x3E8000000C8;
  *((_DWORD *)a1 + 57) = 0x40000000;
  *((_DWORD *)a1 + 27) = 0;
  *((_DWORD *)a1 + 22) = 3008;
  *((_DWORD *)a1 + 29) = 1;
  a1[22] = 0xF424000000008;
  a1[23] = 0x3F7EB8523C23D70ALL;
  *((_DWORD *)a1 + 98) = 1;
  return result;
}

unint64_t vl_locability_score(uint64_t a1, uint64_t a2, float *a3, int a4)
{
  float v8;
  float v9;
  float v10;
  double v11;
  double v12;
  double v13;
  double v14;
  float v15;
  double v16;
  float v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  BOOL v63;
  __int128 *v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  unint64_t v69;
  _OWORD *v70;
  __int128 *v71;
  unint64_t v72;
  __int128 v73;
  uint64_t *v74;
  _QWORD *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  float32x4_t v86;
  uint64_t v87;
  float *v88;
  float *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float32x4_t *v95;
  int8x16_t *v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t v100;
  float32x4_t *v101;
  int8x16_t *v102;
  int8x16_t v103;
  unint64_t v104;
  int8x8_t v105;
  int8x8_t v106;
  int8x8_t v107;
  int8x8_t v108;
  int8x8_t v109;
  int8x8_t v110;
  int8x8_t v111;
  uint64x2_t v112;
  uint64x2_t v113;
  uint64x2_t v114;
  int8x8_t v115;
  int8x8_t v116;
  uint64x2_t v117;
  uint64x2_t v118;
  int8x8_t v119;
  uint64x2_t v120;
  int8x8_t v121;
  float64x2_t v122;
  int8x8_t v123;
  int8x8_t v124;
  float64x2_t v125;
  int8x8_t v126;
  float64x2_t v127;
  uint64_t v128;
  uint64_t v129;
  int8x8_t v130;
  int8x8_t v131;
  int8x8_t v132;
  int8x8_t v133;
  int8x8_t v134;
  uint64x2_t v135;
  uint64x2_t v136;
  uint64x2_t v137;
  int8x8_t v138;
  uint64x2_t v139;
  int8x8_t v140;
  __int32 v141;
  float64x2_t v142;
  float32x4_t *v143;
  float v144;
  float v145;
  uint64_t v146;
  unsigned int *v147;
  unsigned int v148;
  signed int v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;

  v8 = *a3;
  v9 = a3[1];
  v10 = a3[2];
  v11 = atan2((float)-(float)((float)(v9 * 0.0) - (float)(*a3 * 0.0)), (float)(v10 + (float)((float)(v9 * 0.0) + (float)(*a3 * 0.0))));
  v12 = atan2((float)(v8 - (float)(v9 * 0.0)), (float)((float)(v9 + (float)(v8 * 0.0)) + (float)(v10 * 0.0)));
  if (!model || *(_DWORD *)model != a4 && (vl_locability_model_free(), !model))
    vl_locability_model_load(a4, *(_DWORD *)(a2 + 8), *(unsigned int *)(a2 + 12), (const char *)(a1 + 216));
  v13 = fabs(v12);
  v14 = fabs(v11);
  v15 = *a3;
  v16 = sqrt((float)((float)((float)(a3[1] * a3[1]) + (float)(v15 * v15)) + (float)(a3[2] * a3[2])));
  if (v16 >= 0.001)
  {
    v17 = (float)-v15 / v16;
  }
  else
  {
    printf("%sWarning : ", (const char *)&str_1_0);
    printf("%s: Bad CM-gravity, vector has length %f", "preprocess_tilt", v16);
    putchar(10);
    v17 = -1.0;
  }
  v18 = *(_DWORD *)(a2 + 8);
  v19 = *(_DWORD *)(a2 + 12);
  if (v18 >= v19)
    v20 = *(_DWORD *)(a2 + 12);
  else
    v20 = *(_DWORD *)(a2 + 8);
  v21 = *(_DWORD *)(model + 4);
  v22 = v20 / v21;
  if (v18 <= v19)
    v18 = *(_DWORD *)(a2 + 12);
  v23 = v18 / v21;
  if (v13 >= v14)
  {
    v24 = v23;
    v25 = pmem_alloc_ex((v22 + 16) * (uint64_t)v23, 0, 0) + 8 * v23;
    v26 = v23;
    if (v22 >= 1 && v23 >= 1)
      goto LABEL_43;
    goto LABEL_42;
  }
  v24 = v22;
  v28 = pmem_alloc_ex((v23 + 16) * (uint64_t)v22, 0, 0);
  v29 = 8 * v22;
  v25 = v28 + v29;
  if (*(_DWORD *)(a2 + 8) <= *(_DWORD *)(a2 + 12))
  {
    v26 = v22;
    v22 = v23;
    if (v23 >= 1 && v26 >= 1)
    {
LABEL_43:
      v45 = 0;
      v46 = v25;
      do
      {
        if (v26 >= 1)
        {
          v47 = 0;
          v48 = model;
          do
          {
            v49 = *(_DWORD *)(v48 + 4);
            v50 = v49 * v47;
            if (((v49 * (_DWORD)v47) & 0x80000000) == 0 && (signed int)v50 < *(_DWORD *)(a2 + 8))
            {
              v51 = (v49 * v45);
              if ((v51 & 0x80000000) == 0 && (int)v51 < *(_DWORD *)(a2 + 12))
              {
                *(_BYTE *)(v46 + v47) = *(_BYTE *)(*(_QWORD *)a2 + *(_QWORD *)(a2 + 16) * v51 + v50);
                v48 = model;
              }
            }
            ++v47;
          }
          while (v47 < v26);
        }
        ++v45;
        v46 += v24;
      }
      while (v45 < v22);
    }
LABEL_42:
    v23 = v22;
    goto LABEL_95;
  }
  v30 = v28;
  v31 = pmem_alloc_ex((v22 + 16) * (uint64_t)v23, 0, 0);
  v32 = 8 * v23;
  v33 = v31 + v32;
  if (v22 >= 1 && v23 >= 1)
  {
    v52 = 0;
    v53 = model;
    v54 = v31 + v32;
    do
    {
      v55 = 0;
      do
      {
        v56 = *(_DWORD *)(v53 + 4);
        v57 = v56 * v55;
        if (((v56 * (_DWORD)v55) & 0x80000000) == 0 && (signed int)v57 < *(_DWORD *)(a2 + 8))
        {
          v58 = (v56 * v52);
          if ((v58 & 0x80000000) == 0 && (int)v58 < *(_DWORD *)(a2 + 12))
          {
            *(_BYTE *)(v54 + v55) = *(_BYTE *)(*(_QWORD *)a2 + *(_QWORD *)(a2 + 16) * v58 + v57);
            v53 = model;
          }
        }
        ++v55;
      }
      while (v23 != v55);
      ++v52;
      v54 += v23;
    }
    while (v52 != v22);
    v59 = 0;
    v60 = v30 + 8;
    v61 = v32 + v31;
    v63 = v23 < 8 || v22 != 1;
    v64 = (__int128 *)(v61 + 16);
    v65 = v29 + v30 + 16;
    v66 = v33;
    while (1)
    {
      v67 = v60 + v59 - (v61 + v59 * v23) < 0x20 || v63;
      if ((v67 & 1) != 0)
      {
        v68 = 0;
      }
      else
      {
        if (v23 < 0x20)
        {
          v69 = 0;
LABEL_80:
          v74 = (uint64_t *)(v66 + v69);
          v75 = (_QWORD *)(v30 + v22 * (v69 + 8));
          v76 = v69 - (v23 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v77 = *v74++;
            *v75 = v77;
            v75 = (_QWORD *)((char *)v75 + v29);
            v76 += 8;
          }
          while (v76);
          v68 = v23 & 0xFFFFFFFFFFFFFFF8;
          if (v68 == v23)
            goto LABEL_68;
          goto LABEL_83;
        }
        v70 = (_OWORD *)v65;
        v71 = v64;
        v72 = v23 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v73 = *v71;
          *(v70 - 1) = *(v71 - 1);
          *v70 = v73;
          v71 += 2;
          v70 += 2 * v22;
          v72 -= 32;
        }
        while (v72);
        if ((v23 & 0xFFFFFFFFFFFFFFE0) == v23)
          goto LABEL_68;
        v69 = v23 & 0xFFFFFFFFFFFFFFE0;
        v68 = v69;
        if ((v23 & 0x18) != 0)
          goto LABEL_80;
      }
LABEL_83:
      v78 = v22 * (v68 + 8);
      do
      {
        *(_BYTE *)(v30 + v78) = *(_BYTE *)(v66 + v68++);
        v78 += v22;
      }
      while (v23 != v68);
LABEL_68:
      ++v59;
      v64 = (__int128 *)((char *)v64 + v23);
      ++v65;
      v66 += v23;
      ++v30;
      if (v59 == v22)
        goto LABEL_26;
    }
  }
  if (v31)
  {
LABEL_26:
    v35 = *(_QWORD *)(v33 - 8 * v23 - 8);
    v36 = (unsigned int *)(v35 + 24);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if ((int)(v37 - 1) < 0)
      goto LABEL_138;
    if (v37 == 1)
    {
      v79 = -*(_QWORD *)(v35 + 8);
      do
        v80 = __ldaxr(&qword_254A77330);
      while (__stlxr(v80 - 1, &qword_254A77330));
      do
        v81 = __ldaxr((unint64_t *)&unk_254A77338);
      while (__stlxr(v81 - 1, (unint64_t *)&unk_254A77338));
      do
        v82 = __ldaxr(&global_stats);
      while (__stlxr(v82 + v79, &global_stats));
      do
        v83 = __ldaxr(&pmem_total_refs);
      while (__stlxr(v83 - 1, &pmem_total_refs));
      do
        v84 = __ldaxr(&_pmem_total_blocks);
      while (__stlxr(v84 - 1, &_pmem_total_blocks));
      do
        v85 = __ldaxr(&pmem_bytes_allocated);
      while (__stlxr(v85 + v79, &pmem_bytes_allocated));
      (*(void (**)(uint64_t))(v35 + 40))(v35);
      free((void *)v35);
    }
    else
    {
      do
        v38 = __ldaxr(&qword_254A77330);
      while (__stlxr(v38 - 1, &qword_254A77330));
      do
        v39 = __ldaxr((unint64_t *)&unk_254A77338);
      while (__stlxr(v39, (unint64_t *)&unk_254A77338));
      do
        v40 = __ldaxr(&global_stats);
      while (__stlxr(v40, &global_stats));
      do
        v41 = __ldaxr(&pmem_total_refs);
      while (__stlxr(v41 - 1, &pmem_total_refs));
      do
        v42 = __ldaxr(&_pmem_total_blocks);
      while (__stlxr(v42, &_pmem_total_blocks));
      do
        v43 = __ldaxr(&pmem_bytes_allocated);
      while (__stlxr(v43, &pmem_bytes_allocated));
    }
  }
  v26 = v22;
LABEL_95:
  bzero(*(void **)(model + 32), 4 * v23 * v26);
  **(_DWORD **)(model + 48) = 0;
  v87 = *(_QWORD *)(model + 32);
  v88 = *(float **)(model + 48);
  v89 = *(float **)(model + 64);
  if (v26 >= 1 && v23 >= 1)
  {
    v90 = 0;
    v91 = 4 * v26;
    v92 = v26 & 0xFFFFFFF8;
    v93 = (float64x2_t)vdupq_n_s64(0xC05FE00000000000);
    v94 = (float64x2_t)vdupq_n_s64(0x405FE00000000000uLL);
    v95 = *(float32x4_t **)(model + 32);
    v96 = (int8x16_t *)v25;
    do
    {
      if (v26 >= 8)
      {
        if (v87 + v91 * v90 >= v25 + v26 + v24 * v90 || v25 + v24 * v90 >= v87 + v91 + v91 * v90)
        {
          if (v26 < 0x10)
          {
            v99 = 0;
LABEL_112:
            v128 = 4 * v99;
            do
            {
              v129 = *(uint64_t *)((char *)v96->i64 + v99);
              v130.i32[0] = BYTE6(v129);
              v130.i32[1] = HIBYTE(v129);
              v131 = vand_s8(v130, (int8x8_t)0xFF000000FFLL);
              v132.i32[0] = BYTE4(v129);
              v132.i32[1] = BYTE5(v129);
              v133 = vand_s8(v132, (int8x8_t)0xFF000000FFLL);
              v134.i32[0] = BYTE2(v129);
              v135.i64[0] = v131.u32[0];
              v135.i64[1] = v131.u32[1];
              v136 = v135;
              v135.i64[0] = v133.u32[0];
              v135.i64[1] = v133.u32[1];
              v137 = v135;
              v134.i32[1] = BYTE3(v129);
              v138 = vand_s8(v134, (int8x8_t)0xFF000000FFLL);
              v135.i64[0] = v138.u32[0];
              v135.i64[1] = v138.u32[1];
              v139 = v135;
              v140.i32[0] = v129;
              v141 = BYTE1(v129);
              v142 = vcvtq_f64_u64(v137);
              v140.i32[1] = v141;
              *(int8x8_t *)v137.i8 = vand_s8(v140, (int8x8_t)0xFF000000FFLL);
              v135.i64[0] = v137.u32[0];
              v135.i64[1] = v137.u32[1];
              v86 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vaddq_f64(v142, v93), v94)), vdivq_f64(vaddq_f64(vcvtq_f64_u64(v136), v93), v94));
              v143 = (float32x4_t *)((char *)v95 + v128);
              *v143 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vaddq_f64(vcvtq_f64_u64(v135), v93), v94)), vdivq_f64(vaddq_f64(vcvtq_f64_u64(v139), v93), v94));
              v143[1] = v86;
              v99 += 8;
              v128 += 32;
            }
            while (v92 != v99);
            v97 = v26 & 0xFFFFFFF8;
            if (v92 == v26)
              goto LABEL_98;
            goto LABEL_115;
          }
          v100 = v26 & 0xFFFFFFF0;
          v101 = v95;
          v102 = v96;
          do
          {
            v103 = *v102++;
            v104 = vextq_s8(v103, v103, 8uLL).u64[0];
            v105.i32[0] = BYTE6(v104);
            v105.i32[1] = HIBYTE(v104);
            v106.i32[0] = BYTE4(v104);
            v106.i32[1] = BYTE5(v104);
            v107.i32[0] = BYTE2(v104);
            v108 = vand_s8(v105, (int8x8_t)0xFF000000FFLL);
            v109 = vand_s8(v106, (int8x8_t)0xFF000000FFLL);
            v107.i32[1] = BYTE3(v104);
            v110 = vand_s8(v107, (int8x8_t)0xFF000000FFLL);
            v111.i32[0] = v104;
            v111.i32[1] = BYTE1(v104);
            v112.i64[0] = v108.u32[0];
            v112.i64[1] = v108.u32[1];
            v113 = v112;
            v108.i32[0] = v103.u8[6];
            v112.i64[0] = v109.u32[0];
            v112.i64[1] = v109.u32[1];
            v114 = v112;
            v115 = vand_s8(v111, (int8x8_t)0xFF000000FFLL);
            v108.i32[1] = v103.u8[7];
            v116 = vand_s8(v108, (int8x8_t)0xFF000000FFLL);
            v112.i64[0] = v116.u32[0];
            v112.i64[1] = v116.u32[1];
            v117 = v112;
            v112.i64[0] = v110.u32[0];
            v112.i64[1] = v110.u32[1];
            v118 = v112;
            v119.i32[0] = v103.u8[4];
            v112.i64[0] = v115.u32[0];
            v112.i64[1] = v115.u32[1];
            v120 = v112;
            v119.i32[1] = v103.u8[5];
            v121 = vand_s8(v119, (int8x8_t)0xFF000000FFLL);
            v112.i64[0] = v121.u32[0];
            v112.i64[1] = v121.u32[1];
            v122 = vcvtq_f64_u64(v112);
            v123.i32[0] = v103.u8[2];
            v123.i32[1] = v103.u8[3];
            v124 = vand_s8(v123, (int8x8_t)0xFF000000FFLL);
            v112.i64[0] = v124.u32[0];
            v112.i64[1] = v124.u32[1];
            v125 = vcvtq_f64_u64(v112);
            v126.i32[0] = v103.u8[0];
            v127 = vcvtq_f64_u64(v120);
            v126.i32[1] = v103.u8[1];
            *(int8x8_t *)v120.i8 = vand_s8(v126, (int8x8_t)0xFF000000FFLL);
            v112.i64[0] = v120.u32[0];
            v112.i64[1] = v120.u32[1];
            v86 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vaddq_f64(v127, v93), v94)), vdivq_f64(vaddq_f64(vcvtq_f64_u64(v118), v93), v94));
            *v101 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vaddq_f64(vcvtq_f64_u64(v112), v93), v94)), vdivq_f64(vaddq_f64(v125, v93), v94));
            v101[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vaddq_f64(v122, v93), v94)), vdivq_f64(vaddq_f64(vcvtq_f64_u64(v117), v93), v94));
            v101[2] = v86;
            v101[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vaddq_f64(vcvtq_f64_u64(v114), v93), v94)), vdivq_f64(vaddq_f64(vcvtq_f64_u64(v113), v93), v94));
            v101 += 4;
            v100 -= 16;
          }
          while (v100);
          if ((v26 & 0xFFFFFFF0) == (unint64_t)v26)
            goto LABEL_98;
          v99 = v26 & 0xFFFFFFF0;
          v97 = v99;
          if ((v26 & 8) != 0)
            goto LABEL_112;
        }
        else
        {
          v97 = 0;
        }
      }
      else
      {
        v97 = 0;
      }
      do
      {
LABEL_115:
        v86.i8[0] = v96->i8[v97];
        *(double *)v86.i64 = ((double)v86.u64[0] + -127.5) / 127.5;
        v86.f32[0] = *(double *)v86.i64;
        v95->i32[v97++] = v86.i32[0];
      }
      while (v26 != v97);
LABEL_98:
      ++v90;
      v96 = (int8x16_t *)((char *)v96 + v24);
      v95 = (float32x4_t *)((char *)v95 + v91);
    }
    while (v90 != v23);
  }
  *v88 = v17;
  vl_locability_forward();
  v144 = *v89;
  v145 = *(float *)(model + 8);
  if (v25)
  {
    v146 = *(_QWORD *)(v25 - 8 * v24 - 8);
    v147 = (unsigned int *)(v146 + 24);
    do
    {
      v148 = __ldaxr(v147);
      v149 = v148 - 1;
    }
    while (__stlxr(v149, v147));
    if (v149 >= 0)
    {
      if (v149)
      {
        do
          v150 = __ldaxr(&qword_254A77330);
        while (__stlxr(v150 - 1, &qword_254A77330));
        do
          v151 = __ldaxr((unint64_t *)&unk_254A77338);
        while (__stlxr(v151, (unint64_t *)&unk_254A77338));
        do
          v152 = __ldaxr(&global_stats);
        while (__stlxr(v152, &global_stats));
        do
          v153 = __ldaxr(&pmem_total_refs);
        while (__stlxr(v153 - 1, &pmem_total_refs));
        do
          v154 = __ldaxr(&_pmem_total_blocks);
        while (__stlxr(v154, &_pmem_total_blocks));
        do
          v155 = __ldaxr(&pmem_bytes_allocated);
        while (__stlxr(v155, &pmem_bytes_allocated));
      }
      else
      {
        v156 = -*(_QWORD *)(v146 + 8);
        do
          v157 = __ldaxr(&qword_254A77330);
        while (__stlxr(v157 - 1, &qword_254A77330));
        do
          v158 = __ldaxr((unint64_t *)&unk_254A77338);
        while (__stlxr(v158 - 1, (unint64_t *)&unk_254A77338));
        do
          v159 = __ldaxr(&global_stats);
        while (__stlxr(v159 + v156, &global_stats));
        do
          v160 = __ldaxr(&pmem_total_refs);
        while (__stlxr(v160 - 1, &pmem_total_refs));
        do
          v161 = __ldaxr(&_pmem_total_blocks);
        while (__stlxr(v161 - 1, &_pmem_total_blocks));
        do
          v162 = __ldaxr(&pmem_bytes_allocated);
        while (__stlxr(v162 + v156, &pmem_bytes_allocated));
        (*(void (**)(uint64_t))(v146 + 40))(v146);
        free((void *)v146);
      }
      return LODWORD(v144) | ((unint64_t)(v144 < v145) << 32);
    }
LABEL_138:
    __assert_rtn("pmem_free", "pmem.c", 302, "count >= 0 && \"Negative count! Something is broken, double free? Memory corruption?\"");
  }
  return LODWORD(v144) | ((unint64_t)(v144 < v145) << 32);
}

float vl_pose_refine_multi(double *a1, double *a2, uint64_t a3, uint64_t a4, int a5, int a6, double *a7, uint64_t a8, float a9, float a10, float a11, float a12)
{
  int v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t *v17;
  unint64_t v18;
  float32x4_t *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float *v23;
  float *v24;
  uint64_t v25;
  float *v26;
  float *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  float v33;
  float *v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  float *v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  float *v43;
  float *v44;
  uint64_t v45;
  float v46;
  float *v47;
  uint64_t v48;
  float v49;
  float *v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  float *v54;
  float *v55;
  float v56;
  float *v57;
  uint64_t v58;
  float v59;
  float v60;
  float v61;
  int v62;
  char *v63;
  uint64_t v64;
  float v65;
  BOOL v66;
  uint64_t v67;
  float v68;
  uint64_t v69;
  float *v70;
  __int8 *v71;
  int v72;
  float *v73;
  float v74;
  float v75;
  float v76;
  __float2 v77;
  __float2 v78;
  __float2 v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  unsigned int v93;
  float v94;
  BOOL v95;
  uint64_t v96;
  float *v97;
  uint64_t v98;
  uint64_t v99;
  float32x4_t *v100;
  float32x4_t v101;
  float32x4_t v102;
  uint64_t v103;
  float *v104;
  float *v105;
  uint64_t v106;
  __int128 v107;
  __int8 *v108;
  int v109;
  float *v110;
  float v111;
  float v112;
  float v113;
  __float2 v114;
  __float2 v115;
  __float2 v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float32x2_t *v130;
  double *v131;
  uint64_t v132;
  float *v133;
  uint64_t v134;
  float *v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  float *v140;
  float *v141;
  float v142;
  uint64_t v143;
  uint64_t v144;
  float *v145;
  float *v146;
  uint64_t v147;
  float v148;
  float *v149;
  uint64_t v150;
  float v151;
  float *v152;
  uint64_t v153;
  float v154;
  unint64_t v155;
  uint64_t v156;
  int64x2_t v157;
  int64x2_t v158;
  _DWORD *v159;
  uint64_t v160;
  int64x2_t v161;
  uint64_t v162;
  float32x4_t *v163;
  int64x2_t v164;
  int64x2_t v165;
  float v166;
  uint64_t v167;
  float *v168;
  float *v169;
  float v170;
  float *v171;
  uint64_t v172;
  float v173;
  float v174;
  float v175;
  int v176;
  float *v177;
  uint64_t v178;
  float v179;
  uint64_t v180;
  float v181;
  uint64_t v182;
  float *v183;
  __darwin_time_t tv_sec;
  uint64_t tv_usec;
  uint64_t v188;
  timeval v189;
  char *v191;
  float *v192;
  float *v193;
  int v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  __int8 *v200;
  double *v201;
  timeval v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;

  v14 = 2 * a5;
  v15 = (6 * a5);
  v16 = (v15 * v15);
  v192 = (float *)malloc_type_malloc(4 * ((int)v16 + 24 * a5 + ((((6 * a5) | 1) * (int)v15) >> 1)), 0x100004052888210uLL);
  v17 = (float32x4_t *)malloc_type_malloc(48 * v14, 0x1000040EED21634uLL);
  v209 = (timeval)0;
  gettimeofday(&v209, 0);
  v189 = v209;
  if (a5 >= 1)
  {
    v18 = 0;
    do
    {
      v213 = 0u;
      v214 = 0u;
      v211 = 0u;
      v212 = 0u;
      v209 = (timeval)0;
      v210 = 0u;
      g_coords_diff(&a1[v18 / 8], a1, (uint64_t)&v209);
      v19 = &v17[v18 / 0x10];
      *v19 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v209), v210);
      v19[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v211), v212);
      v20 = v17[v18 / 0x10];
      v21 = v17[v18 / 0x10 + 1];
      v19[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v213), v214);
      v19[3] = v20;
      v22 = v17[v18 / 0x10 + 2];
      v19[4] = v21;
      v19[5] = v22;
      v18 += 96;
    }
    while (96 * a5 != v18);
  }
  v23 = v192;
  v24 = &v192[v16];
  v25 = (int)v15;
  v26 = &v24[v25];
  v27 = &v24[v25 + v25];
  v193 = &v27[v25];
  v188 = (v15 * v15);
  if (a6 < 1)
  {
    v32 = NAN;
LABEL_63:
    if (a5 >= 1)
      goto LABEL_64;
    v33 = v32;
    goto LABEL_73;
  }
  v28 = 0;
  if ((int)v15 <= 1)
    v29 = 1;
  else
    v29 = v15;
  v199 = v29;
  v30 = v29 & 0x7FFFFFF8;
  v31 = 4 * (int)v15 + 4 * v16;
  v191 = (char *)&v192[v15] + v31;
  v200 = &v17[1].i8[8];
  v201 = a1;
  v197 = (char *)v192 + v31;
  v198 = v30;
  v196 = (uint64_t)v192 + v31 + 16;
  while (1)
  {
    v195 = v28;
    v34 = (float *)v17;
    v35 = refine_multi_lin(a1, a2, a3, a4, a5, v17, (uint64_t)v23, v24, a9, a10, a11, a12);
    if (a5 >= 1)
    {
      v36 = 0;
      v37 = 1;
      v38 = v193;
      v39 = v23;
      do
      {
        v40 = *v39;
        *v38 = *v39;
        if (v36)
        {
          v41 = -v36;
          do
          {
            v40 = v40 - (float)(v38[v41] * v38[v41]);
            *v38 = v40;
            v95 = __CFADD__(v41++, 1);
          }
          while (!v95);
          *v38 = sqrtf(v40);
          v42 = v36 + 1;
          v43 = v39 + 1;
          if (v36 + 1 < v15)
          {
            v44 = &v38[v36 + 1];
            v45 = v37;
            do
            {
              v46 = *v43;
              *v44 = *v43;
              v47 = &v44[-v36];
              v48 = -v36;
              do
              {
                v49 = *v47++;
                v46 = v46 - (float)(v49 * v38[v48]);
                *v44 = v46;
                v95 = __CFADD__(v48++, 1);
              }
              while (!v95);
              *v44 = v46 / *v38;
              v44 += ++v45;
              ++v43;
            }
            while (v45 != v15);
          }
        }
        else
        {
          *v38 = sqrtf(v40);
          v50 = v38 + 1;
          v43 = v39 + 1;
          v51 = v37;
          do
          {
            v52 = *v43++;
            *v50 = v52;
            *v50 = v52 / *v38;
            v50 += ++v51;
          }
          while (v15 != v51);
          v42 = 1;
        }
        v38 += v36 + 2;
        v39 = &v43[v42];
        ++v37;
        v36 = v42;
      }
      while (v42 != v15);
      v53 = 0;
      v54 = v193;
      do
      {
        v56 = v24[v53];
        v27[v53] = v56;
        if (v53)
        {
          v57 = v27;
          v58 = v53;
          v55 = v54;
          do
          {
            v59 = *v55++;
            v60 = v59;
            v61 = *v57++;
            v56 = v56 - (float)(v60 * v61);
            v27[v53] = v56;
            --v58;
          }
          while (v58);
        }
        else
        {
          v55 = v54;
        }
        v54 = v55 + 1;
        v27[v53++] = v56 / *v55;
      }
      while (v53 != v15);
      v62 = 0;
      v63 = v191;
      v64 = v15;
      do
      {
        v67 = (v64 - 1);
        v68 = v27[v67];
        v26[v67] = v68;
        if (v64 < v15)
        {
          v69 = 0;
          v70 = &v55[v64];
          do
          {
            v68 = v68 - (float)(*v70 * *(float *)&v63[4 * v69]);
            v26[v67] = v68;
            v70 += v64 + v69++ + 1;
          }
          while (v62 != (_DWORD)v69);
        }
        v65 = v68 / *v55;
        v55 -= v64;
        v26[v67] = v65;
        ++v62;
        v63 -= 4;
        v66 = v64-- <= 1;
      }
      while (!v66);
      v71 = v200;
      v72 = a5;
      v73 = v26;
      do
      {
        *(_OWORD *)(v71 + 24) = *(_OWORD *)(v71 - 24);
        *(_OWORD *)(v71 + 40) = *(_OWORD *)(v71 - 8);
        *(_OWORD *)(v71 + 56) = *(_OWORD *)(v71 + 8);
        v74 = *((float *)v71 + 4);
        *((float *)v71 + 3) = *v73 + *((float *)v71 + 3);
        *((float *)v71 + 4) = v73[1] + v74;
        *((float *)v71 + 5) = v73[2] + *((float *)v71 + 5);
        v75 = v73[4];
        v76 = v73[5];
        v77 = __sincosf_stret(v73[3]);
        v78 = __sincosf_stret(v75);
        v79 = __sincosf_stret(v76);
        v80 = (float)((float)(v77.__cosval * v78.__sinval) * v79.__sinval) - (float)(v77.__sinval * v79.__cosval);
        v81 = (float)(v77.__sinval * v79.__sinval) + (float)((float)(v77.__cosval * v78.__sinval) * v79.__cosval);
        v82 = (float)(v77.__cosval * v79.__cosval) + (float)((float)(v77.__sinval * v78.__sinval) * v79.__sinval);
        v83 = (float)((float)(v77.__sinval * v78.__sinval) * v79.__cosval) - (float)(v77.__cosval * v79.__sinval);
        v84 = *((float *)v71 - 6);
        v85 = *((float *)v71 - 5);
        v86 = *((float *)v71 - 4);
        v87 = *((float *)v71 - 3);
        v88 = *((float *)v71 - 2);
        v89 = *((float *)v71 - 1);
        v90 = *(float *)v71;
        v91 = *((float *)v71 + 1);
        v92 = *((float *)v71 + 2);
        *((float *)v71 - 6) = (float)((float)((float)(v84 * (float)(v77.__cosval * v78.__cosval)) + 0.0)
                                    + (float)(v85 * (float)(v77.__sinval * v78.__cosval)))
                            - (float)(v86 * v78.__sinval);
        *((float *)v71 - 5) = (float)((float)((float)(v84 * v80) + 0.0) + (float)(v85 * v82))
                            + (float)(v86 * (float)(v78.__cosval * v79.__sinval));
        *((float *)v71 - 4) = (float)((float)((float)(v84 * v81) + 0.0) + (float)(v85 * v83))
                            + (float)(v86 * (float)(v78.__cosval * v79.__cosval));
        *((float *)v71 - 3) = (float)((float)((float)(v87 * (float)(v77.__cosval * v78.__cosval)) + 0.0)
                                    + (float)(v88 * (float)(v77.__sinval * v78.__cosval)))
                            - (float)(v89 * v78.__sinval);
        *((float *)v71 - 2) = (float)((float)((float)(v87 * v80) + 0.0) + (float)(v88 * v82))
                            + (float)(v89 * (float)(v78.__cosval * v79.__sinval));
        *((float *)v71 - 1) = (float)((float)((float)(v87 * v81) + 0.0) + (float)(v88 * v83))
                            + (float)(v89 * (float)(v78.__cosval * v79.__cosval));
        *(float *)v71 = (float)((float)((float)(v90 * (float)(v77.__cosval * v78.__cosval)) + 0.0)
                              + (float)(v91 * (float)(v77.__sinval * v78.__cosval)))
                      - (float)(v92 * v78.__sinval);
        *((float *)v71 + 1) = (float)((float)((float)(v90 * v80) + 0.0) + (float)(v91 * v82))
                            + (float)(v92 * (float)(v78.__cosval * v79.__sinval));
        *((float *)v71 + 2) = (float)((float)((float)(v90 * v81) + 0.0) + (float)(v91 * v83))
                            + (float)(v92 * (float)(v78.__cosval * v79.__cosval));
        v71 += 96;
        v73 += 6;
        --v72;
      }
      while (v72);
    }
    a1 = v201;
    v17 = (float32x4_t *)v34;
    v32 = refine_multi_lin_7(v201, a2, a3, a4, a5, v34, a9, a10, a11, a12);
    if (v32 >= v35)
      break;
LABEL_10:
    v28 = v195 + 1;
    if (v195 + 1 == a6)
      goto LABEL_63;
  }
  v93 = 0;
  do
  {
    if (a5 >= 1)
    {
      if (v199 >= 8)
      {
        v99 = v198;
        v100 = (float32x4_t *)v196;
        v101.i64[0] = 0x3F0000003F000000;
        v101.i64[1] = 0x3F0000003F000000;
        do
        {
          v102 = vmulq_f32(*v100, v101);
          v100[-1] = vmulq_f32(v100[-1], v101);
          *v100 = v102;
          v100 += 2;
          v99 -= 8;
        }
        while (v99);
        v96 = v198;
        v97 = v34;
        v98 = a5;
        if (v198 == v199)
          goto LABEL_57;
      }
      else
      {
        v96 = 0;
        v97 = v34;
        v98 = a5;
      }
      v103 = v199 - v96;
      v104 = (float *)&v197[4 * v96];
      do
      {
        *v104 = *v104 * 0.5;
        ++v104;
        --v103;
      }
      while (v103);
LABEL_57:
      v105 = v97;
      v106 = v98;
      do
      {
        v107 = *((_OWORD *)v105 + 4);
        *(_OWORD *)v105 = *((_OWORD *)v105 + 3);
        *((_OWORD *)v105 + 1) = v107;
        *((_OWORD *)v105 + 2) = *((_OWORD *)v105 + 5);
        v105 += 24;
        --v106;
      }
      while (v106);
      v108 = v200;
      v109 = a5;
      v110 = v26;
      do
      {
        *(_OWORD *)(v108 + 24) = *(_OWORD *)(v108 - 24);
        *(_OWORD *)(v108 + 40) = *(_OWORD *)(v108 - 8);
        *(_OWORD *)(v108 + 56) = *(_OWORD *)(v108 + 8);
        v111 = *((float *)v108 + 4);
        *((float *)v108 + 3) = *v110 + *((float *)v108 + 3);
        *((float *)v108 + 4) = v110[1] + v111;
        *((float *)v108 + 5) = v110[2] + *((float *)v108 + 5);
        v112 = v110[4];
        v113 = v110[5];
        v114 = __sincosf_stret(v110[3]);
        v115 = __sincosf_stret(v112);
        v116 = __sincosf_stret(v113);
        v117 = (float)((float)(v114.__cosval * v115.__sinval) * v116.__sinval) - (float)(v114.__sinval * v116.__cosval);
        v118 = (float)(v114.__sinval * v116.__sinval) + (float)((float)(v114.__cosval * v115.__sinval) * v116.__cosval);
        v119 = (float)(v114.__cosval * v116.__cosval) + (float)((float)(v114.__sinval * v115.__sinval) * v116.__sinval);
        v120 = (float)((float)(v114.__sinval * v115.__sinval) * v116.__cosval) - (float)(v114.__cosval * v116.__sinval);
        v121 = *((float *)v108 - 6);
        v122 = *((float *)v108 - 5);
        v123 = *((float *)v108 - 4);
        v124 = *((float *)v108 - 3);
        v125 = *((float *)v108 - 2);
        v126 = *((float *)v108 - 1);
        v127 = *(float *)v108;
        v128 = *((float *)v108 + 1);
        v129 = *((float *)v108 + 2);
        *((float *)v108 - 6) = (float)((float)((float)(v121 * (float)(v114.__cosval * v115.__cosval)) + 0.0)
                                     + (float)(v122 * (float)(v114.__sinval * v115.__cosval)))
                             - (float)(v123 * v115.__sinval);
        *((float *)v108 - 5) = (float)((float)((float)(v121 * v117) + 0.0) + (float)(v122 * v119))
                             + (float)(v123 * (float)(v115.__cosval * v116.__sinval));
        *((float *)v108 - 4) = (float)((float)((float)(v121 * v118) + 0.0) + (float)(v122 * v120))
                             + (float)(v123 * (float)(v115.__cosval * v116.__cosval));
        *((float *)v108 - 3) = (float)((float)((float)(v124 * (float)(v114.__cosval * v115.__cosval)) + 0.0)
                                     + (float)(v125 * (float)(v114.__sinval * v115.__cosval)))
                             - (float)(v126 * v115.__sinval);
        *((float *)v108 - 2) = (float)((float)((float)(v124 * v117) + 0.0) + (float)(v125 * v119))
                             + (float)(v126 * (float)(v115.__cosval * v116.__sinval));
        *((float *)v108 - 1) = (float)((float)((float)(v124 * v118) + 0.0) + (float)(v125 * v120))
                             + (float)(v126 * (float)(v115.__cosval * v116.__cosval));
        *(float *)v108 = (float)((float)((float)(v127 * (float)(v114.__cosval * v115.__cosval)) + 0.0)
                               + (float)(v128 * (float)(v114.__sinval * v115.__cosval)))
                       - (float)(v129 * v115.__sinval);
        *((float *)v108 + 1) = (float)((float)((float)(v127 * v117) + 0.0) + (float)(v128 * v119))
                             + (float)(v129 * (float)(v115.__cosval * v116.__sinval));
        *((float *)v108 + 2) = (float)((float)((float)(v127 * v118) + 0.0) + (float)(v128 * v120))
                             + (float)(v129 * (float)(v115.__cosval * v116.__cosval));
        v108 += 96;
        v110 += 6;
        --v109;
      }
      while (v109);
    }
    v17 = (float32x4_t *)v34;
    v94 = refine_multi_lin_7(v201, a2, a3, a4, a5, v34, a9, a10, a11, a12);
    v95 = v94 < v35 || v93++ >= 2;
  }
  while (!v95);
  v32 = v94;
  v33 = v35;
  v23 = v192;
  a1 = v201;
  if (v94 < v35)
    goto LABEL_10;
  if (a5 < 1)
  {
LABEL_73:
    v134 = a8;
    v133 = v193;
    if (!a8)
      goto LABEL_119;
    goto LABEL_74;
  }
  v135 = v34;
  v136 = a5;
  do
  {
    v137 = *((_OWORD *)v135 + 4);
    *(_OWORD *)v135 = *((_OWORD *)v135 + 3);
    *((_OWORD *)v135 + 1) = v137;
    *((_OWORD *)v135 + 2) = *((_OWORD *)v135 + 5);
    v135 += 24;
    --v136;
  }
  while (v136);
  v32 = v35;
LABEL_64:
  v130 = (float32x2_t *)&v17[1].u32[2];
  v131 = a7;
  v132 = a5;
  do
  {
    v214 = vcvtq_f64_f32(v130[2]);
    v209 = (timeval)vcvtq_f64_f32(v130[-3]);
    v212 = vcvtq_f64_f32(*v130);
    v210 = vcvtq_f64_f32(v130[-2]);
    v211 = vcvtq_f64_f32(v130[-1]);
    v213 = vcvtq_f64_f32(v130[1]);
    g_coords_conv((double *)&v209.tv_sec, a1, v131);
    v131 += 12;
    v130 += 12;
    --v132;
  }
  while (v132);
  v33 = v32;
  v23 = v192;
  v133 = v193;
  v134 = a8;
  if (a8)
  {
LABEL_74:
    refine_multi_lin(a1, a2, a3, a4, a5, v17, (uint64_t)v23, v24, a9, a10, a11, a12);
    if (a5 >= 1)
    {
      v138 = 0;
      v139 = 1;
      v140 = v133;
      v141 = v23;
      do
      {
        v142 = *v141;
        *v140 = *v141;
        if (v138)
        {
          v143 = -v138;
          do
          {
            v142 = v142 - (float)(v140[v143] * v140[v143]);
            *v140 = v142;
            v95 = __CFADD__(v143++, 1);
          }
          while (!v95);
          *v140 = sqrtf(v142);
          v144 = v138 + 1;
          v145 = v141 + 1;
          if (v138 + 1 < v15)
          {
            v146 = &v140[v138 + 1];
            v147 = v139;
            do
            {
              v148 = *v145;
              *v146 = *v145;
              v149 = &v146[-v138];
              v150 = -v138;
              do
              {
                v151 = *v149++;
                v148 = v148 - (float)(v151 * v140[v150]);
                *v146 = v148;
                v95 = __CFADD__(v150++, 1);
              }
              while (!v95);
              *v146 = v148 / *v140;
              v146 += ++v147;
              ++v145;
            }
            while (v147 != v15);
          }
        }
        else
        {
          *v140 = sqrtf(v142);
          v152 = v140 + 1;
          v145 = v141 + 1;
          v153 = v139;
          do
          {
            v154 = *v145++;
            *v152 = v154;
            *v152 = v154 / *v140;
            v152 += ++v153;
          }
          while (v15 != v153);
          v144 = 1;
        }
        v140 += v138 + 2;
        v141 = &v145[v144];
        ++v139;
        v138 = v144;
      }
      while (v144 != v15);
    }
    v155 = 0;
    if ((int)v15 <= 1)
      v156 = 1;
    else
      v156 = v15;
    v157 = vdupq_n_s64(4uLL);
    v158 = vdupq_n_s64(8uLL);
    while (a5 < 1)
    {
LABEL_95:
      v159 = (_DWORD *)(v134 + 24 * v155);
      *v159 = *(_DWORD *)v26;
      v159[1] = *((_DWORD *)v26 + 1);
      v159[2] = *((_DWORD *)v26 + 2);
      v159[3] = *((_DWORD *)v26 + 3);
      v159[4] = *((_DWORD *)v26 + 4);
      v159[5] = *((_DWORD *)v26 + 5);
      if (++v155 == 6)
        goto LABEL_119;
    }
    if (v156 >= 8)
    {
      v161 = vdupq_n_s64(v155);
      v162 = v156 & 0x7FFFFFF8;
      v163 = (float32x4_t *)&v23[v188 + 4];
      v164 = (int64x2_t)xmmword_210BCAB60;
      v165 = (int64x2_t)xmmword_210BCABC0;
      do
      {
        v163[-1] = vcvtq_f32_u32(vmovl_u16((uint16x4_t)vand_s8((int8x8_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v164, v161), (int32x4_t)vceqq_s64(v165, v161))), (int8x8_t)0x1000100010001)));
        *v163 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)vand_s8((int8x8_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(vaddq_s64(v164, v157), v161), (int32x4_t)vceqq_s64(vaddq_s64(v165, v157), v161))), (int8x8_t)0x1000100010001)));
        v165 = vaddq_s64(v165, v158);
        v164 = vaddq_s64(v164, v158);
        v163 += 2;
        v162 -= 8;
      }
      while (v162);
      v160 = v156 & 0x7FFFFFF8;
      if (v160 == v156)
        goto LABEL_106;
    }
    else
    {
      v160 = 0;
    }
    do
    {
      if (v155 == v160)
        v166 = 1.0;
      else
        v166 = 0.0;
      v24[v160++] = v166;
    }
    while (v156 != v160);
LABEL_106:
    v167 = 0;
    v168 = v133;
    do
    {
      v170 = v24[v167];
      v27[v167] = v170;
      if (v167)
      {
        v171 = v27;
        v172 = v167;
        v169 = v168;
        do
        {
          v173 = *v169++;
          v174 = v173;
          v175 = *v171++;
          v170 = v170 - (float)(v174 * v175);
          v27[v167] = v170;
          --v172;
        }
        while (v172);
      }
      else
      {
        v169 = v168;
      }
      v168 = v169 + 1;
      v27[v167++] = v170 / *v169;
    }
    while (v167 != v15);
    v176 = 0;
    v177 = &v23[v188 + (int)v15 + v15];
    v178 = v15;
    do
    {
      v180 = (v178 - 1);
      v181 = v27[v180];
      v26[v180] = v181;
      if (v178 < v15)
      {
        v182 = 0;
        v183 = &v169[v178];
        do
        {
          v181 = v181 - (float)(*v183 * v177[v182]);
          v26[v180] = v181;
          v183 += v178 + v182++ + 1;
        }
        while (v176 != (_DWORD)v182);
      }
      v179 = v181 / *v169;
      v169 -= v178;
      v26[v180] = v179;
      ++v176;
      --v177;
      v66 = v178-- <= 1;
    }
    while (!v66);
    goto LABEL_95;
  }
LABEL_119:
  free(v23);
  free(v17);
  v209.tv_sec = 0;
  *(_QWORD *)&v209.tv_usec = 0;
  gettimeofday(&v209, 0);
  tv_sec = v209.tv_sec;
  tv_usec = v209.tv_usec;
  printf("Verbose (toc) : ");
  printf("%s (%d poses, final rmse = %f)", "vl_pose_refine_multi", a5, v33);
  printf(": %f ms", (float)((float)(1000000 * (tv_sec - v189.tv_sec) - *(_QWORD *)&v189.tv_usec + tv_usec) / 1000.0));
  putchar(10);
  return v33;
}

float refine_multi_lin(double *a1, double *a2, uint64_t a3, uint64_t a4, int a5, float32x4_t *a6, uint64_t a7, float *a8, float a9, float a10, float a11, float a12)
{
  int v15;
  int v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float *v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  uint64_t v66;
  float *v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float32x2_t v80;
  float32x2_t v81;
  float32x2_t v82;
  float v83;
  float v84;
  float v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float v89;
  float *v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  uint64_t v103;
  float32x2_t v104;
  float32x2_t v105;
  float32x2_t v106;
  __int128 v107;
  __int128 v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float *v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float32x2_t v126;
  float32x2_t v127;
  float32x2_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  float *f32;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  float *v158;
  __int128 v159;
  float v160;
  uint64_t v161;
  float *v162;
  float *v163;
  uint64_t v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float *v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  float32x2_t *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  float32x4_t *v240;
  uint64_t v241;
  uint64_t v242;
  float32x2_t *v243;
  int v244;
  uint64_t v246;
  uint64_t v247;
  uint64_t v250;
  int v251;
  float32x4_t *v254;
  uint64_t v255;
  float32x2_t *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  float32x4_t *v260;
  uint64_t v261;
  uint64_t v262;
  float32x4_t *v263;
  uint64_t v264;
  uint64_t v265;
  float32x2_t *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  float32x4_t *v270;
  uint64_t v271;
  uint64_t v272;
  float32x2_t *v276;
  uint64_t v277;
  float v278;
  float v279;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  float32x4_t v284;
  float32x4_t v285;
  float32x4_t v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  _BYTE v294[40];
  float v295;
  __int128 v296;
  __int128 v297;
  float v298;
  float32x4_t v299;
  float32x2_t v300;
  float32x4_t v301;
  float32x2_t v302;
  float32x4_t v303;
  float32x2_t v304;
  float32x4_t v305;
  float32x2_t v306;
  float32x4_t v307;
  float32x2_t v308;
  float32x4_t v309;
  float32x2_t v310;
  uint64_t v311;

  v311 = *MEMORY[0x24BDAC8D0];
  v15 = 6 * a5;
  if (a8)
  {
    if (a5 < 1)
    {
      v251 = 0;
      v23 = 0.0;
      return sqrtf(v23 / (float)v251);
    }
    v16 = 0;
    if (v15 <= 1)
      v17 = 1;
    else
      v17 = v15;
    v18 = 4 * v17;
    do
    {
      bzero((void *)(a7 + 4 * v16), v18);
      v16 += v15;
      --v17;
    }
    while (v17);
    bzero(a8, v18);
  }
  v250 = a7;
  if (a5 <= 1)
  {
    v251 = 0;
    v23 = 0.0;
    if (a5 < 1)
      return sqrtf(v23 / (float)v251);
  }
  else
  {
    v251 = a5 - 1;
    v19 = 4 * v15;
    v277 = v15 + 4;
    v276 = (float32x2_t *)(a7 + 4 * v277);
    v270 = (float32x4_t *)(a7 + 8 * v15);
    v268 = 2 * v15 + 4;
    v266 = (float32x2_t *)(a7 + 4 * v268);
    v20 = 1.0 / a9;
    v263 = (float32x4_t *)(a7 + v19);
    v260 = (float32x4_t *)(a7 + 12 * v15);
    v258 = 3 * v15 + 4;
    v256 = (float32x2_t *)(a7 + 4 * v258);
    v21 = (float)(1.0 / a9) * 0.0;
    v254 = (float32x4_t *)(a7 + 16 * v15);
    v246 = v19 | 4;
    v240 = (float32x4_t *)(a7 + 20 * v15);
    v243 = (float32x2_t *)(a7 + 4 * (v19 | 4));
    v237 = 5 * v15 + 4;
    v235 = (float32x2_t *)(a7 + 4 * v237);
    v22 = 1;
    v23 = 0.0;
    v279 = v20;
    do
    {
      v288 = 0u;
      v289 = 0u;
      v286 = 0u;
      v287 = 0u;
      v284 = 0u;
      v285 = 0u;
      v24 = (6 * v22);
      if (a8)
        v25 = &a8[v24];
      else
        v25 = 0;
      g_coords_diff(&a2[12 * v22], a2, (uint64_t)&v284);
      v26 = *((double *)&v288 + 1);
      v27 = *(double *)&v289;
      v28 = *((double *)&v289 + 1);
      v29 = a6[2].f32[0];
      v30 = a6[6 * v22 + 2].f32[1] - a6[2].f32[1];
      v31 = a6[6 * v22 + 2].f32[2] - a6[2].f32[2];
      v33 = a6->f32[2];
      v32 = a6->f32[3];
      v34 = a6->f32[1];
      v35 = (float)(v32 * v31) + (float)(a6->f32[0] * v30);
      v36 = a6[6 * v22 + 2].f32[3] - a6[2].f32[3];
      v38 = a6[1].f32[0];
      v37 = a6[1].f32[1];
      v39 = (float)(v31 * v38) + (float)(v34 * v30);
      v40 = (float)(v31 * v37) + (float)(v33 * v30);
      v42 = a6[1].f32[2];
      v41 = a6[1].f32[3];
      v43 = v35 + (float)(v42 * v36);
      v44 = v39 + (float)(v41 * v36);
      v45 = v40 + (float)(v29 * v36);
      v46 = v279 * (float)(v26 - v43);
      v47 = v279 * (float)(v27 - v44);
      v48 = v279 * (float)(v28 - v45);
      if (a8)
      {
        v49 = -(float)(a6->f32[0] * v279);
        v50 = -(float)(v34 * v279);
        *(float *)v290.f64 = v49;
        *((float *)v290.f64 + 1) = v50;
        v51 = v250 + 4 * (int)(6 * v22 * (v15 | 1));
        v52 = v250 + v24 * 4;
        v53 = -(float)(v33 * v279);
        v54 = -(float)(v32 * v279);
        *(float *)&v290.f64[1] = v53;
        *((float *)&v290.f64[1] + 1) = v54;
        v55 = -(float)(v38 * v279);
        v56 = -(float)(v37 * v279);
        *(float *)v291.f64 = v55;
        *((float *)v291.f64 + 1) = v56;
        v57 = -(float)(v42 * v279);
        v58 = -(float)(v41 * v279);
        *(float *)&v291.f64[1] = v57;
        *((float *)&v291.f64[1] + 1) = v58;
        v59 = -(float)(v29 * v279);
        v60 = v279 * v44;
        *(float *)v292.f64 = v59;
        *((float *)v292.f64 + 1) = v279 * v44;
        v61 = -(float)(v43 * v279);
        *(float *)&v292.f64[1] = v61;
        *((float *)&v292.f64[1] + 1) = v21;
        v62 = -(float)(v45 * v279);
        *(float *)v293.f64 = v62;
        *((float *)v293.f64 + 1) = v21;
        v63 = v279 * v43;
        *(_QWORD *)&v293.f64[1] = __PAIR64__(LODWORD(v21), LODWORD(v63));
        v64 = v279 * v45;
        v65 = -(float)(v44 * v279);
        v66 = -72;
        v67 = (float *)&v300 + 1;
        *(float *)v294 = v64;
        *(float *)&v294[4] = v65;
        do
        {
          *(v67 - 5) = 0.0;
          v68 = (float)(v49 * *(float *)&v294[v66 + 8]) + 0.0;
          *(v67 - 5) = v68;
          v69 = v68 + (float)(v50 * *(float *)&v294[v66 + 12]);
          *(v67 - 5) = v69;
          *(v67 - 5) = v69 + (float)(v53 * *(float *)&v294[v66 + 16]);
          *(v67 - 4) = 0.0;
          v70 = (float)(v54 * *(float *)&v294[v66 + 8]) + 0.0;
          *(v67 - 4) = v70;
          v71 = v70 + (float)(v55 * *(float *)&v294[v66 + 12]);
          *(v67 - 4) = v71;
          *(v67 - 4) = v71 + (float)(v56 * *(float *)&v294[v66 + 16]);
          *(v67 - 3) = 0.0;
          v72 = (float)(v57 * *(float *)&v294[v66 + 8]) + 0.0;
          *(v67 - 3) = v72;
          v73 = v72 + (float)(v58 * *(float *)&v294[v66 + 12]);
          *(v67 - 3) = v73;
          *(v67 - 3) = v73 + (float)(v59 * *(float *)&v294[v66 + 16]);
          *(v67 - 2) = 0.0;
          v74 = (float)(v60 * *(float *)&v294[v66 + 8]) + 0.0;
          *(v67 - 2) = v74;
          v75 = v74 + (float)(v61 * *(float *)&v294[v66 + 12]);
          *(v67 - 2) = v75;
          *(v67 - 2) = v75 + (float)(v21 * *(float *)&v294[v66 + 16]);
          *(v67 - 1) = 0.0;
          v76 = (float)(v62 * *(float *)&v294[v66 + 8]) + 0.0;
          *(v67 - 1) = v76;
          v77 = v76 + (float)(v21 * *(float *)&v294[v66 + 12]);
          *(v67 - 1) = v77;
          *(v67 - 1) = v77 + (float)(v63 * *(float *)&v294[v66 + 16]);
          *v67 = 0.0;
          v78 = (float)(v21 * *(float *)&v294[v66 + 8]) + 0.0;
          *v67 = v78;
          v79 = v78 + (float)(v64 * *(float *)&v294[v66 + 12]);
          *v67 = v79;
          *v67 = v79 + (float)(v65 * *(float *)&v294[v66 + 16]);
          v67 += 6;
          v66 += 12;
        }
        while (v66);
        *(float32x4_t *)v250 = vaddq_f32(*(float32x4_t *)v250, v299);
        v80 = v302;
        *(float32x2_t *)(v250 + 16) = vadd_f32(*(float32x2_t *)(v250 + 16), v300);
        *v263 = vaddq_f32(*v263, v301);
        *v276 = vadd_f32(*v276, v80);
        *v270 = vaddq_f32(*v270, v303);
        v81 = v306;
        *v266 = vadd_f32(*v266, v304);
        *v260 = vaddq_f32(*v260, v305);
        *v256 = vadd_f32(*v256, v81);
        *v254 = vaddq_f32(*v254, v307);
        v82 = v310;
        *v243 = vadd_f32(*v243, v308);
        *v240 = vaddq_f32(*v240, v309);
        *v235 = vadd_f32(*v235, v82);
        v83 = a8[1];
        *a8 = (float)((float)(*a8 + (float)(v49 * v46)) + (float)(v50 * v47)) + (float)(v53 * v48);
        a8[1] = (float)((float)(v83 + (float)(v54 * v46)) + (float)(v55 * v47)) + (float)(v56 * v48);
        v84 = (float)((float)(a8[3] + (float)(v60 * v46)) + (float)(v61 * v47)) + (float)(v21 * v48);
        a8[2] = (float)((float)(a8[2] + (float)(v57 * v46)) + (float)(v58 * v47)) + (float)(v59 * v48);
        a8[3] = v84;
        v85 = (float)((float)(a8[5] + (float)(v21 * v46)) + (float)(v64 * v47)) + (float)(v65 * v48);
        a8[4] = (float)((float)(a8[4] + (float)(v62 * v46)) + (float)(v21 * v47)) + (float)(v63 * v48);
        a8[5] = v85;
        v86 = a6[1];
        v87 = vmulq_n_f32(*a6, v279);
        *(float32x4_t *)&v294[8] = v87;
        v88 = vmulq_n_f32(v86, v279);
        v89 = v279 * a6[2].f32[0];
        *(float32x4_t *)&v294[24] = v88;
        v295 = v89;
        v298 = 0.0;
        v296 = 0u;
        v297 = 0u;
        v90 = (float *)&v300 + 1;
        do
        {
          *(v90 - 5) = 0.0;
          v91 = (float)(v87.f32[0] * *(float *)&v294[v66 + 8]) + 0.0;
          *(v90 - 5) = v91;
          v92 = v91 + (float)(v87.f32[1] * *(float *)&v294[v66 + 12]);
          *(v90 - 5) = v92;
          *(v90 - 5) = v92 + (float)(v87.f32[2] * *(float *)&v294[v66 + 16]);
          *(v90 - 4) = 0.0;
          v93 = (float)(v87.f32[3] * *(float *)&v294[v66 + 8]) + 0.0;
          *(v90 - 4) = v93;
          v94 = v93 + (float)(v88.f32[0] * *(float *)&v294[v66 + 12]);
          *(v90 - 4) = v94;
          *(v90 - 4) = v94 + (float)(v88.f32[1] * *(float *)&v294[v66 + 16]);
          *(v90 - 3) = 0.0;
          v95 = (float)(v88.f32[2] * *(float *)&v294[v66 + 8]) + 0.0;
          *(v90 - 3) = v95;
          v96 = v95 + (float)(v88.f32[3] * *(float *)&v294[v66 + 12]);
          *(v90 - 3) = v96;
          *(v90 - 3) = v96 + (float)(v89 * *(float *)&v294[v66 + 16]);
          *(v90 - 2) = 0.0;
          v97 = (float)(*(float *)&v294[v66 + 8] * 0.0) + 0.0;
          *(v90 - 2) = v97;
          v98 = v97 + (float)(*(float *)&v294[v66 + 12] * 0.0);
          *(v90 - 2) = v98;
          *(v90 - 2) = v98 + (float)(*(float *)&v294[v66 + 16] * 0.0);
          *(v90 - 1) = 0.0;
          v99 = (float)(*(float *)&v294[v66 + 8] * 0.0) + 0.0;
          *(v90 - 1) = v99;
          v100 = v99 + (float)(*(float *)&v294[v66 + 12] * 0.0);
          *(v90 - 1) = v100;
          *(v90 - 1) = v100 + (float)(*(float *)&v294[v66 + 16] * 0.0);
          *v90 = 0.0;
          v101 = (float)(*(float *)&v294[v66 + 8] * 0.0) + 0.0;
          *v90 = v101;
          v102 = v101 + (float)(*(float *)&v294[v66 + 12] * 0.0);
          *v90 = v102;
          *v90 = v102 + (float)(*(float *)&v294[v66 + 16] * 0.0);
          v90 += 6;
          v66 += 12;
        }
        while (v66 != 72);
        v103 = 0;
        *(float32x4_t *)v51 = vaddq_f32(*(float32x4_t *)v51, v299);
        v104 = v302;
        *(float32x2_t *)(v51 + 16) = vadd_f32(*(float32x2_t *)(v51 + 16), v300);
        *(float32x4_t *)(v51 + 4 * v15) = vaddq_f32(*(float32x4_t *)(v51 + 4 * v15), v301);
        *(float32x2_t *)(v51 + 4 * v277) = vadd_f32(*(float32x2_t *)(v51 + 4 * v277), v104);
        *(float32x4_t *)(v51 + 8 * v15) = vaddq_f32(*(float32x4_t *)(v51 + 8 * v15), v303);
        v105 = v306;
        *(float32x2_t *)(v51 + 4 * v268) = vadd_f32(*(float32x2_t *)(v51 + 4 * v268), v304);
        *(float32x4_t *)(v51 + 12 * v15) = vaddq_f32(*(float32x4_t *)(v51 + 12 * v15), v305);
        *(float32x2_t *)(v51 + 4 * v258) = vadd_f32(*(float32x2_t *)(v51 + 4 * v258), v105);
        *(float32x4_t *)(v51 + 16 * v15) = vaddq_f32(*(float32x4_t *)(v51 + 16 * v15), v307);
        v106 = v310;
        *(float32x2_t *)(v51 + 4 * v246) = vadd_f32(*(float32x2_t *)(v51 + 4 * v246), v308);
        *(float32x4_t *)(v51 + 20 * v15) = vaddq_f32(*(float32x4_t *)(v51 + 20 * v15), v309);
        *(float32x2_t *)(v51 + 4 * v237) = vadd_f32(*(float32x2_t *)(v51 + 4 * v237), v106);
        v107 = v296;
        v108 = v297;
        v109 = v298;
        v110 = (float)((float)(v25[1] + (float)(v87.f32[3] * v46)) + (float)(v88.f32[0] * v47))
             + (float)(v88.f32[1] * v48);
        *v25 = (float)((float)(*v25 + (float)(v87.f32[0] * v46)) + (float)(v87.f32[1] * v47))
             + (float)(v87.f32[2] * v48);
        v25[1] = v110;
        v111 = (float)((float)(v25[3] + (float)(*(float *)&v107 * v46)) + (float)(*((float *)&v107 + 1) * v47))
             + (float)(*((float *)&v107 + 2) * v48);
        v25[2] = (float)((float)(v25[2] + (float)(v88.f32[2] * v46)) + (float)(v88.f32[3] * v47)) + (float)(v89 * v48);
        v25[3] = v111;
        v112 = (float)((float)(v25[5] + (float)(*((float *)&v108 + 2) * v46)) + (float)(*((float *)&v108 + 3) * v47))
             + (float)(v109 * v48);
        v25[4] = (float)((float)(v25[4] + (float)(*((float *)&v107 + 3) * v46)) + (float)(*(float *)&v108 * v47))
               + (float)(*((float *)&v108 + 1) * v48);
        v25[5] = v112;
        v113 = (float *)&v300 + 1;
        do
        {
          *(v113 - 5) = 0.0;
          v114 = (float)(v87.f32[0] * *(float *)((char *)v290.f64 + v103)) + 0.0;
          *(v113 - 5) = v114;
          v115 = v114 + (float)(v87.f32[1] * *(float *)((char *)v290.f64 + v103 + 4));
          *(v113 - 5) = v115;
          *(v113 - 5) = v115 + (float)(v87.f32[2] * *(float *)((char *)&v290.f64[1] + v103));
          *(v113 - 4) = 0.0;
          v116 = (float)(v87.f32[3] * *(float *)((char *)v290.f64 + v103)) + 0.0;
          *(v113 - 4) = v116;
          v117 = v116 + (float)(v88.f32[0] * *(float *)((char *)v290.f64 + v103 + 4));
          *(v113 - 4) = v117;
          *(v113 - 4) = v117 + (float)(v88.f32[1] * *(float *)((char *)&v290.f64[1] + v103));
          *(v113 - 3) = 0.0;
          v118 = (float)(v88.f32[2] * *(float *)((char *)v290.f64 + v103)) + 0.0;
          *(v113 - 3) = v118;
          v119 = v118 + (float)(v88.f32[3] * *(float *)((char *)v290.f64 + v103 + 4));
          *(v113 - 3) = v119;
          *(v113 - 3) = v119 + (float)(v89 * *(float *)((char *)&v290.f64[1] + v103));
          *(v113 - 2) = 0.0;
          v120 = (float)(*(float *)&v107 * *(float *)((char *)v290.f64 + v103)) + 0.0;
          *(v113 - 2) = v120;
          v121 = v120 + (float)(*((float *)&v107 + 1) * *(float *)((char *)v290.f64 + v103 + 4));
          *(v113 - 2) = v121;
          *(v113 - 2) = v121 + (float)(*((float *)&v107 + 2) * *(float *)((char *)&v290.f64[1] + v103));
          *(v113 - 1) = 0.0;
          v122 = (float)(*((float *)&v107 + 3) * *(float *)((char *)v290.f64 + v103)) + 0.0;
          *(v113 - 1) = v122;
          v123 = v122 + (float)(*(float *)&v108 * *(float *)((char *)v290.f64 + v103 + 4));
          *(v113 - 1) = v123;
          *(v113 - 1) = v123 + (float)(*((float *)&v108 + 1) * *(float *)((char *)&v290.f64[1] + v103));
          *v113 = 0.0;
          v124 = (float)(*((float *)&v108 + 2) * *(float *)((char *)v290.f64 + v103)) + 0.0;
          *v113 = v124;
          v125 = v124 + (float)(*((float *)&v108 + 3) * *(float *)((char *)v290.f64 + v103 + 4));
          *v113 = v125;
          *v113 = v125 + (float)(v109 * *(float *)((char *)&v290.f64[1] + v103));
          v113 += 6;
          v103 += 12;
        }
        while (v103 != 72);
        *(float32x4_t *)v52 = vaddq_f32(*(float32x4_t *)v52, v299);
        v126 = v302;
        *(float32x2_t *)(v52 + 16) = vadd_f32(*(float32x2_t *)(v52 + 16), v300);
        *(float32x4_t *)(v52 + 4 * v15) = vaddq_f32(*(float32x4_t *)(v52 + 4 * v15), v301);
        *(float32x2_t *)(v52 + 4 * v277) = vadd_f32(*(float32x2_t *)(v52 + 4 * v277), v126);
        *(float32x4_t *)(v52 + 8 * v15) = vaddq_f32(*(float32x4_t *)(v52 + 8 * v15), v303);
        v127 = v306;
        *(float32x2_t *)(v52 + 4 * v268) = vadd_f32(*(float32x2_t *)(v52 + 4 * v268), v304);
        *(float32x4_t *)(v52 + 12 * v15) = vaddq_f32(*(float32x4_t *)(v52 + 12 * v15), v305);
        *(float32x2_t *)(v52 + 4 * v258) = vadd_f32(*(float32x2_t *)(v52 + 4 * v258), v127);
        *(float32x4_t *)(v52 + 16 * v15) = vaddq_f32(*(float32x4_t *)(v52 + 16 * v15), v307);
        v128 = v310;
        *(float32x2_t *)(v52 + 4 * v246) = vadd_f32(*(float32x2_t *)(v52 + 4 * v246), v308);
        *(float32x4_t *)(v52 + 20 * v15) = vaddq_f32(*(float32x4_t *)(v52 + 20 * v15), v309);
        *(float32x2_t *)(v52 + 4 * v237) = vadd_f32(*(float32x2_t *)(v52 + 4 * v237), v128);
      }
      v23 = v23 + (float)((float)((float)(v47 * v47) + (float)(v46 * v46)) + (float)(v48 * v48));
      ++v22;
    }
    while (v22 != a5);
  }
  v129 = 0;
  v130 = 2 * v15;
  v244 = v15 | 1;
  v131 = 4 * v15;
  v241 = v15 | 1;
  v242 = v131;
  v132 = 4 * (v15 + 2);
  v133 = 4 * (v15 + 3);
  v134 = 4 * (v15 + 4);
  v135 = 4 * (v15 + 5);
  v136 = v130 | 3;
  v137 = 8 * v15;
  v138 = v130 + 4;
  v139 = 4 * (v130 | 1);
  v140 = v130 + 5;
  v141 = 4 * (v130 | 2);
  v142 = 3 * v15;
  v272 = 3 * v15;
  v271 = v142 | 1;
  v269 = v142 + 2;
  v267 = v142 + 3;
  v264 = v142 + 5;
  v265 = v142 + 4;
  v143 = 5 * v15;
  v262 = 4 * v15;
  v261 = v131 | 1;
  v259 = v131 | 2;
  v257 = v131 | 3;
  v255 = v131 | 4;
  v144 = v131 | 5;
  v145 = 5 * v15;
  v146 = v143 | 1;
  v147 = v143 + 2;
  v148 = v143 + 3;
  v149 = v143 + 4;
  v150 = v143 + 5;
  v247 = a5;
  v238 = v133;
  v239 = v132;
  v234 = v135;
  v236 = v134;
  v232 = v139;
  v233 = v137;
  v230 = v136;
  v231 = v141;
  v228 = v140;
  v229 = v138;
  do
  {
    memset(v294, 0, 32);
    v292 = 0u;
    v293 = 0u;
    v290 = 0u;
    v291 = 0u;
    v285 = 0u;
    v286 = 0u;
    v283 = 0u;
    v284 = 0u;
    v151 = 3 * v129;
    v152 = 6 * v129;
    v153 = v129;
    v281 = 0u;
    v282 = 0u;
    g_coords_diff(&a1[12 * v129], a1, (uint64_t)&v290);
    v284 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v290), v291);
    v285 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v292), v293);
    v286 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v294), *(float64x2_t *)&v294[16]);
    f32 = a6[v152].f32;
    g_coordsf_diff((uint64_t)&v284, (uint64_t)f32, (uint64_t)&v281);
    v155 = *(_QWORD *)(a3 + 24 * v153);
    if (v155 >= 1)
    {
      v156 = 0;
      v157 = v281;
      v158 = (float *)(v250 + 4 * 6 * (int)v153 * v244);
      v159 = v282;
      v160 = *((float *)&v283 + 1);
      v278 = *(float *)&v283;
      v161 = *((_QWORD *)&v283 + 1);
      v162 = &a8[(6 * v153)];
      if (!a8)
        v162 = 0;
      v163 = (float *)(*(_QWORD *)(a4 + 8 * v151 + 8) + 8);
      v164 = *(_QWORD *)(a3 + 24 * v153);
      do
      {
        v165 = *(v163 - 2);
        v166 = *(v163 - 1);
        v167 = *v163;
        v168 = v160
             + (float)((float)((float)(*((float *)&v157 + 1) * v166) + (float)(*(float *)&v157 * v165))
                     + (float)(*((float *)&v157 + 2) * *v163));
        v169 = 0.0;
        if (v168 > 0.1)
        {
          v170 = (float)((float)((float)(1.0 / v165) * a11) * (float)((float)(1.0 / v165) * a11)) + (float)(a10 * a10);
          v171 = sqrtf(v170 + (float)((float)(v166 * a12) * (float)(v166 * a12)));
          v172 = sqrtf(v170 + (float)((float)(v167 * a12) * (float)(v167 * a12)));
          v173 = *(float *)&v161
               + (float)((float)((float)(*(float *)&v159 * v166) + (float)(*((float *)&v157 + 3) * v165))
                       + (float)(*((float *)&v159 + 1) * v167));
          v174 = *((float *)&v161 + 1)
               + (float)((float)((float)(*((float *)&v159 + 3) * v166) + (float)(*((float *)&v159 + 2) * v165))
                       + (float)(v278 * v167));
          v175 = 1.0 / v171;
          v176 = 1.0 / v172;
          v177 = (float *)(*(_QWORD *)(a3 + 8 * v151 + 8) + v156);
          v178 = (float)(1.0 / v171) * (float)(*v177 - (float)(v173 / v168));
          v179 = (float)(1.0 / v172) * (float)(v177[1] - (float)(v174 / v168));
          v169 = (float)(v179 * v179) + (float)(v178 * v178);
          if (v162)
          {
            v180 = f32[1];
            v181 = f32[2];
            v182 = f32[3];
            v183 = f32[4];
            v184 = f32[5];
            v185 = f32[6];
            v186 = f32[7];
            v187 = f32[8];
            v188 = v175 * (float)((float)-v173 / (float)(v168 * v168));
            v189 = (float)(1.0 / v168) * v175;
            v190 = v176 * (float)((float)-v174 / (float)(v168 * v168));
            v191 = (float)(1.0 / v168) * v176;
            v192 = (float)((float)(0.0 - (float)(v188 * *f32)) - (float)(v189 * v180)) - (float)(v181 * 0.0);
            v193 = (float)((float)(0.0 - (float)(v190 * *f32)) - (float)(v180 * 0.0)) - (float)(v191 * v181);
            v194 = (float)((float)(0.0 - (float)(v188 * v182)) - (float)(v189 * v183)) - (float)(v184 * 0.0);
            v195 = (float)((float)(0.0 - (float)(v190 * v182)) - (float)(v183 * 0.0)) - (float)(v191 * v184);
            v196 = (float)((float)(0.0 - (float)(v188 * v185)) - (float)(v189 * v186)) - (float)(v187 * 0.0);
            v197 = (float)((float)(0.0 - (float)(v190 * v185)) - (float)(v186 * 0.0)) - (float)(v191 * v187);
            v198 = (float)((float)((float)(v188 * v173) + 0.0) - (float)(v189 * v168)) + 0.0;
            v199 = (float)((float)((float)(v190 * v173) + 0.0) - (float)(v168 * 0.0)) + (float)(v191 * 0.0);
            v200 = (float)((float)(0.0 - (float)(v188 * v174)) + (float)(v189 * 0.0)) + (float)(v168 * 0.0);
            v201 = (float)((float)(0.0 - (float)(v190 * v174)) + 0.0) + (float)(v191 * v168);
            v202 = (float)((float)((float)(v188 * 0.0) + 0.0) + (float)(v189 * v174)) - (float)(v173 * 0.0);
            v203 = (float)((float)((float)(v190 * 0.0) + 0.0) + (float)(v174 * 0.0)) - (float)(v191 * v173);
            v204 = (float)((float)(v194 * v192) + 0.0) + (float)(v195 * v193);
            v205 = (float)((float)(v196 * v192) + 0.0) + (float)(v197 * v193);
            v206 = (float)((float)(v198 * v192) + 0.0) + (float)(v199 * v193);
            v207 = (float)((float)(v200 * v192) + 0.0) + (float)(v201 * v193);
            v208 = (float)((float)(v202 * v192) + 0.0) + (float)(v203 * v193);
            v209 = (float)((float)(v196 * v194) + 0.0) + (float)(v197 * v195);
            v210 = (float)((float)(v198 * v194) + 0.0) + (float)(v199 * v195);
            v211 = v204 + v158[1];
            *v158 = (float)((float)((float)(v192 * v192) + 0.0) + (float)(v193 * v193)) + *v158;
            v158[1] = v211;
            v212 = v206 + v158[3];
            v158[2] = v205 + v158[2];
            v158[3] = v212;
            v213 = v208 + v158[5];
            v158[4] = v207 + v158[4];
            v158[5] = v213;
            *(float *)((char *)v158 + v242) = v204 + *(float *)((char *)v158 + v242);
            v214 = (float)((float)(v200 * v194) + 0.0) + (float)(v201 * v195);
            v158[v241] = (float)((float)((float)(v194 * v194) + 0.0) + (float)(v195 * v195)) + v158[v241];
            *(float *)((char *)v158 + v239) = v209 + *(float *)((char *)v158 + v239);
            v215 = (float)((float)(v202 * v194) + 0.0) + (float)(v203 * v195);
            *(float *)((char *)v158 + v238) = v210 + *(float *)((char *)v158 + v238);
            *(float *)((char *)v158 + v236) = v214 + *(float *)((char *)v158 + v236);
            *(float *)((char *)v158 + v234) = v215 + *(float *)((char *)v158 + v234);
            *(float *)((char *)v158 + v233) = v205 + *(float *)((char *)v158 + v233);
            v216 = (float)((float)(v198 * v196) + 0.0) + (float)(v199 * v197);
            *(float *)((char *)v158 + v232) = v209 + *(float *)((char *)v158 + v232);
            *(float *)((char *)v158 + v231) = (float)((float)((float)(v196 * v196) + 0.0) + (float)(v197 * v197))
                                            + *(float *)((char *)v158 + v231);
            v217 = (float)((float)(v200 * v196) + 0.0) + (float)(v201 * v197);
            v158[v230] = v216 + v158[v230];
            v158[v229] = v217 + v158[v229];
            v218 = (float)((float)(v202 * v196) + 0.0) + (float)(v203 * v197);
            v158[v228] = v218 + v158[v228];
            v158[v272] = v206 + v158[v272];
            v158[v271] = v210 + v158[v271];
            v158[v269] = v216 + v158[v269];
            v219 = (float)((float)(v200 * v198) + 0.0) + (float)(v201 * v199);
            v158[v267] = (float)((float)((float)(v198 * v198) + 0.0) + (float)(v199 * v199)) + v158[v267];
            v158[v265] = v219 + v158[v265];
            v220 = (float)((float)(v202 * v198) + 0.0) + (float)(v203 * v199);
            v158[v264] = v220 + v158[v264];
            v158[v262] = v207 + v158[v262];
            v158[v261] = v214 + v158[v261];
            v158[v259] = v217 + v158[v259];
            v158[v257] = v219 + v158[v257];
            v158[v255] = (float)((float)((float)(v200 * v200) + 0.0) + (float)(v201 * v201)) + v158[v255];
            v221 = (float)((float)(v202 * v200) + 0.0) + (float)(v203 * v201);
            v158[v144] = v221 + v158[v144];
            v158[v145] = v208 + v158[v145];
            v158[v146] = v215 + v158[v146];
            v158[v147] = v218 + v158[v147];
            v158[v148] = v220 + v158[v148];
            v158[v149] = v221 + v158[v149];
            v158[v150] = (float)((float)((float)(v202 * v202) + 0.0) + (float)(v203 * v203)) + v158[v150];
            v222 = (float)(v162[1] + (float)(v194 * v178)) + (float)(v195 * v179);
            v223 = (float)(v162[2] + (float)(v196 * v178)) + (float)(v197 * v179);
            v224 = (float)(v162[3] + (float)(v198 * v178)) + (float)(v199 * v179);
            v225 = (float)(v162[4] + (float)(v200 * v178)) + (float)(v201 * v179);
            v226 = (float)(v162[5] + (float)(v202 * v178)) + (float)(v203 * v179);
            *v162 = (float)(*v162 + (float)(v192 * v178)) + (float)(v193 * v179);
            v162[1] = v222;
            v162[2] = v223;
            v162[3] = v224;
            v162[4] = v225;
            v162[5] = v226;
          }
        }
        v23 = v23 + v169;
        v156 += 8;
        v163 += 3;
        --v164;
      }
      while (v164);
      v251 += v155;
    }
    v129 = v153 + 1;
  }
  while (v153 + 1 != v247);
  return sqrtf(v23 / (float)v251);
}

float vl_pose_refine(float32x2_t *a1, uint64_t a2, uint64_t *a3, int a4, float32x2_t *a5, uint64_t a6, float a7, float a8, float a9)
{
  uint64_t v17;
  uint64_t v19;
  float32x2_t *v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  BOOL v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  const float *v29;
  float *v30;
  const float *v31;
  float32x4_t v32;
  const float *v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  const float *v37;
  float32x4_t v38;
  float32x4_t v39;
  uint64_t v40;
  uint64_t v41;
  float *v42;
  float *v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float v54;
  float32x4_t v55;
  float32x4_t v56;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  uint64_t v70;
  float32x2_t *v71;
  uint64_t v72;
  float32x4x3_t v73;
  float32x4x3_t v74;

  v70 = 0;
  v71 = 0;
  v72 = 0;
  v17 = *a3;
  if (*a3 <= 0)
  {
    v70 = *a3;
  }
  else
  {
    if (v17 <= 21)
      v19 = 21;
    else
      v19 = *a3;
    v20 = (float32x2_t *)malloc_type_realloc(0, 12 * v19, 0x7C5287FEuLL);
    v71 = v20;
    v72 = v19;
    bzero(v20, 12 * v17);
    v70 = *a3;
    if (v70 >= 1)
    {
      v21 = a3[1];
      if ((unint64_t)v70 >= 5)
      {
        v22 = 0;
        v23 = (char *)v20 + 12 * v70;
        v25 = (unint64_t)v20 < v21 + 12 * v70 && v21 < (unint64_t)v23;
        v26 = v23 <= (char *)a1 || v20 >= &a1[6];
        if (v26 && !v25)
        {
          v27 = v70 & 3;
          if ((v70 & 3) == 0)
            v27 = 4;
          v22 = v70 - v27;
          v28 = v22;
          v29 = (const float *)a3[1];
          v30 = (float *)v20;
          do
          {
            v73 = vld3q_f32(v29);
            v29 += 12;
            v31 = (const float *)&a1[4] + 1;
            v32 = vld1q_dup_f32(v31);
            v33 = (const float *)&a1[5];
            v34 = vld1q_dup_f32(v33);
            v35 = vsubq_f32(v73.val[0], v32);
            v36 = vsubq_f32(v73.val[1], v34);
            v37 = (const float *)&a1[5] + 1;
            v38 = vld1q_dup_f32(v37);
            v39 = vsubq_f32(v73.val[2], v38);
            v74.val[0] = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v36, a1[1].f32[1]), v35, a1->f32[0]), v39, a1[3].f32[0]);
            v74.val[1] = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v36, a1[2].f32[0]), v35, a1->f32[1]), v39, a1[3].f32[1]);
            v74.val[2] = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v36, a1[2].f32[1]), v35, a1[1].f32[0]), v39, a1[4].f32[0]);
            vst3q_f32(v30, v74);
            v30 += 12;
            v28 -= 4;
          }
          while (v28);
        }
      }
      else
      {
        v22 = 0;
      }
      v40 = v70 - v22;
      v41 = 12 * v22;
      v42 = (float *)(v41 + v21 + 4);
      v43 = (float *)((char *)&v20[1] + v41);
      do
      {
        v44 = *v42;
        v45 = v42[1];
        *(v43 - 2) = (float)((float)(a1[1].f32[1] * (float)(*v42 - a1[5].f32[0]))
                           + (float)(a1->f32[0] * (float)(*(v42 - 1) - a1[4].f32[1])))
                   + (float)(a1[3].f32[0] * (float)(v45 - a1[5].f32[1]));
        v46 = *(v42 - 1);
        *(v43 - 1) = (float)((float)(a1[2].f32[0] * (float)(v44 - a1[5].f32[0]))
                           + (float)(a1->f32[1] * (float)(v46 - a1[4].f32[1])))
                   + (float)(a1[3].f32[1] * (float)(v45 - a1[5].f32[1]));
        v47 = *v42;
        v42 += 3;
        *v43 = (float)((float)(a1[2].f32[1] * (float)(v47 - a1[5].f32[0]))
                     + (float)(a1[1].f32[0] * (float)(v46 - a1[4].f32[1])))
             + (float)(a1[4].f32[0] * (float)(v45 - a1[5].f32[1]));
        v43 += 3;
        --v40;
      }
      while (v40);
    }
  }
  v48 = vcvtq_f64_f32(a1[1]);
  v64 = vcvtq_f64_f32(*a1);
  v65 = v48;
  v49 = vcvtq_f64_f32(a1[3]);
  v66 = vcvtq_f64_f32(a1[2]);
  v67 = v49;
  v50 = vcvtq_f64_f32(a1[5]);
  v68 = vcvtq_f64_f32(a1[4]);
  v69 = v50;
  v51 = vcvtq_f64_f32(a5[1]);
  v58 = vcvtq_f64_f32(*a5);
  v59 = v51;
  v52 = vcvtq_f64_f32(a5[3]);
  v60 = vcvtq_f64_f32(a5[2]);
  v61 = v52;
  v53 = vcvtq_f64_f32(a5[5]);
  v62 = vcvtq_f64_f32(a5[4]);
  v63 = v53;
  v54 = vl_pose_refine_multi(v64.f64, 0, a2, (uint64_t)&v70, 1, a4, v58.f64, a6, NAN, a7, a8, a9);
  v55 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v66), v67);
  *(float32x4_t *)a1->f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v64), v65);
  *(float32x4_t *)a1[2].f32 = v55;
  *(float32x4_t *)a1[4].f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v68), v69);
  v56 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v60), v61);
  *(float32x4_t *)a5->f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v58), v59);
  *(float32x4_t *)a5[2].f32 = v56;
  *(float32x4_t *)a5[4].f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v62), v63);
  free(v71);
  return v54;
}

float vl_pose_irefine(__int128 *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x2_t *a6, uint64_t a7, uint64_t a8, float a9)
{
  char *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _OWORD *v19;
  _QWORD *v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  int32x4_t *v25;
  unint64_t v26;
  int32x4_t v27;
  int32x4_t *v28;
  int32x4_t v29;
  int32x4_t v30;
  unint64_t v31;
  int32x4_t *v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  __int128 v42;
  __int128 v43;
  int v44;
  float v45;
  float v46;
  float *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  int32x2_t v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  uint64_t v67;
  float v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float32x4_t v73;
  const float *v74;
  uint64_t v75;
  int32x4_t *v76;
  int8x16_t v77;
  int8x16_t v78;
  const float *v79;
  unsigned __int128 v80;
  unsigned __int128 v81;
  uint64_t v82;
  __int32 *v83;
  float *v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  float v94;
  float v95;
  float v96;
  float v97;
  int v98;
  uint64_t v99;
  int *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  int32x4_t v108;
  int32x4_t v109;
  uint64_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  uint8x16_t v117;
  uint8x16_t v118;
  uint8x16_t v119;
  uint8x16_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int16x8_t v127;
  int v128;
  uint64_t v129;
  int v130;
  float v131;
  float v132;
  float v133;
  float v134;
  int v135;
  int *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  _DWORD *v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  void *v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  BOOL v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  void *v172;
  float v173;
  void **v174;
  void *v175;
  uint64_t v177;
  float32x2_t *v178;
  float v182;
  float v184;
  int v185;
  float v186;
  void **v187;
  float v188;
  float v189;
  float v190;
  char *v191;
  float v192;
  void *v193;
  _QWORD *v195;
  char *__b;
  void *v197[2];
  uint64_t v198;
  void *v199[2];
  uint64_t v200;
  float v201;
  float v202;
  float v203;
  int *v204;
  unsigned int v205[3];

  v13 = (char *)malloc_type_malloc(8 * *a2, 0x26069818uLL);
  v14 = v13;
  v195 = a2;
  v15 = *a2;
  if ((uint64_t)*a2 >= 1)
  {
    v16 = a2[1];
    if (v15 == 1)
    {
      v17 = 0;
LABEL_7:
      v22 = v15 - v17;
      v23 = &v13[8 * v17];
      v24 = (_QWORD *)(v16 + 288 * v17);
      do
      {
        *(_QWORD *)v23 = *v24;
        v23 += 8;
        v24 += 36;
        --v22;
      }
      while (v22);
      goto LABEL_9;
    }
    v17 = v15 & 0xFFFFFFFFFFFFFFFELL;
    v18 = v15 & 0xFFFFFFFFFFFFFFFELL;
    v19 = v13;
    v20 = (_QWORD *)a2[1];
    do
    {
      *(_QWORD *)&v21 = *v20;
      *((_QWORD *)&v21 + 1) = v20[36];
      *v19++ = v21;
      v20 += 72;
      v18 -= 2;
    }
    while (v18);
    if (v15 != v17)
      goto LABEL_7;
  }
LABEL_9:
  v199[0] = (void *)0x3D4CCCCD00000010;
  LODWORD(v199[1]) = 0;
  v25 = (int32x4_t *)malloc_type_malloc(4 * (int)v15, 0x100004052888210uLL);
  if ((int)v15 < 1)
    goto LABEL_16;
  if (v15 < 8uLL)
  {
    v26 = 0;
    do
    {
LABEL_15:
      v25->i32[v26] = v26;
      ++v26;
    }
    while (v15 != v26);
    goto LABEL_16;
  }
  v26 = v15 - (unint64_t)(v15 & 7);
  v27 = (int32x4_t)xmmword_210BCABD0;
  v28 = v25 + 1;
  v29.i64[0] = 0x400000004;
  v29.i64[1] = 0x400000004;
  v30.i64[0] = 0x800000008;
  v30.i64[1] = 0x800000008;
  v31 = v26;
  do
  {
    v28[-1] = v27;
    *v28 = vaddq_s32(v27, v29);
    v27 = vaddq_s32(v27, v30);
    v28 += 2;
    v31 -= 8;
  }
  while (v31);
  if ((v15 & 7) != 0)
    goto LABEL_15;
LABEL_16:
  v187 = (void **)rkd_create_ex(v14, (uint64_t)v25, 2, v15, 0, (uint64_t)v199);
  __b = (char *)malloc_type_malloc(4 * *a2, 0xAB4654AAuLL);
  v32 = (int32x4_t *)malloc_type_malloc(4 * *a2, 0xCB59ACBEuLL);
  v33 = *(float *)(a5 + 328);
  v34 = a8;
  if (a8)
  {
    *(_QWORD *)a8 = 0;
    *(_QWORD *)(a8 + 24) = 0;
    *(_QWORD *)(a8 + 48) = 0;
    v35 = *(_QWORD *)(a8 + 16);
    if (v35 <= 31)
    {
      v36 = 2 * v35;
      if (2 * v35 <= 32)
        v36 = 32;
      if (v35)
        v37 = v36;
      else
        v37 = 32;
      *(_QWORD *)(a8 + 8) = malloc_type_realloc(*(void **)(a8 + 8), 8 * v37, 0xE564B9A6uLL);
      *(_QWORD *)(a8 + 16) = v37;
    }
    v38 = *(_QWORD *)(a8 + 40);
    if (v38 <= 31)
    {
      v39 = 2 * v38;
      if (2 * v38 <= 32)
        v39 = 32;
      if (v38)
        v40 = v39;
      else
        v40 = 32;
      *(_QWORD *)(a8 + 32) = malloc_type_realloc(*(void **)(a8 + 32), 12 * v40, 0x2F6E04E9uLL);
      *(_QWORD *)(a8 + 40) = v40;
    }
    *(_OWORD *)v199 = *(_OWORD *)a8;
    v200 = *(_QWORD *)(a8 + 16);
    *(_OWORD *)v197 = *(_OWORD *)(a8 + 24);
    v198 = *(_QWORD *)(a8 + 40);
  }
  else
  {
    v41 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
    v199[0] = 0;
    v199[1] = v41;
    v200 = 32;
    v197[0] = 0;
    v197[1] = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
    v198 = 32;
  }
  v42 = *a1;
  v43 = a1[2];
  *(_OWORD *)a6[2].f32 = a1[1];
  *(_OWORD *)a6[4].f32 = v43;
  *(_OWORD *)a6->f32 = v42;
  if (*(int *)(a5 + 372) >= 1)
  {
    v44 = 0;
    v177 = a5;
    v45 = -0.5;
    v186 = v33 / a9;
    v178 = a6;
    while (1)
    {
      v47 = *(float **)(a3 + 8);
      v48 = *(_DWORD *)a3;
      v49 = *(_QWORD *)(a3 + 200);
      v50 = *(unsigned int *)(a3 + 216);
      v51 = *(float *)(a5 + 368);
      v205[0] = 8;
      v204 = (int *)malloc_type_malloc(0x20uLL, 0x100004052888210uLL);
      v54 = a6[5].f32[0];
      v53 = a6[5].f32[1];
      v55 = a6->f32[0];
      v192 = a6->f32[1];
      v56 = a6[3].f32[0];
      v57 = a6[1].f32[1];
      v189 = a6[1].f32[0];
      v190 = a6[3].f32[1];
      v58 = a6[2].f32[1];
      v188 = a6[2].f32[0];
      v59 = a6[4].f32[0];
      v60 = a6[4].f32[1];
      if ((uint64_t)*v195 >= 1)
      {
        v182 = v51;
        v61 = a6[4].f32[0];
        v62 = a6[2].f32[1];
        v63 = a6[5].f32[0];
        v184 = a6[1].f32[1];
        v64 = a6[3].f32[0];
        v65 = a6->f32[0];
        v66 = a6[4].f32[1];
        memset(__b, 255, 4 * *v195);
        v60 = v66;
        v55 = v65;
        v56 = v64;
        v57 = v184;
        v54 = v63;
        v58 = v62;
        v59 = v61;
        v51 = v182;
      }
      v67 = *(_QWORD *)(a4 + 24);
      v68 = 0.5;
      v69 = v48;
      if (v67 >= 1)
      {
        v70 = *(_QWORD *)(a4 + 32);
        *(float *)v52.i32 = v51 * v51;
        if ((unint64_t)v67 > 8)
        {
          v72 = *(_QWORD *)(a4 + 24) & 7;
          if ((v67 & 7) == 0)
            v72 = 8;
          v71 = v67 - v72;
          v73 = (float32x4_t)vdupq_lane_s32(v52, 0);
          v74 = (const float *)(v70 + 32);
          v75 = v71;
          v76 = v32 + 1;
          v77.i64[0] = 0xBF000000BF000000;
          v77.i64[1] = 0xBF000000BF000000;
          v78.i64[0] = 0x3F0000003F000000;
          v78.i64[1] = 0x3F0000003F000000;
          do
          {
            v79 = v74 - 8;
            v80 = (unsigned __int128)vld2q_f32(v79);
            v81 = (unsigned __int128)vld2q_f32(v74);
            v76[-1] = vcvtq_s32_f32(vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_n_f32((float32x4_t)v80, *(float *)v52.i32)), v78, v77), v73, (float32x4_t)v80));
            *v76 = vcvtq_s32_f32(vmlaq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtzq_f32(vmulq_n_f32((float32x4_t)v81, *(float *)v52.i32)), v78, v77), v73, (float32x4_t)v81));
            v74 += 16;
            v76 += 2;
            v75 -= 8;
          }
          while (v75);
          v68 = 0.5;
        }
        else
        {
          v71 = 0;
        }
        v82 = v67 - v71;
        v83 = &v32->i32[v71];
        v84 = (float *)(v70 + 8 * v71);
        do
        {
          v85 = *v84;
          v84 += 2;
          v86 = v85;
          if ((float)(*(float *)v52.i32 * v85) <= 0.0)
            v87 = v45;
          else
            v87 = v68;
          *v83++ = (int)(float)(v87 + (float)(v86 * *(float *)v52.i32));
          --v82;
        }
        while (v82);
      }
      v185 = v44;
      if (v48 >= 1)
      {
        v88 = (float)((float)(v57 * v54) + (float)(v55 * v60)) + (float)(v56 * v53);
        v89 = (float)((float)(v54 * v188) + (float)(v192 * v60)) + (float)(v190 * v53);
        v90 = (float)((float)(v54 * v58) + (float)(v189 * v60)) + (float)(v59 * v53);
        if ((int)v50 > 0)
        {
          v91 = 0;
          v92 = v50 & 0xFFFFFFE0;
          v93 = v50 & 0xFFFFFFF8;
          while (1)
          {
            v94 = *v47;
            v95 = v47[1];
            v96 = v47[2];
            v97 = (float)((float)((float)(v57 * v95) + (float)(v55 * *v47)) + (float)(v56 * v96)) - v88;
            v201 = v97;
            if (v97 > 0.0)
            {
              v202 = (float)((float)((float)((float)(v188 * v95) + (float)(v192 * v94)) + (float)(v190 * v96)) - v89)
                   * (float)(1.0 / v97);
              v203 = (float)((float)((float)((float)(v58 * v95) + (float)(v189 * v94)) + (float)(v59 * v96)) - v90)
                   * (float)(1.0 / v97);
              v98 = rkd_inside((uint64_t)v187, &v202, 0, (void **)&v204, v205, v186);
              v69 = v48;
              if (v98 > 0)
                break;
            }
LABEL_55:
            v49 += (int)v50;
            v47 += 3;
            if (++v91 == v69)
              goto LABEL_82;
          }
          v99 = 0;
          v100 = v204;
          v101 = v195[1];
          while (2)
          {
            v102 = v100[v99];
            v103 = v101 + 288 * (int)v102 + 32;
            if (v50 < 8)
            {
              v104 = 0;
              v105 = 0;
              goto LABEL_71;
            }
            if (v50 >= 0x20)
            {
              v107 = 0;
              v108 = 0uLL;
              v109 = 0uLL;
              v110 = v101 + 48 + 288 * (int)v102;
              v111 = 0uLL;
              v112 = 0uLL;
              v113 = 0uLL;
              v114 = 0uLL;
              v115 = 0uLL;
              v116 = 0uLL;
              do
              {
                v117 = *(uint8x16_t *)(v49 + v107);
                v118 = *(uint8x16_t *)(v49 + v107 + 16);
                v119 = *(uint8x16_t *)(v110 + v107 - 16);
                v120 = *(uint8x16_t *)(v110 + v107);
                v121 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v117.i8, *(uint8x8_t *)v119.i8);
                v122 = (int16x8_t)vsubl_high_u8(v117, v119);
                v123 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v118.i8, *(uint8x8_t *)v120.i8);
                v124 = (int16x8_t)vsubl_high_u8(v118, v120);
                v112 = vmlal_high_s16(v112, v122, v122);
                v111 = vmlal_s16(v111, *(int16x4_t *)v122.i8, *(int16x4_t *)v122.i8);
                v109 = vmlal_high_s16(v109, v121, v121);
                v108 = vmlal_s16(v108, *(int16x4_t *)v121.i8, *(int16x4_t *)v121.i8);
                v116 = vmlal_high_s16(v116, v124, v124);
                v115 = vmlal_s16(v115, *(int16x4_t *)v124.i8, *(int16x4_t *)v124.i8);
                v114 = vmlal_high_s16(v114, v123, v123);
                v113 = vmlal_s16(v113, *(int16x4_t *)v123.i8, *(int16x4_t *)v123.i8);
                v107 += 32;
              }
              while (v92 != v107);
              v105 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v113, v108), vaddq_s32(v115, v111)), vaddq_s32(vaddq_s32(v114, v109), vaddq_s32(v116, v112))));
              if (v92 != v50)
              {
                v106 = v50 & 0x7FFFFFE0;
                v104 = v50 & 0xFFFFFFE0;
                if ((v50 & 0x18) == 0)
                  goto LABEL_71;
                goto LABEL_68;
              }
            }
            else
            {
              v105 = 0;
              v106 = 0;
LABEL_68:
              v125 = 0uLL;
              v126 = (int32x4_t)v105;
              do
              {
                v127 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(v49 + v106), *(uint8x8_t *)(v103 + v106));
                v125 = vmlal_high_s16(v125, v127, v127);
                v126 = vmlal_s16(v126, *(int16x4_t *)v127.i8, *(int16x4_t *)v127.i8);
                v106 += 8;
              }
              while (v93 != v106);
              v105 = vaddvq_s32(vaddq_s32(v126, v125));
              v104 = v50 & 0xFFFFFFF8;
              if (v93 != v50)
              {
                do
                {
LABEL_71:
                  v128 = *(unsigned __int8 *)(v49 + v104) - *(unsigned __int8 *)(v103 + v104);
                  v105 += v128 * v128;
                  ++v104;
                }
                while (v50 != v104);
              }
            }
            if (v105 <= v32->i32[v102])
            {
              v129 = v102;
              v32->i32[v129] = v105;
              *(_DWORD *)&__b[v129 * 4] = v91;
            }
            if (++v99 == v98)
              goto LABEL_55;
            continue;
          }
        }
        v130 = 0;
        do
        {
          v131 = *v47;
          v132 = v47[1];
          v133 = v47[2];
          v134 = (float)((float)((float)(v57 * v132) + (float)(v55 * *v47)) + (float)(v56 * v133)) - v88;
          v201 = v134;
          if (v134 > 0.0)
          {
            v202 = (float)((float)((float)((float)(v188 * v132) + (float)(v192 * v131)) + (float)(v190 * v133)) - v89)
                 * (float)(1.0 / v134);
            v203 = (float)((float)((float)((float)(v58 * v132) + (float)(v189 * v131)) + (float)(v59 * v133)) - v90)
                 * (float)(1.0 / v134);
            v135 = rkd_inside((uint64_t)v187, &v202, 0, (void **)&v204, v205, v186);
            v69 = v48;
            if (v135 >= 1)
            {
              v136 = v204;
              v137 = v135;
              do
              {
                v139 = *v136++;
                v138 = v139;
                if ((v32->i32[v139] & 0x80000000) == 0)
                {
                  v140 = v138;
                  v32->i32[v140] = 0;
                  *(_DWORD *)&__b[v140 * 4] = v130;
                }
                --v137;
              }
              while (v137);
            }
          }
          v47 += 3;
          ++v130;
        }
        while (v130 != v69);
      }
LABEL_82:
      free(v204);
      v199[0] = 0;
      v197[0] = 0;
      if (a8)
        *(_QWORD *)(a8 + 48) = 0;
      v141 = v195;
      v142 = __b;
      v45 = -0.5;
      if ((uint64_t)*v195 < 1)
      {
        v146 = 0;
        v145 = 0;
      }
      else
      {
        v143 = 0;
        v144 = 0;
        v145 = 0;
        v146 = 0;
        v147 = v199[1];
        v148 = v200;
        v149 = (char *)v197[1];
        v150 = v198;
        do
        {
          if (*(_DWORD *)&v142[4 * v144] != -1)
          {
            v152 = *(_QWORD *)(v141[1] + v143);
            v153 = v145 + 1;
            if ((uint64_t)v145 >= v148)
            {
              v154 = 2 * v148;
              if (!v148)
                v154 = 32;
              if (v154 <= (uint64_t)v145)
                v148 = (uint64_t)(v145 + 1);
              else
                v148 = v154;
              if (v148)
              {
                v155 = v149;
                v147 = malloc_type_realloc(v147, 8 * v148, 0x70821ED8uLL);
                v153 = v145 + 1;
                v149 = v155;
                v141 = v195;
                v142 = __b;
              }
            }
            *((_QWORD *)v147 + (_QWORD)v145) = v152;
            v156 = (char *)(v146 + 1);
            if (v146 >= v150)
            {
              v157 = 2 * v150;
              if (!v150)
                v157 = 21;
              if (v157 <= v146)
                v150 = v146 + 1;
              else
                v150 = v157;
              if (v150)
              {
                v158 = v147;
                v159 = v153;
                v160 = (char *)malloc_type_realloc(v149, 12 * v150, 0xB5E6406EuLL);
                v153 = v159;
                v141 = v195;
                v142 = __b;
                v149 = v160;
                v147 = v158;
              }
            }
            v161 = *(_QWORD *)(a3 + 8) + 12 * *(int *)&v142[4 * v144];
            v162 = *(_QWORD *)v161;
            v163 = &v149[12 * v146];
            *((_DWORD *)v163 + 2) = *(_DWORD *)(v161 + 8);
            *(_QWORD *)v163 = v162;
            if (a8)
            {
              v164 = *(_DWORD *)&v142[4 * v144];
              v165 = *(_QWORD *)(a8 + 48);
              v166 = *(_QWORD *)(a8 + 64);
              if (v165 >= v166)
              {
                v167 = 2 * v166;
                v168 = v166 == 0;
                v169 = 32;
                if (!v168)
                  v169 = v167;
                if (v169 <= v165)
                  v170 = v165 + 1;
                else
                  v170 = v169;
                if (v170)
                {
                  v191 = v153;
                  v193 = v147;
                  v171 = v149;
                  v172 = malloc_type_realloc(*(void **)(a8 + 56), 8 * v170, 0x6074363AuLL);
                  v149 = v171;
                  v141 = v195;
                  v142 = __b;
                  *(_QWORD *)(a8 + 56) = v172;
                  v153 = v191;
                  v147 = v193;
                  v165 = *(_QWORD *)(a8 + 48);
                }
                *(_QWORD *)(a8 + 64) = v170;
              }
              *(_QWORD *)(a8 + 48) = v165 + 1;
              v151 = (_DWORD *)(*(_QWORD *)(a8 + 56) + 8 * v165);
              *v151 = v164;
              v151[1] = v144;
            }
            v146 = (uint64_t)v156;
            v145 = v153;
          }
          ++v144;
          v143 += 288;
        }
        while (*v141 > v144);
        v199[1] = v147;
        v200 = v148;
        v197[1] = v149;
        v198 = v150;
      }
      v199[0] = v145;
      v197[0] = (void *)v146;
      a5 = v177;
      a6 = v178;
      v46 = vl_pose_refine(v178, (uint64_t)v199, (uint64_t *)v197, *(_DWORD *)(v177 + 364), v178, a7, *(float *)(v177 + 348) / a9, *(float *)(v177 + 356), *(float *)(v177 + 360));
      v44 = v185 + 1;
      if (v185 + 1 >= *(_DWORD *)(v177 + 372))
      {
        v173 = v46;
        v34 = a8;
        v174 = v187;
        v175 = __b;
        if (a8)
          goto LABEL_118;
LABEL_122:
        free(v199[1]);
        free(v197[1]);
        v175 = __b;
        if (!v174)
          goto LABEL_120;
LABEL_119:
        free(*v174);
        free(v174[1]);
        free(v174[2]);
        free(v174);
        v175 = __b;
        goto LABEL_120;
      }
    }
  }
  v173 = 0.0;
  v174 = v187;
  v175 = __b;
  if (!a8)
    goto LABEL_122;
LABEL_118:
  *(_OWORD *)v34 = *(_OWORD *)v199;
  *(_QWORD *)(v34 + 16) = v200;
  *(_OWORD *)(v34 + 24) = *(_OWORD *)v197;
  *(_QWORD *)(v34 + 40) = v198;
  if (v174)
    goto LABEL_119;
LABEL_120:
  free(v175);
  free(v32);
  return v173;
}

float refine_multi_lin_7(double *a1, double *a2, uint64_t a3, uint64_t a4, int a5, float *a6, float a7, float a8, float a9, float a10)
{
  int v17;
  unint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float *v46;
  float v47;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;

  v17 = a5 - 1;
  if (a5 <= 1)
  {
    v17 = 0;
    v21 = 0.0;
    if (a5 < 1)
      return sqrtf(v21 / (float)v17);
  }
  else
  {
    v19 = 0;
    v20 = 96 * a5 - 96;
    v21 = 0.0;
    v22 = 1.0 / a7;
    do
    {
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      g_coords_diff(&a2[v19 / 8 + 12], a2, (uint64_t)&v56);
      v23 = v61.f64[1];
      v24 = a6[v19 / 4 + 35] - a6[11];
      v25 = a6[v19 / 4 + 33] - a6[9];
      v26 = a6[v19 / 4 + 34] - a6[10];
      v27 = v61.f64[0];
      v28 = v22 * (float)(v23 - (float)((float)((float)(v26 * a6[5]) + (float)(a6[2] * v25)) + (float)(a6[8] * v24)));
      v29 = v22 * (float)(v27 - (float)((float)((float)(v26 * a6[4]) + (float)(a6[1] * v25)) + (float)(a6[7] * v24)));
      v30 = v60.f64[1];
      v31 = (float)(v26 * a6[3]) + (float)(*a6 * v25);
      v21 = v21
          + (float)((float)((float)(v29 * v29)
                          + (float)((float)(v22 * (float)(v30 - (float)(v31 + (float)(a6[6] * v24))))
                                  * (float)(v22 * (float)(v30 - (float)(v31 + (float)(a6[6] * v24))))))
                  + (float)(v28 * v28));
      v19 += 96;
    }
    while (v20 != v19);
    if (a5 < 1)
      return sqrtf(v21 / (float)v17);
  }
  v32 = 0;
  do
  {
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    g_coords_diff(&a1[12 * v32], a1, (uint64_t)&v56);
    v53 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v56), v57);
    v54 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v58), v59);
    v55 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v60), v61);
    g_coordsf_diff((uint64_t)&v53, (uint64_t)&a6[24 * v32], (uint64_t)&v50);
    v33 = *(_QWORD *)(a3 + 24 * v32);
    if (v33 >= 1)
    {
      v34 = 0;
      v35 = (float *)(*(_QWORD *)(a4 + 24 * v32 + 8) + 8);
      v36 = *(_QWORD *)(a3 + 24 * v32);
      do
      {
        v37 = *(v35 - 2);
        v38 = *(v35 - 1);
        v39 = *v35;
        v40 = *((float *)&v52 + 1)
            + (float)((float)((float)(*((float *)&v50 + 1) * v38) + (float)(*(float *)&v50 * v37))
                    + (float)(*((float *)&v50 + 2) * *v35));
        v41 = 0.0;
        if (v40 > 0.1)
        {
          v42 = (float)((float)((float)(1.0 / v37) * a9) * (float)((float)(1.0 / v37) * a9)) + (float)(a8 * a8);
          v43 = sqrtf(v42 + (float)((float)(v39 * a10) * (float)(v39 * a10)));
          v44 = sqrtf(v42 + (float)((float)(v38 * a10) * (float)(v38 * a10)));
          v45 = *((float *)&v52 + 3)
              + (float)((float)((float)(*((float *)&v51 + 3) * v38) + (float)(*((float *)&v51 + 2) * v37))
                      + (float)(*(float *)&v52 * v39));
          v46 = (float *)(*(_QWORD *)(a3 + 24 * v32 + 8) + v34);
          v47 = (float)(*((float *)&v52 + 2)
                      + (float)((float)((float)(*(float *)&v51 * v38) + (float)(*((float *)&v50 + 3) * v37))
                              + (float)(*((float *)&v51 + 1) * v39)))
              / v40;
          v41 = (float)((float)((float)(1.0 / v43) * (float)(v46[1] - (float)(v45 / v40)))
                      * (float)((float)(1.0 / v43) * (float)(v46[1] - (float)(v45 / v40))))
              + (float)((float)((float)(1.0 / v44) * (float)(*v46 - v47))
                      * (float)((float)(1.0 / v44) * (float)(*v46 - v47)));
        }
        v21 = v21 + v41;
        v34 += 8;
        v35 += 3;
        --v36;
      }
      while (v36);
      v17 += v33;
    }
    ++v32;
  }
  while (v32 != a5);
  return sqrtf(v21 / (float)v17);
}

void *vl_kpts2_to_kpt_list(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  const void *v38;
  size_t v39;

  v4 = *a2;
  v5 = *a1;
  v6 = a2[2];
  if (*a1 <= v6)
  {
    v7 = v5 - v4;
    if (v5 <= v4)
      goto LABEL_3;
LABEL_11:
    bzero((void *)(a2[1] + 288 * *a2), 288 * v7);
    v8 = *a1;
    *a2 = *a1;
    if (v8 < 1)
      goto LABEL_31;
    goto LABEL_12;
  }
  v9 = 2 * v6;
  if (v9 <= v5)
    v10 = *a1;
  else
    v10 = v9;
  if (v10)
    a2[1] = (uint64_t)malloc_type_realloc((void *)a2[1], 288 * v10, 0x82B09BA4uLL);
  a2[2] = v10;
  v7 = v5 - v4;
  if (v5 > v4)
    goto LABEL_11;
LABEL_3:
  v8 = *a1;
  *a2 = *a1;
  if (v8 < 1)
    goto LABEL_31;
LABEL_12:
  LODWORD(v11) = *((_DWORD *)a1 + 24);
  if ((int)v11 < 1)
  {
    v17 = (uint64_t *)a1[1];
    v18 = a2[1];
    if (a1[3])
    {
      v19 = (_DWORD *)a1[4];
      v20 = (_DWORD *)(v18 + 16);
      do
      {
        v21 = *v17++;
        *((_QWORD *)v20 - 2) = v21;
        LODWORD(v21) = *v19++;
        *v20 = v21;
        v20 += 72;
        --v8;
      }
      while (v8);
      goto LABEL_31;
    }
    if ((unint64_t)v8 >= 2)
    {
      v22 = v8 & 0xFFFFFFFFFFFFFFFELL;
      v23 = v17 + 1;
      v24 = v8 & 0xFFFFFFFFFFFFFFFELL;
      v25 = a2[1];
      do
      {
        v26 = v23[1];
        *(_DWORD *)(v25 + 288) = *v23;
        *(_QWORD *)v25 = *((_QWORD *)v23 - 1);
        *(_DWORD *)(v25 + 292) = v26;
        v23 += 4;
        v25 += 576;
        v24 -= 2;
      }
      while (v24);
      if (v8 == v22)
        goto LABEL_31;
    }
    else
    {
      v22 = 0;
    }
    v27 = v8 - v22;
    v28 = (_QWORD *)(v18 + 288 * v22);
    v29 = &v17[v22];
    do
    {
      v30 = *v29++;
      *v28 = v30;
      v28 += 36;
      --v27;
    }
    while (v27);
    goto LABEL_31;
  }
  v12 = 0;
  v13 = 32;
  do
  {
    v14 = a1[7];
    *(_QWORD *)(a2[1] + 288 * v12) = *(_QWORD *)(a1[1] + 8 * v12);
    if ((int)v11 >= 1)
    {
      v15 = 0;
      v16 = v14 + (int)v11 * (int)v12;
      do
      {
        *(_BYTE *)(a2[1] + v13 + v15) = *(_BYTE *)(v16 + v15);
        ++v15;
        v11 = *((int *)a1 + 24);
      }
      while (v15 < v11);
    }
    if (a1[3])
      *(_DWORD *)(a2[1] + 288 * v12 + 16) = *(_DWORD *)(a1[4] + 4 * v12);
    ++v12;
    v13 += 288;
  }
  while (*a1 > v12);
LABEL_31:
  v31 = a2[3];
  v32 = (unint64_t)a1[9] >> 2;
  v33 = a2[5];
  if (v32 > v33)
  {
    v34 = 2 * v33;
    v35 = v33 == 0;
    v36 = 64;
    if (!v35)
      v36 = v34;
    if (v36 <= v32)
      v37 = (unint64_t)a1[9] >> 2;
    else
      v37 = v36;
    if (v37)
      a2[4] = (uint64_t)malloc_type_realloc((void *)a2[4], 4 * v37, 0xBFFC3401uLL);
    a2[5] = v37;
  }
  if (v32 > v31)
    bzero((void *)(a2[4] + 4 * a2[3]), 4 * (v32 - v31));
  v39 = a1[9];
  v38 = (const void *)a1[10];
  a2[3] = v39 >> 2;
  return memcpy((void *)a2[4], v38, v39);
}

float slam_vo_map_triangulate_track(uint64_t a1, int *a2, unsigned int a3, uint64_t a4)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  float *v10;
  float64x2_t v11;
  double v12;
  float v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  int v18;
  char *v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t *v24;
  uint64_t v25;
  float *v26;
  uint64_t *v27;
  float32x4_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  float *v37;
  float v38;
  float v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  float32x2_t v51;
  double v52;
  double v53;
  double v54;
  double v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  int v71;
  uint64_t v73;
  char *v75;
  double v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  double v83[3];
  double v84[5];

  v84[3] = *(double *)MEMORY[0x24BDAC8D0];
  v73 = a3;
  if ((a3 & 0x80000000) != 0 || *(_QWORD *)(a1 + 392) <= (uint64_t)a3)
    v6 = -1;
  else
    v6 = *(_DWORD *)(*(_QWORD *)(a1 + 400) + 4 * a3);
  v71 = v6;
  v7 = *a2;
  v8 = *(_DWORD *)(a1 + 608);
  if (v8 <= 1)
    v8 = 1;
  v9 = v7 * v8;
  v75 = (char *)malloc_type_malloc(48 * (int)(v7 * v8), 0x1000040EED21634uLL);
  v10 = (float *)malloc_type_malloc(8 * v9, 0x100004000313F17uLL);
  v15 = *(float *)(a1 + 160);
  v16 = *(float *)(*(_QWORD *)(a1 + 304) + 880 * *(int *)(a1 + 592) + 360);
  if (*(uint64_t *)a2 < 1)
  {
    LODWORD(v25) = 0;
    v19 = v75;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    v19 = v75;
    do
    {
      v20 = *(_DWORD *)(*((_QWORD *)a2 + 1) + 4 * v17) & 0x7FFF;
      v21 = (unint64_t)*(unsigned int *)(*((_QWORD *)a2 + 1) + 4 * v17) >> 15;
      v22 = *(_QWORD *)(a1 + 304);
      v23 = v22 + 880 * v20;
      v24 = (float32x4_t *)&v19[48 * v18];
      *v24 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v23), *(float64x2_t *)(v23 + 16));
      v24[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v23 + 32)), *(float64x2_t *)(v23 + 48));
      v11 = *(float64x2_t *)(v23 + 80);
      v24[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v23 + 64)), v11);
      *(_QWORD *)&v10[2 * v18] = *(_QWORD *)(*(_QWORD *)(v23 + 368) + 8 * v21);
      v25 = v18 + 1;
      if (*(_QWORD *)(v23 + 768))
      {
        v26 = v10;
        v27 = (uint64_t *)(v23 + 768);
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        v77 = 0u;
        v78 = 0u;
        g_coords_conv((double *)(v22 + 880 * v20 + 776), (double *)v23, v77.f64);
        v19 = v75;
        v28 = (float32x4_t *)&v75[48 * v25];
        *v28 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v77), v78);
        v28[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v79), v80);
        HIDWORD(v11.f64[0]) = HIDWORD(v82.f64[0]);
        v28[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v81), v82);
        v29 = *v27;
        v10 = v26;
        *(_QWORD *)&v26[2 * v25] = *(_QWORD *)(v29 + 8 * v21);
        LODWORD(v25) = v18 + 2;
      }
      ++v17;
      v18 = v25;
    }
    while (*(_QWORD *)a2 > v17);
  }
  if ((a3 & 0x80000000) != 0 || *(_QWORD *)(a1 + 368) <= v73)
  {
    v36 = v25 - 1;
    v32 = (float *)a4;
    if ((int)v25 <= 1)
    {
      log_msg(1, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/pwin/slam/slam_vo_map.c", 105, (uint64_t)"slam_vo_map_triangulate_track", "n <= 1");
      __assert_rtn("slam_vo_map_triangulate_track", "slam_vo_map.c", 105, "0");
    }
    v35 = (uint64_t)&v19[48 * v36];
    v37 = &v10[2 * v36];
    v38 = *v10;
    v39 = v10[1];
    v76 = 0.0;
    v77 = vcvtq_f64_f32(*(float32x2_t *)(v35 + 36));
    v78.f64[0] = *(float *)(v35 + 44);
    v40 = *v37;
    v41 = v37[1];
    v42 = v40 * *(float *)(v35 + 16) + *(float *)(v35 + 12) + *(float *)(v35 + 20) * v41 + v77.f64[1];
    v43 = v40 * *(float *)(v35 + 28) + *(float *)(v35 + 24) + *(float *)(v35 + 32) * v41 + v78.f64[0];
    v78.f64[1] = v40 * *(float *)(v35 + 4) + *(float *)v35 + *(float *)(v35 + 8) * v41 + v77.f64[0];
    v79.f64[0] = v42;
    v79.f64[1] = v43;
    LODWORD(v43) = *((_DWORD *)v19 + 8);
    LODWORD(v41) = *((_DWORD *)v19 + 11);
    v44 = *((float *)v19 + 10);
    v83[0] = *((float *)v19 + 9);
    v83[1] = v44;
    v83[2] = *(float *)&v41;
    v45 = v38;
    v46 = v39;
    v47 = v45 * *((float *)v19 + 4) + *((float *)v19 + 3) + *((float *)v19 + 5) * v46 + v44;
    v48 = *((float *)v19 + 6);
    v49 = *((float *)v19 + 7);
    v84[0] = v45 * *((float *)v19 + 1) + *(float *)v19 + *((float *)v19 + 2) * v46 + v83[0];
    v84[1] = v47;
    v84[2] = v45 * v49 + v48 + *(float *)&v43 * v46 + *(float *)&v41;
    if (g_isect_line_line_ex2(v77.f64, &v78.f64[1], v83, v84, 0, 0, &v76, 0, 0.0000001) == 1
      && v76 >= 0.0)
    {
      v54 = 100000.0;
      if (v76 <= 100000.0)
        v54 = v76;
      v50 = 1.0;
      if (v76 >= 1.0)
        v53 = v54;
      else
        v53 = 1.0;
    }
    else
    {
      v53 = 100000.0;
    }
    v33 = 0;
    v55 = 1.0;
    v56 = 1.0 / v53;
    *(float *)a4 = v56;
    v11.f64[0] = *(float64_t *)v37;
    *(_QWORD *)(a4 + 4) = *(_QWORD *)v37;
    v34 = (uint64_t *)a4;
  }
  else
  {
    v30 = *(_QWORD *)(a1 + 376) + 12 * v73;
    v31 = *(_QWORD *)v30;
    v32 = (float *)a4;
    *(_DWORD *)(a4 + 8) = *(_DWORD *)(v30 + 8);
    *(_QWORD *)a4 = v31;
    if (v71 == -1)
    {
      v33 = 0;
      v35 = (uint64_t)&v19[48 * (int)v25 - 48];
      v34 = (uint64_t *)a4;
    }
    else
    {
      v33 = *(_QWORD *)(a1 + 472) + 36 * v71;
      v34 = (uint64_t *)(*(_QWORD *)(a1 + 448) + 12 * v71);
      v35 = *(_QWORD *)(a1 + 568) + 48 * v71;
    }
    v57 = *(float *)a4 - *(float *)(v35 + 36);
    v58 = *(float *)(a4 + 4) - *(float *)(v35 + 40);
    *(float *)&v12 = *(float *)(a4 + 8) - *(float *)(v35 + 44);
    *(float *)v11.f64 = (float)((float)(*(float *)(v35 + 12) * v58) + (float)(*(float *)v35 * v57))
                      + (float)(*(float *)(v35 + 24) * *(float *)&v12);
    v52 = *(double *)(v35 + 16);
    v51 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v11.f64[0], 0);
    v50 = COERCE_DOUBLE(vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)&v52, v58), *(float32x2_t *)(v35 + 4), v57), *(float32x2_t *)(v35 + 28), *(float *)&v12));
    v55 = COERCE_DOUBLE(vdiv_f32(*(float32x2_t *)&v50, v51));
    *(double *)(a4 + 4) = v55;
    LODWORD(v55) = 1.0;
    *(float *)a4 = 1.0 / *(float *)v11.f64;
  }
  *(float *)v11.f64 = 1.0 / (float)(v15 * v16);
  g_triangulate_inv_depthf((uint64_t)v75, (uint64_t)v10, 0, v25, v35, v32, v34, v33, v11.f64[0], v55, v50, *(double *)&v51, v12, v52, v13, v14, 0);
  v60 = v59;
  v61 = *v32;
  v62 = v32[1] / *v32;
  v63 = v32[2] / *v32;
  v32[1] = v62;
  v32[2] = v63;
  v64 = 1.0 / v61;
  *v32 = v64;
  v65 = *(float *)(v35 + 36)
      + (float)((float)((float)(v62 * *(float *)(v35 + 4)) + (float)(*(float *)v35 * v64))
              + (float)(*(float *)(v35 + 8) * v63));
  v66 = (float)((float)(v62 * *(float *)(v35 + 16)) + (float)(*(float *)(v35 + 12) * v64))
      + (float)(*(float *)(v35 + 20) * v63);
  v67 = (float)(v62 * *(float *)(v35 + 28)) + (float)(*(float *)(v35 + 24) * v64);
  v68 = *(float *)(v35 + 40) + v66;
  v69 = *(float *)(v35 + 44) + (float)(v67 + (float)(*(float *)(v35 + 32) * v63));
  *v32 = v65;
  v32[1] = v68;
  v32[2] = v69;
  free(v75);
  free(v10);
  return v60;
}

uint64_t slam_vo_map_marginalize_cam(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  size_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t *v36;
  timeval *v37;
  timeval v38;
  float32x4_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int *v53;
  int v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  int v69;
  void *v70;
  uint64_t v71;
  int *v72;
  int v73;
  int v74;
  float v75;
  uint64_t v76;
  int v77;
  int *v78;
  unsigned int v79;
  unsigned int v80;
  float64x2_t *v81;
  uint64_t v82;
  uint64_t v83;
  size_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int64_t v90;
  int64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  size_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  float v117;
  float32x4_t *v118;
  uint64_t v119;
  float32x4_t *v120;
  unint64_t v121;
  float32x4_t v122;
  uint64_t v123;
  float *v124;
  int64_t v125;
  uint64_t v126;
  unsigned __int8 *v127;
  void *v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v136;
  int v137;
  unsigned __int8 *v138;
  int *v139;
  int v140;
  BOOL v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t k;
  uint64_t v146;
  BOOL v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  BOOL v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int64_t v164;
  uint64_t i;
  uint64_t v166;
  BOOL v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int64_t v171;
  size_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned __int8 *v176;
  _DWORD *v177;
  uint64_t v178;
  uint64_t v180;
  uint64_t v181;
  size_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unsigned __int8 *v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t j;
  uint64_t v201;
  BOOL v202;
  __int128 *v203;
  _OWORD *v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int *v216;
  uint64_t v217;
  uint64_t result;
  float *v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  int *v224;
  uint64_t v225;
  int v226;
  float *v227;
  int *v228;
  uint64_t *v229;
  uint64_t v230;
  int v231;
  timeval v232;
  float32x4_t v233;
  float32x4_t v234;
  int v235;
  __int128 v236;
  uint64_t v237;
  _OWORD v238[2];
  int v239;
  uint64_t v240;

  v5 = a1;
  v240 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 304);
  v236 = xmmword_210BCB8C0;
  v237 = 0;
  v7 = *(float *)(a1 + 292);
  v232.tv_sec = 0;
  *(_QWORD *)&v232.tv_usec = 0;
  if (gettimeofday(&v232, 0) || (double)(v232.tv_usec + 1000000 * v232.tv_sec) / 1000000.0 <= 1514764800.0)
LABEL_267:
    __assert_rtn("u_timel", "arch_dtime.c", 118, "ret == 0 && result/1e6 > 1514764800L");
  v223 = a3;
  if (*(_DWORD *)(v6 + 880 * a2 + 516))
  {
    v226 = 0;
  }
  else
  {
    v226 = 0;
    if (v7 > 0.0 && *(float *)(v6 + 880 * a2 + 512) < *(float *)(v5 + 268))
    {
      LODWORD(v230) = 0;
      v232.tv_sec = 1;
      *(_QWORD *)&v232.tv_usec = &v230;
      v233.i64[0] = 0;
      v8 = *(_QWORD *)(v5 + 304);
      v9 = v8 + 880 * a2;
      v10 = *(_DWORD *)(v9 + 488);
      if (v10 >= 1)
      {
        v11 = 0;
        v12 = v8 + 880 * a2;
        v13 = (_QWORD *)(v12 + 400);
        v227 = (float *)(v12 + 360);
        v228 = (int *)(v9 + 488);
        v14 = a2 & 0x7FFF;
        do
        {
          v15 = *(int *)(*v13 + 4 * v11);
          if ((_DWORD)v15 != -1)
          {
            v16 = *(int *)(*(_QWORD *)(v5 + 400) + 4 * v15);
            if ((_DWORD)v16 != -1)
            {
              DWORD2(v238[0]) = 0;
              *(_QWORD *)&v238[0] = 0;
              v17 = *(_QWORD *)(v5 + 448) + 12 * (int)v16;
              v18 = *(_DWORD *)(v17 + 8);
              *(_QWORD *)&v238[0] = *(_QWORD *)v17;
              DWORD2(v238[0]) = v18;
              v19 = *(_QWORD *)(v5 + 568) + 48 * (int)v16;
              v20 = *(_QWORD *)(v5 + 472) + 36 * (_DWORD)v16;
              v21 = *(float *)(v5 + 160) * *v227;
              LODWORD(v230) = v14;
              triangulate_track(v5, &v232.tv_sec, v19, (float *)v238, v20, v20, v21);
              v22 = *(_QWORD *)(v5 + 304) + 880 * a2;
              v23 = *(int *)(v5 + 16);
              v24 = (const void *)(*(_QWORD *)(v22 + 384) + (int)v23 * (int)v11);
              v25 = *(_QWORD *)(v22 + 504);
              v26 = *(_QWORD *)(v5 + 448) + 12 * (int)v16;
              v27 = *(_QWORD *)&v238[0];
              *(_DWORD *)(v26 + 8) = DWORD2(v238[0]);
              *(_QWORD *)v26 = v27;
              v28 = *(_QWORD *)(v5 + 472) + 36 * (_DWORD)v16;
              v29 = *(_OWORD *)v20;
              v30 = *(_OWORD *)(v20 + 16);
              *(_DWORD *)(v28 + 32) = *(_DWORD *)(v20 + 32);
              *(_OWORD *)v28 = v29;
              *(_OWORD *)(v28 + 16) = v30;
              memcpy((void *)(*(_QWORD *)(v5 + 496) + (int)v23 * (int)v16), v24, v23);
              ++*(_DWORD *)(*(_QWORD *)(v5 + 520) + 4 * v16);
              *(_QWORD *)(*(_QWORD *)(v5 + 544) + 8 * v16) = v25;
              v10 = *v228;
              a3 = v223;
            }
          }
          ++v11;
          v14 += 0x8000;
        }
        while (v11 < v10);
      }
      v226 = 1;
    }
  }
  v31 = v6 + 880 * a2;
  v32 = *(_DWORD *)(v31 + 488);
  if (v32 >= 1)
  {
    v33 = 0;
    v34 = 0;
    v224 = (int *)(v31 + 488);
    v225 = v5;
    v35 = v6 + 880 * a2;
    v36 = (uint64_t *)(v35 + 400);
    v219 = (float *)(v35 + 360);
    v221 = a2;
    v229 = (uint64_t *)(v35 + 400);
    while (1)
    {
      v45 = *v36;
      v46 = *(_DWORD *)(*v36 + 4 * v33);
      if (v46 == -1)
        goto LABEL_19;
      v47 = *(_QWORD *)(v5 + 320);
      v48 = (uint64_t *)(v47 + 24 * v46);
      v235 = 0;
      v49 = *(_DWORD *)(*(_QWORD *)(v5 + 400) + 4 * *(int *)(v45 + 4 * v33));
      v50 = *v48;
      if (*v48 < 1)
      {
        v52 = 0;
        v55 = 0;
      }
      else
      {
        v51 = 0;
        v52 = 0;
        v53 = *(int **)(v47 + 24 * v46 + 8);
        do
        {
          while (1)
          {
            v54 = v53[v51];
            if ((v54 & 0x7FFF) != a2)
              break;
            v235 = v53[v51];
            v53[v51] = -1;
            v34 = &v235;
            if (v50 == ++v51)
              goto LABEL_28;
          }
          if (!*(_DWORD *)(*(_QWORD *)(v5 + 304) + 880 * (v54 & 0x7FFF) + 668))
            v52 = 1;
          ++v51;
        }
        while (v50 != v51);
LABEL_28:
        v55 = 0;
        *((_QWORD *)&v236 + 1) = v34;
        v56 = v53;
        v57 = v50;
        do
        {
          v59 = *v56++;
          v58 = v59;
          if (v59 != -1)
            v53[v55++] = v58;
          --v57;
        }
        while (v57);
      }
      v60 = v47 + 24 * v46;
      v63 = *(_QWORD *)(v60 + 16);
      v62 = (uint64_t *)(v60 + 16);
      v61 = v63;
      if (v55 > v63)
      {
        v64 = 2 * v61;
        v141 = v61 == 0;
        v65 = 64;
        if (!v141)
          v65 = v64;
        if (v65 <= v55)
          v66 = v55;
        else
          v66 = v65;
        if (v66)
        {
          v67 = v47 + 24 * v46;
          v68 = v34;
          v69 = v49;
          v220 = v47;
          v70 = malloc_type_realloc(*(void **)(v67 + 8), 4 * v66, 0xB49AF189uLL);
          v49 = v69;
          v34 = v68;
          v47 = v220;
          a2 = v221;
          *(_QWORD *)(v67 + 8) = v70;
          v48 = (uint64_t *)v67;
          a3 = v223;
        }
        *v62 = v66;
      }
      v71 = v55 - v50;
      if (v55 > v50)
      {
        v72 = v34;
        v73 = v49;
        bzero((void *)(*(_QWORD *)(v47 + 24 * v46 + 8) + 4 * *v48), 4 * v71);
        v49 = v73;
        v34 = v72;
        a2 = v221;
      }
      *v48 = v55;
      v36 = v229;
      *(_BYTE *)(a3 + *(int *)(*v229 + 4 * v33)) = v55 == 0;
      v74 = v226;
      if (!v52)
        v74 = 0;
      v5 = v225;
      if (v74 == 1 && v49 == -1)
        break;
LABEL_18:
      v32 = *v224;
LABEL_19:
      if (++v33 >= v32)
        goto LABEL_104;
    }
    v75 = *(float *)(v225 + 160) * *v219;
    v233 = 0u;
    v234 = 0u;
    v232 = (timeval)0;
    v231 = 0;
    v230 = 0;
    v76 = *(_QWORD *)(v225 + 376) + 12 * *(int *)(*v229 + 4 * v33);
    v77 = *(_DWORD *)(v76 + 8);
    v230 = *(_QWORD *)v76;
    v231 = v77;
    v78 = v34;
    v79 = *v34;
    v80 = *v34 & 0x7FFF;
    v81 = (float64x2_t *)(*(_QWORD *)(v225 + 304) + 880 * v80);
    v232 = (timeval)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v81), v81[1]);
    v233 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v81[2]), v81[3]);
    v234 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v81[4]), v81[5]);
    triangulate_track(v225, (uint64_t *)&v236, (uint64_t)&v232, (float *)&v230, 0, (uint64_t)v238, v75);
    v82 = *(_QWORD *)(v225 + 440);
    *(_DWORD *)(*(_QWORD *)(v225 + 400) + 4 * *(int *)(*v229 + 4 * v33)) = v82;
    v83 = *(_QWORD *)(v225 + 304) + 880 * v80;
    v222 = *(_QWORD *)(v83 + 384);
    v84 = *(int *)(v225 + 16);
    v85 = *(_QWORD *)(v83 + 504);
    v86 = (int)v82 + 1;
    v87 = *(_QWORD *)(v225 + 456);
    if (v87 < v86)
    {
      v98 = 2 * v87;
      v141 = v87 == 0;
      v99 = 21;
      if (!v141)
        v99 = v98;
      if (v99 <= v86)
        v100 = (int)v82 + 1;
      else
        v100 = v99;
      if (v100)
        *(_QWORD *)(v225 + 448) = malloc_type_realloc(*(void **)(v225 + 448), 12 * v100, 0xF428F9F7uLL);
      *(_QWORD *)(v225 + 456) = v100;
      *(_QWORD *)(v225 + 440) = v86;
      v88 = 9 * (int)v86;
      v89 = *(_QWORD *)(v225 + 480);
      if (v89 >= v88)
      {
LABEL_50:
        *(_QWORD *)(v225 + 464) = v88;
        v90 = (int)v84 * (int)v86;
        v91 = *(_QWORD *)(v225 + 504);
        if (v91 >= v90)
          goto LABEL_51;
        goto LABEL_72;
      }
    }
    else
    {
      *(_QWORD *)(v225 + 440) = v86;
      v88 = 9 * (int)v86;
      v89 = *(_QWORD *)(v225 + 480);
      if (v89 >= v88)
        goto LABEL_50;
    }
    v101 = 2 * v89;
    v141 = v89 == 0;
    v102 = 64;
    if (!v141)
      v102 = v101;
    if (v102 <= v88)
      v103 = v88;
    else
      v103 = v102;
    if (v103)
      *(_QWORD *)(v225 + 472) = malloc_type_realloc(*(void **)(v225 + 472), 4 * v103, 0x84AA5280uLL);
    *(_QWORD *)(v225 + 480) = v103;
    *(_QWORD *)(v225 + 464) = v88;
    v90 = (int)v84 * (int)v86;
    v91 = *(_QWORD *)(v225 + 504);
    if (v91 >= v90)
    {
LABEL_51:
      *(_QWORD *)(v225 + 488) = v90;
      v92 = *(_QWORD *)(v225 + 512);
      v93 = *(_QWORD *)(v225 + 528);
      if (v93 >= v86)
        goto LABEL_52;
      goto LABEL_80;
    }
LABEL_72:
    v104 = 2 * v91;
    v141 = v91 == 0;
    v105 = 256;
    if (!v141)
      v105 = v104;
    if (v105 <= v90)
      v106 = v90;
    else
      v106 = v105;
    if (v106)
      *(_QWORD *)(v225 + 496) = malloc_type_realloc(*(void **)(v225 + 496), v106, 0xBE03D1B5uLL);
    *(_QWORD *)(v225 + 504) = v106;
    *(_QWORD *)(v225 + 488) = v90;
    v92 = *(_QWORD *)(v225 + 512);
    v93 = *(_QWORD *)(v225 + 528);
    if (v93 >= v86)
    {
LABEL_52:
      v94 = v86 - v92;
      if (v86 <= v92)
        goto LABEL_53;
      goto LABEL_88;
    }
LABEL_80:
    v107 = 2 * v93;
    v141 = v93 == 0;
    v108 = 64;
    if (!v141)
      v108 = v107;
    if (v108 <= v86)
      v109 = (int)v82 + 1;
    else
      v109 = v108;
    if (v109)
      *(_QWORD *)(v225 + 520) = malloc_type_realloc(*(void **)(v225 + 520), 4 * v109, 0xDA342B4EuLL);
    *(_QWORD *)(v225 + 528) = v109;
    v94 = v86 - v92;
    if (v86 <= v92)
    {
LABEL_53:
      *(_QWORD *)(v225 + 512) = v86;
      v95 = *(_QWORD *)(v225 + 552);
      if (v95 >= v86)
        goto LABEL_54;
      goto LABEL_89;
    }
LABEL_88:
    bzero((void *)(*(_QWORD *)(v225 + 520) + 4 * *(_QWORD *)(v225 + 512)), 4 * v94);
    *(_QWORD *)(v225 + 512) = v86;
    v95 = *(_QWORD *)(v225 + 552);
    if (v95 >= v86)
    {
LABEL_54:
      *(_QWORD *)(v225 + 536) = v86;
      v96 = *(_QWORD *)(v225 + 560);
      v97 = *(_QWORD *)(v225 + 576);
      if (v96 < v97)
      {
LABEL_17:
        *(_QWORD *)(v225 + 560) = v96 + 1;
        v37 = (timeval *)(*(_QWORD *)(v225 + 568) + 48 * v96);
        v38 = v232;
        v39 = v234;
        v37[1] = (timeval)v233;
        v37[2] = (timeval)v39;
        *v37 = v38;
        v40 = *(_QWORD *)(v225 + 448) + 12 * (int)v82;
        v41 = v230;
        *(_DWORD *)(v40 + 8) = v231;
        *(_QWORD *)v40 = v41;
        v42 = *(_QWORD *)(v225 + 472) + 36 * (_DWORD)v82;
        v43 = v238[0];
        v44 = v238[1];
        *(_DWORD *)(v42 + 32) = v239;
        *(_OWORD *)v42 = v43;
        *(_OWORD *)(v42 + 16) = v44;
        memcpy((void *)(*(_QWORD *)(v225 + 496) + (int)v84 * (int)v82), (const void *)(v222 + (int)v84 * (uint64_t)(v79 >> 15)), v84);
        ++*(_DWORD *)(*(_QWORD *)(v225 + 520) + 4 * (int)v82);
        *(_QWORD *)(*(_QWORD *)(v225 + 544) + 8 * (int)v82) = v85;
        v36 = v229;
        v34 = v78;
        a3 = v223;
        goto LABEL_18;
      }
LABEL_97:
      v113 = 2 * v97;
      v141 = v97 == 0;
      v114 = 5;
      if (!v141)
        v114 = v113;
      if (v114 <= v96)
        v115 = v96 + 1;
      else
        v115 = v114;
      if (v115)
      {
        *(_QWORD *)(v225 + 568) = malloc_type_realloc(*(void **)(v225 + 568), 48 * v115, 0xB205ADDCuLL);
        v96 = *(_QWORD *)(v225 + 560);
      }
      *(_QWORD *)(v225 + 576) = v115;
      goto LABEL_17;
    }
LABEL_89:
    v110 = 2 * v95;
    v141 = v95 == 0;
    v111 = 32;
    if (!v141)
      v111 = v110;
    if (v111 <= v86)
      v112 = (int)v82 + 1;
    else
      v112 = v111;
    if (v112)
      *(_QWORD *)(v225 + 544) = malloc_type_realloc(*(void **)(v225 + 544), 8 * v112, 0x3185B363uLL);
    *(_QWORD *)(v225 + 552) = v112;
    *(_QWORD *)(v225 + 536) = v86;
    v96 = *(_QWORD *)(v225 + 560);
    v97 = *(_QWORD *)(v225 + 576);
    if (v96 < v97)
      goto LABEL_17;
    goto LABEL_97;
  }
LABEL_104:
  if (v226)
  {
    v116 = *(_QWORD *)(v5 + 464);
    if (v116 >= 1)
    {
      v117 = (float)(1.0 / *(float *)(v5 + 292)) * (float)(1.0 / *(float *)(v5 + 292));
      v118 = *(float32x4_t **)(v5 + 472);
      if ((unint64_t)v116 < 8)
      {
        v119 = 0;
LABEL_111:
        v123 = v116 - v119;
        v124 = &v118->f32[v119];
        do
        {
          *v124 = v117 * *v124;
          ++v124;
          --v123;
        }
        while (v123);
        goto LABEL_113;
      }
      v119 = v116 & 0x7FFFFFFFFFFFFFF8;
      v120 = v118 + 1;
      v121 = v116 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v122 = vmulq_n_f32(*v120, v117);
        v120[-1] = vmulq_n_f32(v120[-1], v117);
        *v120 = v122;
        v120 += 2;
        v121 -= 8;
      }
      while (v121);
      if (v116 != v119)
        goto LABEL_111;
    }
  }
LABEL_113:
  v232.tv_sec = 0;
  *(_QWORD *)&v232.tv_usec = 0;
  if (gettimeofday(&v232, 0) || (double)(v232.tv_usec + 1000000 * v232.tv_sec) / 1000000.0 <= 1514764800.0)
    goto LABEL_267;
  v125 = *(_QWORD *)(v5 + 440);
  if (v125 >= 5001)
  {
    v126 = *(int *)(v5 + 16);
    v127 = (unsigned __int8 *)malloc_type_calloc(v125, 1uLL, 0xD940C57AuLL);
    v128 = malloc_type_malloc(4 * *(_QWORD *)(v5 + 440), 0x7D88154BuLL);
    v129 = v128;
    v130 = *(_QWORD *)(v5 + 392);
    if (v130 <= 0)
    {
      v134 = *(_QWORD *)(v5 + 440);
      if (v134 >= 1)
      {
LABEL_131:
        v137 = 0;
        v138 = v127;
        v139 = (int *)v128;
        do
        {
          v140 = *v138++;
          v141 = v140 == 0;
          if (v140)
            v142 = v137;
          else
            v142 = -1;
          if (!v141)
            ++v137;
          *v139++ = v142;
          --v134;
        }
        while (v134);
        v134 = *(_QWORD *)(v5 + 440);
        if (v134 < 1)
        {
          v144 = 0;
          v151 = *(_QWORD *)(v5 + 456);
          if (v151 >= 0)
          {
LABEL_149:
            v152 = v144 - v134;
            if (v144 <= v134)
              goto LABEL_150;
            goto LABEL_167;
          }
LABEL_159:
          v158 = 2 * v151;
          v141 = v151 == 0;
          v159 = 21;
          if (!v141)
            v159 = v158;
          if (v159 <= v144)
            v160 = v144;
          else
            v160 = v159;
          if (v160)
            *(_QWORD *)(v5 + 448) = malloc_type_realloc(*(void **)(v5 + 448), 12 * v160, 0x87E043F8uLL);
          *(_QWORD *)(v5 + 456) = v160;
          v152 = v144 - v134;
          if (v144 <= v134)
          {
LABEL_150:
            *(_QWORD *)(v5 + 440) = v144;
            v153 = *(_QWORD *)(v5 + 464);
            if (v153 >= 1)
              goto LABEL_151;
            goto LABEL_168;
          }
LABEL_167:
          bzero((void *)(*(_QWORD *)(v5 + 448) + 12 * *(_QWORD *)(v5 + 440)), 12 * v152);
          *(_QWORD *)(v5 + 440) = v144;
          v153 = *(_QWORD *)(v5 + 464);
          if (v153 >= 1)
          {
LABEL_151:
            v154 = 0;
            v155 = 0;
            v156 = *(_QWORD *)(v5 + 472);
            do
            {
              if (v127[v155 / 9])
                v157 = v156 == 0;
              else
                v157 = 1;
              if (!v157)
                *(_DWORD *)(v156 + 4 * v154++) = *(_DWORD *)(v156 + 4 * v155);
              ++v155;
            }
            while (v153 != v155);
LABEL_169:
            v161 = *(_QWORD *)(v5 + 480);
            if (v154 > v161)
            {
              v168 = 2 * v161;
              v141 = v161 == 0;
              v169 = 64;
              if (!v141)
                v169 = v168;
              if (v169 <= v154)
                v170 = v154;
              else
                v170 = v169;
              if (v170)
                *(_QWORD *)(v5 + 472) = malloc_type_realloc(*(void **)(v5 + 472), 4 * v170, 0x6554386DuLL);
              *(_QWORD *)(v5 + 480) = v170;
              v162 = v154 - v153;
              if (v154 <= v153)
              {
LABEL_171:
                *(_QWORD *)(v5 + 464) = v154;
                v163 = *(_QWORD *)(v5 + 488);
                if (v163 >= 1)
                  goto LABEL_172;
                goto LABEL_188;
              }
            }
            else
            {
              v162 = v154 - v153;
              if (v154 <= v153)
                goto LABEL_171;
            }
            bzero((void *)(*(_QWORD *)(v5 + 472) + 4 * *(_QWORD *)(v5 + 464)), 4 * v162);
            *(_QWORD *)(v5 + 464) = v154;
            v163 = *(_QWORD *)(v5 + 488);
            if (v163 >= 1)
            {
LABEL_172:
              v164 = 0;
              for (i = 0; i < v163; ++i)
              {
                v166 = *(_QWORD *)(v5 + 496);
                if (v127[i / v126])
                  v167 = v166 == 0;
                else
                  v167 = 1;
                if (!v167)
                {
                  *(_BYTE *)(v166 + v164++) = *(_BYTE *)(v166 + i);
                  v163 = *(_QWORD *)(v5 + 488);
                }
              }
LABEL_189:
              v171 = *(_QWORD *)(v5 + 504);
              if (v164 > v171)
              {
                v180 = 2 * v171;
                v141 = v171 == 0;
                v181 = 256;
                if (!v141)
                  v181 = v180;
                if (v181 <= v164)
                  v182 = v164;
                else
                  v182 = v181;
                if (v182)
                  *(_QWORD *)(v5 + 496) = malloc_type_realloc(*(void **)(v5 + 496), v182, 0x5AC28B1EuLL);
                *(_QWORD *)(v5 + 504) = v182;
                v172 = v164 - v163;
                if (v164 <= v163)
                {
LABEL_191:
                  *(_QWORD *)(v5 + 488) = v164;
                  v173 = *(_QWORD *)(v5 + 512);
                  if (v173 >= 1)
                  {
LABEL_192:
                    v174 = *(_QWORD *)(v5 + 520);
                    if (!v174)
                    {
                      v175 = 0;
                      v183 = *(_QWORD *)(v5 + 528);
                      if (v183 >= 0)
                      {
LABEL_208:
                        v184 = v175 - v173;
                        if (v175 <= v173)
                          goto LABEL_209;
                        goto LABEL_224;
                      }
LABEL_216:
                      v192 = 2 * v183;
                      v141 = v183 == 0;
                      v193 = 64;
                      if (!v141)
                        v193 = v192;
                      if (v193 <= v175)
                        v194 = v175;
                      else
                        v194 = v193;
                      if (v194)
                        *(_QWORD *)(v5 + 520) = malloc_type_realloc(*(void **)(v5 + 520), 4 * v194, 0xB64F8733uLL);
                      *(_QWORD *)(v5 + 528) = v194;
                      v184 = v175 - v173;
                      if (v175 <= v173)
                      {
LABEL_209:
                        *(_QWORD *)(v5 + 512) = v175;
                        v185 = *(_QWORD *)(v5 + 536);
                        if (v185 >= 1)
                        {
LABEL_210:
                          v186 = *(_QWORD *)(v5 + 544);
                          if (!v186)
                          {
                            v187 = 0;
                            v195 = *(_QWORD *)(v5 + 552);
                            if (v195 >= 0)
                            {
LABEL_227:
                              v196 = v187 - v185;
                              if (v187 <= v185)
                                goto LABEL_228;
                              goto LABEL_245;
                            }
LABEL_237:
                            v207 = 2 * v195;
                            v141 = v195 == 0;
                            v208 = 32;
                            if (!v141)
                              v208 = v207;
                            if (v208 <= v187)
                              v209 = v187;
                            else
                              v209 = v208;
                            if (v209)
                              *(_QWORD *)(v5 + 544) = malloc_type_realloc(*(void **)(v5 + 544), 8 * v209, 0x6C110647uLL);
                            *(_QWORD *)(v5 + 552) = v209;
                            v196 = v187 - v185;
                            if (v187 <= v185)
                            {
LABEL_228:
                              *(_QWORD *)(v5 + 536) = v187;
                              v197 = *(_QWORD *)(v5 + 560);
                              if (v197 >= 1)
                                goto LABEL_229;
                              goto LABEL_246;
                            }
LABEL_245:
                            bzero((void *)(*(_QWORD *)(v5 + 544) + 8 * *(_QWORD *)(v5 + 536)), 8 * v196);
                            *(_QWORD *)(v5 + 536) = v187;
                            v197 = *(_QWORD *)(v5 + 560);
                            if (v197 >= 1)
                            {
LABEL_229:
                              v198 = 0;
                              v199 = 0;
                              for (j = 0; j < v197; ++j)
                              {
                                v201 = *(_QWORD *)(v5 + 568);
                                if (v127[j])
                                  v202 = v201 == 0;
                                else
                                  v202 = 1;
                                if (!v202)
                                {
                                  v203 = (__int128 *)(v201 + v198);
                                  v204 = (_OWORD *)(v201 + 48 * v199);
                                  v205 = *v203;
                                  v206 = v203[2];
                                  v204[1] = v203[1];
                                  v204[2] = v206;
                                  *v204 = v205;
                                  ++v199;
                                  v197 = *(_QWORD *)(v5 + 560);
                                }
                                v198 += 48;
                              }
LABEL_247:
                              v210 = *(_QWORD *)(v5 + 576);
                              if (v199 > v210)
                              {
                                v213 = 2 * v210;
                                v141 = v210 == 0;
                                v214 = 5;
                                if (!v141)
                                  v214 = v213;
                                if (v214 <= v199)
                                  v215 = v199;
                                else
                                  v215 = v214;
                                if (v215)
                                  *(_QWORD *)(v5 + 568) = malloc_type_realloc(*(void **)(v5 + 568), 48 * v215, 0x5BC1632uLL);
                                *(_QWORD *)(v5 + 576) = v215;
                                v211 = v199 - v197;
                                if (v199 <= v197)
                                {
LABEL_249:
                                  *(_QWORD *)(v5 + 560) = v199;
                                  v212 = *(_QWORD *)(v5 + 392);
                                  if (v212 < 1)
                                    goto LABEL_264;
                                  goto LABEL_260;
                                }
                              }
                              else
                              {
                                v211 = v199 - v197;
                                if (v199 <= v197)
                                  goto LABEL_249;
                              }
                              bzero((void *)(*(_QWORD *)(v5 + 568) + 48 * *(_QWORD *)(v5 + 560)), 48 * v211);
                              *(_QWORD *)(v5 + 560) = v199;
                              v212 = *(_QWORD *)(v5 + 392);
                              if (v212 < 1)
                              {
LABEL_264:
                                free(v127);
                                free(v129);
                                goto LABEL_265;
                              }
LABEL_260:
                              v216 = *(int **)(v5 + 400);
                              do
                              {
                                v217 = *v216;
                                if ((_DWORD)v217 != -1)
                                  LODWORD(v217) = *((_DWORD *)v129 + v217);
                                *v216++ = v217;
                                --v212;
                              }
                              while (v212);
                              goto LABEL_264;
                            }
LABEL_246:
                            v199 = 0;
                            goto LABEL_247;
                          }
                          v187 = 0;
                          v188 = v127;
                          v189 = *(_QWORD **)(v5 + 544);
                          v190 = v185;
                          do
                          {
                            if (*v188++)
                              *(_QWORD *)(v186 + 8 * v187++) = *v189;
                            ++v189;
                            --v190;
                          }
                          while (v190);
LABEL_226:
                          v195 = *(_QWORD *)(v5 + 552);
                          if (v187 <= v195)
                            goto LABEL_227;
                          goto LABEL_237;
                        }
LABEL_225:
                        v187 = 0;
                        goto LABEL_226;
                      }
LABEL_224:
                      bzero((void *)(*(_QWORD *)(v5 + 520) + 4 * *(_QWORD *)(v5 + 512)), 4 * v184);
                      *(_QWORD *)(v5 + 512) = v175;
                      v185 = *(_QWORD *)(v5 + 536);
                      if (v185 >= 1)
                        goto LABEL_210;
                      goto LABEL_225;
                    }
                    v175 = 0;
                    v176 = v127;
                    v177 = *(_DWORD **)(v5 + 520);
                    v178 = v173;
                    do
                    {
                      if (*v176++)
                        *(_DWORD *)(v174 + 4 * v175++) = *v177;
                      ++v177;
                      --v178;
                    }
                    while (v178);
LABEL_207:
                    v183 = *(_QWORD *)(v5 + 528);
                    if (v175 <= v183)
                      goto LABEL_208;
                    goto LABEL_216;
                  }
LABEL_206:
                  v175 = 0;
                  goto LABEL_207;
                }
              }
              else
              {
                v172 = v164 - v163;
                if (v164 <= v163)
                  goto LABEL_191;
              }
              bzero((void *)(*(_QWORD *)(v5 + 488) + *(_QWORD *)(v5 + 496)), v172);
              *(_QWORD *)(v5 + 488) = v164;
              v173 = *(_QWORD *)(v5 + 512);
              if (v173 >= 1)
                goto LABEL_192;
              goto LABEL_206;
            }
LABEL_188:
            v164 = 0;
            goto LABEL_189;
          }
LABEL_168:
          v154 = 0;
          goto LABEL_169;
        }
        v143 = 0;
        v144 = 0;
        for (k = 0; k < v134; ++k)
        {
          v146 = *(_QWORD *)(v5 + 448);
          if (v127[k])
            v147 = v146 == 0;
          else
            v147 = 1;
          if (!v147)
          {
            v148 = (uint64_t *)(v146 + v143);
            v149 = v146 + 12 * v144;
            v150 = *v148;
            *(_DWORD *)(v149 + 8) = *((_DWORD *)v148 + 2);
            *(_QWORD *)v149 = v150;
            ++v144;
            v134 = *(_QWORD *)(v5 + 440);
          }
          v143 += 12;
        }
LABEL_148:
        v151 = *(_QWORD *)(v5 + 456);
        if (v144 <= v151)
          goto LABEL_149;
        goto LABEL_159;
      }
    }
    else
    {
      v131 = 0;
      v132 = 0;
      do
      {
        v133 = *(int *)(*(_QWORD *)(v5 + 400) + 4 * v131);
        if ((_DWORD)v133 != -1)
        {
          v127[v133] = 1;
          ++v132;
          v130 = *(_QWORD *)(v5 + 392);
        }
        ++v131;
      }
      while (v130 > v131);
      v134 = *(_QWORD *)(v5 + 440);
      if (v134 >= 1 && v132 >= 5001)
      {
        v136 = 0;
        do
        {
          if (v127[v136])
          {
            v127[v136] = 0;
            --v132;
            v134 = *(_QWORD *)(v5 + 440);
          }
          ++v136;
        }
        while (v134 > v136 && v132 > 5000);
      }
      if (v134 >= 1)
        goto LABEL_131;
    }
    v144 = 0;
    goto LABEL_148;
  }
LABEL_265:
  v232.tv_sec = 0;
  *(_QWORD *)&v232.tv_usec = 0;
  result = gettimeofday(&v232, 0);
  if ((_DWORD)result || (double)(v232.tv_usec + 1000000 * v232.tv_sec) / 1000000.0 <= 1514764800.0)
    goto LABEL_267;
  return result;
}

void triangulate_track(uint64_t a1, uint64_t *a2, uint64_t a3, float *a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v14;
  float32x4_t *v15;
  float64_t *v16;
  float64x2_t v17;
  float32x4_t v18;
  float32x4_t v19;
  double v20;
  double v21;
  double v22;
  float v23;
  float v24;
  float64_t *v25;
  uint64_t v26;
  float32x4_t *v27;
  unint64_t v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;

  v14 = *a2;
  v15 = (float32x4_t *)malloc_type_malloc(48 * (int)*a2, 0x1000040EED21634uLL);
  v16 = (float64_t *)malloc_type_malloc(8 * (int)v14, 0x100004000313F17uLL);
  v25 = v16;
  if ((int)v14 >= 1)
  {
    v26 = 0;
    v27 = v15 + 2;
    do
    {
      v28 = *(unsigned int *)(a2[1] + 4 * v26);
      v29 = *(_QWORD *)(a1 + 304) + 880 * (v28 & 0x7FFF);
      v19 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v29 + 32)), *(float64x2_t *)(v29 + 48));
      v27[-2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v29), *(float64x2_t *)(v29 + 16));
      v27[-1] = v19;
      v17 = *(float64x2_t *)(v29 + 80);
      v18 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v29 + 64)), v17);
      *v27 = v18;
      v27 += 3;
      v16[v26++] = *(float64_t *)(*(_QWORD *)(v29 + 368) + ((v28 >> 12) & 0xFFFF8));
    }
    while (v14 != v26);
  }
  if (a5)
    goto LABEL_8;
  v30 = *a4 - *(float *)(a3 + 36);
  v31 = a4[1] - *(float *)(a3 + 40);
  *(float *)&v21 = a4[2] - *(float *)(a3 + 44);
  *(float *)v17.f64 = (float)((float)(*(float *)(a3 + 12) * v31) + (float)(*(float *)a3 * v30))
                    + (float)(*(float *)(a3 + 24) * *(float *)&v21);
  v20 = *(double *)(a3 + 4);
  v22 = *(double *)(a3 + 16);
  *(float32x2_t *)v19.f32 = vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)&v22, v31), *(float32x2_t *)&v20, v30), *(float32x2_t *)(a3 + 28), *(float *)&v21);
  *(float32x2_t *)v18.f32 = vdiv_f32(*(float32x2_t *)v19.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v17.f64[0], 0));
  *(_QWORD *)(a4 + 1) = v18.i64[0];
  v18.i32[0] = 1.0;
  *a4 = 1.0 / *(float *)v17.f64;
  if (*a2 != 1)
    goto LABEL_8;
  v17.f64[0] = *v16;
  *(float64_t *)(a4 + 1) = *v16;
  if (a6)
  {
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    v32 = (float)(1.0 / a7) * (float)(1.0 / a7);
    *(float *)(a6 + 16) = v32;
    *(float *)(a6 + 32) = v32;
    free(v15);
    free(v25);
  }
  else
  {
LABEL_8:
    *(float *)v17.f64 = 1.0 / a7;
    g_triangulate_inv_depthf((uint64_t)v15, (uint64_t)v16, 0, v14, a3, a4, (uint64_t *)a4, a5, v17.f64[0], *(double *)v18.i64, *(double *)v19.i64, v20, v21, v22, v23, v24, a6);
    free(v15);
    free(v25);
  }
}

uint64_t vl_context_history_add_frame(uint64_t a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 88);
  if (v4 >= v5)
  {
    v6 = 2 * v5;
    if (v6 <= v4)
      v7 = v4 + 1;
    else
      v7 = v6;
    if (v7)
    {
      *(_QWORD *)(a1 + 80) = malloc_type_realloc(*(void **)(a1 + 80), 864 * v7, 0x81EFFEF7uLL);
      v4 = *(_QWORD *)(a1 + 72);
    }
    *(_QWORD *)(a1 + 88) = v7;
  }
  *(_QWORD *)(a1 + 72) = v4 + 1;
  memcpy((void *)(*(_QWORD *)(a1 + 80) + 864 * v4), a2, 0x360uLL);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 72) - 1;
  v10 = *(_DWORD *)(a1 + 64);
  v11 = *(_DWORD *)(a1 + 68);
  *(_DWORD *)(v8 + 864 * v9) = v10;
  *(_DWORD *)(a1 + 64) = v10 + 1;
  if (v11 + 10 <= v10 && *(_DWORD *)(v8 + 864 * v9 + 8) == 1)
  {
    *(_DWORD *)(a1 + 68) = v10;
    *(_DWORD *)(v8 + 864 * v9 + 4) = 1;
  }
  return pthread_mutex_unlock((pthread_mutex_t *)a1);
}

uint64_t vl_context_history_trim(uint64_t a1, int a2)
{
  void **v4;
  uint64_t v5;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  if (*(_QWORD *)(a1 + 72) > a2)
  {
    do
    {
      v4 = *(void ***)(a1 + 80);
      free(v4[79]);
      free(v4[99]);
      free(v4[102]);
      free(v4[105]);
      v5 = *(_QWORD *)(a1 + 72) - 1;
      if (*(_QWORD *)(a1 + 72) != 1)
      {
        memmove(*(void **)(a1 + 80), (const void *)(*(_QWORD *)(a1 + 80) + 864), 864 * v5);
        v5 = *(_QWORD *)(a1 + 72) - 1;
      }
      *(_QWORD *)(a1 + 72) = v5;
    }
    while (v5 > a2);
  }
  return pthread_mutex_unlock((pthread_mutex_t *)a1);
}

uint64_t vl_context_init(uint64_t a1, _BYTE *a2)
{
  char __dst[512];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  memcpy(__dst, "com.apple.3dv.vl", sizeof(__dst));
  if (a2 && *a2)
    __strcpy_chk();
  *(_OWORD *)(a1 + 9888) = 0u;
  *(_OWORD *)(a1 + 9872) = 0u;
  *(_OWORD *)(a1 + 9904) = 0u;
  *(_OWORD *)(a1 + 9920) = 0u;
  *(_QWORD *)(a1 + 9936) = 0;
  *(_OWORD *)(a1 + 9856) = 0u;
  *(_OWORD *)(a1 + 9840) = 0u;
  *(_OWORD *)(a1 + 9824) = 0u;
  *(_OWORD *)(a1 + 9808) = 0u;
  *(_OWORD *)(a1 + 9792) = 0u;
  *(_OWORD *)(a1 + 9776) = 0u;
  *(_OWORD *)(a1 + 9760) = 0u;
  *(_OWORD *)(a1 + 9744) = 0u;
  *(_OWORD *)(a1 + 9728) = 0u;
  strcpy((char *)(a1 + 9876), "VL total                ");
  *(_BYTE *)(a1 + 9901) = 0;
  *(_WORD *)(a1 + 9902) = 0;
  *(_DWORD *)(a1 + 9904) = 0;
  *(_OWORD *)(a1 + 9908) = xmmword_210BCBB60;
  *(_OWORD *)(a1 + 9924) = unk_210BCBB70;
  *(_QWORD *)(a1 + 936) = 0;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 924) = unk_210BCBBB1;
  *(_OWORD *)(a1 + 908) = xmmword_210BCBBA1;
  *(_BYTE *)(a1 + 901) = unk_210BCBB9A;
  *(_WORD *)(a1 + 902) = unk_210BCBB9B;
  *(_DWORD *)(a1 + 904) = unk_210BCBB9D;
  strcpy((char *)(a1 + 876), "Kpts total              ");
  *(_QWORD *)(a1 + 1152) = 0;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 1140) = unk_210BCBBF2;
  *(_OWORD *)(a1 + 1124) = xmmword_210BCBBE2;
  *(_BYTE *)(a1 + 1117) = unk_210BCBBDB;
  *(_WORD *)(a1 + 1118) = unk_210BCBBDC;
  *(_DWORD *)(a1 + 1120) = unk_210BCBBDE;
  strcpy((char *)(a1 + 1092), "Kpts pyramid            ");
  *(_QWORD *)(a1 + 1368) = 0;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1356) = unk_210BCBC33;
  *(_OWORD *)(a1 + 1340) = xmmword_210BCBC23;
  *(_BYTE *)(a1 + 1333) = 0;
  *(_WORD *)(a1 + 1334) = 0;
  *(_DWORD *)(a1 + 1336) = 0;
  strcpy((char *)(a1 + 1308), "Kpts det                ");
  *(_QWORD *)(a1 + 1584) = 0;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1572) = unk_210BCBC74;
  *(_OWORD *)(a1 + 1556) = xmmword_210BCBC64;
  *(_BYTE *)(a1 + 1549) = unk_210BCBC5D;
  *(_WORD *)(a1 + 1550) = unk_210BCBC5E;
  *(_DWORD *)(a1 + 1552) = unk_210BCBC60;
  strcpy((char *)(a1 + 1524), "Kpts model              ");
  *(_QWORD *)(a1 + 1800) = 0;
  *(_OWORD *)(a1 + 1784) = 0u;
  *(_OWORD *)(a1 + 1768) = 0u;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_OWORD *)(a1 + 1704) = 0u;
  *(_OWORD *)(a1 + 1720) = 0u;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(_OWORD *)(a1 + 1688) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_OWORD *)(a1 + 1592) = 0u;
  *(_OWORD *)(a1 + 1788) = unk_210BCBCB5;
  *(_OWORD *)(a1 + 1772) = xmmword_210BCBCA5;
  *(_BYTE *)(a1 + 1765) = unk_210BCBC9E;
  *(_WORD *)(a1 + 1766) = unk_210BCBC9F;
  *(_DWORD *)(a1 + 1768) = unk_210BCBCA1;
  strcpy((char *)(a1 + 1740), "Kpts desc               ");
  *(_QWORD *)(a1 + 2016) = 0;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(_OWORD *)(a1 + 1984) = 0u;
  *(_OWORD *)(a1 + 1968) = 0u;
  *(_OWORD *)(a1 + 1952) = 0u;
  *(_OWORD *)(a1 + 1936) = 0u;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_OWORD *)(a1 + 1904) = 0u;
  *(_OWORD *)(a1 + 1888) = 0u;
  *(_OWORD *)(a1 + 1872) = 0u;
  *(_OWORD *)(a1 + 1856) = 0u;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(_OWORD *)(a1 + 2004) = unk_210BCBCF6;
  *(_OWORD *)(a1 + 1988) = xmmword_210BCBCE6;
  *(_BYTE *)(a1 + 1981) = unk_210BCBCDF;
  *(_WORD *)(a1 + 1982) = unk_210BCBCE0;
  *(_DWORD *)(a1 + 1984) = unk_210BCBCE2;
  strcpy((char *)(a1 + 1956), "Kpts PCA                ");
  *(_QWORD *)(a1 + 4416) = 0;
  *(_OWORD *)(a1 + 4400) = 0u;
  *(_OWORD *)(a1 + 4384) = 0u;
  *(_OWORD *)(a1 + 4368) = 0u;
  *(_OWORD *)(a1 + 4352) = 0u;
  *(_OWORD *)(a1 + 4336) = 0u;
  *(_OWORD *)(a1 + 4320) = 0u;
  *(_OWORD *)(a1 + 4304) = 0u;
  *(_OWORD *)(a1 + 4288) = 0u;
  *(_OWORD *)(a1 + 4272) = 0u;
  *(_OWORD *)(a1 + 4256) = 0u;
  *(_OWORD *)(a1 + 4240) = 0u;
  *(_OWORD *)(a1 + 4224) = 0u;
  *(_OWORD *)(a1 + 4208) = 0u;
  *(_OWORD *)(a1 + 4404) = unk_210BCBD37;
  *(_OWORD *)(a1 + 4388) = xmmword_210BCBD27;
  *(_BYTE *)(a1 + 4381) = unk_210BCBD20;
  *(_WORD *)(a1 + 4382) = unk_210BCBD21;
  *(_DWORD *)(a1 + 4384) = unk_210BCBD23;
  strcpy((char *)(a1 + 4356), "Matching total          ");
  *(_QWORD *)(a1 + 4632) = 0;
  *(_OWORD *)(a1 + 4424) = 0u;
  *(_OWORD *)(a1 + 4600) = 0u;
  *(_OWORD *)(a1 + 4616) = 0u;
  *(_OWORD *)(a1 + 4568) = 0u;
  *(_OWORD *)(a1 + 4584) = 0u;
  *(_OWORD *)(a1 + 4536) = 0u;
  *(_OWORD *)(a1 + 4552) = 0u;
  *(_OWORD *)(a1 + 4504) = 0u;
  *(_OWORD *)(a1 + 4520) = 0u;
  *(_OWORD *)(a1 + 4472) = 0u;
  *(_OWORD *)(a1 + 4488) = 0u;
  *(_OWORD *)(a1 + 4440) = 0u;
  *(_OWORD *)(a1 + 4456) = 0u;
  *(_OWORD *)(a1 + 4620) = unk_210BCBD78;
  *(_OWORD *)(a1 + 4604) = xmmword_210BCBD68;
  *(_BYTE *)(a1 + 4597) = 0;
  *(_WORD *)(a1 + 4598) = 0;
  *(_DWORD *)(a1 + 4600) = 0;
  strcpy((char *)(a1 + 4572), "Matching sss            ");
  *(_QWORD *)(a1 + 4848) = 0;
  *(_OWORD *)(a1 + 4832) = 0u;
  *(_OWORD *)(a1 + 4816) = 0u;
  *(_OWORD *)(a1 + 4800) = 0u;
  *(_OWORD *)(a1 + 4784) = 0u;
  *(_OWORD *)(a1 + 4768) = 0u;
  *(_OWORD *)(a1 + 4752) = 0u;
  *(_OWORD *)(a1 + 4736) = 0u;
  *(_OWORD *)(a1 + 4720) = 0u;
  *(_OWORD *)(a1 + 4704) = 0u;
  *(_OWORD *)(a1 + 4688) = 0u;
  *(_OWORD *)(a1 + 4672) = 0u;
  *(_OWORD *)(a1 + 4656) = 0u;
  *(_OWORD *)(a1 + 4640) = 0u;
  *(_QWORD *)(a1 + 4848) = 0;
  *(_OWORD *)(a1 + 4832) = 0u;
  *(_OWORD *)(a1 + 4816) = 0u;
  *(_OWORD *)(a1 + 4800) = 0u;
  *(_OWORD *)(a1 + 4784) = 0u;
  *(_OWORD *)(a1 + 4768) = 0u;
  *(_OWORD *)(a1 + 4752) = 0u;
  *(_OWORD *)(a1 + 4736) = 0u;
  *(_OWORD *)(a1 + 4720) = 0u;
  *(_OWORD *)(a1 + 4704) = 0u;
  *(_OWORD *)(a1 + 4688) = 0u;
  *(_OWORD *)(a1 + 4672) = 0u;
  *(_OWORD *)(a1 + 4656) = 0u;
  *(_OWORD *)(a1 + 4640) = 0u;
  *(_OWORD *)(a1 + 4836) = unk_210BCBDB9;
  *(_OWORD *)(a1 + 4820) = xmmword_210BCBDA9;
  *(_BYTE *)(a1 + 4813) = unk_210BCBDA2;
  *(_WORD *)(a1 + 4814) = unk_210BCBDA3;
  *(_DWORD *)(a1 + 4816) = unk_210BCBDA5;
  strcpy((char *)(a1 + 4788), "Matching filter         ");
  *(_QWORD *)(a1 + 5064) = 0;
  *(_OWORD *)(a1 + 5032) = 0u;
  *(_OWORD *)(a1 + 5048) = 0u;
  *(_OWORD *)(a1 + 5000) = 0u;
  *(_OWORD *)(a1 + 5016) = 0u;
  *(_OWORD *)(a1 + 4968) = 0u;
  *(_OWORD *)(a1 + 4984) = 0u;
  *(_OWORD *)(a1 + 4936) = 0u;
  *(_OWORD *)(a1 + 4952) = 0u;
  *(_OWORD *)(a1 + 4904) = 0u;
  *(_OWORD *)(a1 + 4920) = 0u;
  *(_OWORD *)(a1 + 4872) = 0u;
  *(_OWORD *)(a1 + 4888) = 0u;
  *(_OWORD *)(a1 + 4856) = 0u;
  *(_OWORD *)(a1 + 5052) = unk_210BCBDFA;
  *(_OWORD *)(a1 + 5036) = xmmword_210BCBDEA;
  *(_BYTE *)(a1 + 5029) = unk_210BCBDE3;
  *(_WORD *)(a1 + 5030) = unk_210BCBDE4;
  *(_DWORD *)(a1 + 5032) = unk_210BCBDE6;
  strcpy((char *)(a1 + 5004), "Slam tracker            ");
  *(_QWORD *)(a1 + 9344) = 0;
  *(_OWORD *)(a1 + 9328) = 0u;
  *(_OWORD *)(a1 + 9312) = 0u;
  *(_OWORD *)(a1 + 9296) = 0u;
  *(_OWORD *)(a1 + 9280) = 0u;
  *(_OWORD *)(a1 + 9264) = 0u;
  *(_OWORD *)(a1 + 9248) = 0u;
  *(_OWORD *)(a1 + 9232) = 0u;
  *(_OWORD *)(a1 + 9216) = 0u;
  *(_OWORD *)(a1 + 9200) = 0u;
  *(_OWORD *)(a1 + 9184) = 0u;
  *(_OWORD *)(a1 + 9168) = 0u;
  *(_OWORD *)(a1 + 9152) = 0u;
  *(_OWORD *)(a1 + 9136) = 0u;
  *(_OWORD *)(a1 + 9332) = unk_210BCBE3B;
  *(_OWORD *)(a1 + 9316) = xmmword_210BCBE2B;
  *(_BYTE *)(a1 + 9309) = 0;
  *(_WORD *)(a1 + 9310) = 0;
  *(_DWORD *)(a1 + 9312) = 0;
  strcpy((char *)(a1 + 9284), "Pose total              ");
  *(_QWORD *)(a1 + 7216) = 0;
  *(_OWORD *)(a1 + 7200) = 0u;
  *(_OWORD *)(a1 + 7184) = 0u;
  *(_OWORD *)(a1 + 7168) = 0u;
  *(_OWORD *)(a1 + 7152) = 0u;
  *(_OWORD *)(a1 + 7136) = 0u;
  *(_OWORD *)(a1 + 7120) = 0u;
  *(_OWORD *)(a1 + 7104) = 0u;
  *(_OWORD *)(a1 + 7088) = 0u;
  *(_OWORD *)(a1 + 7072) = 0u;
  *(_OWORD *)(a1 + 7056) = 0u;
  *(_OWORD *)(a1 + 7040) = 0u;
  *(_OWORD *)(a1 + 7024) = 0u;
  *(_OWORD *)(a1 + 7008) = 0u;
  *(_OWORD *)(a1 + 7204) = unk_210BCBE7C;
  *(_OWORD *)(a1 + 7188) = xmmword_210BCBE6C;
  *(_BYTE *)(a1 + 7181) = unk_210BCBE65;
  *(_WORD *)(a1 + 7182) = unk_210BCBE66;
  *(_DWORD *)(a1 + 7184) = unk_210BCBE68;
  strcpy((char *)(a1 + 7156), "Pose score              ");
  *(_QWORD *)(a1 + 5728) = 0;
  *(_OWORD *)(a1 + 5712) = 0u;
  *(_OWORD *)(a1 + 5696) = 0u;
  *(_OWORD *)(a1 + 5680) = 0u;
  *(_OWORD *)(a1 + 5664) = 0u;
  *(_OWORD *)(a1 + 5648) = 0u;
  *(_OWORD *)(a1 + 5632) = 0u;
  *(_OWORD *)(a1 + 5616) = 0u;
  *(_OWORD *)(a1 + 5600) = 0u;
  *(_OWORD *)(a1 + 5584) = 0u;
  *(_OWORD *)(a1 + 5568) = 0u;
  *(_OWORD *)(a1 + 5552) = 0u;
  *(_OWORD *)(a1 + 5536) = 0u;
  *(_OWORD *)(a1 + 5520) = 0u;
  *(_OWORD *)(a1 + 5716) = unk_210BCBEBD;
  *(_OWORD *)(a1 + 5700) = xmmword_210BCBEAD;
  *(_BYTE *)(a1 + 5693) = unk_210BCBEA6;
  *(_WORD *)(a1 + 5694) = unk_210BCBEA7;
  *(_DWORD *)(a1 + 5696) = unk_210BCBEA9;
  strcpy((char *)(a1 + 5668), "Pose ransac             ");
  *(_QWORD *)(a1 + 7776) = 0;
  *(_OWORD *)(a1 + 7760) = 0u;
  *(_OWORD *)(a1 + 7744) = 0u;
  *(_OWORD *)(a1 + 7728) = 0u;
  *(_OWORD *)(a1 + 7712) = 0u;
  *(_OWORD *)(a1 + 7696) = 0u;
  *(_OWORD *)(a1 + 7680) = 0u;
  *(_OWORD *)(a1 + 7664) = 0u;
  *(_OWORD *)(a1 + 7648) = 0u;
  *(_OWORD *)(a1 + 7632) = 0u;
  *(_OWORD *)(a1 + 7616) = 0u;
  *(_OWORD *)(a1 + 7600) = 0u;
  *(_OWORD *)(a1 + 7584) = 0u;
  *(_OWORD *)(a1 + 7568) = 0u;
  *(_OWORD *)(a1 + 7764) = unk_210BCBEFE;
  *(_OWORD *)(a1 + 7748) = xmmword_210BCBEEE;
  *(_BYTE *)(a1 + 7741) = unk_210BCBEE7;
  *(_WORD *)(a1 + 7742) = unk_210BCBEE8;
  *(_DWORD *)(a1 + 7744) = unk_210BCBEEA;
  strcpy((char *)(a1 + 7716), "Pose referee            ");
  *(_QWORD *)(a1 + 9128) = 0;
  *(_OWORD *)(a1 + 9112) = 0u;
  *(_OWORD *)(a1 + 9096) = 0u;
  *(_OWORD *)(a1 + 9080) = 0u;
  *(_OWORD *)(a1 + 9064) = 0u;
  *(_OWORD *)(a1 + 9048) = 0u;
  *(_OWORD *)(a1 + 9032) = 0u;
  *(_OWORD *)(a1 + 9016) = 0u;
  *(_OWORD *)(a1 + 9000) = 0u;
  *(_OWORD *)(a1 + 8984) = 0u;
  *(_OWORD *)(a1 + 8968) = 0u;
  *(_OWORD *)(a1 + 8952) = 0u;
  *(_OWORD *)(a1 + 8936) = 0u;
  *(_OWORD *)(a1 + 8920) = 0u;
  *(_OWORD *)(a1 + 9116) = unk_210BCBF3F;
  *(_OWORD *)(a1 + 9100) = xmmword_210BCBF2F;
  *(_BYTE *)(a1 + 9093) = unk_210BCBF28;
  *(_WORD *)(a1 + 9094) = unk_210BCBF29;
  *(_DWORD *)(a1 + 9096) = unk_210BCBF2B;
  strcpy((char *)(a1 + 9068), "Pose fuse               ");
  *(_QWORD *)(a1 + 3984) = 0;
  *(_OWORD *)(a1 + 3968) = 0u;
  *(_OWORD *)(a1 + 3952) = 0u;
  *(_OWORD *)(a1 + 3936) = 0u;
  *(_OWORD *)(a1 + 3920) = 0u;
  *(_OWORD *)(a1 + 3904) = 0u;
  *(_OWORD *)(a1 + 3888) = 0u;
  *(_OWORD *)(a1 + 3872) = 0u;
  *(_OWORD *)(a1 + 3856) = 0u;
  *(_OWORD *)(a1 + 3840) = 0u;
  *(_OWORD *)(a1 + 3824) = 0u;
  *(_OWORD *)(a1 + 3808) = 0u;
  *(_OWORD *)(a1 + 3792) = 0u;
  *(_OWORD *)(a1 + 3776) = 0u;
  *(_OWORD *)(a1 + 3972) = unk_210BCBF80;
  *(_OWORD *)(a1 + 3956) = xmmword_210BCBF70;
  *(_BYTE *)(a1 + 3949) = 0;
  *(_WORD *)(a1 + 3950) = 0;
  *(_DWORD *)(a1 + 3952) = 0;
  strcpy((char *)(a1 + 3924), "Track file loading      ");
  *(_QWORD *)(a1 + 4200) = 0;
  *(_OWORD *)(a1 + 4168) = 0u;
  *(_OWORD *)(a1 + 4184) = 0u;
  *(_OWORD *)(a1 + 4136) = 0u;
  *(_OWORD *)(a1 + 4152) = 0u;
  *(_OWORD *)(a1 + 4104) = 0u;
  *(_OWORD *)(a1 + 4120) = 0u;
  *(_OWORD *)(a1 + 4072) = 0u;
  *(_OWORD *)(a1 + 4088) = 0u;
  *(_OWORD *)(a1 + 4040) = 0u;
  *(_OWORD *)(a1 + 4056) = 0u;
  *(_OWORD *)(a1 + 4008) = 0u;
  *(_OWORD *)(a1 + 4024) = 0u;
  *(_OWORD *)(a1 + 3992) = 0u;
  *(_OWORD *)(a1 + 4188) = unk_210BCBFC1;
  *(_OWORD *)(a1 + 4172) = xmmword_210BCBFB1;
  *(_BYTE *)(a1 + 4165) = unk_210BCBFAA;
  *(_WORD *)(a1 + 4166) = unk_210BCBFAB;
  *(_DWORD *)(a1 + 4168) = unk_210BCBFAD;
  strcpy((char *)(a1 + 4140), "SSS build               ");
  *(_OWORD *)(a1 + 2056) = 0u;
  *(_OWORD *)(a1 + 2040) = 0u;
  *(_OWORD *)(a1 + 2024) = 0u;
  __strcpy_chk();
  *(_DWORD *)(a1 + 2612) = -1;
  *(_QWORD *)(a1 + 2072) = 0;
  *(_OWORD *)(a1 + 2080) = 0u;
  *(_OWORD *)(a1 + 2616) = 0u;
  *(_QWORD *)(a1 + 5072) = 0;
  *(_QWORD *)(a1 + 5224) = 0;
  *(_QWORD *)(a1 + 5216) = 0;
  __strcpy_chk();
  strcpy((char *)(a1 + 216), __dst);
  *(_OWORD *)(a1 + 9592) = 0u;
  *(_OWORD *)(a1 + 9608) = 0u;
  *(_OWORD *)(a1 + 9560) = 0u;
  *(_OWORD *)(a1 + 9576) = 0u;
  *(_OWORD *)(a1 + 9528) = 0u;
  *(_OWORD *)(a1 + 9544) = 0u;
  *(_DWORD *)(a1 + 9596) = 0x80000000;
  return pthread_mutex_init((pthread_mutex_t *)(a1 + 9528), 0);
}

uint64_t vl_context_free(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  lbl_feature2d_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;

  vl_dog_free_octave_list((_QWORD *)(a1 + 2024));
  free(*(void **)(a1 + 2056));
  v2 = *(_DWORD *)(a1 + 2608);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = a1 + 2072;
    do
    {
      v5 = *(lbl_feature2d_t **)(v4 + 8 * v3);
      if (v5)
      {
        lbl_feature2d_t::~lbl_feature2d_t(v5);
        MEMORY[0x212BCEB50]();
        *(_QWORD *)(v4 + 8 * v3) = 0;
        v2 = *(_DWORD *)(a1 + 2608);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  free(*(void **)(a1 + 5456));
  free(*(void **)(a1 + 5480));
  free(*(void **)(a1 + 5504));
  free(*(void **)(a1 + 5768));
  free(*(void **)(a1 + 5744));
  if (*(uint64_t *)(a1 + 9352) >= 1)
  {
    v6 = *(_QWORD *)(a1 + 9360);
    if (v6)
    {
      v7 = 0;
      v8 = 1;
LABEL_9:
      v9 = v6 + v7;
      free(*(void **)(v6 + v7 + 144));
      free(*(void **)(v9 + 120));
      free(*(void **)(v9 + 96));
      while (v8 < *(_QWORD *)(a1 + 9352))
      {
        v6 = *(_QWORD *)(a1 + 9360);
        v7 += 160;
        ++v8;
        if (v6)
          goto LABEL_9;
      }
    }
  }
  free(*(void **)(a1 + 9360));
  free(*(void **)(a1 + 9384));
  free(*(void **)(a1 + 9408));
  vl_pose_fuse_free(*(_QWORD *)(a1 + 9424));
  vl_hs_model_free();
  free(*(void **)(a1 + 5080));
  if (*(uint64_t *)(a1 + 5096) >= 1)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (void **)(*(_QWORD *)(a1 + 5104) + v10);
      free(v12[1]);
      free(v12[4]);
      free(v12[7]);
      ++v11;
      v10 += 80;
    }
    while (v11 < *(_QWORD *)(a1 + 5096));
  }
  free(*(void **)(a1 + 5104));
  free(*(void **)(a1 + 5128));
  free(*(void **)(a1 + 5152));
  free(*(void **)(a1 + 5176));
  free(*(void **)(a1 + 5200));
  vl_context_history_clear(a1 + 9528);
  free(*(void **)(a1 + 9608));
  return pthread_mutex_destroy((pthread_mutex_t *)(a1 + 9528));
}

uint64_t vl_context_history_clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  *(_DWORD *)(a1 + 68) = 0x80000000;
  if (*(uint64_t *)(a1 + 72) >= 1)
  {
    v2 = 0;
    v3 = 840;
    do
    {
      v4 = (void **)(*(_QWORD *)(a1 + 80) + v3);
      free(*(v4 - 26));
      free(*(v4 - 6));
      free(*(v4 - 3));
      free(*v4);
      ++v2;
      v3 += 864;
    }
    while (v2 < *(_QWORD *)(a1 + 72));
  }
  *(_QWORD *)(a1 + 72) = 0;
  return pthread_mutex_unlock((pthread_mutex_t *)a1);
}

void vl_get_model_path(char *a1, const char *a2, const char *a3)
{
  const __CFString *v5;
  __CFBundle *BundleWithIdentifier;
  const __CFString *v7;
  const __CFURL *v8;
  const __CFString *v9;
  const char *CStringPtr;

  v5 = CFStringCreateWithCStringNoCopy(0, a2, 0x8000100u, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(v5);
  v7 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], a3, 0x8000100u);
  v8 = CFBundleCopyResourceURL(BundleWithIdentifier, CFSTR("model.espresso"), CFSTR("net"), v7);
  v9 = CFURLCopyPath(v8);
  CStringPtr = CFStringGetCStringPtr(v9, 0x8000100u);
  strcpy(a1, CStringPtr);
  CFRelease(v9);
  CFRelease(v7);
  CFRelease(v8);
  CFRelease(v5);
}

uint64_t lbl_feature2d_t::forward(uint64_t a1, uint64_t a2, int a3, int a4, _QWORD *a5, int32x2_t *a6, int a7, int a8)
{
  __darwin_time_t tv_sec;
  uint64_t tv_usec;
  lbl_2d_cnn_t *v18;
  int v19;
  int *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  void *v25;
  vImage_Error v26;
  int *v27;
  uint64_t v28;
  void *v29;
  const __CFString *v30;
  uint64_t v31;
  __darwin_time_t v32;
  uint64_t v33;
  __int128 v34;
  float *v35;
  uint64_t v36;
  float v37;
  __darwin_time_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  uint64_t v46;
  float *v47;
  uint64_t v48;
  float *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  char v54;
  uint64_t v55;
  uint64_t j;
  float *v57;
  uint64_t v58;
  uint64_t v59;
  float v60;
  int v61;
  char v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  _DWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  float *v79;
  float v80;
  float v81;
  uint64_t v82;
  uint64_t result;
  int v84;
  int32x2_t v85;
  int32x2_t v86;
  FILE *v87;
  const char *status_string;
  void *exception;
  uint64_t v90;
  FILE *v91;
  const char *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  __darwin_time_t v96;
  _QWORD *v97;
  lbl_2d_cnn_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  uint64_t __B;
  int __N;
  float __N_4[65];
  timeval v170;
  __int128 v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  int v225;
  int v226;
  int v227;
  int v228;
  uint64_t v229;

  v229 = *MEMORY[0x24BDAC8D0];
  gettimeofday(&v170, 0);
  tv_sec = v170.tv_sec;
  tv_usec = v170.tv_usec;
  *(_QWORD *)(a1 + 1592) = a2;
  *(_QWORD *)(a1 + 1600) = a4;
  *(_QWORD *)(a1 + 1608) = a3;
  *(_QWORD *)(a1 + 1616) = a3;
  if (a3 < a4)
    __assert_rtn("forward", "vl_kpts_lbl.mm", 475, "width >= height");
  if ((a7 & 0xFFFFFFFD) != 1)
  {
    v18 = *(lbl_2d_cnn_t **)(a1 + 1576);
    if (!v18)
    {
      v18 = (lbl_2d_cnn_t *)operator new();
      lbl_2d_cnn_t::lbl_2d_cnn_t(v18, (const char *)(a1 + 8), "landscape");
      *(_QWORD *)(a1 + 1576) = v18;
      v165 = a8;
      v19 = *((_DWORD *)v18 + 104);
      v20 = *(int **)(a1 + 1560);
      if (v20)
        goto LABEL_19;
      goto LABEL_8;
    }
LABEL_7:
    v165 = a8;
    v19 = *((_DWORD *)v18 + 104);
    v20 = *(int **)(a1 + 1560);
    if (v20)
      goto LABEL_19;
LABEL_8:
    v21 = operator new();
    v20 = (int *)v21;
    v22 = *((_DWORD *)v18 + 102);
    v23 = *((_DWORD *)v18 + 103);
    if (v22 <= v23)
      v24 = *((_DWORD *)v18 + 103);
    else
      v24 = *((_DWORD *)v18 + 102);
    if (v22 >= v23)
      v22 = *((_DWORD *)v18 + 103);
    *(_DWORD *)v21 = v24;
    *(_DWORD *)(v21 + 4) = v22;
    *(_QWORD *)(v21 + 72) = 0;
    *(_QWORD *)(v21 + 80) = 0;
    if (vImageBuffer_Init((vImage_Buffer *)(v21 + 8), v22, v24, 8u, 0))
      objc_msgSend(MEMORY[0x24BDBCE88], "raise:format:", CFSTR("Lbl2d runtime exception"), CFSTR("Failed to init vImage"));
    if (vImageBuffer_Init((vImage_Buffer *)(v20 + 10), v20[1], *v20, 8u, 0))
      objc_msgSend(MEMORY[0x24BDBCE88], "raise:format:", CFSTR("Lbl2d runtime exception"), CFSTR("Failed to init vImage"));
    *(_QWORD *)(a1 + 1560) = v20;
    goto LABEL_19;
  }
  v18 = *(lbl_2d_cnn_t **)(a1 + 1568);
  if (v18)
    goto LABEL_7;
  v18 = (lbl_2d_cnn_t *)operator new();
  lbl_2d_cnn_t::lbl_2d_cnn_t(v18, (const char *)(a1 + 8), "portrait");
  *(_QWORD *)(a1 + 1568) = v18;
  v165 = a8;
  v19 = *((_DWORD *)v18 + 104);
  v20 = *(int **)(a1 + 1560);
  if (!v20)
    goto LABEL_8;
LABEL_19:
  if (*(_QWORD *)(a1 + 1608) < *(_QWORD *)(a1 + 1600))
    __assert_rtn("process", "vl_kpts_lbl.mm", 303, "vimg_input->width >= vimg_input->height");
  v97 = a5;
  if (*((_QWORD *)v20 + 10))
  {
    v25 = (void *)*((_QWORD *)v20 + 9);
  }
  else
  {
    v26 = vImageScale_Planar8((const vImage_Buffer *)(a1 + 1592), (const vImage_Buffer *)(v20 + 2), 0, 0x80u);
    *((_QWORD *)v20 + 10) = v26;
    v25 = malloc_type_valloc(v26, 0x584B1CFCuLL);
    *((_QWORD *)v20 + 9) = v25;
  }
  v27 = v20 + 2;
  if (vImageScale_Planar8((const vImage_Buffer *)(a1 + 1592), (const vImage_Buffer *)(v20 + 2), v25, 4u))
    objc_msgSend(MEMORY[0x24BDBCE88], "raise:format:", CFSTR("Lbl2d runtime exception"), CFSTR("Failed to downscale src vImage"));
  v98 = v18;
  switch(a7)
  {
    case 0:
      goto LABEL_32;
    case 1:
    case 3:
      v28 = v20[1];
      *((_QWORD *)v20 + 6) = *v20;
      *((_QWORD *)v20 + 7) = v28;
      *((_QWORD *)v20 + 8) = v28;
      if (!vImageRotate90_Planar8((const vImage_Buffer *)(v20 + 2), (const vImage_Buffer *)(v20 + 10), a7, 0, 0))
        goto LABEL_31;
      v29 = (void *)MEMORY[0x24BDBCE88];
      v30 = CFSTR("Failed to rot src vImage");
      goto LABEL_30;
    case 2:
      v31 = *v20;
      *((_QWORD *)v20 + 6) = v20[1];
      *((_QWORD *)v20 + 7) = v31;
      *((_QWORD *)v20 + 8) = v31;
      vImageRotate90_Planar8((const vImage_Buffer *)(v20 + 2), (const vImage_Buffer *)(v20 + 10), 2u, 0, 0);
      goto LABEL_31;
    default:
      v29 = (void *)MEMORY[0x24BDBCE88];
      v30 = CFSTR("Failed to rotate src vImage");
LABEL_30:
      objc_msgSend(v29, "raise:format:", CFSTR("Lbl2d runtime exception"), v30);
LABEL_31:
      v27 = v20 + 10;
LABEL_32:
      printf("Info : ");
      gettimeofday(&v170, 0);
      printf("prepro time: %lf ms", (double)(1000000 * (v170.tv_sec - tv_sec) - tv_usec + v170.tv_usec) / 1000.0);
      putchar(10);
      gettimeofday(&v170, 0);
      v32 = v170.tv_sec;
      v33 = v170.tv_usec;
      v34 = *((_OWORD *)v27 + 1);
      v170 = *(timeval *)v27;
      v171 = v34;
      if ((espresso_network_bind_input_vimagebuffer_planar8() & 0x80000000) != 0)
      {
        v87 = (FILE *)*MEMORY[0x24BDAC8D8];
        status_string = (const char *)espresso_get_status_string();
        fprintf(v87, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/kpts/vl_kpts_lbl.mm", 131, status_string);
        exception = __cxa_allocate_exception(0x10uLL);
        v90 = espresso_get_status_string();
        MEMORY[0x212BCEB2C](exception, v90);
        __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
      }
      if ((espresso_plan_execute_sync() & 0x80000000) != 0)
      {
        v91 = (FILE *)*MEMORY[0x24BDAC8D8];
        v92 = (const char *)espresso_get_status_string();
        fprintf(v91, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/kpts/vl_kpts_lbl.mm", 132, v92);
        v93 = __cxa_allocate_exception(0x10uLL);
        v94 = espresso_get_status_string();
        MEMORY[0x212BCEB2C](v93, v94);
        __cxa_throw(v93, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
      }
      printf("Info : ");
      gettimeofday(&v170, 0);
      printf("cnn time: %lf ms", (double)(1000000 * (v170.tv_sec - v32) - v33 + v170.tv_usec) / 1000.0);
      putchar(10);
      gettimeofday(&v170, 0);
      if (v19)
        __assert_rtn("forward", "vl_kpts_lbl.mm", 523, "0");
      v35 = (float *)*((_QWORD *)v98 + 49);
      v164 = *((_QWORD *)v98 + 50);
      v36 = *((_QWORD *)v98 + 17);
      v100 = *((_QWORD *)v98 + 38);
      v37 = *(float *)(a1 + 1552);
      gettimeofday(&v170, 0);
      v38 = v170.tv_sec;
      v39 = v170.tv_usec;
      v41 = *((_QWORD *)v98 + 18);
      v40 = *((_QWORD *)v98 + 19);
      v42 = *((_QWORD *)v98 + 17);
      v43 = v41 * v40;
      if (*(_QWORD *)(a1 + 1624))
      {
        if (v165)
        {
LABEL_37:
          if (v40 && v41 && v42)
          {
            v44 = 0;
            for (i = 0; i != v41; ++i)
            {
              v46 = 0;
              v47 = v35;
              v48 = v44;
              do
              {
                v49 = v47;
                v50 = v48;
                v51 = v40;
                do
                {
                  v52 = (int)(float)(*v49 / v37);
                  if (v52 <= 126)
                    v53 = (int)(float)(*v49 / v37);
                  else
                    LOBYTE(v53) = 127;
                  if (v52 <= -128)
                    v54 = 0x80;
                  else
                    v54 = v53;
                  *(_BYTE *)(*(_QWORD *)(a1 + 1624) + v50++) = v54;
                  v49 += v41 * v36;
                  --v51;
                }
                while (v51);
                ++v46;
                v48 += v40;
                ++v47;
              }
              while (v46 != v42);
              v44 += v42 * v40;
              v35 += v36;
            }
          }
          goto LABEL_66;
        }
      }
      else
      {
        *(_QWORD *)(a1 + 1624) = malloc_type_malloc(4 * v42 * v43, 0x100004052888210uLL);
        if (v165)
          goto LABEL_37;
      }
      if (v43 && v42)
      {
        v55 = 0;
        for (j = 0; j != v43; ++j)
        {
          v57 = v35;
          v58 = v55;
          v59 = v42;
          do
          {
            v60 = *v57++;
            v61 = (int)(float)(v60 / v37);
            if (v61 <= 126)
              v62 = v61;
            else
              v62 = 127;
            if (v61 <= -128)
              v63 = 0x80;
            else
              v63 = v62;
            *(_BYTE *)(*(_QWORD *)(a1 + 1624) + v58++) = v63;
            --v59;
          }
          while (v59);
          v55 += v42;
          v35 += v36;
        }
      }
LABEL_66:
      printf("Info : ");
      gettimeofday(&v170, 0);
      printf("copy time: %lf", (double)(1000000 * (v170.tv_sec - v38) - v39 + v170.tv_usec) / 1000.0);
      putchar(10);
      gettimeofday(&v170, 0);
      if (*((_QWORD *)v98 + 40) != 65)
        __assert_rtn("softmax65_permute_to16i", "vl_kpts_lbl.h", 48, "channel == 65");
      v95 = v170.tv_usec;
      v96 = v170.tv_sec;
      v64 = *((_QWORD *)v98 + 39);
      v166 = *((_QWORD *)v98 + 38);
      v99 = v64;
      if (*(_QWORD *)(a1 + 1632))
      {
        if (!v64)
          goto LABEL_78;
      }
      else
      {
        *(_QWORD *)(a1 + 1632) = malloc_type_malloc((v64 * v166) << 7, 0x1000040BDFB0063uLL);
        v64 = v99;
        if (!v99)
          goto LABEL_78;
      }
      if (v166)
      {
        v65 = 0;
        v66 = v64 * v100;
        v163 = 11 * v64 * v100;
        v162 = 13 * v64 * v100;
        v161 = 19 * v64 * v100;
        v160 = 21 * v64 * v100;
        v159 = 22 * v64 * v100;
        v158 = 23 * v64 * v100;
        v157 = 25 * v64 * v100;
        v156 = 26 * v64 * v100;
        v155 = 27 * v64 * v100;
        v153 = 35 * v64 * v100;
        v154 = 29 * v64 * v100;
        v151 = 38 * v64 * v100;
        v152 = 37 * v64 * v100;
        v149 = 41 * v64 * v100;
        v150 = 39 * v64 * v100;
        v148 = 42 * v64 * v100;
        v147 = 43 * v64 * v100;
        v146 = 44 * v64 * v100;
        v145 = 45 * v64 * v100;
        v144 = 46 * v64 * v100;
        v143 = 47 * v64 * v100;
        v141 = 50 * v64 * v100;
        v142 = 49 * v64 * v100;
        v139 = 52 * v64 * v100;
        v140 = 51 * v64 * v100;
        v137 = 54 * v64 * v100;
        v138 = 53 * v64 * v100;
        v135 = 57 * v64 * v100;
        v136 = 55 * v64 * v100;
        v133 = 59 * v64 * v100;
        v134 = 58 * v64 * v100;
        v132 = 61 * v64 * v100;
        v67 = 2 * v64 * v100;
        v68 = 3 * v64 * v100;
        v69 = 4 * v64 * v100;
        v128 = 2 * v68;
        v126 = 7 * v66;
        v123 = 4 * v68;
        v124 = 2 * (v69 + v66);
        v121 = 16 * v66 - v67;
        v122 = 16 * v66;
        v120 = 15 * v66;
        v118 = 18 * v66;
        v119 = 17 * v66;
        v117 = 4 * (v69 + v66);
        v116 = 8 * v68;
        v114 = 32 * v66 - v69;
        v115 = 32 * v66;
        v113 = 32 * v66 - v67;
        v111 = 33 * v66;
        v112 = 31 * v66;
        v125 = 9 * v66;
        v109 = 36 * v66;
        v110 = 34 * v66;
        v129 = v69 + v66;
        v130 = v69;
        v131 = v68;
        v107 = 16 * v68;
        v108 = 8 * (v69 + v66);
        v127 = 8 * v66;
        v104 = (v66 << 6) - v69;
        v105 = 56 * v66;
        v106 = v67;
        v103 = (v66 << 6) - v67;
        v70 = v66;
        v71 = v66 << 6;
        v102 = 63 * v66;
        do
        {
          v72 = 0;
          v73 = v65 * v100;
          v101 = v65;
          v74 = 8 * v65;
          do
          {
            v75 = (_DWORD *)(v164 + 4 * (v72 + v73));
            LODWORD(v170.tv_sec) = *v75;
            HIDWORD(v170.tv_sec) = v75[v70];
            v170.tv_usec = v75[v106];
            *(&v170.tv_usec + 1) = v75[v131];
            LODWORD(v171) = v75[v130];
            DWORD1(v171) = v75[v129];
            DWORD2(v171) = v75[v128];
            HIDWORD(v171) = v75[v126];
            v172 = v75[v127];
            v173 = v75[v125];
            v174 = v75[v124];
            v175 = v75[v163];
            v176 = v75[v123];
            v177 = v75[v162];
            v178 = v75[v121];
            v179 = v75[v120];
            v180 = v75[v122];
            v181 = v75[v119];
            v182 = v75[v118];
            v183 = v75[v161];
            v184 = v75[v117];
            v185 = v75[v160];
            v186 = v75[v159];
            v187 = v75[v158];
            v188 = v75[v116];
            v189 = v75[v157];
            v190 = v75[v156];
            v191 = v75[v155];
            v192 = v75[v114];
            v193 = v75[v154];
            v194 = v75[v113];
            v195 = v75[v112];
            v196 = v75[v115];
            v197 = v75[v111];
            v198 = v75[v110];
            v199 = v75[v153];
            v200 = v75[v109];
            v201 = v75[v152];
            v202 = v75[v151];
            v203 = v75[v150];
            v204 = v75[v108];
            v205 = v75[v149];
            v206 = v75[v148];
            v207 = v75[v147];
            v208 = v75[v146];
            v209 = v75[v145];
            v210 = v75[v144];
            v211 = v75[v143];
            v212 = v75[v107];
            v213 = v75[v142];
            v214 = v75[v141];
            v215 = v75[v140];
            v216 = v75[v139];
            v217 = v75[v138];
            v218 = v75[v137];
            v219 = v75[v136];
            v220 = v75[v105];
            v221 = v75[v135];
            v222 = v75[v134];
            v223 = v75[v133];
            v224 = v75[v104];
            v225 = v75[v132];
            v226 = v75[v103];
            v227 = v75[v102];
            v228 = v75[v71];
            __N = 65;
            __B = 0;
            vDSP_vsadd((const float *)&v170, 1, (const float *)&__B + 1, __N_4, 1, 0x41uLL);
            vvexpf(__N_4, __N_4, &__N);
            vDSP_sve(__N_4, 1, (float *)&__B, __N);
            vDSP_vsdiv(__N_4, 1, (const float *)&__B, __N_4, 1, __N);
            v76 = 0;
            v77 = (8 * v72);
            v78 = *(_QWORD *)(a1 + 1632);
            do
            {
              v79 = &__N_4[v76];
              v80 = fmin((float)(*v79 * 65535.0), 65535.0);
              v81 = fmin((float)(v79[1] * 65535.0), 65535.0);
              v82 = 8 * v166 * (v74 + (v76 >> 3));
              *(_WORD *)(v78 + 2 * ((v76 & 6 | v77) + v82)) = (int)v80;
              *(_WORD *)(v78 + 2 * ((((_BYTE)v76 + 1) & 7 | v77) + v82)) = (int)v81;
              v76 += 2;
            }
            while (v76 != 64);
            ++v72;
          }
          while (v72 != v166);
          v65 = v101 + 1;
        }
        while (v101 + 1 != v99);
      }
LABEL_78:
      printf("Info : ");
      gettimeofday(&v170, 0);
      printf("softmax time: %lf", (double)(1000000 * (v170.tv_sec - v96) - v95 + v170.tv_usec) / 1000.0);
      result = putchar(10);
      v84 = *((_DWORD *)v98 + 38);
      *a6 = *(int32x2_t *)(a1 + 1624);
      v85 = (int32x2_t)(int)(*(_OWORD *)((char *)v98 + 136) * v84);
      a6[1] = vmovn_s64(*(int64x2_t *)((char *)v98 + 136));
      a6[2] = v85;
      *v97 = *(_QWORD *)(a1 + 1632);
      v86 = vshl_n_s32(vmovn_s64(*((int64x2_t *)v98 + 19)), 3uLL);
      v97[1] = v86;
      v97[2] = v86.i32[0];
      return result;
  }
}

void sub_210B5A5C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCEB50](v1, 0x1080C409FDDAA90);
  _Unwind_Resume(a1);
}

void sub_210B5A5F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_210B5A604(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_210B5A618(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCEB50](v1, 0x1080C4095AC591FLL);
  _Unwind_Resume(a1);
}

void lbl_feature2d_t::lbl_feature2d_t(lbl_feature2d_t *this, const char *a2, int a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  lbl_2d_cnn_t *v17;

  v6 = (char *)this + 1032;
  bzero(this, 0x608uLL);
  if ((a3 - 3006) < 3 || a3 == 3010)
  {
    strcpy(v6, "espressos/lbl2d_v4_ind_pl.mlmodelc");
    *((_QWORD *)this + 193) = 0x100000040;
    *((_QWORD *)this + 194) = 0x3E0D447B3CB916B3;
  }
  else
  {
    if (a3 != 3011)
      __assert_rtn("lbl_feature2d_par_ver", "vl_kpts_lbl.mm", 389, "0");
    strcpy(v6, "espressos/lbl2d_v5.mlmodelc");
    *((_QWORD *)this + 193) = 64;
    *((_DWORD *)this + 388) = 989888641;
  }
  *(_OWORD *)((char *)this + 1560) = 0u;
  *(_OWORD *)((char *)this + 1576) = 0u;
  *((_QWORD *)this + 203) = 0;
  *((_QWORD *)this + 205) = 0;
  *((_QWORD *)this + 204) = 0;
  log_col_app((uint64_t)"Loading model at: %s", v7, v8, v9, v10, v11, v12, v13, (char)v6);
  vl_get_model_path((char *)this + 8, a2, v6);
  v14 = MTLCreateSystemDefaultDevice();
  v15 = *(void **)this;
  *(_QWORD *)this = v14;

  v16 = operator new();
  lbl_2d_metal_t::lbl_2d_metal_t(v16, *(void **)this);
  *((_QWORD *)this + 198) = v16;
  v17 = (lbl_2d_cnn_t *)operator new();
  lbl_2d_cnn_t::lbl_2d_cnn_t(v17, (const char *)this + 8, "portrait");
  *((_QWORD *)this + 196) = v17;
}

void sub_210B5A7E4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  MEMORY[0x212BCEB50](v2, 0x1080C409FDDAA90);

  _Unwind_Resume(a1);
}

void sub_210B5A82C(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

uint64_t lbl_2d_metal_t::lbl_2d_metal_t(uint64_t a1, void *a2)
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v13;

  v4 = a2;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 32;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 56;
  objc_storeStrong((id *)a1, a2);
  v5 = objc_msgSend(v4, "newCommandQueue");
  v6 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v5;

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "\nconstant ushort ushort_arg0[[function_constant(0)]];\n"
    "constant ushort ushort_arg1[[function_constant(1)]];\n"
    "constant ushort ushort_arg2[[function_constant(2)]];\n"
    "\n"
    "#include <metal_stdlib>\n"
    "using namespace metal;\n"
    "\n"
    "\n"
    "kernel void copy_tex_toi8(texture2d_array<half, access::read> tex[[texture(0)]],\n"
    "                                 device char* buf[[buffer(0)]],\n"
    "                                 constant float *alpha[[buffer(1)]],\n"
    "                                 ushort3 gid[[thread_position_in_grid]]) {\n"
    "  const ushort C = ushort_arg0;\n"
    "  const ushort H = ushort_arg1;\n"
    "  const ushort W = ushort_arg2;\n"
    "  ushort i;\n"
    "  \n"
    "  if (gid.x >= W || gid.y >= H) {\n"
    "    return;\n"
    "  }\n"
    "  half4 t = tex.read(gid.xy, gid.z);\n"
    "\n"
    "  for (i = 0; i < 4; ++i){\n"
    "    int c = (int)(gid.z) * 4 + i;\n"
    "    if (c < C){\n"
    "      int ind = c * (int)H * (int)W + ((int)(gid.y) * W + (int)(gid.x));\n"
    "      buf[ind] = (char)fmax(fmin(t[i] * alpha[0], 127.), -128.);\n"
    "    }\n"
    "  }\n"
    "}\n"
    "\n"
    "kernel void copy_tex_toi8_trans(texture2d_array<half, access::read> tex[[texture(0)]],\n"
    "                                 device char* buf[[buffer(0)]],\n"
    "                                 constant float *alpha[[buffer(1)]],\n"
    "                                 ushort3 gid[[thread_position_in_grid]]) {\n"
    "  const ushort C = ushort_arg0;\n"
    "  const ushort H = ushort_arg1;\n"
    "  const ushort W = ushort_arg2;\n"
    "  ushort i;\n"
    "  \n"
    "  if (gid.x >= W || gid.y >= H) {\n"
    "    return;\n"
    "  }\n"
    "  half4 t = tex.read(gid.xy, gid.z);\n"
    "\n"
    "  for (i = 0; i < 4; ++i){\n"
    "    int c = (int)(gid.z) * 4 + i;\n"
    "    if (c < C){\n"
    "      int ind = ((int)(gid.y) * W + (int)(gid.x)) * C + c;\n"
    "      buf[ind] = (char)fmax(fmin(t[i] * alpha[0], 127.), -128.);\n"
    "    }\n"
    "  }\n"
    "}\n"
    "\n"
    "\n"
    "kernel void copy_tex_tof16(texture2d_array<half, access::read> tex[[texture(0)]],\n"
    "                                 device half* buf[[buffer(0)]],\n"
    "                                 constant float *alpha[[buffer(1)]],\n"
    "                                 ushort3 gid[[thread_position_in_grid]]) {\n"
    "  const ushort C = ushort_arg0;\n"
    "  const ushort H = ushort_arg1;\n"
    "  const ushort W = ushort_arg2;\n"
    "  ushort i;\n"
    "  \n"
    "  if (gid.x >= W || gid.y >= H) {\n"
    "    return;\n"
    "  }\n"
    "  half4 t = tex.read(gid.xy, gid.z);\n"
    "\n"
    "  for (i = 0; i < 4; ++i){\n"
    "    int c = (int)(gid.z) * 4 + i;\n"
    "    if (c < C){\n"
    "      int ind = c * (int)H * (int)W + ((int)(gid.y) * W + (int)(gid.x));\n"
    "      buf[ind] = t[i];\n"
    "    }\n"
    "  }\n"
    "}\n"
    "\n"
    "kernel void copy_tex_tof16_trans(texture2d_array<half, access::read> tex[[texture(0)]],\n"
    "                                 device half* buf[[buffer(0)]],\n"
    "                                 constant float *alpha[[buffer(1)]],\n"
    "                                 ushort3 gid[[thread_position_in_grid]]) {\n"
    "  const ushort C = ushort_arg0;\n"
    "  const ushort H = ushort_arg1;\n"
    "  const ushort W = ushort_arg2;\n"
    "  ushort i;\n"
    "  \n"
    "  if (gid.x >= W || gid.y >= H) {\n"
    "    return;\n"
    "  }\n"
    "  half4 t = tex.read(gid.xy, gid.z);\n"
    "\n"
    "  for (i = 0; i < 4; ++i){\n"
    "    int c = (int)(gid.z) * 4 + i;\n"
    "    if (c < C){\n"
    "      int ind = ((int)(gid.y) * W + (int)(gid.x)) * C + c;\n"
    "      buf[ind] = t[i];\n"
    "    }\n"
    "  }\n"
    "}\n"
    "\n");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = *(id *)a1;
  v13 = 0;
  v9 = objc_msgSend(v8, "newLibraryWithSource:options:error:", v7, 0, &v13);
  v10 = v13;
  v11 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v9;

  if (!*(_QWORD *)(a1 + 16) || v10)
    NSLog(CFSTR("Failed to load library"));

  return a1;
}

void sub_210B5A93C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  std::__tree<std::__value_type<std::string,objc_object  {objcproto23MTLComputePipelineState}* {__strong}>,std::__map_value_compare<std::string,objc_object  {objcproto23MTLComputePipelineState}* {__strong},std::less<std::string>,true>,std::allocator<objc_object  {objcproto23MTLComputePipelineState}* {__strong}>>::destroy(*(char **)(v2 + 56));
  std::__tree<std::__value_type<std::string,objc_object  {objcproto23MTLComputePipelineState}* {__strong}>,std::__map_value_compare<std::string,objc_object  {objcproto23MTLComputePipelineState}* {__strong},std::less<std::string>,true>,std::allocator<objc_object  {objcproto23MTLComputePipelineState}* {__strong}>>::destroy(*(char **)(v2 + 32));

  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,objc_object  {objcproto23MTLComputePipelineState}* {__strong}>,std::__map_value_compare<std::string,objc_object  {objcproto23MTLComputePipelineState}* {__strong},std::less<std::string>,true>,std::allocator<objc_object  {objcproto23MTLComputePipelineState}* {__strong}>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,objc_object  {objcproto23MTLComputePipelineState}* {__strong}>,std::__map_value_compare<std::string,objc_object  {objcproto23MTLComputePipelineState}* {__strong},std::less<std::string>,true>,std::allocator<objc_object  {objcproto23MTLComputePipelineState}* {__strong}>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,objc_object  {objcproto23MTLComputePipelineState}* {__strong}>,std::__map_value_compare<std::string,objc_object  {objcproto23MTLComputePipelineState}* {__strong},std::less<std::string>,true>,std::allocator<objc_object  {objcproto23MTLComputePipelineState}* {__strong}>>::destroy(*((_QWORD *)a1 + 1));

    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void lbl_2d_cnn_t::lbl_2d_cnn_t(lbl_2d_cnn_t *this, const char *a2, const char *a3)
{
  void *v4;
  uint64_t context;
  FILE *v6;
  const char *status_string;
  void *exception;
  uint64_t v9;
  FILE *v10;
  const char *v11;
  uint64_t v12;
  FILE *v13;
  const char *v14;
  uint64_t v15;
  FILE *v16;
  const char *v17;
  void *v18;
  uint64_t v19;
  FILE *v20;
  const char *v21;
  void *v22;
  uint64_t v23;
  FILE *v24;
  const char *v25;
  void *v26;
  uint64_t v27;
  FILE *v28;
  const char *v29;
  void *v30;
  uint64_t v31;
  FILE *v32;
  const char *v33;
  void *v34;
  uint64_t v35;
  int64x2_t v36;
  uint64_t v37;
  uint64_t v38;

  v4 = (void *)MEMORY[0x212BCF144]();
  context = espresso_create_context();
  *((_DWORD *)this + 104) = 0;
  if (!context)
  {
    context = espresso_create_context();
    *((_DWORD *)this + 104) = 1;
    if (!context)
    {
      context = espresso_create_context();
      *((_DWORD *)this + 104) = 2;
    }
  }
  objc_autoreleasePoolPop(v4);
  *((_QWORD *)this + 3) = context;
  NSLog(CFSTR("Init with net_device %d"), *((unsigned int *)this + 104));
  *((_QWORD *)this + 4) = espresso_create_plan();
  espresso_get_default_storage_type();
  if ((espresso_plan_add_network() & 0x80000000) != 0)
  {
    v6 = (FILE *)*MEMORY[0x24BDAC8D8];
    status_string = (const char *)espresso_get_status_string();
    fprintf(v6, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/kpts/vl_kpts_lbl.mm", 100, status_string);
    exception = __cxa_allocate_exception(0x10uLL);
    v9 = espresso_get_status_string();
    MEMORY[0x212BCEB2C](exception, v9);
    goto LABEL_16;
  }
  if ((espresso_network_select_configuration() & 0x80000000) != 0)
  {
    v10 = (FILE *)*MEMORY[0x24BDAC8D8];
    v11 = (const char *)espresso_get_status_string();
    fprintf(v10, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/kpts/vl_kpts_lbl.mm", 101, v11);
    exception = __cxa_allocate_exception(0x10uLL);
    v12 = espresso_get_status_string();
    MEMORY[0x212BCEB2C](exception, v12);
    goto LABEL_16;
  }
  if ((espresso_plan_build() & 0x80000000) != 0)
  {
    v13 = (FILE *)*MEMORY[0x24BDAC8D8];
    v14 = (const char *)espresso_get_status_string();
    fprintf(v13, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/kpts/vl_kpts_lbl.mm", 102, v14);
    exception = __cxa_allocate_exception(0x10uLL);
    v15 = espresso_get_status_string();
    MEMORY[0x212BCEB2C](exception, v15);
LABEL_16:
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if ((espresso_network_query_blob_dimensions() & 0x80000000) != 0)
  {
    v16 = (FILE *)*MEMORY[0x24BDAC8D8];
    v17 = (const char *)espresso_get_status_string();
    fprintf(v16, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/kpts/vl_kpts_lbl.mm", 106, v17);
    v18 = __cxa_allocate_exception(0x10uLL);
    v19 = espresso_get_status_string();
    MEMORY[0x212BCEB2C](v18, v19);
    __cxa_throw(v18, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  *((int32x2_t *)this + 51) = vmovn_s64(v36);
  if ((espresso_network_query_blob_dimensions() & 0x80000000) != 0)
  {
    v20 = (FILE *)*MEMORY[0x24BDAC8D8];
    v21 = (const char *)espresso_get_status_string();
    fprintf(v20, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/kpts/vl_kpts_lbl.mm", 110, v21);
    v22 = __cxa_allocate_exception(0x10uLL);
    v23 = espresso_get_status_string();
    MEMORY[0x212BCEB2C](v22, v23);
    __cxa_throw(v22, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  *((_QWORD *)this + 49) = malloc_type_malloc(4 * v38 * v37 * v36.i64[1] * v36.i64[0], 0x100004052888210uLL);
  espresso_buffer_pack_tensor_shape();
  *((_QWORD *)this + 7) = *((_QWORD *)this + 49);
  if ((espresso_network_bind_buffer() & 0x80000000) != 0)
  {
    v24 = (FILE *)*MEMORY[0x24BDAC8D8];
    v25 = (const char *)espresso_get_status_string();
    fprintf(v24, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/kpts/vl_kpts_lbl.mm", 117, v25);
    v26 = __cxa_allocate_exception(0x10uLL);
    v27 = espresso_get_status_string();
    MEMORY[0x212BCEB2C](v26, v27);
    __cxa_throw(v26, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if ((espresso_network_query_blob_dimensions() & 0x80000000) != 0)
  {
    v28 = (FILE *)*MEMORY[0x24BDAC8D8];
    v29 = (const char *)espresso_get_status_string();
    fprintf(v28, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/kpts/vl_kpts_lbl.mm", 119, v29);
    v30 = __cxa_allocate_exception(0x10uLL);
    v31 = espresso_get_status_string();
    MEMORY[0x212BCEB2C](v30, v31);
    __cxa_throw(v30, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  *((_QWORD *)this + 50) = malloc_type_malloc(4 * v38 * v37 * v36.i64[1] * v36.i64[0], 0x100004052888210uLL);
  espresso_buffer_pack_tensor_shape();
  *((_QWORD *)this + 28) = *((_QWORD *)this + 50);
  if ((espresso_network_bind_buffer() & 0x80000000) != 0)
  {
    v32 = (FILE *)*MEMORY[0x24BDAC8D8];
    v33 = (const char *)espresso_get_status_string();
    fprintf(v32, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/kpts/vl_kpts_lbl.mm", 126, v33);
    v34 = __cxa_allocate_exception(0x10uLL);
    v35 = espresso_get_status_string();
    MEMORY[0x212BCEB2C](v34, v35);
    __cxa_throw(v34, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
}

void sub_210B5AFE4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_210B5AFF8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_210B5B00C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_210B5B020(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_210B5B034(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_210B5B048(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_210B5B05C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_210B5B070(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void lbl_feature2d_t::~lbl_feature2d_t(lbl_feature2d_t *this)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v2 = *((_QWORD *)this + 195);
  if (v2)
  {
    v3 = *(void **)(v2 + 8);
    if (v3)
      free(v3);
    v4 = *(void **)(v2 + 40);
    if (v4)
      free(v4);
    if (*(_QWORD *)(v2 + 80))
      free(*(void **)(v2 + 72));
    MEMORY[0x212BCEB50](v2, 0x1080C4095AC591FLL);
  }
  v5 = *((_QWORD *)this + 197);
  if (v5)
  {
    if (espresso_plan_destroy() || espresso_context_destroy())
      NSLog(CFSTR("[WARNING] Faild to dealloc espresso net"));
    v6 = *(void **)(v5 + 392);
    if (v6)
      free(v6);
    v7 = *(void **)(v5 + 400);
    if (v7)
      free(v7);
    MEMORY[0x212BCEB50](v5, 0x1080C409FDDAA90);
  }
  v8 = *((_QWORD *)this + 196);
  if (v8)
  {
    if (espresso_plan_destroy() || espresso_context_destroy())
      NSLog(CFSTR("[WARNING] Faild to dealloc espresso net"));
    v9 = *(void **)(v8 + 392);
    if (v9)
      free(v9);
    v10 = *(void **)(v8 + 400);
    if (v10)
      free(v10);
    MEMORY[0x212BCEB50](v8, 0x1080C409FDDAA90);
  }
  v11 = *((_QWORD *)this + 198);
  if (v11)
  {
    std::__tree<std::__value_type<std::string,objc_object  {objcproto23MTLComputePipelineState}* {__strong}>,std::__map_value_compare<std::string,objc_object  {objcproto23MTLComputePipelineState}* {__strong},std::less<std::string>,true>,std::allocator<objc_object  {objcproto23MTLComputePipelineState}* {__strong}>>::destroy(*(char **)(v11 + 56));
    std::__tree<std::__value_type<std::string,objc_object  {objcproto23MTLComputePipelineState}* {__strong}>,std::__map_value_compare<std::string,objc_object  {objcproto23MTLComputePipelineState}* {__strong},std::less<std::string>,true>,std::allocator<objc_object  {objcproto23MTLComputePipelineState}* {__strong}>>::destroy(*(char **)(v11 + 32));

    MEMORY[0x212BCEB50](v11, 0x10A0C40A7699F9ELL);
  }
  free(*((void **)this + 203));
  free(*((void **)this + 204));
  free(*((void **)this + 205));

}

void bon_eval_fnc_relpose(uint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t a9, float32x2_t *a10, int a11)
{
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;
  BOOL v21;
  float32x4_t *v22;
  uint64_t v23;
  float32x4_t *v24;
  float32x4_t *v25;
  _OWORD v26[6];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v11 = *a8;
  v12 = a8[1];
  v13 = *(_OWORD **)(a5 + 32 * v11);
  v14 = v13[1];
  v26[0] = *v13;
  v26[1] = v14;
  v15 = v13[2];
  v16 = *(__int128 **)(a5 + 32 * v12);
  v17 = *v16;
  v18 = v16[1];
  v26[2] = v15;
  v26[3] = v17;
  v19 = v16[2];
  v26[4] = v18;
  v26[5] = v19;
  if (a2)
  {
    v20 = *(_DWORD *)(a5 + 32 * v11 + 16);
    v21 = v20 == 0;
    if (v20)
      v22 = a2;
    else
      v22 = 0;
    v23 = 9;
    if (v21)
      v23 = 0;
    v24 = &a2[v23];
    if (*(_DWORD *)(a5 + 32 * v12 + 16))
      v25 = v24;
    else
      v25 = 0;
  }
  else
  {
    v22 = 0;
    v25 = 0;
  }
  bon_eval_fnc_relpose_(a1, v22, v25, (float32x2_t *)v26, a10, a11, a2 != 0);
}

void bon_eval_fnc_relpose_(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x2_t *a4, float32x2_t *a5, int a6, int a7)
{
  int v14;
  int v15;
  float64x2_t *v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t *v24;
  _OWORD v25[6];
  _OWORD v26[6];
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;

  if (a2)
    v14 = 6;
  else
    v14 = 0;
  if (a3)
    v15 = 6;
  else
    v15 = 0;
  if (a7)
  {
    v16 = (float64x2_t *)malloc_type_calloc((v15 + v14) * a6, 8uLL, 0x100004000313F17uLL);
    if (a6 == 6)
      goto LABEL_9;
LABEL_17:
    __assert_rtn("bon_eval_fnc_relpose_", "bon.c", 911, "n_res == 6");
  }
  v16 = 0;
  if (a6 != 6)
    goto LABEL_17;
LABEL_9:
  v17 = vcvtq_f64_f32(a4[1]);
  v26[0] = vcvtq_f64_f32(*a4);
  v26[1] = v17;
  v18 = vcvtq_f64_f32(a4[3]);
  v26[2] = vcvtq_f64_f32(a4[2]);
  v26[3] = v18;
  v19 = vcvtq_f64_f32(a4[5]);
  v26[4] = vcvtq_f64_f32(a4[4]);
  v26[5] = v19;
  v20 = vcvtq_f64_f32(a4[7]);
  v25[0] = vcvtq_f64_f32(a4[6]);
  v25[1] = v20;
  v21 = vcvtq_f64_f32(a4[9]);
  v25[2] = vcvtq_f64_f32(a4[8]);
  v25[3] = v21;
  v22 = vcvtq_f64_f32(a4[11]);
  v25[4] = vcvtq_f64_f32(a4[10]);
  v25[5] = v22;
  v23 = vcvtq_f64_f32(a5[1]);
  v27 = vcvtq_f64_f32(*a5);
  v28 = v23;
  v29 = vcvtq_f64_f32(a5[2]);
  g_jac_rel_pose_so3_scale((uint64_t)v26, (double *)v25, 0, 0, 0, 6u, v14, v15, 0, v27.f64, v16->f64);
  *(float32x4_t *)a1 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v27), v28);
  *(float32x2_t *)(a1 + 16) = vcvt_f32_f64(v29);
  if (a7)
  {
    v24 = v16;
    if (a2)
    {
      *a2 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v16), v16[1]);
      a2[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v16[2]), v16[3]);
      a2[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v16[4]), v16[5]);
      a2[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v16[6]), v16[7]);
      a2[4] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v16[8]), v16[9]);
      a2[5] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v16[10]), v16[11]);
      a2[6] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v16[12]), v16[13]);
      a2[7] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v16[14]), v16[15]);
      v24 = v16 + 18;
      a2[8] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v16[16]), v16[17]);
    }
    if (a3)
    {
      *a3 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v24), v24[1]);
      a3[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v24[2]), v24[3]);
      a3[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v24[4]), v24[5]);
      a3[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v24[6]), v24[7]);
      a3[4] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v24[8]), v24[9]);
      a3[5] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v24[10]), v24[11]);
      a3[6] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v24[12]), v24[13]);
      a3[7] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v24[14]), v24[15]);
      a3[8] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v24[16]), v24[17]);
    }
    free(v16);
  }
}

void bon_eval_fnc_abspose(uint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t a9, float32x2_t *a10, int a11)
{
  float32x2_t *v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  int v20;
  float64x2_t *v21;
  float64x2_t v22;
  _OWORD v23[6];
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;

  v13 = *(float32x2_t **)(a5 + 32 * *a8);
  v14 = *v13;
  v15 = v13[1];
  v16 = v13[2];
  v17 = v13[3];
  v18 = v13[4];
  v19 = v13[5];
  if (a2)
    v20 = 6;
  else
    v20 = 0;
  if (a2)
  {
    v21 = (float64x2_t *)malloc_type_calloc(6 * a11, 8uLL, 0x100004000313F17uLL);
    if (a11 == 6)
      goto LABEL_6;
LABEL_10:
    __assert_rtn("bon_eval_fnc_abspose_", "bon.c", 952, "n_res == 6");
  }
  v21 = 0;
  if (a11 != 6)
    goto LABEL_10;
LABEL_6:
  v23[0] = vcvtq_f64_f32(v14);
  v23[1] = vcvtq_f64_f32(v15);
  v23[2] = vcvtq_f64_f32(v16);
  v23[3] = vcvtq_f64_f32(v17);
  v23[4] = vcvtq_f64_f32(v18);
  v23[5] = vcvtq_f64_f32(v19);
  v22 = vcvtq_f64_f32(a10[1]);
  v24 = vcvtq_f64_f32(*a10);
  v25 = v22;
  v26 = vcvtq_f64_f32(a10[2]);
  g_jac_abs_pose_so3((double *)v23, 0, 6, v20, v24.f64, (uint64_t)v21);
  *(float32x4_t *)a1 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v24), v25);
  *(float32x2_t *)(a1 + 16) = vcvt_f32_f64(v26);
  if (a2)
  {
    *a2 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v21), v21[1]);
    a2[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v21[2]), v21[3]);
    a2[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v21[4]), v21[5]);
    a2[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v21[6]), v21[7]);
    a2[4] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v21[8]), v21[9]);
    a2[5] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v21[10]), v21[11]);
    a2[6] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v21[12]), v21[13]);
    a2[7] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v21[14]), v21[15]);
    a2[8] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v21[16]), v21[17]);
    free(v21);
  }
}

float bon_eval_fnc_distance(float *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t a9, float *a10, int a11)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  float *v19;
  float v20;
  float v21;
  float result;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;

  v11 = *a8;
  v12 = a8[1];
  if (!a2)
  {
    v15 = 0;
    v17 = 0;
    if (a11 == 1)
      goto LABEL_10;
LABEL_19:
    __assert_rtn("bon_eval_fnc_distance_", "bon.c", 986, "n_res == 1");
  }
  v13 = *(_DWORD *)(a5 + 32 * v11 + 16);
  v14 = v13 == 0;
  if (v13)
    v15 = a2;
  else
    v15 = 0;
  v16 = 24;
  if (v14)
    v16 = 0;
  v17 = a2 + v16;
  if (!*(_DWORD *)(a5 + 32 * v12 + 16))
    v17 = 0;
  if (a11 != 1)
    goto LABEL_19;
LABEL_10:
  v18 = *(float **)(a5 + 32 * v11);
  v19 = *(float **)(a5 + 32 * v12);
  v21 = v18[9];
  v20 = v18[10];
  result = v18[11];
  v24 = v19[9];
  v23 = v19[10];
  v25 = v19[11];
  v26 = v21 - v24;
  v27 = v20 - v23;
  v28 = result - v25;
  v29 = sqrtf((float)((float)(v27 * v27) + (float)(v26 * v26)) + (float)(v28 * v28));
  *a1 = *a10 - v29;
  if (a2)
  {
    if (v29 <= 0.000001)
      v29 = 0.000001;
    if (v15)
    {
      *(float *)v15 = v26 / v29;
      *(float *)(v15 + 4) = v27 / v29;
      *(float *)(v15 + 8) = v28 / v29;
      *(_QWORD *)(v15 + 16) = 0;
      *(_DWORD *)(v15 + 12) = 0;
    }
    if (v17)
    {
      *(float *)v17 = (float)(v24 - v21) / v29;
      *(float *)(v17 + 4) = (float)(v23 - v20) / v29;
      result = (float)(v25 - result) / v29;
      *(float *)(v17 + 8) = result;
      *(_QWORD *)(v17 + 16) = 0;
      *(_DWORD *)(v17 + 12) = 0;
    }
  }
  return result;
}

float32x2_t *bon_eval_acc(float32x2_t *result, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t a9, float *a10)
{
  uint64_t v10;
  int v11;
  BOOL v12;
  float *v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  float *v21;
  uint64_t v22;
  float *v23;
  int v24;
  BOOL v25;
  float *v26;
  float *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  float *v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;

  v10 = *a8;
  if (a2)
  {
    v11 = *(_DWORD *)(a5 + 32 * v10 + 16);
    v12 = v11 == 0;
    if (v11)
      v13 = a2;
    else
      v13 = 0;
    v14 = 18;
    if (v12)
      v15 = 0;
    else
      v15 = 18;
    v16 = &a2[v15];
    v17 = a8[1];
    v18 = a8[2];
    v19 = *(_DWORD *)(a5 + 32 * v17 + 16);
    v20 = v19 == 0;
    if (v19)
      v21 = v16;
    else
      v21 = 0;
    if (v20)
      v22 = 0;
    else
      v22 = 18;
    v23 = &v16[v22];
    v24 = *(_DWORD *)(a5 + 32 * v18 + 16);
    v25 = v24 == 0;
    if (v24)
      v26 = v23;
    else
      v26 = 0;
    if (v25)
      v14 = 0;
    v27 = &v23[v14];
    v28 = a8[3];
    if (!*(_DWORD *)(a5 + 32 * v28 + 16))
      v27 = 0;
  }
  else
  {
    v13 = 0;
    v21 = 0;
    v26 = 0;
    v27 = 0;
    v17 = a8[1];
    v18 = a8[2];
    v28 = a8[3];
  }
  v29 = *(_QWORD *)(a5 + 32 * v10);
  v30 = *(_QWORD *)(a5 + 32 * v17);
  v31 = *(_QWORD *)(a5 + 32 * v18);
  v32 = a10[1];
  v33 = *(float **)(a5 + 32 * v28);
  v34 = a10[2];
  v35 = 1.0 / *a10;
  v36 = 1.0 / (float)(v32 - *a10);
  v37 = 1.0 / (float)(v34 - v32);
  v38 = 2.0 / v32;
  v39 = 2.0 / (float)(v34 - *a10);
  v40 = *(float *)(v29 + 32);
  v42 = *(float *)(v30 + 32);
  v41 = *(float *)(v30 + 36);
  v43 = v41 - *(float *)(v29 + 36);
  v44 = *(float *)(v30 + 40);
  v45 = *(float *)(v30 + 44);
  v46 = v44 - *(float *)(v29 + 40);
  v47 = v45 - *(float *)(v29 + 44);
  v48 = (float)(v46 * *(float *)(v29 + 20)) + (float)(*(float *)(v29 + 8) * v43);
  v49 = v48 + (float)(v40 * v47);
  v50 = *(float *)(v31 + 36);
  v51 = v50 - v41;
  v52 = *(float *)(v31 + 40);
  v53 = *(float *)(v31 + 44);
  v54 = v52 - v44;
  v55 = v53 - v45;
  v56 = (float)((float)(v52 - v44) * *(float *)(v30 + 20)) + (float)(*(float *)(v30 + 8) * v51);
  v57 = v56 + (float)(v42 * (float)(v53 - v45));
  v58 = v33[9] - v50;
  v59 = v33[10] - v52;
  v60 = v33[11] - v53;
  v61 = (float)((float)(v59 * *(float *)(v31 + 20)) + (float)(*(float *)(v31 + 8) * v58))
      + (float)(*(float *)(v31 + 32) * v60);
  v62 = vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)(v29 + 12), v46), *(float32x2_t *)v29, v43), *(float32x2_t *)(v29 + 24), v47);
  v63 = vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)(v30 + 12), v54), *(float32x2_t *)v30, v51), *(float32x2_t *)(v30 + 24), v55);
  v64 = vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)(v31 + 12), v59), *(float32x2_t *)v31, v58), *(float32x2_t *)(v31 + 24), v60);
  v65 = vneg_f32(v62);
  v66 = vneg_f32(v63);
  *result = vadd_f32(vsub_f32(vmul_n_f32(vmla_n_f32(vmul_n_f32(v66, v36), v64, v37), v39), vmul_n_f32(vmla_n_f32(vmul_n_f32(v65, v35), v63, v36), v38)), 0);
  result[1].f32[0] = (float)((float)(v39 * (float)((float)(v61 * v37) - (float)(v57 * v36)))
                           - (float)(v38 * (float)((float)(v57 * v36) - (float)(v49 * v35))))
                   + 0.0;
  if (a2)
  {
    if (v13)
    {
      v67 = -(float)(v48 + (float)(v40 * v47));
      v68 = *(float *)v29;
      *v13 = -*(float *)v29;
      v69 = *(float *)(v29 + 4);
      v13[1] = -v69;
      v70 = *(float *)(v29 + 8);
      v13[2] = -v70;
      v71 = *(float *)(v29 + 12);
      v13[3] = -v71;
      v72 = *(float *)(v29 + 16);
      v13[4] = -v72;
      v73 = *(float *)(v29 + 20);
      v13[5] = -v73;
      v74 = *(float *)(v29 + 24);
      v13[6] = -v74;
      v75 = *(float *)(v29 + 28);
      v13[7] = -v75;
      v76 = *(float *)(v29 + 32);
      v77 = -(float)(v35 * v38);
      *v13 = -(float)(v68 * v77);
      v13[1] = -(float)(v69 * v77);
      v13[2] = -(float)(v70 * v77);
      v13[3] = -(float)(v71 * v77);
      v13[4] = -(float)(v72 * v77);
      v13[5] = -(float)(v73 * v77);
      v13[6] = -(float)(v74 * v77);
      v13[7] = -(float)(v75 * v77);
      v13[8] = -(float)(v76 * v77);
      v13[9] = vmuls_lane_f32(v77, v62, 1);
      v13[10] = v77 * v65.f32[0];
      v13[11] = v77 * 0.0;
      v13[12] = v77 * v67;
      v13[13] = v77 * 0.0;
      v13[14] = v77 * v62.f32[0];
      v13[15] = v77 * 0.0;
      v13[16] = v77 * v49;
      v13[17] = vmuls_lane_f32(v77, v65, 1);
    }
    if (v21)
    {
      v78 = -(float)(v56 + (float)(v42 * v55));
      v79 = *(float *)v30;
      *v21 = -*(float *)v30;
      v80 = *(float *)(v30 + 4);
      v21[1] = -v80;
      v81 = *(float *)(v30 + 8);
      v21[2] = -v81;
      v82 = *(float *)(v30 + 12);
      v21[3] = -v82;
      v83 = *(float *)(v30 + 16);
      v21[4] = -v83;
      v84 = *(float *)(v30 + 20);
      v21[5] = -v84;
      v85 = *(float *)(v30 + 24);
      v21[6] = -v85;
      v86 = *(float *)(v30 + 28);
      v21[7] = -v86;
      v87 = *(float *)(v30 + 32);
      v88 = v36 * (float)(v38 + v39);
      v89 = -(float)(v79 * v88);
      v90 = -(float)(v80 * v88);
      *v21 = v89;
      v21[1] = v90;
      v91 = -(float)(v81 * v88);
      v92 = -(float)(v82 * v88);
      v21[2] = v91;
      v21[3] = v92;
      v93 = -(float)(v83 * v88);
      v94 = -(float)(v84 * v88);
      v21[4] = v93;
      v21[5] = v94;
      v95 = -(float)(v85 * v88);
      v96 = -(float)(v86 * v88);
      v21[6] = v95;
      v21[7] = v96;
      v97 = -(float)(v87 * v88);
      v21[8] = v97;
      v21[9] = vmuls_lane_f32(v88, v63, 1);
      v21[10] = v88 * v66.f32[0];
      v21[11] = v88 * 0.0;
      v21[12] = v88 * v78;
      v21[13] = v88 * 0.0;
      v21[14] = v88 * v63.f32[0];
      v21[15] = v88 * 0.0;
      v21[16] = v88 * v57;
      v21[17] = vmuls_lane_f32(v88, v66, 1);
      v98 = -(float)(v35 * v38);
      *v21 = v89 + (float)(*(float *)v29 * v98);
      v21[3] = v92 + (float)(*(float *)(v29 + 12) * v98);
      v21[6] = v95 + (float)(*(float *)(v29 + 24) * v98);
      v21[1] = v90 + (float)(*(float *)(v29 + 4) * v98);
      v21[4] = v93 + (float)(*(float *)(v29 + 16) * v98);
      v21[7] = v96 + (float)(*(float *)(v29 + 28) * v98);
      v21[2] = v91 + (float)(*(float *)(v29 + 8) * v98);
      v21[5] = v94 + (float)(*(float *)(v29 + 20) * v98);
      v21[8] = v97 + (float)(*(float *)(v29 + 32) * v98);
    }
    if (v26)
    {
      v99 = *(float *)v31;
      *v26 = -*(float *)v31;
      v100 = *(float *)(v31 + 4);
      v26[1] = -v100;
      v101 = *(float *)(v31 + 8);
      v26[2] = -v101;
      v102 = *(float *)(v31 + 12);
      v26[3] = -v102;
      v103 = *(float *)(v31 + 16);
      v26[4] = -v103;
      v104 = *(float *)(v31 + 20);
      v26[5] = -v104;
      v105 = *(float *)(v31 + 24);
      v26[6] = -v105;
      v106 = *(float *)(v31 + 28);
      v26[7] = -v106;
      v107 = *(float *)(v31 + 32);
      v108 = -(float)(v37 * v39);
      v109 = -(float)(v99 * v108);
      v110 = -(float)(v100 * v108);
      *v26 = v109;
      v26[1] = v110;
      v111 = -(float)(v101 * v108);
      v112 = -(float)(v102 * v108);
      v26[2] = v111;
      v26[3] = v112;
      v113 = -(float)(v103 * v108);
      v114 = -(float)(v104 * v108);
      v26[4] = v113;
      v26[5] = v114;
      v115 = -(float)(v105 * v108);
      v116 = -(float)(v106 * v108);
      v26[6] = v115;
      v26[7] = v116;
      v117 = -(float)(v107 * v108);
      v26[8] = v117;
      v26[9] = vmuls_lane_f32(v108, v64, 1);
      v26[10] = -(float)(v64.f32[0] * v108);
      v26[11] = v108 * 0.0;
      v26[12] = -(float)(v61 * v108);
      v26[13] = v108 * 0.0;
      v26[14] = v108 * v64.f32[0];
      v26[15] = v108 * 0.0;
      v26[16] = v108 * v61;
      v26[17] = -(float)(v64.f32[1] * v108);
      v118 = (float)(v36 * v39) + (float)(v36 * v38);
      *v26 = v109 + (float)(*(float *)v30 * v118);
      v26[3] = v112 + (float)(*(float *)(v30 + 12) * v118);
      v26[6] = v115 + (float)(*(float *)(v30 + 24) * v118);
      v26[1] = v110 + (float)(*(float *)(v30 + 4) * v118);
      v26[4] = v113 + (float)(*(float *)(v30 + 16) * v118);
      v26[7] = v116 + (float)(*(float *)(v30 + 28) * v118);
      v26[2] = v111 + (float)(*(float *)(v30 + 8) * v118);
      v26[5] = v114 + (float)(*(float *)(v30 + 20) * v118);
      v26[8] = v117 + (float)(*(float *)(v30 + 32) * v118);
    }
    if (v27)
    {
      v119 = -(float)(v37 * v39);
      *v27 = v119 * *(float *)v31;
      v27[9] = 0.0;
      v27[3] = v119 * *(float *)(v31 + 12);
      v27[12] = 0.0;
      v27[6] = v119 * *(float *)(v31 + 24);
      v27[15] = 0.0;
      v27[1] = v119 * *(float *)(v31 + 4);
      v27[10] = 0.0;
      v27[4] = v119 * *(float *)(v31 + 16);
      v27[13] = 0.0;
      v27[7] = v119 * *(float *)(v31 + 28);
      v27[16] = 0.0;
      v27[2] = v119 * *(float *)(v31 + 8);
      v27[11] = 0.0;
      v27[5] = v119 * *(float *)(v31 + 20);
      v27[14] = 0.0;
      v27[8] = v119 * *(float *)(v31 + 32);
      v27[17] = 0.0;
    }
  }
  return result;
}

void bon_eval_fnc_bs(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, uint64_t a9, __int128 *a10, int a11)
{
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  float32x4_t v19;
  __int128 v20;
  float32x4_t v21;
  float32x2_t v22[3];
  _OWORD v23[6];
  _BYTE __src[24];
  float32x4_t v25[4];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v13 = *(_OWORD **)(a5 + 32 * *a8);
  v14 = v13[1];
  v23[0] = *v13;
  v23[1] = v14;
  v15 = *a10;
  v16 = a10[1];
  v23[2] = v13[2];
  v23[3] = v15;
  v17 = a10[2];
  v23[4] = v16;
  v23[5] = v17;
  memset(v22, 0, sizeof(v22));
  bon_eval_fnc_relpose_((uint64_t)__src, v25, 0, (float32x2_t *)v23, v22, 6, a2 != 0);
  if (!a2)
  {
LABEL_5:
    if (a11 < 1)
      return;
    goto LABEL_6;
  }
  if (a11 != 3)
  {
    v18 = v29;
    *(_OWORD *)(a2 + 96) = v28;
    *(_OWORD *)(a2 + 112) = v18;
    *(_OWORD *)(a2 + 128) = v30;
    v19 = v25[3];
    *(float32x4_t *)(a2 + 32) = v25[2];
    *(float32x4_t *)(a2 + 48) = v19;
    v20 = v27;
    *(_OWORD *)(a2 + 64) = v26;
    *(_OWORD *)(a2 + 80) = v20;
    v21 = v25[1];
    *(float32x4_t *)a2 = v25[0];
    *(float32x4_t *)(a2 + 16) = v21;
    goto LABEL_5;
  }
  *(_QWORD *)a2 = *((_QWORD *)&v26 + 1);
  *(_DWORD *)(a2 + 8) = v27;
  *(_QWORD *)(a2 + 12) = v28;
  *(_DWORD *)(a2 + 20) = DWORD2(v28);
  *(_QWORD *)(a2 + 24) = *((_QWORD *)&v29 + 1);
  *(_DWORD *)(a2 + 32) = v30;
LABEL_6:
  memcpy(a1, __src, 4 * a11);
}

int8x8_t *bon_eval_fnc_fm(int8x8_t *result, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8)
{
  uint64_t v8;
  int v9;
  BOOL v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  float *v19;
  float *v20;
  float *v21;
  float *v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float32x2_t v36;
  int8x8_t v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;

  v8 = *a8;
  if (a2)
  {
    v9 = *(_DWORD *)(a5 + 32 * v8 + 16);
    v10 = v9 == 0;
    if (v9)
      v11 = a2;
    else
      v11 = 0;
    v12 = 12;
    if (v10)
      v13 = 0;
    else
      v13 = 12;
    v14 = &a2[v13];
    v15 = a8[1];
    v16 = a8[2];
    v17 = *(_DWORD *)(a5 + 32 * v15 + 16);
    v18 = v17 == 0;
    if (v17)
      v19 = v14;
    else
      v19 = 0;
    if (v18)
      v12 = 0;
    v20 = &v14[v12];
    if (!*(_DWORD *)(a5 + 32 * v16 + 16))
      v20 = 0;
  }
  else
  {
    v11 = 0;
    v19 = 0;
    v20 = 0;
    v15 = a8[1];
    v16 = a8[2];
  }
  v21 = *(float **)(a5 + 32 * v8);
  v22 = *(float **)(a5 + 32 * v15);
  v23 = *(_QWORD *)(a5 + 32 * v16);
  v24 = v22[9] - v21[9];
  v25 = v22[10] - v21[10];
  v26 = v22[11] - v21[11];
  v27 = (float)((float)(v21[3] * v25) + (float)(*v21 * v24)) + (float)(v21[6] * v26);
  v28 = (float)((float)(v25 * v21[4]) + (float)(v21[1] * v24)) + (float)(v21[7] * v26);
  v29 = (float)((float)(v25 * v21[5]) + (float)(v21[2] * v24)) + (float)(v21[8] * v26);
  v30 = *(float *)v23;
  v31 = v27 - *(float *)(v23 + 36);
  v32 = *(float *)(v23 + 12);
  v33 = v28 - *(float *)(v23 + 40);
  v34 = *(float *)(v23 + 24);
  v35 = v29 - *(float *)(v23 + 44);
  v36 = vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)(v23 + 16), v33), *(float32x2_t *)(v23 + 4), v31), *(float32x2_t *)(v23 + 28), v35);
  v37 = (int8x8_t)vneg_f32(v36);
  *result = v37;
  if (a2)
  {
    if (v11)
    {
      v38 = v21[1];
      v39 = v21[2];
      v40 = v21[3];
      v41 = v21[4];
      v42 = v21[5];
      v43 = v21[6];
      v44 = v21[7];
      v45 = v21[8];
      v46 = *(float *)(v23 + 4);
      v47 = *(float *)(v23 + 8);
      v48 = *(float *)(v23 + 16);
      v49 = *(float *)(v23 + 20);
      v50 = *(float *)(v23 + 28);
      v51 = *(float *)(v23 + 32);
      v52 = (float)((float)(0.0 - (float)(v47 * *v21)) - (float)(v49 * v38)) - (float)(v51 * v39);
      *v11 = (float)((float)(0.0 - (float)(v46 * *v21)) - (float)(v48 * v38)) - (float)(v50 * v39);
      v11[1] = v52;
      v11[2] = (float)((float)(0.0 - (float)(v46 * v40)) - (float)(v48 * v41)) - (float)(v50 * v42);
      v11[3] = (float)((float)(0.0 - (float)(v47 * v40)) - (float)(v49 * v41)) - (float)(v51 * v42);
      v11[4] = (float)((float)(0.0 - (float)(v46 * v43)) - (float)(v48 * v44)) - (float)(v50 * v45);
      v11[5] = (float)((float)(0.0 - (float)(v47 * v43)) - (float)(v49 * v44)) - (float)(v51 * v45);
      v11[6] = (float)((float)((float)(v46 * v28) + 0.0) - (float)(v48 * v27)) + (float)(v50 * 0.0);
      v11[7] = (float)((float)((float)(v47 * v28) + 0.0) - (float)(v49 * v27)) + (float)(v51 * 0.0);
      v11[8] = (float)((float)(0.0 - (float)(v46 * v29)) + (float)(v48 * 0.0)) + (float)(v50 * v27);
      v11[9] = (float)((float)(0.0 - (float)(v47 * v29)) + (float)(v49 * 0.0)) + (float)(v51 * v27);
      v11[10] = (float)((float)((float)(v46 * 0.0) + 0.0) + (float)(v48 * v29)) - (float)(v50 * v28);
      v11[11] = (float)((float)((float)(v47 * 0.0) + 0.0) + (float)(v49 * v29)) - (float)(v51 * v28);
    }
    if (v19)
    {
      v53 = v21[1];
      v54 = *(float *)(v23 + 4);
      v55 = *(float *)(v23 + 8);
      v56 = *(float *)(v23 + 16);
      v57 = *(float *)(v23 + 20);
      v58 = *(float *)(v23 + 28);
      v59 = *(float *)(v23 + 32);
      v60 = v21[2];
      v61 = v21[3];
      v62 = (float)((float)((float)(*v21 * v54) + 0.0) + (float)(v53 * v56)) + (float)(v60 * v58);
      v63 = (float)((float)((float)(*v21 * v55) + 0.0) + (float)(v53 * v57)) + (float)(v60 * v59);
      v64 = v21[4];
      v65 = v21[5];
      v66 = (float)((float)((float)(v61 * v54) + 0.0) + (float)(v64 * v56)) + (float)(v65 * v58);
      v67 = (float)((float)((float)(v61 * v55) + 0.0) + (float)(v64 * v57)) + (float)(v65 * v59);
      v68 = v21[6];
      v69 = v21[7];
      v70 = v21[8];
      *v19 = v62;
      v19[1] = v63;
      v19[2] = v66;
      v19[3] = v67;
      v19[4] = (float)((float)((float)(v68 * v54) + 0.0) + (float)(v69 * v56)) + (float)(v70 * v58);
      v19[5] = (float)((float)((float)(v68 * v55) + 0.0) + (float)(v69 * v57)) + (float)(v70 * v59);
      *((_QWORD *)v19 + 4) = 0;
      *((_QWORD *)v19 + 5) = 0;
      *((_QWORD *)v19 + 3) = 0;
    }
    if (v20)
    {
      v71 = (float)((float)(v32 * v33) + (float)(v30 * v31)) + (float)(v34 * v35);
      *v20 = -v71;
      v20[1] = 0.0;
      v20[2] = 0.0;
      v20[3] = v71;
      *((int8x8_t *)v20 + 2) = vext_s8((int8x8_t)v36, v37, 4uLL);
    }
  }
  return result;
}

float bon_upd_cs(uint64_t a1, float *a2)
{
  float *v2;
  float v3;
  float v4;
  float v5;
  __float2 v6;
  __float2 v7;
  __float2 v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float result;

  v2 = *(float **)a1;
  if (*(_DWORD *)(a1 + 16) == 6)
  {
    v3 = v2[10];
    v2[9] = *a2 + v2[9];
    v2[10] = a2[1] + v3;
    v2[11] = a2[2] + v2[11];
    a2 += 3;
  }
  v4 = a2[1];
  v5 = a2[2];
  v6 = __sincosf_stret(*a2);
  v7 = __sincosf_stret(v4);
  v8 = __sincosf_stret(v5);
  v9 = (float)((float)(v6.__cosval * v7.__sinval) * v8.__sinval) - (float)(v6.__sinval * v8.__cosval);
  v10 = (float)(v6.__sinval * v8.__sinval) + (float)((float)(v6.__cosval * v7.__sinval) * v8.__cosval);
  v11 = (float)(v6.__cosval * v8.__cosval) + (float)((float)(v6.__sinval * v7.__sinval) * v8.__sinval);
  v12 = (float)((float)(v6.__sinval * v7.__sinval) * v8.__cosval) - (float)(v6.__cosval * v8.__sinval);
  v13 = *v2;
  v14 = v2[1];
  v15 = v2[2];
  v16 = v2[3];
  v17 = v2[4];
  v18 = v2[5];
  v19 = v2[6];
  v20 = v2[7];
  v21 = v2[8];
  v22 = (float)((float)((float)(*v2 * v9) + 0.0) + (float)(v14 * v11))
      + (float)(v15 * (float)(v7.__cosval * v8.__sinval));
  *v2 = (float)((float)((float)(*v2 * (float)(v6.__cosval * v7.__cosval)) + 0.0)
              + (float)(v14 * (float)(v6.__sinval * v7.__cosval)))
      - (float)(v15 * v7.__sinval);
  v2[1] = v22;
  v2[2] = (float)((float)((float)(v13 * v10) + 0.0) + (float)(v14 * v12))
        + (float)(v15 * (float)(v7.__cosval * v8.__cosval));
  v2[3] = (float)((float)((float)(v16 * (float)(v6.__cosval * v7.__cosval)) + 0.0)
                + (float)(v17 * (float)(v6.__sinval * v7.__cosval)))
        - (float)(v18 * v7.__sinval);
  v2[4] = (float)((float)((float)(v16 * v9) + 0.0) + (float)(v17 * v11))
        + (float)(v18 * (float)(v7.__cosval * v8.__sinval));
  v2[5] = (float)((float)((float)(v16 * v10) + 0.0) + (float)(v17 * v12))
        + (float)(v18 * (float)(v7.__cosval * v8.__cosval));
  v2[6] = (float)((float)((float)(v19 * (float)(v6.__cosval * v7.__cosval)) + 0.0)
                + (float)(v20 * (float)(v6.__sinval * v7.__cosval)))
        - (float)(v21 * v7.__sinval);
  v2[7] = (float)((float)((float)(v19 * v9) + 0.0) + (float)(v20 * v11))
        + (float)(v21 * (float)(v7.__cosval * v8.__sinval));
  result = (float)((float)((float)(v19 * v10) + 0.0) + (float)(v20 * v12))
         + (float)(v21 * (float)(v7.__cosval * v8.__cosval));
  v2[8] = result;
  return result;
}

float bon2(int32x2_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, int *a7, uint64_t a8, int a9, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  int32x2_t *v18;
  int64x2_t v19;
  uint64_t v20;
  int64x2_t v21;
  int32x2_t v22;
  int32x2_t v23;
  int32x2_t v24;
  uint64_t v25;
  int32x2_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int32 *v29;
  float32x4_t *v30;
  uint64_t v31;
  __int32 v32;
  int v33;
  int32x2_t *v34;
  uint64_t v35;
  int v36;
  int v37;
  const void **v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  __darwin_time_t v43;
  uint64_t v44;
  __darwin_suseconds_t v45;
  uint64_t v46;
  int32x2_t v47;
  int32x2_t *v48;
  uint64_t v49;
  int32x2_t v50;
  int32x2_t v51;
  int32x2_t v52;
  int32x2_t v53;
  int32x2_t v54;
  uint64_t v55;
  int32x2_t *v56;
  int v57;
  uint64_t *v58;
  float *v59;
  size_t v60;
  float32x4_t *v61;
  int v62;
  float v63;
  float v64;
  double v65;
  __int128 v66;
  int v67;
  int v68;
  uint64_t v69;
  BOOL v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  float32x4_t v76;
  uint64_t v77;
  float32x4_t *v78;
  float32x4_t v79;
  uint64_t v80;
  float *v81;
  __darwin_time_t v82;
  uint64_t v83;
  uint64_t v84;
  int32x2_t v85;
  int32x2_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  float32x4_t v90;
  float32x4_t v91;
  uint64_t v92;
  float32x4_t *v93;
  float32x4_t *v94;
  float32x4_t v95;
  float32x4_t v96;
  uint64_t v97;
  uint64_t v98;
  float *v99;
  float *v100;
  float v101;
  float v102;
  float v103;
  float v104;
  int32x2_t *v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  float v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  float32x4_t *v113;
  float32x4_t v114;
  float32x4_t v115;
  uint64_t v116;
  float *v117;
  void **v118;
  uint64_t v119;
  char *v120;
  int32x2_t v121;
  int32x2_t v122;
  char v123;
  uint64_t v124;
  float32x4_t v125;
  float32x4_t v126;
  uint64_t v127;
  float32x4_t *v128;
  float32x4_t *v129;
  float32x4_t v130;
  float32x4_t v131;
  uint64_t v132;
  uint64_t v133;
  float *v134;
  float *v135;
  float v136;
  float v137;
  float v138;
  float v139;
  uint64_t v140;
  int32x2_t *v141;
  int v142;
  float v143;
  void **v144;
  uint64_t v145;
  char *v146;
  __int128 v147;
  float v149;
  const void **v150;
  uint64_t v151;
  char *v152;
  __int128 v153;
  float v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int64x2_t v158;
  int64x2_t v159;
  uint64_t v160;
  int32x2_t *v161;
  int32x2_t *v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  int *v166;
  uint64_t v167;
  _OWORD *v168;
  int v169;
  int v170;
  uint64_t v171;
  int64x2_t v172;
  uint64_t v173;
  float32x4_t *v174;
  int64x2_t v175;
  int64x2_t v176;
  uint64_t v177;
  uint64_t v178;
  float *v179;
  float v180;
  uint64_t v181;
  int v182;
  int v183;
  BOOL v184;
  uint64_t v185;
  uint64_t v186;
  _DWORD *v187;
  int v188;
  uint64_t v189;
  _OWORD *v190;
  _OWORD *v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  int32x2_t *v195;
  int32x2_t *v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  int *v200;
  uint64_t v201;
  _OWORD *v202;
  uint64_t v203;
  int v204;
  int v205;
  BOOL v206;
  uint64_t v207;
  uint64_t v208;
  _DWORD *v209;
  int v210;
  uint64_t v211;
  _OWORD *v212;
  _OWORD *v213;
  __int128 v214;
  __int32 *v215;
  float32x4_t *v216;
  __int32 v217;
  uint64_t v219;
  uint64_t v220;
  void *__b;
  int v222;
  int v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  char v228;
  uint64_t v229;
  char *__dst;
  uint64_t v231;
  char v232;
  __darwin_time_t v234;
  size_t __n;
  void *__src;
  int64x2_t v238;
  int v239;
  int64x2_t v240;
  float *v241;
  __darwin_time_t v242;
  float32x4_t *v244;
  void **v245;
  uint64_t v247;
  float32x4_t *v248;
  _QWORD v249[2];
  size_t v250;
  uint64_t v251;
  float32x4_t *v252;
  void *v253;
  int v254;
  int v255;
  timeval v256;
  __darwin_suseconds_t v257;
  int v258;

  v13 = a2;
  v249[0] = a1;
  v250 = 0;
  v14 = a2;
  if ((int)a2 < 1)
  {
    v16 = 0;
  }
  else
  {
    if (a2 >= 5)
    {
      v17 = a2 & 3;
      if (!v17)
        v17 = 4;
      v15 = a2 - v17;
      v18 = a1 + 9;
      v19 = 0uLL;
      v20 = v15;
      v21 = 0uLL;
      do
      {
        v22 = vzip1_s32(v18[-8], v18[-4]);
        v23 = v18[4];
        v24 = *v18;
        v18 += 16;
        v19 = vaddw_s32(v19, v22);
        v21 = vaddw_s32(v21, vzip1_s32(v24, v23));
        v20 -= 4;
      }
      while (v20);
      v16 = vaddvq_s64(vaddq_s64(v21, v19));
    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
    v25 = a2 - v15;
    v26 = &a1[4 * v15 + 1];
    do
    {
      v27 = v26->i32[0];
      v26 += 4;
      v16 += v27;
      --v25;
    }
    while (v25);
    v250 = v16;
  }
  __dst = (char *)malloc_type_malloc(v16, 0x57329693uLL);
  v249[1] = __dst;
  v244 = (float32x4_t *)malloc_type_malloc(4 * a4, 0x100004052888210uLL);
  v252 = v244;
  __n = 4 * a4;
  __src = malloc_type_malloc(__n, 0x100004052888210uLL);
  v253 = __src;
  v28 = a4;
  if (a4 >= 1)
  {
    v29 = (__int32 *)(a3 + 48);
    v30 = v244;
    v31 = a4;
    do
    {
      v32 = *v29;
      v29 += 20;
      v30->i32[0] = v32;
      v30 = (float32x4_t *)((char *)v30 + 4);
      --v31;
    }
    while (v31);
  }
  v251 = v13;
  v254 = a4;
  v255 = a6;
  if ((int)v13 >= 1)
  {
    v33 = 0;
    v34 = a1 + 2;
    v35 = v14;
    do
    {
      v36 = v34->i32[0];
      if (v34->i32[0])
        v37 = v33;
      else
        v37 = -1;
      v34[-1].i32[1] = v37;
      v33 += v36;
      v34 += 4;
      --v35;
    }
    while (v35);
    v38 = (const void **)&a1[1];
    v39 = v14;
    v40 = __dst;
    do
    {
      memcpy(v40, *(v38 - 1), *(int *)v38);
      v40 += *(int *)v38;
      v38 += 4;
      --v39;
    }
    while (v39);
  }
  memcpy(__src, v244, __n);
  if (a7[4])
    v41 = 0;
  else
    v41 = a4;
  __b = malloc_type_malloc(4 * (int)v41, 0x100004052888210uLL);
  LODWORD(v42) = a7[3];
  v224 = v42;
  v256.tv_sec = 0;
  *(_QWORD *)&v256.tv_usec = 0;
  if (gettimeofday(&v256, 0))
    goto LABEL_218;
  v43 = v256.tv_usec + 1000000 * v256.tv_sec;
  if ((double)v43 / 1000000.0 <= 1514764800.0)
    goto LABEL_218;
  v239 = *a7;
  if ((int)v41 >= 1)
    memset_pattern16(__b, &unk_210BCC000, 4 * v41);
  v220 = a8;
  v219 = v43;
  if ((int)v13 < 1)
  {
    v45 = 0;
  }
  else
  {
    if (v13 >= 5)
    {
      v46 = v14 & 3;
      if ((v14 & 3) == 0)
        v46 = 4;
      v44 = v14 - v46;
      v47 = 0;
      v48 = a1 + 10;
      v49 = v44;
      v50 = 0;
      do
      {
        v51 = vzip1_s32(v48[-8], v48[-4]);
        v52 = v48[4];
        v53 = *v48;
        v48 += 16;
        v47 = vadd_s32(v51, v47);
        v50 = vadd_s32(vzip1_s32(v53, v52), v50);
        v49 -= 4;
      }
      while (v49);
      v54 = vadd_s32(v50, v47);
      v45 = vpadd_s32(v54, v54).u32[0];
    }
    else
    {
      v44 = 0;
      v45 = 0;
    }
    v55 = v14 - v44;
    v56 = &a1[4 * v44 + 2];
    do
    {
      v57 = v56->i32[0];
      v56 += 4;
      v45 += v57;
      --v55;
    }
    while (v55);
  }
  v247 = (v45 + v41);
  v58 = cholskyf_create((uint64_t)__b, v41, v45 + (int)v41);
  v241 = a7[4] ? 0 : (float *)malloc_type_malloc(__n, 0x100004052888210uLL);
  v59 = (float *)malloc_type_malloc(4 * (int)v247 * v45, 0x100004052888210uLL);
  v60 = 4 * (int)v247;
  v248 = (float32x4_t *)malloc_type_malloc(v60, 0x100004052888210uLL);
  v61 = (float32x4_t *)malloc_type_malloc(v60, 0x100004052888210uLL);
  v256.tv_sec = 0;
  *(_QWORD *)&v256.tv_usec = 0;
  if (gettimeofday(&v256, 0)
    || (v242 = v256.tv_usec + 1000000 * v256.tv_sec, (double)v242 / 1000000.0 <= 1514764800.0))
  {
LABEL_218:
    __assert_rtn("u_timel", "arch_dtime.c", 118, "ret == 0 && result/1e6 > 1514764800L");
  }
  v256.tv_sec = (__darwin_time_t)v59;
  v62 = v45 + v41;
  v256.tv_usec = v45;
  *(&v256.tv_usec + 1) = v45 + v41;
  v257 = v45;
  v258 = 0;
  v63 = linearize((uint64_t)v249, a3);
  v64 = v63;
  if (v239)
  {
    v65 = sqrtf(v63);
    v242 = toc_explicit(3, v242, 1, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/pwin/core/base/bon.c", 801, (uint64_t)"solve", "linearize %f", SLOBYTE(v65));
  }
  v66 = v224;
  if (fabsf(v64) == INFINITY)
  {
    v154 = sqrtf(v64);
    log_msg(2, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/pwin/core/base/bon.c", 803, (uint64_t)"solve", "%s: rmse is %f", "solve", v154);
    if (a4 >= 1)
      goto LABEL_215;
    goto LABEL_217;
  }
  v67 = a7[1];
  v245 = (void **)v58;
  v234 = (__darwin_time_t)v59;
  v68 = 0;
  if (v67 < 1)
    goto LABEL_156;
  v69 = (int)v13;
  v231 = v41 & 0xFFFFFFF8;
  v71 = v244 < (float32x4_t *)&v61->f32[v41] && v61 < (float32x4_t *)&v244->f32[v41];
  v228 = v71;
  while (1)
  {
LABEL_60:
    v232 = v68;
    if (*(float *)&v66 > 0.0)
    {
      if (v45 >= 1)
      {
        v72 = 0;
        v73 = v41 * v45;
        v74 = v45;
        do
        {
          v59[v72 + v73] = *(float *)&v66 + v59[v72 + v73];
          ++v72;
          v73 += v45;
          --v74;
        }
        while (v74);
      }
      if ((int)v41 >= 1)
      {
        if (v41 < 8)
        {
          v75 = 0;
LABEL_70:
          v80 = v41 - v75;
          v81 = &v241[v75];
          do
          {
            *v81 = *(float *)&v66 + *v81;
            ++v81;
            --v80;
          }
          while (v80);
          goto LABEL_72;
        }
        v76 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v66, 0);
        v77 = v41 & 0xFFFFFFF8;
        v78 = (float32x4_t *)(v241 + 4);
        do
        {
          v79 = vaddq_f32(v76, *v78);
          v78[-1] = vaddq_f32(v76, v78[-1]);
          *v78 = v79;
          v78 += 2;
          v77 -= 8;
        }
        while (v77);
        v75 = v41 & 0xFFFFFFF8;
        if (v231 != v41)
          goto LABEL_70;
      }
    }
LABEL_72:
    v222 = v67;
    v223 = v68 + 1;
    v225 = v66;
    factorizef(v58, v241, (uint64_t)__b, v59, 0, 0, 0.0);
    if (v239)
    {
      v82 = toc_explicit(3, v242, 1, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/pwin/core/base/bon.c", 817, (uint64_t)"solve", "%d: cholskyf_factorize", v68);
      v83 = (uint64_t)v58;
      v84 = v82;
      cholskyf_solve(v83, (uint64_t)v61, (uint64_t)v248);
      v242 = toc_explicit(3, v84, 1, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/pwin/core/base/bon.c", 821, (uint64_t)"solve", "%d: cholskyf_solve", v68);
      v87 = v13;
      if ((int)v41 < 1)
        goto LABEL_91;
    }
    else
    {
      cholskyf_solve((uint64_t)v58, (uint64_t)v61, (uint64_t)v248);
      v87 = v13;
      if ((int)v41 < 1)
        goto LABEL_91;
    }
    v85.i32[0] = a7[6];
    v86.i32[0] = a7[7];
    v88 = v228;
    if (v41 < 8)
      v88 = 1;
    if ((v88 & 1) != 0)
    {
      v89 = 0;
    }
    else
    {
      v90 = (float32x4_t)vdupq_lane_s32(v85, 0);
      v91 = (float32x4_t)vdupq_lane_s32(v86, 0);
      v92 = v41 & 0xFFFFFFF8;
      v93 = v244 + 1;
      v94 = v61 + 1;
      do
      {
        v95 = vaddq_f32(v94[-1], v93[-1]);
        v96 = vaddq_f32(*v94, *v93);
        v93[-1] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v90, v95), (int8x16_t)v90, vbslq_s8((int8x16_t)vcgtq_f32(v95, v91), (int8x16_t)v91, (int8x16_t)v95));
        *(int8x16_t *)v93 = vbslq_s8((int8x16_t)vcgtq_f32(v90, v96), (int8x16_t)v90, vbslq_s8((int8x16_t)vcgtq_f32(v96, v91), (int8x16_t)v91, (int8x16_t)v96));
        v94 += 2;
        v93 += 2;
        v92 -= 8;
      }
      while (v92);
      v89 = v41 & 0xFFFFFFF8;
      if (v231 == v41)
        goto LABEL_91;
    }
    v97 = v41 - v89;
    v98 = v89;
    v99 = &v244->f32[v89];
    v100 = &v61->f32[v98];
    do
    {
      v101 = *v100++;
      v102 = v101 + *v99;
      if (v102 <= *(float *)v86.i32)
        v103 = v102;
      else
        v103 = *(float *)v86.i32;
      if (v102 >= *(float *)v85.i32)
        v104 = v103;
      else
        v104 = *(float *)v85.i32;
      *v99++ = v104;
      --v97;
    }
    while (v97);
LABEL_91:
    v105 = a1;
    v106 = v69;
    v107 = v41;
    if ((int)v87 >= 1)
    {
      do
      {
        if (v105[1].i32[1] != -1)
        {
          ((void (*)(int32x2_t *, uint64_t))v105[3])(v105, (uint64_t)v61->i64 + 4 * v107);
          v107 += v105[2].i32[0];
        }
        v105 += 4;
        --v106;
      }
      while (v106);
    }
    v256.tv_sec = (__darwin_time_t)v59;
    v108 = (v45 + v41);
    v256.tv_usec = v45;
    *(&v256.tv_usec + 1) = v45 + v41;
    v257 = v45;
    v258 = 0;
    v109 = linearize((uint64_t)v249, a3);
    if (v239)
      v242 = toc_explicit(3, v242, 1, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/pwin/core/base/bon.c", 828, (uint64_t)"solve", "%d: linearize new %f (%f) %d", v232);
    v13 = v87;
    if (v109 >= v64)
      break;
    v149 = 0.5;
    v64 = v109;
    if ((int)v87 >= 1)
    {
LABEL_148:
      v150 = (const void **)&a1[1];
      v151 = v69;
      v152 = __dst;
      do
      {
        memcpy(v152, *(v150 - 1), *(int *)v150);
        v152 += *(int *)v150;
        v150 += 4;
        --v151;
      }
      while (v151);
    }
LABEL_150:
    v153 = v225;
    *(float *)&v153 = *(float *)&v225 * v149;
    v227 = v153;
    memcpy(__src, v244, __n);
    v66 = v227;
    v67 = a7[1];
    v68 = v223;
    v58 = (uint64_t *)v245;
    v62 = v45 + v41;
    if (v223 >= v67)
      goto LABEL_156;
  }
  v110 = 0;
  while (v110 < a7[2])
  {
    if ((int)v108 < 1)
      goto LABEL_109;
    if (v108 < 8)
    {
      v111 = 0;
LABEL_107:
      v116 = v108 - v111;
      v117 = &v61->f32[v111];
      do
      {
        *v117 = *v117 * 0.5;
        ++v117;
        --v116;
      }
      while (v116);
      goto LABEL_109;
    }
    v112 = v247 & 0xFFFFFFF8;
    v113 = v61 + 1;
    v114.i64[0] = 0x3F0000003F000000;
    v114.i64[1] = 0x3F0000003F000000;
    do
    {
      v115 = vmulq_f32(*v113, v114);
      v113[-1] = vmulq_f32(v113[-1], v114);
      *v113 = v115;
      v113 += 2;
      v112 -= 8;
    }
    while (v112);
    v111 = v247 & 0xFFFFFFF8;
    if (v111 != v108)
      goto LABEL_107;
LABEL_109:
    if ((int)v13 >= 1)
    {
      v118 = (void **)&a1[1];
      v119 = v69;
      v120 = __dst;
      do
      {
        memcpy(*(v118 - 1), v120, *(int *)v118);
        v120 += *(int *)v118;
        v118 += 4;
        --v119;
      }
      while (v119);
    }
    memcpy(v244, __src, __n);
    if ((int)v41 < 1)
      goto LABEL_128;
    v121.i32[0] = a7[6];
    v122.i32[0] = a7[7];
    v123 = v228;
    if (v41 < 8)
      v123 = 1;
    if ((v123 & 1) != 0)
    {
      v124 = 0;
LABEL_120:
      v132 = v41 - v124;
      v133 = v124;
      v134 = &v244->f32[v124];
      v135 = &v61->f32[v133];
      do
      {
        v136 = *v135++;
        v137 = v136 + *v134;
        if (v137 <= *(float *)v122.i32)
          v138 = v137;
        else
          v138 = *(float *)v122.i32;
        if (v137 >= *(float *)v121.i32)
          v139 = v138;
        else
          v139 = *(float *)v121.i32;
        *v134++ = v139;
        --v132;
      }
      while (v132);
      goto LABEL_128;
    }
    v125 = (float32x4_t)vdupq_lane_s32(v121, 0);
    v126 = (float32x4_t)vdupq_lane_s32(v122, 0);
    v127 = v41 & 0xFFFFFFF8;
    v128 = v244 + 1;
    v129 = v61 + 1;
    do
    {
      v130 = vaddq_f32(v129[-1], v128[-1]);
      v131 = vaddq_f32(*v129, *v128);
      v128[-1] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v125, v130), (int8x16_t)v125, vbslq_s8((int8x16_t)vcgtq_f32(v130, v126), (int8x16_t)v126, (int8x16_t)v130));
      *(int8x16_t *)v128 = vbslq_s8((int8x16_t)vcgtq_f32(v125, v131), (int8x16_t)v125, vbslq_s8((int8x16_t)vcgtq_f32(v131, v126), (int8x16_t)v126, (int8x16_t)v131));
      v129 += 2;
      v128 += 2;
      v127 -= 8;
    }
    while (v127);
    v124 = v41 & 0xFFFFFFF8;
    if (v231 != v41)
      goto LABEL_120;
LABEL_128:
    if ((int)v87 >= 1)
    {
      v140 = 0;
      v141 = a1;
      v142 = v41;
      do
      {
        if (v141[1].i32[1] != -1)
        {
          ((void (*)(int32x2_t *, uint64_t))v141[3])(v141, (uint64_t)v61->i64 + 4 * v142);
          v142 += v141[2].i32[0];
        }
        ++v140;
        v141 += 4;
      }
      while (v140 < v69);
    }
    ++v110;
    v59 = (float *)v234;
    v256.tv_sec = v234;
    v108 = (v45 + v41);
    v256.tv_usec = v45;
    *(&v256.tv_usec + 1) = v45 + v41;
    v257 = v45;
    v258 = 0;
    v143 = linearize((uint64_t)v249, a3);
    if (v239)
      v242 = toc_explicit(3, v242, 1, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/pwin/core/base/bon.c", 837, (uint64_t)"solve", "%d: retry %d linearize new %f (%f) %d", v232);
    v13 = v87;
    if (v143 < v64)
    {
      v149 = 2.0;
      v64 = v143;
      if ((int)v87 < 1)
        goto LABEL_150;
      goto LABEL_148;
    }
  }
  if ((int)v13 >= 1)
  {
    v144 = (void **)&a1[1];
    v145 = v69;
    v146 = __dst;
    do
    {
      memcpy(*(v144 - 1), v146, *(int *)v144);
      v146 += *(int *)v144;
      v144 += 4;
      --v145;
    }
    while (v145);
  }
  v147 = v225;
  *(float *)&v147 = *(float *)&v147 + *(float *)&v147;
  v226 = v147;
  memcpy(v244, __src, __n);
  v66 = v226;
  v68 = v223;
  if (*(float *)&v226 == 0.0 || v223 >= v222)
  {
    v58 = (uint64_t *)v245;
    v62 = v45 + v41;
    if (*(float *)&v226 == 0.0)
      goto LABEL_156;
    v67 = a7[1];
    if (v223 >= v67)
      goto LABEL_156;
    goto LABEL_60;
  }
  v256.tv_sec = (__darwin_time_t)v59;
  v62 = v45 + v41;
  v256.tv_usec = v45;
  *(&v256.tv_usec + 1) = v45 + v41;
  v257 = v45;
  v258 = 0;
  linearize((uint64_t)v249, a3);
  if (v239)
    v242 = toc_explicit(3, v242, 1, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/pwin/core/base/bon.c", 856, (uint64_t)"solve", "%d: revert linearize", v232);
  v58 = (uint64_t *)v245;
  v66 = v226;
  v67 = a7[1];
  if (v223 < v67)
    goto LABEL_60;
LABEL_156:
  if (v239)
    toc_explicit(3, v219, 1, 0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/pwin/core/base/bon.c", 866, (uint64_t)"solve", "bon solve %d tracks, %d active cams (%d iter)", a4);
  v155 = v220;
  if (a9 >= 1)
  {
    if (v62 > 0)
    {
      v156 = 0;
      v157 = v62 & 0xFFFFFFF8;
      v158 = vdupq_n_s64(4uLL);
      v159 = vdupq_n_s64(8uLL);
      v238 = v159;
      v240 = v158;
      while (1)
      {
        v161 = &a1[4 * *(int *)(v155 + 4 * v156)];
        v163 = v161[2].i32[0];
        v162 = v161 + 2;
        v160 = v163;
        if (v163 >= 1)
          break;
LABEL_162:
        a10 += 4 * (v160 * v160);
        if (++v156 == a9)
          goto LABEL_214;
      }
      v229 = v156;
      v164 = 0;
      v165 = 0;
      v166 = (int *)&a1[4 * *(int *)(v155 + 4 * v156) + 1] + 1;
      v167 = 4 * v160;
      v168 = (_OWORD *)(a10 + 16);
      v169 = a4;
      while (2)
      {
        v170 = *v166;
        if (v247 >= 8)
        {
          v172 = vdupq_n_s64((v165 + a4 + v170));
          v173 = v157;
          v174 = v248 + 1;
          v175 = (int64x2_t)xmmword_210BCAB60;
          v176 = (int64x2_t)xmmword_210BCABC0;
          do
          {
            v174[-1] = vcvtq_f32_u32(vmovl_u16((uint16x4_t)vand_s8((int8x8_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v175, v172), (int32x4_t)vceqq_s64(v176, v172))), (int8x8_t)0x1000100010001)));
            *v174 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)vand_s8((int8x8_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(vaddq_s64(v175, v158), v172), (int32x4_t)vceqq_s64(vaddq_s64(v176, v158), v172))), (int8x8_t)0x1000100010001)));
            v176 = vaddq_s64(v176, v159);
            v175 = vaddq_s64(v175, v159);
            v174 += 2;
            v173 -= 8;
          }
          while (v173);
          v171 = v157;
          if (v157 != v247)
            goto LABEL_171;
        }
        else
        {
          v171 = 0;
LABEL_171:
          v177 = v247 - v171;
          v178 = (v170 + v169) - v171;
          v179 = &v248->f32[v171];
          do
          {
            if (v178)
              v180 = 0.0;
            else
              v180 = 1.0;
            *v179++ = v180;
            --v178;
            --v177;
          }
          while (v177);
        }
        cholskyf_solve((uint64_t)v245, (uint64_t)v61, (uint64_t)v248);
        v181 = v162->u32[0];
        if ((int)v181 >= 1)
        {
          v182 = *v166;
          if (v181 < 0x10
            || ((v183 = v182 + a4, v182 + a4 + (int)v181 - 1 >= v182 + a4)
              ? (v184 = (unint64_t)(v181 - 1) >> 32 == 0)
              : (v184 = 0),
                !v184 || (unint64_t)(a10 + v167 * v165 - ((_QWORD)v61 + 4 * v183)) < 0x20))
          {
            v185 = 0;
            goto LABEL_185;
          }
          v185 = v181 & 0x7FFFFFF8;
          v189 = v181 & 0xFFFFFFF8;
          v190 = v168;
          do
          {
            v191 = (_OWORD *)&v61->f32[v183];
            v192 = v191[1];
            *(v190 - 1) = *v191;
            *v190 = v192;
            v190 += 2;
            v183 += 8;
            v189 -= 8;
          }
          while (v189);
          if (v185 != v181)
          {
LABEL_185:
            v186 = v181 - v185;
            v187 = (_DWORD *)(a10 + 4 * (v185 + v164));
            v188 = a4 + v182 + v185;
            do
            {
              *v187++ = v61->i32[v188++];
              --v186;
            }
            while (v186);
          }
        }
        ++v165;
        ++v169;
        v168 = (_OWORD *)((char *)v168 + v167);
        v164 += v160;
        v159 = v238;
        v158 = v240;
        if (v165 >= (int)v181)
        {
          v155 = v220;
          v156 = v229;
          v59 = (float *)v234;
          LODWORD(v160) = a1[4 * *(int *)(v220 + 4 * v229) + 2].i32[0];
          goto LABEL_162;
        }
        continue;
      }
    }
    v193 = 0;
    while (1)
    {
      v195 = &a1[4 * *(int *)(v155 + 4 * v193)];
      v197 = v195[2].i32[0];
      v196 = v195 + 2;
      v194 = v197;
      if (v197 >= 1)
        break;
LABEL_194:
      a10 += 4 * (v194 * v194);
      if (++v193 == a9)
        goto LABEL_214;
    }
    v198 = 0;
    v199 = 0;
    v200 = (int *)&a1[4 * *(int *)(v155 + 4 * v193) + 1] + 1;
    v201 = 4 * v194;
    v202 = (_OWORD *)(a10 + 16);
    while (2)
    {
      cholskyf_solve((uint64_t)v245, (uint64_t)v61, (uint64_t)v248);
      v203 = v196->u32[0];
      if ((int)v203 >= 1)
      {
        v204 = *v200;
        if (v203 < 0x10
          || ((v205 = v204 + a4, v204 + a4 + (int)v203 - 1 >= v204 + a4)
            ? (v206 = (unint64_t)(v203 - 1) >> 32 == 0)
            : (v206 = 0),
              !v206 || (unint64_t)(a10 + v201 * v199 - ((_QWORD)v61 + 4 * v205)) < 0x20))
        {
          v207 = 0;
          goto LABEL_207;
        }
        v207 = v203 & 0x7FFFFFF8;
        v211 = v203 & 0xFFFFFFF8;
        v212 = v202;
        do
        {
          v213 = (_OWORD *)&v61->f32[v205];
          v214 = v213[1];
          *(v212 - 1) = *v213;
          *v212 = v214;
          v212 += 2;
          v205 += 8;
          v211 -= 8;
        }
        while (v211);
        if (v207 != v203)
        {
LABEL_207:
          v208 = v203 - v207;
          v209 = (_DWORD *)(a10 + 4 * (v207 + v198));
          v210 = a4 + v204 + v207;
          do
          {
            *v209++ = v61->i32[v210++];
            --v208;
          }
          while (v208);
        }
      }
      ++v199;
      v202 = (_OWORD *)((char *)v202 + v201);
      v198 += v194;
      if (v199 >= (int)v203)
      {
        v155 = v220;
        LODWORD(v194) = a1[4 * *(int *)(v220 + 4 * v193) + 2].i32[0];
        goto LABEL_194;
      }
      continue;
    }
  }
LABEL_214:
  free(v245[2]);
  free(*v245);
  free(v245);
  free(__b);
  free(v241);
  free(v248);
  free(v61);
  free(v59);
  v154 = sqrtf(v64);
  v28 = a4;
  if (a4 >= 1)
  {
LABEL_215:
    v215 = (__int32 *)(a3 + 48);
    v216 = v244;
    do
    {
      v217 = v216->i32[0];
      v216 = (float32x4_t *)((char *)v216 + 4);
      *v215 = v217;
      v215 += 20;
      --v28;
    }
    while (v28);
  }
LABEL_217:
  free(__dst);
  free(v244);
  free(__src);
  return v154;
}

float linearize(uint64_t a1, uint64_t a2)
{
  int32x2_t v2;
  uint64_t v3;
  char **v4;
  int v5;
  __int128 v6;
  int32x2_t v7;
  int32x2_t v8;
  int v9;
  char *v10;
  char *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char **v18;
  float *v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL4 v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  uint64_t v42;
  uint64_t v43;
  float *v44;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  _BOOL4 v53;
  float *v54;
  float *v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float32_t v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float *v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;
  float v252;
  float v253;
  float v254;
  float v255;
  float v256;
  float v257;
  float v258;
  float v259;
  float v260;
  float v261;
  float v262;
  float v263;
  float v264;
  float v265;
  float v266;
  float v267;
  float v268;
  float v269;
  float v270;
  float v271;
  float v272;
  float v273;
  float v274;
  float v275;
  float v276;
  float v277;
  float v278;
  float v279;
  float v280;
  float v281;
  float v282;
  float v283;
  float v284;
  float v285;
  float v286;
  float v287;
  float v288;
  float v289;
  float v290;
  float v291;
  float v292;
  float v293;
  float v294;
  float v295;
  float v296;
  float v297;
  float v298;
  float v299;
  float v300;
  float v301;
  float v302;
  float v303;
  float v304;
  float v305;
  float v306;
  float v307;
  float v308;
  float v309;
  float v310;
  float v311;
  float v312;
  float v313;
  float v314;
  float v315;
  float v316;
  float v317;
  float v318;
  float v319;
  float v320;
  float v321;
  float v322;
  float v323;
  float v324;
  float v325;
  float v326;
  float v327;
  float v328;
  float v329;
  float v330;
  float v331;
  float v332;
  float v333;
  float v334;
  float v335;
  float v336;
  float v337;
  float v338;
  float v339;
  float v340;
  float v341;
  float v342;
  float v343;
  float v344;
  float v345;
  float v346;
  float v347;
  float v348;
  float v349;
  float v350;
  float v351;
  float v352;
  float v353;
  float v354;
  float v355;
  float v356;
  float v357;
  int v358;
  int v359;
  float *v360;
  float v361;
  float v362;
  float v363;
  BOOL v364;
  float *v365;
  float v366;
  float v367;
  float v368;
  uint64_t v369;
  uint64_t v370;
  float *v371;
  float v372;
  float v373;
  float v374;
  float v375;
  float v376;
  float v377;
  float v378;
  float v379;
  int v380;
  int v381;
  uint64_t v382;
  uint64_t v383;
  __int32 v384;
  int v385;
  float *v386;
  uint64_t v387;
  float v388;
  float v389;
  float v390;
  float v391;
  float v392;
  float v393;
  float v394;
  float v395;
  __int32 v396;
  uint64_t v397;
  float *v398;
  float v399;
  float v400;
  float v401;
  float v402;
  float v403;
  float v404;
  float v405;
  float v406;
  uint64_t v407;
  float *v408;
  float v409;
  float v410;
  float v411;
  float v412;
  float v413;
  float v414;
  float v415;
  float v416;
  float *v417;
  float v418;
  float v419;
  float v420;
  float *v421;
  float v422;
  float v423;
  float v424;
  float v425;
  float v426;
  float v427;
  float v428;
  float v429;
  float v430;
  float v431;
  uint64_t v432;
  uint64_t v433;
  float v434;
  float *v435;
  float v436;
  float v437;
  float v438;
  float v439;
  float v440;
  float v441;
  float v442;
  float v443;
  float v444;
  float v445;
  float v446;
  float v447;
  float v448;
  float v449;
  float v450;
  float v451;
  float v452;
  float v453;
  float v454;
  float v455;
  float v456;
  float v457;
  float v458;
  float v459;
  float v460;
  float v461;
  float v462;
  float v463;
  float v464;
  float v465;
  float v466;
  float v467;
  float v468;
  float v469;
  float v470;
  float v471;
  float v472;
  float v473;
  float v474;
  float v475;
  float v476;
  float v477;
  float v478;
  float v479;
  float v480;
  float v481;
  float v482;
  float v483;
  float v484;
  float v485;
  float v486;
  float v487;
  float v488;
  float v489;
  float v490;
  float v491;
  float v492;
  float v493;
  float v494;
  float v495;
  float v496;
  float v497;
  float v498;
  float v499;
  float v500;
  float v501;
  float v502;
  float v503;
  float v504;
  float v505;
  float v506;
  float v507;
  float v508;
  float v509;
  float v510;
  float v511;
  float v512;
  float v513;
  float v514;
  float v515;
  float v516;
  float v517;
  float v518;
  float v519;
  float v520;
  float v521;
  float v522;
  float v523;
  float v524;
  float v525;
  float v526;
  float v527;
  float v528;
  float v529;
  float v530;
  float v531;
  float v532;
  float v533;
  float v534;
  float v535;
  float v536;
  float v537;
  float v538;
  float v539;
  float v540;
  float *v541;
  float v542;
  float v543;
  float v544;
  float v545;
  float v546;
  int v547;
  int v548;
  uint64_t v549;
  uint64_t v550;
  int v551;
  float32_t v552;
  float v553;
  float32_t v554;
  float v555;
  float32_t v556;
  float v557;
  float v558;
  float v559;
  float v560;
  float v561;
  float v562;
  float v563;
  float v564;
  float v565;
  float v566;
  float v567;
  float v568;
  float v569;
  float v570;
  float v571;
  float v572;
  float *v573;
  uint64_t i;
  float v575;
  float v576;
  float v577;
  float v578;
  float v579;
  float v580;
  float v581;
  float v582;
  float v583;
  float v584;
  float v585;
  float v586;
  float v587;
  float v588;
  float v589;
  float *v590;
  float v591;
  float v592;
  float v593;
  float *v594;
  float v595;
  float v596;
  float v597;
  float *v598;
  float v599;
  float v600;
  float v601;
  float *v602;
  float v603;
  float v604;
  float v605;
  float *v606;
  float v607;
  float v608;
  float v609;
  float *v610;
  float v611;
  float v612;
  float v613;
  float32x2_t *v614;
  float v615;
  float v616;
  float v617;
  float32x4_t *v618;
  float *v619;
  float v620;
  float v621;
  float v622;
  float v623;
  float32x4_t *v624;
  int v625;
  uint64_t v626;
  float *v627;
  int *v628;
  uint64_t v629;
  float32x2_t *v630;
  int v631;
  BOOL v632;
  int v633;
  uint64_t v634;
  uint64_t v635;
  float32x2_t *v636;
  float32x2_t *v637;
  uint64_t v638;
  void (**v639)(float *, float *);
  uint64_t v640;
  uint64_t v641;
  _BOOL4 v642;
  float32x2_t *v643;
  uint64_t v644;
  int *v645;
  uint64_t v646;
  int v647;
  uint64_t v648;
  uint64_t *v649;
  _DWORD *v650;
  int *v651;
  uint64_t v652;
  float *v653;
  uint64_t v654;
  int v655;
  void (*v656)(float *, float *);
  uint64_t v657;
  int *v658;
  int *v659;
  uint64_t v660;
  uint64_t v661;
  float *v662;
  unint64_t v663;
  float *v664;
  float v665;
  int v666;
  float *v667;
  int v668;
  float v669;
  float v670;
  float v671;
  char v672;
  unint64_t v673;
  float *v674;
  float *v675;
  float v676;
  unsigned int v677;
  float *v678;
  int v679;
  float v680;
  float v681;
  float v682;
  uint64_t v683;
  uint64_t j;
  _QWORD *v685;
  int v686;
  uint64_t v687;
  uint64_t v688;
  int v689;
  int v690;
  uint64_t v691;
  float *v692;
  unint64_t v693;
  uint64_t v694;
  float *v695;
  int v696;
  unsigned int v697;
  uint64_t v698;
  float *v699;
  float v700;
  unint64_t v701;
  float *v702;
  unsigned int v703;
  uint64_t v704;
  int v705;
  float v706;
  float *v707;
  uint64_t v708;
  float32x4_t v709;
  uint64_t v710;
  float v711;
  float v712;
  float *v713;
  float v714;
  float *v715;
  float v716;
  uint64_t v717;
  unint64_t v718;
  BOOL v719;
  char v720;
  float32x4_t *v722;
  float32x4_t *v723;
  uint64_t v724;
  float32x4_t v725;
  float32x4_t v726;
  uint64_t v727;
  uint64_t v728;
  float *v729;
  float *v730;
  float v731;
  float v732;
  float v733;
  uint64_t v734;
  uint64_t v735;
  _QWORD *v736;
  uint64_t v737;
  uint64_t v738;
  int v739;
  uint64_t v740;
  char *v741;
  int v742;
  float *v743;
  float *v744;
  float v745;
  int v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  float32x4_t *v751;
  float32x4_t v752;
  int v753;
  float32x4_t *v754;
  float32x4_t v755;
  float32x4_t v756;
  float32x4_t v757;
  float32x4_t v758;
  float32x4_t v759;
  float v760;
  float *v761;
  float *v762;
  int v763;
  uint64_t v764;
  uint64_t v765;
  float32x4_t v766;
  float32x4_t v767;
  float v768;
  float v769;
  float v770;
  uint64_t k;
  float32x4_t *v772;
  float32x4_t v773;
  int v774;
  float32x4_t *v775;
  float32x4_t v776;
  float32x4_t v777;
  float32x4_t v778;
  float32x4_t v779;
  float32x4_t v780;
  uint64_t v781;
  float32x4_t *v782;
  uint64_t v783;
  float32x4_t v784;
  uint64_t v785;
  float *v786;
  uint64_t v787;
  uint64_t v788;
  float32x4_t *v789;
  uint64_t v790;
  uint64_t v791;
  char *v792;
  uint64_t v793;
  uint64_t v794;
  float32x4_t *v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  char *v799;
  uint64_t v800;
  float32x4_t *v801;
  char *v802;
  uint64_t v803;
  float32x4_t *v804;
  float v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  float *v809;
  float *v810;
  float v811;
  float v812;
  float v813;
  unint64_t v814;
  unint64_t v815;
  BOOL v817;
  uint64_t v819;
  float32x4_t *v820;
  float32x4_t *v821;
  float32x4_t v822;
  float32x4_t v823;
  int v824;
  int v825;
  float32x4_t **v826;
  char *v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v831;
  float32x4_t *v832;
  uint64_t v833;
  char *v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  float32x4_t *v840;
  float32x4_t *v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  unint64_t v845;
  unint64_t v846;
  uint64_t v847;
  float32x4_t *v848;
  float32x4_t *v849;
  uint64_t v850;
  float v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  float *v855;
  float *v856;
  float v857;
  float v858;
  float v859;
  unint64_t v860;
  unint64_t v861;
  BOOL v863;
  uint64_t v865;
  float32x4_t *v866;
  float32x4_t *v867;
  float32x4_t v868;
  float32x4_t v869;
  uint64_t v870;
  uint64_t v872;
  float32x4_t *v873;
  uint64_t v874;
  char *v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  float32x4_t *v881;
  float32x4_t *v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  unint64_t v886;
  unint64_t v887;
  uint64_t v888;
  float32x4_t *v889;
  float32x4_t *v890;
  uint64_t v891;
  float v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  float *v896;
  float *v897;
  float v898;
  float v899;
  float v900;
  unint64_t v901;
  unint64_t v902;
  BOOL v904;
  uint64_t v906;
  float32x4_t *v907;
  float32x4_t *v908;
  float32x4_t v909;
  float32x4_t v910;
  uint64_t v912;
  float *v913;
  float *v914;
  float *v915;
  _BOOL4 v916;
  uint64_t v917;
  uint64_t v918;
  int v919;
  uint64_t v920;
  char *v921;
  float v922;
  float v923;
  float v924;
  char *v925;
  float *v926;
  int32x4_t v927;
  float32x2_t *v928;
  char *v929;
  uint64_t *v930;
  int *v931;
  uint64_t v932;
  float32x4_t *v933;
  uint64_t v934;
  float32x4_t **v935;
  int *v936;
  uint64_t v937;
  void *v938;
  char **v939;
  uint64_t v940;
  int v941;
  int v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  __int128 v946;
  float32x4_t *v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  float v952;
  float v953;
  float v954;
  float v955;
  float v956;
  float v957;
  float v958;
  float v959;
  float v960;
  float v961;
  float v962;
  float v963;
  float v964;
  float v965;
  float v966;
  float v967;
  float v968;
  float v969;
  float v970;
  float v971;
  float v972;
  float32x4_t v973;
  float32x2_t v974;
  float32x4_t v975;
  float32x2_t v976;
  float32x4_t v977;
  float32x2_t v978;
  float v979;
  float v980;
  float v981;
  float v982;
  float v983;
  float v984[980];
  uint64_t v985;
  __int16 v986;
  _QWORD v987[2];
  uint64_t v988;
  float32x2_t v989;
  float32x4_t v990;
  float32x4_t v991;
  float32x4_t v992;
  float32x4_t v993;
  float32x4_t v994;
  float32x4_t v995;
  uint64_t v996;

  v3 = MEMORY[0x24BDAC7A8](a1, a2);
  v9 = v5;
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v18 = v4;
  v996 = *MEMORY[0x24BDAC8D0];
  v20 = v19[5];
  v21 = v19[8];
  v22 = v19[9];
  v915 = v19;
  v24 = *((unsigned int *)v4 + 2);
  v23 = *((unsigned int *)v4 + 3);
  v943 = v3;
  v917 = *(unsigned int *)(v3 + 48);
  v918 = v16;
  v25 = 0.0;
  if (v21 == 0.0)
    v26 = 0.0;
  else
    v26 = 1.0 / v21;
  *(float *)&v947 = v20;
  if (v20 == 0.0)
    v27 = 1.0;
  else
    v27 = v20;
  v938 = v13;
  v939 = v4;
  if (v5)
  {
    if (v13 && (int)v917 >= 1)
    {
      bzero(v13, 4 * v917);
      v17 = v918;
      v18 = v939;
    }
    if ((int)v23 >= 1)
    {
      v28 = v15;
      if ((int)v24 > 0)
      {
        v29 = *v939;
        v30 = 4 * *((int *)v939 + 4);
        v31 = v23;
        do
        {
          bzero(v29, 4 * v24);
          v29 += v30;
          --v31;
        }
        while (v31);
      }
      bzero(v11, 4 * v23);
      v13 = v938;
      v18 = v939;
      v17 = v918;
      v15 = v28;
    }
  }
  v941 = v23 - v24;
  v919 = v9;
  v921 = v11;
  v940 = v15;
  if ((int)v917 >= 1)
  {
    v32 = 0;
    v942 = 0;
    *(float *)&v6 = 1.0 / *(float *)&v947;
    v946 = v6;
    *(float *)&v945 = (float)(v22 / v27) * (float)(v22 / v27);
    v34 = v26 == 0.0 || v13 == 0;
    v916 = v34;
    v927 = vdupq_lane_s32(*(int32x2_t *)&v6, 0);
    v913 = v984;
    v914 = &v955;
    v25 = 0.0;
    *(float *)&v948 = v26;
    while (1)
    {
      v36 = v17 + 80 * v32;
      v37 = *(_QWORD *)(v36 + 32);
      v38 = *(int *)(v36 + 52);
      v40 = *(_QWORD *)v36;
      v39 = *(_QWORD *)(v36 + 8);
      v41 = (float *)(v39 + 8 * v38);
      v42 = *(_QWORD *)v943;
      v920 = *(unsigned __int16 *)(v37 + 4 * v38);
      v43 = v42 + 32 * v920;
      v44 = *(float **)v43;
      v45 = *(_DWORD *)(v43 + 16) != 0;
      v933 = (float32x4_t *)(4 * v32);
      if (v40 >= 1)
      {
        v46 = 0;
        v47 = *(_QWORD *)(v36 + 24);
        v48 = v41 + 1;
        v928 = (float32x2_t *)(v43 + 12);
        while (1)
        {
          v49 = *(_DWORD *)(v37 + 4 * ((int)v46 % (int)v47));
          v50 = (unsigned __int16)v49;
          v51 = v42 + 32 * (unsigned __int16)v49;
          v52 = *(_DWORD *)(v51 + 16);
          v53 = v52 != 0;
          if (v46 == v38)
            goto LABEL_32;
          v54 = (float *)(v39 + 8 * v46);
          v55 = *(float **)v51;
          *(float *)&v951 = v25;
          if (v46 >= (int)v47)
            break;
          v56 = *(float *)(*(_QWORD *)(v943 + 32) + 4 * v32);
          v57 = *v41;
          LODWORD(v949) = *v48;
          v58 = v44[1];
          v59 = *v55;
          v60 = v55[1];
          v62 = v44[2];
          v61 = v44[3];
          v64 = v55[2];
          v63 = v55[3];
          v66 = v44[6];
          v65 = v44[7];
          v68 = v55[6];
          v67 = v55[7];
          v69 = (float)((float)((float)(*v55 * *v44) + 0.0) + (float)(v63 * v61)) + (float)(v68 * v66);
          v70 = v44[4];
          v71 = v44[5];
          v72 = (float)((float)((float)(*v55 * v58) + 0.0) + (float)(v63 * v70)) + (float)(v68 * v65);
          v73 = v44[8];
          v74 = (float)((float)((float)(*v55 * v62) + 0.0) + (float)(v63 * v71)) + (float)(v68 * v73);
          v76 = v55[4];
          v75 = v55[5];
          v77 = (float)((float)((float)(v60 * *v44) + 0.0) + (float)(v76 * v61)) + (float)(v67 * v66);
          v78 = (float)((float)((float)(v60 * v58) + 0.0) + (float)(v76 * v70)) + (float)(v67 * v65);
          v79 = (float)((float)((float)(v60 * v62) + 0.0) + (float)(v76 * v71)) + (float)(v67 * v73);
          v80 = v55[8];
          v81 = (float)((float)((float)(v64 * *v44) + 0.0) + (float)(v75 * v61)) + (float)(v80 * v66);
          v82 = (float)((float)((float)(v64 * v58) + 0.0) + (float)(v75 * v70)) + (float)(v80 * v65);
          v83 = v44[9] - v55[9];
          v84 = v44[11];
          v85 = v55[11];
          v86 = v44[10] - v55[10];
          *(float *)&v935 = v62;
          v87 = (float)((float)((float)(v64 * v62) + 0.0) + (float)(v75 * v71)) + (float)(v80 * v73);
          v88 = 1.0 / v56;
          v89 = v84 - v85;
          *(float *)&v944 = v57;
          v90 = v88 * v57;
          v91 = (float)((float)((float)(v59 * v83) + 0.0) + (float)(v63 * v86)) + (float)(v68 * v89);
          v92 = (float)((float)((float)(v60 * v83) + 0.0) + (float)(v76 * v86)) + (float)(v67 * v89);
          v93 = (float)((float)((float)(v64 * v83) + 0.0) + (float)(v75 * v86)) + (float)(v80 * v89);
          v94 = v88 * *(float *)&v949;
          *(float *)&v936 = v72;
          *(float *)&v937 = v69;
          v95 = (float)((float)((float)((float)(v88 * v57) * v72) + (float)(v69 * v88))
                      + (float)(v74 * (float)(v88 * *(float *)&v949)))
              + v91;
          v96 = (float)((float)((float)((float)(v88 * v57) * v78) + (float)(v77 * v88))
                      + (float)(v79 * (float)(v88 * *(float *)&v949)))
              + v92;
          v97 = (float)((float)((float)((float)(v88 * v57) * v82) + (float)(v81 * v88))
                      + (float)(v87 * (float)(v88 * *(float *)&v949)))
              + v93;
          v98 = 1.0 / v95;
          v99 = *v54 - (float)(v96 * (float)(1.0 / v95));
          v100 = *(float *)(v39 + 8 * v46 + 4) - (float)(v97 * (float)(1.0 / v95));
          if (!v9)
          {
            v13 = v938;
            v157 = *(float *)&v951;
            v26 = *(float *)&v948;
            v158 = *(float *)&v946;
            v159 = *(float *)&v945;
            if (*(float *)&v947 == 0.0)
              goto LABEL_64;
            goto LABEL_58;
          }
          *(float *)&v934 = v95;
          *(float *)&v950 = v100;
          *(float *)&v931 = v96;
          *(float *)&v932 = v97;
          *(float *)&v930 = -v96;
          v101 = (float)(v98 * v98) * (float)-v96;
          *(float *)&v929 = -v97;
          v102 = (float)(v98 * v98) * (float)-v97;
          v13 = v938;
          if (v938)
          {
            v103 = -(float)(v88 * v88);
            v104 = v103
                 * (float)((float)(*(float *)&v937 + (float)(*(float *)&v936 * *(float *)&v944))
                         + (float)(v74 * *(float *)&v949));
            v989.f32[0] = (float)((float)(v103
                                        * (float)((float)(v77 + (float)(v78 * *(float *)&v944))
                                                + (float)(v79 * *(float *)&v949)))
                                * v98)
                        + (float)(v101 * v104);
            v989.f32[1] = (float)((float)(v103
                                        * (float)((float)(v81 + (float)(v82 * *(float *)&v944))
                                                + (float)(v87 * *(float *)&v949)))
                                * v98)
                        + (float)(v102 * v104);
          }
          if (v45)
          {
            v105 = v44[1];
            v106 = (float)(v88 * v105) - (float)(*v44 * v90);
            v107 = (float)(v88 * v70) - (float)(v61 * v90);
            v108 = (float)(v88 * v65) - (float)(v66 * v90);
            v109 = (float)(*v44 * v94) - (float)(v88 * *(float *)&v935);
            v110 = (float)(v61 * v94) - (float)(v88 * v71);
            v111 = (float)(v66 * v94) - (float)(v88 * v73);
            v112 = (float)(v90 * *(float *)&v935) - (float)(v105 * v94);
            v113 = (float)(v90 * v71) - (float)(v70 * v94);
            v114 = (float)(v90 * v73) - (float)(v65 * v94);
            v115 = v55[1];
            v116 = (float)(*v55 + 0.0) + (float)(v63 * 0.0);
            v117 = (float)(v115 + 0.0) + (float)(v76 * 0.0);
            v118 = v99;
            v119 = (float)(*v55 * 0.0) + 0.0;
            v120 = (float)(v115 * 0.0) + 0.0;
            v121 = (float)((float)(*v55 * v106) + 0.0) + (float)(v63 * v107);
            v122 = (float)((float)(v115 * v106) + 0.0) + (float)(v76 * v107);
            v123 = (float)((float)(v64 * v106) + 0.0) + (float)(v75 * v107);
            v124 = (float)((float)(*v55 * v109) + 0.0) + (float)(v63 * v110);
            v125 = (float)((float)(v115 * v109) + 0.0) + (float)(v76 * v110);
            v126 = (float)((float)(v64 * v109) + 0.0) + (float)(v75 * v110);
            v127 = v63 + v119;
            v128 = v119 + (float)(v63 * 0.0);
            v129 = (float)((float)(*v55 * v112) + 0.0) + (float)(v63 * v113);
            v130 = v76 + v120;
            v131 = v120 + (float)(v76 * 0.0);
            v132 = (float)((float)(v115 * v112) + 0.0) + (float)(v76 * v113);
            v133 = (float)(v64 + 0.0) + (float)(v75 * 0.0);
            v134 = (float)(v64 * v112) + 0.0;
            v135 = (float)(v64 * 0.0) + 0.0;
            v136 = v134 + (float)(v75 * v113);
            v137 = v135 + v75;
            v138 = v135 + (float)(v75 * 0.0);
            v139 = v121 + (float)(v68 * v108);
            v140 = v122 + (float)(v67 * v108);
            v141 = v123 + (float)(v80 * v108);
            v142 = v124 + (float)(v68 * v111);
            v143 = v125 + (float)(v67 * v111);
            v144 = v126 + (float)(v80 * v111);
            v145 = v116 + (float)(v68 * 0.0);
            v146 = v127 + (float)(v68 * 0.0);
            v147 = v68 + v128;
            v99 = v118;
            v148 = v129 + (float)(v68 * v114);
            v990.f32[0] = (float)(v98 * (float)(v117 + (float)(v67 * 0.0))) + (float)(v101 * v145);
            v990.f32[1] = (float)((float)(v133 + (float)(v80 * 0.0)) * v98) + (float)(v102 * v145);
            v990.f32[2] = (float)(v98 * (float)(v130 + (float)(v67 * 0.0))) + (float)(v101 * v146);
            v990.f32[3] = (float)((float)(v137 + (float)(v80 * 0.0)) * v98) + (float)(v102 * v146);
            v991.f32[0] = (float)(v98 * (float)(v67 + v131)) + (float)(v101 * v147);
            v991.f32[1] = (float)((float)(v138 + v80) * v98) + (float)(v102 * v147);
            v991.f32[2] = (float)(v98 * v140) + (float)(v101 * v139);
            v991.f32[3] = (float)(v98 * v141) + (float)(v102 * v139);
            v992.f32[0] = (float)(v98 * v143) + (float)(v101 * v142);
            v992.f32[1] = (float)(v98 * v144) + (float)(v102 * v142);
            v992.f32[2] = (float)(v98 * (float)(v132 + (float)(v67 * v114))) + (float)(v101 * v148);
            v992.f32[3] = (float)(v98 * (float)(v136 + (float)(v80 * v114))) + (float)(v102 * v148);
          }
          if (v52)
          {
            v149 = v55[3];
            v150 = v55[4];
            v151 = v55[5];
            v152 = v55[6];
            v153 = v55[7];
            v154 = v55[8];
            v155 = (float)-(float)(v55[2] * v98) - (float)(v102 * *v55);
            v993.f32[0] = (float)-(float)(v55[1] * v98) - (float)(v101 * *v55);
            v993.f32[1] = v155;
            v993.f32[2] = (float)-(float)(v150 * v98) - (float)(v101 * v149);
            v993.f32[3] = (float)-(float)(v151 * v98) - (float)(v102 * v149);
            v994.f32[0] = (float)-(float)(v153 * v98) - (float)(v101 * v152);
            v994.f32[1] = (float)-(float)(v154 * v98) - (float)(v102 * v152);
            v994.f32[2] = (float)(v101 * *(float *)&v931) - (float)(*(float *)&v934 * v98);
            v994.f32[3] = (float)(v98 * 0.0) + (float)(v102 * *(float *)&v931);
            v995.f32[0] = (float)(v98 * 0.0) + (float)(v101 * *(float *)&v929);
            v995.f32[1] = (float)(*(float *)&v934 * v98) + (float)(v102 * *(float *)&v929);
            v995.f32[2] = (float)(*(float *)&v932 * v98) + (float)(v101 * 0.0);
            v156 = (float)(v98 * *(float *)&v930) + (float)(v102 * 0.0);
            v157 = *(float *)&v951;
            v26 = *(float *)&v948;
            v158 = *(float *)&v946;
            v159 = *(float *)&v945;
LABEL_51:
            v995.f32[3] = v156;
            v53 = 1;
            v100 = *(float *)&v950;
            if (*(float *)&v947 == 0.0)
              goto LABEL_64;
            goto LABEL_58;
          }
          v53 = 0;
          v157 = *(float *)&v951;
          v26 = *(float *)&v948;
          v158 = *(float *)&v946;
          v159 = *(float *)&v945;
          v100 = *(float *)&v950;
          if (*(float *)&v947 == 0.0)
            goto LABEL_64;
LABEL_58:
          if (v13)
            v989 = vmul_f32(*(float32x2_t *)v927.i8, v989);
          if (v45)
          {
            v990 = vmulq_n_f32(v990, v158);
            v991 = vmulq_n_f32(v991, v158);
            v992 = vmulq_n_f32(v992, v158);
          }
          v99 = v158 * v99;
          v100 = v158 * v100;
          if (v53)
          {
            v993 = vmulq_n_f32(v993, v158);
            v994 = vmulq_n_f32(v994, v158);
            v995 = vmulq_n_f32(v995, v158);
          }
LABEL_64:
          v355 = (float)(v100 * v100) + (float)(v99 * v99);
          v942 += 2;
          if (v355 > v159)
          {
            v45 = 0;
            v25 = v159 + v157;
            goto LABEL_32;
          }
          v25 = v157 + v355;
          if (!v9)
            goto LABEL_32;
          if (v13)
          {
            v357 = v989.f32[1];
            v356 = v989.f32[0];
            *(float *)((char *)v933->f32 + (_QWORD)v13) = (float)((float)((float)(v989.f32[0] * v989.f32[0]) + 0.0)
                                                                + (float)(v989.f32[1] * v989.f32[1]))
                                                        + *(float *)((char *)v933->f32 + (_QWORD)v13);
            if (v45)
            {
              v358 = *((_DWORD *)v18 + 4);
              v359 = v358 * v32;
              v360 = (float *)&(*v18)[4 * v928->i32[0] + 4 * v358 * (int)v32];
              v361 = v360[1];
              *v360 = (float)((float)((float)(v990.f32[0] * v356) + 0.0) + (float)(v990.f32[1] * v357)) + *v360;
              v360[1] = (float)((float)((float)(v990.f32[2] * v989.f32[0]) + 0.0) + (float)(v990.f32[3] * v989.f32[1]))
                      + v361;
              v362 = v360[3];
              v360[2] = (float)((float)((float)(v991.f32[0] * v989.f32[0]) + 0.0) + (float)(v991.f32[1] * v989.f32[1]))
                      + v360[2];
              v360[3] = (float)((float)((float)(v991.f32[2] * v989.f32[0]) + 0.0) + (float)(v991.f32[3] * v989.f32[1]))
                      + v362;
              v363 = v360[5];
              v360[4] = (float)((float)((float)(v992.f32[0] * v989.f32[0]) + 0.0) + (float)(v992.f32[1] * v989.f32[1]))
                      + v360[4];
              v360[5] = (float)((float)((float)(v992.f32[2] * v989.f32[0]) + 0.0) + (float)(v992.f32[3] * v989.f32[1]))
                      + v363;
              if (!v53)
              {
                v364 = 0;
                goto LABEL_77;
              }
              v357 = v989.f32[1];
              v356 = v989.f32[0];
            }
            else
            {
              if (!v53)
              {
                v381 = 0;
                v45 = 0;
                goto LABEL_103;
              }
              v358 = *((_DWORD *)v18 + 4);
              v359 = v358 * v32;
            }
            v365 = (float *)&(*v18)[4 * *(_DWORD *)(v42 + 32 * v50 + 12) + 4 * v359];
            v366 = v365[1];
            *v365 = (float)((float)((float)(v993.f32[0] * v356) + 0.0) + (float)(v993.f32[1] * v357)) + *v365;
            v365[1] = (float)((float)((float)(v993.f32[2] * v989.f32[0]) + 0.0) + (float)(v993.f32[3] * v989.f32[1]))
                    + v366;
            v367 = v365[3];
            v365[2] = (float)((float)((float)(v994.f32[0] * v989.f32[0]) + 0.0) + (float)(v994.f32[1] * v989.f32[1]))
                    + v365[2];
            v365[3] = (float)((float)((float)(v994.f32[2] * v989.f32[0]) + 0.0) + (float)(v994.f32[3] * v989.f32[1]))
                    + v367;
            v368 = v365[5];
            v365[4] = (float)((float)((float)(v995.f32[0] * v989.f32[0]) + 0.0) + (float)(v995.f32[1] * v989.f32[1]))
                    + v365[4];
            v365[5] = (float)((float)((float)(v995.f32[2] * v989.f32[0]) + 0.0) + (float)(v995.f32[3] * v989.f32[1]))
                    + v368;
            if (!v45)
              goto LABEL_85;
            v364 = 1;
          }
          else
          {
            v364 = v53;
            if (!v45)
            {
              if (!v53)
              {
                v45 = 0;
                goto LABEL_32;
              }
              v358 = *((_DWORD *)v18 + 4);
LABEL_85:
              v45 = 0;
              v380 = 0;
              v370 = v358;
LABEL_86:
              v382 = 0;
              v383 = (uint64_t)*v18;
              v384 = *(_DWORD *)(v42 + 32 * v50 + 12);
              v385 = (v384 + v941) * v358;
              v386 = (float *)&(*v18)[4 * v385 + 12 + 4 * v384];
              v387 = 4 * v370;
              do
              {
                v388 = *(v386 - 2);
                v389 = *(v386 - 3) + (float)(v993.f32[0] * v993.f32[v382]);
                *(v386 - 3) = v389;
                *(v386 - 3) = v389 + (float)(v993.f32[1] * v993.f32[v382 + 1]);
                v390 = v388 + (float)(v993.f32[2] * v993.f32[v382]);
                *(v386 - 2) = v390;
                *(v386 - 2) = v390 + (float)(v993.f32[3] * v993.f32[v382 + 1]);
                v391 = *(v386 - 1) + (float)(v994.f32[0] * v993.f32[v382]);
                *(v386 - 1) = v391;
                *(v386 - 1) = v391 + (float)(v994.f32[1] * v993.f32[v382 + 1]);
                v392 = v386[1];
                v393 = *v386 + (float)(v994.f32[2] * v993.f32[v382]);
                *v386 = v393;
                *v386 = v393 + (float)(v994.f32[3] * v993.f32[v382 + 1]);
                v394 = v392 + (float)(v995.f32[0] * v993.f32[v382]);
                v386[1] = v394;
                v386[1] = v394 + (float)(v995.f32[1] * v993.f32[v382 + 1]);
                v395 = v386[2] + (float)(v995.f32[2] * v993.f32[v382]);
                v386[2] = v395;
                v386[2] = v395 + (float)(v995.f32[3] * v993.f32[v382 + 1]);
                v382 += 2;
                v386 = (float *)((char *)v386 + v387);
              }
              while (v382 != 12);
              v9 = v919;
              if (v380)
              {
                v396 = v928->i32[0];
                if (v928->i32[0] <= v384)
                {
                  v407 = 0;
                  v408 = (float *)(v383 + 4 * (v384 + (v396 + v941) * v358) + 12);
                  v11 = v921;
                  do
                  {
                    v409 = *(v408 - 2);
                    v410 = *(v408 - 3) + (float)(v993.f32[0] * v990.f32[v407]);
                    *(v408 - 3) = v410;
                    *(v408 - 3) = v410 + (float)(v993.f32[1] * v990.f32[v407 + 1]);
                    v411 = v409 + (float)(v993.f32[2] * v990.f32[v407]);
                    *(v408 - 2) = v411;
                    *(v408 - 2) = v411 + (float)(v993.f32[3] * v990.f32[v407 + 1]);
                    v412 = *(v408 - 1) + (float)(v994.f32[0] * v990.f32[v407]);
                    *(v408 - 1) = v412;
                    *(v408 - 1) = v412 + (float)(v994.f32[1] * v990.f32[v407 + 1]);
                    v413 = v408[1];
                    v414 = *v408 + (float)(v994.f32[2] * v990.f32[v407]);
                    *v408 = v414;
                    *v408 = v414 + (float)(v994.f32[3] * v990.f32[v407 + 1]);
                    v415 = v413 + (float)(v995.f32[0] * v990.f32[v407]);
                    v408[1] = v415;
                    v408[1] = v415 + (float)(v995.f32[1] * v990.f32[v407 + 1]);
                    v416 = v408[2] + (float)(v995.f32[2] * v990.f32[v407]);
                    v408[2] = v416;
                    v408[2] = v416 + (float)(v995.f32[3] * v990.f32[v407 + 1]);
                    v407 += 2;
                    v408 = (float *)((char *)v408 + v387);
                  }
                  while (v407 != 12);
                  v381 = 1;
                  v53 = 1;
                  v13 = v938;
                  v18 = v939;
                  if (!v938)
                    goto LABEL_104;
                }
                else
                {
                  v397 = 0;
                  v398 = (float *)(v383 + 4 * (v396 + v385) + 12);
                  do
                  {
                    v399 = *(v398 - 2);
                    v400 = *(v398 - 3) + (float)(v990.f32[0] * v993.f32[v397]);
                    *(v398 - 3) = v400;
                    *(v398 - 3) = v400 + (float)(v990.f32[1] * v993.f32[v397 + 1]);
                    v401 = v399 + (float)(v990.f32[2] * v993.f32[v397]);
                    *(v398 - 2) = v401;
                    *(v398 - 2) = v401 + (float)(v990.f32[3] * v993.f32[v397 + 1]);
                    v402 = *(v398 - 1) + (float)(v991.f32[0] * v993.f32[v397]);
                    *(v398 - 1) = v402;
                    *(v398 - 1) = v402 + (float)(v991.f32[1] * v993.f32[v397 + 1]);
                    v403 = v398[1];
                    v404 = *v398 + (float)(v991.f32[2] * v993.f32[v397]);
                    *v398 = v404;
                    *v398 = v404 + (float)(v991.f32[3] * v993.f32[v397 + 1]);
                    v405 = v403 + (float)(v992.f32[0] * v993.f32[v397]);
                    v398[1] = v405;
                    v398[1] = v405 + (float)(v992.f32[1] * v993.f32[v397 + 1]);
                    v406 = v398[2] + (float)(v992.f32[2] * v993.f32[v397]);
                    v398[2] = v406;
                    v398[2] = v406 + (float)(v992.f32[3] * v993.f32[v397 + 1]);
                    v397 += 2;
                    v398 = (float *)((char *)v398 + v387);
                  }
                  while (v397 != 12);
                  v381 = 1;
                  v53 = 1;
                  v11 = v921;
                  v13 = v938;
                  v18 = v939;
                  if (!v938)
                    goto LABEL_104;
                }
              }
              else
              {
                v13 = v938;
                if (!v938)
                {
                  v11 = v921;
                  v18 = v939;
LABEL_107:
                  v421 = (float *)&v11[4 * *(_DWORD *)(*(_QWORD *)v943 + 32 * v50 + 12) + 4 * v941];
                  v422 = v993.f32[3];
                  v423 = v421[1] + (float)(v993.f32[2] * v99);
                  v424 = v994.f32[1];
                  v425 = v421[2] + (float)(v994.f32[0] * v99);
                  v426 = v994.f32[3];
                  v427 = v421[3] + (float)(v994.f32[2] * v99);
                  v428 = v995.f32[1];
                  v429 = v421[4] + (float)(v995.f32[0] * v99);
                  v430 = v995.f32[3];
                  v431 = v421[5] + (float)(v995.f32[2] * v99);
                  *v421 = (float)(*v421 + (float)(v993.f32[0] * v99)) + (float)(v993.f32[1] * v100);
                  v421[1] = v423 + (float)(v422 * v100);
                  v421[2] = v425 + (float)(v424 * v100);
                  v421[3] = v427 + (float)(v426 * v100);
                  v421[4] = v429 + (float)(v428 * v100);
                  v421[5] = v431 + (float)(v430 * v100);
                  goto LABEL_32;
                }
                v53 = 0;
                v381 = 1;
                v11 = v921;
                v18 = v939;
              }
              goto LABEL_103;
            }
            v358 = *((_DWORD *)v18 + 4);
          }
LABEL_77:
          v369 = 0;
          v370 = v358;
          v371 = (float *)&(*v18)[4 * v928->i32[0] + 12 + 4 * (v928->i32[0] + v941) * v358];
          do
          {
            v372 = *(v371 - 2);
            v373 = *(v371 - 3) + (float)(v990.f32[0] * v990.f32[v369]);
            *(v371 - 3) = v373;
            *(v371 - 3) = v373 + (float)(v990.f32[1] * v990.f32[v369 + 1]);
            v374 = v372 + (float)(v990.f32[2] * v990.f32[v369]);
            *(v371 - 2) = v374;
            *(v371 - 2) = v374 + (float)(v990.f32[3] * v990.f32[v369 + 1]);
            v375 = *(v371 - 1) + (float)(v991.f32[0] * v990.f32[v369]);
            *(v371 - 1) = v375;
            *(v371 - 1) = v375 + (float)(v991.f32[1] * v990.f32[v369 + 1]);
            v376 = v371[1];
            v377 = *v371 + (float)(v991.f32[2] * v990.f32[v369]);
            *v371 = v377;
            *v371 = v377 + (float)(v991.f32[3] * v990.f32[v369 + 1]);
            v378 = v376 + (float)(v992.f32[0] * v990.f32[v369]);
            v371[1] = v378;
            v371[1] = v378 + (float)(v992.f32[1] * v990.f32[v369 + 1]);
            v379 = v371[2] + (float)(v992.f32[2] * v990.f32[v369]);
            v371[2] = v379;
            v371[2] = v379 + (float)(v992.f32[3] * v990.f32[v369 + 1]);
            v369 += 2;
            v371 += v358;
          }
          while (v369 != 12);
          if (v364)
          {
            v380 = 1;
            goto LABEL_86;
          }
          v381 = 0;
          v13 = v938;
          if (!v938)
          {
            v11 = v921;
LABEL_104:
            v417 = (float *)&v11[4 * *(_DWORD *)(*(_QWORD *)v943 + 32 * v920 + 12) + 4 * v941];
            v418 = (float)(v417[1] + (float)(v990.f32[2] * v99)) + (float)(v990.f32[3] * v100);
            *v417 = (float)(*v417 + (float)(v990.f32[0] * v99)) + (float)(v990.f32[1] * v100);
            v417[1] = v418;
            v419 = (float)(v417[3] + (float)(v991.f32[2] * v99)) + (float)(v991.f32[3] * v100);
            v417[2] = (float)(v417[2] + (float)(v991.f32[0] * v99)) + (float)(v991.f32[1] * v100);
            v417[3] = v419;
            v420 = (float)(v417[5] + (float)(v992.f32[2] * v99)) + (float)(v992.f32[3] * v100);
            v417[4] = (float)(v417[4] + (float)(v992.f32[0] * v99)) + (float)(v992.f32[1] * v100);
            v417[5] = v420;
            if ((v381 & 1) != 0)
              goto LABEL_107;
            goto LABEL_32;
          }
          v53 = 1;
          v11 = v921;
LABEL_103:
          *(float *)((char *)v933->f32 + (_QWORD)v11) = (float)(*(float *)((char *)v933->f32 + (_QWORD)v11)
                                                              + (float)(v989.f32[0] * v99))
                                                      + (float)(v989.f32[1] * v100);
          if (v53)
            goto LABEL_104;
          if (v381)
            goto LABEL_107;
LABEL_32:
          if (++v46 == v40)
            goto LABEL_109;
        }
        *(float *)&v950 = *v54;
        v160 = *(float **)(v42 + 32 * (v49 >> 16));
        v161 = *(float *)v48;
        v162 = v44[1];
        v163 = *v55;
        v164 = v55[1];
        v166 = v44[2];
        v165 = v44[3];
        v168 = v55[2];
        v167 = v55[3];
        v169 = v44[6];
        v170 = v44[7];
        v171 = v55[6];
        v172 = v55[7];
        v173 = (float)((float)((float)(*v55 * *v44) + 0.0) + (float)(v167 * v165)) + (float)(v171 * v169);
        v174 = v44[4];
        v175 = v44[5];
        v176 = (float)((float)((float)(*v55 * v162) + 0.0) + (float)(v167 * v174)) + (float)(v171 * v170);
        v177 = v44[8];
        v178 = v44[9];
        v179 = (float)((float)((float)(*v55 * v166) + 0.0) + (float)(v167 * v175)) + (float)(v171 * v177);
        v181 = v55[4];
        v180 = v55[5];
        v182 = (float)((float)((float)(v164 * *v44) + 0.0) + (float)(v181 * v165)) + (float)(v172 * v169);
        v183 = (float)((float)((float)(v164 * v162) + 0.0) + (float)(v181 * v174)) + (float)(v172 * v170);
        v184 = (float)((float)((float)(v164 * v166) + 0.0) + (float)(v181 * v175)) + (float)(v172 * v177);
        v185 = v55[8];
        v186 = v55[9];
        v187 = (float)((float)((float)(v168 * *v44) + 0.0) + (float)(v180 * v165)) + (float)(v185 * v169);
        v188 = (float)((float)((float)(v168 * v162) + 0.0) + (float)(v180 * v174)) + (float)(v185 * v170);
        v189 = (float)((float)((float)(v168 * v166) + 0.0) + (float)(v180 * v175)) + (float)(v185 * v177);
        v190 = 1.0 / *(float *)(*(_QWORD *)(v943 + 32) + 4 * v32);
        *(float *)&v935 = *v41;
        v191 = v190 * *(float *)&v935;
        v192 = v44[10] - v55[10];
        v193 = v44[11] - v55[11];
        v194 = (float)((float)((float)(v163 * (float)(v178 - v186)) + 0.0) + (float)(v167 * v192))
             + (float)(v171 * v193);
        v195 = (float)((float)((float)(v164 * (float)(v178 - v186)) + 0.0) + (float)(v181 * v192))
             + (float)(v172 * v193);
        v196 = (float)((float)((float)(v168 * (float)(v178 - v186)) + 0.0) + (float)(v180 * v192))
             + (float)(v185 * v193);
        *(float *)&v934 = v161;
        v197 = v190 * v161;
        v198 = (float)((float)((float)((float)(v190 * *(float *)&v935) * v183) + (float)(v182 * v190))
                     + (float)(v184 * (float)(v190 * v161)))
             + v195;
        v199 = (float)((float)((float)((float)(v190 * *(float *)&v935) * v188) + (float)(v187 * v190))
                     + (float)(v189 * (float)(v190 * v161)))
             + v196;
        v201 = v160[8];
        v200 = v160[9];
        *(float *)&v937 = (float)((float)((float)((float)(v190 * *(float *)&v935) * v176) + (float)(v173 * v190))
                                + (float)(v179 * (float)(v190 * v161)))
                        + v194;
        v202 = *(float *)&v937 - v200;
        v203 = v160[10];
        v204 = v160[11];
        *(float *)&v944 = v198;
        v205 = v198 - v203;
        v207 = v160[2];
        v206 = v160[3];
        v208 = v206 * (float)(v198 - v203);
        v209 = *v160;
        v210 = v160[1];
        v211 = v208 + (float)(*v160 * v202);
        v213 = v160[4];
        v212 = v160[5];
        v214 = (float)(v205 * v213) + (float)(v210 * v202);
        v215 = (float)(v205 * v212) + (float)(v207 * v202);
        *(float *)&v936 = v199;
        v216 = v199 - v204;
        v217 = v160[6];
        v218 = v160[7];
        v219 = 1.0 / (float)(v211 + (float)(v217 * v216));
        *(float *)&v949 = *(float *)&v950 - (float)((float)(v214 + (float)(v218 * v216)) * v219);
        *(float *)&v950 = *(float *)(v39 + 8 * v46 + 4) - (float)((float)(v215 + (float)(v201 * v216)) * v219);
        if ((int)v46 % (int)v47 == (_DWORD)v38)
        {
          v45 = 0;
          v53 = 0;
        }
        v13 = v938;
        if (!v9)
          goto LABEL_53;
        v220 = (float)(v219 * v219) * (float)-(float)(v214 + (float)(v218 * v216));
        v221 = (float)(v219 * v219) * (float)-(float)(v215 + (float)(v201 * v216));
        if (v938)
        {
          v222 = (float)((float)((float)(v207 * v179) + 0.0) + (float)(v212 * v184)) + (float)(v201 * v189);
          *(float *)&v932 = (float)((float)((float)(v207 * v176) + 0.0) + (float)(v212 * v183)) + (float)(v201 * v188);
          v223 = (float)((float)((float)(v207 * v173) + 0.0) + (float)(v212 * v182)) + (float)(v201 * v187);
          v224 = (float)((float)((float)(v210 * v179) + 0.0) + (float)(v213 * v184)) + (float)(v218 * v189);
          v225 = (float)((float)((float)(v210 * v176) + 0.0) + (float)(v213 * v183)) + (float)(v218 * v188);
          v226 = (float)((float)((float)(v210 * v173) + 0.0) + (float)(v213 * v182)) + (float)(v218 * v187);
          v227 = (float)((float)((float)(v209 * v179) + 0.0) + (float)(v206 * v184)) + (float)(v217 * v189);
          v228 = (float)((float)(v209 * v176) + 0.0) + (float)(v206 * v183);
          v229 = (float)((float)((float)(v209 * v173) + 0.0) + (float)(v206 * v182)) + (float)(v217 * v187);
          v230 = -(float)(v190 * v190);
          v231 = v230
               * (float)((float)(v229 + (float)((float)(v228 + (float)(v217 * v188)) * *(float *)&v935))
                       + (float)(v227 * *(float *)&v934));
          v989.f32[0] = (float)(v219
                              * (float)(v230
                                      * (float)((float)(v226 + (float)(v225 * *(float *)&v935))
                                              + (float)(v224 * *(float *)&v934))))
                      + (float)(v220 * v231);
          v989.f32[1] = (float)(v219
                              * (float)(v230
                                      * (float)((float)(v223 + (float)(*(float *)&v932 * *(float *)&v935))
                                              + (float)(v222 * *(float *)&v934))))
                      + (float)(v221 * v231);
        }
        if (v45)
        {
          v232 = *v44;
          v233 = v44[1];
          v234 = (float)(v190 * v233) - (float)(*v44 * v191);
          v235 = v44[4];
          v236 = v44[5];
          v238 = v44[2];
          v237 = v44[3];
          v239 = (float)(v190 * v235) - (float)(v237 * v191);
          v240 = v44[6];
          v241 = v44[7];
          *(float *)&v935 = (float)(v190 * v241) - (float)(v240 * v191);
          v242 = (float)(v232 * v197) - (float)(v190 * v238);
          *(float *)&v932 = v221;
          v243 = (float)(v237 * v197) - (float)(v190 * v236);
          v244 = v44[8];
          *(float *)&v934 = (float)(v240 * v197) - (float)(v190 * v244);
          v245 = (float)(v191 * v238) - (float)(v233 * v197);
          v246 = (float)(v191 * v236) - (float)(v235 * v197);
          v247 = (float)(v191 * v244) - (float)(v241 * v197);
          v248 = *v55;
          v249 = v55[1];
          *(float *)&v931 = v220;
          v250 = v55[3];
          v251 = v55[4];
          v252 = (float)(v248 + 0.0) + (float)(v250 * 0.0);
          *(float *)&v925 = (float)(v249 + 0.0) + (float)(v251 * 0.0);
          v253 = (float)(v248 * 0.0) + 0.0;
          v254 = (float)(v249 * 0.0) + 0.0;
          v255 = v253 + v250;
          v256 = v254 + v251;
          v257 = v253 + (float)(v250 * 0.0);
          v258 = v254 + (float)(v251 * 0.0);
          *(float *)&v930 = v234;
          *(float *)&v929 = v239;
          v259 = (float)((float)(v248 * v234) + 0.0) + (float)(v250 * v239);
          v260 = (float)((float)(v249 * v234) + 0.0) + (float)(v251 * v239);
          *(float *)&v926 = v242;
          v261 = (float)((float)(v248 * v242) + 0.0) + (float)(v250 * v243);
          v262 = (float)((float)(v248 * v245) + 0.0) + (float)(v250 * v246);
          v263 = (float)((float)(v249 * v242) + 0.0) + (float)(v251 * v243);
          v264 = (float)((float)(v249 * v245) + 0.0) + (float)(v251 * v246);
          v265 = v55[6];
          v266 = v55[7];
          v267 = v252 + (float)(v265 * 0.0);
          v268 = v255 + (float)(v265 * 0.0);
          v269 = v257 + v265;
          v270 = v259 + (float)(v265 * *(float *)&v935);
          v271 = v261 + (float)(v265 * *(float *)&v934);
          v272 = v262 + (float)(v265 * v247);
          v273 = *(float *)&v925 + (float)(v266 * 0.0);
          v274 = v256 + (float)(v266 * 0.0);
          v275 = v258 + v266;
          v276 = v260 + (float)(v266 * *(float *)&v935);
          v277 = v263 + (float)(v266 * *(float *)&v934);
          v278 = v264 + (float)(v266 * v247);
          v279 = *v160;
          v280 = v160[1];
          *(float *)&v925 = (float)((float)(*v160 * v267) + 0.0) + (float)(v206 * v273);
          v924 = (float)((float)(v280 * v267) + 0.0) + (float)(v213 * v273);
          v923 = (float)((float)(v207 * v267) + 0.0) + (float)(v212 * v273);
          v922 = (float)((float)(v279 * v268) + 0.0) + (float)(v206 * v274);
          v281 = (float)((float)(v280 * v268) + 0.0) + (float)(v213 * v274);
          v282 = (float)((float)(v207 * v268) + 0.0) + (float)(v212 * v274);
          v283 = (float)((float)(v279 * v269) + 0.0) + (float)(v206 * v275);
          v284 = (float)((float)(v280 * v269) + 0.0) + (float)(v213 * v275);
          v285 = (float)((float)(v207 * v269) + 0.0) + (float)(v212 * v275);
          v286 = (float)((float)(v279 * v270) + 0.0) + (float)(v206 * v276);
          v287 = (float)((float)(v280 * v270) + 0.0) + (float)(v213 * v276);
          v288 = (float)((float)(v207 * v270) + 0.0) + (float)(v212 * v276);
          v289 = (float)((float)(v279 * v271) + 0.0) + (float)(v206 * v277);
          v290 = (float)((float)(v280 * v271) + 0.0) + (float)(v213 * v277);
          v291 = (float)((float)(v207 * v271) + 0.0) + (float)(v212 * v277);
          v292 = (float)((float)(v279 * v272) + 0.0) + (float)(v206 * v278);
          v293 = (float)((float)(v280 * v272) + 0.0) + (float)(v213 * v278);
          v294 = (float)((float)(v207 * v272) + 0.0) + (float)(v212 * v278);
          v295 = (float)((float)(v168 * *(float *)&v930) + 0.0) + (float)(v180 * *(float *)&v929);
          v296 = (float)((float)(v168 * *(float *)&v926) + 0.0) + (float)(v180 * v243);
          v221 = *(float *)&v932;
          v297 = (float)(v168 + 0.0) + (float)(v180 * 0.0);
          v298 = (float)(v168 * v245) + 0.0;
          v299 = (float)(v168 * 0.0) + 0.0;
          v300 = v298 + (float)(v180 * v246);
          v301 = v299 + v180;
          v302 = v299 + (float)(v180 * 0.0);
          v303 = v295 + (float)(v185 * *(float *)&v935);
          v304 = v296 + (float)(v185 * *(float *)&v934);
          v305 = v300 + (float)(v185 * v247);
          v306 = v297 + (float)(v185 * 0.0);
          v307 = v301 + (float)(v185 * 0.0);
          v308 = v302 + v185;
          v309 = *(float *)&v925 + (float)(v217 * v306);
          v310 = v922 + (float)(v217 * v307);
          v311 = v281 + (float)(v218 * v307);
          v312 = v282 + (float)(v201 * v307);
          v313 = v283 + (float)(v217 * v308);
          v314 = v286 + (float)(v217 * v303);
          v315 = v289 + (float)(v217 * v304);
          v316 = v292 + (float)(v217 * v305);
          v990.f32[0] = (float)(v219 * (float)(v924 + (float)(v218 * v306))) + (float)(v220 * v309);
          v990.f32[1] = (float)(v219 * (float)(v923 + (float)(v201 * v306))) + (float)(*(float *)&v932 * v309);
          v990.f32[2] = (float)(v219 * v311) + (float)(v220 * v310);
          v990.f32[3] = (float)(v219 * v312) + (float)(*(float *)&v932 * v310);
          v991.f32[0] = (float)(v219 * (float)(v284 + (float)(v218 * v308))) + (float)(v220 * v313);
          v991.f32[1] = (float)(v219 * (float)(v285 + (float)(v201 * v308))) + (float)(*(float *)&v932 * v313);
          v991.f32[2] = (float)(v219 * (float)(v287 + (float)(v218 * v303))) + (float)(v220 * v314);
          v991.f32[3] = (float)(v219 * (float)(v288 + (float)(v201 * v303))) + (float)(*(float *)&v932 * v314);
          v992.f32[0] = (float)(v219 * (float)(v290 + (float)(v218 * v304))) + (float)(v220 * v315);
          v992.f32[1] = (float)(v219 * (float)(v291 + (float)(v201 * v304))) + (float)(*(float *)&v932 * v315);
          v992.f32[2] = (float)(v219 * (float)(v293 + (float)(v218 * v305))) + (float)(v220 * v316);
          v992.f32[3] = (float)(v219 * (float)(v294 + (float)(v201 * v305))) + (float)(*(float *)&v932 * v316);
        }
        if (!v53)
        {
LABEL_53:
          v157 = *(float *)&v951;
          v26 = *(float *)&v948;
          v158 = *(float *)&v946;
          v159 = *(float *)&v945;
          v99 = *(float *)&v949;
          v100 = *(float *)&v950;
          if (*(float *)&v947 == 0.0)
            goto LABEL_64;
          goto LABEL_58;
        }
        v317 = v55[1];
        v318 = v55[2];
        v319 = v55[3];
        v320 = v55[4];
        v321 = v55[5];
        v322 = v160[1];
        v323 = v160[2];
        v324 = v160[3];
        v325 = (float)(0.0 - (float)(*v160 * *v55)) - (float)(v324 * v317);
        v326 = v55[6];
        v327 = v55[7];
        v328 = v55[8];
        v329 = v160[4];
        v330 = v160[5];
        v331 = (float)(0.0 - (float)(v322 * *v55)) - (float)(v329 * v317);
        v332 = (float)(0.0 - (float)(v323 * *v55)) - (float)(v330 * v317);
        v333 = v220;
        v334 = v160[6];
        v335 = v160[7];
        v336 = v325 - (float)(v334 * v318);
        v337 = v331 - (float)(v335 * v318);
        v338 = v160[8];
        v339 = v332 - (float)(v338 * v318);
        v340 = 0.0 - (float)(*v160 * v319);
        v341 = 0.0 - (float)(v322 * v319);
        v342 = (float)(0.0 - (float)(v323 * v319)) - (float)(v330 * v320);
        v343 = (float)(v340 - (float)(v324 * v320)) - (float)(v334 * v321);
        v344 = (float)(v341 - (float)(v329 * v320)) - (float)(v335 * v321);
        v345 = v342 - (float)(v338 * v321);
        v346 = 0.0 - (float)(*v160 * v326);
        v347 = 0.0 - (float)(v322 * v326);
        v348 = (float)(0.0 - (float)(v323 * v326)) - (float)(v330 * v327);
        v349 = (float)(v346 - (float)(v324 * v327)) - (float)(v334 * v328);
        v350 = (float)(v347 - (float)(v329 * v327)) - (float)(v335 * v328);
        v351 = v348 - (float)(v338 * v328);
        v352 = (float)((float)((float)(*v160 * *(float *)&v944) + 0.0) - (float)(v324 * *(float *)&v937))
             + (float)(v334 * 0.0);
        v353 = (float)((float)(0.0 - (float)(*v160 * *(float *)&v936)) + (float)(v324 * 0.0))
             + (float)(v334 * *(float *)&v937);
        v354 = (float)((float)((float)(*v160 * 0.0) + 0.0) + (float)(v324 * *(float *)&v936))
             - (float)(v334 * *(float *)&v944);
        v993.f32[0] = (float)(v219 * v337) + (float)(v333 * v336);
        v993.f32[1] = (float)(v219 * v339) + (float)(v221 * v336);
        v993.f32[2] = (float)(v219 * v344) + (float)(v333 * v343);
        v993.f32[3] = (float)(v219 * v345) + (float)(v221 * v343);
        v994.f32[0] = (float)(v219 * v350) + (float)(v333 * v349);
        v994.f32[1] = (float)(v219 * v351) + (float)(v221 * v349);
        v994.f32[2] = (float)(v219
                            * (float)((float)((float)((float)(v322 * *(float *)&v944) + 0.0)
                                            - (float)(v329 * *(float *)&v937))
                                    + (float)(v335 * 0.0)))
                    + (float)(v333 * v352);
        v994.f32[3] = (float)(v219
                            * (float)((float)((float)((float)(v323 * *(float *)&v944) + 0.0)
                                            - (float)(v330 * *(float *)&v937))
                                    + (float)(v338 * 0.0)))
                    + (float)(v221 * v352);
        v995.f32[0] = (float)(v219
                            * (float)((float)((float)(0.0 - (float)(v322 * *(float *)&v936)) + (float)(v329 * 0.0))
                                    + (float)(v335 * *(float *)&v937)))
                    + (float)(v333 * v353);
        v995.f32[1] = (float)(v219
                            * (float)((float)((float)(0.0 - (float)(v323 * *(float *)&v936)) + (float)(v330 * 0.0))
                                    + (float)(v338 * *(float *)&v937)))
                    + (float)(v221 * v353);
        v995.f32[2] = (float)(v219
                            * (float)((float)((float)((float)(v322 * 0.0) + 0.0) + (float)(v329 * *(float *)&v936))
                                    - (float)(v335 * *(float *)&v944)))
                    + (float)(v333 * v354);
        v156 = (float)(v219
                     * (float)((float)((float)((float)(v323 * 0.0) + 0.0) + (float)(v330 * *(float *)&v936))
                             - (float)(v338 * *(float *)&v944)))
             + (float)(v221 * v354);
        v157 = *(float *)&v951;
        v26 = *(float *)&v948;
        v158 = *(float *)&v946;
        v159 = *(float *)&v945;
        v99 = *(float *)&v949;
        goto LABEL_51;
      }
LABEL_109:
      v17 = v918;
      v432 = *(_QWORD *)(v918 + 80 * v32 + 56);
      if (v432)
      {
        *(float *)&v951 = v25;
        v433 = v918 + 80 * v32;
        v434 = *(float *)(*(_QWORD *)(v943 + 32) + 4 * v32);
        v435 = *(float **)(v433 + 72);
        v436 = *v41;
        LODWORD(v949) = *(_DWORD *)(v39 + 8 * v38 + 4);
        v437 = v44[1];
        v438 = *v435;
        v439 = v435[1];
        v441 = v44[2];
        v440 = v44[3];
        v443 = v435[2];
        v442 = v435[3];
        v445 = v44[6];
        v444 = v44[7];
        v447 = v435[6];
        v446 = v435[7];
        v448 = (float)((float)((float)(*v435 * *v44) + 0.0) + (float)(v442 * v440)) + (float)(v447 * v445);
        v449 = v44[4];
        v450 = v44[5];
        v451 = (float)((float)((float)(*v435 * v437) + 0.0) + (float)(v442 * v449)) + (float)(v447 * v444);
        v452 = v44[8];
        v453 = (float)((float)((float)(*v435 * v441) + 0.0) + (float)(v442 * v450)) + (float)(v447 * v452);
        v455 = v435[4];
        v454 = v435[5];
        v456 = (float)((float)((float)(v439 * *v44) + 0.0) + (float)(v455 * v440)) + (float)(v446 * v445);
        v457 = (float)((float)(v443 * *v44) + 0.0) + (float)(v454 * v440);
        v458 = v435[8];
        v459 = v44[9] - v435[9];
        v460 = v44[10] - v435[10];
        v461 = (float)((float)((float)(v439 * v437) + 0.0) + (float)(v455 * v449)) + (float)(v446 * v444);
        v462 = v44[11] - v435[11];
        v463 = (float)((float)((float)(v439 * v441) + 0.0) + (float)(v455 * v450)) + (float)(v446 * v452);
        v464 = v457 + (float)(v458 * v445);
        *(float *)&v937 = v444;
        v465 = (float)((float)((float)(v443 * v437) + 0.0) + (float)(v454 * v449)) + (float)(v458 * v444);
        v466 = (float)((float)((float)(v443 * v441) + 0.0) + (float)(v454 * v450)) + (float)(v458 * v452);
        v467 = 1.0 / v434;
        v468 = (float)((float)(v438 * v459) + 0.0) + (float)(v442 * v460);
        v469 = v436;
        v470 = (float)(1.0 / v434) * v436;
        v471 = v468 + (float)(v447 * v462);
        v472 = (float)((float)((float)(v439 * v459) + 0.0) + (float)(v455 * v460)) + (float)(v446 * v462);
        v473 = (float)((float)((float)(v443 * v459) + 0.0) + (float)(v454 * v460)) + (float)(v458 * v462);
        v474 = v467 * *(float *)&v949;
        v475 = (float)((float)((float)(v470 * v451) + (float)(v448 * v467))
                     + (float)(v453 * (float)(v467 * *(float *)&v949)))
             + v471;
        *(float *)&v950 = (float)((float)((float)(v470 * v461) + (float)(v456 * v467))
                                + (float)(v463 * (float)(v467 * *(float *)&v949)))
                        + v472;
        v476 = (float)((float)((float)(v470 * v465) + (float)(v464 * v467))
                     + (float)(v466 * (float)(v467 * *(float *)&v949)))
             + v473;
        v477 = 1.0 / v475;
        v478 = *(float *)v432;
        LODWORD(v944) = *(_DWORD *)(v432 + 4);
        v479 = *(float *)(v432 + 8);
        if (v9)
        {
          v480 = v477 * v477;
          v481 = (float)(v477 * v477) * (float)-*(float *)&v950;
          v482 = (float)(v477 * v477) * (float)-v476;
          if (v13)
          {
            v483 = -(float)(v467 * v467);
            v484 = v483 * (float)((float)(v448 + (float)(v451 * v469)) + (float)(v453 * *(float *)&v949));
            v485 = *(float *)(v432 + 8);
            v952 = -(float)(v480 * v484);
            v953 = (float)((float)(v483 * (float)((float)(v456 + (float)(v461 * v469)) + (float)(v463 * *(float *)&v949)))
                         * v477)
                 + (float)(v481 * v484);
            v479 = v485;
            v954 = (float)((float)(v483 * (float)((float)(v464 + (float)(v465 * v469)) + (float)(v466 * *(float *)&v949)))
                         * v477)
                 + (float)(v482 * v484);
          }
          if (v45)
          {
            *(float *)&v949 = v479;
            v486 = *v44;
            v487 = v44[1];
            v488 = (float)(v467 * v487) - (float)(*v44 * v470);
            *(float *)&v936 = v478;
            v490 = v44[2];
            v489 = v44[3];
            v491 = (float)(v467 * v449) - (float)(v489 * v470);
            v492 = (float)(v467 * *(float *)&v937) - (float)(v445 * v470);
            v493 = (float)(v486 * v474) - (float)(v467 * v490);
            v494 = (float)(v489 * v474) - (float)(v467 * v450);
            v495 = (float)(v445 * v474) - (float)(v467 * v452);
            v496 = (float)(v470 * v490) - (float)(v487 * v474);
            v497 = (float)(v470 * v450) - (float)(v449 * v474);
            v498 = (float)(v470 * v452) - (float)(*(float *)&v937 * v474);
            v499 = v435[1];
            v501 = v435[2];
            v500 = v435[3];
            v502 = (float)(*v435 + 0.0) + (float)(v500 * 0.0);
            v503 = (float)(v499 + 0.0) + (float)(v455 * 0.0);
            v504 = (float)(*v435 * 0.0) + 0.0;
            v505 = (float)(v499 * 0.0) + 0.0;
            v506 = (float)((float)(*v435 * v488) + 0.0) + (float)(v500 * v491);
            v507 = (float)((float)(v499 * v488) + 0.0) + (float)(v455 * v491);
            v508 = (float)((float)(v501 * v488) + 0.0) + (float)(v454 * v491);
            v509 = (float)((float)(*v435 * v493) + 0.0) + (float)(v500 * v494);
            v510 = (float)((float)(v499 * v493) + 0.0) + (float)(v455 * v494);
            v511 = (float)((float)(v501 * v493) + 0.0) + (float)(v454 * v494);
            v512 = v504 + v500;
            v513 = v504 + (float)(v500 * 0.0);
            v514 = (float)((float)(*v435 * v496) + 0.0) + (float)(v500 * v497);
            v515 = v455 + v505;
            v516 = v505 + (float)(v455 * 0.0);
            v517 = (float)((float)(v499 * v496) + 0.0) + (float)(v455 * v497);
            v518 = (float)(v501 + 0.0) + (float)(v454 * 0.0);
            v519 = (float)(v501 * v496) + 0.0;
            v520 = (float)(v501 * 0.0) + 0.0;
            v521 = v519 + (float)(v454 * v497);
            v522 = v454 + v520;
            v523 = v520 + (float)(v454 * 0.0);
            v524 = v435[6];
            v525 = v506 + (float)(v524 * v492);
            v526 = v507 + (float)(v446 * v492);
            v527 = v508 + (float)(v458 * v492);
            v528 = v509 + (float)(v524 * v495);
            v529 = v510 + (float)(v446 * v495);
            v530 = v511 + (float)(v458 * v495);
            v531 = v502 + (float)(v524 * 0.0);
            v532 = v512 + (float)(v524 * 0.0);
            v533 = v513 + v524;
            v534 = v514 + (float)(v524 * v498);
            v535 = v503 + (float)(v446 * 0.0);
            v536 = v515 + (float)(v446 * 0.0);
            v537 = v446 + v516;
            v538 = v517 + (float)(v446 * v498);
            v539 = v521 + (float)(v458 * v498);
            v955 = -(float)(v480 * v531);
            v956 = (float)(v477 * v535) + (float)(v481 * v531);
            v957 = (float)(v477 * (float)(v518 + (float)(v458 * 0.0))) + (float)(v482 * v531);
            v958 = -(float)(v480 * v532);
            v959 = (float)(v477 * v536) + (float)(v481 * v532);
            v960 = (float)(v477 * (float)(v522 + (float)(v458 * 0.0))) + (float)(v482 * v532);
            v961 = -(float)(v480 * v533);
            v962 = (float)(v477 * v537) + (float)(v481 * v533);
            v540 = (float)(v477 * (float)(v458 + v523)) + (float)(v482 * v533);
            v478 = *(float *)&v936;
            v963 = v540;
            v964 = -(float)(v480 * v525);
            v965 = (float)(v477 * v526) + (float)(v481 * v525);
            v966 = (float)(v477 * v527) + (float)(v482 * v525);
            v967 = -(float)(v480 * v528);
            v968 = (float)(v477 * v529) + (float)(v481 * v528);
            v969 = (float)(v477 * v530) + (float)(v482 * v528);
            v970 = -(float)(v480 * v534);
            v971 = (float)(v477 * v538) + (float)(v481 * v534);
            v479 = *(float *)&v949;
            v972 = (float)(v477 * v539) + (float)(v482 * v534);
          }
        }
        v541 = *(float **)(v433 + 64);
        *(float *)v2.i32 = v478 - v477;
        *(float *)v8.i32 = *(float *)&v944 - (float)(*(float *)&v950 * v477);
        *(float *)v7.i32 = v479 - (float)(v476 * v477);
        v542 = v541[5];
        v543 = (float)((float)((float)((float)((float)((float)((float)(*v541 * (float)(v478 - v477)) + 0.0)
                                                     + (float)(v541[1] * *(float *)v8.i32))
                                             + (float)(v541[2] * *(float *)v7.i32))
                                     * (float)(v478 - v477))
                             + 0.0)
                     + (float)((float)((float)((float)((float)(v541[3] * (float)(v478 - v477)) + 0.0)
                                             + (float)(v541[4] * *(float *)v8.i32))
                                     + (float)(v542 * *(float *)v7.i32))
                             * *(float *)v8.i32))
             + (float)((float)((float)((float)((float)(v541[6] * (float)(v478 - v477)) + 0.0)
                                     + (float)(v541[7] * *(float *)v8.i32))
                             + (float)(v541[8] * *(float *)v7.i32))
                     * *(float *)v7.i32);
        v544 = (float)(v915[10] * v915[10]) * 3.0;
        if (v543 < v544)
          v545 = (float)((float)((float)((float)((float)((float)((float)(*v541 * (float)(v478 - v477)) + 0.0)
                                                       + (float)(v541[1] * *(float *)v8.i32))
                                               + (float)(v541[2] * *(float *)v7.i32))
                                       * (float)(v478 - v477))
                               + 0.0)
                       + (float)((float)((float)((float)((float)(v541[3] * (float)(v478 - v477)) + 0.0)
                                               + (float)(v541[4] * *(float *)v8.i32))
                                       + (float)(v542 * *(float *)v7.i32))
                               * *(float *)v8.i32))
               + (float)((float)((float)((float)((float)(v541[6] * (float)(v478 - v477)) + 0.0)
                                       + (float)(v541[7] * *(float *)v8.i32))
                               + (float)(v541[8] * *(float *)v7.i32))
                       * *(float *)v7.i32);
        else
          v545 = (float)(v915[10] * v915[10]) * 3.0;
        v15 = v940;
        v546 = *(float *)&v951;
        v26 = *(float *)&v948;
        if (v9 && v543 < v544)
        {
          if (v45)
          {
            *(float *)&v950 = v545;
            v547 = *(_DWORD *)(*(_QWORD *)v943 + 32 * v920 + 12);
            v548 = v547 + v941;
            v549 = (uint64_t)*v18;
            v550 = *((int *)v18 + 4);
            v551 = v547 + v550 * (v547 + v941);
            v973.i32[0] = 0;
            v552 = (float)(v955 * *v541) + 0.0;
            *(float *)&v949 = v955;
            v973.f32[0] = v552;
            v973.f32[0] = v552 + (float)(v956 * v541[1]);
            v553 = v973.f32[0] + (float)(v957 * v541[2]);
            v973.f32[0] = v553;
            v973.i32[1] = 0;
            v554 = (float)(v958 * *v541) + 0.0;
            *(float *)&v944 = v958;
            v973.f32[1] = v554;
            v973.f32[1] = v554 + (float)(v959 * v541[1]);
            v555 = v973.f32[1] + (float)(v960 * v541[2]);
            *(float *)&v937 = v960;
            *(uint64_t *)((char *)v973.i64 + 4) = LODWORD(v555);
            v973.f32[2] = (float)(v961 * *v541) + 0.0;
            v556 = v973.f32[2] + (float)(v962 * v541[1]);
            *(float *)&v936 = v962;
            v973.f32[2] = v556;
            v557 = v556 + (float)(v963 * v541[2]);
            v973.f32[2] = v557;
            v973.i32[3] = 0;
            v973.f32[3] = (float)(v964 * *v541) + 0.0;
            v973.f32[3] = v973.f32[3] + (float)(v965 * v541[1]);
            v558 = v973.f32[3] + (float)(v966 * v541[2]);
            v973.f32[3] = v558;
            v974.i32[0] = 0;
            v974.f32[0] = (float)(v967 * *v541) + 0.0;
            v974.f32[0] = v974.f32[0] + (float)(v968 * v541[1]);
            v559 = v974.f32[0] + (float)(v969 * v541[2]);
            v974.f32[0] = v559;
            v974.i32[1] = 0;
            v974.f32[1] = (float)(v970 * *v541) + 0.0;
            v974.f32[1] = v974.f32[1] + (float)(v971 * v541[1]);
            v560 = v974.f32[1] + (float)(v972 * v541[2]);
            v974.f32[1] = v560;
            v975.i32[0] = 0;
            v975.f32[0] = (float)(v955 * v541[3]) + 0.0;
            v975.f32[0] = v975.f32[0] + (float)(v956 * v541[4]);
            v561 = v975.f32[0] + (float)(v957 * v541[5]);
            v975.f32[0] = v561;
            v975.i32[1] = 0;
            v975.f32[1] = (float)(v958 * v541[3]) + 0.0;
            v975.f32[1] = v975.f32[1] + (float)(v959 * v541[4]);
            v562 = v975.f32[1] + (float)(v960 * v541[5]);
            v975.f32[1] = v562;
            v975.i32[2] = 0;
            v975.f32[2] = (float)(v961 * v541[3]) + 0.0;
            v975.f32[2] = v975.f32[2] + (float)(v962 * v541[4]);
            v563 = v975.f32[2] + (float)(v963 * v541[5]);
            v975.f32[2] = v563;
            v975.i32[3] = 0;
            v975.f32[3] = (float)(v964 * v541[3]) + 0.0;
            v975.f32[3] = v975.f32[3] + (float)(v965 * v541[4]);
            v564 = v975.f32[3] + (float)(v966 * v541[5]);
            v975.f32[3] = v564;
            v976.i32[0] = 0;
            v976.f32[0] = (float)(v967 * v541[3]) + 0.0;
            v976.f32[0] = v976.f32[0] + (float)(v968 * v541[4]);
            v565 = v976.f32[0] + (float)(v969 * v541[5]);
            v976.f32[0] = v565;
            v976.i32[1] = 0;
            v976.f32[1] = (float)(v970 * v541[3]) + 0.0;
            v976.f32[1] = v976.f32[1] + (float)(v971 * v541[4]);
            v566 = v976.f32[1] + (float)(v972 * v541[5]);
            v976.f32[1] = v566;
            v977.i32[0] = 0;
            v977.f32[0] = (float)(v955 * v541[6]) + 0.0;
            v977.f32[0] = v977.f32[0] + (float)(v956 * v541[7]);
            v567 = v977.f32[0] + (float)(v957 * v541[8]);
            v977.f32[0] = v567;
            v977.i32[1] = 0;
            v977.f32[1] = (float)(v958 * v541[6]) + 0.0;
            v977.f32[1] = v977.f32[1] + (float)(v959 * v541[7]);
            v568 = v977.f32[1] + (float)(v960 * v541[8]);
            v977.f32[1] = v568;
            v977.i32[2] = 0;
            v977.f32[2] = (float)(v961 * v541[6]) + 0.0;
            v977.f32[2] = v977.f32[2] + (float)(v962 * v541[7]);
            v569 = v977.f32[2] + (float)(v963 * v541[8]);
            v977.f32[2] = v569;
            v977.i32[3] = 0;
            v977.f32[3] = (float)(v964 * v541[6]) + 0.0;
            v977.f32[3] = v977.f32[3] + (float)(v965 * v541[7]);
            v570 = v977.f32[3] + (float)(v966 * v541[8]);
            v977.f32[3] = v570;
            v978.i32[0] = 0;
            v978.f32[0] = (float)(v967 * v541[6]) + 0.0;
            v978.f32[0] = v978.f32[0] + (float)(v968 * v541[7]);
            v571 = v978.f32[0] + (float)(v969 * v541[8]);
            v978.f32[0] = v571;
            v978.i32[1] = 0;
            v978.f32[1] = (float)(v970 * v541[6]) + 0.0;
            v978.f32[1] = v978.f32[1] + (float)(v971 * v541[7]);
            v572 = v978.f32[1] + (float)(v972 * v541[8]);
            v978.f32[1] = v572;
            v573 = v913;
            for (i = 20; i != 92; i += 12)
            {
              *(_QWORD *)(v573 - 1) = 0;
              *(_QWORD *)(v573 - 3) = 0;
              *(_QWORD *)(v573 - 5) = 0;
              v575 = *(v573 - 4);
              v576 = *(v573 - 5) + (float)(v553 * *(float *)((char *)&v951 + i));
              *(v573 - 5) = v576;
              v577 = v575 + (float)(v555 * *(float *)((char *)&v951 + i));
              *(v573 - 4) = v577;
              v578 = *(v573 - 2);
              v579 = *(v573 - 3) + (float)(v557 * *(float *)((char *)&v951 + i));
              *(v573 - 3) = v579;
              v580 = v578 + (float)(v558 * *(float *)((char *)&v951 + i));
              *(v573 - 2) = v580;
              v581 = *v573;
              v582 = *(v573 - 1) + (float)(v559 * *(float *)((char *)&v951 + i));
              *(v573 - 1) = v582;
              v583 = v581 + (float)(v560 * *(float *)((char *)&v951 + i));
              *v573 = v583;
              v584 = v576 + (float)(v561 * *(float *)((char *)&v951 + i + 4));
              *(v573 - 5) = v584;
              v585 = v577 + (float)(v562 * *(float *)((char *)&v951 + i + 4));
              *(v573 - 4) = v585;
              v586 = v579 + (float)(v563 * *(float *)((char *)&v951 + i + 4));
              *(v573 - 3) = v586;
              v587 = v580 + (float)(v564 * *(float *)((char *)&v951 + i + 4));
              *(v573 - 2) = v587;
              v588 = v582 + (float)(v565 * *(float *)((char *)&v951 + i + 4));
              *(v573 - 1) = v588;
              v589 = v583 + (float)(v566 * *(float *)((char *)&v951 + i + 4));
              *v573 = v589;
              *(v573 - 5) = v584 + (float)(v567 * *(float *)((char *)&v952 + i));
              *(v573 - 4) = v585 + (float)(v568 * *(float *)((char *)&v952 + i));
              *(v573 - 3) = v586 + (float)(v569 * *(float *)((char *)&v952 + i));
              *(v573 - 2) = v587 + (float)(v570 * *(float *)((char *)&v952 + i));
              *(v573 - 1) = v588 + (float)(v571 * *(float *)((char *)&v952 + i));
              *v573 = v589 + (float)(v572 * *(float *)((char *)&v952 + i));
              v573 += 6;
            }
            v590 = (float *)(v549 + 4 * v551);
            v591 = v590[1];
            *v590 = *v590 + v979;
            v590[1] = v591 + v980;
            v592 = v590[3];
            v590[2] = v590[2] + v981;
            v590[3] = v592 + v982;
            v593 = v590[5];
            v590[4] = v590[4] + v983;
            v590[5] = v593 + v984[0];
            v594 = &v590[v550];
            v595 = v594[1];
            *v594 = *v594 + v984[1];
            v594[1] = v595 + v984[2];
            v596 = v594[3];
            v594[2] = v594[2] + v984[3];
            v594[3] = v596 + v984[4];
            v597 = v594[5];
            v594[4] = v594[4] + v984[5];
            v594[5] = v597 + v984[6];
            v598 = &v590[2 * v550];
            v599 = v598[1];
            *v598 = *v598 + v984[7];
            v598[1] = v599 + v984[8];
            v600 = v598[3];
            v598[2] = v598[2] + v984[9];
            v598[3] = v600 + v984[10];
            v601 = v598[5];
            v598[4] = v598[4] + v984[11];
            v598[5] = v601 + v984[12];
            v602 = &v590[3 * (int)v550];
            v603 = v602[1];
            *v602 = *v602 + v984[13];
            v602[1] = v603 + v984[14];
            v604 = v602[3];
            v602[2] = v602[2] + v984[15];
            v602[3] = v604 + v984[16];
            v605 = v602[5];
            v602[4] = v602[4] + v984[17];
            v602[5] = v605 + v984[18];
            v606 = &v590[4 * v550];
            v607 = v606[1];
            *v606 = *v606 + v984[19];
            v606[1] = v607 + v984[20];
            v608 = v606[3];
            v606[2] = v606[2] + v984[21];
            v606[3] = v608 + v984[22];
            v609 = v606[5];
            v606[4] = v606[4] + v984[23];
            v606[5] = v609 + v984[24];
            v610 = &v590[5 * (int)v550];
            v611 = v610[1];
            *v610 = *v610 + v984[25];
            v610[1] = v611 + v984[26];
            v612 = v610[3];
            v610[2] = v610[2] + v984[27];
            v610[3] = v612 + v984[28];
            v613 = v610[5];
            v610[4] = v610[4] + v984[29];
            v610[5] = v613 + v984[30];
            v614 = (float32x2_t *)&v11[4 * v548];
            *(float32x4_t *)v614->f32 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(*(float32x4_t *)v614->f32, v973, *(float *)v2.i32), v975, *(float *)v8.i32), v977, *(float *)v7.i32);
            v614[2] = vmla_f32(vmla_f32(vmla_f32(v614[2], (float32x2_t)*(_OWORD *)&vdupq_lane_s32(v2, 0), v974), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(v8, 0), v976), (float32x2_t)*(_OWORD *)&vdupq_lane_s32(v7, 0), v978);
            v18 = v939;
            v546 = *(float *)&v951;
            v26 = *(float *)&v948;
            v545 = *(float *)&v950;
          }
          if (v13)
          {
            v615 = v952;
            v616 = v953;
            v617 = v954;
            v618 = v933;
            *(float *)((char *)v933->f32 + (_QWORD)v13) = *(float *)((char *)v933->f32 + (_QWORD)v13)
                                                        + (float)((float)((float)((float)((float)((float)((float)((float)(*v541 * v952) + 0.0) + (float)(v541[1] * v953))
                                                                                                + (float)(v541[2] * v954))
                                                                                        * v952)
                                                                                + 0.0)
                                                                        + (float)((float)((float)((float)((float)(v541[3] * v952) + 0.0)
                                                                                                + (float)(v541[4] * v953))
                                                                                        + (float)(v541[5] * v954))
                                                                                * v953))
                                                                + (float)((float)((float)((float)((float)(v541[6] * v952)
                                                                                                + 0.0)
                                                                                        + (float)(v541[7] * v953))
                                                                                + (float)(v541[8] * v954))
                                                                        * v954));
            v619 = v914;
            *(_QWORD *)v914 = 0;
            v619[2] = 0.0;
            v955 = (float)(*v541 * *(float *)v2.i32) + 0.0;
            v956 = (float)(v541[1] * *(float *)v2.i32) + 0.0;
            v957 = (float)(v541[2] * *(float *)v2.i32) + 0.0;
            v620 = v956 + (float)(v541[4] * *(float *)v8.i32);
            v621 = v541[6];
            v622 = v957 + (float)(v541[5] * *(float *)v8.i32);
            v955 = v955 + (float)(v541[3] * *(float *)v8.i32);
            v956 = v620;
            v957 = v622;
            *(float *)((char *)v618->f32 + (_QWORD)v11) = (float)((float)(*(float *)((char *)v618->f32 + (_QWORD)v11)
                                                                        + (float)(v615
                                                                                * (float)(v955
                                                                                        + (float)(v621 * *(float *)v7.i32))))
                                                                + (float)(v616
                                                                        * (float)(v620
                                                                                + (float)(v541[7] * *(float *)v7.i32))))
                                                        + (float)(v617
                                                                * (float)(v622 + (float)(v541[8] * *(float *)v7.i32)));
          }
        }
        v25 = v546 + v545;
        v942 += 3;
        if (v916)
        {
LABEL_24:
          if (v9)
            goto LABEL_25;
          goto LABEL_28;
        }
      }
      else
      {
        v15 = v940;
        if (v916)
          goto LABEL_24;
      }
      v623 = -(float)(*(float *)(*(_QWORD *)(v943 + 32) + 4 * v32) * v26);
      v25 = v25 + (float)(v623 * v623);
      ++v942;
      if (v9)
      {
        v624 = v933;
        *(float *)((char *)v933->f32 + (_QWORD)v13) = *(float *)((char *)v933->f32 + (_QWORD)v13) + (float)(v26 * v26);
        *(float *)((char *)v624->f32 + (_QWORD)v11) = *(float *)((char *)v624->f32 + (_QWORD)v11) + (float)(v26 * v623);
LABEL_25:
        v35 = *(float *)((char *)v933->f32 + (_QWORD)v13);
        if (v35 < 0.000001)
          v35 = 0.000001;
        *(float *)((char *)v933->f32 + (_QWORD)v13) = v35;
      }
LABEL_28:
      if (++v32 == v917)
        goto LABEL_132;
    }
  }
  v942 = 0;
LABEL_132:
  v625 = *(_DWORD *)(v943 + 52);
  if (v625 >= 1)
  {
    v626 = 0;
    if (v9)
      v627 = &v952;
    else
      v627 = 0;
    v925 = v11 + 4;
    v926 = v627;
    v628 = (int *)(v15 + 24);
    v927.i64[0] = (uint64_t)&v988;
    v629 = 2;
    v630 = &v989;
    do
    {
      if (!*(_QWORD *)(v15 + 80 * v626))
        goto LABEL_139;
      v930 = &v912;
      v631 = *(_DWORD *)(v15 + 80 * v626 + 20);
      v951 = v631;
      if (v13)
        v632 = v631 < 0;
      else
        v632 = 1;
      v633 = v632;
      v986 = 0;
      v985 = 0;
      v634 = *(unsigned int *)(v15 + 80 * v626 + 16);
      LODWORD(v635) = MEMORY[0x24BDAC7A8](v629, v630);
      v933 = (float32x4_t *)((char *)&v912 - v641);
      if ((v633 & 1) != 0)
        v635 = v635;
      else
        v635 = v634;
      v931 = v628;
      v932 = v635;
      if ((v633 & 1) != 0)
        v630 = v636;
      else
        v630 = v637;
      v642 = (v633 & 1) != 0;
      if ((v633 & 1) != 0)
        v643 = v637;
      else
        v643 = (float32x2_t *)((char *)v637 + 4 * v640);
      v644 = v15 + v626 * v638;
      v647 = *(_DWORD *)(v644 + 64);
      v645 = (int *)(v644 + 64);
      v646 = v647;
      if (v647 < 1)
      {
        v653 = (float *)v933;
        if ((unint64_t)((char *)v643 - (char *)v637) >> 2 >= 0x401)
          goto LABEL_371;
      }
      else
      {
        v648 = *(_QWORD *)v943;
        v649 = &v985;
        v650 = (_DWORD *)v927.i64[0];
        v651 = v628;
        v652 = v646;
        v653 = (float *)v933;
        do
        {
          while (1)
          {
            v654 = *v651++;
            v655 = *(_DWORD *)(v648 + 32 * v654 + 16);
            if (v655)
              break;
            *(_BYTE *)v649 = 1;
            v649 = (uint64_t *)((char *)v649 + 1);
            v650 += 6;
            if (!--v652)
              goto LABEL_161;
          }
          v642 = 0;
          *((_QWORD *)v650 - 2) = v643;
          *(v650 - 2) = v634;
          *(v650 - 1) = v655;
          *v650 = v634;
          v650 += 6;
          v643 = (float32x2_t *)((char *)v643 + 4 * v655 * (int)v634);
          v649 = (uint64_t *)((char *)v649 + 1);
          --v652;
        }
        while (v652);
LABEL_161:
        if ((unint64_t)((char *)v643 - (char *)v637) >> 2 >= 0x401)
LABEL_371:
          __assert_rtn("linearize", "bon.c", 690, "ptr - buf <= ARR_SIZE(buf)");
      }
      if (v642)
      {
        v628 = v931;
        v629 = v932;
        goto LABEL_138;
      }
      v656 = *v639;
      v657 = v15 + 80 * v626;
      v658 = v645;
      v928 = v630;
      v656(v653, v926);
      v659 = v658;
      v630 = v928;
      v660 = *(_QWORD *)(v657 + 72);
      if (v660)
      {
        v661 = v932;
        if ((int)v634 >= 1)
        {
          v662 = (float *)(v660 + 4 * (((int)v634 + (int)v634 * (int)v634) / 2 - 1));
          v663 = v634 - 1;
          v664 = &v653[(v634 - 1)];
          v665 = *v662 * *v664;
          *v664 = v665;
          if ((_DWORD)v634 != 1)
          {
            v666 = v634 - 2;
            do
            {
              v667 = &v653[v666];
              --v662;
              v668 = v663;
              do
              {
                v669 = *v662--;
                v670 = v669;
                v671 = *v667--;
                v665 = v665 + (float)(v670 * v671);
                *v664 = v665;
                --v668;
              }
              while (v668 > 0);
              --v666;
              v664 = &v653[(v663 - 1)];
              v665 = *v662 * *v664;
              *v664 = v665;
              v719 = v663-- >= 2;
            }
            while (v719);
          }
        }
        if ((int)v661 < 1)
          v672 = 1;
        else
          v672 = v633;
        if ((v672 & 1) == 0)
        {
          v673 = v661 - 1;
          v674 = (float *)(v660 + 4 * (((int)v661 + (int)v661 * (int)v661) / 2 - 1));
          v675 = (float *)v928 + v661 - 1;
          v676 = *v674 * *v675;
          *v675 = v676;
          if ((_DWORD)v661 != 1)
          {
            v677 = v661 - 2;
            do
            {
              v678 = (float *)v928 + v677;
              --v674;
              v679 = v673;
              do
              {
                v680 = *v674--;
                v681 = v680;
                v682 = *v678--;
                v676 = v676 + (float)(v681 * v682);
                *v675 = v676;
                --v679;
              }
              while (v679 > 0);
              --v677;
              v632 = v673-- > 1;
              v675 = (float *)v928 + v673;
              v676 = *v674 * *v675;
              *v675 = v676;
            }
            while (v632);
          }
        }
        v683 = *v658;
        if ((int)v683 >= 1)
        {
          for (j = 0; j != v683; ++j)
          {
            if (!*((_BYTE *)&v985 + j))
            {
              v685 = &v987[3 * j];
              v686 = *((_DWORD *)v685 + 3);
              if (v686 >= 1)
              {
                v687 = *((unsigned int *)v685 + 2);
                v688 = (int)v687;
                v689 = v688 + v688 * v688;
                v690 = v689 >= 0 ? v687 + v687 * v687 : v689 + 1;
                if ((int)v687 >= 1)
                {
                  v691 = *v685;
                  v692 = (float *)(v660 + 4 * ((v690 >> 1) - 1));
                  v693 = v687 - 1;
                  v694 = (v687 - 1);
                  if ((_DWORD)v687 == 1)
                  {
                    v695 = (float *)(v691 + 4 * v694);
                    do
                    {
                      *v695 = *v692 * *v695;
                      ++v695;
                      --v686;
                    }
                    while (v686);
                  }
                  else
                  {
                    v696 = 0;
                    v697 = v688 - 2;
                    v698 = 4 * v688;
                    do
                    {
                      v699 = (float *)(v691 + 4 * v694);
                      v700 = *v692 * *v699;
                      *v699 = v700;
                      v701 = v693;
                      v702 = v692;
                      v703 = v697;
                      do
                      {
                        v704 = 4 * v703;
                        --v702;
                        v705 = v701;
                        do
                        {
                          v706 = *v702--;
                          v700 = v700 + (float)(v706 * *(float *)(v691 + v704));
                          *v699 = v700;
                          --v705;
                          v704 -= 4;
                        }
                        while (v705 > 0);
                        --v703;
                        v632 = v701-- > 1;
                        v699 = (float *)(v691 + 4 * v701);
                        v700 = *v702 * *v699;
                        *v699 = v700;
                      }
                      while (v632);
                      v691 += v698;
                      ++v696;
                    }
                    while (v696 != v686);
                  }
                }
              }
            }
          }
        }
      }
      if ((int)v634 < 1)
      {
        v628 = v931;
        v629 = v932;
        v709 = 0uLL;
        v710 = v951;
        v15 = v940;
        if (!v9)
          goto LABEL_138;
      }
      else
      {
        v707 = v653;
        v708 = v634;
        v628 = v931;
        v629 = v932;
        v709 = 0uLL;
        v710 = v951;
        v15 = v940;
        do
        {
          v711 = *v707++;
          v25 = v25 + (float)(v711 * v711);
          --v708;
        }
        while (v708);
        v942 += v634;
        if (!v9)
          goto LABEL_138;
      }
      if (v633)
      {
        v944 = *v659;
        if ((int)v944 >= 1)
          goto LABEL_276;
        goto LABEL_369;
      }
      v712 = 0.0;
      if ((int)v634 >= 1)
      {
        v713 = (float *)v928;
        do
        {
          v714 = *v713++;
          v712 = v712 + (float)(v714 * v714);
          --v634;
        }
        while (v634);
      }
      *((float *)v13 + v710) = v712 + *((float *)v13 + v710);
      if ((int)v629 < 1)
        goto LABEL_233;
      v715 = (float *)&v11[4 * v710];
      v716 = *v715;
      if (v629 >= 0x10)
      {
        v717 = 0;
        v718 = (unint64_t)&v925[4 * v710];
        v719 = v715 >= &v933->f32[v629] || (unint64_t)v933 >= v718;
        v720 = !v719;
        if (((unint64_t)v928 >= v718 || v715 >= (float *)v928 + v629) && (v720 & 1) == 0)
        {
          v717 = v629 & 0xFFFFFFF8;
          v722 = (float32x4_t *)&v928[2];
          v723 = v933 + 1;
          v724 = v717;
          do
          {
            v725 = vmulq_f32(v722[-1], v723[-1]);
            v726 = vmulq_f32(*v722, *v723);
            v716 = (float)((float)((float)((float)((float)((float)((float)(v716 + v725.f32[0]) + v725.f32[1])
                                                         + v725.f32[2])
                                                 + v725.f32[3])
                                         + v726.f32[0])
                                 + v726.f32[1])
                         + v726.f32[2])
                 + v726.f32[3];
            v722 += 2;
            v723 += 2;
            v724 -= 8;
          }
          while (v724);
          *v715 = v716;
          if (v717 == v629)
            goto LABEL_233;
        }
      }
      else
      {
        v717 = 0;
      }
      v727 = v629 - v717;
      v728 = 4 * v717;
      v729 = &v933->f32[v717];
      v730 = (float *)((char *)v928 + v728);
      do
      {
        v731 = *v730++;
        v732 = v731;
        v733 = *v729++;
        v716 = v716 + (float)(v732 * v733);
        *v715 = v716;
        --v727;
      }
      while (v727);
LABEL_233:
      if (*v659 < 1)
        goto LABEL_369;
      v734 = *v659;
      v735 = 0;
      do
      {
        if (*((_BYTE *)&v985 + v735))
          goto LABEL_235;
        v736 = &v987[3 * v735];
        v737 = *((unsigned int *)v736 + 3);
        if ((int)v737 < 1)
          goto LABEL_235;
        v738 = *v736;
        v739 = *((_DWORD *)v736 + 2);
        v740 = *((int *)v736 + 4);
        v741 = *v939;
        v742 = *(_DWORD *)(*(_QWORD *)v943 + 32 * *(int *)(v940 + 80 * v626 + 4 * v735 + 24) + 12)
             + *((_DWORD *)v939 + 4) * v951;
        v743 = (float *)&(*v939)[4 * v742];
        if (v739 > 7)
        {
          v746 = v739 & 0x7FFFFFF8;
          if ((int)(v739 & 0xFFFFFFF8) >= v739)
          {
            for (k = 0; k != v737; ++k)
            {
              v772 = (float32x4_t *)(v738 + 4 * k * v740);
              v773 = 0uLL;
              v774 = 8;
              v775 = (float32x4_t *)v928;
              v776 = 0uLL;
              do
              {
                v777 = *v772;
                v778 = v772[1];
                v772 += 2;
                v779 = *v775;
                v780 = v775[1];
                v775 += 2;
                v773 = vmlaq_f32(v773, v779, v777);
                v776 = vmlaq_f32(v776, v780, v778);
                v774 += 8;
              }
              while (v774 <= v739);
              v743[k] = (float)((float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v773, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v773, 2), vaddq_f32(v773, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v773.f32, 1)))).f32[0]+ 0.0)+ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v776, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v776, 2), vaddq_f32(v776, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v776.f32, 1)))).f32[0])+ v743[k];
            }
            goto LABEL_235;
          }
          v747 = 0;
          v748 = (v739 + ~v746);
          v749 = (v748 + 1) & 0x1FFFFFFF8;
          v750 = v749;
          while (2)
          {
            v751 = (float32x4_t *)(v738 + 4 * v747 * v740);
            v752 = 0uLL;
            v753 = 8;
            v754 = (float32x4_t *)v928;
            v755 = 0uLL;
            do
            {
              v756 = *v751;
              v757 = v751[1];
              v751 += 2;
              v758 = *v754;
              v759 = v754[1];
              v754 += 2;
              v752 = vmlaq_f32(v752, v758, v756);
              v755 = vmlaq_f32(v755, v759, v757);
              v753 += 8;
            }
            while (v753 <= v739);
            v760 = (float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v752, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v752, 2), vaddq_f32(v752, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v752.f32, 1)))).f32[0]+ 0.0)+ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v755, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v755, 2), vaddq_f32(v755, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v755.f32, 1)))).f32[0];
            if (v748 >= 7)
            {
              v764 = 0;
              v761 = &v751->f32[v750];
              v762 = &v754->f32[v750];
              v765 = (v748 + 1) & 0x1FFFFFFF8;
              do
              {
                v766 = vmulq_f32(v751[v764], v754[v764]);
                v767 = vmulq_f32(v751[v764 + 1], v754[v764 + 1]);
                v760 = (float)((float)((float)((float)((float)((float)((float)(v760 + v766.f32[0]) + v766.f32[1])
                                                             + v766.f32[2])
                                                     + v766.f32[3])
                                             + v767.f32[0])
                                     + v767.f32[1])
                             + v767.f32[2])
                     + v767.f32[3];
                v764 += 2;
                v765 -= 8;
              }
              while (v765);
              if (v748 + 1 != v749)
              {
                v763 = v739 - (v746 + v749);
                goto LABEL_260;
              }
            }
            else
            {
              v761 = (float *)v751;
              v762 = (float *)v754;
              v763 = v739 - v746;
              do
              {
LABEL_260:
                v768 = *v761++;
                v769 = v768;
                v770 = *v762++;
                v760 = v760 + (float)(v769 * v770);
                --v763;
              }
              while (v763);
            }
            v743[v747] = v760 + v743[v747];
            if (++v747 == v737)
              goto LABEL_235;
            continue;
          }
        }
        if (v739 <= 0)
        {
          if (v737 < 8)
          {
            v781 = 0;
LABEL_272:
            v785 = v737 - v781;
            v786 = (float *)&v741[4 * v781 + 4 * v742];
            do
            {
              *v786 = *v786 + 0.0;
              ++v786;
              --v785;
            }
            while (v785);
            goto LABEL_235;
          }
          v781 = v737 & 0x7FFFFFF8;
          v782 = (float32x4_t *)&v741[4 * v742 + 16];
          v783 = v737 & 0xFFFFFFF8;
          do
          {
            v784 = vaddq_f32(*v782, v709);
            v782[-1] = vaddq_f32(v782[-1], v709);
            *v782 = v784;
            v782 += 2;
            v783 -= 8;
          }
          while (v783);
          if (v781 != v737)
            goto LABEL_272;
        }
        else
        {
          v744 = (float *)(v738 + 12);
          do
          {
            v745 = (float)(*(v744 - 3) * v928->f32[0]) + 0.0;
            if (v739 != 1)
            {
              v745 = v745 + (float)(*(v744 - 2) * v928->f32[1]);
              if (v739 != 2)
              {
                v745 = v745 + (float)(*(v744 - 1) * v928[1].f32[0]);
                if (v739 != 3)
                {
                  v745 = v745 + (float)(*v744 * v928[1].f32[1]);
                  if (v739 != 4)
                  {
                    v745 = v745 + (float)(v744[1] * v928[2].f32[0]);
                    if (v739 != 5)
                    {
                      v745 = v745 + (float)(v744[2] * v928[2].f32[1]);
                      if (v739 != 6)
                        v745 = v745 + (float)(v744[3] * v928[3].f32[0]);
                    }
                  }
                }
              }
            }
            *v743 = v745 + *v743;
            ++v743;
            v744 += v740;
            --v737;
          }
          while (v737);
        }
LABEL_235:
        ++v735;
      }
      while (v735 != v734);
      v629 = v932;
      v944 = v734;
      if ((int)v734 >= 1)
      {
LABEL_276:
        v937 = v626;
        v787 = 0;
        v929 = (char *)&v933[1];
        v788 = v944;
        while (1)
        {
          v934 = v787;
          if (!*((_BYTE *)&v985 + v787))
            break;
LABEL_277:
          v787 = v934 + 1;
          if (v934 + 1 == v788)
          {
            v9 = v919;
            v11 = v921;
            v626 = v937;
            v13 = v938;
            v15 = v940;
            v628 = v931;
            v629 = v932;
            v630 = v928;
            goto LABEL_138;
          }
        }
        v789 = v933;
        v790 = v934;
        v935 = (float32x4_t **)&v987[3 * v934];
        v791 = *((unsigned int *)v935 + 3);
        v792 = v921;
        v793 = v940;
        v794 = v937;
        v795 = (float32x4_t *)v929;
        if ((int)v791 >= 1)
        {
          v796 = LODWORD(v987[3 * v934 + 1]);
          if ((int)v796 >= 1)
          {
            v797 = 0;
            v798 = 4 * (*(_DWORD *)(*(_QWORD *)v943 + 32 * *(int *)(v940 + 80 * v937 + 4 * v934 + 24) + 12) + v941);
            v799 = &v921[v798];
            v800 = 4 * SLODWORD(v987[3 * v934 + 2]);
            v801 = *v935;
            v802 = &v933->i8[4 * v796];
            v803 = (uint64_t)&(*v935)[1];
            v804 = *v935;
            do
            {
              v805 = *(float *)&v799[4 * v797];
              if (v796 >= 0xC)
              {
                v806 = 0;
                v814 = (unint64_t)&v792[4 * v797 + 4 + v798];
                v815 = (unint64_t)&v792[4 * v797 + v798];
                v817 = v815 < (unint64_t)v802 && (unint64_t)v789 < v814;
                if (((unint64_t)v801 + v800 * v797 >= v814
                   || v815 >= (unint64_t)v801->u64 + 4 * v796 + v800 * v797)
                  && !v817)
                {
                  v819 = v796 & 0x7FFFFFF8;
                  v820 = v795;
                  v821 = (float32x4_t *)v803;
                  do
                  {
                    v822 = vmulq_f32(v821[-1], v820[-1]);
                    v823 = vmulq_f32(*v821, *v820);
                    v805 = (float)((float)((float)((float)((float)((float)((float)(v805 + v822.f32[0]) + v822.f32[1])
                                                                 + v822.f32[2])
                                                         + v822.f32[3])
                                                 + v823.f32[0])
                                         + v823.f32[1])
                                 + v823.f32[2])
                         + v823.f32[3];
                    v821 += 2;
                    v820 += 2;
                    v819 -= 8;
                  }
                  while (v819);
                  *(float *)&v799[4 * v797] = v805;
                  v806 = v796 & 0xFFFFFFF8;
                  if (v806 == v796)
                    goto LABEL_282;
                }
              }
              else
              {
                v806 = 0;
              }
              v807 = v796 - v806;
              v808 = v806;
              v809 = &v789->f32[v806];
              v810 = &v804->f32[v808];
              do
              {
                v811 = *v810++;
                v812 = v811;
                v813 = *v809++;
                v805 = v805 + (float)(v812 * v813);
                *(float *)&v799[4 * v797] = v805;
                --v807;
              }
              while (v807);
LABEL_282:
              ++v797;
              v803 += v800;
              v804 = (float32x4_t *)((char *)v804 + v800);
            }
            while (v797 != v791);
          }
        }
        v936 = (int *)(v793 + 80 * v794 + 4 * v790 + 24);
        while (2)
        {
          v945 = v790;
          if (*((_BYTE *)&v985 + v790))
            goto LABEL_305;
          v824 = *(_DWORD *)(*(_QWORD *)v943 + 32 * *v936 + 12);
          v825 = *(_DWORD *)(*(_QWORD *)v943 + 32 * *(int *)(v940 + 80 * v937 + 4 * v945 + 24) + 12);
          v826 = (float32x4_t **)&v987[3 * v945];
          v827 = *v939;
          v951 = *((int *)v939 + 4);
          v828 = *((unsigned int *)v826 + 3);
          if (v824 < v825)
          {
            if ((int)v791 >= 1)
            {
              v829 = *((unsigned int *)v826 + 2);
              if ((int)v828 >= 1 && (int)v829 >= 1)
              {
                v831 = 0;
                v832 = *v826;
                v833 = v825 + (int)v951 * (v824 + v941);
                v834 = &v827[4 * v833];
                v835 = *((int *)v935 + 4);
                v836 = *((int *)v826 + 4);
                v949 = 4 * v951;
                v950 = 4 * v833;
                v837 = 4 * v836;
                v838 = 4 * v829;
                v839 = 4 * v835;
                v840 = *v935;
                *(_QWORD *)&v946 = v832 + 1;
                v841 = v840 + 1;
                v947 = v840;
                v948 = 4 * v833 + 4;
                do
                {
                  v842 = 0;
                  v843 = v950 + v949 * v831;
                  v844 = v948 + v949 * v831;
                  v845 = (unint64_t)v947 + v839 * v831;
                  v846 = (unint64_t)v947 + v838 + v839 * v831;
                  v847 = v831 * v951;
                  v848 = v832;
                  v849 = (float32x4_t *)v946;
                  do
                  {
                    v850 = v842 + v847;
                    v851 = *(float *)&v834[4 * v842 + 4 * v847];
                    if (v829 < 0xC)
                    {
                      v852 = 0;
LABEL_319:
                      v853 = v829 - v852;
                      v854 = v852;
                      v855 = &v840->f32[v852];
                      v856 = &v848->f32[v854];
                      do
                      {
                        v857 = *v856++;
                        v858 = v857;
                        v859 = *v855++;
                        v851 = v851 + (float)(v858 * v859);
                        *(float *)&v834[4 * v850] = v851;
                        --v853;
                      }
                      while (v853);
                      goto LABEL_316;
                    }
                    v852 = 0;
                    v860 = (unint64_t)&v827[4 * v842 + v844];
                    v861 = (unint64_t)&v827[4 * v842 + v843];
                    v863 = v861 < v846 && v845 < v860;
                    if ((unint64_t)v832 + v837 * v842 < v860
                      && v861 < (unint64_t)v832 + v838 + v837 * v842)
                    {
                      goto LABEL_319;
                    }
                    if (v863)
                      goto LABEL_319;
                    v865 = v829 & 0xFFFFFFF8;
                    v866 = v841;
                    v867 = v849;
                    do
                    {
                      v868 = vmulq_f32(v867[-1], v866[-1]);
                      v869 = vmulq_f32(*v867, *v866);
                      v851 = (float)((float)((float)((float)((float)((float)((float)(v851 + v868.f32[0]) + v868.f32[1])
                                                                   + v868.f32[2])
                                                           + v868.f32[3])
                                                   + v869.f32[0])
                                           + v869.f32[1])
                                   + v869.f32[2])
                           + v869.f32[3];
                      v867 += 2;
                      v866 += 2;
                      v865 -= 8;
                    }
                    while (v865);
                    *(float *)&v834[4 * v850] = v851;
                    v852 = v829 & 0xFFFFFFF8;
                    if (v852 != v829)
                      goto LABEL_319;
LABEL_316:
                    ++v842;
                    v849 = (float32x4_t *)((char *)v849 + v837);
                    v848 = (float32x4_t *)((char *)v848 + v837);
                  }
                  while (v842 != v828);
                  ++v831;
                  v841 = (float32x4_t *)((char *)v841 + v839);
                  v840 = (float32x4_t *)((char *)v840 + v839);
                }
                while (v831 != v791);
              }
            }
LABEL_305:
            v788 = v944;
            v790 = v945 + 1;
            if (v945 + 1 == v944)
              goto LABEL_277;
            continue;
          }
          break;
        }
        if ((int)v791 < 1)
          goto LABEL_305;
        v870 = *((unsigned int *)v935 + 2);
        if ((int)v828 < 1 || (int)v870 < 1)
          goto LABEL_305;
        v872 = 0;
        v873 = *v935;
        v874 = v824 + (int)v951 * (v825 + v941);
        v875 = &v827[4 * v874];
        v876 = *((int *)v826 + 4);
        v877 = *((int *)v935 + 4);
        v949 = 4 * v951;
        v950 = 4 * v874;
        v878 = 4 * v877;
        v879 = 4 * v870;
        v880 = 4 * v876;
        v881 = *v826;
        *(_QWORD *)&v946 = v873 + 1;
        v882 = v881 + 1;
        v947 = v881;
        v948 = 4 * v874 + 4;
        while (2)
        {
          v883 = 0;
          v884 = v950 + v949 * v872;
          v885 = v948 + v949 * v872;
          v886 = (unint64_t)v947 + v880 * v872;
          v887 = (unint64_t)v947 + v879 + v880 * v872;
          v888 = v872 * v951;
          v889 = v873;
          v890 = (float32x4_t *)v946;
LABEL_347:
          v891 = v883 + v888;
          v892 = *(float *)&v875[4 * v883 + 4 * v888];
          if (v870 < 0xC)
          {
            v893 = 0;
            goto LABEL_349;
          }
          v893 = 0;
          v901 = (unint64_t)&v827[4 * v883 + v885];
          v902 = (unint64_t)&v827[4 * v883 + v884];
          v904 = v902 < v887 && v886 < v901;
          if ((unint64_t)v873 + v878 * v883 < v901 && v902 < (unint64_t)v873 + v879 + v878 * v883)
            goto LABEL_349;
          if (v904)
            goto LABEL_349;
          v906 = v870 & 0xFFFFFFF8;
          v907 = v882;
          v908 = v890;
          do
          {
            v909 = vmulq_f32(v908[-1], v907[-1]);
            v910 = vmulq_f32(*v908, *v907);
            v892 = (float)((float)((float)((float)((float)((float)((float)(v892 + v909.f32[0]) + v909.f32[1])
                                                         + v909.f32[2])
                                                 + v909.f32[3])
                                         + v910.f32[0])
                                 + v910.f32[1])
                         + v910.f32[2])
                 + v910.f32[3];
            v908 += 2;
            v907 += 2;
            v906 -= 8;
          }
          while (v906);
          *(float *)&v875[4 * v891] = v892;
          v893 = v870 & 0xFFFFFFF8;
          if (v893 != v870)
          {
LABEL_349:
            v894 = v870 - v893;
            v895 = v893;
            v896 = &v881->f32[v893];
            v897 = &v889->f32[v895];
            do
            {
              v898 = *v897++;
              v899 = v898;
              v900 = *v896++;
              v892 = v892 + (float)(v899 * v900);
              *(float *)&v875[4 * v891] = v892;
              --v894;
            }
            while (v894);
          }
          ++v883;
          v890 = (float32x4_t *)((char *)v890 + v878);
          v889 = (float32x4_t *)((char *)v889 + v878);
          if (v883 == v791)
          {
            ++v872;
            v882 = (float32x4_t *)((char *)v882 + v880);
            v881 = (float32x4_t *)((char *)v881 + v880);
            if (v872 == v828)
              goto LABEL_305;
            continue;
          }
          goto LABEL_347;
        }
      }
LABEL_369:
      v15 = v940;
LABEL_138:
      v625 = *(_DWORD *)(v943 + 52);
LABEL_139:
      ++v626;
      v628 += 20;
    }
    while (v626 < v625);
  }
  return v25 / (float)v942;
}

void vl_pose_g_ps(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int32x2_t v18;
  _QWORD *v19;
  int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _BYTE *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  int32x4_t *v35;
  float32x4_t *v36;
  int v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  float *v43;
  int v44;
  float v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  float32x4_t *v49;
  uint64_t v50;
  int32x4_t *v51;
  int v52;
  float32x4_t *v53;
  float32x4_t v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  float *v85;
  float v86;
  float v87;
  uint64_t v88;
  uint64_t v89;
  float v90;
  float v91;
  float v92;
  double v93;
  double v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  uint64_t v101;
  double v102;
  double v103;
  int32x2_t v104;
  float v105;
  float v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  double v120;
  double v121;
  double v122;
  float64_t v123;
  float64_t v124;
  float64_t v125;
  uint64_t v126;
  uint64_t v127;
  float *v128;
  uint64_t v129;
  uint64_t v130;
  float *v131;
  uint64_t v132;
  float *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  float *v138;
  float v139;
  float v140;
  float *v141;
  float v142;
  float v143;
  float v144;
  uint64_t v145;
  float v146;
  float v147;
  float v148;
  double v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  uint64_t v155;
  double v156;
  double v157;
  int32x2_t v158;
  float v159;
  float v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  double v172;
  double v173;
  double v174;
  float64_t v175;
  float64_t v176;
  float64_t v177;
  uint64_t v178;
  uint64_t v179;
  float *v180;
  uint64_t v181;
  uint64_t v182;
  float *v183;
  float *v184;
  uint64_t v185;
  double v186;
  double v187;
  double v188;
  double v189;
  uint64_t v190;
  int v191;
  unint64_t v192;
  uint64_t v193;
  float *v194;
  uint64_t v195;
  int v196;
  unint64_t v197;
  double *v198;
  float32x4_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  unsigned int *v210;
  unsigned int v211;
  signed int v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int *v222;
  unsigned int v223;
  signed int v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unsigned int *v250;
  uint64_t v251;
  uint64_t v252;
  int32x4_t v253;
  int8x16_t v254;
  float32x4_t v255;
  uint64_t v256;
  float32x4_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  float v263;
  _DWORD *v264;
  _QWORD *v265;
  uint64_t v266;
  uint64_t v267;
  char *v268;
  char *v269;
  int v270;
  void *v271;
  char *v272;
  char *v273;
  int ptr;
  void *ptra;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  _OWORD v279[3];
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  float32x2_t v292;
  int v293;
  uint64_t v294;
  int v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  _BYTE v302[240];
  _QWORD v303[30];
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  _QWORD v310[1290];

  MEMORY[0x24BDAC7A8](a1, a2);
  v252 = v9;
  v278 = v10;
  v267 = v11;
  v310[1288] = *MEMORY[0x24BDAC8D0];
  v250 = v13;
  v251 = v12;
  v15 = *v13;
  v14 = v13[1];
  v16 = *((_QWORD *)v13 + 15);
  v270 = v14 * v15;
  v249 = v17;
  v18.i32[0] = *(_DWORD *)(v17 + 120);
  v295 = 0;
  v294 = 0;
  v293 = 0;
  v292 = 0;
  v290 = 0u;
  v291 = 0u;
  v288 = 0u;
  v289 = 0u;
  v286 = 0u;
  v287 = 0u;
  v265 = v19;
  v245 = *v19;
  v284 = 0u;
  v285 = 0u;
  v282 = 0u;
  v283 = 0u;
  v280 = 0u;
  v281 = 0u;
  v246 = v16 / ((int)v14 * (int)v15);
  if ((int)v246 >= 1)
  {
    v20 = 0;
    v21 = 0;
    v22 = (int)v15;
    v23 = 4 * (int)v15;
    v260 = v23 * ((int)v14 + 16);
    v247 = (32 * (int)v15) | 0x10;
    v248 = 32 * (int)v15;
    v263 = *(float *)v18.i32;
    v255 = (float32x4_t)vdupq_n_s32(0x479C4000u);
    v257 = (float32x4_t)vdupq_lane_s32(v18, 0);
    v253 = vdupq_n_s32(0x3E99999Au);
    v254 = (int8x16_t)vdupq_n_s32(0x7FC00000u);
    v276 = v14;
    while (1)
    {
      v272 = v21;
      ptr = v20;
      v24 = 24 * (_QWORD)v21;
      v25 = &v303[3 * (_QWORD)v21];
      *((_DWORD *)v25 + 2) = v15;
      *((_DWORD *)v25 + 3) = v14;
      v25[2] = v22;
      v26 = v22;
      v268 = (char *)pmem_alloc_ex(v260, 0, 0);
      *v25 = &v268[v248];
      v27 = &v302[v24];
      *((_DWORD *)v27 + 2) = v15;
      *((_DWORD *)v27 + 3) = v276;
      *((_QWORD *)v27 + 2) = v26;
      v28 = pmem_alloc_ex(v260, 0, 0);
      v22 = v26;
      LODWORD(v14) = v276;
      *(_QWORD *)v27 = v28 + v248;
      if ((int)v276 >= 1 && (int)v15 >= 1)
        break;
LABEL_3:
      v21 = v272 + 1;
      v20 = ptr + v270;
      if (v272 + 1 == (char *)v246)
        goto LABEL_26;
    }
    v29 = 0;
    v30 = 0;
    v31 = (_DWORD)v272 * v270;
    v32 = v248 + v28;
    v33 = *((_QWORD *)v250 + 16);
    v34 = &v268[v248];
    v35 = (int32x4_t *)(v28 + v247);
    v36 = (float32x4_t *)&v268[v247];
    v37 = ptr;
    while (v15 >= 0xC)
    {
      v38 = 0;
      if (v31 + (int)v30 * (int)v15 + (int)v15 - 1 < v31 + (int)v30 * (int)v15
        || (unint64_t)(v15 - 1) >> 32 != 0)
      {
        goto LABEL_13;
      }
      v46 = v32 + v23 * v30;
      v47 = &v34[v23 * v30];
      if (v46 - (unint64_t)v47 < 0x20)
        goto LABEL_13;
      v48 = v33 + 4 * (v31 + (int)v30 * (int)v15);
      if ((unint64_t)&v47[-v48] < 0x20)
        goto LABEL_13;
      if (v46 - v48 < 0x20)
        goto LABEL_13;
      v49 = v36;
      v50 = v15 & 0xFFFFFFF8;
      v51 = v35;
      v52 = v37;
      do
      {
        v53 = (float32x4_t *)(v33 + 4 * v52);
        v54 = vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(vabsq_f32(v53[1]), v255), v254, (int8x16_t)v53[1]), v257);
        v49[-1] = vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(vabsq_f32(*v53), v255), v254, *(int8x16_t *)v53), v257);
        *v49 = v54;
        v51[-1] = v253;
        *v51 = v253;
        v52 += 8;
        v51 += 2;
        v49 += 2;
        v50 -= 8;
      }
      while (v50);
      v38 = v15 & 0x7FFFFFF8;
      if ((v15 & 0xFFFFFFF8) != v15)
        goto LABEL_13;
LABEL_17:
      ++v30;
      v37 += v15;
      v35 = (int32x4_t *)((char *)v35 + v23);
      v36 = (float32x4_t *)((char *)v36 + v23);
      v29 += v26;
      if (v30 == v276)
        goto LABEL_3;
    }
    v38 = 0;
LABEL_13:
    v40 = v15 - v38;
    v41 = 4 * (v38 + v29);
    v42 = (_DWORD *)(v32 + v41);
    v43 = (float *)&v34[v41];
    v44 = v37 + v38;
    do
    {
      v45 = *(float *)(v33 + 4 * v44);
      if (fabsf(v45) > 80000.0)
        v45 = NAN;
      *v43++ = v45 - v263;
      *v42++ = 1050253722;
      ++v44;
      --v40;
    }
    while (v40);
    goto LABEL_17;
  }
LABEL_26:
  g_coords_diff((double *)(v267 + 240), (double *)v250 + 1, (uint64_t)&v280);
  v279[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v280), v281);
  v279[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v282), v283);
  v279[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v284), v285);
  v55 = *(float *)(v251 + 232);
  v56 = *(float *)(v251 + 236);
  v57 = *(float *)(v251 + 240);
  v58 = 0.0;
  v59 = v57 * -0.0 + v56 * 0.0;
  v60 = v57 + v55 * -0.0;
  v61 = -(v56 - v55 * 0.0);
  v62 = v60 * v57 - v61 * v56;
  v63 = v61 * v55 - v59 * v57;
  v64 = v59 * v56 - v60 * v55;
  v65 = sqrt(v63 * v63 + v62 * v62 + v64 * v64);
  v66 = 0.0;
  v67 = 0.0;
  v68 = 0.0;
  if (v65 > 0.0)
  {
    v66 = v62 / v65;
    v67 = v63 / v65;
    v68 = v64 / v65;
  }
  v69 = sqrt(v60 * v60 + v59 * v59 + v61 * v61);
  v70 = 0.0;
  v71 = 0.0;
  if (v69 > 0.0)
  {
    v58 = v59 / v69;
    v70 = v60 / v69;
    v71 = v61 / v69;
  }
  v72 = sqrt(v56 * v56 + v55 * v55 + v57 * v57);
  v73 = 0.0;
  v74 = 0.0;
  v75 = 0.0;
  if (v72 > 0.0)
  {
    v73 = v55 / v72;
    v74 = v56 / v72;
    v75 = v57 / v72;
  }
  v76 = v66 * 0.0 + 0.0 + v67 * 0.0 + v68 * 0.0;
  v77 = v58 * v76 + 0.0 + v70 * (v58 * v76 + 0.0) + v71 * 0.0;
  *(double *)&v286 = v66;
  *((double *)&v286 + 1) = v67;
  *(double *)&v287 = v68;
  *((double *)&v287 + 1) = v58;
  *(double *)&v288 = v70;
  *((double *)&v288 + 1) = v71;
  *(double *)&v289 = v73;
  *((double *)&v289 + 1) = v74;
  *(double *)&v290 = v75;
  *((double *)&v290 + 1) = -v76;
  *(double *)&v291 = -v77;
  *((double *)&v291 + 1) = -(v73 * v76 + 0.0 + v74 * v77 + v75 * (v73 * v76 + 0.0 + v74 * v77));
  v78 = v249;
  if ((int)v245 >= 1)
  {
    v79 = 0;
    v80 = 0;
    v81 = 0;
    v269 = 0;
    v271 = 0;
    v259 = 0;
    v261 = 0;
    v82 = 0;
    v273 = 0;
    ptra = 0;
    v83 = 0;
    v262 = 0;
    v264 = 0;
    v277 = 0;
    v256 = 0;
    v84 = 0;
    v258 = 0;
    while (1)
    {
      v85 = (float *)(*(_QWORD *)(v278 + 32) + v80);
      v86 = 1.0
          - (float)((float)(sqrtf(*v85) - *(float *)(v78 + 308)) / (float)(*(float *)(v78 + 312) - *(float *)(v78 + 308)));
      v87 = 0.0;
      if (v86 >= 0.0)
      {
        v87 = 1.0;
        if (v86 <= 1.0)
          v87 = v86;
      }
      v88 = *(int *)(*(_QWORD *)(v278 + 8) + v80);
      v89 = v265[1];
      v90 = (float)(1.0 - powf((float)(*v85 / v85[1]) / *(float *)(v78 + 304), 8.0)) * v87;
      v91 = v90 * 32.0;
      if (v90 > 1.0)
        v91 = 32.0;
      if (v90 >= 0.0)
        v92 = v91;
      else
        v92 = 0.0;
      if (v92 < 0.001)
        goto LABEL_34;
      v93 = *(float *)(v89 + v79);
      v94 = *(float *)(v89 + v79 + 4);
      v95 = *((double *)&v290 + 1) + *(double *)&v286 + *((double *)&v286 + 1) * v93 + *(double *)&v287 * v94;
      v96 = *(double *)&v291 + *((double *)&v287 + 1) + *(double *)&v288 * v93 + *((double *)&v288 + 1) * v94;
      v97 = *((double *)&v291 + 1) + *(double *)&v289 + *((double *)&v289 + 1) * v93 + *(double *)&v290 * v94;
      v98 = atan2f(v96, v95);
      v99 = v97 / sqrt((float)((float)(v96 * v96) + (float)(v95 * v95)));
      v100 = atanf(v99);
      v101 = *(_QWORD *)(v267 + 104);
      *(_QWORD *)&v304 = 0x40C90FDB00000000;
      v102 = *(float *)(v101 + 8 * v88 + 4) + 3.14159265;
      v103 = v102 + -1.04719758;
      *(float *)&v103 = v102 + -1.04719758;
      *(float *)&v102 = v102 + 1.04719758;
      angle_combine((float *)&v304, *(int32x2_t *)&v103, *(float32_t *)&v102);
      if (*(_DWORD *)(v78 + 124) && *(float *)(v251 + 248) > 0.0)
      {
        v105 = *(float *)(v251 + 252);
        v106 = v98 + *(float *)(v251 + 244);
        *(float *)v104.i32 = v106 - v105;
        angle_combine((float *)&v304, v104, v105 + v106);
      }
      if (*((float *)&v304 + 1) == 0.0)
        goto LABEL_34;
      v107 = v82 + 1;
      if (v82 >= v261)
      {
        v113 = 2 * v261;
        if (!v261)
          v113 = 32;
        if (v113 <= v82)
          v113 = v82 + 1;
        v108 = v258;
        if (v113)
        {
          v261 = v113;
          ptra = malloc_type_realloc(ptra, 8 * v113, 0x62A5CA65uLL);
          *((_QWORD *)ptra + v82) = v304;
          v109 = v84 + 1;
          if (v84 < v258)
            goto LABEL_50;
        }
        else
        {
          v261 = 0;
          *((_QWORD *)ptra + v82) = v304;
          v109 = v84 + 1;
          if (v84 < v258)
          {
LABEL_50:
            v264[v84] = v81;
            v110 = v83 + 1;
            v111 = v262;
            if (v83 < v262)
              goto LABEL_51;
            goto LABEL_66;
          }
        }
      }
      else
      {
        v108 = v258;
        *((_QWORD *)ptra + v82) = v304;
        v109 = v84 + 1;
        if (v84 < v258)
          goto LABEL_50;
      }
      v114 = 2 * v108;
      if (!v108)
        v114 = 64;
      if (v114 <= v84)
        v114 = v109;
      if (v114)
      {
        v258 = v114;
        v264 = malloc_type_realloc(v264, 4 * v114, 0x1CC7D690uLL);
        v264[v84] = v81;
        v110 = v83 + 1;
        v111 = v262;
        if (v83 < v262)
          goto LABEL_51;
      }
      else
      {
        v258 = 0;
        v264[v84] = v81;
        v110 = v83 + 1;
        v111 = v262;
        if (v83 < v262)
        {
LABEL_51:
          v112 = v256;
          goto LABEL_75;
        }
      }
LABEL_66:
      v115 = v111;
      v116 = 2 * v111;
      if (!v115)
        v116 = 21;
      if (v116 <= v83)
        v116 = v110;
      v112 = v256;
      if (v116)
      {
        v262 = v116;
        v273 = (char *)malloc_type_realloc(v273, 12 * v116, 0xE8B161DFuLL);
      }
      else
      {
        v262 = 0;
      }
LABEL_75:
      v117 = &v273[12 * v83];
      v118 = *(_QWORD *)(v267 + 8) + 12 * (int)v88;
      v119 = *(_QWORD *)v118;
      *((_DWORD *)v117 + 2) = *(_DWORD *)(v118 + 8);
      *(_QWORD *)v117 = v119;
      v120 = *(float *)v117;
      v121 = *((float *)v117 + 1);
      v122 = *((float *)v117 + 2);
      v123 = v284.f64[1] + v280.f64[1] * v121 + v280.f64[0] * v120 + v281.f64[0] * v122;
      v124 = v282.f64[0] * v121 + v281.f64[1] * v120 + v282.f64[1] * v122;
      v125 = v285.f64[1] + v283.f64[1] * v121 + v283.f64[0] * v120 + v284.f64[0] * v122;
      *(float *)&v123 = v123;
      *(float *)&v121 = v285.f64[0] + v124;
      *(_DWORD *)v117 = LODWORD(v123);
      *((_DWORD *)v117 + 1) = LODWORD(v121);
      *(float *)&v125 = v125;
      *((_DWORD *)v117 + 2) = LODWORD(v125);
      v126 = v81 + 1;
      if (v81 >= v259)
      {
        v130 = 2 * v259;
        if (!v259)
          v130 = 32;
        if (v130 <= v81)
          v130 = v81 + 1;
        v127 = v277;
        if (v130)
        {
          v259 = v130;
          v269 = (char *)malloc_type_realloc(v269, 8 * v130, 0xE684AE95uLL);
          v131 = (float *)&v269[8 * v81];
          *v131 = v98;
          v131[1] = v100;
          v129 = v277 + 1;
          if (v277 >= v112)
            goto LABEL_84;
        }
        else
        {
          v259 = 0;
          v133 = (float *)&v269[8 * v81];
          *v133 = v98;
          v133[1] = v100;
          v129 = v277 + 1;
          if (v277 >= v112)
          {
LABEL_84:
            v132 = 2 * v112;
            if (!v112)
              v132 = 128;
            if (v132 <= v127)
              v132 = v129;
            if (v132)
            {
              v256 = v132;
              v271 = malloc_type_realloc(v271, 2 * v132, 0xFE88C135uLL);
            }
            else
            {
              v256 = 0;
            }
          }
        }
      }
      else
      {
        v127 = v277;
        v128 = (float *)&v269[8 * v81];
        *v128 = v98;
        v128[1] = v100;
        v129 = v277 + 1;
        if (v277 >= v112)
          goto LABEL_84;
      }
      *((_WORD *)v271 + v127) = (int)v92;
      v84 = v109;
      v277 = v129;
      v83 = v110;
      v82 = v107;
      v81 = v126;
      v78 = v249;
LABEL_34:
      v80 += 8;
      v79 += 288;
      if (8 * v245 == v80)
        goto LABEL_95;
    }
  }
  v258 = 0;
  v262 = 0;
  v264 = 0;
  v84 = 0;
  v256 = 0;
  v271 = 0;
  v273 = 0;
  ptra = 0;
  v277 = 0;
  v83 = 0;
  v259 = 0;
  v261 = 0;
  v82 = 0;
  v269 = 0;
  v81 = 0;
LABEL_95:
  if (v252)
  {
    v309 = 0u;
    v308 = 0u;
    v307 = 0u;
    v306 = 0u;
    v305 = 0u;
    v304 = 0u;
    g_coords_delta((double *)(*(_QWORD *)v252 + 464 * *(int *)(v252 + 64)), (double *)&v286, (double *)&v304);
    v134 = *(_QWORD *)(v252 + 8);
    if (v134 >= 1)
    {
      if (*(_DWORD *)(v252 + 64))
      {
        v135 = 0;
        v136 = 0;
        v137 = v252;
        while (1)
        {
          while (1)
          {
            if (*(_DWORD *)(v137 + 64))
            {
              v138 = *(float **)(v278 + 32);
              v139 = 1.0
                   - (float)((float)(sqrtf(*v138) - *(float *)(v78 + 308))
                           / (float)(*(float *)(v78 + 312) - *(float *)(v78 + 308)));
              v140 = 0.0;
              if (v139 >= 0.0)
              {
                v140 = 1.0;
                if (v139 <= 1.0)
                  v140 = v139;
              }
              v141 = (float *)(*(_QWORD *)(v252 + 16) + v135);
              v142 = *v141;
              v143 = v141[1];
              v144 = v141[2];
              v145 = **(int **)(*(_QWORD *)v252 + 424);
              v146 = (float)(1.0 - powf((float)(*v138 / v138[1]) / *(float *)(v78 + 304), 8.0)) * v140;
              v147 = v146 * 32.0;
              if (v146 > 1.0)
                v147 = 32.0;
              v148 = v146 >= 0.0 ? v147 : 0.0;
              if (v148 >= 0.001)
              {
                v149 = *((double *)&v309 + 1)
                     + *((double *)&v307 + 1) * v143
                     + *(double *)&v307 * v142
                     + *(double *)&v308 * v144;
                v150 = *((double *)&v308 + 1)
                     + *((double *)&v304 + 1) * v143
                     + *(double *)&v304 * v142
                     + *(double *)&v305 * v144;
                v151 = *(double *)&v309
                     + *(double *)&v306 * v143
                     + *((double *)&v305 + 1) * v142
                     + *((double *)&v306 + 1) * v144;
                v152 = v149;
                v153 = atan2f(v151, v150);
                v154 = atanf(v152 / sqrtf((float)(v151 * v151) + (float)(v150 * v150)));
                v155 = *(_QWORD *)(v267 + 104);
                v296.f64[0] = 12831.7109;
                v156 = *(float *)(v155 + 8 * v145 + 4) + 3.14159265;
                v157 = v156 + -1.04719758;
                *(float *)&v157 = v156 + -1.04719758;
                *(float *)&v156 = v156 + 1.04719758;
                angle_combine((float *)&v296, *(int32x2_t *)&v157, *(float32_t *)&v156);
                if (*(_DWORD *)(v78 + 124) && *(float *)(v251 + 248) > 0.0)
                {
                  v159 = *(float *)(v251 + 252);
                  v160 = v153 + *(float *)(v251 + 244);
                  *(float *)v158.i32 = v160 - v159;
                  angle_combine((float *)&v296, v158, v159 + v160);
                }
                if (*((float *)v296.f64 + 1) != 0.0)
                  break;
              }
            }
            v137 = v252;
            ++v136;
            v135 += 12;
            if (v134 <= v136)
              goto LABEL_158;
          }
          v266 = v82 + 1;
          if (v82 >= v261)
          {
            v161 = 2 * v261;
            if (!v261)
              v161 = 32;
            if (v161 <= v82)
              v161 = v82 + 1;
            if (v161)
            {
              v261 = v161;
              ptra = malloc_type_realloc(ptra, 8 * v161, 0x7802388DuLL);
            }
            else
            {
              v261 = 0;
            }
          }
          *((_QWORD *)ptra + v82) = *(_QWORD *)&v296.f64[0];
          v162 = v84 + 1;
          if (v84 < v258)
            goto LABEL_129;
          v163 = 2 * v258;
          if (!v258)
            v163 = 64;
          if (v163 <= v84)
            v163 = v84 + 1;
          if (v163)
            break;
          v258 = 0;
          v264[v84] = v81;
          v164 = v83 + 1;
          v165 = v262;
          if (v83 < v262)
          {
LABEL_130:
            v166 = v256;
            goto LABEL_139;
          }
LABEL_132:
          v167 = v165;
          v168 = 2 * v165;
          if (!v167)
            v168 = 21;
          if (v168 <= v83)
            v168 = v164;
          v166 = v256;
          if (v168)
          {
            v262 = v168;
            v273 = (char *)malloc_type_realloc(v273, 12 * v168, 0xD0827E02uLL);
          }
          else
          {
            v262 = 0;
          }
LABEL_139:
          v169 = &v273[12 * v83];
          v170 = *(_QWORD *)(v267 + 8) + 12 * (int)v145;
          v171 = *(_QWORD *)v170;
          *((_DWORD *)v169 + 2) = *(_DWORD *)(v170 + 8);
          *(_QWORD *)v169 = v171;
          v172 = *(float *)v169;
          v173 = *((float *)v169 + 1);
          v174 = *((float *)v169 + 2);
          v175 = v284.f64[1] + v280.f64[1] * v173 + v280.f64[0] * v172 + v281.f64[0] * v174;
          v176 = v282.f64[0] * v173 + v281.f64[1] * v172 + v282.f64[1] * v174;
          v177 = v285.f64[1] + v283.f64[1] * v173 + v283.f64[0] * v172 + v284.f64[0] * v174;
          *(float *)&v175 = v175;
          *(float *)&v173 = v285.f64[0] + v176;
          *(_DWORD *)v169 = LODWORD(v175);
          *((_DWORD *)v169 + 1) = LODWORD(v173);
          *(float *)&v177 = v177;
          *((_DWORD *)v169 + 2) = LODWORD(v177);
          v178 = v81 + 1;
          if (v81 >= v259)
          {
            v182 = 2 * v259;
            if (!v259)
              v182 = 32;
            if (v182 <= v81)
              v182 = v81 + 1;
            v179 = v277;
            if (v182)
            {
              v259 = v182;
              v269 = (char *)malloc_type_realloc(v269, 8 * v182, 0xFBE007C4uLL);
              v183 = (float *)&v269[8 * v81];
              *v183 = v153;
              v183[1] = v154;
              v181 = v277 + 1;
              if (v277 >= v166)
                goto LABEL_150;
            }
            else
            {
              v259 = 0;
              v184 = (float *)&v269[8 * v81];
              *v184 = v153;
              v184[1] = v154;
              v181 = v277 + 1;
              if (v277 >= v166)
              {
LABEL_150:
                v185 = 2 * v166;
                if (!v166)
                  v185 = 128;
                if (v185 <= v179)
                  v185 = v181;
                if (v185)
                {
                  v256 = v185;
                  v271 = malloc_type_realloc(v271, 2 * v185, 0xD1CE3155uLL);
                }
                else
                {
                  v256 = 0;
                }
              }
            }
          }
          else
          {
            v179 = v277;
            v180 = (float *)&v269[8 * v81];
            *v180 = v153;
            v180[1] = v154;
            v181 = v277 + 1;
            if (v277 >= v166)
              goto LABEL_150;
          }
          *((_WORD *)v271 + v179) = (int)v148;
          v84 = v162;
          v137 = v252;
          v134 = *(_QWORD *)(v252 + 8);
          v277 = v181;
          v83 = v164;
          v82 = v266;
          v81 = v178;
          ++v136;
          v135 += 12;
          if (v134 <= v136)
            goto LABEL_158;
        }
        v258 = v163;
        v264 = malloc_type_realloc(v264, 4 * v163, 0x7A1F4571uLL);
LABEL_129:
        v264[v84] = v81;
        v164 = v83 + 1;
        v165 = v262;
        if (v83 < v262)
          goto LABEL_130;
        goto LABEL_132;
      }
    }
  }
LABEL_158:
  v186 = *(double *)(v251 + 200) - *((double *)v250 + 10);
  v187 = *(double *)(v251 + 208) - *((double *)v250 + 11);
  v188 = *(double *)(v251 + 216) - *((double *)v250 + 12);
  v189 = v187 * *((double *)v250 + 6) + *((double *)v250 + 3) * v186 + *((double *)v250 + 9) * v188;
  v292 = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*((float64x2_t *)v250 + 2), v187), *(float64x2_t *)(v250 + 2), v186), *(float64x2_t *)(v250 + 14), v188));
  *(float *)&v186 = v189;
  v293 = LODWORD(v186);
  v190 = v78 + 224;
  bzero(&v304, 0x28A0uLL);
  *(_QWORD *)(v78 + 280) = 1;
  v191 = g_ps_cyl_z((uint64_t)v269, (uint64_t)v271, (uint64_t)v273, (uint64_t)ptra, v81, (uint64_t)&v292, (uint64_t)&v294, (uint64_t)v303, (uint64_t)v302, v246, v78 + 224, (uint64_t)&v304);
  if (*(_QWORD *)(v78 + 280) <= 1uLL)
    v192 = 1;
  else
    v192 = *(_QWORD *)(v78 + 280);
  if (v191 > 0)
  {
    v193 = v191;
    v194 = (float *)v310;
    v195 = v191;
    while (*v194 <= (float)(*(float *)(v249 + 264) * 32.0))
    {
      v194 += 26;
      if (!--v195)
        goto LABEL_165;
    }
    *(_QWORD *)(v249 + 280) = v192;
    goto LABEL_170;
  }
LABEL_165:
  v196 = g_ps_cyl_z((uint64_t)v269, (uint64_t)v271, (uint64_t)v273, (uint64_t)ptra, v81, (uint64_t)&v292, (uint64_t)&v294, (uint64_t)v303, (uint64_t)v302, v246, v190, (uint64_t)&v304);
  v197 = *(_QWORD *)(v249 + 280);
  if (v192 > v197)
    v197 = v192;
  *(_QWORD *)(v249 + 280) = v197;
  if (v196 >= 1)
  {
    v193 = v196;
LABEL_170:
    v198 = (double *)&v304;
    do
    {
      v300 = 0u;
      v301 = 0u;
      v298 = 0u;
      v299 = 0u;
      v296 = 0u;
      v297 = 0u;
      v200 = *(_QWORD *)a9;
      v201 = *(_QWORD *)(a9 + 16);
      if (*(_QWORD *)a9 >= v201)
      {
        if (v201)
          v202 = 2 * v201;
        else
          v202 = 5;
        if (v202 <= v200)
          v203 = v200 + 1;
        else
          v203 = v202;
        if (v203)
        {
          *(_QWORD *)(a9 + 8) = malloc_type_realloc(*(void **)(a9 + 8), 48 * v203, 0x779DECABuLL);
          v200 = *(_QWORD *)a9;
        }
        *(_QWORD *)(a9 + 16) = v203;
      }
      *(_QWORD *)a9 = v200 + 1;
      v199 = (float32x4_t *)(*(_QWORD *)(a9 + 8) + 48 * v200);
      g_coords_conv((double *)&v286, v198, v296.f64);
      *v199 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v296), v297);
      v199[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v298), v299);
      v199[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v300), v301);
      v198 += 13;
      --v193;
    }
    while (v193);
  }
  if (*(uint64_t *)a9 >= 1)
  {
    v204 = 0;
    v205 = 0;
    do
    {
      g_coordsf_diff(*(_QWORD *)(a9 + 8) + v204, (uint64_t)v279, *(_QWORD *)(a9 + 8) + v204);
      ++v205;
      v204 += 48;
    }
    while (v205 < *(_QWORD *)a9);
  }
  if ((int)v246 >= 1)
  {
    v206 = 0;
    v207 = v246;
    while (1)
    {
      v208 = &v303[3 * v206];
      if (!*v208)
        goto LABEL_199;
      v209 = *(_QWORD *)(*v208 - 32 * v303[3 * v206 + 2] - 8);
      v210 = (unsigned int *)(v209 + 24);
      do
      {
        v211 = __ldaxr(v210);
        v212 = v211 - 1;
      }
      while (__stlxr(v212, v210));
      if (v212 < 0)
LABEL_229:
        __assert_rtn("pmem_free", "pmem.c", 302, "count >= 0 && \"Negative count! Something is broken, double free? Memory corruption?\"");
      if (v212)
        break;
      v231 = -*(_QWORD *)(v209 + 8);
      do
        v232 = __ldaxr(&qword_254A77330);
      while (__stlxr(v232 - 1, &qword_254A77330));
      do
        v233 = __ldaxr((unint64_t *)&unk_254A77338);
      while (__stlxr(v233 - 1, (unint64_t *)&unk_254A77338));
      do
        v234 = __ldaxr(&global_stats);
      while (__stlxr(v234 + v231, &global_stats));
      do
        v235 = __ldaxr(&pmem_total_refs);
      while (__stlxr(v235 - 1, &pmem_total_refs));
      do
        v236 = __ldaxr(&_pmem_total_blocks);
      while (__stlxr(v236 - 1, &_pmem_total_blocks));
      do
        v237 = __ldaxr(&pmem_bytes_allocated);
      while (__stlxr(v237 + v231, &pmem_bytes_allocated));
      (*(void (**)(uint64_t))(v209 + 40))(v209);
      free((void *)v209);
      v207 = v246;
      *v208 = 0;
      v219 = (uint64_t *)&v302[24 * v206];
      v220 = *v219;
      if (!*v219)
        goto LABEL_187;
LABEL_200:
      v221 = *(_QWORD *)(v220 - 32 * *(_QWORD *)&v302[24 * v206 + 16] - 8);
      v222 = (unsigned int *)(v221 + 24);
      do
      {
        v223 = __ldaxr(v222);
        v224 = v223 - 1;
      }
      while (__stlxr(v224, v222));
      if (v224 < 0)
        goto LABEL_229;
      if (v224)
      {
        do
          v225 = __ldaxr(&qword_254A77330);
        while (__stlxr(v225 - 1, &qword_254A77330));
        do
          v226 = __ldaxr((unint64_t *)&unk_254A77338);
        while (__stlxr(v226, (unint64_t *)&unk_254A77338));
        do
          v227 = __ldaxr(&global_stats);
        while (__stlxr(v227, &global_stats));
        do
          v228 = __ldaxr(&pmem_total_refs);
        while (__stlxr(v228 - 1, &pmem_total_refs));
        do
          v229 = __ldaxr(&_pmem_total_blocks);
        while (__stlxr(v229, &_pmem_total_blocks));
        do
          v230 = __ldaxr(&pmem_bytes_allocated);
        while (__stlxr(v230, &pmem_bytes_allocated));
      }
      else
      {
        v238 = -*(_QWORD *)(v221 + 8);
        do
          v239 = __ldaxr(&qword_254A77330);
        while (__stlxr(v239 - 1, &qword_254A77330));
        do
          v240 = __ldaxr((unint64_t *)&unk_254A77338);
        while (__stlxr(v240 - 1, (unint64_t *)&unk_254A77338));
        do
          v241 = __ldaxr(&global_stats);
        while (__stlxr(v241 + v238, &global_stats));
        do
          v242 = __ldaxr(&pmem_total_refs);
        while (__stlxr(v242 - 1, &pmem_total_refs));
        do
          v243 = __ldaxr(&_pmem_total_blocks);
        while (__stlxr(v243 - 1, &_pmem_total_blocks));
        do
          v244 = __ldaxr(&pmem_bytes_allocated);
        while (__stlxr(v244 + v238, &pmem_bytes_allocated));
        (*(void (**)(uint64_t))(v221 + 40))(v221);
        free((void *)v221);
        v207 = v246;
      }
LABEL_187:
      *v219 = 0;
      if (++v206 == v207)
        goto LABEL_228;
    }
    do
      v213 = __ldaxr(&qword_254A77330);
    while (__stlxr(v213 - 1, &qword_254A77330));
    do
      v214 = __ldaxr((unint64_t *)&unk_254A77338);
    while (__stlxr(v214, (unint64_t *)&unk_254A77338));
    do
      v215 = __ldaxr(&global_stats);
    while (__stlxr(v215, &global_stats));
    do
      v216 = __ldaxr(&pmem_total_refs);
    while (__stlxr(v216 - 1, &pmem_total_refs));
    do
      v217 = __ldaxr(&_pmem_total_blocks);
    while (__stlxr(v217, &_pmem_total_blocks));
    do
      v218 = __ldaxr(&pmem_bytes_allocated);
    while (__stlxr(v218, &pmem_bytes_allocated));
LABEL_199:
    *v208 = 0;
    v219 = (uint64_t *)&v302[24 * v206];
    v220 = *v219;
    if (!*v219)
      goto LABEL_187;
    goto LABEL_200;
  }
LABEL_228:
  free(v264);
  free(v271);
  free(v269);
  free(v273);
  free(ptra);
}

float angle_combine(float *a1, int32x2_t a2, float32_t a3)
{
  float v3;
  float v4;
  float v5;
  float32x2_t v8;
  float32x2_t v9;
  float64x2_t v10;
  int64x2_t v11;
  float64x2_t v12;
  float v13;

  v3 = a1[1];
  v4 = (float)(*(float *)a2.i32 - *a1)
     - (double)(int)((__PAIR64__((int)((float)(*(float *)a2.i32 - *a1) * 0.159154943), *(float *)a2.i32 - *a1)
                    - COERCE_UNSIGNED_INT(0.0)) >> 32)
     * 6.28318531;
  v5 = (float)(a3 - *a1)
     - (double)(int)((__PAIR64__((int)((float)(a3 - *a1) * 0.159154943), a3 - *a1) - COERCE_UNSIGNED_INT(0.0)) >> 32)
     * 6.28318531;
  if (v4 <= 0.0 || v3 <= v4)
  {
    if (v5 <= 0.0 || v3 <= v5)
    {
      v8.f32[0] = *a1 + (float)(v3 * 0.5);
      v8.f32[1] = a3;
      v9 = vsub_f32(v8, (float32x2_t)vdup_lane_s32(a2, 0));
      v10 = vcvtq_f64_f32(v9);
      a2 = vadd_s32(vmovn_s64(vcvtq_s64_f64(vmulq_f64(v10, (float64x2_t)vdupq_n_s64(0x3FC45F306DC9C883uLL)))), vcltz_f32(v9));
      v11.i64[0] = a2.i32[0];
      v11.i64[1] = a2.i32[1];
      v12 = vmlaq_f64(v10, (float64x2_t)vdupq_n_s64(0xC01921FB54442D18), vcvtq_f64_s64(v11));
      a2.i32[0] = vmovn_s64(vcgtq_f64(v12, (float64x2_t)vdupq_laneq_s64((int64x2_t)v12, 1))).u32[0];
      if ((a2.i8[0] & 1) != 0)
        *(_QWORD *)a1 = 0;
    }
    else
    {
      a1[1] = v5;
    }
  }
  else
  {
    v13 = *(float *)a2.i32
        + (double)(int)((__PAIR64__((int)(*(float *)a2.i32 * 0.159154943), a2.u32[0]) - COERCE_UNSIGNED_INT(0.0)) >> 32)
        * -6.28318531;
    *a1 = v13;
    if (v3 <= v5)
    {
      *(float *)a2.i32 = v3 - v4;
      a1[1] = v3 - v4;
    }
    else
    {
      *(float *)a2.i32 = (float)(a3 - *(float *)a2.i32)
                       + (double)(int)((__PAIR64__((int)((float)(a3 - *(float *)a2.i32) * 0.159154943), a3 - *(float *)a2.i32)- COERCE_UNSIGNED_INT(0.0)) >> 32)* -6.28318531;
      a1[1] = *(float *)a2.i32;
    }
  }
  return *(float *)a2.i32;
}

uint64_t pqueue_push(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  int v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  double *v17;
  signed int v18;
  int v19;
  int v20;
  double *v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  unsigned int v28;
  double *v29;
  double *v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  __int128 v36;
  uint64_t v37;

  v6 = *(int *)(a1 + 40);
  v7 = *(_DWORD *)(a1 + 36);
  v8 = v7 + 1;
  if (*(_DWORD *)(a1 + 44))
    v9 = v7 == (_DWORD)v6 - 1;
  else
    v9 = 0;
  if (v9)
  {
    if (v8 >= 0)
      v19 = v7 + 1;
    else
      v19 = v7 + 2;
    v20 = v19 >> 1;
    v17 = *(double **)a1;
    if (v20 <= v7)
    {
      v21 = &v17[3 * v20 + 1];
      v16 = -1;
      v22 = 1.79769313e308;
      do
      {
        v23 = *v21;
        v21 += 3;
        v24 = v23;
        if (v23 < v22)
        {
          v22 = v24;
          v16 = v20;
        }
        ++v20;
      }
      while (v8 != v20);
    }
    else
    {
      v16 = -1;
    }
    if (v17[3 * (int)v16 + 1] >= a3)
      return 0xFFFFFFFFLL;
    v18 = v16;
  }
  else
  {
    *(_DWORD *)(a1 + 36) = v8;
    if (v8 >= (int)v6)
    {
      *(_DWORD *)(a1 + 40) = 2 * v6;
      *(_QWORD *)a1 = malloc_type_realloc(*(void **)a1, 48 * v6, 0x1080040A085CBA5uLL);
    }
    if (*(_DWORD *)(a1 + 32))
    {
      v10 = *(_QWORD *)(a1 + 8);
      if (v10 >= 0x7FFFFFFF)
        __assert_rtn("pqueue_push", "pqueue.c", 391, "da_size(&pq->supp_ind) < INT_MAX && \"pqueue has grown larger than can be indexed with a 32-bit integer\"");
      v11 = *(_DWORD *)(a1 + 36);
      *(_DWORD *)(*(_QWORD *)a1 + 24 * v11 + 16) = v10;
      v12 = *(_QWORD *)(a1 + 24);
      if (v10 >= v12)
      {
        v13 = 2 * v12;
        v9 = v12 == 0;
        v14 = 64;
        if (!v9)
          v14 = v13;
        if (v14 <= v10)
          v15 = v10 + 1;
        else
          v15 = v14;
        if (v15)
        {
          *(_QWORD *)(a1 + 16) = malloc_type_realloc(*(void **)(a1 + 16), 4 * v15, 0x633A7CB7uLL);
          v10 = *(_QWORD *)(a1 + 8);
          v11 = *(_DWORD *)(a1 + 36);
        }
        *(_QWORD *)(a1 + 24) = v15;
      }
      *(_QWORD *)(a1 + 8) = v10 + 1;
      *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * v10) = v11;
    }
    v16 = *(_DWORD *)(a1 + 36);
    v17 = *(double **)a1;
    v18 = v16;
  }
  v25 = 3 * v18;
  *(_QWORD *)&v17[v25] = a2;
  v17[v25 + 1] = -1.79769313e308;
  if (a3 >= -1.79769313e308)
  {
    v26 = *(_QWORD *)(a1 + 16);
    v17[v25 + 1] = a3;
    if ((int)v16 >= 2)
    {
      do
      {
        v28 = v16 >> 1;
        v29 = &v17[3 * (v16 >> 1)];
        v30 = &v17[3 * v16];
        if (v29[1] >= v30[1])
          break;
        v31 = v16;
        v36 = *(_OWORD *)v30;
        v37 = *((_QWORD *)v30 + 2);
        if (*(_DWORD *)(a1 + 32))
        {
          v32 = 4 * SLODWORD(v17[3 * v16 + 2]);
          v33 = *(_DWORD *)(v26 + v32);
          v34 = 4 * SLODWORD(v17[3 * v28 + 2]);
          *(_DWORD *)(v26 + v32) = *(_DWORD *)(v26 + v34);
          *(_DWORD *)(v26 + v34) = v33;
        }
        v27 = *(_OWORD *)v29;
        v30[2] = v29[2];
        *(_OWORD *)v30 = v27;
        *(_OWORD *)v29 = v36;
        *((_QWORD *)v29 + 2) = v37;
        v16 = v28;
      }
      while (v31 > 3);
    }
  }
  if (*(_DWORD *)(a1 + 32))
    return (*(_DWORD *)(a1 + 8) - 1);
  return 0xFFFFFFFFLL;
}

uint64_t pqueue_delete(void **a1, uint64_t a2, double *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  double v7;
  char *v8;
  __int128 v9;
  int v10;
  double v11;
  char *v12;
  uint64_t v13;
  double *v14;
  double v15;
  char *v16;
  __int128 v17;
  char *v18;
  char *v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  int v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int v33;
  char *v34;
  int v36;
  int v37;
  int v38;
  int v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v3 = (char *)*a1;
  v4 = (uint64_t)*a1 + 24 * (int)a2;
  v5 = *(_QWORD *)v4;
  v6 = (double *)(v4 + 8);
  v7 = *(double *)(v4 + 8);
  if (a3)
    *a3 = v7;
  v8 = &v3[24 * *((int *)a1 + 9)];
  v9 = *(_OWORD *)v8;
  *(_QWORD *)(v4 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v4 = v9;
  if (*((_DWORD *)a1 + 8))
    *((_DWORD *)a1[2] + *(int *)&v3[24 * (int)a2 + 16]) = a2;
  v10 = *((_DWORD *)a1 + 9) - 1;
  *((_DWORD *)a1 + 9) = v10;
  v11 = *v6;
  if (v7 >= *v6)
  {
    while (1)
    {
      v29 = a2;
      v30 = (char *)*a1;
      v31 = (char *)a1[2];
      if (2 * (int)a2 > v10
        || (v32 = 2 * (int)a2, *(double *)&v30[48 * (int)a2 + 8] <= *(double *)&v30[24 * (int)a2 + 8]))
      {
        v32 = a2;
      }
      v33 = (2 * a2) | 1;
      if (v33 <= v10 && *(double *)&v30[24 * v33 + 8] > *(double *)&v30[24 * (int)v32 + 8])
        v32 = (2 * (int)a2) | 1;
      if ((_DWORD)v32 == (_DWORD)a2)
        break;
      v34 = &v30[24 * (int)v32];
      v41 = *(_OWORD *)v34;
      v43 = *((_QWORD *)v34 + 2);
      if (*((_DWORD *)a1 + 8))
      {
        v24 = 4 * *(int *)&v30[24 * (int)v32 + 16];
        v25 = *(_DWORD *)&v31[v24];
        v26 = 4 * *(int *)&v30[24 * (int)a2 + 16];
        *(_DWORD *)&v31[v24] = *(_DWORD *)&v31[v26];
        *(_DWORD *)&v31[v26] = v25;
      }
      else
      {
        v29 = a2;
      }
      v27 = &v30[24 * v29];
      v28 = *(_OWORD *)v27;
      *((_QWORD *)v34 + 2) = *((_QWORD *)v27 + 2);
      *(_OWORD *)v34 = v28;
      *(_OWORD *)v27 = v41;
      *((_QWORD *)v27 + 2) = v43;
      v10 = *((_DWORD *)a1 + 9);
      a2 = v32;
    }
  }
  else
  {
    v12 = (char *)*a1;
    v13 = (uint64_t)*a1 + 24 * (int)a2;
    v15 = *(double *)(v13 + 8);
    v14 = (double *)(v13 + 8);
    if (v15 <= v11)
    {
      v16 = (char *)a1[2];
      *v14 = v11;
      if ((int)a2 >= 2)
      {
        do
        {
          v18 = &v12[24 * (a2 >> 1)];
          v19 = &v12[24 * a2];
          if (*((double *)v18 + 1) >= *((double *)v19 + 1))
            break;
          v20 = a2;
          v40 = *(_OWORD *)v19;
          v42 = *((_QWORD *)v19 + 2);
          if (*((_DWORD *)a1 + 8))
          {
            v21 = 4 * *(int *)&v12[24 * a2 + 16];
            v22 = *(_DWORD *)&v16[v21];
            v23 = 4 * *(int *)&v12[24 * (a2 >> 1) + 16];
            *(_DWORD *)&v16[v21] = *(_DWORD *)&v16[v23];
            *(_DWORD *)&v16[v23] = v22;
          }
          v17 = *(_OWORD *)v18;
          *((_QWORD *)v19 + 2) = *((_QWORD *)v18 + 2);
          *(_OWORD *)v19 = v17;
          *(_OWORD *)v18 = v40;
          *((_QWORD *)v18 + 2) = v42;
          LODWORD(a2) = a2 >> 1;
        }
        while (v20 > 3);
      }
    }
  }
  if (*((_DWORD *)a1 + 11))
    return v5;
  v37 = *((_DWORD *)a1 + 9);
  v36 = *((_DWORD *)a1 + 10);
  v38 = v36 + 3;
  if (v36 >= 0)
    v38 = *((_DWORD *)a1 + 10);
  if (v37 < 17 || v37 >= v38 >> 2)
    return v5;
  v39 = v36 / 2;
  *((_DWORD *)a1 + 10) = v39;
  *a1 = malloc_type_realloc(*a1, 24 * v39, 0x1080040A085CBA5uLL);
  return v5;
}

uint64_t vl_pose_score(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  float v23;
  float v24;
  float v25;
  float32x4_t v26;
  float32x4_t v27;
  float v28;
  double v29;
  unsigned int v30;
  double v31;
  double v32;
  double v33;
  double v34;
  __darwin_time_t tv_sec;
  uint64_t tv_usec;
  int *v37;
  __darwin_time_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  float v44;
  double v45;
  uint64_t v46;
  float *v47;
  float v48;
  float v49;
  float v50;
  uint64_t v52;
  float v53;
  __darwin_time_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  __int128 v63;
  __int128 v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  void **v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  __int128 *v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  float *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  float *v144;
  uint64_t v145;
  uint64_t v146;
  double v147;
  float v148;
  float *v149;
  float *v150;
  float v151;
  float *v152;
  double v153;
  int v154;
  int v155;
  float *v156;
  int v157;
  float v158;
  int v159;
  float *v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  uint64_t v171;
  _BOOL4 v172;
  int v173;
  uint64_t v174;
  unint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  BOOL v182;
  uint64_t v183;
  timeval v184;
  _BYTE *v185;
  uint64_t v186;
  char *v187;
  float *v188;
  uint64_t v189;
  uint64_t i;
  float *v191;
  uint64_t v192;
  timeval *v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  timeval v197;
  timeval v198;
  timeval v199;
  timeval v200;
  timeval v201;
  timeval v202;
  timeval v203;
  timeval v204;
  timeval v205;
  timeval v206;
  timeval v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  timeval v211;
  timeval v212;
  timeval v213;
  timeval v214;
  unint64_t v215;
  float v216;
  float v217;
  float v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  float v224;
  float v225;
  uint64_t v226;
  float v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  __darwin_time_t v233;
  __darwin_time_t v234;
  __darwin_time_t v235;
  float v236;
  float v237;
  float v238;
  uint64_t v239;
  uint64_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  timeval v244;
  timeval v245;
  timeval v246;
  timeval v247;
  timeval *v248;
  timeval v249;
  timeval v250;
  timeval v251;
  timeval v252;
  timeval v253;
  timeval v254;
  timeval v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  timeval v259;
  timeval v260;
  timeval v261;
  timeval v262;
  unint64_t v263;
  char *v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  timeval v268;
  timeval v269;
  timeval v270;
  timeval v271;
  timeval *v272;
  timeval v273;
  timeval v274;
  timeval v275;
  timeval v276;
  timeval v277;
  timeval v278;
  timeval v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  timeval v283;
  timeval v284;
  timeval v285;
  timeval v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  timeval v290;
  timeval v291;
  timeval v292;
  timeval v293;
  char *v294;
  timeval v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  timeval v305;
  timeval v306;
  timeval v307;
  timeval v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  char *v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  timeval v316;
  timeval v317;
  timeval v318;
  timeval v319;
  float64x2_t *v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  timeval v331;
  timeval v332;
  timeval v333;
  timeval v334;
  uint64_t v335;
  char *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  void **v340;
  int v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  int v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  int v349;
  timespec *v350;
  uint64_t v351;
  uint64_t v352;
  int v353;
  timespec *v354;
  timespec *v355;
  timespec *v356;
  int v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  int v361;
  float32x4_t v362;
  uint64_t v363;
  int v364;
  float32x4_t v365;
  int v366;
  uint64_t v367;
  void *__src;
  uint64_t v369;
  uint64_t v370;
  void *ptr;
  uint64_t v372;
  timeval v373;
  float64x2_t v374;
  void *v375[4];
  timeval v376;
  float64x2_t v377;
  double v378;
  _OWORD v379[5];
  uint64_t v380;
  void *v381[2];
  __int128 v382;
  void *v383[2];
  void *v384[2];
  __int128 v385;
  void *v386[2];
  float32x4_t v387;
  float32x4_t v388;
  __int128 v389;
  _BYTE v390[96];
  unint64_t v391;
  timeval v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  timeval v396;
  timeval v397;
  timeval v398;
  timeval v399;
  timeval v400;
  timeval v401;
  uint64_t v402;

  v9 = MEMORY[0x24BDAC7A8](a1, a2);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v351 = v18;
  v352 = v19;
  v20 = v9;
  v402 = *MEMORY[0x24BDAC8D0];
  v391 = 0;
  memset(&v390[64], 0, 32);
  memset(&v390[32], 0, 32);
  memset(v390, 0, 32);
  v388 = 0u;
  v389 = 0u;
  *(_OWORD *)v386 = 0u;
  v387 = 0u;
  *(_OWORD *)v384 = 0u;
  v385 = 0u;
  v382 = 0u;
  *(_OWORD *)v383 = 0u;
  *(_OWORD *)v381 = 0u;
  v380 = 0;
  memset(v379, 0, sizeof(v379));
  *(_QWORD *)&v392.tv_usec = 0;
  v392.tv_sec = 0;
  gettimeofday(&v392, 0);
  v376 = (timeval)0;
  v374 = 0u;
  memset(v375, 0, sizeof(v375));
  v373 = (timeval)0;
  v360 = v11;
  v349 = *(_DWORD *)(v11 + 76);
  v370 = 0;
  ptr = 0;
  v372 = 0;
  *(_DWORD *)&v390[84] = -1;
  *(_OWORD *)&v390[64] = 0x400uLL;
  v21 = malloc_type_malloc(0xD000uLL, 0xDF3E8BC9uLL);
  *(_OWORD *)&v390[48] = xmmword_210BCC030;
  *(_QWORD *)&v390[40] = malloc_type_realloc(0, 0x100uLL, 0x9D019C11uLL);
  *(_QWORD *)&v390[32] = 1;
  **(_QWORD **)&v390[40] = v21;
  *(&v376.tv_usec + 1) = -1;
  v375[3] = (void *)1024;
  v376.tv_sec = 0;
  v22 = malloc_type_malloc(0xD000uLL, 0xDF3E8BC9uLL);
  *(_OWORD *)&v375[1] = xmmword_210BCC030;
  *(_QWORD *)&v374.f64[1] = 1;
  v375[0] = malloc_type_realloc(0, 0x100uLL, 0x9D019C11uLL);
  *(_QWORD *)v375[0] = v22;
  if (*(_DWORD *)(v20 + 1412))
  {
    *(_QWORD *)(v20 + 1320) -= mach_absolute_time();
    v377 = 0uLL;
    v378 = 0.0;
    if (!vl_ps_debug_printout)
      goto LABEL_8;
  }
  else
  {
    clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(v20 + 1232));
    clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(v20 + 1216));
    clock_gettime(_CLOCK_MONOTONIC, (timespec *)(v20 + 1200));
    v377 = 0uLL;
    v378 = 0.0;
    if (!vl_ps_debug_printout)
      goto LABEL_8;
  }
  v396 = (timeval)0;
  v397 = (timeval)0;
  v394 = 0u;
  v395 = 0u;
  v392 = (timeval)0;
  v393 = 0u;
  g_camera_global_to_local((double *)(v17 + 240), (double *)(v20 + 1440), (double *)&v392.tv_sec);
  v23 = *(double *)&v396.tv_usec;
  v24 = *(double *)&v397.tv_sec;
  v25 = *(double *)&v397.tv_usec;
  v26 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v392), v393);
  v27 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v394), v395);
  v28 = *(double *)&v396.tv_sec;
  v29 = 0.0;
  if (fabsf(vcvt_f32_f64(v395).f32[0]) < 1.0)
  {
    v365 = v26;
    v362 = v27;
    v29 = atan2(v26.f32[3], v26.f32[0]);
    v27 = v362;
    v26 = v365;
  }
  *(float *)&v390[88] = v23;
  *(float *)&v390[92] = v24;
  *(float *)&v30 = v29;
  v391 = __PAIR64__(v30, LODWORD(v25));
  *((float *)&v389 + 3) = v25;
  v387 = v26;
  v388 = v27;
  *(_QWORD *)((char *)&v389 + 4) = __PAIR64__(LODWORD(v24), LODWORD(v23));
  *(float *)&v389 = v28;
LABEL_8:
  vl_dump_ps_args_store(*(_QWORD *)(v20 + 1536), (const void *)v351, v352, (uint64_t *)v17, v15, (uint64_t)v13, (_OWORD *)(v20 + 1440));
  *(_DWORD *)(v11 + 48) = 1;
  *(_OWORD *)(v20 + 120) = 0u;
  *(_OWORD *)(v20 + 264) = 0u;
  *(_OWORD *)(v20 + 280) = 0u;
  *(_OWORD *)(v20 + 296) = 0u;
  *(_OWORD *)(v20 + 312) = 0u;
  *(_QWORD *)(v20 + 328) = 0;
  *(_OWORD *)(v20 + 232) = 0u;
  *(_OWORD *)(v20 + 248) = 0u;
  *(_OWORD *)(v20 + 200) = 0u;
  *(_OWORD *)(v20 + 216) = 0u;
  *(_OWORD *)(v20 + 168) = 0u;
  *(_OWORD *)(v20 + 184) = 0u;
  *(_OWORD *)(v20 + 136) = 0u;
  *(_OWORD *)(v20 + 152) = 0u;
  *(_OWORD *)(v20 + 268) = *(_OWORD *)"filter_corr";
  *(_OWORD *)(v20 + 284) = *(_OWORD *)&algn_210BCC04C[4];
  *(_OWORD *)(v20 + 300) = xmmword_210BCC060;
  *(_OWORD *)(v20 + 316) = unk_210BCC070;
  *(_DWORD *)(v20 + 332) = 1;
  *(_OWORD *)(v20 + 528) = 0u;
  *(_OWORD *)(v20 + 512) = 0u;
  *(_OWORD *)(v20 + 496) = 0u;
  *(_OWORD *)(v20 + 480) = 0u;
  *(_QWORD *)(v20 + 544) = 0;
  *(_OWORD *)(v20 + 464) = 0u;
  *(_OWORD *)(v20 + 448) = 0u;
  *(_OWORD *)(v20 + 432) = 0u;
  *(_OWORD *)(v20 + 416) = 0u;
  *(_OWORD *)(v20 + 400) = 0u;
  *(_OWORD *)(v20 + 384) = 0u;
  *(_OWORD *)(v20 + 368) = 0u;
  *(_OWORD *)(v20 + 352) = 0u;
  *(_OWORD *)(v20 + 336) = 0u;
  *(_OWORD *)(v20 + 516) = xmmword_210BCC0A1;
  *(_OWORD *)(v20 + 500) = unk_210BCC091;
  *(_OWORD *)(v20 + 484) = *(_OWORD *)"vote";
  *(_OWORD *)(v20 + 532) = unk_210BCC0B1;
  *(_DWORD *)(v20 + 548) = 1;
  *(_QWORD *)(v20 + 760) = 0;
  *(_OWORD *)(v20 + 728) = 0u;
  *(_OWORD *)(v20 + 744) = 0u;
  *(_OWORD *)(v20 + 696) = 0u;
  *(_OWORD *)(v20 + 712) = 0u;
  *(_OWORD *)(v20 + 664) = 0u;
  *(_OWORD *)(v20 + 680) = 0u;
  *(_OWORD *)(v20 + 632) = 0u;
  *(_OWORD *)(v20 + 648) = 0u;
  *(_OWORD *)(v20 + 600) = 0u;
  *(_OWORD *)(v20 + 616) = 0u;
  *(_OWORD *)(v20 + 568) = 0u;
  *(_OWORD *)(v20 + 584) = 0u;
  *(_OWORD *)(v20 + 552) = 0u;
  *(_OWORD *)(v20 + 748) = unk_210BCC0F2;
  *(_OWORD *)(v20 + 732) = xmmword_210BCC0E2;
  *(_OWORD *)(v20 + 716) = unk_210BCC0D2;
  *(_OWORD *)(v20 + 700) = *(_OWORD *)"find_peaks";
  *(_DWORD *)(v20 + 764) = 1;
  *(_QWORD *)(v20 + 976) = 0;
  *(_OWORD *)(v20 + 960) = 0u;
  *(_OWORD *)(v20 + 944) = 0u;
  *(_OWORD *)(v20 + 928) = 0u;
  *(_OWORD *)(v20 + 912) = 0u;
  *(_OWORD *)(v20 + 896) = 0u;
  *(_OWORD *)(v20 + 880) = 0u;
  *(_OWORD *)(v20 + 864) = 0u;
  *(_OWORD *)(v20 + 848) = 0u;
  *(_OWORD *)(v20 + 832) = 0u;
  *(_OWORD *)(v20 + 816) = 0u;
  *(_OWORD *)(v20 + 800) = 0u;
  *(_OWORD *)(v20 + 784) = 0u;
  *(_OWORD *)(v20 + 768) = 0u;
  *(_OWORD *)(v20 + 964) = unk_210BCC133;
  *(_OWORD *)(v20 + 948) = xmmword_210BCC123;
  *(_OWORD *)(v20 + 932) = unk_210BCC113;
  *(_OWORD *)(v20 + 916) = *(_OWORD *)"refine";
  *(_DWORD *)(v20 + 980) = 1;
  *(_QWORD *)(v20 + 1192) = 0;
  *(_OWORD *)(v20 + 1176) = 0u;
  *(_OWORD *)(v20 + 1160) = 0u;
  *(_OWORD *)(v20 + 1128) = 0u;
  *(_OWORD *)(v20 + 1144) = 0u;
  *(_OWORD *)(v20 + 1096) = 0u;
  *(_OWORD *)(v20 + 1112) = 0u;
  *(_OWORD *)(v20 + 1064) = 0u;
  *(_OWORD *)(v20 + 1080) = 0u;
  *(_OWORD *)(v20 + 1032) = 0u;
  *(_OWORD *)(v20 + 1048) = 0u;
  *(_OWORD *)(v20 + 1000) = 0u;
  *(_OWORD *)(v20 + 1016) = 0u;
  *(_OWORD *)(v20 + 984) = 0u;
  *(_OWORD *)(v20 + 1180) = unk_210BCC174;
  *(_OWORD *)(v20 + 1164) = xmmword_210BCC164;
  *(_OWORD *)(v20 + 1148) = unk_210BCC154;
  v356 = (timespec *)(v20 + 984);
  *(_OWORD *)(v20 + 1132) = *(_OWORD *)"other";
  *(_DWORD *)(v20 + 1196) = 1;
  v358 = v20 + 120;
  *(_QWORD *)(v20 + 1104) -= mach_absolute_time();
  if (!*(_DWORD *)v11 && *(float *)(v11 + 12) != 0.0)
    __assert_rtn("vl_pose_score", "vl_pose_score.c", 399, "(par->use_vote_prio || par->max_time_ms == 0) && \"Max time can only be used with prio voting.\"");
  v31 = *(double *)(v351 + 200) - *(double *)(v17 + 312);
  v32 = *(double *)(v351 + 208) - *(double *)(v17 + 320);
  v33 = *(double *)(v351 + 216) - *(double *)(v17 + 328);
  v34 = v32 * *(double *)(v17 + 280) + *(double *)(v17 + 256) * v31 + *(double *)(v17 + 304) * v33;
  v377 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(v17 + 264), v32), *(float64x2_t *)(v17 + 240), v31), *(float64x2_t *)(v17 + 288), v33);
  v378 = v34;
  if (*(float *)(v351 + 252) == 0.0 && *(float *)(v351 + 244) != 0.0)
    __assert_rtn("vl_pose_score", "vl_pose_score.c", 405, "img->true_heading == 0 && \"If no heading prior is available, we require true_heading to be set to 0.\"");
  v346 = v20 + 336;
  v347 = v20 + 552;
  v350 = (timespec *)(v20 + 768);
  v348 = v20 + 1200;
  v359 = v20;
  *(_QWORD *)&v392.tv_usec = 0;
  v392.tv_sec = 0;
  gettimeofday(&v392, 0);
  tv_sec = v392.tv_sec;
  tv_usec = v392.tv_usec;
  v37 = (int *)v360;
  vl_ps_grid_setup((uint64_t)&v390[8], (double *)(v17 + 240), (__int128 *)&v377, v13, v360, *(float *)(v351 + 228));
  *(_QWORD *)&v392.tv_usec = 0;
  v392.tv_sec = 0;
  gettimeofday(&v392, 0);
  v38 = v392.tv_usec + 1000000 * v392.tv_sec;
  printf("Verbose (toc) : ");
  printf("vl_pose_score:grid setup");
  printf(": %f ms", (float)((float)(-1000000 * tv_sec - tv_usec + v38) / 1000.0));
  putchar(10);
  vl_ps_cam_init((uint64_t)v381, v351);
  vl_ps_precomp_create(v17, v381, (uint64_t)v379, v360);
  v39 = *(_QWORD *)&v390[56];
  if (*(uint64_t *)&v390[56] >= 1)
  {
    v40 = *(_QWORD *)&v390[40];
    v41 = *(unsigned int *)(v360 + 116);
    if ((int)v41 < 1)
    {
      *(_DWORD *)(**(_QWORD **)&v390[40] + 28) = -1;
    }
    else
    {
      v42 = 0;
      v43 = *(_QWORD *)&v390[64];
      v44 = *(float *)&v390[80];
      v45 = *(float *)&v390[80];
      while (1)
      {
        while (1)
        {
          v46 = *(_QWORD *)(v40 + 8 * (v42 / v43)) + 52 * (v42 % v43);
          *(_DWORD *)(v46 + 28) = -1;
          v47 = (float *)(v46 + 28);
          if ((_DWORD)v41 == 1)
            v48 = 3.4028e38;
          else
            v48 = *(float *)(v360 + 84);
          v49 = *(v47 - 4);
          v50 = 3.4028e38;
          if (v48 * 1.5 <= v45)
            v50 = v48;
          if (v48 < v44)
            v48 = v50;
          if (v49 < 0.0 || v49 >= v48)
            break;
          *v47 = 0.0;
          if (++v42 == v39)
            goto LABEL_44;
        }
        if ((_DWORD)v41 == 1)
          break;
        v52 = 0;
        while (1)
        {
          if (v52 + 1 >= (unint64_t)(v41 - 1))
            v53 = 3.4028e38;
          else
            v53 = *(float *)(v360 + 88 + 4 * v52);
          if (v53 < v44 && v53 * 1.5 > v45)
            v53 = 3.4028e38;
          if (v49 >= *(float *)(v360 + 4 * v52 + 84) && v49 < v53)
            break;
          if (v41 - 1 == ++v52)
            goto LABEL_252;
        }
        *(_DWORD *)v47 = v52 + 1;
        if (++v42 == v39)
          goto LABEL_44;
      }
    }
LABEL_252:
    __assert_rtn("vl_ps_grid_flag_concentric", "vl_pose_score.c", 205, "cell->sub_region_flag != -1 && \"Cell not part of any sub-region\"");
  }
LABEL_44:
  *(_QWORD *)&v392.tv_usec = 0;
  v392.tv_sec = 0;
  gettimeofday(&v392, 0);
  v56 = v392.tv_sec;
  v57 = v392.tv_usec;
  printf("Verbose (toc) : ");
  printf("vl_pose_score:other setup");
  printf(": %f ms", (float)((float)(1000000 * v56 - v38 + v57) / 1000.0));
  putchar(10);
  v58 = v359;
  if (*(_DWORD *)v360)
  {
    v353 = vl_ps_vote_prio(v351, (uint64_t)v381);
  }
  else if (*(int *)(v360 + 116) < 1)
  {
    v353 = 1;
  }
  else
  {
    v123 = 0;
    v354 = (timespec *)(v359 + 1000);
    v355 = (timespec *)(v359 + 1016);
    v353 = 1;
    while (1)
    {
      v367 = 0;
      __src = 0;
      v369 = 0;
      *(&v376.tv_usec + 1) = -1;
      v376.tv_sec = 0;
      v373 = *(timeval *)&v390[8];
      v375[2] = 0;
      v374.f64[0] = *(float64_t *)&v390[24];
      *(_DWORD *)&v390[80] = -1082130432;
      v124 = *(_QWORD *)&v390[56];
      v357 = v123;
      if (*(uint64_t *)&v390[56] >= 1)
      {
        v125 = 0;
        do
        {
          v126 = *(_QWORD *)(*(_QWORD *)&v390[40] + 8 * (v125 / *(_QWORD *)&v390[64]));
          if (*(_DWORD *)(v126 + 52 * (v125 % *(_QWORD *)&v390[64]) + 28) == v123)
          {
            v127 = (__int128 *)(v126 + 52 * (v125 % *(_QWORD *)&v390[64]));
            v128 = vl_ps_grid_cell_add((uint64_t)&v373);
            v123 = v357;
            v129 = *v127;
            v130 = v127[1];
            v131 = v127[2];
            *(_DWORD *)(v128 + 48) = *((_DWORD *)v127 + 12);
            *(_OWORD *)(v128 + 16) = v130;
            *(_OWORD *)(v128 + 32) = v131;
            *(_OWORD *)v128 = v129;
            v124 = *(_QWORD *)&v390[56];
          }
          ++v125;
        }
        while (v124 > (uint64_t)v125);
      }
      vl_timer_stop((uint64_t)v356);
      v394 = *(float64x2_t *)&v390[40];
      v395 = *(float64x2_t *)&v390[56];
      v396 = *(timeval *)&v390[72];
      v392 = *(timeval *)&v390[8];
      v393 = *(float64x2_t *)&v390[24];
      *(_OWORD *)&v390[40] = *(_OWORD *)v375;
      *(_OWORD *)&v390[56] = *(_OWORD *)&v375[2];
      *(timeval *)&v390[72] = v376;
      *(timeval *)&v390[8] = v373;
      *(float64x2_t *)&v390[24] = v374;
      *(float64x2_t *)&v375[2] = v395;
      v376 = v396;
      v374 = v393;
      *(float64x2_t *)v375 = v394;
      v373 = v392;
      if ((v37[30] & 0x80000000) == 0)
      {
        v132 = 0;
        do
        {
          vl_ps_vote(&v390[8], (uint64_t)v381, (uint64_t)v379, v358, (uint64_t)v37);
          if (*(_DWORD *)(v58 + 1196))
          {
            *(_QWORD *)(v58 + 1104) -= mach_absolute_time();
          }
          else
          {
            clock_gettime(_CLOCK_THREAD_CPUTIME_ID, v355);
            clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, v354);
            clock_gettime(_CLOCK_MONOTONIC, v356);
          }
          vl_ps_get_hyps(&v390[8], (uint64_t)v381, &v367, (uint64_t)v37);
          if (v37[12] >= 2)
          {
            if (v367 >= 1)
            {
              v137 = (char *)__src;
              if (__src)
              {
                v138 = 0;
                v139 = 1;
LABEL_100:
                v140 = (float *)&v137[v138];
                printf(" %4.1f, ", *(float *)&v137[v138]);
                printf(" angle : %4.1f  (offset : %3.2f, %3.2f, %3.2f) \n", v140[5] * 180.0 / 3.14159265, v140[2], v140[3], v140[4]);
                while (v367 > v139)
                {
                  v137 = (char *)__src;
                  ++v139;
                  v138 += 160;
                  if (__src)
                    goto LABEL_100;
                }
              }
            }
            puts("\n--------------------------");
          }
          if (vl_ps_debug_printout && v37[12] <= 1)
          {
            if (v367 >= 1)
            {
              v141 = (char *)__src;
              if (__src)
              {
                v142 = 0;
                v143 = 1;
LABEL_109:
                v144 = (float *)&v141[v142];
                printf(" %4.1f, ", *(float *)&v141[v142]);
                printf(" angle : %4.1f  (offset : %3.2f, %3.2f, %3.2f) \n", v144[5] * 180.0 / 3.14159265, v144[2], v144[3], v144[4]);
                while (v367 > v143)
                {
                  v141 = (char *)__src;
                  ++v143;
                  v142 += 160;
                  if (__src)
                    goto LABEL_109;
                }
              }
            }
            puts("\n--------------------------");
          }
          v361 = v132;
          if (v132 < v37[30])
          {
            *(_DWORD *)&v390[84] = -1;
            *(_QWORD *)&v390[56] = 0;
            *(_QWORD *)&v390[72] = 0;
            v145 = v367;
            if (v367 >= 1)
            {
              v366 = *(_DWORD *)(v360 + 124);
              if (v366 >= 1)
              {
                v146 = 0;
                v147 = (double)*(int *)(v360 + 128);
                v148 = (float)v366;
                do
                {
                  v149 = (float *)((char *)__src + 160 * v146);
                  v151 = v149[8];
                  v150 = v149 + 8;
                  v152 = v150 - 2;
                  v153 = ceilf((float)(v151 / *(v150 - 2)) * v148);
                  if (v147 < v153)
                    v153 = v147;
                  v154 = (int)v153;
                  if ((int)v153 >= 1)
                  {
                    v363 = v146;
                    v155 = 0;
                    v156 = v150 - 1;
                    do
                    {
                      v157 = 0;
                      v364 = v155;
                      v158 = (float)v155 + 0.5;
                      do
                      {
                        v159 = 0;
                        do
                        {
                          v160 = (float *)vl_ps_grid_cell_add((uint64_t)&v390[8]);
                          v161 = *v152;
                          v162 = *v152 / v148;
                          v160[4] = v162;
                          v163 = *v156;
                          v164 = *v156 / v148;
                          v160[5] = v164;
                          v165 = *v150;
                          v166 = *v150 / (float)v154;
                          v160[6] = v166;
                          v167 = (float)(*(v150 - 6) + (float)(v161 * -0.5)) + (float)(v158 * v162);
                          *v160 = v167;
                          v168 = (float)(*(v150 - 5) + (float)(v163 * -0.5))
                               + (float)((float)((float)v157 + 0.5) * v164);
                          v160[1] = v168;
                          v169 = (float)(*(v150 - 4) + (float)(v165 * -0.5))
                               + (float)((float)((float)v159 + 0.5) * v166);
                          v160[2] = v169;
                          v170 = sqrt((v168 - *(double *)&v390[16]) * (v168 - *(double *)&v390[16])+ (v167 - *(double *)&v390[8]) * (v167 - *(double *)&v390[8])+ (v169 - *(double *)&v390[24]) * (v169 - *(double *)&v390[24]));
                          v160[3] = v170;
                          ++v159;
                        }
                        while (v154 != v159);
                        ++v157;
                      }
                      while (v157 != v366);
                      v155 = v364 + 1;
                    }
                    while (v364 + 1 != v366);
                    v145 = v367;
                    v146 = v363;
                  }
                  ++v146;
                }
                while (v145 > v146);
              }
            }
          }
          v58 = v359;
          if (*(_DWORD *)(v359 + 1196))
          {
            v133 = *(_QWORD *)(v359 + 1104) + mach_absolute_time();
          }
          else
          {
            clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(v359 + 1048));
            clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(v359 + 1064));
            clock_gettime(_CLOCK_MONOTONIC, (timespec *)(v359 + 1032));
            v134 = *(_QWORD *)(v359 + 1040)
                 - *(_QWORD *)(v359 + 992)
                 + 1000000000 * (*(_QWORD *)(v359 + 1032) - *(_QWORD *)(v359 + 984));
            *(_QWORD *)(v359 + 1080) = v134;
            v133 = v134 + *(_QWORD *)(v359 + 1104);
            v135 = *(_QWORD *)(v359 + 1056)
                 - *(_QWORD *)(v359 + 1008)
                 + 1000000000 * (*(_QWORD *)(v359 + 1048) - *(_QWORD *)(v359 + 1000));
            *(_QWORD *)(v359 + 1088) = v135;
            *(_QWORD *)(v359 + 1112) += v135;
            v136 = *(_QWORD *)(v359 + 1072)
                 - *(_QWORD *)(v359 + 1024)
                 + 1000000000 * (*(_QWORD *)(v359 + 1064) - *(_QWORD *)(v359 + 1016));
            *(_QWORD *)(v359 + 1096) = v136;
            *(_QWORD *)(v359 + 1120) += v136;
            ++*(_DWORD *)(v359 + 1128);
          }
          v37 = (int *)v360;
          *(_QWORD *)(v359 + 1104) = v133;
          v132 = v361 + 1;
        }
        while (v361 < *(_DWORD *)(v360 + 120));
      }
      if (*(_DWORD *)(v58 + 980))
      {
        *(_QWORD *)(v58 + 888) -= mach_absolute_time();
        v171 = (uint64_t)v350;
      }
      else
      {
        clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(v359 + 800));
        clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(v359 + 784));
        v171 = (uint64_t)v350;
        clock_gettime(_CLOCK_MONOTONIC, v350);
      }
      v172 = vl_ps_refine(v351, (uint64_t)v381);
      vl_timer_stop(v171);
      v394 = *(float64x2_t *)&v390[40];
      v395 = *(float64x2_t *)&v390[56];
      v396 = *(timeval *)&v390[72];
      v392 = *(timeval *)&v390[8];
      v393 = *(float64x2_t *)&v390[24];
      *(_OWORD *)&v390[40] = *(_OWORD *)v375;
      *(_OWORD *)&v390[56] = *(_OWORD *)&v375[2];
      *(timeval *)&v390[72] = v376;
      *(timeval *)&v390[8] = v373;
      *(float64x2_t *)&v390[24] = v374;
      *(float64x2_t *)&v375[2] = v395;
      v376 = v396;
      v374 = v393;
      *(float64x2_t *)v375 = v394;
      v373 = v392;
      if (*(_DWORD *)(v58 + 1196))
      {
        *(_QWORD *)(v58 + 1104) -= mach_absolute_time();
      }
      else
      {
        clock_gettime(_CLOCK_THREAD_CPUTIME_ID, v355);
        clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, v354);
        clock_gettime(_CLOCK_MONOTONIC, v356);
      }
      v173 = v172 ? v353 : 0;
      v353 = v173;
      v174 = v367;
      v175 = v370;
      if (v367 <= 0)
      {
        v179 = (char *)ptr;
        v180 = (char *)malloc_type_malloc(0x200uLL, 0x42120B2FuLL);
        if (v175)
          goto LABEL_150;
      }
      else
      {
        v176 = __src;
        if (v370 + v367 > v372)
        {
          if (v372)
            v177 = 2 * v372;
          else
            v177 = 1;
          if (v177 <= v370 + v367)
            v178 = v370 + v367;
          else
            v178 = v177;
          if (v178)
          {
            ptr = malloc_type_realloc(ptr, 160 * v178, 0x284D5EB8uLL);
            v174 = v367;
          }
          v372 = v178;
        }
        v179 = (char *)ptr;
        memcpy((char *)ptr + 160 * v175, v176, 160 * v174);
        v175 += v367;
        v370 = v175;
        v180 = (char *)malloc_type_malloc(0x200uLL, 0x42120B2FuLL);
        if (v175)
        {
LABEL_150:
          v181 = 0;
          v182 = 1;
          v183 = 32;
          v184 = (timeval)0;
          while (1)
          {
            v185 = ptr;
            v186 = v181;
            while (1)
            {
              if (!v182)
              {
                --v186;
                v187 = &v180[16 * v186];
                v175 = *((_QWORD *)v187 + 1);
                v179 = &v185[160 * *(_QWORD *)v187];
              }
              if ((uint64_t)v175 > 15)
                break;
              if ((uint64_t)v175 > 1)
              {
                v188 = (float *)(v179 + 160);
                v189 = 2;
                for (i = 1; i != v175; ++i)
                {
                  v191 = v188;
                  v192 = v189;
                  do
                  {
                    if ((float)(*(float *)&v179[160 * (v192 - 2) + 4] - v191[1]) >= 0.0)
                      break;
                    v193 = (timeval *)&v179[160 * (v192 - 2)];
                    v400 = v184;
                    v401 = v184;
                    v398 = v184;
                    v399 = v184;
                    v396 = v184;
                    v397 = v184;
                    v394 = (float64x2_t)v184;
                    v395 = (float64x2_t)v184;
                    v392 = v184;
                    v393 = (float64x2_t)v184;
                    v194 = *(float64x2_t *)(v191 + 4);
                    v392 = *(timeval *)v191;
                    v393 = v194;
                    v195 = *(float64x2_t *)(v191 + 8);
                    v196 = *(float64x2_t *)(v191 + 12);
                    v197 = (timeval)*((_OWORD *)v191 + 5);
                    v396 = (timeval)*((_OWORD *)v191 + 4);
                    v397 = v197;
                    v394 = v195;
                    v395 = v196;
                    v198 = (timeval)*((_OWORD *)v191 + 6);
                    v199 = (timeval)*((_OWORD *)v191 + 7);
                    v200 = (timeval)*((_OWORD *)v191 + 9);
                    v400 = (timeval)*((_OWORD *)v191 + 8);
                    v401 = v200;
                    v398 = v198;
                    v399 = v199;
                    v201 = v193[1];
                    *(timeval *)v191 = *v193;
                    *((timeval *)v191 + 1) = v201;
                    v202 = v193[2];
                    v203 = v193[3];
                    v204 = v193[5];
                    *((timeval *)v191 + 4) = v193[4];
                    *((timeval *)v191 + 5) = v204;
                    *((timeval *)v191 + 2) = v202;
                    *((timeval *)v191 + 3) = v203;
                    v205 = v193[6];
                    v206 = v193[7];
                    v207 = v193[9];
                    *((timeval *)v191 + 8) = v193[8];
                    *((timeval *)v191 + 9) = v207;
                    *((timeval *)v191 + 6) = v205;
                    *((timeval *)v191 + 7) = v206;
                    v208 = v393;
                    *v193 = v392;
                    v193[1] = (timeval)v208;
                    v209 = v394;
                    v210 = v395;
                    v211 = v397;
                    v193[4] = v396;
                    v193[5] = v211;
                    v193[2] = (timeval)v209;
                    v193[3] = (timeval)v210;
                    v212 = v398;
                    v213 = v399;
                    v214 = v401;
                    v193[8] = v400;
                    v193[9] = v214;
                    v193[6] = v212;
                    v193[7] = v213;
                    --v192;
                    v191 -= 40;
                  }
                  while (v192 > 1);
                  ++v189;
                  v188 += 40;
                }
              }
              v182 = 0;
              v175 = 0;
              if (v186 < 1)
                goto LABEL_216;
            }
            if (v175 > 0x27)
              break;
            v215 = v175 >> 1;
            v216 = *(float *)&v179[160 * (v175 >> 1) + 4];
            v217 = *((float *)v179 + 1);
            v218 = *(float *)&v179[160 * v175 - 156];
            if ((float)(v216 - v217) >= 0.0)
            {
              if ((float)(v218 - v217) >= 0.0)
              {
                if ((float)(v218 - v216) < 0.0)
                  v215 = v175 - 1;
              }
              else
              {
                v215 = 0;
              }
            }
            else if ((float)(v218 - v216) >= 0.0)
            {
              if ((float)(v218 - v217) >= 0.0)
                v215 = 0;
              else
                v215 = v175 - 1;
            }
LABEL_204:
            v239 = 0;
            v240 = 0;
            v400 = v184;
            v401 = v184;
            v398 = v184;
            v399 = v184;
            v396 = v184;
            v397 = v184;
            v394 = (float64x2_t)v184;
            v395 = (float64x2_t)v184;
            v392 = v184;
            v393 = (float64x2_t)v184;
            v241 = *((float64x2_t *)v179 + 1);
            v392 = *(timeval *)v179;
            v393 = v241;
            v242 = *((float64x2_t *)v179 + 2);
            v243 = *((float64x2_t *)v179 + 3);
            v244 = (timeval)*((_OWORD *)v179 + 5);
            v396 = (timeval)*((_OWORD *)v179 + 4);
            v397 = v244;
            v394 = v242;
            v395 = v243;
            v245 = (timeval)*((_OWORD *)v179 + 6);
            v246 = (timeval)*((_OWORD *)v179 + 7);
            v247 = (timeval)*((_OWORD *)v179 + 9);
            v400 = (timeval)*((_OWORD *)v179 + 8);
            v401 = v247;
            v398 = v245;
            v399 = v246;
            v248 = (timeval *)&v179[160 * v215];
            v249 = v248[1];
            *(timeval *)v179 = *v248;
            *((timeval *)v179 + 1) = v249;
            v250 = v248[2];
            v251 = v248[3];
            v252 = v248[5];
            *((timeval *)v179 + 4) = v248[4];
            *((timeval *)v179 + 5) = v252;
            *((timeval *)v179 + 2) = v250;
            *((timeval *)v179 + 3) = v251;
            v253 = v248[6];
            v254 = v248[7];
            v255 = v248[9];
            *((timeval *)v179 + 8) = v248[8];
            *((timeval *)v179 + 9) = v255;
            *((timeval *)v179 + 6) = v253;
            *((timeval *)v179 + 7) = v254;
            v256 = v393;
            *v248 = v392;
            v248[1] = (timeval)v256;
            v257 = v394;
            v258 = v395;
            v259 = v397;
            v248[4] = v396;
            v248[5] = v259;
            v248[2] = (timeval)v257;
            v248[3] = (timeval)v258;
            v260 = v398;
            v261 = v399;
            v262 = v401;
            v248[8] = v400;
            v248[9] = v262;
            v248[6] = v260;
            v248[7] = v261;
            v263 = v175 - 1;
            v264 = v179 + 164;
            do
            {
              if ((float)(*((float *)v179 + 1) - *(float *)v264) <= 0.0)
              {
                ++v240;
                v400 = v184;
                v401 = v184;
                v398 = v184;
                v399 = v184;
                v396 = v184;
                v397 = v184;
                v394 = (float64x2_t)v184;
                v395 = (float64x2_t)v184;
                v392 = v184;
                v393 = (float64x2_t)v184;
                v287 = *(float64x2_t *)(v264 + 12);
                v392 = *(timeval *)(v264 - 4);
                v393 = v287;
                v288 = *(float64x2_t *)(v264 + 28);
                v289 = *(float64x2_t *)(v264 + 44);
                v290 = *(timeval *)(v264 + 76);
                v396 = *(timeval *)(v264 + 60);
                v397 = v290;
                v394 = v288;
                v395 = v289;
                v291 = *(timeval *)(v264 + 92);
                v292 = *(timeval *)(v264 + 108);
                v293 = *(timeval *)(v264 + 140);
                v400 = *(timeval *)(v264 + 124);
                v401 = v293;
                v398 = v291;
                v399 = v292;
                v294 = &v179[160 * v240];
                v295 = *(timeval *)v294;
                *(_OWORD *)(v264 + 12) = *((_OWORD *)v294 + 1);
                *(timeval *)(v264 - 4) = v295;
                v296 = *((_OWORD *)v294 + 2);
                v297 = *((_OWORD *)v294 + 3);
                v298 = *((_OWORD *)v294 + 4);
                *(_OWORD *)(v264 + 76) = *((_OWORD *)v294 + 5);
                *(_OWORD *)(v264 + 60) = v298;
                *(_OWORD *)(v264 + 44) = v297;
                *(_OWORD *)(v264 + 28) = v296;
                v299 = *((_OWORD *)v294 + 6);
                v300 = *((_OWORD *)v294 + 7);
                v301 = *((_OWORD *)v294 + 8);
                *(_OWORD *)(v264 + 140) = *((_OWORD *)v294 + 9);
                *(_OWORD *)(v264 + 124) = v301;
                *(_OWORD *)(v264 + 108) = v300;
                *(_OWORD *)(v264 + 92) = v299;
                v302 = v393;
                *(timeval *)v294 = v392;
                *((float64x2_t *)v294 + 1) = v302;
                v303 = v394;
                v304 = v395;
                v305 = v397;
                *((timeval *)v294 + 4) = v396;
                *((timeval *)v294 + 5) = v305;
                *((float64x2_t *)v294 + 2) = v303;
                *((float64x2_t *)v294 + 3) = v304;
                v306 = v398;
                v307 = v399;
                v308 = v401;
                *((timeval *)v294 + 8) = v400;
                *((timeval *)v294 + 9) = v308;
                *((timeval *)v294 + 6) = v306;
                *((timeval *)v294 + 7) = v307;
                if ((float)(*((float *)v179 + 1) - *(float *)v264) == 0.0)
                {
                  ++v239;
                  v400 = v184;
                  v401 = v184;
                  v398 = v184;
                  v399 = v184;
                  v396 = v184;
                  v397 = v184;
                  v394 = (float64x2_t)v184;
                  v395 = (float64x2_t)v184;
                  v392 = v184;
                  v393 = (float64x2_t)v184;
                  v265 = *((float64x2_t *)v294 + 1);
                  v392 = *(timeval *)v294;
                  v393 = v265;
                  v266 = *((float64x2_t *)v294 + 2);
                  v267 = *((float64x2_t *)v294 + 3);
                  v268 = (timeval)*((_OWORD *)v294 + 5);
                  v396 = (timeval)*((_OWORD *)v294 + 4);
                  v397 = v268;
                  v394 = v266;
                  v395 = v267;
                  v269 = (timeval)*((_OWORD *)v294 + 6);
                  v270 = (timeval)*((_OWORD *)v294 + 7);
                  v271 = (timeval)*((_OWORD *)v294 + 9);
                  v400 = (timeval)*((_OWORD *)v294 + 8);
                  v401 = v271;
                  v398 = v269;
                  v399 = v270;
                  v272 = (timeval *)&v179[160 * v239];
                  v273 = v272[1];
                  *(timeval *)v294 = *v272;
                  *((timeval *)v294 + 1) = v273;
                  v274 = v272[2];
                  v275 = v272[3];
                  v276 = v272[5];
                  *((timeval *)v294 + 4) = v272[4];
                  *((timeval *)v294 + 5) = v276;
                  *((timeval *)v294 + 2) = v274;
                  *((timeval *)v294 + 3) = v275;
                  v277 = v272[6];
                  v278 = v272[7];
                  v279 = v272[9];
                  *((timeval *)v294 + 8) = v272[8];
                  *((timeval *)v294 + 9) = v279;
                  *((timeval *)v294 + 6) = v277;
                  *((timeval *)v294 + 7) = v278;
                  v280 = v393;
                  *v272 = v392;
                  v272[1] = (timeval)v280;
                  v281 = v394;
                  v282 = v395;
                  v283 = v397;
                  v272[4] = v396;
                  v272[5] = v283;
                  v272[2] = (timeval)v281;
                  v272[3] = (timeval)v282;
                  v284 = v398;
                  v285 = v399;
                  v286 = v401;
                  v272[8] = v400;
                  v272[9] = v286;
                  v272[6] = v284;
                  v272[7] = v285;
                }
              }
              v264 += 160;
              --v263;
            }
            while (v263);
            v309 = v239 + 1;
            v310 = 160 * v239;
            v311 = -160 * v239 + 160 * v240;
            do
            {
              v400 = v184;
              v401 = v184;
              v398 = v184;
              v399 = v184;
              v396 = v184;
              v397 = v184;
              v394 = (float64x2_t)v184;
              v395 = (float64x2_t)v184;
              v392 = v184;
              v393 = (float64x2_t)v184;
              v312 = &v179[v311];
              v313 = *(float64x2_t *)&v179[v311 + 16];
              v392 = *(timeval *)&v179[v311];
              v393 = v313;
              v314 = *(float64x2_t *)&v179[v311 + 32];
              v315 = *(float64x2_t *)&v179[v311 + 48];
              v316 = *(timeval *)&v179[v311 + 80];
              v396 = *(timeval *)&v179[v311 + 64];
              v397 = v316;
              v394 = v314;
              v395 = v315;
              v317 = *(timeval *)&v179[v311 + 96];
              v318 = *(timeval *)&v179[v311 + 112];
              v319 = *(timeval *)&v179[v311 + 144];
              v400 = *(timeval *)&v179[v311 + 128];
              v401 = v319;
              v398 = v317;
              v399 = v318;
              v320 = (float64x2_t *)&v179[v310];
              v321 = *(_OWORD *)&v179[v310 + 16];
              *(_OWORD *)v312 = *(_OWORD *)&v179[v310];
              *((_OWORD *)v312 + 1) = v321;
              v322 = *(_OWORD *)&v179[v310 + 32];
              v323 = *(_OWORD *)&v179[v310 + 48];
              v324 = *(_OWORD *)&v179[v310 + 80];
              *((_OWORD *)v312 + 4) = *(_OWORD *)&v179[v310 + 64];
              *((_OWORD *)v312 + 5) = v324;
              *((_OWORD *)v312 + 2) = v322;
              *((_OWORD *)v312 + 3) = v323;
              v325 = *(_OWORD *)&v179[v310 + 96];
              v326 = *(_OWORD *)&v179[v310 + 112];
              v327 = *(_OWORD *)&v179[v310 + 144];
              *((_OWORD *)v312 + 8) = *(_OWORD *)&v179[v310 + 128];
              *((_OWORD *)v312 + 9) = v327;
              *((_OWORD *)v312 + 6) = v325;
              *((_OWORD *)v312 + 7) = v326;
              v328 = v393;
              *(timeval *)v320 = v392;
              v320[1] = v328;
              v329 = v394;
              v330 = v395;
              v331 = v397;
              v320[4] = (float64x2_t)v396;
              v320[5] = (float64x2_t)v331;
              v320[2] = v329;
              v320[3] = v330;
              v332 = v398;
              v333 = v399;
              v334 = v401;
              v320[8] = (float64x2_t)v400;
              v320[9] = (float64x2_t)v334;
              v320[6] = (float64x2_t)v332;
              v320[7] = (float64x2_t)v333;
              --v309;
              v310 -= 160;
              v311 += 160;
            }
            while (v309 > 0);
            v181 = v186 + 1;
            if (v186 + 1 >= v183)
            {
              v335 = 2 * v183;
              v180 = (char *)malloc_type_realloc(v180, 32 * v183, 0xD95F13A0uLL);
              v184 = (timeval)0;
              v185 = ptr;
              v183 = v335;
            }
            v336 = &v180[16 * v186];
            *(_QWORD *)v336 = v240 - 0x3333333333333333 * ((v179 - v185) >> 5) + 1;
            *((_QWORD *)v336 + 1) = v175 + ~v240;
            v175 = v240 - v239;
            v182 = v240 != v239;
            v37 = (int *)v360;
            if (v186 < 0 && !v175)
              goto LABEL_216;
          }
          v219 = 0;
          v220 = 0;
          v221 = 26;
          if (v175 <= 0x7D0)
            v221 = 8;
          v222 = 3;
          if (v175 > 0x7D0)
            v222 = 9;
          while (2)
          {
            v223 = (uint64_t)(v175 - 1 + v219) / v221;
            v224 = *(float *)&v179[160 * v223 + 4];
            v225 = *(float *)&v179[160 * (v219 / v221) + 4];
            v226 = (uint64_t)(2 * v175 - 2 + v219) / v221;
            v227 = *(float *)&v179[160 * v226 + 4];
            if ((float)(v224 - v225) >= 0.0)
            {
              if ((float)(v227 - v225) < 0.0)
                goto LABEL_181;
              if ((float)(v227 - v224) < 0.0)
                goto LABEL_183;
            }
            else if ((float)(v227 - v224) >= 0.0)
            {
              if ((float)(v227 - v225) < 0.0)
              {
LABEL_183:
                *(&v392.tv_sec + v220) = v226;
LABEL_175:
                ++v220;
                v219 += 3 * v175 - 3;
                if (v222 != v220)
                  continue;
                while (2)
                {
                  v228 = 0;
                  v229 = 0;
                  v230 = v222;
                  v222 /= 3uLL;
                  if (v222 <= 1)
                    v231 = 1;
                  else
                    v231 = v222;
                  v232 = 8 * v231;
LABEL_191:
                  v233 = *(__darwin_time_t *)((char *)&v392.tv_sec + v228);
                  v234 = *(_QWORD *)((char *)&v392.tv_usec + v228);
                  v235 = *(_QWORD *)((char *)&v392 + v228 + 16);
                  v236 = *(float *)&v179[160 * v234 + 4];
                  v237 = *(float *)&v179[160 * v233 + 4];
                  v238 = *(float *)&v179[160 * v235 + 4];
                  if ((float)(v236 - v237) >= 0.0)
                  {
                    if ((float)(v238 - v237) < 0.0)
                      goto LABEL_196;
                    if ((float)(v238 - v236) < 0.0)
                      goto LABEL_198;
                  }
                  else if ((float)(v238 - v236) >= 0.0)
                  {
                    if ((float)(v238 - v237) < 0.0)
                    {
LABEL_198:
                      *(__darwin_time_t *)((char *)&v392.tv_sec + v229) = v235;
LABEL_190:
                      v229 += 8;
                      v228 += 24;
                      if (v232 == v229)
                      {
                        if (v230 < 9)
                        {
                          v215 = v392.tv_sec;
                          goto LABEL_204;
                        }
                        continue;
                      }
                      goto LABEL_191;
                    }
LABEL_196:
                    *(__darwin_time_t *)((char *)&v392.tv_sec + v229) = v233;
                    goto LABEL_190;
                  }
                  break;
                }
                *(__darwin_time_t *)((char *)&v392.tv_sec + v229) = v234;
                goto LABEL_190;
              }
LABEL_181:
              *(&v392.tv_sec + v220) = v219 / v221;
              goto LABEL_175;
            }
            break;
          }
          *(&v392.tv_sec + v220) = v223;
          goto LABEL_175;
        }
      }
LABEL_216:
      free(v180);
      v337 = v370;
      if (v370 >= 1)
      {
        v338 = 0;
        v339 = 0;
        do
        {
          if (v339 >= v37[20] && ptr)
          {
            v340 = (void **)((char *)ptr + v338);
            free(*(void **)((char *)ptr + v338 + 144));
            free(v340[15]);
            free(v340[12]);
          }
          ++v339;
          v338 += 160;
        }
        while (v337 != v339);
      }
      v341 = v37[20];
      if (v341 >= (int)v337)
        v341 = v337;
      v342 = v341;
      if (v372 < v341)
      {
        if (v372)
          v343 = 2 * v372;
        else
          v343 = 1;
        if (v343 <= v342)
          v344 = v342;
        else
          v344 = v343;
        if (v344)
          ptr = malloc_type_realloc(ptr, 160 * v344, 0x429D749uLL);
        v372 = v344;
      }
      if (v342 > v337)
        bzero((char *)ptr + 160 * v337, 160 * (v342 - v337));
      v345 = v37[20];
      if (v345 >= (int)v337)
        v345 = v337;
      v370 = v345;
      if ((v349 & 0x80000000) == 0 && v345 >= 1 && *((float *)ptr + 1) > (float)(32 * v349))
        break;
      free(__src);
      v123 = v357 + 1;
      if (v357 + 1 >= v37[29])
        goto LABEL_46;
    }
    free(__src);
  }
LABEL_46:
  *(_DWORD *)(v58 + 112) = v353;
  v59 = v370;
  if (v370 >= 1)
  {
    v60 = 0;
    v61 = 40;
    do
    {
      v65 = (char *)ptr;
      v66 = *(_QWORD *)a9;
      v67 = *(_QWORD *)(a9 + 16);
      if (*(_QWORD *)a9 >= v67)
      {
        if (v67)
          v68 = 2 * v67;
        else
          v68 = 5;
        if (v68 <= v66)
          v69 = v66 + 1;
        else
          v69 = v68;
        if (v69)
        {
          *(_QWORD *)(a9 + 8) = malloc_type_realloc(*(void **)(a9 + 8), 48 * v69, 0x8178B5D9uLL);
          v66 = *(_QWORD *)a9;
          v59 = v370;
        }
        *(_QWORD *)(a9 + 16) = v69;
      }
      *(_QWORD *)a9 = v66 + 1;
      v62 = (_OWORD *)(*(_QWORD *)(a9 + 8) + 48 * v66);
      v63 = *(_OWORD *)&v65[v61];
      v64 = *(_OWORD *)&v65[v61 + 32];
      v62[1] = *(_OWORD *)&v65[v61 + 16];
      v62[2] = v64;
      *v62 = v63;
      ++v60;
      v61 += 160;
    }
    while (v60 < v59);
  }
  if (*(uint64_t *)&v374.f64[1] >= 1)
  {
    v70 = 0;
    do
      free(*((void **)v375[0] + v70++));
    while (v70 < *(uint64_t *)&v374.f64[1]);
  }
  free(v375[0]);
  v376 = (timeval)0;
  v374 = 0u;
  memset(v375, 0, sizeof(v375));
  v373 = (timeval)0;
  vl_ps_precomp_free((uint64_t)v379);
  if (*(uint64_t *)&v390[32] >= 1)
  {
    v71 = 0;
    do
      free(*(void **)(*(_QWORD *)&v390[40] + 8 * v71++));
    while (v71 < *(uint64_t *)&v390[32]);
  }
  free(*(void **)&v390[40]);
  memset(&v390[8], 0, 80);
  free(v381[1]);
  free(v386[0]);
  free(v383[0]);
  free(v384[1]);
  *(_QWORD *)v390 = 0;
  v388 = 0u;
  v389 = 0u;
  *(_OWORD *)v386 = 0u;
  v387 = 0u;
  *(_OWORD *)v384 = 0u;
  v385 = 0u;
  v382 = 0u;
  *(_OWORD *)v383 = 0u;
  *(_OWORD *)v381 = 0u;
  if (v370 >= 1)
  {
    v72 = (char *)ptr;
    if (ptr)
    {
      v73 = 0;
      v74 = 1;
LABEL_69:
      v75 = (void **)&v72[v73];
      free(*(void **)&v72[v73 + 144]);
      free(v75[15]);
      free(v75[12]);
      while (v74 < v370)
      {
        v72 = (char *)ptr;
        v73 += 160;
        ++v74;
        if (ptr)
          goto LABEL_69;
      }
    }
  }
  free(ptr);
  vl_timer_stop((uint64_t)v356);
  if (*(_DWORD *)(v359 + 332))
  {
    printf("Verbose : ");
    printf("Total time for %40s : %7.3f ms", (const char *)(v358 + 148), (double)*(uint64_t *)(v359 + 240) * 0.000001);
    putchar(10);
    v90 = (const char *)(v347 + 148);
    if (*(_DWORD *)(v359 + 548))
      goto LABEL_73;
  }
  else
  {
    log_col_app((uint64_t)"%s%s%s:%s%7.1fms%s", v76, v77, v78, v79, v80, v81, v82, (char)&str_4_1);
    v90 = (const char *)(v347 + 148);
    if (*(_DWORD *)(v359 + 548))
    {
LABEL_73:
      printf("Verbose : ");
      printf("Total time for %40s : %7.3f ms", (const char *)(v346 + 148), (double)*(uint64_t *)(v359 + 456) * 0.000001);
      putchar(10);
      v98 = (char *)&v350[9].tv_sec + 4;
      if (*(_DWORD *)(v359 + 764))
        goto LABEL_74;
      goto LABEL_244;
    }
  }
  log_col_app((uint64_t)"%s%s%s:%s%7.1fms%s", v83, v84, v85, v86, v87, v88, v89, (char)&str_4_1);
  v98 = (char *)&v350[9].tv_sec + 4;
  if (*(_DWORD *)(v359 + 764))
  {
LABEL_74:
    printf("Verbose : ");
    printf("Total time for %40s : %7.3f ms", v90, (double)*(uint64_t *)(v359 + 672) * 0.000001);
    putchar(10);
    v106 = (char *)&v356[9].tv_sec + 4;
    if (*(_DWORD *)(v359 + 980))
      goto LABEL_75;
    goto LABEL_245;
  }
LABEL_244:
  log_col_app((uint64_t)"%s%s%s:%s%7.1fms%s", v91, v92, v93, v94, v95, v96, v97, (char)&str_4_1);
  v106 = (char *)&v356[9].tv_sec + 4;
  if (*(_DWORD *)(v359 + 980))
  {
LABEL_75:
    printf("Verbose : ");
    printf("Total time for %40s : %7.3f ms", v98, (double)*(uint64_t *)(v359 + 888) * 0.000001);
    putchar(10);
    v114 = v348;
    if (*(_DWORD *)(v359 + 1196))
      goto LABEL_76;
LABEL_246:
    log_col_app((uint64_t)"%s%s%s:%s%7.1fms%s", v107, v108, v109, v110, v111, v112, v113, (char)&str_4_1);
    vl_timer_stop(v114);
    if (*(_DWORD *)(v359 + 1412))
      goto LABEL_77;
    return log_col_app((uint64_t)"%s%s%s:%s%7.1fms%s", v115, v116, v117, v118, v119, v120, v121, (char)&str_4_1);
  }
LABEL_245:
  log_col_app((uint64_t)"%s%s%s:%s%7.1fms%s", v99, v100, v101, v102, v103, v104, v105, (char)&str_4_1);
  v114 = v348;
  if (!*(_DWORD *)(v359 + 1196))
    goto LABEL_246;
LABEL_76:
  printf("Verbose : ");
  printf("Total time for %40s : %7.3f ms", v106, (double)*(uint64_t *)(v359 + 1104) * 0.000001);
  putchar(10);
  vl_timer_stop(v114);
  if (*(_DWORD *)(v359 + 1412))
  {
LABEL_77:
    printf("Verbose : ");
    printf("Total time for %40s : %7.3f ms", (const char *)(v359 + 1348), (double)*(uint64_t *)(v359 + 1320) * 0.000001);
    return putchar(10);
  }
  return log_col_app((uint64_t)"%s%s%s:%s%7.1fms%s", v115, v116, v117, v118, v119, v120, v121, (char)&str_4_1);
}

uint64_t log_col_app(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  const char *v9;
  int v10;
  int v11;
  int v12;
  _DWORD v14[3];
  char v15[16384];
  uint64_t v16;

  v9 = (const char *)MEMORY[0x24BDAC7A8]();
  v16 = *MEMORY[0x24BDAC8D0];
  v14[0] = v10;
  v14[1] = v11;
  v14[2] = v12;
  __vsprintf_chk(v15, 0, 0x4000uLL, v9, &a9);
  if (vl_log_callback)
    return vl_log_callback(vl_log_callback_context, v15, v14);
  printf("Verbose : ");
  printf("%s", v15);
  return putchar(10);
}

uint64_t vl_randperm_int_s(uint64_t result, int a2, int32x4_t *a3, unsigned int *a4)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t i;
  unsigned int v15;
  int32x4_t v16;
  int32x4_t *v17;
  int32x4_t v18;
  int32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  __int32 v23;
  uint64_t v24;

  v7 = result;
  if ((int)result < a2)
  {
    printf("%sError : ", (const char *)&str_1_3);
    printf("n needs to be equal or larger than k");
    result = putchar(10);
  }
  if (v7 == a2)
  {
    if (v7 < 1)
      return result;
    v8 = v7;
    if (v7 >= 8)
    {
      v9 = v7 & 0x7FFFFFF8;
      v16 = (int32x4_t)xmmword_210BCABD0;
      v17 = a3 + 1;
      v18.i64[0] = 0x400000004;
      v18.i64[1] = 0x400000004;
      v19.i64[0] = 0x800000008;
      v19.i64[1] = 0x800000008;
      v20 = v7 & 0xFFFFFFF8;
      do
      {
        v17[-1] = v16;
        *v17 = vaddq_s32(v16, v18);
        v16 = vaddq_s32(v16, v19);
        v17 += 2;
        v20 -= 8;
      }
      while (v20);
      if (v9 == v7)
        goto LABEL_20;
    }
    else
    {
      v9 = 0;
    }
    do
    {
      a3->i32[v9] = v9;
      ++v9;
    }
    while (v7 != v9);
LABEL_20:
    v21 = 0;
    do
    {
      v22 = 214013 * *a4 + 2531011;
      *a4 = v22;
      v23 = a3->i32[v21];
      v24 = v21 + ((int)(HIWORD(v22) & 0x7FFF) % (int)v8);
      a3->i32[v21] = a3->i32[v24];
      a3->i32[v24] = v23;
      ++v21;
      --v8;
    }
    while (v8);
    return result;
  }
  if (a2 >= 1)
  {
    v10 = 0;
    v11 = v7 + 1;
    do
    {
      v12 = 214013 * *a4 + 2531011;
      *a4 = v12;
      v13 = (int)(HIWORD(v12) & 0x7FFF) % v11;
      a3->i32[v10] = v13;
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          while (v13 == a3->i32[i])
          {
            v15 = 214013 * *a4 + 2531011;
            *a4 = v15;
            v13 = (int)(HIWORD(v15) & 0x7FFF) % v11;
            a3->i32[v10] = v13;
          }
        }
      }
      ++v10;
    }
    while (v10 != a2);
  }
  return result;
}

void hash_map_grow(unsigned int *a1, signed int a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  size_t v16;
  void *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (_QWORD *)*((_QWORD *)a1 + 6);
  v4 = *a1;
  if ((int)v4 < 1)
  {
    v7 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v8 = v3[v5];
      if (v8)
      {
        do
        {
          v7 = v8;
          v8 = *(_QWORD *)(v8 + 24);
          *(_QWORD *)(v7 + 24) = v6;
          v6 = v7;
        }
        while (v8);
      }
      else
      {
        v7 = v6;
      }
      ++v5;
      v6 = v7;
    }
    while (v5 != v4);
  }
  *a1 = a2;
  if (!a1[20])
  {
    v16 = 8 * a2;
    v17 = malloc_type_malloc(v16, 0x2004093837F09uLL);
    *((_QWORD *)a1 + 6) = v17;
    bzero(v17, v16);
    v15 = 0;
    if (!v7)
      goto LABEL_19;
LABEL_17:
    v18 = *a1;
    do
    {
      v19 = *((_QWORD *)a1 + 6);
      v20 = 8 * (*(_DWORD *)(v7 + 8) % v18);
      v21 = *(_QWORD *)(v7 + 24);
      *(_QWORD *)(v7 + 24) = *(_QWORD *)(v19 + v20);
      *(_QWORD *)(v19 + v20) = v7;
      ++v15;
      v7 = v21;
    }
    while (v21);
    goto LABEL_19;
  }
  v9 = 8 * a2;
  v10 = (_QWORD *)*((_QWORD *)a1 + 9);
  v11 = v9 + v9 * (0x400000 / v9);
  while (1)
  {
    if (v10)
    {
      v13 = v10[1];
      if (*v10 - v13 >= v9)
        break;
    }
    v12 = malloc_type_malloc(v11 + 32, 0xBF9F2525uLL);
    v12[2] = v10;
    v12[3] = v12 + 4;
    *v12 = v11;
    v12[1] = 0;
    *((_QWORD *)a1 + 9) = v12;
    v10 = v12;
  }
  v10[1] = v13 + v9;
  v14 = (char *)v10[3];
  v10[3] = &v14[v9];
  *((_QWORD *)a1 + 6) = v14;
  bzero(v14, v9);
  v15 = 0;
  if (v7)
    goto LABEL_17;
LABEL_19:
  *((_QWORD *)a1 + 1) = v15;
  if (!a1[20])
    free(v3);
}

uint64_t jenkins_hash(char *a1, uint64_t a2)
{
  unsigned int v2;
  int v3;

  v2 = 0;
  if (a2)
  {
    do
    {
      v3 = *a1++;
      v2 = (1025 * (v2 + v3)) ^ ((1025 * (v2 + v3)) >> 6);
      --a2;
    }
    while (a2);
    v2 *= 9;
  }
  return 32769 * (v2 ^ (v2 >> 11));
}

_QWORD *hash_map_add(uint64_t a1, void *__src, char *__s)
{
  uint64_t v6;
  int v7;
  size_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  char *v16;
  _QWORD *v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 24);
  v8 = v7;
  if (__s && v7 == -1)
    v8 = strlen(__s) + 1;
  if (*(_DWORD *)(a1 + 80))
  {
    v9 = v8 + *(int *)(a1 + 20) + 48;
    v10 = *(_QWORD **)(a1 + 72);
    v11 = v9 + v9 * (0x400000 / v9);
    while (1)
    {
      if (v10)
      {
        v13 = v10[1];
        if (*v10 - v13 >= v9)
          break;
      }
      v12 = malloc_type_malloc(v11 + 32, 0xBF9F2525uLL);
      v12[2] = v10;
      v12[3] = v12 + 4;
      *v12 = v11;
      v12[1] = 0;
      *(_QWORD *)(a1 + 72) = v12;
      v10 = v12;
    }
    v10[1] = v13 + v9;
    v14 = (_QWORD *)v10[3];
    v10[3] = (char *)v14 + v9;
  }
  else
  {
    v14 = malloc_type_malloc(v8 + *(int *)(a1 + 20) + 48, 0x8C66EF07uLL);
  }
  *v14 = v14 + 6;
  v15 = *(int *)(a1 + 16);
  v16 = (char *)v14 + *(int *)(a1 + 20) + 48;
  v14[2] = v16;
  memcpy(v14 + 6, __src, v15);
  if (__s)
    memcpy(v16, __s, v8);
  v14[4] = 0;
  v14[5] = v6;
  *(_QWORD *)(a1 + 56) = v14;
  v17 = (_QWORD *)(a1 + 64);
  if (v6)
    v17 = (_QWORD *)(v6 + 32);
  *v17 = v14;
  v18 = (*(uint64_t (**)(void *, _QWORD))(a1 + 32))(__src, *(int *)(a1 + 16));
  *((_DWORD *)v14 + 2) = v18;
  v19 = *(_DWORD *)a1;
  v20 = *(_QWORD *)(a1 + 48);
  v21 = 8 * (v18 % *(_DWORD *)a1);
  v14[3] = *(_QWORD *)(v20 + v21);
  *(_QWORD *)(v20 + v21) = v14;
  v22 = *(_QWORD *)(a1 + 8) + 1;
  *(_QWORD *)(a1 + 8) = v22;
  if ((float)((float)v19 * 1.5) < (float)v22)
    hash_map_grow((unsigned int *)a1, 3 * v19);
  return v14;
}

void vl_match(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, _DWORD *a7, uint64_t a8, uint64_t a9)
{
  void *v16;
  int v17;
  char *v18;
  char *v19;
  uint64_t v20;
  float v21;
  size_t v22;
  uint64_t v23;
  size_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  size_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  _QWORD *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  void *v64;
  float v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  float v78;
  float v79;
  __int128 v80;
  __int128 v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  uint64_t v90;
  float32x2_t *v91;
  uint64_t v92;
  uint64_t v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  float v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  float *v114;
  float *v115;
  uint64_t v116;
  int v117;
  float *v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  uint64_t v143;
  uint64_t v144;
  float v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _BYTE *v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  float v167;
  uint64_t *v168;
  uint64_t v169;
  char *v170;
  void **v171;
  uint64_t *v172;
  uint64_t v173;
  int *v174;
  float *v175;
  float *v176;
  uint64_t v177;
  float v178;
  float v179;
  int v180;
  float *v181;
  float v182;
  float v183;
  float v184;
  float v185;
  uint64_t v186;
  uint64_t v187;
  float v188;
  int *v189;
  int v190;
  float v191;
  float v192;
  int v193;
  float *v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  float *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _DWORD *v210;
  int *v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  BOOL v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  void **v247;
  void *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  double v257;
  int64_t v258;
  double v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  double v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  uint64_t v272;
  double v273;
  uint64_t v274;
  _DWORD *v275;
  uint64_t v276;
  void *v277;
  float v278;
  void **v279;
  uint64_t v280;
  void *v281;
  size_t v282;
  __int128 v283;
  __int128 v284;
  _QWORD v285[4];
  __int128 v286;
  __int128 v287;
  uint64_t v288;
  float64x2_t v289;
  float64x2_t v290[2];

  v280 = 0;
  v281 = 0;
  v282 = 0;
  v16 = (void *)(int)a7[3];
  v277 = v16;
  if ((_DWORD)v16)
  {
    v17 = (_DWORD)v16 * *(_DWORD *)a2;
    v18 = (char *)malloc_type_malloc(8 * v17, 0x3829EB77uLL);
    if (*a7 != 2)
      __assert_rtn("vl_match", "vl_match.c", 244, "par->method == VL_MATCH_METHOD_SSS && \"only SSS supports this\"");
    v19 = &v18[4 * v17];
    v268 = v18;
    v20 = a9;
    v275 = a7;
    if (*(_DWORD *)(a1 + 212))
      goto LABEL_4;
  }
  else
  {
    v19 = 0;
    v268 = 0;
    v20 = a9;
    v275 = a7;
    if (*(_DWORD *)(a1 + 212))
    {
LABEL_4:
      *(_QWORD *)(a1 + 120) -= mach_absolute_time();
      goto LABEL_7;
    }
  }
  clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(a1 + 32));
  clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(a1 + 16));
  clock_gettime(_CLOCK_MONOTONIC, (timespec *)a1);
LABEL_7:
  LODWORD(v21) = vl_dump_detail_add_hash(v20, (uint64_t)"vl_match input", a2, 0, (_QWORD *)a4).n128_u32[0];
  v22 = *(int *)(a4 + 216);
  v269 = a8;
  v270 = *a3;
  v23 = *a2 * v22;
  v266 = a1;
  v267 = a4;
  v261 = *a2;
  v265 = v20;
  if (v23 < 1)
  {
    v27 = 0;
    v258 = 0;
    if (*a2 < 1)
      goto LABEL_16;
    goto LABEL_14;
  }
  if (v23 <= 256)
    v24 = 256;
  else
    v24 = *a2 * v22;
  v25 = (char *)malloc_type_realloc(0, v24, 0x64C6F953uLL);
  v26 = *a2;
  v23 = *a2 * v22;
  v27 = v25;
  v281 = v25;
  v282 = v24;
  v258 = v24;
  if (v26 >= 1)
  {
LABEL_14:
    v28 = 0;
    v29 = 32;
    v30 = v27;
    do
    {
      memcpy(v30, (const void *)(a2[1] + v29), v22);
      ++v28;
      v29 += 288;
      v30 += v22;
    }
    while (v28 < *a2);
  }
LABEL_16:
  v31 = *a3;
  v32 = (int)v23 + *a3 * v22;
  if (v32 > v258)
  {
    v33 = 2 * v258;
    if (!v258)
      v33 = 256;
    if (v33 <= v32)
      v34 = (int)v23 + *a3 * v22;
    else
      v34 = v33;
    v35 = (char *)malloc_type_realloc(v27, v34, 0xCB8F7F85uLL);
    v31 = *a3;
    v32 = (int)v23 + *a3 * v22;
    v27 = v35;
    v281 = v35;
    v282 = v34;
  }
  v271 = v270 + v261;
  v262 = v32;
  v280 = v32;
  if (v31 >= 1)
  {
    v36 = 0;
    v37 = &v27[(int)v23];
    v38 = 12;
    do
    {
      memcpy(v37, (const void *)(a3[1] + v38), v22);
      ++v36;
      v38 += 268;
      v37 += v22;
    }
    while (v36 < *a3);
  }
  v39 = (uint64_t *)v269;
  v40 = *(_QWORD *)v269;
  v41 = *(_QWORD *)(v269 + 16);
  v42 = v267;
  if (v271 > v41)
  {
    v54 = 2 * v41;
    v220 = v41 == 0;
    v55 = 32;
    if (!v220)
      v55 = v54;
    if (v55 <= v271)
      v56 = v271;
    else
      v56 = v55;
    if (v56)
      *(_QWORD *)(v269 + 8) = malloc_type_realloc(*(void **)(v269 + 8), 8 * v56, 0xAFED2E99uLL);
    *(_QWORD *)(v269 + 16) = v56;
    v43 = v271 - v40;
    if (v271 <= v40)
    {
LABEL_28:
      *(_QWORD *)v269 = v271;
      v44 = *(_QWORD *)(v269 + 24);
      v45 = *(_QWORD *)(v269 + 40);
      if (v271 <= v45)
        goto LABEL_29;
LABEL_42:
      v57 = 2 * v45;
      v220 = v45 == 0;
      v58 = 32;
      if (!v220)
        v58 = v57;
      if (v58 <= v271)
        v59 = v271;
      else
        v59 = v58;
      if (v59)
        *(_QWORD *)(v269 + 32) = malloc_type_realloc(*(void **)(v269 + 32), 8 * v59, 0xFE5128DAuLL);
      *(_QWORD *)(v269 + 40) = v59;
      v46 = v275;
      v47 = v277;
      v48 = v271 - v44;
      if (v271 <= v44)
        goto LABEL_31;
      goto LABEL_30;
    }
  }
  else
  {
    v43 = v271 - v40;
    if (v271 <= v40)
      goto LABEL_28;
  }
  bzero((void *)(*(_QWORD *)(v269 + 8) + 8 * *(_QWORD *)v269), 8 * v43);
  *(_QWORD *)v269 = v271;
  v44 = *(_QWORD *)(v269 + 24);
  v45 = *(_QWORD *)(v269 + 40);
  if (v271 > v45)
    goto LABEL_42;
LABEL_29:
  v46 = v275;
  v47 = v277;
  v48 = v271 - v44;
  if (v271 > v44)
LABEL_30:
    bzero((void *)(*(_QWORD *)(v269 + 32) + 8 * *(_QWORD *)(v269 + 24)), 8 * v48);
LABEL_31:
  *(_QWORD *)(v269 + 24) = v271;
  v49 = v266;
  switch(*v46)
  {
    case 0:
      v50 = *(_DWORD *)(v267 + 216);
      v51 = v266;
      v52 = (_QWORD *)v267;
      v53 = 0;
      goto LABEL_53;
    case 1:
      v50 = *(_DWORD *)(v267 + 216);
      v51 = v266;
      v52 = (_QWORD *)v267;
      v53 = 1;
LABEL_53:
      vl_match_exhaustive(v21, v51, &v280, v52, v50, v53, v269);
      if (!(_DWORD)v47)
        goto LABEL_105;
      goto LABEL_73;
    case 2:
      v272 = v266 + 216;
      if (*(_DWORD *)(v266 + 428))
      {
        *(_QWORD *)(v266 + 336) -= mach_absolute_time();
        v60 = *a5;
        v61 = v267;
        v62 = *(int *)(v267 + 216);
        v63 = v46 + 1;
        if ((_DWORD)v47)
          goto LABEL_57;
LABEL_66:
        v39 = (uint64_t *)v269;
        vl_match_sss(v266, &v280, v61, v60, v62, v63, (_QWORD *)v269);
        vl_timer_stop(v272);
        if (*(_DWORD *)(v266 + 428))
          goto LABEL_72;
LABEL_67:
        log_col_app((uint64_t)"%s%s%s:%s%7.1fms%s", v69, v70, v71, v72, v73, v74, v75, (char)&str_4_1);
        v42 = v267;
        if (!(_DWORD)v47)
          goto LABEL_105;
        goto LABEL_73;
      }
      clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(v266 + 248));
      clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(v266 + 232));
      clock_gettime(_CLOCK_MONOTONIC, (timespec *)(v266 + 216));
      v60 = *a5;
      v61 = v267;
      v62 = *(int *)(v267 + 216);
      v63 = v46 + 1;
      if (!(_DWORD)v47)
        goto LABEL_66;
LABEL_57:
      v284 = 0u;
      memset(v285, 0, 28);
      v283 = 0u;
      sss_par_version(*v63, (uint64_t)&v283);
      if ((int)(v262 / v62) >= 1)
      {
        v64 = v281;
        v65 = (float)(255 * v62);
        v66 = (v262 / v62);
        if (v19)
        {
          v67 = 0;
          v68 = 0;
          do
          {
            sss_knn(v60, (uint64_t)&v283, v65, (uint64_t)v64 + v68 * *(int *)(v60 + 260), &v268[v67], (uint64_t)&v19[v67], v47);
            v64 = v281;
            ++v68;
            v67 += 4 * (_QWORD)v277;
          }
          while (v66 != v68);
        }
        else
        {
          v76 = 0;
          v77 = v268;
          do
          {
            sss_knn(v60, (uint64_t)&v283, v65, (uint64_t)v64 + v76 * *(int *)(v60 + 260), v77, 0, (int)v277);
            v64 = v281;
            ++v76;
            v77 += 4 * (_QWORD)v277;
          }
          while (v66 != v76);
        }
      }
      v49 = v266;
      v39 = (uint64_t *)v269;
      v46 = v275;
      vl_timer_stop(v272);
      if (!*(_DWORD *)(v266 + 428))
        goto LABEL_67;
LABEL_72:
      printf("Verbose : ");
      printf("Total time for %40s : %7.3f ms", (const char *)(v49 + 364), (double)*(uint64_t *)(v49 + 336) * 0.000001);
      putchar(10);
      v42 = v267;
      if (!(_DWORD)v47)
        goto LABEL_105;
LABEL_73:
      v78 = *(float *)(a6 + 252) * 3.14159265 / 180.0;
      v79 = tanf(v78);
      if ((int)v277 <= 1)
        __assert_rtn("vl_match_filter_prior", "vl_match.c", 149, "knn >= VL_MATCH_MAX_NN");
      v278 = v79;
      v286 = 0u;
      v287 = 0u;
      memset(v285, 0, sizeof(v285));
      v283 = 0u;
      v284 = 0u;
      g_coords_diff((double *)(a6 + 304), (double *)(v42 + 240), (uint64_t)&v283);
      v80 = v287;
      v81 = v283;
      v83 = *(double *)&v285[3];
      v82 = *(double *)&v285[2];
      v84 = *((double *)&v284 + 1);
      v85 = *(double *)&v284;
      v86 = *(double *)&v285[1];
      v87 = *(double *)v285;
      v88 = *((double *)&v286 + 1);
      v89 = *(double *)&v286;
      v90 = *a2;
      v91 = (float32x2_t *)a2[1];
      if ((int)*a2 >= 1)
      {
        v257 = *((double *)&v286 + 1);
        v259 = *((double *)&v284 + 1);
        v263 = *(double *)v285;
        v273 = *(double *)&v285[2];
        v92 = *a2;
        do
        {
          v290[0] = vcvtq_f64_f32(*v91);
          v288 = 0;
          v289 = 0uLL;
          g_improj2_to_xyz(a6 + 24, v290, (double *)&v288);
          *v91 = vcvt_f32_f64(v289);
          v91 += 36;
          --v92;
        }
        while (v92);
        v90 = *a2;
        v91 = (float32x2_t *)a2[1];
        v82 = v273;
        v84 = v259;
        v87 = v263;
        v88 = v257;
      }
      if (v90 >= 1)
      {
        v93 = 0;
        v94 = v88;
        v98 = v84;
        v99 = v82;
        v101 = v87;
        v102 = v83;
        v103 = v85;
        v105 = v268;
        v106 = *(_QWORD *)(v269 + 8);
        v107 = *(_QWORD *)(v269 + 32);
        v108 = 4 * v47;
        v110 = v107;
        v111 = v106;
        do
        {
          v112 = 0;
          v113 = 0;
          v114 = (float *)&v91[36 * v93];
          v115 = v114 + 1;
          do
          {
            if (v112 <= 1)
            {
              v116 = 4 * v112;
              *(_DWORD *)(v111 + v116) = *(_DWORD *)&v105[4 * v112];
              *(float *)(v110 + v116) = (float)(255 * *(_DWORD *)(v42 + 216));
            }
            v117 = *(_DWORD *)&v105[4 * v112];
            if (v117 != -1)
            {
              v118 = (float *)(*(_QWORD *)(v42 + 8) + 12 * v117);
              v119 = *v118 - v94;
              v95 = *(double *)&v80;
              v120 = v118[1] - v95;
              v96 = *((double *)&v80 + 1);
              v121 = v118[2] - v96;
              v97 = *(double *)&v81;
              v122 = (float)((float)(v120 * v98) + (float)(v97 * v119)) + (float)(v99 * v121);
              v100 = *((double *)&v81 + 1);
              v123 = (float)((float)(v120 * v101) + (float)(v100 * v119)) + (float)(v102 * v121);
              v104 = v86;
              v109 = v89;
              v124 = (float)((float)(v120 * v104) + (float)(v103 * v119)) + (float)(v109 * v121);
              v125 = *(float *)(a6 + 228);
              v126 = *v114;
              v127 = *v115;
              v128 = 0.0;
              if ((float)((float)((float)((float)(v122 * *v115) - v124) * (float)((float)(v122 * *v115) - v124))
                         + (float)((float)((float)(*v114 * v122) - v123) * (float)((float)(*v114 * v122) - v123))) > (float)(v125 * v125))
              {
                if (v125 <= 1.0)
                  v129 = *(float *)(a6 + 228);
                else
                  v129 = 1.0;
                if (v122 >= 1.0)
                  v130 = v122;
                else
                  v130 = v129;
                v131 = sqrtf((float)((float)(v126 * v126) + 1.0) + (float)(v127 * v127));
                v128 = 0.0;
                v132 = 0.0;
                v133 = 0.0;
                v134 = 0.0;
                if (v131 > 0.0)
                {
                  v132 = 1.0 / v131;
                  v133 = v126 / v131;
                  v134 = v127 / v131;
                }
                v135 = (float)((float)(v123 * v133) + (float)(v130 * v132)) + (float)(v124 * v134);
                v136 = v133 * v135;
                v137 = v134 * v135;
                v138 = (float)(v132 * v135) - v122;
                v139 = v136 - v123;
                v140 = v137 - v124;
                v141 = (float)((float)(v139 * v139) + (float)(v138 * v138)) + (float)(v140 * v140);
                if (v141 > (float)(v125 * v125))
                {
                  v142 = v125 / sqrtf(v141);
                  v128 = (float)((float)(v127
                                       - (float)((float)(v124 + (float)(v140 * v142))
                                               / (float)(v122 + (float)(v138 * v142))))
                               * (float)(v127
                                       - (float)((float)(v124 + (float)(v140 * v142))
                                               / (float)(v122 + (float)(v138 * v142)))))
                       + (float)((float)(v126
                                       - (float)((float)(v123 + (float)(v139 * v142))
                                               / (float)(v122 + (float)(v138 * v142))))
                               * (float)(v126
                                       - (float)((float)(v123 + (float)(v139 * v142))
                                               / (float)(v122 + (float)(v138 * v142)))));
                }
              }
              if (v128 <= (float)(v278 * v278))
              {
                v143 = 4 * v113;
                *(_DWORD *)(v106 + 8 * v93 + v143) = v117;
                *(float *)(v107 + 8 * v93 + v143) = (float)*(int *)&v19[4 * v112];
                ++v113;
              }
            }
            ++v112;
          }
          while (v112 < v47 && (int)v113 < 2);
          ++v93;
          v105 += v108;
          v111 += 8;
          v110 += 8;
          v19 += v108;
        }
        while (v93 != v90);
      }
      if ((int)v90 >= 1)
      {
        v144 = v90;
        do
        {
          v290[0] = 0uLL;
          v288 = 0x3FF0000000000000;
          v289 = vcvtq_f64_f32(*v91);
          g_xyz_to_improj2(a6 + 24, (uint64_t)&v288, v290[0].f64, 0, v90);
          *v91 = vcvt_f32_f64(v290[0]);
          v91 += 36;
          --v144;
        }
        while (v144);
      }
      v49 = v266;
      v42 = v267;
      v39 = (uint64_t *)v269;
      v46 = v275;
LABEL_105:
      vl_dump_detail_match(v265, (uint64_t)v39);
      if (*((float *)v46 + 2) > 0.0)
      {
        if (*(_DWORD *)(v49 + 644))
        {
          *(_QWORD *)(v49 + 552) -= mach_absolute_time();
          v145 = *((float *)v46 + 2);
          if (v145 <= 0.0)
            goto LABEL_108;
        }
        else
        {
          clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(v49 + 464));
          clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(v49 + 448));
          clock_gettime(_CLOCK_MONOTONIC, (timespec *)(v49 + 432));
          v145 = *((float *)v46 + 2);
          if (v145 <= 0.0)
          {
LABEL_108:
            vl_timer_stop(v49 + 432);
            if (*(_DWORD *)(v49 + 644))
            {
LABEL_109:
              printf("Verbose : ");
              printf("Total time for %40s : %7.3f ms", (const char *)(v49 + 580), (double)*(uint64_t *)(v49 + 552) * 0.000001);
              putchar(10);
              goto LABEL_237;
            }
            goto LABEL_236;
          }
        }
        v260 = v49 + 432;
        v264 = *(_QWORD *)v42;
        v153 = *(_QWORD *)v42;
        v154 = *a2;
        v155 = *a2;
        v156 = malloc_type_calloc((int)v155, 1uLL, 0x100004077774924uLL);
        v274 = v153;
        v279 = (void **)malloc_type_calloc((int)v153, 0x18uLL, 0x1010040A500212DuLL);
        if ((int)v154 >= 1)
        {
          v157 = 0;
          v158 = 0;
          do
          {
            v159 = *(_DWORD *)(v39[1] + v157);
            if (v159 != -1)
            {
              v160 = (uint64_t *)&v279[3 * v159];
              v161 = *v160;
              v162 = v160[2];
              if (*v160 >= v162)
              {
                v163 = 2 * v162;
                v220 = v162 == 0;
                v164 = 64;
                if (!v220)
                  v164 = v163;
                if (v164 <= v161)
                  v165 = v161 + 1;
                else
                  v165 = v164;
                if (v165)
                {
                  v279[3 * v159 + 1] = malloc_type_realloc(v279[3 * v159 + 1], 4 * v165, 0xBDB83E4FuLL);
                  v161 = *v160;
                }
                v160[2] = v165;
                v39 = (uint64_t *)v269;
              }
              *v160 = v161 + 1;
              *((_DWORD *)v279[3 * v159 + 1] + v161) = v158;
            }
            ++v158;
            v157 += 8;
          }
          while (v155 != v158);
        }
        if ((int)v264 >= 1)
        {
          v166 = 0;
          v167 = v145 * v145;
          while (1)
          {
            v276 = v166;
            v168 = (uint64_t *)&v279[3 * v166];
            v169 = *v168;
            if (*v168 >= 2)
              break;
LABEL_127:
            v166 = v276 + 1;
            if (v276 + 1 == v274)
              goto LABEL_173;
          }
          v170 = (char *)&v279[3 * v166];
          v171 = (void **)(v170 + 8);
          v172 = (uint64_t *)(v170 + 16);
          while (1)
          {
            v173 = a2[1];
            v174 = (int *)*v171;
            v175 = (float *)(v173 + 288 * *(int *)*v171);
            v176 = v175 + 1;
            v177 = 1;
            v178 = v175[1];
            v179 = *v175;
            v180 = 1;
            do
            {
              v181 = (float *)(v173 + 288 * v174[v177]);
              v182 = *v181;
              v183 = (float)((float)(v175[1] - v181[1]) * (float)(v175[1] - v181[1]))
                   + (float)((float)(*v175 - *v181) * (float)(*v175 - *v181));
              if (v183 > v167)
                v182 = -0.0;
              else
                ++v180;
              v179 = v179 + v182;
              if (v183 > v167)
                v184 = -0.0;
              else
                v184 = v181[1];
              v178 = v178 + v184;
              ++v177;
            }
            while (v169 != v177);
            v185 = v179 / (float)v180;
            *v175 = v185;
            v186 = v169 <= 2 ? 2 : v169;
            v187 = v186 - 1;
            v188 = v178 / (float)v180;
            *v176 = v188;
            v189 = v174 + 1;
            v190 = 1;
            v191 = v188;
            v192 = v185;
            do
            {
              v193 = *v189++;
              v194 = (float *)(v173 + 288 * v193);
              v195 = *v194;
              v196 = (float)((float)(v188 - v194[1]) * (float)(v188 - v194[1]))
                   + (float)((float)(v185 - *v194) * (float)(v185 - *v194));
              if (v196 > v167)
                v195 = -0.0;
              else
                ++v190;
              v192 = v192 + v195;
              if (v196 > v167)
                v197 = -0.0;
              else
                v197 = v194[1];
              v191 = v191 + v197;
              --v187;
            }
            while (v187);
            v198 = v192 / (float)v190;
            *v175 = v198;
            v199 = v191 / (float)v190;
            *v176 = v199;
            v200 = v169;
            v201 = 1;
            do
            {
              v202 = *((int *)*v171 + v201);
              v203 = (float *)(a2[1] + 288 * (int)v202);
              if ((float)((float)((float)(*v176 - v203[1]) * (float)(*v176 - v203[1]))
                         + (float)((float)(*v175 - *v203) * (float)(*v175 - *v203))) <= v167)
              {
                v156[v202] = 1;
                v200 = *v168;
              }
              ++v201;
            }
            while (v200 > v201);
            *v175 = v198;
            *v176 = v199;
            if (v200 >= 1)
            {
              v169 = 0;
              v209 = v200 - 1;
              if (v200 != 1)
              {
                v210 = *v171;
                v211 = (int *)((char *)*v171 + 4);
                do
                {
                  v213 = *v211++;
                  v212 = v213;
                  if (!v156[v213])
                    v210[v169++] = v212;
                  --v209;
                }
                while (v209);
              }
            }
            else
            {
              v169 = 0;
            }
            v204 = *v172;
            if (v169 > *v172)
              break;
            v205 = v169 - v200;
            if (v169 > v200)
              goto LABEL_167;
LABEL_130:
            *v168 = v169;
            if (v169 <= 1)
              goto LABEL_127;
          }
          v206 = 2 * v204;
          v220 = v204 == 0;
          v207 = 64;
          if (!v220)
            v207 = v206;
          if (v207 <= v169)
            v208 = v169;
          else
            v208 = v207;
          if (v208)
            *v171 = malloc_type_realloc(*v171, 4 * v208, 0x90001D16uLL);
          *v172 = v208;
          v205 = v169 - v200;
          if (v169 <= v200)
            goto LABEL_130;
LABEL_167:
          bzero((char *)*v171 + 4 * *v168, 4 * v205);
          goto LABEL_130;
        }
LABEL_173:
        v214 = *a2;
        if (*a2 < 1)
        {
          v216 = 0;
          v218 = v260;
        }
        else
        {
          v215 = 0;
          v216 = 0;
          v217 = 0;
          v218 = v260;
          do
          {
            v219 = a2[1];
            if (v156[v217])
              v220 = 1;
            else
              v220 = v219 == 0;
            if (!v220)
            {
              memcpy((void *)(v219 + 288 * v216++), (const void *)(v219 + v215), 0x120uLL);
              v214 = *a2;
            }
            ++v217;
            v215 += 288;
          }
          while (v217 < v214);
        }
        v221 = a2[2];
        v39 = (uint64_t *)v269;
        if (v216 > v221)
        {
          v225 = 2 * v221;
          if (v225 <= v216)
            v226 = v216;
          else
            v226 = v225;
          if (v226)
            a2[1] = (uint64_t)malloc_type_realloc((void *)a2[1], 288 * v226, 0x5E8DA77AuLL);
          a2[2] = v226;
          v222 = v216 - v214;
          if (v216 <= v214)
          {
LABEL_184:
            *a2 = v216;
            v223 = *(_QWORD *)(v269 + 24);
            v224 = v274;
            if (v223 < 1)
              goto LABEL_200;
            goto LABEL_193;
          }
        }
        else
        {
          v222 = v216 - v214;
          if (v216 <= v214)
            goto LABEL_184;
        }
        bzero((void *)(a2[1] + 288 * *a2), 288 * v222);
        *a2 = v216;
        v223 = *(_QWORD *)(v269 + 24);
        v224 = v274;
        if (v223 < 1)
          goto LABEL_200;
LABEL_193:
        v227 = *(_QWORD *)(v269 + 32);
        if (v227)
        {
          v228 = 0;
          v229 = 0;
          v230 = 2 * v223;
          if (2 * v223 <= 1)
            v230 = 1;
          do
          {
            if (!v156[v229 >> 1])
              *(_DWORD *)(v227 + 4 * v228++) = *(_DWORD *)(v227 + 4 * v229);
            ++v229;
          }
          while (v230 != v229);
        }
LABEL_200:
        v231 = *(_QWORD *)(v269 + 40);
        if (v216 > v231)
        {
          v235 = 2 * v231;
          v220 = v231 == 0;
          v236 = 32;
          if (!v220)
            v236 = v235;
          if (v236 <= v216)
            v237 = v216;
          else
            v237 = v236;
          if (v237)
            *(_QWORD *)(v269 + 32) = malloc_type_realloc(*(void **)(v269 + 32), 8 * v237, 0xC0609243uLL);
          *(_QWORD *)(v269 + 40) = v237;
          v224 = v274;
          v232 = v216 - v223;
          if (v216 <= v223)
          {
LABEL_202:
            v233 = *a2;
            *(_QWORD *)(v269 + 24) = *a2;
            v234 = *(_QWORD *)v269;
            if (*(uint64_t *)v269 < 1)
              goto LABEL_220;
            goto LABEL_213;
          }
        }
        else
        {
          v232 = v216 - v223;
          if (v216 <= v223)
            goto LABEL_202;
        }
        bzero((void *)(*(_QWORD *)(v269 + 32) + 8 * *(_QWORD *)(v269 + 24)), 8 * v232);
        v233 = *a2;
        *(_QWORD *)(v269 + 24) = *a2;
        v234 = *(_QWORD *)v269;
        if (*(uint64_t *)v269 < 1)
          goto LABEL_220;
LABEL_213:
        v238 = *(_QWORD *)(v269 + 8);
        if (v238)
        {
          v239 = 0;
          v240 = 0;
          v241 = 2 * v234;
          if (2 * v234 <= 1)
            v241 = 1;
          do
          {
            if (!v156[v240 >> 1])
              *(_DWORD *)(v238 + 4 * v239++) = *(_DWORD *)(v238 + 4 * v240);
            ++v240;
          }
          while (v241 != v240);
        }
LABEL_220:
        v242 = *(_QWORD *)(v269 + 16);
        if (v233 > v242)
        {
          v244 = 2 * v242;
          v220 = v242 == 0;
          v245 = 32;
          if (!v220)
            v245 = v244;
          if (v245 <= v233)
            v246 = v233;
          else
            v246 = v245;
          if (v246)
            *(_QWORD *)(v269 + 8) = malloc_type_realloc(*(void **)(v269 + 8), 8 * v246, 0x551CDAF9uLL);
          *(_QWORD *)(v269 + 16) = v246;
          v224 = v274;
          v243 = v233 - v234;
          if (v233 <= v234)
          {
LABEL_222:
            *(_QWORD *)v269 = *a2;
            v49 = v266;
            if ((int)v264 < 1)
              goto LABEL_235;
            goto LABEL_233;
          }
        }
        else
        {
          v243 = v233 - v234;
          if (v233 <= v234)
            goto LABEL_222;
        }
        bzero((void *)(*(_QWORD *)(v269 + 8) + 8 * *(_QWORD *)v269), 8 * v243);
        *(_QWORD *)v269 = *a2;
        v49 = v266;
        if ((int)v264 < 1)
          goto LABEL_235;
LABEL_233:
        v247 = v279 + 1;
        do
        {
          v248 = *v247;
          v247 += 3;
          free(v248);
          --v224;
        }
        while (v224);
LABEL_235:
        free(v279);
        free(v156);
        v42 = v267;
        vl_timer_stop(v218);
        if (*(_DWORD *)(v49 + 644))
          goto LABEL_109;
LABEL_236:
        log_col_app((uint64_t)"%s%s%s:%s%7.1fms%s", v146, v147, v148, v149, v150, v151, v152, (char)&str_4_1);
      }
LABEL_237:
      vl_dump_detail_add_hash(v265, (uint64_t)"vl_match output", a2, v39, (_QWORD *)v42);
      printf("Verbose : ");
      printf("MATCH: Found %s%llu%s matches", (const char *)&unk_210BC3C5E, *v39, (const char *)&unk_210BC3C5E);
      putchar(10);
      vl_timer_stop(v49);
      if (*(_DWORD *)(v49 + 212))
      {
        printf("Verbose : ");
        printf("Total time for %40s : %7.3f ms", (const char *)(v49 + 148), (double)*(uint64_t *)(v49 + 120) * 0.000001);
        putchar(10);
      }
      else
      {
        log_col_app((uint64_t)"%s%s%s:%s%7.1fms%s", v249, v250, v251, v252, v253, v254, v255, (char)&str_4_1);
      }
      free(v281);
      free(v268);
      return;
    case 3:
      printf("Info : ");
      printf("Skipping feature matching (VL_MATCH_METHOD_NONE)");
      goto LABEL_63;
    default:
      printf("%sError : ", (const char *)&unk_210BC3C5E);
      printf("Unsupported match method %d");
LABEL_63:
      putchar(10);
      if (!(_DWORD)v47)
        goto LABEL_105;
      goto LABEL_73;
  }
}

uint64_t vl_desc_cluster_similar(uint8x8_t *a1, int a2, int a3, int *a4, int a5, int a6)
{
  int *ids;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint8x8_t *v24;
  int8x16_t v25;
  uint8x8_t *v26;
  uint8x8_t *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  char *v36;
  uint64_t v37;
  int v38;
  int32x4_t v39;
  uint64_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int16x8_t v43;
  int16x8_t v44;
  uint64_t v45;
  uint64_t v46;
  int32x4_t v47;
  uint8x8_t *v48;
  int32x4_t v49;
  uint64_t v50;
  uint8x8_t *v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  uint8x16_t v58;
  uint8x16_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int32x4_t v65;
  uint8x8_t *v66;
  uint8x8_t *v67;
  uint64_t v68;
  uint8x8_t v69;
  uint8x8_t v70;
  uint8x8_t v71;
  int16x8_t v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _DWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  int v99;
  int *v100;
  uint64_t v101;
  uint64_t v103;
  uint64_t v104;
  int *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD *v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint8x8_t *v130;
  uint64_t v131;
  uint64_t v132;
  _OWORD v133[2];
  int v134;
  uint64_t v135;
  __int128 v136;

  v134 = 0;
  v135 = 0x3DCCCCCD3F800000;
  v133[0] = xmmword_210BCC1A0;
  v133[1] = xmmword_210BCC1B0;
  v136 = xmmword_210BCC1C0;
  ids = sss_create_ids(a1, 0, a2, a3, v133);
  v10 = (char *)malloc_type_malloc(32 * a3, 0x100004052888210uLL);
  v11 = a3;
  v122 = v10;
  v105 = ids;
  v106 = a3;
  if (a3 < 1)
  {
    v17 = 0;
  }
  else
  {
    v12 = 0;
    v13 = v10;
    do
    {
      sss_knn((uint64_t)ids, (uint64_t)v133, (float)a5, (uint64_t)a1 + v12 * ids[65], v13, 0, 8);
      ++v12;
      v13 += 32;
    }
    while (v11 != v12);
    memset(a4, 255, 4 * v11);
    v14 = a6;
    if (a6 > 0)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = a2;
      v19 = a2 & 0xF;
      v20 = a5 * a5;
      v21 = a2;
      v22 = a2 & 0xFFFFFFE0;
      v24 = a1;
      v23 = v122;
      v107 = a2 & 0xFFFFFFF8;
      v25 = 0uLL;
      v26 = a1;
      v27 = a1 + 2;
      v112 = a5 * a5;
      v132 = v11;
      while ((a4[v15] & 0x80000000) == 0)
      {
LABEL_6:
        ++v15;
        v27 = (uint8x8_t *)((char *)v27 + v21);
        v26 = (uint8x8_t *)((char *)v26 + v21);
        if (v15 == v11)
          goto LABEL_138;
      }
      v130 = v27;
      v131 = v15;
      if (v16 <= 0)
      {
        v28 = 2 * v16;
        if (2 * v16 <= 1)
          v28 = 1;
        if (v16)
          v29 = v28;
        else
          v29 = 64;
        v17 = malloc_type_realloc(v17, 4 * v29, 0xAEE287F0uLL);
        v16 = v29;
        v27 = v130;
        v15 = v131;
        v25 = 0uLL;
        v22 = a2 & 0xFFFFFFE0;
        v21 = a2;
        v20 = v112;
        v19 = a2 & 0xF;
        v24 = a1;
        v23 = v122;
        v18 = a2;
        v14 = a6;
      }
      v30 = 0;
      *v17 = v15;
      v31 = -2 - v15;
      v32 = 1;
      v123 = -2 - v15;
      while (1)
      {
        v33 = v17[v32 - 1];
        if ((v33 & 0x80000000) != 0 || (v34 = a4[v33], (v34 & 0x80000000) == 0))
        {
LABEL_18:
          --v32;
          goto LABEL_19;
        }
        if (v34 == v31)
          goto LABEL_6;
        v35 = v17[v32 - 1];
        a4[v33] = v31;
        v36 = (char *)v24 + (int)v33 * (uint64_t)(int)v21;
        if (v19)
        {
          if (v18 < 1)
            goto LABEL_42;
          if (v18 < 8)
          {
            v37 = 0;
            v38 = 0;
            do
            {
LABEL_40:
              v73 = v26->u8[v37] - v36[v37];
              v38 += v73 * v73;
              ++v37;
            }
            while (a2 != v37);
            goto LABEL_41;
          }
          v45 = (int)v33 * (uint64_t)(int)v21;
          if (v18 >= 0x20)
          {
            v47 = 0uLL;
            v48 = (uint8x8_t *)((char *)a1 + v45 + 16);
            v49 = 0uLL;
            v50 = v22;
            v51 = v27;
            v52 = 0uLL;
            v53 = 0uLL;
            v54 = 0uLL;
            v55 = 0uLL;
            v56 = 0uLL;
            v57 = 0uLL;
            do
            {
              v58 = *(uint8x16_t *)v51[-2].i8;
              v59 = *(uint8x16_t *)v48[-2].i8;
              v60 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v58.i8, *(uint8x8_t *)v59.i8);
              v61 = (int16x8_t)vsubl_high_u8(v58, v59);
              v62 = (int16x8_t)vsubl_u8(*v51, *v48);
              v63 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v51->i8, *(uint8x16_t *)v48->i8);
              v53 = vmlal_high_s16(v53, v61, v61);
              v52 = vmlal_s16(v52, *(int16x4_t *)v61.i8, *(int16x4_t *)v61.i8);
              v49 = vmlal_high_s16(v49, v60, v60);
              v47 = vmlal_s16(v47, *(int16x4_t *)v60.i8, *(int16x4_t *)v60.i8);
              v57 = vmlal_high_s16(v57, v63, v63);
              v56 = vmlal_s16(v56, *(int16x4_t *)v63.i8, *(int16x4_t *)v63.i8);
              v55 = vmlal_high_s16(v55, v62, v62);
              v54 = vmlal_s16(v54, *(int16x4_t *)v62.i8, *(int16x4_t *)v62.i8);
              v51 += 4;
              v48 += 4;
              v50 -= 32;
            }
            while (v50);
            v38 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v54, v47), vaddq_s32(v56, v52)), vaddq_s32(vaddq_s32(v55, v49), vaddq_s32(v57, v53))));
            if (v22 == a2)
              goto LABEL_41;
            v46 = v22;
            v37 = v22;
            if ((a2 & 0x18) == 0)
              goto LABEL_40;
          }
          else
          {
            v38 = 0;
            v46 = 0;
          }
          v64 = 0uLL;
          v65 = (int32x4_t)v38;
          v66 = (uint8x8_t *)((char *)v26 + v46);
          v67 = (uint8x8_t *)((char *)v24 + v46 + v45);
          v68 = v46 - v107;
          do
          {
            v69 = *v66++;
            v70 = v69;
            v71 = *v67++;
            v72 = (int16x8_t)vsubl_u8(v70, v71);
            v64 = vmlal_high_s16(v64, v72, v72);
            v65 = vmlal_s16(v65, *(int16x4_t *)v72.i8, *(int16x4_t *)v72.i8);
            v68 += 8;
          }
          while (v68);
          v38 = vaddvq_s32(vaddq_s32(v65, v64));
          v37 = a2 & 0xFFFFFFF8;
          if (v107 != a2)
            goto LABEL_40;
        }
        else
        {
          v39 = 0uLL;
          if (v18 >= 16)
          {
            v40 = 0;
            do
            {
              v41 = *(int8x16_t *)v26[2 * v40].i8;
              v42 = *(int8x16_t *)&v36[16 * v40];
              v43 = (int16x8_t)vabdq_u16((uint16x8_t)vzip1q_s8(v41, v25), (uint16x8_t)vzip1q_s8(v42, v25));
              v44 = (int16x8_t)vabdq_u16((uint16x8_t)vzip2q_s8(v41, v25), (uint16x8_t)vzip2q_s8(v42, v25));
              v39 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v39, (uint16x8_t)vmulq_s16(v43, v43)), (uint16x8_t)vmulq_s16(v44, v44));
              ++v40;
            }
            while (a2 >> 4 != (_DWORD)v40);
          }
          v38 = vaddvq_s32(v39);
        }
LABEL_41:
        if (v38 > v20)
          goto LABEL_18;
LABEL_42:
        a4[v33] = v15;
        ++v30;
        v74 = v23[8 * (int)v33];
        if (v74 == (_DWORD)v33)
        {
          --v32;
          v75 = 8 * (int)v33;
          v76 = 32 * (int)v33;
          v77 = *(_DWORD *)((char *)v23 + (v76 | 4));
          if (v77 == (_DWORD)v33)
            goto LABEL_44;
        }
        else
        {
          if (v74 < 0)
          {
            --v32;
            v11 = v132;
            goto LABEL_19;
          }
          if (v32 > v16)
          {
            v84 = 2 * v16;
            if (!v16)
              v84 = 64;
            if (v84 <= v32)
              v84 = v32;
            if (v84)
            {
              v124 = v84;
              v17 = malloc_type_realloc(v17, 4 * v84, 0x3A09BCB0uLL);
              v31 = v123;
              v16 = v124;
              v27 = v130;
              v25 = 0uLL;
              v22 = a2 & 0xFFFFFFE0;
              v21 = a2;
              v20 = v112;
              v19 = a2 & 0xF;
              v15 = v131;
              v24 = a1;
              v23 = v122;
              v18 = a2;
              v14 = a6;
            }
            else
            {
              v16 = 0;
            }
          }
          v17[v32 - 1] = v74;
          v75 = 8 * (int)v33;
          v76 = 32 * (int)v33;
          v77 = *(_DWORD *)((char *)v23 + (v76 | 4));
          if (v77 == (_DWORD)v33)
          {
LABEL_44:
            v78 = *(_DWORD *)((char *)v23 + (v76 | 8));
            if (v78 == (_DWORD)v33)
              goto LABEL_45;
            goto LABEL_71;
          }
        }
        if (v77 < 0)
          goto LABEL_122;
        if (v32 < v16)
          goto LABEL_70;
        v85 = 2 * v16;
        if (!v16)
          v85 = 64;
        if (v85 <= v32)
          v85 = v32 + 1;
        if (v85)
        {
          v125 = v85;
          v113 = v76;
          v108 = v75;
          v17 = malloc_type_realloc(v17, 4 * v85, 0x3A09BCB0uLL);
          v75 = v108;
          v22 = a2 & 0xFFFFFFE0;
          v76 = v113;
          v18 = a2;
          v31 = v123;
          v16 = v125;
          v27 = v130;
          v25 = 0uLL;
          v21 = a2;
          v20 = v112;
          v19 = a2 & 0xF;
          v15 = v131;
          v24 = a1;
          v23 = v122;
          v14 = a6;
LABEL_70:
          v17[v32++] = v77;
          v78 = *(_DWORD *)((char *)v23 + (v76 | 8));
          if (v78 == (_DWORD)v33)
            goto LABEL_45;
          goto LABEL_71;
        }
        v16 = 0;
        v17[v32++] = v77;
        v78 = *(_DWORD *)((char *)v23 + (v76 | 8));
        if (v78 == (_DWORD)v33)
        {
LABEL_45:
          v79 = *(_DWORD *)((char *)v23 + (v76 | 0xC));
          if (v79 == (_DWORD)v33)
            goto LABEL_46;
          goto LABEL_80;
        }
LABEL_71:
        if (v78 < 0)
          goto LABEL_122;
        if (v32 < v16)
          goto LABEL_79;
        v86 = 2 * v16;
        if (!v16)
          v86 = 64;
        if (v86 <= v32)
          v86 = v32 + 1;
        if (v86)
        {
          v126 = v86;
          v114 = v76;
          v109 = v75;
          v17 = malloc_type_realloc(v17, 4 * v86, 0x3A09BCB0uLL);
          v75 = v109;
          v22 = a2 & 0xFFFFFFE0;
          v76 = v114;
          v18 = a2;
          v31 = v123;
          v16 = v126;
          v27 = v130;
          v25 = 0uLL;
          v21 = a2;
          v20 = v112;
          v19 = a2 & 0xF;
          v15 = v131;
          v24 = a1;
          v23 = v122;
          v14 = a6;
LABEL_79:
          v17[v32++] = v78;
          v79 = *(_DWORD *)((char *)v23 + (v76 | 0xC));
          if (v79 == (_DWORD)v33)
            goto LABEL_46;
          goto LABEL_80;
        }
        v16 = 0;
        v17[v32++] = v78;
        v79 = *(_DWORD *)((char *)v23 + (v76 | 0xC));
        if (v79 == (_DWORD)v33)
        {
LABEL_46:
          v80 = *(_DWORD *)((char *)v23 + (v76 | 0x10));
          if (v80 == (_DWORD)v33)
            goto LABEL_47;
          goto LABEL_89;
        }
LABEL_80:
        if (v79 < 0)
          goto LABEL_122;
        if (v32 < v16)
          goto LABEL_88;
        v87 = 2 * v16;
        if (!v16)
          v87 = 64;
        if (v87 <= v32)
          v87 = v32 + 1;
        if (v87)
        {
          v127 = v87;
          v115 = v76;
          v110 = v75;
          v17 = malloc_type_realloc(v17, 4 * v87, 0x3A09BCB0uLL);
          v75 = v110;
          v22 = a2 & 0xFFFFFFE0;
          v76 = v115;
          v18 = a2;
          v31 = v123;
          v16 = v127;
          v27 = v130;
          v25 = 0uLL;
          v21 = a2;
          v20 = v112;
          v19 = a2 & 0xF;
          v15 = v131;
          v24 = a1;
          v23 = v122;
          v14 = a6;
LABEL_88:
          v17[v32++] = v79;
          v80 = *(_DWORD *)((char *)v23 + (v76 | 0x10));
          if (v80 == (_DWORD)v33)
            goto LABEL_47;
          goto LABEL_89;
        }
        v16 = 0;
        v17[v32++] = v79;
        v80 = *(_DWORD *)((char *)v23 + (v76 | 0x10));
        if (v80 == (_DWORD)v33)
        {
LABEL_47:
          v81 = *(_DWORD *)((char *)v23 + ((4 * v75) | 0x14));
          if (v81 == (_DWORD)v33)
            goto LABEL_48;
          goto LABEL_105;
        }
LABEL_89:
        if (v80 < 0)
          goto LABEL_122;
        if (v32 >= v16)
        {
          v88 = 2 * v16;
          if (!v16)
            v88 = 64;
          if (v88 <= v32)
            v88 = v32 + 1;
          if (v88)
          {
            v128 = v88;
            v116 = v76;
            v111 = v75;
            v17 = malloc_type_realloc(v17, 4 * v88, 0x3A09BCB0uLL);
            v75 = v111;
            v22 = a2 & 0xFFFFFFE0;
            v76 = v116;
            v18 = a2;
            v31 = v123;
            v16 = v128;
            v27 = v130;
            v25 = 0uLL;
            v21 = a2;
            v20 = v112;
            v19 = a2 & 0xF;
            v15 = v131;
            v24 = a1;
            v23 = v122;
            v14 = a6;
          }
          else
          {
            v16 = 0;
          }
        }
        v17[v32++] = v80;
        v81 = *(_DWORD *)((char *)v23 + ((4 * v75) | 0x14));
        if (v81 == (_DWORD)v33)
        {
LABEL_48:
          v82 = *(_DWORD *)((char *)v23 + (v76 | 0x18));
          if (v82 != (_DWORD)v33)
            goto LABEL_114;
          goto LABEL_49;
        }
LABEL_105:
        if (v81 < 0)
          goto LABEL_122;
        if (v32 < v16)
          goto LABEL_113;
        v89 = 2 * v16;
        if (!v16)
          v89 = 64;
        if (v89 <= v32)
          v89 = v32 + 1;
        if (v89)
        {
          v129 = v89;
          v117 = v76;
          v17 = malloc_type_realloc(v17, 4 * v89, 0x3A09BCB0uLL);
          v76 = v117;
          v18 = a2;
          v31 = v123;
          v16 = v129;
          v27 = v130;
          v25 = 0uLL;
          v22 = a2 & 0xFFFFFFE0;
          v21 = a2;
          v20 = v112;
          v19 = a2 & 0xF;
          v15 = v131;
          v24 = a1;
          v23 = v122;
          v14 = a6;
LABEL_113:
          v17[v32++] = v81;
          v82 = *(_DWORD *)((char *)v23 + (v76 | 0x18));
          if (v82 != (_DWORD)v33)
            goto LABEL_114;
          goto LABEL_49;
        }
        v16 = 0;
        v17[v32++] = v81;
        v82 = *(_DWORD *)((char *)v23 + (v76 | 0x18));
        if (v82 != (_DWORD)v33)
        {
LABEL_114:
          if ((v82 & 0x80000000) == 0)
          {
            if (v32 >= v16)
            {
              v90 = 2 * v16;
              if (!v16)
                v90 = 64;
              if (v90 <= v32)
                v90 = v32 + 1;
              if (v90)
              {
                v91 = v90;
                v118 = v76;
                v17 = malloc_type_realloc(v17, 4 * v90, 0x3A09BCB0uLL);
                v76 = v118;
                v18 = a2;
                v31 = v123;
                v16 = v91;
                v27 = v130;
                v15 = v131;
                v25 = 0uLL;
                v22 = a2 & 0xFFFFFFE0;
                v21 = a2;
                v20 = v112;
                v19 = a2 & 0xF;
                v24 = a1;
                v23 = v122;
                v14 = a6;
              }
              else
              {
                v16 = 0;
              }
            }
            v17[v32++] = v82;
            v83 = *(_DWORD *)((char *)v23 + (v76 | 0x1C));
            v11 = v132;
            if (v83 == v35)
              goto LABEL_19;
LABEL_127:
            if ((v83 & 0x80000000) == 0)
            {
              if (v32 >= v16)
              {
                v92 = 2 * v16;
                if (!v16)
                  v92 = 64;
                if (v92 <= v32)
                  v92 = v32 + 1;
                if (v92)
                {
                  v93 = v92;
                  v17 = malloc_type_realloc(v17, 4 * v92, 0x3A09BCB0uLL);
                  v31 = v123;
                  v16 = v93;
                  v27 = v130;
                  v15 = v131;
                  v25 = 0uLL;
                  v22 = a2 & 0xFFFFFFE0;
                  v21 = a2;
                  v20 = v112;
                  v19 = a2 & 0xF;
                  v24 = a1;
                  v23 = v122;
                  v18 = a2;
                  v14 = a6;
                }
                else
                {
                  v16 = 0;
                }
              }
              v17[v32++] = v83;
            }
            goto LABEL_19;
          }
LABEL_122:
          v11 = v132;
          goto LABEL_19;
        }
LABEL_49:
        v83 = *(_DWORD *)((char *)v23 + (v76 | 0x1C));
        v11 = v132;
        if (v83 != v35)
          goto LABEL_127;
LABEL_19:
        if (!v32 || v30 >= v14)
          goto LABEL_6;
      }
    }
    v103 = 0;
    v104 = 0;
    v17 = 0;
    do
    {
      if (a4[v103] < 0)
      {
        if (v104 <= 0)
        {
          v17 = malloc_type_realloc(v17, 0x100uLL, 0xAEE287F0uLL);
          v104 = 64;
        }
        *v17 = v103;
      }
      ++v103;
    }
    while (v11 != v103);
  }
LABEL_138:
  free(v17);
  v94 = malloc_type_malloc(4 * v106, 0x100004052888210uLL);
  if (v106 < 1)
  {
    v96 = 0;
    v100 = v105;
  }
  else
  {
    v95 = 0;
    LODWORD(v96) = 0;
    do
    {
      v97 = a4[v95];
      v98 = v95 == v97;
      if (v95 == v97)
        v99 = v96;
      else
        v99 = -1;
      if (v98)
        v96 = (v96 + 1);
      else
        v96 = v96;
      v94[v95++] = v99;
    }
    while (v11 != v95);
    v100 = v105;
    do
    {
      *a4 = v94[*a4];
      ++a4;
      --v11;
    }
    while (v11);
  }
  free(v94);
  printf("Verbose : ");
  printf("Clustered descriptors: %d => %d (%.1f%%)\n", v106, v96, (double)(int)v96 * 100.0 / (double)v106);
  putchar(10);
  if (v100)
  {
    if (v100[64] >= 1)
    {
      v101 = 0;
      do
      {
        sss_node_free(*(_QWORD *)&v100[2 * v101]);
        free(*(void **)(*(_QWORD *)&v100[2 * v101] + 32));
        free(*(void **)(*(_QWORD *)&v100[2 * v101] + 40));
        free(*(void **)&v100[2 * v101++]);
      }
      while (v101 < v100[64]);
    }
    free(v100);
  }
  free(v122);
  return v96;
}

void vl_desc_cluster_centroids(uint8x16_t *a1, int a2, int a3, char *a4, int *a5, int a6)
{
  uint64_t v6;
  _DWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint8x16_t *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint32x4_t *v24;
  uint8x16_t *v25;
  uint8x16_t v26;
  uint16x8_t v27;
  uint16x8_t v28;
  uint32x4_t v29;
  uint32x4_t v30;
  uint32x4_t v31;
  uint32x4_t v32;
  uint32x4_t *v33;
  uint16x8_t v34;
  uint32x4_t v35;
  uint32x4_t v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  int *v41;
  _BYTE *v42;
  int *v43;
  _BYTE *v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  _DWORD *v50;

  LODWORD(v6) = a6;
  v12 = malloc_type_calloc(a3, 4uLL, 0x100004052888210uLL);
  v13 = (char *)malloc_type_calloc((int)v6 * a2, 4uLL, 0x100004052888210uLL);
  if (a3 >= 1)
  {
    if (a2 > 0)
    {
      v14 = 0;
      v15 = a2 & 0xFFFFFFF8;
      v16 = a1;
      while (1)
      {
        v17 = a5[v14];
        ++v12[v17];
        v18 = v17 * a2;
        v19 = (unint64_t)&v13[4 * (int)v17 * a2];
        if (a2 >= 8)
        {
          if (v19 >= (unint64_t)a1->u64 + a2 + v14 * a2
            || &a1->i8[v14 * a2] >= &v13[4 * a2 + 4 * v18])
          {
            if (a2 < 0x10)
            {
              v22 = 0;
LABEL_18:
              v33 = (uint32x4_t *)&v13[4 * v22 + 4 * v18];
              do
              {
                v34 = vmovl_u8(*(uint8x8_t *)&v16->i8[v22]);
                v35 = vaddw_u16(*v33, *(uint16x4_t *)v34.i8);
                v36 = vaddw_high_u16(v33[1], v34);
                *v33 = v35;
                v33[1] = v36;
                v33 += 2;
                v22 += 8;
              }
              while (v15 != v22);
              v20 = a2 & 0xFFFFFFF8;
              if (v15 == a2)
                goto LABEL_4;
              goto LABEL_21;
            }
            v23 = a2 & 0xFFFFFFF0;
            v24 = (uint32x4_t *)&v13[4 * v18];
            v25 = v16;
            do
            {
              v26 = *v25++;
              v27 = vmovl_high_u8(v26);
              v28 = vmovl_u8(*(uint8x8_t *)v26.i8);
              v29 = vaddw_u16(*v24, *(uint16x4_t *)v28.i8);
              v30 = vaddw_high_u16(v24[1], v28);
              v31 = vaddw_u16(v24[2], *(uint16x4_t *)v27.i8);
              v32 = vaddw_high_u16(v24[3], v27);
              v24[2] = v31;
              v24[3] = v32;
              *v24 = v29;
              v24[1] = v30;
              v24 += 4;
              v23 -= 16;
            }
            while (v23);
            if ((a2 & 0xFFFFFFF0) == (unint64_t)a2)
              goto LABEL_4;
            v22 = a2 & 0xFFFFFFF0;
            v20 = v22;
            if ((a2 & 8) != 0)
              goto LABEL_18;
          }
          else
          {
            v20 = 0;
          }
        }
        else
        {
          v20 = 0;
        }
        do
        {
LABEL_21:
          *(_DWORD *)(v19 + 4 * v20) += v16->u8[v20];
          ++v20;
        }
        while (a2 != v20);
LABEL_4:
        ++v14;
        v16 = (uint8x16_t *)((char *)v16 + a2);
        if (v14 == a3)
          goto LABEL_25;
      }
    }
    v37 = a3;
    do
    {
      v38 = *a5++;
      ++v12[v38];
      --v37;
    }
    while (v37);
  }
LABEL_25:
  if ((int)v6 >= 1)
  {
    v39 = a2;
    v6 = v6;
    if (a2 <= 0)
    {
      v50 = v12;
      do
      {
        if (!*v50++)
          bzero(a4, v39);
        a4 += v39;
        --v6;
      }
      while (v6);
    }
    else
    {
      v40 = 0;
      v41 = (int *)v13;
      v42 = a4;
      do
      {
        if (v12[v40])
        {
          v43 = v41;
          v44 = v42;
          v45 = a2;
          do
          {
            v47 = *v43++;
            v46 = v47;
            v48 = v12[v40];
            if (v48 >= 0)
              v49 = v12[v40];
            else
              v49 = v48 + 1;
            *v44++ = (v46 + (v49 >> 1)) / v48;
            --v45;
          }
          while (v45);
        }
        else
        {
          bzero(&a4[v40 * a2], a2);
        }
        ++v40;
        v42 += a2;
        v41 += a2;
      }
      while (v40 != v6);
    }
  }
  free(v12);
  free(v13);
}

uint64_t vl_img_get_gv(uint64_t a1, int a2, float *a3)
{
  int v5;
  float v6;
  float v7;
  float v8;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v19;
  double v20;
  _BOOL4 v22;
  float v24;
  float v25;
  float v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[3];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[2];
  __int128 v35;
  _QWORD v36[2];
  __int128 v37;
  __int128 v38;

  v5 = *(_DWORD *)(a1 + 164);
  v26 = *(float *)(a1 + 112);
  v6 = -v26;
  v24 = *(float *)(a1 + 108);
  v25 = *(float *)(a1 + 104);
  v7 = -v24;
  v8 = -v25;
  _Q1 = *(_OWORD *)(a1 + 132);
  v27 = *(_OWORD *)(a1 + 116);
  v28 = _Q1;
  v29 = *(_OWORD *)(a1 + 148);
  v36[0] = 0;
  v37 = 0u;
  v38 = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  v36[1] = _Q1;
  HIDWORD(v37) = 1065353216;
  v35 = 0u;
  memset(v34, 0, sizeof(v34));
  DWORD1(v34[0]) = 1065353216;
  HIDWORD(v34[0]) = 1065353216;
  LODWORD(v35) = -1082130432;
  v32 = 0u;
  v33 = 0u;
  v31 = 0u;
  memset(v30, 0, sizeof(v30));
  g_coordsf_conv((float *)&v27, (float *)v36, (float *)v30);
  g_coordsf_conv((float *)v34, (float *)v30, (float *)&v31);
  v13 = *((float *)&v31 + 2);
  *(_QWORD *)&v27 = __PAIR64__(HIDWORD(v31), v31);
  *((_QWORD *)&v27 + 1) = __PAIR64__(DWORD1(v31), DWORD2(v32));
  v14 = *(float *)&v33;
  v15 = *((float *)&v32 + 1);
  *(_QWORD *)&v28 = __PAIR64__(HIDWORD(v32), v32);
  *((_QWORD *)&v28 + 1) = __PAIR64__(DWORD1(v32), DWORD2(v31));
  LODWORD(v29) = v33;
  *((float *)&v29 + 1) = -(float)((float)((float)((float)(*(float *)&v31 * *((float *)&v33 + 1)) + 0.0)
                                        + (float)(*((float *)&v31 + 3) * *((float *)&v33 + 2)))
                                + (float)(*((float *)&v32 + 2) * *((float *)&v33 + 3)));
  *((float *)&v29 + 2) = -(float)((float)((float)((float)(*((float *)&v31 + 1) * *((float *)&v33 + 1)) + 0.0)
                                        + (float)(*(float *)&v32 * *((float *)&v33 + 2)))
                                + (float)(*((float *)&v32 + 3) * *((float *)&v33 + 3)));
  *((float *)&v29 + 3) = -(float)((float)((float)((float)(*((float *)&v31 + 2) * *((float *)&v33 + 1)) + 0.0)
                                        + (float)(*((float *)&v32 + 1) * *((float *)&v33 + 2)))
                                + (float)(*(float *)&v33 * *((float *)&v33 + 3)));
  v16 = (float)((float)(*((float *)&v32 + 1) * *((float *)&v32 + 1))
              + (float)(*((float *)&v31 + 2) * *((float *)&v31 + 2)))
      + (float)(*(float *)&v29 * *(float *)&v29);
  v17 = sqrtf(v16);
  if (v17 != 0.0 && v5 == 0)
  {
    v19 = acos((float)((float)((float)((float)(*((float *)&v32 + 1) * v7) + (float)(v6 * *((float *)&v31 + 2)))
                             + (float)(v8 * *(float *)&v33))
                     / (float)(sqrtf((float)((float)((float)(v24 * v24) + (float)(v26 * v26)) + (float)(v25 * v25)) * v16)
                             + 1.0e-20)));
    v20 = v19;
    if (v19 > 0.034906585)
    {
      printf("%sWarning : ", (const char *)&unk_210BC3C5E);
      printf("%sWarning%s core-motion and VIO gravity does not agree, diff %.1f deg", (const char *)&unk_210BC3C5E, (const char *)&unk_210BC3C5E, v20 * 180.0 / 3.14159265);
      putchar(10);
      printf("%sWarning : ", (const char *)&unk_210BC3C5E);
      printf("%s(%.3f %.3f %.3f) vs (%.3f %.3f %.3f)%s", (const char *)&unk_210BC3C5E, v6, v7, v8, v13, v15, v14, (const char *)&unk_210BC3C5E);
      putchar(10);
    }
  }
  if (a2 != 1 || v5)
  {
    v22 = a2 == 1 && v5 != 0;
    if (a2 && !v22)
    {
      printf("%sError : ", (const char *)&unk_210BC3C5E);
      printf("Unknown gv source type: %d");
      goto LABEL_23;
    }
    *a3 = v6;
    a3[1] = v7;
    a3[2] = v8;
    if (fabsf(sqrtf((float)((float)(v24 * v24) + (float)(v26 * v26)) + (float)(v25 * v25)) + -1.0) > 0.05)
    {
      printf("%sError : ", (const char *)&unk_210BC3C5E);
      printf("Core motion gravity not ok (%f, %f, %f)");
      goto LABEL_23;
    }
  }
  else
  {
    *a3 = v13;
    a3[1] = v15;
    a3[2] = v14;
    if (fabsf(v17 + -1.0) > 0.05)
    {
      printf("%sError : ", (const char *)&unk_210BC3C5E);
      printf("VIO gravity not ok (%f, %f, %f)");
LABEL_23:
      putchar(10);
      return 1;
    }
  }
  return 0;
}

uint64_t vl_img_init(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  int v11;
  int v12;
  double v13;
  double v14;
  long double v15;
  double v16;
  double v17;
  double v18;
  long double v19;
  long double v20;
  double v21;
  double v22;
  double v23;
  long double v24;
  long double v25;
  long double v26;
  float v27;
  float v28;
  float *v29;
  float *v30;
  float v31;
  float v32;
  int v33;
  float v34;
  float v35;
  float32x2_t v36;
  BOOL v37;
  float32x2_t v38;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  float v48;
  uint64_t v49;
  uint64_t result;
  float64x2_t v51;
  float64x2_t v52;
  float v53;
  int v54;
  int v55;
  double v56;
  _OWORD v57[3];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _OWORD v61[2];
  __int128 v62;
  _QWORD v63[2];
  __int128 v64;
  __int128 v65;

  if (!a4)
  {
    v11 = *(_DWORD *)(a1 + 8);
    v12 = *(_DWORD *)(a1 + 12);
    v13 = (float)v11;
    v14 = *(float *)a2;
    v15 = atan(v13 / (v14 + v14));
    v16 = v15 + v15;
    v17 = (float)v12;
    v18 = *(float *)(a2 + 16);
    v19 = atan(v17 / (v18 + v18));
    v20 = v19 + v19;
    v21 = *(float *)(a2 + 36);
    v56 = *(float *)(a2 + 40);
    v22 = (*(float *)(a2 + 8) - (v13 + -1.0) * 0.5) / v14;
    v23 = (*(float *)(a2 + 20) - (v17 + -1.0) * 0.5) / v18;
    *(_DWORD *)(a6 + 24) = 0;
    v24 = tan(v16 * 0.5);
    v25 = (double)v11 / (v24 + v24);
    v26 = tan(v20 * 0.5);
    *(long double *)(a6 + 32) = v25;
    *(long double *)(a6 + 40) = (double)v12 / (v26 + v26);
    *(double *)(a6 + 48) = v16;
    *(long double *)(a6 + 56) = v20;
    *(double *)(a6 + 96) = v21;
    *(_QWORD *)(a6 + 104) = 0;
    *(double *)(a6 + 112) = v56;
    *(_OWORD *)(a6 + 120) = 0u;
    *(_OWORD *)(a6 + 136) = 0u;
    *(_OWORD *)(a6 + 152) = 0u;
    *(_OWORD *)(a6 + 168) = 0u;
    *(_QWORD *)(a6 + 184) = 0;
    *(double *)(a6 + 64) = v22;
    *(double *)(a6 + 72) = v23;
    *(_QWORD *)(a6 + 80) = 0;
    *(_QWORD *)(a6 + 88) = 0;
    *(_DWORD *)(a6 + 192) = v11;
    *(_DWORD *)(a6 + 196) = v12;
    if (v20 == 0.0)
      *(_QWORD *)(a6 + 56) = 0;
    if (v16 == 0.0)
      *(_QWORD *)(a6 + 48) = 0;
  }
  *(_OWORD *)(a6 + 200) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a6 + 216) = *(_QWORD *)(a2 + 64);
  v27 = *(float *)(a3 + 408);
  if (v27 <= *(float *)(a2 + 72))
    v27 = *(float *)(a2 + 72);
  *(float *)(a6 + 224) = v27;
  v28 = *(float *)(a3 + 332);
  if (v28 <= 0.0)
  {
    v35 = v27 * *(float *)(a3 + 336);
  }
  else
  {
    v29 = (float *)&unk_210BCC088;
    v30 = (float *)&dword_210BCC1E0;
    do
    {
      v31 = *v30++;
      v29 += 100;
    }
    while (v31 < v27);
    v32 = v28 * 100.0;
    v33 = (int)(float)(v28 * 100.0);
    v34 = 0.0;
    if (v32 >= 1.0)
      v34 = v29[v33 - 1];
    v35 = v34 + (float)((float)(v29[v33] - v34) * (float)(v32 - (float)v33));
  }
  *(float *)(a6 + 228) = v35;
  v36 = *(float32x2_t *)(a2 + 96);
  v37 = v36.f32[0] < 0.0 || v36.f32[0] > 360.0;
  if (v37 || v36.f32[1] <= 0.0)
  {
    *(_DWORD *)(a6 + 244) = 0;
    *(_DWORD *)(a6 + 248) = 0;
    *(_DWORD *)(a6 + 252) = 0;
    if (a5)
      goto LABEL_22;
  }
  else
  {
    v38 = vcvt_f32_f64(vdivq_f64(vmulq_f64(vcvtq_f64_f32(v36), (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL)), (float64x2_t)vdupq_n_s64(0x4066800000000000uLL)));
    *(float32x2_t *)(a6 + 244) = v38;
    if (v38.f32[1] == 0.0)
    {
      *(_DWORD *)(a6 + 252) = 0;
      if (a5)
      {
LABEL_22:
        *(_QWORD *)(a6 + 8) = *(_QWORD *)(a1 + 8);
        goto LABEL_23;
      }
    }
    else
    {
      v53 = *(float *)(a3 + 340) * v38.f32[1];
      if (v53 > 3.11017673)
        v53 = 3.1102;
      *(float *)(a6 + 252) = v53;
      if (a5)
        goto LABEL_22;
    }
  }
  if (*(_DWORD *)(a1 + 16))
  {
    printf("%sError : ", (const char *)&unk_210BC3C5E);
    printf("Only support grey scale image");
LABEL_36:
    putchar(10);
    return 1;
  }
  v54 = *(_DWORD *)(a1 + 8);
  if (!v54 || (v55 = *(_DWORD *)(a1 + 12)) == 0)
  {
    printf("%sError : ", (const char *)&unk_210BC3C5E);
    printf("Image size 0");
    goto LABEL_36;
  }
  *(_QWORD *)a6 = *(_QWORD *)a1;
  *(_DWORD *)(a6 + 8) = v54;
  *(_DWORD *)(a6 + 12) = v55;
  *(_QWORD *)(a6 + 16) = v54;
LABEL_23:
  *(_DWORD *)(a6 + 292) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a6 + 296) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a6 + 300) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a6 + 256) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a6 + 268) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a6 + 280) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a6 + 260) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a6 + 272) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a6 + 284) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a6 + 264) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a6 + 276) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a6 + 288) = *(_DWORD *)(a2 + 148);
  v63[0] = 0;
  v64 = 0u;
  v65 = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  v63[1] = _D1;
  HIDWORD(v64) = 1065353216;
  v62 = 0u;
  v60 = 0u;
  memset(v61, 0, sizeof(v61));
  DWORD1(v61[0]) = 1065353216;
  HIDWORD(v61[0]) = 1065353216;
  LODWORD(v62) = -1082130432;
  v58 = 0u;
  v59 = 0u;
  memset(v57, 0, sizeof(v57));
  g_coordsf_conv((float *)(a6 + 256), (float *)v63, (float *)v57);
  g_coordsf_conv((float *)v61, (float *)v57, (float *)&v58);
  v44 = v58;
  *(_DWORD *)(a6 + 256) = v58;
  v45 = *((_QWORD *)&v58 + 1);
  *(_DWORD *)(a6 + 260) = HIDWORD(v58);
  *(_DWORD *)(a6 + 268) = HIDWORD(v44);
  v46 = *((_QWORD *)&v59 + 1);
  *(_DWORD *)(a6 + 264) = DWORD2(v59);
  *(_DWORD *)(a6 + 280) = v45;
  v47 = v60;
  v48 = (float)((float)(*(float *)&v44 * *((float *)&v60 + 1)) + 0.0)
      + (float)(*((float *)&v45 + 1) * *((float *)&v60 + 2));
  v49 = v59;
  *(_DWORD *)(a6 + 272) = v59;
  *(_DWORD *)(a6 + 276) = HIDWORD(v46);
  *(_DWORD *)(a6 + 284) = HIDWORD(v49);
  *(_DWORD *)(a6 + 288) = v47;
  *(float *)(a6 + 292) = -(float)(v48 + (float)(*(float *)&v46 * *((float *)&v47 + 3)));
  *(float *)(a6 + 296) = -(float)((float)((float)((float)(*((float *)&v44 + 1) * *((float *)&v47 + 1)) + 0.0)
                                        + (float)(*(float *)&v49 * *((float *)&v47 + 2)))
                                + (float)(*((float *)&v46 + 1) * *((float *)&v47 + 3)));
  *(float *)(a6 + 300) = -(float)((float)((float)((float)(*(float *)&v45 * *((float *)&v47 + 1)) + 0.0)
                                        + (float)(*((float *)&v49 + 1) * *((float *)&v47 + 2)))
                                + (float)(*(float *)&v47 * *((float *)&v47 + 3)));
  result = vl_img_get_gv(a2, *(_DWORD *)(a3 + 324), (float *)(a6 + 232));
  if (!(_DWORD)result)
  {
    *(_OWORD *)(a6 + 376) = *(_OWORD *)(a6 + 200);
    v51 = vcvtq_f64_f32(*(float32x2_t *)(a6 + 264));
    *(float64x2_t *)(a6 + 304) = vcvtq_f64_f32(*(float32x2_t *)(a6 + 256));
    *(float64x2_t *)(a6 + 320) = v51;
    v52 = vcvtq_f64_f32(*(float32x2_t *)(a6 + 280));
    *(float64x2_t *)(a6 + 336) = vcvtq_f64_f32(*(float32x2_t *)(a6 + 272));
    *(float64x2_t *)(a6 + 352) = v52;
    *(double *)(a6 + 368) = *(float *)(a6 + 288);
    *(_QWORD *)(a6 + 392) = *(_QWORD *)(a6 + 216);
    return result;
  }
  return 1;
}

uint64_t vl_printf(char *__format, ...)
{
  uint64_t result;
  va_list va;

  va_start(va, __format);
  result = vsnprintf((char *)(qword_253E9A2D0 + _MergedGlobals_4), 100000 - _MergedGlobals_4, __format, va);
  _MergedGlobals_4 += result;
  return result;
}

void vl_t_print(uint64_t a1, uint64_t a2, const char *a3)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  FILE *v7;
  size_t v8;
  FILE *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  size_t v17;
  size_t v18;
  unint64_t v19;
  size_t v20;
  char *v21;
  FILE *v22;
  size_t v23;
  size_t v24;
  const void *v25;
  FILE *v26;
  uint64_t v27;
  size_t v28;
  unint64_t v29;
  unint64_t v30;
  size_t v31;
  char *v32;
  uint64_t v33;
  size_t v34;
  size_t v35;
  unint64_t v36;
  size_t v37;
  char *v38;
  uint64_t __ptr;

  qword_253E9A2D0 = (uint64_t)malloc_type_malloc(0x186A0uLL, 0x2EAA327BuLL);
  vl_printf("%s", "struct vl_t");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "  ", "vl_par_t", "par");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "    ", "vl_par_kpt_t", "kpt");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %u\n", "      ", "vl_kpts_detect_method_t", "detect_method", *(_DWORD *)a1);
  vl_printf("%s%s %s = %u\n", "      ", "vl_kpts_desc_method_t", "desc_method", *(_DWORD *)(a1 + 4));
  vl_printf("%s%s %s =", "      ", "vl_par_kpt_ocv_sift_t", "par_sift");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_octaves", *(_DWORD *)(a1 + 8));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_octaves_layers", *(_DWORD *)(a1 + 12));
  vl_printf("%s%s %s = %d\n", "        ", "int", "upscale", *(_DWORD *)(a1 + 16));
  vl_printf("%s%s %s = %f\n", "        ", "float", "contrast_threshold", *(float *)(a1 + 20));
  vl_printf("%s%s %s = %f\n", "        ", "float", "edge_threshold", *(float *)(a1 + 24));
  vl_printf("%s%s %s = %f\n", "        ", "float", "sigma", *(float *)(a1 + 28));
  vl_printf("%s%s %s = %d\n", "        ", "int", "max_n_kpts", *(_DWORD *)(a1 + 32));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_dog_par_t", "par_dog");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "        ", "float", "sigma", *(float *)(a1 + 36));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_octave_layers", *(_DWORD *)(a1 + 40));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_octaves", *(_DWORD *)(a1 + 44));
  vl_printf("%s%s %s = %d\n", "        ", "int", "upscale", *(_DWORD *)(a1 + 48));
  vl_printf("%s%s %s = %f\n", "        ", "float", "contrast_threshold", *(float *)(a1 + 52));
  vl_printf("%s%s %s = %d\n", "        ", "int", "edge_threshold", *(_DWORD *)(a1 + 56));
  vl_printf("%s%s %s = %f\n", "        ", "float", "radius_init", *(float *)(a1 + 60));
  vl_printf("%s%s %s = %d\n", "        ", "int", "image_boundary", *(_DWORD *)(a1 + 64));
  vl_printf("%s%s %s = %f\n", "        ", "float", "orientation_radius", *(float *)(a1 + 68));
  vl_printf("%s%s %s = %f\n", "        ", "float", "orientation_weight", *(float *)(a1 + 72));
  vl_printf("%s%s %s = %d\n", "        ", "int", "orientation_nbins", *(_DWORD *)(a1 + 76));
  vl_printf("%s%s %s = %f\n", "        ", "float", "orientation_threshold", *(float *)(a1 + 80));
  vl_printf("%s%s %s = %d\n", "        ", "int", "max_kpts_octave", *(_DWORD *)(a1 + 84));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_par_kpt_lbl_t", "lbl_par");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "        ", "int", "lbl_version", *(_DWORD *)(a1 + 88));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_kpts", *(_DWORD *)(a1 + 92));
  vl_printf("%s%s %s = %d\n", "        ", "int", "nms_radius", *(_DWORD *)(a1 + 96));
  vl_printf("%s%s %s = %f\n", "        ", "float", "det_thr", *(float *)(a1 + 100));
  vl_printf("%s%s %s = %d\n", "        ", "int", "scaled_width", *(_DWORD *)(a1 + 104));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s = %f\n", "      ", "float", "lbl_filter_dist", *(float *)(a1 + 108));
  vl_printf("%s%s %s = %f\n", "      ", "float", "lbl_filter_ddist", *(float *)(a1 + 112));
  vl_printf("%s%s %s = %d\n", "      ", "int", "run_simplified", *(_DWORD *)(a1 + 116));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_par_map_t", "map");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "      ", "float", "rebuild_dist_thr", *(float *)(a1 + 120));
  vl_printf("%s%s %s = %f\n", "      ", "float", "validate_dist_thr", *(float *)(a1 + 124));
  vl_printf("%s%s %s = %d\n", "      ", "int", "load_ddir", *(_DWORD *)(a1 + 128));
  vl_printf("%s%s %s =", "      ", "struct (unnamed)", "quantize");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "        ", "int", "flg", *(_DWORD *)(a1 + 132));
  vl_printf("%s%s %s = %f\n", "        ", "float", "mn", *(float *)(a1 + 136));
  vl_printf("%s%s %s = %f\n", "        ", "float", "mx", *(float *)(a1 + 140));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s = %d\n", "      ", "int", "level", *(_DWORD *)(a1 + 144));
  vl_printf("%s%s %s = %d\n", "      ", "int", "data_version", *(_DWORD *)(a1 + 148));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_par_match_t", "match");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %u\n", "      ", "vl_match_method_t", "method", *(_DWORD *)(a1 + 152));
  vl_printf("%s%s %s =", "      ", "vl_par_match_sss_t", "par_sss");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "        ", "int", "ver", *(_DWORD *)(a1 + 156));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s = %f\n", "      ", "float", "post_filter_radius", *(float *)(a1 + 160));
  vl_printf("%s%s %s = %d\n", "      ", "int", "knn_prior", *(_DWORD *)(a1 + 164));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_par_retrieval_t", "retrieval");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "      ", "int", "enabled", *(_DWORD *)(a1 + 168));
  vl_printf("%s%s %s = %d\n", "      ", "int", "topk", *(_DWORD *)(a1 + 172));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_par_pose_t", "pose");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %u\n", "      ", "vl_pose_method_t", "method", *(_DWORD *)(a1 + 176));
  vl_printf("%s%s %s =", "      ", "vl_par_pose_ransac_t", "ransac");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_iter", *(_DWORD *)(a1 + 180));
  vl_printf("%s%s %s = %f\n", "        ", "float", "reproj_th", *(float *)(a1 + 184));
  vl_printf("%s%s %s = %f\n", "        ", "float", "lowe_th", *(float *)(a1 + 188));
  vl_printf("%s%s %s = %f\n", "        ", "float", "lowe_lt_th", *(float *)(a1 + 192));
  vl_printf("%s%s %s = %d\n", "        ", "int", "min_inlier", *(_DWORD *)(a1 + 196));
  vl_printf("%s%s %s = %f\n", "        ", "float", "p_th", *(float *)(a1 + 200));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_sol_refine", *(_DWORD *)(a1 + 204));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_model", *(_DWORD *)(a1 + 208));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_model_brute", *(_DWORD *)(a1 + 212));
  vl_printf("%s%s %s = %d\n", "        ", "int", "step_brute", *(_DWORD *)(a1 + 216));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_test_sub", *(_DWORD *)(a1 + 220));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_test", *(_DWORD *)(a1 + 224));
  vl_printf("%s%s %s = %f\n", "        ", "float", "s_test_sub", *(float *)(a1 + 228));
  vl_printf("%s%s %s = %d\n", "        ", "int", "lowe_prio", *(_DWORD *)(a1 + 232));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_par_pose_score_t", "score");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "        ", "int", "use_vote_prio", *(_DWORD *)(a1 + 236));
  vl_printf("%s%s %s = %f\n", "        ", "float", "split_comp", *(float *)(a1 + 240));
  vl_printf("%s%s %s = %f\n", "        ", "float", "refine_comp", *(float *)(a1 + 244));
  vl_printf("%s%s %s = %f\n", "        ", "float", "max_time_ms", *(float *)(a1 + 248));
  vl_printf("%s%s %s = %f\n", "        ", "float", "cell_size_xy", *(float *)(a1 + 252));
  vl_printf("%s%s %s = %f\n", "        ", "float", "cell_size_z", *(float *)(a1 + 256));
  vl_printf("%s%s %s = %f\n", "        ", "float", "lowe_th", *(float *)(a1 + 260));
  vl_printf("%s%s %s = %d\n", "        ", "int", "nn", *(_DWORD *)(a1 + 264));
  vl_printf("%s%s %s = %f\n", "        ", "float", "height_th", *(float *)(a1 + 268));
  vl_printf("%s%s %s = %f\n", "        ", "float", "size_th", *(float *)(a1 + 272));
  vl_printf("%s%s %s = %f\n", "        ", "float", "ori_th", *(float *)(a1 + 276));
  vl_printf("%s%s %s = %f\n", "        ", "float", "view_angle_th", *(float *)(a1 + 280));
  vl_printf("%s%s %s = %d\n", "        ", "int", "debug_print_level", *(_DWORD *)(a1 + 284));
  vl_printf("%s%s %s = %d\n", "        ", "int", "refine", *(_DWORD *)(a1 + 288));
  vl_printf("%s%s %s = %d\n", "        ", "int", "use_learned_confidence", *(_DWORD *)(a1 + 292));
  vl_printf("%s%s %s = %f\n", "        ", "float", "human_offset", *(float *)(a1 + 296));
  vl_printf("%s%s %s = %d\n", "        ", "int", "use_ori_prior", *(_DWORD *)(a1 + 300));
  vl_printf("%s%s %s = %d\n", "        ", "int", "multi_img", *(_DWORD *)(a1 + 304));
  vl_printf("%s%s %s = %f\n", "        ", "float", "ori_sigma_fac", *(float *)(a1 + 308));
  vl_printf("%s%s %s = %d\n", "        ", "int", "early_out_th", *(_DWORD *)(a1 + 312));
  vl_printf("%s%s %s = %d\n", "        ", "int", "max_hyps", *(_DWORD *)(a1 + 316));
  vl_printf("%s%s %s = *%p\n", "        ", "float[8]", "region_r", (const void *)(a1 + 320));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_regions", *(_DWORD *)(a1 + 352));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_split_steps", *(_DWORD *)(a1 + 356));
  vl_printf("%s%s %s = %d\n", "        ", "int", "cell_split_factor_xy", *(_DWORD *)(a1 + 360));
  vl_printf("%s%s %s = %d\n", "        ", "int", "cell_split_factor_z", *(_DWORD *)(a1 + 364));
  vl_printf("%s%s %s = %f\n", "        ", "float", "matches_lim", *(float *)(a1 + 368));
  vl_printf("%s%s %s = %f\n", "        ", "float", "grav_uncertainty", *(float *)(a1 + 372));
  vl_printf("%s%s %s = %f\n", "        ", "float", "grav_thr", *(float *)(a1 + 376));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_iter", *(_DWORD *)(a1 + 380));
  vl_printf("%s%s %s = %f\n", "        ", "float", "inlier_thr", *(float *)(a1 + 384));
  vl_printf("%s%s %s = %d\n", "        ", "int", "min_inliers", *(_DWORD *)(a1 + 388));
  vl_printf("%s%s %s = %d\n", "        ", "int", "use_pose_refine", *(_DWORD *)(a1 + 392));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_par_pose_g_ps_par_t", "g_ps");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "        ", "g_ps_par_t", "g_ps_par");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "          ", "float", "thr", *(float *)(a1 + 400));
  vl_printf("%s%s %s = %f\n", "          ", "float", "res_xy", *(float *)(a1 + 404));
  vl_printf("%s%s %s = %f\n", "          ", "float", "res_z", *(float *)(a1 + 408));
  vl_printf("%s%s %s = %d\n", "          ", "int", "n_lev_refine", *(_DWORD *)(a1 + 412));
  vl_printf("%s%s %s = %d\n", "          ", "int", "n_keep_refine", *(_DWORD *)(a1 + 416));
  vl_printf("%s%s %s = %d\n", "          ", "int", "n_min_refine", *(_DWORD *)(a1 + 420));
  vl_printf("%s%s %s = %d\n", "          ", "int", "n_ang", *(_DWORD *)(a1 + 424));
  vl_printf("%s%s %s = %f\n", "          ", "float", "unc_gv", *(float *)(a1 + 428));
  vl_printf("%s%s %s = %f\n", "          ", "float", "thr_gv", *(float *)(a1 + 432));
  vl_printf("%s%s %s = %f\n", "          ", "float", "min_score", *(float *)(a1 + 436));
  vl_printf("%s%s %s = %f\n", "          ", "float", "sat_score", *(float *)(a1 + 440));
  vl_printf("%s%s %s = %f\n", "          ", "float", "thr_sim_xyz_peak", *(float *)(a1 + 444));
  vl_printf("%s%s %s = %f\n", "          ", "float", "thr_sim_ang_peak", *(float *)(a1 + 448));
  vl_printf("%s%s %s = %d\n", "          ", "int", "n_peaks", *(_DWORD *)(a1 + 452));
  vl_printf("%s%s %s = %zu\n", "          ", "size_t", "mem_usage", *(_QWORD *)(a1 + 456));
  vl_printf("%s%s %s =", "          ", "g_pos3f_t", "gt");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "            ", "float", "x", *(float *)(a1 + 464));
  vl_printf("%s%s %s = %f\n", "            ", "float", "y", *(float *)(a1 + 468));
  vl_printf("%s%s %s = %f\n", "            ", "float", "z", *(float *)(a1 + 472));
  vl_printf("%s}\n", "          ");
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s = %f\n", "        ", "float", "mw_t_lowe", *(float *)(a1 + 480));
  vl_printf("%s%s %s = %f\n", "        ", "float", "mw_a", *(float *)(a1 + 484));
  vl_printf("%s%s %s = %f\n", "        ", "float", "mw_b", *(float *)(a1 + 488));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_par_pose_csl_t", "csl");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "        ", "int", "save_data", *(_DWORD *)(a1 + 496));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s = %u\n", "      ", "vl_img_gv_source_t", "gv_src", *(_DWORD *)(a1 + 500));
  vl_printf("%s%s %s = %f\n", "      ", "float", "inlier_thr", *(float *)(a1 + 504));
  vl_printf("%s%s %s = %f\n", "      ", "float", "gps_bin_err_quantile", *(float *)(a1 + 508));
  vl_printf("%s%s %s = %f\n", "      ", "float", "gps_sigma_fac", *(float *)(a1 + 512));
  vl_printf("%s%s %s = %f\n", "      ", "float", "heading_sigma_fac", *(float *)(a1 + 516));
  vl_printf("%s%s %s =", "      ", "struct (unnamed)", "refine");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %u\n", "        ", "enum (unnamed)", "type", *(_DWORD *)(a1 + 520));
  vl_printf("%s%s %s = %f\n", "        ", "float", "sdev_im", *(float *)(a1 + 524));
  vl_printf("%s%s %s = %f\n", "        ", "float", "sdev_vio", *(float *)(a1 + 528));
  vl_printf("%s%s %s = %f\n", "        ", "float", "sdev_3dp", *(float *)(a1 + 532));
  vl_printf("%s%s %s = %f\n", "        ", "float", "sdev_inv_depth", *(float *)(a1 + 536));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_iter_lm", *(_DWORD *)(a1 + 540));
  vl_printf("%s%s %s = %f\n", "        ", "float", "irefine_ratio_thr", *(float *)(a1 + 544));
  vl_printf("%s%s %s = %d\n", "        ", "int", "irefine_n_iter", *(_DWORD *)(a1 + 548));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "struct (unnamed)", "fuse");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "        ", "int", "enable", *(_DWORD *)(a1 + 552));
  vl_printf("%s%s %s = %d\n", "        ", "int", "max_im", *(_DWORD *)(a1 + 556));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "struct (unnamed)", "referee");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "        ", "int", "enable", *(_DWORD *)(a1 + 560));
  vl_printf("%s%s %s = %d\n", "        ", "int", "version", *(_DWORD *)(a1 + 564));
  vl_printf("%s%s %s = %d\n", "        ", "int", "write_tfrecords", *(_DWORD *)(a1 + 568));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "struct (unnamed)", "locability");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "        ", "int", "enable", *(_DWORD *)(a1 + 572));
  vl_printf("%s%s %s = %d\n", "        ", "int", "version", *(_DWORD *)(a1 + 576));
  vl_printf("%s%s %s = %d\n", "        ", "int", "write_tfrecords", *(_DWORD *)(a1 + 580));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s = %f\n", "      ", "float", "gps_min_uncertainty", *(float *)(a1 + 584));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_par_pose_verify_t", "post_verify");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "      ", "int", "use_inlier_rejection", *(_DWORD *)(a1 + 592));
  vl_printf("%s%s %s = %d\n", "      ", "int", "use_height_rejection", *(_DWORD *)(a1 + 596));
  vl_printf("%s%s %s = %d\n", "      ", "int", "use_gravity_rejection", *(_DWORD *)(a1 + 600));
  vl_printf("%s%s %s = %d\n", "      ", "int", "use_gps_rejection", *(_DWORD *)(a1 + 604));
  vl_printf("%s%s %s = %d\n", "      ", "int", "use_heading_rejection", *(_DWORD *)(a1 + 608));
  vl_printf("%s%s %s = %d\n", "      ", "int", "inlier_thr", *(_DWORD *)(a1 + 612));
  vl_printf("%s%s %s = %f\n", "      ", "float", "max_height", *(float *)(a1 + 616));
  vl_printf("%s%s %s = %f\n", "      ", "float", "min_height", *(float *)(a1 + 620));
  vl_printf("%s%s %s = %f\n", "      ", "double", "gv_angle_thr", *(double *)(a1 + 624));
  vl_printf("%s%s %s = %f\n", "      ", "float", "gps_uncertainty_coeff", *(float *)(a1 + 632));
  vl_printf("%s%s %s = %f\n", "      ", "float", "heading_accuracy_coeff", *(float *)(a1 + 636));
  vl_printf("%s%s %s = %f\n", "      ", "float", "conf_threshold", *(float *)(a1 + 640));
  vl_printf("%s%s %s = %f\n", "      ", "float", "sdev_threshold", *(float *)(a1 + 644));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_par_tracker_t", "tracker");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "      ", "int", "enable", *(_DWORD *)(a1 + 648));
  vl_printf("%s%s %s = %d\n", "      ", "int", "size", *(_DWORD *)(a1 + 652));
  vl_printf("%s%s %s = %d\n", "      ", "int", "force", *(_DWORD *)(a1 + 656));
  vl_printf("%s%s %s = %d\n", "      ", "int", "max_tracks", *(_DWORD *)(a1 + 660));
  vl_printf("%s%s %s = %d\n", "      ", "int", "bin_size", *(_DWORD *)(a1 + 664));
  vl_printf("%s%s %s =", "      ", "slam_tracker_vo_par_t", "vo_par");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_cam_max", *(_DWORD *)(a1 + 672));
  vl_printf("%s%s %s = %f\n", "        ", "double", "ortho_every_s", *(double *)(a1 + 680));
  vl_printf("%s%s %s = %d\n", "        ", "int", "desc_dim", *(_DWORD *)(a1 + 688));
  vl_printf("%s%s %s = %d\n", "        ", "int", "md_desc", *(_DWORD *)(a1 + 692));
  vl_printf("%s%s %s = %f\n", "        ", "float", "r0", *(float *)(a1 + 696));
  vl_printf("%s%s %s = %f\n", "        ", "float", "r1", *(float *)(a1 + 700));
  vl_printf("%s%s %s = %f\n", "        ", "float", "r0s", *(float *)(a1 + 704));
  vl_printf("%s%s %s = %f\n", "        ", "float", "md_im_search", *(float *)(a1 + 708));
  vl_printf("%s%s %s = %f\n", "        ", "float", "md_im_bundle", *(float *)(a1 + 712));
  vl_printf("%s%s %s = %f\n", "        ", "float", "lowe_cam", *(float *)(a1 + 716));
  vl_printf("%s%s %s = %f\n", "        ", "float", "lowe_map", *(float *)(a1 + 720));
  vl_printf("%s%s %s =", "        ", "struct (unnamed)", "spawn");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "          ", "int", "iter", *(_DWORD *)(a1 + 724));
  vl_printf("%s%s %s = %f\n", "          ", "float", "depth_eps", *(float *)(a1 + 728));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "g_pos6f_t", "velocity_max");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "          ", "float", "x", *(float *)(a1 + 732));
  vl_printf("%s%s %s = %f\n", "          ", "float", "y", *(float *)(a1 + 736));
  vl_printf("%s%s %s = %f\n", "          ", "float", "z", *(float *)(a1 + 740));
  vl_printf("%s%s %s = %f\n", "          ", "float", "yaw", *(float *)(a1 + 744));
  vl_printf("%s%s %s = %f\n", "          ", "float", "pitch", *(float *)(a1 + 748));
  vl_printf("%s%s %s = %f\n", "          ", "float", "roll", *(float *)(a1 + 752));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "struct (unnamed)", "subpix");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "          ", "int", "on", *(_DWORD *)(a1 + 756));
  vl_printf("%s%s %s = %d\n", "          ", "int", "patch_width", *(_DWORD *)(a1 + 760));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s = %d\n", "        ", "int", "always_use_vo_prediction", *(_DWORD *)(a1 + 764));
  vl_printf("%s%s %s = %d\n", "        ", "int", "predict_const_ang_velocity", *(_DWORD *)(a1 + 768));
  vl_printf("%s%s %s = %d\n", "        ", "int", "predict_prior_scale", *(_DWORD *)(a1 + 772));
  vl_printf("%s%s %s =", "        ", "g_pos6f_t", "predict_velocity_dampening");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "          ", "float", "x", *(float *)(a1 + 776));
  vl_printf("%s%s %s = %f\n", "          ", "float", "y", *(float *)(a1 + 780));
  vl_printf("%s%s %s = %f\n", "          ", "float", "z", *(float *)(a1 + 784));
  vl_printf("%s%s %s = %f\n", "          ", "float", "yaw", *(float *)(a1 + 788));
  vl_printf("%s%s %s = %f\n", "          ", "float", "pitch", *(float *)(a1 + 792));
  vl_printf("%s%s %s = %f\n", "          ", "float", "roll", *(float *)(a1 + 796));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "struct (unnamed)", "bundle");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "          ", "int", "big_iter", *(_DWORD *)(a1 + 800));
  vl_printf("%s%s %s = %u\n", "          ", "enum (unnamed)", "priors", *(_DWORD *)(a1 + 804));
  vl_printf("%s%s %s = %d\n", "          ", "int", "skip_prior_vo_pred", *(_DWORD *)(a1 + 808));
  vl_printf("%s%s %s = %d\n", "          ", "int", "n_cam_opt", *(_DWORD *)(a1 + 812));
  vl_printf("%s%s %s = %d\n", "          ", "int", "max_iter", *(_DWORD *)(a1 + 816));
  vl_printf("%s%s %s = %d\n", "          ", "int", "max_retries", *(_DWORD *)(a1 + 820));
  vl_printf("%s%s %s = %f\n", "          ", "float", "lm_damping", *(float *)(a1 + 824));
  vl_printf("%s%s %s = %f\n", "          ", "float", "thr_tracks", *(float *)(a1 + 828));
  vl_printf("%s%s %s = %f\n", "          ", "float", "sdev_uv", *(float *)(a1 + 832));
  vl_printf("%s%s %s = %f\n", "          ", "float", "sdev_abs_ang", *(float *)(a1 + 836));
  vl_printf("%s%s %s = %f\n", "          ", "float", "sdev_abs_xyz", *(float *)(a1 + 840));
  vl_printf("%s%s %s =", "          ", "g_pos6f_t", "sdev_rel");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "            ", "float", "x", *(float *)(a1 + 844));
  vl_printf("%s%s %s = %f\n", "            ", "float", "y", *(float *)(a1 + 848));
  vl_printf("%s%s %s = %f\n", "            ", "float", "z", *(float *)(a1 + 852));
  vl_printf("%s%s %s = %f\n", "            ", "float", "yaw", *(float *)(a1 + 856));
  vl_printf("%s%s %s = %f\n", "            ", "float", "pitch", *(float *)(a1 + 860));
  vl_printf("%s%s %s = %f\n", "            ", "float", "roll", *(float *)(a1 + 864));
  vl_printf("%s}\n", "          ");
  vl_printf("%s%s %s =", "          ", "g_pos3f_t", "sdev_smacc");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "            ", "float", "x", *(float *)(a1 + 868));
  vl_printf("%s%s %s = %f\n", "            ", "float", "y", *(float *)(a1 + 872));
  vl_printf("%s%s %s = %f\n", "            ", "float", "z", *(float *)(a1 + 876));
  vl_printf("%s}\n", "          ");
  vl_printf("%s%s %s =", "          ", "g_pos6f_t", "sdev_rel_stop");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "            ", "float", "x", *(float *)(a1 + 880));
  vl_printf("%s%s %s = %f\n", "            ", "float", "y", *(float *)(a1 + 884));
  vl_printf("%s%s %s = %f\n", "            ", "float", "z", *(float *)(a1 + 888));
  vl_printf("%s%s %s = %f\n", "            ", "float", "yaw", *(float *)(a1 + 892));
  vl_printf("%s%s %s = %f\n", "            ", "float", "pitch", *(float *)(a1 + 896));
  vl_printf("%s%s %s = %f\n", "            ", "float", "roll", *(float *)(a1 + 900));
  vl_printf("%s}\n", "          ");
  vl_printf("%s%s %s = %f\n", "          ", "float", "sdev_dist", *(float *)(a1 + 904));
  vl_printf("%s%s %s = %f\n", "          ", "float", "sdev_w0", *(float *)(a1 + 908));
  vl_printf("%s%s %s = %d\n", "          ", "int", "delta_t_rel", *(_DWORD *)(a1 + 912));
  vl_printf("%s%s %s = %d\n", "          ", "int", "min_started", *(_DWORD *)(a1 + 916));
  vl_printf("%s%s %s =", "          ", "g_pos3f_t", "sdev_fm");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "            ", "float", "x", *(float *)(a1 + 920));
  vl_printf("%s%s %s = %f\n", "            ", "float", "y", *(float *)(a1 + 924));
  vl_printf("%s%s %s = %f\n", "            ", "float", "z", *(float *)(a1 + 928));
  vl_printf("%s}\n", "          ");
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s = %d\n", "        ", "int", "min_tracks_length", *(_DWORD *)(a1 + 932));
  vl_printf("%s%s %s = %f\n", "        ", "float", "stind_thr", *(float *)(a1 + 936));
  vl_printf("%s%s %s = %f\n", "        ", "float", "stind_thr_low", *(float *)(a1 + 940));
  vl_printf("%s%s %s =", "        ", "g_vec4f_t", "stind_classifier");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "          ", "float", "x", *(float *)(a1 + 944));
  vl_printf("%s%s %s = %f\n", "          ", "float", "y", *(float *)(a1 + 948));
  vl_printf("%s%s %s = %f\n", "          ", "float", "z", *(float *)(a1 + 952));
  vl_printf("%s%s %s = %f\n", "          ", "float", "w", *(float *)(a1 + 956));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s = %f\n", "        ", "float", "fail_match_thr", *(float *)(a1 + 960));
  vl_printf("%s%s %s = %f\n", "        ", "float", "smap_sdev_mult", *(float *)(a1 + 964));
  vl_printf("%s%s %s = %d\n", "        ", "int", "relpose_idx", *(_DWORD *)(a1 + 968));
  vl_printf("%s%s %s = %d\n", "        ", "int", "benchmark", *(_DWORD *)(a1 + 972));
  vl_printf("%s}\n", "      ");
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_par_history_t", "history");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "      ", "int", "enable", *(_DWORD *)(a1 + 976));
  vl_printf("%s%s %s = %d\n", "      ", "int", "max_frames", *(_DWORD *)(a1 + 980));
  vl_printf("%s%s %s = %d\n", "      ", "int", "sparsify_thr", *(_DWORD *)(a1 + 984));
  vl_printf("%s%s %s = %d\n", "      ", "int", "stats_max_frames", *(_DWORD *)(a1 + 988));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_par_expt_t", "expt");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "      ", "int", "downsample", *(_DWORD *)(a1 + 992));
  vl_printf("%s%s %s = %d\n", "      ", "int", "upsample", *(_DWORD *)(a1 + 996));
  vl_printf("%s%s %s = %d\n", "      ", "int", "rescale_width", *(_DWORD *)(a1 + 1000));
  vl_printf("%s%s %s = %d\n", "      ", "int", "rescale_height", *(_DWORD *)(a1 + 1004));
  vl_printf("%s}\n", "    ");
  vl_printf("%s}\n", "  ");
  vl_printf("%s%s %s = %d\n", "  ", "int", "ver", *(_DWORD *)(a1 + 1008));
  vl_printf("%s%s %s = %p\n", "  ", "vl_map_t *", "map", *(const void **)(a1 + 1016));
  vl_printf("%s%s %s =", "  ", "vl_img_t", "img");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "    ", "p_image", "img");
  vl_printf(" {\n");
  vl_printf("%s%s %s = \"%.32s\"\n", "      ", "unsigned char *", "mem", *(const char **)(a1 + 1024));
  vl_printf("%s%s %s = %d\n", "      ", "int", "x_size", *(_DWORD *)(a1 + 1032));
  vl_printf("%s%s %s = %d\n", "      ", "int", "y_size", *(_DWORD *)(a1 + 1036));
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "pitch", *(_QWORD *)(a1 + 1040));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "g_proj2_t", "proj");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "      ", "int", "type", *(_DWORD *)(a1 + 1048));
  vl_printf("%s%s %s = %f\n", "      ", "double", "foc_s", *(double *)(a1 + 1056));
  vl_printf("%s%s %s = %f\n", "      ", "double", "foc_h", *(double *)(a1 + 1064));
  vl_printf("%s%s %s = %f\n", "      ", "double", "fov_s", *(double *)(a1 + 1072));
  vl_printf("%s%s %s = %f\n", "      ", "double", "fov_h", *(double *)(a1 + 1080));
  vl_printf("%s%s %s = %f\n", "      ", "double", "cx", *(double *)(a1 + 1088));
  vl_printf("%s%s %s = %f\n", "      ", "double", "cy", *(double *)(a1 + 1096));
  vl_printf("%s%s %s = %f\n", "      ", "double", "lx", *(double *)(a1 + 1104));
  vl_printf("%s%s %s = %f\n", "      ", "double", "ly", *(double *)(a1 + 1112));
  vl_printf("%s%s %s =", "      ", "g_lens_t", "lens");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "        ", "g_lens_k4_t", "k4");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "          ", "double", "k2", *(double *)(a1 + 1120));
  vl_printf("%s%s %s = %f\n", "          ", "double", "k3", *(double *)(a1 + 1128));
  vl_printf("%s%s %s = %f\n", "          ", "double", "k4", *(double *)(a1 + 1136));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "g_lens_kannala_t", "kannala");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "          ", "double", "k2", *(double *)(a1 + 1120));
  vl_printf("%s%s %s = %f\n", "          ", "double", "k4", *(double *)(a1 + 1128));
  vl_printf("%s%s %s = %f\n", "          ", "double", "k6", *(double *)(a1 + 1136));
  vl_printf("%s%s %s = %f\n", "          ", "double", "k8", *(double *)(a1 + 1144));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "g_lens_opencv_t", "opencv");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "          ", "double", "k2", *(double *)(a1 + 1120));
  vl_printf("%s%s %s = %f\n", "          ", "double", "k6", *(double *)(a1 + 1128));
  vl_printf("%s%s %s = %f\n", "          ", "double", "k4", *(double *)(a1 + 1136));
  vl_printf("%s%s %s = %f\n", "          ", "double", "p1", *(double *)(a1 + 1144));
  vl_printf("%s%s %s = %f\n", "          ", "double", "p2", *(double *)(a1 + 1152));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "g_lens_bspline_t", "bsp");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "          ", "double[12]", "k", (const void *)(a1 + 1120));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "g_lens_lseg_t", "lseg");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "          ", "double[12]", "k", (const void *)(a1 + 1120));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "g_lens_k14_t", "k14");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "          ", "double[7]", "k", (const void *)(a1 + 1120));
  vl_printf("%s}\n", "        ");
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s = %d\n", "      ", "int", "xs", *(_DWORD *)(a1 + 1216));
  vl_printf("%s%s %s = %d\n", "      ", "int", "ys", *(_DWORD *)(a1 + 1220));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "g_pos3_t", "pos_init");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "      ", "double", "x", *(double *)(a1 + 1224));
  vl_printf("%s%s %s = %f\n", "      ", "double", "y", *(double *)(a1 + 1232));
  vl_printf("%s%s %s = %f\n", "      ", "double", "z", *(double *)(a1 + 1240));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s = %f\n", "    ", "float", "gps_uncertainty", *(float *)(a1 + 1248));
  vl_printf("%s%s %s = %f\n", "    ", "float", "search_radius", *(float *)(a1 + 1252));
  vl_printf("%s%s %s =", "    ", "g_pos3f_t", "gv");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "      ", "float", "x", *(float *)(a1 + 1256));
  vl_printf("%s%s %s = %f\n", "      ", "float", "y", *(float *)(a1 + 1260));
  vl_printf("%s%s %s = %f\n", "      ", "float", "z", *(float *)(a1 + 1264));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s = %f\n", "    ", "float", "true_heading", *(float *)(a1 + 1268));
  vl_printf("%s%s %s = %f\n", "    ", "float", "heading_accuracy", *(float *)(a1 + 1272));
  vl_printf("%s%s %s = %f\n", "    ", "float", "search_angle", *(float *)(a1 + 1276));
  vl_printf("%s%s %s =", "    ", "g_coordsf_t", "vio_pose");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "      ", "float[3][3]", "R", (const void *)(a1 + 1280));
  vl_printf("%s%s %s = *%p\n", "      ", "float[3]", "t", (const void *)(a1 + 1316));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "g_coords_t", "pose_init");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "      ", "double[3][3]", "R", (const void *)(a1 + 1328));
  vl_printf("%s%s %s = *%p\n", "      ", "double[3]", "t", (const void *)(a1 + 1400));
  vl_printf("%s}\n", "    ");
  vl_printf("%s}\n", "  ");
  vl_printf("%s%s %s = *%p\n", "  ", "char[512]", "uuid", (const void *)(a1 + 1424));
  vl_printf("%s%s %s =", "  ", "vl_kpt_list_t", "kpt_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "    ", "int64_t", "n_items", *(_QWORD *)(a1 + 1936));
  vl_printf("%s%s %s = %p\n", "    ", "vl_kpt_t *", "items", *(const void **)(a1 + 1944));
  vl_printf("%s%s %s = %lld\n", "    ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 1952));
  vl_printf("%s%s %s =", "    ", "float_list_t", "global_desc");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items", *(_QWORD *)(a1 + 1960));
  vl_printf("%s%s %s = %p\n", "      ", "float *", "items", *(const void **)(a1 + 1968));
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 1976));
  vl_printf("%s}\n", "    ");
  vl_printf("%s}\n", "  ");
  vl_printf("%s%s %s =", "  ", "vl_kpt3_list_t", "kpt3_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "    ", "int64_t", "n_items", *(_QWORD *)(a1 + 1984));
  vl_printf("%s%s %s = %p\n", "    ", "vl_kpt3_t *", "items", *(const void **)(a1 + 1992));
  vl_printf("%s%s %s = %lld\n", "    ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 2000));
  vl_printf("%s}\n", "  ");
  vl_printf("%s%s %s =", "  ", "vl_matches_t", "matches");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "    ", "int_nn_list_t", "desc_indices");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items", *(_QWORD *)(a1 + 2008));
  vl_printf("%s%s %s = %p\n", "      ", "int_nn_t *", "items", *(const void **)(a1 + 2016));
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 2024));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "float_nn_list_t", "desc_dists");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items", *(_QWORD *)(a1 + 2032));
  vl_printf("%s%s %s = %p\n", "      ", "float_nn_t *", "items", *(const void **)(a1 + 2040));
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 2048));
  vl_printf("%s}\n", "    ");
  vl_printf("%s}\n", "  ");
  vl_printf("%s%s %s =", "  ", "vl_inliers_t", "inliers");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "    ", "g_pos2f_list_t", "pts2d");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items", *(_QWORD *)(a1 + 2056));
  vl_printf("%s%s %s = %p\n", "      ", "g_pos2f_t *", "items", *(const void **)(a1 + 2064));
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 2072));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "g_pos3f_list_t", "pts3d");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items", *(_QWORD *)(a1 + 2080));
  vl_printf("%s%s %s = %p\n", "      ", "g_pos3f_t *", "items", *(const void **)(a1 + 2088));
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 2096));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "int_pair_list_t", "inlier_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items", *(_QWORD *)(a1 + 2104));
  vl_printf("%s%s %s = %p\n", "      ", "int_pair_t *", "items", *(const void **)(a1 + 2112));
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 2120));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s = %d\n", "    ", "int", "n_inliers_gt_pose", *(_DWORD *)(a1 + 2128));
  vl_printf("%s}\n", "  ");
  vl_printf("%s%s %s =", "  ", "vl_context_t", "context");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "    ", "vl_context_locability_t", "locability");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "      ", "vl_timer_t", "timer");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "start_time", (const void *)(a1 + 2136));
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "stop_time", (const void *)(a1 + 2184));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 2232));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "total_time", (const void *)(a1 + 2256));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_measurements", *(_DWORD *)(a1 + 2280));
  vl_printf("%s%s %s = *%p\n", "        ", "char[64]", "name", (const void *)(a1 + 2284));
  vl_printf("%s%s %s = %d\n", "        ", "int", "is_rt_timer", *(_DWORD *)(a1 + 2348));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s = *%p\n", "      ", "char[512]", "framework_id", (const void *)(a1 + 2352));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_context_kpts_t", "kpts");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "      ", "vl_timer_t", "timer_total");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "start_time", (const void *)(a1 + 2864));
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "stop_time", (const void *)(a1 + 2912));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 2960));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "total_time", (const void *)(a1 + 2984));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_measurements", *(_DWORD *)(a1 + 3008));
  vl_printf("%s%s %s = *%p\n", "        ", "char[64]", "name", (const void *)(a1 + 3012));
  vl_printf("%s%s %s = %d\n", "        ", "int", "is_rt_timer", *(_DWORD *)(a1 + 3076));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_timer_t", "timer_pyramid");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "start_time", (const void *)(a1 + 3080));
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "stop_time", (const void *)(a1 + 3128));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 3176));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "total_time", (const void *)(a1 + 3200));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_measurements", *(_DWORD *)(a1 + 3224));
  vl_printf("%s%s %s = *%p\n", "        ", "char[64]", "name", (const void *)(a1 + 3228));
  vl_printf("%s%s %s = %d\n", "        ", "int", "is_rt_timer", *(_DWORD *)(a1 + 3292));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_timer_t", "timer_detector");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "start_time", (const void *)(a1 + 3296));
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "stop_time", (const void *)(a1 + 3344));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 3392));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "total_time", (const void *)(a1 + 3416));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_measurements", *(_DWORD *)(a1 + 3440));
  vl_printf("%s%s %s = *%p\n", "        ", "char[64]", "name", (const void *)(a1 + 3444));
  vl_printf("%s%s %s = %d\n", "        ", "int", "is_rt_timer", *(_DWORD *)(a1 + 3508));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_timer_t", "timer_model");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "start_time", (const void *)(a1 + 3512));
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "stop_time", (const void *)(a1 + 3560));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 3608));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "total_time", (const void *)(a1 + 3632));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_measurements", *(_DWORD *)(a1 + 3656));
  vl_printf("%s%s %s = *%p\n", "        ", "char[64]", "name", (const void *)(a1 + 3660));
  vl_printf("%s%s %s = %d\n", "        ", "int", "is_rt_timer", *(_DWORD *)(a1 + 3724));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_timer_t", "timer_descriptor");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "start_time", (const void *)(a1 + 3728));
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "stop_time", (const void *)(a1 + 3776));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 3824));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "total_time", (const void *)(a1 + 3848));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_measurements", *(_DWORD *)(a1 + 3872));
  vl_printf("%s%s %s = *%p\n", "        ", "char[64]", "name", (const void *)(a1 + 3876));
  vl_printf("%s%s %s = %d\n", "        ", "int", "is_rt_timer", *(_DWORD *)(a1 + 3940));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_timer_t", "timer_pca");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "start_time", (const void *)(a1 + 3944));
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "stop_time", (const void *)(a1 + 3992));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 4040));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "total_time", (const void *)(a1 + 4064));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_measurements", *(_DWORD *)(a1 + 4088));
  vl_printf("%s%s %s = *%p\n", "        ", "char[64]", "name", (const void *)(a1 + 4092));
  vl_printf("%s%s %s = %d\n", "        ", "int", "is_rt_timer", *(_DWORD *)(a1 + 4156));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_dog_octave_list_t", "oct");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(_QWORD *)(a1 + 4160));
  vl_printf("%s%s %s = %p\n", "        ", "vl_dog_octave_t *", "items", *(const void **)(a1 + 4168));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 4176));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_dog_meta_t", "dog_meta");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "        ", "int_pair_list_t", "oct_layers");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items", *(_QWORD *)(a1 + 4184));
  vl_printf("%s%s %s = %p\n", "          ", "int_pair_t *", "items", *(const void **)(a1 + 4192));
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 4200));
  vl_printf("%s}\n", "        ");
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "lbl_desc2d_t", "lbl2d");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "lbl_feature2d_t *[3]", "nets", (const void *)(a1 + 4208));
  vl_printf("%s%s %s = *%p\n", "        ", "char[512]", "framework_identifier", (const void *)(a1 + 4232));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_resolution", *(_DWORD *)(a1 + 4744));
  vl_printf("%s%s %s = %d\n", "        ", "int", "lbl_query_version", *(_DWORD *)(a1 + 4748));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s = %p\n", "      ", "vl_kpts_callback_t", "kpts_callback", *(const void **)(a1 + 4752));
  vl_printf("%s%s %s = %p\n", "      ", "void *", "kpts_callback_context", *(const void **)(a1 + 4760));
  vl_printf("%s%s %s = %d\n", "      ", "int", "n_kpts_export", *(_DWORD *)(a1 + 4768));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_context_map_t", "map");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "      ", "int", "force_rebuild", *(_DWORD *)(a1 + 4776));
  vl_printf("%s%s %s = %d\n", "      ", "int", "status", *(_DWORD *)(a1 + 4780));
  vl_printf("%s%s %s =", "      ", "g_pos3_t", "updated_pos");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "        ", "double", "x", *(double *)(a1 + 4784));
  vl_printf("%s%s %s = %f\n", "        ", "double", "y", *(double *)(a1 + 4792));
  vl_printf("%s%s %s = %f\n", "        ", "double", "z", *(double *)(a1 + 4800));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s = %f\n", "      ", "float", "updated_uncert", *(float *)(a1 + 4808));
  vl_printf("%s%s %s = %p\n", "      ", "vl_map_t *", "updated_map", *(const void **)(a1 + 4816));
  vl_printf("%s%s %s = %d\n", "      ", "int", "is_running", *(_DWORD *)(a1 + 4824));
  vl_printf("%s%s %s = *%p\n", "      ", "char[512]", "track_base_path", (const void *)(a1 + 4828));
  vl_printf("%s%s %s = %p\n", "      ", "void *", "track_callback_context", *(const void **)(a1 + 5344));
  vl_printf("%s%s %s = %p\n", "      ", "vl_track_callback_t", "track_callback", *(const void **)(a1 + 5352));
  vl_printf("%s%s %s = %p\n", "      ", "vl_map_t *", "map", *(const void **)(a1 + 5360));
  vl_printf("%s%s %s =", "      ", "vl_tile_t", "latest_tile");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "        ", "int", "level", *(_DWORD *)(a1 + 5368));
  vl_printf("%s%s %s = %d\n", "        ", "int", "x", *(_DWORD *)(a1 + 5372));
  vl_printf("%s%s %s = %d\n", "        ", "int", "y", *(_DWORD *)(a1 + 5376));
  vl_printf("%s%s %s = %d\n", "        ", "int", "uncertainty", *(_DWORD *)(a1 + 5380));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_gnd_t", "gnd");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "        ", "g_coords_t", "pose");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "          ", "double[3][3]", "R", (const void *)(a1 + 5384));
  vl_printf("%s%s %s = *%p\n", "          ", "double[3]", "t", (const void *)(a1 + 5456));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s = %f\n", "        ", "double", "w", *(double *)(a1 + 5480));
  vl_printf("%s%s %s = %f\n", "        ", "double", "h", *(double *)(a1 + 5488));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s = %p\n", "      ", "void *", "cache_meta", *(const void **)(a1 + 5496));
  vl_printf("%s%s %s = %p\n", "      ", "pthread_t", "build_thread", *(const void **)(a1 + 5504));
  vl_printf("%s%s %s =", "      ", "pthread_rwlock_t", "update_lock");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %ld\n", "        ", "long", "__sig", *(_QWORD *)(a1 + 5512));
  vl_printf("%s%s %s = *%p\n", "        ", "char[192]", "__opaque", (const void *)(a1 + 5520));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "pthread_rwlock_t", "map_lock");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %ld\n", "        ", "long", "__sig", *(_QWORD *)(a1 + 5712));
  vl_printf("%s%s %s = *%p\n", "        ", "char[192]", "__opaque", (const void *)(a1 + 5720));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_timer_t", "timer_load");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "start_time", (const void *)(a1 + 5912));
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "stop_time", (const void *)(a1 + 5960));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 6008));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "total_time", (const void *)(a1 + 6032));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_measurements", *(_DWORD *)(a1 + 6056));
  vl_printf("%s%s %s = *%p\n", "        ", "char[64]", "name", (const void *)(a1 + 6060));
  vl_printf("%s%s %s = %d\n", "        ", "int", "is_rt_timer", *(_DWORD *)(a1 + 6124));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_timer_t", "timer_sss");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "start_time", (const void *)(a1 + 6128));
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "stop_time", (const void *)(a1 + 6176));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 6224));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "total_time", (const void *)(a1 + 6248));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_measurements", *(_DWORD *)(a1 + 6272));
  vl_printf("%s%s %s = *%p\n", "        ", "char[64]", "name", (const void *)(a1 + 6276));
  vl_printf("%s%s %s = %d\n", "        ", "int", "is_rt_timer", *(_DWORD *)(a1 + 6340));
  vl_printf("%s}\n", "      ");
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_context_match_t", "match");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "      ", "vl_timer_t", "timer_total");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "start_time", (const void *)(a1 + 6344));
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "stop_time", (const void *)(a1 + 6392));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 6440));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "total_time", (const void *)(a1 + 6464));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_measurements", *(_DWORD *)(a1 + 6488));
  vl_printf("%s%s %s = *%p\n", "        ", "char[64]", "name", (const void *)(a1 + 6492));
  vl_printf("%s%s %s = %d\n", "        ", "int", "is_rt_timer", *(_DWORD *)(a1 + 6556));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_timer_t", "timer_sss");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "start_time", (const void *)(a1 + 6560));
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "stop_time", (const void *)(a1 + 6608));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 6656));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "total_time", (const void *)(a1 + 6680));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_measurements", *(_DWORD *)(a1 + 6704));
  vl_printf("%s%s %s = *%p\n", "        ", "char[64]", "name", (const void *)(a1 + 6708));
  vl_printf("%s%s %s = %d\n", "        ", "int", "is_rt_timer", *(_DWORD *)(a1 + 6772));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_timer_t", "timer_filter");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "start_time", (const void *)(a1 + 6776));
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "stop_time", (const void *)(a1 + 6824));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 6872));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "total_time", (const void *)(a1 + 6896));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_measurements", *(_DWORD *)(a1 + 6920));
  vl_printf("%s%s %s = *%p\n", "        ", "char[64]", "name", (const void *)(a1 + 6924));
  vl_printf("%s%s %s = %d\n", "        ", "int", "is_rt_timer", *(_DWORD *)(a1 + 6988));
  vl_printf("%s}\n", "      ");
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_context_slam_tracker_t", "slam_tracker");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "      ", "vl_timer_t", "timer");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "start_time", (const void *)(a1 + 6992));
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "stop_time", (const void *)(a1 + 7040));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 7088));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "total_time", (const void *)(a1 + 7112));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_measurements", *(_DWORD *)(a1 + 7136));
  vl_printf("%s%s %s = *%p\n", "        ", "char[64]", "name", (const void *)(a1 + 7140));
  vl_printf("%s%s %s = %d\n", "        ", "int", "is_rt_timer", *(_DWORD *)(a1 + 7204));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_image_meta_list_t", "img_meta_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(_QWORD *)(a1 + 7208));
  vl_printf("%s%s %s = %p\n", "        ", "vl_image_meta_t *", "items", *(const void **)(a1 + 7216));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 7224));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_inliers_list_t", "inliers_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(_QWORD *)(a1 + 7232));
  vl_printf("%s%s %s = %p\n", "        ", "vl_inliers_t *", "items", *(const void **)(a1 + 7240));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 7248));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_tile_list_t", "tile_id_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(_QWORD *)(a1 + 7256));
  vl_printf("%s%s %s = %p\n", "        ", "vl_tile_t *", "items", *(const void **)(a1 + 7264));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 7272));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_gnd_list_t", "gnd_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(_QWORD *)(a1 + 7280));
  vl_printf("%s%s %s = %p\n", "        ", "vl_gnd_t *", "items", *(const void **)(a1 + 7288));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 7296));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_pose_list_t", "pose_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(_QWORD *)(a1 + 7304));
  vl_printf("%s%s %s = %p\n", "        ", "vl_pose_t *", "items", *(const void **)(a1 + 7312));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 7320));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "int_list_t", "status_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(_QWORD *)(a1 + 7328));
  vl_printf("%s%s %s = %p\n", "        ", "int *", "items", *(const void **)(a1 + 7336));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 7344));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s = %d\n", "      ", "int", "n_frame", *(_DWORD *)(a1 + 7352));
  vl_printf("%s%s %s = %d\n", "      ", "int", "n_frame_sub", *(_DWORD *)(a1 + 7356));
  vl_printf("%s%s %s = %d\n", "      ", "int", "keyframe", *(_DWORD *)(a1 + 7360));
  vl_printf("%s%s %s = %d\n", "      ", "int", "localized", *(_DWORD *)(a1 + 7364));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_context_retrieval_t", "retrieval");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "      ", "vl_timer_t", "timer");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "start_time", (const void *)(a1 + 7368));
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "stop_time", (const void *)(a1 + 7416));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 7464));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "total_time", (const void *)(a1 + 7488));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_measurements", *(_DWORD *)(a1 + 7512));
  vl_printf("%s%s %s = *%p\n", "        ", "char[64]", "name", (const void *)(a1 + 7516));
  vl_printf("%s%s %s = %d\n", "        ", "int", "is_rt_timer", *(_DWORD *)(a1 + 7580));
  vl_printf("%s}\n", "      ");
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_context_pose_t", "pose");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "      ", "vl_context_pose_ransac_t", "ransac");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "        ", "g_pos2f_list_t", "pt2_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items", *(_QWORD *)(a1 + 7584));
  vl_printf("%s%s %s = %p\n", "          ", "g_pos2f_t *", "items", *(const void **)(a1 + 7592));
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 7600));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "g_pos3f_list_t", "pt3_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items", *(_QWORD *)(a1 + 7608));
  vl_printf("%s%s %s = %p\n", "          ", "g_pos3f_t *", "items", *(const void **)(a1 + 7616));
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 7624));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "g_pos3f_list_t", "view_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items", *(_QWORD *)(a1 + 7632));
  vl_printf("%s%s %s = %p\n", "          ", "g_pos3f_t *", "items", *(const void **)(a1 + 7640));
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 7648));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "vl_timer_t", "timer");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "          ", "struct timespec[3]", "start_time", (const void *)(a1 + 7656));
  vl_printf("%s%s %s = *%p\n", "          ", "struct timespec[3]", "stop_time", (const void *)(a1 + 7704));
  vl_printf("%s%s %s = *%p\n", "          ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 7752));
  vl_printf("%s%s %s = *%p\n", "          ", "int64_t[3]", "total_time", (const void *)(a1 + 7776));
  vl_printf("%s%s %s = %d\n", "          ", "int", "n_measurements", *(_DWORD *)(a1 + 7800));
  vl_printf("%s%s %s = *%p\n", "          ", "char[64]", "name", (const void *)(a1 + 7804));
  vl_printf("%s%s %s = %d\n", "          ", "int", "is_rt_timer", *(_DWORD *)(a1 + 7868));
  vl_printf("%s}\n", "        ");
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_context_pose_gp2pt_t", "gp2pt");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "        ", "int_list_t", "pt3_indices");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items", *(_QWORD *)(a1 + 7872));
  vl_printf("%s%s %s = %p\n", "          ", "int *", "items", *(const void **)(a1 + 7880));
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 7888));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "vl_kpt_list_t", "kpt_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items", *(_QWORD *)(a1 + 7896));
  vl_printf("%s%s %s = %p\n", "          ", "vl_kpt_t *", "items", *(const void **)(a1 + 7904));
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 7912));
  vl_printf("%s%s %s =", "          ", "float_list_t", "global_desc");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "            ", "int64_t", "n_items", *(_QWORD *)(a1 + 7920));
  vl_printf("%s%s %s = %p\n", "            ", "float *", "items", *(const void **)(a1 + 7928));
  vl_printf("%s%s %s = %lld\n", "            ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 7936));
  vl_printf("%s}\n", "          ");
  vl_printf("%s}\n", "        ");
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_context_pose_score_t", "score");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "        ", "vl_gnd_t", "gnd");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "          ", "g_coords_t", "pose");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "            ", "double[3][3]", "R", (const void *)(a1 + 7944));
  vl_printf("%s%s %s = *%p\n", "            ", "double[3]", "t", (const void *)(a1 + 8016));
  vl_printf("%s}\n", "          ");
  vl_printf("%s%s %s = %f\n", "          ", "double", "w", *(double *)(a1 + 8040));
  vl_printf("%s%s %s = %f\n", "          ", "double", "h", *(double *)(a1 + 8048));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s = %d\n", "        ", "int", "status", *(_DWORD *)(a1 + 8056));
  vl_printf("%s%s %s =", "        ", "vl_ps_timers_t", "timers");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "          ", "vl_timer_t", "filter");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "            ", "struct timespec[3]", "start_time", (const void *)(a1 + 8064));
  vl_printf("%s%s %s = *%p\n", "            ", "struct timespec[3]", "stop_time", (const void *)(a1 + 8112));
  vl_printf("%s%s %s = *%p\n", "            ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 8160));
  vl_printf("%s%s %s = *%p\n", "            ", "int64_t[3]", "total_time", (const void *)(a1 + 8184));
  vl_printf("%s%s %s = %d\n", "            ", "int", "n_measurements", *(_DWORD *)(a1 + 8208));
  vl_printf("%s%s %s = *%p\n", "            ", "char[64]", "name", (const void *)(a1 + 8212));
  vl_printf("%s%s %s = %d\n", "            ", "int", "is_rt_timer", *(_DWORD *)(a1 + 8276));
  vl_printf("%s}\n", "          ");
  vl_printf("%s%s %s =", "          ", "vl_timer_t", "vote");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "            ", "struct timespec[3]", "start_time", (const void *)(a1 + 8280));
  vl_printf("%s%s %s = *%p\n", "            ", "struct timespec[3]", "stop_time", (const void *)(a1 + 8328));
  vl_printf("%s%s %s = *%p\n", "            ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 8376));
  vl_printf("%s%s %s = *%p\n", "            ", "int64_t[3]", "total_time", (const void *)(a1 + 8400));
  vl_printf("%s%s %s = %d\n", "            ", "int", "n_measurements", *(_DWORD *)(a1 + 8424));
  vl_printf("%s%s %s = *%p\n", "            ", "char[64]", "name", (const void *)(a1 + 8428));
  vl_printf("%s%s %s = %d\n", "            ", "int", "is_rt_timer", *(_DWORD *)(a1 + 8492));
  vl_printf("%s}\n", "          ");
  vl_printf("%s%s %s =", "          ", "vl_timer_t", "find_peak");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "            ", "struct timespec[3]", "start_time", (const void *)(a1 + 8496));
  vl_printf("%s%s %s = *%p\n", "            ", "struct timespec[3]", "stop_time", (const void *)(a1 + 8544));
  vl_printf("%s%s %s = *%p\n", "            ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 8592));
  vl_printf("%s%s %s = *%p\n", "            ", "int64_t[3]", "total_time", (const void *)(a1 + 8616));
  vl_printf("%s%s %s = %d\n", "            ", "int", "n_measurements", *(_DWORD *)(a1 + 8640));
  vl_printf("%s%s %s = *%p\n", "            ", "char[64]", "name", (const void *)(a1 + 8644));
  vl_printf("%s%s %s = %d\n", "            ", "int", "is_rt_timer", *(_DWORD *)(a1 + 8708));
  vl_printf("%s}\n", "          ");
  vl_printf("%s%s %s =", "          ", "vl_timer_t", "refine");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "            ", "struct timespec[3]", "start_time", (const void *)(a1 + 8712));
  vl_printf("%s%s %s = *%p\n", "            ", "struct timespec[3]", "stop_time", (const void *)(a1 + 8760));
  vl_printf("%s%s %s = *%p\n", "            ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 8808));
  vl_printf("%s%s %s = *%p\n", "            ", "int64_t[3]", "total_time", (const void *)(a1 + 8832));
  vl_printf("%s%s %s = %d\n", "            ", "int", "n_measurements", *(_DWORD *)(a1 + 8856));
  vl_printf("%s%s %s = *%p\n", "            ", "char[64]", "name", (const void *)(a1 + 8860));
  vl_printf("%s%s %s = %d\n", "            ", "int", "is_rt_timer", *(_DWORD *)(a1 + 8924));
  vl_printf("%s}\n", "          ");
  vl_printf("%s%s %s =", "          ", "vl_timer_t", "other");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "            ", "struct timespec[3]", "start_time", (const void *)(a1 + 8928));
  vl_printf("%s%s %s = *%p\n", "            ", "struct timespec[3]", "stop_time", (const void *)(a1 + 8976));
  vl_printf("%s%s %s = *%p\n", "            ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 9024));
  vl_printf("%s%s %s = *%p\n", "            ", "int64_t[3]", "total_time", (const void *)(a1 + 9048));
  vl_printf("%s%s %s = %d\n", "            ", "int", "n_measurements", *(_DWORD *)(a1 + 9072));
  vl_printf("%s%s %s = *%p\n", "            ", "char[64]", "name", (const void *)(a1 + 9076));
  vl_printf("%s%s %s = %d\n", "            ", "int", "is_rt_timer", *(_DWORD *)(a1 + 9140));
  vl_printf("%s}\n", "          ");
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "vl_timer_t", "timer");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "          ", "struct timespec[3]", "start_time", (const void *)(a1 + 9144));
  vl_printf("%s%s %s = *%p\n", "          ", "struct timespec[3]", "stop_time", (const void *)(a1 + 9192));
  vl_printf("%s%s %s = *%p\n", "          ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 9240));
  vl_printf("%s%s %s = *%p\n", "          ", "int64_t[3]", "total_time", (const void *)(a1 + 9264));
  vl_printf("%s%s %s = %d\n", "          ", "int", "n_measurements", *(_DWORD *)(a1 + 9288));
  vl_printf("%s%s %s = *%p\n", "          ", "char[64]", "name", (const void *)(a1 + 9292));
  vl_printf("%s%s %s = %d\n", "          ", "int", "is_rt_timer", *(_DWORD *)(a1 + 9356));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "vl_memuse_t", "memuse");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "          ", "double", "max", *(double *)(a1 + 9360));
  vl_printf("%s%s %s = %f\n", "          ", "double", "mem_tot", *(double *)(a1 + 9368));
  vl_printf("%s%s %s = %llu\n", "          ", "uint64_t", "n", *(_QWORD *)(a1 + 9376));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "struct (unnamed)", "debug");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "          ", "g_coords_t", "gt_pose");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "            ", "double[3][3]", "R", (const void *)(a1 + 9384));
  vl_printf("%s%s %s = *%p\n", "            ", "double[3]", "t", (const void *)(a1 + 9456));
  vl_printf("%s}\n", "          ");
  vl_printf("%s%s %s = %p\n", "          ", "void *", "args_data", *(const void **)(a1 + 9480));
  vl_printf("%s}\n", "        ");
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_context_pose_refine_t", "refine");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "        ", "vl_timer_t", "timer");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "          ", "struct timespec[3]", "start_time", (const void *)(a1 + 9488));
  vl_printf("%s%s %s = *%p\n", "          ", "struct timespec[3]", "stop_time", (const void *)(a1 + 9536));
  vl_printf("%s%s %s = *%p\n", "          ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 9584));
  vl_printf("%s%s %s = *%p\n", "          ", "int64_t[3]", "total_time", (const void *)(a1 + 9608));
  vl_printf("%s%s %s = %d\n", "          ", "int", "n_measurements", *(_DWORD *)(a1 + 9632));
  vl_printf("%s%s %s = *%p\n", "          ", "char[64]", "name", (const void *)(a1 + 9636));
  vl_printf("%s%s %s = %d\n", "          ", "int", "is_rt_timer", *(_DWORD *)(a1 + 9700));
  vl_printf("%s}\n", "        ");
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_context_pose_referee_t", "referee");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "        ", "vl_timer_t", "timer");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "          ", "struct timespec[3]", "start_time", (const void *)(a1 + 9704));
  vl_printf("%s%s %s = *%p\n", "          ", "struct timespec[3]", "stop_time", (const void *)(a1 + 9752));
  vl_printf("%s%s %s = *%p\n", "          ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 9800));
  vl_printf("%s%s %s = *%p\n", "          ", "int64_t[3]", "total_time", (const void *)(a1 + 9824));
  vl_printf("%s%s %s = %d\n", "          ", "int", "n_measurements", *(_DWORD *)(a1 + 9848));
  vl_printf("%s%s %s = *%p\n", "          ", "char[64]", "name", (const void *)(a1 + 9852));
  vl_printf("%s%s %s = %d\n", "          ", "int", "is_rt_timer", *(_DWORD *)(a1 + 9916));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s = *%p\n", "        ", "char[512]", "framework_id", (const void *)(a1 + 9920));
  vl_printf("%s%s %s =", "        ", "vl_hs_tfrecord_meta_t", "tfrecord_meta");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "          ", "int", "write_to_tfrecord", *(_DWORD *)(a1 + 10432));
  vl_printf("%s%s %s =", "          ", "g_coords_t", "gt_pose");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "            ", "double[3][3]", "R", (const void *)(a1 + 10440));
  vl_printf("%s%s %s = *%p\n", "            ", "double[3]", "t", (const void *)(a1 + 10512));
  vl_printf("%s}\n", "          ");
  vl_printf("%s%s %s = %f\n", "          ", "double", "sample_t", *(double *)(a1 + 10536));
  vl_printf("%s%s %s = *%p\n", "          ", "char[512]", "folder_path", (const void *)(a1 + 10544));
  vl_printf("%s}\n", "        ");
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_context_pose_fuse_t", "fuse");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "        ", "vl_timer_t", "timer");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "          ", "struct timespec[3]", "start_time", (const void *)(a1 + 11056));
  vl_printf("%s%s %s = *%p\n", "          ", "struct timespec[3]", "stop_time", (const void *)(a1 + 11104));
  vl_printf("%s%s %s = *%p\n", "          ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 11152));
  vl_printf("%s%s %s = *%p\n", "          ", "int64_t[3]", "total_time", (const void *)(a1 + 11176));
  vl_printf("%s%s %s = %d\n", "          ", "int", "n_measurements", *(_DWORD *)(a1 + 11200));
  vl_printf("%s%s %s = *%p\n", "          ", "char[64]", "name", (const void *)(a1 + 11204));
  vl_printf("%s%s %s = %d\n", "          ", "int", "is_rt_timer", *(_DWORD *)(a1 + 11268));
  vl_printf("%s}\n", "        ");
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_timer_t", "timer");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "start_time", (const void *)(a1 + 11272));
  vl_printf("%s%s %s = *%p\n", "        ", "struct timespec[3]", "stop_time", (const void *)(a1 + 11320));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 11368));
  vl_printf("%s%s %s = *%p\n", "        ", "int64_t[3]", "total_time", (const void *)(a1 + 11392));
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_measurements", *(_DWORD *)(a1 + 11416));
  vl_printf("%s%s %s = *%p\n", "        ", "char[64]", "name", (const void *)(a1 + 11420));
  vl_printf("%s%s %s = %d\n", "        ", "int", "is_rt_timer", *(_DWORD *)(a1 + 11484));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_ps_hyp_list_t", "hyp_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(_QWORD *)(a1 + 11488));
  vl_printf("%s%s %s = %p\n", "        ", "vl_ps_hyp_t *", "items", *(const void **)(a1 + 11496));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 11504));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "float_list_t", "solver_conf_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(_QWORD *)(a1 + 11512));
  vl_printf("%s%s %s = %p\n", "        ", "float *", "items", *(const void **)(a1 + 11520));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 11528));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "float_list_t", "fused_conf_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(_QWORD *)(a1 + 11536));
  vl_printf("%s%s %s = %p\n", "        ", "float *", "items", *(const void **)(a1 + 11544));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 11552));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s = %p\n", "      ", "vl_pose_fuse_t *", "pf", *(const void **)(a1 + 11560));
  vl_printf("%s%s %s =", "      ", "struct (unnamed)", "debug");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "        ", "g_coords_t", "gt_pose");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "          ", "double[3][3]", "R", (const void *)(a1 + 11568));
  vl_printf("%s%s %s = *%p\n", "          ", "double[3]", "t", (const void *)(a1 + 11640));
  vl_printf("%s}\n", "        ");
  vl_printf("%s}\n", "      ");
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_context_history_t", "history");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "      ", "pthread_mutex_t", "mutex");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %ld\n", "        ", "long", "__sig", *(_QWORD *)(a1 + 11664));
  vl_printf("%s%s %s = *%p\n", "        ", "char[56]", "__opaque", (const void *)(a1 + 11672));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s = %d\n", "      ", "int", "frames_processed", *(_DWORD *)(a1 + 11728));
  vl_printf("%s%s %s = %d\n", "      ", "int", "last_keyframe", *(_DWORD *)(a1 + 11732));
  vl_printf("%s%s %s =", "      ", "vl_context_history_frame_list_t", "frames");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(_QWORD *)(a1 + 11736));
  vl_printf("%s%s %s = %p\n", "        ", "vl_context_history_frame_t *", "items", *(const void **)(a1 + 11744));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 11752));
  vl_printf("%s}\n", "      ");
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_meta_gt_t", "gt");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "      ", "g_coords_t", "pose");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "double[3][3]", "R", (const void *)(a1 + 11760));
  vl_printf("%s%s %s = *%p\n", "        ", "double[3]", "t", (const void *)(a1 + 11832));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s = %d\n", "      ", "int", "cluster_idx", *(_DWORD *)(a1 + 11856));
  vl_printf("%s%s %s = %u\n", "      ", "vl_meta_gt_type_t", "type_flags", *(_DWORD *)(a1 + 11860));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_timer_t", "timer");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "      ", "struct timespec[3]", "start_time", (const void *)(a1 + 11864));
  vl_printf("%s%s %s = *%p\n", "      ", "struct timespec[3]", "stop_time", (const void *)(a1 + 11912));
  vl_printf("%s%s %s = *%p\n", "      ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 11960));
  vl_printf("%s%s %s = *%p\n", "      ", "int64_t[3]", "total_time", (const void *)(a1 + 11984));
  vl_printf("%s%s %s = %d\n", "      ", "int", "n_measurements", *(_DWORD *)(a1 + 12008));
  vl_printf("%s%s %s = *%p\n", "      ", "char[64]", "name", (const void *)(a1 + 12012));
  vl_printf("%s%s %s = %d\n", "      ", "int", "is_rt_timer", *(_DWORD *)(a1 + 12076));
  vl_printf("%s}\n", "    ");
  vl_printf("%s}\n", "  ");
  vl_printf("%s%s %s =", "  ", "vl_dump_t", "dump");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "    ", "int", "recording", *(_DWORD *)(a1 + 12080));
  vl_printf("%s%s %s = %d\n", "    ", "int", "dump_flag", *(_DWORD *)(a1 + 12084));
  vl_printf("%s%s %s = %p\n", "    ", "pthread_t", "dump_thread", *(const void **)(a1 + 12088));
  vl_printf("%s%s %s =", "    ", "struct timespec", "start_time");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %ld\n", "      ", "__darwin_time_t", "tv_sec", *(_QWORD *)(a1 + 12096));
  vl_printf("%s%s %s = %ld\n", "      ", "long", "tv_nsec", *(_QWORD *)(a1 + 12104));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s = %d\n", "    ", "int", "dump_thread_running", *(_DWORD *)(a1 + 12112));
  vl_printf("%s%s %s = *%p\n", "    ", "char[512]", "base_path", (const void *)(a1 + 12116));
  vl_printf("%s%s %s = *%p\n", "    ", "char[512]", "path", (const void *)(a1 + 12628));
  vl_printf("%s%s %s =", "    ", "pthread_mutex_t", "lock");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %ld\n", "      ", "long", "__sig", *(_QWORD *)(a1 + 13144));
  vl_printf("%s%s %s = *%p\n", "      ", "char[56]", "__opaque", (const void *)(a1 + 13152));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_dump_update_data_list_t", "update_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items", *(_QWORD *)(a1 + 13208));
  vl_printf("%s%s %s = %p\n", "      ", "vl_dump_update_data_t *", "items", *(const void **)(a1 + 13216));
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 13224));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_dump_locate_ptr_list_t", "locate_ptr_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items", *(_QWORD *)(a1 + 13232));
  vl_printf("%s%s %s = %p\n", "      ", "vl_dump_locate_data_t **", "items", *(const void **)(a1 + 13240));
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 13248));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_timer_t", "timer_locate");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "      ", "struct timespec[3]", "start_time", (const void *)(a1 + 13256));
  vl_printf("%s%s %s = *%p\n", "      ", "struct timespec[3]", "stop_time", (const void *)(a1 + 13304));
  vl_printf("%s%s %s = *%p\n", "      ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 13352));
  vl_printf("%s%s %s = *%p\n", "      ", "int64_t[3]", "total_time", (const void *)(a1 + 13376));
  vl_printf("%s%s %s = %d\n", "      ", "int", "n_measurements", *(_DWORD *)(a1 + 13400));
  vl_printf("%s%s %s = *%p\n", "      ", "char[64]", "name", (const void *)(a1 + 13404));
  vl_printf("%s%s %s = %d\n", "      ", "int", "is_rt_timer", *(_DWORD *)(a1 + 13468));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_dump_kpts_ptr_list_t", "kpts_ptr_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items", *(_QWORD *)(a1 + 13472));
  vl_printf("%s%s %s = %p\n", "      ", "vl_dump_kpts_data_t **", "items", *(const void **)(a1 + 13480));
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 13488));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_timer_t", "timer_kpts");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "      ", "struct timespec[3]", "start_time", (const void *)(a1 + 13496));
  vl_printf("%s%s %s = *%p\n", "      ", "struct timespec[3]", "stop_time", (const void *)(a1 + 13544));
  vl_printf("%s%s %s = *%p\n", "      ", "int64_t[3]", "elapsed_nanosec", (const void *)(a1 + 13592));
  vl_printf("%s%s %s = *%p\n", "      ", "int64_t[3]", "total_time", (const void *)(a1 + 13616));
  vl_printf("%s%s %s = %d\n", "      ", "int", "n_measurements", *(_DWORD *)(a1 + 13640));
  vl_printf("%s%s %s = *%p\n", "      ", "char[64]", "name", (const void *)(a1 + 13644));
  vl_printf("%s%s %s = %d\n", "      ", "int", "is_rt_timer", *(_DWORD *)(a1 + 13708));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_dump_result_ptr_list_t", "result_ptr_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items", *(_QWORD *)(a1 + 13712));
  vl_printf("%s%s %s = %p\n", "      ", "vl_dump_result_data_t **", "items", *(const void **)(a1 + 13720));
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 13728));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_dump_detail_data_t", "detail_data");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "      ", "double", "time_stamp", *(double *)(a1 + 13736));
  vl_printf("%s%s %s =", "      ", "vl_dump_hash_list_t", "hashes");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(_QWORD *)(a1 + 13744));
  vl_printf("%s%s %s = %p\n", "        ", "vl_dump_hash_t *", "items", *(const void **)(a1 + 13752));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 13760));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_matches_t", "matches");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "        ", "int_nn_list_t", "desc_indices");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items", *(_QWORD *)(a1 + 13768));
  vl_printf("%s%s %s = %p\n", "          ", "int_nn_t *", "items", *(const void **)(a1 + 13776));
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 13784));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "float_nn_list_t", "desc_dists");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items", *(_QWORD *)(a1 + 13792));
  vl_printf("%s%s %s = %p\n", "          ", "float_nn_t *", "items", *(const void **)(a1 + 13800));
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 13808));
  vl_printf("%s}\n", "        ");
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_kpt_list_t", "pose_kpt_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(_QWORD *)(a1 + 13816));
  vl_printf("%s%s %s = %p\n", "        ", "vl_kpt_t *", "items", *(const void **)(a1 + 13824));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 13832));
  vl_printf("%s%s %s =", "        ", "float_list_t", "global_desc");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items", *(_QWORD *)(a1 + 13840));
  vl_printf("%s%s %s = %p\n", "          ", "float *", "items", *(const void **)(a1 + 13848));
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 13856));
  vl_printf("%s}\n", "        ");
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_matches_t", "pose_matches");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "        ", "int_nn_list_t", "desc_indices");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items", *(_QWORD *)(a1 + 13864));
  vl_printf("%s%s %s = %p\n", "          ", "int_nn_t *", "items", *(const void **)(a1 + 13872));
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 13880));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "float_nn_list_t", "desc_dists");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items", *(_QWORD *)(a1 + 13888));
  vl_printf("%s%s %s = %p\n", "          ", "float_nn_t *", "items", *(const void **)(a1 + 13896));
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 13904));
  vl_printf("%s}\n", "        ");
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "g_coords_list_t", "scoring_pose");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(_QWORD *)(a1 + 13912));
  vl_printf("%s%s %s = %p\n", "        ", "g_coords_t *", "items", *(const void **)(a1 + 13920));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 13928));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "float_list_t", "scoring_score");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(_QWORD *)(a1 + 13936));
  vl_printf("%s%s %s = %p\n", "        ", "float *", "items", *(const void **)(a1 + 13944));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 13952));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "g_coords_list_t", "referee_pose");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(_QWORD *)(a1 + 13960));
  vl_printf("%s%s %s = %p\n", "        ", "g_coords_t *", "items", *(const void **)(a1 + 13968));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 13976));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "float_list_t", "referee_score");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(_QWORD *)(a1 + 13984));
  vl_printf("%s%s %s = %p\n", "        ", "float *", "items", *(const void **)(a1 + 13992));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 14000));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "g_coords_list_t", "fused_pose");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(_QWORD *)(a1 + 14008));
  vl_printf("%s%s %s = %p\n", "        ", "g_coords_t *", "items", *(const void **)(a1 + 14016));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 14024));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "float_list_t", "fused_score");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items", *(_QWORD *)(a1 + 14032));
  vl_printf("%s%s %s = %p\n", "        ", "float *", "items", *(const void **)(a1 + 14040));
  vl_printf("%s%s %s = %lld\n", "        ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 14048));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "g_coords_t", "best_pose");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "        ", "double[3][3]", "R", (const void *)(a1 + 14056));
  vl_printf("%s%s %s = *%p\n", "        ", "double[3]", "t", (const void *)(a1 + 14128));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s = %f\n", "      ", "float", "best_score", *(float *)(a1 + 14152));
  vl_printf("%s%s %s =", "      ", "vl_inliers_t", "inliers");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "        ", "g_pos2f_list_t", "pts2d");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items", *(_QWORD *)(a1 + 14160));
  vl_printf("%s%s %s = %p\n", "          ", "g_pos2f_t *", "items", *(const void **)(a1 + 14168));
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 14176));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "g_pos3f_list_t", "pts3d");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items", *(_QWORD *)(a1 + 14184));
  vl_printf("%s%s %s = %p\n", "          ", "g_pos3f_t *", "items", *(const void **)(a1 + 14192));
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 14200));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s =", "        ", "int_pair_list_t", "inlier_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items", *(_QWORD *)(a1 + 14208));
  vl_printf("%s%s %s = %p\n", "          ", "int_pair_t *", "items", *(const void **)(a1 + 14216));
  vl_printf("%s%s %s = %lld\n", "          ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 14224));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s = %d\n", "        ", "int", "n_inliers_gt_pose", *(_DWORD *)(a1 + 14232));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s =", "      ", "vl_gnd_t", "gnd");
  vl_printf(" {\n");
  vl_printf("%s%s %s =", "        ", "g_coords_t", "pose");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "          ", "double[3][3]", "R", (const void *)(a1 + 14240));
  vl_printf("%s%s %s = *%p\n", "          ", "double[3]", "t", (const void *)(a1 + 14312));
  vl_printf("%s}\n", "        ");
  vl_printf("%s%s %s = %f\n", "        ", "double", "w", *(double *)(a1 + 14336));
  vl_printf("%s%s %s = %f\n", "        ", "double", "h", *(double *)(a1 + 14344));
  vl_printf("%s}\n", "      ");
  vl_printf("%s%s %s = \"%.32s\"\n", "      ", "char *", "debug_char", *(const char **)(a1 + 14352));
  vl_printf("%s%s %s = %d\n", "      ", "int", "debug_len", *(_DWORD *)(a1 + 14360));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_dump_detail_ptr_list_t", "detail_ptr_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items", *(_QWORD *)(a1 + 14368));
  vl_printf("%s%s %s = %p\n", "      ", "vl_dump_detail_data_t **", "items", *(const void **)(a1 + 14376));
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 14384));
  vl_printf("%s}\n", "    ");
  vl_printf("%s%s %s =", "    ", "vl_dump_stats_ptr_list_t", "stats_ptr_list");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items", *(_QWORD *)(a1 + 14392));
  vl_printf("%s%s %s = %p\n", "      ", "vl_dump_stats_data_t **", "items", *(const void **)(a1 + 14400));
  vl_printf("%s%s %s = %lld\n", "      ", "int64_t", "n_items_max", *(_QWORD *)(a1 + 14408));
  vl_printf("%s}\n", "    ");
  vl_printf("%s}\n", "  ");
  vl_printf("%s%s %s = %p\n", "  ", "vl_replay_t *", "replay", *(const void **)(a1 + 14416));
  vl_printf("%s%s %s = %p\n", "  ", "slam_tracker_vo_t *", "tracker", *(const void **)(a1 + 14424));
  vl_printf("%s%s %s =", "  ", "vl_pose_t", "pose");
  vl_printf(" {\n");
  vl_printf("%s%s %s = *%p\n", "    ", "double[3][3]", "R", (const void *)(a1 + 14432));
  vl_printf("%s%s %s = *%p\n", "    ", "double[3]", "t", (const void *)(a1 + 14504));
  vl_printf("%s%s %s = %f\n", "    ", "float", "confidence", *(float *)(a1 + 14528));
  vl_printf("%s%s %s = *%p\n", "    ", "float[36]", "cov_pose", (const void *)(a1 + 14532));
  vl_printf("%s}\n", "  ");
  vl_printf("%s%s %s =", "  ", "struct (unnamed)", "time");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %f\n", "    ", "double", "query", *(double *)(a1 + 14680));
  vl_printf("%s%s %s = %d\n", "    ", "int", "user_set", *(_DWORD *)(a1 + 14688));
  vl_printf("%s}\n", "  ");
  vl_printf("%s%s %s =", "  ", "struct (unnamed)", "use_preloaded");
  vl_printf(" {\n");
  vl_printf("%s%s %s = %d\n", "    ", "int", "calib", *(_DWORD *)(a1 + 14696));
  vl_printf("%s%s %s = %d\n", "    ", "int", "kpts", *(_DWORD *)(a1 + 14700));
  vl_printf("%s%s %s = %d\n", "    ", "int", "matches", *(_DWORD *)(a1 + 14704));
  vl_printf("%s%s %s = %d\n", "    ", "int", "kpts3d", *(_DWORD *)(a1 + 14708));
  vl_printf("%s}\n", "  ");
  vl_printf("}\n");
  v4 = (char *)malloc_type_malloc(_MergedGlobals_4, 0x100004077774924uLL);
  *(_QWORD *)(a1 + 14352) = v4;
  strcpy(v4, (const char *)qword_253E9A2D0);
  *(_DWORD *)(a1 + 14360) = _MergedGlobals_4;
  if (*a3)
  {
    v5 = vl_fio_open(a3, "wb", "DDEB");
    v6 = v5;
    if (!v5)
    {
      printf("%sError : ", (const char *)&unk_210BC3C5E);
      printf("Could not open %s to print!", a3);
      putchar(10);
LABEL_50:
      vl_fio_close(v6);
      goto LABEL_51;
    }
    __ptr = 1;
    v7 = *(FILE **)(v5 + 552);
    if (v7)
    {
      fwrite(&__ptr, 8uLL, 1uLL, v7);
      v8 = __ptr;
      v9 = *(FILE **)(v6 + 552);
      if (!v9)
      {
        if (!__ptr)
        {
          v23 = strlen((const char *)qword_253E9A2D0);
          __ptr = v23;
          goto LABEL_31;
        }
        v10 = *(_QWORD *)(v6 + 520);
        goto LABEL_18;
      }
    }
    else
    {
      v11 = *(_QWORD *)(v5 + 520);
      v12 = v11 + 8;
      v13 = *(_QWORD *)(v5 + 536);
      if (v11 + 8 <= v13)
      {
        v16 = *(char **)(v5 + 528);
      }
      else
      {
        v14 = 2 * v13;
        if (!v13)
          v14 = 256;
        if (v14 <= v12)
          v15 = v12;
        else
          v15 = v14;
        v16 = (char *)malloc_type_realloc(*(void **)(v5 + 528), v15, 0x768BF38DuLL);
        *(_QWORD *)(v6 + 528) = v16;
        *(_QWORD *)(v6 + 536) = v15;
        v11 = *(_QWORD *)(v6 + 520);
      }
      *(_QWORD *)&v16[v11] = __ptr;
      v10 = *(_QWORD *)(v6 + 520) + 8;
      *(_QWORD *)(v6 + 520) = v10;
      v9 = *(FILE **)(v6 + 552);
      v8 = 1;
      if (!v9)
      {
LABEL_18:
        v17 = v10 + v8;
        v18 = *(_QWORD *)(v6 + 536);
        if (v10 + v8 <= v18)
        {
          v21 = *(char **)(v6 + 528);
        }
        else
        {
          v19 = 2 * v18;
          if (!v18)
            v19 = 256;
          if (v19 <= v17)
            v20 = v17;
          else
            v20 = v19;
          v21 = (char *)malloc_type_realloc(*(void **)(v6 + 528), v20, 0x768BF38DuLL);
          *(_QWORD *)(v6 + 528) = v21;
          *(_QWORD *)(v6 + 536) = v20;
          v10 = *(_QWORD *)(v6 + 520);
        }
        memcpy(&v21[v10], "\n", v8);
        *(_QWORD *)(v6 + 520) += v8;
LABEL_27:
        v22 = *(FILE **)(v6 + 552);
        v23 = strlen((const char *)qword_253E9A2D0);
        __ptr = v23;
        if (v22)
        {
          fwrite(&__ptr, 8uLL, 1uLL, v22);
          v24 = __ptr;
          v25 = (const void *)qword_253E9A2D0;
          v26 = *(FILE **)(v6 + 552);
          if (v26)
          {
LABEL_29:
            fwrite(v25, 1uLL, v24, v26);
            goto LABEL_50;
          }
LABEL_40:
          if (v24)
          {
            v33 = *(_QWORD *)(v6 + 520);
            v34 = v33 + v24;
            v35 = *(_QWORD *)(v6 + 536);
            if (v33 + v24 <= v35)
            {
              v38 = *(char **)(v6 + 528);
            }
            else
            {
              v36 = 2 * v35;
              if (!v35)
                v36 = 256;
              if (v36 <= v34)
                v37 = v34;
              else
                v37 = v36;
              v38 = (char *)malloc_type_realloc(*(void **)(v6 + 528), v37, 0x768BF38DuLL);
              *(_QWORD *)(v6 + 528) = v38;
              *(_QWORD *)(v6 + 536) = v37;
              v33 = *(_QWORD *)(v6 + 520);
            }
            memcpy(&v38[v33], v25, v24);
            *(_QWORD *)(v6 + 520) += v24;
          }
          goto LABEL_50;
        }
LABEL_31:
        v24 = v23;
        v27 = *(_QWORD *)(v6 + 520);
        v28 = v27 + 8;
        v29 = *(_QWORD *)(v6 + 536);
        if (v27 + 8 <= v29)
        {
          v32 = *(char **)(v6 + 528);
        }
        else
        {
          v30 = 2 * v29;
          if (!v29)
            v30 = 256;
          if (v30 <= v28)
            v31 = v28;
          else
            v31 = v30;
          v32 = (char *)malloc_type_realloc(*(void **)(v6 + 528), v31, 0x768BF38DuLL);
          *(_QWORD *)(v6 + 528) = v32;
          *(_QWORD *)(v6 + 536) = v31;
          v27 = *(_QWORD *)(v6 + 520);
        }
        *(_QWORD *)&v32[v27] = __ptr;
        *(_QWORD *)(v6 + 520) += 8;
        v25 = (const void *)qword_253E9A2D0;
        v26 = *(FILE **)(v6 + 552);
        if (v26)
          goto LABEL_29;
        goto LABEL_40;
      }
    }
    fwrite("\n", 1uLL, v8, v9);
    goto LABEL_27;
  }
LABEL_51:
  free((void *)qword_253E9A2D0);
  qword_253E9A2D0 = 0;
  _MergedGlobals_4 = 0;
}

void vl_mat_imgnd_to_xyz(double *a1, double *a2, int a3, int a4, double a5, double a6, double a7)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  double v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v9 = (double)a3 * 0.5 + -0.5;
  v10 = (double)a4 * 0.5 + -0.5;
  v11 = v9 * -0.0 + 1.0;
  v12 = v10 * -0.0 + 0.0;
  a1[2] = 0.0;
  a1[3] = 0.0;
  v13 = v9 * -0.0 + 0.0;
  v14 = v10 * -0.0 + 1.0;
  a1[6] = 0.0;
  a1[7] = 0.0;
  a1[10] = 1.0;
  a1[11] = 0.0;
  v15 = 0.0 - v9;
  v16 = 0.0 - v10;
  *((_OWORD *)a1 + 7) = xmmword_210BCA930;
  v17 = -(v12 - v11 * 6.123234e-17);
  v18 = v12 * 6.123234e-17;
  v19 = v11 + v12 * 6.123234e-17;
  *a1 = v17;
  a1[1] = v19;
  v20 = -(v14 - v13 * 6.123234e-17);
  v21 = v13 + v14 * 6.123234e-17;
  a1[4] = v20;
  a1[5] = v21;
  v22 = -(v12 - v13 * 6.123234e-17);
  v23 = v13 + v18;
  a1[8] = v22;
  a1[9] = v23;
  v24 = -(v16 - v15 * 6.123234e-17);
  v25 = v15 + v16 * 6.123234e-17;
  a1[12] = v24;
  a1[13] = v25;
  v26 = a2[13] / (double)a4;
  v27 = a2[12] / (double)a3;
  *a1 = v17 * v26;
  a1[1] = v19 * v27;
  a1[2] = a7 * -0.0;
  a1[4] = v20 * v26;
  a1[5] = v21 * v27;
  a1[6] = a7 * -0.0;
  a1[8] = v22 * v26;
  a1[9] = v23 * v27;
  a1[10] = -a7;
  a1[12] = v24 * v26;
  a1[13] = v25 * v27;
  a1[14] = a7 * -0.0;
  v71 = 0x3FF0000000000000;
  v72 = 0u;
  v73 = 0u;
  v75 = 0;
  v76 = 0;
  v74 = 0x3FF0000000000000;
  v77 = -a5;
  v78 = -a6;
  v79 = 0x3FF0000000000000;
  v80 = 0u;
  v81 = 0u;
  v82 = 0x3FF0000000000000;
  g_mul_4x4(a1, a1, (double *)&v71);
  v28 = a2[1];
  v30 = a2[2];
  v29 = a2[3];
  v31 = a2[4];
  v32 = a2[5];
  v33 = a2[6];
  v34 = a2[7];
  v35 = a2[8];
  v36 = a1[1];
  v37 = a1[2];
  v38 = a1[3];
  v39 = *a1 * *a2 + 0.0 + v36 * v28 + v37 * v30 + v38 * 0.0;
  v40 = *a1 * v29 + 0.0 + v36 * v31 + v37 * v32 + v38 * 0.0;
  v41 = *a1 * v33 + 0.0 + v36 * v34 + v37 * v35 + v38 * 0.0;
  v42 = v38 + *a1 * 0.0 + 0.0 + v36 * 0.0 + v37 * 0.0;
  v43 = a1[4];
  v44 = a1[5];
  v45 = a1[6];
  v46 = a1[7];
  v47 = v43 * *a2 + 0.0 + v44 * v28 + v45 * v30 + v46 * 0.0;
  v48 = v43 * v29 + 0.0 + v44 * v31 + v45 * v32 + v46 * 0.0;
  v49 = v43 * v33 + 0.0 + v44 * v34 + v45 * v35 + v46 * 0.0;
  v50 = v46 + v43 * 0.0 + 0.0 + v44 * 0.0 + v45 * 0.0;
  v51 = a1[8];
  v52 = a1[9];
  v53 = a1[10];
  v54 = a1[11];
  v55 = v51 * *a2 + 0.0 + v52 * v28 + v53 * v30 + v54 * 0.0;
  v56 = v51 * v29 + 0.0 + v52 * v31 + v53 * v32 + v54 * 0.0;
  v57 = v51 * v33 + 0.0 + v52 * v34 + v53 * v35 + v54 * 0.0;
  v58 = v54 + v51 * 0.0 + 0.0 + v52 * 0.0 + v53 * 0.0;
  v59 = a1[12];
  v60 = a1[13];
  v61 = v59 * *a2 + 0.0 + v60 * v28;
  v62 = a1[14];
  v63 = a1[15];
  v64 = v61 + v62 * v30 + v63 * 0.0;
  v65 = v59 * v29 + 0.0 + v60 * v31 + v62 * v32 + v63 * 0.0;
  v66 = v59 * v33 + 0.0 + v60 * v34 + v62 * v35 + v63 * 0.0;
  v67 = v63 + v59 * 0.0 + 0.0 + v60 * 0.0 + v62 * 0.0;
  *a1 = v39;
  a1[1] = v40;
  a1[2] = v41;
  a1[3] = v42;
  a1[4] = v47;
  a1[5] = v48;
  a1[6] = v49;
  a1[7] = v50;
  a1[8] = v55;
  a1[9] = v56;
  a1[10] = v57;
  a1[11] = v58;
  a1[12] = v64;
  a1[13] = v65;
  a1[14] = v66;
  a1[15] = v67;
  v68 = a2[9];
  v69 = a2[10];
  v70 = a2[11];
  *a1 = v39 + v42 * v68;
  a1[1] = v40 + v42 * v69;
  a1[2] = v41 + v42 * v70;
  a1[4] = v47 + v50 * v68;
  a1[5] = v48 + v50 * v69;
  a1[6] = v49 + v50 * v70;
  a1[8] = v55 + v58 * v68;
  a1[9] = v56 + v58 * v69;
  a1[10] = v57 + v58 * v70;
  a1[12] = v64 + v67 * v68;
  a1[13] = v65 + v67 * v69;
  a1[14] = v66 + v67 * v70;
}

_DWORD *huff_table_create(int a1, signed int a2)
{
  _DWORD *v4;
  unsigned int v5;
  signed int v6;
  _DWORD *v7;

  v4 = malloc_type_calloc(1uLL, 0x20uLL, 0x1010040F32E1FD2uLL);
  v5 = 32 - __clz(a2);
  *v4 = v5;
  v4[1] = a2;
  v6 = 32 - __clz(a1 - 1);
  v4[2] = v6;
  v4[3] = a1;
  if (v6 > a2)
    __assert_rtn("huff_table_create", "huff_coder.c", 779, "t->symbol_bits <= max_code_length && \"Max code length not enough to represent symbols\"");
  if ((int)(v5 + a2) >= 33)
    __assert_rtn("huff_table_create", "huff_coder.c", 780, "max_code_length + t->length_bits <= 32 && \"32 bit isn't enough!\"");
  v7 = v4;
  *((_QWORD *)v4 + 2) = malloc_type_malloc(4 * a1, 0x100004052888210uLL);
  *((_QWORD *)v7 + 3) = malloc_type_calloc(1 << a2, 4uLL, 0x100004052888210uLL);
  return v7;
}

unint64_t huff_decompress(uint64_t a1, uint64_t a2, _QWORD *a3, int a4, char *a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  int *v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  unint64_t v31;
  int v32;
  char *v33;
  int v34;
  unsigned int v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  BOOL v44;
  unint64_t result;
  unint64_t v46;

  v6 = a1 + 8;
  if (*(_QWORD *)a1 != a2)
    __assert_rtn("huff_decompress", "huff_coder.c", 1161, "src_len == _src_len");
  v10 = a2;
  v11 = bswap32(*(_DWORD *)(a1 + 12));
  v12 = v11 << 37;
  v13 = (unsigned int *)(a1 + 16);
  v14 = huff_table_create(bswap32(*(_DWORD *)(a1 + 8)), v11 >> 27);
  v15 = (void **)v14;
  if (v14[3] < 1)
  {
    v18 = 27;
  }
  else
  {
    v16 = 0;
    v17 = *((_QWORD *)v14 + 2);
    v18 = 27;
    do
    {
      v19 = *v14;
      if (v18 < *v14)
      {
        v20 = *v13++;
        v12 |= (unint64_t)bswap32(v20) << (32 - v18);
        v18 += 32;
      }
      v21 = v12 >> -(char)v19;
      v22 = v18 - v19;
      v23 = v12 << v19;
      if (v18 - v19 < (int)v21)
      {
        v24 = *v13++;
        v23 |= (unint64_t)bswap32(v24) << (32 - v22);
        v22 += 32;
      }
      v25 = v23 >> -(char)v21;
      v26 = ((_DWORD)v25 << v19) | v21;
      v27 = v14[1] - v21;
      *(_DWORD *)(v17 + 4 * v16) = v26;
      if (v27 != 31)
      {
        v28 = (_DWORD)v25 << v27;
        if (1 << v27 <= 1)
          v29 = 1;
        else
          v29 = (1 << v27);
        v30 = (_DWORD *)(*((_QWORD *)v14 + 3) + 4 * v28);
        do
        {
          if (*v30)
            __assert_rtn("huff_table_set_code", "huff_coder.c", 809, "table->decode[bits] == 0");
          *v30++ = ((_DWORD)v16 << *v14) | v21;
          --v29;
        }
        while (v29);
      }
      v18 = v22 - v21;
      v12 = v23 << v21;
      ++v16;
    }
    while (v16 < v14[3]);
  }
  v46 = a6;
  if (v10)
  {
    v31 = 0;
    v32 = 0;
    v33 = a5;
    do
    {
      v34 = v14[1];
      if (v18 < v34)
      {
        v35 = *v13++;
        v12 |= (unint64_t)bswap32(v35) << (32 - v18);
        v18 += 32;
      }
      v36 = v12 >> -(char)v34;
      v37 = 1 << v34;
      if (v37 <= v36)
        __assert_rtn("huff_table_decode_symbol", "huff_coder.c", 825, "bits < (1 << table->max_code_length)");
      v38 = v37 - 1;
      v39 = *v14;
      v40 = *(_DWORD *)(*((_QWORD *)v14 + 3) + 4 * (v38 & v36));
      if (v32 >= 32)
      {
        v41 = HIDWORD(v31);
        v31 <<= 32;
        *(_DWORD *)a5 = bswap32(v41);
        a5 += 4;
        v32 -= 32;
      }
      v18 -= v40 & ~(-1 << v39);
      v12 <<= v40 & ~(-1 << v39);
      v32 += a4;
      v31 |= ((int)(v40 >> v39) & (unint64_t)~(-1 << a4)) << -(char)v32;
      --v10;
    }
    while (v10);
    v42 = a3;
    if (v32 >= 1)
    {
      do
      {
        v43 = HIDWORD(v31);
        v31 <<= 32;
        *(_DWORD *)a5 = bswap32(v43);
        a5 += 4;
        v44 = v32 >= 0x20;
        v32 -= 32;
      }
      while (v32 != 0 && v44);
    }
  }
  else
  {
    v32 = 0;
    v33 = a5;
    v42 = a3;
  }
  free(*((void **)v14 + 2));
  free(v15[3]);
  free(v15);
  if (v42)
    *v42 = ((unint64_t)(8 * ((_QWORD)v13 - v6) - v18 + 7) >> 3) + 8;
  result = a5 - v33 + ((unint64_t)(v32 + 7) >> 3);
  if (v46 < (int)result)
    __assert_rtn("huff_decompress", "huff_coder.c", 1178, "bytes_written <= dst_size");
  return result;
}

uint64_t vl_pose_ransac(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int16x8_t v9;
  int32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float32x2_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  float v24;
  float v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  float *v32;
  int *v33;
  float *v34;
  float v35;
  float v36;
  char *v37;
  float v38;
  uint64_t v39;
  float *v40;
  float v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  float *v47;
  uint64_t v48;
  char *v49;
  float *v50;
  uint64_t v51;
  uint64_t i;
  float *v53;
  uint64_t v54;
  float *v55;
  uint64_t v56;
  unint64_t v57;
  float v58;
  float v59;
  float v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  float v66;
  float v67;
  uint64_t v68;
  float v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  float v77;
  float v78;
  uint64_t v79;
  float v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  BOOL v93;
  unsigned int v94;
  uint64_t v95;
  int v96;
  int v97;
  int *v98;
  float *v99;
  float *v100;
  float v101;
  __float2 v102;
  __float2 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  size_t v129;
  int *v130;
  int16x8_t v131;
  int16x8_t v132;
  int8x16_t v133;
  int32x4_t v134;
  float32x2_t v135;
  float v136;
  int v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  int v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  char *v145;
  int v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v157;
  int v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float32x2_t v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  double v179;
  double v180;
  float32x2_t v181;
  uint64_t v182;
  double v183;
  float v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  unsigned int v194;
  int v195;
  unsigned int v196;
  unsigned int v197;
  int v198;
  unsigned int v199;
  int v200;
  int v201;
  unsigned int v202;
  int v203;
  int v204;
  char *v205;
  signed int v206;
  int v207;
  unsigned int v208;
  signed int v209;
  unsigned int v210;
  unsigned int v211;
  int v212;
  uint64_t v213;
  unsigned int v214;
  int v215;
  BOOL v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  char *v220;
  char *v221;
  char *v222;
  BOOL v223;
  uint64_t v224;
  uint64_t v225;
  int16x8_t v226;
  int16x8_t v227;
  int v228;
  uint64_t v229;
  __int16 *v230;
  __int16 *v231;
  int v232;
  float v233;
  char *v234;
  unint64_t v235;
  float *v236;
  float32x4_t v237;
  float32x4_t v238;
  unint64_t v239;
  float *v240;
  float v241;
  float v242;
  int v243;
  float v244;
  float v245;
  unint64_t v246;
  int v247;
  float *v248;
  int v249;
  int v250;
  int v251;
  uint64_t v252;
  uint64_t v253;
  float *v254;
  float *v255;
  float *v256;
  int v257;
  double v258;
  double v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  int32x4_t v264;
  float32x4_t v265;
  __int128 v266;
  int v267;
  uint64_t v268;
  float v269;
  int v270;
  int v271;
  int v272;
  int8x16_t *v273;
  int8x16_t v274;
  uint64_t v275;
  float *v276;
  float *v277;
  float v278;
  float v279;
  float *v280;
  float v281;
  float v282;
  float v283;
  uint64_t v284;
  float *v285;
  float v286;
  float v287;
  float v288;
  float *v289;
  float v290;
  float v291;
  float v292;
  double v293;
  char v294;
  int v295;
  float *v296;
  float v297;
  int v298;
  int v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  int v303;
  uint64_t v304;
  uint64_t v305;
  __int128 *v306;
  float *v307;
  float *v308;
  _DWORD *v309;
  float v310;
  float v311;
  float v312;
  float v313;
  const float *v314;
  uint64_t v315;
  int v316;
  int v317;
  float *v318;
  float *v319;
  float v320;
  const float *v321;
  uint64_t v322;
  int v323;
  float *v324;
  float *v325;
  float v326;
  float v327;
  float32x4_t v328;
  const float *v329;
  __int128 v330;
  uint64_t v331;
  int32x4_t v332;
  const float *v333;
  const float *v334;
  float32x4_t v335;
  float32x4_t v336;
  float32x4_t v337;
  float32x4_t v338;
  int v339;
  float v340;
  float v341;
  float v342;
  float v343;
  float v344;
  float v345;
  int v346;
  float32x4_t v347;
  float32x4_t v348;
  float32x4_t v349;
  float32x4_t v350;
  float32x4_t v351;
  const float *v352;
  float32x4_t v353;
  float32x4_t v354;
  int32x4_t v355;
  uint64_t v356;
  float32x4_t v357;
  int32x4_t v358;
  float32x4_t v359;
  const float *v360;
  const float *v361;
  float32x4_t v362;
  float32x4_t v363;
  float32x4_t v364;
  float32x4_t v365;
  float32x4_t v366;
  float32x4_t v367;
  float32x4_t v368;
  float32x4_t v369;
  float32x4_t v370;
  float32x4_t v371;
  int v372;
  float v373;
  float v374;
  float v375;
  float v376;
  float v377;
  float v378;
  float v379;
  float v380;
  int v381;
  float v382;
  float v383;
  float v384;
  uint64_t v385;
  uint64_t v386;
  float *v387;
  int v388;
  int v389;
  float *v390;
  float v391;
  float v392;
  float v393;
  uint64_t v394;
  uint64_t v395;
  float *v396;
  int v397;
  float *v398;
  float v399;
  const float *v400;
  __int128 v401;
  uint64_t v402;
  int32x4_t v403;
  const float *v404;
  const float *v405;
  float32x4_t v406;
  float32x4_t v407;
  float32x4_t v408;
  float32x4_t v409;
  int32x4_t v410;
  int v411;
  float v412;
  float v413;
  float v414;
  float v415;
  float v416;
  float v417;
  int v418;
  float32x4_t v419;
  float32x4_t v420;
  float32x4_t v421;
  float32x4_t v422;
  float32x4_t v423;
  const float *v424;
  float32x4_t v425;
  float32x4_t v426;
  int32x4_t v427;
  uint64_t v428;
  float32x4_t v429;
  int32x4_t v430;
  float32x4_t v431;
  const float *v432;
  const float *v433;
  float32x4_t v434;
  float32x4_t v435;
  float32x4_t v436;
  float32x4_t v437;
  float32x4_t v438;
  float32x4_t v439;
  float32x4_t v440;
  float32x4_t v441;
  float32x4_t v442;
  int v443;
  float v444;
  float v445;
  float v446;
  float v447;
  float v448;
  float v449;
  float v450;
  float v451;
  int v452;
  int v453;
  uint64_t v455;
  char v456;
  float *v457;
  float v458;
  float v459;
  float v460;
  float v461;
  unint64_t v463;
  uint64_t v464;
  int v465;
  unint64_t v466;
  int *v467;
  int *v468;
  __int128 v469;
  __int128 v470;
  __int128 v471;
  int v472;
  int *v473;
  unsigned int v474;
  unsigned int v475;
  int16x8_t *v476;
  __int32 v477;
  int *v478;
  int16x8_t v479;
  uint64_t v480;
  int *v481;
  int v482;
  uint64_t v483;
  _DWORD *v484;
  float v486;
  unsigned int v487;
  float v488;
  float v489;
  uint64_t v490;
  uint64_t v491;
  double v492;
  float v493;
  char *v494;
  unint64_t v495;
  long double v496;
  long double v497;
  long double v498;
  long double v499;
  double v500;
  double v501;
  double v502;
  __double2 v503;
  __double2 v504;
  int32x2_t v505;
  int32x4_t v506;
  int32x2_t v507;
  __double2 v508;
  double v509;
  double v510;
  float v511;
  double v512;
  float sinval;
  double v514;
  float v515;
  float v516;
  float v517;
  float v518;
  float v519;
  float *v520;
  float v521;
  long double v522;
  long double v523;
  char *v524;
  int *v525;
  float v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  unint64_t v530;
  const float *v531;
  uint64_t v532;
  int v533;
  int v534;
  float *v535;
  float *v536;
  float32x4_t v537;
  float32x4_t v538;
  float32x4_t v539;
  float32x4_t v540;
  float32x4_t v541;
  const float *v542;
  float32x4_t v543;
  float32x4_t v544;
  uint64_t v545;
  float32x4_t v546;
  int32x4_t v547;
  float32x4_t v548;
  const float *v549;
  const float *v550;
  float32x4_t v551;
  float32x4_t v552;
  float32x4_t v553;
  float32x4_t v554;
  float32x4_t v555;
  float32x4_t v556;
  float32x4_t v557;
  float32x4_t v558;
  float32x4_t v559;
  int v560;
  float v561;
  float v562;
  float v563;
  float v564;
  float v565;
  float v566;
  float v567;
  int v568;
  int *v569;
  int *v570;
  float v571;
  int32x2_t v572;
  double v573;
  double v574;
  int32x2_t v575;
  int32x2_t v576;
  int32x2_t v577;
  int32x4_t v578;
  int32x2_t v579;
  int32x2_t v580;
  uint64_t v581;
  const float *v582;
  uint64_t v583;
  int v584;
  int v585;
  float *v586;
  float *v587;
  float32x4_t v588;
  float32x4_t v589;
  float32x4_t v590;
  float32x4_t v591;
  float32x4_t v592;
  const float *v593;
  float32x4_t v594;
  float32x4_t v595;
  uint64_t v596;
  float32x4_t v597;
  int32x4_t v598;
  float32x4_t v599;
  const float *v600;
  const float *v601;
  float32x4_t v602;
  float32x4_t v603;
  float32x4_t v604;
  float32x4_t v605;
  float32x4_t v606;
  float32x4_t v607;
  float32x4_t v608;
  float32x4_t v609;
  float32x4_t v610;
  int v611;
  float v612;
  float v613;
  float v614;
  float v615;
  float v616;
  float v617;
  float v618;
  int v619;
  double v620;
  __int128 v621;
  __int128 v622;
  float v623;
  int32x2_t v624;
  double v625;
  double v626;
  int32x2_t v627;
  int32x2_t v628;
  int32x2_t v629;
  int32x4_t v630;
  int32x2_t v631;
  int32x2_t v632;
  uint64_t v633;
  const float *v634;
  uint64_t v635;
  int v636;
  int v637;
  float *v638;
  float *v639;
  float32x4_t v640;
  float32x4_t v641;
  float32x4_t v642;
  float32x4_t v643;
  float32x4_t v644;
  const float *v645;
  float32x4_t v646;
  float32x4_t v647;
  uint64_t v648;
  float32x4_t v649;
  int32x4_t v650;
  float32x4_t v651;
  const float *v652;
  const float *v653;
  float32x4_t v654;
  float32x4_t v655;
  float32x4_t v656;
  float32x4_t v657;
  float32x4_t v658;
  float32x4_t v659;
  float32x4_t v660;
  float32x4_t v661;
  float32x4_t v662;
  int v663;
  float v664;
  float v665;
  float v666;
  float v667;
  float v668;
  float v669;
  float v670;
  int v671;
  double v672;
  __int128 v673;
  __int128 v674;
  float v675;
  int32x2_t v676;
  double v677;
  double v678;
  int32x2_t v679;
  int32x2_t v680;
  int32x2_t v681;
  int32x4_t v682;
  int32x2_t v683;
  int32x2_t v684;
  uint64_t v685;
  const float *v686;
  uint64_t v687;
  int v688;
  int v689;
  float *v690;
  float *v691;
  float32x4_t v692;
  float32x4_t v693;
  float32x4_t v694;
  float32x4_t v695;
  float32x4_t v696;
  const float *v697;
  float32x4_t v698;
  float32x4_t v699;
  uint64_t v700;
  float32x4_t v701;
  int32x4_t v702;
  float32x4_t v703;
  const float *v704;
  const float *v705;
  float32x4_t v706;
  float32x4_t v707;
  float32x4_t v708;
  float32x4_t v709;
  float32x4_t v710;
  float32x4_t v711;
  float32x4_t v712;
  float32x4_t v713;
  float32x4_t v714;
  int v715;
  float v716;
  float v717;
  float v718;
  float v719;
  float v720;
  float v721;
  float v722;
  int v723;
  double v724;
  __int128 v725;
  __int128 v726;
  int32x2_t v727;
  int32x2_t v728;
  int32x2_t v729;
  int32x2_t v730;
  int32x2_t v731;
  int32x2_t v732;
  int32x2_t v733;
  int32x4_t v734;
  int32x2_t v735;
  uint64_t v736;
  const float *v737;
  uint64_t v738;
  int v739;
  int v740;
  float *v741;
  float *v742;
  float32x4_t v743;
  float32x4_t v744;
  float32x4_t v745;
  float32x4_t v746;
  float32x4_t v747;
  const float *v748;
  float32x4_t v749;
  float32x4_t v750;
  uint64_t v751;
  float32x4_t v752;
  int32x4_t v753;
  float32x4_t v754;
  const float *v755;
  const float *v756;
  float32x4_t v757;
  float32x4_t v758;
  float32x4_t v759;
  float32x4_t v760;
  float32x4_t v761;
  float32x4_t v762;
  float32x4_t v763;
  float32x4_t v764;
  float32x4_t v765;
  int v766;
  float v767;
  float v768;
  float v769;
  float v770;
  float v771;
  float v772;
  float v773;
  int v774;
  __int128 v775;
  __int128 v776;
  __int128 v777;
  __int128 v778;
  __int128 v779;
  __int128 v780;
  __int128 v781;
  uint64_t v782;
  float v783;
  uint64_t v784;
  float v785;
  uint64_t v786;
  float v787;
  uint64_t v788;
  float v789;
  float v790;
  float v791;
  float v792;
  float v793;
  float v794;
  float v795;
  float v796;
  float v797;
  float v798;
  float v799;
  float v800;
  float v801;
  float v802;
  float v803;
  float v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  float v813;
  float v814;
  unsigned int v815;
  int v816;
  float32x2_t *v817;
  int v818;
  uint64_t v819;
  unsigned __int16 *v820;
  int v821;
  int v822;
  uint64_t v823;
  int v824;
  int v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  int *v830;
  float v831;
  float32x4_t v832;
  float32x4_t v833;
  float32x4_t v834;
  float32x4_t v835;
  uint64_t v836;
  uint64_t v837;
  float v838;
  int v839;
  uint64_t v840;
  int v841;
  int v842;
  uint64_t v843;
  float v844;
  float v845;
  _OWORD *v846;
  unint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  float v851;
  float v852;
  float v853;
  unsigned int v854;
  __int128 v855;
  __int128 v856;
  int v857;
  int32x4_t v858;
  int32x4_t v859;
  int v860;
  int16x8_t v861;
  int16x8_t v862;
  unsigned int v863;
  int v864;
  uint64_t v865;
  uint64_t v866;
  char *v867;
  unsigned int v868;
  float v869;
  float v870;
  float v871;
  float v872;
  uint64_t v873;
  float v874;
  float v875;
  float v876;
  float32x4_t v877;
  _QWORD *v878;
  float32x2_t v879;
  float v880;
  float v881;
  float v882;
  unsigned int v883[17];
  _OWORD v884[4];
  double v885;
  double v886;
  double v887;
  double v888;
  __int128 v889;
  __int128 v890;
  _BYTE v891[24];
  float64x2_t v892;
  double v893;
  double v894;
  double v895;
  __int128 v896;
  __int128 v897;
  __int128 v898;
  __int128 v899;
  __int128 v900;
  int v901;
  int v902;
  int v903;
  float32x4_t v904[2];
  float v905;
  _BYTE v906[28];
  float32x4x2_t v907;
  int16x8x2_t v908;
  float32x4x2_t v909;
  float32x4x2_t v910;
  float32x4x2_t v911;
  float32x4x2_t v912;
  float32x4x3_t v913;
  float32x4x3_t v914;
  float32x4x3_t v915;
  float32x4x3_t v916;
  float32x4x3_t v917;
  float32x4x3_t v918;
  float32x4x3_t v919;
  float32x4x3_t v920;
  float32x4x3_t v921;
  float32x4x3_t v922;
  float32x4x3_t v923;
  float32x4x3_t v924;
  float32x4x3_t v925;
  float32x4x3_t v926;
  float32x4x3_t v927;
  float32x4x3_t v928;
  float32x4x3_t v929;
  float32x4x3_t v930;

  v11 = MEMORY[0x24BDAC7A8](a1, a2);
  v13 = v12;
  v817 = v14;
  v878 = v15;
  v17 = v16;
  v873 = v18;
  v20 = v19;
  v21 = v11;
  *(_QWORD *)&v906[4] = *MEMORY[0x24BDAC8D0];
  v22 = *(_DWORD *)(v12 + 28);
  if (*(_DWORD *)(v11 + 284))
  {
    *(_QWORD *)(v11 + 192) -= mach_absolute_time();
  }
  else
  {
    clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(v11 + 104));
    clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(v21 + 88));
    clock_gettime(_CLOCK_MONOTONIC, (timespec *)(v21 + 72));
  }
  v23 = v21;
  v24 = *(float *)(v13 + 8);
  v25 = *(float *)(v13 + 12);
  v26 = *(_DWORD *)(v13 + 52);
  v27 = *(_DWORD *)(v13 + 44);
  v28 = v878[3];
  v29 = v28;
  v867 = (char *)malloc_type_malloc(8 * (int)v28, 0x100004000313F17uLL);
  *(_QWORD *)v23 = 0;
  *(_QWORD *)(v23 + 24) = 0;
  v819 = v23 + 24;
  v847 = v23;
  *(_QWORD *)(v23 + 48) = 0;
  v824 = v20;
  v830 = (int *)v13;
  if (v25 < v24)
  {
    if ((int)v28 > 0)
    {
      v30 = 0;
      v31 = 0;
      LODWORD(v23) = 0;
      v32 = (float *)(v878[4] + 4);
      v33 = (int *)v847;
      v34 = (float *)v867;
      do
      {
        v35 = *(v32 - 1);
        v36 = v35 / *v32;
        if (v36 < (float)(v24 * v24))
        {
          v37 = &v867[8 * (int)v23];
          *((_DWORD *)v37 + 1) = v31;
          if (v26)
            v35 = v36;
          *(float *)v37 = v35;
          v23 = (int)v23 + 1;
          if (v36 < (float)(v25 * v25))
          {
            *(float *)&v867[8 * v23] = v36 + -1.0;
            ++v30;
          }
        }
        ++v31;
        v32 += 2;
      }
      while (v29 != v31);
      goto LABEL_20;
    }
    v30 = 0;
LABEL_95:
    v33 = (int *)v23;
    v43 = (char *)malloc_type_malloc(0x200uLL, 0xE015D4F4uLL);
    goto LABEL_96;
  }
  if ((int)v28 < 1)
  {
    v30 = v22;
    goto LABEL_95;
  }
  v38 = v24 * v24;
  v33 = (int *)v23;
  v39 = 0;
  LODWORD(v23) = 0;
  v40 = (float *)(v878[4] + 4);
  if (v26)
  {
    v34 = (float *)v867;
    do
    {
      v41 = *(v40 - 1) / *v40;
      if (v41 < v38)
      {
        v42 = &v867[8 * (int)v23];
        *((_DWORD *)v42 + 1) = v39;
        *(float *)v42 = v41;
        LODWORD(v23) = v23 + 1;
      }
      ++v39;
      v40 += 2;
    }
    while (v29 != v39);
    v30 = v22;
LABEL_20:
    v43 = (char *)malloc_type_malloc(0x200uLL, 0xE015D4F4uLL);
    if ((_DWORD)v23)
      goto LABEL_21;
    goto LABEL_96;
  }
  v34 = (float *)v867;
  do
  {
    v233 = *(v40 - 1);
    if ((float)(v233 / *v40) < v38)
    {
      v234 = &v867[8 * (int)v23];
      *((_DWORD *)v234 + 1) = v39;
      *(float *)v234 = v233;
      LODWORD(v23) = v23 + 1;
    }
    ++v39;
    v40 += 2;
  }
  while (v29 != v39);
  v30 = v22;
  v43 = (char *)malloc_type_malloc(0x200uLL, 0xE015D4F4uLL);
  if ((_DWORD)v23)
  {
LABEL_21:
    v860 = v30;
    v854 = v27;
    v857 = v22;
    v44 = 0;
    v863 = v23;
    v23 = (int)v23;
    v45 = 1;
    v46 = 32;
    v47 = v34;
    while (1)
    {
      v48 = v44;
      v30 = v860;
      while (1)
      {
        if ((v45 & 1) == 0)
        {
          --v48;
          v49 = &v43[16 * v48];
          v23 = *((_QWORD *)v49 + 1);
          v47 = &v34[2 * *(_QWORD *)v49];
        }
        if ((uint64_t)v23 > 15)
          break;
        if ((uint64_t)v23 > 1)
        {
          v50 = v47 + 2;
          v51 = 2;
          for (i = 1; i != v23; ++i)
          {
            v53 = v50;
            v54 = v51;
            do
            {
              v55 = &v47[2 * (v54 - 2)];
              if ((float)(*v53 - *v55) >= 0.0)
                break;
              v56 = *(_QWORD *)v53;
              *(_QWORD *)v53 = *(_QWORD *)v55;
              v53 -= 2;
              *(_QWORD *)v55 = v56;
              --v54;
            }
            while (v54 > 1);
            ++v51;
            v50 += 2;
          }
        }
        v45 = 0;
        v23 = 0;
        if (v48 < 1)
        {
          v94 = v863;
          v22 = v857;
          v27 = v854;
          goto LABEL_97;
        }
      }
      if (v23 > 0x27)
        break;
      v57 = v23 >> 1;
      v58 = *v47;
      v59 = v47[2 * (v23 >> 1)];
      v60 = v47[2 * v23 - 2];
      if ((float)(*v47 - v59) >= 0.0)
      {
        if ((float)(v58 - v60) >= 0.0)
        {
          if ((float)(v59 - v60) < 0.0)
            v57 = v23 - 1;
        }
        else
        {
          v57 = 0;
        }
      }
      else if ((float)(v59 - v60) >= 0.0)
      {
        if ((float)(v58 - v60) >= 0.0)
          v57 = 0;
        else
          v57 = v23 - 1;
      }
LABEL_76:
      v81 = 0;
      v82 = 0;
      v83 = 2 * v57;
      v84 = *(_QWORD *)v47;
      *(_QWORD *)v47 = *(_QWORD *)&v47[v83];
      *(_QWORD *)&v47[v83] = v84;
      v85 = v23 - 1;
      v86 = 2;
      do
      {
        if ((float)(v47[v86] - *v47) <= 0.0)
        {
          ++v82;
          v87 = *(_QWORD *)&v47[v86];
          *(_QWORD *)&v47[v86] = *(_QWORD *)&v47[2 * v82];
          *(_QWORD *)&v47[2 * v82] = v87;
          if ((float)(v47[v86] - *v47) == 0.0)
          {
            ++v81;
            *(_QWORD *)&v47[2 * v82] = *(_QWORD *)&v47[2 * v81];
            *(_QWORD *)&v47[2 * v81] = v87;
          }
        }
        v86 += 2;
        --v85;
      }
      while (v85);
      v88 = 8 * v82 - 8 * v81;
      v89 = v81;
      do
      {
        v90 = *(_QWORD *)((char *)v47 + v88);
        *(_QWORD *)((char *)v47 + v88) = *(_QWORD *)&v47[2 * v89];
        *(_QWORD *)&v47[2 * v89] = v90;
        v88 += 8;
        v216 = v89-- <= 0;
      }
      while (!v216);
      v44 = v48 + 1;
      if (v48 + 1 >= v46)
      {
        v91 = 2 * v46;
        v43 = (char *)malloc_type_realloc(v43, 32 * v46, 0xBBC2CF03uLL);
        v46 = v91;
        v33 = (int *)v847;
      }
      v92 = &v43[16 * v48];
      *(_QWORD *)v92 = v82 + (((char *)v47 - v867) >> 3) + 1;
      *((_QWORD *)v92 + 1) = v23 + ~v82;
      v23 = v82 - v81;
      v93 = v82 == v81;
      v34 = (float *)v867;
      v45 = !v93;
      if (v48 < 0 && !v23)
      {
        v94 = v863;
        v22 = v857;
        v27 = v854;
        v30 = v860;
        goto LABEL_97;
      }
    }
    v61 = 0;
    v62 = 0;
    if (v23 <= 0x7D0)
      v63 = 8;
    else
      v63 = 26;
    if (v23 <= 0x7D0)
      v64 = 3;
    else
      v64 = 9;
    while (1)
    {
      v65 = (uint64_t)(v23 - 1 + v61) / v63;
      v66 = v47[2 * (v61 / v63)];
      v67 = v47[2 * v65];
      v68 = (uint64_t)(2 * v23 - 2 + v61) / v63;
      v69 = v47[2 * v68];
      if ((float)(v66 - v67) >= 0.0)
      {
        if ((float)(v66 - v69) < 0.0)
          goto LABEL_53;
        if ((float)(v67 - v69) < 0.0)
        {
LABEL_55:
          *((_QWORD *)&v896 + v62) = v68;
          goto LABEL_47;
        }
      }
      else if ((float)(v67 - v69) >= 0.0)
      {
        if ((float)(v66 - v69) < 0.0)
          goto LABEL_55;
LABEL_53:
        *((_QWORD *)&v896 + v62) = v61 / v63;
        goto LABEL_47;
      }
      *((_QWORD *)&v896 + v62) = v65;
LABEL_47:
      ++v62;
      v61 += 3 * v23 - 3;
      if (v64 == v62)
      {
        while (1)
        {
          v70 = 0;
          v71 = 0;
          v72 = v64;
          v64 /= 3uLL;
          if (v64 <= 1)
            v73 = 1;
          else
            v73 = v64;
          v74 = 8 * v73;
          do
          {
            v75 = *(_QWORD *)((char *)&v896 + v70);
            v76 = *(_QWORD *)((char *)&v896 + v70 + 8);
            v77 = v47[2 * v75];
            v78 = v47[2 * v76];
            v79 = *(_QWORD *)((char *)&v896 + v70 + 16);
            v80 = v47[2 * v79];
            if ((float)(v77 - v78) >= 0.0)
            {
              if ((float)(v77 - v80) < 0.0)
                goto LABEL_68;
              if ((float)(v78 - v80) >= 0.0)
              {
LABEL_61:
                *(_QWORD *)((char *)&v896 + v71) = v76;
                goto LABEL_62;
              }
            }
            else
            {
              if ((float)(v78 - v80) < 0.0)
                goto LABEL_61;
              if ((float)(v77 - v80) >= 0.0)
              {
LABEL_68:
                *(_QWORD *)((char *)&v896 + v71) = v75;
                goto LABEL_62;
              }
            }
            *(_QWORD *)((char *)&v896 + v71) = v79;
LABEL_62:
            v71 += 8;
            v70 += 24;
          }
          while (v74 != v71);
          if (v72 < 9)
          {
            v57 = v896;
            goto LABEL_76;
          }
        }
      }
    }
  }
LABEL_96:
  v94 = 0;
LABEL_97:
  free(v43);
  v864 = v94;
  if ((int)v94 >= (int)v27)
    v95 = v27;
  else
    v95 = v94;
  if (v30 >= (int)v95)
    v96 = v95;
  else
    v96 = v30;
  if (v96 >= v22)
    v97 = v22;
  else
    v97 = v96;
  if ((int)v95 >= 1)
  {
    v98 = (int *)(v867 + 4);
    do
    {
      v104 = *v98;
      v98 += 2;
      v105 = *(int *)(v878[1] + 8 * v104);
      v106 = *(_QWORD *)(*(_QWORD *)(v873 + 8) + 288 * (int)v104);
      v107 = v17[1];
      v108 = *(_QWORD *)v33;
      v109 = *((_QWORD *)v33 + 2);
      if (*(_QWORD *)v33 >= v109)
      {
        v110 = 2 * v109;
        v93 = v109 == 0;
        v111 = 32;
        if (!v93)
          v111 = v110;
        if (v111 <= v108)
          v112 = v108 + 1;
        else
          v112 = v111;
        if (v112)
        {
          *((_QWORD *)v33 + 1) = malloc_type_realloc(*((void **)v33 + 1), 8 * v112, 0xE7D2178EuLL);
          v108 = *(_QWORD *)v33;
        }
        *((_QWORD *)v33 + 2) = v112;
      }
      *(_QWORD *)v33 = v108 + 1;
      *(_QWORD *)(*((_QWORD *)v33 + 1) + 8 * v108) = v106;
      v113 = *((_QWORD *)v33 + 3);
      v114 = *((_QWORD *)v33 + 5);
      if (v113 >= v114)
      {
        v115 = 2 * v114;
        v93 = v114 == 0;
        v116 = 21;
        if (!v93)
          v116 = v115;
        if (v116 <= v113)
          v117 = v113 + 1;
        else
          v117 = v116;
        if (v117)
        {
          *((_QWORD *)v33 + 4) = malloc_type_realloc(*((void **)v33 + 4), 12 * v117, 0xCE79F0E5uLL);
          v113 = *((_QWORD *)v33 + 3);
        }
        *((_QWORD *)v33 + 5) = v117;
      }
      v118 = (uint64_t *)(v107 + 12 * (int)v105);
      *((_QWORD *)v33 + 3) = v113 + 1;
      v119 = *((_QWORD *)v33 + 4) + 12 * v113;
      v120 = *v118;
      *(_DWORD *)(v119 + 8) = *((_DWORD *)v118 + 2);
      *(_QWORD *)v119 = v120;
      if (v17[12])
      {
        v121 = v17[13];
        v122 = *((_QWORD *)v33 + 6);
        v123 = *((_QWORD *)v33 + 8);
        if (v122 >= v123)
        {
          v124 = 2 * v123;
          v93 = v123 == 0;
          v125 = 21;
          if (!v93)
            v125 = v124;
          if (v125 <= v122)
            v126 = v122 + 1;
          else
            v126 = v125;
          if (v126)
          {
            *((_QWORD *)v33 + 7) = malloc_type_realloc(*((void **)v33 + 7), 12 * v126, 0x448F908FuLL);
            v122 = *((_QWORD *)v33 + 6);
          }
          *((_QWORD *)v33 + 8) = v126;
        }
        v99 = (float *)(v121 + 8 * v105);
        *((_QWORD *)v33 + 6) = v122 + 1;
        v100 = (float *)(*((_QWORD *)v33 + 7) + 12 * v122);
        v101 = *v99;
        v102 = __sincosf_stret(v99[1]);
        v103 = __sincosf_stret(v101);
        *v100 = v103.__sinval * v102.__cosval;
        v100[1] = v103.__sinval * v102.__sinval;
        v100[2] = v103.__cosval;
        v33 = (int *)v847;
      }
      --v95;
    }
    while (v95);
  }
  free(v867);
  printf("Spam : ");
  printf("POSE:  num of matches after lowe: %s%llu / %d, (m: %d), %s", (const char *)&unk_210BC3C5E, *(_QWORD *)v33, v864, v97, (const char *)&unk_210BC3C5E);
  putchar(10);
  v821 = *v830;
  v883[0] = 0;
  v127 = *v33;
  v905 = 0.0;
  memset(v904, 0, sizeof(v904));
  v128 = v830[6];
  if (v128 <= 1)
    v129 = 1;
  else
    v129 = v128;
  v825 = v129;
  v130 = (int *)malloc_type_calloc(v129, 0x34uLL, 0x10000403884A0CCuLL);
  v135 = *v817;
  v136 = v817[1].f32[0];
  if (v824 != 32 && v824 != 1)
  {
    v145 = 0;
    v816 = 0;
    v146 = 3;
    if (v97 > 3)
      goto LABEL_164;
    goto LABEL_154;
  }
  v137 = v830[8];
  if (!v137)
  {
    v145 = 0;
    v146 = 2;
    v816 = 1;
    if (v97 > 2)
      goto LABEL_164;
LABEL_154:
    free(v130);
    free(v145);
    v147 = 32;
    v148 = v847;
    if (!*(_DWORD *)(v847 + 284))
      goto LABEL_488;
    goto LABEL_155;
  }
  if (v137 >= v97)
    v138 = v97;
  else
    v138 = v830[8];
  v879 = *v817;
  if (v138 <= 0)
  {
    v157 = (char *)malloc_type_malloc(0, 0x1000040BDFB0063uLL);
    v135 = v879;
    v145 = v157;
    v141 = 0;
    goto LABEL_161;
  }
  v139 = v830[9];
  if (v139 <= 1)
    v140 = 1;
  else
    v140 = v830[9];
  if (v138 == 1)
  {
    v141 = 0;
    v142 = 0;
    v143 = -v139;
    v144 = v830[9];
  }
  else
  {
    v188 = 0;
    v189 = 0;
    v190 = 0;
    v142 = v138 & 0xFFFFFFFE;
    v143 = -v139 - (v138 & 0xFFFFFFFE);
    v144 = v139 + (v138 & 0xFFFFFFFE);
    v191 = v139 + 1;
    v192 = v830[9];
    do
    {
      if (v97 <= v191)
        v193 = v191;
      else
        v193 = v97;
      v194 = v188 + ~v139 + v193;
      v190 += (v194 - (v194 != 0)) / v140;
      if (v194)
        ++v190;
      if (v97 <= v192)
        v195 = v192;
      else
        v195 = v97;
      v196 = v188 - v139 + v195;
      v189 += (v196 - (v196 != 0)) / v140;
      if (v196)
        ++v189;
      v188 -= 2;
      v192 += 2;
      v191 += 2;
    }
    while (-(v138 & 0xFFFFFFFE) != v188);
    v141 = v190 + v189;
    if (v138 == v142)
      goto LABEL_203;
  }
  v197 = v138 - v142;
  do
  {
    if (v97 <= v144)
      v198 = v144;
    else
      v198 = v97;
    v199 = v198 + v143;
    v93 = v199 == 0;
    v200 = (v199 - (v199 != 0)) / v140 + v141;
    if (v93)
      v141 = v200;
    else
      v141 = v200 + 1;
    ++v144;
    --v143;
    --v197;
  }
  while (v197);
LABEL_203:
  v145 = (char *)malloc_type_malloc(4 * v141, 0x1000040BDFB0063uLL);
  v201 = 0;
  v202 = 0;
  v203 = 2 * v139;
  v204 = -2 * v139;
  v131 = vmulq_s16(vdupq_n_s16(v139), (int16x8_t)xmmword_210BCAC30);
  v132 = vdupq_n_s16(8 * v139);
  v205 = v145 - 2;
  v135 = v879;
  do
  {
    v206 = v203 + v202;
    if (v97 <= (int)(v203 + v202))
      v207 = v203 + v202;
    else
      v207 = v97;
    v208 = v207 + v204 - v202;
    v209 = v202 + v139;
    if ((int)(v202 + v139) < v97)
    {
      if (v97 > v206)
        v206 = v97;
      v210 = v206 + v204 - v202;
      v93 = v210 == 0;
      v211 = v210 - (v210 != 0);
      v212 = v201;
      LODWORD(v213) = v211 / v139;
      if (v93)
        v213 = v213;
      else
        v213 = (v213 + 1);
      if (v213 < 0x27)
        goto LABEL_229;
      v214 = (v208 - (v208 != 0)) / v139 + (v208 != 0);
      v215 = 2 * v201;
      v216 = 2 * v201 > (int)(2 * (v201 + v214)) || (int)(((2 * v201) | 1) + 2 * v214) < ((2 * v201) | 1);
      if (v216 || (v214 & 0x80000000) != 0)
        goto LABEL_229;
      v217 = 2 * v215;
      v218 = &v145[v217];
      v219 = 4 * v214;
      v220 = &v145[v217 + v219];
      v221 = &v145[v217 + 2];
      v222 = &v221[v219];
      v223 = v220 >= v218 && v222 >= v221;
      if (!v223)
        goto LABEL_229;
      v224 = v213 + 1;
      v225 = (v213 + 1) & 0x1FFFFFFF0;
      v212 += v225;
      v226 = vdupq_n_s16(v209);
      v209 += v139 * v225;
      v227 = vaddq_s16(v226, v131);
      v133 = (int8x16_t)vdupq_n_s16(v202);
      v228 = v215 + 17;
      v229 = v225;
      do
      {
        v908.val[1] = vaddq_s16(v227, v132);
        v230 = (__int16 *)&v205[2 * v228 - 32];
        v134 = (int32x4_t)v227;
        vst2q_s16(v230, *(int16x8x2_t *)v133.i8);
        v231 = (__int16 *)&v205[2 * v228];
        v908.val[0] = (int16x8_t)v133;
        vst2q_s16(v231, v908);
        v227 = vaddq_s16(v908.val[1], v132);
        v228 += 32;
        v229 -= 16;
      }
      while (v229);
      if (v224 != v225)
      {
LABEL_229:
        v232 = 2 * v212;
        do
        {
          *(_WORD *)&v145[2 * v232] = v202;
          *(_WORD *)&v145[2 * v232 + 2] = v209;
          ++v212;
          v209 += v139;
          v232 += 2;
        }
        while (v209 < v97);
      }
      v201 = v212;
    }
    ++v202;
  }
  while (v202 != v138);
LABEL_161:
  v158 = *v830;
  if (v141 < *v830)
    v158 = v141;
  v821 = v158;
  v146 = 2;
  v816 = 1;
  if (v97 <= 2)
    goto LABEL_154;
LABEL_164:
  v820 = (unsigned __int16 *)v145;
  if (v824 != 1)
  {
    v172 = v135.f32[1];
    v134.i32[0] = v135.i32[0];
    if (v824 != 32)
    {
      v813 = v136;
      v814 = v135.f32[0];
      v812 = a9;
      if (v821 < 1)
        goto LABEL_485;
      goto LABEL_251;
    }
    v131.i32[0] = 0;
    v173.f32[0] = (float)(v136 * -0.0) + (float)(v135.f32[1] * 0.0);
    v174 = v136 + (float)(v135.f32[0] * -0.0);
    v175 = -(float)(v135.f32[1] - (float)(v135.f32[0] * 0.0));
    v176 = (float)(v174 * v136) - (float)(v175 * v135.f32[1]);
    v177 = (float)(v175 * v135.f32[0]) - (float)(v173.f32[0] * v136);
    v178 = (float)(v173.f32[0] * v135.f32[1]) - (float)(v174 * v135.f32[0]);
    *(double *)v132.i64 = (float)((float)((float)(v177 * v177) + (float)(v176 * v176)) + (float)(v178 * v178));
    v179 = sqrt(*(double *)v132.i64);
    v132.i32[0] = 0;
    v133.i32[0] = 0;
    v134.i32[0] = 0;
    if (v179 > 0.0)
    {
      *(double *)v132.i64 = v176 / v179;
      *(float *)v132.i32 = *(double *)v132.i64;
      *(double *)v133.i64 = v177 / v179;
      *(float *)v133.i32 = *(double *)v133.i64;
      *(double *)v134.i64 = v178 / v179;
      *(float *)v134.i32 = *(double *)v134.i64;
    }
    v180 = sqrt((float)((float)((float)(v174 * v174) + (float)(v173.f32[0] * v173.f32[0])) + (float)(v175 * v175)));
    v181 = 0;
    v182 = 0;
    if (v180 > 0.0)
    {
      v173.f32[1] = v136 + (float)(v135.f32[0] * -0.0);
      v182 = (uint64_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(v173), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v180, 0)));
      *(double *)v131.i64 = v175 / v180;
      *(float *)v131.i32 = *(double *)v131.i64;
    }
    v183 = sqrt((float)((float)((float)(v135.f32[1] * v135.f32[1]) + (float)(v135.f32[0] * v135.f32[0]))
                      + (float)(v136 * v136)));
    v184 = 0.0;
    v814 = 0.0;
    if (v183 > 0.0)
    {
      v181 = vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(v135), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v183, 0)));
      v184 = v136 / v183;
    }
    v904[0].i64[0] = __PAIR64__(v133.u32[0], v132.u32[0]);
    v904[0].i32[2] = v134.i32[0];
    *(uint64_t *)((char *)&v904[0].i64[1] + 4) = v182;
    v904[1].i32[1] = v131.i32[0];
    *(float32x2_t *)&v904[1].u32[2] = v181;
    v905 = v184;
    v185 = *(_QWORD *)v847;
    if (*(uint64_t *)v847 < 1)
    {
      v813 = 1.0;
      goto LABEL_250;
    }
    v186 = *(_QWORD *)(v847 + 8);
    if (v185 >= 4)
    {
      v813 = 1.0;
      if (v186 >= (unint64_t)v906 || (unint64_t)v904 >= v186 + 8 * v185)
      {
        v187 = v185 & 0xFFFFFFFFFFFFFFFCLL;
        v131 = 0uLL;
        v132.i64[0] = 0;
        v235 = v185 & 0xFFFFFFFFFFFFFFFCLL;
        v236 = *(float **)(v847 + 8);
        do
        {
          v907 = vld2q_f32(v236);
          v237 = vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32(v904[0], (float32x4_t)0), 0), v907.val[0], v904[0].f32[1]), v907.val[1], v904[0].f32[2]);
          v238 = vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)&v904[1].u32[2], 0), 0), v907.val[0], v904[1].f32[3]), v907.val[1], v905);
          v133 = (int8x16_t)vdivq_f32(vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32(*(float32x4_t *)((char *)v904 + 12), (float32x4_t)0), 0), v907.val[0], v904[1].f32[0]), v907.val[1], v904[1].f32[1]), v237);
          v134 = (int32x4_t)vdivq_f32(v238, v237);
          vst2q_f32(v236, *(float32x4x2_t *)v133.i8);
          v236 += 8;
          v235 -= 4;
        }
        while (v235);
        if (v185 == v187)
        {
LABEL_250:
          v172 = 0.0;
          v812 = a9;
          if (v821 < 1)
            goto LABEL_485;
          goto LABEL_251;
        }
      }
      else
      {
        v187 = 0;
      }
    }
    else
    {
      v813 = 1.0;
      v187 = 0;
    }
    v239 = v185 - v187;
    v240 = (float *)(v186 + 8 * v187 + 4);
    do
    {
      v241 = *(v240 - 1);
      *(float *)v133.i32 = (float)((float)(v904[0].f32[0] + 0.0) + (float)(v904[0].f32[1] * v241))
                         + (float)(v904[0].f32[2] * *v240);
      *(float *)v134.i32 = (float)((float)(v904[0].f32[3] + 0.0) + (float)(v904[1].f32[0] * v241))
                         + (float)(v904[1].f32[1] * *v240);
      *(float *)v132.i32 = *(float *)v134.i32 / *(float *)v133.i32;
      v242 = (float)((float)((float)(v904[1].f32[2] + 0.0) + (float)(v904[1].f32[3] * v241)) + (float)(v905 * *v240))
           / *(float *)v133.i32;
      *(v240 - 1) = *(float *)v134.i32 / *(float *)v133.i32;
      *v240 = v242;
      v240 += 2;
      --v239;
    }
    while (v239);
    v814 = 0.0;
    goto LABEL_250;
  }
  v813 = v136;
  v160 = v817->f32[1];
  v159 = v817[1].f32[0];
  v161 = v817->f32[0];
  v162 = sqrtf((float)((float)(v159 * v159) + (float)(v160 * v160)) + (float)(v161 * v161));
  v163 = 0.0;
  v132.i32[0] = 0;
  v164 = 0.0;
  if (v162 > 0.0)
  {
    v163 = v160 / v162;
    *(float *)v132.i32 = v159 / v162;
    v164 = v161 / v162;
  }
  v165 = (float)(v164 * -0.0) + (float)(*(float *)v132.i32 * 0.0);
  v166 = v164 + (float)(v163 * -0.0);
  v167 = -(float)(*(float *)v132.i32 - (float)(v163 * 0.0));
  v168 = (float)((float)(v166 * v166) + (float)(v165 * v165)) + (float)(v167 * v167);
  if (sqrt(v168) <= 0.00001)
    __assert_rtn("vl_pose_p2p_get_base_from_z", "vl_pose_p2p.c", 107, "g_len3(&ya) > 1e-5 && \"new_z_axis and x_ini are too similar.\"");
  v169 = sqrtf(v168);
  v134.i32[0] = 0;
  v170 = 0.0;
  v171 = 0.0;
  if (v169 > 0.0)
  {
    *(float *)v134.i32 = v165 / v169;
    v170 = v166 / v169;
    v171 = v167 / v169;
  }
  v904[0].f32[0] = (float)(v170 * v164) - (float)(v171 * *(float *)v132.i32);
  *(uint64_t *)((char *)v904[0].i64 + 4) = __PAIR64__(LODWORD(v163), v134.u32[0]);
  v904[0].f32[3] = (float)(v171 * v163) - (float)(*(float *)v134.i32 * v164);
  *(float *)v133.i32 = (float)(*(float *)v134.i32 * *(float *)v132.i32) - (float)(v170 * v163);
  v904[1].i64[0] = __PAIR64__(v132.u32[0], LODWORD(v170));
  v904[1].i64[1] = __PAIR64__(LODWORD(v171), v133.u32[0]);
  v905 = v164;
  v172 = v135.f32[1];
  v814 = v135.f32[0];
  v812 = a9;
  if (v821 >= 1)
  {
LABEL_251:
    v823 = 0;
    v243 = 0;
    v868 = 0;
    v815 = v97 - 1;
    *(float *)v131.i32 = (float)v127;
    v846 = v130 + 12;
    v244 = 2.0;
    v245 = 1.0;
    v246 = v847;
    v247 = v824;
    v248 = (float *)v830;
    v831 = v172;
    v818 = v146;
    while (1)
    {
      v822 = v243;
      if (v820)
      {
        v249 = 0;
        v250 = v820[(v146 * v823)];
        v901 = v250;
        v251 = v820[(v146 * v823 + 1)];
        v902 = v251;
        if (v247 != 1 && v247 != 32)
          v249 = v820[(v146 * v823 + 2)];
        v903 = v249;
      }
      else
      {
        vl_randperm_int_s(v815, v146, (int32x4_t *)&v901, v883);
        v250 = v901;
        v251 = v902;
      }
      v252 = *(_QWORD *)(v246 + 8);
      v253 = *(_QWORD *)(v246 + 32);
      v254 = (float *)(v252 + 8 * v250);
      v255 = (float *)(v252 + 8 * v251);
      v256 = (float *)(v253 + 12 * v250);
      switch(v247)
      {
        case 32:
          v257 = vl_pose_p2p_z(v254, v255, v256, (float *)(v253 + 12 * v251), (uint64_t)&v896);
          if (v257 < 1)
            goto LABEL_263;
          break;
        case 2:
          v257 = vl_pose_p3p(v254, v255, (float *)(v252 + 8 * v903), v256, (float *)(v253 + 12 * v251), (float *)(v253 + 12 * v903), (uint64_t)&v896, *(double *)v131.i64, *(double *)v132.i64, v133, (int8x16_t)v134);
          if (v257 < 1)
          {
LABEL_263:
            v267 = 0;
            goto LABEL_296;
          }
          break;
        case 1:
          v257 = vl_pose_p2p(v254, v255, v256, (float *)(v253 + 12 * v251), v904[0].f32, (float *)&v896);
          if (v257 < 1)
            goto LABEL_263;
          break;
        default:
          printf("%sError : ", (const char *)&unk_210BC3C5E);
          printf("pose method not recognized");
          putchar(10);
          v267 = 0;
          goto LABEL_296;
      }
      v268 = 0;
      v267 = 0;
      v269 = v817[1].f32[1];
      v132.i32[0] = v817[2].i32[0];
      v270 = v901;
      v271 = v902;
      v272 = v903;
      do
      {
        v134.i32[0] = DWORD2(v898);
        v133.i32[0] = DWORD1(v898);
        if ((float)((float)((float)(*((float *)&v898 + 2) - *(float *)v132.i32)
                           * (float)(*((float *)&v898 + 2) - *(float *)v132.i32))
                   + (float)((float)(*((float *)&v898 + 1) - v269) * (float)(*((float *)&v898 + 1) - v269))) <= 6400.0)
        {
          v275 = *(_QWORD *)(v246 + 32);
          if (!v816)
          {
            v276 = (float *)(v275 + 12 * v272);
            v845 = *v276;
            v844 = v276[1];
            v838 = v276[2];
          }
          v277 = (float *)(v275 + 12 * v270);
          v278 = *v277;
          v279 = v277[1];
          v280 = (float *)(v275 + 12 * v271);
          v281 = *v280;
          v282 = v280[1];
          v258 = *(float *)&v896;
          v259 = *((float *)&v896 + 3);
          *(double *)v260.i64 = *((float *)&v897 + 2);
          *(double *)v264.i64 = *((float *)&v896 + 3) * (float)(v279 - *((float *)&v898 + 2))
                              + *(float *)&v896 * (float)(*v277 - *((float *)&v898 + 1));
          *(float *)v264.i32 = *(double *)v264.i64 + *((float *)&v897 + 2) * (float)(v277[2] - *((float *)&v898 + 3));
          *(double *)v263.i64 = (float)(v280[2] - *((float *)&v898 + 3));
          *(double *)v265.i64 = *((float *)&v896 + 3) * (float)(v282 - *((float *)&v898 + 2));
          *(double *)v262.i64 = *(double *)v265.i64
                              + *(float *)&v896 * (float)(*v280 - *((float *)&v898 + 1))
                              + *((float *)&v897 + 2) * *(double *)v263.i64;
          v263.f32[0] = *(double *)v262.i64;
          if (*(float *)v264.i32 >= v263.f32[0])
            v283 = *(double *)v262.i64;
          else
            v283 = *(float *)v264.i32;
          if (*(float *)v264.i32 > v263.f32[0])
            v263.f32[0] = *(float *)v264.i32;
          if ((v816 & 1) == 0)
          {
            *(double *)v264.i64 = (float)(v845 - *((float *)&v898 + 1));
            *(double *)v265.i64 = (float)(v844 - *((float *)&v898 + 2));
            *(double *)v261.i64 = (float)(v838 - *((float *)&v898 + 3));
            v259 = v259 * *(double *)v265.i64;
            v258 = v259 + v258 * *(double *)v264.i64 + *(double *)v260.i64 * *(double *)v261.i64;
            *(float *)&v258 = v258;
            if (v283 >= *(float *)&v258)
              v283 = *(float *)&v258;
            if (v263.f32[0] <= *(float *)&v258)
              v263.f32[0] = *(float *)&v258;
          }
          if ((float)(v283 / v263.f32[0]) >= -0.1)
          {
            v284 = *(_QWORD *)(v246 + 56);
            v285 = (float *)(v284 + 12 * v270);
            v286 = *((float *)&v898 + 1) - v278;
            v287 = *((float *)&v898 + 2) - v279;
            v288 = v285[1];
            *(double *)v260.i64 = (float)((float)(v287 * v288) + (float)(v286 * *v285));
            v258 = *(double *)v260.i64
                 / (sqrt((float)((float)((float)(v287 * v287) + (float)(v286 * v286))
                               * (float)((float)(v288 * v288) + (float)(*v285 * *v285))))
                  + 1.0e-20);
            if (v258 >= 0.258819073)
            {
              v289 = (float *)(v284 + 12 * v271);
              v290 = *((float *)&v898 + 1) - v281;
              v291 = *((float *)&v898 + 2) - v282;
              v292 = v289[1];
              *(double *)v260.i64 = (float)((float)(v291 * v292) + (float)(v290 * *v289));
              v293 = *(double *)v260.i64
                   / (sqrt((float)((float)((float)(v291 * v291) + (float)(v290 * v290))
                                 * (float)((float)(v292 * v292) + (float)(*v289 * *v289))))
                    + 1.0e-20);
              v294 = v293 < 0.258819073 ? 1 : v816;
              v295 = v293 >= 0.258819073 ? v816 : 0;
              if ((v294 & 1) == 0
                && (v296 = (float *)(v284 + 12 * v272),
                    v297 = v296[1],
                    v258 = (float)((float)((float)(*((float *)&v898 + 2) - v844) * v297)
                                 + (float)((float)(*((float *)&v898 + 1) - v845) * *v296)),
                    *(float *)v134.i32 = (float)(v297 * v297) + (float)(*v296 * *v296),
                    *(double *)v133.i64 = v258
                                        / (sqrt((float)((float)((float)((float)(*((float *)&v898 + 2) - v844)
                                                                      * (float)(*((float *)&v898 + 2) - v844))
                                                              + (float)((float)(*((float *)&v898 + 1) - v845)
                                                                      * (float)(*((float *)&v898 + 1) - v845)))
                                                      * *(float *)v134.i32))
                                         + 1.0e-20),
                    v295 = v816,
                    *(double *)v133.i64 >= 0.258819073)
                || v295)
              {
                v273 = (int8x16_t *)(&v896 + 3 * v267);
                v133 = *(int8x16_t *)((char *)&v896 + v268);
                v134 = *(int32x4_t *)((char *)&v896 + v268 + 16);
                v274 = *(int8x16_t *)((char *)&v898 + v268);
                v273[1] = (int8x16_t)v134;
                v273[2] = v274;
                *v273 = v133;
                ++v267;
              }
            }
          }
        }
        v268 += 48;
      }
      while (48 * v257 != v268);
LABEL_296:
      v298 = *(_DWORD *)v246;
      v299 = *((_DWORD *)v248 + 10);
      if (v299 <= *(_DWORD *)v246 - 100)
        v300 = v299;
      else
        v300 = v298;
      if (v267 >= 1)
      {
        v301 = 0;
        v302 = *((_DWORD *)v248 + 4);
        v853 = (float)v302;
        v303 = v298 - v300;
        v304 = v267;
        v851 = (float)(int)v300;
        v837 = 8 * (v300 & 0xFFFFFFF8);
        v849 = (~(_DWORD)v300 + v298);
        v850 = (int)v300;
        v865 = v300 & 0xFFFFFFF8;
        v836 = 3 * v865;
        v305 = (v849 + 1) & 0x1FFFFFFF8;
        v828 = 8 * v305;
        v829 = v849 + 1;
        v848 = v305;
        v826 = 8 * (int)v300;
        v827 = 12 * v305;
        v839 = v300 - v298;
        v843 = v300;
        v842 = v302;
        v841 = v298 - v300;
        v840 = v304;
        do
        {
          v306 = &v896 + 3 * v301;
          v307 = (float *)v306 + 9;
          v308 = (float *)v306 + 10;
          v309 = (_DWORD *)v306 + 11;
          v310 = v248[1] * v248[1];
          v9.i32[0] = *(_DWORD *)v306;
          v311 = *((float *)v306 + 3);
          if (v247 == 32)
          {
            v312 = *v307;
            v313 = *v308;
            v10.i32[0] = *((_DWORD *)v306 + 1);
            v133.i32[0] = *((_DWORD *)v306 + 4);
            LODWORD(v266) = *v309;
            if ((int)v300 < 1)
              goto LABEL_310;
            *(float *)&v258 = (float)(v311 * v313) + (float)(*(float *)v9.i32 * v312);
            *(float *)&v259 = (float)(v313 * *(float *)v133.i32) + (float)(*(float *)v10.i32 * v312);
            v314 = *(const float **)(v246 + 32);
            v315 = *(_QWORD *)(v246 + 8);
            if (v300 >= 8)
            {
              v326 = *v307;
              v327 = *v308;
              v318 = (float *)(v315 + v837);
              v319 = (float *)&v314[v836];
              v132 = v9;
              v328 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.i8, 0);
              v261 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v258, 0);
              v134 = v10;
              v262 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.i8, 0);
              v263 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v259, 0);
              v329 = (const float *)(v315 + 32);
              v264 = 0uLL;
              v330 = v266;
              v265 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v266, 0);
              v331 = v865;
              v332 = 0uLL;
              do
              {
                v333 = v314;
                v928 = vld3q_f32(v333);
                v333 += 12;
                v930 = vld3q_f32(v333);
                v334 = v329 - 8;
                v335 = vsubq_f32(vmlaq_f32(vmulq_n_f32(v928.val[1], v311), v928.val[0], v328), v261);
                v909 = vld2q_f32(v334);
                v336 = vsubq_f32(vmlaq_f32(vmulq_n_f32(v930.val[1], v311), v930.val[0], v328), v261);
                v911 = vld2q_f32(v329);
                v337 = vmlsq_f32(vsubq_f32(vmlaq_f32(vmulq_n_f32(v928.val[1], *(float *)v133.i32), v928.val[0], v262), v263), v335, v909.val[0]);
                v928.val[0] = vmlsq_f32(vsubq_f32(v928.val[2], v265), v335, v909.val[1]);
                v928.val[1] = vmlsq_f32(vsubq_f32(v930.val[2], v265), v336, v911.val[1]);
                v338 = vmlsq_f32(vsubq_f32(vmlaq_f32(vmulq_n_f32(v930.val[1], *(float *)v133.i32), v930.val[0], v262), v263), v336, v911.val[0]);
                v264 = vsubq_s32(v264, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_n_f32(vmulq_f32(v335, v335), v310), vmlaq_f32(vmulq_f32(v928.val[0], v928.val[0]), v337, v337)), (int8x16_t)vcgtzq_f32(v335)));
                v332 = vsubq_s32(v332, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_n_f32(vmulq_f32(v336, v336), v310), vmlaq_f32(vmulq_f32(v928.val[1], v928.val[1]), v338, v338)), (int8x16_t)vcgtzq_f32(v336)));
                v314 += 24;
                v329 += 16;
                v331 -= 8;
              }
              while (v331);
              v260 = (float32x4_t)vaddq_s32(v332, v264);
              v317 = vaddvq_s32((int32x4_t)v260);
              v316 = v865;
              v244 = 2.0;
              v245 = 1.0;
              v9 = v132;
              v10 = v134;
              v313 = v327;
              v312 = v326;
              v266 = v330;
              if (v865 == v300)
                goto LABEL_326;
            }
            else
            {
              v316 = 0;
              v317 = 0;
              v318 = *(float **)(v246 + 8);
              v319 = *(float **)(v246 + 32);
            }
            v339 = v300 - v316;
            do
            {
              v340 = v319[1];
              v341 = (float)(*(float *)v133.i32 * v340) + (float)(*(float *)v10.i32 * *v319);
              v342 = (float)((float)(v311 * v340) + (float)(*(float *)v9.i32 * *v319)) - *(float *)&v258;
              v343 = *v318;
              v344 = v318[1];
              v318 += 2;
              v345 = (float)(v319[2] - *(float *)&v266) - (float)(v344 * v342);
              v346 = (float)((float)(v345 * v345)
                           + (float)((float)((float)(v341 - *(float *)&v259) - (float)(v343 * v342))
                                   * (float)((float)(v341 - *(float *)&v259) - (float)(v343 * v342)))) < (float)(v310 * (float)(v342 * v342));
              if (v342 <= 0.0)
                v346 = 0;
              v317 += v346;
              v319 += 3;
              --v339;
            }
            while (v339);
          }
          else
          {
            v312 = *v307;
            v313 = *v308;
            LODWORD(v266) = *v309;
            v10.i32[0] = *((_DWORD *)v306 + 1);
            v133.i32[0] = *((_DWORD *)v306 + 4);
            if ((int)v300 < 1)
            {
LABEL_310:
              v317 = 0;
              goto LABEL_326;
            }
            v320 = *((float *)v306 + 5);
            LODWORD(v258) = *((_DWORD *)v306 + 6);
            v260.f32[0] = (float)((float)(v311 * v313) + (float)(*(float *)v9.i32 * v312))
                        + (float)(*(float *)&v258 * *(float *)&v266);
            v261.i32[0] = *((_DWORD *)v306 + 7);
            v262.i32[0] = *((_DWORD *)v306 + 8);
            v263.f32[0] = (float)((float)(v313 * *(float *)v133.i32) + (float)(*(float *)v10.i32 * v312))
                        + (float)(v261.f32[0] * *(float *)&v266);
            v264.i32[0] = *((_DWORD *)v306 + 2);
            v265.f32[0] = (float)((float)(v313 * v320) + (float)(*(float *)v264.i32 * v312))
                        + (float)(v262.f32[0] * *(float *)&v266);
            v321 = *(const float **)(v246 + 32);
            v322 = *(_QWORD *)(v246 + 8);
            if (v300 >= 8)
            {
              v855 = v266;
              v858 = v10;
              v874 = *v307;
              v880 = *v308;
              v324 = (float *)(v322 + v837);
              v325 = (float *)&v321[v836];
              v861 = v9;
              v347 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.i8, 0);
              v348 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v258, 0);
              v832 = v263;
              v834 = v260;
              v349 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v260.f32, 0);
              v350 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.i8, 0);
              v351 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v261.f32, 0);
              v352 = (const float *)(v322 + 32);
              v353 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v263.f32, 0);
              v354 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v264.i8, 0);
              v355 = 0uLL;
              v356 = v865;
              v357 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v262.f32, 0);
              v358 = 0uLL;
              v359 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v265.f32, 0);
              do
              {
                v360 = v321;
                v921 = vld3q_f32(v360);
                v360 += 12;
                v915 = vld3q_f32(v360);
                v361 = v352 - 8;
                v362 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v921.val[1], v311), v921.val[0], v347), v921.val[2], v348), v349);
                v363 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v921.val[1], *(float *)v133.i32), v921.val[0], v350), v921.val[2], v351), v353);
                v364 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v915.val[1], v311), v915.val[0], v347), v915.val[2], v348);
                v365 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v915.val[1], *(float *)v133.i32), v915.val[0], v350), v915.val[2], v351);
                v366 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v915.val[1], v320), v915.val[0], v354), v915.val[2], v357);
                *(float32x4x2_t *)v915.val[0].f32 = vld2q_f32(v361);
                v915.val[2] = vsubq_f32(v364, v349);
                v367 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v921.val[1], v320), v921.val[0], v354), v921.val[2], v357), v359);
                *(float32x4x2_t *)v921.val[0].f32 = vld2q_f32(v352);
                v368 = vmlsq_f32(v363, v362, v915.val[0]);
                v369 = vmlsq_f32(v367, v362, v915.val[1]);
                v370 = vmlsq_f32(vsubq_f32(v366, v359), v915.val[2], v921.val[1]);
                v371 = vmlsq_f32(vsubq_f32(v365, v353), v915.val[2], v921.val[0]);
                v134 = (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_n_f32(vmulq_f32(v915.val[2], v915.val[2]), v310), vmlaq_f32(vmulq_f32(v370, v370), v371, v371)), (int8x16_t)vcgtzq_f32(v915.val[2]));
                v355 = vsubq_s32(v355, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_n_f32(vmulq_f32(v362, v362), v310), vmlaq_f32(vmulq_f32(v369, v369), v368, v368)), (int8x16_t)vcgtzq_f32(v362)));
                v358 = vsubq_s32(v358, v134);
                v321 += 24;
                v352 += 16;
                v356 -= 8;
              }
              while (v356);
              v132 = (int16x8_t)vaddq_s32(v358, v355);
              v132.i32[0] = vaddvq_s32((int32x4_t)v132);
              v317 = v132.i32[0];
              v323 = v865;
              v172 = v831;
              v244 = 2.0;
              v245 = 1.0;
              v10 = v858;
              v9 = v861;
              v313 = v880;
              v312 = v874;
              v266 = v855;
              v263 = v832;
              v260 = v834;
              if (v865 == v300)
                goto LABEL_326;
            }
            else
            {
              v323 = 0;
              v317 = 0;
              v324 = *(float **)(v246 + 8);
              v325 = *(float **)(v246 + 32);
            }
            v372 = v300 - v323;
            do
            {
              v373 = v325[1];
              v374 = v325[2];
              v375 = (float)((float)((float)(v311 * v373) + (float)(*(float *)v9.i32 * *v325))
                           + (float)(*(float *)&v258 * v374))
                   - v260.f32[0];
              v376 = (float)(v320 * v373) + (float)(*(float *)v264.i32 * *v325);
              v377 = (float)((float)((float)(*(float *)v133.i32 * v373) + (float)(*(float *)v10.i32 * *v325))
                           + (float)(v261.f32[0] * v374))
                   - v263.f32[0];
              v378 = (float)(v376 + (float)(v262.f32[0] * v374)) - v265.f32[0];
              v379 = *v324;
              v380 = v324[1];
              v324 += 2;
              *(float *)v132.i32 = (float)((float)(v378 - (float)(v380 * v375)) * (float)(v378 - (float)(v380 * v375)))
                                 + (float)((float)(v377 - (float)(v379 * v375)) * (float)(v377 - (float)(v379 * v375)));
              *(float *)v134.i32 = v310 * (float)(v375 * v375);
              v381 = *(float *)v132.i32 < *(float *)v134.i32;
              if (v375 <= 0.0)
                v381 = 0;
              v317 += v381;
              v325 += 3;
              --v372;
            }
            while (v372);
          }
LABEL_326:
          if ((int)v300 < v298)
          {
            *(float *)v132.i32 = (float)(v317 * v298);
            v382 = v248[12] * (float)v130[12];
            if (v382 <= v853)
              v382 = v853;
            *(float *)v134.i32 = v382 * v851;
            if (*(float *)v134.i32 > *(float *)v132.i32)
              goto LABEL_302;
          }
          v383 = v311 * v313;
          v384 = v313 * *(float *)v133.i32;
          if (v247 == 32)
          {
            if (v303 < 1)
              goto LABEL_337;
            *(float *)&v258 = v383 + (float)(*(float *)v9.i32 * v312);
            *(float *)&v259 = v384 + (float)(*(float *)v10.i32 * v312);
            v385 = *(_QWORD *)(v246 + 32) + 12 * (int)v850;
            v386 = *(_QWORD *)(v246 + 8);
            v387 = (float *)(v386 + 8 * v850);
            if (v849 < 7)
            {
              v388 = 0;
              v389 = 0;
              v390 = (float *)(*(_QWORD *)(v246 + 32) + 12 * (int)v850);
LABEL_341:
              v411 = v839 + v388;
              do
              {
                v412 = v390[1];
                v413 = (float)(*(float *)v133.i32 * v412) + (float)(*(float *)v10.i32 * *v390);
                v414 = (float)((float)(v311 * v412) + (float)(*(float *)v9.i32 * *v390)) - *(float *)&v258;
                v415 = *v387;
                v416 = v387[1];
                v387 += 2;
                v417 = (float)(v390[2] - *(float *)&v266) - (float)(v416 * v414);
                *(float *)v132.i32 = (float)(v417 * v417)
                                   + (float)((float)((float)(v413 - *(float *)&v259) - (float)(v415 * v414))
                                           * (float)((float)(v413 - *(float *)&v259) - (float)(v415 * v414)));
                *(float *)v134.i32 = v310 * (float)(v414 * v414);
                v418 = *(float *)v132.i32 < *(float *)v134.i32;
                if (v414 <= 0.0)
                  v418 = 0;
                v389 += v418;
                v390 += 3;
                v223 = __CFADD__(v411++, 1);
              }
              while (!v223);
              goto LABEL_355;
            }
            v875 = v312;
            v399 = v172;
            v881 = v313;
            v387 = (float *)((char *)v387 + v828);
            v260 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.i8, 0);
            v261 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v258, 0);
            v390 = (float *)(v385 + v827);
            v262 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.i8, 0);
            v263 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v259, 0);
            v400 = (const float *)(v386 + v826 + 32);
            v401 = v266;
            v265 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v266, 0);
            v264 = 0uLL;
            v402 = (v849 + 1) & 0x1FFFFFFF8;
            v403 = 0uLL;
            do
            {
              v404 = (const float *)v385;
              v913 = vld3q_f32(v404);
              v404 += 12;
              v929 = vld3q_f32(v404);
              v405 = v400 - 8;
              v406 = vsubq_f32(vmlaq_f32(vmulq_n_f32(v913.val[1], v311), v913.val[0], v260), v261);
              v912 = vld2q_f32(v405);
              v407 = vsubq_f32(vmlaq_f32(vmulq_n_f32(v929.val[1], v311), v929.val[0], v260), v261);
              v910 = vld2q_f32(v400);
              v408 = vmlsq_f32(vsubq_f32(vmlaq_f32(vmulq_n_f32(v913.val[1], *(float *)v133.i32), v913.val[0], v262), v263), v406, v912.val[0]);
              v913.val[0] = vmlsq_f32(vsubq_f32(v913.val[2], v265), v406, v912.val[1]);
              v913.val[1] = vmlsq_f32(vsubq_f32(v929.val[2], v265), v407, v910.val[1]);
              v409 = vmlsq_f32(vsubq_f32(vmlaq_f32(vmulq_n_f32(v929.val[1], *(float *)v133.i32), v929.val[0], v262), v263), v407, v910.val[0]);
              v410 = (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_n_f32(vmulq_f32(v406, v406), v310), vmlaq_f32(vmulq_f32(v913.val[0], v913.val[0]), v408, v408)), (int8x16_t)vcgtzq_f32(v406));
              v134 = (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_n_f32(vmulq_f32(v407, v407), v310), vmlaq_f32(vmulq_f32(v913.val[1], v913.val[1]), v409, v409)), (int8x16_t)vcgtzq_f32(v407));
              v264 = vsubq_s32(v264, v410);
              v403 = vsubq_s32(v403, v134);
              v385 += 96;
              v400 += 16;
              v402 -= 8;
            }
            while (v402);
            v132 = (int16x8_t)vaddq_s32(v403, v264);
            v389 = vaddvq_s32((int32x4_t)v132);
            v388 = (v849 + 1) & 0xFFFFFFF8;
            v313 = v881;
            *(float *)v132.i32 = v399;
            v245 = 1.0;
            v312 = v875;
            v266 = v401;
            v172 = *(float *)v132.i32;
            if (v829 != v848)
              goto LABEL_341;
          }
          else
          {
            if (v303 < 1)
            {
LABEL_337:
              v389 = 0;
              goto LABEL_355;
            }
            v391 = v383 + (float)(*(float *)v9.i32 * v312);
            v392 = *((float *)v306 + 5);
            LODWORD(v258) = *((_DWORD *)v306 + 6);
            v260.f32[0] = v391 + (float)(*(float *)&v258 * *(float *)&v266);
            v393 = v384 + (float)(*(float *)v10.i32 * v312);
            v261.i32[0] = *((_DWORD *)v306 + 7);
            v262.i32[0] = *((_DWORD *)v306 + 8);
            v263.f32[0] = v393 + (float)(v261.f32[0] * *(float *)&v266);
            v264.i32[0] = *((_DWORD *)v306 + 2);
            v265.f32[0] = (float)((float)(v313 * v392) + (float)(*(float *)v264.i32 * v312))
                        + (float)(v262.f32[0] * *(float *)&v266);
            v394 = *(_QWORD *)(v246 + 32) + 12 * (int)v850;
            v395 = *(_QWORD *)(v246 + 8);
            v396 = (float *)(v395 + 8 * v850);
            if (v849 < 7)
            {
              v397 = 0;
              v389 = 0;
              v398 = (float *)(*(_QWORD *)(v246 + 32) + 12 * (int)v850);
LABEL_350:
              v443 = v839 + v397;
              do
              {
                v444 = v398[1];
                v445 = v398[2];
                v446 = (float)((float)((float)(v311 * v444) + (float)(*(float *)v9.i32 * *v398))
                             + (float)(*(float *)&v258 * v445))
                     - v260.f32[0];
                v447 = (float)(v392 * v444) + (float)(*(float *)v264.i32 * *v398);
                v448 = (float)((float)((float)(*(float *)v133.i32 * v444) + (float)(*(float *)v10.i32 * *v398))
                             + (float)(v261.f32[0] * v445))
                     - v263.f32[0];
                v449 = (float)(v447 + (float)(v262.f32[0] * v445)) - v265.f32[0];
                v450 = *v396;
                v451 = v396[1];
                v396 += 2;
                *(float *)v132.i32 = (float)((float)(v449 - (float)(v451 * v446)) * (float)(v449 - (float)(v451 * v446)))
                                   + (float)((float)(v448 - (float)(v450 * v446)) * (float)(v448 - (float)(v450 * v446)));
                *(float *)v134.i32 = v310 * (float)(v446 * v446);
                v452 = *(float *)v132.i32 < *(float *)v134.i32;
                if (v446 <= 0.0)
                  v452 = 0;
                v389 += v452;
                v398 += 3;
                v223 = __CFADD__(v443++, 1);
              }
              while (!v223);
              goto LABEL_355;
            }
            v856 = v266;
            v859 = v10;
            v876 = v312;
            v882 = v313;
            v396 = (float *)((char *)v396 + v828);
            v862 = v9;
            v419 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.i8, 0);
            v420 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v258, 0);
            v833 = v263;
            v835 = v260;
            v421 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v260.f32, 0);
            v398 = (float *)(v394 + v827);
            v422 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.i8, 0);
            v423 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v261.f32, 0);
            v424 = (const float *)(v395 + v826 + 32);
            v425 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v263.f32, 0);
            v426 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v264.i8, 0);
            v427 = 0uLL;
            v428 = (v849 + 1) & 0x1FFFFFFF8;
            v429 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v262.f32, 0);
            v430 = 0uLL;
            v431 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v265.f32, 0);
            do
            {
              v432 = (const float *)v394;
              v914 = vld3q_f32(v432);
              v432 += 12;
              v922 = vld3q_f32(v432);
              v433 = v424 - 8;
              v434 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v914.val[1], v311), v914.val[0], v419), v914.val[2], v420), v421);
              v435 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v914.val[1], *(float *)v133.i32), v914.val[0], v422), v914.val[2], v423), v425);
              v436 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v914.val[1], v392), v914.val[0], v426), v914.val[2], v429);
              v437 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v922.val[1], *(float *)v133.i32), v922.val[0], v422), v922.val[2], v423);
              v438 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v922.val[1], v392), v922.val[0], v426), v922.val[2], v429);
              *(float32x4x2_t *)v914.val[0].f32 = vld2q_f32(v433);
              v914.val[2] = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v922.val[1], v311), v922.val[0], v419), v922.val[2], v420), v421);
              *(float32x4x2_t *)v922.val[0].f32 = vld2q_f32(v424);
              v439 = vmlsq_f32(v435, v434, v914.val[0]);
              v440 = vmlsq_f32(vsubq_f32(v436, v431), v434, v914.val[1]);
              v441 = vmlsq_f32(vsubq_f32(v438, v431), v914.val[2], v922.val[1]);
              v442 = vmlsq_f32(vsubq_f32(v437, v425), v914.val[2], v922.val[0]);
              v134 = (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_n_f32(vmulq_f32(v914.val[2], v914.val[2]), v310), vmlaq_f32(vmulq_f32(v441, v441), v442, v442)), (int8x16_t)vcgtzq_f32(v914.val[2]));
              v427 = vsubq_s32(v427, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_n_f32(vmulq_f32(v434, v434), v310), vmlaq_f32(vmulq_f32(v440, v440), v439, v439)), (int8x16_t)vcgtzq_f32(v434)));
              v430 = vsubq_s32(v430, v134);
              v394 += 96;
              v424 += 16;
              v428 -= 8;
            }
            while (v428);
            v132 = (int16x8_t)vaddq_s32(v430, v427);
            v132.i32[0] = vaddvq_s32((int32x4_t)v132);
            v389 = v132.i32[0];
            v397 = (v849 + 1) & 0xFFFFFFF8;
            v172 = v831;
            v244 = 2.0;
            v245 = 1.0;
            v10 = v859;
            v9 = v862;
            v313 = v882;
            v312 = v876;
            v266 = v856;
            v263 = v833;
            v260 = v835;
            if (v829 != v848)
              goto LABEL_350;
          }
LABEL_355:
          v453 = v389 + v317;
          if (v389 + v317 < v130[12] || v453 < v302)
            goto LABEL_302;
          v893 = v312;
          v894 = v313;
          v895 = *(float *)&v266;
          *(double *)v134.i64 = *(float *)v10.i32;
          *(double *)&v889 = *(float *)v9.i32;
          *((double *)&v889 + 1) = *(float *)v10.i32;
          *((double *)&v890 + 1) = v311;
          *(double *)v891 = *(float *)v133.i32;
          *(double *)&v890 = *((float *)v306 + 2);
          *(float64x2_t *)&v891[8] = vcvtq_f64_f32(*(float32x2_t *)((char *)v306 + 20));
          v892 = vcvtq_f64_f32(*(float32x2_t *)((char *)v306 + 28));
          if ((int)v868 >= 1)
          {
            v455 = 0;
            v456 = 0;
LABEL_361:
            v457 = (float *)v846 + 13 * v455;
            while (1)
            {
              v886 = *(v457 - 3);
              v887 = *(v457 - 2);
              v888 = *(v457 - 1);
              v884[0] = vcvtq_f64_f32(*(float32x2_t *)(v457 - 12));
              v884[3] = vcvtq_f64_f32(*(float32x2_t *)(v457 - 6));
              v884[1] = vcvtq_f64_f32(*(float32x2_t *)(v457 - 10));
              v884[2] = vcvtq_f64_f32(*(float32x2_t *)(v457 - 8));
              v885 = *(v457 - 4);
              v458 = (v893 - v886) * (v893 - v886) + 0.0;
              v459 = v458 + (v894 - v887) * (v894 - v887);
              v460 = v459 + (v895 - v888) * (v895 - v888);
              v461 = sqrtf(v460);
              *(double *)v131.i64 = g_coords_angle_diff((double *)&v889, (double *)v884);
              *(float *)v131.i32 = *(double *)v131.i64;
              v132.i32[0] = 1024391733;
              if (v461 < v244 && *(float *)v131.i32 < 0.034907)
              {
                if (*(_DWORD *)v457 >= v453)
                {
                  ++v455;
                  v456 = 1;
                  if (v455 < v868)
                    goto LABEL_361;
LABEL_373:
                  if (v868 <= 1uLL)
                    v463 = 1;
                  else
                    v463 = v868;
                  if (v463 < 2)
                  {
                    v464 = 0;
                    v246 = v847;
                    v247 = v824;
                    v248 = (float *)v830;
                    v300 = v843;
                    v302 = v842;
                    v303 = v841;
                    v304 = v840;
LABEL_394:
                    v483 = v463 - v464;
                    v484 = (_DWORD *)v846 + 13 * v464;
                    do
                    {
                      *v484 &= ~0x80000000;
                      v484 += 13;
                      --v483;
                    }
                    while (v483);
                    goto LABEL_302;
                  }
                  v464 = v463 & 0xFFFFFFFE;
                  v480 = v464;
                  v481 = v130 + 25;
                  v246 = v847;
                  v247 = v824;
                  v248 = (float *)v830;
                  v300 = v843;
                  v302 = v842;
                  v303 = v841;
                  v304 = v840;
                  do
                  {
                    v482 = *v481 & 0x7FFFFFFF;
                    *(v481 - 13) &= ~0x80000000;
                    *v481 = v482;
                    v481 += 26;
                    v480 -= 2;
                  }
                  while (v480);
                  if (v463 != v464)
                    goto LABEL_394;
                  goto LABEL_302;
                }
                *(_DWORD *)v457 |= 0x80000000;
              }
              ++v455;
              v457 += 13;
              if (v455 >= v868)
              {
                if ((v456 & 1) != 0)
                  goto LABEL_373;
                v466 = 0;
                v465 = 0;
                v467 = v130;
                v247 = v824;
                v248 = (float *)v830;
                do
                {
                  while (v467[12] < 0)
                  {
                    ++v466;
                    v467 += 13;
                    if (v466 >= v868)
                      goto LABEL_383;
                  }
                  v468 = &v130[13 * v465];
                  v469 = *(_OWORD *)v467;
                  v470 = *((_OWORD *)v467 + 1);
                  v471 = *((_OWORD *)v467 + 2);
                  v468[12] = v467[12];
                  *((_OWORD *)v468 + 1) = v470;
                  *((_OWORD *)v468 + 2) = v471;
                  *(_OWORD *)v468 = v469;
                  ++v465;
                  ++v466;
                  v467 += 13;
                }
                while (v466 < v868);
                goto LABEL_383;
              }
            }
          }
          v465 = 0;
LABEL_383:
          if (v465 >= v825)
            v472 = v465;
          else
            v472 = v465 + 1;
          v473 = &v130[13 * v472];
          v131 = (int16x8_t)*v306;
          v132 = (int16x8_t)v306[1];
          v133 = (int8x16_t)v306[2];
          *(int8x16_t *)(v473 - 5) = v133;
          *(int16x8_t *)(v473 - 9) = v132;
          *(int16x8_t *)(v473 - 13) = v131;
          *(v473 - 1) = v453;
          v868 = v472;
          if (v472 <= 1)
          {
            v246 = v847;
            v300 = v843;
            v302 = v842;
            v303 = v841;
            v304 = v840;
          }
          else
          {
            v246 = v847;
            v300 = v843;
            v302 = v842;
            v303 = v841;
            v304 = v840;
            do
            {
              v474 = v472 - 1;
              v475 = v472 - 2;
              if (v130[13 * v475 + 12] >= v130[13 * v474 + 12])
                break;
              v476 = (int16x8_t *)&v130[13 * v475];
              v477 = v476[3].i32[0];
              v132 = v476[1];
              v131 = v476[2];
              v133 = *(int8x16_t *)v476;
              v478 = &v130[13 * v474];
              v479 = *((int16x8_t *)v478 + 1);
              *v476 = *(int16x8_t *)v478;
              v476[1] = v479;
              v134 = *((int32x4_t *)v478 + 2);
              v476[2] = (int16x8_t)v134;
              v476[3].i32[0] = v478[12];
              *(int8x16_t *)v478 = v133;
              *((int16x8_t *)v478 + 1) = v132;
              *((int16x8_t *)v478 + 2) = v131;
              v478[12] = v477;
              v472 = v474;
            }
            while (v474 > 1);
          }
LABEL_302:
          ++v301;
        }
        while (v301 != v304);
      }
      v131.i32[0] = (__int32)v248[5];
      v243 = v130[12];
      if (*(float *)v131.i32 < v245 && v822 < v243)
      {
        *(float *)v133.i32 = (float)v243 / (float)v127;
        v486 = 1.0;
        v146 = v818;
        v487 = v818;
        do
        {
          if ((v487 & 1) != 0)
            v134.i32[0] = v133.i32[0];
          else
            *(float *)v134.i32 = v245;
          v486 = v486 * *(float *)v134.i32;
          *(float *)v133.i32 = *(float *)v133.i32 * *(float *)v133.i32;
          v216 = v487 > 1;
          v487 >>= 1;
        }
        while (v216);
        v488 = v245 - v486;
        v132.i32[0] = 1065353199;
        if (v488 < 1.0)
        {
          v489 = log2f(v245 - *(float *)v131.i32);
          *(float *)v131.i32 = ceilf(v489 / log2f(v488));
          if (*(float *)v131.i32 > (float)v821)
            *(float *)v131.i32 = (float)v821;
          v821 = (int)*(float *)v131.i32;
        }
      }
      else
      {
        v146 = v818;
      }
      if (++v823 >= v821)
      {
        if (!*((_DWORD *)v248 + 6) || (int)v868 < 1)
          break;
        v490 = 0;
        v852 = (float)((float)(v172 * v172) + (float)(v814 * v814)) + (float)(v813 * v813);
        v866 = v868;
        v491 = 52 * v868;
        v492 = 1.0;
        v493 = -1.0;
        v494 = "y: %{public}@";
LABEL_415:
        v495 = 0;
        do
        {
          v520 = (float *)&v130[v495 / 4];
          v521 = *(float *)&v130[v495 / 4 + 6];
          if (fabs(v521) < v492)
          {
            v496 = v520[8];
            v497 = v520[7];
            v498 = v520[3];
            v499 = *v520;
            v500 = asin(-v521);
            v501 = atan2(v498, v499);
            v502 = atan2(v497, v496);
          }
          else
          {
            v522 = v520[1];
            v523 = v520[2];
            if (v521 <= v493)
            {
              v501 = 0.0;
              v502 = atan2(v522, v523) + 0.0;
              v500 = 1.57079633;
            }
            else
            {
              v502 = atan2(-v522, -v523);
              v501 = 0.0;
              v500 = *((double *)v494 + 291);
            }
          }
          v503 = __sincos_stret(v501);
          v504 = __sincos_stret(v500);
          v508 = __sincos_stret(v502);
          v514 = v504.__sinval * v503.__cosval * v508.__sinval - v503.__sinval * v508.__cosval;
          v512 = v504.__cosval * v503.__sinval;
          v509 = v503.__cosval * v508.__cosval + v504.__sinval * v503.__sinval * v508.__sinval;
          v510 = v504.__sinval * v503.__sinval * v508.__cosval - v503.__cosval * v508.__sinval;
          v511 = v504.__cosval * v503.__cosval;
          *(float *)&v512 = v504.__cosval * v503.__sinval;
          sinval = v504.__sinval;
          *(float *)&v514 = v514;
          *v520 = v511;
          v520[1] = *(float *)&v514;
          v515 = v509;
          v516 = v504.__cosval * v508.__sinval;
          v520[6] = -sinval;
          v520[7] = v516;
          v517 = v503.__sinval * v508.__sinval + v504.__sinval * v503.__cosval * v508.__cosval;
          v520[2] = v517;
          v520[3] = *(float *)&v512;
          v518 = v510;
          v520[4] = v515;
          v520[5] = v518;
          v519 = v504.__cosval * v508.__cosval;
          v520[8] = v519;
          v495 += 52;
        }
        while (v491 != v495);
        v524 = v494;
        v525 = &v130[13 * v490];
        v526 = *((float *)v830 + 1);
        v899 = 0u;
        v900 = 0u;
        v897 = 0u;
        v898 = 0u;
        v896 = 0u;
        v528 = *((_OWORD *)v525 + 1);
        v527 = *((_OWORD *)v525 + 2);
        v529 = *(_OWORD *)v525;
        v889 = *(_OWORD *)v525;
        v890 = v528;
        *(_OWORD *)v891 = v527;
        v530 = *(_QWORD *)v847;
        v877 = (float32x4_t)vdupq_n_s32(0x378637BEu);
        if ((int)*(_QWORD *)v847 < 1)
        {
          v534 = 0;
        }
        else
        {
          LODWORD(v527) = HIDWORD(v889);
          LODWORD(v528) = DWORD2(v889);
          LODWORD(v514) = DWORD1(v889);
          LODWORD(v529) = v889;
          LODWORD(v512) = *(_DWORD *)v891;
          LODWORD(v509) = HIDWORD(v890);
          LODWORD(v510) = DWORD2(v890);
          *(float *)v505.i32 = (float)((float)(*((float *)&v889 + 3) * *(float *)&v891[8])
                                     + (float)(*(float *)&v889 * *(float *)&v891[4]))
                             + (float)(*((float *)&v890 + 2) * *(float *)&v891[12]);
          *(float *)v506.i32 = (float)((float)(*(float *)&v891[8] * *(float *)&v890)
                                     + (float)(*((float *)&v889 + 1) * *(float *)&v891[4]))
                             + (float)(*((float *)&v890 + 3) * *(float *)&v891[12]);
          *(float *)v507.i32 = (float)((float)(*(float *)&v891[8] * *((float *)&v890 + 1))
                                     + (float)(*((float *)&v889 + 2) * *(float *)&v891[4]))
                             + (float)(*(float *)v891 * *(float *)&v891[12]);
          v531 = *(const float **)(v847 + 32);
          v532 = *(_QWORD *)(v847 + 8);
          if (*(_QWORD *)v847 >= 8uLL)
          {
            v869 = v526;
            v533 = v530 & 0xFFFFFFF8;
            v535 = (float *)(v532 + 8 * (*(_QWORD *)v847 & 0xFFFFFFF8));
            v536 = (float *)&v531[3 * (*(_QWORD *)v847 & 0xFFFFFFF8)];
            v537 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v529, 0);
            v538 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v510, 0);
            v539 = (float32x4_t)vdupq_lane_s32(v505, 0);
            v540 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v514, 0);
            v541 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v509, 0);
            v542 = (const float *)(v532 + 32);
            v543 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v506.i8, 0);
            v544 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v528, 0);
            v506.i64[0] = 0;
            v506.i64[1] = 0;
            v545 = *(_QWORD *)v847 & 0xFFFFFFF8;
            v546 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v512, 0);
            v547 = 0uLL;
            v548 = (float32x4_t)vdupq_lane_s32(v507, 0);
            do
            {
              v549 = v531;
              v916 = vld3q_f32(v549);
              v549 += 12;
              v923 = vld3q_f32(v549);
              v550 = v542 - 8;
              v551 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v916.val[1], *((float *)&v889 + 3)), v916.val[0], v537), v916.val[2], v538), v539);
              v552 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v916.val[1], *(float *)&v890), v916.val[0], v540), v916.val[2], v541), v543);
              v553 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v916.val[1], *((float *)&v890 + 1)), v916.val[0], v544), v916.val[2], v546);
              v554 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v923.val[1], *(float *)&v890), v923.val[0], v540), v923.val[2], v541);
              v555 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v923.val[1], *((float *)&v890 + 1)), v923.val[0], v544), v923.val[2], v546);
              *(float32x4x2_t *)v916.val[0].f32 = vld2q_f32(v550);
              v916.val[2] = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v923.val[1], *((float *)&v889 + 3)), v923.val[0], v537), v923.val[2], v538), v539);
              *(float32x4x2_t *)v923.val[0].f32 = vld2q_f32(v542);
              v556 = vmlsq_f32(v552, v551, v916.val[0]);
              v557 = vmlsq_f32(vsubq_f32(v553, v548), v551, v916.val[1]);
              v558 = vmlsq_f32(vsubq_f32(v555, v548), v916.val[2], v923.val[1]);
              v559 = vmlsq_f32(vsubq_f32(v554, v543), v916.val[2], v923.val[0]);
              v506 = vsubq_s32(v506, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v551, v551), v877), vmlaq_f32(vmulq_f32(v557, v557), v556, v556)), (int8x16_t)vcgtzq_f32(v551)));
              v547 = vsubq_s32(v547, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v916.val[2], v916.val[2]), v877), vmlaq_f32(vmulq_f32(v558, v558), v559, v559)), (int8x16_t)vcgtzq_f32(v916.val[2])));
              v531 += 24;
              v542 += 16;
              v545 -= 8;
            }
            while (v545);
            v534 = vaddvq_s32(vaddq_s32(v547, v506));
            v172 = v831;
            v492 = 1.0;
            v493 = -1.0;
            v526 = v869;
            *(float *)v505.i32 = (float)((float)(*((float *)&v889 + 3) * *(float *)&v891[8])
                                       + (float)(*(float *)&v889 * *(float *)&v891[4]))
                               + (float)(*((float *)&v890 + 2) * *(float *)&v891[12]);
            *(float *)v507.i32 = (float)((float)(*(float *)&v891[8] * *((float *)&v890 + 1))
                                       + (float)(*((float *)&v889 + 2) * *(float *)&v891[4]))
                               + (float)(*(float *)v891 * *(float *)&v891[12]);
            *(float *)v506.i32 = (float)((float)(*(float *)&v891[8] * *(float *)&v890)
                                       + (float)(*((float *)&v889 + 1) * *(float *)&v891[4]))
                               + (float)(*((float *)&v890 + 3) * *(float *)&v891[12]);
            if ((v530 & 7) != 0)
              goto LABEL_429;
          }
          else
          {
            v533 = 0;
            v534 = 0;
            v535 = *(float **)(v847 + 8);
            v536 = *(float **)(v847 + 32);
LABEL_429:
            v560 = v530 - v533;
            do
            {
              v561 = v536[1];
              v562 = v536[2];
              v563 = (float)((float)((float)(*((float *)&v889 + 3) * v561) + (float)(*(float *)&v889 * *v536))
                           + (float)(*((float *)&v890 + 2) * v562))
                   - *(float *)v505.i32;
              v564 = (float)((float)(*((float *)&v890 + 1) * v561) + (float)(*((float *)&v889 + 2) * *v536))
                   + (float)(*(float *)v891 * v562);
              v565 = (float)((float)((float)(*(float *)&v890 * v561) + (float)(*((float *)&v889 + 1) * *v536))
                           + (float)(*((float *)&v890 + 3) * v562))
                   - *(float *)v506.i32;
              v566 = *v535;
              v567 = v535[1];
              v535 += 2;
              v568 = (float)((float)((float)((float)(v564 - *(float *)v507.i32) - (float)(v567 * v563))
                                   * (float)((float)(v564 - *(float *)v507.i32) - (float)(v567 * v563)))
                           + (float)((float)(v565 - (float)(v566 * v563)) * (float)(v565 - (float)(v566 * v563)))) < (float)((float)(v563 * v563) * 0.000016);
              if (v563 <= 0.0)
                v568 = 0;
              v534 += v568;
              v536 += 3;
              --v560;
            }
            while (v560);
          }
        }
        v569 = &v130[13 * v490];
        v569[12] = v534;
        v570 = v569 + 12;
        vl_pose_count_inliers((uint64_t)&v889, (uint64_t *)v847, v819, 0, (uint64_t)&v896, v526, *(double *)&v527, *(double *)&v528, *(double *)&v529, v514, v512);
        v571 = vl_pose_refine((float32x2_t *)&v889, (uint64_t)&v896, (uint64_t *)&v897 + 1, 2, (float32x2_t *)&v889, 0, 1.0, 0.0, 0.0);
        v581 = *(_QWORD *)v847;
        if ((int)*(_QWORD *)v847 < 1)
        {
          v585 = 0;
        }
        else
        {
          v578.i32[0] = DWORD2(v889);
          LODWORD(v573) = DWORD1(v889);
          v572.i32[0] = v889;
          LODWORD(v574) = *(_DWORD *)v891;
          v576.i32[0] = HIDWORD(v890);
          v575.i32[0] = DWORD2(v890);
          *(float *)v577.i32 = (float)((float)(*((float *)&v889 + 3) * *(float *)&v891[8])
                                     + (float)(*(float *)&v889 * *(float *)&v891[4]))
                             + (float)(*((float *)&v890 + 2) * *(float *)&v891[12]);
          *(float *)v579.i32 = (float)((float)(*(float *)&v891[8] * *(float *)&v890)
                                     + (float)(*((float *)&v889 + 1) * *(float *)&v891[4]))
                             + (float)(*((float *)&v890 + 3) * *(float *)&v891[12]);
          *(float *)v580.i32 = (float)((float)(*(float *)&v891[8] * *((float *)&v890 + 1))
                                     + (float)(*((float *)&v889 + 2) * *(float *)&v891[4]))
                             + (float)(*(float *)v891 * *(float *)&v891[12]);
          v582 = *(const float **)(v847 + 32);
          v583 = *(_QWORD *)(v847 + 8);
          if (*(_QWORD *)v847 >= 8uLL)
          {
            v870 = v571;
            v584 = v581 & 0xFFFFFFF8;
            v586 = (float *)(v583 + 8 * (*(_QWORD *)v847 & 0xFFFFFFF8));
            v587 = (float *)&v582[3 * (*(_QWORD *)v847 & 0xFFFFFFF8)];
            v588 = (float32x4_t)vdupq_lane_s32(v572, 0);
            v589 = (float32x4_t)vdupq_lane_s32(v575, 0);
            v590 = (float32x4_t)vdupq_lane_s32(v577, 0);
            v591 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v573, 0);
            v592 = (float32x4_t)vdupq_lane_s32(v576, 0);
            v593 = (const float *)(v583 + 32);
            v594 = (float32x4_t)vdupq_lane_s32(v579, 0);
            v595 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v578.i8, 0);
            v578 = 0uLL;
            v596 = *(_QWORD *)v847 & 0xFFFFFFF8;
            v597 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v574, 0);
            v598 = 0uLL;
            v599 = (float32x4_t)vdupq_lane_s32(v580, 0);
            do
            {
              v600 = v582;
              v917 = vld3q_f32(v600);
              v600 += 12;
              v924 = vld3q_f32(v600);
              v601 = v593 - 8;
              v602 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v917.val[1], *((float *)&v889 + 3)), v917.val[0], v588), v917.val[2], v589), v590);
              v603 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v917.val[1], *(float *)&v890), v917.val[0], v591), v917.val[2], v592), v594);
              v604 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v917.val[1], *((float *)&v890 + 1)), v917.val[0], v595), v917.val[2], v597);
              v605 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v924.val[1], *(float *)&v890), v924.val[0], v591), v924.val[2], v592);
              v606 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v924.val[1], *((float *)&v890 + 1)), v924.val[0], v595), v924.val[2], v597);
              *(float32x4x2_t *)v917.val[0].f32 = vld2q_f32(v601);
              v917.val[2] = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v924.val[1], *((float *)&v889 + 3)), v924.val[0], v588), v924.val[2], v589), v590);
              *(float32x4x2_t *)v924.val[0].f32 = vld2q_f32(v593);
              v607 = vmlsq_f32(v603, v602, v917.val[0]);
              v608 = vmlsq_f32(vsubq_f32(v604, v599), v602, v917.val[1]);
              v609 = vmlsq_f32(vsubq_f32(v606, v599), v917.val[2], v924.val[1]);
              v610 = vmlsq_f32(vsubq_f32(v605, v594), v917.val[2], v924.val[0]);
              v578 = vsubq_s32(v578, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v602, v602), v877), vmlaq_f32(vmulq_f32(v608, v608), v607, v607)), (int8x16_t)vcgtzq_f32(v602)));
              v598 = vsubq_s32(v598, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v917.val[2], v917.val[2]), v877), vmlaq_f32(vmulq_f32(v609, v609), v610, v610)), (int8x16_t)vcgtzq_f32(v917.val[2])));
              v582 += 24;
              v593 += 16;
              v596 -= 8;
            }
            while (v596);
            v585 = vaddvq_s32(vaddq_s32(v598, v578));
            v172 = v831;
            v492 = 1.0;
            v493 = -1.0;
            v571 = v870;
            *(float *)v577.i32 = (float)((float)(*((float *)&v889 + 3) * *(float *)&v891[8])
                                       + (float)(*(float *)&v889 * *(float *)&v891[4]))
                               + (float)(*((float *)&v890 + 2) * *(float *)&v891[12]);
            v578.i32[0] = DWORD2(v889);
            *(float *)v580.i32 = (float)((float)(*(float *)&v891[8] * *((float *)&v890 + 1))
                                       + (float)(*((float *)&v889 + 2) * *(float *)&v891[4]))
                               + (float)(*(float *)v891 * *(float *)&v891[12]);
            *(float *)v579.i32 = (float)((float)(*(float *)&v891[8] * *(float *)&v890)
                                       + (float)(*((float *)&v889 + 1) * *(float *)&v891[4]))
                               + (float)(*((float *)&v890 + 3) * *(float *)&v891[12]);
            if ((v581 & 7) != 0)
              goto LABEL_440;
          }
          else
          {
            v584 = 0;
            v585 = 0;
            v586 = *(float **)(v847 + 8);
            v587 = *(float **)(v847 + 32);
LABEL_440:
            v611 = v581 - v584;
            do
            {
              v612 = v587[1];
              v613 = v587[2];
              v614 = (float)((float)((float)(*((float *)&v889 + 3) * v612) + (float)(*(float *)&v889 * *v587))
                           + (float)(*((float *)&v890 + 2) * v613))
                   - *(float *)v577.i32;
              v615 = (float)((float)(*((float *)&v890 + 1) * v612) + (float)(*(float *)v578.i32 * *v587))
                   + (float)(*(float *)v891 * v613);
              v616 = (float)((float)((float)(*(float *)&v890 * v612) + (float)(*((float *)&v889 + 1) * *v587))
                           + (float)(*((float *)&v890 + 3) * v613))
                   - *(float *)v579.i32;
              v617 = *v586;
              v618 = v586[1];
              v586 += 2;
              v619 = (float)((float)((float)((float)(v615 - *(float *)v580.i32) - (float)(v618 * v614))
                                   * (float)((float)(v615 - *(float *)v580.i32) - (float)(v618 * v614)))
                           + (float)((float)(v616 - (float)(v617 * v614)) * (float)(v616 - (float)(v617 * v614)))) < (float)((float)(v614 * v614) * 0.000016);
              if (v614 <= 0.0)
                v619 = 0;
              v585 += v619;
              v587 += 3;
              --v611;
            }
            while (v611);
          }
        }
        if (v585 >= *v570)
        {
          v621 = v889;
          HIDWORD(v620) = DWORD1(v890);
          v622 = *(_OWORD *)v891;
          *((_OWORD *)v525 + 1) = v890;
          *((_OWORD *)v525 + 2) = v622;
          *(_OWORD *)v525 = v621;
          *v570 = v585;
          LODWORD(v620) = 998445679;
          vl_pose_count_inliers((uint64_t)&v889, (uint64_t *)v847, v819, 0, (uint64_t)&v896, fmaxf(v571 + v571, 0.004), v620, *(double *)&v622, *(double *)&v621, v573, v574);
          v623 = vl_pose_refine((float32x2_t *)&v889, (uint64_t)&v896, (uint64_t *)&v897 + 1, 2, (float32x2_t *)&v889, 0, 1.0, 0.0, 0.0);
          v633 = *(_QWORD *)v847;
          if ((int)*(_QWORD *)v847 < 1)
          {
            v637 = 0;
          }
          else
          {
            v630.i32[0] = DWORD2(v889);
            LODWORD(v625) = DWORD1(v889);
            v624.i32[0] = v889;
            LODWORD(v626) = *(_DWORD *)v891;
            v628.i32[0] = HIDWORD(v890);
            v627.i32[0] = DWORD2(v890);
            *(float *)v629.i32 = (float)((float)(*((float *)&v889 + 3) * *(float *)&v891[8])
                                       + (float)(*(float *)&v889 * *(float *)&v891[4]))
                               + (float)(*((float *)&v890 + 2) * *(float *)&v891[12]);
            *(float *)v631.i32 = (float)((float)(*(float *)&v891[8] * *(float *)&v890)
                                       + (float)(*((float *)&v889 + 1) * *(float *)&v891[4]))
                               + (float)(*((float *)&v890 + 3) * *(float *)&v891[12]);
            *(float *)v632.i32 = (float)((float)(*(float *)&v891[8] * *((float *)&v890 + 1))
                                       + (float)(*((float *)&v889 + 2) * *(float *)&v891[4]))
                               + (float)(*(float *)v891 * *(float *)&v891[12]);
            v634 = *(const float **)(v847 + 32);
            v635 = *(_QWORD *)(v847 + 8);
            if (*(_QWORD *)v847 >= 8uLL)
            {
              v871 = v623;
              v636 = v633 & 0xFFFFFFF8;
              v638 = (float *)(v635 + 8 * (*(_QWORD *)v847 & 0xFFFFFFF8));
              v639 = (float *)&v634[3 * (*(_QWORD *)v847 & 0xFFFFFFF8)];
              v640 = (float32x4_t)vdupq_lane_s32(v624, 0);
              v641 = (float32x4_t)vdupq_lane_s32(v627, 0);
              v642 = (float32x4_t)vdupq_lane_s32(v629, 0);
              v643 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v625, 0);
              v644 = (float32x4_t)vdupq_lane_s32(v628, 0);
              v645 = (const float *)(v635 + 32);
              v646 = (float32x4_t)vdupq_lane_s32(v631, 0);
              v647 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v630.i8, 0);
              v630 = 0uLL;
              v648 = *(_QWORD *)v847 & 0xFFFFFFF8;
              v649 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v626, 0);
              v650 = 0uLL;
              v651 = (float32x4_t)vdupq_lane_s32(v632, 0);
              do
              {
                v652 = v634;
                v918 = vld3q_f32(v652);
                v652 += 12;
                v925 = vld3q_f32(v652);
                v653 = v645 - 8;
                v654 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v918.val[1], *((float *)&v889 + 3)), v918.val[0], v640), v918.val[2], v641), v642);
                v655 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v918.val[1], *(float *)&v890), v918.val[0], v643), v918.val[2], v644), v646);
                v656 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v918.val[1], *((float *)&v890 + 1)), v918.val[0], v647), v918.val[2], v649);
                v657 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v925.val[1], *(float *)&v890), v925.val[0], v643), v925.val[2], v644);
                v658 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v925.val[1], *((float *)&v890 + 1)), v925.val[0], v647), v925.val[2], v649);
                *(float32x4x2_t *)v918.val[0].f32 = vld2q_f32(v653);
                v918.val[2] = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v925.val[1], *((float *)&v889 + 3)), v925.val[0], v640), v925.val[2], v641), v642);
                *(float32x4x2_t *)v925.val[0].f32 = vld2q_f32(v645);
                v659 = vmlsq_f32(v655, v654, v918.val[0]);
                v660 = vmlsq_f32(vsubq_f32(v656, v651), v654, v918.val[1]);
                v661 = vmlsq_f32(vsubq_f32(v658, v651), v918.val[2], v925.val[1]);
                v662 = vmlsq_f32(vsubq_f32(v657, v646), v918.val[2], v925.val[0]);
                v630 = vsubq_s32(v630, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v654, v654), v877), vmlaq_f32(vmulq_f32(v660, v660), v659, v659)), (int8x16_t)vcgtzq_f32(v654)));
                v650 = vsubq_s32(v650, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v918.val[2], v918.val[2]), v877), vmlaq_f32(vmulq_f32(v661, v661), v662, v662)), (int8x16_t)vcgtzq_f32(v918.val[2])));
                v634 += 24;
                v645 += 16;
                v648 -= 8;
              }
              while (v648);
              v637 = vaddvq_s32(vaddq_s32(v650, v630));
              v172 = v831;
              v492 = 1.0;
              v493 = -1.0;
              v623 = v871;
              *(float *)v629.i32 = (float)((float)(*((float *)&v889 + 3) * *(float *)&v891[8])
                                         + (float)(*(float *)&v889 * *(float *)&v891[4]))
                                 + (float)(*((float *)&v890 + 2) * *(float *)&v891[12]);
              v630.i32[0] = DWORD2(v889);
              *(float *)v632.i32 = (float)((float)(*(float *)&v891[8] * *((float *)&v890 + 1))
                                         + (float)(*((float *)&v889 + 2) * *(float *)&v891[4]))
                                 + (float)(*(float *)v891 * *(float *)&v891[12]);
              *(float *)v631.i32 = (float)((float)(*(float *)&v891[8] * *(float *)&v890)
                                         + (float)(*((float *)&v889 + 1) * *(float *)&v891[4]))
                                 + (float)(*((float *)&v890 + 3) * *(float *)&v891[12]);
              if ((v633 & 7) != 0)
                goto LABEL_452;
            }
            else
            {
              v636 = 0;
              v637 = 0;
              v638 = *(float **)(v847 + 8);
              v639 = *(float **)(v847 + 32);
LABEL_452:
              v663 = v633 - v636;
              do
              {
                v664 = v639[1];
                v665 = v639[2];
                v666 = (float)((float)((float)(*((float *)&v889 + 3) * v664) + (float)(*(float *)&v889 * *v639))
                             + (float)(*((float *)&v890 + 2) * v665))
                     - *(float *)v629.i32;
                v667 = (float)((float)(*((float *)&v890 + 1) * v664) + (float)(*(float *)v630.i32 * *v639))
                     + (float)(*(float *)v891 * v665);
                v668 = (float)((float)((float)(*(float *)&v890 * v664) + (float)(*((float *)&v889 + 1) * *v639))
                             + (float)(*((float *)&v890 + 3) * v665))
                     - *(float *)v631.i32;
                v669 = *v638;
                v670 = v638[1];
                v638 += 2;
                v671 = (float)((float)((float)((float)(v667 - *(float *)v632.i32) - (float)(v670 * v666))
                                     * (float)((float)(v667 - *(float *)v632.i32) - (float)(v670 * v666)))
                             + (float)((float)(v668 - (float)(v669 * v666)) * (float)(v668 - (float)(v669 * v666)))) < (float)((float)(v666 * v666) * 0.000016);
                if (v666 <= 0.0)
                  v671 = 0;
                v637 += v671;
                v639 += 3;
                --v663;
              }
              while (v663);
            }
          }
          if (v637 >= *v570)
          {
            v673 = v889;
            HIDWORD(v672) = DWORD1(v890);
            v674 = *(_OWORD *)v891;
            *((_OWORD *)v525 + 1) = v890;
            *((_OWORD *)v525 + 2) = v674;
            *(_OWORD *)v525 = v673;
            *v570 = v637;
            LODWORD(v672) = 998445679;
            vl_pose_count_inliers((uint64_t)&v889, (uint64_t *)v847, v819, 0, (uint64_t)&v896, fmaxf(v623 + v623, 0.004), v672, *(double *)&v674, *(double *)&v673, v625, v626);
            v675 = vl_pose_refine((float32x2_t *)&v889, (uint64_t)&v896, (uint64_t *)&v897 + 1, 2, (float32x2_t *)&v889, 0, 1.0, 0.0, 0.0);
            v685 = *(_QWORD *)v847;
            if ((int)*(_QWORD *)v847 < 1)
            {
              v689 = 0;
            }
            else
            {
              v682.i32[0] = DWORD2(v889);
              LODWORD(v677) = DWORD1(v889);
              v676.i32[0] = v889;
              LODWORD(v678) = *(_DWORD *)v891;
              v680.i32[0] = HIDWORD(v890);
              v679.i32[0] = DWORD2(v890);
              *(float *)v681.i32 = (float)((float)(*((float *)&v889 + 3) * *(float *)&v891[8])
                                         + (float)(*(float *)&v889 * *(float *)&v891[4]))
                                 + (float)(*((float *)&v890 + 2) * *(float *)&v891[12]);
              *(float *)v683.i32 = (float)((float)(*(float *)&v891[8] * *(float *)&v890)
                                         + (float)(*((float *)&v889 + 1) * *(float *)&v891[4]))
                                 + (float)(*((float *)&v890 + 3) * *(float *)&v891[12]);
              *(float *)v684.i32 = (float)((float)(*(float *)&v891[8] * *((float *)&v890 + 1))
                                         + (float)(*((float *)&v889 + 2) * *(float *)&v891[4]))
                                 + (float)(*(float *)v891 * *(float *)&v891[12]);
              v686 = *(const float **)(v847 + 32);
              v687 = *(_QWORD *)(v847 + 8);
              if (*(_QWORD *)v847 >= 8uLL)
              {
                v872 = v675;
                v688 = v685 & 0xFFFFFFF8;
                v690 = (float *)(v687 + 8 * (*(_QWORD *)v847 & 0xFFFFFFF8));
                v691 = (float *)&v686[3 * (*(_QWORD *)v847 & 0xFFFFFFF8)];
                v692 = (float32x4_t)vdupq_lane_s32(v676, 0);
                v693 = (float32x4_t)vdupq_lane_s32(v679, 0);
                v694 = (float32x4_t)vdupq_lane_s32(v681, 0);
                v695 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v677, 0);
                v696 = (float32x4_t)vdupq_lane_s32(v680, 0);
                v697 = (const float *)(v687 + 32);
                v698 = (float32x4_t)vdupq_lane_s32(v683, 0);
                v699 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v682.i8, 0);
                v682 = 0uLL;
                v700 = *(_QWORD *)v847 & 0xFFFFFFF8;
                v701 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v678, 0);
                v702 = 0uLL;
                v703 = (float32x4_t)vdupq_lane_s32(v684, 0);
                do
                {
                  v704 = v686;
                  v919 = vld3q_f32(v704);
                  v704 += 12;
                  v926 = vld3q_f32(v704);
                  v705 = v697 - 8;
                  v706 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v919.val[1], *((float *)&v889 + 3)), v919.val[0], v692), v919.val[2], v693), v694);
                  v707 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v919.val[1], *(float *)&v890), v919.val[0], v695), v919.val[2], v696), v698);
                  v708 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v919.val[1], *((float *)&v890 + 1)), v919.val[0], v699), v919.val[2], v701);
                  v709 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v926.val[1], *(float *)&v890), v926.val[0], v695), v926.val[2], v696);
                  v710 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v926.val[1], *((float *)&v890 + 1)), v926.val[0], v699), v926.val[2], v701);
                  *(float32x4x2_t *)v919.val[0].f32 = vld2q_f32(v705);
                  v919.val[2] = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v926.val[1], *((float *)&v889 + 3)), v926.val[0], v692), v926.val[2], v693), v694);
                  *(float32x4x2_t *)v926.val[0].f32 = vld2q_f32(v697);
                  v711 = vmlsq_f32(v707, v706, v919.val[0]);
                  v712 = vmlsq_f32(vsubq_f32(v708, v703), v706, v919.val[1]);
                  v713 = vmlsq_f32(vsubq_f32(v710, v703), v919.val[2], v926.val[1]);
                  v714 = vmlsq_f32(vsubq_f32(v709, v698), v919.val[2], v926.val[0]);
                  v682 = vsubq_s32(v682, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v706, v706), v877), vmlaq_f32(vmulq_f32(v712, v712), v711, v711)), (int8x16_t)vcgtzq_f32(v706)));
                  v702 = vsubq_s32(v702, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v919.val[2], v919.val[2]), v877), vmlaq_f32(vmulq_f32(v713, v713), v714, v714)), (int8x16_t)vcgtzq_f32(v919.val[2])));
                  v686 += 24;
                  v697 += 16;
                  v700 -= 8;
                }
                while (v700);
                v689 = vaddvq_s32(vaddq_s32(v702, v682));
                v172 = v831;
                v492 = 1.0;
                v493 = -1.0;
                v675 = v872;
                *(float *)v681.i32 = (float)((float)(*((float *)&v889 + 3) * *(float *)&v891[8])
                                           + (float)(*(float *)&v889 * *(float *)&v891[4]))
                                   + (float)(*((float *)&v890 + 2) * *(float *)&v891[12]);
                v682.i32[0] = DWORD2(v889);
                *(float *)v684.i32 = (float)((float)(*(float *)&v891[8] * *((float *)&v890 + 1))
                                           + (float)(*((float *)&v889 + 2) * *(float *)&v891[4]))
                                   + (float)(*(float *)v891 * *(float *)&v891[12]);
                *(float *)v683.i32 = (float)((float)(*(float *)&v891[8] * *(float *)&v890)
                                           + (float)(*((float *)&v889 + 1) * *(float *)&v891[4]))
                                   + (float)(*((float *)&v890 + 3) * *(float *)&v891[12]);
                if ((v685 & 7) != 0)
                  goto LABEL_464;
              }
              else
              {
                v688 = 0;
                v689 = 0;
                v690 = *(float **)(v847 + 8);
                v691 = *(float **)(v847 + 32);
LABEL_464:
                v715 = v685 - v688;
                do
                {
                  v716 = v691[1];
                  v717 = v691[2];
                  v718 = (float)((float)((float)(*((float *)&v889 + 3) * v716) + (float)(*(float *)&v889 * *v691))
                               + (float)(*((float *)&v890 + 2) * v717))
                       - *(float *)v681.i32;
                  v719 = (float)((float)(*((float *)&v890 + 1) * v716) + (float)(*(float *)v682.i32 * *v691))
                       + (float)(*(float *)v891 * v717);
                  v720 = (float)((float)((float)(*(float *)&v890 * v716) + (float)(*((float *)&v889 + 1) * *v691))
                               + (float)(*((float *)&v890 + 3) * v717))
                       - *(float *)v683.i32;
                  v721 = *v690;
                  v722 = v690[1];
                  v690 += 2;
                  v723 = (float)((float)((float)((float)(v719 - *(float *)v684.i32) - (float)(v722 * v718))
                                       * (float)((float)(v719 - *(float *)v684.i32) - (float)(v722 * v718)))
                               + (float)((float)(v720 - (float)(v721 * v718)) * (float)(v720 - (float)(v721 * v718)))) < (float)((float)(v718 * v718) * 0.000016);
                  if (v718 <= 0.0)
                    v723 = 0;
                  v689 += v723;
                  v691 += 3;
                  --v715;
                }
                while (v715);
              }
            }
            if (v689 >= *v570)
            {
              v725 = v889;
              HIDWORD(v724) = DWORD1(v890);
              v726 = *(_OWORD *)v891;
              *((_OWORD *)v525 + 1) = v890;
              *((_OWORD *)v525 + 2) = v726;
              *(_OWORD *)v525 = v725;
              *v570 = v689;
              LODWORD(v724) = 998445679;
              vl_pose_count_inliers((uint64_t)&v889, (uint64_t *)v847, v819, 0, (uint64_t)&v896, fmaxf(v675 + v675, 0.004), v724, *(double *)&v726, *(double *)&v725, v677, v678);
              vl_pose_refine((float32x2_t *)&v889, (uint64_t)&v896, (uint64_t *)&v897 + 1, 2, (float32x2_t *)&v889, 0, 1.0, 0.0, 0.0);
              v736 = *(_QWORD *)v847;
              if ((int)*(_QWORD *)v847 < 1)
              {
                v740 = 0;
              }
              else
              {
                v727.i32[0] = DWORD2(v889);
                v729.i32[0] = DWORD1(v889);
                v728.i32[0] = v889;
                v730.i32[0] = *(_DWORD *)v891;
                v732.i32[0] = HIDWORD(v890);
                v731.i32[0] = DWORD2(v890);
                *(float *)v733.i32 = (float)((float)(*((float *)&v889 + 3) * *(float *)&v891[8])
                                           + (float)(*(float *)&v889 * *(float *)&v891[4]))
                                   + (float)(*((float *)&v890 + 2) * *(float *)&v891[12]);
                *(float *)v734.i32 = (float)((float)(*(float *)&v891[8] * *(float *)&v890)
                                           + (float)(*((float *)&v889 + 1) * *(float *)&v891[4]))
                                   + (float)(*((float *)&v890 + 3) * *(float *)&v891[12]);
                *(float *)v735.i32 = (float)((float)(*(float *)&v891[8] * *((float *)&v890 + 1))
                                           + (float)(*((float *)&v889 + 2) * *(float *)&v891[4]))
                                   + (float)(*(float *)v891 * *(float *)&v891[12]);
                v737 = *(const float **)(v847 + 32);
                v738 = *(_QWORD *)(v847 + 8);
                if (*(_QWORD *)v847 >= 8uLL)
                {
                  v739 = v736 & 0xFFFFFFF8;
                  v741 = (float *)(v738 + 8 * (*(_QWORD *)v847 & 0xFFFFFFF8));
                  v742 = (float *)&v737[3 * (*(_QWORD *)v847 & 0xFFFFFFF8)];
                  v743 = (float32x4_t)vdupq_lane_s32(v728, 0);
                  v744 = (float32x4_t)vdupq_lane_s32(v731, 0);
                  v745 = (float32x4_t)vdupq_lane_s32(v733, 0);
                  v746 = (float32x4_t)vdupq_lane_s32(v729, 0);
                  v747 = (float32x4_t)vdupq_lane_s32(v732, 0);
                  v748 = (const float *)(v738 + 32);
                  v749 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v734.i8, 0);
                  v750 = (float32x4_t)vdupq_lane_s32(v727, 0);
                  v734 = 0uLL;
                  v751 = *(_QWORD *)v847 & 0xFFFFFFF8;
                  v752 = (float32x4_t)vdupq_lane_s32(v730, 0);
                  v753 = 0uLL;
                  v754 = (float32x4_t)vdupq_lane_s32(v735, 0);
                  do
                  {
                    v755 = v737;
                    v920 = vld3q_f32(v755);
                    v755 += 12;
                    v927 = vld3q_f32(v755);
                    v756 = v748 - 8;
                    v757 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v920.val[1], *((float *)&v889 + 3)), v920.val[0], v743), v920.val[2], v744), v745);
                    v758 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v920.val[1], *(float *)&v890), v920.val[0], v746), v920.val[2], v747), v749);
                    v759 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v920.val[1], *((float *)&v890 + 1)), v920.val[0], v750), v920.val[2], v752);
                    v760 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v927.val[1], *(float *)&v890), v927.val[0], v746), v927.val[2], v747);
                    v761 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v927.val[1], *((float *)&v890 + 1)), v927.val[0], v750), v927.val[2], v752);
                    *(float32x4x2_t *)v920.val[0].f32 = vld2q_f32(v756);
                    v920.val[2] = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v927.val[1], *((float *)&v889 + 3)), v927.val[0], v743), v927.val[2], v744), v745);
                    *(float32x4x2_t *)v927.val[0].f32 = vld2q_f32(v748);
                    v762 = vmlsq_f32(v758, v757, v920.val[0]);
                    v763 = vmlsq_f32(vsubq_f32(v759, v754), v757, v920.val[1]);
                    v764 = vmlsq_f32(vsubq_f32(v761, v754), v920.val[2], v927.val[1]);
                    v765 = vmlsq_f32(vsubq_f32(v760, v749), v920.val[2], v927.val[0]);
                    v734 = vsubq_s32(v734, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v757, v757), v877), vmlaq_f32(vmulq_f32(v763, v763), v762, v762)), (int8x16_t)vcgtzq_f32(v757)));
                    v753 = vsubq_s32(v753, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v920.val[2], v920.val[2]), v877), vmlaq_f32(vmulq_f32(v764, v764), v765, v765)), (int8x16_t)vcgtzq_f32(v920.val[2])));
                    v737 += 24;
                    v748 += 16;
                    v751 -= 8;
                  }
                  while (v751);
                  v740 = vaddvq_s32(vaddq_s32(v753, v734));
                  v172 = v831;
                  v492 = 1.0;
                  v493 = -1.0;
                  *(float *)v734.i32 = (float)((float)(*(float *)&v891[8] * *(float *)&v890)
                                             + (float)(*((float *)&v889 + 1) * *(float *)&v891[4]))
                                     + (float)(*((float *)&v890 + 3) * *(float *)&v891[12]);
                  *(float *)v733.i32 = (float)((float)(*((float *)&v889 + 3) * *(float *)&v891[8])
                                             + (float)(*(float *)&v889 * *(float *)&v891[4]))
                                     + (float)(*((float *)&v890 + 2) * *(float *)&v891[12]);
                  *(float *)v735.i32 = (float)((float)(*(float *)&v891[8] * *((float *)&v890 + 1))
                                             + (float)(*((float *)&v889 + 2) * *(float *)&v891[4]))
                                     + (float)(*(float *)v891 * *(float *)&v891[12]);
                  if ((v736 & 7) != 0)
                    goto LABEL_476;
                }
                else
                {
                  v739 = 0;
                  v740 = 0;
                  v741 = *(float **)(v847 + 8);
                  v742 = *(float **)(v847 + 32);
LABEL_476:
                  v766 = v736 - v739;
                  do
                  {
                    v767 = v742[1];
                    v768 = v742[2];
                    v769 = (float)((float)((float)(*((float *)&v889 + 3) * v767) + (float)(*(float *)&v889 * *v742))
                                 + (float)(*((float *)&v890 + 2) * v768))
                         - *(float *)v733.i32;
                    v770 = (float)((float)(*((float *)&v890 + 1) * v767) + (float)(*((float *)&v889 + 2) * *v742))
                         + (float)(*(float *)v891 * v768);
                    v771 = (float)((float)((float)(*(float *)&v890 * v767) + (float)(*((float *)&v889 + 1) * *v742))
                                 + (float)(*((float *)&v890 + 3) * v768))
                         - *(float *)v734.i32;
                    v772 = *v741;
                    v773 = v741[1];
                    v741 += 2;
                    v774 = (float)((float)((float)((float)(v770 - *(float *)v735.i32) - (float)(v773 * v769))
                                         * (float)((float)(v770 - *(float *)v735.i32) - (float)(v773 * v769)))
                                 + (float)((float)(v771 - (float)(v772 * v769)) * (float)(v771 - (float)(v772 * v769)))) < (float)((float)(v769 * v769) * 0.000016);
                    if (v769 <= 0.0)
                      v774 = 0;
                    v740 += v774;
                    v742 += 3;
                    --v766;
                  }
                  while (v766);
                }
              }
              if (v740 >= *v570)
              {
                v775 = v889;
                v776 = *(_OWORD *)v891;
                *((_OWORD *)v525 + 1) = v890;
                *((_OWORD *)v525 + 2) = v776;
                *(_OWORD *)v525 = v775;
                *v570 = v740;
              }
            }
          }
        }
        free(*((void **)&v896 + 1));
        free((void *)v898);
        free(*((void **)&v899 + 1));
        if (*v570 > v130[12]
          && (float)((float)((float)((float)(v172 * *((float *)v525 + 7)) + (float)(*((float *)v525 + 6) * v814))
                           + (float)(*((float *)v525 + 8) * v813))
                   / (float)(sqrtf(v852* (float)((float)((float)(*((float *)v525 + 7) * *((float *)v525 + 7))+ (float)(*((float *)v525 + 6) * *((float *)v525 + 6)))+ (float)(*((float *)v525 + 8) * *((float *)v525 + 8))))+ 1.0e-20)) > 0.99619)
        {
          v777 = *(_OWORD *)v525;
          v778 = *((_OWORD *)v525 + 1);
          v779 = *((_OWORD *)v525 + 2);
          v130[12] = v525[12];
          *((_OWORD *)v130 + 1) = v778;
          *((_OWORD *)v130 + 2) = v779;
          *(_OWORD *)v130 = v777;
        }
        ++v490;
        v494 = v524;
        if (v490 == v866)
          break;
        goto LABEL_415;
      }
    }
  }
LABEL_485:
  v780 = *(_OWORD *)v130;
  v781 = *((_OWORD *)v130 + 2);
  *(_OWORD *)(v812 + 16) = *((_OWORD *)v130 + 1);
  *(_OWORD *)(v812 + 32) = v781;
  *(_OWORD *)v812 = v780;
  if (v824 == 32)
  {
    *(_DWORD *)v812 = 0;
    v782 = v904[0].i64[0];
    v783 = (float)(*(float *)v130 * v904[0].f32[0]) + 0.0;
    *(float *)v812 = v783;
    v784 = v904[0].i64[1];
    v785 = v783 + (float)(*((float *)v130 + 1) * v904[0].f32[3]);
    *(float *)v812 = v785;
    v786 = v904[1].i64[1];
    *(float *)v812 = v785 + (float)(*((float *)v130 + 2) * v904[1].f32[2]);
    *(_DWORD *)(v812 + 4) = 0;
    v787 = (float)(*(float *)v130 * *((float *)&v782 + 1)) + 0.0;
    *(float *)(v812 + 4) = v787;
    v788 = v904[1].i64[0];
    v789 = v787 + (float)(*((float *)v130 + 1) * v904[1].f32[0]);
    *(float *)(v812 + 4) = v789;
    *(float *)(v812 + 4) = v789 + (float)(*((float *)v130 + 2) * *((float *)&v786 + 1));
    *(_DWORD *)(v812 + 8) = 0;
    v790 = (float)(*(float *)v130 * *(float *)&v784) + 0.0;
    *(float *)(v812 + 8) = v790;
    v791 = v790 + (float)(*((float *)v130 + 1) * *((float *)&v788 + 1));
    *(float *)(v812 + 8) = v791;
    v792 = v905;
    *(float *)(v812 + 8) = v791 + (float)(*((float *)v130 + 2) * v905);
    *(_DWORD *)(v812 + 12) = 0;
    v793 = (float)(*((float *)v130 + 3) * *(float *)&v782) + 0.0;
    *(float *)(v812 + 12) = v793;
    v794 = v793 + (float)(*((float *)v130 + 4) * *((float *)&v784 + 1));
    *(float *)(v812 + 12) = v794;
    *(float *)(v812 + 12) = v794 + (float)(*((float *)v130 + 5) * *(float *)&v786);
    *(_DWORD *)(v812 + 16) = 0;
    v795 = (float)(*((float *)v130 + 3) * *((float *)&v782 + 1)) + 0.0;
    *(float *)(v812 + 16) = v795;
    v796 = v795 + (float)(*((float *)v130 + 4) * *(float *)&v788);
    *(float *)(v812 + 16) = v796;
    *(float *)(v812 + 16) = v796 + (float)(*((float *)v130 + 5) * *((float *)&v786 + 1));
    *(_DWORD *)(v812 + 20) = 0;
    v797 = (float)(*((float *)v130 + 3) * *(float *)&v784) + 0.0;
    *(float *)(v812 + 20) = v797;
    v798 = v797 + (float)(*((float *)v130 + 4) * *((float *)&v788 + 1));
    *(float *)(v812 + 20) = v798;
    *(float *)(v812 + 20) = v798 + (float)(*((float *)v130 + 5) * v792);
    *(_DWORD *)(v812 + 24) = 0;
    v799 = (float)(*((float *)v130 + 6) * *(float *)&v782) + 0.0;
    *(float *)(v812 + 24) = v799;
    v800 = v799 + (float)(*((float *)v130 + 7) * *((float *)&v784 + 1));
    *(float *)(v812 + 24) = v800;
    *(float *)(v812 + 24) = v800 + (float)(*((float *)v130 + 8) * *(float *)&v786);
    *(_DWORD *)(v812 + 28) = 0;
    v801 = (float)(*((float *)v130 + 6) * *((float *)&v782 + 1)) + 0.0;
    *(float *)(v812 + 28) = v801;
    v802 = v801 + (float)(*((float *)v130 + 7) * *(float *)&v788);
    *(float *)(v812 + 28) = v802;
    *(float *)(v812 + 28) = v802 + (float)(*((float *)v130 + 8) * *((float *)&v786 + 1));
    *(_DWORD *)(v812 + 32) = 0;
    v803 = (float)(*((float *)v130 + 6) * *(float *)&v784) + 0.0;
    *(float *)(v812 + 32) = v803;
    v804 = v803 + (float)(*((float *)v130 + 7) * *((float *)&v788 + 1));
    *(float *)(v812 + 32) = v804;
    *(float *)(v812 + 32) = v804 + (float)(*((float *)v130 + 8) * v792);
  }
  free(v130);
  free(v820);
  v147 = 1;
  v148 = v847;
  if (!*(_DWORD *)(v847 + 284))
  {
LABEL_488:
    clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(v847 + 136));
    clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(v847 + 152));
    v148 = v847;
    clock_gettime(_CLOCK_MONOTONIC, (timespec *)(v847 + 120));
    v805 = *(_QWORD *)(v148 + 128)
         - *(_QWORD *)(v148 + 80)
         + 1000000000 * (*(_QWORD *)(v148 + 120) - *(_QWORD *)(v148 + 72));
    v806 = *(_QWORD *)(v148 + 144)
         - *(_QWORD *)(v148 + 96)
         + 1000000000 * (*(_QWORD *)(v148 + 136) - *(_QWORD *)(v148 + 88));
    v807 = *(_QWORD *)(v148 + 160)
         - *(_QWORD *)(v148 + 112)
         + 1000000000 * (*(_QWORD *)(v148 + 152) - *(_QWORD *)(v148 + 104));
    v808 = *(_QWORD *)(v847 + 200);
    v809 = v805 + *(_QWORD *)(v847 + 192);
    *(_QWORD *)(v847 + 168) = v805;
    *(_QWORD *)(v847 + 176) = v806;
    v810 = v806 + v808;
    *(_QWORD *)(v847 + 184) = v807;
    *(_QWORD *)(v847 + 192) = v809;
    v811 = v807 + *(_QWORD *)(v847 + 208);
    *(_QWORD *)(v847 + 200) = v810;
    *(_QWORD *)(v847 + 208) = v811;
    ++*(_DWORD *)(v847 + 216);
    if (!*(_DWORD *)(v847 + 284))
      goto LABEL_489;
    goto LABEL_156;
  }
LABEL_155:
  *(_QWORD *)(v148 + 192) += mach_absolute_time();
  if (!*(_DWORD *)(v148 + 284))
  {
LABEL_489:
    log_col_app((uint64_t)"%s%s%s:%s%7.1fms%s", v149, v150, v151, v152, v153, v154, v155, (char)&str_4_1);
    return v147;
  }
LABEL_156:
  printf("Verbose : ");
  printf("Total time for %40s : %7.3f ms", (const char *)(v148 + 220), (double)*(uint64_t *)(v148 + 192) * 0.000001);
  putchar(10);
  return v147;
}

void vl_kpts_filter_lbl()
{
  uint64_t *v0;
  float v1;
  float v2;
  float v3;
  float v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  float *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t i;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  float v44;
  float v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  float v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  float *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  int v72;
  char *v73;
  uint64_t v74;
  float *v75;
  float v76;
  float v77;
  char *v78;
  uint64_t v79;
  BOOL v80;
  float v81;
  char *v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  int v89;
  uint64_t j;
  int v91;
  int v92;
  char *v93;
  char *v94;
  unint64_t v95;
  int v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  BOOL v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  void **v135;
  uint64_t v136;
  uint64_t v137;
  float32x2_t **v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  float32x2_t **v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  float32x2_t **v147;
  uint64_t v148;
  float32x2_t **v149;
  float32x2_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  size_t v155;
  uint64_t v156;
  float32x4_t *v157;
  uint64_t v158;
  int *v159;
  void **v160;
  void *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  float *v165;
  uint8x16_t **v166;
  uint64_t v167;
  uint64_t v168;
  uint8x16_t *v169;
  uint8x16_t **v170;
  float *v171;
  uint64_t v172;
  uint8x16_t *v173;
  uint8x16_t v174;
  uint8x16_t v175;
  uint8x16_t v176;
  uint8x16_t v177;
  int16x8_t v178;
  int16x8_t v179;
  int16x8_t v180;
  int16x8_t v181;
  uint8x16_t v182;
  uint8x16_t v183;
  uint8x16_t v184;
  uint8x16_t v185;
  int16x8_t v186;
  int16x8_t v187;
  int16x8_t v188;
  int16x8_t v189;
  int32x4_t v190;
  int32x4_t v191;
  int32x4_t v192;
  int32x4_t v193;
  int32x4_t v194;
  int32x4_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int32x4_t v198;
  int32x4_t v199;
  int32x4_t v200;
  int32x4_t v201;
  uint8x16_t v202;
  uint8x16_t v203;
  uint8x16_t v204;
  uint8x16_t v205;
  int16x8_t v206;
  int32x4_t v207;
  int16x8_t v208;
  int16x8_t v209;
  int16x8_t v210;
  int32x4_t v211;
  int32x4_t v212;
  int32x4_t v213;
  int32x4_t v214;
  int32x4_t v215;
  int32x4_t v216;
  uint8x16_t v217;
  uint8x16_t v218;
  int32x4_t v219;
  uint8x16_t v220;
  uint8x16_t v221;
  int16x8_t v222;
  int16x8_t v223;
  int16x8_t v224;
  int32x4_t v225;
  int16x8_t v226;
  int32x4_t v227;
  int32x4_t v228;
  int32x4_t v229;
  int32x4_t v230;
  int32x4_t v231;
  uint8x16_t v232;
  uint8x16_t v233;
  int32x4_t v234;
  uint8x16_t v235;
  uint8x16_t v236;
  int16x8_t v237;
  int16x8_t v238;
  int16x8_t v239;
  int16x8_t v240;
  int32x4_t v241;
  int32x4_t v242;
  int32x4_t v243;
  int32x4_t v244;
  int32x4_t v245;
  int32x4_t v246;
  int32x4_t v247;
  uint8x16_t v248;
  uint8x16_t v249;
  uint8x16_t v250;
  uint8x16_t v251;
  int16x8_t v252;
  int16x8_t v253;
  int16x8_t v254;
  int16x8_t v255;
  int32x4_t v256;
  int32x4_t v257;
  int32x4_t v258;
  int32x4_t v259;
  int32x4_t v260;
  int32x4_t v261;
  uint8x16_t v262;
  uint8x16_t v263;
  int32x4_t v264;
  uint8x16_t v265;
  uint8x16_t v266;
  int16x8_t v267;
  int16x8_t v268;
  int16x8_t v269;
  int32x4_t v270;
  int16x8_t v271;
  int32x4_t v272;
  int32x4_t v273;
  int32x4_t v274;
  int32x4_t v275;
  int32x4_t v276;
  uint8x16_t v277;
  uint8x16_t v278;
  int32x4_t v279;
  uint8x16_t v280;
  uint8x16_t v281;
  int16x8_t v282;
  int16x8_t v283;
  int16x8_t v284;
  int16x8_t v285;
  uint64_t v286;
  float32x4_t *v287;
  float32x4_t *v288;
  uint64_t v289;
  float32x4_t *v290;
  unint64_t v291;
  char *v292;
  char *v293;
  uint64_t v294;
  BOOL v295;
  uint64_t v296;
  float *v297;
  uint64_t v298;
  char *v299;
  float *v300;
  uint64_t v301;
  uint64_t k;
  float *v303;
  uint64_t v304;
  float *v305;
  uint64_t v306;
  unint64_t v307;
  float v308;
  float v309;
  float v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  float v316;
  float v317;
  uint64_t v318;
  float v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  float v327;
  float v328;
  uint64_t v329;
  float v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  char *v342;
  int v343;
  uint64_t v344;
  _DWORD *v345;
  int *v346;
  int v347;
  int *v348;
  _DWORD *v349;
  uint64_t v350;
  int v351;
  uint64_t v352;
  signed int v353;
  char *v354;
  int v355;
  uint64_t v356;
  char *v357;
  char *v358;
  uint64_t v359;
  char *v360;
  unint64_t v361;
  char v362;
  uint64_t v363;
  char *v364;
  uint64_t v365;
  char *v366;
  int v367;
  uint64_t m;
  int v369;
  int v370;
  char *v371;
  char *v372;
  int v373;
  unint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  unint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  int v391;
  char *v392;
  int *v393;
  uint64_t v394;
  int *v395;
  uint64_t v396;
  uint64_t *v397;
  uint64_t v398;
  int v399;
  void **v400;
  uint64_t *v401;
  uint64_t v402;
  uint64_t v403;
  void **v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  char *v409;
  uint64_t v410;
  float32x2_t **v411;
  float32x2_t v412;
  float v413;
  float32x2_t *v414;
  float32x2_t *v415;
  uint64_t v416;
  uint64_t v417;
  float *v418;
  int32x4_t v419;
  float32x4_t *v420;
  unint64_t v421;
  int32x4_t v422;
  int32x4_t v423;
  float32x4_t v424;
  float *v425;
  uint64_t v426;
  uint64_t v427;
  float32x2_t **v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  void *v432;
  void **v433;
  void *v434;
  uint64_t *v435;
  _QWORD *v436;
  int v437;
  char *v438;
  uint64_t v439;
  uint64_t v440;
  int v441;
  uint64_t v442;
  _DWORD *v443;
  __int8 *v444;
  int v445;
  float32x2_t **v446;
  int v447;
  uint64_t v448;
  uint64_t v449;
  int *v450;
  char *__src;
  void *ptra;
  void **ptr;
  _OWORD v454[1094];
  uint64_t v455;
  float32x4x2_t v456;

  v0 = (uint64_t *)MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v5 = v0;
  v455 = *MEMORY[0x24BDAC8D0];
  v6 = *v0;
  v7 = *v0 << 32;
  v8 = *v0;
  v9 = (int)*v0;
  v10 = (char *)malloc_type_malloc(v7 >> 28, 0x10200405730B0C9uLL);
  v437 = v6;
  if ((int)v6 >= 1)
  {
    v11 = v5[1];
    if (v8 < 2)
    {
      v12 = 0;
LABEL_7:
      v17 = v8 - v12;
      v18 = (uint64_t)&v10[16 * v12 + 4];
      v19 = v11 + 288 * v12;
      do
      {
        *(_DWORD *)(v18 - 4) = -1;
        *(_QWORD *)(v18 + 4) = v19;
        *(_DWORD *)v18 = *(_DWORD *)(v19 + 4);
        v18 += 16;
        v19 += 288;
        --v17;
      }
      while (v17);
      goto LABEL_9;
    }
    v12 = v8 & 0xFFFFFFFE;
    v13 = v10 + 16;
    v14 = v5[1];
    v15 = v12;
    do
    {
      *((_DWORD *)v13 - 4) = -1;
      *(_DWORD *)v13 = -1;
      *((_QWORD *)v13 - 1) = v14;
      *((_QWORD *)v13 + 1) = v14 + 288;
      v16 = *(_DWORD *)(v14 + 292);
      *((_DWORD *)v13 - 3) = *(_DWORD *)(v14 + 4);
      *((_DWORD *)v13 + 1) = v16;
      v14 += 576;
      v13 += 32;
      v15 -= 2;
    }
    while (v15);
    if ((v8 & 1) != 0)
      goto LABEL_7;
  }
LABEL_9:
  v435 = v5;
  v438 = v10;
  v20 = (char *)malloc_type_malloc(0x200uLL, 0x8C8DB8D1uLL);
  if (v7)
  {
    v21 = 0;
    v22 = 1;
    v23 = 32;
    v24 = (float *)v438;
    v25 = v9;
    while (1)
    {
      v26 = v21;
      while (1)
      {
        if (!v22)
        {
          --v26;
          v27 = &v20[16 * v26];
          v25 = *((_QWORD *)v27 + 1);
          v24 = (float *)&v438[16 * *(_QWORD *)v27];
        }
        if ((uint64_t)v25 > 15)
          break;
        if ((uint64_t)v25 > 1)
        {
          v28 = (char *)(v24 + 4);
          v29 = 2;
          for (i = 1; i != v25; ++i)
          {
            v31 = v28;
            v32 = v29;
            do
            {
              v33 = (v32 - 2);
              if ((float)(v24[4 * v33 + 1] - *((float *)v31 + 1)) >= 0.0)
                break;
              v34 = 4 * v33;
              v454[0] = 0uLL;
              v454[0] = *(_OWORD *)v31;
              *(_OWORD *)v31 = *(_OWORD *)&v24[v34];
              v31 -= 16;
              *(_OWORD *)&v24[v34] = v454[0];
              --v32;
            }
            while (v32 > 1);
            ++v29;
            v28 += 16;
          }
        }
        v22 = 0;
        v25 = 0;
        if (v26 < 1)
          goto LABEL_78;
      }
      if (v25 > 0x27)
        break;
      v35 = v25 >> 1;
      v36 = v24[4 * (v25 >> 1) + 1];
      v37 = v24[1];
      v38 = v24[4 * v25 - 3];
      if ((float)(v36 - v37) >= 0.0)
      {
        if ((float)(v38 - v37) >= 0.0)
        {
          if ((float)(v38 - v36) < 0.0)
            v35 = v25 - 1;
        }
        else
        {
          v35 = 0;
        }
      }
      else if ((float)(v38 - v36) >= 0.0)
      {
        if ((float)(v38 - v37) >= 0.0)
          v35 = 0;
        else
          v35 = v25 - 1;
      }
LABEL_61:
      v59 = 0;
      v60 = 0;
      v454[0] = 0uLL;
      v454[0] = *(_OWORD *)v24;
      v61 = 4 * v35;
      *(_OWORD *)v24 = *(_OWORD *)&v24[v61];
      *(_OWORD *)&v24[v61] = v454[0];
      v62 = v25 - 1;
      v63 = v24 + 5;
      do
      {
        if ((float)(v24[1] - *v63) <= 0.0)
        {
          ++v59;
          v454[0] = 0uLL;
          v454[0] = *(_OWORD *)(v63 - 1);
          v64 = (char *)&v24[4 * v59];
          *(_OWORD *)(v63 - 1) = *(_OWORD *)v64;
          *(_OWORD *)v64 = v454[0];
          if ((float)(v24[1] - *v63) == 0.0)
          {
            ++v60;
            v454[0] = 0uLL;
            v454[0] = *(_OWORD *)v64;
            *(_OWORD *)v64 = *(_OWORD *)&v24[4 * v60];
            *(_OWORD *)&v24[4 * v60] = v454[0];
          }
        }
        v63 += 4;
        --v62;
      }
      while (v62);
      v65 = v60 + 1;
      v66 = 4 * v60;
      v67 = 16 * v59 - 16 * v60;
      do
      {
        v454[0] = 0uLL;
        v454[0] = *(_OWORD *)((char *)v24 + v67);
        *(_OWORD *)((char *)v24 + v67) = *(_OWORD *)&v24[v66];
        *(_OWORD *)&v24[v66] = v454[0];
        --v65;
        v66 -= 4;
        v67 += 16;
      }
      while (v65 > 0);
      v21 = v26 + 1;
      if (v26 + 1 >= v23)
      {
        ptra = (void *)v7;
        v68 = 2 * v23;
        v20 = (char *)malloc_type_realloc(v20, 32 * v23, 0x9E1D27C6uLL);
        v23 = v68;
        v7 = (uint64_t)ptra;
      }
      v69 = &v20[16 * v26];
      *(_QWORD *)v69 = v59 + (((char *)v24 - v438) >> 4) + 1;
      *((_QWORD *)v69 + 1) = v25 + ~v59;
      v25 = v59 - v60;
      v22 = v59 != v60;
      if (v26 < 0 && !v25)
        goto LABEL_78;
    }
    v39 = 0;
    v40 = 0;
    if (v25 <= 0x7D0)
      v41 = 8;
    else
      v41 = 26;
    if (v25 <= 0x7D0)
      v42 = 3;
    else
      v42 = 9;
    while (1)
    {
      v43 = (uint64_t)(v25 - 1 + v39) / v41;
      v44 = v24[4 * v43 + 1];
      v45 = v24[4 * (v39 / v41) + 1];
      v46 = (uint64_t)(2 * v25 - 2 + v39) / v41;
      v47 = v24[4 * v46 + 1];
      if ((float)(v44 - v45) >= 0.0)
      {
        if ((float)(v47 - v45) < 0.0)
          goto LABEL_42;
        if ((float)(v47 - v44) < 0.0)
        {
LABEL_44:
          *((_QWORD *)v454 + v40) = v46;
          goto LABEL_36;
        }
      }
      else if ((float)(v47 - v44) >= 0.0)
      {
        if ((float)(v47 - v45) < 0.0)
          goto LABEL_44;
LABEL_42:
        *((_QWORD *)v454 + v40) = v39 / v41;
        goto LABEL_36;
      }
      *((_QWORD *)v454 + v40) = v43;
LABEL_36:
      ++v40;
      v39 += 3 * v25 - 3;
      if (v42 == v40)
      {
        while (1)
        {
          v48 = 0;
          v49 = 0;
          v50 = v42;
          v42 /= 3uLL;
          if (v42 <= 1)
            v51 = 1;
          else
            v51 = v42;
          v52 = 8 * v51;
          do
          {
            v53 = *(_QWORD *)((char *)v454 + v48);
            v54 = *(_QWORD *)((char *)v454 + v48 + 8);
            v55 = *(_QWORD *)((char *)&v454[1] + v48);
            v56 = v24[4 * v54 + 1];
            v57 = v24[4 * v53 + 1];
            v58 = v24[4 * v55 + 1];
            if ((float)(v56 - v57) >= 0.0)
            {
              if ((float)(v58 - v57) < 0.0)
                goto LABEL_57;
              if ((float)(v58 - v56) >= 0.0)
              {
LABEL_50:
                *(_QWORD *)((char *)v454 + v49) = v54;
                goto LABEL_51;
              }
            }
            else
            {
              if ((float)(v58 - v56) < 0.0)
                goto LABEL_50;
              if ((float)(v58 - v57) >= 0.0)
              {
LABEL_57:
                *(_QWORD *)((char *)v454 + v49) = v53;
                goto LABEL_51;
              }
            }
            *(_QWORD *)((char *)v454 + v49) = v55;
LABEL_51:
            v49 += 8;
            v48 += 24;
          }
          while (v52 != v49);
          if (v50 < 9)
          {
            v35 = *(_QWORD *)&v454[0];
            goto LABEL_61;
          }
        }
      }
    }
  }
LABEL_78:
  free(v20);
  v70 = v438;
  if (v437 >= 1)
  {
    v71 = 0;
    v72 = 0;
    v73 = v438 + 8;
    v74 = 1;
    do
    {
      if (*(_DWORD *)&v438[16 * v71] == -1)
      {
        v75 = *(float **)&v438[16 * v71 + 8];
        v76 = *v75;
        v77 = v75[1];
        v78 = v73;
        v79 = v74;
        do
        {
          v81 = v77 - *(float *)(*(_QWORD *)v78 + 4);
          if ((float)((float)(v81 * v81) + (float)((float)(v76 - **(float **)v78) * (float)(v76 - **(float **)v78))) < (float)(v4 * v4))
            *((_DWORD *)v78 - 2) = v72;
          v80 = v81 <= v4 && v79++ < v9;
          v78 += 16;
        }
        while (v80);
        ++v72;
      }
      ++v71;
      ++v74;
      v73 += 16;
    }
    while (v71 != v8);
  }
  v82 = (char *)malloc_type_malloc(0x200uLL, 0x19EE46D4uLL);
  if (v7)
  {
    v83 = 0;
    v84 = 1;
    v85 = 32;
    v86 = v438;
    while (1)
    {
      v87 = v83;
      while (1)
      {
        if ((v84 & 1) == 0)
        {
          --v87;
          v88 = &v82[16 * v87];
          v9 = *((_QWORD *)v88 + 1);
          v86 = &v70[16 * *(_QWORD *)v88];
        }
        if (v9 > 15)
          break;
        if (v9 > 1)
        {
          v89 = 2;
          for (j = 1; j != v9; ++j)
          {
            v91 = v89;
            do
            {
              v92 = v91 - 1;
              v93 = &v86[16 * (v91 - 1)];
              v94 = &v86[16 * (v91 - 2)];
              if (*(_DWORD *)v93 >= *(_DWORD *)v94)
                break;
              v454[0] = 0uLL;
              v454[0] = *(_OWORD *)v93;
              *(_OWORD *)v93 = *(_OWORD *)v94;
              *(_OWORD *)v94 = v454[0];
              v91 = v92;
            }
            while (v92 > 1);
            ++v89;
          }
        }
        v84 = 0;
        v9 = 0;
        if (v87 < 1)
          goto LABEL_162;
      }
      if ((unint64_t)v9 > 0x27)
        break;
      v95 = (unint64_t)v9 >> 1;
      v96 = *(_DWORD *)&v86[16 * ((unint64_t)v9 >> 1)];
      v97 = *(_DWORD *)v86;
      v98 = *(_DWORD *)&v86[16 * v9 - 16];
      if (*(_DWORD *)v86 >= v96)
      {
        if (v97 >= v98)
        {
          if (v96 < v98)
            v95 = v9 - 1;
        }
        else
        {
          v95 = 0;
        }
      }
      else if (v96 >= v98)
      {
        if (v97 >= v98)
          v95 = 0;
        else
          v95 = v9 - 1;
      }
LABEL_142:
      v119 = 0;
      v120 = 0;
      v454[0] = 0uLL;
      v454[0] = *(_OWORD *)v86;
      v121 = 16 * v95;
      *(_OWORD *)v86 = *(_OWORD *)&v86[v121];
      *(_OWORD *)&v86[v121] = v454[0];
      v122 = v9 - 1;
      v123 = 16;
      do
      {
        v124 = &v86[v123];
        if (*(_DWORD *)&v86[v123] <= *(_DWORD *)v86)
        {
          ++v120;
          v454[0] = 0uLL;
          v454[0] = *(_OWORD *)v124;
          v125 = &v86[16 * v120];
          *(_OWORD *)v124 = *(_OWORD *)v125;
          *(_OWORD *)v125 = v454[0];
          if (*(_DWORD *)v124 == *(_DWORD *)v86)
          {
            ++v119;
            v454[0] = 0uLL;
            v454[0] = *(_OWORD *)v125;
            *(_OWORD *)v125 = *(_OWORD *)&v86[16 * v119];
            *(_OWORD *)&v86[16 * v119] = v454[0];
          }
        }
        v123 += 16;
        --v122;
      }
      while (v122);
      v126 = v119 + 1;
      v127 = 16 * v119;
      v128 = 16 * v120 - 16 * v119;
      do
      {
        v454[0] = 0uLL;
        v454[0] = *(_OWORD *)&v86[v128];
        *(_OWORD *)&v86[v128] = *(_OWORD *)&v86[v127];
        *(_OWORD *)&v86[v127] = v454[0];
        --v126;
        v127 -= 16;
        v128 += 16;
      }
      while (v126 > 0);
      v83 = v87 + 1;
      if (v87 + 1 >= v85)
      {
        v129 = 2 * v85;
        v82 = (char *)malloc_type_realloc(v82, 32 * v85, 0x17966CE3uLL);
        v85 = v129;
      }
      v130 = &v82[16 * v87];
      *(_QWORD *)v130 = v120 + ((v86 - v438) >> 4) + 1;
      *((_QWORD *)v130 + 1) = v9 + ~v120;
      v9 = v120 - v119;
      v131 = v120 == v119;
      v70 = v438;
      v84 = !v131;
      if (v87 < 0 && !v9)
        goto LABEL_162;
    }
    v99 = 0;
    v100 = 0;
    if ((unint64_t)v9 <= 0x7D0)
      v101 = 8;
    else
      v101 = 26;
    if ((unint64_t)v9 <= 0x7D0)
      v102 = 3;
    else
      v102 = 9;
    while (1)
    {
      v103 = (v9 - 1 + v99) / v101;
      v104 = *(_DWORD *)&v86[16 * (v99 / v101)];
      v105 = *(_DWORD *)&v86[16 * v103];
      v106 = (2 * v9 - 2 + v99) / v101;
      v107 = *(_DWORD *)&v86[16 * v106];
      if (v104 >= v105)
      {
        if (v104 < v107)
          goto LABEL_123;
        if (v105 < v107)
        {
LABEL_125:
          *((_QWORD *)v454 + v100) = v106;
          goto LABEL_117;
        }
      }
      else if (v105 >= v107)
      {
        if (v104 < v107)
          goto LABEL_125;
LABEL_123:
        *((_QWORD *)v454 + v100) = v99 / v101;
        goto LABEL_117;
      }
      *((_QWORD *)v454 + v100) = v103;
LABEL_117:
      ++v100;
      v99 += 3 * v9 - 3;
      if (v102 == v100)
      {
        while (1)
        {
          v108 = 0;
          v109 = 0;
          v110 = v102;
          v102 /= 3uLL;
          if (v102 <= 1)
            v111 = 1;
          else
            v111 = v102;
          v112 = 8 * v111;
          do
          {
            v113 = *(_QWORD *)((char *)v454 + v108);
            v114 = *(_QWORD *)((char *)v454 + v108 + 8);
            v115 = *(_QWORD *)((char *)&v454[1] + v108);
            v116 = *(_DWORD *)&v86[16 * v113];
            v117 = *(_DWORD *)&v86[16 * v114];
            v118 = *(_DWORD *)&v86[16 * v115];
            if (v116 >= v117)
            {
              if (v116 < v118)
                goto LABEL_138;
              if (v117 >= v118)
              {
LABEL_131:
                *(_QWORD *)((char *)v454 + v109) = v114;
                goto LABEL_132;
              }
            }
            else
            {
              if (v117 < v118)
                goto LABEL_131;
              if (v116 >= v118)
              {
LABEL_138:
                *(_QWORD *)((char *)v454 + v109) = v113;
                goto LABEL_132;
              }
            }
            *(_QWORD *)((char *)v454 + v109) = v115;
LABEL_132:
            v109 += 8;
            v108 += 24;
          }
          while (v112 != v109);
          if (v110 < 9)
          {
            v95 = *(_QWORD *)&v454[0];
            goto LABEL_142;
          }
        }
      }
    }
  }
LABEL_162:
  free(v82);
  v132 = (v437 - 1);
  if (v437 >= 1)
  {
    v133 = 0;
    v448 = 0;
    v449 = 0;
    __src = 0;
    v134 = 0;
    v135 = 0;
    v136 = 0;
    v137 = 0;
    v138 = 0;
    v436 = v70 + 24;
    while (1)
    {
      v439 = v134;
      if (v137 <= 0)
      {
        v140 = 2 * v137;
        if (2 * v137 <= 1)
          v140 = 1;
        if (v137)
          v141 = v140;
        else
          v141 = 32;
        v142 = v133;
        v143 = (float32x2_t **)malloc_type_realloc(v138, 8 * v141, 0xF9675DCDuLL);
        v137 = v141;
        v133 = v142;
        v138 = v143;
      }
      *v138 = *(float32x2_t **)&v438[16 * v133 + 8];
      ptr = v135;
      v441 = v133;
      if (v133 >= (int)v132)
      {
        v440 = v137;
        v151 = 1;
      }
      else
      {
        v144 = 0;
        v145 = v132 - v133;
        v146 = &v436[2 * v133];
        do
        {
          v151 = v144 + 1;
          if (*((_DWORD *)v146 - 6) != *((_DWORD *)v146 - 2))
          {
            v440 = v137;
            v154 = v441 + v144;
            goto LABEL_188;
          }
          if (v151 >= v137)
          {
            v152 = v144 + 2;
            v153 = 2 * v137;
            if (!v137)
              v153 = 32;
            if (v153 > v151)
              v152 = v153;
            if (v152)
            {
              v147 = v138;
              v148 = v152;
              v149 = (float32x2_t **)malloc_type_realloc(v147, 8 * v152, 0xFA9C8A28uLL);
              v137 = v148;
              v138 = v149;
            }
            else
            {
              v137 = 0;
            }
          }
          v150 = (float32x2_t *)*v146;
          v146 += 2;
          v138[++v144] = v150;
        }
        while (v145 != v144);
        v440 = v137;
        v151 = v144 + 1;
        v154 = v437 - 1;
LABEL_188:
        v441 = v154;
      }
      v155 = 4 * (v151 * v151);
      v156 = v151;
      v157 = (float32x4_t *)malloc_type_malloc(v155, 0x100004052888210uLL);
      v443 = malloc_type_malloc(v155, 0x100004052888210uLL);
      v158 = v156 << 32;
      v159 = (int *)malloc_type_malloc(((v156 << 32) + 0x100000000) >> 29, 0x100004000313F17uLL);
      v447 = v156;
      v444 = (__int8 *)malloc_type_malloc(8 * (int)v156, 0x100004000313F17uLL);
      if (v136 >= 1)
      {
        v160 = ptr + 1;
        do
        {
          v161 = *v160;
          v160 += 3;
          free(v161);
          --v136;
        }
        while (v136);
      }
      v162 = v447;
      v163 = 4 * v447;
      v445 = v447 - 1;
      if (v447 >= 1)
      {
        v164 = 0;
        v165 = &v157->f32[1];
        v166 = (uint8x16_t **)(v138 + 1);
        v167 = 1;
        do
        {
          v168 = v164 + 1;
          if (v164 + 1 < v447)
          {
            v169 = (uint8x16_t *)v138[v164];
            v170 = v166;
            v171 = v165;
            v172 = v447;
            do
            {
              v173 = *v170++;
              v174 = v169[2];
              v175 = v169[3];
              v176 = v173[2];
              v177 = v173[3];
              v178 = (int16x8_t)vsubl_high_u8(v174, v176);
              v179 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v174.i8, *(uint8x8_t *)v176.i8);
              v180 = (int16x8_t)vsubl_high_u8(v175, v177);
              v181 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v175.i8, *(uint8x8_t *)v177.i8);
              v182 = v169[4];
              v183 = v169[5];
              v184 = v173[4];
              v185 = v173[5];
              v186 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v182.i8, *(uint8x8_t *)v184.i8);
              v187 = (int16x8_t)vsubl_high_u8(v182, v184);
              v188 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v183.i8, *(uint8x8_t *)v185.i8);
              v189 = (int16x8_t)vsubl_high_u8(v183, v185);
              v190 = vmull_s16(*(int16x4_t *)v187.i8, *(int16x4_t *)v187.i8);
              v191 = vmull_s16(*(int16x4_t *)v186.i8, *(int16x4_t *)v186.i8);
              v192 = vmull_high_s16(v186, v186);
              v193 = vmull_s16(*(int16x4_t *)v189.i8, *(int16x4_t *)v189.i8);
              v194 = vmull_s16(*(int16x4_t *)v188.i8, *(int16x4_t *)v188.i8);
              v195 = vmlal_high_s16(v192, v179, v179);
              v196 = vmlal_high_s16(vmull_high_s16(v187, v187), v178, v178);
              v197 = vmlal_s16(v191, *(int16x4_t *)v179.i8, *(int16x4_t *)v179.i8);
              v198 = vmlal_s16(v190, *(int16x4_t *)v178.i8, *(int16x4_t *)v178.i8);
              v199 = vmlal_high_s16(vmull_high_s16(v188, v188), v181, v181);
              v200 = vmlal_high_s16(vmull_high_s16(v189, v189), v180, v180);
              v201 = vmlal_s16(v194, *(int16x4_t *)v181.i8, *(int16x4_t *)v181.i8);
              v202 = v169[6];
              v203 = v169[7];
              v204 = v173[6];
              v205 = v173[7];
              v206 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v202.i8, *(uint8x8_t *)v204.i8);
              v207 = vmlal_s16(v193, *(int16x4_t *)v180.i8, *(int16x4_t *)v180.i8);
              v208 = (int16x8_t)vsubl_high_u8(v202, v204);
              v209 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v203.i8, *(uint8x8_t *)v205.i8);
              v210 = (int16x8_t)vsubl_high_u8(v203, v205);
              v211 = vmlal_s16(v198, *(int16x4_t *)v208.i8, *(int16x4_t *)v208.i8);
              v212 = vmlal_s16(v197, *(int16x4_t *)v206.i8, *(int16x4_t *)v206.i8);
              v213 = vmlal_high_s16(v196, v208, v208);
              v214 = vmlal_high_s16(v195, v206, v206);
              v215 = vmlal_s16(v207, *(int16x4_t *)v210.i8, *(int16x4_t *)v210.i8);
              v216 = vmlal_s16(v201, *(int16x4_t *)v209.i8, *(int16x4_t *)v209.i8);
              v217 = v169[8];
              v218 = v169[9];
              v219 = vmlal_high_s16(v200, v210, v210);
              v220 = v173[8];
              v221 = v173[9];
              v222 = (int16x8_t)vsubl_high_u8(v217, v220);
              v223 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v217.i8, *(uint8x8_t *)v220.i8);
              v224 = (int16x8_t)vsubl_high_u8(v218, v221);
              v225 = vmlal_high_s16(v199, v209, v209);
              v226 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v218.i8, *(uint8x8_t *)v221.i8);
              v227 = vmlal_high_s16(v214, v223, v223);
              v228 = vmlal_s16(v212, *(int16x4_t *)v223.i8, *(int16x4_t *)v223.i8);
              v229 = vmlal_high_s16(v225, v226, v226);
              v230 = vmlal_high_s16(v219, v224, v224);
              v231 = vmlal_s16(v216, *(int16x4_t *)v226.i8, *(int16x4_t *)v226.i8);
              v232 = v169[10];
              v233 = v169[11];
              v234 = vmlal_s16(v215, *(int16x4_t *)v224.i8, *(int16x4_t *)v224.i8);
              v236 = v173[10];
              v235 = v173[11];
              v237 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v232.i8, *(uint8x8_t *)v236.i8);
              v238 = (int16x8_t)vsubl_high_u8(v232, v236);
              v239 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v233.i8, *(uint8x8_t *)v235.i8);
              v240 = (int16x8_t)vsubl_high_u8(v233, v235);
              v241 = vmlal_s16(vmlal_s16(v211, *(int16x4_t *)v222.i8, *(int16x4_t *)v222.i8), *(int16x4_t *)v238.i8, *(int16x4_t *)v238.i8);
              v242 = vmlal_s16(v228, *(int16x4_t *)v237.i8, *(int16x4_t *)v237.i8);
              v243 = vmlal_high_s16(vmlal_high_s16(v213, v222, v222), v238, v238);
              v244 = vmlal_high_s16(v227, v237, v237);
              v245 = vmlal_s16(v234, *(int16x4_t *)v240.i8, *(int16x4_t *)v240.i8);
              v246 = vmlal_s16(v231, *(int16x4_t *)v239.i8, *(int16x4_t *)v239.i8);
              v247 = vmlal_high_s16(v230, v240, v240);
              v248 = v169[12];
              v249 = v169[13];
              v250 = v173[12];
              v251 = v173[13];
              v252 = (int16x8_t)vsubl_high_u8(v248, v250);
              v253 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v248.i8, *(uint8x8_t *)v250.i8);
              v254 = (int16x8_t)vsubl_high_u8(v249, v251);
              v255 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v249.i8, *(uint8x8_t *)v251.i8);
              v256 = vmlal_high_s16(v244, v253, v253);
              v257 = vmlal_high_s16(v243, v252, v252);
              v258 = vmlal_s16(v242, *(int16x4_t *)v253.i8, *(int16x4_t *)v253.i8);
              v259 = vmlal_s16(v241, *(int16x4_t *)v252.i8, *(int16x4_t *)v252.i8);
              v260 = vmlal_high_s16(vmlal_high_s16(v229, v239, v239), v255, v255);
              v261 = vmlal_high_s16(v247, v254, v254);
              v262 = v169[14];
              v263 = v169[15];
              v264 = vmlal_s16(v246, *(int16x4_t *)v255.i8, *(int16x4_t *)v255.i8);
              v265 = v173[14];
              v266 = v173[15];
              v267 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v262.i8, *(uint8x8_t *)v265.i8);
              v268 = (int16x8_t)vsubl_high_u8(v262, v265);
              v269 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v263.i8, *(uint8x8_t *)v266.i8);
              v270 = vmlal_s16(v245, *(int16x4_t *)v254.i8, *(int16x4_t *)v254.i8);
              v271 = (int16x8_t)vsubl_high_u8(v263, v266);
              v272 = vmlal_s16(v259, *(int16x4_t *)v268.i8, *(int16x4_t *)v268.i8);
              v273 = vmlal_high_s16(v257, v268, v268);
              v274 = vmlal_s16(v270, *(int16x4_t *)v271.i8, *(int16x4_t *)v271.i8);
              v275 = vmlal_s16(v264, *(int16x4_t *)v269.i8, *(int16x4_t *)v269.i8);
              v276 = vmlal_high_s16(v261, v271, v271);
              v277 = v169[16];
              v278 = v169[17];
              v279 = vmlal_high_s16(v260, v269, v269);
              v281 = v173[16];
              v280 = v173[17];
              v282 = (int16x8_t)vsubl_high_u8(v277, v281);
              v283 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v277.i8, *(uint8x8_t *)v281.i8);
              v284 = (int16x8_t)vsubl_high_u8(v278, v280);
              v285 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v278.i8, *(uint8x8_t *)v280.i8);
              *v171++ = (float)vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(vmlal_s16(v275, *(int16x4_t *)v285.i8, *(int16x4_t *)v285.i8), vmlal_s16(vmlal_s16(v258, *(int16x4_t *)v267.i8, *(int16x4_t *)v267.i8), *(int16x4_t *)v283.i8, *(int16x4_t *)v283.i8)), vaddq_s32(vmlal_s16(v274, *(int16x4_t *)v284.i8, *(int16x4_t *)v284.i8), vmlal_s16(v272, *(int16x4_t *)v282.i8, *(int16x4_t *)v282.i8))), vaddq_s32(vaddq_s32(vmlal_high_s16(v279, v285, v285), vmlal_high_s16(vmlal_high_s16(v256, v267, v267), v283, v283)), vaddq_s32(vmlal_high_s16(v276, v284, v284), vmlal_high_s16(v273, v282, v282)))))* 0.0039062;
              --v172;
            }
            while (v167 != v172);
          }
          ++v167;
          v165 = (float *)((char *)v165 + v163 + 4);
          ++v166;
          v164 = v168;
        }
        while (v168 != v447);
        v286 = 0;
        v287 = v157;
        v288 = v157;
        do
        {
          v157->i32[v286 + ((v286 * v158) >> 32)] = 0;
          if (v286)
          {
            v289 = 0;
            v290 = v287;
            do
            {
              v288->i32[v289++] = v290->i32[0];
              v290 = (float32x4_t *)((char *)v290 + v163);
            }
            while (v286 != v289);
          }
          ++v286;
          v288 = (float32x4_t *)((char *)v288 + v163);
          v287 = (float32x4_t *)((char *)v287 + 4);
        }
        while (v286 != v447);
        if (v447 < 8uLL || v444 < &v157->i8[4 * v447] && v157 < (float32x4_t *)&v444[8 * v447 - 4])
        {
          v291 = 0;
LABEL_209:
          v292 = &v444[8 * v291 + 4];
          do
          {
            *((_DWORD *)v292 - 1) = v157->i32[v291];
            *(_DWORD *)v292 = v291;
            v292 += 8;
            ++v291;
          }
          while (v447 != v291);
          goto LABEL_211;
        }
        v291 = v447 - (unint64_t)(v447 & 7);
        v418 = (float *)(v444 + 32);
        v419 = (int32x4_t)xmmword_210BCABD0;
        v420 = v157 + 1;
        v421 = v291;
        v422.i64[0] = 0x400000004;
        v422.i64[1] = 0x400000004;
        v423.i64[0] = 0x800000008;
        v423.i64[1] = 0x800000008;
        do
        {
          v456.val[1] = (float32x4_t)vaddq_s32(v419, v422);
          v424 = v420[-1];
          v456.val[0] = *v420;
          v425 = v418 - 8;
          vst2q_f32(v425, *(float32x4x2_t *)(&v419 - 1));
          vst2q_f32(v418, v456);
          v419 = vaddq_s32(v419, v423);
          v418 += 16;
          v420 += 2;
          v421 -= 8;
        }
        while (v421);
        if ((v447 & 7) != 0)
          goto LABEL_209;
      }
LABEL_211:
      v450 = v159;
      v293 = (char *)malloc_type_malloc(0x200uLL, 0x44A2D10AuLL);
      v446 = v138;
      if (v158)
      {
        v294 = 0;
        v295 = 1;
        v296 = 32;
        v297 = (float *)v444;
        while (1)
        {
          v298 = v294;
          while (1)
          {
            if (!v295)
            {
              --v298;
              v299 = &v293[16 * v298];
              v162 = *((_QWORD *)v299 + 1);
              v297 = (float *)&v444[8 * *(_QWORD *)v299];
            }
            if ((uint64_t)v162 > 15)
              break;
            if ((uint64_t)v162 > 1)
            {
              v300 = v297 + 2;
              v301 = 2;
              for (k = 1; k != v162; ++k)
              {
                v303 = v300;
                v304 = v301;
                do
                {
                  v305 = &v297[2 * (v304 - 2)];
                  if ((float)(*v303 - *v305) >= 0.0)
                    break;
                  v306 = *(_QWORD *)v303;
                  *(_QWORD *)v303 = *(_QWORD *)v305;
                  v303 -= 2;
                  *(_QWORD *)v305 = v306;
                  --v304;
                }
                while (v304 > 1);
                ++v301;
                v300 += 2;
              }
            }
            v295 = 0;
            v162 = 0;
            if (v298 < 1)
              goto LABEL_280;
          }
          if (v162 > 0x27)
            break;
          v307 = v162 >> 1;
          v308 = *v297;
          v309 = v297[2 * (v162 >> 1)];
          v310 = v297[2 * v162 - 2];
          if ((float)(*v297 - v309) >= 0.0)
          {
            if ((float)(v308 - v310) >= 0.0)
            {
              if ((float)(v309 - v310) < 0.0)
                v307 = v162 - 1;
            }
            else
            {
              v307 = 0;
            }
          }
          else if ((float)(v309 - v310) >= 0.0)
          {
            if ((float)(v308 - v310) >= 0.0)
              v307 = 0;
            else
              v307 = v162 - 1;
          }
LABEL_262:
          v331 = 0;
          v332 = 0;
          v333 = 2 * v307;
          v334 = *(_QWORD *)v297;
          *(_QWORD *)v297 = *(_QWORD *)&v297[v333];
          *(_QWORD *)&v297[v333] = v334;
          v335 = v162 - 1;
          v336 = 2;
          do
          {
            if ((float)(v297[v336] - *v297) <= 0.0)
            {
              ++v332;
              v337 = *(_QWORD *)&v297[v336];
              *(_QWORD *)&v297[v336] = *(_QWORD *)&v297[2 * v332];
              *(_QWORD *)&v297[2 * v332] = v337;
              if ((float)(v297[v336] - *v297) == 0.0)
              {
                ++v331;
                *(_QWORD *)&v297[2 * v332] = *(_QWORD *)&v297[2 * v331];
                *(_QWORD *)&v297[2 * v331] = v337;
              }
            }
            v336 += 2;
            --v335;
          }
          while (v335);
          v338 = 8 * v332 - 8 * v331;
          v339 = v331;
          do
          {
            v340 = *(_QWORD *)((char *)v297 + v338);
            *(_QWORD *)((char *)v297 + v338) = *(_QWORD *)&v297[2 * v339];
            *(_QWORD *)&v297[2 * v339] = v340;
            v338 += 8;
            v80 = v339-- <= 0;
          }
          while (!v80);
          v294 = v298 + 1;
          if (v298 + 1 >= v296)
          {
            v341 = 2 * v296;
            v293 = (char *)malloc_type_realloc(v293, 32 * v296, 0x3B4D2A35uLL);
            v296 = v341;
          }
          v342 = &v293[16 * v298];
          *(_QWORD *)v342 = v332 + (((char *)v297 - v444) >> 3) + 1;
          *((_QWORD *)v342 + 1) = v162 + ~v332;
          v162 = v332 - v331;
          v295 = v332 != v331;
          if (v298 < 0 && !v162)
            goto LABEL_280;
        }
        v311 = 0;
        v312 = 0;
        v313 = 26;
        if (v162 <= 0x7D0)
          v313 = 8;
        v314 = 3;
        if (v162 > 0x7D0)
          v314 = 9;
        while (1)
        {
          v315 = (uint64_t)(v162 - 1 + v311) / v313;
          v316 = v297[2 * (v311 / v313)];
          v317 = v297[2 * v315];
          v318 = (uint64_t)(2 * v162 - 2 + v311) / v313;
          v319 = v297[2 * v318];
          if ((float)(v316 - v317) >= 0.0)
          {
            if ((float)(v316 - v319) < 0.0)
              goto LABEL_243;
            if ((float)(v317 - v319) < 0.0)
            {
LABEL_245:
              *((_QWORD *)v454 + v312) = v318;
              goto LABEL_237;
            }
          }
          else if ((float)(v317 - v319) >= 0.0)
          {
            if ((float)(v316 - v319) < 0.0)
              goto LABEL_245;
LABEL_243:
            *((_QWORD *)v454 + v312) = v311 / v313;
            goto LABEL_237;
          }
          *((_QWORD *)v454 + v312) = v315;
LABEL_237:
          ++v312;
          v311 += 3 * v162 - 3;
          if (v314 == v312)
          {
            while (1)
            {
              v320 = 0;
              v321 = 0;
              v322 = v314;
              v314 /= 3uLL;
              if (v314 <= 1)
                v323 = 1;
              else
                v323 = v314;
              v324 = 8 * v323;
              do
              {
                v325 = *(_QWORD *)((char *)v454 + v320);
                v326 = *(_QWORD *)((char *)v454 + v320 + 8);
                v327 = v297[2 * v325];
                v328 = v297[2 * v326];
                v329 = *(_QWORD *)((char *)&v454[1] + v320);
                v330 = v297[2 * v329];
                if ((float)(v327 - v328) >= 0.0)
                {
                  if ((float)(v327 - v330) < 0.0)
                    goto LABEL_258;
                  if ((float)(v328 - v330) >= 0.0)
                  {
LABEL_251:
                    *(_QWORD *)((char *)v454 + v321) = v326;
                    goto LABEL_252;
                  }
                }
                else
                {
                  if ((float)(v328 - v330) < 0.0)
                    goto LABEL_251;
                  if ((float)(v327 - v330) >= 0.0)
                  {
LABEL_258:
                    *(_QWORD *)((char *)v454 + v321) = v325;
                    goto LABEL_252;
                  }
                }
                *(_QWORD *)((char *)v454 + v321) = v329;
LABEL_252:
                v321 += 8;
                v320 += 24;
              }
              while (v324 != v321);
              if (v322 < 9)
              {
                v307 = *(_QWORD *)&v454[0];
                goto LABEL_262;
              }
            }
          }
        }
      }
LABEL_280:
      free(v293);
      v343 = v447;
      if (v447 <= 0)
      {
        v346 = v450;
        *v450 = 0;
        *(_QWORD *)v450 = 0;
        v393 = v450 + 1;
        if (!v450[1])
          goto LABEL_374;
      }
      else
      {
        v344 = 0;
        v345 = v443;
        v346 = v450;
        do
        {
          v347 = *(_DWORD *)&v444[8 * v344 + 4] * v447;
          v348 = (int *)(v444 + 4);
          v349 = v345;
          v350 = v447;
          do
          {
            v351 = *v348;
            v348 += 2;
            *v349++ = v157->i32[v351 + v347];
            --v350;
          }
          while (v350);
          ++v344;
          v345 = (_DWORD *)((char *)v345 + v163);
        }
        while (v344 != v447);
        v352 = 0;
        v353 = 0;
        *v450 = 0;
        v354 = (char *)v443;
        do
        {
          v355 = v353 * v343;
          v356 = v353;
          if (v343 <= v353 + 1)
            ++v353;
          else
            v353 = v343;
          v357 = &v354[4 * v355];
          do
          {
            if (fabsf(*(float *)&v357[4 * v356]) >= v2)
            {
              v353 = v356;
              *(int32x2_t *)&v346[2 * v352 + 1] = vdup_n_s32(v356);
              if ((_DWORD)v356 != v445)
                goto LABEL_297;
              goto LABEL_287;
            }
            ++v356;
          }
          while (v356 < v447);
          *(int32x2_t *)&v346[2 * v352 + 1] = vdup_n_s32(v353);
          if (v353 != v445)
          {
LABEL_297:
            v358 = (char *)malloc_type_malloc(0x200uLL, 0x5DFA11BBuLL);
            if (v447 != v353)
            {
              v359 = 0;
              v360 = &v354[4 * v353 * (v447 + 1)];
              v361 = v447 - v353;
              v362 = 1;
              v363 = 32;
              v364 = v360;
              while (1)
              {
                v365 = v359;
                while (1)
                {
                  if ((v362 & 1) == 0)
                  {
                    --v365;
                    v366 = &v358[16 * v365];
                    v361 = *((_QWORD *)v366 + 1);
                    v364 = &v360[4 * *(_QWORD *)v366];
                  }
                  if ((uint64_t)v361 > 15)
                    break;
                  if ((uint64_t)v361 > 1)
                  {
                    v367 = 2;
                    for (m = 1; m != v361; ++m)
                    {
                      v369 = v367;
                      do
                      {
                        v370 = v369 - 1;
                        v371 = &v364[4 * (v369 - 1)];
                        v372 = &v364[4 * (v369 - 2)];
                        if (v371 - v372 >= 0)
                          break;
                        v373 = *(_DWORD *)v371;
                        *(_DWORD *)v371 = *(_DWORD *)v372;
                        *(_DWORD *)v372 = v373;
                        v369 = v370;
                      }
                      while (v370 > 1);
                      ++v367;
                    }
                  }
                  v362 = 0;
                  v361 = 0;
                  if (v365 < 1)
                    goto LABEL_286;
                }
                if (v361 > 0x27)
                  break;
                v374 = v361 >> 1;
                if (v361 >> 1 >= v361 - 1)
                  v374 = v361 - 1;
LABEL_346:
                v390 = 4 * v374;
                v391 = *(_DWORD *)v364;
                *(_DWORD *)v364 = *(_DWORD *)&v364[v390];
                *(_DWORD *)&v364[v390] = v391;
                v359 = v365 + 1;
                if (v365 + 1 >= v363)
                {
                  v442 = 2 * v363;
                  v358 = (char *)malloc_type_realloc(v358, 32 * v363, 0xAEAE4FF4uLL);
                  v363 = v442;
                }
                v362 = 0;
                v392 = &v358[16 * v365];
                *(_QWORD *)v392 = ((v364 - v360) >> 2) + 1;
                *((_QWORD *)v392 + 1) = v361 - 1;
                v361 = 0;
                if (v365 < 0)
                  goto LABEL_286;
              }
              v375 = 0;
              v376 = 0;
              v377 = 26;
              if (v361 <= 0x7D0)
                v377 = 8;
              v378 = 3;
              if (v361 > 0x7D0)
                v378 = 9;
              while (2)
              {
                v379 = v375 / v377;
                v380 = (uint64_t)(v361 - 1 + v375) / v377;
                v381 = (uint64_t)(2 * v361 - 2 + v375) / v377;
                if (v375 / v377 >= v380)
                {
                  if (v379 < v381)
                    goto LABEL_327;
                  if (v380 < v381)
                    goto LABEL_329;
                }
                else if (v380 >= v381)
                {
                  if (v379 < v381)
                  {
LABEL_329:
                    *((_QWORD *)v454 + v376) = v381;
LABEL_321:
                    ++v376;
                    v375 += 3 * v361 - 3;
                    if (v378 != v376)
                      continue;
                    while (2)
                    {
                      v382 = 0;
                      v383 = 0;
                      v384 = v378;
                      v378 /= 3uLL;
                      if (v378 <= 1)
                        v385 = 1;
                      else
                        v385 = v378;
                      v386 = 8 * v385;
LABEL_337:
                      v387 = *(_QWORD *)((char *)v454 + v382);
                      v388 = *(_QWORD *)((char *)v454 + v382 + 8);
                      v389 = *(_QWORD *)((char *)&v454[1] + v382);
                      if (v387 >= v388)
                      {
                        if (v387 < v389)
                          goto LABEL_342;
                        if (v388 < v389)
                          goto LABEL_344;
                      }
                      else if (v388 >= v389)
                      {
                        if (v387 < v389)
                        {
LABEL_344:
                          *(_QWORD *)((char *)v454 + v383) = v389;
LABEL_336:
                          v383 += 8;
                          v382 += 24;
                          if (v386 == v383)
                          {
                            if (v384 < 9)
                            {
                              v374 = *(_QWORD *)&v454[0];
                              goto LABEL_346;
                            }
                            continue;
                          }
                          goto LABEL_337;
                        }
LABEL_342:
                        *(_QWORD *)((char *)v454 + v383) = v387;
                        goto LABEL_336;
                      }
                      break;
                    }
                    *(_QWORD *)((char *)v454 + v383) = v388;
                    goto LABEL_336;
                  }
LABEL_327:
                  *((_QWORD *)v454 + v376) = v379;
                  goto LABEL_321;
                }
                break;
              }
              *((_QWORD *)v454 + v376) = v380;
              goto LABEL_321;
            }
LABEL_286:
            free(v358);
            v354 = (char *)v443;
            v346 = v450;
            v343 = v447;
          }
LABEL_287:
          ++v352;
        }
        while (v343 > v353);
        *(_QWORD *)&v346[2 * v352] = 0;
        v393 = v346 + 1;
        if (!v346[1])
        {
LABEL_374:
          v136 = 0;
          goto LABEL_375;
        }
      }
      v394 = 0;
      v395 = v346;
      do
      {
        v136 = v394 + 1;
        if (v394 >= v448)
        {
          v396 = 2 * v448;
          if (!v448)
            v396 = 10;
          if (v396 <= v394)
            v396 = v394 + 1;
          if (v396)
          {
            v448 = v396;
            ptr = (void **)malloc_type_realloc(ptr, 24 * v396, 0x800791D6uLL);
          }
          else
          {
            v448 = 0;
          }
        }
        v397 = (uint64_t *)&ptr[3 * v394];
        *v397 = 0;
        v397[1] = 0;
        v397[2] = 0;
        v398 = *v395;
        v399 = *v393;
        if ((int)v398 < *v393)
        {
          v400 = &ptr[3 * v394];
          v403 = (uint64_t)v400[2];
          v401 = (uint64_t *)(v400 + 2);
          v402 = v403;
          v404 = (void **)(v401 - 1);
          v405 = *v397;
          do
          {
            if (v405 >= v402)
            {
              v406 = 2 * v402;
              if (!v402)
                v406 = 32;
              if (v406 <= v405)
                v402 = v405 + 1;
              else
                v402 = v406;
              if (v402)
              {
                *v404 = malloc_type_realloc(*v404, 8 * v402, 0x80966612uLL);
                v405 = *v397;
                v399 = *v393;
              }
              *v401 = v402;
            }
            *v397 = v405 + 1;
            *((_QWORD *)*v404 + v405++) = v446[v398++];
          }
          while (v398 < v399);
        }
        v346 = v450;
        v395 = &v450[2 * v136];
        v393 = v395 + 1;
        v394 = v136;
      }
      while (v395[1]);
LABEL_375:
      free(v157);
      free(v443);
      free(v346);
      free(v444);
      if (v136 >= 1)
      {
        v407 = 0;
        v135 = ptr;
        v138 = v446;
        v408 = v439;
        while (1)
        {
          v410 = (uint64_t)ptr[3 * v407];
          if (v410 < 1)
          {
            v412 = 0;
            v413 = 0.0;
          }
          else
          {
            v411 = (float32x2_t **)ptr[3 * v407 + 1];
            v412 = 0;
            v413 = 0.0;
            do
            {
              v414 = *v411++;
              v412 = vadd_f32(v412, *v414);
              v413 = v413 + 1.0;
              --v410;
            }
            while (v410);
          }
          v415 = *v446;
          **v446 = vmul_n_f32(v412, 1.0 / v413);
          v139 = v408 + 1;
          if (v408 >= v449)
          {
            v416 = 2 * v449;
            if (2 * v449 <= v408)
              v416 = v408 + 1;
            if (v416)
            {
              v449 = v416;
              v417 = v408;
              v409 = (char *)malloc_type_realloc(__src, 288 * v416, 0x42467C6EuLL);
              v408 = v417;
              goto LABEL_379;
            }
            v449 = 0;
          }
          v409 = __src;
LABEL_379:
          __src = v409;
          memcpy(&v409[288 * v408], v415, 0x120uLL);
          ++v407;
          v408 = v139;
          if (v407 == v136)
            goto LABEL_165;
        }
      }
      v139 = v439;
      v135 = ptr;
      v138 = v446;
LABEL_165:
      v137 = v440;
      v133 = v441 + 1;
      v134 = v139;
      v132 = (v437 - 1);
      if (v441 + 1 >= v437)
        goto LABEL_395;
    }
  }
  v138 = 0;
  v136 = 0;
  v135 = 0;
  v139 = 0;
  __src = 0;
LABEL_395:
  v426 = *v435;
  v427 = v435[2];
  if (v139 <= v427)
  {
    v431 = v139 - v426;
    if (v139 <= v426)
      goto LABEL_402;
  }
  else
  {
    v428 = v138;
    v429 = 2 * v427;
    if (v429 <= v139)
      v430 = v139;
    else
      v430 = v429;
    if (v430)
      v435[1] = (uint64_t)malloc_type_realloc((void *)v435[1], 288 * v430, 0xD8D1DA35uLL);
    v435[2] = v430;
    v138 = v428;
    v431 = v139 - v426;
    if (v139 <= v426)
    {
LABEL_402:
      *v435 = v139;
      v432 = __src;
      if (v139 < 1)
        goto LABEL_404;
      goto LABEL_403;
    }
  }
  bzero((void *)(v435[1] + 288 * *v435), 288 * v431);
  *v435 = v139;
  v432 = __src;
  if (v139 >= 1)
LABEL_403:
    memcpy((void *)v435[1], v432, 288 * v139);
LABEL_404:
  free(v432);
  free(v138);
  if (v136 >= 1)
  {
    v433 = v135 + 1;
    do
    {
      v434 = *v433;
      v433 += 3;
      free(v434);
      --v136;
    }
    while (v136);
  }
  free(v135);
  free(v438);
}

uint64_t g_triangulate_inv_depthf(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, float *a6, uint64_t *a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, float a15, float a16, uint64_t a17)
{
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t result;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  __int128 v37;
  _QWORD v38[3];
  int v39;
  int v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v46 = 0u;
  v47 = 0u;
  v38[0] = a1;
  v38[1] = a2;
  v38[2] = a3;
  v39 = LODWORD(a9);
  v40 = a4;
  v41 = *(_QWORD *)a6;
  v42 = a6[2];
  v43 = v41;
  v44 = v42;
  v45 = 0;
  LODWORD(v46) = 0;
  *((_QWORD *)&v46 + 1) = a5;
  *(_QWORD *)&v47 = a8;
  DWORD2(v47) = 2143289344;
  if (a7)
  {
    v45 = *a7;
    LODWORD(v46) = *((_DWORD *)a7 + 2);
  }
  tri_inv_depthf_calc_JtJ_Jtr_err((uint64_t)v38, (uint64_t)&v48, (uint64_t)&v51, a9, 0.0, a11, a12, a13, a14, a15, a16);
  v19 = v18;
  v60 = sqrtf(*(float *)&v48);
  v61 = *((float *)&v48 + 1) / v60;
  v62 = sqrtf(*(float *)&v49 - (float)(v61 * v61));
  v63 = *((float *)&v48 + 2) / v60;
  v20 = (float)(*((float *)&v49 + 1) - (float)((float)(*((float *)&v48 + 2) / v60) * (float)(*((float *)&v48 + 1) / v60)))
      / v62;
  v64 = v20;
  v65 = sqrtf((float)(v50 - (float)(v63 * v63)) - (float)(v20 * v20));
  v21 = (float)(v52 - (float)((float)(*((float *)&v48 + 1) / v60) * (float)(v51 / v60))) / v62;
  v58 = v21;
  v59 = (float)((float)(v53 - (float)((float)(*((float *)&v48 + 2) / v60) * (float)(v51 / v60))) - (float)(v20 * v21))
      / v65;
  v56 = v59 / v65;
  v57 = v51 / v60;
  v22 = (float)(v21 - (float)(v20 * (float)(v59 / v65))) / v62;
  v54 = (float)((float)((float)(v51 / v60) - (float)((float)(*((float *)&v48 + 1) / v60) * v22))
              - (float)((float)(*((float *)&v48 + 2) / v60) * (float)(v59 / v65)))
      / v60;
  v55 = v22;
  v43 = v41;
  v44 = v42;
  *(float *)&v41 = *(float *)&v41 + v54;
  *((float *)&v41 + 1) = v22 + *((float *)&v41 + 1);
  v42 = (float)(v59 / v65) + v42;
  result = tri_inv_depthf_calc_JtJ_Jtr_err_1((uint64_t)v38);
  if (*(float *)&v24 >= v19)
    goto LABEL_5;
  tri_inv_depthf_calc_JtJ_Jtr_err((uint64_t)v38, (uint64_t)&v48, (uint64_t)&v51, v24, v25, v26, v27, v28, v29, v30, v31);
  v33 = v32;
  v60 = sqrtf(*(float *)&v48);
  v61 = *((float *)&v48 + 1) / v60;
  v62 = sqrtf(*(float *)&v49 - (float)(v61 * v61));
  v63 = *((float *)&v48 + 2) / v60;
  v34 = (float)(*((float *)&v49 + 1) - (float)((float)(*((float *)&v48 + 2) / v60) * (float)(*((float *)&v48 + 1) / v60)))
      / v62;
  v64 = v34;
  v65 = sqrtf((float)(v50 - (float)(v63 * v63)) - (float)(v34 * v34));
  v35 = (float)(v52 - (float)((float)(*((float *)&v48 + 1) / v60) * (float)(v51 / v60))) / v62;
  v58 = v35;
  v59 = (float)((float)(v53 - (float)((float)(*((float *)&v48 + 2) / v60) * (float)(v51 / v60))) - (float)(v34 * v35))
      / v65;
  v56 = v59 / v65;
  v57 = v51 / v60;
  v36 = (float)(v35 - (float)(v34 * (float)(v59 / v65))) / v62;
  v54 = (float)((float)((float)(v51 / v60) - (float)((float)(*((float *)&v48 + 1) / v60) * v36))
              - (float)((float)(*((float *)&v48 + 2) / v60) * (float)(v59 / v65)))
      / v60;
  v55 = v36;
  v44 = v42;
  v43 = v41;
  *(float *)&v41 = *(float *)&v41 + v54;
  *((float *)&v41 + 1) = v36 + *((float *)&v41 + 1);
  v42 = (float)(v59 / v65) + v42;
  result = tri_inv_depthf_calc_JtJ_Jtr_err_1((uint64_t)v38);
  if (*(float *)&v24 >= v33)
  {
LABEL_5:
    v41 = v43;
    v42 = v44;
  }
  *(_QWORD *)a6 = v41;
  a6[2] = v42;
  if (a17)
  {
    result = tri_inv_depthf_calc_JtJ_Jtr_err((uint64_t)v38, (uint64_t)&v48, (uint64_t)&v51, v24, v25, v26, v27, v28, v29, v30, v31);
    v37 = v49;
    *(_OWORD *)a17 = v48;
    *(_OWORD *)(a17 + 16) = v37;
    *(float *)(a17 + 32) = v50;
  }
  return result;
}

uint64_t tri_inv_depthf_calc_JtJ_Jtr_err(uint64_t result, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9, float a10, float a11)
{
  float v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  float *v15;
  uint64_t v16;
  float *v17;
  float *v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float *v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;

  v12 = *(unsigned int *)(result + 28);
  v13 = *(float **)(result + 80);
  if (a2)
  {
    *(_DWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a3 + 8) = 0;
    *(_QWORD *)a3 = 0;
  }
  if ((int)v12 >= 1)
  {
    v14 = 0;
    v15 = *(float **)(result + 72);
    v16 = *(_QWORD *)(result + 16);
    v17 = (float *)(*(_QWORD *)(result + 8) + 4);
    v18 = (float *)(*(_QWORD *)result + 24);
    v19 = 0.0;
    do
    {
      v115 = v19;
      v24 = *(float *)(result + 36);
      v25 = *(float *)(result + 40);
      v26 = v15[1];
      v28 = *(v18 - 6);
      v27 = *(v18 - 5);
      v30 = v15[2];
      v29 = v15[3];
      v32 = *(v18 - 4);
      v31 = *(v18 - 3);
      v33 = v15[6];
      v34 = v15[7];
      v35 = v18[1];
      v36 = (float)((float)((float)(v28 * *v15) + 0.0) + (float)(v31 * v29)) + (float)(*v18 * v33);
      v37 = v15[4];
      v38 = v15[5];
      v39 = (float)((float)((float)(v28 * v26) + 0.0) + (float)(v31 * v37)) + (float)(*v18 * v34);
      v40 = v15[8];
      v41 = (float)((float)((float)(v28 * v30) + 0.0) + (float)(v31 * v38)) + (float)(*v18 * v40);
      v42 = *(v18 - 2);
      v43 = *(v18 - 1);
      v44 = (float)((float)((float)(v27 * *v15) + 0.0) + (float)(v42 * v29)) + (float)(v35 * v33);
      v45 = v18[2];
      v46 = (float)((float)((float)(v32 * *v15) + 0.0) + (float)(v43 * v29)) + (float)(v45 * v33);
      v47 = (float)((float)((float)(v27 * v26) + 0.0) + (float)(v42 * v37)) + (float)(v35 * v34);
      v48 = (float)((float)(v32 * v26) + 0.0) + (float)(v43 * v37);
      v49 = (float)((float)((float)(v27 * v30) + 0.0) + (float)(v42 * v38)) + (float)(v35 * v40);
      v50 = v48 + (float)(v45 * v34);
      v51 = (float)((float)((float)(v32 * v30) + 0.0) + (float)(v43 * v38)) + (float)(v45 * v40);
      v52 = 1.0 / *(float *)(result + 32);
      v53 = v15[9] - v18[3];
      v54 = v15[10] - v18[4];
      v55 = v15[11] - v18[5];
      v56 = (float)((float)((float)(v28 * v53) + 0.0) + (float)(v31 * v54)) + (float)(*v18 * v55);
      v57 = (float)((float)((float)(v27 * v53) + 0.0) + (float)(v42 * v54)) + (float)(v35 * v55);
      v58 = (float)((float)((float)(v32 * v53) + 0.0) + (float)(v43 * v54)) + (float)(v45 * v55);
      v59 = (float)((float)((float)((float)(v52 * v24) * v39) + (float)(v36 * v52)) + (float)(v41 * (float)(v52 * v25)))
          + v56;
      v60 = (float)((float)((float)((float)(v52 * v24) * v47) + (float)(v44 * v52)) + (float)(v49 * (float)(v52 * v25)))
          + v57;
      v61 = (float)((float)((float)((float)(v52 * v24) * v50) + (float)(v46 * v52)) + (float)(v51 * (float)(v52 * v25)))
          + v58;
      if (v59 <= 0.0)
        v62 = NAN;
      else
        v62 = 1.0 / v59;
      if (a2)
      {
        v63 = (float)(v62 * v62) * (float)-v60;
        v64 = (float)(v62 * v62) * (float)-v61;
        v65 = -(float)(v52 * v52);
        v66 = v65 * (float)((float)(v36 + (float)(v39 * v24)) + (float)(v41 * v25));
        v113 = (float)((float)(v65 * (float)((float)(v46 + (float)(v50 * v24)) + (float)(v51 * v25))) * v62)
             + (float)(v64 * v66);
        v114 = (float)((float)(v65 * (float)((float)(v44 + (float)(v47 * v24)) + (float)(v49 * v25))) * v62)
             + (float)(v63 * v66);
        v112 = (float)((float)(v52 * v47) * v62) + (float)(v63 * (float)(v52 * v39));
        a10 = (float)((float)(v52 * v50) * v62) + (float)(v64 * (float)(v52 * v39));
        a11 = (float)((float)(v52 * v49) * v62) + (float)(v63 * (float)(v52 * v41));
        v11 = (float)((float)(v52 * v51) * v62) + (float)(v64 * (float)(v52 * v41));
      }
      v67 = *(v17 - 1) - (float)(v60 * v62);
      v68 = *v17 - (float)(v61 * v62);
      if (v16)
      {
        v69 = (float *)(v16 + 4 * (v14 & 0xFFFFFFFC));
        v70 = *v69;
        v71 = v69[1];
        v72 = v69[2];
        v73 = v69[3];
        v19 = v115
            + (float)((float)((float)((float)((float)((float)(*v69 * v67) + 0.0) + (float)(v71 * v68)) * v67) + 0.0)
                    + (float)((float)((float)((float)(v72 * v67) + 0.0) + (float)(v73 * v68)) * v68));
        if (!a2)
          goto LABEL_6;
        v74 = (float)((float)(v70 * v114) + 0.0) + (float)(v72 * v113);
        v75 = (float)((float)(v71 * v114) + 0.0) + (float)(v73 * v113);
        v76 = (float)((float)(v70 * v112) + 0.0) + (float)(v72 * a10);
        v77 = (float)((float)(v71 * v112) + 0.0) + (float)(v73 * a10);
        v78 = (float)((float)(v70 * a11) + 0.0) + (float)(v72 * v11);
        v79 = (float)((float)(v71 * a11) + 0.0) + (float)(v73 * v11);
        v80 = (float)(*(float *)(a3 + 4) + (float)(v76 * v67)) + (float)(v77 * v68);
        *(float *)a3 = (float)(*(float *)a3 + (float)(v74 * v67)) + (float)(v75 * v68);
        *(float *)(a3 + 4) = v80;
        *(float *)(a3 + 8) = (float)(*(float *)(a3 + 8) + (float)(v78 * v67)) + (float)(v79 * v68);
        v81 = (float)((float)(v114 * v74) + 0.0) + (float)(v113 * v75);
        v82 = (float)((float)(v112 * v74) + 0.0) + (float)(a10 * v75);
        v83 = (float)((float)(a11 * v74) + 0.0) + (float)(v11 * v75);
        v84 = (float)((float)(v114 * v76) + 0.0) + (float)(v113 * v77);
        v85 = (float)((float)(v112 * v76) + 0.0) + (float)(a10 * v77);
        v86 = (float)((float)(a11 * v76) + 0.0) + (float)(v11 * v77);
        v87 = (float)((float)(v114 * v78) + 0.0) + (float)(v113 * v79);
        v88 = (float)((float)(v112 * v78) + 0.0) + (float)(a10 * v79);
        v89 = (float)((float)(a11 * v78) + 0.0) + (float)(v11 * v79);
      }
      else
      {
        v90 = *(float *)(result + 24);
        v91 = v67 * v90;
        v92 = v68 * v90;
        v19 = v115 + (float)((float)(v92 * v92) + (float)(v91 * v91));
        if (!a2)
          goto LABEL_6;
        v93 = v114 * v90;
        v94 = v113 * v90;
        v95 = v112 * v90;
        a10 = a10 * v90;
        a11 = a11 * v90;
        v11 = v11 * v90;
        v96 = (float)(*(float *)(a3 + 4) + (float)((float)(v112 * v90) * v91)) + (float)(a10 * v92);
        *(float *)a3 = (float)(*(float *)a3 + (float)((float)(v114 * v90) * v91)) + (float)((float)(v113 * v90) * v92);
        *(float *)(a3 + 4) = v96;
        *(float *)(a3 + 8) = (float)(*(float *)(a3 + 8) + (float)(a11 * v91)) + (float)(v11 * v92);
        v81 = (float)((float)(v93 * v93) + 0.0) + (float)(v94 * v94);
        v84 = (float)((float)((float)(v112 * v90) * (float)(v114 * v90)) + 0.0) + (float)(a10 * (float)(v113 * v90));
        v113 = v94;
        v114 = v93;
        v87 = (float)((float)(a11 * v93) + 0.0) + (float)(v11 * v94);
        v85 = (float)((float)(v95 * v95) + 0.0) + (float)(a10 * a10);
        v112 = v95;
        v88 = (float)((float)(a11 * v95) + 0.0) + (float)(v11 * a10);
        v89 = (float)((float)(a11 * a11) + 0.0) + (float)(v11 * v11);
        v86 = v88;
        v83 = v87;
        v82 = (float)((float)(v95 * v93) + 0.0) + (float)(a10 * v94);
      }
      v20 = v82 + *(float *)(a2 + 4);
      *(float *)a2 = v81 + *(float *)a2;
      *(float *)(a2 + 4) = v20;
      v21 = v84 + *(float *)(a2 + 12);
      *(float *)(a2 + 8) = v83 + *(float *)(a2 + 8);
      *(float *)(a2 + 12) = v21;
      v22 = v86 + *(float *)(a2 + 20);
      *(float *)(a2 + 16) = v85 + *(float *)(a2 + 16);
      *(float *)(a2 + 20) = v22;
      v23 = v88 + *(float *)(a2 + 28);
      *(float *)(a2 + 24) = v87 + *(float *)(a2 + 24);
      *(float *)(a2 + 28) = v23;
      *(float *)(a2 + 32) = v89 + *(float *)(a2 + 32);
LABEL_6:
      v14 += 4;
      v17 += 2;
      v18 += 12;
    }
    while (4 * v12 != v14);
  }
  if (v13)
  {
    v97 = *(float *)(result + 56) - *(float *)(result + 32);
    v98 = *(float *)(result + 60) - *(float *)(result + 36);
    v99 = *(float *)(result + 64) - *(float *)(result + 40);
    if (!a2)
      return result;
    v100 = *(float *)(a2 + 4);
    *(float *)a2 = *v13 + *(float *)a2;
    *(float *)(a2 + 4) = v100 + v13[1];
    v101 = *(float *)(a2 + 12);
    *(float *)(a2 + 8) = *(float *)(a2 + 8) + v13[2];
    *(float *)(a2 + 12) = v101 + v13[3];
    v102 = *(float *)(a2 + 20);
    *(float *)(a2 + 16) = *(float *)(a2 + 16) + v13[4];
    *(float *)(a2 + 20) = v102 + v13[5];
    v103 = *(float *)(a2 + 28);
    *(float *)(a2 + 24) = *(float *)(a2 + 24) + v13[6];
    *(float *)(a2 + 28) = v103 + v13[7];
    *(float *)(a2 + 32) = *(float *)(a2 + 32) + v13[8];
    v104 = *(float *)(a3 + 4);
    v105 = *(float *)a3 + (float)(*v13 * v97);
    *(float *)a3 = v105;
    v106 = v105 + (float)(v13[1] * v98);
    *(float *)a3 = v106;
    *(float *)a3 = v106 + (float)(v13[2] * v99);
    v107 = v104 + (float)(v13[3] * v97);
    *(float *)(a3 + 4) = v107;
    v108 = v107 + (float)(v13[4] * v98);
    *(float *)(a3 + 4) = v108;
    *(float *)(a3 + 4) = v108 + (float)(v13[5] * v99);
    v109 = *(float *)(a3 + 8) + (float)(v13[6] * v97);
    *(float *)(a3 + 8) = v109;
    v110 = v109 + (float)(v13[7] * v98);
    *(float *)(a3 + 8) = v110;
    *(float *)(a3 + 8) = v110 + (float)(v13[8] * v99);
  }
  else if (!a2)
  {
    return result;
  }
  v111 = *(float *)a2;
  if (*(float *)a2 < 0.000001)
    v111 = 0.000001;
  *(float *)a2 = v111;
  return result;
}

uint64_t tri_inv_depthf_calc_JtJ_Jtr_err_1(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  float *v3;
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  float *v21;
  float *v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  BOOL v37;
  float v38;
  float v39;
  float v40;

  v1 = *(unsigned int *)(result + 28);
  if ((int)v1 >= 1)
  {
    v2 = 0;
    v3 = *(float **)(result + 72);
    v4 = *(_QWORD *)(result + 16);
    v5 = *v3;
    v6 = v3[1];
    v7 = v3[6];
    v8 = v3[7];
    v10 = v3[2];
    v9 = v3[3];
    v11 = v3[4];
    v12 = v3[5];
    v13 = 1.0 / *(float *)(result + 32);
    v14 = v13 * *(float *)(result + 36);
    v15 = v3[8];
    v16 = v3[9];
    v17 = v3[10];
    v18 = v3[11];
    v19 = v13 * *(float *)(result + 40);
    v20 = 4 * v1;
    v21 = (float *)(*(_QWORD *)(result + 8) + 4);
    v22 = (float *)(*(_QWORD *)result + 24);
    v23 = 0.0;
    do
    {
      while (1)
      {
        v24 = *(v22 - 6);
        v25 = *(v22 - 5);
        v27 = *(v22 - 4);
        v26 = *(v22 - 3);
        v28 = *(v22 - 2);
        v29 = *(v22 - 1);
        v30 = v16 - v22[3];
        v31 = v17 - v22[4];
        v32 = v18 - v22[5];
        v33 = (float)((float)((float)(v14
                                    * (float)((float)((float)((float)(v24 * v6) + 0.0) + (float)(v26 * v11))
                                            + (float)(*v22 * v8)))
                            + (float)((float)((float)((float)((float)(v24 * v5) + 0.0) + (float)(v26 * v9))
                                            + (float)(*v22 * v7))
                                    * v13))
                    + (float)((float)((float)((float)((float)(v24 * v10) + 0.0) + (float)(v26 * v12))
                                    + (float)(*v22 * v15))
                            * v19))
            + (float)((float)((float)((float)(v24 * v30) + 0.0) + (float)(v26 * v31)) + (float)(*v22 * v32));
        v34 = (float)((float)((float)(v14
                                    * (float)((float)((float)((float)(v25 * v6) + 0.0) + (float)(v28 * v11))
                                            + (float)(v22[1] * v8)))
                            + (float)((float)((float)((float)((float)(v25 * v5) + 0.0) + (float)(v28 * v9))
                                            + (float)(v22[1] * v7))
                                    * v13))
                    + (float)((float)((float)((float)((float)(v25 * v10) + 0.0) + (float)(v28 * v12))
                                    + (float)(v22[1] * v15))
                            * v19))
            + (float)((float)((float)((float)(v25 * v30) + 0.0) + (float)(v28 * v31)) + (float)(v22[1] * v32));
        v35 = (float)((float)((float)(v14
                                    * (float)((float)((float)((float)(v27 * v6) + 0.0) + (float)(v29 * v11))
                                            + (float)(v22[2] * v8)))
                            + (float)((float)((float)((float)((float)(v27 * v5) + 0.0) + (float)(v29 * v9))
                                            + (float)(v22[2] * v7))
                                    * v13))
                    + (float)((float)((float)((float)((float)(v27 * v10) + 0.0) + (float)(v29 * v12))
                                    + (float)(v22[2] * v15))
                            * v19))
            + (float)((float)((float)((float)(v27 * v30) + 0.0) + (float)(v29 * v31)) + (float)(v22[2] * v32));
        v36 = 1.0 / v33;
        v37 = v33 > 0.0;
        v38 = NAN;
        if (v37)
          v38 = v36;
        v39 = *(v21 - 1) - (float)(v34 * v38);
        v40 = *v21 - (float)(v35 * v38);
        if (!v4)
          break;
        v23 = v23
            + (float)((float)((float)((float)((float)((float)(*(float *)(v4 + 4 * (v2 & 0xFFFFFFFC))
                                                            * v39)
                                                    + 0.0)
                                            + (float)(*(float *)(v4 + 4 * (v2 & 0xFFFFFFFC) + 4) * v40))
                                    * v39)
                            + 0.0)
                    + (float)((float)((float)((float)(*(float *)(v4 + 4 * (v2 & 0xFFFFFFFC) + 8) * v39)
                                            + 0.0)
                                    + (float)(*(float *)(v4 + 4 * (v2 & 0xFFFFFFFC) + 12) * v40))
                            * v40));
        v2 += 4;
        v21 += 2;
        v22 += 12;
        if (v20 == v2)
          return result;
      }
      v23 = v23
          + (float)((float)((float)(v40 * *(float *)(result + 24)) * (float)(v40 * *(float *)(result + 24)))
                  + (float)((float)(v39 * *(float *)(result + 24)) * (float)(v39 * *(float *)(result + 24))));
      v2 += 4;
      v21 += 2;
      v22 += 12;
    }
    while (v20 != v2);
  }
  return result;
}

uint64_t vl_dump_stop(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 548))
  {
    v1 = result;
    if (*(_DWORD *)(result + 32))
    {
      *(_DWORD *)(result + 32) = 0;
      pthread_join(*(pthread_t *)(result + 8), 0);
      free(*(void **)(v1 + 1136));
      free(*(void **)(v1 + 1160));
      free(*(void **)(v1 + 1400));
      free(*(void **)(v1 + 1640));
      free(*(void **)(v1 + 2296));
      free(*(void **)(v1 + 2320));
      if (*(_DWORD *)(v1 + 2280))
      {
        free(*(void **)(v1 + 2272));
        *(_DWORD *)(v1 + 2280) = 0;
      }
      result = pthread_mutex_destroy((pthread_mutex_t *)(v1 + 1064));
      *(_DWORD *)v1 = 0;
    }
  }
  return result;
}

BOOL unlink_cb(const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  _BOOL8 result;
  _BOOL8 v4;

  result = remove(a1, a2);
  v4 = result;
  if (result)
  {
    perror((const char *)a1);
    return v4;
  }
  return result;
}

uint64_t vl_dump_update(uint64_t result, uint64_t *a2, int a3, float a4)
{
  uint64_t v4;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  timespec v19;

  if (result)
  {
    v4 = result;
    if (*(_DWORD *)result)
    {
      if ((*(_BYTE *)(result + 4) & 0x10) != 0 && *(_DWORD *)(result + 32) && *(_BYTE *)(result + 548))
      {
        v19.tv_sec = 0;
        v19.tv_nsec = 0;
        clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, &v19);
        v8 = (double)(v19.tv_nsec - *(_QWORD *)(v4 + 24)) * 0.000000001 + (double)(v19.tv_sec - *(_QWORD *)(v4 + 16));
        v9 = *a2;
        v10 = a2[1];
        v11 = a2[2];
        pthread_mutex_lock((pthread_mutex_t *)(v4 + 1064));
        v12 = *(_QWORD *)(v4 + 1128);
        v13 = *(_QWORD *)(v4 + 1144);
        if (v12 >= v13)
        {
          v14 = 2 * v13;
          v15 = v13 == 0;
          v16 = 6;
          if (!v15)
            v16 = v14;
          if (v16 <= v12)
            v17 = v12 + 1;
          else
            v17 = v16;
          if (v17)
          {
            *(_QWORD *)(v4 + 1136) = realloc(*(void **)(v4 + 1136), 40 * v17);
            v12 = *(_QWORD *)(v4 + 1128);
          }
          *(_QWORD *)(v4 + 1144) = v17;
        }
        *(_QWORD *)(v4 + 1128) = v12 + 1;
        v18 = *(_QWORD *)(v4 + 1136) + 40 * v12;
        *(double *)v18 = v8;
        *(_QWORD *)(v18 + 8) = v9;
        *(_QWORD *)(v18 + 16) = v10;
        *(_QWORD *)(v18 + 24) = v11;
        *(float *)(v18 + 32) = a4;
        *(_DWORD *)(v18 + 36) = a3;
        return pthread_mutex_unlock((pthread_mutex_t *)(v4 + 1064));
      }
    }
  }
  return result;
}

uint64_t vl_dump_locate(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char *v8;
  double v9;
  int v10;
  int v11;
  int v12;
  size_t v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  timespec v26;

  if (result)
  {
    v4 = result;
    if (*(_DWORD *)result)
    {
      if ((*(_BYTE *)(result + 4) & 1) != 0 && *(_DWORD *)(result + 32) && *(_BYTE *)(result + 548))
      {
        v8 = (char *)malloc(0x2C8uLL);
        v9 = *(double *)(a3 + 88);
        if (v9 == 0.0)
        {
          v26.tv_sec = 0;
          v26.tv_nsec = 0;
          clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, &v26);
          v9 = (double)(v26.tv_nsec - *(_QWORD *)(v4 + 24)) * 0.000000001 + (double)(v26.tv_sec - *(_QWORD *)(v4 + 16));
        }
        *(double *)v8 = v9;
        v10 = *(_DWORD *)(a2 + 12);
        v11 = *(_DWORD *)(a2 + 16);
        *((_DWORD *)v8 + 176) = v11;
        v12 = *(_DWORD *)(a2 + 8);
        *((_DWORD *)v8 + 174) = v12;
        *((_DWORD *)v8 + 175) = v10;
        if (v11)
          __assert_rtn("vl_dump_locate", "vl_dump.c", 1721, "image->type == 0 && \"Only support grey scale image\"");
        v13 = v10 * v12;
        v14 = malloc(v13);
        *((_QWORD *)v8 + 86) = v14;
        memcpy(v14, *(const void **)a2, v13);
        v15 = *(_OWORD *)(a3 + 144);
        *(_OWORD *)(v8 + 648) = *(_OWORD *)(a3 + 128);
        *(_OWORD *)(v8 + 664) = v15;
        *((_QWORD *)v8 + 85) = *(_QWORD *)(a3 + 160);
        v16 = *(_OWORD *)(a3 + 80);
        *(_OWORD *)(v8 + 584) = *(_OWORD *)(a3 + 64);
        *(_OWORD *)(v8 + 600) = v16;
        v17 = *(_OWORD *)(a3 + 112);
        *(_OWORD *)(v8 + 616) = *(_OWORD *)(a3 + 96);
        *(_OWORD *)(v8 + 632) = v17;
        v18 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)(v8 + 520) = *(_OWORD *)a3;
        *(_OWORD *)(v8 + 536) = v18;
        v19 = *(_OWORD *)(a3 + 48);
        *(_OWORD *)(v8 + 552) = *(_OWORD *)(a3 + 32);
        *(_OWORD *)(v8 + 568) = v19;
        if (a4)
          __strcpy_chk();
        pthread_mutex_lock((pthread_mutex_t *)(v4 + 1064));
        v20 = *(_QWORD *)(v4 + 1152);
        v21 = *(_QWORD *)(v4 + 1168);
        if (v20 >= v21)
        {
          v22 = 2 * v21;
          v23 = v21 == 0;
          v24 = 32;
          if (!v23)
            v24 = v22;
          if (v24 <= v20)
            v25 = v20 + 1;
          else
            v25 = v24;
          if (v25)
          {
            *(_QWORD *)(v4 + 1160) = realloc(*(void **)(v4 + 1160), 8 * v25);
            v20 = *(_QWORD *)(v4 + 1152);
          }
          *(_QWORD *)(v4 + 1168) = v25;
        }
        *(_QWORD *)(v4 + 1152) = v20 + 1;
        *(_QWORD *)(*(_QWORD *)(v4 + 1160) + 8 * v20) = v8;
        return pthread_mutex_unlock((pthread_mutex_t *)(v4 + 1064));
      }
    }
  }
  return result;
}

void vl_dump_kpts(uint64_t a1, uint64_t *a2)
{
  double *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  timespec v13;

  vl_dump_detail_add_hash(a1, (uint64_t)"vl_kpts", a2, 0, 0);
  if (a1 && *(_DWORD *)a1 && (*(_BYTE *)(a1 + 4) & 2) != 0 && *(_DWORD *)(a1 + 32) && *(_BYTE *)(a1 + 548))
  {
    v4 = (double *)malloc(0x38uLL);
    v13.tv_sec = 0;
    v13.tv_nsec = 0;
    clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, &v13);
    *v4 = (double)(v13.tv_nsec - *(_QWORD *)(a1 + 24)) * 0.000000001 + (double)(v13.tv_sec - *(_QWORD *)(a1 + 16));
    v5 = *a2;
    if (*a2 <= 0)
    {
      v4[2] = 0.0;
      *((_QWORD *)v4 + 3) = v5;
      *((_QWORD *)v4 + 1) = v5;
    }
    else
    {
      v6 = malloc(288 * v5);
      *((_QWORD *)v4 + 2) = v6;
      bzero(v6, 288 * v5);
      *((_QWORD *)v4 + 3) = v5;
      *((_QWORD *)v4 + 1) = v5;
      memcpy(v6, (const void *)a2[1], 288 * v5);
    }
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 1064));
    v7 = *(_QWORD *)(a1 + 1392);
    v8 = *(_QWORD *)(a1 + 1408);
    if (v7 >= v8)
    {
      v9 = 2 * v8;
      v10 = v8 == 0;
      v11 = 32;
      if (!v10)
        v11 = v9;
      if (v11 <= v7)
        v12 = v7 + 1;
      else
        v12 = v11;
      if (v12)
      {
        *(_QWORD *)(a1 + 1400) = realloc(*(void **)(a1 + 1400), 8 * v12);
        v7 = *(_QWORD *)(a1 + 1392);
      }
      *(_QWORD *)(a1 + 1408) = v12;
    }
    *(_QWORD *)(a1 + 1392) = v7 + 1;
    *(_QWORD *)(*(_QWORD *)(a1 + 1400) + 8 * v7) = v4;
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1064));
  }
}

__n128 vl_dump_detail_add_hash(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, _QWORD *a5)
{
  __n128 result;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;

  result.n128_u64[0] = 0;
  v44 = 0u;
  if (!a1 || !*(_DWORD *)a1 || (*(_BYTE *)(a1 + 4) & 8) == 0)
    return result;
  if (a3)
  {
    HIDWORD(v44) = *a3;
    v9 = 288 * *a3;
    if (v9)
    {
      v10 = 0;
      v11 = (char *)a3[1];
      do
      {
        v12 = *v11++;
        v10 = (1025 * (v10 + v12)) ^ ((1025 * (v10 + v12)) >> 6);
        --v9;
      }
      while (v9);
      v9 = 9 * v10;
    }
    v45 = 32769 * (v9 ^ (v9 >> 11));
    __strcpy_chk();
    *(_QWORD *)&v44 = 0x2020207374704BLL;
    v13 = *(_QWORD *)(a1 + 1664);
    v14 = *(_QWORD *)(a1 + 1680);
    if (v13 >= v14)
    {
      v15 = 2 * v14;
      v16 = v14 == 0;
      v17 = 4;
      if (!v16)
        v17 = v15;
      if (v17 <= v13)
        v18 = v13 + 1;
      else
        v18 = v17;
      if (v18)
      {
        *(_QWORD *)(a1 + 1672) = realloc(*(void **)(a1 + 1672), 56 * v18);
        v13 = *(_QWORD *)(a1 + 1664);
      }
      *(_QWORD *)(a1 + 1680) = v18;
    }
    *(_QWORD *)(a1 + 1664) = v13 + 1;
    v19 = *(_QWORD *)(a1 + 1672) + 56 * v13;
    result = 0u;
    *(_QWORD *)(v19 + 48) = v45;
    *(_OWORD *)(v19 + 16) = 0u;
    *(_OWORD *)(v19 + 32) = v44;
    *(_OWORD *)v19 = 0u;
  }
  if (a4)
  {
    v20 = *a4;
    HIDWORD(v44) = *a4;
    v21 = 8 * a4[3];
    if (v21)
    {
      v22 = 0;
      v23 = (char *)a4[4];
      do
      {
        v24 = *v23++;
        v22 = (1025 * (v22 + v24)) ^ ((1025 * (v22 + v24)) >> 6);
        --v21;
      }
      while (v21);
      v25 = 8 * v20;
      if (!v25)
        goto LABEL_28;
    }
    else
    {
      v22 = 0;
      v25 = 8 * v20;
      if (!v25)
      {
LABEL_28:
        v46 = 32769 * ((9 * v22) ^ ((9 * v22) >> 11));
        __strcpy_chk();
        *(_QWORD *)&v44 = 0x7365686374614DLL;
        v28 = *(_QWORD *)(a1 + 1664);
        v29 = *(_QWORD *)(a1 + 1680);
        if (v28 >= v29)
        {
          v30 = 2 * v29;
          v16 = v29 == 0;
          v31 = 4;
          if (!v16)
            v31 = v30;
          if (v31 <= v28)
            v32 = v28 + 1;
          else
            v32 = v31;
          if (v32)
          {
            *(_QWORD *)(a1 + 1672) = realloc(*(void **)(a1 + 1672), 56 * v32);
            v28 = *(_QWORD *)(a1 + 1664);
          }
          *(_QWORD *)(a1 + 1680) = v32;
        }
        *(_QWORD *)(a1 + 1664) = v28 + 1;
        v33 = *(_QWORD *)(a1 + 1672) + 56 * v28;
        result = 0u;
        *(_QWORD *)(v33 + 48) = v46;
        *(_OWORD *)(v33 + 16) = 0u;
        *(_OWORD *)(v33 + 32) = v44;
        *(_OWORD *)v33 = 0u;
        goto LABEL_38;
      }
    }
    v26 = (char *)a4[1];
    do
    {
      v27 = *v26++;
      v22 = (1025 * (v22 + v27)) ^ ((1025 * (v22 + v27)) >> 6);
      --v25;
    }
    while (v25);
    goto LABEL_28;
  }
LABEL_38:
  if (a5)
  {
    HIDWORD(v44) = *a5;
    v34 = 12 * *a5;
    if (v34)
    {
      v35 = 0;
      v36 = (char *)a5[1];
      do
      {
        v37 = *v36++;
        v35 = (1025 * (v35 + v37)) ^ ((1025 * (v35 + v37)) >> 6);
        --v34;
      }
      while (v34);
      v34 = 9 * v35;
    }
    v47 = 32769 * (v34 ^ (v34 >> 11));
    __strcpy_chk();
    *(_QWORD *)&v44 = 0x20736B63617254;
    v38 = *(_QWORD *)(a1 + 1664);
    v39 = *(_QWORD *)(a1 + 1680);
    if (v38 >= v39)
    {
      v40 = 2 * v39;
      v16 = v39 == 0;
      v41 = 4;
      if (!v16)
        v41 = v40;
      if (v41 <= v38)
        v42 = v38 + 1;
      else
        v42 = v41;
      if (v42)
      {
        *(_QWORD *)(a1 + 1672) = realloc(*(void **)(a1 + 1672), 56 * v42);
        v38 = *(_QWORD *)(a1 + 1664);
      }
      *(_QWORD *)(a1 + 1680) = v42;
    }
    *(_QWORD *)(a1 + 1664) = v38 + 1;
    v43 = *(_QWORD *)(a1 + 1672) + 56 * v38;
    result = 0u;
    *(_QWORD *)(v43 + 48) = v47;
    *(_OWORD *)(v43 + 16) = 0u;
    *(_OWORD *)(v43 + 32) = v44;
    *(_OWORD *)v43 = 0u;
  }
  return result;
}

uint64_t vl_dump_result(uint64_t result, uint64_t a2, _OWORD *a3, int a4)
{
  uint64_t v4;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  timespec v22;

  if (result)
  {
    v4 = result;
    if (*(_DWORD *)result)
    {
      if ((*(_BYTE *)(result + 4) & 4) != 0 && *(_DWORD *)(result + 32) && *(_BYTE *)(result + 548))
      {
        v8 = (char *)malloc(0x118uLL);
        v22.tv_sec = 0;
        v22.tv_nsec = 0;
        clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, &v22);
        *(double *)v8 = (double)(v22.tv_nsec - *(_QWORD *)(v4 + 24)) * 0.000000001
                      + (double)(v22.tv_sec - *(_QWORD *)(v4 + 16));
        v9 = *(_OWORD *)(a2 + 208);
        *(_OWORD *)(v8 + 200) = *(_OWORD *)(a2 + 192);
        *(_OWORD *)(v8 + 216) = v9;
        *(_OWORD *)(v8 + 232) = *(_OWORD *)(a2 + 224);
        *((_QWORD *)v8 + 31) = *(_QWORD *)(a2 + 240);
        v10 = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(v8 + 136) = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(v8 + 152) = v10;
        v11 = *(_OWORD *)(a2 + 176);
        *(_OWORD *)(v8 + 168) = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(v8 + 184) = v11;
        v12 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(v8 + 72) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(v8 + 88) = v12;
        v13 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(v8 + 104) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(v8 + 120) = v13;
        v14 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(v8 + 8) = *(_OWORD *)a2;
        *(_OWORD *)(v8 + 24) = v14;
        v15 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(v8 + 56) = v15;
        *((_OWORD *)v8 + 16) = *a3;
        *((_DWORD *)v8 + 68) = a4;
        pthread_mutex_lock((pthread_mutex_t *)(v4 + 1064));
        v16 = *(_QWORD *)(v4 + 1632);
        v17 = *(_QWORD *)(v4 + 1648);
        if (v16 >= v17)
        {
          v18 = 2 * v17;
          v19 = v17 == 0;
          v20 = 32;
          if (!v19)
            v20 = v18;
          if (v20 <= v16)
            v21 = v16 + 1;
          else
            v21 = v20;
          if (v21)
          {
            *(_QWORD *)(v4 + 1640) = realloc(*(void **)(v4 + 1640), 8 * v21);
            v16 = *(_QWORD *)(v4 + 1632);
          }
          *(_QWORD *)(v4 + 1648) = v21;
        }
        *(_QWORD *)(v4 + 1632) = v16 + 1;
        *(_QWORD *)(*(_QWORD *)(v4 + 1640) + 8 * v16) = v8;
        return pthread_mutex_unlock((pthread_mutex_t *)(v4 + 1064));
      }
    }
  }
  return result;
}

uint64_t vl_dump_stats(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  timespec v11;

  if (result)
  {
    v2 = result;
    if (*(_DWORD *)result)
    {
      if ((*(_BYTE *)(result + 4) & 0x20) != 0 && *(_DWORD *)(result + 32) && *(_BYTE *)(result + 548))
      {
        v4 = (void **)malloc(0x200uLL);
        v11.tv_sec = 0;
        v11.tv_nsec = 0;
        clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, &v11);
        *(double *)v4 = (double)(v11.tv_nsec - *(_QWORD *)(v2 + 24)) * 0.000000001
                      + (double)(v11.tv_sec - *(_QWORD *)(v2 + 16));
        vl_stats_get(a2, v4 + 1);
        pthread_mutex_lock((pthread_mutex_t *)(v2 + 1064));
        v5 = *(_QWORD *)(v2 + 2312);
        v6 = *(_QWORD *)(v2 + 2328);
        if (v5 >= v6)
        {
          v7 = 2 * v6;
          v8 = v6 == 0;
          v9 = 32;
          if (!v8)
            v9 = v7;
          if (v9 <= v5)
            v10 = v5 + 1;
          else
            v10 = v9;
          if (v10)
          {
            *(_QWORD *)(v2 + 2320) = realloc(*(void **)(v2 + 2320), 8 * v10);
            v5 = *(_QWORD *)(v2 + 2312);
          }
          *(_QWORD *)(v2 + 2328) = v10;
        }
        *(_QWORD *)(v2 + 2312) = v5 + 1;
        *(_QWORD *)(*(_QWORD *)(v2 + 2320) + 8 * v5) = v4;
        return pthread_mutex_unlock((pthread_mutex_t *)(v2 + 1064));
      }
    }
  }
  return result;
}

void vl_dump_detail(uint64_t a1, uint64_t a2, double *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  float64x2_t *v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float32x2_t v16;
  float64x2_t v17;
  uint64_t v18;
  uint64_t v19;
  float64x2_t *v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float32x2_t v24;
  float64x2_t v25;
  uint64_t v26;
  uint64_t v27;
  float64x2_t *v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float32x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int128 v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;

  if (a1 && *(_DWORD *)a1 && (*(_BYTE *)(a1 + 4) & 8) != 0)
  {
    v5 = *(_OWORD *)a3;
    v6 = *((_OWORD *)a3 + 1);
    *(_OWORD *)(a1 + 2192) = *((_OWORD *)a3 + 2);
    *(_OWORD *)(a1 + 2176) = v6;
    *(_OWORD *)(a1 + 2160) = v5;
    v7 = *((_OWORD *)a3 + 3);
    v8 = *((_OWORD *)a3 + 4);
    v9 = *((_OWORD *)a3 + 5);
    *(_OWORD *)(a1 + 2256) = *((_OWORD *)a3 + 6);
    *(_OWORD *)(a1 + 2240) = v9;
    *(_OWORD *)(a1 + 2224) = v8;
    *(_OWORD *)(a1 + 2208) = v7;
    v44 = 0uLL;
    clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)&v44);
    *(double *)(a1 + 1656) = (double)(uint64_t)(*((_QWORD *)&v44 + 1) - *(_QWORD *)(a1 + 24)) * 0.000000001
                           + (double)(uint64_t)(v44 - *(_QWORD *)(a1 + 16));
    if (*(uint64_t *)(a1 + 1832) >= 1)
    {
      v10 = 0;
      v11 = 0;
      do
      {
        v12 = (float64x2_t *)(*(_QWORD *)(a1 + 1840) + v10);
        v13 = vcvtq_f64_f32(vcvt_f32_f64(v12[1]));
        v14 = vcvtq_f64_f32(vcvt_f32_f64(v12[3]));
        v15 = vcvtq_f64_f32(vcvt_f32_f64(v12[2]));
        v16 = vcvt_f32_f64(v12[4]);
        v17 = vcvtq_f64_f32(vcvt_f32_f64(v12[5]));
        v44 = (unsigned __int128)vcvtq_f64_f32(vcvt_f32_f64(*v12));
        v45 = v13;
        v46 = v15;
        v47 = v14;
        v48 = vcvtq_f64_f32(v16);
        v49 = v17;
        g_camera_local_to_global(a3, (double *)&v44, v12->f64);
        ++v11;
        v10 += 96;
      }
      while (*(_QWORD *)(a1 + 1832) > v11);
    }
    if (*(uint64_t *)(a1 + 1880) >= 1)
    {
      v18 = 0;
      v19 = 0;
      do
      {
        v20 = (float64x2_t *)(*(_QWORD *)(a1 + 1888) + v18);
        v21 = vcvtq_f64_f32(vcvt_f32_f64(v20[1]));
        v22 = vcvtq_f64_f32(vcvt_f32_f64(v20[3]));
        v23 = vcvtq_f64_f32(vcvt_f32_f64(v20[2]));
        v24 = vcvt_f32_f64(v20[4]);
        v25 = vcvtq_f64_f32(vcvt_f32_f64(v20[5]));
        v44 = (unsigned __int128)vcvtq_f64_f32(vcvt_f32_f64(*v20));
        v45 = v21;
        v46 = v23;
        v47 = v22;
        v48 = vcvtq_f64_f32(v24);
        v49 = v25;
        g_camera_local_to_global(a3, (double *)&v44, v20->f64);
        ++v19;
        v18 += 96;
      }
      while (*(_QWORD *)(a1 + 1880) > v19);
    }
    if (*(uint64_t *)(a1 + 1928) >= 1)
    {
      v26 = 0;
      v27 = 0;
      do
      {
        v28 = (float64x2_t *)(*(_QWORD *)(a1 + 1936) + v26);
        v29 = vcvtq_f64_f32(vcvt_f32_f64(v28[1]));
        v30 = vcvtq_f64_f32(vcvt_f32_f64(v28[3]));
        v31 = vcvtq_f64_f32(vcvt_f32_f64(v28[2]));
        v32 = vcvt_f32_f64(v28[4]);
        v33 = vcvtq_f64_f32(vcvt_f32_f64(v28[5]));
        v44 = (unsigned __int128)vcvtq_f64_f32(vcvt_f32_f64(*v28));
        v45 = v29;
        v46 = v31;
        v47 = v30;
        v48 = vcvtq_f64_f32(v32);
        v49 = v33;
        g_camera_local_to_global(a3, (double *)&v44, v28->f64);
        ++v27;
        v26 += 96;
      }
      while (*(_QWORD *)(a1 + 1928) > v27);
    }
    v34 = vcvtq_f64_f32(vcvt_f32_f64(*(float64x2_t *)(a1 + 1992)));
    v44 = (unsigned __int128)vcvtq_f64_f32(vcvt_f32_f64(*(float64x2_t *)(a1 + 1976)));
    v45 = v34;
    v35 = vcvtq_f64_f32(vcvt_f32_f64(*(float64x2_t *)(a1 + 2024)));
    v46 = vcvtq_f64_f32(vcvt_f32_f64(*(float64x2_t *)(a1 + 2008)));
    v47 = v35;
    v36 = vcvtq_f64_f32(vcvt_f32_f64(*(float64x2_t *)(a1 + 2056)));
    v48 = vcvtq_f64_f32(vcvt_f32_f64(*(float64x2_t *)(a1 + 2040)));
    v49 = v36;
    g_camera_local_to_global(a3, (double *)&v44, (double *)(a1 + 1976));
    if (*(_DWORD *)(a1 + 32) && *(_BYTE *)(a1 + 548))
    {
      v37 = malloc(0x278uLL);
      memcpy(v37, (const void *)(a1 + 1656), 0x278uLL);
      bzero((void *)(a1 + 1656), 0x278uLL);
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 1064));
      v38 = *(_QWORD *)(a1 + 2288);
      v39 = *(_QWORD *)(a1 + 2304);
      if (v38 >= v39)
      {
        v40 = 2 * v39;
        v41 = v39 == 0;
        v42 = 32;
        if (!v41)
          v42 = v40;
        if (v42 <= v38)
          v43 = v38 + 1;
        else
          v43 = v42;
        if (v43)
        {
          *(_QWORD *)(a1 + 2296) = realloc(*(void **)(a1 + 2296), 8 * v43);
          v38 = *(_QWORD *)(a1 + 2288);
        }
        *(_QWORD *)(a1 + 2304) = v43;
      }
      *(_QWORD *)(a1 + 2288) = v38 + 1;
      *(_QWORD *)(*(_QWORD *)(a1 + 2296) + 8 * v38) = v37;
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1064));
    }
  }
}

void vl_dump_detail_match(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 && *(_DWORD *)a1 && (*(_BYTE *)(a1 + 4) & 8) != 0)
  {
    if (*(uint64_t *)a2 < 1)
    {
      v4 = 0;
      *(_QWORD *)(a1 + 1696) = 0;
      *(_QWORD *)(a1 + 1688) = 0;
      v5 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 1704) = *(_QWORD *)a2;
      if (v5 < 1)
      {
LABEL_7:
        *(_QWORD *)(a1 + 1688) = v5;
        if (*(uint64_t *)a2 >= 1)
          memcpy(v4, *(const void **)(a2 + 8), 8 * *(_QWORD *)a2);
        v6 = *(_QWORD *)(a2 + 24);
        if (v6 < 1)
        {
          v7 = 0;
          *(_QWORD *)(a1 + 1720) = 0;
          *(_QWORD *)(a1 + 1712) = 0;
          v8 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 1728) = v8;
          if (v8 < 1)
          {
LABEL_12:
            *(_QWORD *)(a1 + 1712) = v8;
            v9 = *(_QWORD *)(a2 + 24);
            if (v9 >= 1)
              memcpy(v7, *(const void **)(a2 + 32), 8 * v9);
            return;
          }
        }
        else
        {
          v7 = malloc(8 * v6);
          *(_QWORD *)(a1 + 1720) = v7;
          *(_QWORD *)(a1 + 1712) = 0;
          v8 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 1728) = v8;
          if (v8 < 1)
            goto LABEL_12;
        }
        bzero(v7, 8 * v8);
        goto LABEL_12;
      }
    }
    else
    {
      v4 = malloc(8 * *(_QWORD *)a2);
      *(_QWORD *)(a1 + 1696) = v4;
      *(_QWORD *)(a1 + 1688) = 0;
      v5 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 1704) = *(_QWORD *)a2;
      if (v5 < 1)
        goto LABEL_7;
    }
    bzero(v4, 8 * v5);
    goto LABEL_7;
  }
}

void vl_dump_detail_pose_input(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 && *(_DWORD *)a1 && (*(_BYTE *)(a1 + 4) & 8) != 0)
  {
    if (*(uint64_t *)a2 < 1)
    {
      v6 = 0;
      *(_QWORD *)(a1 + 1744) = 0;
      *(_QWORD *)(a1 + 1736) = 0;
      v7 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 1752) = *(_QWORD *)a2;
      if (v7 < 1)
      {
LABEL_7:
        *(_QWORD *)(a1 + 1736) = v7;
        if (*(uint64_t *)a2 >= 1)
          memcpy(v6, *(const void **)(a2 + 8), 288 * *(_QWORD *)a2);
        if (*(uint64_t *)a3 < 1)
        {
          v8 = 0;
          *(_QWORD *)(a1 + 1792) = 0;
          *(_QWORD *)(a1 + 1784) = 0;
          v9 = *(_QWORD *)a3;
          *(_QWORD *)(a1 + 1800) = *(_QWORD *)a3;
          if (v9 < 1)
          {
LABEL_12:
            *(_QWORD *)(a1 + 1784) = v9;
            if (*(uint64_t *)a3 >= 1)
              memcpy(v8, *(const void **)(a3 + 8), 8 * *(_QWORD *)a3);
            v10 = *(_QWORD *)(a3 + 24);
            if (v10 < 1)
            {
              v11 = 0;
              *(_QWORD *)(a1 + 1816) = 0;
              *(_QWORD *)(a1 + 1808) = 0;
              v12 = *(_QWORD *)(a3 + 24);
              *(_QWORD *)(a1 + 1824) = v12;
              if (v12 < 1)
              {
LABEL_17:
                *(_QWORD *)(a1 + 1808) = v12;
                v13 = *(_QWORD *)(a3 + 24);
                if (v13 >= 1)
                  memcpy(v11, *(const void **)(a3 + 32), 8 * v13);
                return;
              }
            }
            else
            {
              v11 = malloc(8 * v10);
              *(_QWORD *)(a1 + 1816) = v11;
              *(_QWORD *)(a1 + 1808) = 0;
              v12 = *(_QWORD *)(a3 + 24);
              *(_QWORD *)(a1 + 1824) = v12;
              if (v12 < 1)
                goto LABEL_17;
            }
            bzero(v11, 8 * v12);
            goto LABEL_17;
          }
        }
        else
        {
          v8 = malloc(8 * *(_QWORD *)a3);
          *(_QWORD *)(a1 + 1792) = v8;
          *(_QWORD *)(a1 + 1784) = 0;
          v9 = *(_QWORD *)a3;
          *(_QWORD *)(a1 + 1800) = *(_QWORD *)a3;
          if (v9 < 1)
            goto LABEL_12;
        }
        bzero(v8, 8 * v9);
        goto LABEL_12;
      }
    }
    else
    {
      v6 = malloc(288 * *(_QWORD *)a2);
      *(_QWORD *)(a1 + 1744) = v6;
      *(_QWORD *)(a1 + 1736) = 0;
      v7 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 1752) = *(_QWORD *)a2;
      if (v7 < 1)
        goto LABEL_7;
    }
    bzero(v6, 288 * v7);
    goto LABEL_7;
  }
}

float vl_dump_detail_pose_score(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  float result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 && *(_DWORD *)a1 && (*(_BYTE *)(a1 + 4) & 8) != 0)
  {
    v4 = *a2;
    if (*a2 < 1)
    {
      *(_QWORD *)(a1 + 1840) = 0;
      v5 = (uint64_t *)(a1 + 1832);
      v6 = (uint64_t *)(a1 + 1848);
      *(_QWORD *)(a1 + 1832) = 0;
      *(_QWORD *)(a1 + 1848) = v4;
      *(_QWORD *)(a1 + 1864) = 0;
      *(_QWORD *)(a1 + 1856) = 0;
      *(_QWORD *)(a1 + 1872) = v4;
      if (*a2 < 1)
        return result;
    }
    else
    {
      *(_QWORD *)(a1 + 1840) = malloc(96 * v4);
      v5 = (uint64_t *)(a1 + 1832);
      *(_QWORD *)(a1 + 1832) = 0;
      v6 = (uint64_t *)(a1 + 1848);
      *(_QWORD *)(a1 + 1848) = v4;
      *(_QWORD *)(a1 + 1864) = malloc(4 * v4);
      *(_QWORD *)(a1 + 1856) = 0;
      *(_QWORD *)(a1 + 1872) = v4;
      if (*a2 < 1)
        return result;
    }
    v8 = 0;
    v9 = 272;
    do
    {
      v10 = a2[1];
      v11 = *v5;
      v12 = *v6;
      if (*v5 >= *v6)
      {
        if (v12)
          v13 = 2 * v12;
        else
          v13 = 2;
        if (v13 <= v11)
          v14 = v11 + 1;
        else
          v14 = v13;
        if (v14)
        {
          *(_QWORD *)(a1 + 1840) = realloc(*(void **)(a1 + 1840), 96 * v14);
          v11 = *(_QWORD *)(a1 + 1832);
        }
        *v6 = v14;
      }
      *(_QWORD *)(a1 + 1832) = v11 + 1;
      v15 = (_OWORD *)(*(_QWORD *)(a1 + 1840) + 96 * v11);
      v15[4] = 0u;
      v15[5] = 0u;
      v15[2] = 0u;
      v15[3] = 0u;
      *v15 = 0u;
      v15[1] = 0u;
      v16 = *(_QWORD *)(a1 + 1840) + 96 * *(_QWORD *)(a1 + 1832);
      v17 = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 264));
      *(float64x2_t *)(v16 - 96) = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 272));
      *(float64x2_t *)(v16 - 80) = v17;
      v18 = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 248));
      *(float64x2_t *)(v16 - 64) = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 256));
      *(float64x2_t *)(v16 - 48) = v18;
      v19 = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 232));
      *(float64x2_t *)(v16 - 32) = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 240));
      *(float64x2_t *)(v16 - 16) = v19;
      v20 = *(_QWORD *)(a1 + 1856);
      v21 = *(_QWORD *)(a1 + 1872);
      if (v20 >= v21)
      {
        v22 = 2 * v21;
        v23 = v21 == 0;
        v24 = 64;
        if (!v23)
          v24 = v22;
        if (v24 <= v20)
          v25 = v20 + 1;
        else
          v25 = v24;
        if (v25)
        {
          *(_QWORD *)(a1 + 1864) = realloc(*(void **)(a1 + 1864), 4 * v25);
          v20 = *(_QWORD *)(a1 + 1856);
        }
        *(_QWORD *)(a1 + 1872) = v25;
      }
      *(_QWORD *)(a1 + 1856) = v20 + 1;
      result = *(float *)(v10 + v9);
      *(float *)(*(_QWORD *)(a1 + 1864) + 4 * v20) = result;
      ++v8;
      v9 += 280;
    }
    while (*a2 > v8);
  }
  return result;
}

float vl_dump_detail_pose_referee(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  float result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 && *(_DWORD *)a1 && (*(_BYTE *)(a1 + 4) & 8) != 0)
  {
    v4 = *a2;
    if (*a2 < 1)
    {
      *(_QWORD *)(a1 + 1888) = 0;
      v5 = (uint64_t *)(a1 + 1880);
      v6 = (uint64_t *)(a1 + 1896);
      *(_QWORD *)(a1 + 1880) = 0;
      *(_QWORD *)(a1 + 1896) = v4;
      *(_QWORD *)(a1 + 1912) = 0;
      *(_QWORD *)(a1 + 1904) = 0;
      *(_QWORD *)(a1 + 1920) = v4;
      if (*a2 < 1)
        return result;
    }
    else
    {
      *(_QWORD *)(a1 + 1888) = malloc(96 * v4);
      v5 = (uint64_t *)(a1 + 1880);
      *(_QWORD *)(a1 + 1880) = 0;
      v6 = (uint64_t *)(a1 + 1896);
      *(_QWORD *)(a1 + 1896) = v4;
      *(_QWORD *)(a1 + 1912) = malloc(4 * v4);
      *(_QWORD *)(a1 + 1904) = 0;
      *(_QWORD *)(a1 + 1920) = v4;
      if (*a2 < 1)
        return result;
    }
    v8 = 0;
    v9 = 272;
    do
    {
      v10 = a2[1];
      v11 = *v5;
      v12 = *v6;
      if (*v5 >= *v6)
      {
        if (v12)
          v13 = 2 * v12;
        else
          v13 = 2;
        if (v13 <= v11)
          v14 = v11 + 1;
        else
          v14 = v13;
        if (v14)
        {
          *(_QWORD *)(a1 + 1888) = realloc(*(void **)(a1 + 1888), 96 * v14);
          v11 = *(_QWORD *)(a1 + 1880);
        }
        *v6 = v14;
      }
      *(_QWORD *)(a1 + 1880) = v11 + 1;
      v15 = (_OWORD *)(*(_QWORD *)(a1 + 1888) + 96 * v11);
      v15[4] = 0u;
      v15[5] = 0u;
      v15[2] = 0u;
      v15[3] = 0u;
      *v15 = 0u;
      v15[1] = 0u;
      v16 = *(_QWORD *)(a1 + 1888) + 96 * *(_QWORD *)(a1 + 1880);
      v17 = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 264));
      *(float64x2_t *)(v16 - 96) = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 272));
      *(float64x2_t *)(v16 - 80) = v17;
      v18 = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 248));
      *(float64x2_t *)(v16 - 64) = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 256));
      *(float64x2_t *)(v16 - 48) = v18;
      v19 = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 232));
      *(float64x2_t *)(v16 - 32) = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 240));
      *(float64x2_t *)(v16 - 16) = v19;
      v20 = *(_QWORD *)(a1 + 1904);
      v21 = *(_QWORD *)(a1 + 1920);
      if (v20 >= v21)
      {
        v22 = 2 * v21;
        v23 = v21 == 0;
        v24 = 64;
        if (!v23)
          v24 = v22;
        if (v24 <= v20)
          v25 = v20 + 1;
        else
          v25 = v24;
        if (v25)
        {
          *(_QWORD *)(a1 + 1912) = realloc(*(void **)(a1 + 1912), 4 * v25);
          v20 = *(_QWORD *)(a1 + 1904);
        }
        *(_QWORD *)(a1 + 1920) = v25;
      }
      *(_QWORD *)(a1 + 1904) = v20 + 1;
      result = *(float *)(v10 + v9);
      *(float *)(*(_QWORD *)(a1 + 1912) + 4 * v20) = result;
      ++v8;
      v9 += 280;
    }
    while (*a2 > v8);
  }
  return result;
}

float vl_dump_detail_pose_fuse(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  float result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 && *(_DWORD *)a1 && (*(_BYTE *)(a1 + 4) & 8) != 0)
  {
    v4 = *a2;
    if (*a2 < 1)
    {
      *(_QWORD *)(a1 + 1936) = 0;
      v5 = (uint64_t *)(a1 + 1928);
      v6 = (uint64_t *)(a1 + 1944);
      *(_QWORD *)(a1 + 1928) = 0;
      *(_QWORD *)(a1 + 1944) = v4;
      *(_QWORD *)(a1 + 1960) = 0;
      *(_QWORD *)(a1 + 1952) = 0;
      *(_QWORD *)(a1 + 1968) = v4;
      if (*a2 < 1)
        return result;
    }
    else
    {
      *(_QWORD *)(a1 + 1936) = malloc(96 * v4);
      v5 = (uint64_t *)(a1 + 1928);
      *(_QWORD *)(a1 + 1928) = 0;
      v6 = (uint64_t *)(a1 + 1944);
      *(_QWORD *)(a1 + 1944) = v4;
      *(_QWORD *)(a1 + 1960) = malloc(4 * v4);
      *(_QWORD *)(a1 + 1952) = 0;
      *(_QWORD *)(a1 + 1968) = v4;
      if (*a2 < 1)
        return result;
    }
    v8 = 0;
    v9 = 272;
    do
    {
      v10 = a2[1];
      v11 = *v5;
      v12 = *v6;
      if (*v5 >= *v6)
      {
        if (v12)
          v13 = 2 * v12;
        else
          v13 = 2;
        if (v13 <= v11)
          v14 = v11 + 1;
        else
          v14 = v13;
        if (v14)
        {
          *(_QWORD *)(a1 + 1936) = realloc(*(void **)(a1 + 1936), 96 * v14);
          v11 = *(_QWORD *)(a1 + 1928);
        }
        *v6 = v14;
      }
      *(_QWORD *)(a1 + 1928) = v11 + 1;
      v15 = (_OWORD *)(*(_QWORD *)(a1 + 1936) + 96 * v11);
      v15[4] = 0u;
      v15[5] = 0u;
      v15[2] = 0u;
      v15[3] = 0u;
      *v15 = 0u;
      v15[1] = 0u;
      v16 = *(_QWORD *)(a1 + 1936) + 96 * *(_QWORD *)(a1 + 1928);
      v17 = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 264));
      *(float64x2_t *)(v16 - 96) = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 272));
      *(float64x2_t *)(v16 - 80) = v17;
      v18 = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 248));
      *(float64x2_t *)(v16 - 64) = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 256));
      *(float64x2_t *)(v16 - 48) = v18;
      v19 = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 232));
      *(float64x2_t *)(v16 - 32) = vcvtq_f64_f32(*(float32x2_t *)(v10 + v9 - 240));
      *(float64x2_t *)(v16 - 16) = v19;
      v20 = *(_QWORD *)(a1 + 1952);
      v21 = *(_QWORD *)(a1 + 1968);
      if (v20 >= v21)
      {
        v22 = 2 * v21;
        v23 = v21 == 0;
        v24 = 64;
        if (!v23)
          v24 = v22;
        if (v24 <= v20)
          v25 = v20 + 1;
        else
          v25 = v24;
        if (v25)
        {
          *(_QWORD *)(a1 + 1960) = realloc(*(void **)(a1 + 1960), 4 * v25);
          v20 = *(_QWORD *)(a1 + 1952);
        }
        *(_QWORD *)(a1 + 1968) = v25;
      }
      *(_QWORD *)(a1 + 1952) = v20 + 1;
      result = *(float *)(v10 + v9);
      *(float *)(*(_QWORD *)(a1 + 1960) + 4 * v20) = result;
      ++v8;
      v9 += 280;
    }
    while (*a2 > v8);
  }
  return result;
}

void vl_dump_detail_pose_result(uint64_t a1, float32x2_t *a2, uint64_t a3, float a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  v86 = 0u;
  v87 = 0u;
  if (!a1 || !*(_DWORD *)a1 || (*(_BYTE *)(a1 + 4) & 8) == 0)
    return;
  *(float64x2_t *)(a1 + 2056) = vcvtq_f64_f32(a2[5]);
  *(float64x2_t *)(a1 + 1976) = vcvtq_f64_f32(*a2);
  *(float64x2_t *)(a1 + 2024) = vcvtq_f64_f32(a2[3]);
  *(float64x2_t *)(a1 + 1992) = vcvtq_f64_f32(a2[1]);
  *(float64x2_t *)(a1 + 2008) = vcvtq_f64_f32(a2[2]);
  *(float64x2_t *)(a1 + 2040) = vcvtq_f64_f32(a2[4]);
  *(float *)(a1 + 2072) = a4;
  v7 = *(_QWORD *)(a1 + 2080);
  v8 = *(_QWORD *)a3;
  v9 = *(_QWORD *)(a1 + 2096);
  if (*(_QWORD *)a3 > v9)
  {
    v77 = 2 * v9;
    v73 = v9 == 0;
    v78 = 32;
    if (!v73)
      v78 = v77;
    if (v78 <= v8)
      v79 = *(_QWORD *)a3;
    else
      v79 = v78;
    if (v79)
      *(_QWORD *)(a1 + 2088) = realloc(*(void **)(a1 + 2088), 8 * v79);
    *(_QWORD *)(a1 + 2096) = v79;
    v10 = v8 - v7;
    if (v8 <= v7)
    {
LABEL_6:
      *(_QWORD *)(a1 + 2080) = *(_QWORD *)a3;
      v11 = *(_QWORD *)a3;
      if (*(uint64_t *)a3 < 1)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else
  {
    v10 = v8 - v7;
    if (v8 <= v7)
      goto LABEL_6;
  }
  bzero((void *)(*(_QWORD *)(a1 + 2088) + 8 * *(_QWORD *)(a1 + 2080)), 8 * v10);
  *(_QWORD *)(a1 + 2080) = *(_QWORD *)a3;
  v11 = *(_QWORD *)a3;
  if (*(uint64_t *)a3 >= 1)
LABEL_7:
    memcpy(*(void **)(a1 + 2088), *(const void **)(a3 + 8), 8 * v11);
LABEL_8:
  v12 = *(_QWORD *)(a1 + 2104);
  v13 = *(_QWORD *)(a3 + 24);
  v14 = *(_QWORD *)(a1 + 2120);
  if (v13 > v14)
  {
    v80 = 2 * v14;
    v73 = v14 == 0;
    v81 = 21;
    if (!v73)
      v81 = v80;
    if (v81 <= v13)
      v82 = *(_QWORD *)(a3 + 24);
    else
      v82 = v81;
    if (v82)
      *(_QWORD *)(a1 + 2112) = realloc(*(void **)(a1 + 2112), 12 * v82);
    *(_QWORD *)(a1 + 2120) = v82;
    v15 = v13 - v12;
    if (v13 <= v12)
    {
LABEL_10:
      *(_QWORD *)(a1 + 2104) = *(_QWORD *)(a3 + 24);
      v16 = *(_QWORD *)(a3 + 24);
      if (v16 < 1)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  else
  {
    v15 = v13 - v12;
    if (v13 <= v12)
      goto LABEL_10;
  }
  bzero((void *)(*(_QWORD *)(a1 + 2112) + 12 * *(_QWORD *)(a1 + 2104)), 12 * v15);
  *(_QWORD *)(a1 + 2104) = *(_QWORD *)(a3 + 24);
  v16 = *(_QWORD *)(a3 + 24);
  if (v16 >= 1)
LABEL_11:
    memcpy(*(void **)(a1 + 2112), *(const void **)(a3 + 32), 12 * v16);
LABEL_12:
  v17 = *(_QWORD *)(a1 + 2128);
  v18 = *(_QWORD *)(a3 + 48);
  v19 = *(_QWORD *)(a1 + 2144);
  if (v18 <= v19)
  {
    v20 = v18 - v17;
    if (v18 <= v17)
      goto LABEL_14;
LABEL_55:
    bzero((void *)(*(_QWORD *)(a1 + 2136) + 8 * *(_QWORD *)(a1 + 2128)), 8 * v20);
    *(_QWORD *)(a1 + 2128) = *(_QWORD *)(a3 + 48);
    v21 = *(_QWORD *)(a3 + 48);
    if (v21 < 1)
      goto LABEL_16;
    goto LABEL_15;
  }
  v83 = 2 * v19;
  v73 = v19 == 0;
  v84 = 32;
  if (!v73)
    v84 = v83;
  if (v84 <= v18)
    v85 = *(_QWORD *)(a3 + 48);
  else
    v85 = v84;
  if (v85)
    *(_QWORD *)(a1 + 2136) = realloc(*(void **)(a1 + 2136), 8 * v85);
  *(_QWORD *)(a1 + 2144) = v85;
  v20 = v18 - v17;
  if (v18 > v17)
    goto LABEL_55;
LABEL_14:
  *(_QWORD *)(a1 + 2128) = *(_QWORD *)(a3 + 48);
  v21 = *(_QWORD *)(a3 + 48);
  if (v21 >= 1)
LABEL_15:
    memcpy(*(void **)(a1 + 2136), *(const void **)(a3 + 56), 8 * v21);
LABEL_16:
  v22 = 1025 * (((1025 * a2->i8[0]) ^ ((1025 * a2->i8[0]) >> 6)) + a2->i8[1]);
  v23 = 1025 * ((v22 ^ (v22 >> 6)) + a2->i8[2]);
  v24 = 1025 * ((v23 ^ (v23 >> 6)) + a2->i8[3]);
  v25 = 1025 * ((v24 ^ (v24 >> 6)) + a2->i8[4]);
  v26 = 1025 * ((v25 ^ (v25 >> 6)) + a2->i8[5]);
  v27 = 1025 * ((v26 ^ (v26 >> 6)) + a2->i8[6]);
  v28 = 1025 * ((v27 ^ (v27 >> 6)) + a2->i8[7]);
  v29 = 1025 * ((v28 ^ (v28 >> 6)) + a2[1].i8[0]);
  v30 = 1025 * ((v29 ^ (v29 >> 6)) + a2[1].i8[1]);
  v31 = 1025 * ((v30 ^ (v30 >> 6)) + a2[1].i8[2]);
  v32 = 1025 * ((v31 ^ (v31 >> 6)) + a2[1].i8[3]);
  v33 = 1025 * ((v32 ^ (v32 >> 6)) + a2[1].i8[4]);
  v34 = 1025 * ((v33 ^ (v33 >> 6)) + a2[1].i8[5]);
  v35 = 1025 * ((v34 ^ (v34 >> 6)) + a2[1].i8[6]);
  v36 = 1025 * ((v35 ^ (v35 >> 6)) + a2[1].i8[7]);
  v37 = 1025 * ((v36 ^ (v36 >> 6)) + a2[2].i8[0]);
  v38 = 1025 * ((v37 ^ (v37 >> 6)) + a2[2].i8[1]);
  v39 = 1025 * ((v38 ^ (v38 >> 6)) + a2[2].i8[2]);
  v40 = 1025 * ((v39 ^ (v39 >> 6)) + a2[2].i8[3]);
  v41 = 1025 * ((v40 ^ (v40 >> 6)) + a2[2].i8[4]);
  v42 = 1025 * ((v41 ^ (v41 >> 6)) + a2[2].i8[5]);
  v43 = 1025 * ((v42 ^ (v42 >> 6)) + a2[2].i8[6]);
  v44 = 1025 * ((v43 ^ (v43 >> 6)) + a2[2].i8[7]);
  v45 = 1025 * ((v44 ^ (v44 >> 6)) + a2[3].i8[0]);
  v46 = 1025 * ((v45 ^ (v45 >> 6)) + a2[3].i8[1]);
  v47 = 1025 * ((v46 ^ (v46 >> 6)) + a2[3].i8[2]);
  v48 = 1025 * ((v47 ^ (v47 >> 6)) + a2[3].i8[3]);
  v49 = 1025 * ((v48 ^ (v48 >> 6)) + a2[3].i8[4]);
  v50 = 1025 * ((v49 ^ (v49 >> 6)) + a2[3].i8[5]);
  v51 = 1025 * ((v50 ^ (v50 >> 6)) + a2[3].i8[6]);
  v52 = 1025 * ((v51 ^ (v51 >> 6)) + a2[3].i8[7]);
  v53 = 1025 * ((v52 ^ (v52 >> 6)) + a2[4].i8[0]);
  v54 = 1025 * ((v53 ^ (v53 >> 6)) + a2[4].i8[1]);
  v55 = 1025 * ((v54 ^ (v54 >> 6)) + a2[4].i8[2]);
  v56 = 1025 * ((v55 ^ (v55 >> 6)) + a2[4].i8[3]);
  v57 = 1025 * ((v56 ^ (v56 >> 6)) + a2[4].i8[4]);
  v58 = 1025 * ((v57 ^ (v57 >> 6)) + a2[4].i8[5]);
  v59 = 1025 * ((v58 ^ (v58 >> 6)) + a2[4].i8[6]);
  v60 = 1025 * ((v59 ^ (v59 >> 6)) + a2[4].i8[7]);
  v61 = 1025 * ((v60 ^ (v60 >> 6)) + a2[5].i8[0]);
  v62 = 1025 * ((v61 ^ (v61 >> 6)) + a2[5].i8[1]);
  v63 = 1025 * ((v62 ^ (v62 >> 6)) + a2[5].i8[2]);
  v64 = 1025 * ((v63 ^ (v63 >> 6)) + a2[5].i8[3]);
  v65 = 1025 * ((v64 ^ (v64 >> 6)) + a2[5].i8[4]);
  v66 = 1025 * ((v65 ^ (v65 >> 6)) + a2[5].i8[5]);
  v67 = 1025 * ((v66 ^ (v66 >> 6)) + a2[5].i8[6]);
  v68 = 1025 * ((v67 ^ (v67 >> 6)) + a2[5].i8[7]);
  v69 = 32769 * ((9 * (v68 ^ (v68 >> 6))) ^ ((9 * (v68 ^ (v68 >> 6))) >> 11));
  strcpy((char *)&v86, "vl_pose output");
  v70 = *(_QWORD *)(a1 + 1664);
  v71 = *(_QWORD *)(a1 + 1680);
  if (v70 >= v71)
  {
    v72 = 2 * v71;
    v73 = v71 == 0;
    v74 = 4;
    if (!v73)
      v74 = v72;
    if (v74 <= v70)
      v75 = v70 + 1;
    else
      v75 = v74;
    if (v75)
    {
      *(_QWORD *)(a1 + 1672) = realloc(*(void **)(a1 + 1672), 56 * v75);
      v70 = *(_QWORD *)(a1 + 1664);
    }
    *(_QWORD *)(a1 + 1680) = v75;
  }
  *(_QWORD *)(a1 + 1664) = v70 + 1;
  v76 = *(_QWORD *)(a1 + 1672) + 56 * v70;
  *(_OWORD *)v76 = v86;
  *(_OWORD *)(v76 + 16) = v87;
  *(_QWORD *)(v76 + 32) = 0x20202065736F50;
  *(_QWORD *)(v76 + 40) = 0x100000000;
  *(_QWORD *)(v76 + 48) = v69;
}

void vl_dump_ps_args_store(uint64_t a1, const void *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, _OWORD *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _OWORD *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  _OWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  void *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  _OWORD *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;

  if (!a1)
    return;
  v13 = *(_QWORD *)a1;
  v14 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)a1 >= v14)
  {
    v15 = 2 * v14;
    if (v15 <= v13)
      v16 = v13 + 1;
    else
      v16 = v15;
    if (v16)
    {
      *(_QWORD *)(a1 + 8) = realloc(*(void **)(a1 + 8), 400 * v16);
      v13 = *(_QWORD *)a1;
    }
    *(_QWORD *)(a1 + 16) = v16;
  }
  *(_QWORD *)a1 = v13 + 1;
  v17 = (_OWORD *)(*(_QWORD *)(a1 + 8) + 400 * v13);
  v18 = 0uLL;
  v17[23] = 0u;
  v17[24] = 0u;
  v17[21] = 0u;
  v17[22] = 0u;
  v17[19] = 0u;
  v17[20] = 0u;
  v17[17] = 0u;
  v17[18] = 0u;
  v17[15] = 0u;
  v17[16] = 0u;
  v17[13] = 0u;
  v17[14] = 0u;
  v17[11] = 0u;
  v17[12] = 0u;
  v17[9] = 0u;
  v17[10] = 0u;
  v17[7] = 0u;
  v17[8] = 0u;
  v17[5] = 0u;
  v17[6] = 0u;
  v17[3] = 0u;
  v17[4] = 0u;
  v17[1] = 0u;
  v17[2] = 0u;
  *v17 = 0u;
  v20 = *(_QWORD *)a1;
  v19 = *(_QWORD *)(a1 + 8);
  v21 = *(_QWORD *)(a1 + 24);
  v22 = *(_QWORD *)(a1 + 40);
  v109 = a3;
  v105 = a5;
  if (v21 >= v22)
  {
    v23 = 2 * v22;
    v24 = v22 == 0;
    v25 = 5;
    if (!v24)
      v25 = v23;
    if (v25 <= v21)
      v26 = v21 + 1;
    else
      v26 = v25;
    if (v26)
    {
      v27 = realloc(*(void **)(a1 + 32), 48 * v26);
      v18 = 0uLL;
      *(_QWORD *)(a1 + 32) = v27;
      v21 = *(_QWORD *)(a1 + 24);
    }
    *(_QWORD *)(a1 + 40) = v26;
  }
  *(_QWORD *)(a1 + 24) = v21 + 1;
  v28 = (_OWORD *)(*(_QWORD *)(a1 + 32) + 48 * v21);
  v28[1] = v18;
  v28[2] = v18;
  *v28 = v18;
  v29 = *(_QWORD *)(a1 + 24);
  v30 = *(_QWORD *)(a1 + 32);
  v31 = *(_QWORD *)(a1 + 48);
  v32 = *(_QWORD *)(a1 + 64);
  if (v31 >= v32)
  {
    v33 = *(_QWORD *)(a1 + 32);
    v34 = 2 * v32;
    if (v34 <= v31)
      v35 = v31 + 1;
    else
      v35 = v34;
    if (v35)
    {
      *(_QWORD *)(a1 + 56) = realloc(*(void **)(a1 + 56), 560 * v35);
      v31 = *(_QWORD *)(a1 + 48);
    }
    *(_QWORD *)(a1 + 64) = v35;
    v30 = v33;
  }
  v36 = v19 + 400 * v20;
  *(_QWORD *)(a1 + 48) = v31 + 1;
  bzero((void *)(*(_QWORD *)(a1 + 56) + 560 * v31), 0x230uLL);
  v112 = *(_QWORD *)(a1 + 56);
  v37 = *(_QWORD *)(a1 + 72);
  v38 = *(_QWORD *)(a1 + 88);
  v104 = *(_QWORD *)(a1 + 48);
  if (v37 >= v38)
  {
    v39 = 2 * v38;
    v24 = v38 == 0;
    v40 = 5;
    if (!v24)
      v40 = v39;
    if (v40 <= v37)
      v41 = v37 + 1;
    else
      v41 = v40;
    if (v41)
    {
      *(_QWORD *)(a1 + 80) = realloc(*(void **)(a1 + 80), 48 * v41);
      v37 = *(_QWORD *)(a1 + 72);
    }
    *(_QWORD *)(a1 + 88) = v41;
  }
  v42 = v29 - 1;
  v43 = (_QWORD *)(v36 - 400);
  *(_QWORD *)(a1 + 72) = v37 + 1;
  v44 = (_OWORD *)(*(_QWORD *)(a1 + 80) + 48 * v37);
  v45 = 0uLL;
  v44[1] = 0u;
  v44[2] = 0u;
  *v44 = 0u;
  v46 = *(_QWORD *)(a1 + 96);
  v47 = *(_QWORD *)(a1 + 112);
  v110 = *(_QWORD *)(a1 + 80);
  v106 = *(_QWORD *)(a1 + 72);
  if (v46 >= v47)
  {
    if (v47)
      v48 = 2 * v47;
    else
      v48 = 1;
    if (v48 <= v46)
      v49 = v46 + 1;
    else
      v49 = v48;
    if (v49)
    {
      v50 = realloc(*(void **)(a1 + 104), 144 * v49);
      v45 = 0uLL;
      *(_QWORD *)(a1 + 104) = v50;
      v46 = *(_QWORD *)(a1 + 96);
    }
    *(_QWORD *)(a1 + 112) = v49;
  }
  *(_QWORD *)(a1 + 96) = v46 + 1;
  v51 = (_OWORD *)(*(_QWORD *)(a1 + 104) + 144 * v46);
  v51[7] = v45;
  v51[8] = v45;
  v52 = (uint64_t *)(v30 + 48 * v42);
  v51[5] = v45;
  v51[6] = v45;
  v51[3] = v45;
  v51[4] = v45;
  v51[1] = v45;
  v51[2] = v45;
  *v51 = v45;
  v53 = *(_QWORD *)(a1 + 120);
  v54 = *(_QWORD *)(a1 + 136);
  v111 = *(_QWORD *)(a1 + 104);
  v107 = *(_QWORD *)(a1 + 96);
  v55 = v30;
  if (v53 >= v54)
  {
    v56 = 2 * v54;
    v24 = v54 == 0;
    v57 = 2;
    if (!v24)
      v57 = v56;
    if (v57 <= v53)
      v58 = v53 + 1;
    else
      v58 = v57;
    if (v58)
    {
      *(_QWORD *)(a1 + 128) = realloc(*(void **)(a1 + 128), 96 * v58);
      v53 = *(_QWORD *)(a1 + 120);
    }
    *(_QWORD *)(a1 + 136) = v58;
  }
  v59 = v104 - 1;
  *(_QWORD *)(a1 + 120) = v53 + 1;
  v60 = (_OWORD *)(*(_QWORD *)(a1 + 128) + 96 * v53);
  v61 = a7[1];
  *v60 = *a7;
  v62 = a7[2];
  v63 = a7[3];
  v64 = a7[5];
  v60[4] = a7[4];
  v60[5] = v64;
  v60[2] = v62;
  v60[3] = v63;
  v60[1] = v61;
  memcpy(v43, a2, 0x190uLL);
  *v43 = 0;
  if (*(uint64_t *)v109 < 1)
    v65 = 0;
  else
    v65 = malloc(288 * *(_QWORD *)v109);
  v66 = (uint64_t *)(v112 + 560 * v59);
  v67 = v55 + 48 * v42;
  *(_QWORD *)(v67 + 8) = v65;
  v68 = v67 + 8;
  *v52 = 0;
  v69 = *(_QWORD *)v109;
  *(_QWORD *)(v68 + 8) = *(_QWORD *)v109;
  if (v69 >= 1)
    bzero(v65, 288 * v69);
  *v52 = v69;
  if (*(uint64_t *)v109 >= 1)
    memcpy(*(void **)v68, *(const void **)(v109 + 8), 288 * *(_QWORD *)v109);
  memcpy(v66, a4, 0x230uLL);
  if (*a4 < 1)
  {
    v70 = 0;
    *v66 = 0;
    v66[1] = 0;
    v71 = *a4;
    v66[2] = *a4;
    if (v71 < 1)
      goto LABEL_63;
    goto LABEL_62;
  }
  v70 = malloc(12 * *a4);
  *v66 = 0;
  v66[1] = (uint64_t)v70;
  v71 = *a4;
  v66[2] = *a4;
  if (v71 >= 1)
LABEL_62:
    bzero(v70, 12 * v71);
LABEL_63:
  *v66 = v71;
  if (*a4 >= 1)
    memcpy(v70, (const void *)a4[1], 12 * *a4);
  v72 = (_QWORD *)(v112 + 560 * v59);
  v72[5] = 0;
  v72[6] = 0;
  v72[3] = 0;
  v72[4] = 0;
  v72[7] = 0;
  v72[8] = 0;
  v72[10] = 0;
  v72[11] = 0;
  v72[9] = 0;
  v73 = a4[12];
  if (v73 < 1)
    v74 = 0;
  else
    v74 = malloc(8 * v73);
  v75 = v106 - 1;
  v76 = v112 + 560 * v59;
  *(_QWORD *)(v76 + 96) = 0;
  *(_QWORD *)(v76 + 104) = v74;
  v77 = (uint64_t *)(v76 + 96);
  v78 = a4[12];
  v77[2] = v78;
  if (v78 >= 1)
    bzero(v74, 8 * v78);
  v79 = (uint64_t *)(v110 + 48 * v75);
  *v77 = v78;
  v80 = a4[12];
  if (v80 >= 1)
    memcpy(v74, (const void *)a4[13], 8 * v80);
  v81 = v112 + 560 * v59;
  *(_OWORD *)(v81 + 120) = 0u;
  *(_OWORD *)(v81 + 136) = 0u;
  *(_OWORD *)(v81 + 152) = 0u;
  *(_OWORD *)(v81 + 168) = 0u;
  *(_OWORD *)(v81 + 184) = 0u;
  *(_OWORD *)(v81 + 200) = 0u;
  *(_QWORD *)(v81 + 360) = 0;
  *(_OWORD *)(v81 + 368) = 0u;
  *(_OWORD *)(v81 + 384) = 0u;
  *(_QWORD *)(v81 + 400) = 0;
  *(_QWORD *)(v81 + 424) = 0;
  *(_OWORD *)(v81 + 408) = 0u;
  *(_QWORD *)(v81 + 448) = 0;
  *(_OWORD *)(v81 + 432) = 0u;
  *(_QWORD *)(v81 + 480) = 0;
  *(_OWORD *)(v81 + 464) = 0u;
  *(_QWORD *)(v81 + 504) = 0;
  *(_OWORD *)(v81 + 488) = 0u;
  *(_QWORD *)(v81 + 528) = 0;
  *(_OWORD *)(v81 + 512) = 0u;
  *(_QWORD *)(v81 + 552) = 0;
  *(_OWORD *)(v81 + 536) = 0u;
  if (*(uint64_t *)v105 < 1)
    v82 = 0;
  else
    v82 = malloc(8 * *(_QWORD *)v105);
  *v79 = 0;
  v79[1] = (uint64_t)v82;
  v83 = *(_QWORD *)v105;
  v79[2] = *(_QWORD *)v105;
  if (v83 >= 1)
    bzero(v82, 8 * v83);
  *v79 = v83;
  if (*(uint64_t *)v105 >= 1)
    memcpy(v82, *(const void **)(v105 + 8), 8 * *(_QWORD *)v105);
  v84 = v107 - 1;
  v85 = *(_QWORD *)(v105 + 24);
  if (v85 < 1)
    v86 = 0;
  else
    v86 = malloc(8 * v85);
  v87 = (_OWORD *)(v111 + 144 * v84);
  v88 = v110 + 48 * v75;
  *(_QWORD *)(v88 + 24) = 0;
  *(_QWORD *)(v88 + 32) = v86;
  v89 = (uint64_t *)(v88 + 24);
  v90 = *(_QWORD *)(v105 + 24);
  v89[2] = v90;
  if (v90 >= 1)
    bzero(v86, 8 * v90);
  *v89 = v90;
  v91 = *(_QWORD *)(v105 + 24);
  if (v91 >= 1)
    memcpy(v86, *(const void **)(v105 + 32), 8 * v91);
  *v87 = *(_OWORD *)a6;
  v92 = *(_OWORD *)(a6 + 16);
  v93 = *(_OWORD *)(a6 + 32);
  v94 = *(_OWORD *)(a6 + 64);
  v87[3] = *(_OWORD *)(a6 + 48);
  v87[4] = v94;
  v87[1] = v92;
  v87[2] = v93;
  v95 = *(_OWORD *)(a6 + 80);
  v96 = *(_OWORD *)(a6 + 96);
  v97 = *(_OWORD *)(a6 + 128);
  v87[7] = *(_OWORD *)(a6 + 112);
  v87[8] = v97;
  v87[5] = v95;
  v87[6] = v96;
  v98 = *(_QWORD *)(a6 + 120);
  if (v98 < 1)
    v99 = 0;
  else
    v99 = malloc(4 * v98);
  v100 = v111 + 144 * v84;
  *(_QWORD *)(v100 + 120) = 0;
  *(_QWORD *)(v100 + 128) = v99;
  v101 = (uint64_t *)(v100 + 120);
  v102 = *(_QWORD *)(a6 + 120);
  v101[2] = v102;
  if (v102 >= 1)
    bzero(v99, 4 * v102);
  *v101 = v102;
  v103 = *(_QWORD *)(a6 + 120);
  if (v103 >= 1)
    memcpy(v99, *(const void **)(a6 + 128), 4 * v103);
}

void *vl_hs_model_get_par_version@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v4;

  v2 = (int)result;
  *(_OWORD *)(a2 + 432) = 0u;
  *(_OWORD *)(a2 + 448) = 0u;
  *(_OWORD *)(a2 + 400) = 0u;
  *(_OWORD *)(a2 + 416) = 0u;
  *(_OWORD *)(a2 + 368) = 0u;
  *(_OWORD *)(a2 + 384) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(_OWORD *)(a2 + 352) = 0u;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = xmmword_210BCD810;
  *(int64x2_t *)(a2 + 16) = vdupq_n_s64(0x40uLL);
  *(_DWORD *)(a2 + 52) = -1;
  *(_QWORD *)(a2 + 36) = 0x3BDA740E3F4CCCCDLL;
  *(_DWORD *)(a2 + 44) = 1023969417;
  *(_DWORD *)model_0 = (_DWORD)result;
  if ((int)result > 249)
  {
    switch((_DWORD)result)
    {
      case 0xFA:
        *(_QWORD *)(a2 + 8) = 4;
        *(_QWORD *)(a2 + 24) = 64;
        *(_QWORD *)(a2 + 44) = 0x59D93D088889;
        result = memcpy((void *)(a2 + 60), &unk_210BCD848, 0x194uLL);
        *(_DWORD *)(a2 + 56) = 1;
        *(_QWORD *)(a2 + 32) = 0x3F4CCCCD3F5C21DCLL;
        return result;
      case 0xFC:
        *(_QWORD *)(a2 + 16) = 64;
        *(_DWORD *)(a2 + 40) = 1004172302;
        *(_QWORD *)(a2 + 48) = -4294944295;
        result = memcpy((void *)(a2 + 60), &unk_210BCD848, 0x194uLL);
        *(_DWORD *)(a2 + 56) = 1;
        v4 = 1063002588;
        break;
      case 0xFD:
        *(_QWORD *)(a2 + 16) = 64;
        *(_DWORD *)(a2 + 40) = 1004172302;
        *(_QWORD *)(a2 + 48) = -4294944295;
        result = memcpy((void *)(a2 + 60), &unk_210BCD9DC, 0x194uLL);
        *(_DWORD *)(a2 + 56) = 1;
        v4 = 1055249678;
        break;
      default:
LABEL_16:
        printf("%sError : ", (const char *)&str_1_4);
        printf("In %s : model version %d not defined", "vl_hs_model_get_par_version", v2);
        return (void *)putchar(10);
    }
    *(_DWORD *)(a2 + 32) = v4;
    *(_QWORD *)a2 = 2;
    return result;
  }
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result == 100)
    {
      *(_OWORD *)(a2 + 56) = 0u;
      *(_QWORD *)(a2 + 456) = 0;
      *(_OWORD *)(a2 + 424) = 0u;
      *(_OWORD *)(a2 + 440) = 0u;
      *(_OWORD *)(a2 + 392) = 0u;
      *(_OWORD *)(a2 + 408) = 0u;
      *(_OWORD *)(a2 + 360) = 0u;
      *(_OWORD *)(a2 + 376) = 0u;
      *(_OWORD *)(a2 + 328) = 0u;
      *(_OWORD *)(a2 + 344) = 0u;
      *(_OWORD *)(a2 + 296) = 0u;
      *(_OWORD *)(a2 + 312) = 0u;
      *(_OWORD *)(a2 + 264) = 0u;
      *(_OWORD *)(a2 + 280) = 0u;
      *(_OWORD *)(a2 + 232) = 0u;
      *(_OWORD *)(a2 + 248) = 0u;
      *(_OWORD *)(a2 + 200) = 0u;
      *(_OWORD *)(a2 + 216) = 0u;
      *(_OWORD *)(a2 + 168) = 0u;
      *(_OWORD *)(a2 + 184) = 0u;
      *(_OWORD *)(a2 + 136) = 0u;
      *(_OWORD *)(a2 + 152) = 0u;
      *(_OWORD *)(a2 + 104) = 0u;
      *(_OWORD *)(a2 + 120) = 0u;
      *(_OWORD *)(a2 + 72) = 0u;
      *(_OWORD *)(a2 + 88) = 0u;
      *(_QWORD *)(a2 + 8) = 4;
      *(_QWORD *)(a2 + 24) = 64;
      *(_QWORD *)(a2 + 44) = 0x59D83D088889;
      *(_QWORD *)(a2 + 32) = 0x3F4CCCCD3F5850F0;
      return result;
    }
    if ((_DWORD)result == 200)
    {
      *(_OWORD *)(a2 + 56) = 0u;
      *(_QWORD *)(a2 + 456) = 0;
      *(_OWORD *)(a2 + 424) = 0u;
      *(_OWORD *)(a2 + 440) = 0u;
      *(_OWORD *)(a2 + 392) = 0u;
      *(_OWORD *)(a2 + 408) = 0u;
      *(_OWORD *)(a2 + 360) = 0u;
      *(_OWORD *)(a2 + 376) = 0u;
      *(_OWORD *)(a2 + 328) = 0u;
      *(_OWORD *)(a2 + 344) = 0u;
      *(_OWORD *)(a2 + 296) = 0u;
      *(_OWORD *)(a2 + 312) = 0u;
      *(_OWORD *)(a2 + 264) = 0u;
      *(_OWORD *)(a2 + 280) = 0u;
      *(_OWORD *)(a2 + 232) = 0u;
      *(_OWORD *)(a2 + 248) = 0u;
      *(_OWORD *)(a2 + 200) = 0u;
      *(_OWORD *)(a2 + 216) = 0u;
      *(_OWORD *)(a2 + 168) = 0u;
      *(_OWORD *)(a2 + 184) = 0u;
      *(_OWORD *)(a2 + 136) = 0u;
      *(_OWORD *)(a2 + 152) = 0u;
      *(_OWORD *)(a2 + 104) = 0u;
      *(_OWORD *)(a2 + 120) = 0u;
      *(_OWORD *)(a2 + 72) = 0u;
      *(_OWORD *)(a2 + 88) = 0u;
      *(_QWORD *)(a2 + 8) = 4;
      *(_QWORD *)(a2 + 24) = 64;
      *(_QWORD *)(a2 + 44) = 0x59D93D088889;
      *(_QWORD *)(a2 + 32) = 0x3F4CCCCD3F35AE2ELL;
      return result;
    }
    goto LABEL_16;
  }
  printf("%sError : ", (const char *)&str_1_4);
  printf("Promote your VL pose verification model here!");
  return (void *)putchar(10);
}

uint64_t vl_hs_compute_hypothesis_scores(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  int v18;
  _DWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  double v25;
  void *v26;
  double v27;
  uint64_t v28;
  void *v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  float32x4_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float32x2_t **v39;
  float *v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float32x4_t v45;
  int16x4_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  float v59;
  uint64_t *v60;
  uint64_t v61;
  float64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  float64_t v68;
  uint64_t v69;
  char *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  float *v77;
  unint64_t v78;
  int v79;
  uint64_t v80;
  float v81;
  float v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  float32x2_t **v86;
  float32x2_t *v87;
  float64x2_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  float32x2_t *v99;
  uint64_t v100;
  uint64_t v101;
  float v102;
  float v103;
  int *v104;
  float *v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  int v111;
  int v112;
  float *v113;
  int v114;
  int v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  float v125;
  float v126;
  float *v127;
  float32x2_t *v128;
  float *v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  int v135;
  int v136;
  int v137;
  int v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  char *v142;
  float v143;
  float v144;
  float v145;
  double v146;
  int v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  char *v151;
  float v152;
  float v153;
  uint64_t v154;
  void **v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _DWORD *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  __int128 v186;
  uint64_t v187;
  void *v188[2];
  char *v189;
  void *ptr[2];
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  float32x4_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;

  v10 = a1;
  v11 = *a2;
  if ((uint64_t)*a2 < 1)
  {
    v18 = 0;
    v184 = 0;
    if (*(_DWORD *)(a1 + 212))
      goto LABEL_18;
    goto LABEL_10;
  }
  v13 = 3;
  if (v11 > 3)
    v13 = *a2;
  v14 = (char *)malloc_type_realloc(0, 80 * v13, 0x77C13A6BuLL);
  bzero(v14, 80 * v11);
  v11 = *a2;
  if ((uint64_t)*a2 < 1)
  {
    v18 = 0;
    v184 = v14;
    if (*(_DWORD *)(v10 + 212))
      goto LABEL_18;
    goto LABEL_10;
  }
  v15 = a2[1];
  if (v11 == 1)
  {
    v16 = 0;
    v17 = v14;
LABEL_15:
    v23 = v15 + 280 * v16;
    v24 = 80 * v16;
    do
    {
      *(_QWORD *)&v17[v24] = v23;
      ++v16;
      v23 += 280;
      v24 += 80;
    }
    while (v11 != v16);
    goto LABEL_17;
  }
  v16 = v11 & 0xFFFFFFFFFFFFFFFELL;
  v20 = v11 & 0xFFFFFFFFFFFFFFFELL;
  v21 = a2[1];
  v17 = v14;
  v22 = (unint64_t *)v14;
  do
  {
    *v22 = v21;
    v22[10] = v21 + 280;
    v22 += 20;
    v21 += 560;
    v20 -= 2;
  }
  while (v20);
  if (v11 != v16)
    goto LABEL_15;
LABEL_17:
  v18 = 1;
  v184 = v17;
  if (*(_DWORD *)(v10 + 212))
  {
LABEL_18:
    *(_QWORD *)(v10 + 120) -= mach_absolute_time();
    v19 = (_DWORD *)model_0;
    if (model_0)
      goto LABEL_19;
LABEL_21:
    vl_hs_model_load(a7, (const char *)(v10 + 216));
    goto LABEL_22;
  }
LABEL_10:
  clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(v10 + 32));
  clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(v10 + 16));
  clock_gettime(_CLOCK_MONOTONIC, (timespec *)v10);
  v19 = (_DWORD *)model_0;
  if (!model_0)
    goto LABEL_21;
LABEL_19:
  if (*v19 != (_DWORD)a7)
  {
    vl_hs_model_free();
    if (!model_0)
      goto LABEL_21;
  }
LABEL_22:
  v177 = (_DWORD *)(a3 + 24);
  v25 = (double)*(uint64_t *)a5 * 0.1;
  if (v25 <= 0.0)
  {
    v197 = 0uLL;
    v28 = (uint64_t)v25;
    *(_QWORD *)&v198.f64[0] = (uint64_t)v25;
  }
  else
  {
    v26 = malloc_type_malloc(vcvtd_n_u64_f64(v25, 2uLL), 0x975E914DuLL);
    v27 = (double)*(uint64_t *)a5 * 0.1;
    v197.f64[0] = 0.0;
    *(_QWORD *)&v197.f64[1] = v26;
    v28 = (uint64_t)v27;
    *(_QWORD *)&v198.f64[0] = (uint64_t)v27;
    if (v27 > 0.0)
    {
      v29 = malloc_type_malloc(vcvtd_n_u64_f64(v27, 3uLL), 0xFC00B5C6uLL);
      v28 = (uint64_t)((double)*(uint64_t *)a5 * 0.1);
      goto LABEL_27;
    }
  }
  v29 = 0;
LABEL_27:
  v196 = 0uLL;
  ptr[0] = 0;
  ptr[1] = v29;
  *(_QWORD *)&v191 = v28;
  get_img_borders_normalized(v177, &v196.f32[2], v196.f32);
  v172 = v10;
  v178 = v11;
  if (v18)
  {
    v31 = v18;
    v32 = 0;
    v33 = v196;
    *(float32x4_t *)v188 = v196;
    do
    {
      ptr[0] = 0;
      v197.f64[0] = 0.0;
      v34 = *(_QWORD *)a5;
      v35 = v184;
      if (*(uint64_t *)a5 >= 1)
      {
        v36 = 0;
        v37 = 0;
        v38 = 0;
        v39 = (float32x2_t **)&v184[80 * v32];
        do
        {
          v40 = (float *)(*(_QWORD *)(a5 + 8) + v36);
          v41 = *v40 - (*v39)[4].f32[1];
          v42 = v40[1] - (*v39)[5].f32[0];
          v43 = v40[2] - (*v39)[5].f32[1];
          v44 = (float)((float)((*v39)[1].f32[1] * v42) + (float)((*v39)->f32[0] * v41))
              + (float)((*v39)[3].f32[0] * v43);
          if (v44 > 0.0)
          {
            *(float32x2_t *)&v30 = vmul_n_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32((*v39)[2], v42), *(float32x2_t *)((char *)*v39 + 4), v41), *(float32x2_t *)((char *)*v39 + 28), v43), 1.0 / v44);
            v45.i64[0] = v30;
            v45.i64[1] = v30;
            v46.i32[0] = vmovn_s32(vcgtq_f32(v45, v33)).u32[0];
            v46.i32[1] = vmovn_s32(vcgtq_f32(v33, v45)).i32[1];
            if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(v46, 0xFuLL))) & 1) == 0)
            {
              v47 = (char *)ptr[0];
              if ((uint64_t)ptr[0] >= (uint64_t)v191)
              {
                if ((_QWORD)v191)
                  v48 = 2 * v191;
                else
                  v48 = 32;
                if (v48 <= (uint64_t)ptr[0])
                  v49 = (uint64_t)ptr[0] + 1;
                else
                  v49 = v48;
                if (v49)
                {
                  v186 = v30;
                  v50 = malloc_type_realloc(ptr[1], 8 * v49, 0x30313320uLL);
                  v30 = v186;
                  v33 = *(float32x4_t *)v188;
                  v35 = v184;
                  ptr[1] = v50;
                  v47 = (char *)ptr[0];
                  v37 = *(_QWORD *)&v197.f64[0];
                }
                *(_QWORD *)&v191 = v49;
              }
              ptr[0] = v47 + 1;
              *((_QWORD *)ptr[1] + (_QWORD)v47) = v30;
              if (v37 >= *(uint64_t *)&v198.f64[0])
              {
                if (*(_QWORD *)&v198.f64[0])
                  v51 = 2 * *(_QWORD *)&v198.f64[0];
                else
                  v51 = 64;
                if (v51 <= v37)
                  v52 = v37 + 1;
                else
                  v52 = v51;
                if (v52)
                {
                  v53 = malloc_type_realloc(*(void **)&v197.f64[1], 4 * v52, 0xE6E02957uLL);
                  v33 = *(float32x4_t *)v188;
                  v35 = v184;
                  *(_QWORD *)&v197.f64[1] = v53;
                  v37 = *(_QWORD *)&v197.f64[0];
                }
                *(_QWORD *)&v198.f64[0] = v52;
              }
              *(_QWORD *)&v197.f64[0] = v37 + 1;
              *(_DWORD *)(*(_QWORD *)&v197.f64[1] + 4 * v37) = v38;
              v34 = *(_QWORD *)a5;
              ++v37;
            }
          }
          ++v38;
          v36 += 12;
        }
        while (v34 > v38);
      }
      vl_match_exhaustive_knn_rematch(a4, a5, *(_DWORD *)(a5 + 216), (uint64_t)&v197, (uint64_t *)ptr, (uint64_t *)&v35[80 * v32 + 32], a6, 0xAu, *(float *)(model_0 + 52));
      v33 = *(float32x4_t *)v188;
      ++v32;
    }
    while (v32 != v11);
    v29 = ptr[1];
    v10 = v172;
    v18 = v31;
  }
  free(v29);
  free(*(void **)&v197.f64[1]);
  v59 = *(float *)(model_0 + 48);
  v200 = 0u;
  v201 = 0u;
  v198 = 0u;
  v199 = 0u;
  v197 = 0u;
  v171 = v18;
  if (!v18)
  {
    v68 = 0.0;
    goto LABEL_77;
  }
  v60 = (uint64_t *)(v184 + 32);
  do
  {
    vl_pose_get_inliers(*(v60 - 4), (uint64_t)a4, a5, v60, (uint64_t)&v197, v59, v54, v55, v56, v57, v58);
    v61 = *(v60 - 3);
    v62 = v200.f64[0];
    v63 = *(v60 - 1);
    if (*(uint64_t *)&v200.f64[0] > v63)
    {
      if (v63)
        v66 = 2 * v63;
      else
        v66 = 32;
      if (v66 <= *(uint64_t *)&v200.f64[0])
        v67 = *(_QWORD *)&v200.f64[0];
      else
        v67 = v66;
      if (v67)
        *(v60 - 2) = (uint64_t)malloc_type_realloc((void *)*(v60 - 2), 8 * v67, 0x4723CB62uLL);
      *(v60 - 1) = v67;
      v10 = v172;
      v64 = *(_QWORD *)&v62 - v61;
      if (*(uint64_t *)&v62 > v61)
      {
LABEL_73:
        bzero((void *)(*(v60 - 2) + 8 * *(v60 - 3)), 8 * v64);
        v65 = *(_QWORD *)&v200.f64[0];
        *(v60 - 3) = *(_QWORD *)&v200.f64[0];
        if (v65 < 1)
          goto LABEL_59;
LABEL_74:
        memcpy((void *)*(v60 - 2), *(const void **)&v200.f64[1], 8 * v65);
        goto LABEL_59;
      }
    }
    else
    {
      v64 = *(_QWORD *)&v200.f64[0] - v61;
      if (*(uint64_t *)&v200.f64[0] > v61)
        goto LABEL_73;
    }
    v65 = *(_QWORD *)&v200.f64[0];
    *(v60 - 3) = *(_QWORD *)&v200.f64[0];
    if (v65 >= 1)
      goto LABEL_74;
LABEL_59:
    v60 += 10;
    --v11;
  }
  while (v11);
  v68 = v197.f64[1];
  v11 = v178;
LABEL_77:
  free(*(void **)&v68);
  free(*(void **)&v199.f64[0]);
  free(*(void **)&v200.f64[1]);
  if ((int)((uint64_t)((v11 + (((*(_QWORD *)(model_0 + 8) << 32) - 0x100000000) >> 32)) & -*(_DWORD *)(model_0 + 8))
           / (int)*(_QWORD *)(model_0 + 8)) >= 1)
  {
    v69 = 0;
    v176 = ((uint64_t)((v11 + (((*(_QWORD *)(model_0 + 8) << 32) - 0x100000000) >> 32)) & -*(_DWORD *)(model_0 + 8))
                        / (int)*(_QWORD *)(model_0 + 8));
    v179 = 1;
    do
    {
      v71 = v69;
      v72 = *(_QWORD *)(model_0 + 8);
      v73 = *(_QWORD *)(model_0 + 16);
      v74 = *(_QWORD *)(model_0 + 24);
      v75 = *(_QWORD *)(model_0 + 32);
      v196 = 0uLL;
      get_img_borders_normalized(v177, &v196.f32[2], v196.f32);
      v181 = v74 * v73;
      v182 = v73;
      bzero(*(void **)(model_0 + 480), 4 * v72 * v74 * v73 * v75);
      v76 = *(_QWORD *)(model_0 + 480);
      v77 = *(float **)(model_0 + 496);
      ++v69;
      v78 = v72 * v69;
      v79 = v71 * v72;
      v11 = v178;
      if (v72 * v69 >= v178)
        v78 = v178;
      if (v78 <= v79)
      {
        if (*(_DWORD *)(v10 + 728))
          goto LABEL_149;
        vl_hs_forward();
        v70 = 0;
      }
      else
      {
        v174 = v79;
        v175 = v69;
        v80 = 0;
        v189 = 0;
        v187 = 0;
        v81 = (float)(int)v75;
        v82 = (float)(int)v74;
        v83 = v72 * v179;
        v173 = v72 * v179;
        if (v178 < v72 * v179)
          v83 = v178;
        v183 = v83 - v79;
        v84 = v79;
        v85 = v184;
        do
        {
          v86 = (float32x2_t **)&v85[80 * v84];
          v194 = 0u;
          v195 = 0u;
          v192 = 0u;
          v193 = 0u;
          *(_OWORD *)ptr = 0u;
          v191 = 0u;
          v87 = *v86;
          v202 = vcvtq_f64_f32((*v86)[5]);
          v88 = vcvtq_f64_f32(v87[3]);
          v197 = vcvtq_f64_f32(*v87);
          v200 = v88;
          v198 = vcvtq_f64_f32(v87[1]);
          v199 = vcvtq_f64_f32(v87[2]);
          v201 = vcvtq_f64_f32(v87[4]);
          g_camera_local_to_global((double *)(a5 + 240), v197.f64, (double *)ptr);
          v89 = v80 + 1;
          if (v80 >= v187)
          {
            v91 = 2 * v187;
            if (!v187)
              v91 = 2;
            if (v91 <= v80)
              v91 = v80 + 1;
            v90 = v189;
            if (v91)
            {
              v187 = v91;
              v90 = (char *)malloc_type_realloc(v189, 96 * v91, 0xBC4F9644uLL);
            }
            else
            {
              v187 = 0;
            }
          }
          else
          {
            v90 = v189;
          }
          v189 = v90;
          v92 = &v90[96 * v80];
          v93 = v191;
          *(_OWORD *)v92 = *(_OWORD *)ptr;
          *((_OWORD *)v92 + 1) = v93;
          v94 = v192;
          v95 = v193;
          v96 = v195;
          *((_OWORD *)v92 + 4) = v194;
          *((_OWORD *)v92 + 5) = v96;
          *((_OWORD *)v92 + 2) = v94;
          *((_OWORD *)v92 + 3) = v95;
          v85 = v184;
          v97 = *(_QWORD *)&v184[80 * v84 + 8];
          if (v97 >= 1)
          {
            v98 = a4[1];
            v99 = *v86;
            v100 = *(_QWORD *)(a5 + 8);
            v101 = v196.i64[1];
            v102 = v196.f32[0] - v196.f32[2];
            v103 = v196.f32[1] - v196.f32[3];
            v104 = (int *)(*(_QWORD *)&v184[80 * v84 + 16] + 4);
            do
            {
              v105 = (float *)(v100 + 12 * *(v104 - 1));
              v106 = *v105 - v99[4].f32[1];
              v107 = v105[1] - v99[5].f32[0];
              v108 = v105[2] - v99[5].f32[1];
              v109 = (float)((float)(v99[1].f32[1] * v107) + (float)(v99->f32[0] * v106))
                   + (float)(v99[3].f32[0] * v108);
              if (v109 > 0.0)
              {
                v110 = 1.0 / v109;
                v111 = (int)(float)((float)((float)((float)(v110
                                                          * (float)((float)((float)(v107 * v99[2].f32[0])
                                                                          + (float)(v99->f32[1] * v106))
                                                                  + (float)(v99[3].f32[1] * v108)))
                                                  - *(float *)&v101)
                                          / v102)
                                  * v81);
                if ((v111 & 0x80000000) == 0 && v111 < (int)v75)
                {
                  v112 = (int)(float)((float)((float)((float)(v110
                                                            * (float)((float)((float)(v107 * v99[2].f32[1])
                                                                            + (float)(v99[1].f32[0] * v106))
                                                                    + (float)(v99[4].f32[0] * v108)))
                                                    - *((float *)&v101 + 1))
                                            / v103)
                                    * v82);
                  if ((v112 & 0x80000000) == 0 && v112 < (int)v74)
                  {
                    v113 = (float *)(v98 + 288 * *v104);
                    v114 = (int)(float)((float)((float)(*v113 - *(float *)&v101) / v102) * v81);
                    if ((v114 & 0x80000000) == 0 && v114 < (int)v75)
                    {
                      v115 = (int)(float)((float)((float)(v113[1] - *((float *)&v101 + 1)) / v103) * v82);
                      if ((v115 & 0x80000000) == 0 && v115 < (int)v74)
                      {
                        *(_DWORD *)(v76 + 4 * ((v80 * v181 + v115) * v75 + v114)) = 1065353216;
                        *(_DWORD *)(v76 + 4 * ((v80 * v181 + v74 + v112) * v75 + v111)) = 1065353216;
                      }
                    }
                  }
                }
              }
              v104 += 2;
              --v97;
            }
            while (v97);
          }
          v116 = &v184[80 * v84];
          v119 = *((_QWORD *)v116 + 4);
          v117 = v116 + 32;
          v118 = v119;
          if (v119 >= 1)
          {
            v120 = 0;
            v121 = *(_QWORD *)(a6 + 32);
            v122 = *(_QWORD *)&v184[80 * v84 + 64];
            v123 = model_0;
            v124 = v196.i64[1];
            v125 = v196.f32[0] - v196.f32[2];
            v126 = v196.f32[1] - v196.f32[3];
            v127 = (float *)(a4[1] + 4);
            do
            {
              if ((float)(*(float *)(v121 + v120) / *(float *)(v122 + v120)) >= *(float *)(v123 + 44))
              {
                v128 = *v86;
                v129 = (float *)(*(_QWORD *)(a5 + 8) + 12 * *(int *)(*((_QWORD *)v117 + 1) + v120));
                v130 = *v129 - (*v86)[4].f32[1];
                v131 = v129[1] - (*v86)[5].f32[0];
                v132 = v129[2] - (*v86)[5].f32[1];
                v133 = (float)((float)((*v86)[1].f32[1] * v131) + (float)((*v86)->f32[0] * v130))
                     + (float)((*v86)[3].f32[0] * v132);
                if (v133 > 0.0)
                {
                  v134 = 1.0 / v133;
                  v135 = (int)(float)((float)((float)((float)(v134
                                                            * (float)((float)((float)(v131 * v128[2].f32[0])
                                                                            + (float)(v128->f32[1] * v130))
                                                                    + (float)(v128[3].f32[1] * v132)))
                                                    - *(float *)&v124)
                                            / v125)
                                    * v81);
                  if ((v135 & 0x80000000) == 0 && v135 < (int)v75)
                  {
                    v136 = (int)(float)((float)((float)((float)(v134
                                                              * (float)((float)((float)(v131 * v128[2].f32[1])
                                                                              + (float)(v128[1].f32[0] * v130))
                                                                      + (float)(v128[4].f32[0] * v132)))
                                                      - *((float *)&v124 + 1))
                                              / v126)
                                      * v82);
                    if ((v136 & 0x80000000) == 0 && v136 < (int)v74)
                    {
                      v137 = (int)(float)((float)((float)(*(v127 - 1) - *(float *)&v124) / v125) * v81);
                      if ((v137 & 0x80000000) == 0 && v137 < (int)v75)
                      {
                        v138 = (int)(float)((float)((float)(*v127 - *((float *)&v124 + 1)) / v126) * v82);
                        if ((v138 & 0x80000000) == 0 && v138 < (int)v74)
                        {
                          *(_DWORD *)(v76
                                    + 4 * (((v80 * v182 + 2) * v74 + v138) * v75 + v137)) = 1065353216;
                          *(_DWORD *)(v76
                                    + 4 * (((v80 * v182 + 3) * v74 + v136) * v75 + v135)) = 1065353216;
                        }
                      }
                    }
                  }
                }
              }
              v120 += 8;
              v127 += 72;
              --v118;
            }
            while (v118);
          }
          ++v84;
          ++v80;
        }
        while (v89 != v183);
        v10 = v172;
        v11 = v178;
        v69 = v175;
        if (*(_DWORD *)(v172 + 728))
        {
LABEL_149:
          printf("%sAborting : ", (const char *)&str_1_4);
          putchar(10);
          __assert_rtn("vl_hs_write_grid_to_tfrecord", "vl_verify_hs.c", 580, "0");
        }
        vl_hs_forward();
        if (*(_DWORD *)(model_0 + 64))
        {
          v139 = model_0 + 68;
          v140 = v173;
          if (v178 < v173)
            v140 = v178;
          v141 = v140 - v174;
          v142 = &v184[80 * (int)v174];
          v70 = v189;
          do
          {
            v143 = *v77++;
            v144 = v143 * 100.0;
            v145 = floorf(v143 * 100.0);
            v146 = v145;
            if (v145 > 99.0)
              v146 = 99.0;
            v147 = (int)v146;
            if (v145 < 0.0)
              v147 = 0;
            v148 = *(_QWORD *)v142;
            v142 += 80;
            *(float *)(v148 + 272) = *(float *)(v139 + 4 * v147)
                                   + (float)((float)(v144 - (float)v147)
                                           * (float)(*(float *)(v139 + 4 * v147 + 4) - *(float *)(v139 + 4 * v147)));
            --v141;
          }
          while (v141);
        }
        else
        {
          v149 = v173;
          if (v178 < v173)
            v149 = v178;
          v150 = v149 - v174;
          v151 = &v184[80 * (int)v174];
          v70 = v189;
          do
          {
            v152 = *v77++;
            v153 = v152;
            v154 = *(_QWORD *)v151;
            v151 += 80;
            *(float *)(v154 + 272) = v153;
            --v150;
          }
          while (v150);
        }
      }
      free(v70);
      ++v179;
    }
    while (v69 != v176);
  }
  if (v171)
  {
    v155 = (void **)(v184 + 40);
    do
    {
      free(v155[3]);
      free(*v155);
      free(*(v155 - 3));
      v155 += 10;
      --v11;
    }
    while (v11);
  }
  free(v184);
  if (*(_DWORD *)(v10 + 212))
  {
    *(_QWORD *)(v10 + 120) += mach_absolute_time();
    if (*(_DWORD *)(v10 + 212))
      goto LABEL_146;
    return log_col_app((uint64_t)"%s%s%s:%s%7.1fms%s", v156, v157, v158, v159, v160, v161, v162, (char)&str_4_1);
  }
  else
  {
    clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(v10 + 64));
    clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(v10 + 80));
    clock_gettime(_CLOCK_MONOTONIC, (timespec *)(v10 + 48));
    v164 = *(_QWORD *)(v10 + 56) - *(_QWORD *)(v10 + 8) + 1000000000 * (*(_QWORD *)(v10 + 48) - *(_QWORD *)v10);
    v165 = *(_QWORD *)(v10 + 72)
         - *(_QWORD *)(v10 + 24)
         + 1000000000 * (*(_QWORD *)(v10 + 64) - *(_QWORD *)(v10 + 16));
    v166 = *(_QWORD *)(v10 + 88)
         - *(_QWORD *)(v10 + 40)
         + 1000000000 * (*(_QWORD *)(v10 + 80) - *(_QWORD *)(v10 + 32));
    v167 = *(_QWORD *)(v10 + 128);
    v168 = v164 + *(_QWORD *)(v10 + 120);
    *(_QWORD *)(v10 + 96) = v164;
    *(_QWORD *)(v10 + 104) = v165;
    v169 = v165 + v167;
    *(_QWORD *)(v10 + 112) = v166;
    *(_QWORD *)(v10 + 120) = v168;
    v170 = v166 + *(_QWORD *)(v10 + 136);
    *(_QWORD *)(v10 + 128) = v169;
    *(_QWORD *)(v10 + 136) = v170;
    ++*(_DWORD *)(v10 + 144);
    if (!*(_DWORD *)(v10 + 212))
      return log_col_app((uint64_t)"%s%s%s:%s%7.1fms%s", v156, v157, v158, v159, v160, v161, v162, (char)&str_4_1);
LABEL_146:
    printf("Verbose : ");
    printf("Total time for %40s : %7.3f ms", (const char *)(v10 + 148), (double)*(uint64_t *)(v10 + 120) * 0.000001);
    return putchar(10);
  }
}

float get_img_borders_normalized(_DWORD *a1, float *a2, float *a3)
{
  int v6;
  float v7;
  float v8;
  int v9;
  float v10;
  double v11;
  uint64_t v12;
  int64x2_t v13;
  float v19;
  float result;
  uint64_t v21;
  float64x2_t v22;
  float64x2_t v23;

  v21 = 0;
  v22 = 0uLL;
  v6 = *a1;
  v23 = (float64x2_t)0xBFE0000000000000;
  if (v6 == 3)
  {
    v23.f64[1] = (double)(a1[43] / 2) + -0.5;
    g_improj2_to_xyz((uint64_t)a1, &v23, (double *)&v21);
    v7 = v22.f64[0];
    *a2 = v7;
    v23.f64[0] = (double)(a1[42] / 2) + -0.5;
    v23.f64[1] = -0.5;
    g_improj2_to_xyz((uint64_t)a1, &v23, (double *)&v21);
    v8 = v22.f64[1];
    a2[1] = v8;
    v9 = a1[43];
    v23.f64[0] = (double)(int)a1[42] + -0.5;
    v23.f64[1] = (double)(v9 / 2) + -0.5;
    g_improj2_to_xyz((uint64_t)a1, &v23, (double *)&v21);
    v10 = v22.f64[0];
    *a3 = v10;
    v11 = (double)(int)a1[43] + -0.5;
    v23.f64[0] = (double)(a1[42] / 2) + -0.5;
    v23.f64[1] = v11;
    g_improj2_to_xyz((uint64_t)a1, &v23, (double *)&v21);
  }
  else
  {
    v23.f64[1] = -0.5;
    g_improj2_to_xyz((uint64_t)a1, &v23, (double *)&v21);
    *(float32x2_t *)a2 = vcvt_f32_f64(v22);
    v12 = *((_QWORD *)a1 + 21);
    v13.i64[0] = (int)v12;
    v13.i64[1] = SHIDWORD(v12);
    __asm { FMOV            V1.2D, #-0.5 }
    v23 = vaddq_f64(vcvtq_f64_s64(v13), _Q1);
    g_improj2_to_xyz((uint64_t)a1, &v23, (double *)&v21);
    v19 = v22.f64[0];
    *a3 = v19;
  }
  result = v22.f64[1];
  a3[1] = result;
  return result;
}

double sss_par_version@<D0>(int a1@<W0>, uint64_t a2@<X8>)
{
  double result;

  *(_OWORD *)a2 = xmmword_210BCC1A0;
  *(_OWORD *)(a2 + 16) = xmmword_210BCC1B0;
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 36) = 0x3DCCCCCD3F800000;
  *(_QWORD *)&result = 0xA7FFFFFFFLL;
  *(_OWORD *)(a2 + 44) = xmmword_210BCC1C0;
  if (a1 <= 199)
  {
    switch(a1)
    {
      case 'd':
        *(_DWORD *)(a2 + 40) = 1065353216;
        *(_DWORD *)(a2 + 32) = 1;
        *(_DWORD *)(a2 + 24) = 2;
        *(_QWORD *)&result = 0x800000040;
        *(_QWORD *)(a2 + 16) = 0x800000040;
        return result;
      case 'e':
        *(_DWORD *)(a2 + 40) = 1065353216;
        *(_DWORD *)(a2 + 32) = 1;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 52) = 4;
        *(_QWORD *)&result = 0xA00000040;
        *(_QWORD *)(a2 + 16) = 0xA00000040;
        return result;
      case 'f':
        *(_DWORD *)(a2 + 40) = 1065353216;
        *(_DWORD *)(a2 + 32) = 1;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 52) = 10;
        *(_QWORD *)&result = 0x1000000040;
        *(_QWORD *)(a2 + 16) = 0x1000000040;
        return result;
      case 'g':
        *(_DWORD *)(a2 + 40) = 1065353216;
        *(_DWORD *)(a2 + 32) = 1;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 52) = 2;
        *(_QWORD *)&result = 0x600000040;
        *(_QWORD *)(a2 + 16) = 0x600000040;
        return result;
      case 'h':
        *(_DWORD *)(a2 + 40) = 1065353216;
        *(_DWORD *)(a2 + 32) = 1;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 52) = 2;
        *(_QWORD *)&result = 0x400000050;
        *(_QWORD *)(a2 + 16) = 0x400000050;
        return result;
      default:
        if (!a1)
          return result;
        goto LABEL_18;
    }
  }
  if (a1 > 201)
  {
    if (a1 == 202)
    {
      *(_DWORD *)(a2 + 24) = 2;
      *(_QWORD *)(a2 + 48) = 0x100000006;
      *(_QWORD *)&result = 0x400000050;
      *(_QWORD *)(a2 + 16) = 0x400000050;
    }
    else
    {
      if (a1 != 706)
LABEL_18:
        __assert_rtn("sss_par_version", "sss.c", 255, "0 && \"Not implemented\"");
      *(_DWORD *)(a2 + 40) = 1065353216;
      *(_DWORD *)(a2 + 32) = 1;
      *(_DWORD *)(a2 + 24) = 2;
      *(_DWORD *)(a2 + 52) = 2;
      *(_QWORD *)&result = 0x800000060;
      *(_QWORD *)(a2 + 16) = 0x800000060;
    }
  }
  else
  {
    *(_DWORD *)(a2 + 24) = 2;
    if (a1 == 200)
    {
      *(_DWORD *)(a2 + 48) = 6;
      *(_QWORD *)&result = 0x200000050;
      *(_QWORD *)(a2 + 16) = 0x200000050;
    }
    else
    {
      *(_QWORD *)(a2 + 48) = 6;
      *(_QWORD *)&result = 0x300000050;
      *(_QWORD *)(a2 + 16) = 0x300000050;
    }
  }
  return result;
}

_DWORD *sss_create_ids(void *a1, const void *a2, int a3, int a4, _DWORD *a5)
{
  void *v10;
  char *v11;
  char *v12;
  int v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  _QWORD *v17;
  void *v18;
  BOOL v19;
  void *v20;
  _QWORD *v21;
  void *v22;
  int v23;
  void *v24;
  _QWORD *v25;
  int32x4_t *v26;
  uint64_t v27;
  int32x4_t *v28;
  uint64_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int v33;
  void *v34;
  _QWORD *v35;
  int32x4_t *v36;
  uint64_t v37;
  int32x4_t *v38;
  uint64_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  uint64_t v44;
  void *v45;
  void *__src;
  char *v47;
  uint64_t v48;
  int v49;
  _DWORD *v50;
  unsigned int v51;

  v50 = malloc_type_calloc(1uLL, 0x108uLL, 0x10200408B489881uLL);
  v10 = a1;
  v49 = a3;
  if (!*a5)
  {
    v10 = a1;
    if ((int)a5[14] > 1)
    {
      if (a1)
      {
        v10 = malloc_type_malloc(a4 * a3, 0xA2EA7F68uLL);
        memcpy(v10, a1, a4 * a3);
      }
      else
      {
        v10 = 0;
      }
    }
  }
  v45 = a1;
  __src = v10;
  v50[65] = a3;
  v50[64] = a5[5];
  v11 = (char *)malloc_type_malloc(8 * a4 + a4 * (uint64_t)a3, 0x9A0C56FDuLL);
  v12 = v11;
  v13 = a5[5];
  v14 = (v13 - 1);
  if (v13 >= 1)
  {
    v15 = a4 * (uint64_t)a3;
    v48 = (uint64_t)&v11[v15];
    v47 = &v11[4 * a4 + v15];
    if (a2)
    {
      if (__src)
      {
        do
        {
          v51 = v14 + a5[1];
          if ((_DWORD)v14 || (v16 = v45, *a5))
          {
            v16 = malloc_type_malloc(v15, 0xA2EA7F68uLL);
            memcpy(v16, __src, v15);
          }
          v17 = malloc_type_calloc(1uLL, 0x38uLL, 0x10B004018EF0026uLL);
          v18 = malloc_type_malloc(4 * a4, 0xA2EA7F68uLL);
          memcpy(v18, a2, 4 * a4);
          v17[4] = v16;
          v17[5] = v18;
          *((_DWORD *)v17 + 12) = a4;
          *(_QWORD *)&v50[2 * v14] = v17;
          sss_split_km((void **)v17, a5, v49, &v51, v12, v48, v47);
          v19 = v14-- <= 0;
        }
        while (!v19);
      }
      else
      {
        do
        {
          v51 = v14 + a5[1];
          if ((_DWORD)v14 || (v20 = v45, *a5))
            v20 = 0;
          v21 = malloc_type_calloc(1uLL, 0x38uLL, 0x10B004018EF0026uLL);
          v22 = malloc_type_malloc(4 * a4, 0xA2EA7F68uLL);
          memcpy(v22, a2, 4 * a4);
          v21[4] = v20;
          v21[5] = v22;
          *((_DWORD *)v21 + 12) = a4;
          *(_QWORD *)&v50[2 * v14] = v21;
          sss_split_km((void **)v21, a5, a3, &v51, v12, v48, v47);
          v19 = v14-- <= 0;
        }
        while (!v19);
      }
      goto LABEL_47;
    }
    v44 = a4 & 0xFFFFFFF8;
    if (__src)
    {
      while (1)
      {
        v23 = v13;
        v13 = v14;
        v51 = a5[1] + v14;
        if (v23 != 1 || (v24 = v45, *a5))
        {
          v24 = malloc_type_malloc(v15, 0xA2EA7F68uLL);
          memcpy(v24, __src, v15);
        }
        v25 = malloc_type_calloc(1uLL, 0x38uLL, 0x10B004018EF0026uLL);
        v26 = (int32x4_t *)malloc_type_malloc(4 * a4, 0x100004052888210uLL);
        if (a4 < 1)
          goto LABEL_22;
        if (a4 >= 8)
        {
          v28 = v26 + 1;
          v29 = a4 & 0xFFFFFFF8;
          v30 = (int32x4_t)xmmword_210BCABD0;
          v31.i64[0] = 0x400000004;
          v31.i64[1] = 0x400000004;
          v32.i64[0] = 0x800000008;
          v32.i64[1] = 0x800000008;
          do
          {
            v28[-1] = v30;
            *v28 = vaddq_s32(v30, v31);
            v30 = vaddq_s32(v30, v32);
            v28 += 2;
            v29 -= 8;
          }
          while (v29);
          v27 = a4 & 0xFFFFFFF8;
          if (v44 == a4)
            goto LABEL_22;
        }
        else
        {
          v27 = 0;
        }
        do
        {
          v26->i32[v27] = v27;
          ++v27;
        }
        while (a4 != v27);
LABEL_22:
        v25[4] = v24;
        v25[5] = v26;
        *((_DWORD *)v25 + 12) = a4;
        *(_QWORD *)&v50[2 * v14] = v25;
        sss_split_km((void **)v25, a5, a3, &v51, v12, v48, v47);
        v19 = v14-- <= 0;
        if (v19)
          goto LABEL_47;
      }
    }
    do
    {
      v33 = v13;
      v13 = v14;
      v51 = a5[1] + v14;
      if (v33 != 1 || (v34 = v45, *a5))
        v34 = 0;
      v35 = malloc_type_calloc(1uLL, 0x38uLL, 0x10B004018EF0026uLL);
      v36 = (int32x4_t *)malloc_type_malloc(4 * a4, 0x100004052888210uLL);
      if (a4 < 1)
        goto LABEL_35;
      if (a4 >= 8)
      {
        v38 = v36 + 1;
        v39 = a4 & 0xFFFFFFF8;
        v40 = (int32x4_t)xmmword_210BCABD0;
        v41.i64[0] = 0x400000004;
        v41.i64[1] = 0x400000004;
        v42.i64[0] = 0x800000008;
        v42.i64[1] = 0x800000008;
        do
        {
          v38[-1] = v40;
          *v38 = vaddq_s32(v40, v41);
          v40 = vaddq_s32(v40, v42);
          v38 += 2;
          v39 -= 8;
        }
        while (v39);
        v37 = a4 & 0xFFFFFFF8;
        if (v44 == a4)
          goto LABEL_35;
      }
      else
      {
        v37 = 0;
      }
      do
      {
        v36->i32[v37] = v37;
        ++v37;
      }
      while (a4 != v37);
LABEL_35:
      v35[4] = v34;
      v35[5] = v36;
      *((_DWORD *)v35 + 12) = a4;
      *(_QWORD *)&v50[2 * v14] = v35;
      sss_split_km((void **)v35, a5, a3, &v51, v12, v48, v47);
      v19 = v14-- <= 0;
    }
    while (!v19);
  }
LABEL_47:
  free(v12);
  if (__src != v45)
    free(__src);
  return v50;
}

void sss_split_km(void **a1, _DWORD *a2, int a3, unsigned int *a4, char *a5, uint64_t a6, _DWORD *a7)
{
  int v7;
  int v8;
  size_t v9;
  _DWORD *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  char *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  char *v28;
  int *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  int8x16_t *v41;
  uint64_t v42;
  int v43;
  char *v44;
  uint64_t v45;
  int v46;
  char *v47;
  unint64_t v48;
  int v49;
  uint8x16_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  int v54;
  char *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  uint8x16_t v68;
  uint8x16_t v69;
  uint8x16_t v70;
  uint8x16_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int16x8_t v78;
  int v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  int v83;
  char *v84;
  unint64_t v85;
  int v86;
  uint8x16_t v87;
  uint64_t v88;
  uint64_t v89;
  int8x16_t v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int8x16_t *v97;
  uint64_t v98;
  int v99;
  unint64_t v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  uint64x2_t *v104;
  uint32x4_t v105;
  uint32x4_t v106;
  uint64x2_t v107;
  uint64x2_t v108;
  uint64x2_t v109;
  uint64_t v110;
  int8x16_t *v111;
  uint64x2_t *v112;
  int8x16_t v113;
  uint32x4_t v114;
  uint32x4_t v115;
  uint32x4_t v116;
  uint32x4_t v117;
  uint64x2_t v118;
  uint64x2_t v119;
  uint64x2_t v120;
  uint64x2_t v121;
  uint64x2_t v122;
  uint64x2_t v123;
  uint64x2_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  int v130;
  int v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  float32x4_t *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  unint64_t v139;
  int v140;
  uint64_t v141;
  uint8x16_t v142;
  float v143;
  int v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  uint8x8_t *v151;
  uint64_t v152;
  uint8x8_t *v153;
  int v154;
  float v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  unint64_t v160;
  uint8x16_t v161;
  uint64_t v162;
  uint64_t v163;
  int32x4_t v164;
  uint8x8_t *v165;
  int32x4_t v166;
  uint64_t v167;
  uint8x8_t *v168;
  int32x4_t v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  uint8x16_t v175;
  uint8x16_t v176;
  int16x8_t v177;
  int16x8_t v178;
  int16x8_t v179;
  int16x8_t v180;
  int32x4_t v181;
  int32x4_t v182;
  uint8x8_t *v183;
  uint8x8_t *v184;
  uint64_t v185;
  uint8x8_t v186;
  uint8x8_t v187;
  uint8x8_t v188;
  int16x8_t v189;
  int v190;
  size_t v191;
  float32x4_t *v192;
  uint64_t v193;
  float32x4_t v194;
  size_t v195;
  float *v196;
  char *v197;
  int v198;
  char *v199;
  _DWORD *v201;
  uint64_t v202;
  size_t v203;
  int *v204;
  uint64_t v205;
  int v206;
  size_t v207;
  _DWORD *v208;
  int *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  char v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  _BYTE *v230;
  BOOL v231;
  int v232;
  char *v233;
  int *v234;
  char *v235;
  size_t v236;
  int v237;
  BOOL v238;
  uint64_t v239;
  char *v240;
  char *v241;
  BOOL v242;
  char *v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  char *v247;
  uint64_t v250;
  size_t v251;
  size_t v252;
  int v254;
  float32x4_t *v255;

  v7 = a2[3];
  v8 = *((_DWORD *)a1 + 12) / a2[4];
  if (v7 >= v8)
    v9 = v8;
  else
    v9 = v7;
  if ((int)v9 < 2)
    return;
  v252 = (int)v9 * a3;
  *a1 = malloc_type_malloc(v252, 0xE0B6BE08uLL);
  a1[1] = malloc_type_malloc(4 * v9, 0x100004052888210uLL);
  *((_DWORD *)a1 + 4) = v9;
  a1[3] = malloc_type_calloc(v9, 0x38uLL, 0x10B004018EF0026uLL);
  v251 = 4 * v9;
  v14 = malloc_type_malloc(v251, 0x100004052888210uLL);
  v15 = 0;
  v16 = *((_DWORD *)a1 + 12);
  v17 = v9 - 1;
  do
  {
    v19 = rand_r(a4) % (v16 - v15);
    if (v15)
    {
      v20 = v17;
      while (1)
      {
        v21 = (char *)&v14[v20];
        v22 = *((_DWORD *)v21 + 1);
        if (v19 < v22)
          break;
        v18 = v20 + 1;
        v23 = v20;
        v24 = v14[v23];
        v14[v23] = v22;
        *((_DWORD *)v21 + 1) = v24;
        ++v19;
        v20 = v18;
        if (v18 >= (v9 - 1))
          goto LABEL_7;
      }
      LODWORD(v18) = v20;
    }
    else
    {
      LODWORD(v18) = v9 - 1;
    }
LABEL_7:
    v14[(int)v18] = v19;
    ++v15;
    --v17;
  }
  while (v15 != (_DWORD)v9);
  if (a3 >= 1)
  {
    v25 = 0;
    for (i = 0; i != v9; ++i)
    {
      v27 = 0;
      do
      {
        *((_BYTE *)*a1 + v25 + v27) = *((_BYTE *)a1[4] + (int)v14[i] * (uint64_t)a3 + v27);
        ++v27;
      }
      while (a3 != v27);
      v25 += a3;
    }
  }
  free(v14);
  v28 = (char *)malloc_type_malloc(8 * v252, 0x100004000313F17uLL);
  v29 = (int *)malloc_type_malloc(v251, 0x100004052888210uLL);
  v30 = (char *)malloc_type_malloc(v251, 0x100004052888210uLL);
  v31 = v30;
  LODWORD(v32) = *((_DWORD *)a1 + 12);
  if ((int)v32 >= 1)
  {
    v33 = 0;
    do
    {
      a7[v33++] = -1;
      v32 = *((int *)a1 + 12);
    }
    while (v33 < v32);
  }
  if ((int)a2[6] < 1 || (a3 <= 1 ? (v34 = 1) : (v34 = a3), (int)v32 < 1))
  {
LABEL_132:
    free(a1[3]);
    a1[3] = 0;
    free(*a1);
    *a1 = 0;
    free(a1[1]);
    v144 = 0;
    a1[1] = 0;
    goto LABEL_133;
  }
  v247 = v30;
  v35 = 0;
  v36 = 0;
  v37 = a3 & 0xFFFFFFE0;
  v38 = a3 & 0x18;
  v39 = a3 & 0xFFFFFFF8;
  v250 = v34;
  do
  {
    v40 = (char *)*a1;
    v41 = (int8x16_t *)a1[4];
    if (a3 == 64)
    {
      v42 = 0;
      v43 = 1;
      v44 = (char *)a1[4];
      do
      {
        v45 = 0;
        v46 = 0x7FFFFFFF;
        v47 = v40;
        do
        {
          v48 = 0;
          v49 = 0;
          do
          {
            v50 = vabdq_u8(*(uint8x16_t *)&v47[v48], *(uint8x16_t *)&v44[v48]);
            v49 += vaddlvq_u16(vqaddq_u16(vmull_u8(*(uint8x8_t *)v50.i8, *(uint8x8_t *)v50.i8), vmull_high_u8(v50, v50)));
            v102 = v48 >= 0x30;
            v48 += 16;
          }
          while (!v102);
          if (v49 < v46)
          {
            v43 = v43 & (v42 == a7[v45]);
            a7[v42] = v45;
            v46 = v49;
          }
          ++v45;
          v47 += 64;
        }
        while (v45 != v9);
        v44 += 64;
        ++v42;
      }
      while (v42 != v32);
      goto LABEL_72;
    }
    if ((a3 & 0xF) != 0)
    {
      if (a3 <= 0)
      {
        v88 = 0;
        LOBYTE(v43) = 1;
        do
        {
          v43 = v43 & (v88 == *a7);
          a7[v88++] = 0;
        }
        while (v32 != v88);
        goto LABEL_72;
      }
      v51 = 0;
      v43 = 1;
      v52 = (char *)a1[4];
LABEL_42:
      v53 = 0;
      v54 = 0x7FFFFFFF;
      v55 = v40;
      while (1)
      {
        if (a3 >= 8)
        {
          if (a3 < 0x20)
          {
            v57 = 0;
            v58 = 0;
LABEL_52:
            v76 = 0uLL;
            v77 = (int32x4_t)v57;
            do
            {
              v78 = (int16x8_t)vsubl_u8(*(uint8x8_t *)&v55[v58], *(uint8x8_t *)&v52[v58]);
              v76 = vmlal_high_s16(v76, v78, v78);
              v77 = vmlal_s16(v77, *(int16x4_t *)v78.i8, *(int16x4_t *)v78.i8);
              v58 += 8;
            }
            while (v39 != v58);
            v57 = vaddvq_s32(vaddq_s32(v77, v76));
            v56 = a3 & 0xFFFFFFF8;
            if (v39 == a3)
              goto LABEL_56;
            goto LABEL_55;
          }
          v59 = 0;
          v60 = 0uLL;
          v61 = 0uLL;
          v62 = 0uLL;
          v63 = 0uLL;
          v64 = 0uLL;
          v65 = 0uLL;
          v66 = 0uLL;
          v67 = 0uLL;
          do
          {
            v68 = *(uint8x16_t *)&v55[v59];
            v69 = *(uint8x16_t *)&v55[v59 + 16];
            v70 = *(uint8x16_t *)&v52[v59];
            v71 = *(uint8x16_t *)&v52[v59 + 16];
            v72 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v68.i8, *(uint8x8_t *)v70.i8);
            v73 = (int16x8_t)vsubl_high_u8(v68, v70);
            v74 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v69.i8, *(uint8x8_t *)v71.i8);
            v75 = (int16x8_t)vsubl_high_u8(v69, v71);
            v63 = vmlal_high_s16(v63, v73, v73);
            v62 = vmlal_s16(v62, *(int16x4_t *)v73.i8, *(int16x4_t *)v73.i8);
            v61 = vmlal_high_s16(v61, v72, v72);
            v60 = vmlal_s16(v60, *(int16x4_t *)v72.i8, *(int16x4_t *)v72.i8);
            v67 = vmlal_high_s16(v67, v75, v75);
            v66 = vmlal_s16(v66, *(int16x4_t *)v75.i8, *(int16x4_t *)v75.i8);
            v65 = vmlal_high_s16(v65, v74, v74);
            v64 = vmlal_s16(v64, *(int16x4_t *)v74.i8, *(int16x4_t *)v74.i8);
            v59 += 32;
          }
          while (v37 != v59);
          v57 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v64, v60), vaddq_s32(v66, v62)), vaddq_s32(vaddq_s32(v65, v61), vaddq_s32(v67, v63))));
          if (v37 == a3)
            goto LABEL_56;
          v58 = a3 & 0xFFFFFFE0;
          v56 = v58;
          if (v38)
            goto LABEL_52;
        }
        else
        {
          v56 = 0;
          v57 = 0;
        }
        do
        {
LABEL_55:
          v79 = v55[v56] - v52[v56];
          v57 += v79 * v79;
          ++v56;
        }
        while (a3 != v56);
LABEL_56:
        if (v57 < v54)
        {
          v43 = v43 & (v51 == a7[v53]);
          a7[v51] = v53;
          v54 = v57;
        }
        ++v53;
        v55 += a3;
        if (v53 == v9)
        {
          v52 += a3;
          if (++v51 == v32)
            goto LABEL_72;
          goto LABEL_42;
        }
      }
    }
    if (a3 <= 0)
    {
      v89 = 0;
      LOBYTE(v43) = 1;
      do
      {
        v43 = v43 & (v89 == *a7);
        a7[v89++] = 0;
      }
      while (v32 != v89);
    }
    else
    {
      v80 = 0;
      v43 = 1;
      v81 = (char *)a1[4];
      do
      {
        v82 = 0;
        v83 = 0x7FFFFFFF;
        v84 = v40;
        do
        {
          v85 = 0;
          v86 = 0;
          do
          {
            v87 = vabdq_u8(*(uint8x16_t *)&v84[v85], *(uint8x16_t *)&v81[v85]);
            v86 += vaddlvq_u16(vqaddq_u16(vmull_u8(*(uint8x8_t *)v87.i8, *(uint8x8_t *)v87.i8), vmull_high_u8(v87, v87)));
            v85 += 16;
          }
          while (v85 < a3);
          if (v86 < v83)
          {
            v43 = v43 & (v80 == a7[v82]);
            a7[v80] = v82;
            v83 = v86;
          }
          ++v82;
          v84 += a3;
        }
        while (v82 != v9);
        v81 += a3;
        ++v80;
      }
      while (v80 != v32);
    }
LABEL_72:
    if (v43)
      break;
    v254 = v36;
    if ((int)v252 >= 1)
      bzero(v28, 8 * v252);
    bzero(v29, v251);
    if (a2[7])
    {
      v91 = v254;
      v92 = *((_DWORD *)a1 + 12);
      if (v254 + 1 >= a2[6])
      {
        v93 = v250;
        v38 = a3 & 0x18;
        if (v92 >= 1)
        {
          v94 = 0;
          do
          {
            v95 = (int)a7[v94];
            ++v29[v95];
            ++v94;
          }
          while (v94 < *((int *)a1 + 12));
        }
        goto LABEL_105;
      }
    }
    else
    {
      v92 = *((_DWORD *)a1 + 12);
      v91 = v254;
    }
    v93 = v250;
    v38 = a3 & 0x18;
    if (v92 >= 1)
    {
      v96 = 0;
      v97 = v41;
      while (1)
      {
        v98 = (int)a7[v96];
        if (a3 >= 1)
          break;
LABEL_84:
        ++v29[v98];
        ++v96;
        v97 = (int8x16_t *)((char *)v97 + a3);
        if (v96 >= *((int *)a1 + 12))
          goto LABEL_105;
      }
      v99 = v98 * a3;
      v100 = (unint64_t)&v28[8 * (int)v98 * a3];
      if (a3 >= 8)
      {
        v102 = v100 >= (unint64_t)v41->u64 + a3 + v96 * a3
            || &v41->i8[v96 * a3] >= &v28[8 * a3 + 8 * v99];
        if (v102)
        {
          if (a3 >= 0x10)
          {
            v110 = a3 & 0xFFFFFFF0;
            v111 = v97;
            v112 = (uint64x2_t *)&v28[8 * v99];
            do
            {
              v113 = *v111++;
              v114 = (uint32x4_t)vqtbl1q_s8(v113, (int8x16_t)xmmword_210BCB930);
              v115 = (uint32x4_t)vqtbl1q_s8(v113, (int8x16_t)xmmword_210BCB920);
              v116 = (uint32x4_t)vqtbl1q_s8(v113, (int8x16_t)xmmword_210BCB910);
              v117 = (uint32x4_t)vqtbl1q_s8(v113, (int8x16_t)xmmword_210BCB900);
              v118 = vaddw_u32(*v112, *(uint32x2_t *)v114.i8);
              v119 = vaddw_u32(v112[2], *(uint32x2_t *)v115.i8);
              v120 = vaddw_u32(v112[4], *(uint32x2_t *)v116.i8);
              v121 = vaddw_u32(v112[6], *(uint32x2_t *)v117.i8);
              v122 = vaddw_high_u32(v112[1], v114);
              v123 = vaddw_high_u32(v112[3], v115);
              v124 = vaddw_high_u32(v112[5], v116);
              v90 = (int8x16_t)vaddw_high_u32(v112[7], v117);
              v112[6] = v121;
              v112[7] = (uint64x2_t)v90;
              v112[4] = v120;
              v112[5] = v124;
              v112[2] = v119;
              v112[3] = v123;
              *v112 = v118;
              v112[1] = v122;
              v112 += 8;
              v110 -= 16;
            }
            while (v110);
            if ((a3 & 0xFFFFFFF0) == (unint64_t)a3)
              goto LABEL_84;
            v103 = a3 & 0xFFFFFFF0;
            v101 = v103;
            if ((a3 & 8) == 0)
              goto LABEL_98;
          }
          else
          {
            v103 = 0;
          }
          v104 = (uint64x2_t *)&v28[8 * v103 + 8 * v99];
          do
          {
            v90.i64[0] = *(uint64_t *)((char *)v97->i64 + v103);
            v105 = (uint32x4_t)vqtbl1q_s8(v90, (int8x16_t)xmmword_210BCB930);
            v106 = (uint32x4_t)vqtbl1q_s8(v90, (int8x16_t)xmmword_210BCB920);
            v107 = vaddw_u32(*v104, *(uint32x2_t *)v105.i8);
            v108 = vaddw_u32(v104[2], *(uint32x2_t *)v106.i8);
            v109 = vaddw_high_u32(v104[1], v105);
            v90 = (int8x16_t)vaddw_high_u32(v104[3], v106);
            v104[2] = v108;
            v104[3] = (uint64x2_t)v90;
            *v104 = v107;
            v104[1] = v109;
            v104 += 4;
            v103 += 8;
          }
          while (v39 != v103);
          v101 = a3 & 0xFFFFFFF8;
          if (v39 == a3)
            goto LABEL_84;
          goto LABEL_98;
        }
        v101 = 0;
      }
      else
      {
        v101 = 0;
      }
      do
      {
LABEL_98:
        *(_QWORD *)(v100 + 8 * v101) += v97->u8[v101];
        ++v101;
      }
      while (a3 != v101);
      goto LABEL_84;
    }
LABEL_105:
    v125 = 0;
    v126 = 0;
    v35 = 0;
    v36 = v91 + 1;
    do
    {
      if (!v29[v126])
        goto LABEL_106;
      ++v35;
      if (a2[7])
      {
        if (a3 < 1 || v36 >= a2[6])
          goto LABEL_106;
      }
      else if (a3 < 1)
      {
        goto LABEL_106;
      }
      v127 = v125;
      v128 = v93;
      do
      {
        v129 = v29[v126];
        if ((v129 & 0x80000000) == 0)
          v130 = v29[v126];
        else
          v130 = v129 + 1;
        *((_BYTE *)*a1 + v127) = (*(_QWORD *)&v28[8 * v127] + (v130 >> 1)) / v129;
        ++v127;
        --v128;
      }
      while (v128);
LABEL_106:
      ++v126;
      v125 += a3;
    }
    while (v126 != v9);
    if (v36 >= a2[6])
      break;
    LODWORD(v32) = *((_DWORD *)a1 + 12);
  }
  while ((int)v32 >= 1);
  v31 = v247;
  if (v35 <= 1)
    goto LABEL_132;
  v131 = v35;
  v255 = (float32x4_t *)a1[1];
  bzero(v255, v251);
  v132 = *((unsigned int *)a1 + 12);
  if (a3 != 64)
  {
    v133 = v131;
    v134 = a6;
    v135 = v255;
    if ((int)v132 < 1)
      goto LABEL_163;
    v149 = 0;
    v150 = (char *)*a1;
    v151 = (uint8x8_t *)a1[4];
    v152 = (uint64_t)*a1 + 16;
    v153 = v151 + 2;
    while (1)
    {
      v157 = (int)a7[v149];
      v158 = &v150[(int)v157 * (uint64_t)a3];
      if ((a3 & 0xF) != 0)
      {
        if (a3 >= 1)
        {
          if (a3 < 8)
          {
            v159 = 0;
            v154 = 0;
            do
            {
LABEL_161:
              v190 = v158[v159] - v151->u8[v159];
              v154 += v190 * v190;
              ++v159;
            }
            while (a3 != v159);
            goto LABEL_141;
          }
          v162 = (int)v157 * (uint64_t)a3;
          if (a3 >= 0x20)
          {
            v164 = 0uLL;
            v165 = (uint8x8_t *)(v152 + v162);
            v166 = 0uLL;
            v167 = a3 & 0xFFFFFFE0;
            v168 = v153;
            v169 = 0uLL;
            v170 = 0uLL;
            v171 = 0uLL;
            v172 = 0uLL;
            v173 = 0uLL;
            v174 = 0uLL;
            do
            {
              v175 = *(uint8x16_t *)v165[-2].i8;
              v176 = *(uint8x16_t *)v168[-2].i8;
              v177 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v175.i8, *(uint8x8_t *)v176.i8);
              v178 = (int16x8_t)vsubl_high_u8(v175, v176);
              v179 = (int16x8_t)vsubl_u8(*v165, *v168);
              v180 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v165->i8, *(uint8x16_t *)v168->i8);
              v170 = vmlal_high_s16(v170, v178, v178);
              v169 = vmlal_s16(v169, *(int16x4_t *)v178.i8, *(int16x4_t *)v178.i8);
              v166 = vmlal_high_s16(v166, v177, v177);
              v164 = vmlal_s16(v164, *(int16x4_t *)v177.i8, *(int16x4_t *)v177.i8);
              v174 = vmlal_high_s16(v174, v180, v180);
              v173 = vmlal_s16(v173, *(int16x4_t *)v180.i8, *(int16x4_t *)v180.i8);
              v172 = vmlal_high_s16(v172, v179, v179);
              v171 = vmlal_s16(v171, *(int16x4_t *)v179.i8, *(int16x4_t *)v179.i8);
              v165 += 4;
              v168 += 4;
              v167 -= 32;
            }
            while (v167);
            v154 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v171, v164), vaddq_s32(v173, v169)), vaddq_s32(vaddq_s32(v172, v166), vaddq_s32(v174, v170))));
            if ((a3 & 0xFFFFFFE0) == (unint64_t)a3)
              goto LABEL_141;
            v163 = a3 & 0xFFFFFFE0;
            v159 = v163;
            if ((a3 & 0x18) == 0)
              goto LABEL_161;
          }
          else
          {
            v154 = 0;
            v163 = 0;
          }
          v181 = 0uLL;
          v182 = (int32x4_t)v154;
          v183 = (uint8x8_t *)&v150[v163 + v162];
          v184 = (uint8x8_t *)((char *)v151 + v163);
          v185 = v163 - (a3 & 0xFFFFFFF8);
          do
          {
            v186 = *v183++;
            v187 = v186;
            v188 = *v184++;
            v189 = (int16x8_t)vsubl_u8(v187, v188);
            v181 = vmlal_high_s16(v181, v189, v189);
            v182 = vmlal_s16(v182, *(int16x4_t *)v189.i8, *(int16x4_t *)v189.i8);
            v185 += 8;
          }
          while (v185);
          v154 = vaddvq_s32(vaddq_s32(v182, v181));
          v159 = a3 & 0xFFFFFFF8;
          if (v159 == a3)
            goto LABEL_141;
          goto LABEL_161;
        }
      }
      else if (a3 >= 1)
      {
        v160 = 0;
        v154 = 0;
        do
        {
          v161 = vabdq_u8(*(uint8x16_t *)&v158[v160], *(uint8x16_t *)v151[v160 / 8].i8);
          v154 += vaddlvq_u16(vqaddq_u16(vmull_u8(*(uint8x8_t *)v161.i8, *(uint8x8_t *)v161.i8), vmull_high_u8(v161, v161)));
          v160 += 16;
        }
        while (v160 < a3);
        goto LABEL_141;
      }
      v154 = 0;
LABEL_141:
      v155 = (float)v154;
      v156 = v157;
      if (v255->f32[v156] >= (float)v154)
        v155 = v255->f32[v156];
      v255->f32[v156] = v155;
      ++v149;
      v153 = (uint8x8_t *)((char *)v153 + a3);
      v151 = (uint8x8_t *)((char *)v151 + a3);
      if (v149 == v132)
        goto LABEL_163;
    }
  }
  v133 = v131;
  v134 = a6;
  v135 = v255;
  if ((int)v132 >= 1)
  {
    v136 = 0;
    v137 = (char *)*a1;
    v138 = (char *)a1[4];
    do
    {
      v139 = 0;
      v140 = 0;
      v141 = (int)a7[v136];
      do
      {
        v142 = vabdq_u8(*(uint8x16_t *)&v137[64 * v141 + v139], *(uint8x16_t *)&v138[v139]);
        v140 += vaddlvq_u16(vqaddq_u16(vmull_u8(*(uint8x8_t *)v142.i8, *(uint8x8_t *)v142.i8), vmull_high_u8(v142, v142)));
        v102 = v139 >= 0x30;
        v139 += 16;
      }
      while (!v102);
      v143 = (float)v140;
      if (v255->f32[v141] >= (float)v140)
        v143 = v255->f32[v141];
      v255->f32[v141] = v143;
      ++v136;
      v138 += 64;
    }
    while (v136 != v132);
  }
LABEL_163:
  if (v9 < 8)
  {
    v191 = 0;
    goto LABEL_168;
  }
  v191 = v9 & 0x7FFFFFF8;
  v192 = v135 + 1;
  v193 = v9 & 0xFFFFFFF8;
  do
  {
    v194 = vsqrtq_f32(*v192);
    v192[-1] = vsqrtq_f32(v192[-1]);
    *v192 = v194;
    v192 += 2;
    v193 -= 8;
  }
  while (v193);
  if (v191 != v9)
  {
LABEL_168:
    v195 = v9 - v191;
    v196 = &v135->f32[v191];
    do
    {
      *v196 = sqrtf(*v196);
      ++v196;
      --v195;
    }
    while (v195);
  }
  *(_DWORD *)v247 = 0;
  v197 = (char *)a1[3];
  v198 = *v29;
  *((_OWORD *)v197 + 2) = *((_OWORD *)a1 + 2);
  *((_DWORD *)v197 + 12) = v198;
  v199 = v197 + 104;
  if (v247 >= &v197[56 * v9 - 4] || v199 >= &v247[4 * v9])
  {
    v201 = v247 + 4;
    LODWORD(v202) = *(_DWORD *)v247;
    v203 = v9 - 1;
    v204 = v29 + 1;
    do
    {
      v202 = *(v204 - 1) + (uint64_t)(int)v202;
      *v201++ = v202;
      v205 = (uint64_t)a1[5] + 4 * v202;
      v206 = *v204++;
      *((_QWORD *)v199 - 2) = (char *)a1[4] + v202 * a3;
      *((_QWORD *)v199 - 1) = v205;
      *(_DWORD *)v199 = v206;
      v199 += 56;
      --v203;
    }
    while (v203);
  }
  else
  {
    v207 = v9 - 1;
    v208 = v247 + 4;
    v209 = v29 + 1;
    do
    {
      v210 = *(v209 - 1) + (uint64_t)(int)*(v208 - 1);
      *v208++ = v210;
      v211 = (uint64_t)a1[4] + v210 * a3;
      v212 = (uint64_t)a1[5] + 4 * v210;
      v213 = *v209++;
      *((_QWORD *)v199 - 2) = v211;
      *((_QWORD *)v199 - 1) = v212;
      *(_DWORD *)v199 = v213;
      v199 += 56;
      --v207;
    }
    while (v207);
  }
  v214 = *((_DWORD *)a1 + 12);
  if (v214 * a3 >= 1)
  {
    v215 = 0;
    do
    {
      a5[v215] = *((_BYTE *)a1[4] + v215);
      ++v215;
      v214 = *((_DWORD *)a1 + 12);
    }
    while (v215 < v214 * a3);
  }
  if (v214 >= 1)
  {
    v216 = 0;
    v217 = (char *)a1[5];
    do
    {
      *(_DWORD *)(v134 + 4 * v216) = *(_DWORD *)&v217[4 * v216];
      ++v216;
      v218 = *((int *)a1 + 12);
    }
    while (v216 < v218);
    if ((int)v218 >= 1)
    {
      v219 = 0;
      v220 = a5;
      do
      {
        v221 = 4 * (int)a7[v219];
        v222 = *(int *)&v247[v221];
        *(_DWORD *)&v247[v221] = v222 + 1;
        if (a3 >= 1)
        {
          v223 = (int)v222 * a3;
          v224 = v220;
          v225 = a3;
          do
          {
            v226 = *v224++;
            *((_BYTE *)a1[4] + v223++) = v226;
            --v225;
          }
          while (v225);
          v217 = (char *)a1[5];
        }
        *(_DWORD *)&v217[4 * v222] = *(_DWORD *)(v134 + 4 * v219++);
        v220 += a3;
      }
      while (v219 < *((int *)a1 + 12));
    }
  }
  if ((int)v9 < v133)
  {
    v227 = 0;
    v228 = 0;
    v229 = 48;
    do
    {
      v230 = *a1;
      if (*(_DWORD *)((char *)a1[3] + v229))
        v231 = v230 == 0;
      else
        v231 = 1;
      if (!v231)
        v230[v228++] = v230[v227];
      ++v227;
      v229 += 56;
    }
    while (v9 != v227);
    v232 = 0;
    v233 = (char *)a1[1];
    v234 = (int *)((char *)a1[3] + 48);
    v235 = v233;
    v236 = v9;
    do
    {
      v237 = *v234;
      v234 += 14;
      if (v237)
        v238 = v233 == 0;
      else
        v238 = 1;
      if (!v238)
        *(_DWORD *)&v233[4 * v232++] = *(_DWORD *)v235;
      v235 += 4;
      --v236;
    }
    while (v236);
    v239 = 0;
    v144 = 0;
    do
    {
      v240 = (char *)a1[3];
      v241 = &v240[v239];
      if (v240)
        v242 = *(_DWORD *)&v240[v239 + 48] == 0;
      else
        v242 = 1;
      if (!v242)
      {
        v243 = &v240[56 * v144];
        v244 = *(_OWORD *)v241;
        v245 = *((_OWORD *)v241 + 1);
        v246 = *((_OWORD *)v241 + 2);
        *((_QWORD *)v243 + 6) = *((_QWORD *)v241 + 6);
        *((_OWORD *)v243 + 1) = v245;
        *((_OWORD *)v243 + 2) = v246;
        *(_OWORD *)v243 = v244;
        ++v144;
      }
      v239 += 56;
      --v9;
    }
    while (v9);
LABEL_133:
    *((_DWORD *)a1 + 4) = v144;
    LODWORD(v9) = v144;
  }
  free(v28);
  free(v29);
  free(v31);
  v145 = a5;
  if ((int)v9 >= 1)
  {
    v146 = 0;
    v147 = 56 * v9;
    do
    {
      v148 = v145;
      sss_split_km();
      v145 = v148;
      v146 += 56;
    }
    while (v147 != v146);
  }
}

void sss_node_free(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(int *)(a1 + 16) >= 1)
  {
    v2 = 0;
    v3 = 0;
    do
    {
      sss_node_free(*(_QWORD *)(a1 + 24) + v2);
      ++v3;
      v2 += 56;
    }
    while (v3 < *(int *)(a1 + 16));
  }
  free(*(void **)a1);
  free(*(void **)(a1 + 8));
  free(*(void **)(a1 + 24));
}

uint64_t sss_knn(uint64_t a1, uint64_t a2, float a3, uint64_t a4, void *a5, uint64_t a6, int a7)
{
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  float v16;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (a7 < 17)
  {
    v12 = v18;
    if (a7 < 1)
      goto LABEL_6;
    v13 = a7;
    v12 = v18;
  }
  else
  {
    v12 = malloc_type_malloc(4 * (2 * a7), 0x100004052888210uLL);
    v13 = a7;
  }
  memset(a5, 255, 4 * v13);
LABEL_6:
  if (*(int *)(a1 + 256) >= 1)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = sss_nn_node();
      if (v16 >= a3)
        ++v15;
      else
        v15 = 0;
      if (v15 > *(_DWORD *)(a2 + 52))
        break;
      ++v14;
      a3 = v16;
    }
    while (v14 < *(int *)(a1 + 256));
  }
  if (a7 >= 17)
    free(v12);
  return 0;
}

float sss_nn_node()
{
  uint64_t v0;
  uint8x8_t *v1;
  uint64_t v2;
  int v3;
  _DWORD *v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint8x8_t *v11;
  uint64_t v12;
  uint8x8_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  float v20;
  unint64_t v21;
  int v22;
  uint8x16_t v23;
  BOOL v24;
  float v25;
  int v26;
  int *v27;
  int *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  unsigned int v32;
  uint8x8_t *v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint8x16_t v37;
  float v38;
  uint64_t v39;
  int v40;
  char *v41;
  float *v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  float *v46;
  int *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  _DWORD *v54;
  uint64_t i;
  uint64_t v56;
  float v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  float v64;
  float v65;
  unint64_t v66;
  float v67;
  float v68;
  float v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  float v76;
  float v77;
  uint64_t v78;
  float v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  float v88;
  float v89;
  float v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t j;
  float v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  float v103;
  uint64_t v104;
  int v105;
  char *v107;
  _DWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint8x8_t *v113;
  int v114;
  float v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int32x4_t v119;
  uint64_t v120;
  int32x4_t v121;
  uint8x8_t *v122;
  uint8x8_t *v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  uint8x16_t v130;
  uint8x16_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int32x4_t v136;
  int32x4_t v137;
  uint8x8_t *v138;
  uint8x8_t *v139;
  uint64_t v140;
  uint8x8_t v141;
  uint8x8_t v142;
  uint8x8_t v143;
  int16x8_t v144;
  int v145;
  float v146;
  uint64_t v147;
  uint64_t v148;
  uint8x8_t *v149;
  uint64_t v150;
  int v151;
  float v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint8x16_t v156;
  uint64_t v157;
  int32x4_t v158;
  uint64_t v159;
  int32x4_t v160;
  uint8x8_t *v161;
  uint8x8_t *v162;
  int32x4_t v163;
  int32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int32x4_t v168;
  uint8x16_t v169;
  uint8x16_t v170;
  int16x8_t v171;
  int16x8_t v172;
  int16x8_t v173;
  int16x8_t v174;
  int32x4_t v175;
  int32x4_t v176;
  uint8x8_t *v177;
  uint8x8_t *v178;
  uint64_t v179;
  uint8x8_t v180;
  uint8x8_t v181;
  uint8x8_t v182;
  int16x8_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  float v188;
  unint64_t v189;
  int v190;
  uint8x16_t v191;
  float v192;
  uint64_t v193;
  float v194;
  float v195;
  int v196;
  int v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  unint64_t v202;
  int v203;
  uint8x16_t v204;
  int v205;
  uint64_t v206;
  int *v207;
  uint64_t v208;
  int *v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  uint8x8_t *v221;
  uint64_t v222;
  uint8x8_t *v223;
  uint64_t v224;
  int v225;
  unint64_t v226;
  uint8x16_t v227;
  uint64_t v228;
  int32x4_t v229;
  uint64_t v230;
  int32x4_t v231;
  uint8x8_t *v232;
  uint8x8_t *v233;
  int32x4_t v234;
  int32x4_t v235;
  int32x4_t v236;
  int32x4_t v237;
  int32x4_t v238;
  int32x4_t v239;
  uint8x16_t v240;
  uint8x16_t v241;
  int16x8_t v242;
  int16x8_t v243;
  int16x8_t v244;
  int16x8_t v245;
  int32x4_t v246;
  int32x4_t v247;
  uint8x8_t *v248;
  uint8x8_t *v249;
  uint64_t v250;
  uint8x8_t v251;
  uint8x8_t v252;
  uint8x8_t v253;
  int16x8_t v254;
  int v255;
  int v256;
  uint64_t v257;
  int *v258;
  uint64_t v259;
  int *v260;
  int v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  uint64_t v266;
  int v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  float v271;
  uint64_t v273;
  int *v274;
  uint64_t v275;
  uint64_t v276;
  float v277;
  float v278;
  uint64_t v279;
  uint64_t v280;
  int v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  _DWORD *v285;
  uint8x8_t *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  int v290;
  unint64_t v291;
  uint64_t v292;
  uint8x16_t v293;
  uint64_t v294;
  int32x4_t v295;
  int32x4_t v296;
  uint8x8_t *v297;
  uint64_t v298;
  uint8x8_t *v299;
  int32x4_t v300;
  int32x4_t v301;
  int32x4_t v302;
  int32x4_t v303;
  int32x4_t v304;
  int32x4_t v305;
  uint8x16_t v306;
  uint8x16_t v307;
  int16x8_t v308;
  int16x8_t v309;
  int16x8_t v310;
  int16x8_t v311;
  int32x4_t v312;
  int32x4_t v313;
  uint8x8_t *v314;
  uint8x8_t *v315;
  uint64_t v316;
  uint8x8_t v317;
  uint8x8_t v318;
  uint8x8_t v319;
  int16x8_t v320;
  uint64_t v321;
  uint8x8_t *v322;
  uint8x8_t *v323;
  int v324;
  int v325;
  int v326;
  float v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  int v331;
  float *v332;
  unsigned int v333;
  uint64_t v334;
  int v335;
  _DWORD *v336;
  _QWORD v337[2189];

  v0 = MEMORY[0x24BDAC7A8]();
  v8 = v7;
  v9 = v6;
  v10 = v2;
  v11 = v1;
  v12 = v0;
  v337[2187] = *MEMORY[0x24BDAC8D0];
  v13 = *(uint8x8_t **)v0;
  if (!*(_QWORD *)v0)
  {
LABEL_163:
    v195 = 46340.0;
    if ((float)(v9 * v9) < 2147500000.0)
      v195 = v9;
    v196 = (int)v195 * (int)v195;
    v197 = v4[1];
    ++*v4;
    v198 = *(_DWORD *)(v12 + 48);
    v4[1] = v197 + v198;
    if ((_DWORD)v10 == 64)
    {
      if (v198 >= 1)
      {
        v199 = 0;
        v200 = *(_QWORD *)(v12 + 32);
        v201 = (int)v195 * (int)v195;
        do
        {
          v202 = 0;
          v203 = 0;
          do
          {
            v204 = vabdq_u8(*(uint8x16_t *)(v200 + v202 * 8), *(uint8x16_t *)v11[v202].i8);
            v203 += vaddlvq_u16(vqaddq_u16(vmull_u8(*(uint8x8_t *)v204.i8, *(uint8x8_t *)v204.i8), vmull_high_u8(v204, v204)));
            v24 = v202 >= 6;
            v202 += 2;
          }
          while (!v24);
          if (v203 <= v201)
          {
            v205 = *(_DWORD *)(*(_QWORD *)(v12 + 40) + 4 * v199);
            v206 = *(unsigned int *)(v8 + 20);
            v207 = *(int **)v8;
            v208 = v206;
            v209 = *(int **)v8;
            if ((int)v206 < 1)
            {
LABEL_176:
              if ((int)v206 < *(_DWORD *)(v8 + 16))
                LODWORD(v206) = v206 + 1;
              *(_DWORD *)(v8 + 20) = v206;
              v207[(int)v206 - 1] = v205;
              v211 = *(_QWORD *)(v8 + 8);
              *(_DWORD *)(v211 + 4 * *(int *)(v8 + 20) - 4) = v203;
              v212 = *(unsigned int *)(v8 + 20);
              if ((int)v212 > 1)
              {
                do
                {
                  v213 = v212 - 1;
                  v214 = *(_DWORD *)(v211 + 4 * (v212 - 1));
                  v215 = (v212 - 2);
                  v216 = *(_DWORD *)(v211 + 4 * v215);
                  if (v214 >= v216)
                    break;
                  v217 = v213;
                  *(_DWORD *)(v211 + v217 * 4) = v216;
                  v218 = v215;
                  *(_DWORD *)(v211 + v218 * 4) = v214;
                  v219 = v207[v217];
                  v207[v217] = v207[v218];
                  v207[v218] = v219;
                  v212 = v213;
                }
                while ((unint64_t)(v213 + 1) > 2);
                LODWORD(v212) = *(_DWORD *)(v8 + 20);
              }
              if ((_DWORD)v212 == *(_DWORD *)(v8 + 16))
                v201 = *(_DWORD *)(v211 + 4 * ((int)v212 - 1));
            }
            else
            {
              while (1)
              {
                v210 = *v209++;
                if (v210 == v205)
                  break;
                if (!--v208)
                  goto LABEL_176;
              }
            }
          }
          ++v199;
          v200 += 64;
        }
        while (v199 < *(int *)(v12 + 48));
        goto LABEL_219;
      }
LABEL_218:
      v201 = (int)v195 * (int)v195;
LABEL_219:
      v271 = sqrtf((float)v201);
      if (v201 < v196)
        return v271;
      return v9;
    }
    if (v198 < 1)
      goto LABEL_218;
    v220 = 0;
    v221 = *(uint8x8_t **)(v12 + 32);
    v222 = v10 & 0xFFFFFFF8;
    v223 = v221 + 2;
    v201 = (int)v195 * (int)v195;
    while (1)
    {
      if ((v10 & 0xF) != 0)
      {
        if ((int)v10 >= 1)
        {
          if (v10 < 8)
          {
            v224 = 0;
            v225 = 0;
            do
            {
LABEL_205:
              v255 = v221->u8[v224] - v11->u8[v224];
              v225 += v255 * v255;
              ++v224;
            }
            while (v10 != v224);
            goto LABEL_206;
          }
          if (v10 >= 0x20)
          {
            v229 = 0uLL;
            v230 = v10 & 0xFFFFFFE0;
            v231 = 0uLL;
            v232 = v11 + 2;
            v233 = v223;
            v234 = 0uLL;
            v235 = 0uLL;
            v236 = 0uLL;
            v237 = 0uLL;
            v238 = 0uLL;
            v239 = 0uLL;
            do
            {
              v240 = *(uint8x16_t *)v233[-2].i8;
              v241 = *(uint8x16_t *)v232[-2].i8;
              v242 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v240.i8, *(uint8x8_t *)v241.i8);
              v243 = (int16x8_t)vsubl_high_u8(v240, v241);
              v244 = (int16x8_t)vsubl_u8(*v233, *v232);
              v245 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v233->i8, *(uint8x16_t *)v232->i8);
              v235 = vmlal_high_s16(v235, v243, v243);
              v234 = vmlal_s16(v234, *(int16x4_t *)v243.i8, *(int16x4_t *)v243.i8);
              v231 = vmlal_high_s16(v231, v242, v242);
              v229 = vmlal_s16(v229, *(int16x4_t *)v242.i8, *(int16x4_t *)v242.i8);
              v239 = vmlal_high_s16(v239, v245, v245);
              v238 = vmlal_s16(v238, *(int16x4_t *)v245.i8, *(int16x4_t *)v245.i8);
              v237 = vmlal_high_s16(v237, v244, v244);
              v236 = vmlal_s16(v236, *(int16x4_t *)v244.i8, *(int16x4_t *)v244.i8);
              v233 += 4;
              v232 += 4;
              v230 -= 32;
            }
            while (v230);
            v225 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v236, v229), vaddq_s32(v238, v234)), vaddq_s32(vaddq_s32(v237, v231), vaddq_s32(v239, v235))));
            if ((v10 & 0xFFFFFFE0) == v10)
              goto LABEL_206;
            v228 = v10 & 0xFFFFFFE0;
            v224 = v228;
            if ((v10 & 0x18) == 0)
              goto LABEL_205;
          }
          else
          {
            v225 = 0;
            v228 = 0;
          }
          v246 = 0uLL;
          v247 = (int32x4_t)v225;
          v248 = (uint8x8_t *)((char *)v221 + v228);
          v249 = (uint8x8_t *)((char *)v11 + v228);
          v250 = v228 - v222;
          do
          {
            v251 = *v248++;
            v252 = v251;
            v253 = *v249++;
            v254 = (int16x8_t)vsubl_u8(v252, v253);
            v246 = vmlal_high_s16(v246, v254, v254);
            v247 = vmlal_s16(v247, *(int16x4_t *)v254.i8, *(int16x4_t *)v254.i8);
            v250 += 8;
          }
          while (v250);
          v225 = vaddvq_s32(vaddq_s32(v247, v246));
          v224 = v10 & 0xFFFFFFF8;
          if (v222 == v10)
            goto LABEL_206;
          goto LABEL_205;
        }
      }
      else if ((int)v10 >= 1)
      {
        v226 = 0;
        v225 = 0;
        do
        {
          v227 = vabdq_u8(*(uint8x16_t *)v221[v226 / 8].i8, *(uint8x16_t *)v11[v226 / 8].i8);
          v225 += vaddlvq_u16(vqaddq_u16(vmull_u8(*(uint8x8_t *)v227.i8, *(uint8x8_t *)v227.i8), vmull_high_u8(v227, v227)));
          v226 += 16;
        }
        while (v226 < v10);
        goto LABEL_206;
      }
      v225 = 0;
LABEL_206:
      if (v225 <= v201)
      {
        v256 = *(_DWORD *)(*(_QWORD *)(v12 + 40) + 4 * v220);
        v257 = *(unsigned int *)(v8 + 20);
        v258 = *(int **)v8;
        v259 = v257;
        v260 = *(int **)v8;
        if ((int)v257 < 1)
        {
LABEL_210:
          if ((int)v257 < *(_DWORD *)(v8 + 16))
            LODWORD(v257) = v257 + 1;
          *(_DWORD *)(v8 + 20) = v257;
          v258[(int)v257 - 1] = v256;
          v262 = *(_QWORD *)(v8 + 8);
          *(_DWORD *)(v262 + 4 * *(int *)(v8 + 20) - 4) = v225;
          v263 = *(unsigned int *)(v8 + 20);
          if ((int)v263 > 1)
          {
            do
            {
              v264 = v263 - 1;
              v265 = *(_DWORD *)(v262 + 4 * (v263 - 1));
              v266 = (v263 - 2);
              v267 = *(_DWORD *)(v262 + 4 * v266);
              if (v265 >= v267)
                break;
              v268 = v264;
              *(_DWORD *)(v262 + v268 * 4) = v267;
              v269 = v266;
              *(_DWORD *)(v262 + v269 * 4) = v265;
              v270 = v258[v268];
              v258[v268] = v258[v269];
              v258[v269] = v270;
              v263 = v264;
            }
            while ((unint64_t)(v264 + 1) > 2);
            LODWORD(v263) = *(_DWORD *)(v8 + 20);
          }
          if ((_DWORD)v263 == *(_DWORD *)(v8 + 16))
            v201 = *(_DWORD *)(v262 + 4 * ((int)v263 - 1));
        }
        else
        {
          while (1)
          {
            v261 = *v260++;
            if (v261 == v256)
              break;
            if (!--v259)
              goto LABEL_210;
          }
        }
      }
      ++v220;
      v223 = (uint8x8_t *)((char *)v223 + (int)v10);
      v221 = (uint8x8_t *)((char *)v221 + (int)v10);
      if (v220 >= *(int *)(v12 + 48))
        goto LABEL_219;
    }
  }
  v14 = v5;
  v15 = v2 & 0xF;
  v16 = v2;
  if (!*(_DWORD *)(v5 + 32))
  {
    v26 = v3;
    v336 = v4;
    v27 = (int *)malloc_type_malloc(8 * *(int *)(v0 + 16), 0x14A0D62uLL);
    v28 = v27;
    v29 = *(int *)(v12 + 16);
    v30 = &v27[v29];
    if ((_DWORD)v10 == 64)
    {
      if ((int)v29 >= 1)
      {
        v31 = 0;
        v32 = 0;
        v33 = *(uint8x8_t **)v12;
        v34 = *(_QWORD *)(v12 + 8);
        do
        {
          v35 = 0;
          v36 = 0;
          do
          {
            v37 = vabdq_u8(*(uint8x16_t *)v33[v35].i8, *(uint8x16_t *)v11[v35].i8);
            v36 += vaddlvq_u16(vqaddq_u16(vmull_u8(*(uint8x8_t *)v37.i8, *(uint8x8_t *)v37.i8), vmull_high_u8(v37, v37)));
            v24 = v35 >= 6;
            v35 += 2;
          }
          while (!v24);
          v38 = sqrtf((float)v36);
          v39 = v32;
          *(float *)&v30[v39] = v38;
          v27[v39] = v31;
          if ((float)(v38 - *(float *)(v34 + 4 * v31)) < v9)
            ++v32;
          ++v31;
          v33 += 8;
          v40 = v32;
        }
        while (v31 < *(int *)(v12 + 16));
LABEL_25:
        if (v40)
        {
          v335 = v15;
          v334 = v8;
          if (v40 > 16)
          {
            v331 = v26;
            v332 = (float *)v30;
            v333 = v40;
            v41 = (char *)malloc_type_malloc(0x200uLL, 0x356C0F7AuLL);
            v42 = v332;
            v43 = 0;
            v44 = 1;
            v45 = 32;
            v46 = v332;
            v47 = v28;
            v48 = v333;
            while (1)
            {
              v49 = v43;
              while (1)
              {
                if (!v44)
                {
                  --v49;
                  v50 = (uint64_t *)&v41[16 * v49];
                  v48 = v50[1];
                  v51 = *v50;
                  v46 = &v42[v51];
                  v47 = &v28[v51];
                }
                if ((uint64_t)v48 > 15)
                  break;
                if ((uint64_t)v48 > 1)
                {
                  v52 = 0;
                  v53 = v47 + 1;
                  v54 = v46 + 1;
                  for (i = 1; i != v48; ++i)
                  {
                    v56 = v52;
                    do
                    {
                      v57 = *(float *)&v54[v56];
                      v58 = v46[v56];
                      if ((float)(v57 - v58) >= 0.0)
                        break;
                      v59 = v56;
                      *(float *)&v54[v59] = v58;
                      v60 = v56;
                      v46[v60] = v57;
                      v61 = v53[v56];
                      v53[v59] = v47[v60];
                      v47[v60] = v61;
                      v62 = v56-- + 1;
                    }
                    while (v62 > 1);
                    ++v52;
                  }
                }
                v44 = 0;
                v48 = 0;
                if (v49 < 1)
                  goto LABEL_96;
              }
              if (v48 > 0x27)
                break;
              v63 = v48 >> 1;
              v64 = *v46;
              v65 = v46[v48 >> 1];
              v66 = v48 - 1;
              v67 = v46[v48 - 1];
              v68 = *v46 - v65;
              v69 = v65 - v67;
              if (v69 >= 0.0)
                v70 = v48 >> 1;
              else
                v70 = v48 - 1;
              if ((float)(*v46 - v67) >= 0.0)
                v66 = 0;
              else
                v70 = 0;
              if (v69 >= 0.0)
                v63 = v66;
              if (v68 >= 0.0)
                v63 = v70;
LABEL_84:
              v91 = 0;
              v92 = 0;
              v93 = v63;
              *v46 = v46[v93];
              v46[v93] = v64;
              v94 = *v47;
              *v47 = v47[v93];
              v47[v93] = v94;
              for (j = 1; j != v48; ++j)
              {
                v96 = v46[j];
                if ((float)(v96 - *v46) <= 0.0)
                {
                  v97 = ++v91;
                  v98 = j;
                  v46[v98] = v46[v91];
                  v46[v97] = v96;
                  v99 = v47[j];
                  v47[v98] = v47[v91];
                  v47[v97] = v99;
                  if ((float)(v46[j] - *v46) == 0.0)
                  {
                    v100 = ++v92;
                    v46[v91] = v46[v92];
                    v46[v100] = v96;
                    v47[v91] = v47[v92];
                    v47[v100] = v99;
                  }
                }
              }
              v101 = 4 * v91 - 4 * v92;
              v102 = v92;
              do
              {
                v103 = *(float *)((char *)v46 + v101);
                v104 = v102;
                *(float *)((char *)v46 + v101) = v46[v102];
                v46[v104] = v103;
                v105 = *(int *)((char *)v47 + v101);
                *(int *)((char *)v47 + v101) = v47[v102];
                v47[v104] = v105;
                v101 += 4;
              }
              while (v102-- > 0);
              v43 = v49 + 1;
              if (v49 + 1 >= v45)
              {
                v328 = 2 * v45;
                v330 = v91;
                v329 = v92;
                v41 = (char *)malloc_type_realloc(v41, 32 * v45, 0x60FA9D2CuLL);
                v43 = v49 + 1;
                v92 = v329;
                v91 = v330;
                v42 = v332;
                v45 = v328;
              }
              v107 = &v41[16 * v49];
              *(_QWORD *)v107 = v91 + v46 - v42 + 1;
              *((_QWORD *)v107 + 1) = v48 + ~v91;
              v48 = v91 - v92;
              v44 = v91 != v92;
              if (v49 < 0 && !v48)
              {
LABEL_96:
                free(v41);
                v40 = v333;
                v8 = v334;
                v108 = v336;
                v26 = v331;
                goto LABEL_229;
              }
            }
            v71 = 0;
            v72 = 0;
            if (v48 <= 0x7D0)
              v73 = 8;
            else
              v73 = 26;
            if (v48 <= 0x7D0)
              v74 = 3;
            else
              v74 = 9;
            while (1)
            {
              v75 = (uint64_t)(v48 - 1 + v71) / v73;
              v76 = v46[v71 / v73];
              v77 = v46[v75];
              v78 = (uint64_t)(2 * v48 - 2 + v71) / v73;
              v79 = v46[v78];
              if ((float)(v76 - v77) >= 0.0)
              {
                if ((float)(v76 - v79) < 0.0)
                  goto LABEL_65;
                if ((float)(v77 - v79) < 0.0)
                {
LABEL_67:
                  v337[v72] = v78;
                  goto LABEL_59;
                }
              }
              else if ((float)(v77 - v79) >= 0.0)
              {
                if ((float)(v76 - v79) < 0.0)
                  goto LABEL_67;
LABEL_65:
                v337[v72] = v71 / v73;
                goto LABEL_59;
              }
              v337[v72] = v75;
LABEL_59:
              ++v72;
              v71 += 3 * v48 - 3;
              if (v74 == v72)
              {
                while (1)
                {
                  v80 = 0;
                  v81 = 0;
                  v82 = v74;
                  v74 /= 3uLL;
                  if (v74 <= 1)
                    v83 = 1;
                  else
                    v83 = v74;
                  v84 = 8 * v83;
                  do
                  {
                    v85 = v337[v80];
                    v86 = v337[v80 + 1];
                    v87 = v337[v80 + 2];
                    v88 = v46[v85];
                    v89 = v46[v86];
                    v90 = v46[v87];
                    if ((float)(v88 - v89) >= 0.0)
                    {
                      if ((float)(v88 - v90) < 0.0)
                        goto LABEL_80;
                      if ((float)(v89 - v90) >= 0.0)
                      {
LABEL_73:
                        v337[v81 / 8] = v86;
                        goto LABEL_74;
                      }
                    }
                    else
                    {
                      if ((float)(v89 - v90) < 0.0)
                        goto LABEL_73;
                      if ((float)(v88 - v90) >= 0.0)
                      {
LABEL_80:
                        v337[v81 / 8] = v85;
                        goto LABEL_74;
                      }
                    }
                    v337[v81 / 8] = v87;
LABEL_74:
                    v81 += 8;
                    v80 += 3;
                  }
                  while (v84 != v81);
                  if (v82 < 9)
                  {
                    v63 = v337[0];
                    v64 = *v46;
                    goto LABEL_84;
                  }
                }
              }
            }
          }
          v108 = v336;
          if (v40 >= 2)
          {
            v273 = 1;
            v274 = &v28[v29];
            do
            {
              v275 = v273;
              do
              {
                v276 = v275 - 1;
                v277 = *(float *)&v274[v275];
                v278 = *(float *)&v30[(v275 - 1)];
                if ((float)(v277 - v278) >= 0.0)
                  break;
                v279 = v275;
                *(float *)&v274[v279] = v278;
                v280 = v276;
                *(float *)&v30[v280] = v277;
                v281 = v28[v279];
                v28[v279] = v28[v280];
                v28[v280] = v281;
                v275 = v276;
              }
              while (v276 + 1 > 1);
              ++v273;
            }
            while (v273 != v40);
          }
LABEL_229:
          v282 = (int)(float)(*(float *)(v14 + 36) * (float)v40);
          v283 = (v26 + 1);
          v9 = sss_nn_node(*(_QWORD *)(v12 + 24) + 56 * *v28, v11, v10, v8, v283, v108, v14, v9);
          if ((int)v282 >= 2)
          {
            v284 = 1;
            v285 = v336;
            do
            {
              if (*v285 >= *(_DWORD *)(v14 + 48) || v285[1] >= *(_DWORD *)(v14 + 44))
                break;
              v286 = *(uint8x8_t **)v12;
              v287 = v28[v284];
              if (v335)
              {
                if ((int)v10 >= 1)
                {
                  v288 = (int)v287 * (uint64_t)(int)v10;
                  if (v10 < 8)
                  {
                    v289 = 0;
                    v290 = 0;
LABEL_252:
                    v321 = v10 - v289;
                    v322 = (uint8x8_t *)((char *)v11 + v289);
                    v323 = (uint8x8_t *)((char *)v286 + v289 + v288);
                    do
                    {
                      v325 = v323->u8[0];
                      v323 = (uint8x8_t *)((char *)v323 + 1);
                      v324 = v325;
                      v326 = v322->u8[0];
                      v322 = (uint8x8_t *)((char *)v322 + 1);
                      v290 += (v324 - v326) * (v324 - v326);
                      --v321;
                    }
                    while (v321);
                    goto LABEL_254;
                  }
                  if (v10 >= 0x20)
                  {
                    v295 = 0uLL;
                    v296 = 0uLL;
                    v297 = (uint8x8_t *)((char *)v286 + v288 + 16);
                    v298 = v16 & 0xFFFFFFE0;
                    v299 = v11 + 2;
                    v300 = 0uLL;
                    v301 = 0uLL;
                    v302 = 0uLL;
                    v303 = 0uLL;
                    v304 = 0uLL;
                    v305 = 0uLL;
                    do
                    {
                      v306 = *(uint8x16_t *)v297[-2].i8;
                      v307 = *(uint8x16_t *)v299[-2].i8;
                      v308 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v306.i8, *(uint8x8_t *)v307.i8);
                      v309 = (int16x8_t)vsubl_high_u8(v306, v307);
                      v310 = (int16x8_t)vsubl_u8(*v297, *v299);
                      v311 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v297->i8, *(uint8x16_t *)v299->i8);
                      v301 = vmlal_high_s16(v301, v309, v309);
                      v300 = vmlal_s16(v300, *(int16x4_t *)v309.i8, *(int16x4_t *)v309.i8);
                      v296 = vmlal_high_s16(v296, v308, v308);
                      v295 = vmlal_s16(v295, *(int16x4_t *)v308.i8, *(int16x4_t *)v308.i8);
                      v305 = vmlal_high_s16(v305, v311, v311);
                      v304 = vmlal_s16(v304, *(int16x4_t *)v311.i8, *(int16x4_t *)v311.i8);
                      v303 = vmlal_high_s16(v303, v310, v310);
                      v302 = vmlal_s16(v302, *(int16x4_t *)v310.i8, *(int16x4_t *)v310.i8);
                      v297 += 4;
                      v299 += 4;
                      v298 -= 32;
                    }
                    while (v298);
                    v290 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v302, v295), vaddq_s32(v304, v300)), vaddq_s32(vaddq_s32(v303, v296), vaddq_s32(v305, v301))));
                    if ((v16 & 0xFFFFFFE0) == (unint64_t)v10)
                      goto LABEL_254;
                    v294 = v16 & 0xFFFFFFE0;
                    v289 = v294;
                    if ((v16 & 0x18) == 0)
                      goto LABEL_252;
                  }
                  else
                  {
                    v290 = 0;
                    v294 = 0;
                  }
                  v312 = 0uLL;
                  v313 = (int32x4_t)v290;
                  v314 = (uint8x8_t *)((char *)v286 + v294 + v288);
                  v315 = (uint8x8_t *)((char *)v11 + v294);
                  v316 = v294 - (v16 & 0xFFFFFFF8);
                  do
                  {
                    v317 = *v314++;
                    v318 = v317;
                    v319 = *v315++;
                    v320 = (int16x8_t)vsubl_u8(v318, v319);
                    v312 = vmlal_high_s16(v312, v320, v320);
                    v313 = vmlal_s16(v313, *(int16x4_t *)v320.i8, *(int16x4_t *)v320.i8);
                    v316 += 8;
                  }
                  while (v316);
                  v290 = vaddvq_s32(vaddq_s32(v313, v312));
                  v289 = v16 & 0xFFFFFFF8;
                  if (v289 == v10)
                    goto LABEL_254;
                  goto LABEL_252;
                }
              }
              else if ((int)v10 >= 1)
              {
                v291 = 0;
                v290 = 0;
                v292 = (uint64_t)v286 + (int)v287 * (uint64_t)(int)v10;
                do
                {
                  v293 = vabdq_u8(*(uint8x16_t *)(v292 + v291), *(uint8x16_t *)v11[v291 / 8].i8);
                  v290 += vaddlvq_u16(vqaddq_u16(vmull_u8(*(uint8x8_t *)v293.i8, *(uint8x8_t *)v293.i8), vmull_high_u8(v293, v293)));
                  v291 += 16;
                }
                while (v291 < v10);
                goto LABEL_254;
              }
              v290 = 0;
LABEL_254:
              if ((float)(sqrtf((float)v290) - *(float *)(*(_QWORD *)(v12 + 8) + 4 * v287)) < (float)(v9 * *(float *)(v14 + 40)))
              {
                v327 = sss_nn_node(*(_QWORD *)(v12 + 24) + 56 * (int)v287, v11, v10, v334, v283, v336, v14, v9);
                v285 = v336;
                v9 = v327;
              }
              ++v284;
            }
            while (v284 != v282);
          }
        }
      }
LABEL_256:
      free(v28);
      return v9;
    }
    if ((int)v29 < 1)
      goto LABEL_256;
    v147 = 0;
    v40 = 0;
    v149 = *(uint8x8_t **)v12;
    v148 = *(_QWORD *)(v12 + 8);
    v150 = *(_QWORD *)v12 + 16;
    while (1)
    {
      if (v15)
      {
        if ((int)v10 >= 1)
        {
          if (v10 < 8)
          {
            v154 = 0;
            v151 = 0;
            do
            {
LABEL_145:
              v184 = v149->u8[v154] - v11->u8[v154];
              v151 += v184 * v184;
              ++v154;
            }
            while (v10 != v154);
            goto LABEL_125;
          }
          if (v10 >= 0x20)
          {
            v158 = 0uLL;
            v159 = v16 & 0xFFFFFFE0;
            v160 = 0uLL;
            v161 = v11 + 2;
            v162 = (uint8x8_t *)v150;
            v163 = 0uLL;
            v164 = 0uLL;
            v165 = 0uLL;
            v166 = 0uLL;
            v167 = 0uLL;
            v168 = 0uLL;
            do
            {
              v169 = *(uint8x16_t *)v162[-2].i8;
              v170 = *(uint8x16_t *)v161[-2].i8;
              v171 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v169.i8, *(uint8x8_t *)v170.i8);
              v172 = (int16x8_t)vsubl_high_u8(v169, v170);
              v173 = (int16x8_t)vsubl_u8(*v162, *v161);
              v174 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v162->i8, *(uint8x16_t *)v161->i8);
              v164 = vmlal_high_s16(v164, v172, v172);
              v163 = vmlal_s16(v163, *(int16x4_t *)v172.i8, *(int16x4_t *)v172.i8);
              v160 = vmlal_high_s16(v160, v171, v171);
              v158 = vmlal_s16(v158, *(int16x4_t *)v171.i8, *(int16x4_t *)v171.i8);
              v168 = vmlal_high_s16(v168, v174, v174);
              v167 = vmlal_s16(v167, *(int16x4_t *)v174.i8, *(int16x4_t *)v174.i8);
              v166 = vmlal_high_s16(v166, v173, v173);
              v165 = vmlal_s16(v165, *(int16x4_t *)v173.i8, *(int16x4_t *)v173.i8);
              v162 += 4;
              v161 += 4;
              v159 -= 32;
            }
            while (v159);
            v151 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v165, v158), vaddq_s32(v167, v163)), vaddq_s32(vaddq_s32(v166, v160), vaddq_s32(v168, v164))));
            if ((v16 & 0xFFFFFFE0) == (unint64_t)v10)
              goto LABEL_125;
            v157 = v16 & 0xFFFFFFE0;
            v154 = v157;
            if ((v16 & 0x18) == 0)
              goto LABEL_145;
          }
          else
          {
            v151 = 0;
            v157 = 0;
          }
          v175 = 0uLL;
          v176 = (int32x4_t)v151;
          v177 = (uint8x8_t *)((char *)v149 + v157);
          v178 = (uint8x8_t *)((char *)v11 + v157);
          v179 = v157 - (v16 & 0xFFFFFFF8);
          do
          {
            v180 = *v177++;
            v181 = v180;
            v182 = *v178++;
            v183 = (int16x8_t)vsubl_u8(v181, v182);
            v175 = vmlal_high_s16(v175, v183, v183);
            v176 = vmlal_s16(v176, *(int16x4_t *)v183.i8, *(int16x4_t *)v183.i8);
            v179 += 8;
          }
          while (v179);
          v151 = vaddvq_s32(vaddq_s32(v176, v175));
          v154 = v10 & 0xFFFFFFF8;
          if ((v16 & 0xFFFFFFF8) == (unint64_t)v10)
            goto LABEL_125;
          goto LABEL_145;
        }
      }
      else if ((int)v10 >= 1)
      {
        v155 = 0;
        v151 = 0;
        do
        {
          v156 = vabdq_u8(*(uint8x16_t *)v149[v155 / 8].i8, *(uint8x16_t *)v11[v155 / 8].i8);
          v151 += vaddlvq_u16(vqaddq_u16(vmull_u8(*(uint8x8_t *)v156.i8, *(uint8x8_t *)v156.i8), vmull_high_u8(v156, v156)));
          v155 += 16;
        }
        while (v155 < v10);
        goto LABEL_125;
      }
      v151 = 0;
LABEL_125:
      v152 = sqrtf((float)v151);
      v153 = v40;
      *(float *)&v30[v153] = v152;
      v28[v153] = v147;
      if ((float)(v152 - *(float *)(v148 + 4 * v147)) < v9)
        ++v40;
      ++v147;
      v150 += (int)v10;
      v149 = (uint8x8_t *)((char *)v149 + (int)v10);
      if (v147 >= *(int *)(v12 + 16))
        goto LABEL_25;
    }
  }
  if ((_DWORD)v2 == 64)
  {
    while (1)
    {
      v17 = *(unsigned int *)(v12 + 16);
      if ((int)v17 < 1)
        return v9;
      v18 = 0;
      v19 = -1;
      v20 = INFINITY;
      do
      {
        v21 = 0;
        v22 = 0;
        do
        {
          v23 = vabdq_u8(*(uint8x16_t *)v13[v21].i8, *(uint8x16_t *)v1[v21].i8);
          v22 += vaddlvq_u16(vqaddq_u16(vmull_u8(*(uint8x8_t *)v23.i8, *(uint8x8_t *)v23.i8), vmull_high_u8(v23, v23)));
          v24 = v21 >= 6;
          v21 += 2;
        }
        while (!v24);
        v25 = sqrtf((float)v22);
        if (v25 < v20 && (float)(v25 - *(float *)(*(_QWORD *)(v12 + 8) + 4 * v18)) < (float)(*(float *)(v5 + 40) * v9))
        {
          v19 = v18;
          v20 = v25;
        }
        ++v18;
        v13 += 8;
      }
      while (v18 != v17);
      if (v19 == -1)
        return v9;
      v12 = *(_QWORD *)(v12 + 24) + 56 * v19;
      v13 = *(uint8x8_t **)v12;
      if (!*(_QWORD *)v12)
        goto LABEL_163;
    }
  }
  if ((v2 & 0xF) != 0)
  {
    v109 = v2 & 0xFFFFFFE0;
    v110 = v2 & 0xFFFFFFF8;
    while (1)
    {
      v111 = *(unsigned int *)(v12 + 16);
      if ((int)v111 <= 0)
        return v9;
      v112 = 0;
      v113 = v13 + 2;
      v114 = -1;
      v115 = INFINITY;
      do
      {
        if ((int)v10 < 1)
        {
          v117 = 0;
          goto LABEL_116;
        }
        if (v10 < 8)
        {
          v116 = 0;
          v117 = 0;
          do
          {
LABEL_115:
            v145 = v13->u8[v116] - v11->u8[v116];
            v117 += v145 * v145;
            ++v116;
          }
          while (v10 != v116);
          goto LABEL_116;
        }
        if (v10 >= 0x20)
        {
          v119 = 0uLL;
          v120 = v16 & 0xFFFFFFE0;
          v121 = 0uLL;
          v122 = v11 + 2;
          v123 = v113;
          v124 = 0uLL;
          v125 = 0uLL;
          v126 = 0uLL;
          v127 = 0uLL;
          v128 = 0uLL;
          v129 = 0uLL;
          do
          {
            v130 = *(uint8x16_t *)v123[-2].i8;
            v131 = *(uint8x16_t *)v122[-2].i8;
            v132 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v130.i8, *(uint8x8_t *)v131.i8);
            v133 = (int16x8_t)vsubl_high_u8(v130, v131);
            v134 = (int16x8_t)vsubl_u8(*v123, *v122);
            v135 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v123->i8, *(uint8x16_t *)v122->i8);
            v125 = vmlal_high_s16(v125, v133, v133);
            v124 = vmlal_s16(v124, *(int16x4_t *)v133.i8, *(int16x4_t *)v133.i8);
            v121 = vmlal_high_s16(v121, v132, v132);
            v119 = vmlal_s16(v119, *(int16x4_t *)v132.i8, *(int16x4_t *)v132.i8);
            v129 = vmlal_high_s16(v129, v135, v135);
            v128 = vmlal_s16(v128, *(int16x4_t *)v135.i8, *(int16x4_t *)v135.i8);
            v127 = vmlal_high_s16(v127, v134, v134);
            v126 = vmlal_s16(v126, *(int16x4_t *)v134.i8, *(int16x4_t *)v134.i8);
            v123 += 4;
            v122 += 4;
            v120 -= 32;
          }
          while (v120);
          v117 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v126, v119), vaddq_s32(v128, v124)), vaddq_s32(vaddq_s32(v127, v121), vaddq_s32(v129, v125))));
          if (v109 == v10)
            goto LABEL_116;
          v118 = v16 & 0xFFFFFFE0;
          v116 = v118;
          if ((v16 & 0x18) == 0)
            goto LABEL_115;
        }
        else
        {
          v117 = 0;
          v118 = 0;
        }
        v136 = 0uLL;
        v137 = (int32x4_t)v117;
        v138 = (uint8x8_t *)((char *)v13 + v118);
        v139 = (uint8x8_t *)((char *)v11 + v118);
        v140 = v118 - (v16 & 0xFFFFFFF8);
        do
        {
          v141 = *v138++;
          v142 = v141;
          v143 = *v139++;
          v144 = (int16x8_t)vsubl_u8(v142, v143);
          v136 = vmlal_high_s16(v136, v144, v144);
          v137 = vmlal_s16(v137, *(int16x4_t *)v144.i8, *(int16x4_t *)v144.i8);
          v140 += 8;
        }
        while (v140);
        v117 = vaddvq_s32(vaddq_s32(v137, v136));
        v116 = v10 & 0xFFFFFFF8;
        if (v110 != v10)
          goto LABEL_115;
LABEL_116:
        v146 = sqrtf((float)v117);
        if (v146 < v115
          && (float)(v146 - *(float *)(*(_QWORD *)(v12 + 8) + 4 * v112)) < (float)(*(float *)(v5 + 40) * v9))
        {
          v114 = v112;
          v115 = v146;
        }
        ++v112;
        v113 = (uint8x8_t *)((char *)v113 + (int)v10);
        v13 = (uint8x8_t *)((char *)v13 + (int)v10);
      }
      while (v112 != v111);
      if (v114 == -1)
        return v9;
      v12 = *(_QWORD *)(v12 + 24) + 56 * v114;
      v13 = *(uint8x8_t **)v12;
      if (!*(_QWORD *)v12)
        goto LABEL_163;
    }
  }
  while (1)
  {
    v185 = *(unsigned int *)(v12 + 16);
    if ((int)v185 < 1)
      return v9;
    if ((int)v2 <= 0)
    {
      v193 = 0;
      v187 = -1;
      v194 = INFINITY;
      do
      {
        if (v194 > 0.0
          && (float)(0.0 - *(float *)(*(_QWORD *)(v12 + 8) + 4 * v193)) < (float)(*(float *)(v5 + 40) * v6))
        {
          v194 = 0.0;
          v187 = v193;
        }
        ++v193;
      }
      while (v185 != v193);
    }
    else
    {
      v186 = 0;
      v187 = -1;
      v188 = INFINITY;
      do
      {
        v189 = 0;
        v190 = 0;
        do
        {
          v191 = vabdq_u8(*(uint8x16_t *)v13[v189 / 8].i8, *(uint8x16_t *)v1[v189 / 8].i8);
          v190 += vaddlvq_u16(vqaddq_u16(vmull_u8(*(uint8x8_t *)v191.i8, *(uint8x8_t *)v191.i8), vmull_high_u8(v191, v191)));
          v189 += 16;
        }
        while (v189 < v2);
        v192 = sqrtf((float)v190);
        if (v192 < v188
          && (float)(v192 - *(float *)(*(_QWORD *)(v12 + 8) + 4 * v186)) < (float)(*(float *)(v5 + 40) * v6))
        {
          v187 = v186;
          v188 = v192;
        }
        ++v186;
        v13 = (uint8x8_t *)((char *)v13 + (int)v2);
      }
      while (v186 != v185);
    }
    if (v187 == -1)
      return v9;
    v12 = *(_QWORD *)(v12 + 24) + 56 * v187;
    v13 = *(uint8x8_t **)v12;
    if (!*(_QWORD *)v12)
      goto LABEL_163;
  }
}

void g_norm_rot3(double *a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73[2];
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  v3 = a1[7];
  v2 = a1[8];
  v5 = a1[2];
  v4 = a1[3];
  v7 = a1[5];
  v6 = a1[6];
  v9 = *a1;
  v8 = a1[1];
  v10 = a1[4];
  v11 = *a1 * v8 + 0.0 + v4 * v10 + v6 * v3;
  v73[0] = v9 * v9 + 0.0 + v4 * v4 + v6 * v6;
  v73[1] = v11;
  v74 = v9 * v5 + 0.0 + v4 * v7 + v6 * v2;
  v75 = v11;
  v76 = v8 * v8 + 0.0 + v10 * v10 + v3 * v3;
  v77 = v8 * v5 + 0.0 + v10 * v7 + v3 * v2;
  v78 = v74;
  v79 = v77;
  v69 = v2;
  v80 = v5 * v5 + 0.0 + v7 * v7 + v2 * v2;
  eig_sym3x3(v73, &v70, &v81);
  v12 = v83;
  v13 = v86;
  v14 = v89;
  v15 = v71;
  if (v70 >= 1.0e-20)
    v16 = v70;
  else
    v16 = 1.0e-20;
  if (v71 < 1.0e-20)
    v15 = 1.0e-20;
  v17 = v81 * v81;
  v18 = v81 * v84;
  v19 = v81 * v87;
  v20 = v84 * v84;
  v21 = v84 * v87;
  v22 = v87 * v87;
  if (v72 <= 1.0e-20)
  {
    v38 = 1.0 / v16;
    v39 = 1.0 / v15;
    v40 = v17 * v38 + v82 * v82 * (1.0 / v15);
    v41 = v18 * v38 + v82 * v85 * v39;
    v42 = v19 * v38 + v82 * v88 * v39;
    v43 = v20 * v38 + v85 * v85 * v39;
    v44 = v21 * v38 + v85 * v88 * v39;
    v45 = v22 * v38 + v88 * v88 * v39;
    v46 = v9 * v40 + 0.0 + v8 * v41 + v5 * v42;
    v47 = v9 * v41 + 0.0 + v8 * v43 + v5 * v44;
    v48 = v9 * v42 + 0.0 + v8 * v44 + v5 * v45;
    v49 = v4 * v40 + 0.0 + v10 * v41 + v7 * v42;
    v50 = v4 * v41 + 0.0 + v10 * v43 + v7 * v44;
    v51 = v4 * v42 + 0.0 + v10 * v44 + v7 * v45;
    v52 = v6 * v40 + 0.0 + v3 * v41 + v69 * v42;
    v53 = v6 * v41 + 0.0 + v3 * v43 + v69 * v44;
    v54 = v6 * v42 + 0.0 + v3 * v44 + v69 * v45;
    v55 = v83 * v87;
    v56 = v83 * v88;
    v57 = v83 * v89;
    v58 = v87 * v86;
    v59 = v86 * v88;
    v60 = v86 * v89;
    v61 = v87 * v89;
    v62 = v88 * v89;
    v63 = v89 * v89;
    v64 = v83 * v87 + v46;
    v65 = v56 + v47;
    *a1 = v64;
    a1[1] = v56 + v47;
    v66 = v57 + v48;
    v67 = v58 + v49;
    a1[2] = v57 + v48;
    a1[3] = v58 + v49;
    v68 = v59 + v50;
    a1[4] = v59 + v50;
    a1[5] = v60 + v51;
    a1[6] = v61 + v52;
    a1[7] = v62 + v53;
    a1[8] = v63 + v54;
    if (v64 * v68 * (v63 + v54)
       + 0.0
       + (v62 + v53) * v67 * v66
       + v65 * (v61 + v52) * (v60 + v51)
       + -((v61 + v52) * v68) * v66
       + -(v67 * v65) * (v63 + v54)
       + -(v64 * (v62 + v53)) * (v60 + v51) >= 0.0)
      return;
    *a1 = v64 - v55 - v55;
    a1[1] = v65 - v56 - v56;
    a1[2] = v66 - v57 - v57;
    a1[3] = v67 - v58 - v58;
    a1[4] = v68 - v59 - v59;
    a1[5] = v60 + v51 - v60 - v60;
    a1[6] = v61 + v52 - v61 - v61;
    a1[7] = v62 + v53 - v62 - v62;
    v37 = v63 + v54 - v63 - v63;
  }
  else
  {
    v23 = 1.0 / sqrt(v16);
    v24 = v17 * v23;
    v25 = 1.0 / sqrt(v15);
    v26 = v18 * v23 + v82 * v85 * v25;
    v27 = v20 * v23 + v85 * v85 * v25;
    v28 = v21 * v23 + v85 * v88 * v25;
    v29 = v22 * v23 + v88 * v88 * v25;
    if (v9 * v10 * v69 + 0.0 + v4 * v3 * v5 + v6 * v8 * v7 + -(v6 * v10) * v5 + -(v4 * v8) * v69 + -(v9 * v3) * v7 < 0.0)
    {
      v14 = -v89;
      v13 = -v86;
      v12 = -v83;
    }
    v30 = 1.0 / sqrt(v72);
    v31 = v12 * v13 * v30;
    v32 = v13 * v13 * v30;
    v33 = v12 * v12 * v30 + v24 + v82 * v82 * v25;
    v34 = v12 * v14 * v30 + v19 * v23 + v82 * v88 * v25;
    v35 = v13 * v14 * v30 + v28;
    v36 = v14 * v14 * v30 + v29;
    *a1 = v9 * v33 + 0.0 + v8 * (v31 + v26) + v5 * v34;
    a1[1] = v9 * (v31 + v26) + 0.0 + v8 * (v32 + v27) + v5 * v35;
    a1[2] = v9 * v34 + 0.0 + v8 * v35 + v5 * v36;
    a1[3] = v4 * v33 + 0.0 + v10 * (v31 + v26) + v7 * v34;
    a1[4] = v4 * (v31 + v26) + 0.0 + v10 * (v32 + v27) + v7 * v35;
    a1[5] = v4 * v34 + 0.0 + v10 * v35 + v7 * v36;
    a1[6] = v6 * v33 + 0.0 + v3 * (v31 + v26) + v69 * v34;
    a1[7] = v6 * (v31 + v26) + 0.0 + v3 * (v32 + v27) + v69 * v35;
    v37 = v6 * v34 + 0.0 + v3 * v35 + v69 * v36;
  }
  a1[8] = v37;
}

double eig_sym3x3(double *a1, double *a2, double *a3)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  long double v32;
  __double2 v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  BOOL v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double result;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;

  v5 = a1[1];
  v6 = fmax(fabs(*a1), 1.0e-10);
  v7 = fabs(v5);
  if (v7 > v6)
    v6 = v7;
  v8 = a1[2];
  v9 = fabs(v8);
  if (v9 > v6)
    v6 = v9;
  v75 = a1[3];
  v10 = fabs(v75);
  if (v10 > v6)
    v6 = v10;
  v11 = a1[4];
  v12 = a1[5];
  v13 = fabs(v11);
  if (v13 > v6)
    v6 = v13;
  v14 = fabs(v12);
  if (v14 > v6)
    v6 = v14;
  v73 = a1[7];
  v74 = a1[6];
  v15 = fabs(v74);
  if (v15 > v6)
    v6 = v15;
  v16 = fabs(a1[7]);
  if (v16 > v6)
    v6 = v16;
  v17 = a1[8];
  v18 = fabs(v17);
  if (v18 <= v6)
    v18 = v6;
  v81 = v18;
  v19 = 1.0 / v18;
  v20 = *a1 * (1.0 / v18);
  v76 = a1[2];
  v77 = a1[1];
  v21 = v5 * (1.0 / v18);
  v22 = v8 * (1.0 / v18);
  v23 = v11 * v19;
  v24 = v17 * v19;
  v78 = v21;
  v79 = v12 * v19;
  v80 = v22;
  v25 = v20 * (v11 * v19) - v21 * v21 + v20 * (v17 * v19) - v22 * v22 + v11 * v19 * (v17 * v19) - v79 * v79;
  v26 = v17 * v19 + v20 + v11 * v19;
  v27 = v26 / 3.0;
  v28 = (v25 - v26 * (v26 / 3.0)) / 3.0;
  if (v28 > 0.0)
    v28 = 0.0;
  v29 = (v12 * v19 * (v22 * (v21 + v21))
       + v20 * v23 * (v17 * v19)
       + -(v20 * (v12 * v19)) * (v12 * v19)
       + -(v23 * v22) * v22
       + -(v17 * v19 * v21) * v21
       + v27 * -(v25 - (v27 + v27) * v27))
      * 0.5;
  v30 = v28 * (v28 * v28) + v29 * v29;
  if (v30 > 0.0)
    v30 = 0.0;
  v31 = sqrt(-v28);
  v32 = atan2(sqrt(-v30), v29);
  v33 = __sincos_stret(v32 / 3.0);
  v34 = v27 + (v31 + v31) * v33.__cosval;
  v35 = v27 - v31 * (v33.__cosval + v33.__sinval * 1.73205081);
  *a2 = v34;
  a2[1] = v35;
  v36 = v27 - v31 * (v33.__cosval + v33.__sinval * -1.73205081);
  a2[2] = v36;
  if (v36 <= v35)
  {
    v37 = v27 - v31 * (v33.__cosval + v33.__sinval * 1.73205081);
    v35 = v27 - v31 * (v33.__cosval + v33.__sinval * -1.73205081);
    if (v36 <= v34)
    {
LABEL_23:
      v38 = v35;
      v35 = v27 + (v31 + v31) * v33.__cosval;
      if (v37 <= v34)
        goto LABEL_24;
      goto LABEL_46;
    }
  }
  else
  {
    a2[1] = v36;
    a2[2] = v35;
    v37 = v27 - v31 * (v33.__cosval + v33.__sinval * -1.73205081);
    if (v35 <= v34)
      goto LABEL_23;
  }
  a2[2] = v34;
  *a2 = v35;
  v38 = v27 + (v31 + v31) * v33.__cosval;
  if (v37 <= v35)
  {
LABEL_24:
    v39 = v37;
    v37 = v35;
    if (a3)
      goto LABEL_25;
LABEL_47:
    v69 = v81;
    v70 = v81 * v37;
    goto LABEL_50;
  }
LABEL_46:
  *a2 = v37;
  a2[1] = v35;
  v39 = v35;
  if (!a3)
    goto LABEL_47;
LABEL_25:
  if (v37 < 1.0e-10 || v37 - v38 < 1.0e-10)
  {
    *a3 = 1.0;
    a3[1] = 0.0;
    a3[2] = 0.0;
    a3[3] = 0.0;
    a3[4] = 1.0;
    a3[5] = 0.0;
    a3[6] = 0.0;
    a3[7] = 0.0;
    a3[8] = 1.0;
  }
  else
  {
    v40 = v75 * v19;
    v41 = v74 * v19;
    v42 = v73 * v19;
    v43 = -(v77 * v19);
    v44 = -(v76 * v19);
    v45 = -(v12 * v19);
    v46 = v20 - v37;
    v47 = v23 - v37;
    v48 = (v23 - v37) * v44 + v78 * v79;
    v49 = v80 * (v75 * v19) - (v20 - v37) * v79;
    v50 = v75 * v19 * v43 + (v20 - v37) * (v23 - v37);
    v51 = v49 * v49 + v48 * v48 + v50 * v50;
    if (v51 < 1.0e-10)
    {
      v52 = v24 - v37;
      v48 = v42 * v44 + v78 * (v24 - v37);
      v49 = (v24 - v37) * -v46 + v80 * v41;
      v50 = v41 * v43 + v46 * v42;
      v51 = v49 * v49 + v48 * v48 + v50 * v50;
      if (v51 < 1.0e-10)
      {
        v48 = v42 * v45 + v47 * v52;
        v49 = v79 * v41 - v40 * v52;
        v50 = v40 * v42 - v47 * v41;
        v51 = v49 * v49 + v48 * v48 + v50 * v50;
      }
    }
    v53 = 1.0 / sqrt(v51);
    v54 = v48 * v53;
    v55 = v49 * v53;
    v56 = v50 * v53;
    v57 = v55 * v44 + v78 * v56;
    v58 = v80 * v54 - (v20 - v39) * v56;
    v59 = v54 * v43 + (v20 - v39) * v55;
    v60 = v58 * v58 + v57 * v57 + v59 * v59;
    if (v60 < 1.0e-10)
    {
      v57 = v55 * v45 + (v23 - v39) * v56;
      v58 = v79 * v54 - v40 * v56;
      v59 = v40 * v55 - (v23 - v39) * v54;
      v60 = v58 * v58 + v57 * v57 + v59 * v59;
      if (v60 < 1.0e-10)
      {
        v57 = v42 * v56 - (v24 - v39) * v55;
        v58 = (v24 - v39) * v54 - v41 * v56;
        v59 = v41 * v55 - v42 * v54;
        v60 = v58 * v58 + v57 * v57 + v59 * v59;
        if (v60 < 1.0e-10)
        {
          v61 = fabs(v54) <= fabs(v55);
          v62 = 0.0;
          if (v61)
            v63 = 0.0;
          else
            v63 = -v56;
          if (v61)
            v62 = -v56;
          if (v61)
            v64 = v55;
          else
            v64 = v54;
          v57 = v62 * v56 - v64 * v55;
          v58 = v64 * v54 - v63 * v56;
          v59 = v63 * v55 - v62 * v54;
          v60 = v58 * v58 + v57 * v57 + v59 * v59;
        }
      }
    }
    v65 = 1.0 / sqrt(v60);
    v66 = v57 * v65;
    v67 = v58 * v65;
    v68 = v59 * v65;
    *a3 = v54;
    a3[1] = v66;
    a3[2] = v55 * v68 - v56 * v67;
    a3[3] = v55;
    a3[4] = v67;
    a3[5] = v56 * v66 - v54 * v68;
    a3[6] = v56;
    a3[7] = v68;
    a3[8] = v54 * v67 - v55 * v66;
  }
  v39 = a2[1];
  v69 = v81;
  v70 = v81 * *a2;
LABEL_50:
  *a2 = v70;
  result = v69 * v39;
  v72 = v69 * a2[2];
  a2[1] = v69 * v39;
  a2[2] = v72;
  return result;
}

uint64_t g_isect_line_line_ex2(double *a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double a9)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  BOOL v25;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;

  v9 = *a3;
  v10 = a3[1];
  v11 = a3[2];
  v12 = a4[1];
  v13 = a4[2];
  v14 = vabdd_f64(v12, v10);
  v15 = vabdd_f64(v13, v11);
  if (vabdd_f64(*a4, *a3) < a9 && v14 < a9 && v15 < a9)
    return 0;
  v19 = *a1;
  v18 = a1[1];
  v20 = a1[2];
  v21 = a2[1];
  v22 = a2[2];
  v23 = vabdd_f64(v21, v18);
  v24 = vabdd_f64(v22, v20);
  v25 = vabdd_f64(*a2, *a1) < a9 && v23 < a9;
  if (v25 && v24 < a9)
    return 0;
  v27 = *a4 - v9;
  v28 = v12 - v10;
  v29 = v13 - v11;
  v30 = *a2 - v19;
  v31 = v21 - v18;
  v32 = v22 - v20;
  v33 = v28 * (v21 - v18) + v27 * v30 + (v13 - v11) * (v22 - v20);
  v34 = v28 * v28 + v27 * v27 + v29 * v29;
  v35 = (v31 * v31 + v30 * v30 + v32 * v32) * v34 - v33 * v33;
  if (fabs(v35) < a9)
    return 0;
  v37 = v19 - v9;
  v38 = v18 - v10;
  v39 = v20 - v11;
  v40 = v38 * v31 + v37 * v30 + (v20 - v11) * v32;
  v41 = v38 * v28 + v37 * v27 + v39 * v29;
  v42 = (v41 * v33 - v40 * v34) / v35;
  if (a5)
  {
    *a5 = v19 + v42 * v30;
    a5[1] = v18 + v42 * v31;
    a5[2] = v20 + v42 * v32;
  }
  if (a7)
    *a7 = v42;
  v43 = (v41 + v33 * v42) / v34;
  if (a6)
  {
    v44 = a3[1] + v43 * v28;
    *a6 = *a3 + v43 * v27;
    a6[1] = v44;
    a6[2] = a3[2] + v43 * v29;
  }
  if (a8)
    *a8 = v43;
  return 1;
}

uint64_t vl_fio_open(const char *a1, const char *a2, char *a3)
{
  unsigned int v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  int v11;
  FILE *v12;
  FILE *v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  size_t i;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  int v25;
  FILE *v26;
  int v27;

  v6 = *(unsigned __int8 *)a2 - 97;
  v7 = v6 > 0x16 || ((1 << (*a2 - 97)) & 0x420001) == 0;
  if (v7 && (a2[1] & 0xFE) != 0x62)
    __assert_rtn("vl_fio_open", "vl_fio.c", 348, "(mode[0] == 'r' || mode[0] == 'w' || mode[0] == 'a' || mode[1] == 'b' || mode[1] == 'c') && \"mode not allowed\"");
  if (!*a3 || !a3[1] || !a3[2] || !a3[3])
  {
    printf("%sError : ", (const char *)&str_4_2);
    printf("Wrong file signature %s");
LABEL_17:
    putchar(10);
    return 0;
  }
  if (v6 > 0x16 || ((1 << v6) & 0x420001) == 0 || (a2[1] & 0xFE) != 0x62)
  {
    printf("%sError : ", (const char *)&str_4_2);
    printf("Wrong file mode: %s");
    goto LABEL_17;
  }
  v8 = malloc_type_calloc(1uLL, 0x238uLL, 0x10300402769EC20uLL);
  v9 = (uint64_t)v8;
  *((_BYTE *)v8 + 512) = *a2;
  *((_BYTE *)v8 + 513) = a2[1];
  if (a2[1] == 98)
  {
    *((_QWORD *)v8 + 69) = fopen(a1, a2);
    goto LABEL_55;
  }
  v11 = *(unsigned __int8 *)a2;
  if (v11 == 119)
  {
    *((_QWORD *)v8 + 69) = 0;
    v22 = *((_QWORD *)v8 + 67);
    if (v22 < 102400)
    {
      v23 = 2 * v22;
      if (2 * v22 <= 102400)
        v23 = 102400;
      if (v22)
        v24 = v23;
      else
        v24 = 102400;
      *((_QWORD *)v8 + 66) = malloc_type_realloc(*((void **)v8 + 66), v24, 0xE82FF9BAuLL);
      *(_QWORD *)(v9 + 536) = v24;
    }
    strncpy((char *)v9, a1, 0x200uLL);
  }
  else
  {
    if (v11 != 114)
    {
      printf("%sAborting : ", (const char *)&str_4_2);
      printf("mode not supported");
      putchar(10);
      __assert_rtn("vl_fopen", "vl_fio.c", 122, "0");
    }
    v12 = fopen(a1, "rb");
    if (!v12)
      goto LABEL_65;
    v13 = v12;
    fseek(v12, 0, 2);
    v14 = MEMORY[0x212BCEFAC](v13);
    rewind(v13);
    *(_QWORD *)(v9 + 560) = v14;
    if (v14)
    {
      v15 = malloc_type_malloc(v14, 0xC8FCFE37uLL);
      if (fread(v15, 1uLL, v14, v13) != v14)
      {
        printf("%sError : ", (const char *)&str_4_2);
        printf("Failed to read file");
        putchar(10);
      }
      v16 = 2 * v14;
      v17 = *(_QWORD *)(v9 + 536);
      if ((uint64_t)(2 * v14) > v17)
      {
        v18 = 2 * v17;
        if (!v17)
          v18 = 256;
        if (v18 <= v16)
          v17 = 2 * v14;
        else
          v17 = v18;
        if (v17)
          *(_QWORD *)(v9 + 528) = malloc_type_realloc(*(void **)(v9 + 528), v17, 0x6502D765uLL);
        *(_QWORD *)(v9 + 536) = v17;
      }
      *(_QWORD *)(v9 + 520) = v16;
      for (i = compression_decode_buffer(*(uint8_t **)(v9 + 528), (int)v17, (const uint8_t *)v15, v14, 0, COMPRESSION_LZFSE);
            i == (int)v17;
            i = compression_decode_buffer(*(uint8_t **)(v9 + 528), (int)v17, (const uint8_t *)v15, v14, 0, COMPRESSION_LZFSE))
      {
        v20 = 2 * (int)v17;
        v17 = *(_QWORD *)(v9 + 536);
        if (v17 < v20)
        {
          v21 = 2 * v17;
          if (!v17)
            v21 = 256;
          if (v21 <= v20)
            v17 = v20;
          else
            v17 = v21;
          if (v17)
            *(_QWORD *)(v9 + 528) = malloc_type_realloc(*(void **)(v9 + 528), v17, 0xACEB7C9EuLL);
          *(_QWORD *)(v9 + 536) = v17;
        }
        *(_QWORD *)(v9 + 520) = v20;
      }
      *(_QWORD *)(v9 + 520) = i;
      free(v15);
      if (fclose(v13))
      {
LABEL_65:
        free((void *)v9);
        printf("%sError : ", (const char *)&str_4_2);
        printf("File %s could not be opened");
        goto LABEL_17;
      }
    }
  }
LABEL_55:
  v25 = *(unsigned __int8 *)a2;
  if (v25 == 119)
  {
    vl_fio_write_header(v9, a3);
    return v9;
  }
  if (v25 == 114)
  {
    v26 = *(FILE **)(v9 + 552);
    if (v26)
      v27 = feof(v26);
    else
      v27 = *(_QWORD *)(v9 + 520) <= *(int *)(v9 + 544);
    if (!v27)
    {
      vl_fio_check_header(v9, a3);
      return v9;
    }
    printf("%sError : ", (const char *)&str_4_2);
    printf("File %s empty, needs at least a header");
    goto LABEL_17;
  }
  return v9;
}

uint64_t vl_fio_check_header(uint64_t a1, char *__s1)
{
  FILE *v3;
  uint64_t result;
  int v6;
  uint64_t v7;
  int __ptr;

  v3 = *(FILE **)(a1 + 552);
  if (v3)
  {
    fread(&__ptr, 1uLL, 4uLL, v3);
    result = strncmp(__s1, (const char *)&__ptr, 4uLL);
    if (!(_DWORD)result)
      return result;
    goto LABEL_3;
  }
  v6 = *(_DWORD *)(a1 + 544);
  v7 = v6;
  if ((unint64_t)(v6 + 4) > *(_QWORD *)(a1 + 520))
  {
    printf("%sError : ", (const char *)&str_4_2);
    printf("Trying to read non existing data");
    putchar(10);
    v6 = *(_DWORD *)(a1 + 544);
    v7 = v6;
  }
  __ptr = *(_DWORD *)(*(_QWORD *)(a1 + 528) + v7);
  *(_DWORD *)(a1 + 544) = v6 + 4;
  result = strncmp(__s1, (const char *)&__ptr, 4uLL);
  if ((_DWORD)result)
  {
LABEL_3:
    printf("%sError : ", (const char *)&str_4_2);
    printf("Unknown file format: (%s), should be (%s)", (const char *)&__ptr, __s1);
    return putchar(10);
  }
  return result;
}

char *vl_fio_write_header(uint64_t a1, _BYTE *__ptr)
{
  FILE *v4;
  char *result;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;

  if (!*__ptr || !__ptr[1] || !__ptr[2] || !__ptr[3])
    __assert_rtn("vl_fio_write_header", "vl_fio.c", 330, "signature[0] != 0 && signature[1] != 0 && signature[2] != 0 && signature[3] != 0 && \"Signature needs to be 4 chars\"");
  v4 = *(FILE **)(a1 + 552);
  if (v4)
    return (char *)fwrite(__ptr, 1uLL, 4uLL, v4);
  v6 = *(_QWORD *)(a1 + 520);
  v7 = v6 + 4;
  v8 = *(_QWORD *)(a1 + 536);
  if (v6 + 4 <= v8)
  {
    result = *(char **)(a1 + 528);
  }
  else
  {
    v9 = 2 * v8;
    if (!v8)
      v9 = 256;
    if (v9 <= v7)
      v10 = v7;
    else
      v10 = v9;
    result = (char *)malloc_type_realloc(*(void **)(a1 + 528), v10, 0x768BF38DuLL);
    *(_QWORD *)(a1 + 528) = result;
    *(_QWORD *)(a1 + 536) = v10;
    v6 = *(_QWORD *)(a1 + 520);
  }
  *(_DWORD *)&result[v6] = *(_DWORD *)__ptr;
  *(_QWORD *)(a1 + 520) += 4;
  return result;
}

uint64_t vl_fio_close(uint64_t a1)
{
  FILE *v2;
  int v3;
  uint64_t v4;
  size_t v6;
  uint8_t *v7;
  uint8_t *v8;
  size_t v9;
  int v10;
  size_t v11;
  FILE *v12;

  if (!a1)
    return 0;
  v2 = *(FILE **)(a1 + 552);
  if (v2)
  {
    v3 = fclose(v2);
    v4 = *(_QWORD *)(a1 + 560);
    free((void *)a1);
    if (!v3)
      return v4;
  }
  else
  {
    if (*(_BYTE *)(a1 + 512) == 119)
    {
      v6 = *(_QWORD *)(a1 + 520);
      v7 = (uint8_t *)malloc_type_malloc(v6, 0xDC7CCFCDuLL);
      v8 = v7;
      *(_QWORD *)(a1 + 560) = 0;
      while (1)
      {
        v9 = compression_encode_buffer(v7, v6, *(const uint8_t **)(a1 + 528), v6, 0, COMPRESSION_LZFSE);
        *(_QWORD *)(a1 + 560) += v9;
        if (v9)
          break;
        free(v8);
        v6 += *(_QWORD *)(a1 + 520) / 2;
        v7 = (uint8_t *)malloc_type_malloc(v6, 0x473EC266uLL);
        v8 = v7;
      }
      v11 = v9;
      v12 = fopen((const char *)a1, "wb");
      fwrite(v8, 1uLL, v11, v12);
      v10 = fclose(v12);
      free(v8);
    }
    else
    {
      v10 = 0;
    }
    free(*(void **)(a1 + 528));
    v4 = *(_QWORD *)(a1 + 560);
    free((void *)a1);
    if (!v10)
      return v4;
  }
  printf("%sError : ", (const char *)&str_4_2);
  printf("Problem closing file");
  putchar(10);
  return v4;
}

os_log_t __vl_os_log_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.3dv.vl", "vl");
  vl_os_log_log = (uint64_t)result;
  return result;
}

void vl_geo_calc_tile(double *a1, uint64_t a2, int __e, _DWORD *a4, _DWORD *a5)
{
  char v7;
  double v10;
  long double v11;
  long double v12;
  double v13;
  double v14;
  double v15;
  __double2 v16;
  long double v17;
  double v18;
  double v19;
  long double v20;
  int v21;
  double v22;
  double v23;
  double v24;

  v7 = __e;
  v10 = ldexp(1.0, __e);
  v11 = *(double *)a2;
  v12 = *(double *)(a2 + 8);
  v13 = *(double *)(a2 + 16);
  v14 = sqrt(v12 * v12 + v11 * v11);
  if (v14 >= 0.001)
  {
    v15 = atan2(*(long double *)(a2 + 16), v14 * 0.996647189);
  }
  else
  {
    v15 = dbl_210BCAB20[v13 < 0.0];
    v14 = 0.001;
  }
  v16 = __sincos_stret(v15);
  v17 = atan2(v13 + v16.__sinval * (v16.__sinval * v16.__sinval) * 42841.3115, v14 + v16.__cosval * (v16.__cosval * v16.__cosval) * -42697.6727);
  v18 = sin(v17);
  if (fabs(v18) <= 0.9999)
    v19 = log((v18 + 1.0) / (1.0 - v18)) * 3189068.5;
  else
    v19 = dbl_210BCDC00[v18 > 0.0];
  v20 = atan2(v12, v11) + 3.14159265;
  v21 = (int)(v10 + -1.0);
  v22 = (((v20 + (double)((int)(v20 * 0.159154943) - (v20 < 0.0)) * -6.28318531 + -3.14159265) * 6378137.0 - a1[1])
       / a1[3]
       + 0.5)
      * (double)(1 << v7);
  v23 = floor(((v19 - *a1) / a1[2] + 0.5) * (double)(1 << v7));
  if (v23 < 0.0)
    v23 = 0.0;
  if (v23 >= (double)v21)
    v23 = (double)v21;
  *a4 = (int)v23;
  v24 = floor(v22);
  if (v24 < 0.0)
    v24 = 0.0;
  if (v24 >= (double)v21)
    v24 = (double)v21;
  *a5 = (int)v24;
}

void vl_geo_calc_gnd(float64x2_t *a1, char a2, int a3, int a4, uint64_t a5)
{
  uint64_t v6;
  double *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  long double v12;
  double v13;
  __double2 v14;
  __double2 v15;
  double v16;
  double v17;
  double v18;
  long double v19;
  double v20;
  __double2 v21;
  __double2 v22;
  double v23;
  double v24;
  double v25;
  double v26;
  long double v27;
  double v28;
  __double2 v29;
  __double2 v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  long double v39;
  __double2 v40;
  __double2 v41;
  __double2 v42;
  double v43;
  double v44;
  double v45;
  long double v46;
  double v47;
  __double2 v48;
  __double2 v49;
  double v50;
  double v51;
  long double v52;
  double v53;
  __double2 v54;
  __double2 v55;
  double v56;
  double v57;
  double v58;
  double v59;
  long double v60;
  double v61;
  __double2 v62;
  __double2 v63;
  double v64;
  double v65;
  double v66;
  long double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  __double2 v75;
  __double2 v76;
  __double2 v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  uint64_t v118;

  v118 = *MEMORY[0x24BDAC8D0];
  *(double *)&v6 = (double)(1 << a2);
  *(double *)(a5 + 72) = a1->f64[0] + (((double)a3 + 0.5) / *(double *)&v6 + -0.5) * a1[1].f64[0];
  *(double *)(a5 + 80) = a1->f64[1] + (((double)a4 + 0.5) / *(double *)&v6 + -0.5) * a1[1].f64[1];
  *(_QWORD *)(a5 + 88) = 0;
  *(_QWORD *)a5 = 0x3FF0000000000000;
  *(_QWORD *)(a5 + 8) = 0;
  v7 = (double *)(a5 + 8);
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 32) = 0x3FF0000000000000;
  *(_QWORD *)(a5 + 40) = 0;
  *(_QWORD *)(a5 + 48) = 0;
  *(_QWORD *)(a5 + 56) = 0;
  *(_QWORD *)(a5 + 64) = 0x3FF0000000000000;
  *(float64x2_t *)(a5 + 96) = vdivq_f64(a1[1], (float64x2_t)vdupq_lane_s64(v6, 0));
  vl_mat_imgnd_to_xyz(&v106, (double *)a5, 1, 1, 0.0, 0.0, 1.0);
  v86 = v109;
  v8 = v108;
  v82 = v109 * -0.5;
  v103 = v106;
  v101 = v112;
  v96 = v107;
  v98 = v113;
  v94 = v115;
  v78 = v114;
  v79 = v108;
  v84 = v110;
  v85 = v111;
  v80 = v110 * -0.5;
  v92 = v116;
  v99 = v117;
  v9 = v111 * -0.5;
  v10 = v117 + v111 * -0.5 + v108 * -0.5 + v114 * 0.0;
  v11 = (v116 + v110 * -0.5 + v107 * -0.5 + v113 * 0.0) / 6378137.0;
  v12 = sinh((v115 + v109 * -0.5 + v106 * -0.5 + v112 * 0.0) / 6378137.0);
  v13 = atan(v12);
  v14 = __sincos_stret(v13);
  v15 = __sincos_stret(v11);
  v16 = 6378137.0 / sqrt(v14.__sinval * -0.00669437999 * v14.__sinval + 1.0);
  v17 = v14.__cosval * (v16 - v10);
  v88 = v15.__sinval * v17;
  v89 = v15.__cosval * v17;
  v87 = v14.__sinval * -(v10 - v16 * 0.99330562);
  v18 = v99 + v9 + v8 * 0.5 + v78 * 0.0;
  v19 = sinh((v94 + v82 + v103 * 0.5 + v101 * 0.0) / 6378137.0);
  v20 = atan(v19);
  v21 = __sincos_stret(v20);
  v22 = __sincos_stret((v92 + v80 + v96 * 0.5 + v98 * 0.0) / 6378137.0);
  v23 = 6378137.0 / sqrt(v21.__sinval * -0.00669437999 * v21.__sinval + 1.0);
  v24 = v21.__cosval * (v23 - v18);
  v81 = v22.__sinval * v24;
  v83 = v22.__cosval * v24;
  v25 = v21.__sinval * -(v18 - v23 * 0.99330562);
  v26 = v99 + v85 * 0.5 + v79 * -0.5 + v78 * 0.0;
  v27 = sinh((v94 + v86 * 0.5 + v103 * -0.5 + v101 * 0.0) / 6378137.0);
  v28 = atan(v27);
  v29 = __sincos_stret(v28);
  v30 = __sincos_stret((v92 + v84 * 0.5 + v96 * -0.5 + v98 * 0.0) / 6378137.0);
  v31 = 6378137.0 / sqrt(v29.__sinval * -0.00669437999 * v29.__sinval + 1.0);
  v32 = v29.__cosval * (v31 - v26);
  *(double *)(a5 + 96) = sqrt((v88 - v81) * (v88 - v81) + (v89 - v83) * (v89 - v83) + (v87 - v25) * (v87 - v25));
  *(double *)(a5 + 104) = sqrt((v88 - v30.__sinval * v32) * (v88 - v30.__sinval * v32)+ (v89 - v30.__cosval * v32) * (v89 - v30.__cosval * v32)+ (v87 - v29.__sinval * -(v26 - v31 * 0.99330562))* (v87 - v29.__sinval * -(v26 - v31 * 0.99330562)));
  v33 = *(double *)(a5 + 72);
  v104 = *(double *)(a5 + 80);
  v34 = *(double *)(a5 + 88);
  v35 = *(double *)(a5 + 48);
  if (fabs(v35) >= 1.0)
  {
    v39 = *v7;
    if (v35 <= -1.0)
    {
      v37 = 0.0;
      v38 = atan2(v39, *(long double *)(a5 + 16)) + 0.0;
      v36 = 1.57079633;
    }
    else
    {
      v38 = atan2(-v39, -*(double *)(a5 + 16));
      v37 = 0.0;
      v36 = -1.57079633;
    }
  }
  else
  {
    v36 = asin(-v35);
    v37 = atan2(*(long double *)(a5 + 24), *(long double *)a5);
    v38 = atan2(*(long double *)(a5 + 56), *(long double *)(a5 + 64));
  }
  v40 = __sincos_stret(v36);
  v41 = __sincos_stret(v37);
  v42 = __sincos_stret(v38);
  v43 = v33 + v40.__cosval * v41.__cosval;
  v44 = v33;
  v45 = v104 + v40.__cosval * v41.__sinval;
  v90 = v43;
  v93 = v104 + v41.__cosval * v42.__cosval + v40.__sinval * v41.__sinval * v42.__sinval;
  v95 = v44 + v40.__sinval * v41.__cosval * v42.__sinval - v41.__sinval * v42.__cosval;
  v97 = v34 + v40.__cosval * v42.__sinval;
  v46 = sinh(v44 / 6378137.0);
  v47 = atan(v46);
  v48 = __sincos_stret(v47);
  v49 = __sincos_stret(v104 / 6378137.0);
  v50 = 6378137.0 / sqrt(v48.__sinval * -0.00669437999 * v48.__sinval + 1.0);
  v51 = v48.__cosval * (v50 - v34);
  v102 = v49.__sinval * v51;
  v105 = v49.__cosval * v51;
  v100 = v48.__sinval * -(v34 - v50 * 0.99330562);
  v52 = sinh(v90 / 6378137.0);
  v53 = atan(v52);
  v54 = __sincos_stret(v53);
  v55 = __sincos_stret(v45 / 6378137.0);
  v56 = 6378137.0 / sqrt(v54.__sinval * -0.00669437999 * v54.__sinval + 1.0);
  v57 = v54.__cosval * (v56 - (v34 - v40.__sinval));
  v91 = v55.__cosval * v57;
  v58 = v55.__sinval * v57;
  v59 = v54.__sinval * -(v34 - v40.__sinval - v56 * 0.99330562);
  v60 = sinh(v95 / 6378137.0);
  v61 = atan(v60);
  v62 = __sincos_stret(v61);
  v63 = __sincos_stret(v93 / 6378137.0);
  v64 = 6378137.0 / sqrt(v62.__sinval * -0.00669437999 * v62.__sinval + 1.0);
  v65 = v62.__cosval * (v64 - v97);
  v66 = v91 - v105;
  v67 = v58 - v102;
  v68 = v59 - v100;
  v69 = v63.__cosval * v65 - v105;
  v70 = v63.__sinval * v65 - v102;
  v71 = v62.__sinval * -(v97 - v64 * 0.99330562) - v100;
  v72 = atan2(v67, v91 - v105);
  v73 = atan2(-(v59 - v100), sqrt(v67 * v67 + v66 * v66));
  v74 = atan2((v67 * v71 - v68 * v70) * v67 - v66 * (v68 * v69 - v66 * v71), -(v67 * v68) * (v68 * v69 - v66 * v71)+ (v67 * v71 - v68 * v70) * -(v66 * v68)+ (v66 * v70 - v67 * v69) * (v66 * v66 + v67 * v67));
  *(double *)(a5 + 72) = v105;
  *(double *)(a5 + 80) = v102;
  *(double *)(a5 + 88) = v100;
  v75 = __sincos_stret(v72);
  v76 = __sincos_stret(v73);
  v77 = __sincos_stret(v74);
  *(double *)a5 = v75.__cosval * v76.__cosval;
  *(double *)(a5 + 8) = v75.__cosval * v76.__sinval * v77.__sinval - v75.__sinval * v77.__cosval;
  *(double *)(a5 + 16) = v75.__sinval * v77.__sinval + v75.__cosval * v76.__sinval * v77.__cosval;
  *(double *)(a5 + 24) = v75.__sinval * v76.__cosval;
  *(double *)(a5 + 32) = v75.__cosval * v77.__cosval + v75.__sinval * v76.__sinval * v77.__sinval;
  *(double *)(a5 + 40) = v75.__sinval * v76.__sinval * v77.__cosval - v75.__cosval * v77.__sinval;
  *(double *)(a5 + 48) = -v76.__sinval;
  *(double *)(a5 + 56) = v76.__cosval * v77.__sinval;
  *(double *)(a5 + 64) = v76.__cosval * v77.__cosval;
}

void g_interp_bspline3_mix2(int a1, double *a2, double *a3, void *a4, int a5, double a6, double a7, double a8)
{
  int v15;
  int v16;
  double v17;
  int v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double a;
  double v44;

  if ((a5 & 3) != 0)
    v15 = 0;
  else
    v15 = -1;
  if ((a5 & 3) == 3)
    v16 = 1;
  else
    v16 = v15;
  v42 = 1.0 / (double)(v16 + a1);
  v17 = a6 / v42;
  v18 = vcvtmd_s64_f64(v17);
  v19 = v17 - (double)v18;
  v20 = v19 * (v19 * v19);
  v21 = v20 * -0.166666667 + 0.0 + v19 * v19 * 0.5 + v19 * -0.5;
  v22 = v20 * 0.5 + 0.0 - v19 * v19 + v19 * 0.0;
  v23 = v20 * -0.5 + 0.0 + v19 * v19 * 0.5 + v19 * 0.5;
  v24 = v20 * 0.166666667 + 0.0 + v19 * v19 * 0.0 + v19 * 0.0;
  v25 = 0.0;
  v26 = 0.0;
  v27 = 0.0;
  v28 = 0.0;
  if (a2)
  {
    v37 = v24;
    v38 = v23;
    v39 = v22;
    v40 = v21;
    a = g_interp_get_a(v18 - 1, a1, a2, a5, a7, a8);
    v29 = g_interp_get_a(v18, a1, a2, a5, a7, a8);
    v30 = g_interp_get_a(v18 + 1, a1, a2, a5, a7, a8);
    v31 = g_interp_get_a(v18 + 2, a1, a2, a5, a7, a8);
    v23 = v38;
    v22 = v39;
    v21 = v40;
    v27 = v30;
    v26 = v29;
    v25 = a;
    v28 = v31;
    v24 = v37;
  }
  v32 = v21 + 0.166666667;
  v33 = v22 + 0.666666667;
  v34 = v23 + 0.166666667;
  v35 = v24 + 0.0;
  if (a4)
  {
    v44 = v25;
    v41 = v26;
    v36 = v27;
    bzero(a4, 8 * a1);
    g_interp_acc_wa(v18 - 1, a1, (double *)a4, a5, v32);
    g_interp_acc_wa(v18, a1, (double *)a4, a5, v33);
    g_interp_acc_wa(v18 + 1, a1, (double *)a4, a5, v34);
    g_interp_acc_wa(v18 + 2, a1, (double *)a4, a5, v35);
    v27 = v36;
    v26 = v41;
    v25 = v44;
  }
  if (a3)
    *a3 = ((v19 * v19 * 1.5 + 0.0 + v19 * -2.0 + 0.0) * v26
         + v25 * (v19 + v19 * v19 * -0.5 + 0.0 + -0.5)
         + v27 * (v19 + v19 * v19 * -1.5 + 0.0 + 0.5)
         + v28 * (v19 * v19 * 0.5 + 0.0 + v19 * 0.0 + 0.0))
        / v42;
}

double g_interp_get_a(int a1, int a2, double *a3, int a4, double result, double a6)
{
  int v6;

  switch(a4)
  {
    case 0:
      if (a1 < 0)
        return *a3 + (double)a1 * (a3[1] - *a3);
      v6 = a1 - a2;
      if (a1 >= a2)
        goto LABEL_12;
      return a3[a1];
    case 1:
      if (a1 < 0)
        goto LABEL_19;
      if (!a1)
        return result;
      v6 = a1 - a2;
      if (a1 <= a2)
        goto LABEL_20;
LABEL_12:
      result = a3[a2 - 1] + (double)(v6 + 1) * (a3[a2 - 1] - a3[a2 - 2]);
      break;
    case 2:
      if (a1 < 0)
        return *a3 + (double)a1 * (a3[1] - *a3);
      if (a1 < a2)
        return a3[a1];
      if (a1 == a2)
        return a6;
      return a6 + (double)(a1 - a2) * (a6 - a3[a2 - 1]);
    case 3:
      if (a1 < 0)
      {
LABEL_19:
        result = result + (double)a1 * (*a3 - result);
      }
      else if (a1)
      {
        if (a1 <= a2)
        {
LABEL_20:
          result = a3[a1 - 1];
        }
        else if (a2 + 1 == a1)
        {
          result = a6;
        }
        else
        {
          result = a6 + (double)(~a2 + a1) * (a6 - a3[a2 - 1]);
        }
      }
      break;
    default:
      __assert_rtn("g_interp_get_a", "g_interp.c", 518, "0");
  }
  return result;
}

double g_interp_acc_wa(int a1, int a2, double *a3, int a4, double result)
{
  int v5;
  uint64_t v6;
  double *v7;
  double v8;
  double *v9;
  double v10;
  uint64_t v11;
  uint64_t v12;

  switch(a4)
  {
    case 0:
      if (a1 < 0)
        goto LABEL_16;
      v5 = a1 - a2;
      if (a1 >= a2)
        goto LABEL_11;
      goto LABEL_7;
    case 1:
      if (a1 < 0)
        goto LABEL_17;
      if (!a1)
        return result;
      v5 = a1 - a2;
      if (a1 <= a2)
        goto LABEL_18;
LABEL_11:
      v7 = &a3[a2];
      v8 = *(v7 - 2) - result * (double)(v5 + 1);
      result = *(v7 - 1) + result * (double)(v5 + 2);
      *(v7 - 2) = v8;
      *(v7 - 1) = result;
      break;
    case 2:
      if (a1 < 0)
      {
LABEL_16:
        v10 = *a3 + result * (double)(1 - a1);
        result = a3[1] + result * (double)a1;
        *a3 = v10;
        a3[1] = result;
      }
      else if (a1 >= a2)
      {
        if (a1 != a2)
        {
          v12 = a2 - 1;
          result = a3[v12] - result * (double)(a1 - a2);
          a3[v12] = result;
        }
      }
      else
      {
LABEL_7:
        v6 = a1;
        result = a3[v6] + result;
        a3[v6] = result;
      }
      return result;
    case 3:
      if (a1 < 0)
      {
LABEL_17:
        result = *a3 + result * (double)a1;
        *a3 = result;
      }
      else if (a1)
      {
        if (a1 <= a2)
        {
LABEL_18:
          v11 = (a1 - 1);
          result = a3[v11] + result;
          a3[v11] = result;
        }
        else
        {
          v9 = &a3[a2];
          result = *(v9 - 1) - result * (double)(~a2 + a1);
          *(v9 - 1) = result;
        }
      }
      break;
    default:
      __assert_rtn("g_interp_acc_wa", "g_interp.c", 539, "0");
  }
  return result;
}

uint64_t vl_dom_dirs_read(const char *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  FILE *v5;
  FILE *v6;
  int64_t v7;
  int64_t v8;
  void *v9;
  FILE *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int64_t v17;
  size_t v18;
  uint64_t v19;
  size_t __nitems;
  int __ptr;

  v3 = vl_fio_open(a1, "rc", "DOMD");
  result = 1;
  __ptr = 1;
  if (v3)
  {
    v5 = *(FILE **)(v3 + 552);
    if (v5)
    {
      fread(&__ptr, 4uLL, 1uLL, v5);
      __nitems = 0;
      v6 = *(FILE **)(v3 + 552);
      if (v6)
        goto LABEL_4;
    }
    else
    {
      v11 = *(int *)(v3 + 544);
      if ((unint64_t)(v11 + 4) > *(_QWORD *)(v3 + 520))
      {
        printf("%sError : ", (const char *)&str_8_0);
        printf("Trying to read non existing data");
        putchar(10);
        LODWORD(v11) = *(_DWORD *)(v3 + 544);
      }
      *(_DWORD *)(v3 + 544) = v11 + 4;
      __nitems = 0;
      v6 = *(FILE **)(v3 + 552);
      if (v6)
      {
LABEL_4:
        fread(&__nitems, 8uLL, 1uLL, v6);
        v7 = __nitems;
        v8 = *(_QWORD *)(a2 + 16);
        if ((uint64_t)__nitems <= v8)
          goto LABEL_5;
        goto LABEL_13;
      }
    }
    v12 = *(_DWORD *)(v3 + 544);
    v13 = v12;
    if ((unint64_t)(v12 + 8) > *(_QWORD *)(v3 + 520))
    {
      printf("%sError : ", (const char *)&str_8_0);
      printf("Trying to read non existing data");
      putchar(10);
      v12 = *(_DWORD *)(v3 + 544);
      v13 = v12;
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v3 + 528) + v13);
    *(_DWORD *)(v3 + 544) = v12 + 8;
    v8 = *(_QWORD *)(a2 + 16);
    if (v7 <= v8)
    {
LABEL_5:
      *(_QWORD *)a2 = v7;
      v9 = *(void **)(a2 + 8);
      v10 = *(FILE **)(v3 + 552);
      if (v10)
      {
LABEL_6:
        fread(v9, 0x30uLL, v7, v10);
LABEL_24:
        vl_fio_close(v3);
        return 0;
      }
LABEL_21:
      v18 = 48 * v7;
      v19 = *(int *)(v3 + 544);
      if (v18 + v19 > *(_QWORD *)(v3 + 520))
      {
        printf("%sError : ", (const char *)&str_8_0);
        printf("Trying to read non existing data");
        putchar(10);
        v19 = *(int *)(v3 + 544);
      }
      memcpy(v9, (const void *)(*(_QWORD *)(v3 + 528) + v19), v18);
      *(_DWORD *)(v3 + 544) += v18;
      goto LABEL_24;
    }
LABEL_13:
    v14 = 2 * v8;
    v15 = v8 == 0;
    v16 = 5;
    if (!v15)
      v16 = v14;
    if (v16 <= v7)
      v17 = v7;
    else
      v17 = v16;
    if (v17)
      *(_QWORD *)(a2 + 8) = malloc_type_realloc(*(void **)(a2 + 8), 48 * v17, 0xEF13C9F5uLL);
    *(_QWORD *)(a2 + 16) = v17;
    *(_QWORD *)a2 = v7;
    v9 = *(void **)(a2 + 8);
    v10 = *(FILE **)(v3 + 552);
    if (v10)
      goto LABEL_6;
    goto LABEL_21;
  }
  return result;
}

uint64_t vl_rw_get_inv_filename(const char *a1, int a2, int a3, int a4, int a5, uint64_t a6, char *a7)
{
  int v14;
  _OWORD v15[3];
  __int16 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  if (parse_vl_path(a1, "meta:", (char *)v15, &v14)
    || parse_vl_path(a1, "metahttp:", (char *)v15, &v14))
  {
    printf("%sAborting : ", (const char *)&str_8_0);
    printf("Not support read track using meta tile");
    putchar(10);
    __assert_rtn("vl_rw_get_inv_filename_from_meta", "vl_map_rw.c", 645, "0");
  }
  sprintf(a7, "%s/tracks/%d/%d/%d/tracks_%d.vtrk", a1, a2, a3, a4, a5);
  return 0;
}

uint64_t parse_vl_path(const char *a1, char *__s, char *a3, int *a4)
{
  size_t v8;
  char *v10;
  char *v11;
  char v12[50];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v8 = (int)strlen(__s);
  if (strncmp(a1, __s, v8))
    return 0;
  if (!strncmp(a1, "meta", 4uLL))
  {
    v10 = (char *)&a1[v8];
    v11 = strchr(v10, 58);
    strncpy(a3, v10, v11 - v10);
    __strcpy_chk();
    *a4 = atoi(v12);
  }
  return 1;
}

uint64_t vl_map_read_mem_ex()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  int v6;
  _DWORD *v7;
  _DWORD *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  _BOOL4 v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  __int128 v26;
  unint64_t v27;
  int v28;
  _BOOL4 v29;
  char *v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unint64_t v37;
  char *v38;
  int v39;
  uint64_t v40;
  _QWORD *v41;
  size_t v42;
  void *v43;
  int v44;
  uint64_t v45;
  void **v46;
  void *v47;
  int v48;
  int v49;
  int v50;
  uint64_t *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  char *v58;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  _BOOL4 v71;
  int v72;
  char v73;
  char __src[32];
  uint64_t v75;
  _QWORD v76[570];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = v0;
  v76[568] = *MEMORY[0x24BDAC8D0];
  bzero(__src, 0x1200uLL);
  v73 = 0;
  v72 = 0;
  if (v2 < 4 || (v14 = *v4, v72 = *v4, (v2 & 0xFFFFFFFFFFFFFFFCLL) == 4) || v14 != 1414545741)
  {
    printf("%sError : ", (const char *)&str_8_0);
    printf("error reading header: %s", (const char *)&v72);
    putchar(10);
    return 0xFFFFFFFFLL;
  }
  if (v2 - 8 <= 0xF)
    return 0xFFFFFFFFLL;
  v15 = v4[1];
  if (v15 < 7)
  {
    v18 = v2 - 24;
    if (v2 - 24 < 4)
    {
      v21 = 0;
      LODWORD(v19) = 0;
      v20 = (char *)(v4 + 6);
      v16 = 2;
      goto LABEL_36;
    }
    v19 = v4[6];
    v20 = (char *)(v4 + 7);
    v18 = v2 - 28;
    v21 = (int)v19 > 0;
    if ((int)v19 >= 1)
    {
      v16 = 0;
      v22 = 0;
      v23 = &v75;
      v24 = v19;
      while (1)
      {
        if (!v22)
        {
          if (v18 >= 0x20)
          {
            v25 = v23 - 4;
            v26 = *((_OWORD *)v20 + 1);
            *(_OWORD *)v25 = *(_OWORD *)v20;
            *((_OWORD *)v25 + 1) = v26;
            if ((_DWORD)v16)
            {
              v18 -= 32;
              v20 += 32;
              goto LABEL_16;
            }
            if (v18 - 32 < 4)
            {
              v18 -= 32;
              v20 += 32;
            }
            else
            {
              *(_DWORD *)v23 = *((_DWORD *)v20 + 8);
              v27 = v18 - 36;
              if (v18 - 36 >= 4)
              {
                *((_DWORD *)v23 + 1) = *((_DWORD *)v20 + 9);
                v27 = v18 - 40;
                if (v18 - 40 >= 4)
                {
                  *((_DWORD *)v23 + 2) = *((_DWORD *)v20 + 10);
                  v27 = v18 - 44;
                  if (v18 - 44 >= 4)
                  {
                    *((_DWORD *)v23 + 3) = *((_DWORD *)v20 + 11);
                    v27 = v18 - 48;
                    if (v18 - 48 >= 8)
                    {
                      v23[2] = *((_QWORD *)v20 + 6);
                      v27 = v18 - 56;
                      if (v18 - 56 >= 8)
                      {
                        v23[3] = *((_QWORD *)v20 + 7);
                        v20 += 64;
                        v18 -= 64;
                        goto LABEL_16;
                      }
                      v20 += 56;
                    }
                    else
                    {
                      v20 += 48;
                    }
                  }
                  else
                  {
                    v20 += 44;
                  }
                }
                else
                {
                  v20 += 40;
                }
              }
              else
              {
                v20 += 36;
              }
              v18 = v27;
            }
          }
          v16 = 2;
        }
LABEL_16:
        v23 += 9;
        v22 = v16;
        if (!--v24)
        {
          v21 = 1;
          goto LABEL_36;
        }
      }
    }
    v16 = 0;
LABEL_36:
    if (v10)
    {
      *v8 = v19;
      v28 = v19;
      v29 = v21;
      memcpy(v10, __src, 72 * (int)v19);
      v21 = v29;
      LODWORD(v19) = v28;
    }
    if (!(_DWORD)v16)
    {
      if (v18 >= 4)
      {
        *(_DWORD *)(v13 + 216) = *(_DWORD *)v20;
        if (v18 - 4 >= 8)
        {
          *(_QWORD *)(v13 + 224) = *(_QWORD *)(v20 + 4);
          if (v18 - 12 >= 8)
          {
            *(_QWORD *)(v13 + 232) = *(_QWORD *)(v20 + 12);
            v30 = v20 + 20;
            v31 = v18 - 20;
            if (v18 - 20 >= 0x70)
            {
              v32 = *(_OWORD *)v30;
              v33 = *(_OWORD *)(v20 + 52);
              *(_OWORD *)(v13 + 256) = *(_OWORD *)(v20 + 36);
              *(_OWORD *)(v13 + 272) = v33;
              *(_OWORD *)(v13 + 240) = v32;
              v34 = *(_OWORD *)(v20 + 68);
              v35 = *(_OWORD *)(v20 + 84);
              v36 = *(_OWORD *)(v20 + 116);
              *(_OWORD *)(v13 + 320) = *(_OWORD *)(v20 + 100);
              *(_OWORD *)(v13 + 336) = v36;
              *(_OWORD *)(v13 + 288) = v34;
              *(_OWORD *)(v13 + 304) = v35;
              v30 = v20 + 132;
              v31 = v18 - 132;
              if (v18 - 132 >= 8)
              {
                if (v12)
                  *(_QWORD *)v12 = *(_QWORD *)v30;
                v30 = v20 + 140;
                v31 = v18 - 140;
                if (v18 - 140 > 0x6F)
                {
                  v60 = *(_OWORD *)v30;
                  v61 = *(_OWORD *)(v20 + 156);
                  *(_OWORD *)(v12 + 40) = *(_OWORD *)(v20 + 172);
                  *(_OWORD *)(v12 + 24) = v61;
                  *(_OWORD *)(v12 + 8) = v60;
                  v62 = *(_OWORD *)(v20 + 188);
                  v63 = *(_OWORD *)(v20 + 204);
                  v64 = *(_OWORD *)(v20 + 220);
                  *(_OWORD *)(v12 + 104) = *(_OWORD *)(v20 + 236);
                  *(_OWORD *)(v12 + 88) = v64;
                  *(_OWORD *)(v12 + 72) = v63;
                  *(_OWORD *)(v12 + 56) = v62;
                  v38 = v20 + 252;
                  v37 = v18 - 252;
                  if (v15 < 1)
                  {
                    v39 = 0;
                    v16 = 0;
                    goto LABEL_54;
                  }
                  if (v37 >= 4)
                  {
                    *(_DWORD *)(v13 + 352) = *((_DWORD *)v20 + 63);
                    v37 = v18 - 256;
                    if (v18 - 256 > 3)
                    {
                      *(_DWORD *)(v13 + 356) = *((_DWORD *)v20 + 64);
                      if (v15 < 3)
                      {
                        v16 = 0;
                      }
                      else
                      {
                        if (v18 - 260 >= 4)
                        {
                          *(_DWORD *)(v13 + 456) = *((_DWORD *)v20 + 65);
                          if (v18 - 264 >= 4)
                          {
                            v16 = 0;
                            *(_DWORD *)(v13 + 460) = *((_DWORD *)v20 + 66);
                            v20 += 268;
                            v18 -= 268;
                            v39 = 1;
                          }
                          else
                          {
                            v20 += 264;
                            v16 = 2;
                            v39 = 1;
                            v18 -= 264;
                          }
                          goto LABEL_56;
                        }
                        v16 = 2;
                      }
                      v39 = 1;
                      v18 -= 260;
                      v20 += 260;
                      goto LABEL_56;
                    }
                    v38 = v20 + 256;
                  }
                  v16 = 2;
                  goto LABEL_53;
                }
              }
            }
            v16 = 2;
            v18 = v31;
            v20 = v30;
          }
          else
          {
            v20 += 12;
            v16 = 2;
            v18 -= 12;
          }
        }
        else
        {
          v16 = 2;
          v18 -= 4;
          v20 += 4;
        }
      }
      else
      {
        v16 = 2;
      }
    }
    if (v15 > 0)
    {
      v37 = v18;
      v38 = v20;
LABEL_53:
      v39 = 1;
LABEL_54:
      v18 = v37;
      v20 = v38;
      goto LABEL_56;
    }
    v39 = 0;
LABEL_56:
    if (v6)
      return v16;
    v69 = v39;
    v71 = v21;
    v70 = v19;
    if (v21)
    {
      v40 = (int)v19;
      v41 = v76;
      do
      {
        v42 = *(v41 - 1);
        v43 = malloc_type_malloc(v42, 0xDB0818EuLL);
        *v41 = v43;
        if (!(_DWORD)v16)
        {
          if (v18 < v42)
          {
            LODWORD(v16) = 2;
          }
          else
          {
            if (v43)
              memcpy(v43, v20, v42);
            LODWORD(v16) = 0;
            v20 += v42;
            v18 -= v42;
          }
        }
        v41 += 9;
        --v40;
      }
      while (v40);
    }
    if ((_DWORD)v16)
    {
      v44 = 0;
    }
    else
    {
      v68 = vl_map_block_decode_tag(v13, "pos_list", __src, v70);
      v67 = vl_map_block_decode_tag(v13 + 24, "normal_list", __src, v70);
      v66 = vl_map_block_decode_tag(v13 + 48, "size_list", __src, v70);
      v65 = vl_map_block_decode_tag(v13 + 72, "ori_list", __src, v70);
      v48 = vl_map_block_decode_tag(v13 + 96, "view_list", __src, v70);
      v49 = vl_map_block_decode_tag(v13 + 120, "view_angle_list", __src, v70);
      v50 = vl_map_block_decode_tag(v13 + 144, "label_list", __src, v70);
      v51 = (uint64_t *)(v13 + 192);
      v52 = vl_map_block_decode_tag(v13 + 192, "desc", __src, v70);
      v44 = (vl_map_block_decode_tag(v12 + 120, "height_list", __src, v70) | v52 | v50 | v49 | v48 | v65 | v66 | v67 | v68) != 0;
      if (v69)
      {
        v53 = vl_map_block_decode_tag(v13 + 360, "pca_eigen_vectors", __src, v70);
        if (vl_map_block_decode_tag(v13 + 384, "pca_mean", __src, v70) | v53)
          v44 = 1;
        if (v15 >= 3)
        {
          v54 = vl_map_block_decode_tag(v13 + 408, "img_index_list_size", __src, v70);
          v55 = vl_map_block_decode_tag(v13 + 432, "img_index_list", __src, v70);
          if (vl_map_block_decode_tag(v13 + 464, "global_desc", __src, v70) | v55 | v54)
            v44 = 1;
          if (v15 != 3)
          {
            v56 = vl_map_block_decode_tag(v13 + 512, "cam_pos", __src, v70);
            if (vl_map_block_decode_tag(v13 + 536, "cam_phi", __src, v70) | v56)
              v44 = 1;
          }
        }
      }
      if (!v71)
        return v44 | v16;
      v57 = v70;
      v58 = __src;
      while (strcmp(v58, "desc"))
      {
        v58 += 72;
        if (!--v57)
          goto LABEL_68;
      }
      if (*((_DWORD *)v58 + 10) == 15 && v44 == 0)
        v44 = vl_map_desc_decode_mst(v51);
    }
LABEL_68:
    if (v71)
    {
      v45 = v70;
      v46 = (void **)v76;
      do
      {
        v47 = *v46;
        v46 += 9;
        free(v47);
        --v45;
      }
      while (v45);
    }
    return v44 | v16;
  }
  return v15 | 0x10000u;
}

uint64_t split_track_path(const char *a1, char *a2, char *a3, char *a4, char *a5, char *a6)
{
  uint64_t result;
  const char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  size_t v21;

  if (!strncmp(a1, "blob", 4uLL))
  {
    v13 = a1 + 5;
    v14 = strchr((char *)a1 + 5, 58);
    v15 = v14 - a1 - 5;
  }
  else if (!strncmp(a1, "bithub", 6uLL))
  {
    v13 = a1 + 7;
    v14 = strchr((char *)a1 + 7, 58);
    v15 = v14 - a1 - 7;
  }
  else
  {
    if (strncmp(a1, "https://3dv-data.geo.apple.com/blob", 0x23uLL))
      return 0;
    v13 = a1 + 36;
    v14 = strchr((char *)a1 + 36, 47);
    v15 = v14 - a1 - 36;
  }
  strncpy(a2, v13, v15);
  a2[v15] = 0;
  v16 = strchr(v14 + 1, 47);
  strncpy(a4, a1, v16 - a1);
  a4[v16 - a1] = 0;
  strncpy(a3, v14 + 1, (size_t)&v16[~(unint64_t)v14]);
  v16[~(unint64_t)v14 + (_QWORD)a3] = 0;
  result = strncmp(v16, "/t/", 3uLL);
  if ((_DWORD)result)
  {
    v17 = strchr(v16 + 1, 47);
    v18 = strchr(v17 + 1, 47);
    v19 = strchr(v18 + 1, 47);
    v20 = strchr(v19 + 1, 47);
    v21 = v20 - (v16 + 8);
    strncpy(a5, v16 + 8, v21);
    a5[v21] = 0;
    strncpy(a6, v20 + 1, 0x200uLL);
    return 1;
  }
  return result;
}

FILE *vl_open_track(const char *a1, const char *a2)
{
  BOOL v4;
  FILE *v5;
  const char *v6;
  char __filename[512];
  char v9[512];
  char v10[512];
  char v11[512];
  char v12[512];
  char v13[512];
  _QWORD v14[65];

  v14[64] = *MEMORY[0x24BDAC8D0];
  if (!split_track_path(a1, (char *)v14, v13, v12, v11, v10)
    || (v14[0] == 0x5F6C736C5F766433 ? (v4 = v14[1] == 0x31306775626564) : (v4 = 0), v4))
  {
    v6 = "Open track file from: %s";
    goto LABEL_9;
  }
  __sprintf_chk(__filename, 0, 0x200uLL, "%s/t/%s", v12, v9);
  v5 = fopen(__filename, a2);
  printf("Verbose : ");
  printf("Open track file from: %s", __filename);
  putchar(10);
  if (!v5)
  {
    v6 = "Open track file failed, second try from: %s";
LABEL_9:
    v5 = fopen(a1, a2);
    printf("Verbose : ");
    printf(v6, a1);
    putchar(10);
  }
  return v5;
}

uint64_t vl_map_load_fn(const char *a1, void **a2, size_t *a3, int a4)
{
  FILE *v7;
  FILE *v8;
  size_t *v10;
  size_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int __ptr;
  char v17;

  v7 = vl_open_track(a1, "r");
  if (!v7)
    return 1;
  v8 = v7;
  v17 = 0;
  __ptr = 0;
  if (fread(&__ptr, 1uLL, 4uLL, v7) != 4)
    goto LABEL_10;
  if (__ptr != 1414545741)
  {
    printf("%sError : ", (const char *)&str_8_0);
    printf("error reading header: %s", (const char *)&__ptr);
    putchar(10);
LABEL_10:
    fclose(v8);
    return 0xFFFFFFFFLL;
  }
  v15 = 0;
  if (fread(&v15, 4uLL, 1uLL, v8) != 1)
    goto LABEL_10;
  v14 = 0;
  if (fread(&v14, 8uLL, 1uLL, v8) != 1)
    goto LABEL_10;
  v13 = 0;
  if (fread(&v13, 8uLL, 1uLL, v8) != 1 || fseek(v8, -24, 1))
    goto LABEL_10;
  v10 = (size_t *)&v14;
  if (!a4)
    v10 = (size_t *)&v13;
  v11 = *v10;
  *a3 = *v10;
  v12 = malloc_type_malloc(v11, 0x6EA4917EuLL);
  *a2 = v12;
  if (fread(v12, *a3, 1uLL, v8) == 1)
  {
    fclose(v8);
    return 0;
  }
  else
  {
    free(*a2);
    fclose(v8);
    return 2;
  }
}

uint64_t vl_map_block_decode_tag(uint64_t a1, char *__s2, char *__s1, int a4)
{
  uint64_t v7;
  int v9;
  uint8_t *v10;
  unint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  unsigned int v14;

  if (a4 < 1)
    return 0x80000000;
  v7 = a4;
  while (strcmp(__s1, __s2))
  {
    __s1 += 72;
    if (!--v7)
      return 0x80000000;
  }
  v9 = *((_DWORD *)__s1 + 11);
  if (v9)
  {
    if (v9 == 1)
    {
      v11 = *((_QWORD *)__s1 + 7);
      v10 = (uint8_t *)*((_QWORD *)__s1 + 8);
      v12 = (uint8_t *)malloc_type_malloc(*((_QWORD *)__s1 + 6), 0x9851C6B8uLL);
      *((_QWORD *)__s1 + 8) = v12;
      if (v11 >= 8 && v11 - 8 >= *(_QWORD *)v10)
      {
        v13 = *((_QWORD *)__s1 + 6);
        if (!v13
          || compression_decode_buffer(v12, *((_QWORD *)__s1 + 6), v10 + 8, *(_QWORD *)v10, 0, COMPRESSION_LZFSE) == v13)
        {
          free(v10);
          v14 = *((_DWORD *)__s1 + 10);
          return ((uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, float))decode_fncs[v14])(a1, *((unsigned int *)__s1 + 8), *((_QWORD *)__s1 + 8), *((_QWORD *)__s1 + 6), *((float *)__s1 + 9));
        }
      }
      free(v10);
    }
  }
  else
  {
    v14 = *((_DWORD *)__s1 + 10);
    if (v14 <= 0xF)
      return ((uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, float))decode_fncs[v14])(a1, *((unsigned int *)__s1 + 8), *((_QWORD *)__s1 + 8), *((_QWORD *)__s1 + 6), *((float *)__s1 + 9));
  }
  return 1;
}

uint64_t vl_map_desc_decode_mst(uint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  size_t v17;
  int v18;
  unint64_t v19;
  BOOL v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  __darwin_time_t v25;
  __darwin_time_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  _BYTE *v32;
  char v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  char v41;
  _BYTE *v42;
  unsigned int *v43;
  unsigned int v44;
  _BYTE *v45;
  unint64_t v46;
  unsigned int v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  __darwin_time_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t tv_usec;
  __darwin_time_t tv_sec;
  uint64_t v62;
  timeval v63;
  unint64_t v64;

  *(_QWORD *)&v63.tv_usec = 0;
  v64 = 0;
  v63.tv_sec = 0;
  gettimeofday(&v63, 0);
  v2 = *a1;
  if ((unint64_t)*a1 < 4
    || (v3 = v2 & 0xFFFFFFFFFFFFFFFCLL, (v2 & 0xFFFFFFFFFFFFFFFCLL) == 4)
    || v3 == 8
    || v3 == 12)
  {
    v4 = 0;
    v5 = 1;
    goto LABEL_6;
  }
  v4 = 0;
  v5 = 1;
  if (v3 != 16)
  {
    v7 = (int *)a1[1];
    if (*v7 <= 0)
    {
      tv_usec = v63.tv_usec;
      tv_sec = v63.tv_sec;
      v8 = v7[1];
      v9 = v7[2];
      v11 = v7[3];
      v10 = v7[4];
      v12 = v2 - 20;
      v13 = (uint64_t)(v7 + 5);
      v58 = v7[2];
      v59 = v9 * v8;
      v14 = ((int)v9 * (int)v8 + v10 - 1) / v10;
      v15 = v11 + 1;
      v16 = v10 * (v11 + 1);
      v62 = v8;
      v17 = (v58 + 2) * v8;
      v4 = (char *)malloc_type_malloc(v17, 0xD7F30E8BuLL);
      v18 = huff_decompress(v13, v14, &v64, v16, v4, v17);
      if (v12 >= v64)
        v19 = v64;
      else
        v19 = 0;
      if (v17)
        v20 = v4 == 0;
      else
        v20 = 0;
      if (v20 || (v21 = v17 >= v18, v22 = v17 - v18, !v21))
      {
        if (v12 >= v64)
          __assert_rtn("vl_map_desc_decode_mst", "vl_map_rw.c", 1998, "!buf2.err");
LABEL_61:
        __assert_rtn("vl_map_desc_decode_mst", "vl_map_rw.c", 1997, "!buf.err");
      }
      if (v12 < v64)
        goto LABEL_61;
      v23 = v13 + v19;
      v57 = v18;
      v24 = &v4[v18];
      v63.tv_sec = 0;
      *(_QWORD *)&v63.tv_usec = 0;
      gettimeofday(&v63, 0);
      v25 = v63.tv_usec + 1000000 * v63.tv_sec;
      printf("Verbose (toc) : ");
      printf("vl_map_desc_decode_mst: desc decompress");
      printf(": %f ms", (float)((float)(-1000000 * tv_sec - tv_usec + v25) / 1000.0));
      putchar(10);
      if (2 * v62 != (int)huff_decompress(v23, 2 * v62, 0, 8, v24, v22))
        __assert_rtn("vl_map_desc_decode_mst", "vl_map_rw.c", 2007, "bytes_written == n * sizeof(uint16_t)");
      if (v22 < 2 * v62)
        __assert_rtn("vl_map_desc_decode_mst", "vl_map_rw.c", 2012, "!buf2.err");
      v63.tv_sec = 0;
      *(_QWORD *)&v63.tv_usec = 0;
      gettimeofday(&v63, 0);
      v26 = v63.tv_usec + 1000000 * v63.tv_sec;
      printf("Verbose (toc) : ");
      printf("vl_map_desc_decode_mst: parent array decompress");
      printf(": %f ms", (float)((float)(v26 - v25) / 1000.0));
      putchar(10);
      v27 = *a1;
      v28 = a1[2];
      if (v28 < v59)
      {
        v29 = 2 * v28;
        v20 = v28 == 0;
        v30 = 256;
        if (!v20)
          v30 = v29;
        if (v30 <= v59)
          v31 = v59;
        else
          v31 = v30;
        if (v31)
          a1[1] = (uint64_t)malloc_type_realloc((void *)a1[1], v31, 0x5DAF2424uLL);
        a1[2] = v31;
      }
      v32 = (_BYTE *)a1[1];
      if (v59 > v27)
      {
        bzero(&v32[*a1], v59 - v27);
        v32 = (_BYTE *)a1[1];
      }
      *a1 = v59;
      v33 = 8 - v11;
      v34 = 1 << (7 - v11);
      if ((int)v62 <= 1)
      {
        if ((int)v58 >= 1)
        {
          v50 = 0;
          v51 = 0;
          v52 = v58;
          v53 = (unsigned int *)v4;
          do
          {
            if (v51 <= v11)
            {
              v54 = *v53++;
              v50 |= (unint64_t)bswap32(v54) << (32 - v51);
              v51 += 32;
            }
            *v32++ = (v50 >> (63 - v11) << v33) + v34;
            v50 <<= v15;
            v51 -= v15;
            --v52;
          }
          while (v52);
        }
      }
      else
      {
        v35 = *(unsigned __int16 *)v24;
        v36 = v62 - 1;
        v37 = v57 + 2;
        do
        {
          v35 += *(unsigned __int16 *)&v4[v37];
          *(_WORD *)&v4[v37] = v35;
          v37 += 2;
          --v36;
        }
        while (v36);
        if ((int)v9 > 0)
        {
          v38 = 0;
          v39 = 0;
          v40 = 0;
          v41 = 63 - v11;
          v42 = &v32[v9];
          v43 = (unsigned int *)v4;
          do
          {
            if (v40 <= v11)
            {
              v44 = *v43++;
              v39 |= (unint64_t)bswap32(v44) << (32 - v40);
              v40 += 32;
            }
            v32[v38] = (v39 >> v41 << v33) + v34;
            v39 <<= v15;
            v40 -= v15;
            v45 = v42;
            v46 = 1;
            do
            {
              if (v40 <= v11)
              {
                v47 = *v43++;
                v39 |= (unint64_t)bswap32(v47) << (32 - v40);
                v40 += 32;
              }
              v48 = v39 >> v41;
              if ((int)(v39 >> v41) < 1 || 2 << v11 <= (int)v48)
                __assert_rtn("_desc_unpack", "vl_map_rw.c", 1718, "diff > 0 && diff < 2 * zero");
              if (v46 <= *(unsigned __int16 *)&v24[2 * v46])
                __assert_rtn("_desc_unpack", "vl_map_rw.c", 1722, "parent[i] < i");
              v49 = (-1 << v11)
                  + v48
                  + (v32[v38 + (int)v9 * (unint64_t)*(unsigned __int16 *)&v24[2 * v46]] >> v33);
              if (v49 < 0)
                __assert_rtn("_desc_unpack", "vl_map_rw.c", 1726, "val + diff >= 0");
              *v45 = ((_BYTE)v49 << v33) + v34;
              ++v46;
              v39 <<= v15;
              v40 -= v15;
              v45 += v9;
            }
            while (v62 != v46);
            ++v38;
            ++v42;
          }
          while (v38 != v9);
        }
      }
      v63.tv_sec = 0;
      *(_QWORD *)&v63.tv_usec = 0;
      gettimeofday(&v63, 0);
      v55 = v63.tv_sec;
      v56 = v63.tv_usec;
      printf("Verbose (toc) : ");
      printf("vl_map_desc_decode_mst: unpack");
      printf(": %f ms", (float)((float)(1000000 * v55 - v26 + v56) / 1000.0));
      putchar(10);
      v5 = 0;
    }
  }
LABEL_6:
  free(v4);
  return v5;
}

uint64_t decode_pos3f_list(uint64_t a1, int a2, char *__src, unint64_t a4)
{
  char *v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v5 = __src;
  v7 = a4 - 4;
  if (a4 < 4)
  {
    v9 = 0;
    v8 = 2;
    v7 = a4;
    v10 = *(_QWORD *)(a1 + 16);
    if (v10 >= 0)
      goto LABEL_13;
  }
  else
  {
    v8 = 0;
    v5 = __src + 4;
    v9 = *(int *)__src;
    v10 = *(_QWORD *)(a1 + 16);
    if (v10 >= v9)
      goto LABEL_13;
  }
  v11 = 2 * v10;
  v12 = v10 == 0;
  v13 = 21;
  if (!v12)
    v13 = v11;
  if (v13 <= v9)
    v14 = v9;
  else
    v14 = v13;
  if (v14)
    *(_QWORD *)(a1 + 8) = malloc_type_realloc(*(void **)(a1 + 8), 12 * v14, 0x2AE914C0uLL);
  *(_QWORD *)(a1 + 16) = v14;
LABEL_13:
  *(_QWORD *)a1 = v9;
  if (a4 >= 4)
  {
    if (v7 >= 12 * v9)
    {
      v15 = *(void **)(a1 + 8);
      if (v15)
        memcpy(v15, v5, 12 * v9);
      return 0;
    }
    else
    {
      return 2;
    }
  }
  return v8;
}

uint64_t decode_pos2f_list(uint64_t a1, int a2, char *__src, unint64_t a4)
{
  char *v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v5 = __src;
  v7 = a4 - 4;
  if (a4 < 4)
  {
    v9 = 0;
    v8 = 2;
    v7 = a4;
    v10 = *(_QWORD *)(a1 + 16);
    if (v10 >= 0)
      goto LABEL_13;
  }
  else
  {
    v8 = 0;
    v5 = __src + 4;
    v9 = *(int *)__src;
    v10 = *(_QWORD *)(a1 + 16);
    if (v10 >= v9)
      goto LABEL_13;
  }
  v11 = 2 * v10;
  v12 = v10 == 0;
  v13 = 32;
  if (!v12)
    v13 = v11;
  if (v13 <= v9)
    v14 = v9;
  else
    v14 = v13;
  if (v14)
    *(_QWORD *)(a1 + 8) = malloc_type_realloc(*(void **)(a1 + 8), 8 * v14, 0xDFCCD919uLL);
  *(_QWORD *)(a1 + 16) = v14;
LABEL_13:
  *(_QWORD *)a1 = v9;
  if (a4 >= 4)
  {
    if (v7 >= 8 * v9)
    {
      v15 = *(void **)(a1 + 8);
      if (v15)
        memcpy(v15, v5, 8 * v9);
      return 0;
    }
    else
    {
      return 2;
    }
  }
  return v8;
}

uint64_t decode_float_list(uint64_t a1, int a2, char *__src, unint64_t a4)
{
  char *v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v5 = __src;
  v7 = a4 - 4;
  if (a4 < 4)
  {
    v9 = 0;
    v8 = 2;
    v7 = a4;
    v10 = *(_QWORD *)(a1 + 16);
    if (v10 >= 0)
      goto LABEL_13;
  }
  else
  {
    v8 = 0;
    v5 = __src + 4;
    v9 = *(int *)__src;
    v10 = *(_QWORD *)(a1 + 16);
    if (v10 >= v9)
      goto LABEL_13;
  }
  v11 = 2 * v10;
  v12 = v10 == 0;
  v13 = 64;
  if (!v12)
    v13 = v11;
  if (v13 <= v9)
    v14 = v9;
  else
    v14 = v13;
  if (v14)
    *(_QWORD *)(a1 + 8) = malloc_type_realloc(*(void **)(a1 + 8), 4 * v14, 0x1FB4A5AuLL);
  *(_QWORD *)(a1 + 16) = v14;
LABEL_13:
  *(_QWORD *)a1 = v9;
  if (a4 >= 4)
  {
    if (v7 >= 4 * v9)
    {
      v15 = *(void **)(a1 + 8);
      if (v15)
        memcpy(v15, v5, 4 * v9);
      return 0;
    }
    else
    {
      return 2;
    }
  }
  return v8;
}

uint64_t decode_ushort_list(uint64_t a1, int a2, char *__src, unint64_t a4)
{
  char *v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v5 = __src;
  v7 = a4 - 4;
  if (a4 < 4)
  {
    v9 = 0;
    v8 = 2;
    v7 = a4;
    v10 = *(_QWORD *)(a1 + 16);
    if (v10 >= 0)
      goto LABEL_13;
  }
  else
  {
    v8 = 0;
    v5 = __src + 4;
    v9 = *(int *)__src;
    v10 = *(_QWORD *)(a1 + 16);
    if (v10 >= v9)
      goto LABEL_13;
  }
  v11 = 2 * v10;
  v12 = v10 == 0;
  v13 = 128;
  if (!v12)
    v13 = v11;
  if (v13 <= v9)
    v14 = v9;
  else
    v14 = v13;
  if (v14)
    *(_QWORD *)(a1 + 8) = malloc_type_realloc(*(void **)(a1 + 8), 2 * v14, 0xC69F78ABuLL);
  *(_QWORD *)(a1 + 16) = v14;
LABEL_13:
  *(_QWORD *)a1 = v9;
  if (a4 >= 4)
  {
    if (v7 >= 2 * v9)
    {
      v15 = *(void **)(a1 + 8);
      if (v15)
        memcpy(v15, v5, 2 * v9);
      return 0;
    }
    else
    {
      return 2;
    }
  }
  return v8;
}

uint64_t decode_uchar_list(uint64_t a1, int a2, char *__src, unint64_t a4)
{
  char *v5;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  size_t v14;
  void *v15;

  v5 = __src;
  v7 = a4 - 4;
  if (a4 < 4)
  {
    v9 = 0;
    v8 = 2;
    v7 = a4;
    v10 = *(_QWORD *)(a1 + 16);
    if (v10 >= 0)
      goto LABEL_13;
  }
  else
  {
    v8 = 0;
    v5 = __src + 4;
    v9 = *(int *)__src;
    v10 = *(_QWORD *)(a1 + 16);
    if (v10 >= v9)
      goto LABEL_13;
  }
  v11 = 2 * v10;
  v12 = v10 == 0;
  v13 = 256;
  if (!v12)
    v13 = v11;
  if (v13 <= v9)
    v14 = v9;
  else
    v14 = v13;
  if (v14)
    *(_QWORD *)(a1 + 8) = malloc_type_realloc(*(void **)(a1 + 8), v14, 0xB56A7CCCuLL);
  *(_QWORD *)(a1 + 16) = v14;
LABEL_13:
  *(_QWORD *)a1 = v9;
  if (a4 >= 4)
  {
    if (v7 >= v9)
    {
      v15 = *(void **)(a1 + 8);
      if (v15)
        memcpy(v15, v5, v9);
      return 0;
    }
    else
    {
      return 2;
    }
  }
  return v8;
}

uint64_t decode_pos3f_list_ff(uint64_t a1, int a2, int *a3, unint64_t a4)
{
  int v7;
  uint64_t v8;
  int8x16_t *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  __int32 *v21;
  int8x16_t *v22;
  __int32 v23;
  _QWORD v24[3];
  uint64_t v25;

  v24[0] = a3;
  if (a4 < 4)
    return 2;
  v7 = *a3;
  v24[1] = a3 + 1;
  v24[2] = a4 - 4;
  v8 = v7;
  v9 = (int8x16_t *)malloc_type_malloc(4 * v7, 0x100004052888210uLL);
  v10 = *(_QWORD *)(a1 + 16);
  if (v10 < v7)
  {
    v11 = 2 * v10;
    v12 = v10 == 0;
    v13 = 21;
    if (!v12)
      v13 = v11;
    if (v13 <= v8)
      v14 = v8;
    else
      v14 = v13;
    if (v14)
      *(_QWORD *)(a1 + 8) = malloc_type_realloc(*(void **)(a1 + 8), 12 * v14, 0x2ADF69EBuLL);
    *(_QWORD *)(a1 + 16) = v14;
  }
  v25 = 0;
  *(_QWORD *)a1 = v8;
  float_frac_decompress(v9, v8, a2, (uint64_t)v24);
  if ((int)v8 <= 0)
  {
    float_frac_decompress(v9, v8, a2, (uint64_t)v24);
    float_frac_decompress(v9, v8, a2, (uint64_t)v24);
  }
  else
  {
    v15 = 0;
    v16 = *(_DWORD **)(a1 + 8);
    v17 = v8;
    v18 = 4 * v8;
    do
    {
      *v16 = v9->i32[v15 / 4];
      v16 += 3;
      v15 += 4;
    }
    while (v18 != v15);
    float_frac_decompress(v9, v8, a2, (uint64_t)v24);
    v19 = 0;
    v20 = (_DWORD *)(*(_QWORD *)(a1 + 8) + 4);
    do
    {
      *v20 = v9->i32[v19 / 4];
      v20 += 3;
      v19 += 4;
    }
    while (v18 != v19);
    float_frac_decompress(v9, v8, a2, (uint64_t)v24);
    v21 = (__int32 *)(*(_QWORD *)(a1 + 8) + 8);
    v22 = v9;
    do
    {
      v23 = v22->i32[0];
      v22 = (int8x16_t *)((char *)v22 + 4);
      *v21 = v23;
      v21 += 3;
      --v17;
    }
    while (v17);
  }
  free(v9);
  return v25;
}

uint64_t decode_hm_ff(uint64_t a1, int a2, unsigned int *a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t *v14;
  uint64_t v15;
  float32x4_t *v16;
  float32x4_t v17;
  int8x16_t v18;
  uint64_t v19;
  int8x16_t v20;
  uint64_t v21;
  float *v22;
  float v23;
  _QWORD v24[3];
  uint64_t v25;

  v24[0] = a3;
  if (a4 < 4)
    return 2;
  v7 = (int)*a3;
  v8 = *a3;
  v24[1] = a3 + 1;
  v24[2] = a4 - 4;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 < v7)
  {
    v10 = 2 * v9;
    v11 = v9 == 0;
    v12 = 64;
    if (!v11)
      v12 = v10;
    if (v12 <= v7)
      v13 = v7;
    else
      v13 = v12;
    if (v13)
      *(_QWORD *)(a1 + 8) = malloc_type_realloc(*(void **)(a1 + 8), 4 * v13, 0x6C616311uLL);
    *(_QWORD *)(a1 + 16) = v13;
  }
  v25 = 0;
  *(_QWORD *)a1 = v7;
  float_frac_decompress(*(int8x16_t **)(a1 + 8), v8, a2, (uint64_t)v24);
  if ((int)v8 >= 1)
  {
    v14 = *(float32x4_t **)(a1 + 8);
    if (v7 < 8)
    {
      v15 = 0;
      goto LABEL_18;
    }
    v15 = v8 & 0x7FFFFFF8;
    v16 = v14 + 1;
    v17.i64[0] = 0x6000000060000000;
    v17.i64[1] = 0x6000000060000000;
    v18 = (int8x16_t)vdupq_n_s32(0x7F7FFFFFu);
    v19 = v8 & 0xFFFFFFF8;
    do
    {
      v20 = vbslq_s8((int8x16_t)vceqq_f32(*v16, v17), v18, *(int8x16_t *)v16);
      v16[-1] = (float32x4_t)vbslq_s8((int8x16_t)vceqq_f32(v16[-1], v17), v18, (int8x16_t)v16[-1]);
      *v16 = (float32x4_t)v20;
      v16 += 2;
      v19 -= 8;
    }
    while (v19);
    if (v15 != v8)
    {
LABEL_18:
      v21 = v8 - v15;
      v22 = &v14->f32[v15];
      do
      {
        v23 = *v22;
        if (*v22 == 3.6893e19)
          v23 = 3.4028e38;
        *v22++ = v23;
        --v21;
      }
      while (v21);
    }
  }
  return v25;
}

uint64_t decode_ang_fix(uint64_t a1, char a2, int *a3, unint64_t a4, double a5)
{
  unint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t *v16;
  uint64_t v17;
  float32x4_t v18;
  uint16x8_t *v19;
  float32x4_t *v20;
  float32x4_t v21;
  uint64_t v22;
  uint16x8_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  uint64_t v28;
  float *v29;
  unsigned __int16 *v30;
  unsigned int v31;

  v5 = a4 - 4;
  if (a4 < 4)
    return 2;
  v10 = *a3;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 < v10)
  {
    v12 = 2 * v11;
    v13 = v11 == 0;
    v14 = 64;
    if (!v13)
      v14 = v12;
    if (v14 <= v10)
      v15 = *a3;
    else
      v15 = v14;
    if (v15)
      *(_QWORD *)(a1 + 8) = malloc_type_realloc(*(void **)(a1 + 8), 4 * v15, 0x3BEEFAB5uLL);
    *(_QWORD *)(a1 + 16) = v15;
  }
  *(_QWORD *)a1 = v10;
  if (v5 < 2 * v10)
    return 2;
  if ((int)v10 >= 1)
  {
    v16 = *(float32x4_t **)(a1 + 8);
    *(float *)&a5 = 6.2832 / (float)(1 << a2);
    if (v10 >= 0x10)
    {
      v17 = v10 & 0x7FFFFFF0;
      v18 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
      v19 = (uint16x8_t *)(a3 + 5);
      v20 = v16 + 2;
      v21.i64[0] = 0x3F0000003F000000;
      v21.i64[1] = 0x3F0000003F000000;
      v22 = v10 & 0xFFFFFFF0;
      do
      {
        v23 = v19[-1];
        v24 = vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(*v19)), v21);
        v25 = vmlaq_f32((float32x4_t)0, v18, vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v23.i8)), v21));
        v26 = vmlaq_f32((float32x4_t)0, v18, vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v23)), v21));
        v27 = vmlaq_f32((float32x4_t)0, v18, vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v19->i8)), v21));
        v20[-2] = v25;
        v20[-1] = v26;
        *v20 = v27;
        v20[1] = vmlaq_f32((float32x4_t)0, v18, v24);
        v20 += 4;
        v19 += 2;
        v22 -= 16;
      }
      while (v22);
      if (v17 == v10)
        return 0;
    }
    else
    {
      v17 = 0;
    }
    v28 = v10 - v17;
    v29 = &v16->f32[v17];
    v30 = (unsigned __int16 *)a3 + v17 + 2;
    do
    {
      v31 = *v30++;
      *v29++ = (float)((float)((float)v31 + 0.5) * *(float *)&a5) + 0.0;
      --v28;
    }
    while (v28);
  }
  return 0;
}

uint64_t decode_ang2_fix(uint64_t a1, char a2, int *a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint16x8_t *v9;
  uint64_t v10;
  float32x4_t *v11;
  int32x2_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  unint64_t v21;
  uint64_t v23;
  float32x4_t v24;
  uint16x8_t *v25;
  float32x4_t *v26;
  float32x4_t v27;
  uint64_t v28;
  uint16x8_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  uint64_t v34;
  float *v35;
  unsigned __int16 *v36;
  unsigned int v37;
  float32x4_t *v38;
  _DWORD *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  float32x4_t v43;
  uint16x8_t *v44;
  float32x4_t *v45;
  float32x4_t v46;
  uint64_t v47;
  uint16x8_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  uint64_t v53;
  float *v54;
  unsigned __int16 *v55;
  unsigned int v56;
  _DWORD *v57;
  float32x4_t *v58;
  int v59;

  v4 = a4 - 4;
  if (a4 >= 4)
  {
    v9 = (uint16x8_t *)(a3 + 1);
    v10 = *a3;
    v11 = (float32x4_t *)malloc_type_malloc(4 * v10, 0x100004052888210uLL);
    v13 = *(_QWORD *)(a1 + 16);
    if (v13 < v10)
    {
      v14 = 2 * v13;
      v15 = v13 == 0;
      v16 = 32;
      if (!v15)
        v16 = v14;
      if (v16 <= v10)
        v17 = v10;
      else
        v17 = v16;
      if (v17)
        *(_QWORD *)(a1 + 8) = malloc_type_realloc(*(void **)(a1 + 8), 8 * v17, 0x6CA8E040uLL);
      *(_QWORD *)(a1 + 16) = v17;
    }
    *(_QWORD *)a1 = v10;
    v18 = 2 * v10;
    if ((int)v10 < 1)
    {
      if (v4 - v18 >= v18 && v4 >= v18)
        v5 = 0;
      else
        v5 = 2;
      goto LABEL_44;
    }
    *(float *)v12.i32 = 6.2832 / (float)(1 << a2);
    v19 = v10;
    v20 = *(_DWORD **)(a1 + 8);
    v21 = v4 - v18;
    if (v4 < v18)
    {
      v5 = 2;
      v21 = v4;
LABEL_29:
      v38 = v11;
      v39 = v20;
      v40 = v10;
      do
      {
        v41 = v38->i32[0];
        v38 = (float32x4_t *)((char *)v38 + 4);
        *v39 = v41;
        v39 += 2;
        --v40;
      }
      while (v40);
      if (v4 < v18)
        goto LABEL_42;
      if (v21 < v18)
      {
        v5 = 2;
        goto LABEL_42;
      }
      if (v10 >= 0x10)
      {
        v42 = v10 & 0x7FFFFFF0;
        v43 = (float32x4_t)vdupq_lane_s32(v12, 0);
        v44 = v9 + 1;
        v45 = v11 + 2;
        v46.i64[0] = 0x3F0000003F000000;
        v46.i64[1] = 0x3F0000003F000000;
        v47 = v10 & 0xFFFFFFF0;
        do
        {
          v48 = v44[-1];
          v49 = vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(*v44)), v46);
          v50 = vmlaq_f32((float32x4_t)0, v43, vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v48.i8)), v46));
          v51 = vmlaq_f32((float32x4_t)0, v43, vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v48)), v46));
          v52 = vmlaq_f32((float32x4_t)0, v43, vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v44->i8)), v46));
          v45[-2] = v50;
          v45[-1] = v51;
          *v45 = v52;
          v45[1] = vmlaq_f32((float32x4_t)0, v43, v49);
          v45 += 4;
          v44 += 2;
          v47 -= 16;
        }
        while (v47);
        if (v42 == v10)
          goto LABEL_41;
      }
      else
      {
        v42 = 0;
      }
      v53 = v10 - v42;
      v54 = &v11->f32[v42];
      v55 = (unsigned __int16 *)v9 + v42;
      do
      {
        v56 = *v55++;
        *v54++ = (float)((float)((float)v56 + 0.5) * *(float *)v12.i32) + 0.0;
        --v53;
      }
      while (v53);
LABEL_41:
      v5 = 0;
LABEL_42:
      v57 = v20 + 1;
      v58 = v11;
      do
      {
        v59 = v58->i32[0];
        v58 = (float32x4_t *)((char *)v58 + 4);
        *v57 = v59;
        v57 += 2;
        --v19;
      }
      while (v19);
LABEL_44:
      free(v11);
      return v5;
    }
    if (v10 >= 0x10)
    {
      v23 = v10 & 0x7FFFFFF0;
      v24 = (float32x4_t)vdupq_lane_s32(v12, 0);
      v25 = (uint16x8_t *)(a3 + 5);
      v26 = v11 + 2;
      v27.i64[0] = 0x3F0000003F000000;
      v27.i64[1] = 0x3F0000003F000000;
      v28 = v10 & 0xFFFFFFF0;
      do
      {
        v29 = v25[-1];
        v30 = vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(*v25)), v27);
        v31 = vmlaq_f32((float32x4_t)0, v24, vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v29.i8)), v27));
        v32 = vmlaq_f32((float32x4_t)0, v24, vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v29)), v27));
        v33 = vmlaq_f32((float32x4_t)0, v24, vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v25->i8)), v27));
        v26[-2] = v31;
        v26[-1] = v32;
        *v26 = v33;
        v26[1] = vmlaq_f32((float32x4_t)0, v24, v30);
        v26 += 4;
        v25 += 2;
        v28 -= 16;
      }
      while (v28);
      if (v23 == v10)
        goto LABEL_28;
    }
    else
    {
      v23 = 0;
    }
    v34 = v10 - v23;
    v35 = &v11->f32[v23];
    v36 = (unsigned __int16 *)a3 + v23 + 2;
    do
    {
      v37 = *v36++;
      *v35++ = (float)((float)((float)v37 + 0.5) * *(float *)v12.i32) + 0.0;
      --v34;
    }
    while (v34);
LABEL_28:
    v5 = 0;
    v9 = (uint16x8_t *)((char *)v9 + v18);
    goto LABEL_29;
  }
  return 2;
}

uint64_t decode_desc_dictionary()
{
  return 0xFFFFFFFFLL;
}

uint64_t decode_uchar_list_4bit(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;

  if ((a4 & 0xFFFFFFFC) == 0)
    return 0xFFFFFFFFLL;
  v5 = a3 + 1;
  v6 = *a3;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7 < v6)
  {
    v8 = 2 * v7;
    v9 = v7 == 0;
    v10 = 256;
    if (!v9)
      v10 = v8;
    if (v10 <= v6)
      v11 = *a3;
    else
      v11 = v10;
    if (v11)
      *(_QWORD *)(a1 + 8) = malloc_type_realloc(*(void **)(a1 + 8), v11, 0xE1827A63uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  *(_QWORD *)a1 = v6;
  if ((int)v6 >= 1)
  {
    v12 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 8) + v12) = (16
                                             * (*((unsigned __int8 *)v5 + (v12 >> 1)) >> (4 * (v12 & 1)))) | 8;
      ++v12;
    }
    while (v6 != v12);
  }
  return 0;
}

uint64_t decode_pos3f_list_rtp(uint64_t a1, int a2, int *a3, unint64_t a4, float a5)
{
  float v5;
  uint64_t v6;
  uint64_t v9;
  float v10;
  uint64_t v11;
  int8x16_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  size_t v19;
  uint8_t *v20;
  uint16x8_t *v21;
  unint64_t v22;
  uint64_t v23;
  const uint8_t *v24;
  size_t v25;
  unint64_t v26;
  int32x2_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint16x8_t *v30;
  int32x2_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  float *v37;
  float *v38;
  float *v39;
  float *v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  unint64_t v48;
  BOOL v50;
  BOOL v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  float *v57;
  float32x2_t v58;
  __float2 v59;
  __float2 v60;
  float32x2_t v61;
  __float2 v62;
  __float2 v63;
  float32x4_t v64;
  uint16x8_t *v65;
  uint64_t v66;
  float32x4_t v67;
  uint64_t v68;
  uint16x8_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  uint64_t v74;
  float *v75;
  unsigned __int16 *v76;
  unsigned int v77;
  float32x4_t v78;
  uint16x8_t *v79;
  uint64_t v80;
  float32x4_t v81;
  float32x4_t v82;
  uint64_t v83;
  uint16x8_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  uint64_t v89;
  float *v90;
  unsigned __int16 *v91;
  unsigned int v92;
  size_t dst_size;
  float v94;
  float v95;
  int *v96;
  uint8_t *src_buffer;
  unint64_t v98;
  uint64_t v99;
  float32x2x3_t v100;

  v5 = -0.5;
  if (a5 > 0.0)
    v5 = 0.5;
  v96 = a3;
  if (a4 >= 4)
  {
    v9 = *a3;
    v10 = v5 + a5;
    v11 = *a3;
    src_buffer = (uint8_t *)(a3 + 1);
    v98 = a4 - 4;
    v12 = (int8x16_t *)malloc_type_malloc(12 * (_DWORD)v9, 0x100004052888210uLL);
    v13 = *(_QWORD *)(a1 + 16);
    if (v13 < v9)
    {
      v14 = 2 * v13;
      v15 = v13 == 0;
      v16 = 21;
      if (!v15)
        v16 = v14;
      if (v16 <= v9)
        v17 = v9;
      else
        v17 = v16;
      if (v17)
        *(_QWORD *)(a1 + 8) = malloc_type_realloc(*(void **)(a1 + 8), 12 * v17, 0xA153A654uLL);
      *(_QWORD *)(a1 + 16) = v17;
    }
    v18 = (int)v10;
    v99 = 0;
    *(_QWORD *)a1 = v9;
    float_frac_decompress(v12, v9, a2, (uint64_t)&v96);
    v19 = 2 * v9;
    v20 = (uint8_t *)malloc_type_malloc(2 * v9, 0x1000040BDFB0063uLL);
    v21 = (uint16x8_t *)v20;
    v6 = v99;
    if (!(_DWORD)v99)
    {
      v22 = v98 - 8;
      if (v98 < 8)
      {
        v6 = 2;
        goto LABEL_26;
      }
      v23 = v11;
      v24 = src_buffer + 8;
      v25 = *(_QWORD *)src_buffer;
      src_buffer += 8;
      v98 -= 8;
      v26 = v22 - v25;
      if (v22 < v25)
      {
        v6 = 4;
LABEL_25:
        v11 = v23;
        v19 = 2 * v9;
        goto LABEL_26;
      }
      if (!(_DWORD)v23)
        goto LABEL_24;
      if (compression_decode_buffer(v20, 2 * v9, v24, v25, 0, COMPRESSION_LZFSE) != 2 * v9)
      {
        v6 = 4;
        v11 = v23;
        v19 = 2 * v9;
        goto LABEL_26;
      }
      src_buffer = (uint8_t *)&v24[v25];
      v98 = v26;
      if ((int)v9 < 1)
      {
LABEL_24:
        v6 = 0;
        goto LABEL_25;
      }
      *(float *)v27.i32 = 3.1416 / (float)(1 << (v18 - 1));
      if (v9 >= 0x10)
      {
        v64 = (float32x4_t)vdupq_lane_s32(v27, 0);
        v11 = v23;
        v28 = v23 & 0xFFFFFFF0;
        v65 = v21 + 1;
        v66 = (uint64_t)v12[2].i64 + 4 * v9;
        v67.i64[0] = 0x3F0000003F000000;
        v67.i64[1] = 0x3F0000003F000000;
        v68 = v28;
        do
        {
          v69 = v65[-1];
          v70 = vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(*v65)), v67);
          v71 = vmlaq_f32((float32x4_t)0, v64, vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v69.i8)), v67));
          v72 = vmlaq_f32((float32x4_t)0, v64, vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v69)), v67));
          v73 = vmlaq_f32((float32x4_t)0, v64, vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v65->i8)), v67));
          *(float32x4_t *)(v66 - 32) = v71;
          *(float32x4_t *)(v66 - 16) = v72;
          *(float32x4_t *)v66 = v73;
          *(float32x4_t *)(v66 + 16) = vmlaq_f32((float32x4_t)0, v64, v70);
          v66 += 64;
          v65 += 2;
          v68 -= 16;
        }
        while (v68);
        v19 = 2 * v9;
        if (v28 == v23)
        {
          v6 = 0;
          goto LABEL_26;
        }
      }
      else
      {
        v28 = 0;
        v11 = v23;
        v19 = 2 * v9;
      }
      v74 = v11 - v28;
      v75 = (float *)&v12->i32[v28 + v9];
      v76 = (unsigned __int16 *)v21 + v28;
      v6 = 0;
      do
      {
        v77 = *v76++;
        *v75++ = (float)((float)((float)v77 + 0.5) * *(float *)v27.i32) + 0.0;
        --v74;
      }
      while (v74);
    }
LABEL_26:
    free(v21);
    v29 = (uint8_t *)malloc_type_malloc(v19, 0x1000040BDFB0063uLL);
    v30 = (uint16x8_t *)v29;
    if ((_DWORD)v6)
      goto LABEL_36;
    if (v98 < 8)
    {
      v6 = 2;
      goto LABEL_36;
    }
    if (v98 - 8 >= *(_QWORD *)src_buffer)
    {
      if (!(_DWORD)v9)
        goto LABEL_66;
      if (compression_decode_buffer(v29, v19, src_buffer + 8, *(_QWORD *)src_buffer, 0, COMPRESSION_LZFSE) == v19)
      {
        if ((int)v11 >= 1)
        {
          *(float *)v31.i32 = 6.2832 / (float)(1 << v18);
          if (v11 >= 0x10)
          {
            v32 = v11 & 0x7FFFFFF0;
            v78 = (float32x4_t)vdupq_lane_s32(v31, 0);
            v79 = v30 + 1;
            v80 = (uint64_t)v12[2].i64 + 4 * v19;
            v81.i64[0] = 0x3F0000003F000000;
            v81.i64[1] = 0x3F0000003F000000;
            v82 = (float32x4_t)vdupq_n_s32(0xC0490FDB);
            v83 = v11 & 0xFFFFFFF0;
            do
            {
              v84 = v79[-1];
              v85 = vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(*v79)), v81);
              v86 = vmlaq_f32(v82, v78, vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v84.i8)), v81));
              v87 = vmlaq_f32(v82, v78, vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v84)), v81));
              v88 = vmlaq_f32(v82, v78, vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v79->i8)), v81));
              *(float32x4_t *)(v80 - 32) = v86;
              *(float32x4_t *)(v80 - 16) = v87;
              *(float32x4_t *)v80 = v88;
              *(float32x4_t *)(v80 + 16) = vmlaq_f32(v82, v78, v85);
              v80 += 64;
              v79 += 2;
              v83 -= 16;
            }
            while (v83);
            if (v32 == v11)
            {
              v6 = 0;
              goto LABEL_36;
            }
          }
          else
          {
            v32 = 0;
          }
          v89 = v11 - v32;
          v90 = (float *)&v12->i32[v32 + v19];
          v91 = (unsigned __int16 *)v30 + v32;
          v6 = 0;
          do
          {
            v92 = *v91++;
            *v90++ = (float)((float)((float)v92 + 0.5) * *(float *)v31.i32) + -3.1416;
            --v89;
          }
          while (v89);
LABEL_36:
          free(v30);
          if ((int)v11 >= 1)
          {
            v33 = *(_QWORD *)(a1 + 8);
            if (v9 >= 4)
            {
              v34 = 0;
              v48 = v33 + 12 * v11;
              v50 = v33 < (unint64_t)v12 + 4 * v9 + 4 * v11 && (unint64_t)v12 + 4 * v9 < v48;
              v52 = v33 < (unint64_t)v12 + 4 * v11 && (unint64_t)v12 < v48;
              if (((unint64_t)v12 + 8 * v9 >= v48 || v33 >= (unint64_t)v12 + 4 * v19 + 4 * v11)
                && !v50
                && !v52)
              {
                dst_size = v19;
                v34 = v11 & 0xFFFFFFFE;
                v54 = 4 * v19;
                v55 = v34;
                v56 = (uint64_t *)v12;
                v57 = *(float **)(a1 + 8);
                do
                {
                  v58 = (float32x2_t)*v56;
                  LODWORD(v95) = *(uint64_t *)((char *)v56 + 4 * v9);
                  v59 = __sincosf_stret(COERCE_FLOAT(HIDWORD(*(unint64_t *)((char *)v56 + 4 * v9))));
                  v60 = __sincosf_stret(v95);
                  v61 = vmul_f32(v58, (float32x2_t)__PAIR64__(LODWORD(v59.__sinval), LODWORD(v60.__sinval)));
                  LODWORD(v94) = *(uint64_t *)((char *)v56 + v54);
                  v62 = __sincosf_stret(COERCE_FLOAT(HIDWORD(*(unint64_t *)((char *)v56 + v54))));
                  v63 = __sincosf_stret(v94);
                  v100.val[0] = vmul_f32(v61, (float32x2_t)__PAIR64__(LODWORD(v62.__cosval), LODWORD(v63.__cosval)));
                  v100.val[1] = vmul_f32(v61, (float32x2_t)__PAIR64__(LODWORD(v62.__sinval), LODWORD(v63.__sinval)));
                  v100.val[2] = vmul_f32(v58, (float32x2_t)__PAIR64__(LODWORD(v59.__cosval), LODWORD(v60.__cosval)));
                  vst3_f32(v57, v100);
                  v57 += 6;
                  ++v56;
                  v55 -= 2;
                }
                while (v55);
                v19 = dst_size;
                if (v34 == v11)
                  goto LABEL_41;
              }
            }
            else
            {
              v34 = 0;
            }
            v35 = v19;
            v36 = v11 - v34;
            v37 = (float *)&v12->i32[v34];
            v38 = (float *)(v33 + 12 * v34 + 4);
            v39 = (float *)&v12->i32[v34 + v35];
            v40 = (float *)&v12->i32[v34 + v9];
            do
            {
              v41 = *v37;
              v42 = v41 * sinf(*v40);
              *(v38 - 1) = v42 * cosf(*v39);
              v43 = *v39++;
              *v38 = v42 * sinf(v43);
              v44 = *v37++;
              v45 = v44;
              v46 = *v40++;
              v38[1] = v45 * cosf(v46);
              v38 += 3;
              --v36;
            }
            while (v36);
          }
LABEL_41:
          free(v12);
          return v6;
        }
LABEL_66:
        free(v30);
        v6 = 0;
        goto LABEL_41;
      }
    }
    v6 = 4;
    goto LABEL_36;
  }
  return 2;
}

uint64_t decode_eigv_fix(uint64_t a1, char a2, int *a3, unint64_t a4, double a5)
{
  unint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  float32x4_t *v16;
  uint64_t v17;
  float32x4_t v18;
  uint16x8_t *v19;
  float32x4_t *v20;
  float32x4_t v21;
  uint64_t v26;
  uint16x8_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t v32;
  float *v33;
  unsigned __int16 *v34;
  unsigned int v35;

  v5 = a4 - 4;
  if (a4 < 4)
    return 2;
  v10 = *a3;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 < v10)
  {
    v12 = 2 * v11;
    _ZF = v11 == 0;
    v14 = 64;
    if (!_ZF)
      v14 = v12;
    if (v14 <= v10)
      v15 = *a3;
    else
      v15 = v14;
    if (v15)
      *(_QWORD *)(a1 + 8) = malloc_type_realloc(*(void **)(a1 + 8), 4 * v15, 0x98E736BFuLL);
    *(_QWORD *)(a1 + 16) = v15;
  }
  *(_QWORD *)a1 = v10;
  if (v5 < 2 * v10)
    return 2;
  if ((int)v10 >= 1)
  {
    v16 = *(float32x4_t **)(a1 + 8);
    *(float *)&a5 = 2.0 / (float)(1 << a2);
    if (v10 >= 0x10)
    {
      v18 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
      v17 = v10 & 0xFFFFFFF0;
      v19 = (uint16x8_t *)(a3 + 5);
      v20 = v16 + 2;
      v21.i64[0] = 0x3F0000003F000000;
      v21.i64[1] = 0x3F0000003F000000;
      __asm { FMOV            V3.4S, #-1.0 }
      v26 = v17;
      do
      {
        v27 = v19[-1];
        v28 = vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(*v19)), v21);
        v29 = vmlaq_f32(_Q3, v18, vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v27.i8)), v21));
        v30 = vmlaq_f32(_Q3, v18, vaddq_f32(vcvtq_f32_u32(vmovl_high_u16(v27)), v21));
        v31 = vmlaq_f32(_Q3, v18, vaddq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v19->i8)), v21));
        v20[-2] = v29;
        v20[-1] = v30;
        *v20 = v31;
        v20[1] = vmlaq_f32(_Q3, v18, v28);
        v20 += 4;
        v19 += 2;
        v26 -= 16;
      }
      while (v26);
      if (v17 == v10)
        return 0;
    }
    else
    {
      v17 = 0;
    }
    v32 = v10 - v17;
    v33 = &v16->f32[v17];
    v34 = (unsigned __int16 *)a3 + v17 + 2;
    do
    {
      v35 = *v34++;
      *v33++ = (float)((float)((float)v35 + 0.5) * *(float *)&a5) + -1.0;
      --v32;
    }
    while (v32);
  }
  return 0;
}

uint64_t decode_uchar_list_2bit(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;

  if ((a4 & 0xFFFFFFFC) == 0)
    return 0xFFFFFFFFLL;
  v5 = a3 + 1;
  v6 = *a3;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7 < v6)
  {
    v8 = 2 * v7;
    v9 = v7 == 0;
    v10 = 256;
    if (!v9)
      v10 = v8;
    if (v10 <= v6)
      v11 = *a3;
    else
      v11 = v10;
    if (v11)
      *(_QWORD *)(a1 + 8) = malloc_type_realloc(*(void **)(a1 + 8), v11, 0x6C4C9951uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  *(_QWORD *)a1 = v6;
  if ((int)v6 >= 1)
  {
    v12 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 8) + v12) = (*((unsigned __int8 *)v5 + (v12 >> 2)) >> (2 * (v12 & 3)) << 6) | 0x20;
      ++v12;
    }
    while (v6 != v12);
  }
  return 0;
}

uint64_t decode_uchar_list_1bit(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;

  if ((a4 & 0xFFFFFFFC) == 0)
    return 0xFFFFFFFFLL;
  v5 = a3 + 1;
  v6 = *a3;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7 < v6)
  {
    v8 = 2 * v7;
    v9 = v7 == 0;
    v10 = 256;
    if (!v9)
      v10 = v8;
    if (v10 <= v6)
      v11 = *a3;
    else
      v11 = v10;
    if (v11)
      *(_QWORD *)(a1 + 8) = malloc_type_realloc(*(void **)(a1 + 8), v11, 0xFDA5699CuLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  *(_QWORD *)a1 = v6;
  if ((int)v6 >= 1)
  {
    v12 = 0;
    do
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 8) + v12) = (*((unsigned __int8 *)v5 + (v12 >> 3)) >> (v12 & 7) << 7) | 0x40;
      ++v12;
    }
    while (v6 != v12);
  }
  return 0;
}

void float_frac_decompress(int8x16_t *a1, int a2, int a3, uint64_t a4)
{
  size_t v8;
  uint8_t *v9;
  uint8_t *v10;
  unint64_t v11;
  _QWORD *v12;
  const uint8_t *v13;
  size_t v14;
  size_t v15;
  unint64_t v16;
  const uint8_t *v17;
  size_t v18;
  size_t v19;
  unint64_t v20;
  size_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint32x4_t v25;
  uint16x4_t *v26;
  uint16x4_t *v27;
  int8x16_t *v28;
  uint64_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint32x4_t v32;
  int32x4_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint8_t *v40;
  uint8_t *v41;
  int v42;
  int v43;
  int v44;

  v8 = 2 * a2;
  v9 = (uint8_t *)malloc_type_malloc(v8, 0x1000040BDFB0063uLL);
  v10 = (uint8_t *)malloc_type_malloc(v8, 0x1000040BDFB0063uLL);
  if (!*(_DWORD *)(a4 + 24))
  {
    v11 = *(_QWORD *)(a4 + 16);
    if (v11 <= 7)
      goto LABEL_12;
    v12 = *(_QWORD **)(a4 + 8);
    v15 = *v12;
    v13 = (const uint8_t *)(v12 + 1);
    v14 = v15;
    v16 = v11 - 8;
    *(_QWORD *)(a4 + 8) = v13;
    *(_QWORD *)(a4 + 16) = v16;
    if (v16 >= v15)
    {
      if (!a2)
        goto LABEL_7;
      if (compression_decode_buffer(v9, v8, v13, v14, 0, COMPRESSION_LZFSE) == v8)
      {
        v13 = (const uint8_t *)(*(_QWORD *)(a4 + 8) + v14);
        v16 = *(_QWORD *)(a4 + 16) - v14;
        *(_QWORD *)(a4 + 8) = v13;
        *(_QWORD *)(a4 + 16) = v16;
        if (*(_DWORD *)(a4 + 24))
          goto LABEL_15;
LABEL_7:
        if (v16 > 7)
        {
          v19 = *(_QWORD *)v13;
          v17 = v13 + 8;
          v18 = v19;
          v20 = v16 - 8;
          *(_QWORD *)(a4 + 8) = v17;
          *(_QWORD *)(a4 + 16) = v20;
          if (v20 >= v19)
          {
            if (!a2)
              goto LABEL_23;
            if (compression_decode_buffer(v10, v8, v17, v18, 0, COMPRESSION_LZFSE) == v8)
            {
              v21 = *(_QWORD *)(a4 + 16) - v18;
              *(_QWORD *)(a4 + 8) += v18;
              *(_QWORD *)(a4 + 16) = v21;
              goto LABEL_15;
            }
          }
          goto LABEL_13;
        }
LABEL_12:
        v22 = 2;
LABEL_14:
        *(_DWORD *)(a4 + 24) = v22;
        goto LABEL_15;
      }
    }
LABEL_13:
    v22 = 4;
    goto LABEL_14;
  }
LABEL_15:
  if (a2 < 1)
    goto LABEL_23;
  v23 = 32 - a3;
  if (a2 < 0x10)
  {
    v24 = 0;
LABEL_21:
    v37 = a2 - v24;
    v38 = &a1->i32[v24];
    v39 = 2 * v24;
    v40 = &v10[2 * v24];
    v41 = &v9[v39];
    do
    {
      v42 = *(unsigned __int16 *)v40;
      v40 += 2;
      v43 = v42 << v23;
      v44 = *(unsigned __int16 *)v41;
      v41 += 2;
      *v38++ = v43 | (v44 << 23);
      --v37;
    }
    while (v37);
    goto LABEL_23;
  }
  v24 = a2 & 0x7FFFFFF0;
  v25 = (uint32x4_t)vdupq_n_s32(v23);
  v26 = (uint16x4_t *)(v9 + 16);
  v27 = (uint16x4_t *)(v10 + 16);
  v28 = a1 + 2;
  v29 = a2 & 0xFFFFFFF0;
  do
  {
    v30 = *(uint16x8_t *)v26[-2].i8;
    v31 = *(uint16x8_t *)v27[-2].i8;
    v32 = vmovl_u16(*(uint16x4_t *)v31.i8);
    v33 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v30.i8);
    v34 = vorrq_s8((int8x16_t)vshlq_u32(vmovl_high_u16(v31), v25), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v30), 0x17uLL));
    v35 = vorrq_s8((int8x16_t)vshlq_u32(vmovl_u16(*v27), v25), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*v26), 0x17uLL));
    v36 = vorrq_s8((int8x16_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v27->i8), v25), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(*(uint16x8_t *)v26->i8), 0x17uLL));
    v28[-2] = vorrq_s8((int8x16_t)vshlq_u32(v32, v25), (int8x16_t)vshlq_n_s32(v33, 0x17uLL));
    v28[-1] = v34;
    *v28 = v35;
    v28[1] = v36;
    v28 += 4;
    v26 += 4;
    v27 += 4;
    v29 -= 16;
  }
  while (v29);
  if (v24 != a2)
    goto LABEL_21;
LABEL_23:
  free(v9);
  free(v10);
}

BOOL vl_pose_fuse(uint64_t *a1, double *a2, float32x2_t *a3, const void *a4, const void *a5, unsigned int a6, float32x2_t *a7, float *a8, float a9, double a10, float32x4_t *a11, _DWORD *a12, uint64_t a13, uint64_t a14)
{
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  __darwin_time_t v28;
  __darwin_time_t v29;
  __darwin_time_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int32x4_t *v34;
  uint64_t v35;
  int32x4_t v36;
  int32x4_t *v37;
  int32x4_t v38;
  int32x4_t v39;
  uint64_t v40;
  uint64_t v41;
  __darwin_time_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  unint64_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  unint64_t v58;
  float *v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  uint64_t v64;
  float *v65;
  double v66;
  double v67;
  double v68;
  float64_t v69;
  float64_t v70;
  float64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t *v77;
  int v78;
  uint64_t i;
  uint64_t v80;
  uint64_t v81;
  void **v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  signed int v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  double v105;
  _BYTE *v106;
  _QWORD *v107;
  _OWORD **v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  double *v112;
  uint64_t v113;
  int v114;
  float v115;
  int v116;
  int v117;
  BOOL v118;
  char v119;
  double v120;
  double v121;
  _OWORD *v122;
  double v123;
  double v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void **v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int *v137;
  unsigned int v138;
  signed int v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  int v157;
  uint64_t *v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  void **v162;
  _BYTE *v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int *v166;
  unsigned int v167;
  signed int v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  double *v188;
  float v189;
  uint64_t v190;
  float32x4_t v191;
  _DWORD *v192;
  __darwin_time_t v193;
  uint64_t v194;
  void **v195;
  uint64_t v196;
  unsigned int *v197;
  unsigned int v198;
  signed int v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  double v208;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t tv_usec;
  double *v222;
  __darwin_time_t tv_sec;
  _OWORD **v224;
  int v225;
  _BYTE *v226;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  timeval __src[45];
  _OWORD v235[4];
  __int128 v236;
  __int128 v237;
  timeval v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  _OWORD *v244[4];
  float32x2x3_t v245;

  v244[2] = *(_OWORD **)MEMORY[0x24BDAC8D0];
  __src[0].tv_sec = 0;
  *(_QWORD *)&__src[0].tv_usec = 0;
  gettimeofday(__src, 0);
  tv_sec = __src[0].tv_sec;
  tv_usec = __src[0].tv_usec;
  bzero(&__src[6], 0x268uLL);
  v232 = 0u;
  v233 = 0u;
  v230 = 0u;
  v231 = 0u;
  v228 = 0u;
  v229 = 0u;
  *(double *)&__src[28].tv_sec = a10;
  *(double *)&__src[27].tv_sec = a9;
  v22 = vcvtq_f64_f32(a3[1]);
  __src[0] = (timeval)vcvtq_f64_f32(*a3);
  __src[1] = (timeval)v22;
  v23 = vcvtq_f64_f32(a3[3]);
  __src[2] = (timeval)vcvtq_f64_f32(a3[2]);
  __src[3] = (timeval)v23;
  v24 = vcvtq_f64_f32(a3[5]);
  __src[4] = (timeval)vcvtq_f64_f32(a3[4]);
  __src[5] = (timeval)v24;
  g_coords_conv((double *)&__src[0].tv_sec, a2, (double *)&__src[0].tv_sec);
  v25 = vcvtq_f64_f32(a7[1]);
  __src[6] = (timeval)vcvtq_f64_f32(*a7);
  __src[7] = (timeval)v25;
  v26 = vcvtq_f64_f32(a7[3]);
  __src[8] = (timeval)vcvtq_f64_f32(a7[2]);
  __src[9] = (timeval)v26;
  v27 = vcvtq_f64_f32(a7[5]);
  __src[10] = (timeval)vcvtq_f64_f32(a7[4]);
  __src[11] = (timeval)v27;
  if ((int)a6 >= 1)
  {
    v28 = __src[30].tv_sec;
    if (__src[30].tv_sec + a6 > __src[31].tv_sec)
    {
      v29 = 32;
      if (__src[31].tv_sec)
        v29 = 2 * __src[31].tv_sec;
      if (v29 <= __src[30].tv_sec + a6)
        v30 = __src[30].tv_sec + a6;
      else
        v30 = v29;
      if (v30)
      {
        *(_QWORD *)&__src[30].tv_usec = malloc_type_realloc(*(void **)&__src[30].tv_usec, 8 * v30, 0x283F7A53uLL);
        v28 = __src[30].tv_sec;
      }
      __src[31].tv_sec = v30;
    }
    memcpy((void *)(*(_QWORD *)&__src[30].tv_usec + 8 * v28), a4, 8 * a6);
    __src[30].tv_sec += a6;
    v31 = *(_QWORD *)&__src[28].tv_usec;
    if (*(_QWORD *)&__src[28].tv_usec + a6 > *(uint64_t *)&__src[29].tv_usec)
    {
      v32 = 21;
      if (*(_QWORD *)&__src[29].tv_usec)
        v32 = 2 * *(_QWORD *)&__src[29].tv_usec;
      if (v32 <= *(_QWORD *)&__src[28].tv_usec + a6)
        v33 = *(_QWORD *)&__src[28].tv_usec + a6;
      else
        v33 = v32;
      if (v33)
      {
        __src[29].tv_sec = (__darwin_time_t)malloc_type_realloc((void *)__src[29].tv_sec, 12 * v33, 0xA55CECBEuLL);
        v31 = *(_QWORD *)&__src[28].tv_usec;
      }
      *(_QWORD *)&__src[29].tv_usec = v33;
    }
    memcpy((void *)(__src[29].tv_sec + 12 * v31), a5, 12 * a6);
    *(_QWORD *)&__src[28].tv_usec += a6;
  }
  v238.tv_sec = 0x3D4CCCCD00000010;
  v238.tv_usec = 0;
  v34 = (int32x4_t *)malloc_type_malloc(4 * (int)a6, 0x100004052888210uLL);
  if ((int)a6 >= 1)
  {
    if (a6 < 8)
    {
      v35 = 0;
      do
      {
LABEL_27:
        v34->i32[v35] = v35;
        ++v35;
      }
      while (a6 != v35);
      goto LABEL_28;
    }
    v35 = a6 & 0xFFFFFFF8;
    v36 = (int32x4_t)xmmword_210BCABD0;
    v37 = v34 + 1;
    v38.i64[0] = 0x400000004;
    v38.i64[1] = 0x400000004;
    v39.i64[0] = 0x800000008;
    v39.i64[1] = 0x800000008;
    v40 = v35;
    do
    {
      v37[-1] = v36;
      *v37 = vaddq_s32(v36, v38);
      v36 = vaddq_s32(v36, v39);
      v37 += 2;
      v40 -= 8;
    }
    while (v40);
    if (v35 != a6)
      goto LABEL_27;
  }
LABEL_28:
  *(_QWORD *)&__src[31].tv_usec = rkd_create_ex(a4, (uint64_t)v34, 2, a6, 1, (uint64_t)&v238);
  g_coords_diff(a2, (double *)&__src[0].tv_sec, (uint64_t)&v228);
  v41 = *(_QWORD *)&__src[28].tv_usec;
  if (*(uint64_t *)&__src[28].tv_usec < 1)
    goto LABEL_36;
  v42 = __src[29].tv_sec;
  v43 = v228;
  v44 = v229;
  v45 = v230;
  v46 = v231;
  v47 = v232;
  v48 = v233;
  if (*(_QWORD *)&__src[28].tv_usec == 1)
  {
    v49 = 0;
LABEL_34:
    v64 = v41 - v49;
    v65 = (float *)(v42 + 12 * v49 + 8);
    do
    {
      v66 = *(v65 - 2);
      v67 = *(v65 - 1);
      v68 = *v65;
      v69 = v47.f64[1] + v43.f64[1] * v67 + v43.f64[0] * v66 + v44.f64[0] * v68;
      v70 = v48.f64[0] + v45.f64[0] * v67 + v44.f64[1] * v66 + v45.f64[1] * v68;
      v71 = v48.f64[1] + v46.f64[1] * v67 + v46.f64[0] * v66 + v47.f64[0] * v68;
      *(float *)&v67 = v69;
      *(float *)&v69 = v70;
      *(v65 - 2) = *(float *)&v67;
      *(v65 - 1) = *(float *)&v69;
      *(float *)&v71 = v71;
      *v65 = *(float *)&v71;
      v65 += 3;
      --v64;
    }
    while (v64);
    goto LABEL_36;
  }
  v49 = *(_QWORD *)&__src[28].tv_usec & 0xFFFFFFFFFFFFFFFELL;
  v50 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v228.f64[0], 0);
  v51 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v229.f64[0], 0);
  v52 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v232.f64[1], 0);
  v53 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v229.f64[1], 0);
  v54 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v230.f64[1], 0);
  v55 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v233.f64[0], 0);
  v56 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v231.f64[0], 0);
  v57 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v232.f64[0], 0);
  v58 = *(_QWORD *)&__src[28].tv_usec & 0xFFFFFFFFFFFFFFFELL;
  v59 = (float *)__src[29].tv_sec;
  v60 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v233.f64[1], 0);
  do
  {
    v245 = vld3_f32(v59);
    v61 = vcvtq_f64_f32(v245.val[0]);
    v62 = vcvtq_f64_f32(v245.val[1]);
    *(float64x2_t *)v245.val[0].f32 = vcvtq_f64_f32(v245.val[2]);
    v63 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v62, v43.f64[1]), v61, v50), *(float64x2_t *)v245.val[0].f32, v51);
    *(float64x2_t *)v245.val[2].f32 = vaddq_f64(v55, vmlaq_f64(vmlaq_f64(vmulq_n_f64(v62, v45.f64[0]), v61, v53), *(float64x2_t *)v245.val[0].f32, v54));
    *(float64x2_t *)v245.val[0].f32 = vaddq_f64(v60, vmlaq_f64(vmlaq_f64(vmulq_n_f64(v62, v46.f64[1]), v61, v56), *(float64x2_t *)v245.val[0].f32, v57));
    *(float32x2_t *)&v61.f64[0] = vcvt_f32_f64(vaddq_f64(v52, v63));
    *(float32x2_t *)&v62.f64[0] = vcvt_f32_f64(*(float64x2_t *)v245.val[2].f32);
    *(float32x2_t *)&v63.f64[0] = vcvt_f32_f64(*(float64x2_t *)v245.val[0].f32);
    vst3_f32(v59, *(float32x2x3_t *)v61.f64);
    v59 += 6;
    v58 -= 2;
  }
  while (v58);
  if (v41 != v49)
    goto LABEL_34;
LABEL_36:
  if (a14)
  {
    v72 = *(_OWORD *)(a14 + 144);
    *(timeval *)&__src[41].tv_usec = *(timeval *)(a14 + 128);
    *(_OWORD *)&__src[42].tv_usec = v72;
    *(timeval *)&__src[43].tv_usec = *(timeval *)(a14 + 160);
    v73 = *(_OWORD *)(a14 + 80);
    *(timeval *)&__src[37].tv_usec = *(timeval *)(a14 + 64);
    *(_OWORD *)&__src[38].tv_usec = v73;
    v74 = *(_OWORD *)(a14 + 112);
    *(timeval *)&__src[39].tv_usec = *(timeval *)(a14 + 96);
    *(_OWORD *)&__src[40].tv_usec = v74;
    v75 = *(_OWORD *)(a14 + 16);
    *(timeval *)&__src[33].tv_usec = *(timeval *)a14;
    *(_OWORD *)&__src[34].tv_usec = v75;
    v76 = *(_OWORD *)(a14 + 48);
    *(timeval *)&__src[35].tv_usec = *(timeval *)(a14 + 32);
    *(_OWORD *)&__src[36].tv_usec = v76;
  }
  v222 = a2;
  v77 = a1;
  v78 = *((_DWORD *)a1 + 2);
  if (v78 < 1)
  {
    v103 = 0;
  }
  else
  {
    for (i = 0; i < v78; ++i)
    {
      v80 = *a1;
      if (a10 - *(double *)(*a1 + 712 * i + 448) > *((double *)a1 + 2))
      {
        v81 = v80 + 712 * i;
        free(*(void **)(v81 + 488));
        free(*(void **)(v81 + 464));
        v82 = *(void ***)(v81 + 504);
        if (v82)
        {
          free(*v82);
          free(v82[1]);
          free(v82[2]);
          free(v82);
        }
        v83 = *(_QWORD *)(v80 + 712 * i + 512);
        if (v83)
        {
          v84 = *(_QWORD *)(v83 - 8 * *(_QWORD *)(v80 + 712 * i + 528) - 8);
          v85 = (unsigned int *)(v84 + 24);
          do
          {
            v86 = __ldaxr(v85);
            v87 = v86 - 1;
          }
          while (__stlxr(v87, v85));
          if (v87 < 0)
            goto LABEL_211;
          if (v87)
          {
            do
              v88 = __ldaxr(&qword_254A77330);
            while (__stlxr(v88 - 1, &qword_254A77330));
            do
              v89 = __ldaxr((unint64_t *)&unk_254A77338);
            while (__stlxr(v89, (unint64_t *)&unk_254A77338));
            do
              v90 = __ldaxr(&global_stats);
            while (__stlxr(v90, &global_stats));
            do
              v91 = __ldaxr(&pmem_total_refs);
            while (__stlxr(v91 - 1, &pmem_total_refs));
            do
              v92 = __ldaxr(&_pmem_total_blocks);
            while (__stlxr(v92, &_pmem_total_blocks));
            do
              v93 = __ldaxr(&pmem_bytes_allocated);
            while (__stlxr(v93, &pmem_bytes_allocated));
          }
          else
          {
            v94 = -*(_QWORD *)(v84 + 8);
            do
              v95 = __ldaxr(&qword_254A77330);
            while (__stlxr(v95 - 1, &qword_254A77330));
            do
              v96 = __ldaxr((unint64_t *)&unk_254A77338);
            while (__stlxr(v96 - 1, (unint64_t *)&unk_254A77338));
            do
              v97 = __ldaxr(&global_stats);
            while (__stlxr(v97 + v94, &global_stats));
            do
              v98 = __ldaxr(&pmem_total_refs);
            while (__stlxr(v98 - 1, &pmem_total_refs));
            do
              v99 = __ldaxr(&_pmem_total_blocks);
            while (__stlxr(v99 - 1, &_pmem_total_blocks));
            do
              v100 = __ldaxr(&pmem_bytes_allocated);
            while (__stlxr(v100 + v94, &pmem_bytes_allocated));
            (*(void (**)(uint64_t))(v84 + 40))(v84);
            free((void *)v84);
          }
        }
        bzero((void *)v81, 0x2C8uLL);
        v78 = *((_DWORD *)a1 + 2);
      }
    }
    if (v78 < 1)
    {
      v103 = 0;
      v77 = a1;
    }
    else
    {
      v101 = 0;
      v102 = 0;
      v103 = 0;
      v77 = a1;
      do
      {
        v104 = *a1;
        if (*a1 && a10 - *(double *)(v104 + v101 + 448) <= *((double *)a1 + 2))
        {
          memcpy((void *)(v104 + 712 * v103++), (const void *)(v104 + v101), 0x2C8uLL);
          v78 = *((_DWORD *)a1 + 2);
        }
        ++v102;
        v101 += 712;
      }
      while (v102 < v78);
    }
  }
  *((_DWORD *)v77 + 2) = v103;
  v105 = 1.0 - *(double *)&__src[27].tv_sec;
  v106 = malloc_type_calloc(v103, 1uLL, 0x3E5DA429uLL);
  v107 = malloc_type_calloc(*((int *)v77 + 2) + 1, 8uLL, 0x2004093837F09uLL);
  v108 = (_OWORD **)v107;
  *v107 = __src;
  if (*((int *)v77 + 2) <= 0)
  {
    v129 = 0;
    *(double *)&__src[27].tv_usec = 1.0 - v105;
    v130 = 1;
    goto LABEL_142;
  }
  v224 = (_OWORD **)v107;
  v109 = 0;
  v110 = 0;
  v225 = 1;
  do
  {
    v242 = 0u;
    v243 = 0u;
    v240 = 0u;
    v241 = 0u;
    v238 = (timeval)0;
    v239 = 0u;
    v236 = 0u;
    v237 = 0u;
    v112 = (double *)(*v77 + v109);
    memset(v235, 0, sizeof(v235));
    g_coords_diff(v112, (double *)&__src[0].tv_sec, (uint64_t)&v238);
    g_coords_diff((double *)(*v77 + v109 + 96), (double *)&__src[6].tv_sec, (uint64_t)v235);
    v113 = *v77 + v109;
    v114 = *((_DWORD *)v77 + 6);
    v115 = *((double *)v77 + 4);
    v116 = pose_est_inlier_sim(v113, (uint64_t)__src, v115);
    v117 = pose_est_inlier_sim((uint64_t)__src, v113, v115);
    v118 = v117 + v116 > 1
        && *(_DWORD *)(*(_QWORD *)(v113 + 504) + 28)
         - (v117
          + v116)
         + *(_DWORD *)(*(_QWORD *)&__src[31].tv_usec + 28) < v114;
    v119 = v118;
    v106[v110] = v119;
    if (!v118)
    {
      v120 = *((double *)v77 + 5);
      v121 = *((double *)v77 + 7);
      if (g_coords_angle_diff((double *)&v238.tv_sec, (double *)v235) < v121
        && (*(double *)&v243 - *(double *)&v237) * (*(double *)&v243 - *(double *)&v237)
         + (*((double *)&v242 + 1) - *((double *)&v236 + 1)) * (*((double *)&v242 + 1) - *((double *)&v236 + 1))
         + (*((double *)&v243 + 1) - *((double *)&v237 + 1)) * (*((double *)&v243 + 1) - *((double *)&v237 + 1)) < v120 * v120)
      {
        v122 = (_OWORD *)(*v77 + v109);
        v244[0] = (_OWORD *)__src;
        v244[1] = v122;
        refine_poses(v244, 2, 0, 0, (uint64_t)&v238);
        v123 = *((double *)v77 + 6);
        v124 = *((double *)v77 + 8);
        if (g_coords_angle_diff((double *)&v238.tv_sec, (double *)v235) < v124
          && (*(double *)&v243 - *(double *)&v237) * (*(double *)&v243 - *(double *)&v237)
           + (*((double *)&v242 + 1) - *((double *)&v236 + 1)) * (*((double *)&v242 + 1) - *((double *)&v236 + 1))
           + (*((double *)&v243 + 1) - *((double *)&v237 + 1)) * (*((double *)&v243 + 1) - *((double *)&v237 + 1)) < v123 * v123)
        {
          v105 = v105 * (1.0 - *(double *)(*v77 + v109 + 432));
          v106[v110] = 2;
          v224[v225++] = (_OWORD *)(*v77 + v109);
        }
      }
    }
    ++v110;
    v111 = *((int *)v77 + 2);
    v109 += 712;
  }
  while (v110 < v111);
  *(double *)&__src[27].tv_usec = 1.0 - v105;
  if ((int)v111 < 1)
  {
    v129 = 0;
LABEL_141:
    v108 = v224;
    v130 = v225;
    goto LABEL_142;
  }
  v125 = 0;
  v126 = 0;
  v108 = v224;
LABEL_90:
  v127 = 712 * v125 + 440;
  do
  {
    if ((v106[v125] & 1) != 0 && *(double *)(*v77 + v127) > 1.0 - v105)
    {
      v126 = 1;
      if (v111 - 1 == v125++)
      {
LABEL_98:
        refine_poses(v224, v225, &__src[12].tv_sec, (uint64_t)&__src[18], 0);
        goto LABEL_144;
      }
      goto LABEL_90;
    }
    ++v125;
    v127 += 712;
  }
  while (v111 != v125);
  if ((v126 & 1) != 0)
    goto LABEL_98;
  v226 = v106;
  v131 = 0;
  do
  {
    if ((v106[v131] & 1) != 0)
    {
      v132 = *a1;
      v133 = *a1 + 712 * v131;
      free(*(void **)(v133 + 488));
      free(*(void **)(v133 + 464));
      v134 = *(void ***)(v133 + 504);
      if (v134)
      {
        free(*v134);
        free(v134[1]);
        free(v134[2]);
        free(v134);
      }
      v135 = *(_QWORD *)(v132 + 712 * v131 + 512);
      if (v135)
      {
        v136 = *(_QWORD *)(v135 - 8 * *(_QWORD *)(v132 + 712 * v131 + 528) - 8);
        v137 = (unsigned int *)(v136 + 24);
        do
        {
          v138 = __ldaxr(v137);
          v139 = v138 - 1;
        }
        while (__stlxr(v139, v137));
        if (v139 < 0)
          goto LABEL_211;
        if (v139)
        {
          do
            v140 = __ldaxr(&qword_254A77330);
          while (__stlxr(v140 - 1, &qword_254A77330));
          do
            v141 = __ldaxr((unint64_t *)&unk_254A77338);
          while (__stlxr(v141, (unint64_t *)&unk_254A77338));
          do
            v142 = __ldaxr(&global_stats);
          while (__stlxr(v142, &global_stats));
          do
            v143 = __ldaxr(&pmem_total_refs);
          while (__stlxr(v143 - 1, &pmem_total_refs));
          do
            v144 = __ldaxr(&_pmem_total_blocks);
          while (__stlxr(v144, &_pmem_total_blocks));
          do
            v145 = __ldaxr(&pmem_bytes_allocated);
          while (__stlxr(v145, &pmem_bytes_allocated));
        }
        else
        {
          v146 = -*(_QWORD *)(v136 + 8);
          do
            v147 = __ldaxr(&qword_254A77330);
          while (__stlxr(v147 - 1, &qword_254A77330));
          do
            v148 = __ldaxr((unint64_t *)&unk_254A77338);
          while (__stlxr(v148 - 1, (unint64_t *)&unk_254A77338));
          do
            v149 = __ldaxr(&global_stats);
          while (__stlxr(v149 + v146, &global_stats));
          do
            v150 = __ldaxr(&pmem_total_refs);
          while (__stlxr(v150 - 1, &pmem_total_refs));
          do
            v151 = __ldaxr(&_pmem_total_blocks);
          while (__stlxr(v151 - 1, &_pmem_total_blocks));
          do
            v152 = __ldaxr(&pmem_bytes_allocated);
          while (__stlxr(v152 + v146, &pmem_bytes_allocated));
          (*(void (**)(uint64_t))(v136 + 40))(v136);
          free((void *)v136);
        }
      }
      bzero((void *)v133, 0x2C8uLL);
      LODWORD(v111) = *((_DWORD *)a1 + 2);
    }
    ++v131;
  }
  while (v131 < (int)v111);
  if ((int)v111 < 1)
  {
    v129 = 0;
    v77 = a1;
LABEL_140:
    v106 = v226;
    goto LABEL_141;
  }
  v153 = 0;
  v154 = 0;
  v155 = 0;
  v77 = a1;
  do
  {
    if ((v226[v154] & 1) == 0 && *a1)
    {
      memcpy((void *)(*a1 + 712 * v155++), (const void *)(*a1 + v153), 0x2C8uLL);
      LODWORD(v111) = *((_DWORD *)a1 + 2);
    }
    ++v154;
    v153 += 712;
  }
  while (v154 < (int)v111);
  if ((int)v111 < 1)
  {
    v129 = 0;
    goto LABEL_140;
  }
  v156 = 0;
  v129 = 0;
  v108 = v224;
  v106 = v226;
  v130 = v225;
  do
  {
    if ((v226[v156] & 1) == 0)
    {
      v226[v129++] = v226[v156];
      LODWORD(v111) = *((_DWORD *)a1 + 2);
    }
    ++v156;
  }
  while (v156 < (int)v111);
LABEL_142:
  *((_DWORD *)v77 + 2) = v129;
  refine_poses(v108, v130, &__src[12].tv_sec, (uint64_t)&__src[18], 0);
  v157 = *((_DWORD *)v77 + 2);
  if (v157 == *((_DWORD *)v77 + 3))
  {
    if (*(double *)&__src[27].tv_sec >= 0.1)
    {
      v161 = *v77;
      free(*(void **)(v161 + 488));
      free(*(void **)(v161 + 464));
      v162 = *(void ***)(v161 + 504);
      if (v162)
      {
        free(*v162);
        free(v162[1]);
        free(v162[2]);
        free(v162);
      }
      v163 = v106;
      v164 = *(_QWORD *)(v161 + 512);
      if (v164)
      {
        v165 = *(_QWORD *)(v164 - 8 * *(_QWORD *)(v161 + 528) - 8);
        v166 = (unsigned int *)(v165 + 24);
        do
        {
          v167 = __ldaxr(v166);
          v168 = v167 - 1;
        }
        while (__stlxr(v168, v166));
        if (v168 < 0)
          goto LABEL_211;
        if (v168)
        {
          do
            v169 = __ldaxr(&qword_254A77330);
          while (__stlxr(v169 - 1, &qword_254A77330));
          do
            v170 = __ldaxr((unint64_t *)&unk_254A77338);
          while (__stlxr(v170, (unint64_t *)&unk_254A77338));
          do
            v171 = __ldaxr(&global_stats);
          while (__stlxr(v171, &global_stats));
          do
            v172 = __ldaxr(&pmem_total_refs);
          while (__stlxr(v172 - 1, &pmem_total_refs));
          do
            v173 = __ldaxr(&_pmem_total_blocks);
          while (__stlxr(v173, &_pmem_total_blocks));
          do
            v174 = __ldaxr(&pmem_bytes_allocated);
          while (__stlxr(v174, &pmem_bytes_allocated));
        }
        else
        {
          v175 = -*(_QWORD *)(v165 + 8);
          do
            v176 = __ldaxr(&qword_254A77330);
          while (__stlxr(v176 - 1, &qword_254A77330));
          do
            v177 = __ldaxr((unint64_t *)&unk_254A77338);
          while (__stlxr(v177 - 1, (unint64_t *)&unk_254A77338));
          do
            v178 = __ldaxr(&global_stats);
          while (__stlxr(v178 + v175, &global_stats));
          do
            v179 = __ldaxr(&pmem_total_refs);
          while (__stlxr(v179 - 1, &pmem_total_refs));
          do
            v180 = __ldaxr(&_pmem_total_blocks);
          while (__stlxr(v180 - 1, &_pmem_total_blocks));
          do
            v181 = __ldaxr(&pmem_bytes_allocated);
          while (__stlxr(v181 + v175, &pmem_bytes_allocated));
          (*(void (**)(uint64_t))(v165 + 40))(v165);
          free((void *)v165);
        }
      }
      bzero((void *)v161, 0x2C8uLL);
      v158 = a1;
      v182 = *((_DWORD *)a1 + 2);
      v183 = *a1;
      if (v182 >= 1)
      {
        if (v182 == 1)
        {
          v182 = 1;
        }
        else
        {
          v217 = 0;
          v218 = 1;
          v219 = 712;
          do
          {
            if (v183)
            {
              memcpy((void *)(v183 + 712 * v217++), (const void *)(v183 + v219), 0x2C8uLL);
              v182 = *((_DWORD *)a1 + 2);
            }
            ++v218;
            v183 = *a1;
            v219 += 712;
          }
          while (v218 < v182);
        }
      }
      memcpy((void *)(v183 + 712 * (v182 - 1)), __src, 0x2C8uLL);
      v159 = 0;
      v106 = v163;
    }
    else
    {
LABEL_144:
      v158 = v77;
      v159 = 1;
    }
  }
  else
  {
    v160 = *v77;
    *((_DWORD *)v77 + 2) = v157 + 1;
    memcpy((void *)(v160 + 712 * v157), __src, 0x2C8uLL);
    v158 = v77;
    v159 = 0;
  }
  free(v106);
  free(v108);
  *a8 = 0.0;
  v184 = *((unsigned int *)v158 + 2);
  v185 = *v158;
  if ((int)v184 < 1)
  {
    v187 = 0;
    v190 = tv_usec;
  }
  else
  {
    v186 = 0;
    v187 = 0;
    v188 = (double *)(v185 + 440);
    v189 = 0.0;
    v190 = tv_usec;
    do
    {
      if (*v188 > v189)
      {
        v189 = *v188;
        *a8 = v189;
        v187 = v186;
      }
      ++v186;
      v188 += 89;
    }
    while (v184 != v186);
  }
  g_coords_diff((double *)&__src[6].tv_sec, (double *)(v185 + 712 * v187 + 96), (uint64_t)&v228);
  g_coords_conv(v228.f64, (double *)(*a1 + 712 * v187 + 192), v228.f64);
  g_coords_diff(v228.f64, v222, (uint64_t)&v228);
  v191 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v230), v231);
  *a11 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v228), v229);
  a11[1] = v191;
  a11[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v232), v233);
  if (a12)
  {
    v192 = (_DWORD *)(*a1 + 712 * v187);
    *a12 = v192[72];
    a12[1] = v192[73];
    a12[2] = v192[74];
    a12[3] = v192[75];
    a12[4] = v192[76];
    a12[5] = v192[77];
    a12[6] = v192[78];
    a12[7] = v192[79];
    a12[8] = v192[80];
    a12[9] = v192[81];
    a12[10] = v192[82];
    a12[11] = v192[83];
    a12[12] = v192[84];
    a12[13] = v192[85];
    a12[14] = v192[86];
    a12[15] = v192[87];
    a12[16] = v192[88];
    a12[17] = v192[89];
    a12[18] = v192[90];
    a12[19] = v192[91];
    a12[20] = v192[92];
    a12[21] = v192[93];
    a12[22] = v192[94];
    a12[23] = v192[95];
    a12[24] = v192[96];
    a12[25] = v192[97];
    a12[26] = v192[98];
    a12[27] = v192[99];
    a12[28] = v192[100];
    a12[29] = v192[101];
    a12[30] = v192[102];
    a12[31] = v192[103];
    a12[32] = v192[104];
    a12[33] = v192[105];
    a12[34] = v192[106];
    a12[35] = v192[107];
  }
  v238.tv_sec = 0;
  *(_QWORD *)&v238.tv_usec = 0;
  gettimeofday(&v238, 0);
  v193 = v238.tv_sec;
  v194 = v238.tv_usec;
  printf("Verbose (toc) : ");
  printf("%s: fuse", "vl_pose_fuse");
  printf(": %f ms", (float)((float)(1000000 * (v193 - tv_sec) - v190 + v194) / 1000.0));
  putchar(10);
  if (v159)
  {
    free(*(void **)&__src[30].tv_usec);
    free((void *)__src[29].tv_sec);
    v195 = *(void ***)&__src[31].tv_usec;
    if (*(_QWORD *)&__src[31].tv_usec)
    {
      free(**(void ***)&__src[31].tv_usec);
      free(v195[1]);
      free(v195[2]);
      free(v195);
    }
    if (!__src[32].tv_sec)
      return 1;
    v196 = *(_QWORD *)(__src[32].tv_sec - 8 * __src[33].tv_sec - 8);
    v197 = (unsigned int *)(v196 + 24);
    do
    {
      v198 = __ldaxr(v197);
      v199 = v198 - 1;
    }
    while (__stlxr(v199, v197));
    if (v199 >= 0)
    {
      if (v199)
      {
        do
          v200 = __ldaxr(&qword_254A77330);
        while (__stlxr(v200 - 1, &qword_254A77330));
        do
          v201 = __ldaxr((unint64_t *)&unk_254A77338);
        while (__stlxr(v201, (unint64_t *)&unk_254A77338));
        do
          v202 = __ldaxr(&global_stats);
        while (__stlxr(v202, &global_stats));
        do
          v203 = __ldaxr(&pmem_total_refs);
        while (__stlxr(v203 - 1, &pmem_total_refs));
        do
          v204 = __ldaxr(&_pmem_total_blocks);
        while (__stlxr(v204, &_pmem_total_blocks));
        do
          v205 = __ldaxr(&pmem_bytes_allocated);
        while (__stlxr(v205, &pmem_bytes_allocated));
      }
      else
      {
        v210 = -*(_QWORD *)(v196 + 8);
        do
          v211 = __ldaxr(&qword_254A77330);
        while (__stlxr(v211 - 1, &qword_254A77330));
        do
          v212 = __ldaxr((unint64_t *)&unk_254A77338);
        while (__stlxr(v212 - 1, (unint64_t *)&unk_254A77338));
        do
          v213 = __ldaxr(&global_stats);
        while (__stlxr(v213 + v210, &global_stats));
        do
          v214 = __ldaxr(&pmem_total_refs);
        while (__stlxr(v214 - 1, &pmem_total_refs));
        do
          v215 = __ldaxr(&_pmem_total_blocks);
        while (__stlxr(v215 - 1, &_pmem_total_blocks));
        do
          v216 = __ldaxr(&pmem_bytes_allocated);
        while (__stlxr(v216 + v210, &pmem_bytes_allocated));
        (*(void (**)(uint64_t))(v196 + 40))(v196);
        free((void *)v196);
      }
      return 1;
    }
LABEL_211:
    __assert_rtn("pmem_free", "pmem.c", 302, "count >= 0 && \"Negative count! Something is broken, double free? Memory corruption?\"");
  }
  v206 = *((int *)a1 + 2) - 1;
  v207 = *a1 + 712 * v206;
  v208 = *(double *)(v207 + 440);
  if (v208 >= *((double *)a1 + 9))
    v208 = *((double *)a1 + 9);
  *(double *)(v207 + 440) = v208;
  return v187 != (_DWORD)v206;
}

void vl_pose_fuse_free(uint64_t a1)
{
  void **v1;
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  signed int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;

  if (a1)
  {
    v1 = (void **)a1;
    if (*(int *)(a1 + 8) >= 1)
    {
      v2 = 0;
      do
      {
        v3 = *v1;
        v4 = (char *)&v3[89 * v2];
        free(*((void **)v4 + 61));
        free(*((void **)v4 + 58));
        v5 = (void **)*((_QWORD *)v4 + 63);
        if (v5)
        {
          free(*v5);
          free(v5[1]);
          free(v5[2]);
          free(v5);
        }
        v6 = v3[89 * v2 + 64];
        if (v6)
        {
          v7 = *(_QWORD *)(v6 - 8 * v3[89 * v2 + 66] - 8);
          v8 = (unsigned int *)(v7 + 24);
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (v10 < 0)
            __assert_rtn("pmem_free", "pmem.c", 302, "count >= 0 && \"Negative count! Something is broken, double free? Memory corruption?\"");
          if (v10)
          {
            do
              v11 = __ldaxr(&qword_254A77330);
            while (__stlxr(v11 - 1, &qword_254A77330));
            do
              v12 = __ldaxr((unint64_t *)&unk_254A77338);
            while (__stlxr(v12, (unint64_t *)&unk_254A77338));
            do
              v13 = __ldaxr(&global_stats);
            while (__stlxr(v13, &global_stats));
            do
              v14 = __ldaxr(&pmem_total_refs);
            while (__stlxr(v14 - 1, &pmem_total_refs));
            do
              v15 = __ldaxr(&_pmem_total_blocks);
            while (__stlxr(v15, &_pmem_total_blocks));
            do
              v16 = __ldaxr(&pmem_bytes_allocated);
            while (__stlxr(v16, &pmem_bytes_allocated));
          }
          else
          {
            v17 = -*(_QWORD *)(v7 + 8);
            do
              v18 = __ldaxr(&qword_254A77330);
            while (__stlxr(v18 - 1, &qword_254A77330));
            do
              v19 = __ldaxr((unint64_t *)&unk_254A77338);
            while (__stlxr(v19 - 1, (unint64_t *)&unk_254A77338));
            do
              v20 = __ldaxr(&global_stats);
            while (__stlxr(v20 + v17, &global_stats));
            do
              v21 = __ldaxr(&pmem_total_refs);
            while (__stlxr(v21 - 1, &pmem_total_refs));
            do
              v22 = __ldaxr(&_pmem_total_blocks);
            while (__stlxr(v22 - 1, &_pmem_total_blocks));
            do
              v23 = __ldaxr(&pmem_bytes_allocated);
            while (__stlxr(v23 + v17, &pmem_bytes_allocated));
            (*(void (**)(uint64_t))(v7 + 40))(v7);
            free((void *)v7);
          }
        }
        bzero(&v3[89 * v2++], 0x2C8uLL);
        v1 = (void **)a1;
      }
      while (v2 < *(int *)(a1 + 8));
    }
    free(*v1);
    free(v1);
  }
}

void refine_poses(_OWORD **a1, int a2, _OWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  size_t v11;
  double *v12;
  void *v13;
  size_t v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  double *v18;
  _OWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v10 = 3 * a2;
  v11 = 96 * a2;
  v12 = (double *)malloc_type_malloc(v11, 0x1000040565EDBD2uLL);
  v13 = malloc_type_malloc(v11, 0x1000040565EDBD2uLL);
  v14 = 8 * v10;
  v15 = malloc_type_malloc(8 * v10, 0x1020040FBFA920DuLL);
  v16 = malloc_type_malloc(v14, 0x1020040FBFA920DuLL);
  v17 = v16;
  if (a2 >= 1)
  {
    v18 = v12;
    v19 = v13;
    v20 = v15;
    v21 = v16;
    v22 = a2;
    do
    {
      v23 = *a1;
      v24 = (*a1)[1];
      *(_OWORD *)v18 = **a1;
      *((_OWORD *)v18 + 1) = v24;
      v25 = v23[2];
      v26 = v23[3];
      v27 = v23[5];
      *((_OWORD *)v18 + 4) = v23[4];
      *((_OWORD *)v18 + 5) = v27;
      *((_OWORD *)v18 + 2) = v25;
      *((_OWORD *)v18 + 3) = v26;
      v28 = *a1;
      v29 = (*a1)[7];
      *v19 = (*a1)[6];
      v19[1] = v29;
      v30 = v28[8];
      v31 = v28[9];
      v32 = v28[11];
      v19[4] = v28[10];
      v19[5] = v32;
      v19[2] = v30;
      v19[3] = v31;
      v33 = (*a1)[30];
      v20[2] = *((_QWORD *)*a1 + 62);
      *(_OWORD *)v20 = v33;
      v20 += 3;
      v34 = *a1++;
      v35 = *(_OWORD *)((char *)v34 + 456);
      v21[2] = *((_QWORD *)v34 + 59);
      *(_OWORD *)v21 = v35;
      v21 += 3;
      v19 += 6;
      v18 += 12;
      --v22;
    }
    while (v22);
  }
  vl_pose_refine_multi(v12, (double *)v13, (uint64_t)v15, (uint64_t)v16, a2, 5, (double *)v13, a4, 0.1, 0.0026667, 0.05, 0.00049751);
  if (a3)
  {
    v36 = *((_OWORD *)v13 + 1);
    *a3 = *(_OWORD *)v13;
    a3[1] = v36;
    v37 = *((_OWORD *)v13 + 2);
    v38 = *((_OWORD *)v13 + 3);
    v39 = *((_OWORD *)v13 + 5);
    a3[4] = *((_OWORD *)v13 + 4);
    a3[5] = v39;
    a3[2] = v37;
    a3[3] = v38;
  }
  if (a5)
    g_coords_diff((double *)v13 + 12, (double *)v13, a5);
  free(v12);
  free(v13);
  free(v15);
  free(v17);
}

uint64_t pose_est_inlier_sim(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32[2];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  g_coords_diff((double *)a1, (double *)a2, (uint64_t)&v33);
  v6 = *(unsigned int *)(*(_QWORD *)(a1 + 504) + 28);
  if ((int)v6 < 1)
    return 0;
  v7 = 0;
  v8 = *((double *)&v37 + 1);
  v9 = *(double *)&v38;
  v10 = *((double *)&v38 + 1);
  v30 = v10;
  v31 = v9;
  v11 = *(double *)&v33;
  v12 = *((double *)&v34 + 1);
  v13 = *(double *)&v36;
  v28 = v13;
  v29 = v12;
  v14 = *((double *)&v33 + 1);
  v15 = *(double *)&v35;
  v27 = v15;
  v16 = *((double *)&v36 + 1);
  v17 = *(double *)&v34;
  v18 = *((double *)&v35 + 1);
  v19 = *(double *)&v37;
  v20 = (float *)(*(_QWORD *)(a1 + 464) + 8);
  do
  {
    v21 = *(v20 - 2);
    v22 = *(v20 - 1);
    v23 = *v20;
    v24 = (float)((float)((float)(v22 * v14) + (float)(v11 * v21)) + (float)(v17 * *v20)) + v8;
    if (v24 > 0.0)
    {
      v32[0] = (float)((float)((float)((float)(v22 * v27) + (float)(v29 * v21)) + (float)(v18 * v23)) + v31) / v24;
      v32[1] = (float)((float)((float)((float)(v22 * v16) + (float)(v28 * v21)) + (float)(v19 * v23)) + v30) / v24;
      rkd_nn_app(*(_QWORD *)(a2 + 504), v32, 0, 0, 0x7FFFFFFF, a3);
      if (v25 < a3)
        v7 = (v7 + 1);
    }
    v20 += 3;
    --v6;
  }
  while (v6);
  return v7;
}

uint64_t *vl_hs_model_load(void *a1, const char *a2)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t *v14;
  uint64_t *result;
  _BYTE __src[464];
  char v17;
  char v18[512];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = malloc_type_calloc(1uLL, 0x200uLL, 0x1080040DA4BCE92uLL);
  model_0 = (uint64_t)v4;
  *v4 = (_DWORD)a1;
  vl_hs_model_get_par_version(a1, (uint64_t)__src);
  memcpy(v4 + 2, __src, 0x1D0uLL);
  v5 = *(_QWORD *)(model_0 + 8);
  v6 = *(_QWORD *)(model_0 + 16);
  v7 = *(_QWORD *)(model_0 + 24);
  v8 = *(_QWORD *)(model_0 + 32);
  free(*(void **)(model_0 + 472));
  v5 *= 4;
  v9 = malloc_type_malloc(v5 * v6 * v7 * v8 + 4095, 0x994B4668uLL);
  v10 = model_0;
  *(_QWORD *)(model_0 + 472) = v9;
  *(_QWORD *)(v10 + 480) = (char *)v9 + (-(int)v9 & 0xFFFLL);
  free(*(void **)(v10 + 488));
  v11 = malloc_type_malloc(v5 + 4095, 0x48C00740uLL);
  v12 = model_0;
  *(_QWORD *)(model_0 + 488) = v11;
  *(_QWORD *)(v12 + 496) = (char *)v11 + (-(int)v11 & 0xFFFLL);
  sprintf(v18, "espressos/hs_v%d.mlmodelc", v4[14]);
  if (a2)
    v13 = a2;
  else
    v13 = "com.apple.3dv.vl";
  vl_get_model_path(&v17, v13, v18);
  v14 = (uint64_t *)operator new();
  result = vl_hs_esp_net_t::vl_hs_esp_net_t(v14);
  *(_QWORD *)(model_0 + 504) = v14;
  return result;
}

void sub_210B84334(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCEB50](v1, 0x1080C40AA79BA9DLL);
  _Unwind_Resume(a1);
}

void vl_hs_model_free()
{
  uint64_t v0;
  uint64_t v1;

  v0 = model_0;
  if (model_0)
  {
    v1 = *(_QWORD *)(model_0 + 504);
    if (v1)
    {
      espresso_plan_build_clean();
      espresso_plan_destroy();
      espresso_context_destroy();
      MEMORY[0x212BCEB50](v1, 0x1080C40AA79BA9DLL);
      *(_QWORD *)(v0 + 504) = 0;
      v0 = model_0;
    }
    free(*(void **)(v0 + 472));
    free(*(void **)(model_0 + 488));
    free((void *)model_0);
    model_0 = 0;
  }
}

uint64_t vl_hs_forward()
{
  uint64_t result;
  FILE *v1;
  const char *status_string;
  void *exception;
  uint64_t v4;

  result = espresso_plan_execute_sync();
  if ((result & 0x80000000) != 0)
  {
    v1 = (FILE *)*MEMORY[0x24BDAC8D8];
    status_string = (const char *)espresso_get_status_string();
    fprintf(v1, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/verify/vl_verify_hs.mm", 155, status_string);
    exception = __cxa_allocate_exception(0x10uLL);
    v4 = espresso_get_status_string();
    MEMORY[0x212BCEB2C](exception, v4);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  return result;
}

void sub_210B84494(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *vl_hs_esp_net_t::vl_hs_esp_net_t(uint64_t *a1)
{
  FILE *v3;
  const char *status_string;
  void *exception;
  uint64_t v6;
  FILE *v7;
  const char *v8;
  uint64_t v9;
  FILE *v10;
  const char *v11;
  uint64_t v12;
  FILE *v13;
  const char *v14;
  uint64_t v15;
  FILE *v16;
  const char *v17;
  void *v18;
  uint64_t v19;
  FILE *v20;
  const char *v21;
  void *v22;
  uint64_t v23;
  FILE *v24;
  const char *v25;
  void *v26;
  uint64_t v27;
  FILE *v28;
  const char *v29;
  void *v30;
  uint64_t v31;

  *a1 = espresso_create_context_auto();
  a1[1] = espresso_create_plan();
  espresso_get_default_storage_type();
  if ((espresso_plan_add_network() & 0x80000000) != 0)
  {
    v3 = (FILE *)*MEMORY[0x24BDAC8D8];
    status_string = (const char *)espresso_get_status_string();
    fprintf(v3, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/verify/vl_verify_hs.mm", 68, status_string);
    exception = __cxa_allocate_exception(0x10uLL);
    v6 = espresso_get_status_string();
    MEMORY[0x212BCEB2C](exception, v6);
    goto LABEL_14;
  }
  if ((espresso_network_change_blob_shape() & 0x80000000) != 0)
  {
    v7 = (FILE *)*MEMORY[0x24BDAC8D8];
    v8 = (const char *)espresso_get_status_string();
    fprintf(v7, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/verify/vl_verify_hs.mm", 74, v8);
    exception = __cxa_allocate_exception(0x10uLL);
    v9 = espresso_get_status_string();
    MEMORY[0x212BCEB2C](exception, v9);
    goto LABEL_14;
  }
  if ((espresso_network_change_blob_shape() & 0x80000000) != 0)
  {
    v10 = (FILE *)*MEMORY[0x24BDAC8D8];
    v11 = (const char *)espresso_get_status_string();
    fprintf(v10, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/verify/vl_verify_hs.mm", 75, v11);
    exception = __cxa_allocate_exception(0x10uLL);
    v12 = espresso_get_status_string();
    MEMORY[0x212BCEB2C](exception, v12);
    goto LABEL_14;
  }
  if ((espresso_plan_build() & 0x80000000) != 0)
  {
    v13 = (FILE *)*MEMORY[0x24BDAC8D8];
    v14 = (const char *)espresso_get_status_string();
    fprintf(v13, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/verify/vl_verify_hs.mm", 77, v14);
    exception = __cxa_allocate_exception(0x10uLL);
    v15 = espresso_get_status_string();
    MEMORY[0x212BCEB2C](exception, v15);
LABEL_14:
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if ((espresso_buffer_pack_tensor_shape() & 0x80000000) != 0)
  {
    v16 = (FILE *)*MEMORY[0x24BDAC8D8];
    v17 = (const char *)espresso_get_status_string();
    fprintf(v16, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/verify/vl_verify_hs.mm", 84, v17);
    v18 = __cxa_allocate_exception(0x10uLL);
    v19 = espresso_get_status_string();
    MEMORY[0x212BCEB2C](v18, v19);
    __cxa_throw(v18, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if ((espresso_buffer_pack_tensor_shape() & 0x80000000) != 0)
  {
    v20 = (FILE *)*MEMORY[0x24BDAC8D8];
    v21 = (const char *)espresso_get_status_string();
    fprintf(v20, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/verify/vl_verify_hs.mm", 85, v21);
    v22 = __cxa_allocate_exception(0x10uLL);
    v23 = espresso_get_status_string();
    MEMORY[0x212BCEB2C](v22, v23);
    __cxa_throw(v22, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if ((espresso_network_bind_buffer() & 0x80000000) != 0)
  {
    v24 = (FILE *)*MEMORY[0x24BDAC8D8];
    v25 = (const char *)espresso_get_status_string();
    fprintf(v24, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/verify/vl_verify_hs.mm", 88, v25);
    v26 = __cxa_allocate_exception(0x10uLL);
    v27 = espresso_get_status_string();
    MEMORY[0x212BCEB2C](v26, v27);
    __cxa_throw(v26, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if ((espresso_network_bind_buffer() & 0x80000000) != 0)
  {
    v28 = (FILE *)*MEMORY[0x24BDAC8D8];
    v29 = (const char *)espresso_get_status_string();
    fprintf(v28, "Error: %s:%d %s\n", "/Library/Caches/com.apple.xbs/Sources/VisualLocalization/argo/lib/verify/vl_verify_hs.mm", 90, v29);
    v30 = __cxa_allocate_exception(0x10uLL);
    v31 = espresso_get_status_string();
    MEMORY[0x212BCEB2C](v30, v31);
    __cxa_throw(v30, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  return a1;
}

void sub_210B849EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_210B84A00(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_210B84A14(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_210B84A28(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_210B84A3C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_210B84A50(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_210B84A64(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_210B84A78(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t vl_retrieval(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  int64_t v26;
  void *v27;
  size_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  size_t v34;
  uint64_t v35;
  int64_t v36;
  _QWORD *v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  unsigned __int16 *v49;
  int v50;
  unsigned int v51;
  int32x4_t *v52;
  uint64_t v53;
  int v54;
  int32x4_t *v55;
  int32x4_t v56;
  unint64_t v57;
  int32x4_t v58;
  uint64_t v59;
  __int32 *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int64_t v82;
  int64_t v83;
  void *v84;
  int64_t v85;

  v7 = a1;
  v8 = *((int *)a3 + 114);
  v81 = *((int *)a3 + 115);
  v82 = *((unsigned int *)a3 + 114);
  v9 = *((unsigned int *)a3 + 115);
  v80 = *a3;
  v10 = a3[59];
  v11 = *(_QWORD *)(a2 + 32);
  v83 = 0;
  v84 = 0;
  v85 = 0;
  if (*(_DWORD *)(a1 + 212))
  {
    *(_QWORD *)(a1 + 120) -= mach_absolute_time();
    if (*(_QWORD *)(a2 + 24) == v81)
      goto LABEL_4;
    goto LABEL_3;
  }
  clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(a1 + 32));
  clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(v7 + 16));
  clock_gettime(_CLOCK_MONOTONIC, (timespec *)v7);
  if (*(_QWORD *)(a2 + 24) != v81)
  {
LABEL_3:
    printf("%sError : ", (const char *)&unk_210BC3C5E);
    printf("global_desc size mismatches %llu vs %d", *(_QWORD *)(a2 + 24), v9);
    putchar(10);
  }
LABEL_4:
  if ((int)v82 <= 0)
  {
    v25 = malloc_type_malloc(0, 0x38CCE670uLL);
    qsort(v25, 0, 0xCuLL, (int (__cdecl *)(const void *, const void *))cmp_float_asc_0);
    free(v25);
    v26 = 0;
    v13 = 0;
    v27 = 0;
    v28 = 4 * v8;
    v29 = v80;
  }
  else
  {
    v78 = a4;
    v79 = v7;
    v77 = v8;
    if ((int)v9 > 0)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      while (1)
      {
        if (v81 >= 8)
        {
          v17 = 0;
          v16 = 0.0;
          do
          {
            v18 = vsubq_f32(*(float32x4_t *)(v11 + v17), *(float32x4_t *)(v10 + v17));
            v19 = vsubq_f32(*(float32x4_t *)(v11 + v17 + 16), *(float32x4_t *)(v10 + v17 + 16));
            v20 = vmulq_f32(v18, v18);
            v21 = vmulq_f32(v19, v19);
            v16 = (float)((float)((float)((float)((float)((float)((float)(v16 + v20.f32[0]) + v20.f32[1]) + v20.f32[2])
                                                + v20.f32[3])
                                        + v21.f32[0])
                                + v21.f32[1])
                        + v21.f32[2])
                + v21.f32[3];
            v17 += 32;
          }
          while (((4 * v9) & 0x3FFFFFFE0) != v17);
          v15 = v9 & 0xFFFFFFF8;
          if (v15 == v9)
            goto LABEL_14;
        }
        else
        {
          v15 = 0;
          v16 = 0.0;
        }
        do
        {
          v22 = *(float *)(v11 + 4 * v15) - *(float *)(v10 + 4 * v15);
          v16 = v16 + (float)(v22 * v22);
          ++v15;
        }
        while (v9 != v15);
LABEL_14:
        v23 = v14 + 1;
        if (v14 >= v12)
        {
          v24 = 2 * v12;
          if (!v12)
            v24 = 64;
          if (v24 <= v14)
            v12 = v14 + 1;
          else
            v12 = v24;
          v13 = malloc_type_realloc(v13, 4 * v12, 0xEF0A7654uLL);
        }
        *((float *)v13 + v14) = v16;
        v10 += 4 * v81;
        ++v14;
        if (v23 == v82)
          goto LABEL_33;
      }
    }
    v30 = 0;
    v13 = 0;
    v31 = 0;
    do
    {
      v32 = v31 + 1;
      if (v31 >= v30)
      {
        v33 = 2 * v30;
        if (!v30)
          v33 = 64;
        if (v33 <= v31)
          v30 = v31 + 1;
        else
          v30 = v33;
        v13 = malloc_type_realloc(v13, 4 * v30, 0xEF0A7654uLL);
      }
      *((_DWORD *)v13 + v31++) = 0;
    }
    while (v82 != v32);
LABEL_33:
    _da_sort_indexed((char *)v13, v82, &v84, &v83, &v85, 4uLL, (int (__cdecl *)(const void *, const void *))cmp_float_asc_0);
    v28 = 4 * v82;
    if (v77 <= 0x40)
      v34 = 256;
    else
      v34 = 4 * v82;
    v27 = malloc_type_realloc(0, v34, 0xCC2CD23DuLL);
    v26 = v83;
    v7 = v79;
    v29 = v80;
    a4 = v78;
  }
  bzero(v27, v28);
  v35 = *(int *)(a4 + 4);
  if (v26 < v35)
    v35 = v26;
  if (v35 >= 1)
  {
    v36 = 0;
    v37 = v84;
    do
    {
      *((_DWORD *)v27 + v37[v36++]) = 1;
      v38 = *(int *)(a4 + 4);
      if (v26 < v38)
        v38 = v26;
    }
    while (v38 > v36);
  }
  v39 = 0;
  a3[61] = 0;
  v40 = a3[63];
  if (v29 > v40)
  {
    v41 = 2 * v40;
    if (!v40)
      v41 = 64;
    if (v41 <= v29)
      v42 = v29;
    else
      v42 = v41;
    if (v42)
    {
      a3[62] = (uint64_t)malloc_type_realloc((void *)a3[62], 4 * v42, 0xAEC2B596uLL);
      v39 = a3[61];
    }
    else
    {
      v39 = 0;
    }
    a3[63] = v42;
  }
  bzero((void *)(a3[62] + 4 * v39), 4 * v29);
  v43 = a3[61];
  v44 = v43 + v29;
  a3[61] = v44;
  if (v29 >= 1)
  {
    v45 = 0;
    v46 = 0;
    v47 = a3[52];
    do
    {
      v48 = *(unsigned __int16 *)(v47 + 2 * v45);
      if (*(_WORD *)(v47 + 2 * v45))
      {
        v49 = (unsigned __int16 *)(a3[55] + 2 * v46);
        v50 = *(unsigned __int16 *)(v47 + 2 * v45);
        do
        {
          v51 = *v49++;
          if (*((_DWORD *)v27 + v51))
            *(_DWORD *)(a3[62] + 4 * v45) = 1;
          --v50;
        }
        while (v50);
        v46 += v48;
      }
      ++v45;
    }
    while (v45 != v29);
  }
  if (v44 < 1)
  {
    v54 = 0;
    goto LABEL_72;
  }
  v52 = (int32x4_t *)a3[62];
  if ((unint64_t)v44 < 8)
  {
    v53 = 0;
    v54 = 0;
LABEL_70:
    v59 = v43 + v29 - v53;
    v60 = &v52->i32[v53];
    do
    {
      v61 = *v60++;
      v54 += v61;
      --v59;
    }
    while (v59);
    goto LABEL_72;
  }
  v53 = v44 & 0x7FFFFFFFFFFFFFF8;
  v55 = v52 + 1;
  v56 = 0uLL;
  v57 = v44 & 0xFFFFFFFFFFFFFFF8;
  v58 = 0uLL;
  do
  {
    v56 = vaddq_s32(v55[-1], v56);
    v58 = vaddq_s32(*v55, v58);
    v55 += 2;
    v57 -= 8;
  }
  while (v57);
  v54 = vaddvq_s32(vaddq_s32(v58, v56));
  if (v44 != v53)
    goto LABEL_70;
LABEL_72:
  printf("Verbose : ");
  printf("%d/%d tracks retained", v54, v29);
  putchar(10);
  free(v13);
  free(v84);
  free(v27);
  if (*(_DWORD *)(v7 + 212))
  {
    *(_QWORD *)(v7 + 120) += mach_absolute_time();
    if (*(_DWORD *)(v7 + 212))
    {
LABEL_74:
      printf("Verbose : ");
      printf("Total time for %40s : %7.3f ms", (const char *)(v7 + 148), (double)*(uint64_t *)(v7 + 120) * 0.000001);
      return putchar(10);
    }
  }
  else
  {
    clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(v7 + 64));
    clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(v7 + 80));
    clock_gettime(_CLOCK_MONOTONIC, (timespec *)(v7 + 48));
    v70 = *(_QWORD *)(v7 + 56) - *(_QWORD *)(v7 + 8) + 1000000000 * (*(_QWORD *)(v7 + 48) - *(_QWORD *)v7);
    v71 = *(_QWORD *)(v7 + 72) - *(_QWORD *)(v7 + 24) + 1000000000 * (*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 16));
    v72 = *(_QWORD *)(v7 + 88) - *(_QWORD *)(v7 + 40) + 1000000000 * (*(_QWORD *)(v7 + 80) - *(_QWORD *)(v7 + 32));
    v73 = *(_QWORD *)(v7 + 128);
    v74 = v70 + *(_QWORD *)(v7 + 120);
    *(_QWORD *)(v7 + 96) = v70;
    *(_QWORD *)(v7 + 104) = v71;
    v75 = v71 + v73;
    *(_QWORD *)(v7 + 112) = v72;
    *(_QWORD *)(v7 + 120) = v74;
    v76 = v72 + *(_QWORD *)(v7 + 136);
    *(_QWORD *)(v7 + 128) = v75;
    *(_QWORD *)(v7 + 136) = v76;
    ++*(_DWORD *)(v7 + 144);
    if (*(_DWORD *)(v7 + 212))
      goto LABEL_74;
  }
  return log_col_app((uint64_t)"%s%s%s:%s%7.1fms%s", v62, v63, v64, v65, v66, v67, v68, (char)&str_4_1);
}

uint64_t cmp_float_asc_0(float *a1, float *a2)
{
  unsigned int v2;

  if (*a1 >= *a2)
    v2 = 1;
  else
    v2 = -1;
  if (*a1 == *a2)
    return 0;
  else
    return v2;
}

uint64_t vl_pose_p3p(float *a1, float *a2, float *a3, float *a4, float *a5, float *a6, uint64_t a7, double a8, double a9, int8x16_t a10, int8x16_t a11)
{
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  BOOL v28;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  uint64_t v73;
  float v74;
  uint64_t result;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float *v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  float v227;
  float *v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float v249;
  float v250;
  float v251;
  float v252;
  float v253;
  float v254;
  float v255;
  float v256;
  float v257;
  float v258;
  float v259;
  float v260;
  float v261;
  float v262;
  float v263;
  float v264;
  float v265;
  float v266;
  float v267;
  float v268;
  float v269;
  float v270;
  float v271;
  float v272;
  float v273;
  float v274;
  float v275;
  float v276;
  float v277[4];
  float v278[3];
  uint64_t v279;

  v279 = *MEMORY[0x24BDAC8D0];
  v11 = *a1;
  v12 = a1[1];
  v13 = *a2;
  v14 = a2[1];
  v15 = *a3;
  v16 = a3[1];
  if (fabsf((float)((float)(*a2 * (float)(v16 - v12)) + (float)(*a1 * (float)(v14 - v16)))+ (float)(*a3 * (float)(v12 - v14))) < 0.001)return 0;
  v17 = *a4;
  v18 = a4[1];
  v19 = a4[2];
  v20 = a5[1];
  v21 = a5[2];
  v22 = a6[1];
  v23 = a6[2];
  v24 = *a4 - *a6;
  v25 = *a4 - *a5;
  v26 = fabsf((float)((float)(v19 - v23) * v25) - (float)(v24 * (float)(v19 - v21)));
  v27 = fabsf((float)(v24 * (float)(v18 - v20)) - (float)((float)(v18 - v22) * v25));
  v28 = fabsf((float)((float)(v18 - v22) * (float)(v19 - v21)) - (float)((float)(v19 - v23) * (float)(v18 - v20))) < 0.001
     && v26 < 0.001;
  if (v28 && v27 < 0.001)
    return 0;
  v273 = *a5;
  v275 = a4[1];
  v247 = a6[1];
  v249 = *a6;
  v251 = a5[2];
  v253 = a5[1];
  v245 = a6[2];
  v31 = (float)((float)((float)(v24 * v24) + 0.0) + (float)((float)(v18 - v22) * (float)(v18 - v22)))
      + (float)((float)(v19 - v23) * (float)(v19 - v23));
  v32 = (float)((float)((float)(v25 * v25) + 0.0) + (float)((float)(v18 - v20) * (float)(v18 - v20)))
      + (float)((float)(v19 - v21) * (float)(v19 - v21));
  v33 = (float)((float)((float)((float)(*a5 - *a6) * (float)(*a5 - *a6)) + 0.0)
              + (float)((float)(v20 - v22) * (float)(v20 - v22)))
      + (float)((float)(v21 - v23) * (float)(v21 - v23));
  v34 = sqrtf((float)((float)(v12 * v12) + (float)(v11 * v11)) + 1.0);
  v35 = v11 / v34;
  v36 = v12 / v34;
  v37 = 1.0 / v34;
  v38 = sqrtf((float)((float)(v14 * v14) + (float)(v13 * v13)) + 1.0);
  v39 = v13 / v38;
  v40 = v14 / v38;
  v41 = 1.0 / v38;
  v42 = sqrtf((float)((float)(v16 * v16) + (float)(v15 * v15)) + 1.0);
  v43 = v15 / v42;
  v44 = v16 / v42;
  v45 = 1.0 / v42;
  v46 = (float)((float)(v39 * v43) + 0.0) + (float)(v40 * v44);
  v259 = v40;
  v260 = v39;
  v47 = (float)((float)((float)(v35 * v39) + 0.0) + (float)(v36 * v40)) + (float)(v37 * v41);
  v262 = v36;
  v263 = v35;
  v256 = v44;
  v257 = v43;
  v261 = v37;
  v48 = (float)((float)((float)(v35 * v43) + 0.0) + (float)(v36 * v44)) + (float)(v37 * v45);
  v258 = v41;
  v255 = v45;
  v49 = v46 + (float)(v41 * v45);
  v50 = v49 * v48;
  v51 = v32 + (float)(v33 - v31);
  v52 = (float)(v33 - v31) - v32;
  v266 = v48;
  v53 = v48 * v48;
  v54 = (float)((float)(v32 * (float)(v31 * 4.0)) * (float)(v49 * v49)) - (float)(v52 * v52);
  v55 = (float)(v32 * 4.0) * (float)(v31 - v32);
  v56 = (float)(v33 - v31) * 4.0;
  v57 = (float)((float)((float)((float)(v47 * (float)(v50 * (float)((float)(v32 * 8.0) * (float)(v33 + v31))))
                              + (float)((float)((float)(v32 * 4.0) * (float)(v33 - v32)) * v53))
                      + (float)(v55 * (float)(v49 * v49)))
              + (float)((float)(v52 * -2.0) * v51))
      + (float)((float)-(float)(v56 * (float)(v33 - v31)) * (float)(v47 * v47));
  v58 = (float)(v47 * (float)(v49 * (float)(v49 * (float)(v32 * (float)(v31 * -8.0)))))
      + (float)((float)((float)(v32 * -4.0) * (float)((float)(v33 + v31) - v32)) * v50);
  v59 = v32 * (float)(v33 * 4.0);
  v60 = (float)((float)((float)(v53 * (float)(v32 * (float)(v33 * -8.0))) * v47) - (float)(v55 * v50))
      - (float)(v59 * v50);
  *(float *)a11.i32 = (float)(v59 * v53) - (float)(v51 * v51);
  v61 = v58 + (float)((float)((float)(v33 - v31) * (float)(v52 * 4.0)) * v47);
  *(float *)a10.i32 = v60 + (float)((float)(v56 * v51) * v47);
  v264 = v47;
  v265 = v32;
  if (fabsf(v54) >= 0.0000001)
  {
    v271 = *a4;
    v62 = (float)(1.0 / v54) * v61;
    v63 = (float)(1.0 / v54) * v57;
    v64 = (float)(1.0 / v54) * *(float *)a10.i32;
    v65 = (float)(*(float *)a11.i32 * (float)(1.0 / v54)) * 4.0;
    *(float *)a11.i32 = (float)((float)(v65 * v63)
                              + (float)((float)-(float)((float)(*(float *)a11.i32 * (float)(1.0 / v54)) * v62) * v62))
                      - (float)(v64 * v64);
    *(float *)a10.i32 = -(float)(v65 - (float)(v64 * v62));
    if (solve_cubic(v278, 1.0, -v63, a10, a11))
    {
      v66 = (float)((float)((float)(v62 * v62) * 0.25) - v63) + v278[0];
      if (v66 > 0.0)
      {
        v67 = sqrtf(v66);
        v47 = v264;
        if (fabsf(v67) >= 0.0000001)
        {
          v68 = (float)((float)((float)(v62 * v278[0]) * 0.5) - v64) / (float)(v67 + v67);
          v69 = (float)(v62 * 0.5) - v67;
          v70 = sqrtf((float)((float)((float)(v278[0] * 0.5) - v68) * -4.0) + (float)(v69 * v69));
          v277[0] = (float)(v70 - v69) * 0.5;
          v277[1] = (float)((float)-v69 - v70) * 0.5;
          v71 = (float)(v62 * 0.5) + v67;
          v72 = sqrtf((float)((float)((float)(v278[0] * 0.5) + v68) * -4.0) + (float)(v71 * v71));
          v277[2] = (float)(v72 - v71) * 0.5;
          v277[3] = (float)((float)-v71 - v72) * 0.5;
          LODWORD(v73) = 4;
          v74 = v265;
          v17 = v271;
          goto LABEL_15;
        }
      }
    }
    return 0;
  }
  v74 = v32;
  LODWORD(v73) = solve_cubic(v277, v61, v57, a10, a11);
  if ((int)v73 < 1)
    return 0;
LABEL_15:
  result = 0;
  v270 = (float)(v74 + v31) - v33;
  v272 = (float)(v31 - v33) - v74;
  v268 = v49 * (float)(v74 + v74);
  v269 = v47 * (float)((float)(v33 - v31) + (float)(v33 - v31));
  v76 = -2.0;
  v267 = v266 * (float)(v74 * -2.0);
  v77 = (float)((float)(v17 + v273) + v249) / 3.0;
  v78 = (float)((float)(v275 + v253) + v247) / 3.0;
  v79 = (float)((float)(v19 + v251) + v245) / 3.0;
  v80 = v17 - v77;
  v81 = v19 - v79;
  v82 = v273 - v77;
  v83 = v253 - v78;
  v84 = v251 - v79;
  v252 = v78;
  v254 = v77;
  v240 = v249 - v77;
  v241 = v84;
  v85 = v247 - v78;
  v248 = v80;
  v250 = v79;
  v238 = v245 - v79;
  v239 = v85;
  v86 = (float)((float)(v275 - v78) * v84) - (float)((float)(v19 - v79) * v83);
  v244 = v81;
  v246 = v275 - v78;
  v87 = (float)(v81 * v82) - (float)(v80 * v84);
  v242 = v83;
  v243 = v82;
  v88 = (float)(v80 * v83) - (float)((float)(v275 - v78) * v82);
  v89 = 1.0;
  v90 = 1.0 / sqrtf((float)((float)((float)(v86 * v86) + 0.0) + (float)(v87 * v87)) + (float)(v88 * v88));
  v236 = v87 * v90;
  v237 = v86 * v90;
  v234 = -(float)(v88 * v90);
  v235 = v88 * v90;
  v232 = -(float)(v87 * v90);
  v233 = -(float)(v86 * v90);
  v73 = v73;
  v91 = v277;
  do
  {
    v92 = *v91;
    v93 = sqrtf(v74 / (float)((float)(v89 + (float)(v92 * v92)) + (float)((float)(*v91 * v76) * v47)));
    if (v93 > 0.0)
    {
      v94 = v92 * v93;
      if ((float)(v92 * v93) > 0.0)
      {
        v95 = (float)((float)((float)(v272 + (float)((float)(v270 * v92) * v92)) + (float)(v269 * v92))
                    / (float)(v267 + (float)(v268 * v92)))
            * v93;
        if (v95 > 0.0)
        {
          v96 = v263 * v93;
          v97 = v262 * v93;
          v98 = v261 * v93;
          v99 = v260 * v94;
          v100 = v259 * v94;
          v101 = v258 * v94;
          v276 = v257 * v95;
          v102 = v256 * v95;
          v103 = v255 * v95;
          v104 = (float)((float)(v256 * v95) + (float)(v97 + v100)) / 3.0;
          v105 = (float)((float)(v255 * v95) + (float)(v98 + v101)) / 3.0;
          v274 = (float)((float)(v257 * v95) + (float)(v96 + v99)) / 3.0;
          v106 = v96 - v274;
          v107 = v97 - v104;
          v108 = v98 - v105;
          v109 = v99 - v274;
          v110 = v100 - v104;
          v111 = v101 - v105;
          v112 = (float)((float)(v97 - v104) * (float)(v101 - v105))
               - (float)((float)(v98 - v105) * (float)(v100 - v104));
          v113 = (float)(v108 * (float)(v99 - v274)) - (float)((float)(v96 - v274) * (float)(v101 - v105));
          v114 = (float)((float)(v96 - v274) * (float)(v100 - v104))
               - (float)((float)(v97 - v104) * (float)(v99 - v274));
          v115 = v89 / sqrtf((float)((float)((float)(v112 * v112) + 0.0) + (float)(v113 * v113)) + (float)(v114 * v114));
          v116 = v112 * v115;
          v117 = v113 * v115;
          v118 = v114 * v115;
          v119 = (float)((float)(v113 * v115) * v234) + (float)(v236 * (float)(v114 * v115));
          v120 = (float)((float)(v114 * v115) * v233) + (float)(v235 * v116);
          v121 = (float)(v116 * v232) + (float)(v237 * v117);
          v122 = sqrtf((float)((float)((float)(v119 * v119) + 0.0) + (float)(v120 * v120)) + (float)(v121 * v121));
          v123 = v119 * (float)(v89 / v122);
          v124 = v120 * (float)(v89 / v122);
          v125 = v121 * (float)(v89 / v122);
          v126 = (float)((float)((float)(v237 * v116) + 0.0) + (float)(v236 * v117)) + (float)(v235 * v118);
          v127 = (float)(1.0 - v126) * (float)(v123 * v124);
          v128 = (float)(1.0 - v126) * (float)(v123 * v125);
          v129 = (float)(1.0 - v126) * (float)(v124 * v124);
          v130 = (float)(1.0 - v126) * (float)(v124 * v125);
          v131 = (float)(1.0 - v126) * (float)(v125 * v125);
          v132 = v122 * v125;
          v133 = v122 * v124;
          v134 = v122 * v123;
          v135 = v126 + (float)((float)(1.0 - v126) * (float)(v123 * v123));
          v136 = v126 + v129;
          v137 = v126 + v131;
          v138 = v127 - v132;
          v139 = v133 + v128;
          v140 = v132 + v127;
          v141 = v130 - v134;
          v142 = v128 - v133;
          v143 = v134 + v130;
          v144 = (float)((float)((float)(v135 * v248) + 0.0) + (float)(v138 * v246))
               + (float)((float)(v133 + v128) * v244);
          v145 = (float)((float)((float)(v140 * v248) + 0.0) + (float)(v136 * v246))
               + (float)((float)(v130 - v134) * v244);
          v146 = (float)((float)((float)((float)(v128 - v133) * v248) + 0.0) + (float)(v143 * v246))
               + (float)(v137 * v244);
          v147 = (float)((float)((float)(v135 * v243) + 0.0) + (float)(v138 * v242))
               + (float)((float)(v133 + v128) * v241);
          v148 = (float)((float)((float)(v106 * v144) + 0.0) + (float)(v107 * v145)) + (float)(v108 * v146);
          v149 = (float)(v145 * v108) - (float)(v146 * v107);
          v150 = (float)(v146 * v106) - (float)(v144 * v108);
          v151 = (float)((float)((float)(v140 * v243) + 0.0) + (float)(v136 * v242)) + (float)(v141 * v241);
          v152 = -(float)(v145 * v106);
          v153 = (float)((float)((float)(v142 * v243) + 0.0) + (float)(v143 * v242)) + (float)(v137 * v241);
          v154 = v152 + (float)(v144 * v107);
          v155 = (float)((float)((float)(v109 * v147) + 0.0) + (float)(v110 * v151)) + (float)(v111 * v153);
          v156 = (float)(v151 * v111) - (float)(v153 * v110);
          v157 = (float)(v153 * v109) - (float)(v147 * v111);
          v158 = v103 - v105;
          v159 = (float)(v147 * v110) - (float)(v151 * v109);
          v160 = (float)((float)((float)(v135 * v240) + 0.0) + (float)(v138 * v239)) + (float)(v139 * v238);
          v161 = (float)((float)((float)(v140 * v240) + 0.0) + (float)(v136 * v239)) + (float)(v141 * v238);
          v162 = v148 + v155;
          v163 = (float)((float)((float)(v142 * v240) + 0.0) + (float)(v143 * v239)) + (float)(v137 * v238);
          v164 = (float)((float)((float)((float)((float)(v276 - v274) * v160) + 0.0)
                               + (float)((float)(v102 - v104) * v161))
                       + (float)(v158 * v163))
               + v162;
          v165 = (float)((float)((float)((float)((float)((float)(v161 * v158) - (float)(v163 * (float)(v102 - v104)))
                                               * v116)
                                       + 0.0)
                               + (float)((float)((float)(v163 * (float)(v276 - v274)) - (float)(v160 * v158)) * v117))
                       + (float)((float)((float)(v160 * (float)(v102 - v104)) - (float)(v161 * (float)(v276 - v274)))
                               * v118))
               + (float)((float)((float)((float)((float)(v149 * v116) + 0.0) + (float)(v150 * v117))
                               + (float)(v154 * v118))
                       + (float)((float)((float)((float)(v156 * v116) + 0.0) + (float)(v157 * v117))
                               + (float)(v159 * v118)));
          v166 = sqrtf((float)(v164 * v164) + (float)(v165 * v165));
          v167 = fabsf(v166);
          v168 = 1.0 / v166;
          if (v167 < 0.0000001)
            v168 = 1.0;
          v169 = v165 * v168;
          v170 = v164 * v168;
          v171 = (float)(v116 * v117) * (float)(1.0 - v170);
          v172 = (float)(v116 * v118) * (float)(1.0 - v170);
          v173 = (float)(v117 * v118) * (float)(1.0 - v170);
          v174 = v118 * v169;
          v175 = v117 * v169;
          v176 = v116 * v169;
          v177 = v170 + (float)((float)(v116 * v116) * (float)(1.0 - v170));
          v178 = v170 + (float)((float)(v117 * v117) * (float)(1.0 - v170));
          v179 = v171 - v174;
          v180 = v174 + v171;
          v181 = (float)((float)(v177 * v135) + 0.0) + (float)(v179 * v140);
          v182 = (float)((float)(v177 * v138) + 0.0) + (float)(v179 * v136);
          v183 = (float)((float)(v177 * v139) + 0.0) + (float)(v179 * v141);
          v184 = (float)((float)(v180 * v135) + 0.0) + (float)(v178 * v140);
          v185 = (float)((float)(v180 * v138) + 0.0) + (float)(v178 * v136);
          v186 = (float)((float)(v180 * v139) + 0.0) + (float)(v178 * v141);
          v187 = (float)((float)((float)(v172 - v175) * v135) + 0.0) + (float)((float)(v176 + v173) * v140);
          v188 = (float)((float)((float)(v172 - v175) * v138) + 0.0) + (float)((float)(v176 + v173) * v136);
          v189 = (float)((float)((float)(v172 - v175) * v139) + 0.0) + (float)((float)(v176 + v173) * v141);
          v190 = v170 + (float)((float)(v118 * v118) * (float)(1.0 - v170));
          v191 = v175 + v172;
          v192 = v173 - v176;
          v193 = v181 + (float)((float)(v175 + v172) * v142);
          v194 = v182 + (float)((float)(v175 + v172) * v143);
          v195 = v183 + (float)(v191 * v137);
          v196 = v184 + (float)(v192 * v142);
          v197 = v185 + (float)(v192 * v143);
          v198 = v186 + (float)(v192 * v137);
          v199 = v187 + (float)(v190 * v142);
          v200 = v188 + (float)(v190 * v143);
          v47 = v264;
          v74 = v265;
          v201 = v189 + (float)(v190 * v137);
          v202 = v274
               - (float)((float)((float)((float)(v193 * v254) + 0.0) + (float)(v194 * v252)) + (float)(v195 * v250));
          v203 = v104
               - (float)((float)((float)((float)(v196 * v254) + 0.0) + (float)(v197 * v252)) + (float)(v198 * v250));
          v204 = v105
               - (float)((float)((float)((float)(v199 * v254) + 0.0) + (float)(v200 * v252)) + (float)(v201 * v250));
          v205 = (float)(v193 * 0.0) + 0.0;
          v206 = v199 + (float)(v205 + (float)(v196 * 0.0));
          v207 = (float)(v193 + 0.0) + (float)(v196 * 0.0);
          v208 = v196 + v205;
          v209 = (float)(v194 * 0.0) + 0.0;
          v210 = v207 + (float)(v199 * 0.0);
          v211 = v208 + (float)(v199 * 0.0);
          v212 = v200 + (float)(v209 + (float)(v197 * 0.0));
          v213 = (float)(v194 + 0.0) + (float)(v197 * 0.0);
          v214 = v197 + v209;
          v215 = (float)(v195 * 0.0) + 0.0;
          v216 = v213 + (float)(v200 * 0.0);
          v217 = v214 + (float)(v200 * 0.0);
          v218 = v201 + (float)(v215 + (float)(v198 * 0.0));
          v219 = (float)((float)(v195 + 0.0) + (float)(v198 * 0.0)) + (float)(v201 * 0.0);
          v220 = (float)(v198 + v215) + (float)(v201 * 0.0);
          v221 = (float)(v202 * 0.0) + 0.0;
          v222 = v221 + (float)(v203 * 0.0);
          v223 = (float)(v202 + 0.0) + (float)(v203 * 0.0);
          v224 = v203 + v221;
          v225 = v204 + v222;
          v226 = v223 + (float)(v204 * 0.0);
          v227 = v224 + (float)(v204 * 0.0);
          v228 = (float *)(a7 + 48 * (int)result);
          *v228 = v206;
          v228[1] = v210;
          v229 = (float)((float)(v206 * (float)(v204 + v222)) + 0.0) + (float)(v210 * v226);
          v228[6] = v218;
          v228[7] = v219;
          v89 = 1.0;
          v228[2] = v211;
          v228[3] = v212;
          v228[4] = v216;
          v228[5] = v217;
          v230 = -(float)((float)((float)((float)(v212 * v225) + 0.0) + (float)(v216 * v226)) + (float)(v217 * v227));
          v231 = -(float)((float)((float)((float)(v218 * v225) + 0.0) + (float)(v219 * v226)) + (float)(v220 * v227));
          v76 = -2.0;
          v228[8] = v220;
          v228[9] = -(float)(v229 + (float)(v211 * v227));
          v228[10] = v230;
          v228[11] = v231;
          result = (result + 1);
        }
      }
    }
    ++v91;
    --v73;
  }
  while (v73);
  return result;
}

uint64_t solve_cubic(float *a1, float a2, float a3, int8x16_t a4, int8x16_t a5)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  _BOOL4 v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v20;
  float v21;
  int8x16_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  int v27;
  float v28;

  if (fabsf(a2) < 0.0000001)
  {
    v20 = sqrtf((float)((float)(a3 * -4.0) * *(float *)a5.i32) + (float)(*(float *)a4.i32 * *(float *)a4.i32));
    v21 = a3 + a3;
    *a1 = (float)(v20 - *(float *)a4.i32) / v21;
    a1[1] = (float)((float)-*(float *)a4.i32 - v20) / v21;
    return 2;
  }
  else
  {
    v6 = a3 / a2;
    v7 = *(float *)a4.i32 / a2;
    v8 = (float)((float)(v6 * v6) + (float)(v7 * -3.0)) / 9.0;
    v9 = (float)((float)((float)((float)(v6 * -9.0) * v7) + (float)((float)((float)(v6 * v6) + (float)(v6 * v6)) * v6))
               + (float)((float)(*(float *)a5.i32 / a2) * 27.0))
       / 54.0;
    v10 = (float)(v8 * (float)-(float)(v8 * v8)) + (float)(v9 * v9);
    if (v10 >= 0.0)
    {
      if (v10 <= 0.0)
      {
        v26 = v6 / 3.0;
        v27 = LODWORD(v9);
        v28 = sqrtf(v8);
        if (v27 < 0)
          v28 = -v28;
        *a1 = -(float)(v26 - (float)(v28 * -2.0));
        a1[1] = v28 - v26;
        return 2;
      }
      else
      {
        *(float *)a4.i32 = -v9;
        a5.i32[0] = 1.0;
        v22.i64[0] = 0x8000000080000000;
        v22.i64[1] = 0x8000000080000000;
        v23 = *(float *)vbslq_s8(v22, a5, a4).i32 * cbrtf(fabsf(v9) + sqrtf(v10));
        v24 = v6 / 3.0;
        if (fabsf(v23) < 0.0000001)
          v25 = -v24;
        else
          v25 = (float)(v23 + (float)(v8 / v23)) - v24;
        *a1 = v25;
        return 1;
      }
    }
    else
    {
      v11 = sqrtf(v8);
      v12 = v9 / (float)(v8 * v11);
      v13 = -1.0;
      v14 = v12 > 1.0 || v12 < -1.0;
      if (v12 >= -1.0 || v12 > 1.0)
        v13 = 1.0;
      if (v14)
        v12 = v13;
      v15 = acosf(v12);
      v16 = cosf(v15 / 3.0);
      v17 = 1.0 - (float)(v16 * v16);
      if (v17 < 0.0)
        v17 = 0.0;
      v18 = sqrtf(v17);
      *a1 = (float)(v6 / -3.0) + (float)((float)(v11 * -2.0) * v16);
      a1[1] = (float)(v6 / -3.0) + (float)(v11 * (float)(v16 + (float)(v18 * 1.7321)));
      a1[2] = (float)(v6 / -3.0) + (float)(v11 * (float)(v16 + (float)(v18 * -1.7321)));
      return 3;
    }
  }
}

void vl_map_free(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  void *v4;
  int *v5;
  uint64_t v6;

  if (a1)
  {
    do
    {
      v2 = __ldaxr((unsigned int *)a1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, (unsigned int *)a1));
    if (!v3)
    {
      free(*(void **)(a1 + 56));
      free(*(void **)(a1 + 104));
      free(*(void **)(a1 + 128));
      free(*(void **)(a1 + 248));
      free(*(void **)(a1 + 80));
      free(*(void **)(a1 + 152));
      free(*(void **)(a1 + 176));
      free(*(void **)(a1 + 200));
      free(*(void **)(a1 + 224));
      free(*(void **)(a1 + 416));
      free(*(void **)(a1 + 440));
      free(*(void **)(a1 + 520));
      free(*(void **)(a1 + 464));
      free(*(void **)(a1 + 488));
      v4 = *(void **)(a1 + 544);
      if (v4)
        free(v4);
      free(*(void **)(a1 + 568));
      free(*(void **)(a1 + 592));
      free(*(void **)(a1 + 736));
      v5 = *(int **)(a1 + 752);
      if (v5)
      {
        if (v5[64] >= 1)
        {
          v6 = 0;
          do
          {
            sss_node_free(*(_QWORD *)&v5[2 * v6]);
            free(*(void **)(*(_QWORD *)&v5[2 * v6] + 32));
            free(*(void **)(*(_QWORD *)&v5[2 * v6] + 40));
            free(*(void **)&v5[2 * v6++]);
          }
          while (v6 < v5[64]);
        }
        free(v5);
      }
      free((void *)a1);
    }
  }
}

uint64_t vl_map_init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  _QWORD *v12;

  v12 = malloc_type_malloc(0x18uLL, 0x20040960023A9uLL);
  if (a4)
  {
    *(_QWORD *)(a1 + 568) = a5;
    *(_QWORD *)(a1 + 576) = a4;
  }
  else if (a6)
  {
    strncpy((char *)(a1 + 52), a6, 0x200uLL);
  }
  else
  {
    printf("%sError : ", (const char *)&str_4_3);
    printf("Needs either map_callback or track_base_path");
    putchar(10);
  }
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  if (pthread_rwlock_init((pthread_rwlock_t *)(a1 + 736), 0))
  {
    printf("%sWarning : ", (const char *)&str_4_3);
    printf("rwlock initialization failed.");
    putchar(10);
  }
  if (pthread_rwlock_init((pthread_rwlock_t *)(a1 + 936), 0))
  {
    printf("%sWarning : ", (const char *)&str_4_3);
    printf("rwlock initialization failed.");
    putchar(10);
  }
  *v12 = a1;
  v12[1] = a2;
  v12[2] = a3;
  return pthread_create((pthread_t *)(a1 + 728), 0, (void *(__cdecl *)(void *))vl_map_build_thread, v12);
}

uint64_t vl_map_build_thread(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  pthread_rwlock_t *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  float v7;
  _DWORD *v8;
  NSObject *v9;
  os_signpost_id_t v10;
  os_signpost_id_t v11;
  NSObject *v12;
  os_signpost_id_t v13;
  os_signpost_id_t v14;
  unsigned int v15;
  NSObject *v16;
  os_signpost_id_t v17;
  os_signpost_id_t v18;
  uint64_t (*v19)(uint64_t, __int128 *, void **);
  uint64_t v20;
  char v21;
  int v22;
  int v23;
  int v24;
  int inv_filename;
  size_t v26;
  void *v27;
  int mem;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int8x16_t v34;
  float32x4_t v35;
  int8x16_t v36;
  char v37;
  int v38;
  NSObject *v39;
  os_signpost_id_t v40;
  os_signpost_id_t v41;
  NSObject *v42;
  os_signpost_id_t v43;
  os_signpost_id_t v44;
  uint32x4_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int8x16_t *v53;
  uint64_t v54;
  int8x16_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float v65;
  float32x4_t v66;
  float v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  uint64_t v79;
  unsigned __int8 *v80;
  unsigned int v81;
  float v82;
  float32x4_t v83;
  float v84;
  uint64_t v85;
  int8x16_t *v86;
  uint64_t v87;
  unsigned __int128 v88;
  unsigned __int128 v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  unsigned __int128 v93;
  uint64_t v94;
  __int8 *v95;
  int v96;
  float32x4_t v98;
  timespec *v100;
  timespec *__tp;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  int64x2_t v105;
  int *v106;
  timespec *v107;
  _DWORD *v108;
  pthread_rwlock_t *v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  size_t v113;
  void *v114;
  char v115[512];
  uint8_t buf[16];
  int64x2_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  int8x16x2_t v149;
  int8x16x4_t v150;

  v148 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v2 = a1[1];
  v3 = (pthread_rwlock_t *)(*a1 + 736);
  v4 = *a1 + 8;
  v5 = *a1 + 1136;
  v100 = (timespec *)(*a1 + 1152);
  __tp = (timespec *)(*a1 + 1168);
  v102 = *a1 + 720;
  v103 = (const char *)(*a1 + 52);
  v6 = (_DWORD *)a1[2];
  *(_DWORD *)(v1 + 48) = 1;
  v106 = v6 + 1;
  v107 = (timespec *)v5;
  v109 = (pthread_rwlock_t *)(v1 + 936);
  v105 = vdupq_n_s64(0x41831BF8457C1095uLL);
  v104 = v2;
  v108 = v6;
  v98 = (float32x4_t)vdupq_n_s32(0xC2FF0000);
  do
  {
    if (*(_DWORD *)(v1 + 4) != 1)
    {
      usleep(0x186A0u);
      continue;
    }
    pthread_rwlock_wrlock(v3);
    v110 = *(_OWORD *)v4;
    v111 = *(_QWORD *)(v4 + 16);
    v7 = *(float *)(v1 + 32);
    v8 = *(_DWORD **)(v1 + 40);
    *(_QWORD *)(v1 + 40) = 0;
    pthread_rwlock_unlock(v3);
    if (v8)
    {
      if (vl_os_log_once_token == -1)
        goto LABEL_7;
      goto LABEL_56;
    }
    v8 = malloc_type_calloc(1uLL, 0x300uLL, 0x10B0040D0EE5E44uLL);
    *v8 = 1;
    if (vl_os_log_once_token != -1)
      dispatch_once(&vl_os_log_once_token, &__block_literal_global_4);
    v16 = vl_os_log_log;
    v17 = os_signpost_id_make_with_pointer((os_log_t)vl_os_log_log, v8);
    if (v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v18 = v17;
      if (os_signpost_enabled(v16))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_210B26000, v16, OS_SIGNPOST_INTERVAL_BEGIN, v18, "vl_map_load", (const char *)&unk_210BCA1F1, buf, 2u);
      }
    }
    if (*(_DWORD *)(v1 + 1348))
    {
      *(_QWORD *)(v1 + 1256) -= mach_absolute_time();
    }
    else
    {
      clock_gettime(_CLOCK_THREAD_CPUTIME_ID, __tp);
      clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, v100);
      clock_gettime(_CLOCK_MONOTONIC, v107);
    }
    v19 = *(uint64_t (**)(uint64_t, __int128 *, void **))(v1 + 576);
    v20 = *(_QWORD *)(v1 + 568);
    v112 = *(unsigned int *)(v2 + 24);
    v21 = v112;
    memset(buf, 0, sizeof(buf));
    v117 = v105;
    vl_geo_calc_tile((double *)buf, (uint64_t)&v110, v112, (_DWORD *)&v112 + 1, (_DWORD *)&v112 + 2);
    v22 = DWORD2(v112);
    v23 = ~(-1 << v21) - DWORD1(v112);
    *(_QWORD *)((char *)&v112 + 4) = __PAIR64__(v23, DWORD2(v112));
    v24 = uncertainty_limits;
    if (*(float *)&uncertainty_limits < v7)
    {
      v24 = dword_254A77154;
      if (*(float *)&dword_254A77154 < v7)
        v24 = dword_254A77158;
    }
    HIDWORD(v112) = (int)*(float *)&v24;
    v147 = 0u;
    v146 = 0u;
    v145 = 0u;
    v144 = 0u;
    v143 = 0u;
    v142 = 0u;
    v141 = 0u;
    v140 = 0u;
    v139 = 0u;
    v138 = 0u;
    v137 = 0u;
    v136 = 0u;
    v135 = 0u;
    v134 = 0u;
    v133 = 0u;
    v132 = 0u;
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    *(_OWORD *)buf = 0u;
    v117 = 0u;
    if (v19 && v20)
    {
      v114 = 0;
      inv_filename = v19(v20, &v112, &v114);
      if (!inv_filename)
      {
        __strcpy_chk();
        free(v114);
      }
    }
    else
    {
      inv_filename = vl_rw_get_inv_filename(v103, *(_DWORD *)(v2 + 24), v22, v23, (int)*(float *)&v24, v102, (char *)buf);
    }
    v6 = v108;
    printf("Verbose : ");
    printf("MAP:   Loading track for %d, %d, %d, %d.", *(_DWORD *)(v2 + 24), DWORD1(v112), DWORD2(v112), HIDWORD(v112));
    putchar(10);
    if (inv_filename == 3)
    {
      printf("Verbose : ");
      printf("Track meta tile unavailable or broken : %d %d %d", DWORD1(v112), DWORD2(v112), HIDWORD(v112));
      putchar(10);
      v37 = 0;
      v38 = 3;
      if (vl_os_log_once_token != -1)
        goto LABEL_101;
    }
    else
    {
      if (inv_filename == 1)
      {
        printf("Verbose : ");
        printf("Downloading Tile : %d %d %d", DWORD1(v112), DWORD2(v112), HIDWORD(v112));
        putchar(10);
        if (vl_os_log_once_token != -1)
          dispatch_once(&vl_os_log_once_token, &__block_literal_global_4);
        v39 = vl_os_log_log;
        v40 = os_signpost_id_make_with_pointer((os_log_t)vl_os_log_log, v8);
        if (v40 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v41 = v40;
          if (os_signpost_enabled(v39))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl(&dword_210B26000, v39, OS_SIGNPOST_INTERVAL_END, v41, "vl_map_load", (const char *)&unk_210BCA1F1, buf, 2u);
          }
        }
        vl_timer_stop((uint64_t)v107);
        usleep(0x186A0u);
        vl_map_free((uint64_t)v8);
        continue;
      }
      if (inv_filename
        || (v113 = 0, v114 = 0, vl_map_load_fn((const char *)buf, &v114, &v113, 0))
        || (v26 = v113, v27 = v114, mem = vl_map_read_mem_ex(), free(v27), mem))
      {
        printf("%sError : ", (const char *)&str_4_3);
        printf("Track unavailable or broken : %d %d %d", DWORD1(v112), DWORD2(v112), HIDWORD(v112));
        putchar(10);
        printf("%sError : ", (const char *)&str_4_3);
        printf("Filepath: %s", (const char *)buf);
        putchar(10);
        v37 = 0;
        v38 = 2;
        if (vl_os_log_once_token != -1)
          goto LABEL_101;
        goto LABEL_51;
      }
      *((_QWORD *)v8 + 95) = v26;
      if (*(_DWORD *)(v2 + 8))
        vl_dom_dirs_read(v115, (uint64_t)(v8 + 6));
      v45.i64[0] = 0xFF000000FFLL;
      v45.i64[1] = 0xFF000000FFLL;
      if (*(_DWORD *)(v2 + 12) == 1)
      {
        v46 = *((_QWORD *)v8 + 30);
        if (v46 >= 1)
        {
          v47 = 0;
          v48 = 0;
          v49 = v8[66];
          while (2)
          {
            if ((int)v49 < 1)
              goto LABEL_67;
            v50 = *((_QWORD *)v8 + 31);
            v51 = v49;
            if (v49 < 8)
            {
              v52 = 0;
              v35.i32[0] = 0;
              goto LABEL_80;
            }
            if (v49 >= 0x20)
            {
              v52 = v49 & 0x7FFFFFE0;
              v53 = (int8x16_t *)(v50 + v47 + 16);
              v35.i32[0] = 0;
              v54 = v49 & 0xFFFFFFE0;
              do
              {
                v55 = v53[-1];
                v56 = vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v55, (int8x16_t)xmmword_210BCB930)), v98);
                v57 = vmulq_f32(v56, v56);
                v58 = vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v55, (int8x16_t)xmmword_210BCB920)), v98);
                v59 = vmulq_f32(v58, v58);
                v60 = (float)((float)((float)((float)((float)((float)(v35.f32[0] + v57.f32[0]) + v57.f32[1]) + v57.f32[2])
                                            + v57.f32[3])
                                    + v59.f32[0])
                            + v59.f32[1])
                    + v59.f32[2];
                v61 = vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v55, (int8x16_t)xmmword_210BCB910)), v98);
                v62 = vmulq_f32(v61, v61);
                v63 = vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v55, (int8x16_t)xmmword_210BCB900)), v98);
                v64 = vmulq_f32(v63, v63);
                v65 = (float)((float)((float)((float)((float)((float)((float)(v60 + v59.f32[3]) + v62.f32[0])
                                                            + v62.f32[1])
                                                    + v62.f32[2])
                                            + v62.f32[3])
                                    + v64.f32[0])
                            + v64.f32[1])
                    + v64.f32[2];
                v66 = vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(*v53, (int8x16_t)xmmword_210BCB930)), v98);
                v36 = (int8x16_t)vmulq_f32(v66, v66);
                v67 = (float)((float)((float)(v65 + v64.f32[3]) + *(float *)v36.i32) + *(float *)&v36.i32[1])
                    + *(float *)&v36.i32[2];
                v68 = vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(*v53, (int8x16_t)xmmword_210BCB920)), v98);
                v34 = (int8x16_t)vmulq_f32(v68, v68);
                v69 = vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(*v53, (int8x16_t)xmmword_210BCB910)), v98);
                v70 = vmulq_f32(v69, v69);
                *(float *)v34.i32 = (float)((float)((float)((float)((float)((float)((float)(v67 + *(float *)&v36.i32[3])
                                                                                  + *(float *)v34.i32)
                                                                          + *(float *)&v34.i32[1])
                                                                  + *(float *)&v34.i32[2])
                                                          + *(float *)&v34.i32[3])
                                                  + v70.f32[0])
                                          + v70.f32[1])
                                  + v70.f32[2];
                v71 = vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(*v53, (int8x16_t)xmmword_210BCB900)), v98);
                v35 = vmulq_f32(v71, v71);
                v35.f32[0] = (float)((float)((float)((float)(*(float *)v34.i32 + v70.f32[3]) + v35.f32[0]) + v35.f32[1])
                                   + v35.f32[2])
                           + v35.f32[3];
                v53 += 2;
                v54 -= 32;
              }
              while (v54);
              if (v52 != v49)
              {
                if ((v49 & 0x18) == 0)
                  goto LABEL_80;
                goto LABEL_77;
              }
            }
            else
            {
              v52 = 0;
              v35.i32[0] = 0;
LABEL_77:
              v72 = v52;
              v52 = v49 & 0xFFFFFFF8;
              v73 = (uint64_t *)(v50 + v47 + v72);
              v74 = v72 - v52;
              do
              {
                v75 = *v73++;
                v34.i64[0] = v75;
                v76 = vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v34, (int8x16_t)xmmword_210BCB930)), v98);
                v77 = vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v34, (int8x16_t)xmmword_210BCB920)), v98);
                v34 = (int8x16_t)vmulq_f32(v77, v77);
                v78 = vmulq_f32(v76, v76);
                v35.f32[0] = (float)((float)((float)((float)((float)((float)((float)(v35.f32[0] + v78.f32[0])
                                                                           + v78.f32[1])
                                                                   + v78.f32[2])
                                                           + v78.f32[3])
                                                   + *(float *)v34.i32)
                                           + *(float *)&v34.i32[1])
                                   + *(float *)&v34.i32[2])
                           + *(float *)&v34.i32[3];
                v74 += 8;
              }
              while (v74);
              if (v52 != v49)
              {
LABEL_80:
                v79 = v49 - v52;
                v80 = (unsigned __int8 *)(v50 + v52 + v47);
                do
                {
                  v81 = *v80++;
                  v35.f32[0] = v35.f32[0] + (float)((float)((float)v81 + -127.5) * (float)((float)v81 + -127.5));
                  --v79;
                }
                while (v79);
              }
            }
            v82 = 0.0;
            if (v35.f32[0] > 0.0)
              v82 = 1.0 / sqrtf(v35.f32[0]);
            v35.i32[0] = *(_DWORD *)(v2 + 16);
            v83.i32[0] = 1132462080;
            v84 = 256.0 / (float)(*(float *)(v2 + 20) - v35.f32[0]);
            if (v49 >= 8)
            {
              if (v49 >= 0x10)
              {
                v86 = (int8x16_t *)(v50 + v47);
                v85 = v49 & 0xFFFFFFF0;
                v83 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 0);
                v87 = v51 & 0xFFFFFFF0;
                do
                {
                  v88 = *(_OWORD *)&vuzp1q_s16((int16x8_t)vminq_u32(vcvtq_u32_f32(vmulq_n_f32(vsubq_f32(vmulq_n_f32(vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(*v86, (int8x16_t)xmmword_210BCB910)), v98), v82), v83), v84)), v45), (int16x8_t)vminq_u32(vcvtq_u32_f32(vmulq_n_f32(vsubq_f32(vmulq_n_f32(
                                                           vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(*v86, (int8x16_t)xmmword_210BCB900)), v98), v82), v83), v84)), v45)) & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
                  v150.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v88);
                  v89 = *(_OWORD *)&vuzp1q_s16((int16x8_t)vminq_u32(vcvtq_u32_f32(vmulq_n_f32(vsubq_f32(vmulq_n_f32(vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(*v86, (int8x16_t)xmmword_210BCB930)), v98), v82), v83), v84)), v45), (int16x8_t)vminq_u32(vcvtq_u32_f32(vmulq_n_f32(vsubq_f32(vmulq_n_f32(
                                                           vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(*v86, (int8x16_t)xmmword_210BCB920)), v98), v82), v83), v84)), v45)) & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
                  v150.val[1] = (int8x16_t)vmovl_high_u16((uint16x8_t)v89);
                  v150.val[2] = (int8x16_t)vmovl_u16(*(uint16x4_t *)&v88);
                  v150.val[0] = (int8x16_t)vmovl_u16(*(uint16x4_t *)&v89);
                  v36 = vqtbl4q_s8(v150, (int8x16_t)xmmword_210BCB8E0);
                  *v86++ = v36;
                  v87 -= 16;
                }
                while (v87);
                if (v85 == v51)
                  goto LABEL_66;
                if ((v51 & 8) == 0)
                  goto LABEL_95;
              }
              else
              {
                v85 = 0;
              }
              v90 = v85;
              v85 = v51 & 0xFFFFFFF8;
              v83 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 0);
              v91 = (uint64_t *)(v50 + v90 + v47);
              v92 = v90 - v85;
              do
              {
                v36.i64[0] = *v91;
                v93 = *(_OWORD *)&vuzp1q_s16((int16x8_t)vminq_u32(vcvtq_u32_f32(vmulq_n_f32(vsubq_f32(vmulq_n_f32(vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v36, (int8x16_t)xmmword_210BCB930)), v98), v82), v83), v84)), v45), (int16x8_t)vminq_u32(vcvtq_u32_f32(vmulq_n_f32(vsubq_f32(vmulq_n_f32(
                                                         vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v36, (int8x16_t)xmmword_210BCB920)), v98), v82), v83), v84)), v45)) & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
                v149.val[1] = (int8x16_t)vmovl_high_u16((uint16x8_t)v93);
                v149.val[0] = (int8x16_t)vmovl_u16(*(uint16x4_t *)&v93);
                v36 = vqtbl2q_s8(v149, (int8x16_t)xmmword_210BCB8F0);
                *v91++ = v36.i64[0];
                v92 += 8;
              }
              while (v92);
              if (v85 != v51)
                goto LABEL_95;
            }
            else
            {
              v85 = 0;
LABEL_95:
              v94 = v51 - v85;
              v95 = (__int8 *)(v50 + v85 + v47);
              do
              {
                v83.i8[0] = *v95;
                v83.f32[0] = v84 * (float)((float)(v82 * (float)((float)v83.u32[0] + -127.5)) - v35.f32[0]);
                v96 = (int)v83.f32[0];
                if ((int)v83.f32[0] >= 255)
                  v96 = 255;
                *v95++ = v96 & ~(v96 >> 31);
                --v94;
              }
              while (v94);
            }
LABEL_66:
            v49 = v8[66];
            v46 = *((_QWORD *)v8 + 30);
LABEL_67:
            v48 += v49;
            v47 = v48;
            if (v46 <= v48)
              break;
            continue;
          }
        }
      }
      *(_OWORD *)(v8 + 1) = v112;
      log_col_app((uint64_t)"%sMAP: loaded %d track points%s", (uint64_t)&word_210BCB000, (uint64_t)&word_210BCB000, v29, v30, v31, v32, v33, (char)&str_4_3);
      v37 = 1;
      v38 = 2;
      if (vl_os_log_once_token != -1)
LABEL_101:
        dispatch_once(&vl_os_log_once_token, &__block_literal_global_4);
    }
LABEL_51:
    v42 = vl_os_log_log;
    v43 = os_signpost_id_make_with_pointer((os_log_t)vl_os_log_log, v8);
    v44 = v43;
    if ((v37 & 1) != 0)
    {
      if (v43 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v42))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_210B26000, v42, OS_SIGNPOST_INTERVAL_END, v44, "vl_map_load", (const char *)&unk_210BCA1F1, buf, 2u);
      }
      vl_timer_stop((uint64_t)v107);
      v2 = v104;
      v6 = v108;
      if (vl_os_log_once_token == -1)
        goto LABEL_7;
LABEL_56:
      dispatch_once(&vl_os_log_once_token, &__block_literal_global_4);
LABEL_7:
      v9 = vl_os_log_log;
      v10 = os_signpost_id_make_with_pointer((os_log_t)vl_os_log_log, v8);
      if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v11 = v10;
        if (os_signpost_enabled(v9))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_210B26000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v11, "vl_map_index", (const char *)&unk_210BCA1F1, buf, 2u);
        }
      }
      if (*v6 == 2)
      {
        *((_QWORD *)v8 + 94) = vl_match_sss_build(v1, *((void **)v8 + 31), *((_QWORD *)v8 + 30) / (int)v8[66], v8[66], v106);
        printf("Verbose : ");
        printf("MAP: Built SSS search index");
      }
      else
      {
        printf("%sWarning : ", (const char *)&str_4_3);
        printf("Unknown match index: %d");
      }
      putchar(10);
      if (vl_os_log_once_token != -1)
        dispatch_once(&vl_os_log_once_token, &__block_literal_global_4);
      v12 = vl_os_log_log;
      v13 = os_signpost_id_make_with_pointer((os_log_t)vl_os_log_log, v8);
      if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v14 = v13;
        if (os_signpost_enabled(v12))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_210B26000, v12, OS_SIGNPOST_INTERVAL_END, v14, "vl_map_index", (const char *)&unk_210BCA1F1, buf, 2u);
        }
      }
      pthread_rwlock_wrlock(v109);
      vl_map_free(*(_QWORD *)(v1 + 584));
      if (v8)
      {
        do
          v15 = __ldaxr(v8);
        while (__stlxr(v15 + 1, v8));
      }
      *(_QWORD *)(v1 + 584) = v8;
      pthread_rwlock_unlock(v109);
      pthread_rwlock_wrlock(v3);
      vl_map_free((uint64_t)v8);
      *(_DWORD *)(v1 + 4) = 0;
      pthread_rwlock_unlock(v3);
      printf("Verbose : ");
      printf("Map:   Update Successfully");
      putchar(10);
      continue;
    }
    if (v43 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v42))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_210B26000, v42, OS_SIGNPOST_INTERVAL_END, v44, "vl_map_load", (const char *)&unk_210BCA1F1, buf, 2u);
    }
    vl_timer_stop((uint64_t)v107);
    usleep(0x186A0u);
    vl_map_free((uint64_t)v8);
    pthread_rwlock_wrlock(v3);
    *(_DWORD *)(v1 + 4) = v38;
    pthread_rwlock_unlock(v3);
    v2 = v104;
    v6 = v108;
  }
  while (*(_DWORD *)(v1 + 48));
  vl_map_free(*(_QWORD *)(v1 + 584));
  *(_QWORD *)(v1 + 584) = 0;
  free(a1);
  return 0;
}

uint64_t vl_map_update(int *a1, float a2, uint64_t a3, double *a4, uint64_t a5)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  pthread_rwlock_t *v12;
  int v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  float64x2_t v22[2];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  if (!a1[12])
  {
    printf("Verbose : ");
    printf("Map build thread haven't started");
    putchar(10);
    return 4294967294;
  }
  v9 = a1[1];
  if ((v9 - 2) < 2)
  {
    if (v9 == 2)
      v10 = 2;
    else
      v10 = 4;
    pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 184));
    a1[1] = 0;
    pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 184));
    if (vabdd_f64(*((double *)a1 + 1), *a4) <= 0.0001
      && vabdd_f64(*((double *)a1 + 2), a4[1]) <= 0.0001
      && vabdd_f64(*((double *)a1 + 3), a4[2]) <= 0.0001
      && *((float *)a1 + 8) == a2)
    {
      printf("Verbose : ");
      printf("Map update not finished: %f %f %f", *a4, a4[1], a4[2]);
      putchar(10);
      return v10;
    }
LABEL_15:
    if (a5)
    {
      pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 234));
      v11 = *((_QWORD *)a1 + 73);
      pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 234));
      if (v11 == a5)
        return 0;
      pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 184));
      v10 = 1;
      a1[1] = 1;
      *((_QWORD *)a1 + 5) = a5;
      v12 = (pthread_rwlock_t *)(a1 + 184);
    }
    else
    {
      v13 = *a1;
      printf("Verbose : ");
      v14 = *a4;
      v15 = a4[2];
      if (v13)
      {
        printf("Map force update: %f %f %f", v14, a4[1], v15);
        putchar(10);
        pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 184));
        *a1 = 0;
        pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 184));
        v10 = 3;
      }
      else
      {
        printf("Map update: %f %f %f", v14, a4[1], v15);
        putchar(10);
        pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 234));
        v16 = *((_QWORD *)a1 + 73);
        if (v16)
        {
          v28 = 0u;
          v29 = 0u;
          v26 = 0u;
          v27 = 0u;
          v24 = 0u;
          v25 = 0u;
          v22[0] = 0uLL;
          v22[1] = (float64x2_t)vdupq_n_s64(0x41831BF8457C1095uLL);
          v23 = 0u;
          vl_geo_calc_gnd(v22, *(_DWORD *)(v16 + 4), ~(-1 << *(_DWORD *)(v16 + 4)) - *(_DWORD *)(v16 + 12), *(_DWORD *)(v16 + 8), (uint64_t)&v23);
          v17 = *a4 - *((double *)&v27 + 1);
          v18 = a4[1] - *(double *)&v28;
          v19 = a4[2] - *((double *)&v28 + 1);
          if (fabs(*((double *)&v24 + 1) * v18 + *(double *)&v23 * v17 + *(double *)&v26 * v19)
             + *((double *)&v29 + 1) * -0.5 <= 2.0
            && fabs(v18 * *(double *)&v25 + *((double *)&v23 + 1) * v17 + *((double *)&v26 + 1) * v19)
             + *(double *)&v29 * -0.5 <= 2.0)
          {
            if (*(double *)(v16 + 272) >= a2 || *(float *)&dword_254A77158 < a2)
            {
              pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 234));
              return 0;
            }
            printf("Verbose : ");
            printf("MAP: Need rebuild, uncertainty > current map uncertainty (%f > %f)");
          }
          else
          {
            printf("Verbose : ");
            printf("MAP: Need rebuild, point outside current map gnd");
          }
        }
        else
        {
          printf("Verbose : ");
          printf("Map: Need rebuild, no map");
        }
        putchar(10);
        pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 234));
        v10 = 1;
      }
      pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 184));
      a1[1] = 1;
      v20 = *((_QWORD *)a4 + 2);
      *(_OWORD *)(a1 + 2) = *(_OWORD *)a4;
      *((_QWORD *)a1 + 3) = v20;
      *((float *)a1 + 8) = a2;
      *((_QWORD *)a1 + 5) = 0;
      v12 = (pthread_rwlock_t *)(a1 + 184);
    }
    pthread_rwlock_unlock(v12);
    return v10;
  }
  if (v9 != 1)
    goto LABEL_15;
  printf("Verbose : ");
  if (a4)
    printf("Map update not finished: %f %f %f");
  else
    printf("Map update not finished.");
  putchar(10);
  return 0xFFFFFFFFLL;
}

uint64_t vl_map_get(uint64_t a1, float a2, uint64_t a3, double *a4, uint64_t a5)
{
  pthread_rwlock_t *v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v19;
  unsigned int v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v9 = (pthread_rwlock_t *)(a1 + 936);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 936));
  v10 = *(double **)(a1 + 584);
  if (v10)
  {
    v11 = *a4 - v10[45];
    v12 = a4[1] - v10[46];
    v13 = a4[2] - v10[47];
    v14 = v10[39] * v12 + v10[36] * v11 + v10[42] * v13;
    v15 = sqrt((v12 * v10[40] + v10[37] * v11 + v10[43] * v13) * (v12 * v10[40] + v10[37] * v11 + v10[43] * v13)+ v14 * v14);
    if (v15 > v10[89] * 0.5 || v15 > v10[90] * 0.5)
    {
      printf("Verbose : ");
      printf("MAP: Map not validated, distance: %f > (%f, %f)", v15, v10[89] * 0.5, v10[90] * 0.5);
      v16 = 3;
      putchar(10);
      pthread_rwlock_unlock(v9);
      if (!a5)
        return v16;
      goto LABEL_7;
    }
    pthread_rwlock_unlock(v9);
    if (a5)
    {
      pthread_rwlock_rdlock(v9);
      v19 = *(unsigned int **)(a1 + 584);
      if (v19)
      {
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 + 1, v19));
      }
      *(_QWORD *)a5 = v19;
      *(_OWORD *)(a1 + 592) = *(_OWORD *)(*(_QWORD *)(a1 + 584) + 4);
      printf("Verbose : ");
      printf("MAP:   Using map with %s%llu%s tracks", (const char *)&str_4_3, *(_QWORD *)(*(_QWORD *)a5 + 48), (const char *)&str_4_3);
      putchar(10);
      pthread_rwlock_unlock(v9);
      v16 = 0;
      v21 = *(_OWORD **)a5;
      v22 = *(_OWORD *)(*(_QWORD *)a5 + 336);
      v23 = *(_OWORD *)(*(_QWORD *)a5 + 352);
      v24 = *(_OWORD *)(*(_QWORD *)a5 + 384);
      *(_OWORD *)(a1 + 688) = *(_OWORD *)(*(_QWORD *)a5 + 368);
      *(_OWORD *)(a1 + 704) = v24;
      *(_OWORD *)(a1 + 656) = v22;
      *(_OWORD *)(a1 + 672) = v23;
      v26 = v21[19];
      v25 = v21[20];
      *(_OWORD *)(a1 + 608) = v21[18];
      *(_OWORD *)(a1 + 624) = v26;
      *(_OWORD *)(a1 + 640) = v25;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    printf("Verbose : ");
    printf("MAP: Not validate, no map");
    v16 = 2;
    putchar(10);
    pthread_rwlock_unlock(v9);
    if (a5)
    {
LABEL_7:
      *(_QWORD *)a5 = 0;
      pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 736));
      *(_DWORD *)(a1 + 4) = 1;
      v17 = *((_QWORD *)a4 + 2);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)a4;
      *(_QWORD *)(a1 + 24) = v17;
      *(float *)(a1 + 32) = a2;
      *(_QWORD *)(a1 + 40) = 0;
      pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 736));
    }
  }
  return v16;
}

float p_klt(uint64_t *a1, uint64_t *a2, float *a3, float *a4, int a5, float a6, float a7)
{
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  float v12;
  float v13;
  int v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  float result;
  float v27;
  float v28;
  uint64_t v29;
  float v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  float v35;
  unsigned int v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  int v58;

  *a3 = a6;
  *a4 = a7;
  v11 = *((unsigned int *)a2 + 2);
  if ((_DWORD)v11 != *((_DWORD *)a2 + 3))
    __assert_rtn("p_klt", "p_corr.c", 60, "im_template->x_size == im_template->y_size");
  v12 = (float)(v11 * v11 * v11 * v11);
  v13 = (float)(2 * v11);
  if ((int)v11 < 1)
  {
    if ((float)(0.0 / v12) >= v13)
    {
      v58 = (a5 & ~(a5 >> 31)) + 1;
      do
      {
        *a3 = NAN;
        *a4 = NAN;
        --v58;
      }
      while (v58);
      return 0.0;
    }
    return 3.4028e38;
  }
  v14 = 0;
  v15 = *a2;
  v16 = (float)(int)v11 * 0.5;
  v17 = a2[2];
  v18 = *a1;
  v19 = a1[2];
  do
  {
    v20 = 0;
    v21 = (float)(a7 - v16) + 0.5;
    v22 = 0.0;
    v23 = 0.0;
    v24 = 0.0;
    v25 = v15;
    result = 0.0;
    v27 = 0.0;
    v28 = 0.0;
    do
    {
      v29 = 0;
      v30 = v21 + (float)v20;
      v31 = (int)v30;
      do
      {
        v47 = (float)((float)(*a3 - v16) + 0.5) + (float)(int)v29;
        v48 = (int)v47;
        if ((int)v47 < 0)
        {
          if (v48 == -1)
          {
            v51 = 0;
            if (*((_DWORD *)a1 + 2) - 1 <= -1)
              LODWORD(v52) = *((_DWORD *)a1 + 2) - 1;
            else
              LODWORD(v52) = 0;
            v52 = (int)v52;
            if ((v31 & 0x80000000) == 0)
            {
LABEL_7:
              v32 = *((_DWORD *)a1 + 3);
              LODWORD(v33) = v32 - 1;
              if (v32 <= v31)
                v34 = v32 - 1;
              else
                v34 = (int)v30;
              goto LABEL_10;
            }
          }
          else
          {
            v51 = 0;
            v52 = 0;
            if ((v31 & 0x80000000) == 0)
              goto LABEL_7;
          }
        }
        else
        {
          v49 = *((_DWORD *)a1 + 2);
          v50 = v49 - 1;
          if (v49 <= v48)
            v51 = v49 - 1;
          else
            v51 = (int)v47;
          if (v50 <= v48)
            LODWORD(v52) = v50;
          else
            LODWORD(v52) = v48 + 1;
          v52 = (int)v52;
          if ((v31 & 0x80000000) == 0)
            goto LABEL_7;
        }
        if (v31 != -1)
        {
          v34 = 0;
          v33 = 0;
          goto LABEL_13;
        }
        v34 = 0;
        LODWORD(v33) = *((_DWORD *)a1 + 3) - 1;
LABEL_10:
        if ((int)v33 > v31)
          LODWORD(v33) = (int)v30 + 1;
        v33 = (int)v33;
LABEL_13:
        v35 = v47 - (float)v51;
        *(float *)&v36 = v30 - (float)v34;
        v37 = v19 * v34;
        LOBYTE(v7) = *(_BYTE *)(v18 + v37 + v51);
        v38 = (float)LODWORD(v7);
        v39 = v33 * v19;
        LOBYTE(v8) = *(_BYTE *)(v18 + v39 + v51);
        v40 = (float)LODWORD(v8);
        LOBYTE(v9) = *(_BYTE *)(v18 + v37 + v52);
        v41 = (float)LODWORD(v9);
        LOBYTE(v10) = *(_BYTE *)(v18 + v39 + v52);
        v10 = (float)((float)(v38 + (float)LODWORD(v10)) - v40) - v41;
        v9 = v41 - v38;
        v8 = v40 - v38;
        v42 = v9 + (float)(*(float *)&v36 * v10);
        v43 = v8 + (float)(v35 * v10);
        v44 = (float)((float)(v35 * v9) + (float)((float)(v35 * *(float *)&v36) * v10)) + (float)(*(float *)&v36 * v8);
        LOBYTE(v36) = *(_BYTE *)(v25 + v29);
        v45 = v44 + v38;
        v46 = (float)v36;
        v7 = v45 - v46;
        result = result + vabds_f32(v45, v46);
        v22 = v22 + (float)(v42 * v42);
        v24 = v24 + (float)(v42 * v43);
        v23 = v23 + (float)(v43 * v43);
        v28 = v28 - (float)((float)(v45 - v46) * v42);
        v27 = v27 - (float)((float)(v45 - v46) * v43);
        ++v29;
      }
      while (v11 != v29);
      v25 += v17;
      ++v20;
    }
    while (v20 != (_DWORD)v11);
    v53 = (float)(v22 * v23) - (float)(v24 * v24);
    if ((float)(v53 / v12) < v13)
      return 3.4028e38;
    v54 = (float)((float)(v28 * v23) - (float)(v27 * v24)) / v53;
    v55 = (float)((float)(v27 * v22) - (float)(v28 * v24)) / v53;
    *a3 = *a3 + v54;
    a7 = v55 + *a4;
    *a4 = a7;
    v56 = fabsf(v54);
    v57 = fabsf(v55);
    if (v56 <= v57)
      v56 = v57;
    if (v14 >= a5)
      break;
    ++v14;
  }
  while (v56 >= 0.0001);
  return result;
}

BOOL vl_ps_refine(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  float32x2_t *v11;
  int v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  double v17;
  int v18;
  float v19;
  int v20;
  size_t v21;
  unint64_t v22;
  uint64_t v23;
  float v24;
  __int128 v25;
  unint64_t v26;
  float *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  float *v34;
  _DWORD *v35;
  _DWORD *v36;
  _DWORD *v37;
  _DWORD *v38;
  int *v39;
  int v40;
  uint64_t v41;
  int v42;
  float v43;
  int *v44;
  int v45;
  int v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  float v51;
  int v52;
  __float2 v53;
  float v54;
  float32x4_t v55;
  float32x4_t v56;
  uint64_t v57;
  int v58;
  _DWORD *v59;
  _DWORD *v60;
  __int128 v61;
  _DWORD *v62;
  _DWORD *v63;
  unsigned __int8 *v64;
  _DWORD *v65;
  __int128 v66;
  uint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  uint64_t v71;
  int v72;
  float v73;
  int v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  float v78;
  float v79;
  float v80;
  float v81;
  uint64_t v82;
  float v83;
  float v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  unint64_t v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  unint64_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v120;
  float32x4_t v121;
  unint64_t v122;
  unint64_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  float *v154;
  __int128 v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  BOOL v180;
  BOOL v181;
  BOOL v182;
  BOOL v183;
  BOOL v184;
  BOOL v185;
  BOOL v186;
  BOOL v187;
  BOOL v188;
  BOOL v189;
  BOOL v190;
  BOOL v191;
  BOOL v192;
  BOOL v193;
  BOOL v194;
  BOOL v195;
  BOOL v196;
  BOOL v197;
  BOOL v198;
  BOOL v199;
  BOOL v200;
  BOOL v201;
  BOOL v202;
  BOOL v203;
  BOOL v204;
  BOOL v205;
  BOOL v206;
  float32x4_t *v208;
  float32x4_t *v209;
  float32x4_t *v210;
  float32x4_t *v211;
  float32x4_t *v212;
  float32x4_t *v213;
  unint64_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  float v232;
  float v233;
  float v234;
  int v235;
  unsigned int v236;
  unsigned int v237;
  float v238;
  unsigned int v239;
  float v240;
  float *v241;
  float *v242;
  uint64_t v243;
  float v244;
  float v245;
  float *v246;
  float v247;
  float v248;
  float v249;
  float *v250;
  float *v251;
  float v252;
  float v253;
  float v254;
  float *v255;
  float *v256;
  float v257;
  float v258;
  float v259;
  float v260;
  float v261;
  float v262;
  float v263;
  float v264;
  float v265;
  float v266;
  float v267;
  float v268;
  float v269;
  float v270;
  float v271;
  float v272;
  float v273;
  float v274;
  float v275;
  float v276;
  float v277;
  float v278;
  float v279;
  float v280;
  float v281;
  float v282;
  float v283;
  float v284;
  float v285;
  float v286;
  float v287;
  float v288;
  float v289;
  float v290;
  float v291;
  float v292;
  float v293;
  float v294;
  float v295;
  float v296;
  float v297;
  float v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  float v303;
  float v304;
  float v305;
  unint64_t v306;
  float v307;
  void **v308;
  uint64_t v309;
  float *v310;
  float v311;
  float *v312;
  uint64_t v313;
  uint64_t v314;
  float *v315;
  float *v316;
  uint64_t v317;
  float v318;
  float *v319;
  float v320;
  float *v321;
  uint64_t v322;
  float v323;
  float v324;
  float v325;
  float v326;
  float v327;
  float v328;
  float32_t v329;
  int32x2_t v330;
  __float2 v331;
  __float2 v332;
  float cosval;
  __float2 v334;
  float v335;
  float v336;
  float v337;
  float v338;
  uint64_t v339;
  float v340;
  float v341;
  float v342;
  float v343;
  float v344;
  float v345;
  float v346;
  float v347;
  float v348;
  float v349;
  float v350;
  int v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  float32x4_t v355;
  float32x4_t v356;
  float32x4_t v357;
  float32x4_t v358;
  float32x4_t v359;
  float32x4_t v360;
  float32x4_t v361;
  float32x4_t v362;
  float32x4_t v363;
  float32x4_t v364;
  float32x4_t v365;
  float32x4_t v366;
  float32x4_t v367;
  float32x4_t v368;
  float32x4_t v369;
  float32x4_t v370;
  float32x4_t v371;
  unint64_t v372;
  float32x4_t v373;
  uint64_t v374;
  __int128 v375;
  __int128 v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  float v380;
  float v381;
  float v382;
  float v383;
  float v384;
  float v385;
  uint64_t v386;
  int v387;
  unint64_t v388;
  unint64_t v389;
  float32x4_t *v390;
  float32x4_t *v391;
  float32x4_t *v392;
  float32x4_t *v393;
  float32x4_t v394;
  float32x4_t *v395;
  float32x4_t *v396;
  float32x4_t v397;
  float32x4_t v398;
  float32x4_t v399;
  float32x4_t v400;
  float32x4_t v401;
  float32x4_t v402;
  float32x4_t v403;
  float32x4_t v404;
  float32x4_t v405;
  float32x4_t v406;
  float32x4_t v407;
  float32x4_t v408;
  float32x4_t v409;
  float32x4_t v410;
  float32x4_t v411;
  float32x4_t v412;
  float32x4_t v413;
  float32x4_t v414;
  float32x4_t v415;
  float32x4_t v416;
  float32x4_t v417;
  float32x4_t v418;
  float32x4_t v419;
  float32x4_t v420;
  uint64_t v421;
  float32x4_t v422;
  float v423;
  __int128 v424;
  uint64_t v425;
  uint64_t v426;
  float v427;
  float v428;
  float v429;
  float v430;
  float v431;
  float v432;
  float v433;
  float v434;
  float32x4_t v435;
  __float2 v436;
  __float2 v437;
  float v438;
  __float2 v439;
  float v440;
  float v441;
  float v442;
  float v443;
  uint64_t v444;
  float v445;
  float v446;
  float v447;
  float v448;
  float v449;
  float v450;
  float v451;
  float v452;
  float v453;
  float v454;
  float v455;
  uint64_t v456;
  unint64_t v457;
  float32x4_t v458;
  float32x4_t v459;
  float32x4_t v460;
  float32x4_t v461;
  float32x4_t v462;
  float32x4_t v463;
  float32x4_t v464;
  float32x4_t v465;
  float32x4_t v466;
  float32x4_t v467;
  float32x4_t v468;
  float32x4_t v469;
  float32x4_t v470;
  float32x4_t v471;
  float32x4_t v472;
  float32x4_t v473;
  float32x4_t v474;
  float32x4_t v475;
  unint64_t v476;
  uint64_t v477;
  unint64_t v478;
  unint64_t v479;
  unint64_t v480;
  unint64_t v481;
  unint64_t v482;
  unint64_t v483;
  unint64_t v484;
  unint64_t v485;
  unint64_t v486;
  unint64_t v487;
  unint64_t v488;
  unint64_t v489;
  BOOL v490;
  BOOL v491;
  BOOL v492;
  BOOL v493;
  BOOL v494;
  BOOL v495;
  BOOL v496;
  BOOL v497;
  BOOL v498;
  BOOL v499;
  BOOL v500;
  BOOL v501;
  BOOL v502;
  BOOL v503;
  BOOL v504;
  BOOL v505;
  BOOL v506;
  BOOL v507;
  BOOL v508;
  BOOL v509;
  BOOL v510;
  BOOL v511;
  BOOL v512;
  BOOL v513;
  BOOL v514;
  BOOL v515;
  BOOL v516;
  BOOL v517;
  float32x4_t *v519;
  float32x4_t *v520;
  float32x4_t *v521;
  float32x4_t *v522;
  float32x4_t *v523;
  float32x4_t *v524;
  unint64_t v525;
  float32x4_t v526;
  float32x4_t v527;
  float32x4_t v528;
  float32x4_t v529;
  float32x4_t v530;
  float32x4_t v531;
  float32x4_t v532;
  float32x4_t v533;
  float32x4_t v534;
  float32x4_t v535;
  float32x4_t v536;
  uint64_t v537;
  __int128 v538;
  __int128 v539;
  uint64_t v540;
  uint64_t v541;
  float v542;
  float v543;
  float v544;
  float v545;
  float v546;
  float v547;
  uint64_t v548;
  int v549;
  unint64_t v550;
  unint64_t v551;
  float32x4_t *v552;
  float32x4_t *v553;
  float32x4_t *v554;
  float32x4_t *v555;
  float32x4_t v556;
  float32x4_t *v557;
  float32x4_t *v558;
  float32x4_t v559;
  float32x4_t v560;
  float32x4_t v561;
  float32x4_t v562;
  float32x4_t v563;
  float32x4_t v564;
  float32x4_t v565;
  float32x4_t v566;
  float32x4_t v567;
  float32x4_t v568;
  float32x4_t v569;
  float32x4_t v570;
  float32x4_t v571;
  float32x4_t v572;
  float32x4_t v573;
  float32x4_t v574;
  float32x4_t v575;
  float32x4_t v576;
  float32x4_t v577;
  float32x4_t v578;
  float32x4_t v579;
  float32x4_t v580;
  float32x4_t v581;
  float32x4_t v582;
  float32x4_t v583;
  float v584;
  __int128 v585;
  uint64_t v586;
  uint64_t v587;
  float v588;
  float v589;
  float v590;
  float v591;
  float v592;
  float v593;
  float v594;
  float v595;
  uint64_t v596;
  uint64_t v597;
  unint64_t v598;
  uint64_t v599;
  uint64_t v600;
  unint64_t v601;
  unint64_t v602;
  unint64_t v603;
  unint64_t v604;
  unint64_t v605;
  unint64_t v606;
  unint64_t v607;
  unint64_t v608;
  unint64_t v609;
  unint64_t v610;
  unint64_t v611;
  BOOL v613;
  BOOL v615;
  BOOL v617;
  BOOL v619;
  BOOL v621;
  BOOL v623;
  BOOL v625;
  BOOL v627;
  BOOL v629;
  BOOL v631;
  BOOL v633;
  BOOL v635;
  BOOL v637;
  BOOL v639;
  float32x4_t *v641;
  float32x4_t *v642;
  float32x4_t *v643;
  float32x4_t *v644;
  float32x4_t *v645;
  float32x4_t *v646;
  unint64_t v647;
  float32x4_t v648;
  float32x4_t v649;
  float32x4_t v650;
  float32x4_t v651;
  float32x4_t v652;
  float32x4_t v653;
  float32x4_t v654;
  float32x4_t v655;
  float32x4_t v656;
  float32x4_t v657;
  float32x4_t v658;
  float v659;
  BOOL v660;
  float v661;
  uint64_t v662;
  int v663;
  unint64_t v664;
  uint64_t v665;
  unint64_t v666;
  float v667;
  float v668;
  float v669;
  float v670;
  uint64_t v671;
  float v672;
  float v673;
  float32x4_t v674;
  float32x4_t v675;
  float32x4_t v676;
  float32x4_t v677;
  float32x4_t v678;
  float32x4_t v679;
  float32x4_t v680;
  float32x4_t v681;
  float32x4_t v682;
  float32x4_t v683;
  float32x4_t v684;
  float32x4_t v685;
  float32x4_t v686;
  float32x4_t v687;
  float32x4_t v688;
  float32x4_t v689;
  float32x4_t v690;
  unint64_t v691;
  __int128 v692;
  float *v693;
  __int128 v694;
  uint64_t v695;
  uint64_t v696;
  float v697;
  float v698;
  float v699;
  float v700;
  float v701;
  float v702;
  uint64_t v703;
  uint64_t v704;
  int v705;
  unint64_t v706;
  unint64_t v707;
  unint64_t j;
  float32x4_t v709;
  float32x4_t v710;
  float32x4_t v711;
  float32x4_t v712;
  float32x4_t v713;
  float32x4_t v714;
  float32x4_t v715;
  float32x4_t v716;
  float32x4_t v717;
  float32x4_t v718;
  float32x4_t v719;
  float32x4_t v720;
  float32x4_t v721;
  float32x4_t v722;
  float32x4_t v723;
  char *v724;
  char *v725;
  char *v726;
  char *v727;
  __int128 v728;
  __int128 v729;
  uint64_t v730;
  uint64_t v731;
  float *v732;
  float v733;
  float v734;
  float v735;
  float v736;
  float v737;
  uint64_t v738;
  char *v739;
  float v740;
  float v741;
  float v742;
  uint64_t v743;
  float v744;
  int v745;
  float v746;
  float v747;
  int v748;
  int v750;
  BOOL v751;
  uint64_t v752;
  unint64_t v753;
  unint64_t v754;
  unint64_t v755;
  unint64_t v756;
  unint64_t v757;
  unint64_t v758;
  unint64_t v759;
  unint64_t v760;
  unint64_t v761;
  unint64_t v762;
  char *v763;
  char *v764;
  BOOL v765;
  BOOL v766;
  BOOL v767;
  BOOL v768;
  BOOL v769;
  BOOL v770;
  BOOL v771;
  BOOL v772;
  BOOL v773;
  BOOL v774;
  BOOL v775;
  BOOL v776;
  BOOL v777;
  BOOL v778;
  BOOL v779;
  BOOL v780;
  BOOL v781;
  BOOL v782;
  BOOL v783;
  BOOL v784;
  BOOL v785;
  BOOL v786;
  BOOL v787;
  BOOL v788;
  BOOL v789;
  BOOL v790;
  BOOL v791;
  BOOL v792;
  float32x4_t *v794;
  float32x4_t *v795;
  float32x4_t *v796;
  float32x4_t *v797;
  float32x4_t *v798;
  float32x4_t *v799;
  unint64_t v800;
  float32x4_t v801;
  float32x4_t v802;
  float32x4_t v803;
  float32x4_t v804;
  float32x4_t v805;
  float32x4_t v806;
  float32x4_t v807;
  float32x4_t v808;
  float32x4_t v809;
  float32x4_t v810;
  float32x4_t v811;
  unint64_t v812;
  unint64_t v813;
  double v814;
  double v815;
  double v816;
  double v817;
  float v818;
  float v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  int v823;
  float v824;
  __float2 v825;
  int32x2_t v826;
  int32x2_t v827;
  int32x2_t v828;
  int32x2_t v829;
  int32x2_t v830;
  int32x2_t v831;
  int32x2_t v832;
  int32x2_t v833;
  _QWORD *v834;
  uint64_t v835;
  uint64_t v836;
  _QWORD *v837;
  char *v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  int32x2_t v847;
  const float *v848;
  unint64_t v849;
  int v850;
  float *v851;
  float *v852;
  float32x4_t v853;
  float32x4_t v854;
  float32x4_t v855;
  float32x4_t v856;
  float32x4_t v857;
  float32x4_t v858;
  const float *v859;
  float32x4_t v860;
  int32x4_t v861;
  unint64_t v862;
  float32x4_t v863;
  int32x4_t v864;
  float32x4_t v865;
  const float *v866;
  const float *v867;
  float32x4_t v868;
  float32x4_t v869;
  float32x4_t v870;
  float32x4_t v871;
  float32x4_t v872;
  float32x4_t v873;
  float32x4_t v874;
  float32x4_t v875;
  float32x4_t v876;
  float32x4_t v877;
  float32x4_t v878;
  int v879;
  float v880;
  float v881;
  float v882;
  float v883;
  float v884;
  float v885;
  float v886;
  int v887;
  uint64_t v888;
  void *v889;
  uint64_t v890;
  uint64_t v891;
  char *v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  float v900;
  double v901;
  double v902;
  double v903;
  int32x2_t v904;
  int32x2_t v905;
  int32x2_t v906;
  int32x4_t v907;
  int32x2_t v908;
  int32x2_t v909;
  const float *v910;
  uint64_t v911;
  int v912;
  int v913;
  float *v914;
  float *v915;
  float32x4_t v916;
  float32x4_t v917;
  float32x4_t v918;
  float32x4_t v919;
  float32x4_t v920;
  const float *v921;
  float32x4_t v922;
  float32x4_t v923;
  uint64_t v924;
  float32x4_t v925;
  int32x4_t v926;
  float32x4_t v927;
  const float *v928;
  const float *v929;
  float32x4_t v930;
  float32x4_t v931;
  float32x4_t v932;
  float32x4_t v933;
  float32x4_t v934;
  float32x4_t v935;
  float32x4_t v936;
  float32x4_t v937;
  float32x4_t v938;
  int v939;
  float v940;
  float v941;
  float v942;
  float v943;
  float v944;
  float v945;
  float v946;
  int v947;
  double v949;
  float v950;
  double v951;
  double v952;
  double v953;
  int32x2_t v954;
  int32x2_t v955;
  int32x2_t v956;
  int32x4_t v957;
  int32x2_t v958;
  int32x2_t v959;
  const float *v960;
  int v961;
  int v962;
  float *v963;
  float *v964;
  float32x4_t v965;
  float32x4_t v966;
  float32x4_t v967;
  float32x4_t v968;
  float32x4_t v969;
  const float *v970;
  float32x4_t v971;
  float32x4_t v972;
  uint64_t v973;
  float32x4_t v974;
  int32x4_t v975;
  float32x4_t v976;
  const float *v977;
  const float *v978;
  float32x4_t v979;
  float32x4_t v980;
  float32x4_t v981;
  float32x4_t v982;
  float32x4_t v983;
  float32x4_t v984;
  float32x4_t v985;
  float32x4_t v986;
  float32x4_t v987;
  int v988;
  float v989;
  float v990;
  float v991;
  float v992;
  float v993;
  float v994;
  float v995;
  int v996;
  double v997;
  float v998;
  double v999;
  double v1000;
  double v1001;
  int32x2_t v1002;
  int32x2_t v1003;
  int32x2_t v1004;
  int32x4_t v1005;
  int32x2_t v1006;
  int32x2_t v1007;
  const float *v1008;
  int v1009;
  int v1010;
  float *v1011;
  float *v1012;
  float32x4_t v1013;
  float32x4_t v1014;
  float32x4_t v1015;
  float32x4_t v1016;
  float32x4_t v1017;
  const float *v1018;
  float32x4_t v1019;
  float32x4_t v1020;
  uint64_t v1021;
  float32x4_t v1022;
  int32x4_t v1023;
  float32x4_t v1024;
  const float *v1025;
  const float *v1026;
  float32x4_t v1027;
  float32x4_t v1028;
  float32x4_t v1029;
  float32x4_t v1030;
  float32x4_t v1031;
  float32x4_t v1032;
  float32x4_t v1033;
  float32x4_t v1034;
  float32x4_t v1035;
  int v1036;
  float v1037;
  float v1038;
  float v1039;
  float v1040;
  float v1041;
  float v1042;
  float v1043;
  int v1044;
  double v1045;
  float v1046;
  double v1047;
  double v1048;
  double v1049;
  int32x2_t v1050;
  int32x2_t v1051;
  int32x2_t v1052;
  int32x4_t v1053;
  int32x2_t v1054;
  int32x2_t v1055;
  const float *v1056;
  int v1057;
  int v1058;
  float *v1059;
  float *v1060;
  float32x4_t v1061;
  float32x4_t v1062;
  float32x4_t v1063;
  float32x4_t v1064;
  float32x4_t v1065;
  const float *v1066;
  float32x4_t v1067;
  float32x4_t v1068;
  uint64_t v1069;
  float32x4_t v1070;
  int32x4_t v1071;
  float32x4_t v1072;
  const float *v1073;
  const float *v1074;
  float32x4_t v1075;
  float32x4_t v1076;
  float32x4_t v1077;
  float32x4_t v1078;
  float32x4_t v1079;
  float32x4_t v1080;
  float32x4_t v1081;
  float32x4_t v1082;
  float32x4_t v1083;
  int v1084;
  float v1085;
  float v1086;
  float v1087;
  float v1088;
  float v1089;
  float v1090;
  float v1091;
  int v1092;
  double v1093;
  float v1094;
  unint64_t v1095;
  unint64_t v1096;
  __int128 v1097;
  __int128 v1098;
  double v1099;
  double v1100;
  double v1101;
  double v1102;
  float v1103;
  float v1104;
  char *v1105;
  unint64_t v1106;
  uint64_t v1107;
  BOOL v1108;
  uint64_t v1109;
  uint64_t v1110;
  __int128 v1111;
  uint64_t v1112;
  char *v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t i;
  uint64_t v1117;
  uint64_t v1118;
  _OWORD *v1119;
  __int128 v1120;
  __int128 v1121;
  __int128 v1122;
  __int128 v1123;
  __int128 v1124;
  __int128 v1125;
  __int128 v1126;
  __int128 v1127;
  __int128 v1128;
  __int128 v1129;
  __int128 v1130;
  __int128 v1131;
  __int128 v1132;
  __int128 v1133;
  __int128 v1134;
  __int128 v1135;
  __int128 v1136;
  __int128 v1137;
  __int128 v1138;
  __int128 v1139;
  __int128 v1140;
  unint64_t v1141;
  float v1142;
  float v1143;
  float v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  unint64_t v1148;
  uint64_t v1149;
  float v1150;
  float v1151;
  uint64_t v1152;
  float v1153;
  uint64_t v1154;
  unint64_t v1155;
  unint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  void *v1159;
  void *v1160;
  void *v1161;
  float v1162;
  float v1163;
  float v1164;
  uint64_t v1165;
  uint64_t v1166;
  __int128 v1167;
  __int128 v1168;
  __int128 v1169;
  __int128 v1170;
  __int128 v1171;
  __int128 v1172;
  __int128 v1173;
  _OWORD *v1174;
  __int128 v1175;
  __int128 v1176;
  __int128 v1177;
  __int128 v1178;
  __int128 v1179;
  __int128 v1180;
  __int128 v1181;
  __int128 v1182;
  __int128 v1183;
  __int128 v1184;
  __int128 v1185;
  __int128 v1186;
  __int128 v1187;
  __int128 v1188;
  unint64_t v1189;
  uint64_t v1190;
  __int128 v1191;
  __int128 v1192;
  __int128 v1193;
  __int128 v1194;
  __int128 v1195;
  __int128 v1196;
  __int128 v1197;
  __int128 *v1198;
  __int128 v1199;
  __int128 v1200;
  __int128 v1201;
  __int128 v1202;
  __int128 v1203;
  __int128 v1204;
  __int128 v1205;
  __int128 v1206;
  __int128 v1207;
  __int128 v1208;
  __int128 v1209;
  __int128 v1210;
  __int128 v1211;
  __int128 v1212;
  __int128 v1213;
  __int128 v1214;
  __int128 v1215;
  __int128 v1216;
  __int128 v1217;
  __int128 v1218;
  __int128 v1219;
  __int128 *v1220;
  __int128 v1221;
  __int128 v1222;
  __int128 v1223;
  __int128 v1224;
  __int128 v1225;
  __int128 v1226;
  __int128 v1227;
  __int128 v1228;
  __int128 v1229;
  __int128 v1230;
  __int128 v1231;
  __int128 v1232;
  __int128 v1233;
  __int128 v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  _OWORD *v1238;
  __int128 v1239;
  __int128 v1240;
  __int128 v1241;
  __int128 v1242;
  __int128 v1243;
  __int128 v1244;
  __int128 v1245;
  _OWORD *v1246;
  __int128 v1247;
  __int128 v1248;
  __int128 v1249;
  __int128 v1250;
  __int128 v1251;
  __int128 v1252;
  __int128 v1253;
  __int128 v1254;
  __int128 v1255;
  __int128 v1256;
  __int128 v1257;
  __int128 v1258;
  __int128 v1259;
  __int128 v1260;
  uint64_t v1261;
  char *v1262;
  _BOOL8 v1263;
  char *v1264;
  unint64_t v1265;
  uint64_t v1266;
  BOOL v1267;
  uint64_t v1268;
  uint64_t v1269;
  __int128 v1270;
  uint64_t v1271;
  char *v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t k;
  uint64_t v1276;
  uint64_t v1277;
  _OWORD *v1278;
  __int128 v1279;
  __int128 v1280;
  __int128 v1281;
  __int128 v1282;
  __int128 v1283;
  __int128 v1284;
  __int128 v1285;
  __int128 v1286;
  __int128 v1287;
  __int128 v1288;
  __int128 v1289;
  __int128 v1290;
  __int128 v1291;
  __int128 v1292;
  __int128 v1293;
  __int128 v1294;
  __int128 v1295;
  __int128 v1296;
  __int128 v1297;
  __int128 v1298;
  __int128 v1299;
  unint64_t v1300;
  float v1301;
  float v1302;
  float v1303;
  uint64_t v1304;
  uint64_t v1305;
  uint64_t v1306;
  unint64_t v1307;
  uint64_t v1308;
  float v1309;
  float v1310;
  uint64_t v1311;
  float v1312;
  uint64_t v1313;
  unint64_t v1314;
  unint64_t v1315;
  uint64_t v1316;
  uint64_t v1317;
  void *v1318;
  void *v1319;
  void *v1320;
  float v1321;
  float v1322;
  float v1323;
  uint64_t v1324;
  uint64_t v1325;
  __int128 v1326;
  __int128 v1327;
  __int128 v1328;
  __int128 v1329;
  __int128 v1330;
  __int128 v1331;
  __int128 v1332;
  _OWORD *v1333;
  __int128 v1334;
  __int128 v1335;
  __int128 v1336;
  __int128 v1337;
  __int128 v1338;
  __int128 v1339;
  __int128 v1340;
  __int128 v1341;
  __int128 v1342;
  __int128 v1343;
  __int128 v1344;
  __int128 v1345;
  __int128 v1346;
  __int128 v1347;
  unint64_t v1348;
  uint64_t v1349;
  __int128 v1350;
  __int128 v1351;
  __int128 v1352;
  __int128 v1353;
  __int128 v1354;
  __int128 v1355;
  __int128 v1356;
  __int128 *v1357;
  __int128 v1358;
  __int128 v1359;
  __int128 v1360;
  __int128 v1361;
  __int128 v1362;
  __int128 v1363;
  __int128 v1364;
  __int128 v1365;
  __int128 v1366;
  __int128 v1367;
  __int128 v1368;
  __int128 v1369;
  __int128 v1370;
  __int128 v1371;
  __int128 v1372;
  __int128 v1373;
  __int128 v1374;
  __int128 v1375;
  __int128 v1376;
  __int128 v1377;
  __int128 v1378;
  __int128 *v1379;
  __int128 v1380;
  __int128 v1381;
  __int128 v1382;
  __int128 v1383;
  __int128 v1384;
  __int128 v1385;
  __int128 v1386;
  __int128 v1387;
  __int128 v1388;
  __int128 v1389;
  __int128 v1390;
  __int128 v1391;
  __int128 v1392;
  __int128 v1393;
  uint64_t v1394;
  uint64_t v1395;
  uint64_t v1396;
  _OWORD *v1397;
  __int128 v1398;
  __int128 v1399;
  __int128 v1400;
  __int128 v1401;
  __int128 v1402;
  __int128 v1403;
  __int128 v1404;
  _OWORD *v1405;
  __int128 v1406;
  __int128 v1407;
  __int128 v1408;
  __int128 v1409;
  __int128 v1410;
  __int128 v1411;
  __int128 v1412;
  __int128 v1413;
  __int128 v1414;
  __int128 v1415;
  __int128 v1416;
  __int128 v1417;
  __int128 v1418;
  __int128 v1419;
  uint64_t v1420;
  char *v1421;
  unint64_t v1423;
  char *v1424;
  uint64_t v1425;
  unint64_t *v1426;
  int v1427;
  uint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  float32x2_t *v1431;
  unint64_t v1432;
  uint64_t v1433;
  float v1434;
  int v1435;
  int v1436;
  int v1437;
  float v1438;
  float32x4_t v1439;
  float32x4_t v1440;
  float32x4_t v1441;
  float32x4_t v1442;
  float32x4_t v1443;
  float32x4_t v1444;
  float32x4_t v1445;
  float32x4_t v1446;
  float32x4_t v1447;
  float32x4_t v1448;
  float32x4_t v1449;
  float v1450;
  float v1451;
  float v1452;
  float v1453;
  float v1454;
  float v1455;
  float v1456;
  float v1457;
  float v1458;
  float v1459;
  unsigned int v1460;
  unsigned int v1461;
  float v1462;
  float v1463;
  float v1464;
  float v1465;
  float v1466;
  float v1467;
  float v1468;
  float v1469;
  float v1470;
  float v1471;
  float v1472;
  float v1473;
  float v1474;
  float v1475;
  float v1476;
  float v1477;
  void *v1478;
  float v1479;
  float v1480;
  float v1481;
  float v1482;
  void *v1483;
  void *v1484;
  float v1485;
  float v1486;
  float v1487;
  float v1488;
  float v1489;
  float v1490;
  float v1491;
  float v1492;
  float v1493;
  float v1494;
  float v1495;
  float v1496;
  float v1497;
  unint64_t v1498;
  char *v1499;
  float v1500;
  uint64_t v1501;
  float v1502;
  uint64_t v1503;
  float v1504;
  unint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  unint64_t v1510;
  int v1511;
  float v1512;
  int v1513;
  int v1514;
  uint64_t v1515;
  BOOL v1516;
  float v1517;
  int32x2_t v1518;
  int32x2_t v1519;
  BOOL v1520;
  uint64_t v1521;
  BOOL v1522;
  BOOL v1523;
  uint64_t v1524;
  float32x2_t v1525;
  uint64_t v1526;
  BOOL v1527;
  unsigned int v1528;
  float v1529;
  int32x2_t v1530;
  uint64_t v1531;
  int32x2_t v1532;
  BOOL v1533;
  uint64_t v1534;
  BOOL v1535;
  BOOL v1536;
  float32x4_t v1537;
  uint64_t v1538;
  float32x2_t v1539;
  uint64_t v1540;
  BOOL v1541;
  unsigned int v1542;
  float v1543;
  int32x2_t v1544;
  uint64_t v1545;
  float32x2_t v1546;
  BOOL v1547;
  uint64_t v1548;
  BOOL v1549;
  BOOL v1550;
  __int128 v1551;
  __int128 v1552;
  void *v1553[2];
  __int128 v1554;
  _OWORD v1555[7];
  __int128 v1556;
  __int128 v1557;
  __int128 v1558;
  __int128 v1559;
  __int128 v1560;
  float *v1561;
  __int128 v1562;
  __int128 v1563;
  __int128 v1564;
  __int128 v1565;
  __int128 v1566;
  __int128 v1567;
  uint64_t v1568;
  void *v1569;
  uint64_t v1570;
  uint64_t v1571;
  void *ptr;
  uint64_t v1573;
  void *v1574[2];
  __int128 v1575;
  void *v1576[2];
  void *v1577[2];
  __int128 v1578;
  __int128 v1579;
  __int128 v1580;
  __int128 v1581;
  __int128 v1582;
  __int128 v1583;
  unint64_t v1584;
  float32x4_t v1585;
  float32x2_t v1586;
  float v1587;
  float v1588;
  float v1589;
  float v1590;
  float v1591;
  float v1592;
  float v1593;
  float v1594;
  float v1595;
  float v1596;
  float v1597;
  float v1598;
  float v1599;
  float v1600;
  float v1601;
  float v1602;
  float v1603;
  float v1604;
  float v1605;
  float v1606;
  float v1607;
  float v1608;
  float v1609;
  float v1610;
  float v1611;
  float v1612;
  float v1613;
  uint64_t v1614;
  float32x4x3_t v1615;
  float32x4x3_t v1616;
  float32x4x3_t v1617;
  float32x4x3_t v1618;
  float32x4x3_t v1619;
  float32x4x3_t v1620;
  float32x4x3_t v1621;
  float32x4x3_t v1622;
  float32x4x3_t v1623;
  float32x4x3_t v1624;

  v2 = MEMORY[0x24BDAC7A8](a1, a2);
  v5 = v4;
  v6 = v3;
  v1433 = v7;
  v1538 = v8;
  v10 = v9;
  v1431 = v11;
  v1614 = *MEMORY[0x24BDAC8D0];
  v1425 = v3;
  v1426 = v9;
  if (*(_DWORD *)(v4 + 156))
  {
    v12 = *(_DWORD *)(v4 + 80);
    v1511 = vl_ps_debug_printout;
    ptr = 0;
    v1571 = 0;
    v1573 = 0;
    v1499 = (char *)malloc_type_malloc(4 * *(int *)(v3 + 4), 0x100004052888210uLL);
    v13 = *(unsigned int *)(v6 + 4);
    if ((int)v13 <= 0)
    {
      ptr = 0;
      v1571 = 0;
      v1573 = (int)v13;
    }
    else
    {
      v14 = malloc_type_malloc(8 * v13, 0x100004000313F17uLL);
      v13 = *(int *)(v6 + 4);
      ptr = v14;
      v1571 = 0;
      v1573 = v13;
      if ((int)v13 >= 1)
      {
        v1569 = malloc_type_malloc(12 * v13, 0x10000403E1C8BA9uLL);
        v15 = *(int *)(v6 + 4);
        v1568 = 0;
        v1570 = v15;
        v16 = *v10;
        if (!*v10)
          goto LABEL_795;
LABEL_606:
        if (v12 >= (int)v16)
          v16 = v16;
        else
          v16 = v12;
        v1498 = v16;
        v1430 = v5;
        if ((int)v16 >= 1)
        {
          v820 = 0;
          do
          {
            v1524 = v820;
            v1510 = v10[1];
            v821 = v1510 + 160 * v820;
            v1567 = 0u;
            v1566 = 0u;
            v1565 = 0u;
            v1564 = 0u;
            v1562 = 0u;
            v1563 = 0u;
            v822 = *(_QWORD *)(v821 + 8);
            v823 = *(_DWORD *)(v821 + 16);
            v824 = *(float *)(v821 + 20);
            vl_ps_get_inliers(v821, v6, v5, v1499);
            *(_QWORD *)((char *)&v1567 + 4) = v822;
            HIDWORD(v1567) = v823;
            v825 = __sincosf_stret(v824);
            *(float *)&v1565 = v825.__cosval;
            *((float *)&v1565 + 1) = -(float)(v825.__sinval - (float)((float)(v825.__cosval * 0.0) * 0.0));
            *((float *)&v1565 + 2) = (float)(v825.__cosval * 0.0) + (float)(v825.__sinval * 0.0);
            HIDWORD(v1565) = LODWORD(v825.__sinval);
            *(float *)&v1566 = v825.__cosval + (float)((float)(v825.__sinval * 0.0) * 0.0);
            *((float *)&v1566 + 1) = (float)(v825.__sinval * 0.0) - (float)(v825.__cosval * 0.0);
            *((_QWORD *)&v1566 + 1) = 0x80000000;
            LODWORD(v1567) = 1065353216;
            apply_pose_rotation((float *)&v1565, (float32x2_t *)(*(_QWORD *)&v1431[18] + 232), (float *)&v1562);
            v1571 = 0;
            v1568 = 0;
            v834 = (_QWORD *)(v821 + 88);
            if (*(uint64_t *)(v821 + 88) >= 1)
            {
              v835 = 0;
              v836 = 0;
              v837 = (_QWORD *)(v1510 + 160 * v1524 + 96);
              do
              {
                v839 = *(_QWORD *)(*(_QWORD *)(v1538 + 8) + 288 * *(int *)(*v837 + v835 + 4));
                v840 = *(_QWORD *)(v1433 + 8) + 12 * *(int *)(*v837 + v835);
                v1574[0] = *(void **)v840;
                LODWORD(v1574[1]) = *(_DWORD *)(v840 + 8);
                v841 = v1571;
                if (v1571 >= v1573)
                {
                  v842 = 32;
                  if (v1573)
                    v842 = 2 * v1573;
                  if (v842 <= v1571)
                    v843 = v1571 + 1;
                  else
                    v843 = v842;
                  if (v843)
                  {
                    ptr = malloc_type_realloc(ptr, 8 * v843, 0xF2A7A0E4uLL);
                    v841 = v1571;
                  }
                  v1573 = v843;
                }
                v1571 = v841 + 1;
                *((_QWORD *)ptr + v841) = v839;
                v844 = v1568;
                if (v1568 >= v1570)
                {
                  v845 = 21;
                  if (v1570)
                    v845 = 2 * v1570;
                  if (v845 <= v1568)
                    v846 = v1568 + 1;
                  else
                    v846 = v845;
                  if (v846)
                  {
                    v1569 = malloc_type_realloc(v1569, 12 * v846, 0xD421A375uLL);
                    v844 = v1568;
                  }
                  v1570 = v846;
                }
                v1568 = v844 + 1;
                v838 = (char *)v1569 + 12 * v844;
                *(void **)v838 = v1574[0];
                *((_DWORD *)v838 + 2) = v1574[1];
                ++v836;
                v835 += 8;
              }
              while (*v834 > v836);
            }
            if (v1511)
            {
              printf("Info : ");
              printf("\n  ------- Testing hyp %d (hist count %.0f, inliers %d), x: %.2f, y: %.2f, z: %.2f, ang: %.2f --------  ", v1524, *(float *)v821, *v834, *(float *)(v821 + 8), *(float *)(v821 + 12), *(float *)(v821 + 16), *(float *)(v821 + 20) * 180.0 / 3.14159265);
              putchar(10);
            }
            v1578 = 0u;
            *(_OWORD *)v1577 = 0u;
            *(_OWORD *)v1576 = 0u;
            v1575 = 0u;
            *(_OWORD *)v1574 = 0u;
            v847.i32[1] = DWORD1(v1563);
            v1551 = v1562;
            v1552 = v1563;
            *(_OWORD *)v1553 = v1564;
            v1537 = (float32x4_t)vdupq_n_s32(0x378637BEu);
            if ((int)v1571 < 1)
            {
              v850 = 0;
              goto LABEL_646;
            }
            v847.i32[0] = DWORD2(v1551);
            v827.i32[0] = DWORD1(v1551);
            v826.i32[0] = v1551;
            v828.i32[0] = (__int32)v1553[0];
            v830.i32[0] = HIDWORD(v1552);
            v829.i32[0] = DWORD2(v1552);
            *(float *)v831.i32 = (float)((float)(*((float *)&v1551 + 3) * *(float *)&v1553[1])
                                       + (float)(*(float *)&v1551 * *((float *)v1553 + 1)))
                               + (float)(*((float *)&v1552 + 2) * *((float *)&v1553[1] + 1));
            *(float *)v832.i32 = (float)((float)(*(float *)&v1553[1] * *(float *)&v1552)
                                       + (float)(*((float *)&v1551 + 1) * *((float *)v1553 + 1)))
                               + (float)(*((float *)&v1552 + 3) * *((float *)&v1553[1] + 1));
            *(float *)v833.i32 = (float)((float)(*(float *)&v1553[1] * *((float *)&v1552 + 1))
                                       + (float)(*((float *)&v1551 + 2) * *((float *)v1553 + 1)))
                               + (float)(*(float *)v1553 * *((float *)&v1553[1] + 1));
            v848 = (const float *)v1569;
            if (v1571 >= 8uLL)
            {
              v849 = v1571 - (unint64_t)(v1571 & 7);
              v851 = (float *)((char *)ptr + 8 * v849);
              v852 = (float *)((char *)v1569 + 12 * v849);
              v853 = (float32x4_t)vdupq_lane_s32(v826, 0);
              v854 = (float32x4_t)vdupq_lane_s32(v829, 0);
              v855 = (float32x4_t)vdupq_lane_s32(v831, 0);
              v856 = (float32x4_t)vdupq_lane_s32(v827, 0);
              v857 = (float32x4_t)vdupq_lane_s32(v830, 0);
              v858 = (float32x4_t)vdupq_lane_s32(v832, 0);
              v859 = (const float *)((char *)ptr + 32);
              v860 = (float32x4_t)vdupq_lane_s32(v847, 0);
              v861 = 0uLL;
              v862 = v849;
              v863 = (float32x4_t)vdupq_lane_s32(v828, 0);
              v864 = 0uLL;
              v865 = (float32x4_t)vdupq_lane_s32(v833, 0);
              do
              {
                v866 = v848;
                v1624 = vld3q_f32(v866);
                v866 += 12;
                v1615 = vld3q_f32(v866);
                v867 = v859 - 8;
                v868 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1624.val[1], *((float *)&v1551 + 3)), v1624.val[0], v853), v1624.val[2], v854), v855);
                v869 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1624.val[1], *(float *)&v1552), v1624.val[0], v856), v1624.val[2], v857), v858);
                v870 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1615.val[1], *((float *)&v1551 + 3)), v1615.val[0], v853), v1615.val[2], v854);
                v871 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1615.val[1], *(float *)&v1552), v1615.val[0], v856), v1615.val[2], v857);
                v872 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1615.val[1], *((float *)&v1552 + 1)), v1615.val[0], v860), v1615.val[2], v863);
                *(float32x4x2_t *)v1615.val[0].f32 = vld2q_f32(v867);
                v1615.val[2] = vsubq_f32(v870, v855);
                v873 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1624.val[1], *((float *)&v1552 + 1)), v1624.val[0], v860), v1624.val[2], v863), v865);
                *(float32x4x2_t *)v1624.val[0].f32 = vld2q_f32(v859);
                v874 = vmlsq_f32(v869, v868, v1615.val[0]);
                v875 = vmlsq_f32(v873, v868, v1615.val[1]);
                v876 = vmlsq_f32(vsubq_f32(v872, v865), v1615.val[2], v1624.val[0]);
                v878 = vmlsq_f32(vsubq_f32(v871, v858), v1615.val[2], v877);
                v861 = vsubq_s32(v861, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v868, v868), v1537), vmlaq_f32(vmulq_f32(v875, v875), v874, v874)), (int8x16_t)vcgtzq_f32(v868)));
                v864 = vsubq_s32(v864, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v1615.val[2], v1615.val[2]), v1537), vmlaq_f32(vmulq_f32(v876, v876), v878, v878)), (int8x16_t)vcgtzq_f32(v1615.val[2])));
                v848 += 24;
                v859 += 16;
                v862 -= 8;
              }
              while (v862);
              v850 = vaddvq_s32(vaddq_s32(v864, v861));
              *(float *)v832.i32 = (float)((float)(*(float *)&v1553[1] * *(float *)&v1552)
                                         + (float)(*((float *)&v1551 + 1) * *((float *)v1553 + 1)))
                                 + (float)(*((float *)&v1552 + 3) * *((float *)&v1553[1] + 1));
              *(float *)v831.i32 = (float)((float)(*((float *)&v1551 + 3) * *(float *)&v1553[1])
                                         + (float)(*(float *)&v1551 * *((float *)v1553 + 1)))
                                 + (float)(*((float *)&v1552 + 2) * *((float *)&v1553[1] + 1));
              *(float *)v833.i32 = (float)((float)(*(float *)&v1553[1] * *((float *)&v1552 + 1))
                                         + (float)(*((float *)&v1551 + 2) * *((float *)v1553 + 1)))
                                 + (float)(*(float *)v1553 * *((float *)&v1553[1] + 1));
              if ((v1571 & 7) == 0)
                goto LABEL_646;
            }
            else
            {
              LODWORD(v849) = 0;
              v850 = 0;
              v851 = (float *)ptr;
              v852 = (float *)v1569;
            }
            v879 = v1571 - v849;
            do
            {
              v880 = v852[1];
              v881 = v852[2];
              v882 = (float)((float)((float)(*((float *)&v1551 + 3) * v880) + (float)(*(float *)&v1551 * *v852))
                           + (float)(*((float *)&v1552 + 2) * v881))
                   - *(float *)v831.i32;
              v883 = (float)((float)(*((float *)&v1552 + 1) * v880) + (float)(*((float *)&v1551 + 2) * *v852))
                   + (float)(*(float *)v1553 * v881);
              v884 = (float)((float)((float)(*(float *)&v1552 * v880) + (float)(*((float *)&v1551 + 1) * *v852))
                           + (float)(*((float *)&v1552 + 3) * v881))
                   - *(float *)v832.i32;
              v885 = *v851;
              v886 = v851[1];
              v851 += 2;
              v887 = (float)((float)((float)((float)(v883 - *(float *)v833.i32) - (float)(v886 * v882))
                                   * (float)((float)(v883 - *(float *)v833.i32) - (float)(v886 * v882)))
                           + (float)((float)(v884 - (float)(v885 * v882)) * (float)(v884 - (float)(v885 * v882)))) < (float)((float)(v882 * v882) * 0.000016);
              if (v882 <= 0.0)
                v887 = 0;
              v850 += v887;
              v852 += 3;
              --v879;
            }
            while (v879);
LABEL_646:
            if (v1571 >= 1)
            {
              v888 = 0;
              v889 = 0;
              v890 = 0;
              v891 = 0;
              do
              {
                v894 = v891 + 1;
                if (v891 >= v890)
                {
                  v895 = 2 * v890;
                  if (!v890)
                    v895 = 32;
                  if (v895 <= v891)
                    v890 = v891 + 1;
                  else
                    v890 = v895;
                  if (v890)
                  {
                    v889 = malloc_type_realloc(v889, 8 * v890, 0x8D151193uLL);
                    v1574[1] = v889;
                  }
                  *(_QWORD *)&v1575 = v890;
                }
                v1574[0] = (void *)(v891 + 1);
                *((_QWORD *)v889 + v891) = *((_QWORD *)ptr + v891);
                v896 = *((_QWORD *)&v1575 + 1);
                v897 = *((_QWORD *)&v1575 + 1) + 1;
                if (*((uint64_t *)&v1575 + 1) >= (uint64_t)v1576[1])
                {
                  v898 = 21;
                  if (v1576[1])
                    v898 = 2 * (uint64_t)v1576[1];
                  if (v898 <= *((uint64_t *)&v1575 + 1))
                    v899 = *((_QWORD *)&v1575 + 1) + 1;
                  else
                    v899 = v898;
                  if (v899)
                    v1576[0] = malloc_type_realloc(v1576[0], 12 * v899, 0x8F9A1826uLL);
                  v1576[1] = (void *)v899;
                }
                *((_QWORD *)&v1575 + 1) = v897;
                v892 = (char *)v1576[0] + 12 * v896;
                v893 = *(_QWORD *)((char *)v1569 + v888);
                *((_DWORD *)v892 + 2) = *(_DWORD *)((char *)v1569 + v888 + 8);
                *(_QWORD *)v892 = v893;
                v888 += 12;
                v891 = v894;
              }
              while (v1571 > v894);
            }
            v900 = vl_pose_refine((float32x2_t *)&v1551, (uint64_t)v1574, (uint64_t *)&v1575 + 1, 2, (float32x2_t *)&v1551, 0, 1.0, 0.0, 0.0);
            if ((int)v1571 < 1)
            {
              v911 = v1524;
              goto LABEL_719;
            }
            v907.i32[0] = DWORD2(v1551);
            LODWORD(v902) = DWORD1(v1551);
            LODWORD(v901) = v1551;
            LODWORD(v903) = v1553[0];
            v905.i32[0] = HIDWORD(v1552);
            v904.i32[0] = DWORD2(v1552);
            *(float *)v906.i32 = (float)((float)(*((float *)&v1551 + 3) * *(float *)&v1553[1])
                                       + (float)(*(float *)&v1551 * *((float *)v1553 + 1)))
                               + (float)(*((float *)&v1552 + 2) * *((float *)&v1553[1] + 1));
            *(float *)v908.i32 = (float)((float)(*(float *)&v1553[1] * *(float *)&v1552)
                                       + (float)(*((float *)&v1551 + 1) * *((float *)v1553 + 1)))
                               + (float)(*((float *)&v1552 + 3) * *((float *)&v1553[1] + 1));
            *(float *)v909.i32 = (float)((float)(*(float *)&v1553[1] * *((float *)&v1552 + 1))
                                       + (float)(*((float *)&v1551 + 2) * *((float *)v1553 + 1)))
                               + (float)(*(float *)v1553 * *((float *)&v1553[1] + 1));
            v910 = (const float *)v1569;
            v911 = v1524;
            if (v1571 >= 8uLL)
            {
              v1491 = v900;
              v912 = v1571 & 0xFFFFFFF8;
              v914 = (float *)((char *)ptr + 8 * (v1571 & 0xFFFFFFF8));
              v915 = (float *)((char *)v1569 + 12 * (v1571 & 0xFFFFFFF8));
              v916 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v901, 0);
              v917 = (float32x4_t)vdupq_lane_s32(v904, 0);
              v918 = (float32x4_t)vdupq_lane_s32(v906, 0);
              v919 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v902, 0);
              v920 = (float32x4_t)vdupq_lane_s32(v905, 0);
              v921 = (const float *)((char *)ptr + 32);
              v922 = (float32x4_t)vdupq_lane_s32(v908, 0);
              v923 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v907.i8, 0);
              v907 = 0uLL;
              v924 = v1571 & 0xFFFFFFF8;
              v925 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v903, 0);
              v926 = 0uLL;
              v927 = (float32x4_t)vdupq_lane_s32(v909, 0);
              do
              {
                v928 = v910;
                v1616 = vld3q_f32(v928);
                v928 += 12;
                v1620 = vld3q_f32(v928);
                v929 = v921 - 8;
                v930 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1616.val[1], *((float *)&v1551 + 3)), v1616.val[0], v916), v1616.val[2], v917), v918);
                v931 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1616.val[1], *(float *)&v1552), v1616.val[0], v919), v1616.val[2], v920), v922);
                v932 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1616.val[1], *((float *)&v1552 + 1)), v1616.val[0], v923), v1616.val[2], v925);
                v933 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1620.val[1], *(float *)&v1552), v1620.val[0], v919), v1620.val[2], v920);
                v934 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1620.val[1], *((float *)&v1552 + 1)), v1620.val[0], v923), v1620.val[2], v925);
                *(float32x4x2_t *)v1616.val[0].f32 = vld2q_f32(v929);
                v1616.val[2] = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1620.val[1], *((float *)&v1551 + 3)), v1620.val[0], v916), v1620.val[2], v917), v918);
                *(float32x4x2_t *)v1620.val[0].f32 = vld2q_f32(v921);
                v935 = vmlsq_f32(v931, v930, v1616.val[0]);
                v936 = vmlsq_f32(vsubq_f32(v932, v927), v930, v1616.val[1]);
                v937 = vmlsq_f32(vsubq_f32(v934, v927), v1616.val[2], v1620.val[1]);
                v938 = vmlsq_f32(vsubq_f32(v933, v922), v1616.val[2], v1620.val[0]);
                v907 = vsubq_s32(v907, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v930, v930), v1537), vmlaq_f32(vmulq_f32(v936, v936), v935, v935)), (int8x16_t)vcgtzq_f32(v930)));
                v926 = vsubq_s32(v926, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v1616.val[2], v1616.val[2]), v1537), vmlaq_f32(vmulq_f32(v937, v937), v938, v938)), (int8x16_t)vcgtzq_f32(v1616.val[2])));
                v910 += 24;
                v921 += 16;
                v924 -= 8;
              }
              while (v924);
              v913 = vaddvq_s32(vaddq_s32(v926, v907));
              v900 = v1491;
              *(float *)v906.i32 = (float)((float)(*((float *)&v1551 + 3) * *(float *)&v1553[1])
                                         + (float)(*(float *)&v1551 * *((float *)v1553 + 1)))
                                 + (float)(*((float *)&v1552 + 2) * *((float *)&v1553[1] + 1));
              v907.i32[0] = DWORD2(v1551);
              *(float *)v909.i32 = (float)((float)(*(float *)&v1553[1] * *((float *)&v1552 + 1))
                                         + (float)(*((float *)&v1551 + 2) * *((float *)v1553 + 1)))
                                 + (float)(*(float *)v1553 * *((float *)&v1553[1] + 1));
              *(float *)v908.i32 = (float)((float)(*(float *)&v1553[1] * *(float *)&v1552)
                                         + (float)(*((float *)&v1551 + 1) * *((float *)v1553 + 1)))
                                 + (float)(*((float *)&v1552 + 3) * *((float *)&v1553[1] + 1));
              if ((v1571 & 7) == 0)
                goto LABEL_678;
            }
            else
            {
              v912 = 0;
              v913 = 0;
              v914 = (float *)ptr;
              v915 = (float *)v1569;
            }
            v939 = v1571 - v912;
            do
            {
              v940 = v915[1];
              v941 = v915[2];
              v942 = (float)((float)((float)(*((float *)&v1551 + 3) * v940) + (float)(*(float *)&v1551 * *v915))
                           + (float)(*((float *)&v1552 + 2) * v941))
                   - *(float *)v906.i32;
              v943 = (float)((float)(*((float *)&v1552 + 1) * v940) + (float)(*(float *)v907.i32 * *v915))
                   + (float)(*(float *)v1553 * v941);
              v944 = (float)((float)((float)(*(float *)&v1552 * v940) + (float)(*((float *)&v1551 + 1) * *v915))
                           + (float)(*((float *)&v1552 + 3) * v941))
                   - *(float *)v908.i32;
              v945 = *v914;
              v946 = v914[1];
              v914 += 2;
              v947 = (float)((float)((float)((float)(v943 - *(float *)v909.i32) - (float)(v946 * v942))
                                   * (float)((float)(v943 - *(float *)v909.i32) - (float)(v946 * v942)))
                           + (float)((float)(v944 - (float)(v945 * v942)) * (float)(v944 - (float)(v945 * v942)))) < (float)((float)(v942 * v942) * 0.000016);
              if (v942 <= 0.0)
                v947 = 0;
              v913 += v947;
              v915 += 3;
              --v939;
            }
            while (v939);
LABEL_678:
            if (v913 < v850 || v913 == 0)
              goto LABEL_719;
            v1562 = v1551;
            v1563 = v1552;
            HIDWORD(v949) = HIDWORD(v1553[0]);
            v1564 = *(_OWORD *)v1553;
            LODWORD(v949) = 998445679;
            vl_pose_count_inliers((uint64_t)&v1551, &v1571, (uint64_t)&v1568, 0, (uint64_t)v1574, fmaxf(v900 + v900, 0.004), v949, *(double *)&v1551, v901, v902, v903);
            v950 = vl_pose_refine((float32x2_t *)&v1551, (uint64_t)v1574, (uint64_t *)&v1575 + 1, 2, (float32x2_t *)&v1551, 0, 1.0, 0.0, 0.0);
            if ((int)v1571 < 1)
            {
              v962 = 0;
              goto LABEL_693;
            }
            v957.i32[0] = DWORD2(v1551);
            LODWORD(v952) = DWORD1(v1551);
            LODWORD(v951) = v1551;
            LODWORD(v953) = v1553[0];
            v955.i32[0] = HIDWORD(v1552);
            v954.i32[0] = DWORD2(v1552);
            *(float *)v956.i32 = (float)((float)(*((float *)&v1551 + 3) * *(float *)&v1553[1])
                                       + (float)(*(float *)&v1551 * *((float *)v1553 + 1)))
                               + (float)(*((float *)&v1552 + 2) * *((float *)&v1553[1] + 1));
            *(float *)v958.i32 = (float)((float)(*(float *)&v1553[1] * *(float *)&v1552)
                                       + (float)(*((float *)&v1551 + 1) * *((float *)v1553 + 1)))
                               + (float)(*((float *)&v1552 + 3) * *((float *)&v1553[1] + 1));
            *(float *)v959.i32 = (float)((float)(*(float *)&v1553[1] * *((float *)&v1552 + 1))
                                       + (float)(*((float *)&v1551 + 2) * *((float *)v1553 + 1)))
                               + (float)(*(float *)v1553 * *((float *)&v1553[1] + 1));
            v960 = (const float *)v1569;
            if (v1571 >= 8uLL)
            {
              v1492 = v950;
              v961 = v1571 & 0xFFFFFFF8;
              v963 = (float *)((char *)ptr + 8 * (v1571 & 0xFFFFFFF8));
              v964 = (float *)((char *)v1569 + 12 * (v1571 & 0xFFFFFFF8));
              v965 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v951, 0);
              v966 = (float32x4_t)vdupq_lane_s32(v954, 0);
              v967 = (float32x4_t)vdupq_lane_s32(v956, 0);
              v968 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v952, 0);
              v969 = (float32x4_t)vdupq_lane_s32(v955, 0);
              v970 = (const float *)((char *)ptr + 32);
              v971 = (float32x4_t)vdupq_lane_s32(v958, 0);
              v972 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v957.i8, 0);
              v957 = 0uLL;
              v973 = v1571 & 0xFFFFFFF8;
              v974 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v953, 0);
              v975 = 0uLL;
              v976 = (float32x4_t)vdupq_lane_s32(v959, 0);
              do
              {
                v977 = v960;
                v1617 = vld3q_f32(v977);
                v977 += 12;
                v1621 = vld3q_f32(v977);
                v978 = v970 - 8;
                v979 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1617.val[1], *((float *)&v1551 + 3)), v1617.val[0], v965), v1617.val[2], v966), v967);
                v980 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1617.val[1], *(float *)&v1552), v1617.val[0], v968), v1617.val[2], v969), v971);
                v981 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1617.val[1], *((float *)&v1552 + 1)), v1617.val[0], v972), v1617.val[2], v974);
                v982 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1621.val[1], *(float *)&v1552), v1621.val[0], v968), v1621.val[2], v969);
                v983 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1621.val[1], *((float *)&v1552 + 1)), v1621.val[0], v972), v1621.val[2], v974);
                *(float32x4x2_t *)v1617.val[0].f32 = vld2q_f32(v978);
                v1617.val[2] = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1621.val[1], *((float *)&v1551 + 3)), v1621.val[0], v965), v1621.val[2], v966), v967);
                *(float32x4x2_t *)v1621.val[0].f32 = vld2q_f32(v970);
                v984 = vmlsq_f32(v980, v979, v1617.val[0]);
                v985 = vmlsq_f32(vsubq_f32(v981, v976), v979, v1617.val[1]);
                v986 = vmlsq_f32(vsubq_f32(v983, v976), v1617.val[2], v1621.val[1]);
                v987 = vmlsq_f32(vsubq_f32(v982, v971), v1617.val[2], v1621.val[0]);
                v957 = vsubq_s32(v957, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v979, v979), v1537), vmlaq_f32(vmulq_f32(v985, v985), v984, v984)), (int8x16_t)vcgtzq_f32(v979)));
                v975 = vsubq_s32(v975, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v1617.val[2], v1617.val[2]), v1537), vmlaq_f32(vmulq_f32(v986, v986), v987, v987)), (int8x16_t)vcgtzq_f32(v1617.val[2])));
                v960 += 24;
                v970 += 16;
                v973 -= 8;
              }
              while (v973);
              v962 = vaddvq_s32(vaddq_s32(v975, v957));
              v950 = v1492;
              *(float *)v956.i32 = (float)((float)(*((float *)&v1551 + 3) * *(float *)&v1553[1])
                                         + (float)(*(float *)&v1551 * *((float *)v1553 + 1)))
                                 + (float)(*((float *)&v1552 + 2) * *((float *)&v1553[1] + 1));
              v957.i32[0] = DWORD2(v1551);
              *(float *)v959.i32 = (float)((float)(*(float *)&v1553[1] * *((float *)&v1552 + 1))
                                         + (float)(*((float *)&v1551 + 2) * *((float *)v1553 + 1)))
                                 + (float)(*(float *)v1553 * *((float *)&v1553[1] + 1));
              *(float *)v958.i32 = (float)((float)(*(float *)&v1553[1] * *(float *)&v1552)
                                         + (float)(*((float *)&v1551 + 1) * *((float *)v1553 + 1)))
                                 + (float)(*((float *)&v1552 + 3) * *((float *)&v1553[1] + 1));
              if ((v1571 & 7) == 0)
                goto LABEL_693;
            }
            else
            {
              v961 = 0;
              v962 = 0;
              v963 = (float *)ptr;
              v964 = (float *)v1569;
            }
            v988 = v1571 - v961;
            do
            {
              v989 = v964[1];
              v990 = v964[2];
              v991 = (float)((float)((float)(*((float *)&v1551 + 3) * v989) + (float)(*(float *)&v1551 * *v964))
                           + (float)(*((float *)&v1552 + 2) * v990))
                   - *(float *)v956.i32;
              v992 = (float)((float)(*((float *)&v1552 + 1) * v989) + (float)(*(float *)v957.i32 * *v964))
                   + (float)(*(float *)v1553 * v990);
              v993 = (float)((float)((float)(*(float *)&v1552 * v989) + (float)(*((float *)&v1551 + 1) * *v964))
                           + (float)(*((float *)&v1552 + 3) * v990))
                   - *(float *)v958.i32;
              v994 = *v963;
              v995 = v963[1];
              v963 += 2;
              v996 = (float)((float)((float)((float)(v992 - *(float *)v959.i32) - (float)(v995 * v991))
                                   * (float)((float)(v992 - *(float *)v959.i32) - (float)(v995 * v991)))
                           + (float)((float)(v993 - (float)(v994 * v991)) * (float)(v993 - (float)(v994 * v991)))) < (float)((float)(v991 * v991) * 0.000016);
              if (v991 <= 0.0)
                v996 = 0;
              v962 += v996;
              v964 += 3;
              --v988;
            }
            while (v988);
LABEL_693:
            v850 = v913;
            if (v962 < v913)
              goto LABEL_719;
            v1562 = v1551;
            v1563 = v1552;
            HIDWORD(v997) = HIDWORD(v1553[0]);
            v1564 = *(_OWORD *)v1553;
            LODWORD(v997) = 998445679;
            vl_pose_count_inliers((uint64_t)&v1551, &v1571, (uint64_t)&v1568, 0, (uint64_t)v1574, fmaxf(v950 + v950, 0.004), v997, *(double *)&v1551, v951, v952, v953);
            v998 = vl_pose_refine((float32x2_t *)&v1551, (uint64_t)v1574, (uint64_t *)&v1575 + 1, 2, (float32x2_t *)&v1551, 0, 1.0, 0.0, 0.0);
            if ((int)v1571 < 1)
            {
              v1010 = 0;
              goto LABEL_705;
            }
            v1005.i32[0] = DWORD2(v1551);
            LODWORD(v1000) = DWORD1(v1551);
            LODWORD(v999) = v1551;
            LODWORD(v1001) = v1553[0];
            v1003.i32[0] = HIDWORD(v1552);
            v1002.i32[0] = DWORD2(v1552);
            *(float *)v1004.i32 = (float)((float)(*((float *)&v1551 + 3) * *(float *)&v1553[1])
                                        + (float)(*(float *)&v1551 * *((float *)v1553 + 1)))
                                + (float)(*((float *)&v1552 + 2) * *((float *)&v1553[1] + 1));
            *(float *)v1006.i32 = (float)((float)(*(float *)&v1553[1] * *(float *)&v1552)
                                        + (float)(*((float *)&v1551 + 1) * *((float *)v1553 + 1)))
                                + (float)(*((float *)&v1552 + 3) * *((float *)&v1553[1] + 1));
            *(float *)v1007.i32 = (float)((float)(*(float *)&v1553[1] * *((float *)&v1552 + 1))
                                        + (float)(*((float *)&v1551 + 2) * *((float *)v1553 + 1)))
                                + (float)(*(float *)v1553 * *((float *)&v1553[1] + 1));
            v1008 = (const float *)v1569;
            if (v1571 >= 8uLL)
            {
              v1493 = v998;
              v1009 = v1571 & 0xFFFFFFF8;
              v1011 = (float *)((char *)ptr + 8 * (v1571 & 0xFFFFFFF8));
              v1012 = (float *)((char *)v1569 + 12 * (v1571 & 0xFFFFFFF8));
              v1013 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v999, 0);
              v1014 = (float32x4_t)vdupq_lane_s32(v1002, 0);
              v1015 = (float32x4_t)vdupq_lane_s32(v1004, 0);
              v1016 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v1000, 0);
              v1017 = (float32x4_t)vdupq_lane_s32(v1003, 0);
              v1018 = (const float *)((char *)ptr + 32);
              v1019 = (float32x4_t)vdupq_lane_s32(v1006, 0);
              v1020 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1005.i8, 0);
              v1005 = 0uLL;
              v1021 = v1571 & 0xFFFFFFF8;
              v1022 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v1001, 0);
              v1023 = 0uLL;
              v1024 = (float32x4_t)vdupq_lane_s32(v1007, 0);
              do
              {
                v1025 = v1008;
                v1618 = vld3q_f32(v1025);
                v1025 += 12;
                v1622 = vld3q_f32(v1025);
                v1026 = v1018 - 8;
                v1027 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1618.val[1], *((float *)&v1551 + 3)), v1618.val[0], v1013), v1618.val[2], v1014), v1015);
                v1028 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1618.val[1], *(float *)&v1552), v1618.val[0], v1016), v1618.val[2], v1017), v1019);
                v1029 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1618.val[1], *((float *)&v1552 + 1)), v1618.val[0], v1020), v1618.val[2], v1022);
                v1030 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1622.val[1], *(float *)&v1552), v1622.val[0], v1016), v1622.val[2], v1017);
                v1031 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1622.val[1], *((float *)&v1552 + 1)), v1622.val[0], v1020), v1622.val[2], v1022);
                *(float32x4x2_t *)v1618.val[0].f32 = vld2q_f32(v1026);
                v1618.val[2] = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1622.val[1], *((float *)&v1551 + 3)), v1622.val[0], v1013), v1622.val[2], v1014), v1015);
                *(float32x4x2_t *)v1622.val[0].f32 = vld2q_f32(v1018);
                v1032 = vmlsq_f32(v1028, v1027, v1618.val[0]);
                v1033 = vmlsq_f32(vsubq_f32(v1029, v1024), v1027, v1618.val[1]);
                v1034 = vmlsq_f32(vsubq_f32(v1031, v1024), v1618.val[2], v1622.val[1]);
                v1035 = vmlsq_f32(vsubq_f32(v1030, v1019), v1618.val[2], v1622.val[0]);
                v1005 = vsubq_s32(v1005, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v1027, v1027), v1537), vmlaq_f32(vmulq_f32(v1033, v1033), v1032, v1032)), (int8x16_t)vcgtzq_f32(v1027)));
                v1023 = vsubq_s32(v1023, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v1618.val[2], v1618.val[2]), v1537), vmlaq_f32(vmulq_f32(v1034, v1034), v1035, v1035)), (int8x16_t)vcgtzq_f32(v1618.val[2])));
                v1008 += 24;
                v1018 += 16;
                v1021 -= 8;
              }
              while (v1021);
              v1010 = vaddvq_s32(vaddq_s32(v1023, v1005));
              v998 = v1493;
              *(float *)v1004.i32 = (float)((float)(*((float *)&v1551 + 3) * *(float *)&v1553[1])
                                          + (float)(*(float *)&v1551 * *((float *)v1553 + 1)))
                                  + (float)(*((float *)&v1552 + 2) * *((float *)&v1553[1] + 1));
              v1005.i32[0] = DWORD2(v1551);
              *(float *)v1007.i32 = (float)((float)(*(float *)&v1553[1] * *((float *)&v1552 + 1))
                                          + (float)(*((float *)&v1551 + 2) * *((float *)v1553 + 1)))
                                  + (float)(*(float *)v1553 * *((float *)&v1553[1] + 1));
              *(float *)v1006.i32 = (float)((float)(*(float *)&v1553[1] * *(float *)&v1552)
                                          + (float)(*((float *)&v1551 + 1) * *((float *)v1553 + 1)))
                                  + (float)(*((float *)&v1552 + 3) * *((float *)&v1553[1] + 1));
              if ((v1571 & 7) == 0)
                goto LABEL_705;
            }
            else
            {
              v1009 = 0;
              v1010 = 0;
              v1011 = (float *)ptr;
              v1012 = (float *)v1569;
            }
            v1036 = v1571 - v1009;
            do
            {
              v1037 = v1012[1];
              v1038 = v1012[2];
              v1039 = (float)((float)((float)(*((float *)&v1551 + 3) * v1037) + (float)(*(float *)&v1551 * *v1012))
                            + (float)(*((float *)&v1552 + 2) * v1038))
                    - *(float *)v1004.i32;
              v1040 = (float)((float)(*((float *)&v1552 + 1) * v1037) + (float)(*(float *)v1005.i32 * *v1012))
                    + (float)(*(float *)v1553 * v1038);
              v1041 = (float)((float)((float)(*(float *)&v1552 * v1037) + (float)(*((float *)&v1551 + 1) * *v1012))
                            + (float)(*((float *)&v1552 + 3) * v1038))
                    - *(float *)v1006.i32;
              v1042 = *v1011;
              v1043 = v1011[1];
              v1011 += 2;
              v1044 = (float)((float)((float)((float)(v1040 - *(float *)v1007.i32) - (float)(v1043 * v1039))
                                    * (float)((float)(v1040 - *(float *)v1007.i32) - (float)(v1043 * v1039)))
                            + (float)((float)(v1041 - (float)(v1042 * v1039)) * (float)(v1041 - (float)(v1042 * v1039)))) < (float)((float)(v1039 * v1039) * 0.000016);
              if (v1039 <= 0.0)
                v1044 = 0;
              v1010 += v1044;
              v1012 += 3;
              --v1036;
            }
            while (v1036);
LABEL_705:
            v850 = v962;
            if (v1010 >= v962)
            {
              v1562 = v1551;
              v1563 = v1552;
              HIDWORD(v1045) = HIDWORD(v1553[0]);
              v1564 = *(_OWORD *)v1553;
              LODWORD(v1045) = 998445679;
              vl_pose_count_inliers((uint64_t)&v1551, &v1571, (uint64_t)&v1568, 0, (uint64_t)v1574, fmaxf(v998 + v998, 0.004), v1045, *(double *)&v1551, v999, v1000, v1001);
              v1046 = vl_pose_refine((float32x2_t *)&v1551, (uint64_t)v1574, (uint64_t *)&v1575 + 1, 2, (float32x2_t *)&v1551, 0, 1.0, 0.0, 0.0);
              if ((int)v1571 < 1)
              {
                v1058 = 0;
              }
              else
              {
                v1053.i32[0] = DWORD2(v1551);
                LODWORD(v1048) = DWORD1(v1551);
                LODWORD(v1047) = v1551;
                LODWORD(v1049) = v1553[0];
                v1051.i32[0] = HIDWORD(v1552);
                v1050.i32[0] = DWORD2(v1552);
                *(float *)v1052.i32 = (float)((float)(*((float *)&v1551 + 3) * *(float *)&v1553[1])
                                            + (float)(*(float *)&v1551 * *((float *)v1553 + 1)))
                                    + (float)(*((float *)&v1552 + 2) * *((float *)&v1553[1] + 1));
                *(float *)v1054.i32 = (float)((float)(*(float *)&v1553[1] * *(float *)&v1552)
                                            + (float)(*((float *)&v1551 + 1) * *((float *)v1553 + 1)))
                                    + (float)(*((float *)&v1552 + 3) * *((float *)&v1553[1] + 1));
                *(float *)v1055.i32 = (float)((float)(*(float *)&v1553[1] * *((float *)&v1552 + 1))
                                            + (float)(*((float *)&v1551 + 2) * *((float *)v1553 + 1)))
                                    + (float)(*(float *)v1553 * *((float *)&v1553[1] + 1));
                v1056 = (const float *)v1569;
                if (v1571 >= 8uLL)
                {
                  v1494 = v1046;
                  v1057 = v1571 & 0xFFFFFFF8;
                  v1059 = (float *)((char *)ptr + 8 * (v1571 & 0xFFFFFFF8));
                  v1060 = (float *)((char *)v1569 + 12 * (v1571 & 0xFFFFFFF8));
                  v1061 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v1047, 0);
                  v1062 = (float32x4_t)vdupq_lane_s32(v1050, 0);
                  v1063 = (float32x4_t)vdupq_lane_s32(v1052, 0);
                  v1064 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v1048, 0);
                  v1065 = (float32x4_t)vdupq_lane_s32(v1051, 0);
                  v1066 = (const float *)((char *)ptr + 32);
                  v1067 = (float32x4_t)vdupq_lane_s32(v1054, 0);
                  v1068 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1053.i8, 0);
                  v1053 = 0uLL;
                  v1069 = v1571 & 0xFFFFFFF8;
                  v1070 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v1049, 0);
                  v1071 = 0uLL;
                  v1072 = (float32x4_t)vdupq_lane_s32(v1055, 0);
                  do
                  {
                    v1073 = v1056;
                    v1619 = vld3q_f32(v1073);
                    v1073 += 12;
                    v1623 = vld3q_f32(v1073);
                    v1074 = v1066 - 8;
                    v1075 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1619.val[1], *((float *)&v1551 + 3)), v1619.val[0], v1061), v1619.val[2], v1062), v1063);
                    v1076 = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1619.val[1], *(float *)&v1552), v1619.val[0], v1064), v1619.val[2], v1065), v1067);
                    v1077 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1619.val[1], *((float *)&v1552 + 1)), v1619.val[0], v1068), v1619.val[2], v1070);
                    v1078 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1623.val[1], *(float *)&v1552), v1623.val[0], v1064), v1623.val[2], v1065);
                    v1079 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1623.val[1], *((float *)&v1552 + 1)), v1623.val[0], v1068), v1623.val[2], v1070);
                    *(float32x4x2_t *)v1619.val[0].f32 = vld2q_f32(v1074);
                    v1619.val[2] = vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v1623.val[1], *((float *)&v1551 + 3)), v1623.val[0], v1061), v1623.val[2], v1062), v1063);
                    *(float32x4x2_t *)v1623.val[0].f32 = vld2q_f32(v1066);
                    v1080 = vmlsq_f32(v1076, v1075, v1619.val[0]);
                    v1081 = vmlsq_f32(vsubq_f32(v1077, v1072), v1075, v1619.val[1]);
                    v1082 = vmlsq_f32(vsubq_f32(v1079, v1072), v1619.val[2], v1623.val[1]);
                    v1083 = vmlsq_f32(vsubq_f32(v1078, v1067), v1619.val[2], v1623.val[0]);
                    v1053 = vsubq_s32(v1053, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v1075, v1075), v1537), vmlaq_f32(vmulq_f32(v1081, v1081), v1080, v1080)), (int8x16_t)vcgtzq_f32(v1075)));
                    v1071 = vsubq_s32(v1071, (int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(vmulq_f32(vmulq_f32(v1619.val[2], v1619.val[2]), v1537), vmlaq_f32(vmulq_f32(v1082, v1082), v1083, v1083)), (int8x16_t)vcgtzq_f32(v1619.val[2])));
                    v1056 += 24;
                    v1066 += 16;
                    v1069 -= 8;
                  }
                  while (v1069);
                  v1058 = vaddvq_s32(vaddq_s32(v1071, v1053));
                  v1046 = v1494;
                  *(float *)v1052.i32 = (float)((float)(*((float *)&v1551 + 3) * *(float *)&v1553[1])
                                              + (float)(*(float *)&v1551 * *((float *)v1553 + 1)))
                                      + (float)(*((float *)&v1552 + 2) * *((float *)&v1553[1] + 1));
                  v1053.i32[0] = DWORD2(v1551);
                  *(float *)v1055.i32 = (float)((float)(*(float *)&v1553[1] * *((float *)&v1552 + 1))
                                              + (float)(*((float *)&v1551 + 2) * *((float *)v1553 + 1)))
                                      + (float)(*(float *)v1553 * *((float *)&v1553[1] + 1));
                  *(float *)v1054.i32 = (float)((float)(*(float *)&v1553[1] * *(float *)&v1552)
                                              + (float)(*((float *)&v1551 + 1) * *((float *)v1553 + 1)))
                                      + (float)(*((float *)&v1552 + 3) * *((float *)&v1553[1] + 1));
                  if ((v1571 & 7) != 0)
                    goto LABEL_713;
                }
                else
                {
                  v1057 = 0;
                  v1058 = 0;
                  v1059 = (float *)ptr;
                  v1060 = (float *)v1569;
LABEL_713:
                  v1084 = v1571 - v1057;
                  do
                  {
                    v1085 = v1060[1];
                    v1086 = v1060[2];
                    v1087 = (float)((float)((float)(*((float *)&v1551 + 3) * v1085) + (float)(*(float *)&v1551 * *v1060))
                                  + (float)(*((float *)&v1552 + 2) * v1086))
                          - *(float *)v1052.i32;
                    v1088 = (float)((float)(*((float *)&v1552 + 1) * v1085) + (float)(*(float *)v1053.i32 * *v1060))
                          + (float)(*(float *)v1553 * v1086);
                    v1089 = (float)((float)((float)(*(float *)&v1552 * v1085) + (float)(*((float *)&v1551 + 1) * *v1060))
                                  + (float)(*((float *)&v1552 + 3) * v1086))
                          - *(float *)v1054.i32;
                    v1090 = *v1059;
                    v1091 = v1059[1];
                    v1059 += 2;
                    v1092 = (float)((float)((float)((float)(v1088 - *(float *)v1055.i32) - (float)(v1091 * v1087))
                                          * (float)((float)(v1088 - *(float *)v1055.i32) - (float)(v1091 * v1087)))
                                  + (float)((float)(v1089 - (float)(v1090 * v1087))
                                          * (float)(v1089 - (float)(v1090 * v1087)))) < (float)((float)(v1087 * v1087)
                                                                                              * 0.000016);
                    if (v1087 <= 0.0)
                      v1092 = 0;
                    v1058 += v1092;
                    v1060 += 3;
                    --v1084;
                  }
                  while (v1084);
                }
              }
              v850 = v1010;
              if (v1058 >= v1010)
              {
                v1562 = v1551;
                v1563 = v1552;
                HIDWORD(v1093) = HIDWORD(v1553[0]);
                v1564 = *(_OWORD *)v1553;
                LODWORD(v1093) = 998445679;
                vl_pose_count_inliers((uint64_t)&v1551, &v1571, (uint64_t)&v1568, 0, (uint64_t)v1574, fmaxf(v1046 + v1046, 0.004), v1093, *(double *)&v1551, v1047, v1048, v1049);
                v850 = v1058;
              }
            }
LABEL_719:
            free(v1574[1]);
            free(v1576[0]);
            free(v1577[1]);
            v1094 = (float)(32 * v850);
            v1095 = v1510 + 160 * v911;
            *(float *)(v1095 + 4) = v1094;
            v1096 = v1095 + 4;
            v1097 = v1562;
            v1098 = v1563;
            *(_OWORD *)(v1096 + 68) = v1564;
            *(_OWORD *)(v1096 + 52) = v1098;
            *(_OWORD *)(v1096 + 36) = v1097;
            v5 = v1430;
            v1099 = *(float *)(*(_QWORD *)&v1431[18] + 236) * *(float *)(v1096 + 64)
                  + *(float *)(v1096 + 60) * *(float *)(*(_QWORD *)&v1431[18] + 232)
                  + *(float *)(v1096 + 68) * *(float *)(*(_QWORD *)&v1431[18] + 240);
            v1100 = fabs(v1099);
            v1101 = cosf(*(float *)(v1430 + 140));
            if (v1511)
            {
              printf("Info : ");
              v1102 = (float)(*(float *)v1096 * 0.03125);
              v1103 = v1099;
              v1104 = acosf(v1103);
              printf(" score: %6.3f (gravity test: %d (%f degrees))", v1102, v1100 > v1101, v1104 * 180.0 / 3.14159265);
              putchar(10);
            }
            v6 = v1425;
            if (v1100 <= v1101)
              *(_DWORD *)v1096 = 0;
            v10 = v1426;
            if (v1511)
            {
              LODWORD(v1574[0]) = 0;
              LODWORD(v1551) = 0;
              vl_gt_get_pose_err(v1431 + 12, (float32x2_t *)(v1096 + 36), (float *)v1574, (float *)&v1551);
              printf("Info : ");
              printf("  diff from gt : (%s%.2f%s, %s%.2f%s)", "", *(float *)&v1551 * 180.0 / 3.14159265, "", "", *(float *)v1574, "");
              putchar(10);
            }
            v820 = v911 + 1;
          }
          while (v820 != v1498);
        }
        v1105 = (char *)malloc_type_malloc(0x200uLL, 0xD6D21C9FuLL);
        v1106 = *v10;
        if (*v10)
        {
          v1107 = 0;
          v1108 = 1;
          v1109 = v10[1];
          v1110 = 32;
          v1111 = 0uLL;
          while (1)
          {
            v1112 = v1107;
            while (1)
            {
              if (!v1108)
              {
                --v1112;
                v1113 = &v1105[16 * v1112];
                v1106 = *((_QWORD *)v1113 + 1);
                v1109 = v10[1] + 160 * *(_QWORD *)v1113;
              }
              if ((uint64_t)v1106 > 15)
                break;
              if ((uint64_t)v1106 > 1)
              {
                v1114 = v1109 + 160;
                v1115 = 2;
                for (i = 1; i != v1106; ++i)
                {
                  v1117 = v1114;
                  v1118 = v1115;
                  do
                  {
                    if ((float)(*(float *)(v1109 + 160 * (v1118 - 2) + 4) - *(float *)(v1117 + 4)) >= 0.0)
                      break;
                    v1119 = (_OWORD *)(v1109 + 160 * (v1118 - 2));
                    v1583 = v1111;
                    v1582 = v1111;
                    v1581 = v1111;
                    v1580 = v1111;
                    v1579 = v1111;
                    v1578 = v1111;
                    *(_OWORD *)v1577 = v1111;
                    *(_OWORD *)v1576 = v1111;
                    v1575 = v1111;
                    *(_OWORD *)v1574 = v1111;
                    v1120 = *(_OWORD *)v1117;
                    v1575 = *(_OWORD *)(v1117 + 16);
                    *(_OWORD *)v1574 = v1120;
                    v1121 = *(_OWORD *)(v1117 + 32);
                    v1122 = *(_OWORD *)(v1117 + 48);
                    v1123 = *(_OWORD *)(v1117 + 64);
                    v1579 = *(_OWORD *)(v1117 + 80);
                    v1578 = v1123;
                    *(_OWORD *)v1577 = v1122;
                    *(_OWORD *)v1576 = v1121;
                    v1124 = *(_OWORD *)(v1117 + 96);
                    v1125 = *(_OWORD *)(v1117 + 112);
                    v1126 = *(_OWORD *)(v1117 + 128);
                    v1583 = *(_OWORD *)(v1117 + 144);
                    v1582 = v1126;
                    v1581 = v1125;
                    v1580 = v1124;
                    v1127 = v1119[1];
                    *(_OWORD *)v1117 = *v1119;
                    *(_OWORD *)(v1117 + 16) = v1127;
                    v1128 = v1119[2];
                    v1129 = v1119[3];
                    v1130 = v1119[5];
                    *(_OWORD *)(v1117 + 64) = v1119[4];
                    *(_OWORD *)(v1117 + 80) = v1130;
                    *(_OWORD *)(v1117 + 32) = v1128;
                    *(_OWORD *)(v1117 + 48) = v1129;
                    v1131 = v1119[6];
                    v1132 = v1119[7];
                    v1133 = v1119[9];
                    *(_OWORD *)(v1117 + 128) = v1119[8];
                    *(_OWORD *)(v1117 + 144) = v1133;
                    *(_OWORD *)(v1117 + 96) = v1131;
                    *(_OWORD *)(v1117 + 112) = v1132;
                    v1134 = v1575;
                    *v1119 = *(_OWORD *)v1574;
                    v1119[1] = v1134;
                    v1135 = *(_OWORD *)v1576;
                    v1136 = *(_OWORD *)v1577;
                    v1137 = v1579;
                    v1119[4] = v1578;
                    v1119[5] = v1137;
                    v1119[2] = v1135;
                    v1119[3] = v1136;
                    v1138 = v1580;
                    v1139 = v1581;
                    v1140 = v1583;
                    v1119[8] = v1582;
                    v1119[9] = v1140;
                    v1119[6] = v1138;
                    v1119[7] = v1139;
                    --v1118;
                    v1117 -= 160;
                  }
                  while (v1118 > 1);
                  ++v1115;
                  v1114 += 160;
                }
              }
              v1108 = 0;
              v1106 = 0;
              if (v1112 < 1)
                goto LABEL_794;
            }
            if (v1106 > 0x27)
              break;
            v1141 = v1106 >> 1;
            v1142 = *(float *)(v1109 + 160 * (v1106 >> 1) + 4);
            v1143 = *(float *)(v1109 + 4);
            v1144 = *(float *)(v1109 + 160 * (v1106 - 1) + 4);
            if ((float)(v1142 - v1143) >= 0.0)
            {
              if ((float)(v1144 - v1143) >= 0.0)
              {
                if ((float)(v1144 - v1142) < 0.0)
                  v1141 = v1106 - 1;
              }
              else
              {
                v1141 = 0;
              }
            }
            else if ((float)(v1144 - v1142) >= 0.0)
            {
              if ((float)(v1144 - v1143) >= 0.0)
                v1141 = 0;
              else
                v1141 = v1106 - 1;
            }
LABEL_777:
            v1165 = 0;
            v1166 = 0;
            v1583 = v1111;
            v1582 = v1111;
            v1581 = v1111;
            v1580 = v1111;
            v1579 = v1111;
            v1578 = v1111;
            *(_OWORD *)v1577 = v1111;
            *(_OWORD *)v1576 = v1111;
            v1575 = v1111;
            *(_OWORD *)v1574 = v1111;
            v1167 = *(_OWORD *)v1109;
            v1575 = *(_OWORD *)(v1109 + 16);
            *(_OWORD *)v1574 = v1167;
            v1168 = *(_OWORD *)(v1109 + 32);
            v1169 = *(_OWORD *)(v1109 + 48);
            v1170 = *(_OWORD *)(v1109 + 64);
            v1579 = *(_OWORD *)(v1109 + 80);
            v1578 = v1170;
            *(_OWORD *)v1577 = v1169;
            *(_OWORD *)v1576 = v1168;
            v1171 = *(_OWORD *)(v1109 + 96);
            v1172 = *(_OWORD *)(v1109 + 112);
            v1173 = *(_OWORD *)(v1109 + 128);
            v1583 = *(_OWORD *)(v1109 + 144);
            v1582 = v1173;
            v1581 = v1172;
            v1580 = v1171;
            v1174 = (_OWORD *)(v1109 + 160 * v1141);
            v1175 = v1174[1];
            *(_OWORD *)v1109 = *v1174;
            *(_OWORD *)(v1109 + 16) = v1175;
            v1176 = v1174[2];
            v1177 = v1174[3];
            v1178 = v1174[5];
            *(_OWORD *)(v1109 + 64) = v1174[4];
            *(_OWORD *)(v1109 + 80) = v1178;
            *(_OWORD *)(v1109 + 32) = v1176;
            *(_OWORD *)(v1109 + 48) = v1177;
            v1179 = v1174[6];
            v1180 = v1174[7];
            v1181 = v1174[9];
            *(_OWORD *)(v1109 + 128) = v1174[8];
            *(_OWORD *)(v1109 + 144) = v1181;
            *(_OWORD *)(v1109 + 96) = v1179;
            *(_OWORD *)(v1109 + 112) = v1180;
            v1182 = v1575;
            *v1174 = *(_OWORD *)v1574;
            v1174[1] = v1182;
            v1183 = *(_OWORD *)v1576;
            v1184 = *(_OWORD *)v1577;
            v1185 = v1579;
            v1174[4] = v1578;
            v1174[5] = v1185;
            v1174[2] = v1183;
            v1174[3] = v1184;
            v1186 = v1580;
            v1187 = v1581;
            v1188 = v1583;
            v1174[8] = v1582;
            v1174[9] = v1188;
            v1174[6] = v1186;
            v1174[7] = v1187;
            v1189 = v1106 - 1;
            v1190 = v1109 + 164;
            do
            {
              if ((float)(*(float *)(v1109 + 4) - *(float *)v1190) <= 0.0)
              {
                ++v1166;
                v1583 = v1111;
                v1582 = v1111;
                v1581 = v1111;
                v1580 = v1111;
                v1579 = v1111;
                v1578 = v1111;
                *(_OWORD *)v1577 = v1111;
                *(_OWORD *)v1576 = v1111;
                v1575 = v1111;
                *(_OWORD *)v1574 = v1111;
                v1191 = *(_OWORD *)(v1190 - 4);
                v1575 = *(_OWORD *)(v1190 + 12);
                *(_OWORD *)v1574 = v1191;
                v1192 = *(_OWORD *)(v1190 + 28);
                v1193 = *(_OWORD *)(v1190 + 44);
                v1194 = *(_OWORD *)(v1190 + 60);
                v1579 = *(_OWORD *)(v1190 + 76);
                v1578 = v1194;
                *(_OWORD *)v1577 = v1193;
                *(_OWORD *)v1576 = v1192;
                v1195 = *(_OWORD *)(v1190 + 92);
                v1196 = *(_OWORD *)(v1190 + 108);
                v1197 = *(_OWORD *)(v1190 + 124);
                v1583 = *(_OWORD *)(v1190 + 140);
                v1582 = v1197;
                v1581 = v1196;
                v1580 = v1195;
                v1198 = (__int128 *)(v1109 + 160 * v1166);
                v1199 = *v1198;
                *(_OWORD *)(v1190 + 12) = v1198[1];
                *(_OWORD *)(v1190 - 4) = v1199;
                v1200 = v1198[2];
                v1201 = v1198[3];
                v1202 = v1198[4];
                *(_OWORD *)(v1190 + 76) = v1198[5];
                *(_OWORD *)(v1190 + 60) = v1202;
                *(_OWORD *)(v1190 + 44) = v1201;
                *(_OWORD *)(v1190 + 28) = v1200;
                v1203 = v1198[6];
                v1204 = v1198[7];
                v1205 = v1198[8];
                *(_OWORD *)(v1190 + 140) = v1198[9];
                *(_OWORD *)(v1190 + 124) = v1205;
                *(_OWORD *)(v1190 + 108) = v1204;
                *(_OWORD *)(v1190 + 92) = v1203;
                v1206 = v1575;
                *v1198 = *(_OWORD *)v1574;
                v1198[1] = v1206;
                v1207 = *(_OWORD *)v1576;
                v1208 = *(_OWORD *)v1577;
                v1209 = v1579;
                v1198[4] = v1578;
                v1198[5] = v1209;
                v1198[2] = v1207;
                v1198[3] = v1208;
                v1210 = v1580;
                v1211 = v1581;
                v1212 = v1583;
                v1198[8] = v1582;
                v1198[9] = v1212;
                v1198[6] = v1210;
                v1198[7] = v1211;
                if ((float)(*(float *)(v1109 + 4) - *(float *)v1190) == 0.0)
                {
                  ++v1165;
                  v1583 = v1111;
                  v1582 = v1111;
                  v1581 = v1111;
                  v1580 = v1111;
                  v1579 = v1111;
                  v1578 = v1111;
                  *(_OWORD *)v1577 = v1111;
                  *(_OWORD *)v1576 = v1111;
                  v1575 = v1111;
                  *(_OWORD *)v1574 = v1111;
                  v1213 = *v1198;
                  v1575 = v1198[1];
                  *(_OWORD *)v1574 = v1213;
                  v1214 = v1198[2];
                  v1215 = v1198[3];
                  v1216 = v1198[4];
                  v1579 = v1198[5];
                  v1578 = v1216;
                  *(_OWORD *)v1577 = v1215;
                  *(_OWORD *)v1576 = v1214;
                  v1217 = v1198[6];
                  v1218 = v1198[7];
                  v1219 = v1198[8];
                  v1583 = v1198[9];
                  v1582 = v1219;
                  v1581 = v1218;
                  v1580 = v1217;
                  v1220 = (__int128 *)(v1109 + 160 * v1165);
                  v1221 = v1220[1];
                  *v1198 = *v1220;
                  v1198[1] = v1221;
                  v1222 = v1220[2];
                  v1223 = v1220[3];
                  v1224 = v1220[5];
                  v1198[4] = v1220[4];
                  v1198[5] = v1224;
                  v1198[2] = v1222;
                  v1198[3] = v1223;
                  v1225 = v1220[6];
                  v1226 = v1220[7];
                  v1227 = v1220[9];
                  v1198[8] = v1220[8];
                  v1198[9] = v1227;
                  v1198[6] = v1225;
                  v1198[7] = v1226;
                  v1228 = v1575;
                  *v1220 = *(_OWORD *)v1574;
                  v1220[1] = v1228;
                  v1229 = *(_OWORD *)v1576;
                  v1230 = *(_OWORD *)v1577;
                  v1231 = v1579;
                  v1220[4] = v1578;
                  v1220[5] = v1231;
                  v1220[2] = v1229;
                  v1220[3] = v1230;
                  v1232 = v1580;
                  v1233 = v1581;
                  v1234 = v1583;
                  v1220[8] = v1582;
                  v1220[9] = v1234;
                  v1220[6] = v1232;
                  v1220[7] = v1233;
                }
              }
              v1190 += 160;
              --v1189;
            }
            while (v1189);
            v1235 = v1165 + 1;
            v1236 = 160 * v1165;
            v1237 = -160 * v1165 + 160 * v1166;
            do
            {
              v1583 = v1111;
              v1582 = v1111;
              v1581 = v1111;
              v1580 = v1111;
              v1579 = v1111;
              v1578 = v1111;
              *(_OWORD *)v1577 = v1111;
              *(_OWORD *)v1576 = v1111;
              v1575 = v1111;
              *(_OWORD *)v1574 = v1111;
              v1238 = (_OWORD *)(v1109 + v1237);
              v1239 = *(_OWORD *)(v1109 + v1237);
              v1575 = *(_OWORD *)(v1109 + v1237 + 16);
              *(_OWORD *)v1574 = v1239;
              v1240 = *(_OWORD *)(v1109 + v1237 + 32);
              v1241 = *(_OWORD *)(v1109 + v1237 + 48);
              v1242 = *(_OWORD *)(v1109 + v1237 + 64);
              v1579 = *(_OWORD *)(v1109 + v1237 + 80);
              v1578 = v1242;
              *(_OWORD *)v1577 = v1241;
              *(_OWORD *)v1576 = v1240;
              v1243 = *(_OWORD *)(v1109 + v1237 + 96);
              v1244 = *(_OWORD *)(v1109 + v1237 + 112);
              v1245 = *(_OWORD *)(v1109 + v1237 + 128);
              v1583 = *(_OWORD *)(v1109 + v1237 + 144);
              v1582 = v1245;
              v1581 = v1244;
              v1580 = v1243;
              v1246 = (_OWORD *)(v1109 + v1236);
              v1247 = *(_OWORD *)(v1109 + v1236 + 16);
              *v1238 = *(_OWORD *)(v1109 + v1236);
              v1238[1] = v1247;
              v1248 = *(_OWORD *)(v1109 + v1236 + 32);
              v1249 = *(_OWORD *)(v1109 + v1236 + 48);
              v1250 = *(_OWORD *)(v1109 + v1236 + 80);
              v1238[4] = *(_OWORD *)(v1109 + v1236 + 64);
              v1238[5] = v1250;
              v1238[2] = v1248;
              v1238[3] = v1249;
              v1251 = *(_OWORD *)(v1109 + v1236 + 96);
              v1252 = *(_OWORD *)(v1109 + v1236 + 112);
              v1253 = *(_OWORD *)(v1109 + v1236 + 144);
              v1238[8] = *(_OWORD *)(v1109 + v1236 + 128);
              v1238[9] = v1253;
              v1238[6] = v1251;
              v1238[7] = v1252;
              v1254 = v1575;
              *v1246 = *(_OWORD *)v1574;
              v1246[1] = v1254;
              v1255 = *(_OWORD *)v1576;
              v1256 = *(_OWORD *)v1577;
              v1257 = v1579;
              v1246[4] = v1578;
              v1246[5] = v1257;
              v1246[2] = v1255;
              v1246[3] = v1256;
              v1258 = v1580;
              v1259 = v1581;
              v1260 = v1583;
              v1246[8] = v1582;
              v1246[9] = v1260;
              v1246[6] = v1258;
              v1246[7] = v1259;
              --v1235;
              v1236 -= 160;
              v1237 += 160;
            }
            while (v1235 > 0);
            v1107 = v1112 + 1;
            if (v1112 + 1 >= v1110)
            {
              v1261 = 2 * v1110;
              v1105 = (char *)malloc_type_realloc(v1105, 32 * v1110, 0xFAF60E10uLL);
              v1111 = 0uLL;
              v1110 = v1261;
              v10 = v1426;
            }
            v1262 = &v1105[16 * v1112];
            *(_QWORD *)v1262 = v1166 - 0x3333333333333333 * ((uint64_t)(v1109 - v10[1]) >> 5) + 1;
            *((_QWORD *)v1262 + 1) = v1106 + ~v1166;
            v1106 = v1166 - v1165;
            v1108 = v1166 != v1165;
            if (v1112 < 0 && !v1106)
              goto LABEL_794;
          }
          v1145 = 0;
          v1146 = 0;
          if (v1106 <= 0x7D0)
            v1147 = 8;
          else
            v1147 = 26;
          if (v1106 <= 0x7D0)
            v1148 = 3;
          else
            v1148 = 9;
          while (1)
          {
            v1149 = (uint64_t)(v1106 - 1 + v1145) / v1147;
            v1150 = *(float *)(v1109 + 160 * v1149 + 4);
            v1151 = *(float *)(v1109 + 160 * (v1145 / v1147) + 4);
            v1152 = (uint64_t)(2 * v1106 - 2 + v1145) / v1147;
            v1153 = *(float *)(v1109 + 160 * v1152 + 4);
            if ((float)(v1150 - v1151) >= 0.0)
            {
              if ((float)(v1153 - v1151) < 0.0)
                goto LABEL_758;
              if ((float)(v1153 - v1150) < 0.0)
              {
LABEL_760:
                v1574[v1146] = (void *)v1152;
                goto LABEL_752;
              }
            }
            else if ((float)(v1153 - v1150) >= 0.0)
            {
              if ((float)(v1153 - v1151) < 0.0)
                goto LABEL_760;
LABEL_758:
              v1574[v1146] = (void *)(v1145 / v1147);
              goto LABEL_752;
            }
            v1574[v1146] = (void *)v1149;
LABEL_752:
            ++v1146;
            v1145 += 3 * v1106 - 3;
            if (v1148 == v1146)
            {
              while (1)
              {
                v1154 = 0;
                v1155 = 0;
                v1156 = v1148;
                v1148 /= 3uLL;
                if (v1148 <= 1)
                  v1157 = 1;
                else
                  v1157 = v1148;
                v1158 = 8 * v1157;
                do
                {
                  v1159 = v1574[v1154];
                  v1160 = v1574[v1154 + 1];
                  v1161 = v1574[v1154 + 2];
                  v1162 = *(float *)(v1109 + 160 * (_QWORD)v1160 + 4);
                  v1163 = *(float *)(v1109 + 160 * (_QWORD)v1159 + 4);
                  v1164 = *(float *)(v1109 + 160 * (_QWORD)v1161 + 4);
                  if ((float)(v1162 - v1163) >= 0.0)
                  {
                    if ((float)(v1164 - v1163) < 0.0)
                      goto LABEL_773;
                    if ((float)(v1164 - v1162) >= 0.0)
                    {
LABEL_766:
                      v1574[v1155 / 8] = v1160;
                      goto LABEL_767;
                    }
                  }
                  else
                  {
                    if ((float)(v1164 - v1162) < 0.0)
                      goto LABEL_766;
                    if ((float)(v1164 - v1163) >= 0.0)
                    {
LABEL_773:
                      v1574[v1155 / 8] = v1159;
                      goto LABEL_767;
                    }
                  }
                  v1574[v1155 / 8] = v1161;
LABEL_767:
                  v1155 += 8;
                  v1154 += 3;
                }
                while (v1158 != v1155);
                if (v1156 < 9)
                {
                  v1141 = (unint64_t)v1574[0];
                  goto LABEL_777;
                }
              }
            }
          }
        }
LABEL_794:
        free(v1105);
        if (*(float *)(v10[1] + 4) >= (float)(32 * *(_DWORD *)(v1430 + 152)))
        {
          v1263 = 0;
          goto LABEL_867;
        }
LABEL_795:
        v1263 = 1;
LABEL_867:
        free(v1569);
        free(ptr);
        free(v1499);
        return v1263;
      }
    }
    v1569 = 0;
    v1568 = 0;
    v1570 = (int)v13;
    v16 = *v10;
    if (!*v10)
      goto LABEL_795;
    goto LABEL_606;
  }
  v17 = *(double *)(v2 + 48);
  v18 = *(_DWORD *)(v4 + 80);
  v1427 = vl_ps_debug_printout;
  v19 = *(float *)(v4 + 148);
  v20 = *(_DWORD *)(v2 + 8);
  v1561 = 0;
  v1559 = 0u;
  v1560 = 0u;
  v1557 = 0u;
  v1558 = 0u;
  v1556 = 0u;
  memset(v1555, 0, sizeof(v1555));
  *(_OWORD *)v1553 = 0u;
  v1554 = 0u;
  v21 = 4 * *(int *)(v3 + 4);
  v1551 = 0u;
  v1552 = 0u;
  v1424 = (char *)malloc_type_malloc(v21, 0x100004052888210uLL);
  hyp_refine_create((uint64_t)&v1551, 200);
  v22 = *v10;
  if (!*v10)
  {
    v1263 = 1;
    goto LABEL_870;
  }
  v1429 = v5;
  if (v18 >= (int)v22)
    v22 = v22;
  else
    v22 = v18;
  v1423 = v22;
  if ((int)v22 < 1)
    goto LABEL_796;
  v23 = 0;
  v24 = v17 * v19 / (double)v20;
  v1434 = (float)(v24 * 32.0) * 3.0;
  v25 = 0uLL;
  while (2)
  {
    v26 = v10[1];
    v1567 = v25;
    v27 = (float *)(v26 + 160 * v23);
    v1566 = v25;
    v1565 = v25;
    v28 = v23;
    vl_ps_get_inliers((uint64_t)v27, v6, v1429, v1424);
    if (v1427)
    {
      printf("Info : ");
      v29 = v26 + 160 * v28;
      printf("\n  ------- Testing hyp %d (hist count %.0f, inliers %d), x: %.2f, y: %.2f, z: %.2f, ang: %.2f --------  ", v28, *v27, *(_QWORD *)(v29 + 88), *(float *)(v29 + 8), *(float *)(v29 + 12), *(float *)(v29 + 16), *(float *)(v29 + 20) * 180.0 / 3.14159265);
      putchar(10);
    }
    v1428 = v28;
    v1432 = v26;
    v30 = *(_QWORD *)(v26 + 160 * v28 + 88);
    if (SLODWORD(v1555[0]) < (int)v30)
    {
      hyp_refine_free((uint64_t)&v1551);
      hyp_refine_create((uint64_t)&v1551, v30);
    }
    v31 = v30;
    DWORD2(v1554) = v30;
    bzero(v1553[1], (int)v30);
    if ((int)v30 >= 1)
    {
      v1539 = v1431[1];
      v1525 = v1431[4];
      v32 = *(_QWORD *)(v1433 + 8);
      v34 = (float *)*((_QWORD *)&v1551 + 1);
      v33 = (_DWORD *)v1551;
      v36 = (_DWORD *)*((_QWORD *)&v1552 + 1);
      v35 = (_DWORD *)v1552;
      v37 = v1553[0];
      v38 = (_DWORD *)v1554;
      v39 = (int *)(*(_QWORD *)(v26 + 160 * v1428 + 96) + 4);
      do
      {
        v40 = *(v39 - 1);
        v41 = 4 * *v39;
        v42 = *(_DWORD *)(*(_QWORD *)&v1539 + v41);
        v43 = atanf(*(float *)(*(_QWORD *)&v1525 + v41));
        v44 = (int *)(v32 + 12 * v40);
        v45 = *v44;
        v46 = v44[1];
        v47 = v44[2];
        *v33++ = v42;
        *v34++ = v43;
        *v35++ = v45;
        *v36++ = v46;
        *v37++ = v47;
        *v38++ = 1107296256;
        v39 += 2;
        --v31;
      }
      while (v31);
    }
    v48 = v1432;
    v49 = v1432 + 160 * v1428;
    v50 = *(_DWORD *)(v1429 + 144);
    v52 = *(_DWORD *)(v49 + 16);
    v51 = *(float *)(v49 + 20);
    *((_QWORD *)&v1555[2] + 1) = *(_QWORD *)(v49 + 8);
    LODWORD(v1555[3]) = v52;
    v53 = __sincosf_stret(v51);
    v54 = 0.0;
    DWORD1(v1555[0]) = LODWORD(v53.__cosval);
    *((float *)v1555 + 2) = -(float)(v53.__sinval - (float)((float)(v53.__cosval * 0.0) * 0.0));
    *((float *)v1555 + 3) = (float)(v53.__cosval * 0.0) + (float)(v53.__sinval * 0.0);
    *(float *)&v1555[1] = v53.__sinval;
    *((float *)&v1555[1] + 1) = v53.__cosval + (float)((float)(v53.__sinval * 0.0) * 0.0);
    *((float *)&v1555[1] + 2) = (float)(v53.__sinval * 0.0) - (float)(v53.__cosval * 0.0);
    *(_QWORD *)((char *)&v1555[1] + 12) = 0x80000000;
    DWORD1(v1555[2]) = 1065353216;
    v55.f32[1] = *((float *)&v1555[1] + 2);
    *(_OWORD *)((char *)&v1555[3] + 4) = *(_OWORD *)((char *)v1555 + 4);
    *(_OWORD *)((char *)&v1555[4] + 4) = *(_OWORD *)((char *)&v1555[1] + 4);
    *(_OWORD *)((char *)&v1555[5] + 4) = *(_OWORD *)((char *)&v1555[2] + 4);
    v1435 = v50;
    v56 = 0uLL;
    if (v50 < 1)
      goto LABEL_598;
    v1436 = 0;
    LODWORD(v57) = DWORD2(v1554);
    while (2)
    {
      HIDWORD(v1554) = 0;
      if ((int)v57 < 1)
      {
        v58 = 0;
        v72 = 0;
      }
      else
      {
        v58 = 0;
        v60 = (_DWORD *)*((_QWORD *)&v1551 + 1);
        v59 = (_DWORD *)v1551;
        v57 = v57;
        v61 = v1556;
        v63 = (_DWORD *)*((_QWORD *)&v1552 + 1);
        v62 = (_DWORD *)v1552;
        v64 = (unsigned __int8 *)v1553[1];
        v65 = v1553[0];
        v66 = v1557;
        v67 = *((_QWORD *)&v1555[6] + 1);
        v68 = (_DWORD *)v1554;
        v69 = *((_QWORD *)&v1559 + 1);
        do
        {
          if (!*v64++)
          {
            v71 = 4 * v58;
            *(_DWORD *)(v67 + v71) = *v59;
            *(_DWORD *)(v61 + v71) = *v60;
            *(_DWORD *)(*((_QWORD *)&v61 + 1) + v71) = *v62;
            *(_DWORD *)(v66 + v71) = *v63;
            *(_DWORD *)(*((_QWORD *)&v66 + 1) + v71) = *v65;
            *(_DWORD *)(v69 + v71) = *v68;
            HIDWORD(v1554) = ++v58;
          }
          ++v68;
          ++v65;
          ++v63;
          ++v62;
          ++v60;
          ++v59;
          --v57;
        }
        while (v57);
        v72 = 0;
      }
      while (1)
      {
        v74 = v58 <= 0 ? -(-v58 & 3) : v58 & 3;
        v75 = (v58 - v74);
        v1437 = v72;
        if ((int)v75 < 1)
        {
          LODWORD(v91) = 0;
          if (v58 <= 0)
            goto LABEL_42;
        }
        else
        {
          v76 = 0;
          v77 = 0;
          v78 = *((float *)v1555 + 1);
          v55.i64[0] = *((_QWORD *)&v1555[0] + 1);
          v79 = *((float *)v1555 + 3);
          v80 = *(float *)&v1555[1];
          v81 = *(float *)&v1555[2];
          v82 = *(_QWORD *)((char *)&v1555[1] + 4);
          v83 = *((float *)&v1555[1] + 3);
          v84 = *((float *)&v1555[2] + 1);
          v85 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)&v1555[2] + 8), 0);
          v86 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)&v1555[2] + 12), 0);
          v87 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v1555[3], 0);
          do
          {
            v88 = vsubq_f32(*(float32x4_t *)(*((_QWORD *)&v1556 + 1) + v76), v85);
            v89 = vsubq_f32(*(float32x4_t *)(v1557 + v76), v86);
            v90 = vsubq_f32(*(float32x4_t *)(*((_QWORD *)&v1557 + 1) + v76), v87);
            *(float32x4_t *)(v1558 + v76) = vaddq_f32(vaddq_f32(vmulq_n_f32(v88, v78), vmulq_n_f32(v89, v80)), vmulq_n_f32(v90, v83));
            *(float32x4_t *)(*((_QWORD *)&v1558 + 1) + v76) = vaddq_f32(vaddq_f32(vmulq_n_f32(v88, v55.f32[0]), vmulq_n_f32(v89, *(float *)&v82)), vmulq_n_f32(v90, v81));
            *(float32x4_t *)(v1559 + v76) = vaddq_f32(vaddq_f32(vmulq_n_f32(v88, v79), vmulq_n_f32(v89, *((float *)&v82 + 1))), vmulq_n_f32(v90, v84));
            v77 += 4;
            v76 += 16;
          }
          while (v77 < v75);
          LODWORD(v91) = v77;
          if ((int)v77 >= v58)
            goto LABEL_42;
        }
        v92 = *((_QWORD *)&v1556 + 1);
        v93 = v1557;
        v94 = v1558;
        v95 = v1559;
        v91 = (int)v91;
        v96 = v58;
        if ((unint64_t)(v58 - (uint64_t)(int)v91) < 0xC)
          goto LABEL_873;
        v1503 = v58 - (uint64_t)(int)v91;
        v166 = 4 * (int)v91;
        v167 = v1558 + v166;
        v168 = v1558 + 4 * v96;
        v169 = *((_QWORD *)&v1558 + 1) + v166;
        v170 = *((_QWORD *)&v1558 + 1) + 4 * v96;
        v171 = v1559 + v166;
        v172 = v1559 + 4 * v96;
        v173 = *((_QWORD *)&v1556 + 1) + v166;
        v174 = *((_QWORD *)&v1556 + 1) + 4 * v96;
        v175 = v1557 + v166;
        v176 = v1557 + 4 * v96;
        v177 = *((_QWORD *)&v1557 + 1) + v166;
        v178 = *((_QWORD *)&v1557 + 1) + 4 * v96;
        _CF = (uint64_t)v1558 + v166 >= v172 || v171 >= v168;
        v180 = !_CF;
        v1541 = v180;
        v181 = v167 >= v174 || v173 >= v168;
        v182 = !v181;
        v1527 = v182;
        v183 = v167 >= v176 || v175 >= v168;
        v184 = !v183;
        v1516 = v184;
        v185 = v167 >= v178 || v177 >= v168;
        v186 = !v185;
        v187 = v167 >= (unint64_t)&v1555[3] + 4 || (unint64_t)v1555 + 4 >= v168;
        v188 = !v187;
        v189 = v169 >= v172 || v171 >= v170;
        v190 = !v189;
        v191 = v169 >= v174 || v173 >= v170;
        v192 = !v191;
        v193 = v169 >= v176 || v175 >= v170;
        v194 = !v193;
        v195 = v169 >= v178 || v177 >= v170;
        v196 = !v195;
        v197 = v169 >= (unint64_t)&v1555[3] + 4 || (unint64_t)v1555 + 4 >= v170;
        v198 = !v197;
        v199 = v171 >= v174 || v173 >= v172;
        v200 = !v199;
        v201 = v171 >= v176 || v175 >= v172;
        v202 = !v201;
        v203 = v171 >= v178 || v177 >= v172;
        v204 = !v203;
        v205 = v171 >= (unint64_t)&v1555[3] + 4 || (unint64_t)v1555 + 4 >= v172;
        v206 = !v205;
        if (v169 < v168 && v167 < v170)
          goto LABEL_873;
        if (v1541)
          goto LABEL_873;
        if (v1527)
          goto LABEL_873;
        if (v1516)
          goto LABEL_873;
        if (v186)
          goto LABEL_873;
        if (v188)
          goto LABEL_873;
        if (v190)
          goto LABEL_873;
        if (v192)
          goto LABEL_873;
        if (v194)
          goto LABEL_873;
        if (v196)
          goto LABEL_873;
        if (v198)
          goto LABEL_873;
        if (v200)
          goto LABEL_873;
        if (v202)
          goto LABEL_873;
        if (v204)
          goto LABEL_873;
        if (v206)
          goto LABEL_873;
        v91 = (v1503 & 0xFFFFFFFFFFFFFFFCLL) + (int)v91;
        v208 = (float32x4_t *)(*((_QWORD *)&v1556 + 1) + v166);
        v209 = (float32x4_t *)(v1557 + v166);
        v210 = (float32x4_t *)(*((_QWORD *)&v1557 + 1) + v166);
        v211 = (float32x4_t *)(v1558 + v166);
        v212 = (float32x4_t *)(*((_QWORD *)&v1558 + 1) + v166);
        v213 = (float32x4_t *)(v1559 + v166);
        v214 = v1503 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v215 = *v208++;
          v216 = v215;
          v217 = *v209++;
          v218 = v217;
          v219 = *v210++;
          v220 = vsubq_f32(v216, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)&v1555[2] + 8), 0));
          v221 = vsubq_f32(v218, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)&v1555[2] + 12), 0));
          v222 = vsubq_f32(v219, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v1555[3], 0));
          v223 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v221, *(float *)&v1555[1]), v220, *((float *)v1555 + 1)), v222, *((float *)&v1555[1] + 3));
          v224 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v221, *((float *)&v1555[1] + 1)), v220, *((float *)v1555 + 2)), v222, *(float *)&v1555[2]);
          v225 = vmlaq_n_f32(vmulq_n_f32(v221, *((float *)&v1555[1] + 2)), v220, *((float *)v1555 + 3));
          v220.i32[0] = DWORD1(v1555[2]);
          *v211++ = v223;
          v55 = vmlaq_n_f32(v225, v222, v220.f32[0]);
          *v212++ = v224;
          *v213++ = v55;
          v214 -= 4;
        }
        while (v214);
        if (v1503 != (v1503 & 0xFFFFFFFFFFFFFFFCLL))
        {
LABEL_873:
          do
          {
            v97 = 4 * v91;
            v98 = *(float *)(v92 + 4 * v91) - *((float *)&v1555[2] + 2);
            v99 = *(float *)(v93 + 4 * v91) - *((float *)&v1555[2] + 3);
            v100 = *(float *)(*((_QWORD *)&v93 + 1) + 4 * v91) - *(float *)&v1555[3];
            v101 = (float)((float)(*(float *)&v1555[1] * v99) + (float)(*((float *)v1555 + 1) * v98))
                 + (float)(*((float *)&v1555[1] + 3) * v100);
            v102 = (float)((float)(v99 * *((float *)&v1555[1] + 1)) + (float)(*((float *)v1555 + 2) * v98))
                 + (float)(*(float *)&v1555[2] * v100);
            v103 = (float)((float)(v99 * *((float *)&v1555[1] + 2)) + (float)(*((float *)v1555 + 3) * v98))
                 + (float)(*((float *)&v1555[2] + 1) * v100);
            *(float *)(v94 + v97) = v101;
            *(float *)(*((_QWORD *)&v94 + 1) + v97) = v102;
            *(float *)(v95 + v97) = v103;
            ++v91;
          }
          while (v96 != v91);
        }
LABEL_42:
        v104 = SHIDWORD(v1554);
        v105 = *((_QWORD *)&v1559 + 1);
        v106 = v1560;
        v107 = SHIDWORD(v1554) <= 0 ? -(-HIDWORD(v1554) & 3) : BYTE12(v1554) & 3;
        v108 = (HIDWORD(v1554) - v107);
        v109 = (float32x4_t)vdupq_n_s32(0xBD3E7316);
        v110 = (float32x4_t)vdupq_n_s32(0x3E232344u);
        v111 = (float32x4_t)vdupq_n_s32(0xBEA7BE2C);
        v112 = (float32x4_t)vdupq_n_s32(0x3FC90FDBu);
        v113 = (float32x4_t)vdupq_n_s32(0x40490FDBu);
        v114 = (float32x4_t)vdupq_n_s32(0x3E4CCCCDu);
        v115 = (float32x4_t)vdupq_n_s32(0xBEAAAAAB);
        v116 = (float32x4_t)vdupq_n_s32(0x3E22F983u);
        __asm { FMOV            V29.4S, #1.0 }
        v120 = (float32x4_t)vdupq_n_s32(0xC0490FDB);
        v121 = (float32x4_t)vdupq_n_s32(0xC0C90FDB);
        if ((int)v108 < 1)
        {
          LODWORD(v123) = 0;
          v124 = 0uLL;
        }
        else
        {
          v122 = 0;
          v123 = 0;
          v124 = 0uLL;
          do
          {
            v138 = *(float32x4_t *)(*((_QWORD *)&v1555[6] + 1) + v122);
            v139 = *(float32x4_t *)(v1556 + v122);
            v140 = *(float32x4_t *)(v1558 + v122);
            v141 = *(float32x4_t *)(*((_QWORD *)&v1558 + 1) + v122);
            v142 = *(float32x4_t *)(v1559 + v122);
            v143 = *(float32x4_t *)(v105 + v122);
            v144 = vsqrtq_f32(vaddq_f32(vmulq_f32(v140, v140), vmulq_f32(v141, v141)));
            if (v106)
              *(float32x4_t *)(v106 + v122) = v144;
            v125 = vabsq_f32(v140);
            v126 = vabsq_f32(v141);
            v127 = vdivq_f32(vminq_f32(v125, v126), vmaxq_f32(v125, v126));
            v128 = vmulq_f32(v127, v127);
            v129 = vaddq_f32(v127, vmulq_f32(vmulq_f32(v127, v128), vaddq_f32(vmulq_f32(v128, vaddq_f32(vmulq_f32(v128, v109), v110)), v111)));
            v130 = (float32x4_t)vbslq_s8((int8x16_t)vcagtq_f32(v141, v140), (int8x16_t)vsubq_f32(v112, v129), (int8x16_t)vaddq_f32(v129, v56));
            v131 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v140), (int8x16_t)vsubq_f32(v113, v130), (int8x16_t)v130);
            v132 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v141), (int8x16_t)vsubq_f32(v56, v131), (int8x16_t)v131);
            v133 = vdivq_f32(v142, v144);
            v134 = vmulq_f32(v133, v133);
            v135 = vsubq_f32(v138, v132);
            v136 = vmulq_f32(v143, vaddq_f32(v135, vmulq_f32(vcvtq_f32_s32(vaddq_s32(vcvtq_s32_f32(vmulq_f32(vaddq_f32(v135, v113), v116)), vcgtq_f32(v120, v135))), v121)));
            v137 = vmulq_f32(v143, vsubq_f32(v139, vmulq_f32(v133, vaddq_f32(vaddq_f32(vmulq_f32(vmulq_f32(v134, v134), v114), vmulq_f32(v134, v115)), _Q29))));
            *(float32x4_t *)(*((_QWORD *)&v1560 + 1) + v122) = v136;
            *(float32x4_t *)&v1561[v122 / 4] = v137;
            v55 = vaddq_f32(vmulq_f32(v137, v137), vmulq_f32(v136, v136));
            v124 = vaddq_f32(v124, v55);
            v123 += 4;
            v122 += 16;
          }
          while (v123 < v108);
        }
        v145 = vpaddq_f32(v124, v124);
        v146 = vpaddq_f32(v145, v145).f32[0] + 0.0;
        v1448 = v110;
        v1449 = v109;
        v1446 = v112;
        v1447 = v111;
        v1444 = v114;
        v1445 = v113;
        v1442 = v116;
        v1443 = v115;
        v1440 = v120;
        v1441 = _Q29;
        v1439 = v121;
        if ((int)v123 < (int)v104)
        {
          v147 = *((_QWORD *)&v1555[6] + 1);
          v148 = v1556;
          v150 = *((_QWORD *)&v1558 + 1);
          v149 = v1558;
          v151 = v1559;
          v152 = *((_QWORD *)&v1560 + 1);
          v153 = (int)v123;
          v154 = v1561;
          v1540 = v104;
          v1526 = *((_QWORD *)&v1555[6] + 1);
          v1515 = v1556;
          v155 = v1558;
          v1501 = v1559;
          if (v106)
          {
            do
            {
              v156 = *(float *)(v147 + 4 * v153);
              v157 = *(float *)(v148 + 4 * v153);
              v158 = *(float *)(v149 + 4 * v153);
              v159 = *(float *)(v150 + 4 * v153);
              v160 = *(float *)(v151 + 4 * v153);
              v161 = atan2f(v159, v158);
              v162 = sqrtf((float)(v159 * v159) + (float)(v158 * v158));
              *(float *)(v106 + 4 * v153) = v162;
              v163 = atanf(v160 / v162);
              v151 = v1501;
              v150 = *((_QWORD *)&v155 + 1);
              v149 = v155;
              v148 = v1515;
              LODWORD(v104) = v1540;
              v147 = v1526;
              v164 = *(float *)(v105 + 4 * v153);
              *(double *)v55.i64 = ((float)(v156 - v161)
                                  + 3.14159265
                                  + (double)((int)(((float)(v156 - v161) + 3.14159265) * 0.159154943)
                                           - ((float)(v156 - v161) + 3.14159265 < 0.0))
                                  * -6.28318531
                                  + -3.14159265)
                                 * v164;
              v55.f32[0] = *(double *)v55.i64;
              v165 = (float)(v157 - v163) * v164;
              *(_DWORD *)(v152 + 4 * v153) = v55.i32[0];
              v154[v153] = v165;
              v146 = v146 + (float)((float)(v165 * v165) + (float)(v55.f32[0] * v55.f32[0]));
              ++v153;
            }
            while (v1540 != v153);
          }
          else
          {
            do
            {
              v226 = *(float *)(v147 + 4 * v153);
              v227 = *(float *)(v148 + 4 * v153);
              v228 = *(float *)(v149 + 4 * v153);
              v229 = *(float *)(v150 + 4 * v153);
              v230 = *(float *)(v151 + 4 * v153);
              v231 = atan2f(v229, v228);
              v232 = atanf(v230 / sqrtf((float)(v229 * v229) + (float)(v228 * v228)));
              v151 = v1501;
              v150 = *((_QWORD *)&v155 + 1);
              v149 = v155;
              v148 = v1515;
              LODWORD(v104) = v1540;
              v147 = v1526;
              v233 = *(float *)(v105 + 4 * v153);
              *(double *)v55.i64 = ((float)(v226 - v231)
                                  + 3.14159265
                                  + (double)((int)(((float)(v226 - v231) + 3.14159265) * 0.159154943)
                                           - ((float)(v226 - v231) + 3.14159265 < 0.0))
                                  * -6.28318531
                                  + -3.14159265)
                                 * v233;
              v55.f32[0] = *(double *)v55.i64;
              v234 = (float)(v227 - v232) * v233;
              *(_DWORD *)(v152 + 4 * v153) = v55.i32[0];
              v154[v153] = v234;
              v146 = v146 + (float)((float)(v234 * v234) + (float)(v55.f32[0] * v55.f32[0]));
              ++v153;
            }
            while (v1540 != v153);
          }
        }
        v1438 = v146;
        v1584 = 0;
        v1583 = 0u;
        v1582 = 0u;
        v1581 = 0u;
        v1580 = 0u;
        v1579 = 0u;
        v1578 = 0u;
        *(_OWORD *)v1577 = 0u;
        *(_OWORD *)v1576 = 0u;
        v1575 = 0u;
        *(_OWORD *)v1574 = 0u;
        v235 = HIDWORD(v1554);
        if (SHIDWORD(v1554) >= 1)
        {
          v1458 = -*((float *)v1555 + 1);
          v1457 = -*((float *)v1555 + 2);
          v1456 = -*((float *)v1555 + 3);
          v1455 = -*(float *)&v1555[1];
          v1454 = -*((float *)&v1555[1] + 1);
          v1453 = -*((float *)&v1555[1] + 2);
          v1452 = -*((float *)&v1555[1] + 3);
          v1451 = -*(float *)&v1555[2];
          v1450 = -*((float *)&v1555[2] + 1);
          *(float *)&v236 = 0.0;
          *(float *)&v237 = 0.0;
          v1517 = 0.0;
          v1512 = 0.0;
          v238 = 0.0;
          *(float *)&v239 = 0.0;
          v240 = 0.0;
          v242 = (float *)*((_QWORD *)&v1559 + 1);
          v241 = (float *)v1559;
          v243 = HIDWORD(v1554);
          v244 = 0.0;
          v245 = 0.0;
          v246 = v1561;
          v247 = 0.0;
          v248 = 0.0;
          v249 = 0.0;
          v251 = (float *)*((_QWORD *)&v1558 + 1);
          v250 = (float *)v1558;
          v252 = 0.0;
          v253 = 0.0;
          v254 = 0.0;
          v255 = (float *)*((_QWORD *)&v1560 + 1);
          v256 = (float *)v1560;
          v257 = 0.0;
          v258 = 0.0;
          v1504 = 0.0;
          v259 = 0.0;
          v1495 = 0.0;
          v1502 = 0.0;
          v1490 = 0.0;
          v1500 = 0.0;
          v1497 = 0.0;
          v1489 = 0.0;
          v1488 = 0.0;
          v1487 = 0.0;
          v1486 = 0.0;
          v1485 = 0.0;
          v1496 = 0.0;
          v1484 = 0;
          v1483 = 0;
          v1482 = 0.0;
          v1481 = 0.0;
          v1480 = 0.0;
          v1479 = 0.0;
          v1478 = 0;
          v1477 = 0.0;
          v1476 = 0.0;
          do
          {
            v1543 = *(float *)&v236;
            v1529 = *(float *)&v237;
            v1475 = v240;
            v1474 = v244;
            v1473 = v245;
            v1472 = v247;
            v1471 = v248;
            v1470 = v249;
            v1469 = v252;
            v1468 = v253;
            v1467 = v254;
            v1466 = v257;
            v1465 = v258;
            v1464 = v259;
            if (*((_QWORD *)&v1559 + 1))
              v260 = *v242;
            else
              v260 = 1.0;
            v261 = *(float *)&v239;
            v262 = *v256;
            v263 = (float)-(float)(v260 * *v251) / (float)(v262 * v262);
            v264 = (float)(v262 * v262) + (float)(*v241 * *v241);
            v265 = -(float)(v260 * (float)(*v241 / v264));
            v266 = (float)(*v250 / *v256) * v265;
            v267 = (float)(*v251 / *v256) * v265;
            v268 = (float)(*v250 * v260) / (float)(v262 * v262);
            v269 = (float)(*v256 * v260) / v264;
            v270 = (float)((float)((float)(v263 * v1458) + 0.0) + (float)(v268 * v1457)) + (float)(v1456 * 0.0);
            v271 = (float)((float)((float)(v266 * v1458) + 0.0) + (float)(v267 * v1457)) + (float)(v269 * v1456);
            v272 = (float)((float)((float)(v263 * v1455) + 0.0) + (float)(v268 * v1454)) + (float)(v1453 * 0.0);
            v273 = (float)((float)((float)(v266 * v1455) + 0.0) + (float)(v267 * v1454)) + (float)(v269 * v1453);
            v274 = (float)((float)((float)(v263 * v1452) + 0.0) + (float)(v268 * v1451)) + (float)(v1450 * 0.0);
            v275 = (float)((float)((float)(v266 * v1452) + 0.0) + (float)(v267 * v1451)) + (float)(v269 * v1450);
            v276 = (float)((float)((float)(v263 * *v251) + 0.0) - (float)(v268 * *v250)) + 0.0;
            v277 = (float)((float)((float)(v266 * *v251) + 0.0) - (float)(v267 * *v250)) + (float)(v269 * 0.0);
            v278 = (float)((float)(0.0 - (float)(v263 * *v241)) + (float)(v268 * 0.0)) + (float)(*v250 * 0.0);
            v279 = (float)((float)(0.0 - (float)(v266 * *v241)) + (float)(v267 * 0.0)) + (float)(v269 * *v250);
            v280 = (float)((float)(v266 * 0.0) + 0.0) + (float)(v267 * *v241);
            v281 = (float)((float)((float)(v263 * 0.0) + 0.0) + (float)(v268 * *v241)) - (float)(*v251 * 0.0);
            v282 = v280 - (float)(v269 * *v251);
            v283 = (float)((float)(v272 * v270) + 0.0) + (float)(v273 * v271);
            v284 = (float)((float)(v274 * v270) + 0.0) + (float)(v275 * v271);
            v1463 = (float)((float)(v276 * v270) + 0.0) + (float)(v277 * v271);
            v285 = (float)((float)(v278 * v270) + 0.0) + (float)(v279 * v271);
            v286 = (float)((float)(v281 * v270) + 0.0) + (float)(v282 * v271);
            v287 = (float)((float)(v272 * v272) + 0.0) + (float)(v273 * v273);
            v288 = (float)((float)(v274 * v272) + 0.0) + (float)(v275 * v273);
            v289 = (float)((float)(v276 * v272) + 0.0) + (float)(v277 * v273);
            v290 = (float)((float)(v278 * v272) + 0.0) + (float)(v279 * v273);
            v291 = (float)((float)(v281 * v272) + 0.0) + (float)(v282 * v273);
            v1462 = (float)((float)(v274 * v274) + 0.0) + (float)(v275 * v275);
            *(float *)&v1461 = (float)(v261 + (float)(v270 * *v255)) + (float)(v271 * *v246);
            v292 = (float)((float)(v276 * v274) + 0.0) + (float)(v277 * v275);
            v293 = (float)((float)(v278 * v274) + 0.0) + (float)(v279 * v275);
            *(float *)&v1460 = (float)(v238 + (float)(v272 * *v255)) + (float)(v273 * *v246);
            v294 = (float)((float)(v281 * v274) + 0.0) + (float)(v282 * v275);
            v295 = (float)((float)(v276 * v276) + 0.0) + (float)(v277 * v277);
            v1512 = (float)(v1512 + (float)(v274 * *v255)) + (float)(v275 * *v246);
            v296 = (float)((float)(v278 * v276) + 0.0) + (float)(v279 * v277);
            v297 = v1517 + (float)(v276 * *v255);
            v298 = (float)((float)(v281 * v276) + 0.0) + (float)(v282 * v277);
            v1517 = v297 + (float)(v277 * *v246);
            v1459 = (float)((float)(v281 * v278) + 0.0) + (float)(v282 * v279);
            *(float *)&v1528 = (float)(v1529 + (float)(v278 * *v255)) + (float)(v279 * *v246);
            *(float *)&v1542 = (float)(v1543 + (float)(v281 * *v255)) + (float)(v282 * *v246);
            *(float *)&v299 = v1477 + v283;
            *(float *)&v300 = v1481 + v283;
            v1496 = v1496 + v284;
            v1497 = v1497 + v1463;
            v1500 = v1500 + v289;
            *(float *)&v301 = v1487 + v292;
            *(float *)&v302 = v1490 + v292;
            v1502 = v1502 + v295;
            v1504 = v1504 + v285;
            v303 = v1495 + v296;
            v304 = v1467 + v296;
            v305 = v1471 + v291;
            v1476 = v1476 + (float)((float)((float)(v270 * v270) + 0.0) + (float)(v271 * v271));
            v1574[0] = (void *)__PAIR64__(v299, LODWORD(v1476));
            v1477 = *(float *)&v299;
            *(float *)&v1478 = *(float *)&v1478 + v284;
            *((float *)&v1478 + 1) = *((float *)&v1478 + 1) + v1463;
            v1574[1] = v1478;
            v1479 = v1479 + v285;
            *(float *)&v1575 = v1479;
            v1480 = v1480 + v286;
            *(_QWORD *)((char *)&v1575 + 4) = __PAIR64__(v300, LODWORD(v1480));
            v1481 = *(float *)&v300;
            v1482 = v1482 + v287;
            *((float *)&v1575 + 3) = v1482;
            *(float *)&v1483 = *(float *)&v1483 + v288;
            *((float *)&v1483 + 1) = *((float *)&v1483 + 1) + v289;
            v1576[0] = v1483;
            *(float *)&v1484 = *(float *)&v1484 + v290;
            *((float *)&v1484 + 1) = *((float *)&v1484 + 1) + v291;
            v1576[1] = v1484;
            *(float *)v1577 = v1496;
            v1485 = v1485 + v288;
            *((float *)v1577 + 1) = v1485;
            v1486 = v1486 + v1462;
            v1577[1] = (void *)__PAIR64__(v301, LODWORD(v1486));
            v1487 = *(float *)&v301;
            v1488 = v1488 + v293;
            *(float *)&v1578 = v1488;
            v1489 = v1489 + v294;
            *(_QWORD *)((char *)&v1578 + 4) = __PAIR64__(LODWORD(v1497), LODWORD(v1489));
            *((float *)&v1578 + 3) = v1500;
            v1490 = *(float *)&v302;
            *(_QWORD *)&v1579 = __PAIR64__(LODWORD(v1502), v302);
            v1495 = v303;
            *((float *)&v1579 + 2) = v303;
            v259 = v1464 + v298;
            *((float *)&v1579 + 3) = v1464 + v298;
            *(float *)&v1580 = v1504;
            v258 = v1465 + v290;
            *((float *)&v1580 + 1) = v1465 + v290;
            v257 = v1466 + v293;
            *((float *)&v1580 + 2) = v1466 + v293;
            v254 = v304;
            *((float *)&v1580 + 3) = v304;
            v253 = v1468 + (float)((float)((float)(v278 * v278) + 0.0) + (float)(v279 * v279));
            *(float *)&v1581 = v253;
            v252 = v252 + v1459;
            *((float *)&v1581 + 1) = v1469 + v1459;
            v249 = v249 + v286;
            *((float *)&v1581 + 2) = v1470 + v286;
            v248 = v305;
            *((float *)&v1581 + 3) = v305;
            v247 = v247 + v294;
            *(float *)&v1582 = v1472 + v294;
            v245 = v1473 + v298;
            *((float *)&v1582 + 1) = v1473 + v298;
            v244 = v1474 + v1459;
            *((float *)&v1582 + 2) = v1474 + v1459;
            v240 = v1475 + (float)((float)((float)(v281 * v281) + 0.0) + (float)(v282 * v282));
            *((float *)&v1582 + 3) = v240;
            v239 = v1461;
            *(_QWORD *)&v1583 = __PAIR64__(v1460, v1461);
            v238 = *(float *)&v1460;
            *((_QWORD *)&v1583 + 1) = __PAIR64__(LODWORD(v1517), LODWORD(v1512));
            ++v242;
            ++v256;
            ++v241;
            ++v251;
            v237 = v1528;
            v1584 = __PAIR64__(v1542, v1528);
            v236 = v1542;
            ++v250;
            ++v246;
            ++v255;
            --v243;
          }
          while (v243);
        }
        v306 = 0;
        v307 = v1438 / (float)(int)v104;
        v308 = v1574;
        v309 = 2;
        v310 = &v1593;
        do
        {
          v311 = *(float *)v308;
          *v310 = *(float *)v308;
          if (v306)
          {
            v312 = &v310[-v306];
            v313 = -(uint64_t)v306;
            do
            {
              v311 = v311 - (float)(v310[v313] * v310[v313]);
              *v310 = v311;
              _CF = __CFADD__(v313++, 1);
            }
            while (!_CF);
            *v310 = sqrtf(v311);
            v314 = v306 + 1;
            v315 = (float *)v308 + 1;
            if (v306 <= 4)
            {
              v316 = &v310[v306 + 1];
              v317 = v309;
              do
              {
                v318 = *v315;
                *v316 = *v315;
                v319 = &v316[-v306];
                v320 = v318 - (float)(*v319 * *v312);
                *v316 = v320;
                if (v306 != 1)
                {
                  v320 = v320 - (float)(v319[1] * v312[1]);
                  *v316 = v320;
                  if (v306 != 2)
                  {
                    v320 = v320 - (float)(v319[2] * v312[2]);
                    *v316 = v320;
                    if (v306 != 3)
                    {
                      v320 = v320 - (float)(v319[3] * v312[3]);
                      *v316 = v320;
                    }
                  }
                }
                *v316 = v320 / *v310;
                v316 += v317;
                ++v315;
                ++v317;
              }
              while (v317 != 7);
            }
          }
          else
          {
            *v310 = sqrtf(v311);
            v321 = v310 + 1;
            v315 = (float *)v308 + 1;
            v322 = v309;
            do
            {
              v323 = *v315++;
              *v321 = v323;
              *v321 = v323 / *v310;
              v321 += v322++;
            }
            while (v322 != 7);
            v314 = 1;
          }
          v310 += v306 + 2;
          v308 = (void **)&v315[v314];
          ++v309;
          v306 = v314;
        }
        while (v314 != 6);
        v1587 = *(float *)&v1583 / v1593;
        v1588 = (float)(*((float *)&v1583 + 1) - (float)(v1594 * (float)(*(float *)&v1583 / v1593))) / v1595;
        v324 = (float)((float)(*((float *)&v1583 + 2) - (float)(v1596 * (float)(*(float *)&v1583 / v1593)))
                     - (float)(v1597 * v1588))
             / v1598;
        v1589 = v324;
        v1590 = (float)((float)((float)(*((float *)&v1583 + 3) - (float)(v1599 * (float)(*(float *)&v1583 / v1593)))
                              - (float)(v1600 * v1588))
                      - (float)(v1601 * v324))
              / v1602;
        v325 = (float)((float)((float)((float)(*(float *)&v1584 - (float)(v1603 * (float)(*(float *)&v1583 / v1593)))
                                     - (float)(v1604 * v1588))
                             - (float)(v1605 * v324))
                     - (float)(v1606 * v1590))
             / v1607;
        v1591 = v325;
        v1592 = (float)((float)((float)((float)((float)(*((float *)&v1584 + 1)
                                                      - (float)(v1608 * (float)(*(float *)&v1583 / v1593)))
                                              - (float)(v1609 * v1588))
                                      - (float)(v1610 * v324))
                              - (float)(v1611 * v1590))
                      - (float)(v1612 * v325))
              / v1613;
        v326 = v1592 / v1613;
        v327 = (float)(v325 - (float)(v1612 * (float)(v1592 / v1613))) / v1607;
        v1586.f32[1] = v1592 / v1613;
        v1586.f32[0] = v327;
        v328 = (float)((float)(v1590 - (float)(v1606 * v327)) - (float)(v1611 * (float)(v1592 / v1613))) / v1602;
        v1585.f32[3] = v328;
        v1585.f32[2] = (float)((float)((float)(v324 - (float)(v1601 * v328)) - (float)(v1605 * v327))
                             - (float)(v1610 * (float)(v1592 / v1613)))
                     / v1598;
        v329 = (float)((float)((float)((float)(v1588 - (float)(v1597 * v1585.f32[2])) - (float)(v1600 * v328))
                             - (float)(v1604 * v327))
                     - (float)(v1609 * (float)(v1592 / v1613)))
             / v1595;
        v1585.f32[1] = v329;
        v1585.f32[0] = (float)((float)((float)((float)((float)((float)(*(float *)&v1583 / v1593) - (float)(v1594 * v329))
                                                     - (float)(v1596 * v1585.f32[2]))
                                             - (float)(v1599 * v328))
                                     - (float)(v1603 * v327))
                             - (float)(v1608 * (float)(v1592 / v1613)))
                     / v1593;
        v330.i32[1] = DWORD2(v1555[0]);
        *(_OWORD *)((char *)&v1555[4] + 4) = *(_OWORD *)((char *)&v1555[1] + 4);
        *(_OWORD *)((char *)&v1555[5] + 4) = *(_OWORD *)((char *)&v1555[2] + 4);
        *(_OWORD *)((char *)&v1555[3] + 4) = *(_OWORD *)((char *)v1555 + 4);
        v55.f32[0] = *((float *)&v1555[2] + 3) + v329;
        *((float *)&v1555[2] + 2) = *((float *)&v1555[2] + 2) + v1585.f32[0];
        v330.i32[0] = SDWORD2(v1555[2]);
        v1544 = *(int32x2_t *)v55.f32;
        *((float *)&v1555[2] + 3) = *((float *)&v1555[2] + 3) + v329;
        v55.f32[0] = v1585.f32[2] + *(float *)&v1555[3];
        v1518 = v330;
        v1530 = *(int32x2_t *)v55.f32;
        *(float *)&v1555[3] = v1585.f32[2] + *(float *)&v1555[3];
        v331 = __sincosf_stret(v328);
        v332 = __sincosf_stret(v327);
        cosval = v332.__cosval;
        v334 = __sincosf_stret(v326);
        v335 = (float)((float)(v332.__sinval * v331.__cosval) * v334.__sinval) - (float)(v331.__sinval * v334.__cosval);
        v336 = (float)(v334.__sinval * v331.__sinval) + (float)((float)(v332.__sinval * v331.__cosval) * v334.__cosval);
        v337 = (float)(v334.__cosval * v331.__cosval) + (float)((float)(v332.__sinval * v331.__sinval) * v334.__sinval);
        v338 = (float)((float)(v332.__sinval * v331.__sinval) * v334.__cosval) - (float)(v331.__cosval * v334.__sinval);
        v339 = *(_QWORD *)((char *)v1555 + 4);
        v340 = *(float *)&v1555[1];
        v341 = *((float *)&v1555[1] + 3);
        v342 = *(float *)&v1555[2];
        v343 = (float)((float)((float)(*((float *)v1555 + 1) * (float)(cosval * v331.__cosval)) + 0.0)
                     + (float)(*((float *)v1555 + 2) * (float)(cosval * v331.__sinval)))
             - (float)(*((float *)v1555 + 3) * v332.__sinval);
        v55.f32[0] = (float)((float)((float)(*((float *)v1555 + 1) * v335) + 0.0) + (float)(*((float *)v1555 + 2) * v337))
                   + (float)(*((float *)v1555 + 3) * (float)(v334.__sinval * v332.__cosval));
        *((float *)v1555 + 1) = v343;
        DWORD2(v1555[0]) = v55.i32[0];
        v344 = (float)((float)((float)(*(float *)&v339 * v336) + 0.0) + (float)(*((float *)&v339 + 1) * v338))
             + (float)(*((float *)v1555 + 3) * (float)(v334.__cosval * v332.__cosval));
        v345 = (float)((float)((float)(*(float *)&v1555[1] * (float)(cosval * v331.__cosval)) + 0.0)
                     + (float)(*((float *)&v1555[1] + 1) * (float)(cosval * v331.__sinval)))
             - (float)(*((float *)&v1555[1] + 2) * v332.__sinval);
        *((float *)v1555 + 3) = v344;
        *(float *)&v1555[1] = v345;
        v346 = (float)((float)((float)(v340 * v335) + 0.0) + (float)(*((float *)&v1555[1] + 1) * v337))
             + (float)(*((float *)&v1555[1] + 2) * (float)(v334.__sinval * v332.__cosval));
        v347 = (float)((float)((float)(v340 * v336) + 0.0) + (float)(*((float *)&v1555[1] + 1) * v338))
             + (float)(*((float *)&v1555[1] + 2) * (float)(v334.__cosval * v332.__cosval));
        *(_QWORD *)((char *)&v1555[1] + 4) = __PAIR64__(LODWORD(v347), LODWORD(v346));
        v348 = (float)((float)((float)(*((float *)&v1555[1] + 3) * (float)(cosval * v331.__cosval)) + 0.0)
                     + (float)(*(float *)&v1555[2] * (float)(cosval * v331.__sinval)))
             - (float)(*((float *)&v1555[2] + 1) * v332.__sinval);
        v349 = (float)((float)((float)(*((float *)&v1555[1] + 3) * v335) + 0.0) + (float)(*(float *)&v1555[2] * v337))
             + (float)(*((float *)&v1555[2] + 1) * (float)(v334.__sinval * v332.__cosval));
        *((float *)&v1555[1] + 3) = v348;
        *(float *)&v1555[2] = v349;
        v350 = (float)((float)((float)(v341 * v336) + 0.0) + (float)(v342 * v338))
             + (float)(*((float *)&v1555[2] + 1) * (float)(v334.__cosval * v332.__cosval));
        *((float *)&v1555[2] + 1) = v350;
        v351 = v235 <= 0 ? -(-v235 & 3) : v235 & 3;
        v352 = (v235 - v351);
        if ((int)v352 < 1)
        {
          LODWORD(v372) = 0;
          v373 = 0uLL;
          v359 = v1448;
          v358 = v1449;
          v361 = v1446;
          v360 = v1447;
          v363 = v1444;
          v362 = v1445;
          v365 = v1442;
          v364 = v1443;
          v367 = v1440;
          v366 = v1441;
          v368 = v1439;
          if (v235 <= 0)
            goto LABEL_197;
        }
        else
        {
          v353 = 0;
          v354 = 0;
          v355 = (float32x4_t)vdupq_lane_s32(v1518, 0);
          v356 = (float32x4_t)vdupq_lane_s32(v1544, 0);
          v357 = (float32x4_t)vdupq_lane_s32(v1530, 0);
          v359 = v1448;
          v358 = v1449;
          v361 = v1446;
          v360 = v1447;
          v363 = v1444;
          v362 = v1445;
          v365 = v1442;
          v364 = v1443;
          v367 = v1440;
          v366 = v1441;
          v368 = v1439;
          do
          {
            v369 = vsubq_f32(*(float32x4_t *)(*((_QWORD *)&v1556 + 1) + v353), v355);
            v370 = vsubq_f32(*(float32x4_t *)(v1557 + v353), v356);
            v371 = vsubq_f32(*(float32x4_t *)(*((_QWORD *)&v1557 + 1) + v353), v357);
            *(float32x4_t *)(v1558 + v353) = vaddq_f32(vaddq_f32(vmulq_n_f32(v369, v343), vmulq_n_f32(v370, v345)), vmulq_n_f32(v371, v348));
            *(float32x4_t *)(*((_QWORD *)&v1558 + 1) + v353) = vaddq_f32(vaddq_f32(vmulq_n_f32(v369, v55.f32[0]), vmulq_n_f32(v370, v346)), vmulq_n_f32(v371, v349));
            *(float32x4_t *)(v1559 + v353) = vaddq_f32(vaddq_f32(vmulq_n_f32(v369, v344), vmulq_n_f32(v370, v347)), vmulq_n_f32(v371, v350));
            v354 += 4;
            v353 += 16;
          }
          while (v354 < v352);
          LODWORD(v372) = v354;
          v373 = 0uLL;
          if ((int)v354 >= v235)
            goto LABEL_197;
        }
        v374 = *((_QWORD *)&v1556 + 1);
        v375 = v1557;
        v376 = v1558;
        v377 = v1559;
        v372 = (int)v372;
        v378 = v235;
        if ((unint64_t)(v235 - (uint64_t)(int)v372) < 0xC)
          goto LABEL_874;
        v1506 = v235 - (uint64_t)(int)v372;
        v477 = 4 * (int)v372;
        v478 = v1558 + v477;
        v479 = v1558 + 4 * v235;
        v480 = *((_QWORD *)&v1558 + 1) + v477;
        v481 = *((_QWORD *)&v1558 + 1) + 4 * v235;
        v482 = v1559 + v477;
        v483 = v1559 + 4 * v235;
        v484 = *((_QWORD *)&v1556 + 1) + v477;
        v485 = *((_QWORD *)&v1556 + 1) + 4 * v235;
        v486 = v1557 + v477;
        v487 = v1557 + 4 * v235;
        v488 = *((_QWORD *)&v1557 + 1) + v477;
        v489 = *((_QWORD *)&v1557 + 1) + 4 * v235;
        v490 = (uint64_t)v1558 + v477 >= v483 || v482 >= v479;
        v491 = !v490;
        v1547 = v491;
        v492 = v478 >= v485 || v484 >= v479;
        v493 = !v492;
        v1533 = v493;
        v494 = v478 >= v487 || v486 >= v479;
        v495 = !v494;
        v1520 = v495;
        v496 = v478 >= v489 || v488 >= v479;
        v497 = !v496;
        v498 = v478 >= (unint64_t)&v1555[3] + 4 || (unint64_t)v1555 + 4 >= v479;
        v499 = !v498;
        v500 = v480 >= v483 || v482 >= v481;
        v501 = !v500;
        v502 = v480 >= v485 || v484 >= v481;
        v503 = !v502;
        v504 = v480 >= v487 || v486 >= v481;
        v505 = !v504;
        v506 = v480 >= v489 || v488 >= v481;
        v507 = !v506;
        v508 = v480 >= (unint64_t)&v1555[3] + 4 || (unint64_t)v1555 + 4 >= v481;
        v509 = !v508;
        v510 = v482 >= v485 || v484 >= v483;
        v511 = !v510;
        v512 = v482 >= v487 || v486 >= v483;
        v513 = !v512;
        v514 = v482 >= v489 || v488 >= v483;
        v515 = !v514;
        v516 = v482 >= (unint64_t)&v1555[3] + 4 || (unint64_t)v1555 + 4 >= v483;
        v517 = !v516;
        if (v480 < v479 && v478 < v481)
          goto LABEL_874;
        if (v1547)
          goto LABEL_874;
        if (v1533)
          goto LABEL_874;
        if (v1520)
          goto LABEL_874;
        if (v497)
          goto LABEL_874;
        if (v499)
          goto LABEL_874;
        if (v501)
          goto LABEL_874;
        if (v503)
          goto LABEL_874;
        if (v505)
          goto LABEL_874;
        if (v507)
          goto LABEL_874;
        if (v509)
          goto LABEL_874;
        if (v511)
          goto LABEL_874;
        if (v513)
          goto LABEL_874;
        if (v515)
          goto LABEL_874;
        if (v517)
          goto LABEL_874;
        v372 = (v1506 & 0xFFFFFFFFFFFFFFFCLL) + (int)v372;
        v519 = (float32x4_t *)(*((_QWORD *)&v1556 + 1) + v477);
        v520 = (float32x4_t *)(v1557 + v477);
        v521 = (float32x4_t *)(*((_QWORD *)&v1557 + 1) + v477);
        v522 = (float32x4_t *)(v1558 + v477);
        v523 = (float32x4_t *)(*((_QWORD *)&v1558 + 1) + v477);
        v524 = (float32x4_t *)(v1559 + v477);
        v525 = v1506 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v526 = *v519++;
          v527 = v526;
          v528 = *v520++;
          v529 = v528;
          v530 = *v521++;
          v531 = vsubq_f32(v527, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)&v1555[2] + 8), 0));
          v532 = vsubq_f32(v529, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)&v1555[2] + 12), 0));
          v533 = vsubq_f32(v530, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v1555[3], 0));
          v534 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v532, *(float *)&v1555[1]), v531, *((float *)v1555 + 1)), v533, *((float *)&v1555[1] + 3));
          v535 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v532, *((float *)&v1555[1] + 1)), v531, *((float *)v1555 + 2)), v533, *(float *)&v1555[2]);
          v536 = vmlaq_n_f32(vmulq_n_f32(v532, *((float *)&v1555[1] + 2)), v531, *((float *)v1555 + 3));
          v531.i32[0] = DWORD1(v1555[2]);
          *v522++ = v534;
          v55 = vmlaq_n_f32(v536, v533, v531.f32[0]);
          *v523++ = v535;
          *v524++ = v55;
          v525 -= 4;
        }
        while (v525);
        if (v1506 != (v1506 & 0xFFFFFFFFFFFFFFFCLL))
        {
LABEL_874:
          do
          {
            v379 = 4 * v372;
            v380 = *(float *)(v374 + 4 * v372) - *((float *)&v1555[2] + 2);
            v381 = *(float *)(v375 + 4 * v372) - *((float *)&v1555[2] + 3);
            v382 = *(float *)(*((_QWORD *)&v375 + 1) + 4 * v372) - *(float *)&v1555[3];
            v383 = (float)((float)(*(float *)&v1555[1] * v381) + (float)(*((float *)v1555 + 1) * v380))
                 + (float)(*((float *)&v1555[1] + 3) * v382);
            v384 = (float)((float)(v381 * *((float *)&v1555[1] + 1)) + (float)(*((float *)v1555 + 2) * v380))
                 + (float)(*(float *)&v1555[2] * v382);
            v385 = (float)((float)(v381 * *((float *)&v1555[1] + 2)) + (float)(*((float *)v1555 + 3) * v380))
                 + (float)(*((float *)&v1555[2] + 1) * v382);
            *(float *)(v376 + v379) = v383;
            *(float *)(*((_QWORD *)&v376 + 1) + v379) = v384;
            *(float *)(v377 + v379) = v385;
            ++v372;
          }
          while (v378 != v372);
        }
LABEL_197:
        v386 = *((_QWORD *)&v1559 + 1);
        if (SHIDWORD(v1554) <= 0)
          v387 = -(-HIDWORD(v1554) & 3);
        else
          v387 = BYTE12(v1554) & 3;
        v388 = (HIDWORD(v1554) - v387);
        if ((int)v388 < 1)
        {
          LODWORD(v389) = 0;
          v394 = 0uLL;
        }
        else
        {
          v389 = 0;
          v390 = (float32x4_t *)*((_QWORD *)&v1555[6] + 1);
          v391 = (float32x4_t *)v1556;
          v393 = (float32x4_t *)*((_QWORD *)&v1558 + 1);
          v392 = (float32x4_t *)v1558;
          v394 = 0uLL;
          v395 = (float32x4_t *)*((_QWORD *)&v1559 + 1);
          v396 = (float32x4_t *)v1559;
          do
          {
            v397 = *v390++;
            v398 = v397;
            v399 = *v391++;
            v400 = v399;
            v401 = *v392++;
            v402 = v401;
            v403 = *v393++;
            v404 = v403;
            v405 = vabsq_f32(v402);
            v406 = vabsq_f32(v403);
            v407 = vdivq_f32(vminq_f32(v405, v406), vmaxq_f32(v405, v406));
            v408 = vmulq_f32(v407, v407);
            v409 = vaddq_f32(v407, vmulq_f32(vmulq_f32(v407, v408), vaddq_f32(vmulq_f32(v408, vaddq_f32(vmulq_f32(v408, v358), v359)), v360)));
            v410 = *v396++;
            v411 = v410;
            v412 = (float32x4_t)vbslq_s8((int8x16_t)vcagtq_f32(v404, v402), (int8x16_t)vsubq_f32(v361, v409), (int8x16_t)vaddq_f32(v409, v373));
            v413 = *v395++;
            v414 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v402), (int8x16_t)vsubq_f32(v362, v412), (int8x16_t)v412);
            v415 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v404), (int8x16_t)vsubq_f32(v373, v414), (int8x16_t)v414);
            v416 = vdivq_f32(v411, vsqrtq_f32(vaddq_f32(vmulq_f32(v402, v402), vmulq_f32(v404, v404))));
            v417 = vmulq_f32(v416, v416);
            v418 = vsubq_f32(v398, v415);
            v419 = vmulq_f32(v413, vsubq_f32(v400, vmulq_f32(v416, vaddq_f32(vaddq_f32(vmulq_f32(vmulq_f32(v417, v417), v363), vmulq_f32(v417, v364)), v366))));
            v420 = vmulq_f32(v413, vaddq_f32(v418, vmulq_f32(vcvtq_f32_s32(vaddq_s32(vcvtq_s32_f32(vmulq_f32(vaddq_f32(v418, v362), v365)), vcgtq_f32(v367, v418))), v368)));
            v55 = vaddq_f32(vmulq_f32(v419, v419), vmulq_f32(v420, v420));
            v394 = vaddq_f32(v394, v55);
            v389 += 4;
          }
          while (v389 < v388);
        }
        v1505 = v388;
        v421 = SHIDWORD(v1554);
        v422 = vpaddq_f32(v394, v394);
        v423 = vpaddq_f32(v422, v422).f32[0] + 0.0;
        v1513 = HIDWORD(v1554);
        if ((int)v389 < SHIDWORD(v1554))
        {
          v1545 = *((_QWORD *)&v1555[6] + 1);
          v1531 = v1556;
          v424 = v1558;
          v425 = (int)v389;
          v426 = v1559;
          do
          {
            v427 = *(float *)(v1545 + 4 * v425);
            v428 = *(float *)(v1531 + 4 * v425);
            v429 = *(float *)(v424 + 4 * v425);
            v430 = *(float *)(*((_QWORD *)&v424 + 1) + 4 * v425);
            v431 = *(float *)(v426 + 4 * v425);
            v432 = atan2f(v430, v429);
            v433 = atanf(v431 / sqrtf((float)(v430 * v430) + (float)(v429 * v429)));
            v434 = *(float *)(v386 + 4 * v425);
            *(double *)v55.i64 = ((float)(v427 - v432)
                                + 3.14159265
                                + (double)((int)(((float)(v427 - v432) + 3.14159265) * 0.159154943)
                                         - ((float)(v427 - v432) + 3.14159265 < 0.0))
                                * -6.28318531
                                + -3.14159265)
                               * v434;
            v55.f32[0] = *(double *)v55.i64;
            v423 = v423
                 + (float)((float)((float)((float)(v428 - v433) * v434) * (float)((float)(v428 - v433) * v434))
                         + (float)(v55.f32[0] * v55.f32[0]));
            ++v425;
          }
          while (v421 != v425);
        }
        v58 = v1513;
        v73 = v423 / (float)v1513;
        if (v73 < v307)
          goto LABEL_30;
        v435.i64[0] = 0x3F0000003F000000;
        v435.i64[1] = 0x3F0000003F000000;
        v1585 = vmulq_f32(v1585, v435);
        v1546 = vmul_f32(v1586, (float32x2_t)0x3F0000003F000000);
        v1586 = v1546;
        *(_OWORD *)((char *)&v1555[1] + 4) = *(_OWORD *)((char *)&v1555[4] + 4);
        DWORD1(v1555[2]) = DWORD1(v1555[5]);
        *(_OWORD *)((char *)v1555 + 4) = *(_OWORD *)((char *)&v1555[3] + 4);
        *(float32x2_t *)v435.f32 = vadd_f32(*(float32x2_t *)v1585.f32, (float32x2_t)(*(_OWORD *)((char *)&v1555[5] + 4) >> 32));
        v1532 = *(int32x2_t *)v435.f32;
        *((_QWORD *)&v1555[2] + 1) = v435.i64[0];
        v435.f32[0] = v1585.f32[2] + *(float *)&v1555[6];
        v1519 = *(int32x2_t *)v435.f32;
        *(float *)&v1555[3] = v1585.f32[2] + *(float *)&v1555[6];
        v436 = __sincosf_stret(v1585.f32[3]);
        v437 = __sincosf_stret(v1546.f32[0]);
        v438 = v437.__cosval;
        v439 = __sincosf_stret(v1546.f32[1]);
        v440 = (float)((float)(v436.__cosval * v437.__sinval) * v439.__sinval) - (float)(v436.__sinval * v439.__cosval);
        v441 = (float)(v436.__sinval * v439.__sinval) + (float)((float)(v436.__cosval * v437.__sinval) * v439.__cosval);
        v442 = (float)(v436.__cosval * v439.__cosval) + (float)((float)(v436.__sinval * v437.__sinval) * v439.__sinval);
        v443 = (float)((float)(v436.__sinval * v437.__sinval) * v439.__cosval) - (float)(v436.__cosval * v439.__sinval);
        v444 = *(_QWORD *)((char *)v1555 + 4);
        v445 = *(float *)&v1555[1];
        v446 = *((float *)&v1555[1] + 3);
        v447 = *(float *)&v1555[2];
        v448 = (float)((float)((float)(*((float *)v1555 + 1) * (float)(v436.__cosval * v438)) + 0.0)
                     + (float)(*((float *)v1555 + 2) * (float)(v436.__sinval * v438)))
             - (float)(*((float *)v1555 + 3) * v437.__sinval);
        v55.f32[0] = (float)((float)((float)(*((float *)v1555 + 1) * v440) + 0.0) + (float)(*((float *)v1555 + 2) * v442))
                   + (float)(*((float *)v1555 + 3) * (float)(v437.__cosval * v439.__sinval));
        *((float *)v1555 + 1) = v448;
        DWORD2(v1555[0]) = v55.i32[0];
        v449 = (float)((float)((float)(*(float *)&v444 * v441) + 0.0) + (float)(*((float *)&v444 + 1) * v443))
             + (float)(*((float *)v1555 + 3) * (float)(v437.__cosval * v439.__cosval));
        v450 = (float)((float)((float)(*(float *)&v1555[1] * (float)(v436.__cosval * v438)) + 0.0)
                     + (float)(*((float *)&v1555[1] + 1) * (float)(v436.__sinval * v438)))
             - (float)(*((float *)&v1555[1] + 2) * v437.__sinval);
        *((float *)v1555 + 3) = v449;
        *(float *)&v1555[1] = v450;
        v451 = (float)((float)((float)(v445 * v440) + 0.0) + (float)(*((float *)&v1555[1] + 1) * v442))
             + (float)(*((float *)&v1555[1] + 2) * (float)(v437.__cosval * v439.__sinval));
        v452 = (float)((float)((float)(v445 * v441) + 0.0) + (float)(*((float *)&v1555[1] + 1) * v443))
             + (float)(*((float *)&v1555[1] + 2) * (float)(v437.__cosval * v439.__cosval));
        *(_QWORD *)((char *)&v1555[1] + 4) = __PAIR64__(LODWORD(v452), LODWORD(v451));
        v453 = (float)((float)((float)(*((float *)&v1555[1] + 3) * (float)(v436.__cosval * v438)) + 0.0)
                     + (float)(*(float *)&v1555[2] * (float)(v436.__sinval * v438)))
             - (float)(*((float *)&v1555[2] + 1) * v437.__sinval);
        v454 = (float)((float)((float)(*((float *)&v1555[1] + 3) * v440) + 0.0) + (float)(*(float *)&v1555[2] * v442))
             + (float)(*((float *)&v1555[2] + 1) * (float)(v437.__cosval * v439.__sinval));
        *((float *)&v1555[1] + 3) = v453;
        *(float *)&v1555[2] = v454;
        v455 = (float)((float)((float)(v446 * v441) + 0.0) + (float)(v447 * v443))
             + (float)(*((float *)&v1555[2] + 1) * (float)(v437.__cosval * v439.__cosval));
        *((float *)&v1555[2] + 1) = v455;
        if ((int)v1505 < 1)
        {
          LODWORD(v476) = 0;
          v461 = 0uLL;
          v463 = v1448;
          v462 = v1449;
          v465 = v1446;
          v464 = v1447;
          v466 = v1444;
          v467 = v1445;
          v469 = v1442;
          v468 = v1443;
          v471 = v1440;
          v470 = v1441;
          v472 = v1439;
          if (v1513 <= 0)
            goto LABEL_324;
        }
        else
        {
          v456 = 0;
          v457 = 0;
          v458 = (float32x4_t)vdupq_lane_s32(v1532, 0);
          v459 = (float32x4_t)vdupq_lane_s32(v1532, 1);
          v460 = (float32x4_t)vdupq_lane_s32(v1519, 0);
          v461 = 0uLL;
          v463 = v1448;
          v462 = v1449;
          v465 = v1446;
          v464 = v1447;
          v466 = v1444;
          v467 = v1445;
          v469 = v1442;
          v468 = v1443;
          v471 = v1440;
          v470 = v1441;
          v472 = v1439;
          do
          {
            v473 = vsubq_f32(*(float32x4_t *)(*((_QWORD *)&v1556 + 1) + v456), v458);
            v474 = vsubq_f32(*(float32x4_t *)(v1557 + v456), v459);
            v475 = vsubq_f32(*(float32x4_t *)(*((_QWORD *)&v1557 + 1) + v456), v460);
            *(float32x4_t *)(v1558 + v456) = vaddq_f32(vaddq_f32(vmulq_n_f32(v473, v448), vmulq_n_f32(v474, v450)), vmulq_n_f32(v475, v453));
            *(float32x4_t *)(*((_QWORD *)&v1558 + 1) + v456) = vaddq_f32(vaddq_f32(vmulq_n_f32(v473, v55.f32[0]), vmulq_n_f32(v474, v451)), vmulq_n_f32(v475, v454));
            *(float32x4_t *)(v1559 + v456) = vaddq_f32(vaddq_f32(vmulq_n_f32(v473, v449), vmulq_n_f32(v474, v452)), vmulq_n_f32(v475, v455));
            v457 += 4;
            v456 += 16;
          }
          while (v457 < v1505);
          LODWORD(v476) = v457;
          if ((int)v457 >= v1513)
            goto LABEL_324;
        }
        v537 = *((_QWORD *)&v1556 + 1);
        v538 = v1557;
        v539 = v1558;
        v540 = v1559;
        v476 = (int)v476;
        if ((unint64_t)(v421 - (int)v476) >= 0xC)
        {
          v1507 = v421 - (int)v476;
          v596 = 4 * (int)v476;
          v597 = v421;
          v598 = v1558 + v596;
          v599 = v597;
          v600 = 4 * v597;
          v601 = v1558 + 4 * v597;
          v602 = *((_QWORD *)&v1558 + 1) + v596;
          v603 = *((_QWORD *)&v1558 + 1) + 4 * v597;
          v604 = v1559 + v596;
          v605 = v1559 + 4 * v597;
          v606 = *((_QWORD *)&v1556 + 1) + v596;
          v607 = *((_QWORD *)&v1556 + 1) + 4 * v597;
          v608 = v1557 + v596;
          v609 = v1557 + 4 * v597;
          v610 = *((_QWORD *)&v1557 + 1) + v596;
          v611 = *((_QWORD *)&v1557 + 1) + v600;
          v613 = (uint64_t)v1558 + v596 < v605 && v604 < v601;
          v1549 = v613;
          v615 = v598 < v607 && v606 < v601;
          v1535 = v615;
          v617 = v598 < v609 && v608 < v601;
          v1522 = v617;
          v619 = v598 < v611 && v610 < v601;
          v621 = v598 < (unint64_t)&v1555[3] + 4 && (unint64_t)v1555 + 4 < v601;
          v623 = v602 < v605 && v604 < v603;
          v625 = v602 < v607 && v606 < v603;
          v627 = v602 < v609 && v608 < v603;
          v629 = v602 < v611 && v610 < v603;
          v631 = v602 < (unint64_t)&v1555[3] + 4 && (unint64_t)v1555 + 4 < v603;
          v633 = v604 < v607 && v606 < v605;
          v635 = v604 < v609 && v608 < v605;
          v637 = v604 < v611 && v610 < v605;
          v639 = v604 < (unint64_t)&v1555[3] + 4 && (unint64_t)v1555 + 4 < v605;
          if (v602 >= v601 || v598 >= v603)
          {
            v421 = v599;
            if (!v1549
              && !v1535
              && !v1522
              && !v619
              && !v621
              && !v623
              && !v625
              && !v627
              && !v629
              && !v631
              && !v633
              && !v635
              && !v637
              && !v639)
            {
              v476 = (v1507 & 0xFFFFFFFFFFFFFFFCLL) + (int)v476;
              v641 = (float32x4_t *)(*((_QWORD *)&v1556 + 1) + v596);
              v642 = (float32x4_t *)(v1557 + v596);
              v643 = (float32x4_t *)(*((_QWORD *)&v1557 + 1) + v596);
              v644 = (float32x4_t *)(v1558 + v596);
              v645 = (float32x4_t *)(*((_QWORD *)&v1558 + 1) + v596);
              v646 = (float32x4_t *)(v1559 + v596);
              v647 = v1507 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v648 = *v641++;
                v649 = v648;
                v650 = *v642++;
                v651 = v650;
                v652 = *v643++;
                v653 = vsubq_f32(v649, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)&v1555[2] + 8), 0));
                v654 = vsubq_f32(v651, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)&v1555[2] + 12), 0));
                v655 = vsubq_f32(v652, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v1555[3], 0));
                v656 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v654, *(float *)&v1555[1]), v653, *((float *)v1555 + 1)), v655, *((float *)&v1555[1] + 3));
                v657 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v654, *((float *)&v1555[1] + 1)), v653, *((float *)v1555 + 2)), v655, *(float *)&v1555[2]);
                v658 = vmlaq_n_f32(vmulq_n_f32(v654, *((float *)&v1555[1] + 2)), v653, *((float *)v1555 + 3));
                v653.i32[0] = DWORD1(v1555[2]);
                *v644++ = v656;
                v55 = vmlaq_n_f32(v658, v655, v653.f32[0]);
                *v645++ = v657;
                *v646++ = v55;
                v647 -= 4;
              }
              while (v647);
              if (v1507 == (v1507 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_324;
            }
          }
          else
          {
            v421 = v599;
          }
        }
        do
        {
          v541 = 4 * v476;
          v542 = *(float *)(v537 + 4 * v476) - *((float *)&v1555[2] + 2);
          v543 = *(float *)(v538 + 4 * v476) - *((float *)&v1555[2] + 3);
          v544 = *(float *)(*((_QWORD *)&v538 + 1) + 4 * v476) - *(float *)&v1555[3];
          v545 = (float)((float)(*(float *)&v1555[1] * v543) + (float)(*((float *)v1555 + 1) * v542))
               + (float)(*((float *)&v1555[1] + 3) * v544);
          v546 = (float)((float)(v543 * *((float *)&v1555[1] + 1)) + (float)(*((float *)v1555 + 2) * v542))
               + (float)(*(float *)&v1555[2] * v544);
          v547 = (float)((float)(v543 * *((float *)&v1555[1] + 2)) + (float)(*((float *)v1555 + 3) * v542))
               + (float)(*((float *)&v1555[2] + 1) * v544);
          *(float *)(v539 + v541) = v545;
          *(float *)(*((_QWORD *)&v539 + 1) + v541) = v546;
          *(float *)(v540 + v541) = v547;
          ++v476;
        }
        while (v421 != v476);
LABEL_324:
        v548 = *((_QWORD *)&v1559 + 1);
        if (SHIDWORD(v1554) <= 0)
          v549 = -(-HIDWORD(v1554) & 3);
        else
          v549 = BYTE12(v1554) & 3;
        v550 = (HIDWORD(v1554) - v549);
        if ((int)v550 < 1)
        {
          LODWORD(v551) = 0;
          v556 = 0uLL;
        }
        else
        {
          v551 = 0;
          v552 = (float32x4_t *)*((_QWORD *)&v1555[6] + 1);
          v553 = (float32x4_t *)v1556;
          v555 = (float32x4_t *)*((_QWORD *)&v1558 + 1);
          v554 = (float32x4_t *)v1558;
          v556 = 0uLL;
          v557 = (float32x4_t *)*((_QWORD *)&v1559 + 1);
          v558 = (float32x4_t *)v1559;
          do
          {
            v559 = *v552++;
            v560 = v559;
            v561 = *v553++;
            v562 = v561;
            v563 = *v554++;
            v564 = v563;
            v565 = *v555++;
            v566 = v565;
            v567 = vabsq_f32(v564);
            v568 = vabsq_f32(v565);
            v569 = vdivq_f32(vminq_f32(v567, v568), vmaxq_f32(v567, v568));
            v570 = vmulq_f32(v569, v569);
            v571 = vaddq_f32(v569, vmulq_f32(vmulq_f32(v569, v570), vaddq_f32(vmulq_f32(v570, vaddq_f32(vmulq_f32(v570, v462), v463)), v464)));
            v572 = *v558++;
            v573 = v572;
            v574 = (float32x4_t)vbslq_s8((int8x16_t)vcagtq_f32(v566, v564), (int8x16_t)vsubq_f32(v465, v571), (int8x16_t)vaddq_f32(v571, v461));
            v575 = *v557++;
            v576 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v564), (int8x16_t)vsubq_f32(v467, v574), (int8x16_t)v574);
            v577 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v566), (int8x16_t)vsubq_f32(v461, v576), (int8x16_t)v576);
            v578 = vdivq_f32(v573, vsqrtq_f32(vaddq_f32(vmulq_f32(v564, v564), vmulq_f32(v566, v566))));
            v579 = vmulq_f32(v578, v578);
            v580 = vsubq_f32(v560, v577);
            v581 = vmulq_f32(v575, vsubq_f32(v562, vmulq_f32(v578, vaddq_f32(vaddq_f32(vmulq_f32(vmulq_f32(v579, v579), v466), vmulq_f32(v579, v468)), v470))));
            v582 = vmulq_f32(v575, vaddq_f32(v580, vmulq_f32(vcvtq_f32_s32(vaddq_s32(vcvtq_s32_f32(vmulq_f32(vaddq_f32(v580, v467), v469)), vcgtq_f32(v471, v580))), v472)));
            v55 = vaddq_f32(vmulq_f32(v581, v581), vmulq_f32(v582, v582));
            v556 = vaddq_f32(v556, v55);
            v551 += 4;
          }
          while (v551 < v550);
        }
        v583 = vpaddq_f32(v556, v556);
        v584 = vpaddq_f32(v583, v583).f32[0] + 0.0;
        v1514 = HIDWORD(v1554);
        if ((int)v551 < SHIDWORD(v1554))
        {
          v1548 = SHIDWORD(v1554);
          v1534 = *((_QWORD *)&v1555[6] + 1);
          v1521 = v1556;
          v585 = v1558;
          v586 = (int)v551;
          v587 = v1559;
          do
          {
            v588 = *(float *)(v1534 + 4 * v586);
            v589 = *(float *)(v1521 + 4 * v586);
            v590 = *(float *)(v585 + 4 * v586);
            v591 = *(float *)(*((_QWORD *)&v585 + 1) + 4 * v586);
            v592 = *(float *)(v587 + 4 * v586);
            v593 = atan2f(v591, v590);
            v594 = atanf(v592 / sqrtf((float)(v591 * v591) + (float)(v590 * v590)));
            v595 = *(float *)(v548 + 4 * v586);
            *(double *)v55.i64 = ((float)(v588 - v593)
                                + 3.14159265
                                + (double)((int)(((float)(v588 - v593) + 3.14159265) * 0.159154943)
                                         - ((float)(v588 - v593) + 3.14159265 < 0.0))
                                * -6.28318531
                                + -3.14159265)
                               * v595;
            v55.f32[0] = *(double *)v55.i64;
            v584 = v584
                 + (float)((float)((float)((float)(v589 - v594) * v595) * (float)((float)(v589 - v594) * v595))
                         + (float)(v55.f32[0] * v55.f32[0]));
            ++v586;
          }
          while (v1548 != v586);
        }
        v58 = v1514;
        v73 = v584 / (float)v1514;
        if (v73 >= v307)
          break;
LABEL_30:
        v72 = v1437 + 1;
        v56 = 0uLL;
        if (v1437 == 3)
          goto LABEL_444;
      }
      v55.i32[1] = DWORD2(v1555[4]);
      *(_OWORD *)((char *)v1555 + 4) = *(_OWORD *)((char *)&v1555[3] + 4);
      *(_OWORD *)((char *)&v1555[1] + 4) = *(_OWORD *)((char *)&v1555[4] + 4);
      *(_OWORD *)((char *)&v1555[2] + 4) = *(_OWORD *)((char *)&v1555[5] + 4);
      v73 = v307;
      v56 = 0uLL;
LABEL_444:
      v659 = sqrtf(v73);
      v660 = v659 > v1434 && v1436 + 2 < v1435;
      if (v660)
        v661 = v659;
      else
        v661 = v1434;
      v662 = SDWORD2(v1554);
      if (SDWORD2(v1554) <= 0)
        v663 = -(-DWORD2(v1554) & 3);
      else
        v663 = BYTE8(v1554) & 3;
      v664 = (DWORD2(v1554) - v663);
      if ((int)v664 < 1)
      {
        LODWORD(v691) = 0;
        v678 = v1448;
        v677 = v1449;
        v680 = v1446;
        v679 = v1447;
        v681 = v1444;
        v682 = v1445;
        v684 = v1442;
        v683 = v1443;
        v686 = v1440;
        v685 = v1441;
        v687 = v1439;
        if (*(uint64_t *)((char *)&v1554 + 4) > 0)
          goto LABEL_459;
      }
      else
      {
        v665 = 0;
        v666 = 0;
        v667 = *((float *)v1555 + 1);
        v55.i64[0] = *((_QWORD *)&v1555[0] + 1);
        v668 = *((float *)v1555 + 3);
        v669 = *(float *)&v1555[1];
        v670 = *(float *)&v1555[2];
        v671 = *(_QWORD *)((char *)&v1555[1] + 4);
        v672 = *((float *)&v1555[1] + 3);
        v673 = *((float *)&v1555[2] + 1);
        v674 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)&v1555[2] + 8), 0);
        v675 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)&v1555[2] + 12), 0);
        v676 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v1555[3], 0);
        v678 = v1448;
        v677 = v1449;
        v680 = v1446;
        v679 = v1447;
        v681 = v1444;
        v682 = v1445;
        v684 = v1442;
        v683 = v1443;
        v686 = v1440;
        v685 = v1441;
        v687 = v1439;
        do
        {
          v688 = vsubq_f32(*(float32x4_t *)(v1552 + v665), v674);
          v689 = vsubq_f32(*(float32x4_t *)(*((_QWORD *)&v1552 + 1) + v665), v675);
          v690 = vsubq_f32(*(float32x4_t *)((char *)v1553[0] + v665), v676);
          *(float32x4_t *)(v1558 + v665) = vaddq_f32(vaddq_f32(vmulq_n_f32(v688, v667), vmulq_n_f32(v689, v669)), vmulq_n_f32(v690, v672));
          *(float32x4_t *)(*((_QWORD *)&v1558 + 1) + v665) = vaddq_f32(vaddq_f32(vmulq_n_f32(v688, v55.f32[0]), vmulq_n_f32(v689, *(float *)&v671)), vmulq_n_f32(v690, v670));
          *(float32x4_t *)(v1559 + v665) = vaddq_f32(vaddq_f32(vmulq_n_f32(v688, v668), vmulq_n_f32(v689, *((float *)&v671 + 1))), vmulq_n_f32(v690, v673));
          v666 += 4;
          v665 += 16;
        }
        while (v666 < v664);
        LODWORD(v691) = v666;
        if ((int)v666 >= (int)v662)
          goto LABEL_461;
LABEL_459:
        v692 = v1552;
        v693 = (float *)v1553[0];
        v694 = v1558;
        v695 = v1559;
        v691 = (int)v691;
        if ((unint64_t)(v662 - (int)v691) < 0xC)
          goto LABEL_875;
        v1509 = v662 - (int)v691;
        v752 = 4 * (int)v691;
        v753 = v1558 + v752;
        v754 = v1558 + 4 * v662;
        v755 = *((_QWORD *)&v1558 + 1) + v752;
        v756 = *((_QWORD *)&v1558 + 1) + 4 * v662;
        v757 = v1559 + v752;
        v758 = v1559 + 4 * v662;
        v759 = v1552 + v752;
        v760 = v1552 + 4 * v662;
        v761 = *((_QWORD *)&v1552 + 1) + v752;
        v762 = *((_QWORD *)&v1552 + 1) + 4 * v662;
        v763 = (char *)v1553[0] + v752;
        v764 = (char *)v1553[0] + 4 * v662;
        v765 = (uint64_t)v1558 + v752 >= v758 || v757 >= v754;
        v766 = !v765;
        v1550 = v766;
        v767 = v753 >= v760 || v759 >= v754;
        v768 = !v767;
        v1536 = v768;
        v769 = v753 >= v762 || v761 >= v754;
        v770 = !v769;
        v1523 = v770;
        v771 = v753 >= (unint64_t)v764 || (unint64_t)v763 >= v754;
        v772 = !v771;
        v773 = v753 >= (unint64_t)&v1555[3] + 4 || (unint64_t)v1555 + 4 >= v754;
        v774 = !v773;
        v775 = v755 >= v758 || v757 >= v756;
        v776 = !v775;
        v777 = v755 >= v760 || v759 >= v756;
        v778 = !v777;
        v779 = v755 >= v762 || v761 >= v756;
        v780 = !v779;
        v781 = v755 >= (unint64_t)v764 || (unint64_t)v763 >= v756;
        v782 = !v781;
        v783 = v755 >= (unint64_t)&v1555[3] + 4 || (unint64_t)v1555 + 4 >= v756;
        v784 = !v783;
        v785 = v757 >= v760 || v759 >= v758;
        v786 = !v785;
        v787 = v757 >= v762 || v761 >= v758;
        v788 = !v787;
        v789 = v757 >= (unint64_t)v764 || (unint64_t)v763 >= v758;
        v790 = !v789;
        v791 = v757 >= (unint64_t)&v1555[3] + 4 || (unint64_t)v1555 + 4 >= v758;
        v792 = !v791;
        if (v755 < v754 && v753 < v756)
          goto LABEL_875;
        if (v1550)
          goto LABEL_875;
        if (v1536)
          goto LABEL_875;
        if (v1523)
          goto LABEL_875;
        if (v772)
          goto LABEL_875;
        if (v774)
          goto LABEL_875;
        if (v776)
          goto LABEL_875;
        if (v778)
          goto LABEL_875;
        if (v780)
          goto LABEL_875;
        if (v782)
          goto LABEL_875;
        if (v784)
          goto LABEL_875;
        if (v786)
          goto LABEL_875;
        if (v788)
          goto LABEL_875;
        if (v790)
          goto LABEL_875;
        if (v792)
          goto LABEL_875;
        v691 = (v1509 & 0xFFFFFFFFFFFFFFFCLL) + (int)v691;
        v794 = (float32x4_t *)(v1552 + v752);
        v795 = (float32x4_t *)(*((_QWORD *)&v1552 + 1) + v752);
        v796 = (float32x4_t *)((char *)v1553[0] + v752);
        v797 = (float32x4_t *)(v1558 + v752);
        v798 = (float32x4_t *)(*((_QWORD *)&v1558 + 1) + v752);
        v799 = (float32x4_t *)(v1559 + v752);
        v800 = v1509 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v801 = *v794++;
          v802 = v801;
          v803 = *v795++;
          v804 = v803;
          v805 = *v796++;
          v806 = vsubq_f32(v802, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)&v1555[2] + 8), 0));
          v807 = vsubq_f32(v804, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)((char *)&v1555[2] + 12), 0));
          v808 = vsubq_f32(v805, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v1555[3], 0));
          v809 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v807, *(float *)&v1555[1]), v806, *((float *)v1555 + 1)), v808, *((float *)&v1555[1] + 3));
          v810 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v807, *((float *)&v1555[1] + 1)), v806, *((float *)v1555 + 2)), v808, *(float *)&v1555[2]);
          v811 = vmlaq_n_f32(vmulq_n_f32(v807, *((float *)&v1555[1] + 2)), v806, *((float *)v1555 + 3));
          v806.i32[0] = DWORD1(v1555[2]);
          *v797++ = v809;
          v55 = vmlaq_n_f32(v811, v808, v806.f32[0]);
          *v798++ = v810;
          *v799++ = v55;
          v800 -= 4;
        }
        while (v800);
        if (v1509 != (v1509 & 0xFFFFFFFFFFFFFFFCLL))
        {
LABEL_875:
          do
          {
            v696 = 4 * v691;
            v697 = *(float *)(v692 + 4 * v691) - *((float *)&v1555[2] + 2);
            v698 = *(float *)(*((_QWORD *)&v692 + 1) + 4 * v691) - *((float *)&v1555[2] + 3);
            v699 = v693[v691] - *(float *)&v1555[3];
            v700 = (float)((float)(*(float *)&v1555[1] * v698) + (float)(*((float *)v1555 + 1) * v697))
                 + (float)(*((float *)&v1555[1] + 3) * v699);
            v701 = (float)((float)(v698 * *((float *)&v1555[1] + 1)) + (float)(*((float *)v1555 + 2) * v697))
                 + (float)(*(float *)&v1555[2] * v699);
            v702 = (float)((float)(v698 * *((float *)&v1555[1] + 2)) + (float)(*((float *)v1555 + 3) * v697))
                 + (float)(*((float *)&v1555[2] + 1) * v699);
            *(float *)(v694 + v696) = v700;
            *(float *)(*((_QWORD *)&v694 + 1) + v696) = v701;
            *(float *)(v695 + v696) = v702;
            ++v691;
          }
          while (v662 != v691);
        }
      }
LABEL_461:
      v703 = v1554;
      v704 = SDWORD2(v1554);
      if (SDWORD2(v1554) <= 0)
        v705 = -(-DWORD2(v1554) & 3);
      else
        v705 = BYTE8(v1554) & 3;
      v706 = (DWORD2(v1554) - v705);
      if ((int)v706 < 1)
      {
        LODWORD(j) = 0;
        v724 = "y: %{public}@";
        v725 = "y: %{public}@";
        v726 = "y: %{public}@";
        v727 = "y: %{public}@";
        if (*(uint64_t *)((char *)&v1554 + 4) <= 0)
          goto LABEL_472;
        goto LABEL_470;
      }
      v707 = 0;
      for (j = 0; j < v706; j += 4)
      {
        v709 = *(float32x4_t *)(v1558 + v707);
        v710 = *(float32x4_t *)(*((_QWORD *)&v1558 + 1) + v707);
        v711 = *(float32x4_t *)(v703 + v707);
        v712 = vabsq_f32(v709);
        v713 = vabsq_f32(v710);
        v714 = vdivq_f32(vminq_f32(v712, v713), vmaxq_f32(v712, v713));
        v715 = vmulq_f32(v714, v714);
        v716 = vaddq_f32(v714, vmulq_f32(vmulq_f32(v714, v715), vaddq_f32(vmulq_f32(v715, vaddq_f32(vmulq_f32(v715, v677), v678)), v679)));
        v717 = (float32x4_t)vbslq_s8((int8x16_t)vcagtq_f32(v710, v709), (int8x16_t)vsubq_f32(v680, v716), (int8x16_t)vaddq_f32(v716, v56));
        v718 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v709), (int8x16_t)vsubq_f32(v682, v717), (int8x16_t)v717);
        v719 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_f32(v710), (int8x16_t)vsubq_f32(v56, v718), (int8x16_t)v718);
        v720 = vdivq_f32(*(float32x4_t *)(v1559 + v707), vsqrtq_f32(vaddq_f32(vmulq_f32(v709, v709), vmulq_f32(v710, v710))));
        v721 = vmulq_f32(v720, v720);
        v722 = vsubq_f32(*(float32x4_t *)(v1551 + v707), v719);
        v55 = vmulq_f32(v711, vaddq_f32(v722, vmulq_f32(vcvtq_f32_s32(vaddq_s32(vcvtq_s32_f32(vmulq_f32(vaddq_f32(v722, v682), v684)), vcgtq_f32(v686, v722))), v687)));
        v723 = vmulq_f32(v711, vsubq_f32(*(float32x4_t *)(*((_QWORD *)&v1551 + 1) + v707), vmulq_f32(v720, vaddq_f32(vaddq_f32(vmulq_f32(vmulq_f32(v721, v721), v681), vmulq_f32(v721, v683)), v685))));
        *(float32x4_t *)(*((_QWORD *)&v1560 + 1) + v707) = v55;
        *(float32x4_t *)&v1561[v707 / 4] = v723;
        v707 += 16;
      }
      v724 = "Failed to create trace directory: %{public}@" + 31;
      v725 = "Failed to create trace directory: %{public}@" + 31;
      v726 = "Failed to create trace directory: %{public}@" + 31;
      v727 = "Failed to create trace directory: %{public}@" + 31;
      if ((int)j < (int)v704)
      {
LABEL_470:
        v728 = v1551;
        v729 = v1558;
        v1508 = v1559;
        v730 = *((_QWORD *)&v1560 + 1);
        v731 = (int)j;
        v732 = v1561;
        do
        {
          v733 = *(float *)(v728 + 4 * v731);
          v734 = *(float *)(*((_QWORD *)&v728 + 1) + 4 * v731);
          v735 = *(float *)(v729 + 4 * v731);
          v736 = *(float *)(*((_QWORD *)&v729 + 1) + 4 * v731);
          v737 = *(float *)(v1508 + 4 * v731);
          v738 = v704;
          v739 = v725;
          v740 = atan2f(v736, v735);
          v741 = atanf(v737 / sqrtf((float)(v736 * v736) + (float)(v735 * v735)));
          v725 = v739;
          v704 = v738;
          *(double *)v55.i64 = (float)(v733 - v740) + *((double *)v724 + 292);
          v742 = *(float *)(v703 + 4 * v731);
          *(double *)v55.i64 = (*(double *)v55.i64
                              + (double)((int)(*(double *)v55.i64 * *((double *)v739 + 381)) - (*(double *)v55.i64 < 0.0))
                              * *((double *)v726 + 382)
                              + *((double *)v727 + 383))
                             * v742;
          v55.f32[0] = *(double *)v55.i64;
          *(_DWORD *)(v730 + 4 * v731) = v55.i32[0];
          v732[v731++] = (float)(v734 - v741) * v742;
        }
        while (v738 != v731);
      }
LABEL_472:
      LODWORD(v57) = DWORD2(v1554);
      if (SDWORD2(v1554) < 1)
      {
        v54 = 0.0;
        v745 = 1;
        v48 = v1432;
      }
      else
      {
        v743 = 0;
        v744 = v661 * v661;
        v54 = 0.0;
        LOBYTE(v745) = 1;
        v48 = v1432;
        do
        {
          v747 = (float)(v1561[v743] * v1561[v743])
               + (float)(*(float *)(*((_QWORD *)&v1560 + 1) + 4 * v743) * *(float *)(*((_QWORD *)&v1560 + 1) + 4 * v743));
          v748 = v747 > v744;
          v660 = v747 <= v744;
          v746 = 0.0;
          if (v660)
          {
            if ((_QWORD)v1554)
              v746 = *(float *)(v1554 + 4 * v743);
            else
              v746 = 1.0;
          }
          v745 = v745 & (*((unsigned __int8 *)v1553[1] + v743) == v748);
          v54 = v54 + v746;
          *((_BYTE *)v1553[1] + v743++) = v748;
          LODWORD(v57) = DWORD2(v1554);
        }
        while (v743 < SDWORD2(v1554));
      }
      if (v745)
        _ZF = v661 == v1434;
      else
        _ZF = 0;
      if (!_ZF)
      {
        v750 = ++v1436;
        v751 = v54 < 0.0 || v750 == v1435;
        v56 = 0uLL;
        if (!v751)
          continue;
      }
      break;
    }
LABEL_598:
    v1565 = *(_OWORD *)((char *)v1555 + 4);
    v1566 = *(_OWORD *)((char *)&v1555[1] + 4);
    v1567 = *(_OWORD *)((char *)&v1555[2] + 4);
    v812 = v48 + 160 * v1428;
    *(float *)(v812 + 4) = v54;
    v813 = v812 + 4;
    apply_pose_rotation((float *)&v1565, (float32x2_t *)(*(_QWORD *)&v1431[18] + 232), (float *)(v813 + 36));
    v814 = *(float *)(*(_QWORD *)&v1431[18] + 236) * *(float *)(v813 + 64)
         + *(float *)(v813 + 60) * *(float *)(*(_QWORD *)&v1431[18] + 232)
         + *(float *)(v813 + 68) * *(float *)(*(_QWORD *)&v1431[18] + 240);
    v815 = fabs(v814);
    v816 = cosf(*(float *)(v1429 + 140));
    if (v1427)
    {
      printf("Info : ");
      v817 = (float)(*(float *)v813 * 0.03125);
      v818 = v814;
      v819 = acosf(v818);
      printf(" score: %6.3f (gravity test: %d (%f degrees))", v817, v815 > v816, v819 * 180.0 / 3.14159265);
      putchar(10);
    }
    v6 = v1425;
    if (v815 <= v816)
      *(_DWORD *)v813 = 0;
    v10 = v1426;
    if (v1427)
    {
      LODWORD(v1574[0]) = 0;
      LODWORD(v1562) = 0;
      vl_gt_get_pose_err(v1431 + 12, (float32x2_t *)(v813 + 36), (float *)v1574, (float *)&v1562);
      printf("Info : ");
      printf("  diff from gt : (%s%.2f%s, %s%.2f%s)", "", *(float *)&v1562 * 180.0 / 3.14159265, "", "", *(float *)v1574, "");
      putchar(10);
    }
    v23 = v1428 + 1;
    v25 = 0uLL;
    if (v1428 + 1 != v1423)
      continue;
    break;
  }
LABEL_796:
  v1264 = (char *)malloc_type_malloc(0x200uLL, 0xCE6FC97FuLL);
  v1265 = *v10;
  if (*v10)
  {
    v1266 = 0;
    v1267 = 1;
    v1268 = v10[1];
    v1269 = 32;
    v1270 = 0uLL;
    while (1)
    {
      v1271 = v1266;
      while (1)
      {
        if (!v1267)
        {
          --v1271;
          v1272 = &v1264[16 * v1271];
          v1265 = *((_QWORD *)v1272 + 1);
          v1268 = v10[1] + 160 * *(_QWORD *)v1272;
        }
        if ((uint64_t)v1265 > 15)
          break;
        if ((uint64_t)v1265 > 1)
        {
          v1273 = v1268 + 160;
          v1274 = 2;
          for (k = 1; k != v1265; ++k)
          {
            v1276 = v1273;
            v1277 = v1274;
            do
            {
              if ((float)(*(float *)(v1268 + 160 * (v1277 - 2) + 4) - *(float *)(v1276 + 4)) >= 0.0)
                break;
              v1278 = (_OWORD *)(v1268 + 160 * (v1277 - 2));
              v1583 = v1270;
              v1582 = v1270;
              v1581 = v1270;
              v1580 = v1270;
              v1579 = v1270;
              v1578 = v1270;
              *(_OWORD *)v1577 = v1270;
              *(_OWORD *)v1576 = v1270;
              v1575 = v1270;
              *(_OWORD *)v1574 = v1270;
              v1279 = *(_OWORD *)v1276;
              v1575 = *(_OWORD *)(v1276 + 16);
              *(_OWORD *)v1574 = v1279;
              v1280 = *(_OWORD *)(v1276 + 32);
              v1281 = *(_OWORD *)(v1276 + 48);
              v1282 = *(_OWORD *)(v1276 + 64);
              v1579 = *(_OWORD *)(v1276 + 80);
              v1578 = v1282;
              *(_OWORD *)v1577 = v1281;
              *(_OWORD *)v1576 = v1280;
              v1283 = *(_OWORD *)(v1276 + 96);
              v1284 = *(_OWORD *)(v1276 + 112);
              v1285 = *(_OWORD *)(v1276 + 128);
              v1583 = *(_OWORD *)(v1276 + 144);
              v1582 = v1285;
              v1581 = v1284;
              v1580 = v1283;
              v1286 = v1278[1];
              *(_OWORD *)v1276 = *v1278;
              *(_OWORD *)(v1276 + 16) = v1286;
              v1287 = v1278[2];
              v1288 = v1278[3];
              v1289 = v1278[5];
              *(_OWORD *)(v1276 + 64) = v1278[4];
              *(_OWORD *)(v1276 + 80) = v1289;
              *(_OWORD *)(v1276 + 32) = v1287;
              *(_OWORD *)(v1276 + 48) = v1288;
              v1290 = v1278[6];
              v1291 = v1278[7];
              v1292 = v1278[9];
              *(_OWORD *)(v1276 + 128) = v1278[8];
              *(_OWORD *)(v1276 + 144) = v1292;
              *(_OWORD *)(v1276 + 96) = v1290;
              *(_OWORD *)(v1276 + 112) = v1291;
              v1293 = v1575;
              *v1278 = *(_OWORD *)v1574;
              v1278[1] = v1293;
              v1294 = *(_OWORD *)v1576;
              v1295 = *(_OWORD *)v1577;
              v1296 = v1579;
              v1278[4] = v1578;
              v1278[5] = v1296;
              v1278[2] = v1294;
              v1278[3] = v1295;
              v1297 = v1580;
              v1298 = v1581;
              v1299 = v1583;
              v1278[8] = v1582;
              v1278[9] = v1299;
              v1278[6] = v1297;
              v1278[7] = v1298;
              --v1277;
              v1276 -= 160;
            }
            while (v1277 > 1);
            ++v1274;
            v1273 += 160;
          }
        }
        v1267 = 0;
        v1265 = 0;
        if (v1271 < 1)
          goto LABEL_865;
      }
      if (v1265 > 0x27)
        break;
      v1300 = v1265 >> 1;
      v1301 = *(float *)(v1268 + 160 * (v1265 >> 1) + 4);
      v1302 = *(float *)(v1268 + 4);
      v1303 = *(float *)(v1268 + 160 * (v1265 - 1) + 4);
      if ((float)(v1301 - v1302) >= 0.0)
      {
        if ((float)(v1303 - v1302) >= 0.0)
        {
          if ((float)(v1303 - v1301) < 0.0)
            v1300 = v1265 - 1;
        }
        else
        {
          v1300 = 0;
        }
      }
      else if ((float)(v1303 - v1301) >= 0.0)
      {
        if ((float)(v1303 - v1302) >= 0.0)
          v1300 = 0;
        else
          v1300 = v1265 - 1;
      }
LABEL_848:
      v1324 = 0;
      v1325 = 0;
      v1583 = v1270;
      v1582 = v1270;
      v1581 = v1270;
      v1580 = v1270;
      v1579 = v1270;
      v1578 = v1270;
      *(_OWORD *)v1577 = v1270;
      *(_OWORD *)v1576 = v1270;
      v1575 = v1270;
      *(_OWORD *)v1574 = v1270;
      v1326 = *(_OWORD *)v1268;
      v1575 = *(_OWORD *)(v1268 + 16);
      *(_OWORD *)v1574 = v1326;
      v1327 = *(_OWORD *)(v1268 + 32);
      v1328 = *(_OWORD *)(v1268 + 48);
      v1329 = *(_OWORD *)(v1268 + 64);
      v1579 = *(_OWORD *)(v1268 + 80);
      v1578 = v1329;
      *(_OWORD *)v1577 = v1328;
      *(_OWORD *)v1576 = v1327;
      v1330 = *(_OWORD *)(v1268 + 96);
      v1331 = *(_OWORD *)(v1268 + 112);
      v1332 = *(_OWORD *)(v1268 + 128);
      v1583 = *(_OWORD *)(v1268 + 144);
      v1582 = v1332;
      v1581 = v1331;
      v1580 = v1330;
      v1333 = (_OWORD *)(v1268 + 160 * v1300);
      v1334 = v1333[1];
      *(_OWORD *)v1268 = *v1333;
      *(_OWORD *)(v1268 + 16) = v1334;
      v1335 = v1333[2];
      v1336 = v1333[3];
      v1337 = v1333[5];
      *(_OWORD *)(v1268 + 64) = v1333[4];
      *(_OWORD *)(v1268 + 80) = v1337;
      *(_OWORD *)(v1268 + 32) = v1335;
      *(_OWORD *)(v1268 + 48) = v1336;
      v1338 = v1333[6];
      v1339 = v1333[7];
      v1340 = v1333[9];
      *(_OWORD *)(v1268 + 128) = v1333[8];
      *(_OWORD *)(v1268 + 144) = v1340;
      *(_OWORD *)(v1268 + 96) = v1338;
      *(_OWORD *)(v1268 + 112) = v1339;
      v1341 = v1575;
      *v1333 = *(_OWORD *)v1574;
      v1333[1] = v1341;
      v1342 = *(_OWORD *)v1576;
      v1343 = *(_OWORD *)v1577;
      v1344 = v1579;
      v1333[4] = v1578;
      v1333[5] = v1344;
      v1333[2] = v1342;
      v1333[3] = v1343;
      v1345 = v1580;
      v1346 = v1581;
      v1347 = v1583;
      v1333[8] = v1582;
      v1333[9] = v1347;
      v1333[6] = v1345;
      v1333[7] = v1346;
      v1348 = v1265 - 1;
      v1349 = v1268 + 164;
      do
      {
        if ((float)(*(float *)(v1268 + 4) - *(float *)v1349) <= 0.0)
        {
          ++v1325;
          v1583 = v1270;
          v1582 = v1270;
          v1581 = v1270;
          v1580 = v1270;
          v1579 = v1270;
          v1578 = v1270;
          *(_OWORD *)v1577 = v1270;
          *(_OWORD *)v1576 = v1270;
          v1575 = v1270;
          *(_OWORD *)v1574 = v1270;
          v1350 = *(_OWORD *)(v1349 - 4);
          v1575 = *(_OWORD *)(v1349 + 12);
          *(_OWORD *)v1574 = v1350;
          v1351 = *(_OWORD *)(v1349 + 28);
          v1352 = *(_OWORD *)(v1349 + 44);
          v1353 = *(_OWORD *)(v1349 + 60);
          v1579 = *(_OWORD *)(v1349 + 76);
          v1578 = v1353;
          *(_OWORD *)v1577 = v1352;
          *(_OWORD *)v1576 = v1351;
          v1354 = *(_OWORD *)(v1349 + 92);
          v1355 = *(_OWORD *)(v1349 + 108);
          v1356 = *(_OWORD *)(v1349 + 124);
          v1583 = *(_OWORD *)(v1349 + 140);
          v1582 = v1356;
          v1581 = v1355;
          v1580 = v1354;
          v1357 = (__int128 *)(v1268 + 160 * v1325);
          v1358 = *v1357;
          *(_OWORD *)(v1349 + 12) = v1357[1];
          *(_OWORD *)(v1349 - 4) = v1358;
          v1359 = v1357[2];
          v1360 = v1357[3];
          v1361 = v1357[4];
          *(_OWORD *)(v1349 + 76) = v1357[5];
          *(_OWORD *)(v1349 + 60) = v1361;
          *(_OWORD *)(v1349 + 44) = v1360;
          *(_OWORD *)(v1349 + 28) = v1359;
          v1362 = v1357[6];
          v1363 = v1357[7];
          v1364 = v1357[8];
          *(_OWORD *)(v1349 + 140) = v1357[9];
          *(_OWORD *)(v1349 + 124) = v1364;
          *(_OWORD *)(v1349 + 108) = v1363;
          *(_OWORD *)(v1349 + 92) = v1362;
          v1365 = v1575;
          *v1357 = *(_OWORD *)v1574;
          v1357[1] = v1365;
          v1366 = *(_OWORD *)v1576;
          v1367 = *(_OWORD *)v1577;
          v1368 = v1579;
          v1357[4] = v1578;
          v1357[5] = v1368;
          v1357[2] = v1366;
          v1357[3] = v1367;
          v1369 = v1580;
          v1370 = v1581;
          v1371 = v1583;
          v1357[8] = v1582;
          v1357[9] = v1371;
          v1357[6] = v1369;
          v1357[7] = v1370;
          if ((float)(*(float *)(v1268 + 4) - *(float *)v1349) == 0.0)
          {
            ++v1324;
            v1583 = v1270;
            v1582 = v1270;
            v1581 = v1270;
            v1580 = v1270;
            v1579 = v1270;
            v1578 = v1270;
            *(_OWORD *)v1577 = v1270;
            *(_OWORD *)v1576 = v1270;
            v1575 = v1270;
            *(_OWORD *)v1574 = v1270;
            v1372 = *v1357;
            v1575 = v1357[1];
            *(_OWORD *)v1574 = v1372;
            v1373 = v1357[2];
            v1374 = v1357[3];
            v1375 = v1357[4];
            v1579 = v1357[5];
            v1578 = v1375;
            *(_OWORD *)v1577 = v1374;
            *(_OWORD *)v1576 = v1373;
            v1376 = v1357[6];
            v1377 = v1357[7];
            v1378 = v1357[8];
            v1583 = v1357[9];
            v1582 = v1378;
            v1581 = v1377;
            v1580 = v1376;
            v1379 = (__int128 *)(v1268 + 160 * v1324);
            v1380 = v1379[1];
            *v1357 = *v1379;
            v1357[1] = v1380;
            v1381 = v1379[2];
            v1382 = v1379[3];
            v1383 = v1379[5];
            v1357[4] = v1379[4];
            v1357[5] = v1383;
            v1357[2] = v1381;
            v1357[3] = v1382;
            v1384 = v1379[6];
            v1385 = v1379[7];
            v1386 = v1379[9];
            v1357[8] = v1379[8];
            v1357[9] = v1386;
            v1357[6] = v1384;
            v1357[7] = v1385;
            v1387 = v1575;
            *v1379 = *(_OWORD *)v1574;
            v1379[1] = v1387;
            v1388 = *(_OWORD *)v1576;
            v1389 = *(_OWORD *)v1577;
            v1390 = v1579;
            v1379[4] = v1578;
            v1379[5] = v1390;
            v1379[2] = v1388;
            v1379[3] = v1389;
            v1391 = v1580;
            v1392 = v1581;
            v1393 = v1583;
            v1379[8] = v1582;
            v1379[9] = v1393;
            v1379[6] = v1391;
            v1379[7] = v1392;
          }
        }
        v1349 += 160;
        --v1348;
      }
      while (v1348);
      v1394 = v1324 + 1;
      v1395 = 160 * v1324;
      v1396 = -160 * v1324 + 160 * v1325;
      do
      {
        v1583 = v1270;
        v1582 = v1270;
        v1581 = v1270;
        v1580 = v1270;
        v1579 = v1270;
        v1578 = v1270;
        *(_OWORD *)v1577 = v1270;
        *(_OWORD *)v1576 = v1270;
        v1575 = v1270;
        *(_OWORD *)v1574 = v1270;
        v1397 = (_OWORD *)(v1268 + v1396);
        v1398 = *(_OWORD *)(v1268 + v1396);
        v1575 = *(_OWORD *)(v1268 + v1396 + 16);
        *(_OWORD *)v1574 = v1398;
        v1399 = *(_OWORD *)(v1268 + v1396 + 32);
        v1400 = *(_OWORD *)(v1268 + v1396 + 48);
        v1401 = *(_OWORD *)(v1268 + v1396 + 64);
        v1579 = *(_OWORD *)(v1268 + v1396 + 80);
        v1578 = v1401;
        *(_OWORD *)v1577 = v1400;
        *(_OWORD *)v1576 = v1399;
        v1402 = *(_OWORD *)(v1268 + v1396 + 96);
        v1403 = *(_OWORD *)(v1268 + v1396 + 112);
        v1404 = *(_OWORD *)(v1268 + v1396 + 128);
        v1583 = *(_OWORD *)(v1268 + v1396 + 144);
        v1582 = v1404;
        v1581 = v1403;
        v1580 = v1402;
        v1405 = (_OWORD *)(v1268 + v1395);
        v1406 = *(_OWORD *)(v1268 + v1395 + 16);
        *v1397 = *(_OWORD *)(v1268 + v1395);
        v1397[1] = v1406;
        v1407 = *(_OWORD *)(v1268 + v1395 + 32);
        v1408 = *(_OWORD *)(v1268 + v1395 + 48);
        v1409 = *(_OWORD *)(v1268 + v1395 + 80);
        v1397[4] = *(_OWORD *)(v1268 + v1395 + 64);
        v1397[5] = v1409;
        v1397[2] = v1407;
        v1397[3] = v1408;
        v1410 = *(_OWORD *)(v1268 + v1395 + 96);
        v1411 = *(_OWORD *)(v1268 + v1395 + 112);
        v1412 = *(_OWORD *)(v1268 + v1395 + 144);
        v1397[8] = *(_OWORD *)(v1268 + v1395 + 128);
        v1397[9] = v1412;
        v1397[6] = v1410;
        v1397[7] = v1411;
        v1413 = v1575;
        *v1405 = *(_OWORD *)v1574;
        v1405[1] = v1413;
        v1414 = *(_OWORD *)v1576;
        v1415 = *(_OWORD *)v1577;
        v1416 = v1579;
        v1405[4] = v1578;
        v1405[5] = v1416;
        v1405[2] = v1414;
        v1405[3] = v1415;
        v1417 = v1580;
        v1418 = v1581;
        v1419 = v1583;
        v1405[8] = v1582;
        v1405[9] = v1419;
        v1405[6] = v1417;
        v1405[7] = v1418;
        --v1394;
        v1395 -= 160;
        v1396 += 160;
      }
      while (v1394 > 0);
      v1266 = v1271 + 1;
      if (v1271 + 1 >= v1269)
      {
        v1420 = 2 * v1269;
        v1264 = (char *)malloc_type_realloc(v1264, 32 * v1269, 0x65BCD1F0uLL);
        v1270 = 0uLL;
        v1269 = v1420;
        v10 = v1426;
      }
      v1421 = &v1264[16 * v1271];
      *(_QWORD *)v1421 = v1325 - 0x3333333333333333 * ((uint64_t)(v1268 - v10[1]) >> 5) + 1;
      *((_QWORD *)v1421 + 1) = v1265 + ~v1325;
      v1265 = v1325 - v1324;
      v1267 = v1325 != v1324;
      if (v1271 < 0 && !v1265)
        goto LABEL_865;
    }
    v1304 = 0;
    v1305 = 0;
    if (v1265 <= 0x7D0)
      v1306 = 8;
    else
      v1306 = 26;
    if (v1265 <= 0x7D0)
      v1307 = 3;
    else
      v1307 = 9;
    while (2)
    {
      v1308 = (uint64_t)(v1265 - 1 + v1304) / v1306;
      v1309 = *(float *)(v1268 + 160 * v1308 + 4);
      v1310 = *(float *)(v1268 + 160 * (v1304 / v1306) + 4);
      v1311 = (uint64_t)(2 * v1265 - 2 + v1304) / v1306;
      v1312 = *(float *)(v1268 + 160 * v1311 + 4);
      if ((float)(v1309 - v1310) >= 0.0)
      {
        if ((float)(v1312 - v1310) < 0.0)
          goto LABEL_829;
        if ((float)(v1312 - v1309) < 0.0)
          goto LABEL_831;
      }
      else if ((float)(v1312 - v1309) >= 0.0)
      {
        if ((float)(v1312 - v1310) < 0.0)
        {
LABEL_831:
          v1574[v1305] = (void *)v1311;
LABEL_823:
          ++v1305;
          v1304 += 3 * v1265 - 3;
          if (v1307 != v1305)
            continue;
          while (2)
          {
            v1313 = 0;
            v1314 = 0;
            v1315 = v1307;
            v1307 /= 3uLL;
            if (v1307 <= 1)
              v1316 = 1;
            else
              v1316 = v1307;
            v1317 = 8 * v1316;
LABEL_839:
            v1318 = v1574[v1313];
            v1319 = v1574[v1313 + 1];
            v1320 = v1574[v1313 + 2];
            v1321 = *(float *)(v1268 + 160 * (_QWORD)v1319 + 4);
            v1322 = *(float *)(v1268 + 160 * (_QWORD)v1318 + 4);
            v1323 = *(float *)(v1268 + 160 * (_QWORD)v1320 + 4);
            if ((float)(v1321 - v1322) >= 0.0)
            {
              if ((float)(v1323 - v1322) < 0.0)
                goto LABEL_844;
              if ((float)(v1323 - v1321) < 0.0)
                goto LABEL_846;
            }
            else if ((float)(v1323 - v1321) >= 0.0)
            {
              if ((float)(v1323 - v1322) < 0.0)
              {
LABEL_846:
                v1574[v1314 / 8] = v1320;
LABEL_838:
                v1314 += 8;
                v1313 += 3;
                if (v1317 == v1314)
                {
                  if (v1315 < 9)
                  {
                    v1300 = (unint64_t)v1574[0];
                    goto LABEL_848;
                  }
                  continue;
                }
                goto LABEL_839;
              }
LABEL_844:
              v1574[v1314 / 8] = v1318;
              goto LABEL_838;
            }
            break;
          }
          v1574[v1314 / 8] = v1319;
          goto LABEL_838;
        }
LABEL_829:
        v1574[v1305] = (void *)(v1304 / v1306);
        goto LABEL_823;
      }
      break;
    }
    v1574[v1305] = (void *)v1308;
    goto LABEL_823;
  }
LABEL_865:
  free(v1264);
  v1263 = *(float *)(v10[1] + 4) < (float)(32 * *(_DWORD *)(v1429 + 152));
LABEL_870:
  free(v1424);
  hyp_refine_free((uint64_t)&v1551);
  return v1263;
}

void *hyp_refine_create(uint64_t a1, int a2)
{
  void *result;

  *(_QWORD *)(a1 + 40) = malloc_type_calloc(a2, 1uLL, 0x100004077774924uLL);
  *(_QWORD *)a1 = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(_QWORD *)(a1 + 168) = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(_QWORD *)(a1 + 248) = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(_QWORD *)(a1 + 8) = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(_QWORD *)(a1 + 176) = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(_QWORD *)(a1 + 256) = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(_QWORD *)(a1 + 16) = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(_QWORD *)(a1 + 184) = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(_QWORD *)(a1 + 208) = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(_QWORD *)(a1 + 24) = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(_QWORD *)(a1 + 192) = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(_QWORD *)(a1 + 216) = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(_QWORD *)(a1 + 32) = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(_QWORD *)(a1 + 200) = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(_QWORD *)(a1 + 224) = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(_QWORD *)(a1 + 48) = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(_QWORD *)(a1 + 232) = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  result = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(_QWORD *)(a1 + 240) = result;
  *(_DWORD *)(a1 + 64) = a2;
  return result;
}

float apply_pose_rotation(float *a1, float32x2_t *a2, float *a3)
{
  float v4;
  float v11;
  float v12;
  float v13;
  float v14;
  double v16;
  float v17;
  float v18;
  float v19;
  double v20;
  float32x2_t v21;
  float32x2_t v22;
  double v23;
  float v24;
  float v26[3];
  float32x2_t v27;
  float v28;
  float32x2_t v29;
  float v30;
  uint64_t v31;
  int v32;

  _D1 = *a2;
  v4 = a2[1].f32[0];
  v32 = 0;
  v31 = 0;
  _S2 = 0.0;
  __asm { FMLA            S7, S2, V1.S[1] }
  v11 = v4 + (float)(-0.0 * _D1.f32[0]);
  v12 = vmlas_n_f32(-_D1.f32[1], 0.0, _D1.f32[0]);
  v13 = vmuls_lane_f32(-(float)((float)(_D1.f32[0] * 0.0) - _D1.f32[1]), _D1, 1) + (float)(v11 * v4);
  v14 = vmlas_n_f32(-(float)(_D7.f32[0] * v4), v12, _D1.f32[0]);
  __asm { FMLA            S20, S7, V1.S[1] }
  v16 = sqrt((float)((float)((float)(v14 * v14) + (float)(v13 * v13)) + (float)(_S20 * _S20)));
  v17 = 0.0;
  v18 = 0.0;
  v19 = 0.0;
  if (v16 > 0.0)
  {
    v19 = v13 / v16;
    v18 = v14 / v16;
    v17 = _S20 / v16;
  }
  v20 = sqrt((float)((float)((float)(v11 * v11) + (float)(_D7.f32[0] * _D7.f32[0])) + (float)(v12 * v12)));
  v21 = 0;
  v22 = 0;
  if (v20 > 0.0)
  {
    _D7.f32[1] = v4 + (float)(-0.0 * _D1.f32[0]);
    v22 = vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(_D7), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v20, 0)));
    _S2 = v12 / v20;
  }
  v23 = sqrt((float)((float)((float)(_D1.f32[1] * _D1.f32[1]) + (float)(_D1.f32[0] * _D1.f32[0])) + (float)(v4 * v4)));
  v24 = 0.0;
  if (v23 > 0.0)
  {
    v21 = vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(_D1), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v23, 0)));
    v24 = v4 / v23;
  }
  v26[0] = v19;
  v26[1] = v18;
  v26[2] = v17;
  v27 = v22;
  v28 = _S2;
  v29 = v21;
  v30 = v24;
  return g_coordsf_conv(v26, a1, a3);
}

void hyp_refine_free(uint64_t a1)
{
  free(*(void **)(a1 + 40));
  free(*(void **)a1);
  free(*(void **)(a1 + 168));
  free(*(void **)(a1 + 248));
  free(*(void **)(a1 + 8));
  free(*(void **)(a1 + 176));
  free(*(void **)(a1 + 256));
  free(*(void **)(a1 + 16));
  free(*(void **)(a1 + 184));
  free(*(void **)(a1 + 208));
  free(*(void **)(a1 + 24));
  free(*(void **)(a1 + 192));
  free(*(void **)(a1 + 216));
  free(*(void **)(a1 + 32));
  free(*(void **)(a1 + 200));
  free(*(void **)(a1 + 224));
  free(*(void **)(a1 + 48));
  free(*(void **)(a1 + 232));
  free(*(void **)(a1 + 240));
  *(_DWORD *)(a1 + 64) = 0;
}

_QWORD *rkd_create_ex(const void *a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;
  size_t v17;
  void *v18;

  v12 = malloc_type_calloc(1uLL, 0x20uLL, 0x10B0040E7E5B2BFuLL);
  v13 = a4 * (uint64_t)(int)a3;
  if (v13 >= 0x7FFFFFFF)
    __assert_rtn("rkd_create_ex", "rkd.c", 690, "(size_t)n * k < INT32_MAX && \"Cannot create a rkd tree with more then INT32_MAX elements\"");
  v14 = v12;
  if (a5)
  {
    v15 = 4 * v13;
    v16 = malloc_type_malloc(4 * v13, 0x100004052888210uLL);
    *v14 = v16;
    if (a4)
      memcpy(v16, a1, v15);
  }
  else
  {
    *v12 = a1;
  }
  v14[1] = a2;
  if (a4 <= 1)
    v17 = 1;
  else
    v17 = a4;
  v18 = malloc_type_calloc(v17, 0xCuLL, 0x10000403E1C8BA9uLL);
  v14[2] = v18;
  *((_DWORD *)v14 + 6) = a3;
  *((_DWORD *)v14 + 7) = a4;
  if (a4 >= 1 && (a4 <= 0xC350 || v18))
    rkd_split_node((uint64_t)v18, (float32x4_t *)*v14, (_DWORD *)v14[1], a3, a4, -1, a6);
  return v14;
}

double rkd_split_node(uint64_t a1, float32x4_t *a2, _DWORD *a3, uint64_t a4, int a5, int a6, uint64_t a7)
{
  size_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  float32_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  float v23;
  int v24;
  float v25;
  float v26;
  float *v27;
  float v28;
  float v29;
  float v30;
  float *v31;
  float v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  float32x4_t *v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  uint64_t v43;
  float *v44;
  uint64_t v45;
  uint64_t v46;
  double result;
  uint64_t v48;
  int v49;
  float v50;
  int v51;
  float v52;
  float v53;
  float *v54;
  float v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  float v59;
  float *v60;
  float v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  uint64_t v66;
  float32x4_t *v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  uint64_t v72;
  float *v73;
  _DWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD v77[2];

  v77[1] = *MEMORY[0x24BDAC8D0];
  v77[0] = (int)a4;
  v14 = 4 * (int)a4;
  MEMORY[0x24BDAC7A8](a1, a2);
  v16 = (char *)v77 - v15;
  bzero((char *)v77 - v15, v14);
  if (*(_DWORD *)a7 > a5)
    goto LABEL_2;
  v21 = *(_DWORD *)(a7 + 8);
  if (v21 == 2)
  {
    v45 = rkd_split_dim_bbox(a2, a4, a5);
  }
  else
  {
    if (v21 != 1)
    {
      if (v21)
        v22 = 0xFFFFFFFFLL;
      else
        v22 = ((a6 + 1) % (int)a4);
      goto LABEL_39;
    }
    v45 = rkd_split_dim_sdev(a2, a4, a5);
  }
  v22 = v45;
LABEL_39:
  *(_DWORD *)(a1 + 8) = v22;
  v46 = rkd_split_median((uint64_t)a2, (uint64_t)a3, a4, a5, v22, v16, *(float *)(a7 + 4));
  if ((_DWORD)v46 == -1)
  {
    if ((int)a4 < 2)
    {
LABEL_2:
      if (a5 <= 2)
      {
        v23 = 0.0;
        if (a5 != 2)
        {
LABEL_85:
          *(float *)a1 = v23;
          result = NAN;
          *(_QWORD *)(a1 + 4) = -1;
          return result;
        }
      }
      else
      {
        v17 = rkd_closest_to_mean((float32x2_t *)a2, a4, a5);
        v18 = &a2->f32[v17 * (int)a4];
        memcpy(v16, v18, v14);
        memmove(v18, a2, v14);
        memcpy(a2, v16, v14);
        if (a3)
        {
          v19 = v17;
          v20 = a3[v19];
          a3[v19] = *a3;
          *a3 = v20;
        }
      }
      v24 = a5 - 1;
      if ((_DWORD)a4 == 2)
      {
        v30 = a2->f32[0];
        v31 = &a2->f32[v77[0] + 1];
        v28 = 0.0;
        do
        {
          v32 = (float)(a2->f32[1] - *v31) * (float)(a2->f32[1] - *v31);
          if ((float)(v32 + (float)((float)(v30 - *(v31 - 1)) * (float)(v30 - *(v31 - 1)))) > v28)
            v28 = v32 + (float)((float)(v30 - *(v31 - 1)) * (float)(v30 - *(v31 - 1)));
          v31 += v77[0];
          --v24;
        }
        while (v24);
        goto LABEL_84;
      }
      if ((_DWORD)a4 == 3)
      {
        v25 = a2->f32[0];
        v26 = a2->f32[1];
        v27 = &a2->f32[v77[0] + 2];
        v28 = 0.0;
        do
        {
          v29 = a2->f32[2] - *v27;
          if ((float)((float)((float)((float)(v26 - *(v27 - 1)) * (float)(v26 - *(v27 - 1)))
                             + (float)((float)(v25 - *(v27 - 2)) * (float)(v25 - *(v27 - 2))))
                     + (float)(v29 * v29)) > v28)
            v28 = (float)((float)((float)(v26 - *(v27 - 1)) * (float)(v26 - *(v27 - 1)))
                        + (float)((float)(v25 - *(v27 - 2)) * (float)(v25 - *(v27 - 2))))
                + (float)(v29 * v29);
          v27 += v77[0];
          --v24;
        }
        while (v24);
        goto LABEL_84;
      }
      if ((int)a4 < 1)
      {
        v28 = 0.0;
LABEL_84:
        v23 = sqrtf(v28);
        goto LABEL_85;
      }
      v33 = 0;
      v28 = 0.0;
      v34 = v77[0];
      while (1)
      {
        if (a4 >= 8)
        {
          v36 = 0.0;
          v37 = a4 & 0xFFFFFFF8;
          v38 = a2;
          do
          {
            v39 = vsubq_f32(*v38, *(float32x4_t *)((char *)v38 + v34 * 4));
            v40 = vsubq_f32(v38[1], *(float32x4_t *)((char *)v38 + v34 * 4 + 16));
            v41 = vmulq_f32(v39, v39);
            v42 = vmulq_f32(v40, v40);
            v36 = (float)((float)((float)((float)((float)((float)((float)(v36 + v41.f32[0]) + v41.f32[1]) + v41.f32[2])
                                                + v41.f32[3])
                                        + v42.f32[0])
                                + v42.f32[1])
                        + v42.f32[2])
                + v42.f32[3];
            v38 += 2;
            v37 -= 8;
          }
          while (v37);
          v35 = a4 & 0xFFFFFFF8;
          if (v35 == a4)
            goto LABEL_24;
        }
        else
        {
          v35 = 0;
          v36 = 0.0;
        }
        v43 = a4 - v35;
        v44 = &a2->f32[v35];
        do
        {
          v36 = v36 + (float)((float)(*v44 - v44[v34]) * (float)(*v44 - v44[v34]));
          ++v44;
          --v43;
        }
        while (v43);
LABEL_24:
        if (v36 > v28)
          v28 = v36;
        ++v33;
        v34 += v77[0];
        if (v33 == v24)
          goto LABEL_84;
      }
    }
    v56 = 1;
    while (1)
    {
      v57 = ((*(_DWORD *)(a1 + 8) + 1) % (int)a4);
      *(_DWORD *)(a1 + 8) = v57;
      v58 = rkd_split_median((uint64_t)a2, (uint64_t)a3, a4, a5, v57, v16, *(float *)(a7 + 4));
      if ((_DWORD)v58 != -1)
        break;
      if ((_DWORD)a4 == ++v56)
        goto LABEL_2;
    }
    v46 = v58;
  }
  memcpy(v16, &a2->f32[(int)v46 * (int)a4], v14);
  memmove(&a2->f32[(int)v46 * (int)a4], a2, v14);
  memcpy(a2, v16, v14);
  if (a3)
  {
    v48 = (int)v46;
    v49 = a3[v48];
    a3[v48] = *a3;
    *a3 = v49;
  }
  v50 = 0.0;
  v51 = a5 - 1;
  if (a5 > 1)
  {
    if ((_DWORD)a4 == 2)
    {
      v59 = a2->f32[0];
      v60 = &a2->f32[v77[0] + 1];
      do
      {
        v61 = (float)(a2->f32[1] - *v60) * (float)(a2->f32[1] - *v60);
        if ((float)(v61 + (float)((float)(v59 - *(v60 - 1)) * (float)(v59 - *(v60 - 1)))) > v50)
          v50 = v61 + (float)((float)(v59 - *(v60 - 1)) * (float)(v59 - *(v60 - 1)));
        v60 += v77[0];
        --v51;
      }
      while (v51);
      goto LABEL_73;
    }
    if ((_DWORD)a4 == 3)
    {
      v52 = a2->f32[0];
      v53 = a2->f32[1];
      v54 = &a2->f32[v77[0] + 2];
      do
      {
        v55 = a2->f32[2] - *v54;
        if ((float)((float)((float)((float)(v53 - *(v54 - 1)) * (float)(v53 - *(v54 - 1)))
                           + (float)((float)(v52 - *(v54 - 2)) * (float)(v52 - *(v54 - 2))))
                   + (float)(v55 * v55)) > v50)
          v50 = (float)((float)((float)(v53 - *(v54 - 1)) * (float)(v53 - *(v54 - 1)))
                      + (float)((float)(v52 - *(v54 - 2)) * (float)(v52 - *(v54 - 2))))
              + (float)(v55 * v55);
        v54 += v77[0];
        --v51;
      }
      while (v51);
      goto LABEL_73;
    }
    if ((int)a4 >= 1)
    {
      v62 = 0;
      v63 = v77[0];
      do
      {
        if (a4 >= 8)
        {
          v65 = 0.0;
          v66 = a4 & 0xFFFFFFF8;
          v67 = a2;
          do
          {
            v68 = vsubq_f32(*v67, *(float32x4_t *)((char *)v67 + v63 * 4));
            v69 = vsubq_f32(v67[1], *(float32x4_t *)((char *)v67 + v63 * 4 + 16));
            v70 = vmulq_f32(v68, v68);
            v71 = vmulq_f32(v69, v69);
            v65 = (float)((float)((float)((float)((float)((float)((float)(v65 + v70.f32[0]) + v70.f32[1]) + v70.f32[2])
                                                + v70.f32[3])
                                        + v71.f32[0])
                                + v71.f32[1])
                        + v71.f32[2])
                + v71.f32[3];
            v67 += 2;
            v66 -= 8;
          }
          while (v66);
          v64 = a4 & 0xFFFFFFF8;
          if (v64 == a4)
            goto LABEL_62;
        }
        else
        {
          v64 = 0;
          v65 = 0.0;
        }
        v72 = a4 - v64;
        v73 = &a2->f32[v64];
        do
        {
          v65 = v65 + (float)((float)(*v73 - v73[v63]) * (float)(*v73 - v73[v63]));
          ++v73;
          --v72;
        }
        while (v72);
LABEL_62:
        if (v65 > v50)
          v50 = v65;
        ++v62;
        v63 += v77[0];
      }
      while (v62 != v51);
    }
  }
LABEL_73:
  *(float *)&result = sqrtf(v50);
  *(_DWORD *)a1 = LODWORD(result);
  *(_DWORD *)(a1 + 4) = v46;
  if ((int)v46 >= 1)
  {
    if (a3)
      v74 = a3 + 1;
    else
      v74 = 0;
    rkd_split_node(a1 + 12, &a2->f32[v77[0]], v74, a4, v46, *(unsigned int *)(a1 + 8), a7);
  }
  v75 = (a5 - (v46 + 1));
  if ((int)v75 >= 1)
  {
    if (a3)
      v76 = (uint64_t)&a3[(int)v46 + 1];
    else
      v76 = 0;
    rkd_split_node(a1 + 12 * (int)v46 + 12, &a2->f32[((int)v46 + 1) * (int)a4], v76, a4, v75, *(unsigned int *)(a1 + 8), a7);
  }
  return result;
}

uint64_t rkd_knn_sort(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t k;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t j;
  uint64_t v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t m;
  uint64_t v38;
  float v39;
  float v40;
  uint64_t v41;

  if (a2 >= 2)
  {
    v4 = 0;
    if (a3)
    {
      if (a4)
      {
        v5 = a4 + 4;
        v6 = a3 + 8;
        v7 = result + 4;
        for (i = 1; i != a2; ++i)
        {
          v9 = v4;
          do
          {
            v10 = *(float *)(v7 + 4 * v9);
            v11 = *(float *)(result + 4 * v9);
            if (v10 >= v11)
              break;
            v12 = 4 * v9;
            *(float *)(v7 + v12) = v11;
            v13 = 4 * v9;
            *(float *)(result + v13) = v10;
            v14 = *(_QWORD *)(v6 + 8 * v9);
            v15 = 8 * v9;
            *(_QWORD *)(v6 + 8 * v9) = *(_QWORD *)(a3 + v15);
            *(_QWORD *)(a3 + v15) = v14;
            LODWORD(v15) = *(_DWORD *)(v5 + 4 * v9);
            *(_DWORD *)(v5 + v12) = *(_DWORD *)(a4 + v13);
            *(_DWORD *)(a4 + v13) = v15;
            v16 = v9-- + 1;
          }
          while (v16 > 1);
          ++v4;
        }
      }
      else
      {
        v27 = a3 + 8;
        v28 = result + 4;
        for (j = 1; j != a2; ++j)
        {
          v30 = v4;
          do
          {
            v31 = *(float *)(v28 + 4 * v30);
            v32 = *(float *)(result + 4 * v30);
            if (v31 >= v32)
              break;
            *(float *)(v28 + 4 * v30) = v32;
            *(float *)(result + 4 * v30) = v31;
            v33 = *(_QWORD *)(v27 + 8 * v30);
            v34 = 8 * v30;
            *(_QWORD *)(v27 + 8 * v30) = *(_QWORD *)(a3 + v34);
            *(_QWORD *)(a3 + v34) = v33;
            v35 = v30-- + 1;
          }
          while (v35 > 1);
          ++v4;
        }
      }
    }
    else if (a4)
    {
      v17 = a4 + 4;
      v18 = result + 4;
      for (k = 1; k != a2; ++k)
      {
        v20 = v4;
        do
        {
          v21 = *(float *)(v18 + 4 * v20);
          v22 = *(float *)(result + 4 * v20);
          if (v21 >= v22)
            break;
          v23 = 4 * v20;
          *(float *)(v18 + v23) = v22;
          v24 = 4 * v20;
          *(float *)(result + v24) = v21;
          v25 = *(_DWORD *)(v17 + 4 * v20);
          *(_DWORD *)(v17 + v23) = *(_DWORD *)(a4 + v24);
          *(_DWORD *)(a4 + v24) = v25;
          v26 = v20-- + 1;
        }
        while (v26 > 1);
        ++v4;
      }
    }
    else
    {
      v36 = result + 4;
      for (m = 1; m != a2; ++m)
      {
        v38 = v4;
        do
        {
          v39 = *(float *)(v36 + 4 * v38);
          v40 = *(float *)(result + 4 * v38);
          if (v39 >= v40)
            break;
          *(float *)(v36 + 4 * v38) = v40;
          *(float *)(result + 4 * v38) = v39;
          v41 = v38-- + 1;
        }
        while (v41 > 1);
        ++v4;
      }
    }
  }
  return result;
}

unint64_t rkd_nn_app(unint64_t result, float *a2, float **a3, _DWORD *a4, int a5, float a6)
{
  int v6;
  int v7;
  int v8;
  float *v9;
  _DWORD *v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  float32x4_t *v18;
  uint64_t v19;
  float32x4_t *v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  float *v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  float v35;
  float v36;
  int v37;
  float v38;
  _OWORD *v39;
  uint64_t v40;
  _DWORD *v41;
  float v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  unint64_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float v51;
  float v52;
  _OWORD *v53;
  _DWORD *v54;
  int v55;
  uint64_t v56;
  _DWORD *v57;
  BOOL v58;
  float v59;
  _OWORD v60[128];
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD *)(result + 28);
  if (v6 < 1)
    return result;
  v7 = 0;
  v8 = 0;
  v10 = *(_DWORD **)(result + 8);
  v9 = *(float **)(result + 16);
  v11 = *(float **)result;
  v12 = *(int *)(result + 24);
  v13 = *(unsigned int *)(result + 24);
  v14 = v13 & 0xFFFFFFF8;
LABEL_3:
  if ((_DWORD)v12 == 2)
  {
    v16 = (float)((float)(v11[1] - a2[1]) * (float)(v11[1] - a2[1]))
        + (float)((float)(*v11 - *a2) * (float)(*v11 - *a2));
    goto LABEL_16;
  }
  if ((_DWORD)v12 == 3)
  {
    v15 = v11[2] - a2[2];
    v16 = (float)((float)((float)(v11[1] - a2[1]) * (float)(v11[1] - a2[1]))
                + (float)((float)(*v11 - *a2) * (float)(*v11 - *a2)))
        + (float)(v15 * v15);
    goto LABEL_16;
  }
  if ((int)v12 < 1)
  {
    v16 = 0.0;
    goto LABEL_16;
  }
  if (v12 < 8)
  {
    v17 = 0;
    v16 = 0.0;
LABEL_14:
    v25 = v13 - v17;
    v26 = v17;
    v27 = &a2[v17];
    v28 = &v11[v26];
    do
    {
      v29 = *v28++;
      v30 = v29;
      v31 = *v27++;
      v16 = v16 + (float)((float)(v30 - v31) * (float)(v30 - v31));
      --v25;
    }
    while (v25);
    goto LABEL_16;
  }
  v18 = (float32x4_t *)(v11 + 4);
  v16 = 0.0;
  v19 = v13 & 0xFFFFFFF8;
  v20 = (float32x4_t *)(a2 + 4);
  do
  {
    v21 = vsubq_f32(v18[-1], v20[-1]);
    v22 = vsubq_f32(*v18, *v20);
    v23 = vmulq_f32(v21, v21);
    v24 = vmulq_f32(v22, v22);
    v16 = (float)((float)((float)((float)((float)((float)((float)(v16 + v23.f32[0]) + v23.f32[1]) + v23.f32[2])
                                        + v23.f32[3])
                                + v24.f32[0])
                        + v24.f32[1])
                + v24.f32[2])
        + v24.f32[3];
    v18 += 2;
    v20 += 2;
    v19 -= 8;
  }
  while (v19);
  v17 = v13 & 0xFFFFFFF8;
  if (v14 != v13)
    goto LABEL_14;
LABEL_16:
  v32 = sqrtf(v16);
  if (v32 < a6)
  {
    if (a3)
      *a3 = v11;
    a6 = v32;
    if (a4)
    {
      *a4 = *v10;
      a6 = v32;
    }
  }
  result = *((unsigned int *)v9 + 1);
  v33 = *v9;
  if ((_DWORD)result != -1)
    goto LABEL_22;
  if ((float)(v32 - v33) >= a6)
    goto LABEL_68;
  v42 = a6 * a6;
  if (v6 > 1)
  {
    v11 += v12;
    v43 = 1;
    while (1)
    {
      if ((_DWORD)v13 == 2)
      {
        v32 = (float)((float)(v11[1] - a2[1]) * (float)(v11[1] - a2[1]))
            + (float)((float)(*v11 - *a2) * (float)(*v11 - *a2));
      }
      else if ((_DWORD)v13 == 3)
      {
        v44 = v11[2] - a2[2];
        v32 = (float)((float)((float)(v11[1] - a2[1]) * (float)(v11[1] - a2[1]))
                    + (float)((float)(*v11 - *a2) * (float)(*v11 - *a2)))
            + (float)(v44 * v44);
      }
      else if ((int)v13 < 1)
      {
        v32 = 0.0;
      }
      else
      {
        if (v13 >= 8)
        {
          v46 = 0;
          v32 = 0.0;
          do
          {
            v47 = vsubq_f32(*(float32x4_t *)&v11[v46 / 4], *(float32x4_t *)&a2[v46 / 4]);
            v48 = vsubq_f32(*(float32x4_t *)&v11[v46 / 4 + 4], *(float32x4_t *)&a2[v46 / 4 + 4]);
            v49 = vmulq_f32(v47, v47);
            v50 = vmulq_f32(v48, v48);
            v32 = (float)((float)((float)((float)((float)((float)((float)(v32 + v49.f32[0]) + v49.f32[1]) + v49.f32[2])
                                                + v49.f32[3])
                                        + v50.f32[0])
                                + v50.f32[1])
                        + v50.f32[2])
                + v50.f32[3];
            v46 += 32;
          }
          while (((4 * v13) & 0x3FFFFFFE0) != v46);
          v45 = v13 & 0x7FFFFFF8;
          if (v14 == v13)
            goto LABEL_50;
        }
        else
        {
          v45 = 0;
          v32 = 0.0;
        }
        do
        {
          v51 = v11[v45] - a2[v45];
          v32 = v32 + (float)(v51 * v51);
          ++v45;
        }
        while (v13 != v45);
      }
LABEL_50:
      if (v32 < v42)
      {
        if (a3)
          *a3 = v11;
        v42 = v32;
        if (a4)
        {
          *a4 = v10[v43];
          v42 = v32;
        }
      }
      ++v43;
      v11 += v12;
      if (v43 == v6)
      {
        result = *((unsigned int *)v9 + 1);
        a6 = sqrtf(v42);
        if ((_DWORD)result == -1)
          goto LABEL_68;
LABEL_22:
        if ((float)(v32 - v33) >= a6)
          goto LABEL_68;
        v34 = *((int *)v9 + 2);
        v35 = a2[v34];
        v36 = v11[v34];
        if (v35 >= v36)
        {
          if ((int)result >= 1)
          {
            v52 = v35 - v36;
            if (v52 < a6)
            {
              v53 = &v60[2 * v7];
              *(_QWORD *)v53 = v9 + 3;
              *((_QWORD *)v53 + 1) = &v11[v12];
              v54 = v10 + 1;
              if (!v10)
                v54 = 0;
              *((_QWORD *)v53 + 2) = v54;
              *((_DWORD *)v53 + 6) = result;
              *((float *)v53 + 7) = v52;
              ++v7;
            }
          }
          v55 = result;
          v56 = (int)result + 1;
          if (v6 <= (int)v56)
            goto LABEL_68;
          v11 += (int)v56 * (int)v13;
          v57 = &v10[v56];
          if (v10)
            v10 = v57;
          else
            v10 = 0;
          result = (v6 + ~(_DWORD)result);
          v9 += 3 * v55 + 3;
          v6 = result;
          if ((int)result <= 0)
            return result;
        }
        else
        {
          v37 = v6 + ~(_DWORD)result;
          if (v37 >= 1)
          {
            v38 = v36 - v35;
            if (v38 < a6)
            {
              v39 = &v60[2 * v7];
              v40 = (int)result + 1;
              *(_QWORD *)v39 = &v9[3 * (int)result + 3];
              *((_QWORD *)v39 + 1) = &v11[(int)v40 * (int)v12];
              v41 = &v10[v40];
              if (!v10)
                v41 = 0;
              *((_QWORD *)v39 + 2) = v41;
              *((_DWORD *)v39 + 6) = v37;
              *((float *)v39 + 7) = v38;
              ++v7;
            }
          }
          if ((int)result < 1)
            goto LABEL_68;
          v11 += v12;
          if (v10)
            ++v10;
          else
            v10 = 0;
          v9 += 3;
          v6 = result;
        }
        goto LABEL_3;
      }
    }
  }
  a6 = sqrtf(v42);
LABEL_68:
  if (v8 != a5)
  {
    result = (unint64_t)&v60[2 * v7];
    while (1)
    {
      v58 = __OFSUB__(v7--, 1);
      if (v7 < 0 != v58)
        break;
      v59 = *(float *)(result - 4);
      result -= 32;
      if (v59 < a6)
      {
        v9 = *(float **)result;
        v11 = *(float **)(result + 8);
        v10 = *(_DWORD **)(result + 16);
        ++v8;
        result = *(unsigned int *)(result + 24);
        v6 = result;
        if ((int)result > 0)
          goto LABEL_3;
        return result;
      }
    }
  }
  return result;
}

uint64_t rkd_knn_app(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, float a7)
{
  int *v12;
  float *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  size_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  float v32;
  float v33;
  uint64_t v34;
  float32x4_t *v35;
  uint64_t v36;
  float32x4_t *v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  uint64_t v42;
  uint64_t v43;
  float *v44;
  float *v45;
  float v46;
  float v47;
  float v48;
  float v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  uint64_t v66;
  float v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  float v71;
  uint64_t v72;
  float v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  float v77;
  uint64_t v78;
  float v79;
  int v80;
  float v81;
  uint64_t v82;
  float v83;
  float v84;
  int v85;
  float v86;
  _OWORD *v87;
  uint64_t v88;
  int *v89;
  float v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  float v99;
  float v100;
  uint64_t v101;
  unint64_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float v107;
  int v108;
  float v109;
  uint64_t v110;
  uint64_t v111;
  float v112;
  uint64_t v113;
  float v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  float v120;
  uint64_t v121;
  float v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  float v126;
  uint64_t v127;
  float v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  float v132;
  uint64_t v133;
  float v134;
  float v135;
  _OWORD *v136;
  _DWORD *v137;
  uint64_t v138;
  int *v139;
  _OWORD *v140;
  BOOL v141;
  float v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  float32x4_t *v149;
  int v150;
  int *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  _OWORD v158[128];
  uint64_t v159;

  v156 = a6;
  v159 = *MEMORY[0x24BDAC8D0];
  v12 = *(int **)(a1 + 8);
  v157 = *(_QWORD *)(a1 + 16);
  v13 = *(float **)a1;
  v14 = *(_DWORD *)(a1 + 28);
  v15 = *(int *)(a1 + 24);
  MEMORY[0x24BDAC7A8](a1, 4 * (int)a5);
  v17 = (char *)&v146 - v16;
  bzero((char *)&v146 - v16, v18);
  if (v14 < 1)
  {
    v22 = 0;
    LODWORD(v27) = a5;
    goto LABEL_131;
  }
  v19 = v14;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = v15;
  v24 = (int)a5 - 1;
  v155 = v15 & 0xFFFFFFF8;
  v149 = (float32x4_t *)(a2 + 4);
  v25 = 4 * v15;
  v26 = (4 * v15) & 0x3FFFFFFE0;
  v27 = a5;
  v28 = v156;
  v29 = v15;
  v30 = v157;
  v31 = v12;
LABEL_3:
  if ((_DWORD)v29 == 2)
  {
    v33 = (float)((float)(v13[1] - a2[1]) * (float)(v13[1] - a2[1]))
        + (float)((float)(*v13 - *a2) * (float)(*v13 - *a2));
    goto LABEL_16;
  }
  if ((_DWORD)v29 == 3)
  {
    v32 = v13[2] - a2[2];
    v33 = (float)((float)((float)(v13[1] - a2[1]) * (float)(v13[1] - a2[1]))
                + (float)((float)(*v13 - *a2) * (float)(*v13 - *a2)))
        + (float)(v32 * v32);
    goto LABEL_16;
  }
  if ((int)v29 < 1)
  {
    v33 = 0.0;
    goto LABEL_16;
  }
  if (v29 < 8)
  {
    v34 = 0;
    v33 = 0.0;
LABEL_14:
    v42 = v23 - v34;
    v43 = v34;
    v44 = &a2[v34];
    v45 = &v13[v43];
    do
    {
      v46 = *v45++;
      v47 = v46;
      v48 = *v44++;
      v33 = v33 + (float)((float)(v47 - v48) * (float)(v47 - v48));
      --v42;
    }
    while (v42);
    goto LABEL_16;
  }
  v35 = (float32x4_t *)(v13 + 4);
  v33 = 0.0;
  v36 = v155;
  v37 = v149;
  do
  {
    v38 = vsubq_f32(v35[-1], v37[-1]);
    v39 = vsubq_f32(*v35, *v37);
    v40 = vmulq_f32(v38, v38);
    v41 = vmulq_f32(v39, v39);
    v33 = (float)((float)((float)((float)((float)((float)((float)(v33 + v40.f32[0]) + v40.f32[1]) + v40.f32[2])
                                        + v40.f32[3])
                                + v41.f32[0])
                        + v41.f32[1])
                + v41.f32[2])
        + v41.f32[3];
    v35 += 2;
    v37 += 2;
    v36 -= 8;
  }
  while (v36);
  v34 = v155;
  if (v155 != v23)
    goto LABEL_14;
LABEL_16:
  v49 = sqrtf(v33);
  if (v49 >= a7)
    goto LABEL_47;
  if (v31)
  {
    v50 = *v31;
    v51 = (int)v22;
    if ((int)v22 < (int)v27)
      goto LABEL_19;
LABEL_26:
    v55 = v51 - 1;
    *(float *)&v17[4 * v55] = v49;
    if (a3)
      *(_QWORD *)(a3 + 8 * v55) = v13;
    if (a4)
      *(_DWORD *)(a4 + 4 * v55) = v50;
    if ((int)v22 >= 2)
    {
      v56 = v55;
      if (a3)
      {
        if (a4)
        {
          do
          {
            v57 = *(float *)&v17[4 * v56];
            v58 = v56 - 1;
            v59 = *(float *)&v17[4 * (v56 - 1)];
            if (v57 >= v59)
              break;
            v60 = 4 * v56;
            *(float *)&v17[v60] = v59;
            v61 = 4 * (v56 - 1);
            *(float *)&v17[v61] = v57;
            v62 = 8 * v56;
            v63 = *(_QWORD *)(a3 + v62);
            v64 = 8 * v58;
            *(_QWORD *)(a3 + v62) = *(_QWORD *)(a3 + v64);
            *(_QWORD *)(a3 + v64) = v63;
            LODWORD(v62) = *(_DWORD *)(a4 + v60);
            *(_DWORD *)(a4 + v60) = *(_DWORD *)(a4 + v61);
            *(_DWORD *)(a4 + v61) = v62;
            v56 = v58;
          }
          while ((unint64_t)(v58 + 1) > 1);
        }
        else
        {
          do
          {
            v65 = *(float *)&v17[4 * v56];
            v66 = v56 - 1;
            v67 = *(float *)&v17[4 * (v56 - 1)];
            if (v65 >= v67)
              break;
            *(float *)&v17[4 * v56] = v67;
            *(float *)&v17[4 * (v56 - 1)] = v65;
            v68 = 8 * v56;
            v69 = *(_QWORD *)(a3 + v68);
            v70 = 8 * v66;
            *(_QWORD *)(a3 + v68) = *(_QWORD *)(a3 + v70);
            *(_QWORD *)(a3 + v70) = v69;
            v56 = v66;
          }
          while ((unint64_t)(v66 + 1) > 1);
        }
      }
      else if (a4)
      {
        do
        {
          v71 = *(float *)&v17[4 * v56];
          v72 = v56 - 1;
          v73 = *(float *)&v17[4 * (v56 - 1)];
          if (v71 >= v73)
            break;
          v74 = 4 * v56;
          *(float *)&v17[v74] = v73;
          v75 = 4 * v72;
          *(float *)&v17[v75] = v71;
          v76 = *(_DWORD *)(a4 + v74);
          *(_DWORD *)(a4 + v74) = *(_DWORD *)(a4 + v75);
          *(_DWORD *)(a4 + v75) = v76;
          v56 = v72;
        }
        while ((unint64_t)(v72 + 1) > 1);
      }
      else
      {
        do
        {
          v77 = *(float *)&v17[4 * v56];
          v78 = v56 - 1;
          v79 = *(float *)&v17[4 * (v56 - 1)];
          if (v77 >= v79)
            break;
          *(float *)&v17[4 * v56] = v79;
          *(float *)&v17[4 * --v56] = v77;
        }
        while ((unint64_t)(v78 + 1) > 1);
      }
    }
LABEL_45:
    if ((_DWORD)v22 != (_DWORD)v27)
      goto LABEL_47;
    goto LABEL_46;
  }
  v50 = -1;
  v51 = (int)v22;
  if ((int)v22 >= (int)v27)
    goto LABEL_26;
LABEL_19:
  *(float *)&v17[4 * (int)v22] = v49;
  if (a3)
    *(_QWORD *)(a3 + 8 * v51) = v13;
  if (a4)
    *(_DWORD *)(a4 + 4 * v51) = v50;
  v22 = (v22 + 1);
  if ((_DWORD)v22 != (_DWORD)v27)
    goto LABEL_45;
  v153 = v25;
  v154 = v24;
  v151 = v31;
  v152 = v26;
  v52 = v27;
  v157 = v30;
  v53 = v29;
  LODWORD(v146) = v21;
  v54 = v23;
  v150 = v19;
  rkd_knn_sort((uint64_t)v17, v27, a3, a4);
  v19 = v150;
  v31 = v151;
  v26 = v152;
  v25 = v153;
  v24 = v154;
  v23 = v54;
  v21 = v146;
  v29 = v53;
  v28 = v156;
  v30 = v157;
  v27 = v52;
LABEL_46:
  a7 = *(float *)&v17[4 * v24];
  v22 = v27;
LABEL_47:
  v80 = *(_DWORD *)(v30 + 4);
  v81 = *(float *)v30;
  if (v80 == -1)
  {
    if ((float)(v49 - v81) >= a7)
      goto LABEL_124;
    v90 = a7 * a7;
    if (v19 <= 1)
    {
      a7 = sqrtf(v90);
      goto LABEL_124;
    }
    v157 = v30;
    v13 += v29;
    v91 = 1;
    v92 = v19;
    v147 = a4;
    v148 = a3;
    v153 = v25;
    v154 = v24;
    v151 = v31;
    v152 = v26;
    v150 = v19;
    v146 = v19;
    while (1)
    {
      if ((_DWORD)v23 == 2)
      {
        v100 = (float)((float)(v13[1] - a2[1]) * (float)(v13[1] - a2[1]))
             + (float)((float)(*v13 - *a2) * (float)(*v13 - *a2));
        goto LABEL_79;
      }
      if ((_DWORD)v23 == 3)
      {
        v99 = v13[2] - a2[2];
        v100 = (float)((float)((float)(v13[1] - a2[1]) * (float)(v13[1] - a2[1]))
                     + (float)((float)(*v13 - *a2) * (float)(*v13 - *a2)))
             + (float)(v99 * v99);
        goto LABEL_79;
      }
      if ((int)v23 < 1)
      {
        v100 = 0.0;
        goto LABEL_79;
      }
      if (v23 < 8)
        break;
      v102 = 0;
      v100 = 0.0;
      do
      {
        v103 = vsubq_f32(*(float32x4_t *)&v13[v102 / 4], *(float32x4_t *)&a2[v102 / 4]);
        v104 = vsubq_f32(*(float32x4_t *)&v13[v102 / 4 + 4], *(float32x4_t *)&a2[v102 / 4 + 4]);
        v105 = vmulq_f32(v103, v103);
        v106 = vmulq_f32(v104, v104);
        v100 = (float)((float)((float)((float)((float)((float)((float)(v100 + v105.f32[0]) + v105.f32[1]) + v105.f32[2])
                                             + v105.f32[3])
                                     + v106.f32[0])
                             + v106.f32[1])
                     + v106.f32[2])
             + v106.f32[3];
        v102 += 32;
      }
      while (v26 != v102);
      v101 = v155;
      if (v155 != v23)
        goto LABEL_78;
LABEL_79:
      if (v100 >= v90)
        goto LABEL_66;
      if (v31)
      {
        v108 = v31[v91];
        v109 = sqrtf(v100);
        if ((int)v22 >= (int)v27)
          goto LABEL_89;
      }
      else
      {
        v108 = -1;
        v109 = sqrtf(v100);
        if ((int)v22 >= (int)v27)
        {
LABEL_89:
          v110 = (int)v22 - 1;
          *(float *)&v17[4 * v110] = v109;
          if (a3)
            *(_QWORD *)(a3 + 8 * v110) = v13;
          if (a4)
            *(_DWORD *)(a4 + 4 * v110) = v108;
          if ((int)v22 >= 2)
          {
            v111 = v110;
            if (a3)
            {
              if (a4)
              {
                do
                {
                  v112 = *(float *)&v17[4 * v111];
                  v113 = v111 - 1;
                  v114 = *(float *)&v17[4 * (v111 - 1)];
                  if (v112 >= v114)
                    break;
                  v115 = 4 * v111;
                  *(float *)&v17[v115] = v114;
                  v116 = 4 * (v111 - 1);
                  *(float *)&v17[v116] = v112;
                  v117 = 8 * v111;
                  v118 = *(_QWORD *)(a3 + v117);
                  v119 = 8 * v113;
                  *(_QWORD *)(a3 + v117) = *(_QWORD *)(a3 + v119);
                  *(_QWORD *)(a3 + v119) = v118;
                  LODWORD(v117) = *(_DWORD *)(a4 + v115);
                  *(_DWORD *)(a4 + v115) = *(_DWORD *)(a4 + v116);
                  *(_DWORD *)(a4 + v116) = v117;
                  v111 = v113;
                }
                while ((unint64_t)(v113 + 1) > 1);
              }
              else
              {
                do
                {
                  v120 = *(float *)&v17[4 * v111];
                  v121 = v111 - 1;
                  v122 = *(float *)&v17[4 * (v111 - 1)];
                  if (v120 >= v122)
                    break;
                  *(float *)&v17[4 * v111] = v122;
                  *(float *)&v17[4 * (v111 - 1)] = v120;
                  v123 = 8 * v111;
                  v124 = *(_QWORD *)(a3 + v123);
                  v125 = 8 * v121;
                  *(_QWORD *)(a3 + v123) = *(_QWORD *)(a3 + v125);
                  *(_QWORD *)(a3 + v125) = v124;
                  v111 = v121;
                }
                while ((unint64_t)(v121 + 1) > 1);
              }
            }
            else if (a4)
            {
              do
              {
                v126 = *(float *)&v17[4 * v111];
                v127 = v111 - 1;
                v128 = *(float *)&v17[4 * (v111 - 1)];
                if (v126 >= v128)
                  break;
                v129 = 4 * v111;
                *(float *)&v17[v129] = v128;
                v130 = 4 * v127;
                *(float *)&v17[v130] = v126;
                v131 = *(_DWORD *)(a4 + v129);
                *(_DWORD *)(a4 + v129) = *(_DWORD *)(a4 + v130);
                *(_DWORD *)(a4 + v130) = v131;
                v111 = v127;
              }
              while ((unint64_t)(v127 + 1) > 1);
            }
            else
            {
              do
              {
                v132 = *(float *)&v17[4 * v111];
                v133 = v111 - 1;
                v134 = *(float *)&v17[4 * (v111 - 1)];
                if (v132 >= v134)
                  break;
                *(float *)&v17[4 * v111] = v134;
                *(float *)&v17[4 * --v111] = v132;
              }
              while ((unint64_t)(v133 + 1) > 1);
            }
          }
LABEL_108:
          if ((_DWORD)v22 != (_DWORD)v27)
            goto LABEL_65;
          goto LABEL_64;
        }
      }
      *(float *)&v17[4 * (int)v22] = v109;
      if (a3)
        *(_QWORD *)(a3 + 8 * (int)v22) = v13;
      if (a4)
        *(_DWORD *)(a4 + 4 * (int)v22) = v108;
      v22 = (v22 + 1);
      if ((_DWORD)v22 != (_DWORD)v27)
        goto LABEL_108;
      v93 = a3;
      v94 = a4;
      v95 = v27;
      v96 = v29;
      v97 = v21;
      v98 = v23;
      rkd_knn_sort((uint64_t)v17, v27, v93, v94);
      v19 = v150;
      v31 = v151;
      v26 = v152;
      v25 = v153;
      v24 = v154;
      v23 = v98;
      v21 = v97;
      v92 = v146;
      a4 = v147;
      a3 = v148;
      v29 = v96;
      v27 = v95;
LABEL_64:
      a7 = *(float *)&v17[4 * v24];
      v22 = v27;
LABEL_65:
      v90 = a7 * a7;
LABEL_66:
      ++v91;
      v13 = (float *)((char *)v13 + v25);
      if (v91 == v92)
      {
        v30 = v157;
        v80 = *(_DWORD *)(v157 + 4);
        a7 = sqrtf(v90);
        v28 = v156;
        if (v80 == -1 || (float)(v100 - *(float *)v157) >= a7)
          goto LABEL_124;
LABEL_49:
        v82 = *(int *)(v30 + 8);
        v83 = a2[v82];
        v84 = v13[v82];
        if (v83 >= v84)
        {
          if (v80 >= 1)
          {
            v135 = v83 - v84;
            if (v135 < a7)
            {
              v136 = &v158[2 * v20];
              *(_QWORD *)v136 = v30 + 12;
              *((_QWORD *)v136 + 1) = &v13[v29];
              v137 = v31 + 1;
              if (!v31)
                v137 = 0;
              *((_QWORD *)v136 + 2) = v137;
              *((_DWORD *)v136 + 6) = v80;
              *((float *)v136 + 7) = v135;
              ++v20;
            }
          }
          v138 = v80 + 1;
          if (v19 <= (int)v138)
            goto LABEL_124;
          v13 += (int)v138 * (int)v23;
          v139 = &v31[v138];
          if (v31)
            v31 = v139;
          else
            v31 = 0;
          v30 += 12 * v80 + 12;
          v19 += ~v80;
          if (v19 <= 0)
            goto LABEL_131;
        }
        else
        {
          v85 = v19 + ~v80;
          if (v85 >= 1)
          {
            v86 = v84 - v83;
            if (v86 < a7)
            {
              v87 = &v158[2 * v20];
              v88 = v80 + 1;
              *(_QWORD *)v87 = v30 + 12 * v80 + 12;
              *((_QWORD *)v87 + 1) = &v13[(int)v88 * (int)v29];
              v89 = &v31[v88];
              if (!v31)
                v89 = 0;
              *((_QWORD *)v87 + 2) = v89;
              *((_DWORD *)v87 + 6) = v85;
              *((float *)v87 + 7) = v86;
              ++v20;
            }
          }
          if (v80 < 1)
            goto LABEL_124;
          v13 += v29;
          if (v31)
            ++v31;
          else
            v31 = 0;
          v30 += 12;
          v19 = v80;
        }
        goto LABEL_3;
      }
    }
    v101 = 0;
    v100 = 0.0;
    do
    {
LABEL_78:
      v107 = v13[v101] - a2[v101];
      v100 = v100 + (float)(v107 * v107);
      ++v101;
    }
    while (v23 != v101);
    goto LABEL_79;
  }
  if ((float)(v49 - v81) < a7)
    goto LABEL_49;
LABEL_124:
  if ((_DWORD)v21 != v28)
  {
    v140 = &v158[2 * v20];
    while (1)
    {
      v141 = __OFSUB__(v20--, 1);
      if (v20 < 0 != v141)
        break;
      v142 = *((float *)v140 - 1);
      v140 -= 2;
      if (v142 < a7)
      {
        v30 = *(_QWORD *)v140;
        v13 = (float *)*((_QWORD *)v140 + 1);
        v31 = (int *)*((_QWORD *)v140 + 2);
        v21 = (v21 + 1);
        v19 = *((_DWORD *)v140 + 6);
        if (v19 > 0)
          goto LABEL_3;
        break;
      }
    }
  }
LABEL_131:
  if ((_DWORD)v22 != (_DWORD)v27)
  {
    v143 = a4;
    v144 = v22;
    rkd_knn_sort((uint64_t)v17, v22, a3, v143);
    return v144;
  }
  return v22;
}

uint64_t rkd_inside(uint64_t a1, float *a2, void **a3, void **a4, unsigned int *a5, float a6)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  int *v19;
  int v20;
  float v21;
  float v22;
  uint64_t v23;
  float32x4_t *v24;
  uint64_t v25;
  float32x4_t *v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  float *v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  void *v40;
  float v41;
  uint64_t v42;
  float v43;
  float v44;
  int v45;
  float v46;
  _OWORD *v47;
  uint64_t v48;
  int *v49;
  float v50;
  _OWORD *v51;
  _DWORD *v52;
  int v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int *v67;
  int v68;
  uint64_t v70;
  uint64_t v71;
  float v72;
  float v73;
  uint64_t v74;
  unint64_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float v80;
  int v81;
  _DWORD *v82;
  _QWORD *v83;
  _OWORD *v84;
  __int128 *v85;
  int v86;
  uint64_t v87;
  __int128 v88;
  _OWORD *v89;
  float32x4_t *v91;
  _DWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void **v96;
  void **v97;
  int v98;
  uint64_t v99;
  unsigned int v100;
  _OWORD v101[128];
  uint64_t v102;

  v102 = *MEMORY[0x24BDAC8D0];
  v8 = *(_DWORD *)(a1 + 28);
  if (!a5)
  {
    v9 = 0;
    v92 = 0;
    if (v8 >= 1)
      goto LABEL_3;
LABEL_146:
    v39 = 0;
    goto LABEL_147;
  }
  v9 = *a5;
  v92 = a5;
  if (v8 < 1)
    goto LABEL_146;
LABEL_3:
  v97 = a4;
  v98 = 0;
  v10 = 0;
  v11 = *(int *)(a1 + 24);
  v13 = *(int **)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v14 = *(float **)a1;
  v15 = *(unsigned int *)(a1 + 24);
  v91 = (float32x4_t *)(a2 + 4);
  v16 = 4 * v11;
  v17 = a6 * a6;
  v18 = v9;
  v95 = v11;
  v96 = a3;
  v93 = v15 & 0xFFFFFFF8;
  v94 = 4 * v11;
  while (2)
  {
    if ((_DWORD)v11 == 2)
    {
      v22 = (float)((float)(v14[1] - a2[1]) * (float)(v14[1] - a2[1]))
          + (float)((float)(*v14 - *a2) * (float)(*v14 - *a2));
      goto LABEL_22;
    }
    if ((_DWORD)v11 == 3)
    {
      v21 = v14[2] - a2[2];
      v22 = (float)((float)((float)(v14[1] - a2[1]) * (float)(v14[1] - a2[1]))
                  + (float)((float)(*v14 - *a2) * (float)(*v14 - *a2)))
          + (float)(v21 * v21);
      goto LABEL_22;
    }
    if ((int)v11 < 1)
    {
      v22 = 0.0;
      goto LABEL_22;
    }
    if (v11 < 8)
    {
      v23 = 0;
      v22 = 0.0;
LABEL_20:
      v31 = v15 - v23;
      v32 = v23;
      v33 = &a2[v23];
      v34 = &v14[v32];
      do
      {
        v35 = *v34++;
        v36 = v35;
        v37 = *v33++;
        v22 = v22 + (float)((float)(v36 - v37) * (float)(v36 - v37));
        --v31;
      }
      while (v31);
      goto LABEL_22;
    }
    v24 = (float32x4_t *)(v14 + 4);
    v22 = 0.0;
    v25 = v15 & 0xFFFFFFF8;
    v26 = v91;
    do
    {
      v27 = vsubq_f32(v24[-1], v26[-1]);
      v28 = vsubq_f32(*v24, *v26);
      v29 = vmulq_f32(v27, v27);
      v30 = vmulq_f32(v28, v28);
      v22 = (float)((float)((float)((float)((float)((float)((float)(v22 + v29.f32[0]) + v29.f32[1]) + v29.f32[2])
                                          + v29.f32[3])
                                  + v30.f32[0])
                          + v30.f32[1])
                  + v30.f32[2])
          + v30.f32[3];
      v24 += 2;
      v26 += 2;
      v25 -= 8;
    }
    while (v25);
    v23 = v15 & 0xFFFFFFF8;
    if (v93 != v15)
      goto LABEL_20;
LABEL_22:
    v38 = sqrtf(v22);
    v100 = v8;
    v99 = v12;
    if (v38 < a6)
    {
      if ((float)(v38 + *(float *)v12) < a6)
      {
        v39 = (v10 + v8);
        if ((int)v39 <= (int)v18)
        {
          if (a4)
          {
            if (a3)
              goto LABEL_69;
            v55 = *a4;
            v56 = v8;
            if (v8 < 0x10)
              goto LABEL_90;
            goto LABEL_87;
          }
          if (a3)
            goto LABEL_76;
        }
        else
        {
          if (2 * (int)v39 <= 10)
            v18 = 10;
          else
            v18 = (2 * v39);
          if (a3)
          {
            v40 = malloc_type_realloc(*a3, 8 * v18, 0x80040B8603338uLL);
            a3 = v96;
            a4 = v97;
            *v96 = v40;
            if (!v97)
            {
              v16 = v94;
              v11 = v95;
              v8 = v100;
LABEL_76:
              v60 = 8 * (int)v10;
              v61 = v8;
              do
              {
                *(_QWORD *)((char *)*a3 + v60) = v14;
                v60 += 8;
                v14 = (float *)((char *)v14 + v16);
                --v61;
              }
              while (v61);
              v9 = v18;
              v62 = (v98 - 1);
              if (v98 >= 1)
                goto LABEL_138;
              goto LABEL_147;
            }
LABEL_67:
            v55 = malloc_type_realloc(*a4, 4 * v18, 0x100004052888210uLL);
            a3 = v96;
            a4 = v97;
            *v97 = v55;
            if (v96)
            {
              v16 = v94;
              v11 = v95;
              v8 = v100;
LABEL_69:
              v58 = v8;
              do
              {
                *((_QWORD *)*a3 + (int)v10) = v14;
                v59 = *v13++;
                *((_DWORD *)*a4 + (int)v10) = v59;
                LODWORD(v10) = v10 + 1;
                v14 = (float *)((char *)v14 + v16);
                --v58;
              }
              while (v58);
              goto LABEL_93;
            }
            v16 = v94;
            v11 = v95;
            v56 = v100;
            if (v100 < 0x10)
              goto LABEL_90;
LABEL_87:
            v64 = 0;
            if ((int)v10 + (int)v56 - 1 < (int)v10 || (unint64_t)(v56 - 1) >> 32)
              goto LABEL_91;
            if ((unint64_t)(&v55[4 * (int)v10] - (_BYTE *)v13) >= 0x20)
            {
              v64 = v56 & 0xFFFFFFF8;
              v85 = (__int128 *)(v13 + 4);
              v86 = v10;
              v87 = v64;
              do
              {
                v88 = *v85;
                v89 = &v55[4 * v86];
                *v89 = *(v85 - 1);
                v89[1] = v88;
                v85 += 2;
                v86 += 8;
                v87 -= 8;
              }
              while (v87);
              if (v64 == v56)
                goto LABEL_93;
              goto LABEL_91;
            }
LABEL_90:
            v64 = 0;
LABEL_91:
            v65 = v56 - v64;
            v66 = v10 + v64;
            v67 = &v13[v64];
            do
            {
              v68 = *v67++;
              *(_DWORD *)&v55[4 * v66++] = v68;
              --v65;
            }
            while (v65);
            goto LABEL_93;
          }
          if (a4)
            goto LABEL_67;
        }
LABEL_93:
        v9 = v18;
        goto LABEL_137;
      }
      v39 = (v10 + 1);
      if ((int)v10 < (int)v18)
      {
        if (!a4)
        {
          if (a3)
          {
            v9 = v18;
            *((_QWORD *)*a3 + (int)v10) = v14;
            v20 = *(_DWORD *)(v12 + 4);
            v41 = *(float *)v12;
            if (v20 != -1)
              goto LABEL_32;
          }
          else
          {
            v9 = v18;
            v20 = *(_DWORD *)(v12 + 4);
            v41 = *(float *)v12;
            if (v20 != -1)
            {
LABEL_32:
              if ((float)(v38 - v41) >= a6)
                goto LABEL_137;
              goto LABEL_33;
            }
          }
          goto LABEL_97;
        }
        if (a3)
        {
          v9 = v18;
          goto LABEL_83;
        }
        v63 = *a4;
        v9 = v18;
LABEL_95:
        v63[(int)v10] = *v13;
LABEL_96:
        v20 = *(_DWORD *)(v12 + 4);
        v41 = *(float *)v12;
        if (v20 != -1)
          goto LABEL_32;
        goto LABEL_97;
      }
      if (2 * (int)v39 <= 10)
        v9 = 10;
      else
        v9 = (2 * v39);
      if (a3)
      {
        v57 = malloc_type_realloc(*a3, 8 * v9, 0x80040B8603338uLL);
        a3 = v96;
        a4 = v97;
        *v96 = v57;
        if (!v97)
        {
          v16 = v94;
          v11 = v95;
          v8 = v100;
          v12 = v99;
          v57[(int)v10] = v14;
          v20 = *(_DWORD *)(v99 + 4);
          v41 = *(float *)v99;
          if (v20 != -1)
            goto LABEL_32;
          goto LABEL_97;
        }
      }
      else if (!a4)
      {
        goto LABEL_96;
      }
      v63 = malloc_type_realloc(*a4, 4 * v9, 0x100004052888210uLL);
      a3 = v96;
      a4 = v97;
      *v97 = v63;
      if (v96)
      {
        v16 = v94;
        v11 = v95;
        v8 = v100;
        v12 = v99;
LABEL_83:
        *((_QWORD *)*a3 + (int)v10) = v14;
        *((_DWORD *)*a4 + (int)v10) = *v13;
        v20 = *(_DWORD *)(v12 + 4);
        v41 = *(float *)v12;
        if (v20 != -1)
          goto LABEL_32;
        goto LABEL_97;
      }
      v16 = v94;
      v11 = v95;
      v8 = v100;
      v12 = v99;
      goto LABEL_95;
    }
    v39 = v10;
    v9 = v18;
    v20 = *(_DWORD *)(v12 + 4);
    v41 = *(float *)v12;
    if (v20 != -1)
      goto LABEL_32;
LABEL_97:
    if ((float)(v38 - v41) >= a6 || v8 <= 1)
      goto LABEL_137;
    v14 += v11;
    v70 = 1;
    v71 = v8;
    do
    {
      if ((_DWORD)v15 == 2)
      {
        v73 = (float)((float)(v14[1] - a2[1]) * (float)(v14[1] - a2[1]))
            + (float)((float)(*v14 - *a2) * (float)(*v14 - *a2));
        goto LABEL_118;
      }
      if ((_DWORD)v15 == 3)
      {
        v72 = v14[2] - a2[2];
        v73 = (float)((float)((float)(v14[1] - a2[1]) * (float)(v14[1] - a2[1]))
                    + (float)((float)(*v14 - *a2) * (float)(*v14 - *a2)))
            + (float)(v72 * v72);
        goto LABEL_118;
      }
      if ((int)v15 < 1)
      {
        v73 = 0.0;
        goto LABEL_118;
      }
      if (v15 < 8)
      {
        v74 = 0;
        v73 = 0.0;
        do
        {
LABEL_117:
          v80 = v14[v74] - a2[v74];
          v73 = v73 + (float)(v80 * v80);
          ++v74;
        }
        while (v15 != v74);
        goto LABEL_118;
      }
      v75 = 0;
      v73 = 0.0;
      do
      {
        v76 = vsubq_f32(*(float32x4_t *)&v14[v75 / 4], *(float32x4_t *)&a2[v75 / 4]);
        v77 = vsubq_f32(*(float32x4_t *)&v14[v75 / 4 + 4], *(float32x4_t *)&a2[v75 / 4 + 4]);
        v78 = vmulq_f32(v76, v76);
        v79 = vmulq_f32(v77, v77);
        v73 = (float)((float)((float)((float)((float)((float)((float)(v73 + v78.f32[0]) + v78.f32[1]) + v78.f32[2])
                                            + v78.f32[3])
                                    + v79.f32[0])
                            + v79.f32[1])
                    + v79.f32[2])
            + v79.f32[3];
        v75 += 32;
      }
      while (((4 * v15) & 0x3FFFFFFE0) != v75);
      v74 = v15 & 0xFFFFFFF8;
      if (v93 != v15)
        goto LABEL_117;
LABEL_118:
      if (v73 < v17)
      {
        v81 = v39 + 1;
        if ((int)v39 >= (int)v9)
        {
          if (2 * v81 <= 10)
            v9 = 10;
          else
            v9 = (2 * v81);
          if (a3)
          {
            v83 = malloc_type_realloc(*a3, 8 * v9, 0x80040B8603338uLL);
            a3 = v96;
            a4 = v97;
            *v96 = v83;
            if (!v97)
            {
              v16 = v94;
              v11 = v95;
              v8 = v100;
              v12 = v99;
              v83[(int)v39] = v14;
              goto LABEL_104;
            }
          }
          else if (!a4)
          {
            goto LABEL_104;
          }
          v82 = malloc_type_realloc(*a4, 4 * v9, 0x100004052888210uLL);
          a3 = v96;
          a4 = v97;
          *v97 = v82;
          if (v96)
          {
            v16 = v94;
            v11 = v95;
            v8 = v100;
            v12 = v99;
            goto LABEL_103;
          }
          v16 = v94;
          v11 = v95;
          v8 = v100;
          v12 = v99;
LABEL_134:
          v82[(int)v39] = v13[v70];
        }
        else if (a4)
        {
          if (!a3)
          {
            v82 = *a4;
            goto LABEL_134;
          }
LABEL_103:
          *((_QWORD *)*a3 + (int)v39) = v14;
          *((_DWORD *)*a4 + (int)v39) = v13[v70];
        }
        else if (a3)
        {
          *((_QWORD *)*a3 + (int)v39) = v14;
        }
LABEL_104:
        v39 = (v39 + 1);
      }
      ++v70;
      v14 = (float *)((char *)v14 + v16);
    }
    while (v70 != v71);
    v20 = *(_DWORD *)(v12 + 4);
    if (v20 == -1 || (float)(v73 - *(float *)v12) >= a6)
      goto LABEL_137;
LABEL_33:
    v42 = *(int *)(v12 + 8);
    v43 = a2[v42];
    v44 = v14[v42];
    if (v43 >= v44)
    {
      if (v20 >= 1)
      {
        v50 = v43 - v44;
        if (v50 < a6)
        {
          v51 = &v101[2 * v98];
          *(_QWORD *)v51 = v12 + 12;
          *((_QWORD *)v51 + 1) = &v14[v11];
          v52 = v13 + 1;
          if (!v13)
            v52 = 0;
          *((_QWORD *)v51 + 2) = v52;
          *((_DWORD *)v51 + 6) = v20;
          *((float *)v51 + 7) = v50;
          ++v98;
        }
      }
      v53 = v20;
      v54 = v20 + 1;
      if (v8 <= (int)v54)
        goto LABEL_137;
      v14 += (int)v54 * (int)v15;
      v19 = &v13[v54];
      if (v13)
        v13 = v19;
      else
        v13 = 0;
      v20 = v8 + ~v20;
      v12 += 12 * v53 + 12;
LABEL_8:
      v8 = v20;
      v18 = v9;
      v10 = v39;
      if (v20 <= 0)
        goto LABEL_147;
      continue;
    }
    break;
  }
  v45 = v8 + ~v20;
  if (v45 >= 1)
  {
    v46 = v44 - v43;
    if (v46 < a6)
    {
      v47 = &v101[2 * v98];
      v48 = v20 + 1;
      *(_QWORD *)v47 = v12 + 12 * v20 + 12;
      *((_QWORD *)v47 + 1) = &v14[(int)v48 * (int)v11];
      v49 = &v13[v48];
      if (!v13)
        v49 = 0;
      *((_QWORD *)v47 + 2) = v49;
      *((_DWORD *)v47 + 6) = v45;
      *((float *)v47 + 7) = v46;
      ++v98;
    }
  }
  if (v20 >= 1)
  {
    v14 += v11;
    if (v13)
      ++v13;
    else
      v13 = 0;
    v12 += 12;
    goto LABEL_8;
  }
LABEL_137:
  v62 = (v98 - 1);
  if (v98 >= 1)
  {
LABEL_138:
    v84 = &v101[2 * v62];
    v12 = *(_QWORD *)v84;
    v14 = (float *)*((_QWORD *)v84 + 1);
    v13 = (int *)*((_QWORD *)v84 + 2);
    v20 = *((_DWORD *)v84 + 6);
    v98 = v62;
    goto LABEL_8;
  }
LABEL_147:
  if (v92)
    *v92 = v9;
  return v39;
}

uint64_t rkd_split_median(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, void *a6, float a7)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  signed int v11;
  size_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  signed int v18;
  unint64_t v19;
  signed int v20;
  signed int v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  uint64_t v31;
  float *v32;
  _DWORD *v33;
  float *v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  int *v39;
  char *v40;
  float *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  float *v46;
  float *v47;
  int v48;
  uint64_t v49;
  int v50;
  unint64_t v52;
  size_t v54;
  int v55;
  int v56;
  int v58;
  uint64_t v59;
  int v61;
  int v62;
  __int128 v65;

  v65 = xmmword_210BCDC60;
  if ((int)a4 < 2)
    return 0;
  v8 = a3;
  v9 = a1;
  v10 = 0;
  v11 = a4 - 1;
  v52 = a4;
  v12 = 4 * (int)a3;
  v59 = (int)a5;
  v58 = (int)(float)((float)(int)a4 * a7);
  v55 = 0;
  v56 = a4 >> 1;
  v54 = a1 + v12;
  while (1)
  {
    v13 = v11 - v10;
    v14 = (v11 - v10 + 1);
    v62 = v11;
    if (v11 - v10 > 8)
    {
      if (v13 > 0x62)
      {
        if (v13 > 0x270E)
        {
          v25 = v9;
          v26 = v8;
          v27 = a4;
          v28 = a5;
          v29 = v13 > 0xF423E ? 6 : 5;
        }
        else
        {
          v25 = v9;
          v26 = v8;
          v27 = a4;
          v28 = a5;
          v29 = 2;
        }
        v18 = rkd_sample_median(v25, v26, v27, v28, v29, (unint64_t *)&v65);
      }
      else
      {
        v17 = (*((_QWORD *)&v65 + 1) >> 5) ^ (((unint64_t)v65 ^ ((_QWORD)v65 << 23)) >> 18) ^ *((_QWORD *)&v65 + 1) ^ v65 ^ ((_QWORD)v65 << 23);
        v18 = (v17 + *((_QWORD *)&v65 + 1)) % v52;
        v19 = ((*((_QWORD *)&v65 + 1) ^ (*((_QWORD *)&v65 + 1) << 23)) >> 18) ^ (v17 >> 5) ^ *((_QWORD *)&v65 + 1) ^ (*((_QWORD *)&v65 + 1) << 23) ^ v17;
        v20 = (v19 + v17) % v52;
        *(_QWORD *)&v65 = v19;
        *((_QWORD *)&v65 + 1) = ((v17 ^ (v17 << 23)) >> 18) ^ (v19 >> 5) ^ v17 ^ (v17 << 23) ^ v19;
        v21 = (*((_QWORD *)&v65 + 1) + v19) % v52;
        v22 = *(float *)(v9 + 4 * ((int)a5 + v18 * (int)v8));
        v23 = *(float *)(v9 + 4 * ((int)a5 + v20 * (int)v8));
        v24 = *(float *)(v9 + 4 * ((int)a5 + v21 * (int)v8));
        if (v22 >= v23)
        {
          if (v22 > v24)
          {
            if (v23 <= v24)
              v18 = v21;
            else
              v18 = v20;
          }
        }
        else if (v22 < v24)
        {
          if (v23 >= v24)
            v18 = v21;
          else
            v18 = v20;
        }
      }
      v30 = v18 - v10 >= 0 && v18 <= v11;
      v16 = v30 ? v18 - v10 : v14 >> 1;
    }
    else
    {
      v15 = (int)v14 >= 0 ? v11 - v10 + 1 : v11 - v10 + 2;
      v16 = v15 >> 1;
    }
    v31 = v10 * (int)v8;
    v32 = (float *)(v9 + 4 * v31);
    v61 = v10;
    v33 = a2 ? (_DWORD *)(a2 + 4 * v10) : 0;
    v34 = &v32[v16 * (int)v8];
    memcpy(a6, v34, v12);
    memmove(v34, (const void *)(v9 + 4 * v31), v12);
    memcpy((void *)(v9 + 4 * v31), a6, v12);
    if (v33)
    {
      v35 = v16;
      v36 = v33[v35];
      v33[v35] = *v33;
      *v33 = v36;
      if (v13 < 1)
        goto LABEL_47;
      v37 = 0;
      v38 = v14 - 1;
      v39 = v33 + 1;
      v40 = (char *)(v54 + 4 * v31);
      do
      {
        if (*(float *)&v40[4 * v59] < v32[v59])
        {
          v41 = &v32[++v37 * (int)a3];
          memcpy(a6, v40, v12);
          memmove(v40, v41, v12);
          memcpy(v41, a6, v12);
          v42 = *v39;
          v43 = v37;
          *v39 = v33[v43];
          v33[v43] = v42;
        }
        ++v39;
        v40 += v12;
        --v38;
      }
      while (v38);
    }
    else
    {
      if (v13 <= 0)
      {
LABEL_47:
        v37 = 0;
        goto LABEL_48;
      }
      v37 = 0;
      v44 = v14 - 1;
      v45 = (char *)(v54 + 4 * v31);
      do
      {
        if (*(float *)&v45[4 * v59] < v32[v59])
        {
          v46 = &v32[++v37 * (int)a3];
          memcpy(a6, v45, v12);
          memmove(v45, v46, v12);
          memcpy(v46, a6, v12);
        }
        v45 += v12;
        --v44;
      }
      while (v44);
    }
LABEL_48:
    v8 = a3;
    v47 = &v32[v37 * (int)a3];
    memcpy(a6, v32, v12);
    memmove(v32, v47, v12);
    memcpy(v47, a6, v12);
    if (v33)
    {
      v48 = *v33;
      v49 = v37;
      *v33 = v33[v49];
      v33[v49] = v48;
    }
    v11 = v62;
    if (v37)
      goto LABEL_53;
    if (v55 > 1)
      return 0xFFFFFFFFLL;
    ++v55;
LABEL_53:
    v9 = a1;
    v10 = v61;
    result = (v37 + v61);
    v50 = result - v56;
    if ((int)result - v56 < 0)
      v50 = v56 - result;
    if (v50 <= v58)
      return result;
    if ((int)result > v56)
    {
      v11 = result - 1;
    }
    else
    {
      v10 = v37 + v61;
      if ((int)result >= v62)
        return result;
    }
    if (v11 < v10)
      return (v10 + v37);
  }
}

uint64_t rkd_closest_to_mean(float32x2_t *a1, uint64_t a2, int a3)
{
  unsigned int v4;
  float32x2_t *v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  float *v9;
  float32x4_t v10;
  float32x2_t v11;
  float v12;
  float *v13;
  int v14;
  float32x2_t *v15;
  int v16;
  uint64_t v17;
  int v18;
  float32x2_t *v19;
  uint64_t v20;
  unint64_t v21;
  float32x4_t *v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t *v25;
  uint64_t v26;
  float32x4_t v27;
  uint64_t v28;
  float *v29;
  uint64_t result;
  unsigned int v31;
  float v32;
  float v33;
  float v34;
  float *v35;
  float v36;
  unsigned int v37;
  float v38;
  float v39;
  float *v40;
  float v41;
  unsigned int v42;
  float v43;
  uint64_t v44;
  float v45;
  unint64_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float v51;
  unsigned int v52;
  float v53;
  _QWORD v54[2];

  v4 = a2;
  v5 = a1;
  v54[1] = *MEMORY[0x24BDAC8D0];
  v6 = (int)a2;
  v7 = 4 * (int)a2;
  MEMORY[0x24BDAC7A8](a1, a2);
  v9 = (float *)((char *)v54 - v8);
  bzero((char *)v54 - v8, v7);
  bzero(v9, v7);
  if (v4 != 2)
  {
    if (v4 == 3)
    {
      v11 = *(float32x2_t *)v9;
      v12 = v9[2];
      v13 = (float *)&v5[1];
      v14 = a3;
      do
      {
        v11 = vadd_f32(v11, *(float32x2_t *)(v13 - 2));
        v12 = v12 + *v13;
        v13 += v6;
        --v14;
      }
      while (v14);
      *(float32x2_t *)v9 = v11;
      v9[2] = v12;
      goto LABEL_9;
    }
    if ((int)v4 < 1)
      goto LABEL_26;
    v18 = 0;
    v19 = v5;
    while (1)
    {
      if (v4 >= 8)
      {
        v21 = 0;
        do
        {
          v22 = (float32x4_t *)&v9[v21 / 4];
          v10 = vaddq_f32(*(float32x4_t *)&v9[v21 / 4], *(float32x4_t *)v19[v21 / 8].f32);
          v23 = vaddq_f32(*(float32x4_t *)&v9[v21 / 4 + 4], *(float32x4_t *)v19[v21 / 8 + 2].f32);
          *v22 = v10;
          v22[1] = v23;
          v21 += 32;
        }
        while (((4 * v4) & 0x3FFFFFFE0) != v21);
        v20 = v4 & 0xFFFFFFF8;
        if (v20 == v4)
          goto LABEL_13;
      }
      else
      {
        v20 = 0;
      }
      do
      {
        v9[v20] = v9[v20] + v19->f32[v20];
        ++v20;
      }
      while (v4 != v20);
LABEL_13:
      ++v18;
      v19 = (float32x2_t *)((char *)v19 + 4 * v6);
      if (v18 == a3)
        goto LABEL_9;
    }
  }
  v10.i64[0] = *(_QWORD *)v9;
  v15 = v5;
  v16 = a3;
  do
  {
    *(float32x2_t *)v10.f32 = vadd_f32(*(float32x2_t *)v10.f32, *v15);
    v15 = (float32x2_t *)((char *)v15 + 4 * v6);
    --v16;
  }
  while (v16);
  *(_QWORD *)v9 = v10.i64[0];
LABEL_9:
  v10.f32[0] = (float)a3;
  if (v4 < 8)
  {
    v17 = 0;
LABEL_24:
    v28 = v4 - v17;
    v29 = &v9[v17];
    do
    {
      *v29 = *v29 / v10.f32[0];
      ++v29;
      --v28;
    }
    while (v28);
    goto LABEL_26;
  }
  v17 = v4 & 0x7FFFFFF8;
  v24 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0);
  v25 = (float32x4_t *)(v9 + 4);
  v26 = v4 & 0xFFFFFFF8;
  do
  {
    v27 = vdivq_f32(*v25, v24);
    v25[-1] = vdivq_f32(v25[-1], v24);
    *v25 = v27;
    v25 += 2;
    v26 -= 8;
  }
  while (v26);
  if (v17 != v4)
    goto LABEL_24;
LABEL_26:
  if (v4 == 2)
  {
    LODWORD(result) = 0;
    v37 = 0;
    v38 = *v9;
    v40 = (float *)v5 + 1;
    v41 = 3.4028e38;
    do
    {
      v39 = v9[1];
      if ((float)((float)((float)(*v40 - v39) * (float)(*v40 - v39))
                 + (float)((float)(*(v40 - 1) - v38) * (float)(*(v40 - 1) - v38))) >= v41)
      {
        result = result;
      }
      else
      {
        v41 = (float)((float)(*v40 - v39) * (float)(*v40 - v39))
            + (float)((float)(*(v40 - 1) - v38) * (float)(*(v40 - 1) - v38));
        result = v37;
      }
      ++v37;
      v40 += v6;
    }
    while (a3 != v37);
  }
  else
  {
    if (v4 == 3)
    {
      LODWORD(result) = 0;
      v31 = 0;
      v32 = *v9;
      v35 = (float *)&v5[1];
      v36 = 3.4028e38;
      do
      {
        v33 = v9[1];
        v34 = v9[2];
        if ((float)((float)((float)((float)(*(v35 - 1) - v33) * (float)(*(v35 - 1) - v33))
                           + (float)((float)(*(v35 - 2) - v32) * (float)(*(v35 - 2) - v32)))
                   + (float)((float)(*v35 - v34) * (float)(*v35 - v34))) >= v36)
        {
          result = result;
        }
        else
        {
          v36 = (float)((float)((float)(*(v35 - 1) - v33) * (float)(*(v35 - 1) - v33))
                      + (float)((float)(*(v35 - 2) - v32) * (float)(*(v35 - 2) - v32)))
              + (float)((float)(*v35 - v34) * (float)(*v35 - v34));
          result = v31;
        }
        ++v31;
        v35 += v6;
      }
      while (a3 != v31);
      return result;
    }
    if ((int)v4 > 0)
    {
      LODWORD(result) = 0;
      v42 = 0;
      v43 = 3.4028e38;
      while (v4 >= 8)
      {
        v46 = 0;
        v45 = 0.0;
        do
        {
          v47 = vsubq_f32(*(float32x4_t *)v5[v46 / 8].f32, *(float32x4_t *)&v9[v46 / 4]);
          v48 = vsubq_f32(*(float32x4_t *)v5[v46 / 8 + 2].f32, *(float32x4_t *)&v9[v46 / 4 + 4]);
          v49 = vmulq_f32(v47, v47);
          v50 = vmulq_f32(v48, v48);
          v45 = (float)((float)((float)((float)((float)((float)((float)(v45 + v49.f32[0]) + v49.f32[1]) + v49.f32[2])
                                              + v49.f32[3])
                                      + v50.f32[0])
                              + v50.f32[1])
                      + v50.f32[2])
              + v50.f32[3];
          v46 += 32;
        }
        while (((4 * v4) & 0x3FFFFFFE0) != v46);
        v44 = v4 & 0xFFFFFFF8;
        if (v44 != v4)
          goto LABEL_51;
LABEL_42:
        if (v45 >= v43)
        {
          result = result;
        }
        else
        {
          v43 = v45;
          result = v42;
        }
        ++v42;
        v5 = (float32x2_t *)((char *)v5 + 4 * v6);
        if (v42 == a3)
          return result;
      }
      v44 = 0;
      v45 = 0.0;
      do
      {
LABEL_51:
        v51 = v5->f32[v44] - v9[v44];
        v45 = v45 + (float)(v51 * v51);
        ++v44;
      }
      while (v4 != v44);
      goto LABEL_42;
    }
    LODWORD(result) = 0;
    v52 = 0;
    v53 = 3.4028e38;
    do
    {
      if (v53 <= 0.0)
      {
        result = result;
      }
      else
      {
        v53 = 0.0;
        result = v52;
      }
      ++v52;
    }
    while (a3 != v52);
  }
  return result;
}

uint64_t rkd_split_dim_sdev(float32x4_t *a1, int a2, int a3)
{
  float32x4_t *v5;
  size_t v6;
  float64x2_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  float64x2_t *v17;
  float32x4_t *v18;
  float32x4_t v19;
  float32x4_t v20;
  float64x2_t v21;
  float64x2_t *v22;
  float64x2_t v23;
  float v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  _QWORD v32[2];

  v5 = a1;
  v32[1] = *MEMORY[0x24BDAC8D0];
  MEMORY[0x24BDAC7A8](a1, 16 * a2);
  v7 = (float64x2_t *)((char *)v32 - v6);
  if (a2 < 1)
    return 0;
  v8 = (char *)&v7->f64[a2];
  bzero((char *)v32 - v6, v6);
  *(_QWORD *)v8 = 0;
  if (a3 > 0)
  {
    v9 = 0;
    v10 = a2;
    v12 = v7 < (float64x2_t *)&v7->f64[a2 + (unint64_t)a2] && v8 < (char *)&v7->f64[a2];
    v13 = 8 * a2;
    while (1)
    {
      v14 = a2 < 4 || v12;
      if ((v14 & 1) != 0)
      {
        v15 = 0;
      }
      else
      {
        v16 = a2 & 0x7FFFFFFC;
        v17 = v7;
        v18 = v5;
        do
        {
          v19 = *v18++;
          v20 = vmulq_f32(v19, v19);
          v21 = vaddq_f64(v17[1], vcvt_hight_f64_f32(v20));
          *v17 = vaddq_f64(*v17, vcvtq_f64_f32(*(float32x2_t *)v20.f32));
          v17[1] = v21;
          v22 = (float64x2_t *)((char *)v17 + v13);
          v23 = vaddq_f64(*(float64x2_t *)((char *)v17 + v13 + 16), vcvt_hight_f64_f32(v19));
          *v22 = vaddq_f64(*(float64x2_t *)((char *)v17 + 8 * a2), vcvtq_f64_f32(*(float32x2_t *)v19.f32));
          v22[1] = v23;
          v17 += 2;
          v16 -= 4;
        }
        while (v16);
        v15 = a2 & 0x7FFFFFFC;
        if (v15 == a2)
          goto LABEL_10;
      }
      do
      {
        v24 = v5->f32[v15];
        v25 = v15;
        v7->f64[v25] = v7->f64[v15] + (float)(v24 * v24);
        *(double *)&v8[v25 * 8] = *(double *)&v8[8 * v15++] + v24;
      }
      while (a2 != v15);
LABEL_10:
      ++v9;
      v5 = (float32x4_t *)((char *)v5 + 4 * a2);
      if (v9 == a3)
        goto LABEL_23;
    }
  }
  v10 = a2;
LABEL_23:
  v27 = 0;
  LODWORD(result) = 0;
  v28 = (double)a3;
  v29 = -1.17549435e-38;
  do
  {
    v30 = *(double *)&v8[8 * v27] / v28;
    v31 = v7->f64[v27] / v28 - v30 * v30;
    if (v31 <= v29)
      result = result;
    else
      result = v27;
    if (v31 > v29)
      v29 = v7->f64[v27] / v28 - v30 * v30;
    ++v27;
  }
  while (v10 != v27);
  return result;
}

uint64_t rkd_split_dim_bbox(float32x4_t *a1, int a2, int a3)
{
  float32x4_t *v5;
  size_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int64x2_t v10;
  int64x2_t v11;
  uint64_t v12;
  int64x2_t *v13;
  int64x2_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  BOOL v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  float64x2_t *v24;
  float32x4_t *v25;
  float32x4_t v26;
  float64x2_t v27;
  float64x2_t v28;
  int8x16_t v29;
  int8x16_t *v30;
  int8x16_t v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t result;
  char *v36;
  double v37;
  double v38;
  double v39;
  _QWORD v40[2];

  v5 = a1;
  v40[1] = *MEMORY[0x24BDAC8D0];
  MEMORY[0x24BDAC7A8](a1, 16 * a2);
  v7 = (char *)v40 - v6;
  if (a2 < 1)
    return 0;
  bzero((char *)v40 - v6, v6);
  v8 = 0;
  v9 = 8 * a2;
  if (a2 < 6)
    goto LABEL_7;
  if ((a2 & 0x1FFFFFFFFFFFFFFCLL) == 0)
    goto LABEL_7;
  v10 = vdupq_n_s64(0x47EFFFFFE0000000uLL);
  v8 = a2 & 0xFFFFFFFC;
  v11 = vdupq_n_s64(0xC7EFFFFFE0000000);
  v12 = v8;
  v13 = (int64x2_t *)v7;
  do
  {
    *v13 = v10;
    v13[1] = v10;
    v14 = (int64x2_t *)((char *)v13 + v9);
    *v14 = v11;
    v14[1] = v11;
    v13 += 2;
    v12 -= 4;
  }
  while (v12);
  if (v8 != a2)
  {
LABEL_7:
    v15 = a2 - v8;
    v16 = &v7[8 * v8];
    do
    {
      *(_QWORD *)v16 = 0x47EFFFFFE0000000;
      *(_QWORD *)&v16[8 * a2] = 0xC7EFFFFFE0000000;
      v16 += 8;
      --v15;
    }
    while (v15);
  }
  if (a3 > 0)
  {
    v17 = 0;
    v18 = &v7[8 * a2];
    v20 = v7 < &v7[8 * a2 + 8 * (unint64_t)a2] && v18 < &v7[8 * a2];
    while (1)
    {
      v21 = a2 < 4 || v20;
      if ((v21 & 1) != 0)
        break;
      v23 = a2 & 0xFFFFFFFC;
      v24 = (float64x2_t *)v7;
      v25 = v5;
      do
      {
        v26 = *v25++;
        v27 = vcvtq_f64_f32(*(float32x2_t *)v26.f32);
        v28 = vcvt_hight_f64_f32(v26);
        v29 = vbslq_s8((int8x16_t)vcgtq_f64(v24[1], v28), (int8x16_t)v28, (int8x16_t)v24[1]);
        *(int8x16_t *)v24 = vbslq_s8((int8x16_t)vcgtq_f64(*v24, v27), (int8x16_t)v27, *(int8x16_t *)v24);
        v24[1] = (float64x2_t)v29;
        v30 = (int8x16_t *)((char *)v24 + v9);
        v31 = vbslq_s8((int8x16_t)vcgtq_f64(v28, *(float64x2_t *)((char *)v24 + v9 + 16)), (int8x16_t)v28, *(int8x16_t *)((char *)&v24[1] + v9));
        *v30 = vbslq_s8((int8x16_t)vcgtq_f64(v27, *(float64x2_t *)((char *)v24 + 8 * a2)), (int8x16_t)v27, *(int8x16_t *)((char *)v24 + 8 * a2));
        v30[1] = v31;
        v24 += 2;
        v23 -= 4;
      }
      while (v23);
      v22 = a2 & 0x7FFFFFFC;
      if ((a2 & 0xFFFFFFFC) != (unint64_t)a2)
        goto LABEL_25;
LABEL_16:
      ++v17;
      v5 = (float32x4_t *)((char *)v5 + 4 * a2);
      if (v17 == a3)
        goto LABEL_31;
    }
    v22 = 0;
    do
    {
LABEL_25:
      v32 = v5->f32[v22];
      v33 = *(double *)&v7[8 * v22];
      if (v33 > v32)
        v33 = v5->f32[v22];
      *(double *)&v7[8 * v22] = v33;
      if (*(double *)&v18[8 * v22] >= v32)
        v32 = *(double *)&v18[8 * v22];
      *(double *)&v18[8 * v22++] = v32;
    }
    while (a2 != v22);
    goto LABEL_16;
  }
LABEL_31:
  v34 = 0;
  LODWORD(result) = 0;
  v37 = -1.17549435e-38;
  do
  {
    v38 = *(double *)&v7[8 * v34];
    v36 = &v7[8 * a2];
    v39 = *(double *)&v36[8 * v34] - v38;
    if (v39 <= v37)
      result = result;
    else
      result = v34;
    if (v39 > v37)
      v37 = *(double *)&v36[8 * v34] - v38;
    ++v34;
  }
  while (a2 != v34);
  return result;
}

unint64_t rkd_sample_median(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unint64_t *a6)
{
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  float v19;
  float v20;
  float v21;

  if (a5)
  {
    v11 = (a5 - 1);
    v12 = rkd_sample_median(a1, a2, a3, a4, v11, a6);
    v13 = rkd_sample_median(a1, a2, a3, a4, v11, a6);
    v14 = rkd_sample_median(a1, a2, a3, a4, v11, a6);
  }
  else
  {
    v15 = a6[1];
    v16 = (v15 >> 5) ^ ((*a6 ^ (*a6 << 23)) >> 18) ^ v15 ^ *a6 ^ (*a6 << 23);
    v12 = (v16 + v15) % a3;
    v17 = ((v15 ^ (v15 << 23)) >> 18) ^ (v16 >> 5) ^ v15 ^ (v15 << 23) ^ v16;
    v13 = (v17 + v16) % a3;
    v18 = ((v16 ^ (v16 << 23)) >> 18) ^ (v17 >> 5) ^ v16 ^ (v16 << 23) ^ v17;
    *a6 = v17;
    a6[1] = v18;
    v14 = (v18 + v17) % a3;
  }
  v19 = *(float *)(a1 + 4 * ((int)a4 + (int)v12 * (int)a2));
  v20 = *(float *)(a1 + 4 * (int)(a4 + v13 * a2));
  v21 = *(float *)(a1 + 4 * (int)(a4 + v14 * a2));
  if (v19 >= v20)
  {
    if (v19 > v21)
    {
      if (v20 <= v21)
        return v14;
      else
        return v13;
    }
  }
  else if (v19 < v21)
  {
    if (v20 >= v21)
      return v14;
    else
      return v13;
  }
  return v12;
}

float vl_match_exhaustive(float result, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5, int a6, uint64_t a7)
{
  uint64_t v7;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _DWORD *v14;
  float *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  uint8x16_t v35;
  uint8x16_t v36;
  uint8x16_t v37;
  uint8x16_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int16x8_t v45;
  int v46;
  int *p_b;
  uint64_t v49;
  uint64_t v50;
  int32x4_t v51;
  uint64_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int v57;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  int *v63;
  uint64_t v64;
  void *v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  _DWORD *v73;
  float *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  uint8x16_t v94;
  uint8x16_t v95;
  uint8x16_t v96;
  uint8x16_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int16x8_t v104;
  int v105;
  int *v107;
  uint64_t v108;
  int v109;
  int v110;
  void *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  _DWORD *v117;
  float *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  int32x4_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int v131;
  int *v133;
  uint64_t v134;
  int v135;
  int *v137;
  uint64_t v138;
  void *v139;
  int v140;
  int v141;
  uint64_t v142;
  int v143;
  _DWORD *v144;
  float *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  int *v152;
  uint64_t v153;
  int v154;
  int v155;
  void *v156;
  int v157;
  int v158;
  uint64_t v159;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int __b;
  int v173;
  _QWORD v174[2];

  v174[1] = *MEMORY[0x24BDAC8D0];
  if (a6)
  {
    printf("%sAborting : ", (const char *)&unk_210BC3C5E);
    printf("%s: CUDA is not available on Apple devices", "vl_match_exhaustive_cuda");
    putchar(10);
    __assert_rtn("vl_match_exhaustive_cuda", "vl_match_exhaustive.c", 214, "0");
  }
  v7 = a5;
  if ((int)(*a3 / a5) >= 1)
  {
    v9 = a5 >> 4;
    v161 = a3;
    v162 = (*a3 / a5);
    if ((uint64_t)a4[61] >= 1)
    {
      v158 = a5 & 0xF;
      v10 = 0;
      v168 = 0;
      v11 = a5 & 0xFFFFFFE0;
      v12 = a5 & 0xFFFFFFF8;
      v159 = a5;
      while (1)
      {
        v16 = a3[1];
        v164 = *(_QWORD *)(a7 + 8);
        v166 = *(_QWORD *)(a7 + 32);
        v17 = a4[24];
        v18 = a4[25];
        v174[0] = -1;
        v19 = v17 / v7;
        memset_pattern16(&__b, &unk_210BCDC70, 8uLL);
        if ((int)v19 >= 1)
        {
          v20 = a4[62];
          if (v158)
          {
            if (a5 > 0)
            {
              v21 = 0;
              v22 = v16 + v10;
              while (!*(_DWORD *)(v20 + 4 * v21))
              {
LABEL_11:
                v18 += v7;
                if (++v21 == v19)
                  goto LABEL_60;
              }
              if (a5 < 8)
              {
                v23 = 0;
                v24 = 0;
                goto LABEL_24;
              }
              if (a5 >= 0x20)
              {
                v26 = 0;
                v27 = 0uLL;
                v28 = 0uLL;
                v29 = 0uLL;
                v30 = 0uLL;
                v31 = 0uLL;
                v32 = 0uLL;
                v33 = 0uLL;
                v34 = 0uLL;
                do
                {
                  v35 = *(uint8x16_t *)(v22 + v26);
                  v36 = *(uint8x16_t *)(v22 + v26 + 16);
                  v37 = *(uint8x16_t *)(v18 + v26);
                  v38 = *(uint8x16_t *)(v18 + v26 + 16);
                  v39 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v35.i8, *(uint8x8_t *)v37.i8);
                  v40 = (int16x8_t)vsubl_high_u8(v35, v37);
                  v41 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v36.i8, *(uint8x8_t *)v38.i8);
                  v42 = (int16x8_t)vsubl_high_u8(v36, v38);
                  v30 = vmlal_high_s16(v30, v40, v40);
                  v29 = vmlal_s16(v29, *(int16x4_t *)v40.i8, *(int16x4_t *)v40.i8);
                  v28 = vmlal_high_s16(v28, v39, v39);
                  v27 = vmlal_s16(v27, *(int16x4_t *)v39.i8, *(int16x4_t *)v39.i8);
                  v34 = vmlal_high_s16(v34, v42, v42);
                  v33 = vmlal_s16(v33, *(int16x4_t *)v42.i8, *(int16x4_t *)v42.i8);
                  v32 = vmlal_high_s16(v32, v41, v41);
                  v31 = vmlal_s16(v31, *(int16x4_t *)v41.i8, *(int16x4_t *)v41.i8);
                  v26 += 32;
                }
                while (v11 != v26);
                v24 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v31, v27), vaddq_s32(v33, v29)), vaddq_s32(vaddq_s32(v32, v28), vaddq_s32(v34, v30))));
                if (v11 != a5)
                {
                  v25 = a5 & 0xFFFFFFE0;
                  v23 = v25;
                  if ((a5 & 0x18) == 0)
                    goto LABEL_24;
                  goto LABEL_21;
                }
              }
              else
              {
                v24 = 0;
                v25 = 0;
LABEL_21:
                v43 = 0uLL;
                v44 = (int32x4_t)v24;
                do
                {
                  v45 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(v22 + v25), *(uint8x8_t *)(v18 + v25));
                  v43 = vmlal_high_s16(v43, v45, v45);
                  v44 = vmlal_s16(v44, *(int16x4_t *)v45.i8, *(int16x4_t *)v45.i8);
                  v25 += 8;
                }
                while (v12 != v25);
                v24 = vaddvq_s32(vaddq_s32(v44, v43));
                v23 = a5 & 0xFFFFFFF8;
                if (v12 != a5)
                {
                  do
                  {
LABEL_24:
                    v46 = *(unsigned __int8 *)(v22 + v23) - *(unsigned __int8 *)(v18 + v23);
                    v24 += v46 * v46;
                    ++v23;
                  }
                  while (a5 != v23);
                }
              }
              if (v24 < __b || v24 < v173)
              {
                if (__b >= v173)
                  p_b = &__b;
                else
                  p_b = &v173;
                v49 = ((char *)p_b - (char *)&__b) << 30 >> 30;
                *(_DWORD *)((char *)v174 + v49) = v21;
                *(int *)((char *)&__b + v49) = v24;
              }
              goto LABEL_11;
            }
            v61 = 0;
            do
            {
              if (*(_DWORD *)(v20 + 4 * v61))
              {
                if (__b > 0 || v173 >= 1)
                {
                  if (__b >= v173)
                    v63 = &__b;
                  else
                    v63 = &v173;
                  v64 = ((char *)v63 - (char *)&__b) << 30 >> 30;
                  *(_DWORD *)((char *)v174 + v64) = v61;
                  *(int *)((char *)&__b + v64) = 0;
                }
              }
              ++v61;
            }
            while (v19 != v61);
          }
          else
          {
            v50 = 0;
            do
            {
              if (*(_DWORD *)(v20 + 4 * v50))
              {
                v51 = 0uLL;
                if (a5 >= 16)
                {
                  v52 = 0;
                  do
                  {
                    v53 = *(int8x16_t *)(v16 + v10 + 16 * v52);
                    v54 = *(int8x16_t *)(v18 + 16 * v52);
                    v55 = (int16x8_t)vabdq_u16((uint16x8_t)vzip1q_s8(v53, (int8x16_t)0), (uint16x8_t)vzip1q_s8(v54, (int8x16_t)0));
                    v56 = (int16x8_t)vabdq_u16((uint16x8_t)vzip2q_s8(v53, (int8x16_t)0), (uint16x8_t)vzip2q_s8(v54, (int8x16_t)0));
                    v51 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v51, (uint16x8_t)vmulq_s16(v55, v55)), (uint16x8_t)vmulq_s16(v56, v56));
                    ++v52;
                  }
                  while (v9 != (_DWORD)v52);
                }
                v57 = vaddvq_s32(v51);
                if (v57 < __b || v57 < v173)
                {
                  if (__b >= v173)
                    v59 = &__b;
                  else
                    v59 = &v173;
                  v60 = ((char *)v59 - (char *)&__b) << 30 >> 30;
                  *(_DWORD *)((char *)v174 + v60) = v50;
                  *(int *)((char *)&__b + v60) = v57;
                }
              }
              v18 += v7;
              ++v50;
            }
            while (v50 != v19);
          }
        }
LABEL_60:
        v65 = malloc_type_malloc(0x200uLL, 0xD7C3B485uLL);
        v66 = __b;
        v67 = HIDWORD(v174[0]);
        v68 = v10;
        if (v173 < __b)
        {
          __b = v173;
          v173 = v66;
          v13 = v174[0];
        }
        else
        {
          v13 = HIDWORD(v174[0]);
          v67 = v174[0];
        }
        v14 = (_DWORD *)(v164 + 8 * v168);
        v15 = (float *)(v166 + 8 * v168);
        free(v65);
        *v14 = v67;
        *v15 = (float)__b;
        v14[1] = v13;
        result = (float)v173;
        v15[1] = (float)v173;
        v10 = v68 + v159;
        ++v168;
        v7 = v159;
        a3 = v161;
        if (v168 == v162)
          return result;
      }
    }
    if ((a5 & 0xF) != 0)
    {
      if (a5 > 0)
      {
        v69 = 0;
        v169 = 0;
        v70 = a5 & 0xFFFFFFE0;
        v71 = a5 & 0xFFFFFFF8;
        while (1)
        {
          v75 = a3[1];
          v165 = *(_QWORD *)(a7 + 8);
          v76 = *(_QWORD *)(a7 + 32);
          v77 = a4[24];
          v78 = a4[25];
          v174[0] = 0;
          v79 = v77 / v7;
          memset_pattern16(&__b, &unk_210BCDC70, 8uLL);
          if ((int)v79 >= 1)
            break;
          v110 = 0;
          v109 = 0;
LABEL_93:
          v111 = malloc_type_malloc(0x200uLL, 0x94865AD4uLL);
          v112 = __b;
          v167 = v69;
          if (v173 < __b)
          {
            __b = v173;
            v173 = v112;
            v72 = v109;
          }
          else
          {
            v72 = v110;
            v110 = v109;
          }
          v73 = (_DWORD *)(v165 + 8 * v169);
          v74 = (float *)(v76 + 8 * v169);
          free(v111);
          *v73 = v110;
          *v74 = (float)__b;
          v73[1] = v72;
          result = (float)v173;
          v74[1] = (float)v173;
          v69 = v167 + v7;
          ++v169;
          a3 = v161;
          if (v169 == v162)
            return result;
        }
        v80 = 0;
        v81 = v75 + v69;
        while (1)
        {
          if (a5 < 8)
          {
            v82 = 0;
            v83 = 0;
            do
            {
LABEL_81:
              v105 = *(unsigned __int8 *)(v81 + v82) - *(unsigned __int8 *)(v78 + v82);
              v83 += v105 * v105;
              ++v82;
            }
            while (a5 != v82);
            goto LABEL_82;
          }
          if (a5 >= 0x20)
          {
            v85 = 0;
            v86 = 0uLL;
            v87 = 0uLL;
            v88 = 0uLL;
            v89 = 0uLL;
            v90 = 0uLL;
            v91 = 0uLL;
            v92 = 0uLL;
            v93 = 0uLL;
            do
            {
              v94 = *(uint8x16_t *)(v81 + v85);
              v95 = *(uint8x16_t *)(v81 + v85 + 16);
              v96 = *(uint8x16_t *)(v78 + v85);
              v97 = *(uint8x16_t *)(v78 + v85 + 16);
              v98 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v94.i8, *(uint8x8_t *)v96.i8);
              v99 = (int16x8_t)vsubl_high_u8(v94, v96);
              v100 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v95.i8, *(uint8x8_t *)v97.i8);
              v101 = (int16x8_t)vsubl_high_u8(v95, v97);
              v89 = vmlal_high_s16(v89, v99, v99);
              v88 = vmlal_s16(v88, *(int16x4_t *)v99.i8, *(int16x4_t *)v99.i8);
              v87 = vmlal_high_s16(v87, v98, v98);
              v86 = vmlal_s16(v86, *(int16x4_t *)v98.i8, *(int16x4_t *)v98.i8);
              v93 = vmlal_high_s16(v93, v101, v101);
              v92 = vmlal_s16(v92, *(int16x4_t *)v101.i8, *(int16x4_t *)v101.i8);
              v91 = vmlal_high_s16(v91, v100, v100);
              v90 = vmlal_s16(v90, *(int16x4_t *)v100.i8, *(int16x4_t *)v100.i8);
              v85 += 32;
            }
            while (v70 != v85);
            v83 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v90, v86), vaddq_s32(v92, v88)), vaddq_s32(vaddq_s32(v91, v87), vaddq_s32(v93, v89))));
            if (v70 == a5)
              goto LABEL_82;
            v84 = a5 & 0xFFFFFFE0;
            v82 = v84;
            if ((a5 & 0x18) == 0)
              goto LABEL_81;
          }
          else
          {
            v83 = 0;
            v84 = 0;
          }
          v102 = 0uLL;
          v103 = (int32x4_t)v83;
          do
          {
            v104 = (int16x8_t)vsubl_u8(*(uint8x8_t *)(v81 + v84), *(uint8x8_t *)(v78 + v84));
            v102 = vmlal_high_s16(v102, v104, v104);
            v103 = vmlal_s16(v103, *(int16x4_t *)v104.i8, *(int16x4_t *)v104.i8);
            v84 += 8;
          }
          while (v71 != v84);
          v83 = vaddvq_s32(vaddq_s32(v103, v102));
          v82 = a5 & 0xFFFFFFF8;
          if (v71 != a5)
            goto LABEL_81;
LABEL_82:
          if (v83 < __b || v83 < v173)
          {
            if (__b >= v173)
              v107 = &__b;
            else
              v107 = &v173;
            v108 = ((char *)v107 - (char *)&__b) << 30 >> 30;
            *(_DWORD *)((char *)v174 + v108) = v80;
            *(int *)((char *)&__b + v108) = v83;
          }
          v78 += v7;
          if (++v80 == (_DWORD)v79)
          {
            v109 = v174[0];
            v110 = HIDWORD(v174[0]);
            goto LABEL_93;
          }
        }
      }
      v142 = 0;
      do
      {
        v146 = *(_QWORD *)(a7 + 8);
        v147 = *(_QWORD *)(a7 + 32);
        v148 = a4[24];
        v174[0] = 0;
        v149 = v148 / v7;
        memset_pattern16(&__b, &unk_210BCDC70, 8uLL);
        if ((int)v149 < 1)
        {
          v154 = 0;
          v155 = 0;
        }
        else
        {
          v150 = 0;
          do
          {
            if (__b > 0 || v173 >= 1)
            {
              if (__b >= v173)
                v152 = &__b;
              else
                v152 = &v173;
              v153 = ((char *)v152 - (char *)&__b) << 30 >> 30;
              *(_DWORD *)((char *)v174 + v153) = v150;
              *(int *)((char *)&__b + v153) = 0;
            }
            ++v150;
          }
          while ((_DWORD)v149 != v150);
          v155 = v174[0];
          v154 = HIDWORD(v174[0]);
        }
        v156 = malloc_type_malloc(0x200uLL, 0x94865AD4uLL);
        v157 = __b;
        if (v173 < __b)
        {
          __b = v173;
          v173 = v157;
          v143 = v155;
        }
        else
        {
          v143 = v154;
          v154 = v155;
        }
        v144 = (_DWORD *)(v146 + 8 * v142);
        v145 = (float *)(v147 + 8 * v142);
        free(v156);
        *v144 = v154;
        *v145 = (float)__b;
        v144[1] = v143;
        result = (float)v173;
        v145[1] = (float)v173;
        ++v142;
      }
      while (v142 != v162);
    }
    else
    {
      v113 = 0;
      v114 = 0;
      do
      {
        v119 = a3[1];
        v170 = *(_QWORD *)(a7 + 8);
        v120 = *(_QWORD *)(a7 + 32);
        v121 = a4[24];
        v122 = a4[25];
        v174[0] = 0;
        v123 = v121 / v7;
        memset_pattern16(&__b, &unk_210BCDC70, 8uLL);
        if ((int)v123 >= 1)
        {
          if (a5 <= 15)
          {
            v135 = 0;
            do
            {
              if (__b > 0 || v173 >= 1)
              {
                if (__b >= v173)
                  v137 = &__b;
                else
                  v137 = &v173;
                v138 = ((char *)v137 - (char *)&__b) << 30 >> 30;
                *(_DWORD *)((char *)v174 + v138) = v135;
                *(int *)((char *)&__b + v138) = 0;
              }
              ++v135;
            }
            while ((_DWORD)v123 != v135);
          }
          else
          {
            v124 = 0;
            do
            {
              v125 = 0;
              v126 = 0uLL;
              do
              {
                v127 = *(int8x16_t *)(v119 + v113 + 16 * v125);
                v128 = *(int8x16_t *)(v122 + 16 * v125);
                v129 = (int16x8_t)vabdq_u16((uint16x8_t)vzip1q_s8(v127, (int8x16_t)0), (uint16x8_t)vzip1q_s8(v128, (int8x16_t)0));
                v130 = (int16x8_t)vabdq_u16((uint16x8_t)vzip2q_s8(v127, (int8x16_t)0), (uint16x8_t)vzip2q_s8(v128, (int8x16_t)0));
                v126 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v126, (uint16x8_t)vmulq_s16(v129, v129)), (uint16x8_t)vmulq_s16(v130, v130));
                ++v125;
              }
              while (v9 != (_DWORD)v125);
              v131 = vaddvq_s32(v126);
              if (v131 < __b || v131 < v173)
              {
                if (__b >= v173)
                  v133 = &__b;
                else
                  v133 = &v173;
                v134 = ((char *)v133 - (char *)&__b) << 30 >> 30;
                *(_DWORD *)((char *)v174 + v134) = v124;
                *(int *)((char *)&__b + v134) = v131;
              }
              v122 += v7;
              ++v124;
            }
            while (v124 != (_DWORD)v123);
          }
        }
        v139 = malloc_type_malloc(0x200uLL, 0x94865AD4uLL);
        v140 = __b;
        v141 = HIDWORD(v174[0]);
        if (v173 < __b)
        {
          __b = v173;
          v173 = v140;
          v115 = v174[0];
        }
        else
        {
          v115 = HIDWORD(v174[0]);
          v141 = v174[0];
        }
        v116 = v120;
        v117 = (_DWORD *)(v170 + 8 * v114);
        v118 = (float *)(v116 + 8 * v114);
        free(v139);
        *v117 = v141;
        *v118 = (float)__b;
        v117[1] = v115;
        result = (float)v173;
        v118[1] = (float)v173;
        ++v114;
        v113 += v7;
        a3 = v161;
      }
      while (v114 != v162);
    }
  }
  return result;
}

void vl_match_exhaustive_knn_rematch(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t a7, unsigned int a8, float a9)
{
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  int32x4_t *v15;
  uint64_t v16;
  int32x4_t v17;
  int32x4_t *v18;
  int32x4_t v19;
  int32x4_t v20;
  uint64_t v21;
  uint8x8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  float *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int32x4_t v64;
  uint8x8_t *v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  uint8x16_t v73;
  uint8x16_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int32x4_t v80;
  uint8x8_t *v81;
  uint64_t v82;
  uint8x8_t v83;
  uint8x8_t v84;
  uint8x8_t v85;
  int16x8_t v86;
  unsigned __int8 *v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  int8x16_t *v94;
  uint64_t v95;
  char *v96;
  _DWORD *v97;
  float *v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  float v103;
  int8x16_t *v104;
  int32x4_t v105;
  int v106;
  int8x16_t *v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int16x8_t v111;
  int16x8_t v112;
  float v113;
  uint64_t v114;
  uint64_t v115;
  float v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _DWORD *v120;
  _DWORD *v121;
  int v122;
  int v123;
  uint64_t v124;
  float v125;
  uint64_t v126;
  void **v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t *v138;
  unsigned int v139;
  void **v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;

  v139 = a8;
  v132 = a7;
  v133 = a4;
  v131 = a2;
  v144 = *MEMORY[0x24BDAC8D0];
  v137 = a1;
  v12 = *a1;
  v13 = *a5;
  v14 = (const void *)a5[1];
  v141 = *a1;
  v142 = 0x3D4CCCCD00000010;
  v143 = 0;
  v15 = (int32x4_t *)malloc_type_malloc(4 * (int)v13, 0x100004052888210uLL);
  if ((int)v13 >= 1)
  {
    if (v13 < 8uLL)
    {
      v16 = 0;
      do
      {
LABEL_7:
        v15->i32[v16] = v16;
        ++v16;
      }
      while (v13 != v16);
      goto LABEL_8;
    }
    v16 = v13 & 0x7FFFFFF8;
    v17 = (int32x4_t)xmmword_210BCABD0;
    v18 = v15 + 1;
    v19.i64[0] = 0x400000004;
    v19.i64[1] = 0x400000004;
    v20.i64[0] = 0x800000008;
    v20.i64[1] = 0x800000008;
    v21 = v13 & 0xFFFFFFF8;
    do
    {
      v18[-1] = v17;
      *v18 = vaddq_s32(v17, v19);
      v17 = vaddq_s32(v17, v20);
      v18 += 2;
      v21 -= 8;
    }
    while (v21);
    if ((v13 & 7) != 0)
      goto LABEL_7;
  }
LABEL_8:
  v22 = (uint8x8_t *)rkd_create_ex(v14, (uint64_t)v15, 2, v13, 1, (uint64_t)&v142);
  v140 = (void **)v22;
  v24 = *a6;
  v25 = (int)v141;
  v26 = a6[2];
  if ((int)v141 > v26)
  {
    v31 = 2 * v26;
    v32 = v26 == 0;
    v33 = 32;
    if (!v32)
      v33 = v31;
    if (v33 <= (int)v141)
      v34 = (int)v141;
    else
      v34 = v33;
    if (v34)
    {
      v22 = (uint8x8_t *)malloc_type_realloc((void *)a6[1], 8 * v34, 0xA239823FuLL);
      a6[1] = (uint64_t)v22;
    }
    a6[2] = v34;
    v27 = v25 - v24;
    if (v25 <= v24)
    {
LABEL_10:
      *a6 = v25;
      v28 = a6[3];
      v29 = a6[5];
      if (v25 <= v29)
        goto LABEL_11;
      goto LABEL_23;
    }
  }
  else
  {
    v27 = (int)v141 - v24;
    if ((int)v141 <= v24)
      goto LABEL_10;
  }
  bzero((void *)(a6[1] + 8 * *a6), 8 * v27);
  *a6 = v25;
  v28 = a6[3];
  v29 = a6[5];
  if (v25 <= v29)
  {
LABEL_11:
    v30 = v25 - v28;
    if (v25 <= v28)
      goto LABEL_12;
LABEL_31:
    bzero((void *)(a6[4] + 8 * a6[3]), 8 * v30);
    v138 = a6;
    a6[3] = v25;
    if ((int)v12 < 1)
      goto LABEL_80;
    goto LABEL_32;
  }
LABEL_23:
  v35 = 2 * v29;
  v32 = v29 == 0;
  v36 = 32;
  if (!v32)
    v36 = v35;
  if (v36 <= v25)
    v37 = v25;
  else
    v37 = v36;
  if (v37)
  {
    v22 = (uint8x8_t *)malloc_type_realloc((void *)a6[4], 8 * v37, 0xFB6ACFAAuLL);
    a6[4] = (uint64_t)v22;
  }
  a6[5] = v37;
  v30 = v25 - v28;
  if (v25 > v28)
    goto LABEL_31;
LABEL_12:
  v138 = a6;
  a6[3] = v25;
  if ((int)v12 < 1)
    goto LABEL_80;
LABEL_32:
  if ((a3 & 0xF) != 0)
  {
    if (a3 > 0)
    {
      v38 = 0;
      v39 = a3 & 0xFFFFFFF8;
      v40 = 48;
      v41 = 32;
      v129 = a3 & 0x18;
      v130 = 4 * v139;
      v128 = -v39;
      while (1)
      {
        v134 = &v128;
        v135 = v40;
        v43 = v137[1];
        v142 = *(_QWORD *)(v43 + 288 * v38);
        MEMORY[0x24BDAC7A8](v22, v23);
        v45 = (char *)&v128 - ((v44 + 15) & 0x7FFFFFFF0);
        v46 = v138[1];
        v136 = v47;
        v48 = 8 * v47;
        v49 = (_DWORD *)(v46 + 8 * v47);
        v50 = (float *)(v138[4] + 8 * v47);
        v22 = (uint8x8_t *)rkd_knn_app((uint64_t)v140, (float *)&v142, 0, (uint64_t)v45, v139, 0x7FFFFFFF, a9);
        if ((int)v22 > 0)
          break;
        v89 = v132;
        *v49 = *(_DWORD *)(*(_QWORD *)(v132 + 8) + v48);
        *v50 = *(float *)(*(_QWORD *)(v89 + 32) + v48);
        v49[1] = -1;
        v50[1] = -1.0;
        v57 = v135;
        v56 = v136;
LABEL_36:
        v38 = v56 + 1;
        v40 = v57 + 288;
        v41 += 288;
        if (v38 == v141)
          goto LABEL_80;
      }
      v51 = 0;
      v52 = 0;
      *v49 = 0;
      *v50 = 2147500000.0;
      v53 = *(_QWORD *)(v133 + 8);
      v54 = *(_QWORD *)(v131 + 200);
      v55 = v22;
      v57 = v135;
      v56 = v136;
      v58 = 2147500000.0;
      v60 = v128;
      v59 = v129;
      while (1)
      {
        v61 = *(int *)(v53 + 4 * *(int *)&v45[4 * v52]) * (uint64_t)a3;
        if (a3 >= 8)
        {
          if (a3 < 0x20)
          {
            v62 = 0;
            v63 = 0;
LABEL_48:
            v79 = 0uLL;
            v80 = (int32x4_t)v62;
            v81 = (uint8x8_t *)(v43 + v41 + v63);
            v22 = (uint8x8_t *)(v54 + v63 + v61);
            v82 = v60 + v63;
            do
            {
              v83 = *v81++;
              v84 = v83;
              v85 = *v22++;
              v86 = (int16x8_t)vsubl_u8(v84, v85);
              v79 = vmlal_high_s16(v79, v86, v86);
              v80 = vmlal_s16(v80, *(int16x4_t *)v86.i8, *(int16x4_t *)v86.i8);
              v82 += 8;
            }
            while (v82);
            v62 = vaddvq_s32(vaddq_s32(v80, v79));
            v23 = a3 & 0xFFFFFFF8;
            if (v39 == a3)
              goto LABEL_53;
            goto LABEL_51;
          }
          v64 = 0uLL;
          v65 = (uint8x8_t *)(v54 + 16 + v61);
          v66 = 0uLL;
          v22 = (uint8x8_t *)(v43 + v57);
          v23 = a3 & 0xFFFFFFE0;
          v67 = 0uLL;
          v68 = 0uLL;
          v69 = 0uLL;
          v70 = 0uLL;
          v71 = 0uLL;
          v72 = 0uLL;
          do
          {
            v73 = *(uint8x16_t *)v22[-2].i8;
            v74 = *(uint8x16_t *)v65[-2].i8;
            v75 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v73.i8, *(uint8x8_t *)v74.i8);
            v76 = (int16x8_t)vsubl_high_u8(v73, v74);
            v77 = (int16x8_t)vsubl_u8(*v22, *v65);
            v78 = (int16x8_t)vsubl_high_u8(*(uint8x16_t *)v22->i8, *(uint8x16_t *)v65->i8);
            v68 = vmlal_high_s16(v68, v76, v76);
            v67 = vmlal_s16(v67, *(int16x4_t *)v76.i8, *(int16x4_t *)v76.i8);
            v66 = vmlal_high_s16(v66, v75, v75);
            v64 = vmlal_s16(v64, *(int16x4_t *)v75.i8, *(int16x4_t *)v75.i8);
            v72 = vmlal_high_s16(v72, v78, v78);
            v71 = vmlal_s16(v71, *(int16x4_t *)v78.i8, *(int16x4_t *)v78.i8);
            v70 = vmlal_high_s16(v70, v77, v77);
            v69 = vmlal_s16(v69, *(int16x4_t *)v77.i8, *(int16x4_t *)v77.i8);
            v22 += 4;
            v65 += 4;
            v23 -= 32;
          }
          while (v23);
          v62 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v69, v64), vaddq_s32(v71, v67)), vaddq_s32(vaddq_s32(v70, v66), vaddq_s32(v72, v68))));
          if ((a3 & 0xFFFFFFE0) == (unint64_t)a3)
            goto LABEL_53;
          v63 = a3 & 0xFFFFFFE0;
          v23 = v63;
          if (v59)
            goto LABEL_48;
        }
        else
        {
          v23 = 0;
          v62 = 0;
        }
LABEL_51:
        v22 = (uint8x8_t *)(a3 - v23);
        v87 = (unsigned __int8 *)(v54 + v23 + v61);
        v23 += v43;
        do
        {
          v88 = *v87++;
          v62 += (*(unsigned __int8 *)(v23 + v41) - v88) * (*(unsigned __int8 *)(v23 + v41) - v88);
          ++v23;
          v22 = (uint8x8_t *)((char *)v22 - 1);
        }
        while (v22);
LABEL_53:
        if (v58 > (float)v62)
        {
          *v49 = v52;
          *v50 = (float)v62;
          v51 = v52;
          v58 = (float)v62;
        }
        if (++v52 == v55)
        {
          v42 = *(int *)&v45[4 * v51];
          *v49 = *(_DWORD *)(v53 + 4 * v42);
          v49[1] = v42;
          goto LABEL_36;
        }
      }
    }
    v117 = 0;
    v118 = 4 * v139;
    do
    {
      while (1)
      {
        v142 = *(_QWORD *)(v137[1] + 288 * v117);
        MEMORY[0x24BDAC7A8](v22, v23);
        v120 = (_DWORD *)(v138[1] + 8 * v117);
        v121 = (_DWORD *)(v138[4] + 8 * v117);
        v22 = (uint8x8_t *)rkd_knn_app((uint64_t)v140, (float *)&v142, 0, (uint64_t)&v128 - ((v118 + 15) & 0x7FFFFFFF0), v139, 0x7FFFFFFF, a9);
        if ((int)v22 >= 1)
          break;
        v126 = v132;
        *v120 = *(_DWORD *)(*(_QWORD *)(v132 + 8) + 8 * v117);
        *v121 = *(_DWORD *)(*(_QWORD *)(v126 + 32) + 8 * v117);
        v120[1] = -1;
        v121[1] = -1082130432;
        if (++v117 == v141)
          goto LABEL_80;
      }
      v122 = 0;
      v123 = 0;
      *v120 = 0;
      *v121 = 1325400064;
      v124 = *(_QWORD *)(v133 + 8);
      v125 = 2147500000.0;
      do
      {
        if (v125 > 0.0)
        {
          *v120 = v123;
          *v121 = 0;
          v125 = 0.0;
          v122 = v123;
        }
        ++v123;
      }
      while ((_DWORD)v22 != v123);
      v119 = *(int *)((char *)&v128 + 4 * v122 - ((v118 + 15) & 0x7FFFFFFF0));
      *v120 = *(_DWORD *)(v124 + 4 * v119);
      v120[1] = v119;
      ++v117;
    }
    while (v117 != v141);
  }
  else
  {
    v90 = 0;
    v91 = 4 * v139;
    do
    {
      while (1)
      {
        v93 = (uint64_t *)(v137[1] + 288 * v90);
        v95 = *v93;
        v94 = (int8x16_t *)(v93 + 4);
        v142 = v95;
        MEMORY[0x24BDAC7A8](v22, v23);
        v96 = (char *)&v128 - ((v91 + 15) & 0x7FFFFFFF0);
        v97 = (_DWORD *)(v138[1] + 8 * v90);
        v98 = (float *)(v138[4] + 8 * v90);
        v22 = (uint8x8_t *)rkd_knn_app((uint64_t)v140, (float *)&v142, 0, (uint64_t)v96, v139, 0x7FFFFFFF, a9);
        if ((int)v22 > 0)
          break;
        v114 = v132;
        *v97 = *(_DWORD *)(*(_QWORD *)(v132 + 8) + 8 * v90);
        *v98 = *(float *)(*(_QWORD *)(v114 + 32) + 8 * v90);
        v97[1] = -1;
        v98[1] = -1.0;
        if (++v90 == v141)
          goto LABEL_80;
      }
      *v97 = 0;
      *v98 = 2147500000.0;
      v99 = *(_QWORD *)(v133 + 8);
      if (a3 <= 15)
      {
        v100 = 0;
        v115 = 0;
        v116 = 2147500000.0;
        do
        {
          if (v116 > 0.0)
          {
            *v97 = v115;
            *v98 = 0.0;
            v116 = 0.0;
            v100 = v115;
          }
          ++v115;
        }
        while (v22 != v115);
      }
      else
      {
        v100 = 0;
        v101 = 0;
        v102 = *(_QWORD *)(v131 + 200);
        v103 = 2147500000.0;
        do
        {
          v104 = (int8x16_t *)(v102 + *(int *)(v99 + 4 * *(int *)&v96[4 * v101]) * (uint64_t)a3);
          v105 = 0uLL;
          v106 = a3 >> 4;
          v107 = v94;
          do
          {
            v108 = *v107++;
            v109 = v108;
            v110 = *v104++;
            v111 = (int16x8_t)vabdq_u16((uint16x8_t)vzip1q_s8(v109, (int8x16_t)0), (uint16x8_t)vzip1q_s8(v110, (int8x16_t)0));
            v112 = (int16x8_t)vabdq_u16((uint16x8_t)vzip2q_s8(v109, (int8x16_t)0), (uint16x8_t)vzip2q_s8(v110, (int8x16_t)0));
            v105 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v105, (uint16x8_t)vmulq_s16(v111, v111)), (uint16x8_t)vmulq_s16(v112, v112));
            --v106;
          }
          while (v106);
          v113 = (float)vaddvq_s32(v105);
          if (v103 > v113)
          {
            *v97 = v101;
            *v98 = v113;
            v100 = v101;
            v103 = v113;
          }
          ++v101;
        }
        while (v101 != v22);
      }
      v92 = *(int *)&v96[4 * v100];
      *v97 = *(_DWORD *)(v99 + 4 * v92);
      v97[1] = v92;
      ++v90;
    }
    while (v90 != v141);
  }
LABEL_80:
  v127 = v140;
  if (v140)
  {
    free(*v140);
    free(v127[1]);
    free(v127[2]);
    free(v127);
  }
}

uint64_t vl_lbl_desc(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  float v13;
  double v14;
  int v15;
  int v16;
  uint64_t i;
  lbl_feature2d_t *v18;
  lbl_feature2d_t *v19;
  uint64_t v20;
  __darwin_time_t tv_sec;
  uint64_t tv_usec;
  __darwin_time_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  void *v29;
  __darwin_time_t v30;
  __darwin_time_t v31;
  uint64_t v32;
  signed int *v33;
  signed int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  signed int v38;
  signed int v39;
  int32x2_t v40;
  uint64x2_t v41;
  float32x2_t v42;
  float32x2_t *v43;
  float32x2_t v44;
  float32x2_t v45;
  float *v46;
  float v47;
  __darwin_time_t v48;
  uint64_t v49;
  uint64_t v51;
  int v52;
  _OWORD v54[13];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  int v59;
  _QWORD v60[3];
  int32x2_t v61;
  uint64_t v62;
  uint64_t v63;
  timeval v64;
  __int128 v65;
  __int128 v66;
  _OWORD v67[2];
  __int128 v68;
  uint64_t v69;

  v61 = 0;
  v62 = 0;
  v63 = 0;
  memset(v60, 0, sizeof(v60));
  v59 = 0;
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  memset(v54, 0, sizeof(v54));
  v13 = atan2((float)(*(float *)(a3 + 4) - *(float *)(a3 + 8)), (float)((float)(*(float *)(a3 + 8) + *(float *)(a3 + 4)) + 0.0));
  v14 = v13;
  if (v13 < 0.0 || v14 >= 1.57079633)
  {
    if (v14 < 1.57079633 || v14 >= 3.14159265)
    {
      if (v13 < 0.0 && v14 >= -1.57079633)
      {
        v52 = 0;
        if (*(_DWORD *)(a6 + 212))
          goto LABEL_16;
LABEL_10:
        clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(a6 + 32));
        clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(a6 + 16));
        clock_gettime(_CLOCK_MONOTONIC, (timespec *)a6);
        if (*(_DWORD *)(a5 + 540) == a4)
          goto LABEL_23;
        goto LABEL_17;
      }
      v15 = v14 < -1.57079633 && v14 >= -3.14159265;
    }
    else
    {
      v15 = 2;
    }
  }
  else
  {
    v15 = 3;
  }
  v52 = v15;
  if (!*(_DWORD *)(a6 + 212))
    goto LABEL_10;
LABEL_16:
  *(_QWORD *)(a6 + 120) -= mach_absolute_time();
  if (*(_DWORD *)(a5 + 540) == a4)
    goto LABEL_23;
LABEL_17:
  printf("Info : ");
  printf("Load lbl model: %d", a4);
  putchar(10);
  v16 = *(_DWORD *)(a5 + 536);
  if (v16 >= 1)
  {
    for (i = 0; i < v16; ++i)
    {
      v18 = *(lbl_feature2d_t **)(a5 + 8 * i);
      if (v18)
      {
        lbl_feature2d_t::~lbl_feature2d_t(v18);
        MEMORY[0x212BCEB50]();
        *(_QWORD *)(a5 + 8 * i) = 0;
        v16 = *(_DWORD *)(a5 + 536);
      }
    }
  }
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_DWORD *)(a5 + 536) = 1;
  v19 = (lbl_feature2d_t *)operator new();
  lbl_feature2d_t::lbl_feature2d_t(v19, (const char *)(a5 + 24), a4);
  *(_QWORD *)a5 = v19;
  *(_DWORD *)(a5 + 540) = a4;
LABEL_23:
  vl_timer_stop(a6);
  if (*(_DWORD *)(a5 + 536) != 1)
  {
    printf("%sError : ", (const char *)&unk_210BC3C5E);
    printf("Multi-scale not supported on device");
    putchar(10);
  }
  v20 = *(_QWORD *)a5;
  v64.tv_sec = 0;
  *(_QWORD *)&v64.tv_usec = 0;
  gettimeofday(&v64, 0);
  tv_sec = v64.tv_sec;
  tv_usec = v64.tv_usec;
  v51 = a7;
  if (*(_DWORD *)(a7 + 212))
  {
    *(_QWORD *)(a7 + 120) -= mach_absolute_time();
  }
  else
  {
    clock_gettime(_CLOCK_THREAD_CPUTIME_ID, (timespec *)(a7 + 32));
    clock_gettime(_CLOCK_PROCESS_CPUTIME_ID, (timespec *)(a7 + 16));
    clock_gettime(_CLOCK_MONOTONIC, (timespec *)a7);
  }
  lbl_par_ver((uint64_t)v54, a4);
  v64.tv_sec = 0;
  *(_QWORD *)&v64.tv_usec = 0;
  gettimeofday(&v64, 0);
  v23 = v64.tv_usec + 1000000 * v64.tv_sec;
  printf("Info (toc) : ");
  printf("scale and rot");
  printf(": %f ms", (float)((float)(-1000000 * tv_sec - tv_usec + v23) / 1000.0));
  v24 = putchar(10);
  v25 = DWORD2(v57);
  v26 = *(_QWORD *)a2;
  v28 = *(_DWORD *)(a2 + 8);
  v27 = *(_DWORD *)(a2 + 12);
  v29 = (void *)MEMORY[0x212BCF144](v24);
  lbl_feature2d_t::forward(v20, v26, v28, v27, v60, &v61, v52, v25);
  objc_autoreleasePoolPop(v29);
  v64.tv_sec = 0;
  *(_QWORD *)&v64.tv_usec = 0;
  gettimeofday(&v64, 0);
  v30 = v64.tv_usec + 1000000 * v64.tv_sec;
  printf("Info (toc) : ");
  printf("run_desc");
  printf(": %f ms", (float)((float)(v30 - v23) / 1000.0));
  putchar(10);
  v68 = 0u;
  v66 = 0u;
  memset(v67, 0, sizeof(v67));
  v64 = (timeval)0;
  v65 = 0u;
  v69 = (v63 / (int)v62);
  lbl_feature_extract_kpts_score_map((uint64_t)&v64, (uint64_t)v67, (uint64_t)&v65 + 8, (uint64_t)v60, 0, (uint64_t)&v61, 0, DWORD2(v58), DWORD1(v58), SHIDWORD(v55), v58, SDWORD2(v57), 0);
  vl_kpts2_to_kpt_list(&v64.tv_sec, a8);
  free(*(void **)&v64.tv_usec);
  free((void *)v66);
  free(*((void **)&v67[0] + 1));
  free((void *)v68);
  v64.tv_sec = 0;
  *(_QWORD *)&v64.tv_usec = 0;
  gettimeofday(&v64, 0);
  v31 = v64.tv_usec + 1000000 * v64.tv_sec;
  printf("Info (toc) : ");
  printf("get_points");
  printf(": %f ms", (float)((float)(v31 - v30) / 1000.0));
  putchar(10);
  v32 = *(_QWORD *)(v20 + 1576);
  if (v32)
  {
    v33 = (signed int *)(v32 + 408);
    v34 = (signed int *)(v32 + 412);
    v35 = *a8;
    v36 = v51;
    if (*a8 < 1)
      goto LABEL_44;
  }
  else
  {
    v37 = *(_QWORD *)(v20 + 1568);
    v33 = (signed int *)(v37 + 412);
    v34 = (signed int *)(v37 + 408);
    v35 = *a8;
    v36 = v51;
    if (*a8 < 1)
      goto LABEL_44;
  }
  v38 = *v34;
  v39 = *v33;
  if (v39 < v38)
    __assert_rtn("_rotate_back_kpts90", "vl_kpts_lbl.c", 40, "width >= height");
  v40 = (int32x2_t)__PAIR64__(v38, v39);
  v41.i64[0] = v39;
  v41.i64[1] = v38;
  v42 = vdiv_f32(vcvt_f32_s32(*(int32x2_t *)(a2 + 8)), vcvt_f32_f64(vcvtq_f64_u64(v41)));
  v43 = (float32x2_t *)a8[1];
  if (v52)
  {
    v44 = vcvt_f32_s32(vadd_s32(v40, (int32x2_t)-1));
    if (v52 == 1)
    {
      do
      {
        v45.f32[0] = v44.f32[0] - v43->f32[1];
        v45.i32[1] = v43->i32[0];
        *v43 = vmul_f32(v42, v45);
        v43 += 36;
        --v35;
      }
      while (v35);
    }
    else if (v52 == 2)
    {
      do
      {
        *v43 = vmul_f32(v42, vsub_f32(v44, *v43));
        v43 += 36;
        --v35;
      }
      while (v35);
    }
    else
    {
      v46 = (float *)v43 + 1;
      do
      {
        v47 = v42.f32[1] * (float)(v44.f32[1] - *(v46 - 1));
        *(v46 - 1) = v42.f32[0] * *v46;
        *v46 = v47;
        v46 += 72;
        --v35;
      }
      while (v35);
    }
  }
  else
  {
    do
    {
      *v43 = vmul_f32(v42, *v43);
      v43 += 36;
      --v35;
    }
    while (v35);
  }
LABEL_44:
  v64.tv_sec = 0;
  *(_QWORD *)&v64.tv_usec = 0;
  gettimeofday(&v64, 0);
  v48 = v64.tv_sec;
  v49 = v64.tv_usec;
  printf("Info (toc) : ");
  printf("scale_and_rotate_inv");
  printf(": %f ms", (float)((float)(1000000 * v48 - v31 + v49) / 1000.0));
  putchar(10);
  return vl_timer_stop(v36);
}

void sub_210B91A74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BCEB50](v1, 0x10B0C402CB8F842);
  _Unwind_Resume(a1);
}

void vl_gauss16(uint16x8_t **a1, uint64_t *a2, float a3)
{
  uint16x8_t **v4;
  _WORD *v5;
  float v6;
  double v7;
  BOOL v8;
  double v9;
  unsigned int v10;
  uint64_t v11;
  float *v12;
  uint16x4_t *v13;
  float v14;
  int v15;
  float v16;
  float *v17;
  uint64_t v18;
  float v19;
  float v20;
  float *v21;
  uint16x4_t *v22;
  uint64_t v23;
  float v24;
  float v25;
  double v26;
  double v27;
  uint64_t v28;
  __int16 v29;
  uint16x8_t *v30;
  int32x4_t v31;
  uint64_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  uint16x8_t v36;
  uint64_t v37;
  __int16 *v38;
  __int16 v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint16x4_t *v43;
  uint16x8_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t i;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint16x8_t *v52;
  uint64_t v53;
  unsigned int v54;
  uint16x8_t *v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BOOL4 v64;
  uint16x8_t *v65;
  int32x4_t v66;
  uint64_t v67;
  uint16x8_t *v68;
  uint16x8_t *v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  uint16x8_t v73;
  uint16x8_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int16 *v78;
  unsigned __int16 *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _BOOL4 v86;
  uint16x8_t *v87;
  uint64_t v88;
  int v89;
  int32x4_t v90;
  uint64_t v91;
  uint16x8_t *v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  uint16x8_t v96;
  unsigned __int16 *v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  int32x4_t v101;
  int32x4_t v102;
  uint16x8_t *v103;
  unint64_t v104;
  uint16x8_t *v105;
  int32x4_t v106;
  int32x4_t v107;
  uint16x8_t v108;
  uint16x8_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned __int16 *v113;
  unsigned __int16 *v114;
  int v115;
  uint64_t v116;
  uint16x4_t *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint16x4_t *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint16x4_t *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  BOOL v143;
  char v144;
  BOOL v146;
  BOOL v148;
  BOOL v150;
  BOOL v152;
  BOOL v154;
  BOOL v156;
  const __int16 *v158;
  uint16x4_t v159;
  uint16x4_t v160;
  uint32x4_t v161;
  const __int16 *v162;
  uint16x4_t v163;
  const __int16 *v164;
  uint16x4_t v165;
  uint32x4_t v166;
  const __int16 *v167;
  uint16x4_t v168;
  uint32x4_t v169;
  const __int16 *v170;
  uint16x4_t v171;
  const __int16 *v172;
  uint16x4_t v173;
  int16x8_t v174;
  const __int16 *v175;
  uint16x4_t v176;
  int16x8_t v177;
  const __int16 *v178;
  uint16x4_t v179;
  const __int16 *v180;
  uint16x4_t v181;
  int16x8_t v182;
  int16x8_t v183;
  const __int16 *v184;
  uint16x4_t v185;
  int16x8_t v186;
  const __int16 *v187;
  uint16x4_t v188;
  const __int16 *v189;
  uint16x4_t v190;
  int16x8_t v191;
  int16x8_t v192;
  uint16x8_t v193;
  uint16x4_t v194;
  uint16x8_t v195;
  uint16x4_t v196;
  uint16x8_t v197;
  uint16x4_t v198;
  uint16x8_t v199;
  uint16x4_t v200;
  uint16x8_t v201;
  uint16x4_t v202;
  uint16x8_t v203;
  uint16x4_t v204;
  uint64_t v205;
  int16x8_t *v206;
  uint16x8_t *v207;
  uint16x8_t v208;
  uint16x8_t *v209;
  uint32x4_t v210;
  uint32x4_t v211;
  uint16x8_t *v212;
  uint32x4_t v213;
  uint32x4_t v214;
  uint16x4_t *v215;
  _WORD *v216;
  unsigned __int16 *v217;
  uint64_t v218;
  unsigned __int16 *v219;
  int v220;
  unsigned __int16 *v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  BOOL v235;
  BOOL v237;
  BOOL v239;
  BOOL v241;
  BOOL v243;
  BOOL v245;
  BOOL v247;
  BOOL v249;
  const __int16 *v251;
  uint16x4_t v252;
  uint16x4_t v253;
  const __int16 *v254;
  uint16x4_t v255;
  uint32x4_t v256;
  const __int16 *v257;
  uint16x4_t v258;
  uint32x4_t v259;
  const __int16 *v260;
  uint16x4_t v261;
  const __int16 *v262;
  uint16x4_t v263;
  int16x8_t v264;
  const __int16 *v265;
  uint16x4_t v266;
  int16x8_t v267;
  const __int16 *v268;
  uint16x4_t v269;
  const __int16 *v270;
  uint16x4_t v271;
  int16x8_t v272;
  int16x8_t v273;
  const __int16 *v274;
  uint16x4_t v275;
  int16x8_t v276;
  const __int16 *v277;
  uint16x4_t v278;
  const __int16 *v279;
  uint16x4_t v280;
  int16x8_t v281;
  int16x8_t v282;
  const __int16 *v283;
  uint16x4_t v284;
  int16x8_t v285;
  uint16x8_t v286;
  uint16x4_t v287;
  uint16x8_t v288;
  int16x8_t *v289;
  uint16x4_t v290;
  uint16x8_t v291;
  uint16x4_t v292;
  uint16x8_t v293;
  uint16x4_t v294;
  uint16x8_t v295;
  uint16x4_t v296;
  uint16x8_t v297;
  uint16x4_t v298;
  uint16x8_t v299;
  uint16x4_t v300;
  uint64_t v301;
  uint16x8_t *v302;
  uint16x8_t v303;
  uint32x4_t v304;
  uint32x4_t v305;
  uint16x4_t *v306;
  uint16x8_t v307;
  uint32x4_t v308;
  uint16x8_t *v309;
  uint32x4_t v310;
  uint32x4_t v311;
  uint16x8_t *v312;
  uint32x4_t v313;
  uint32x4_t v314;
  uint16x4_t *v315;
  uint64_t v316;
  _WORD *v317;
  unsigned __int16 *v318;
  unsigned __int16 *v319;
  int v320;
  unsigned __int16 *v321;
  int v322;
  int v323;
  unsigned __int16 *v324;
  uint64_t v325;
  unint64_t v326;
  unint64_t v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t v331;
  unint64_t v332;
  unint64_t v333;
  unint64_t v334;
  uint64_t v335;
  unint64_t v336;
  unint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  unint64_t v341;
  unint64_t v342;
  BOOL v344;
  BOOL v346;
  BOOL v348;
  BOOL v350;
  BOOL v352;
  BOOL v354;
  BOOL v356;
  BOOL v358;
  BOOL v360;
  BOOL v361;
  const __int16 *v362;
  uint16x4_t v363;
  uint16x4_t v364;
  uint32x4_t v365;
  const __int16 *v366;
  uint16x4_t v367;
  uint32x4_t v368;
  const __int16 *v369;
  uint16x4_t v370;
  const __int16 *v371;
  uint16x4_t v372;
  int16x8_t v373;
  const __int16 *v374;
  uint16x4_t v375;
  int16x8_t v376;
  const __int16 *v377;
  uint16x4_t v378;
  const __int16 *v379;
  uint16x4_t v380;
  int16x8_t v381;
  int16x8_t v382;
  const __int16 *v383;
  uint16x4_t v384;
  int16x8_t v385;
  const __int16 *v386;
  uint16x4_t v387;
  const __int16 *v388;
  uint16x4_t v389;
  int16x8_t v390;
  int16x8_t v391;
  const __int16 *v392;
  uint16x4_t v393;
  int16x8_t v394;
  const __int16 *v395;
  uint16x4_t v396;
  int16x8_t v397;
  uint16x8_t v398;
  uint16x4_t v399;
  uint16x8_t v400;
  int16x8_t *v401;
  uint16x4_t v402;
  uint16x8_t v403;
  uint16x4_t v404;
  uint16x8_t v405;
  uint16x4_t v406;
  uint16x8_t v407;
  uint16x4_t v408;
  uint16x8_t v409;
  uint16x4_t v410;
  uint16x8_t v411;
  uint16x4_t v412;
  uint16x8_t v413;
  uint16x4_t v414;
  uint64_t v415;
  uint16x8_t *v416;
  uint16x8_t v417;
  uint16x8_t *v418;
  uint32x4_t v419;
  uint32x4_t v420;
  uint16x4_t *v421;
  uint16x8_t v422;
  uint32x4_t v423;
  uint16x8_t *v424;
  uint32x4_t v425;
  uint32x4_t v426;
  uint16x8_t *v427;
  uint32x4_t v428;
  uint32x4_t v429;
  uint16x4_t *v430;
  uint64_t v431;
  uint64_t v432;
  _WORD *v433;
  uint16x4_t *v434;
  unsigned __int16 *v435;
  unsigned __int16 *v436;
  int v437;
  unsigned __int16 *v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint16x8_t *v445;
  uint16x8_t *v446;
  _BOOL4 v448;
  uint64_t v449;
  int32x4_t v450;
  uint16x8_t *v451;
  uint64_t v452;
  uint16x8_t *v453;
  int32x4_t v454;
  int32x4_t v455;
  int32x4_t v456;
  uint16x8_t v457;
  uint16x8_t v458;
  unsigned int v459;
  unint64_t v460;
  uint64_t v461;
  unsigned __int16 *v462;
  unsigned __int16 *v463;
  uint64_t v464;
  int v465;
  uint64_t v466;
  uint64_t v467;
  uint16x8_t *v468;
  uint16x8_t *v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  unsigned int v475;
  uint64_t v476;
  uint64_t v477;
  unsigned int v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  int v483;
  int32x4_t v484;
  uint64_t v485;
  uint16x8_t *v486;
  int32x4_t v487;
  int32x4_t v488;
  int32x4_t v489;
  uint16x8_t v490;
  unsigned __int16 *v491;
  uint64_t v492;
  int v493;
  unint64_t v494;
  unint64_t v495;
  uint64_t v496;
  uint64_t v497;
  size_t v498;
  unint64_t v499;
  unsigned int v500;
  uint64_t v501;
  uint64_t v502;
  int v503;
  int v504;
  unint64_t v505;
  unsigned __int16 *v506;
  int v507;
  int v508;
  uint64_t v509;
  unsigned __int16 *v510;
  unsigned __int16 *v511;
  int v512;
  uint64_t v513;
  uint64_t v514;
  size_t v515;
  uint64_t v516;
  int v517;
  int32x4_t v518;
  uint64_t v519;
  uint16x8_t *v520;
  int32x4_t v521;
  int32x4_t v522;
  int32x4_t v523;
  uint16x8_t v524;
  unsigned __int16 *v525;
  uint64_t v526;
  int v527;
  unsigned int v528;
  uint64_t v529;
  unint64_t v530;
  uint64_t v531;
  int v532;
  unsigned __int16 *v533;
  unint64_t v534;
  int v535;
  int v536;
  uint64_t v537;
  unsigned __int16 *v538;
  unsigned __int16 *v539;
  int v540;
  _WORD *v541;
  uint64_t v542;
  int v543;
  uint64_t v544;
  uint16x4_t *v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  unsigned int v552;
  unsigned int v553;
  int v554;
  int v555;
  int v556;
  int v557;
  uint64_t v558;
  uint64_t v559;
  int32x4_t v560;
  uint16x8_t *v561;
  int32x4_t v562;
  int32x4_t v563;
  int32x4_t v564;
  uint16x8_t v565;
  unsigned __int16 *v566;
  uint64_t v567;
  int v568;
  unsigned int v569;
  unint64_t v570;
  uint64_t v571;
  unint64_t v572;
  unint64_t v573;
  uint16x8_t *v574;
  int32x4_t v575;
  int32x4_t v576;
  uint16x8_t *v577;
  int32x4_t v578;
  int32x4_t v579;
  uint16x8_t v580;
  uint16x8_t v581;
  unint64_t v582;
  unsigned __int16 *v583;
  unsigned __int16 *v584;
  int v585;
  int v586;
  int v587;
  uint64_t v588;
  uint64_t v589;
  int v590;
  uint64_t v591;
  unsigned int v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint16x8_t *v597;
  int32x4_t v598;
  uint64_t v599;
  uint16x8_t *v600;
  int32x4_t v601;
  int32x4_t v602;
  int32x4_t v603;
  uint16x8_t v604;
  uint16x8_t v605;
  unsigned __int16 *v606;
  unsigned __int16 *v607;
  uint64_t v608;
  int v609;
  int v610;
  int v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  int v620;
  unsigned int v621;
  uint64_t v622;
  unsigned int v623;
  int v624;
  uint64_t v625;
  uint64_t v626;
  int32x4_t v627;
  uint16x8_t *v628;
  int32x4_t v629;
  int32x4_t v630;
  int32x4_t v631;
  uint16x8_t v632;
  unsigned __int16 *v633;
  uint64_t v634;
  int v635;
  unsigned int v636;
  unint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  unint64_t v641;
  int32x4_t v642;
  int32x4_t v643;
  uint16x8_t *v644;
  int16x8_t *v645;
  int32x4_t v646;
  int32x4_t v647;
  int8x16_t v648;
  uint16x8_t v649;
  int8x16_t v650;
  uint16x8_t v651;
  uint16x8_t v652;
  unsigned __int16 *v653;
  int v654;
  int *v655;
  uint16x8_t **v656;
  unint64_t v657;
  unint64_t v658;
  BOOL v660;
  BOOL v662;
  BOOL v664;
  BOOL v666;
  const __int16 *v668;
  uint16x4_t v669;
  uint16x4_t v670;
  uint32x4_t v671;
  const __int16 *v672;
  uint16x4_t v673;
  uint32x4_t v674;
  const __int16 *v675;
  uint16x4_t v676;
  int16x8_t v677;
  const __int16 *v678;
  uint16x4_t v679;
  int16x8_t v680;
  const __int16 *v681;
  uint16x4_t v682;
  int16x8_t v683;
  const __int16 *v684;
  uint16x4_t v685;
  int16x8_t v686;
  uint16x8_t v687;
  uint16x4_t v688;
  uint16x8_t v689;
  uint16x4_t v690;
  uint16x8_t v691;
  uint16x4_t v692;
  uint64_t v693;
  int16x8_t *v694;
  uint16x4_t *v695;
  uint64_t v696;
  uint64_t v697;
  unint64_t v698;
  unint64_t v699;
  BOOL v701;
  BOOL v703;
  BOOL v705;
  BOOL v707;
  BOOL v709;
  const __int16 *v711;
  uint16x4_t v712;
  uint16x4_t v713;
  uint32x4_t v714;
  const __int16 *v715;
  uint16x4_t v716;
  uint32x4_t v717;
  const __int16 *v718;
  uint16x4_t v719;
  const __int16 *v720;
  uint16x4_t v721;
  int16x8_t v722;
  const __int16 *v723;
  uint16x4_t v724;
  int16x8_t v725;
  const __int16 *v726;
  uint16x4_t v727;
  const __int16 *v728;
  uint16x4_t v729;
  int16x8_t v730;
  int16x8_t v731;
  const __int16 *v732;
  uint16x4_t v733;
  int16x8_t v734;
  uint16x8_t v735;
  uint16x4_t v736;
  uint16x8_t v737;
  uint16x4_t v738;
  uint16x8_t v739;
  uint16x4_t v740;
  uint16x8_t v741;
  uint16x4_t v742;
  uint64_t v743;
  int16x8_t *v744;
  uint16x4_t *v745;
  uint16x4_t *v746;
  uint64_t v747;
  uint64_t v748;
  _WORD *v749;
  uint16x4_t *v750;
  unsigned __int16 *v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  unint64_t v755;
  unint64_t v756;
  unint64_t v757;
  unint64_t v758;
  unint64_t v759;
  BOOL v761;
  BOOL v763;
  BOOL v765;
  BOOL v767;
  BOOL v769;
  BOOL v771;
  const __int16 *v773;
  uint16x4_t v774;
  uint16x4_t v775;
  const __int16 *v776;
  uint16x4_t v777;
  uint32x4_t v778;
  const __int16 *v779;
  uint16x4_t v780;
  uint32x4_t v781;
  const __int16 *v782;
  uint16x4_t v783;
  const __int16 *v784;
  uint16x4_t v785;
  int16x8_t v786;
  const __int16 *v787;
  uint16x4_t v788;
  int16x8_t v789;
  const __int16 *v790;
  uint16x4_t v791;
  const __int16 *v792;
  uint16x4_t v793;
  int16x8_t v794;
  int16x8_t v795;
  const __int16 *v796;
  uint16x4_t v797;
  int16x8_t v798;
  const __int16 *v799;
  uint16x4_t v800;
  int16x8_t v801;
  uint16x8_t v802;
  uint16x4_t v803;
  uint16x8_t v804;
  uint16x4_t v805;
  uint16x8_t v806;
  uint16x4_t v807;
  uint16x8_t v808;
  uint16x4_t v809;
  uint16x8_t v810;
  uint16x4_t v811;
  uint64_t v812;
  int16x8_t *v813;
  uint16x8_t *v814;
  uint16x8_t v815;
  uint16x8_t *v816;
  uint32x4_t v817;
  uint32x4_t v818;
  uint16x4_t *v819;
  uint64_t v820;
  uint64_t v821;
  _WORD *v822;
  uint16x4_t *v823;
  unsigned __int16 *v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  unint64_t v828;
  unint64_t v829;
  BOOL v831;
  BOOL v833;
  BOOL v835;
  BOOL v837;
  BOOL v839;
  BOOL v841;
  BOOL v843;
  BOOL v845;
  BOOL v847;
  BOOL v849;
  const __int16 *v851;
  uint16x4_t v852;
  uint16x4_t v853;
  uint32x4_t v854;
  const __int16 *v855;
  uint16x4_t v856;
  uint32x4_t v857;
  const __int16 *v858;
  uint16x4_t v859;
  int16x8_t v860;
  const __int16 *v861;
  uint16x4_t v862;
  int16x8_t v863;
  const __int16 *v864;
  uint16x4_t v865;
  int16x8_t v866;
  const __int16 *v867;
  uint16x4_t v868;
  int16x8_t v869;
  const __int16 *v870;
  uint16x4_t v871;
  int16x8_t v872;
  const __int16 *v873;
  uint16x4_t v874;
  int16x8_t v875;
  const __int16 *v876;
  uint16x4_t v877;
  int16x8_t v878;
  const __int16 *v879;
  uint16x4_t v880;
  int16x8_t v881;
  const __int16 *v882;
  uint16x4_t v883;
  int16x8_t v884;
  const __int16 *v885;
  uint16x4_t v886;
  int16x8_t v887;
  uint16x8_t v888;
  uint16x4_t v889;
  uint16x8_t v890;
  uint16x4_t v891;
  int16x8_t *v892;
  uint16x8_t v893;
  uint16x4_t v894;
  uint16x8_t v895;
  uint16x4_t v896;
  uint16x8_t v897;
  uint16x4_t v898;
  uint16x8_t v899;
  uint16x4_t v900;
  uint16x8_t v901;
  uint16x4_t v902;
  uint16x8_t v903;
  uint16x4_t v904;
  uint16x8_t v905;
  uint16x4_t v906;
  uint64_t v907;
  uint16x8_t *v908;
  uint16x8_t v909;
  uint16x8_t *v910;
  uint32x4_t v911;
  uint32x4_t v912;
  uint16x8_t *v913;
  uint32x4_t v914;
  uint32x4_t v915;
  uint16x4_t *v916;
  uint16x8_t v917;
  uint32x4_t v918;
  uint16x8_t *v919;
  uint32x4_t v920;
  uint32x4_t v921;
  uint16x8_t *v922;
  uint32x4_t v923;
  uint32x4_t v924;
  uint16x4_t *v925;
  uint64_t v926;
  uint64_t v927;
  _WORD *v928;
  uint16x4_t *v929;
  unsigned __int16 *v930;
  int v931;
  unsigned __int16 *v932;
  int v933;
  unsigned __int16 *v934;
  int v935;
  unsigned __int16 *v936;
  int v937;
  int v938;
  unsigned __int16 *v939;
  uint64_t v940;
  uint64_t v941;
  unint64_t v942;
  unint64_t v943;
  BOOL v945;
  BOOL v947;
  BOOL v949;
  BOOL v951;
  BOOL v953;
  const __int16 *v955;
  uint16x4_t v956;
  uint16x4_t v957;
  const __int16 *v958;
  uint16x4_t v959;
  int16x8_t v960;
  const __int16 *v961;
  uint16x4_t v962;
  int16x8_t v963;
  const __int16 *v964;
  uint16x4_t v965;
  const __int16 *v966;
  uint16x4_t v967;
  int16x8_t v968;
  int16x8_t v969;
  const __int16 *v970;
  uint16x4_t v971;
  int16x8_t v972;
  uint16x8_t v973;
  uint16x4_t v974;
  int16x8_t *v975;
  uint16x8_t v976;
  uint16x4_t v977;
  uint16x8_t v978;
  uint16x4_t v979;
  uint16x8_t v980;
  uint16x4_t v981;
  uint64_t v982;
  uint16x4_t *v983;
  uint16x4_t *v984;
  uint64_t v985;
  _WORD *v986;
  unsigned __int16 *v987;
  unsigned __int16 *v988;
  uint64_t v989;
  unint64_t v990;
  uint64_t v991;
  unint64_t v992;
  unint64_t v993;
  unint64_t v994;
  unint64_t v995;
  unint64_t v996;
  unint64_t v997;
  unint64_t v998;
  BOOL v1000;
  BOOL v1002;
  BOOL v1004;
  BOOL v1006;
  BOOL v1008;
  BOOL v1010;
  const __int16 *v1012;
  uint16x4_t v1013;
  uint16x4_t v1014;
  uint32x4_t v1015;
  const __int16 *v1016;
  uint16x4_t v1017;
  const __int16 *v1018;
  uint16x4_t v1019;
  int16x8_t v1020;
  const __int16 *v1021;
  uint16x4_t v1022;
  int16x8_t v1023;
  const __int16 *v1024;
  uint16x4_t v1025;
  const __int16 *v1026;
  uint16x4_t v1027;
  int16x8_t v1028;
  int16x8_t v1029;
  const __int16 *v1030;
  uint16x4_t v1031;
  int16x8_t v1032;
  const __int16 *v1033;
  uint16x4_t v1034;
  int16x8_t v1035;
  uint16x8_t v1036;
  uint16x4_t v1037;
  uint16x8_t v1038;
  int16x8_t *v1039;
  uint16x4_t v1040;
  uint16x8_t v1041;
  uint16x4_t v1042;
  uint16x8_t v1043;
  uint16x4_t v1044;
  uint16x8_t v1045;
  uint16x4_t v1046;
  uint64_t v1047;
  uint16x8_t *v1048;
  uint16x8_t v1049;
  uint16x8_t *v1050;
  uint32x4_t v1051;
  uint32x4_t v1052;
  uint16x4_t *v1053;
  uint64_t v1054;
  _WORD *v1055;
  unsigned __int16 *v1056;
  unsigned __int16 *v1057;
  uint64_t v1058;
  uint64_t v1059;
  unint64_t v1060;
  unint64_t v1061;
  BOOL v1063;
  BOOL v1065;
  BOOL v1067;
  BOOL v1069;
  BOOL v1071;
  BOOL v1073;
  BOOL v1075;
  const __int16 *v1077;
  uint16x4_t v1078;
  uint16x4_t v1079;
  uint32x4_t v1080;
  const __int16 *v1081;
  uint16x4_t v1082;
  uint32x4_t v1083;
  const __int16 *v1084;
  uint16x4_t v1085;
  const __int16 *v1086;
  uint16x4_t v1087;
  int16x8_t v1088;
  const __int16 *v1089;
  uint16x4_t v1090;
  int16x8_t v1091;
  const __int16 *v1092;
  uint16x4_t v1093;
  const __int16 *v1094;
  uint16x4_t v1095;
  int16x8_t v1096;
  int16x8_t v1097;
  const __int16 *v1098;
  uint16x4_t v1099;
  int16x8_t v1100;
  const __int16 *v1101;
  uint16x4_t v1102;
  const __int16 *v1103;
  uint16x4_t v1104;
  int16x8_t v1105;
  int16x8_t v1106;
  uint16x8_t v1107;
  uint16x4_t v1108;
  uint16x8_t v1109;
  int16x8_t *v1110;
  uint16x4_t v1111;
  uint16x8_t v1112;
  uint16x4_t v1113;
  uint16x8_t v1114;
  uint16x4_t v1115;
  uint16x8_t v1116;
  uint16x4_t v1117;
  uint16x8_t v1118;
  uint16x4_t v1119;
  uint64_t v1120;
  uint16x8_t *v1121;
  uint16x8_t v1122;
  uint16x8_t *v1123;
  uint32x4_t v1124;
  uint32x4_t v1125;
  uint16x8_t *v1126;
  uint32x4_t v1127;
  uint32x4_t v1128;
  uint16x4_t *v1129;
  uint64_t v1130;
  _WORD *v1131;
  unsigned __int16 *v1132;
  unsigned __int16 *v1133;
  int v1134;
  unsigned __int16 *v1135;
  uint64_t v1136;
  unint64_t v1137;
  uint64_t v1138;
  unint64_t v1139;
  unint64_t v1140;
  unint64_t v1141;
  unint64_t v1142;
  unint64_t v1143;
  unint64_t v1144;
  unint64_t v1145;
  BOOL v1147;
  BOOL v1149;
  BOOL v1151;
  BOOL v1153;
  BOOL v1155;
  BOOL v1157;
  BOOL v1159;
  BOOL v1161;
  const __int16 *v1163;
  uint16x4_t v1164;
  uint16x4_t v1165;
  uint32x4_t v1166;
  const __int16 *v1167;
  uint16x4_t v1168;
  const __int16 *v1169;
  uint16x4_t v1170;
  int16x8_t v1171;
  const __int16 *v1172;
  uint16x4_t v1173;
  int16x8_t v1174;
  const __int16 *v1175;
  uint16x4_t v1176;
  const __int16 *v1177;
  uint16x4_t v1178;
  int16x8_t v1179;
  int16x8_t v1180;
  const __int16 *v1181;
  uint16x4_t v1182;
  int16x8_t v1183;
  const __int16 *v1184;
  uint16x4_t v1185;
  const __int16 *v1186;
  uint16x4_t v1187;
  int16x8_t v1188;
  int16x8_t v1189;
  const __int16 *v1190;
  uint16x4_t v1191;
  int16x8_t v1192;
  uint16x8_t v1193;
  uint16x4_t v1194;
  uint16x8_t v1195;
  int16x8_t *v1196;
  uint16x4_t v1197;
  uint16x8_t v1198;
  uint16x4_t v1199;
  uint16x8_t v1200;
  uint16x4_t v1201;
  uint16x8_t v1202;
  uint16x4_t v1203;
  uint16x8_t v1204;
  uint16x4_t v1205;
  uint16x8_t v1206;
  uint16x4_t v1207;
  uint64_t v1208;
  uint16x8_t *v1209;
  uint16x8_t v1210;
  uint32x4_t v1211;
  uint32x4_t v1212;
  uint16x4_t *v1213;
  uint16x8_t v1214;
  uint32x4_t v1215;
  uint16x8_t *v1216;
  uint32x4_t v1217;
  uint32x4_t v1218;
  uint16x8_t *v1219;
  uint32x4_t v1220;
  uint32x4_t v1221;
  uint16x4_t *v1222;
  uint64_t v1223;
  uint64_t v1224;
  _WORD *v1225;
  uint16x4_t *v1226;
  unsigned __int16 *v1227;
  int v1228;
  unsigned __int16 *v1229;
  int v1230;
  int v1231;
  unsigned __int16 *v1232;
  uint64_t v1233;
  uint64_t v1234;
  unint64_t v1235;
  unint64_t v1236;
  BOOL v1238;
  BOOL v1240;
  BOOL v1242;
  BOOL v1244;
  BOOL v1246;
  BOOL v1248;
  BOOL v1250;
  BOOL v1252;
  BOOL v1254;
  BOOL v1256;
  BOOL v1258;
  BOOL v1259;
  const __int16 *v1260;
  uint16x4_t v1261;
  uint16x4_t v1262;
  const __int16 *v1263;
  uint16x4_t v1264;
  int16x8_t v1265;
  const __int16 *v1266;
  uint16x4_t v1267;
  int16x8_t v1268;
  const __int16 *v1269;
  uint16x4_t v1270;
  const __int16 *v1271;
  uint16x4_t v1272;
  int16x8_t v1273;
  int16x8_t v1274;
  const __int16 *v1275;
  uint16x4_t v1276;
  int16x8_t v1277;
  const __int16 *v1278;
  uint16x4_t v1279;
  const __int16 *v1280;
  uint16x4_t v1281;
  int16x8_t v1282;
  int16x8_t v1283;
  const __int16 *v1284;
  uint16x4_t v1285;
  int16x8_t v1286;
  const __int16 *v1287;
  uint16x4_t v1288;
  const __int16 *v1289;
  uint16x4_t v1290;
  int16x8_t v1291;
  int16x8_t v1292;
  const __int16 *v1293;
  uint16x4_t v1294;
  int16x8_t v1295;
  uint16x8_t v1296;
  uint16x4_t v1297;
  uint16x8_t v1298;
  int16x8_t *v1299;
  uint16x4_t v1300;
  uint16x8_t v1301;
  uint16x4_t v1302;
  uint16x8_t v1303;
  uint16x4_t v1304;
  uint16x8_t v1305;
  uint16x4_t v1306;
  uint16x8_t v1307;
  uint16x4_t v1308;
  uint16x8_t v1309;
  uint16x4_t v1310;
  uint16x8_t v1311;
  uint16x4_t v1312;
  uint16x8_t v1313;
  uint16x4_t v1314;
  uint16x8_t v1315;
  uint16x4_t v1316;
  uint64_t v1317;
  uint16x8_t *v1318;
  uint16x8_t v1319;
  uint32x4_t v1320;
  uint32x4_t v1321;
  uint16x4_t *v1322;
  uint16x8_t v1323;
  uint32x4_t v1324;
  uint16x8_t *v1325;
  uint32x4_t v1326;
  uint32x4_t v1327;
  uint16x8_t *v1328;
  uint32x4_t v1329;
  uint32x4_t v1330;
  uint16x4_t *v1331;
  uint16x8_t v1332;
  uint32x4_t v1333;
  uint16x8_t *v1334;
  uint32x4_t v1335;
  uint32x4_t v1336;
  uint16x8_t *v1337;
  uint32x4_t v1338;
  uint32x4_t v1339;
  uint16x4_t *v1340;
  uint64_t v1341;
  uint64_t v1342;
  _WORD *v1343;
  uint16x4_t *v1344;
  unsigned __int16 *v1345;
  int v1346;
  unsigned __int16 *v1347;
  int v1348;
  int v1349;
  unsigned __int16 *v1350;
  int v1351;
  unsigned __int16 *v1352;
  int v1353;
  unsigned __int16 *v1354;
  int v1355;
  int v1356;
  unsigned __int16 *v1357;
  uint64_t v1358;
  unint64_t v1359;
  unint64_t v1360;
  char *v1361;
  unint64_t v1362;
  uint16x4_t *v1363;
  unint64_t v1364;
  uint64_t v1365;
  char *v1366;
  unint64_t v1367;
  char *v1368;
  unint64_t v1369;
  BOOL v1371;
  BOOL v1373;
  BOOL v1375;
  BOOL v1377;
  BOOL v1379;
  BOOL v1381;
  const __int16 *v1383;
  uint16x4_t v1384;
  uint16x4_t v1385;
  int16x8_t v1386;
  const __int16 *v1387;
  uint16x4_t v1388;
  int16x8_t v1389;
  const __int16 *v1390;
  uint16x4_t v1391;
  const __int16 *v1392;
  uint16x4_t v1393;
  int16x8_t v1394;
  int16x8_t v1395;
  const __int16 *v1396;
  uint16x4_t v1397;
  int16x8_t v1398;
  const __int16 *v1399;
  uint16x4_t v1400;
  int16x8_t v1401;
  uint16x8_t v1402;
  uint16x4_t v1403;
  uint16x8_t v1404;
  int16x8_t *v1405;
  uint16x4_t v1406;
  uint16x8_t v1407;
  uint16x4_t v1408;
  uint16x8_t v1409;
  uint16x4_t v1410;
  uint16x8_t v1411;
  uint16x4_t v1412;
  uint64_t v1413;
  uint16x8_t *v1414;
  uint16x8_t v1415;
  uint16x8_t *v1416;
  uint32x4_t v1417;
  uint32x4_t v1418;
  uint16x4_t *v1419;
  uint64_t v1420;
  _WORD *v1421;
  unsigned __int16 *v1422;
  unsigned __int16 *v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  uint16x4_t *v1430;
  uint16x8_t *v1431;
  uint64_t v1432;
  uint64_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  uint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  unint64_t v1443;
  unint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  char *v1447;
  unint64_t v1448;
  uint64_t v1449;
  char *v1450;
  unint64_t v1451;
  uint64_t v1452;
  char *v1453;
  unint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  char *v1457;
  unint64_t v1458;
  uint64_t v1459;
  unint64_t v1460;
  char *v1461;
  BOOL v1463;
  BOOL v1465;
  BOOL v1467;
  BOOL v1469;
  BOOL v1471;
  BOOL v1473;
  BOOL v1475;
  const __int16 *v1477;
  uint16x4_t v1478;
  int16x8_t v1479;
  const __int16 *v1480;
  uint16x4_t v1481;
  int16x8_t v1482;
  const __int16 *v1483;
  uint16x4_t v1484;
  const __int16 *v1485;
  uint16x4_t v1486;
  int16x8_t v1487;
  int16x8_t v1488;
  const __int16 *v1489;
  uint16x4_t v1490;
  int16x8_t v1491;
  const __int16 *v1492;
  uint16x4_t v1493;
  uint16x4_t v1494;
  int16x8_t v1495;
  int16x8_t v1496;
  uint16x4_t *v1497;
  int16x8_t *v1498;
  uint64_t v1499;
  uint16x8_t *v1500;
  uint16x8_t v1501;
  uint16x8_t *v1502;
  uint16x8_t v1503;
  uint16x8_t *v1504;
  uint16x8_t v1505;
  uint16x4_t *v1506;
  uint64_t v1507;
  _WORD *v1508;
  uint16x4_t *v1509;
  uint64_t v1510;
  uint16x4_t *v1511;
  int v1512;
  uint16x4_t *v1513;
  int v1514;
  uint16x4_t *v1515;
  int v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  size_t v1521;
  uint64_t v1522;
  uint16x8_t *v1523;
  uint16x8_t *v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  unint64_t v1529;
  unint64_t v1530;
  unint64_t v1531;
  BOOL v1532;
  BOOL v1533;
  const __int16 *v1535;
  uint16x4_t v1536;
  uint16x4_t v1537;
  int32x4_t v1538;
  uint16x4_t *v1539;
  int16x8_t *v1540;
  uint64_t v1541;
  int16x8_t v1542;
  unint64_t v1543;
  _WORD *v1544;
  unsigned __int16 *v1545;
  int v1546;
  uint64_t v1547;
  uint64_t v1548;
  uint64_t v1549;
  unint64_t v1550;
  unint64_t v1551;
  BOOL v1553;
  BOOL v1555;
  BOOL v1557;
  BOOL v1559;
  BOOL v1561;
  BOOL v1563;
  BOOL v1565;
  const __int16 *v1567;
  uint16x4_t v1568;
  uint16x4_t v1569;
  const __int16 *v1570;
  uint16x4_t v1571;
  int16x8_t v1572;
  const __int16 *v1573;
  uint16x4_t v1574;
  int16x8_t v1575;
  const __int16 *v1576;
  uint16x4_t v1577;
  const __int16 *v1578;
  uint16x4_t v1579;
  int16x8_t v1580;
  int16x8_t v1581;
  const __int16 *v1582;
  uint16x4_t v1583;
  int16x8_t v1584;
  const __int16 *v1585;
  uint16x4_t v1586;
  const __int16 *v1587;
  uint16x4_t v1588;
  int16x8_t v1589;
  int16x8_t v1590;
  uint16x8_t v1591;
  uint16x4_t v1592;
  uint16x8_t v1593;
  int16x8_t *v1594;
  uint16x4_t v1595;
  uint16x8_t v1596;
  uint16x4_t v1597;
  uint16x8_t v1598;
  uint16x4_t v1599;
  uint16x8_t v1600;
  uint16x4_t v1601;
  uint16x8_t v1602;
  uint16x4_t v1603;
  uint64_t v1604;
  uint16x8_t *v1605;
  uint16x8_t v1606;
  uint16x8_t *v1607;
  uint32x4_t v1608;
  uint32x4_t v1609;
  uint16x8_t *v1610;
  uint32x4_t v1611;
  uint32x4_t v1612;
  uint16x4_t *v1613;
  uint64_t v1614;
  uint64_t v1615;
  _WORD *v1616;
  uint16x4_t *v1617;
  unsigned __int16 *v1618;
  int v1619;
  unsigned __int16 *v1620;
  uint64_t v1621;
  unint64_t v1622;
  unint64_t v1623;
  unint64_t v1624;
  unint64_t v1625;
  unint64_t v1626;
  unint64_t v1627;
  unint64_t v1628;
  unint64_t v1629;
  BOOL v1631;
  BOOL v1633;
  BOOL v1635;
  BOOL v1637;
  BOOL v1639;
  BOOL v1641;
  BOOL v1643;
  BOOL v1645;
  BOOL v1647;
  BOOL v1648;
  const __int16 *v1649;
  uint16x4_t v1650;
  uint16x4_t v1651;
  const __int16 *v1652;
  uint16x4_t v1653;
  int16x8_t v1654;
  const __int16 *v1655;
  uint16x4_t v1656;
  int16x8_t v1657;
  const __int16 *v1658;
  uint16x4_t v1659;
  const __int16 *v1660;
  uint16x4_t v1661;
  int16x8_t v1662;
  int16x8_t v1663;
  const __int16 *v1664;
  uint16x4_t v1665;
  int16x8_t v1666;
  const __int16 *v1667;
  uint16x4_t v1668;
  const __int16 *v1669;
  uint16x4_t v1670;
  int16x8_t v1671;
  int16x8_t v1672;
  const __int16 *v1673;
  uint16x4_t v1674;
  int16x8_t v1675;
  const __int16 *v1676;
  uint16x4_t v1677;
  int16x8_t v1678;
  uint16x8_t v1679;
  uint16x4_t v1680;
  uint16x8_t v1681;
  uint16x4_t v1682;
  int16x8_t *v1683;
  uint16x8_t v1684;
  uint16x4_t v1685;
  uint16x8_t v1686;
  uint16x4_t v1687;
  uint16x8_t v1688;
  uint16x4_t v1689;
  uint16x8_t v1690;
  uint16x4_t v1691;
  uint16x8_t v1692;
  uint16x4_t v1693;
  uint16x8_t v1694;
  uint16x4_t v1695;
  uint64_t v1696;
  uint16x8_t *v1697;
  uint16x8_t v1698;
  uint16x8_t *v1699;
  uint32x4_t v1700;
  uint32x4_t v1701;
  uint16x4_t *v1702;
  uint16x8_t v1703;
  uint32x4_t v1704;
  uint16x8_t *v1705;
  uint32x4_t v1706;
  uint32x4_t v1707;
  uint16x8_t *v1708;
  uint32x4_t v1709;
  uint32x4_t v1710;
  uint16x4_t *v1711;
  uint64_t v1712;
  unint64_t v1713;
  unint64_t v1714;
  uint64_t v1715;
  BOOL v1717;
  unint64_t v1718;
  BOOL v1720;
  unint64_t v1721;
  uint64_t v1722;
  BOOL v1724;
  unint64_t v1725;
  unint64_t v1726;
  uint64_t v1727;
  char v1729;
  unint64_t v1730;
  char v1732;
  unint64_t v1733;
  unint64_t v1734;
  char v1736;
  uint64_t v1737;
  BOOL v1739;
  BOOL v1741;
  BOOL v1743;
  BOOL v1745;
  BOOL v1747;
  BOOL v1749;
  const __int16 *v1751;
  uint16x4_t v1752;
  uint16x4_t v1753;
  int16x8_t v1754;
  const __int16 *v1755;
  uint16x4_t v1756;
  int16x8_t v1757;
  const __int16 *v1758;
  uint16x4_t v1759;
  int16x8_t v1760;
  const __int16 *v1761;
  uint16x4_t v1762;
  int16x8_t v1763;
  const __int16 *v1764;
  uint16x4_t v1765;
  int16x8_t v1766;
  const __int16 *v1767;
  uint16x4_t v1768;
  int16x8_t v1769;
  const __int16 *v1770;
  uint16x4_t v1771;
  int16x8_t v1772;
  const __int16 *v1773;
  uint16x4_t v1774;
  int16x8_t v1775;
  const __int16 *v1776;
  uint16x4_t v1777;
  int16x8_t v1778;
  const __int16 *v1779;
  uint16x4_t v1780;
  int16x8_t v1781;
  const __int16 *v1782;
  uint16x4_t v1783;
  int16x8_t v1784;
  const __int16 *v1785;
  uint16x4_t v1786;
  int16x8_t v1787;
  uint16x8_t v1788;
  uint16x4_t v1789;
  uint16x8_t v1790;
  uint16x4_t v1791;
  int16x8_t *v1792;
  uint16x8_t v1793;
  uint16x4_t v1794;
  uint16x8_t v1795;
  uint16x4_t v1796;
  uint16x8_t v1797;
  uint16x4_t v1798;
  uint16x8_t v1799;
  uint16x4_t v1800;
  uint16x8_t v1801;
  uint16x4_t v1802;
  uint16x8_t v1803;
  uint16x4_t v1804;
  uint16x8_t v1805;
  uint16x4_t v1806;
  uint16x8_t v1807;
  uint16x4_t v1808;
  uint16x8_t v1809;
  uint16x4_t v1810;
  uint64_t v1811;
  uint16x8_t *v1812;
  uint16x8_t v1813;
  uint16x8_t *v1814;
  uint32x4_t v1815;
  uint32x4_t v1816;
  uint16x4_t *v1817;
  uint16x8_t v1818;
  uint32x4_t v1819;
  uint16x8_t *v1820;
  uint32x4_t v1821;
  uint32x4_t v1822;
  uint16x8_t *v1823;
  uint32x4_t v1824;
  uint32x4_t v1825;
  uint16x4_t *v1826;
  uint16x8_t v1827;
  uint32x4_t v1828;
  uint16x8_t *v1829;
  uint32x4_t v1830;
  uint32x4_t v1831;
  uint16x8_t *v1832;
  uint32x4_t v1833;
  uint32x4_t v1834;
  uint16x4_t *v1835;
  uint64_t v1836;
  _WORD *v1837;
  unsigned __int16 *v1838;
  unsigned __int16 *v1839;
  unsigned __int16 *v1840;
  int v1841;
  unsigned __int16 *v1842;
  int v1843;
  unsigned __int16 *v1844;
  unsigned __int16 *v1845;
  int v1846;
  unsigned __int16 *v1847;
  uint64_t v1848;
  uint16x8_t *v1849;
  uint16x8_t *v1850;
  uint64_t v1851;
  uint64_t v1852;
  uint64_t v1853;
  uint64_t v1854;
  uint64_t v1855;
  uint64_t v1856;
  unsigned __int16 *v1857;
  unint64_t v1858;
  uint64_t v1859;
  uint64_t v1860;
  uint64_t v1861;
  uint64_t v1862;
  uint64_t v1863;
  int v1864;
  int32x4_t v1865;
  unint64_t v1866;
  uint16x8_t *v1867;
  int32x4_t v1868;
  int32x4_t v1869;
  int32x4_t v1870;
  uint16x8_t v1871;
  unint64_t v1872;
  uint64_t v1873;
  unint64_t v1874;
  uint64_t v1875;
  uint64_t v1876;
  unint64_t v1877;
  unsigned int v1878;
  uint64_t v1879;
  uint64_t v1880;
  int v1881;
  int v1882;
  unint64_t v1883;
  unsigned __int16 *v1884;
  int v1885;
  int v1886;
  uint64_t v1887;
  unsigned __int16 *v1888;
  unsigned __int16 *v1889;
  int v1890;
  uint64_t v1891;
  unint64_t v1892;
  uint64_t v1893;
  uint64_t v1894;
  uint64_t v1895;
  int v1896;
  int32x4_t v1897;
  unint64_t v1898;
  uint16x8_t *v1899;
  int32x4_t v1900;
  int32x4_t v1901;
  int32x4_t v1902;
  uint16x8_t v1903;
  unsigned int v1904;
  uint64_t v1905;
  unint64_t v1906;
  uint64_t v1907;
  int v1908;
  unsigned __int16 *v1909;
  unint64_t v1910;
  int v1911;
  int v1912;
  uint64_t v1913;
  unsigned __int16 *v1914;
  unsigned __int16 *v1915;
  int v1916;
  uint64_t v1917;
  uint64_t v1918;
  unint64_t v1919;
  uint16x4_t *v1920;
  uint64_t v1921;
  uint64_t v1922;
  unsigned __int16 *v1923;
  uint64_t v1924;
  uint64_t v1925;
  uint64_t v1926;
  uint64_t v1927;
  unint64_t v1928;
  uint64_t v1929;
  BOOL v1931;
  const __int16 *v1933;
  uint16x4_t v1934;
  int16x8_t v1935;
  uint16x4_t v1936;
  int16x8_t v1937;
  const __int16 *v1938;
  uint16x4_t v1939;
  const __int16 *v1940;
  uint16x4_t v1941;
  int16x8_t v1942;
  int16x8_t v1943;
  const __int16 *v1944;
  uint16x4_t v1945;
  int16x8_t v1946;
  const __int16 *v1947;
  uint16x4_t v1948;
  const __int16 *v1949;
  uint16x4_t v1950;
  int16x8_t v1951;
  int16x8_t v1952;
  const __int16 *v1953;
  uint16x4_t v1954;
  int16x8_t v1955;
  const __int16 *v1956;
  uint16x4_t v1957;
  const __int16 *v1958;
  uint16x4_t v1959;
  int16x8_t v1960;
  int16x8_t v1961;
  const __int16 *v1962;
  uint16x4_t v1963;
  int16x8_t v1964;
  const __int16 *v1965;
  uint16x4_t v1966;
  const __int16 *v1967;
  uint16x4_t v1968;
  int16x8_t v1969;
  int16x8_t v1970;
  uint64_t v1971;
  int16x8_t *v1972;
  uint64_t v1973;
  uint16x8_t v1974;
  uint16x8_t v1975;
  uint32x4_t v1976;
  uint16x8_t v1977;
  uint16x8_t v1978;
  uint32x4_t v1979;
  uint32x4_t v1980;
  uint16x8_t v1981;
  uint32x4_t v1982;
  uint32x4_t v1983;
  uint16x8_t v1984;
  _WORD *v1985;
  unsigned __int16 *v1986;
  uint64_t v1987;
  uint16x8_t v1988;
  uint16x4_t v1989;
  int v1990;
  int v1991;
  uint64_t v1992;
  uint64_t v1993;
  uint64_t v1994;
  int v1995;
  uint64_t v1996;
  uint64_t v1997;
  uint64_t v1998;
  unsigned int v1999;
  uint64_t v2000;
  unint64_t v2001;
  uint64_t v2002;
  unint64_t v2003;
  int32x4_t v2004;
  int32x4_t v2005;
  int16x8_t *v2006;
  uint16x8_t *v2007;
  unint64_t v2008;
  int32x4_t v2009;
  int32x4_t v2010;
  int8x16_t v2011;
  uint16x8_t v2012;
  int8x16_t v2013;
  uint16x8_t v2014;
  uint16x8_t v2015;
  unsigned __int16 *v2016;
  int v2017;
  uint64_t v2018;
  int v2019;
  unsigned int v2020;
  uint64_t v2021;
  unint64_t v2022;
  uint64_t v2023;
  unint64_t v2024;
  int32x4_t v2025;
  int32x4_t v2026;
  int16x8_t *v2027;
  uint16x8_t *v2028;
  unint64_t v2029;
  int32x4_t v2030;
  int32x4_t v2031;
  int8x16_t v2032;
  uint16x8_t v2033;
  int8x16_t v2034;
  uint16x8_t v2035;
  uint16x8_t v2036;
  unsigned __int16 *v2037;
  unsigned __int16 *v2038;
  uint64_t v2039;
  int v2040;
  int v2041;
  int v2042;
  uint64_t v2043;
  uint64_t v2044;
  unsigned int v2045;
  uint64_t v2046;
  unint64_t v2047;
  uint64_t v2048;
  unint64_t v2049;
  int32x4_t v2050;
  int32x4_t v2051;
  int16x8_t *v2052;
  uint16x8_t *v2053;
  unint64_t v2054;
  int32x4_t v2055;
  int32x4_t v2056;
  int8x16_t v2057;
  uint16x8_t v2058;
  int8x16_t v2059;
  uint16x8_t v2060;
  uint16x8_t v2061;
  unsigned __int16 *v2062;
  int v2063;
  uint64_t v2064;
  uint64_t v2065;
  unsigned int v2066;
  uint64_t v2067;
  unint64_t v2068;
  uint64_t v2069;
  unint64_t v2070;
  int32x4_t v2071;
  int32x4_t v2072;
  int16x8_t *v2073;
  uint16x8_t *v2074;
  unint64_t v2075;
  int32x4_t v2076;
  int32x4_t v2077;
  int8x16_t v2078;
  uint16x8_t v2079;
  int8x16_t v2080;
  uint16x8_t v2081;
  uint16x8_t v2082;
  unsigned __int16 *v2083;
  int v2084;
  uint64_t v2085;
  uint64_t v2086;
  unsigned int v2087;
  uint64_t v2088;
  unint64_t v2089;
  uint64_t v2090;
  unint64_t v2091;
  int32x4_t v2092;
  int32x4_t v2093;
  int16x8_t *v2094;
  uint16x8_t *v2095;
  unint64_t v2096;
  int32x4_t v2097;
  int32x4_t v2098;
  int8x16_t v2099;
  uint16x8_t v2100;
  int8x16_t v2101;
  uint16x8_t v2102;
  uint16x8_t v2103;
  unsigned __int16 *v2104;
  int v2105;
  uint64_t v2106;
  uint64_t v2107;
  unsigned int v2108;
  uint64_t v2109;
  unint64_t v2110;
  uint64_t v2111;
  unint64_t v2112;
  int32x4_t v2113;
  int32x4_t v2114;
  int16x8_t *v2115;
  uint16x8_t *v2116;
  unint64_t v2117;
  int32x4_t v2118;
  int32x4_t v2119;
  int8x16_t v2120;
  uint16x8_t v2121;
  int8x16_t v2122;
  uint16x8_t v2123;
  uint16x8_t v2124;
  uint64_t v2125;
  unsigned __int16 *v2126;
  int v2127;
  uint64_t v2128;
  uint64_t v2129;
  uint64_t v2130;
  unint64_t v2131;
  uint64_t v2132;
  uint64_t v2133;
  unint64_t v2134;
  unsigned int v2135;
  uint64_t v2136;
  uint64_t v2137;
  int v2138;
  int v2139;
  unint64_t v2140;
  unsigned __int16 *v2141;
  int v2142;
  int v2143;
  uint64_t v2144;
  unsigned __int16 *v2145;
  unsigned __int16 *v2146;
  int v2147;
  unint64_t v2148;
  uint64_t v2149;
  unint64_t v2150;
  char *v2151;
  unint64_t v2152;
  char *v2153;
  unint64_t v2154;
  char *v2155;
  unint64_t v2156;
  uint64_t v2157;
  uint16x4_t *v2158;
  unint64_t v2159;
  char *v2160;
  unint64_t v2161;
  char *v2162;
  unint64_t v2163;
  unint64_t v2164;
  unint64_t v2165;
  BOOL v2167;
  BOOL v2169;
  BOOL v2171;
  BOOL v2173;
  BOOL v2175;
  BOOL v2177;
  BOOL v2179;
  BOOL v2181;
  const __int16 *v2183;
  uint16x4_t v2184;
  uint16x4_t v2185;
  int16x8_t v2186;
  const __int16 *v2187;
  uint16x4_t v2188;
  int16x8_t v2189;
  const __int16 *v2190;
  uint16x4_t v2191;
  const __int16 *v2192;
  uint16x4_t v2193;
  int16x8_t v2194;
  int16x8_t v2195;
  const __int16 *v2196;
  uint16x4_t v2197;
  int16x8_t v2198;
  const __int16 *v2199;
  uint16x4_t v2200;
  const __int16 *v2201;
  uint16x4_t v2202;
  int16x8_t v2203;
  int16x8_t v2204;
  const __int16 *v2205;
  uint16x4_t v2206;
  int16x8_t v2207;
  uint16x8_t v2208;
  uint16x4_t v2209;
  uint16x8_t v2210;
  uint16x4_t v2211;
  int16x8_t *v2212;
  uint16x8_t v2213;
  uint16x4_t v2214;
  uint16x8_t v2215;
  uint16x4_t v2216;
  uint16x8_t v2217;
  uint16x4_t v2218;
  uint16x8_t v2219;
  uint16x4_t v2220;
  uint16x8_t v2221;
  uint16x4_t v2222;
  uint64_t v2223;
  uint16x8_t *v2224;
  uint16x8_t v2225;
  uint32x4_t v2226;
  uint32x4_t v2227;
  uint16x4_t *v2228;
  uint16x8_t v2229;
  uint32x4_t v2230;
  uint16x8_t *v2231;
  uint32x4_t v2232;
  uint32x4_t v2233;
  uint16x8_t *v2234;
  uint32x4_t v2235;
  uint32x4_t v2236;
  uint16x4_t *v2237;
  uint64_t v2238;
  _WORD *v2239;
  unsigned __int16 *v2240;
  unsigned __int16 *v2241;
  int v2242;
  unsigned __int16 *v2243;
  int v2244;
  int v2245;
  unsigned __int16 *v2246;
  int v2247;
  uint64_t v2248;
  uint64_t v2249;
  uint64_t v2250;
  uint64_t v2251;
  uint64_t v2252;
  uint64_t v2253;
  uint16x4_t *v2254;
  uint16x8_t *v2255;
  uint64_t v2256;
  uint64_t v2257;
  uint64_t v2258;
  uint64_t v2259;
  uint64_t v2260;
  uint64_t v2261;
  uint64_t v2262;
  uint64_t v2263;
  uint64_t v2264;
  uint64_t v2265;
  uint64_t v2266;
  unint64_t v2267;
  unint64_t v2268;
  uint64_t v2269;
  uint64_t v2270;
  char *v2271;
  uint64_t v2272;
  char *v2273;
  unint64_t v2274;
  uint64_t v2275;
  char *v2276;
  unint64_t v2277;
  uint64_t v2278;
  char *v2279;
  unint64_t v2280;
  uint64_t v2281;
  char *v2282;
  unint64_t v2283;
  uint64_t v2284;
  char *v2285;
  unint64_t v2286;
  uint64_t v2287;
  char *v2288;
  unint64_t v2289;
  uint64_t v2290;
  unint64_t v2291;
  char *v2292;
  BOOL v2294;
  BOOL v2296;
  BOOL v2298;
  BOOL v2300;
  BOOL v2302;
  BOOL v2304;
  BOOL v2306;
  BOOL v2308;
  BOOL v2310;
  const __int16 *v2312;
  uint16x4_t v2313;
  int16x8_t v2314;
  uint16x4_t v2315;
  int16x8_t v2316;
  const __int16 *v2317;
  uint16x4_t v2318;
  int16x8_t v2319;
  const __int16 *v2320;
  uint16x4_t v2321;
  int16x8_t v2322;
  const __int16 *v2323;
  uint16x4_t v2324;
  int16x8_t v2325;
  const __int16 *v2326;
  uint16x4_t v2327;
  int16x8_t v2328;
  const __int16 *v2329;
  uint16x4_t v2330;
  int16x8_t v2331;
  const __int16 *v2332;
  uint16x4_t v2333;
  int16x8_t v2334;
  const __int16 *v2335;
  uint16x4_t v2336;
  int16x8_t v2337;
  uint16x8_t *v2338;
  int16x8_t *v2339;
  uint64_t v2340;
  uint16x8_t v2341;
  uint16x8_t *v2342;
  uint32x4_t v2343;
  uint32x4_t v2344;
  uint16x4_t *v2345;
  uint32x4_t v2346;
  uint32x4_t v2347;
  uint16x8_t *v2348;
  uint32x4_t v2349;
  uint32x4_t v2350;
  uint16x4_t *v2351;
  uint32x4_t v2352;
  uint32x4_t v2353;
  uint16x4_t *v2354;
  uint64_t v2355;
  _WORD *v2356;
  unsigned __int16 *v2357;
  unsigned __int16 *v2358;
  int v2359;
  unsigned __int16 *v2360;
  int v2361;
  unsigned __int16 *v2362;
  int v2363;
  unsigned __int16 *v2364;
  uint64_t v2365;
  uint64_t v2366;
  int64_t v2367;
  int64_t v2368;
  unsigned __int16 *v2369;
  unint64_t v2370;
  uint64_t v2371;
  uint64_t v2372;
  uint64_t v2373;
  uint16x8_t *v2374;
  uint16x8_t *v2375;
  uint64_t v2376;
  uint64_t v2377;
  uint64_t v2378;
  int64_t v2379;
  uint64_t v2380;
  uint64_t v2381;
  int v2382;
  int32x4_t v2383;
  unint64_t v2384;
  uint16x8_t *v2385;
  int32x4_t v2386;
  int32x4_t v2387;
  int32x4_t v2388;
  uint16x8_t v2389;
  unint64_t v2390;
  uint64_t v2391;
  unint64_t v2392;
  unint64_t v2393;
  uint64_t v2394;
  uint64_t v2395;
  unint64_t v2396;
  unsigned int v2397;
  uint64_t v2398;
  uint64_t v2399;
  int v2400;
  int v2401;
  unint64_t v2402;
  unsigned __int16 *v2403;
  int v2404;
  int v2405;
  int64_t v2406;
  unsigned __int16 *v2407;
  unsigned __int16 *v2408;
  int v2409;
  uint64_t v2410;
  unint64_t v2411;
  uint64_t v2412;
  uint64_t v2413;
  uint64_t v2414;
  int v2415;
  int32x4_t v2416;
  unint64_t v2417;
  uint16x8_t *v2418;
  int32x4_t v2419;
  int32x4_t v2420;
  int32x4_t v2421;
  uint16x8_t v2422;
  unsigned int v2423;
  uint64_t v2424;
  unint64_t v2425;
  uint64_t v2426;
  int v2427;
  unsigned __int16 *v2428;
  unint64_t v2429;
  int v2430;
  int v2431;
  int64_t v2432;
  unsigned __int16 *v2433;
  unsigned __int16 *v2434;
  int v2435;
  uint16x8_t **v2436;
  uint64_t v2437;
  uint64_t v2438;
  unint64_t v2439;
  uint16x4_t *v2440;
  uint64_t v2441;
  uint64_t v2442;
  unsigned __int16 *v2443;
  uint64_t v2444;
  uint64_t v2445;
  uint64_t v2446;
  uint64_t v2447;
  unint64_t v2448;
  uint64_t v2449;
  BOOL v2451;
  const __int16 *v2453;
  uint16x4_t v2454;
  int16x8_t v2455;
  uint16x4_t v2456;
  const __int16 *v2457;
  uint16x4_t v2458;
  int16x8_t v2459;
  int16x8_t v2460;
  const __int16 *v2461;
  uint16x4_t v2462;
  int16x8_t v2463;
  const __int16 *v2464;
  uint16x4_t v2465;
  const __int16 *v2466;
  uint16x4_t v2467;
  int16x8_t v2468;
  int16x8_t v2469;
  const __int16 *v2470;
  uint16x4_t v2471;
  int16x8_t v2472;
  const __int16 *v2473;
  uint16x4_t v2474;
  const __int16 *v2475;
  uint16x4_t v2476;
  int16x8_t v2477;
  int16x8_t v2478;
  uint64_t v2479;
  int16x8_t *v2480;
  uint64_t v2481;
  uint16x8_t v2482;
  uint16x8_t v2483;
  _WORD *v2484;
  uint16x8_t *v2485;
  uint64_t v2486;
  uint16x8_t v2487;
  int v2488;
  int v2489;
  uint64_t v2490;
  uint64_t v2491;
  uint64_t v2492;
  int v2493;
  uint64_t v2494;
  uint64_t v2495;
  uint64_t v2496;
  unsigned int v2497;
  uint64_t v2498;
  unint64_t v2499;
  uint64_t v2500;
  unint64_t v2501;
  int32x4_t v2502;
  int32x4_t v2503;
  int16x8_t *v2504;
  uint16x8_t *v2505;
  unint64_t v2506;
  int32x4_t v2507;
  int32x4_t v2508;
  int8x16_t v2509;
  uint16x8_t v2510;
  int8x16_t v2511;
  uint16x8_t v2512;
  uint16x8_t v2513;
  unsigned __int16 *v2514;
  int v2515;
  uint64_t v2516;
  int v2517;
  unsigned int v2518;
  uint64_t v2519;
  unint64_t v2520;
  uint64_t v2521;
  unint64_t v2522;
  int32x4_t v2523;
  int32x4_t v2524;
  int16x8_t *v2525;
  uint16x8_t *v2526;
  unint64_t v2527;
  int32x4_t v2528;
  int32x4_t v2529;
  int8x16_t v2530;
  uint16x8_t v2531;
  int8x16_t v2532;
  uint16x8_t v2533;
  uint16x8_t v2534;
  unsigned __int16 *v2535;
  unsigned __int16 *v2536;
  uint64_t v2537;
  int v2538;
  int v2539;
  int v2540;
  uint64_t v2541;
  uint64_t v2542;
  unsigned int v2543;
  uint64_t v2544;
  unint64_t v2545;
  uint64_t v2546;
  unint64_t v2547;
  int32x4_t v2548;
  int32x4_t v2549;
  int16x8_t *v2550;
  uint16x8_t *v2551;
  unint64_t v2552;
  int32x4_t v2553;
  int32x4_t v2554;
  int8x16_t v2555;
  uint16x8_t v2556;
  int8x16_t v2557;
  uint16x8_t v2558;
  uint16x8_t v2559;
  unsigned __int16 *v2560;
  int v2561;
  uint64_t v2562;
  uint64_t v2563;
  unsigned int v2564;
  uint64_t v2565;
  unint64_t v2566;
  uint64_t v2567;
  unint64_t v2568;
  int32x4_t v2569;
  int32x4_t v2570;
  int16x8_t *v2571;
  uint16x8_t *v2572;
  unint64_t v2573;
  int32x4_t v2574;
  int32x4_t v2575;
  int8x16_t v2576;
  uint16x8_t v2577;
  int8x16_t v2578;
  uint16x8_t v2579;
  uint16x8_t v2580;
  uint64_t v2581;
  unsigned __int16 *v2582;
  int v2583;
  uint64_t v2584;
  uint64_t v2585;
  uint64_t v2586;
  uint64_t v2587;
  uint16x8_t *v2588;
  uint64_t v2589;
  uint16x8_t *v2590;
  uint64_t v2591;
  int16x8_t *v2592;
  uint16x8_t *v2593;
  uint64_t v2594;
  uint64_t v2595;
  uint64_t v2596;
  unint64_t v2597;
  unint64_t v2598;
  BOOL v2600;
  BOOL v2602;
  BOOL v2604;
  BOOL v2606;
  BOOL v2608;
  BOOL v2610;
  BOOL v2612;
  BOOL v2614;
  BOOL v2616;
  BOOL v2618;
  unint64_t v2619;
  BOOL v2621;
  BOOL v2623;
  BOOL v2625;
  unint64_t v2626;
  BOOL v2627;
  const __int16 *v2628;
  uint16x4_t v2629;
  int16x8_t v2630;
  uint16x4_t v2631;
  int16x8_t v2632;
  const __int16 *v2633;
  uint16x4_t v2634;
  int16x8_t v2635;
  const __int16 *v2636;
  uint16x4_t v2637;
  int16x8_t v2638;
  const __int16 *v2639;
  uint16x4_t v2640;
  int16x8_t v2641;
  const __int16 *v2642;
  uint16x4_t v2643;
  int16x8_t v2644;
  const __int16 *v2645;
  uint16x4_t v2646;
  int16x8_t v2647;
  const __int16 *v2648;
  uint16x4_t v2649;
  int16x8_t v2650;
  const __int16 *v2651;
  uint16x4_t v2652;
  int16x8_t v2653;
  const __int16 *v2654;
  uint16x4_t v2655;
  int16x8_t v2656;
  const __int16 *v2657;
  uint16x4_t v2658;
  int16x8_t v2659;
  const __int16 *v2660;
  uint16x4_t v2661;
  int16x8_t v2662;
  const __int16 *v2663;
  uint16x4_t v2664;
  int16x8_t v2665;
  uint64_t v2666;
  int16x8_t *v2667;
  uint16x8_t *v2668;
  uint16x8_t v2669;
  uint16x8_t *v2670;
  uint32x4_t v2671;
  uint32x4_t v2672;
  uint16x4_t *v2673;
  uint32x4_t v2674;
  uint32x4_t v2675;
  uint16x8_t *v2676;
  uint32x4_t v2677;
  uint32x4_t v2678;
  uint16x4_t *v2679;
  uint32x4_t v2680;
  uint32x4_t v2681;
  uint16x8_t *v2682;
  uint32x4_t v2683;
  uint32x4_t v2684;
  uint16x4_t *v2685;
  uint32x4_t v2686;
  uint32x4_t v2687;
  uint16x8_t *v2688;
  uint32x4_t v2689;
  uint32x4_t v2690;
  uint16x4_t *v2691;
  uint32x4_t v2692;
  uint32x4_t v2693;
  uint16x4_t *v2694;
  uint64_t v2695;
  uint64_t v2696;
  uint64_t v2697;
  uint64_t v2698;
  uint64_t v2699;
  uint64_t v2700;
  uint64_t v2701;
  uint64_t v2702;
  uint64_t v2703;
  uint64_t v2704;
  uint64_t v2705;
  int v2706;
  uint64_t v2707;
  uint64_t v2708;
  unint64_t v2709;
  uint64_t v2710;
  uint64_t v2711;
  unsigned int v2712;
  uint64_t v2713;
  unint64_t v2714;
  uint64_t v2715;
  int v2716;
  unint64_t v2717;
  unsigned __int16 *v2718;
  int v2719;
  int v2720;
  uint64_t v2721;
  unsigned __int16 *v2722;
  unsigned __int16 *v2723;
  int v2724;
  uint64_t v2725;
  uint64_t v2726;
  unsigned __int16 *v2727;
  unsigned __int16 *v2728;
  unsigned __int16 *v2729;
  _WORD *v2730;
  unsigned __int16 *v2731;
  unint64_t v2732;
  int v2733;
  unsigned int v2734;
  uint64_t v2735;
  uint64_t v2736;
  _WORD *v2737;
  uint16x4_t *v2738;
  unsigned __int16 *v2739;
  unsigned __int16 *v2740;
  int v2741;
  unsigned __int16 *v2742;
  uint64_t v2743;
  unint64_t v2744;
  uint64_t v2745;
  unint64_t v2746;
  char *v2747;
  unint64_t v2748;
  uint16x4_t *v2749;
  unint64_t v2750;
  char *v2751;
  unint64_t v2752;
  char *v2753;
  unint64_t v2754;
  uint64_t v2755;
  char *v2756;
  unint64_t v2757;
  unint64_t v2758;
  char *v2759;
  unint64_t v2760;
  char *v2761;
  unint64_t v2762;
  unint64_t v2763;
  unint64_t v2764;
  BOOL v2766;
  BOOL v2768;
  BOOL v2770;
  BOOL v2772;
  BOOL v2774;
  BOOL v2776;
  BOOL v2778;
  BOOL v2780;
  BOOL v2782;
  BOOL v2784;
  BOOL v2785;
  const __int16 *v2786;
  uint16x4_t v2787;
  uint16x4_t v2788;
  int16x8_t v2789;
  const __int16 *v2790;
  uint16x4_t v2791;
  int16x8_t v2792;
  const __int16 *v2793;
  uint16x4_t v2794;
  const __int16 *v2795;
  uint16x4_t v2796;
  int16x8_t v2797;
  int16x8_t v2798;
  const __int16 *v2799;
  uint16x4_t v2800;
  int16x8_t v2801;
  const __int16 *v2802;
  uint16x4_t v2803;
  const __int16 *v2804;
  uint16x4_t v2805;
  int16x8_t v2806;
  int16x8_t v2807;
  const __int16 *v2808;
  uint16x4_t v2809;
  int16x8_t v2810;
  const __int16 *v2811;
  uint16x4_t v2812;
  const __int16 *v2813;
  uint16x4_t v2814;
  int16x8_t v2815;
  int16x8_t v2816;
  uint16x8_t v2817;
  uint16x4_t v2818;
  uint16x8_t v2819;
  int16x8_t *v2820;
  uint16x4_t v2821;
  uint16x8_t v2822;
  uint16x4_t v2823;
  uint16x8_t v2824;
  uint16x4_t v2825;
  uint16x8_t v2826;
  uint16x4_t v2827;
  uint16x8_t v2828;
  uint16x4_t v2829;
  uint16x8_t v2830;
  uint16x4_t v2831;
  uint16x8_t v2832;
  uint16x4_t v2833;
  uint16x8_t v2834;
  uint16x4_t v2835;
  uint64_t v2836;
  uint16x8_t *v2837;
  uint16x8_t v2838;
  uint16x8_t *v2839;
  uint32x4_t v2840;
  uint32x4_t v2841;
  uint16x8_t *v2842;
  uint32x4_t v2843;
  uint32x4_t v2844;
  uint16x4_t *v2845;
  uint16x8_t v2846;
  uint32x4_t v2847;
  uint16x8_t *v2848;
  uint32x4_t v2849;
  uint32x4_t v2850;
  uint16x8_t *v2851;
  uint32x4_t v2852;
  uint32x4_t v2853;
  uint16x4_t *v2854;
  uint64_t v2855;
  _WORD *v2856;
  unsigned __int16 *v2857;
  unsigned __int16 *v2858;
  int v2859;
  unsigned __int16 *v2860;
  int v2861;
  unsigned __int16 *v2862;
  int v2863;
  unsigned __int16 *v2864;
  int v2865;
  int v2866;
  unsigned __int16 *v2867;
  int v2868;
  uint64_t v2869;
  uint64_t v2870;
  uint64_t v2871;
  uint64_t v2872;
  uint64_t v2873;
  uint16x4_t *v2874;
  uint16x8_t *v2875;
  uint64_t v2876;
  uint64_t v2877;
  uint64_t v2878;
  uint64_t v2879;
  uint64_t v2880;
  uint64_t v2881;
  uint64_t v2882;
  uint64_t v2883;
  uint64_t v2884;
  uint64_t v2885;
  uint64_t v2886;
  uint64_t v2887;
  uint64_t v2888;
  uint64_t v2889;
  unint64_t v2890;
  unint64_t v2891;
  uint64_t v2892;
  char *v2893;
  uint64_t v2894;
  char *v2895;
  uint64_t v2896;
  char *v2897;
  unint64_t v2898;
  uint64_t v2899;
  char *v2900;
  unint64_t v2901;
  uint64_t v2902;
  char *v2903;
  unint64_t v2904;
  uint64_t v2905;
  char v2907;
  char *v2908;
  unint64_t v2909;
  uint64_t v2910;
  BOOL v2912;
  char *v2913;
  unint64_t v2914;
  uint64_t v2915;
  BOOL v2917;
  char *v2918;
  unint64_t v2919;
  uint64_t v2920;
  char v2922;
  char *v2923;
  unint64_t v2924;
  BOOL v2926;
  uint64_t v2927;
  char v2929;
  char *v2930;
  unint64_t v2931;
  char v2933;
  uint64_t v2934;
  BOOL v2936;
  char *v2937;
  unint64_t v2938;
  BOOL v2940;
  BOOL v2942;
  BOOL v2944;
  const __int16 *v2946;
  uint16x4_t v2947;
  int16x8_t v2948;
  uint16x4_t v2949;
  int16x8_t v2950;
  const __int16 *v2951;
  uint16x4_t v2952;
  int16x8_t v2953;
  const __int16 *v2954;
  uint16x4_t v2955;
  int16x8_t v2956;
  const __int16 *v2957;
  uint16x4_t v2958;
  int16x8_t v2959;
  const __int16 *v2960;
  uint16x4_t v2961;
  int16x8_t v2962;
  const __int16 *v2963;
  uint16x4_t v2964;
  int16x8_t v2965;
  const __int16 *v2966;
  uint16x4_t v2967;
  int16x8_t v2968;
  const __int16 *v2969;
  uint16x4_t v2970;
  int16x8_t v2971;
  const __int16 *v2972;
  uint16x4_t v2973;
  int16x8_t v2974;
  const __int16 *v2975;
  uint16x4_t v2976;
  int16x8_t v2977;
  uint16x8_t *v2978;
  int16x8_t *v2979;
  uint64_t v2980;
  uint16x8_t v2981;
  uint16x8_t *v2982;
  uint32x4_t v2983;
  uint32x4_t v2984;
  uint16x4_t *v2985;
  uint32x4_t v2986;
  uint32x4_t v2987;
  uint16x8_t *v2988;
  uint32x4_t v2989;
  uint32x4_t v2990;
  uint16x4_t *v2991;
  uint32x4_t v2992;
  uint32x4_t v2993;
  uint16x8_t *v2994;
  uint32x4_t v2995;
  uint32x4_t v2996;
  uint16x4_t *v2997;
  uint32x4_t v2998;
  uint32x4_t v2999;
  uint16x4_t *v3000;
  uint64_t v3001;
  _WORD *v3002;
  unsigned __int16 *v3003;
  unsigned __int16 *v3004;
  unsigned __int16 *v3005;
  int v3006;
  unsigned __int16 *v3007;
  int v3008;
  unsigned __int16 *v3009;
  unsigned __int16 *v3010;
  int v3011;
  unsigned __int16 *v3012;
  uint64_t v3013;
  uint64_t v3014;
  uint64_t v3015;
  uint64_t v3016;
  unsigned __int16 *v3017;
  unint64_t v3018;
  uint64_t v3019;
  uint64_t v3020;
  uint64_t v3021;
  uint16x8_t *v3022;
  uint16x8_t *v3023;
  uint64_t v3024;
  uint64_t v3025;
  uint64_t v3026;
  uint64_t v3027;
  uint64_t v3028;
  uint64_t v3029;
  int v3030;
  int32x4_t v3031;
  unint64_t v3032;
  uint16x8_t *v3033;
  int32x4_t v3034;
  int32x4_t v3035;
  int32x4_t v3036;
  uint16x8_t v3037;
  unint64_t v3038;
  uint64_t v3039;
  unint64_t v3040;
  unint64_t v3041;
  uint64_t v3042;
  uint64_t v3043;
  unint64_t v3044;
  unsigned int v3045;
  uint64_t v3046;
  uint64_t v3047;
  int v3048;
  int v3049;
  unint64_t v3050;
  unsigned __int16 *v3051;
  int v3052;
  int v3053;
  uint64_t v3054;
  unsigned __int16 *v3055;
  unsigned __int16 *v3056;
  int v3057;
  uint64_t v3058;
  unint64_t v3059;
  uint64_t v3060;
  uint64_t v3061;
  uint64_t v3062;
  int v3063;
  int32x4_t v3064;
  unint64_t v3065;
  uint16x8_t *v3066;
  int32x4_t v3067;
  int32x4_t v3068;
  int32x4_t v3069;
  uint16x8_t v3070;
  unsigned int v3071;
  uint64_t v3072;
  unint64_t v3073;
  uint64_t v3074;
  int v3075;
  unsigned __int16 *v3076;
  unint64_t v3077;
  int v3078;
  int v3079;
  uint64_t v3080;
  unsigned __int16 *v3081;
  unsigned __int16 *v3082;
  int v3083;
  uint16x8_t **v3084;
  uint64_t v3085;
  uint64_t v3086;
  unint64_t v3087;
  uint16x4_t *v3088;
  uint64_t v3089;
  uint64_t v3090;
  unsigned __int16 *v3091;
  uint64_t v3092;
  uint64_t v3093;
  uint64_t v3094;
  uint64_t v3095;
  unint64_t v3096;
  uint64_t v3097;
  BOOL v3099;
  const __int16 *v3101;
  uint16x4_t v3102;
  uint16x4_t v3103;
  int16x8_t v3104;
  int16x8_t v3105;
  const __int16 *v3106;
  uint16x4_t v3107;
  int16x8_t v3108;
  const __int16 *v3109;
  uint16x4_t v3110;
  const __int16 *v3111;
  uint16x4_t v3112;
  int16x8_t v3113;
  int16x8_t v3114;
  const __int16 *v3115;
  uint16x4_t v3116;
  int16x8_t v3117;
  const __int16 *v3118;
  uint16x4_t v3119;
  const __int16 *v3120;
  uint16x4_t v3121;
  int16x8_t v3122;
  int16x8_t v3123;
  const __int16 *v3124;
  uint16x4_t v3125;
  int16x8_t v3126;
  const __int16 *v3127;
  uint16x4_t v3128;
  const __int16 *v3129;
  uint16x4_t v3130;
  int16x8_t v3131;
  int16x8_t v3132;
  uint64_t v3133;
  int16x8_t *v3134;
  uint64_t v3135;
  uint16x8_t v3136;
  uint16x8_t v3137;
  uint32x4_t v3138;
  uint16x8_t v3139;
  uint32x4_t v3140;
  uint32x4_t v3141;
  uint16x8_t v3142;
  _WORD *v3143;
  unsigned __int16 *v3144;
  uint64_t v3145;
  uint16x8_t v3146;
  int v3147;
  int v3148;
  int v3149;
  int v3150;
  uint64_t v3151;
  uint64_t v3152;
  uint64_t v3153;
  int v3154;
  uint64_t v3155;
  uint64_t v3156;
  uint64_t v3157;
  unsigned int v3158;
  uint64_t v3159;
  unint64_t v3160;
  uint64_t v3161;
  unint64_t v3162;
  int32x4_t v3163;
  int32x4_t v3164;
  int16x8_t *v3165;
  uint16x8_t *v3166;
  unint64_t v3167;
  int32x4_t v3168;
  int32x4_t v3169;
  int8x16_t v3170;
  uint16x8_t v3171;
  int8x16_t v3172;
  uint16x8_t v3173;
  uint16x8_t v3174;
  unsigned __int16 *v3175;
  int v3176;
  uint64_t v3177;
  int v3178;
  unsigned int v3179;
  uint64_t v3180;
  unint64_t v3181;
  uint64_t v3182;
  unint64_t v3183;
  int32x4_t v3184;
  int32x4_t v3185;
  int16x8_t *v3186;
  uint16x8_t *v3187;
  unint64_t v3188;
  int32x4_t v3189;
  int32x4_t v3190;
  int8x16_t v3191;
  uint16x8_t v3192;
  int8x16_t v3193;
  uint16x8_t v3194;
  uint16x8_t v3195;
  unsigned __int16 *v3196;
  unsigned __int16 *v3197;
  uint64_t v3198;
  int v3199;
  int v3200;
  int v3201;
  uint64_t v3202;
  uint64_t v3203;
  unsigned int v3204;
  uint64_t v3205;
  unint64_t v3206;
  uint64_t v3207;
  unint64_t v3208;
  int32x4_t v3209;
  int32x4_t v3210;
  int16x8_t *v3211;
  uint16x8_t *v3212;
  unint64_t v3213;
  int32x4_t v3214;
  int32x4_t v3215;
  int8x16_t v3216;
  uint16x8_t v3217;
  int8x16_t v3218;
  uint16x8_t v3219;
  uint16x8_t v3220;
  unsigned __int16 *v3221;
  int v3222;
  uint64_t v3223;
  uint64_t v3224;
  unsigned int v3225;
  uint64_t v3226;
  unint64_t v3227;
  uint64_t v3228;
  unint64_t v3229;
  int32x4_t v3230;
  int32x4_t v3231;
  int16x8_t *v3232;
  uint16x8_t *v3233;
  unint64_t v3234;
  int32x4_t v3235;
  int32x4_t v3236;
  int8x16_t v3237;
  uint16x8_t v3238;
  int8x16_t v3239;
  uint16x8_t v3240;
  uint16x8_t v3241;
  unsigned __int16 *v3242;
  int v3243;
  uint64_t v3244;
  uint64_t v3245;
  unsigned int v3246;
  uint64_t v3247;
  unint64_t v3248;
  uint64_t v3249;
  unint64_t v3250;
  int32x4_t v3251;
  int32x4_t v3252;
  int16x8_t *v3253;
  uint16x8_t *v3254;
  unint64_t v3255;
  int32x4_t v3256;
  int32x4_t v3257;
  int8x16_t v3258;
  uint16x8_t v3259;
  int8x16_t v3260;
  uint16x8_t v3261;
  uint16x8_t v3262;
  uint64_t v3263;
  unsigned __int16 *v3264;
  int v3265;
  uint64_t v3266;
  uint64_t v3267;
  unsigned __int16 *v3268;
  unsigned __int16 *v3269;
  unsigned __int16 *v3270;
  _WORD *v3271;
  unsigned __int16 *v3272;
  unsigned __int16 *v3273;
  unint64_t v3274;
  int v3275;
  int v3276;
  int v3277;
  unsigned int v3278;
  uint64_t v3279;
  unint64_t v3280;
  unint64_t v3281;
  BOOL v3283;
  const __int16 *v3285;
  uint16x4_t v3286;
  uint16x4_t v3287;
  uint32x4_t v3288;
  const __int16 *v3289;
  uint16x4_t v3290;
  int32x4_t v3291;
  uint16x8_t *v3292;
  int16x8_t *v3293;
  uint64_t v3294;
  uint16x8_t v3295;
  uint64_t v3296;
  _WORD *v3297;
  unsigned __int16 *v3298;
  int v3299;
  uint64_t v3300;
  uint64_t v3301;
  uint64_t v3302;
  uint64_t v3303;
  unint64_t v3304;
  uint16x4_t *v3305;
  uint64_t v3306;
  uint64_t v3307;
  uint64_t v3308;
  unsigned __int16 *v3309;
  uint64_t v3310;
  uint64_t v3311;
  uint64_t v3312;
  uint64_t v3313;
  unint64_t v3314;
  uint64_t v3315;
  BOOL v3317;
  const __int16 *v3319;
  uint16x4_t v3320;
  int16x8_t v3321;
  uint16x4_t v3322;
  int16x8_t v3323;
  const __int16 *v3324;
  uint16x4_t v3325;
  const __int16 *v3326;
  uint16x4_t v3327;
  int16x8_t v3328;
  int16x8_t v3329;
  const __int16 *v3330;
  uint16x4_t v3331;
  int16x8_t v3332;
  const __int16 *v3333;
  uint16x4_t v3334;
  const __int16 *v3335;
  uint16x4_t v3336;
  int16x8_t v3337;
  int16x8_t v3338;
  uint64_t v3339;
  int16x8_t *v3340;
  uint64_t v3341;
  _WORD *v3342;
  unsigned __int16 *v3343;
  uint64_t v3344;
  int32x4_t v3345;
  int v3346;
  int v3347;
  int v3348;
  int v3349;
  uint64_t v3350;
  uint64_t v3351;
  uint64_t v3352;
  int v3353;
  uint64_t v3354;
  uint64_t v3355;
  uint64_t v3356;
  unsigned int v3357;
  uint64_t v3358;
  unint64_t v3359;
  uint64_t v3360;
  unint64_t v3361;
  int32x4_t v3362;
  int32x4_t v3363;
  int16x8_t *v3364;
  uint16x8_t *v3365;
  unint64_t v3366;
  int32x4_t v3367;
  int32x4_t v3368;
  int8x16_t v3369;
  uint16x8_t v3370;
  int8x16_t v3371;
  uint16x8_t v3372;
  uint16x8_t v3373;
  unsigned __int16 *v3374;
  int v3375;
  uint64_t v3376;
  unsigned int v3377;
  uint64_t v3378;
  uint64_t v3379;
  uint64_t v3380;
  uint64_t v3381;
  uint64_t v3382;
  uint64_t v3383;
  uint64_t v3384;
  uint64_t v3385;
  unsigned int v3386;
  uint64_t v3387;
  unint64_t v3388;
  uint64_t v3389;
  unint64_t v3390;
  int32x4_t v3391;
  int32x4_t v3392;
  int16x8_t *v3393;
  uint16x8_t *v3394;
  unint64_t v3395;
  int32x4_t v3396;
  int32x4_t v3397;
  int8x16_t v3398;
  uint16x8_t v3399;
  int8x16_t v3400;
  uint16x8_t v3401;
  uint16x8_t v3402;
  uint64_t v3403;
  unsigned __int16 *v3404;
  int v3405;
  uint64_t v3406;
  unint64_t v3407;
  unint64_t v3408;
  uint64_t v3409;
  uint64_t v3410;
  uint64_t v3411;
  unint64_t v3412;
  unsigned int v3413;
  uint64_t v3414;
  uint64_t v3415;
  int v3416;
  int v3417;
  unint64_t v3418;
  unsigned __int16 *v3419;
  int v3420;
  int v3421;
  uint64_t v3422;
  unsigned __int16 *v3423;
  unsigned __int16 *v3424;
  int v3425;
  unint64_t v3426;
  unint64_t v3427;
  unint64_t v3428;
  BOOL v3429;
  BOOL v3430;
  const __int16 *v3432;
  uint16x4_t v3433;
  uint16x4_t v3434;
  uint32x4_t v3435;
  const __int16 *v3436;
  uint16x4_t v3437;
  uint32x4_t v3438;
  const __int16 *v3439;
  uint16x4_t v3440;
  int32x4_t v3441;
  uint16x8_t *v3442;
  int16x8_t *v3443;
  uint64_t v3444;
  uint16x8_t v3445;
  unint64_t v3446;
  _WORD *v3447;
  unsigned __int16 *v3448;
  int v3449;
  uint64_t v3450;
  uint64_t v3451;
  uint64_t v3452;
  unsigned int v3453;
  uint64_t v3454;
  uint64_t v3455;
  uint64_t v3456;
  int v3457;
  unint64_t v3458;
  unsigned __int16 *v3459;
  int v3460;
  int v3461;
  uint64_t v3462;
  unsigned __int16 *v3463;
  unsigned __int16 *v3464;
  int v3465;
  int *v3466;
  uint64_t v3467;
  uint64_t v3468;
  uint64_t v3469;
  uint64_t v3470;
  uint64_t v3471;
  uint64_t v3472;
  uint64_t v3473;
  uint64_t v3474;
  uint64_t v3475;
  uint64_t i64;
  uint64_t v3477;
  uint64_t v3478;
  uint64_t v3479;
  size_t v3480;
  uint64_t v3481;
  size_t v3482;
  uint64_t v3483;
  size_t v3484;
  size_t v3485;
  size_t v3486;
  uint64_t v3487;
  uint64_t v3488;
  uint64_t v3489;
  uint64_t v3490;
  uint64_t v3491;
  uint64_t v3492;
  uint64_t v3493;
  uint64_t v3494;
  uint64_t v3495;
  uint64_t v3496;
  uint64_t v3497;
  uint64_t v3498;
  uint64_t v3499;
  uint64_t v3500;
  uint64_t v3501;
  uint64_t v3502;
  uint64_t v3503;
  int v3504;
  int64_t v3505;
  uint64_t v3506;
  uint64_t v3507;
  uint64_t v3508;
  uint64_t v3509;
  uint64_t v3510;
  uint64_t v3511;
  uint64_t v3512;
  uint64_t v3513;
  uint64_t v3514;
  uint64_t v3515;
  uint64_t v3516;
  uint64_t v3517;
  int64_t v3518;
  uint64_t v3519;
  uint64_t v3520;
  int v3521;
  int64_t v3522;
  uint64_t v3523;
  uint64_t v3524;
  uint64_t v3525;
  int64_t v3526;
  uint64_t v3527;
  uint64_t v3528;
  uint64_t v3529;
  uint64_t v3530;
  unint64_t v3531;
  uint64_t v3532;
  uint64_t v3533;
  int v3534;
  uint64_t v3535;
  uint64_t v3536;
  uint64_t v3537;
  char *v3538;
  uint64_t v3539;
  uint64_t v3540;
  unint64_t v3541;
  uint64_t v3542;
  uint64_t v3543;
  uint64_t v3544;
  size_t v3545;
  uint64_t v3546;
  uint64_t v3547;
  uint64_t v3548;
  uint64_t v3549;
  uint64_t v3550;
  uint64_t v3551;
  uint64_t v3552;
  uint64_t v3553;
  uint64_t v3554;
  uint64_t v3555;
  uint64_t v3556;
  uint64_t v3557;
  uint64_t v3558;
  unint64_t v3559;
  uint64_t v3560;
  uint64_t v3561;
  unint64_t v3562;
  uint64_t v3563;
  unint64_t v3564;
  uint64_t v3565;
  uint64_t v3566;
  uint64_t v3567;
  uint64_t v3568;
  uint16x8_t *v3569;
  uint64_t v3570;
  uint64_t v3571;
  uint16x8_t **v3573;
  uint64_t v3574;
  uint64_t v3575;
  uint64_t v3576;
  uint64_t v3577;
  uint64_t v3578;
  uint64_t v3579;
  uint64_t v3580;
  _WORD *v3581;

  v4 = a1;
  v5 = malloc_type_calloc(*((int *)a1 + 2), 2uLL, 0x1000040BDFB0063uLL);
  v6 = (float)(a3 * 6.0) + 1.0;
  v7 = v6;
  v8 = v6 <= 0.0;
  v9 = -0.5;
  if (!v8)
    v9 = 0.5;
  v10 = (int)(v9 + v7);
  LODWORD(v11) = v10 | 1;
  v12 = (float *)malloc_type_calloc((int)(v10 | 1), 4uLL, 0x100004052888210uLL);
  v13 = (uint16x4_t *)malloc_type_calloc((int)(v10 | 1), 2uLL, 0x1000040BDFB0063uLL);
  v3521 = v10;
  v3574 = v10 | 1;
  if ((v10 & 0x80000000) != 0)
  {
    v29 = 0;
  }
  else
  {
    v14 = a3 * a3;
    if ((int)v11 <= 1)
      v11 = 1;
    else
      v11 = v11;
    v15 = -(v10 >> 1);
    v16 = 0.0;
    v17 = v12;
    v18 = v11;
    v19 = -0.5 / v14;
    do
    {
      v20 = expf((float)(v19 * (float)v15) * (float)v15);
      *v17++ = v20;
      v16 = v16 + v20;
      ++v15;
      --v18;
    }
    while (v18);
    v21 = v12;
    v22 = v13;
    v23 = v11;
    do
    {
      v24 = *v21++;
      v25 = ldexpf(v24 / v16, 15);
      v26 = v25;
      if (v25 <= 0.0)
        v27 = -0.5;
      else
        v27 = 0.5;
      v22->i16[0] = (int)(v27 + v26);
      v22 = (uint16x4_t *)((char *)v22 + 2);
      --v23;
    }
    while (v23);
    if (v11 >= 0x10)
    {
      v28 = v11 & 0x7FFFFFF0;
      v30 = (uint16x8_t *)&v13[2];
      v31 = 0uLL;
      v32 = v28;
      v33 = 0uLL;
      v34 = 0uLL;
      v35 = 0uLL;
      do
      {
        v36 = v30[-1];
        v33 = (int32x4_t)vaddw_high_u16((uint32x4_t)v33, v36);
        v31 = (int32x4_t)vaddw_u16((uint32x4_t)v31, *(uint16x4_t *)v36.i8);
        v35 = (int32x4_t)vaddw_high_u16((uint32x4_t)v35, *v30);
        v34 = (int32x4_t)vaddw_u16((uint32x4_t)v34, *(uint16x4_t *)v30->i8);
        v30 += 2;
        v32 -= 16;
      }
      while (v32);
      v29 = vaddvq_s32(vaddq_s32(vaddq_s32(v34, v31), vaddq_s32(v35, v33)));
    }
    else
    {
      v28 = 0;
      v29 = 0;
    }
    v37 = v11 - v28;
    v38 = (__int16 *)v13 + v28;
    do
    {
      v39 = *v38++;
      v29 += v39;
      --v37;
    }
    while (v37);
  }
  v40 = (v3521 >> 1);
  v13->i16[(int)v40] = (v13->i16[(int)v40] - v29) ^ 0x8000;
  free(v12);
  v3573 = v4;
  v3581 = v5;
  v41 = a2;
  switch((int)v40)
  {
    case 3:
      v42 = *((unsigned int *)v4 + 2);
      if ((int)v42 < 1)
        goto LABEL_1007;
      v43 = (uint16x4_t *)*v4;
      v44 = v4[2];
      v45 = *a2;
      v46 = 2 * (_QWORD)v44;
      v47 = 4 * (_QWORD)v44;
      if (v42 < 8)
      {
        for (i = 0; i != v42; ++i)
LABEL_451:
          *(_WORD *)(v45 + 2 * i) = (vaddvq_s32((int32x4_t)vmovl_u16(*v13)) * v43->u16[i]
                                   + v13[1].u16[0] * v43->u16[i + (unint64_t)v46 / 2]
                                   + v13[1].u16[1] * v43->u16[2 * (_QWORD)v44 + i]
                                   + v13[1].u16[2] * v43->u16[3 * (_QWORD)v44 + i]) >> 15;
        goto LABEL_452;
      }
      i = 0;
      v657 = v45 + 2 * v42;
      v658 = (unint64_t)v43 + 2 * v42;
      v660 = v45 < v658 + 6 * (_QWORD)v44 && (unint64_t)v43 + 6 * (_QWORD)v44 < v657;
      v662 = v45 < (unint64_t)v43 + 2 * v42 + v47 && (unint64_t)v43 + v47 < v657;
      v664 = v45 < (unint64_t)v43 + 2 * v42 + v46 && (unint64_t)v43 + v46 < v657;
      v666 = v45 < v658 && (unint64_t)v43 < v657;
      if ((unint64_t)v13 < v657 && v45 < (unint64_t)&v13[1] + 6)
        goto LABEL_451;
      if (v660)
        goto LABEL_451;
      if (v662)
        goto LABEL_451;
      if (v664)
        goto LABEL_451;
      if (v666)
        goto LABEL_451;
      v668 = (const __int16 *)v13;
      v669 = (uint16x4_t)vld1_dup_s16(v668++);
      i = v42 & 0xFFFFFFF8;
      v670 = (uint16x4_t)vld1_dup_s16(v668);
      v671 = vaddl_u16(v670, v669);
      v672 = (const __int16 *)v13 + 2;
      v673 = (uint16x4_t)vld1_dup_s16(v672);
      v674 = vaddw_u16(v671, v673);
      v675 = (const __int16 *)v13 + 3;
      v676 = (uint16x4_t)vld1_dup_s16(v675);
      v677 = (int16x8_t)vaddw_u16(v674, v676);
      v678 = (const __int16 *)&v13[1];
      v679 = (uint16x4_t)vld1_dup_s16(v678);
      v680 = (int16x8_t)vmovl_u16(v679);
      v681 = (const __int16 *)&v13[1] + 1;
      v682 = (uint16x4_t)vld1_dup_s16(v681);
      v683 = (int16x8_t)vmovl_u16(v682);
      v684 = (const __int16 *)&v13[1] + 2;
      v685 = (uint16x4_t)vld1_dup_s16(v684);
      v686 = (int16x8_t)vmovl_u16(v685);
      v687 = (uint16x8_t)vuzp1q_s16(v677, v680);
      v688 = (uint16x4_t)vmovn_s32((int32x4_t)v680);
      v689 = (uint16x8_t)vuzp1q_s16(v677, v683);
      v690 = (uint16x4_t)vmovn_s32((int32x4_t)v683);
      v691 = (uint16x8_t)vuzp1q_s16(v677, v686);
      v692 = (uint16x4_t)vmovn_s32((int32x4_t)v686);
      v693 = i;
      v694 = (int16x8_t *)*a2;
      v695 = (uint16x4_t *)*v4;
      do
      {
        *v694++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v677, (int32x4_t)vmovl_u16(*v695)), v688, *(uint16x4_t *)((char *)v695 + 2 * (_QWORD)v44)), v690, *(uint16x4_t *)((char *)v695 + 4 * (_QWORD)v44)), v692, *(uint16x4_t *)((char *)v695 + 6 * (_QWORD)v44)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16((uint32x4_t)vmulq_s32((int32x4_t)v677, (int32x4_t)vmovl_high_u16(*(uint16x8_t *)v695->i8)), v687,
                                     *(uint16x8_t *)&v695->i8[2 * (_QWORD)v44]),
                                   v689,
                                   *(uint16x8_t *)&v695->i8[4 * (_QWORD)v44]),
                                 v691,
                                 *(uint16x8_t *)&v695->i8[6 * (_QWORD)v44]),
                    0xFuLL);
        v695 += 2;
        v693 -= 8;
      }
      while (v693);
      if (i != v42)
        goto LABEL_451;
LABEL_452:
      v696 = a2[2];
      if (v42 < 8)
      {
        v697 = 0;
LABEL_680:
        v985 = v42 - v697;
        v986 = (_WORD *)(v45 + 2 * (v697 + v696));
        v987 = (unsigned __int16 *)v43 + v697;
        do
        {
          v988 = &v987[(unint64_t)v46 / 2 + (unint64_t)v46 / 2];
          *v986++ = ((v13->u16[1] + v13->u16[0] + v13->u16[2]) * *v987
                   + v13->u16[3] * v987[(unint64_t)v46 / 2]
                   + v13[1].u16[0] * *v988
                   + v13[1].u16[1] * v988[(unint64_t)v46 / 2]
                   + v13[1].u16[2] * v988[(unint64_t)v46 / 2 + (unint64_t)v46 / 2]) >> 15;
          ++v987;
          --v985;
        }
        while (v985);
        goto LABEL_682;
      }
      v697 = 0;
      v942 = v45 + 2 * v696;
      v943 = v45 + 2 * v42 + 2 * v696;
      v945 = v942 < (unint64_t)&v43[(_QWORD)v44] + 2 * v42 && (unint64_t)&v43[(_QWORD)v44] < v943;
      v947 = v942 < (unint64_t)v43 + 6 * (_QWORD)v44 + 2 * v42 && (unint64_t)v43 + 6 * (_QWORD)v44 < v943;
      v949 = v942 < (unint64_t)v43 + 2 * v42 + v47 && (unint64_t)v43 + v47 < v943;
      v951 = v942 < (unint64_t)v43 + 2 * v42 + v46 && (unint64_t)v43 + v46 < v943;
      v953 = v942 < (unint64_t)v43 + 2 * v42 && (unint64_t)v43 < v943;
      if ((unint64_t)v13 < v943 && v942 < (unint64_t)&v13[1] + 6)
        goto LABEL_680;
      if (v945)
        goto LABEL_680;
      if (v947)
        goto LABEL_680;
      if (v949)
        goto LABEL_680;
      if (v951)
        goto LABEL_680;
      if (v953)
        goto LABEL_680;
      v955 = (const __int16 *)v13;
      v956 = (uint16x4_t)vld1_dup_s16(v955++);
      v957 = (uint16x4_t)vld1_dup_s16(v955);
      v958 = (const __int16 *)v13 + 2;
      v959 = (uint16x4_t)vld1_dup_s16(v958);
      v960 = (int16x8_t)vaddw_u16(vaddl_u16(v957, v956), v959);
      v961 = (const __int16 *)v13 + 3;
      v962 = (uint16x4_t)vld1_dup_s16(v961);
      v963 = (int16x8_t)vmovl_u16(v962);
      v964 = (const __int16 *)&v13[1];
      v965 = (uint16x4_t)vld1_dup_s16(v964);
      v966 = (const __int16 *)&v13[1] + 1;
      v967 = (uint16x4_t)vld1_dup_s16(v966);
      v968 = (int16x8_t)vmovl_u16(v965);
      v969 = (int16x8_t)vmovl_u16(v967);
      v970 = (const __int16 *)&v13[1] + 2;
      v971 = (uint16x4_t)vld1_dup_s16(v970);
      v972 = (int16x8_t)vmovl_u16(v971);
      v973 = (uint16x8_t)vuzp1q_s16(v960, v963);
      v974 = (uint16x4_t)vmovn_s32((int32x4_t)v963);
      v697 = v42 & 0xFFFFFFF8;
      v975 = (int16x8_t *)(v45 + 2 * v696);
      v976 = (uint16x8_t)vuzp1q_s16(v960, v968);
      v977 = (uint16x4_t)vmovn_s32((int32x4_t)v968);
      v978 = (uint16x8_t)vuzp1q_s16(v960, v969);
      v979 = (uint16x4_t)vmovn_s32((int32x4_t)v969);
      v980 = (uint16x8_t)vuzp1q_s16(v960, v972);
      v981 = (uint16x4_t)vmovn_s32((int32x4_t)v972);
      v982 = v697;
      v983 = v43;
      do
      {
        v984 = (uint16x4_t *)((char *)v983 + v46 + v46);
        *v975++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v960, (int32x4_t)vmovl_u16(*v983)), v974, *(uint16x4_t *)((char *)v983 + 2 * (_QWORD)v44)), v977, *v984), v979, *(uint16x4_t *)((char *)v984 + v46)), v981, *(uint16x4_t *)((char *)v984 + 2 * (_QWORD)v44 + v46)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(
                                       (uint32x4_t)vmulq_s32((int32x4_t)v960, (int32x4_t)vmovl_high_u16(*(uint16x8_t *)v983->i8)), v973, *(uint16x8_t *)&v983->i8[2 * (_QWORD)v44]), v976, *(uint16x8_t *)v984->i8), v978, *(uint16x8_t *)&v984->i8[v46]), v980, *(uint16x8_t *)&v984->i8[2 * (_QWORD)v44 + v46]), 0xFuLL);
        v983 += 2;
        v982 -= 8;
      }
      while (v982);
      if (v697 != v42)
        goto LABEL_680;
LABEL_682:
      if (v42 < 8)
      {
        v989 = 0;
        goto LABEL_1005;
      }
      v989 = 0;
      v1359 = v45 + 4 * v696;
      v1360 = v45 + 4 * v696 + 2 * v42;
      v1361 = (char *)v43 + 10 * (_QWORD)v44;
      v1362 = (unint64_t)v43 + 10 * (_QWORD)v44 + 2 * v42;
      v1363 = &v43[(_QWORD)v44];
      v1364 = (unint64_t)&v43[(_QWORD)v44] + 2 * v42;
      v1365 = 6 * (_QWORD)v44;
      v1366 = (char *)v43 + v1365;
      v1367 = (unint64_t)v43 + 2 * v42 + v1365;
      v1368 = (char *)v43 + v47;
      v1369 = (unint64_t)v43 + 2 * v42 + v47;
      v1371 = v1359 < v1362 && (unint64_t)v1361 < v1360;
      v1373 = v1359 < v1364 && (unint64_t)v1363 < v1360;
      v1375 = v1359 < v1367 && (unint64_t)v1366 < v1360;
      v1377 = v1359 < v1369 && (unint64_t)v1368 < v1360;
      v1379 = v1359 < (unint64_t)v43 + 2 * v42 + v46 && (unint64_t)v43 + v46 < v1360;
      v1381 = v1359 < (unint64_t)v43 + 2 * v42 && (unint64_t)v43 < v1360;
      if ((unint64_t)v13 < v1360 && v1359 < (unint64_t)&v13[1] + 6)
      {
        v41 = a2;
LABEL_1005:
        v1420 = v42 - v989;
        v1421 = (_WORD *)(v45 + 2 * v989 + 4 * v696);
        v1422 = (unsigned __int16 *)v43 + v989;
        do
        {
          v1423 = &v1422[(unint64_t)v46 / 2 + (unint64_t)v46 / 2];
          *v1421++ = ((v13->u16[1] + v13->u16[0]) * *v1422
                    + v13->u16[2] * v1422[(unint64_t)v46 / 2]
                    + v13->u16[3] * *v1423
                    + v13[1].u16[0] * v1423[(unint64_t)v46 / 2]
                    + v13[1].u16[1] * v1423[(unint64_t)v46 / 2 + (unint64_t)v46 / 2]
                    + v13[1].u16[2]
                    * v1423[(unint64_t)v46 / 2
                                        + (unint64_t)v46 / 2
                                        + (unint64_t)v46 / 2]) >> 15;
          ++v1422;
          --v1420;
        }
        while (v1420);
        goto LABEL_1007;
      }
      v41 = a2;
      if (v1371)
        goto LABEL_1005;
      if (v1373)
        goto LABEL_1005;
      if (v1375)
        goto LABEL_1005;
      if (v1377)
        goto LABEL_1005;
      if (v1379)
        goto LABEL_1005;
      if (v1381)
        goto LABEL_1005;
      v1383 = (const __int16 *)v13;
      v1384 = (uint16x4_t)vld1_dup_s16(v1383++);
      v1385 = (uint16x4_t)vld1_dup_s16(v1383);
      v1386 = (int16x8_t)vaddl_u16(v1385, v1384);
      v1387 = (const __int16 *)v13 + 2;
      v1388 = (uint16x4_t)vld1_dup_s16(v1387);
      v1389 = (int16x8_t)vmovl_u16(v1388);
      v1390 = (const __int16 *)v13 + 3;
      v1391 = (uint16x4_t)vld1_dup_s16(v1390);
      v1392 = (const __int16 *)&v13[1];
      v1393 = (uint16x4_t)vld1_dup_s16(v1392);
      v1394 = (int16x8_t)vmovl_u16(v1391);
      v1395 = (int16x8_t)vmovl_u16(v1393);
      v1396 = (const __int16 *)&v13[1] + 1;
      v1397 = (uint16x4_t)vld1_dup_s16(v1396);
      v1398 = (int16x8_t)vmovl_u16(v1397);
      v1399 = (const __int16 *)&v13[1] + 2;
      v1400 = (uint16x4_t)vld1_dup_s16(v1399);
      v1401 = (int16x8_t)vmovl_u16(v1400);
      v1402 = (uint16x8_t)vuzp1q_s16(v1386, v1389);
      v1403 = (uint16x4_t)vmovn_s32((int32x4_t)v1389);
      v989 = v42 & 0xFFFFFFF8;
      v1404 = (uint16x8_t)vuzp1q_s16(v1386, v1394);
      v1405 = (int16x8_t *)(v45 + 4 * v696);
      v1406 = (uint16x4_t)vmovn_s32((int32x4_t)v1394);
      v1407 = (uint16x8_t)vuzp1q_s16(v1386, v1395);
      v1408 = (uint16x4_t)vmovn_s32((int32x4_t)v1395);
      v1409 = (uint16x8_t)vuzp1q_s16(v1386, v1398);
      v1410 = (uint16x4_t)vmovn_s32((int32x4_t)v1398);
      v1411 = (uint16x8_t)vuzp1q_s16(v1386, v1401);
      v1412 = (uint16x4_t)vmovn_s32((int32x4_t)v1401);
      v1413 = v989;
      v1414 = (uint16x8_t *)v43;
      do
      {
        v1415 = *(uint16x8_t *)((char *)v1414 + v46);
        v1416 = (uint16x8_t *)((char *)v1414 + v46 + v46);
        v1417 = vmlal_high_u16(vmlal_high_u16((uint32x4_t)vmulq_s32((int32x4_t)v1386, (int32x4_t)vmovl_high_u16(*v1414)), v1402, v1415), v1404, *v1416);
        v1418 = vmlal_u16(vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v1386, (int32x4_t)vmovl_u16(*(uint16x4_t *)v1414->i8)), v1403, *(uint16x4_t *)v1415.i8), v1406, *(uint16x4_t *)v1416->i8);
        v1419 = (uint16x4_t *)&v1416->i8[v46];
        *v1405++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v1418, v1408, *v1419), v1410, *(uint16x4_t *)((char *)v1419 + v46)), v1412, *(uint16x4_t *)((char *)v1419 + v46 + v46)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v1417, v1407, *(uint16x8_t *)v1419->i8), v1409, *(uint16x8_t *)&v1419->i8[v46]), v1411, *(uint16x8_t *)&v1419->i8[v46 + v46]), 0xFuLL);
        ++v1414;
        v1413 -= 8;
      }
      while (v1413);
      if (v989 != v42)
        goto LABEL_1005;
LABEL_1007:
      v3536 = *((int *)v4 + 3);
      if ((int)v3536 > 6)
      {
        v1424 = 0;
        v1425 = 0;
        v1426 = (v3536 - 6);
        v3576 = 2 * v42;
        v3556 = v42 & 0xFFFFFFF8;
        v1427 = 3;
        v1428 = 6;
        v3541 = v42;
        do
        {
          if ((int)v42 <= 0)
          {
            v1429 = v1425 + 1;
          }
          else
          {
            v1430 = (uint16x4_t *)*v4;
            v1431 = v4[2];
            v1432 = *v41;
            v1433 = v41[2];
            v1429 = v1425 + 1;
            v1434 = v1425 + 6;
            v1435 = 2 * (_QWORD)v1431;
            if (v42 >= 8)
            {
              v1436 = 0;
              v1437 = v1425 + 5;
              v1438 = v1425 + 4;
              v1439 = v1425 + 3;
              v1440 = v1425 + 2;
              v1441 = *v41;
              v1442 = v41[2];
              v1443 = v1432 + v1433 * (2 * v1424 + 6);
              v1444 = v1443 + v3576;
              v1445 = 2 * v1425 * (_QWORD)v1431;
              v1446 = v1435 * v1440;
              v1447 = (char *)v1430 + v1446;
              v1448 = (unint64_t)v1430 + v3576 + v1446;
              v1449 = v1435 * v1439;
              v1450 = (char *)v1430 + v1449;
              v1451 = (unint64_t)v1430 + v3576 + v1449;
              v1452 = v1435 * v1438;
              v1453 = (char *)v1430 + v1452;
              v1454 = (unint64_t)v1430 + v3576 + v1452;
              v1455 = v1435 * v1437;
              v1456 = v1434;
              v1457 = (char *)v1430 + v1455;
              v1458 = (unint64_t)v1430 + v3576 + v1455;
              v1459 = v1456;
              v1460 = (unint64_t)v1430 + v3576 + v1435 * v1456;
              v1461 = (char *)v1430 + v1435 * v1456;
              v1463 = v1443 < (unint64_t)v1430 + v3576 + v1445 && (unint64_t)v1430 + v1445 < v1444;
              v1465 = v1443 < (unint64_t)v1430 + v3576 + v1435 * v1429
                   && (unint64_t)v1430 + v1435 * v1429 < v1444;
              v1467 = v1443 < v1448 && (unint64_t)v1447 < v1444;
              v1469 = v1443 < v1451 && (unint64_t)v1450 < v1444;
              v1471 = v1443 < v1454 && (unint64_t)v1453 < v1444;
              v1473 = v1443 < v1458 && (unint64_t)v1457 < v1444;
              v1475 = v1443 < v1460 && (unint64_t)v1461 < v1444;
              if ((unint64_t)v13 >= v1444 || v1443 >= (unint64_t)&v13[1] + 6)
              {
                v41 = a2;
                v4 = v3573;
                v42 = v3541;
                v1426 = (v3536 - 6);
                v1432 = v1441;
                v1433 = v1442;
                v1434 = v1459;
                if (!v1463 && !v1465 && !v1467 && !v1469 && !v1471 && !v1473 && !v1475)
                {
                  v1477 = (const __int16 *)&v13[1] + 2;
                  v1478 = (uint16x4_t)vld1_dup_s16(v1477);
                  v1479 = (int16x8_t)vmovl_u16(v1478);
                  v1480 = (const __int16 *)&v13[1] + 1;
                  v1481 = (uint16x4_t)vld1_dup_s16(v1480);
                  v1482 = (int16x8_t)vmovl_u16(v1481);
                  v1483 = (const __int16 *)&v13[1];
                  v1484 = (uint16x4_t)vld1_dup_s16(v1483);
                  v1485 = (const __int16 *)v13 + 3;
                  v1486 = (uint16x4_t)vld1_dup_s16(v1485);
                  v1487 = (int16x8_t)vmovl_u16(v1484);
                  v1488 = (int16x8_t)vmovl_u16(v1486);
                  v1489 = (const __int16 *)v13 + 2;
                  v1490 = (uint16x4_t)vld1_dup_s16(v1489);
                  v1491 = (int16x8_t)vmovl_u16(v1490);
                  v1492 = (const __int16 *)v13;
                  v1493 = (uint16x4_t)vld1_dup_s16(v1492++);
                  v1494 = (uint16x4_t)vld1_dup_s16(v1492);
                  v1495 = (int16x8_t)vmovl_u16(v1494);
                  v1496 = (int16x8_t)vmovl_u16(v1493);
                  v1497 = (uint16x4_t *)((char *)v1430 + v1435 * v1459);
                  v1498 = (int16x8_t *)(v1441 + v1442 * v1428);
                  v1499 = v3556;
                  do
                  {
                    v1500 = (uint16x8_t *)((char *)v1497 - v1435 - v1435);
                    v1501 = *v1500;
                    v1502 = (uint16x8_t *)((char *)v1500 - v1435);
                    v1503 = *v1502;
                    v1504 = (uint16x8_t *)((char *)v1502 - v1435);
                    v1505 = *v1504;
                    v1506 = (uint16x4_t *)((char *)v1504 - v1435);
                    *v1498++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)((char *)v1497 - v1435), (uint16x4_t)vmovn_s32((int32x4_t)v1482)), *v1497, (uint16x4_t)vmovn_s32((int32x4_t)v1479)), *(uint16x4_t *)v1501.i8, (uint16x4_t)vmovn_s32((int32x4_t)v1487)), *(uint16x4_t *)v1503.i8, (uint16x4_t)vmovn_s32((int32x4_t)v1488)), *(uint16x4_t *)v1505.i8, (uint16x4_t)vmovn_s32((int32x4_t)v1491)), *v1506,
                                                  (uint16x4_t)vmovn_s32((int32x4_t)v1495)),
                                                *(uint16x4_t *)((char *)v1506 - v1435),
                                                (uint16x4_t)vmovn_s32((int32x4_t)v1496)),
                                   0xFuLL),
                                 (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)&v1497->i8[-v1435], (uint16x8_t)vuzp1q_s16(v1479, v1482)), *(uint16x8_t *)v1497->i8, (uint16x8_t)vuzp1q_s16(v1479, v1479)), v1501, (uint16x8_t)vuzp1q_s16(v1479, v1487)), v1503, (uint16x8_t)vuzp1q_s16(v1479, v1488)), v1505, (uint16x8_t)vuzp1q_s16(v1479, v1491)), *(uint16x8_t *)v1506->i8, (uint16x8_t)vuzp1q_s16(v1479, v1495)), *(uint16x8_t *)&v1506->i8[-v1435],
                                              (uint16x8_t)vuzp1q_s16(v1479, v1496)),
                                 0xFuLL);
                    v1497 += 2;
                    v1499 -= 8;
                  }
                  while (v1499);
                  v1436 = v3556;
                  if (v3556 == v3541)
                    goto LABEL_1010;
                }
              }
              else
              {
                v41 = a2;
                v4 = v3573;
                v42 = v3541;
                v1426 = (v3536 - 6);
                v1432 = v1441;
                v1433 = v1442;
                v1434 = v1459;
              }
            }
            else
            {
              v1436 = 0;
            }
            v1507 = v42 - v1436;
            v1508 = (_WORD *)(v1432 + 2 * (v1436 + v1433 * v1427));
            v1509 = (uint16x4_t *)((char *)v1430 + 2 * v1436 + v1435 * v1434);
            v1510 = -v1435;
            do
            {
              v1511 = (uint16x4_t *)((char *)v1509 + v1510 + v1510);
              v1512 = v1511->u16[0];
              v1513 = (uint16x4_t *)((char *)v1511 + v1510);
              v1514 = v1513->u16[0];
              v1515 = (uint16x4_t *)((char *)v1513 + v1510);
              *v1508++ = (v1509->u16[0] * v13[1].u16[2]
                        + *(unsigned __int16 *)((char *)v1509->u16 + v1510) * v13[1].u16[1]
                        + v1512 * v13[1].u16[0]
                        + v1514 * v13->u16[3]
                        + v1515->u16[0] * v13->u16[2]
                        + *(unsigned __int16 *)((char *)v1515->u16 + v1510) * v13->u16[1]
                        + *(unsigned __int16 *)((char *)v1515->u16 + v1510 + v1510) * v13->u16[0]) >> 15;
              v1509 = (uint16x4_t *)((char *)v1509 + 2);
              --v1507;
            }
            while (v1507);
          }
LABEL_1010:
          ++v1427;
          ++v1424;
          v1428 += 2;
          v1425 = v1429;
        }
        while (v1429 != v1426);
      }
      if ((int)v42 <= 0)
        goto LABEL_2265;
      v1516 = v3536 - 3;
      v1517 = v3536 - 1;
      v1518 = (int)v3536 - 2;
      v1519 = (int)v3536 - 3;
      v1520 = 2 * v1519;
      v1521 = 2 * v42;
      v1522 = v1519 + 3;
      v1523 = *v3573;
      v1524 = v3573[2];
      v1525 = (_QWORD)v1524 * (v3536 - 1);
      v1526 = *a2;
      v1527 = a2[2];
      v1528 = v1527 * v1519;
      if ((int)v3536 + 1 >= (int)v3536 - 3)
      {
        v3557 = a2[2];
        v3571 = v3536 + 1;
        v3529 = 2 * v1516;
        v3545 = 2 * v42;
        v2128 = 4 * (_QWORD)v1524;
        v3577 = v3536 - 1;
        if (v1522 < v1517)
        {
          v2129 = 0;
          v2130 = v1519 - 3;
          if (v1519 - 3 >= v1518)
            v2130 = (int)v3536 - 2;
          v2131 = v1518 - v2130 + 1;
          v2132 = (uint64_t)v1523->i64 + 2 * (_QWORD)v1524 * v1518;
          v2133 = (uint64_t)v1523->i64 + 2 * (_QWORD)v1524 * (v1518 - 1);
          while (1)
          {
            if (v2131 >= 2)
            {
              v2137 = 0;
              v2138 = 0;
              v2139 = 0;
              v2140 = v2131 & 0xFFFFFFFFFFFFFFFELL;
              v2141 = (unsigned __int16 *)v13 + 1;
              do
              {
                v2142 = *(v2141 - 1);
                v2143 = *v2141;
                v2141 += 2;
                v2138 += v2142 * *(unsigned __int16 *)(v2132 + v2137);
                v2139 += v2143 * *(unsigned __int16 *)(v2133 + v2137);
                v2137 -= v2128;
                v2140 -= 2;
              }
              while (v2140);
              v2135 = v2139 + v2138;
              v2136 = v1518 - (v2131 & 0xFFFFFFFFFFFFFFFELL);
              v2134 = v2131 & 0xFFFFFFFFFFFFFFFELL;
              if (v2131 == (v2131 & 0xFFFFFFFFFFFFFFFELL))
                goto LABEL_1486;
            }
            else
            {
              v2134 = 0;
              v2135 = 0;
              v2136 = (int)v3536 - 2;
            }
            v2144 = v2136 + 1;
            v2145 = (unsigned __int16 *)v1523 + v2129 + (_QWORD)v1524 * v2136;
            v2146 = (unsigned __int16 *)v13 + v2134;
            do
            {
              v2147 = *v2146++;
              v2135 += v2147 * *v2145;
              --v2144;
              v2145 -= (uint64_t)v1524;
            }
            while (v2144 >= v1519 - 2);
LABEL_1486:
            *(_WORD *)(v1526 + 2 * (v2129 + v1528)) = v2135 >> 15;
            ++v2129;
            v2132 += 2;
            v2133 += 2;
            if (v2129 == v42)
              goto LABEL_1095;
          }
        }
        v2707 = 0;
        v2708 = v1519 - 3;
        if (v1519 - 3 >= v1518)
          v2708 = (int)v3536 - 2;
        v2709 = v1518 - v2708 + 1;
        v2710 = (uint64_t)v1523->i64 + 2 * (_QWORD)v1524 * v1518;
        v2711 = (uint64_t)v1523->i64 + 2 * (_QWORD)v1524 * (v1518 - 1);
        while (1)
        {
          v2712 = (v13->u16[1] + v13->u16[0]) * v1523->u16[v2707 + v1525];
          if (v2709 >= 2)
          {
            v2715 = 0;
            v2716 = 0;
            v2717 = v2709 & 0xFFFFFFFFFFFFFFFELL;
            v2718 = (unsigned __int16 *)v13 + 3;
            do
            {
              v2719 = *(v2718 - 1);
              v2720 = *v2718;
              v2718 += 2;
              v2712 += v2719 * *(unsigned __int16 *)(v2710 + v2715);
              v2716 += v2720 * *(unsigned __int16 *)(v2711 + v2715);
              v2715 -= v2128;
              v2717 -= 2;
            }
            while (v2717);
            v2712 += v2716;
            v2713 = v1518 - (v2709 & 0xFFFFFFFFFFFFFFFELL);
            v2714 = (v2709 & 0xFFFFFFFFFFFFFFFELL) + 2;
            if (v2709 == (v2709 & 0xFFFFFFFFFFFFFFFELL))
              goto LABEL_1886;
          }
          else
          {
            v2713 = (int)v3536 - 2;
            v2714 = 2;
          }
          v2721 = v2713 + 1;
          v2722 = (unsigned __int16 *)v1523 + v2707 + (_QWORD)v1524 * v2713;
          v2723 = (unsigned __int16 *)v13 + v2714;
          do
          {
            v2724 = *v2723++;
            v2712 += v2724 * *v2722;
            --v2721;
            v2722 -= (uint64_t)v1524;
          }
          while (v2721 >= v1519 - 2);
LABEL_1886:
          *(_WORD *)(v1526 + 2 * (v2707 + v1528)) = v2712 >> 15;
          ++v2707;
          v2710 += 2;
          v2711 += 2;
          if (v2707 == v42)
            goto LABEL_1095;
        }
      }
      if (v1522 < v1517)
      {
LABEL_2264:
        bzero((void *)(v1526 + v1527 * v1520), v1521);
        goto LABEL_2265;
      }
      v3557 = a2[2];
      v3571 = v3536 + 1;
      v3545 = 2 * v42;
      v3577 = v3536 - 1;
      v3529 = 2 * v1516;
      v1529 = 0;
      if (v42 < 0x10)
        goto LABEL_1093;
      v1530 = v1526 + 2 * v1528;
      v1531 = v1526 + v1521 + 2 * v1528;
      v1532 = v1530 >= (unint64_t)v1523 + 2 * v1525 + v1521 || (unint64_t)v1523 + 2 * v1525 >= v1531;
      v1533 = !v1532;
      if ((unint64_t)v13 < v1531 && v1530 < (unint64_t)v13 + 4)
        goto LABEL_1093;
      if (v1533)
        goto LABEL_1093;
      v1529 = v42 & 0x7FFFFFF0;
      v1535 = (const __int16 *)v13;
      v1536 = (uint16x4_t)vld1_dup_s16(v1535++);
      v1537 = (uint16x4_t)vld1_dup_s16(v1535);
      v1538 = (int32x4_t)vaddl_u16(v1537, v1536);
      v1539 = (uint16x4_t *)((char *)&v1523[1] + 2 * v1525);
      v1540 = (int16x8_t *)(v1526 + 2 * v1528 + 16);
      v1541 = v42 & 0xFFFFFFF0;
      do
      {
        v1542 = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v1538, (int32x4_t)vmovl_u16(*v1539)), 0xFuLL), vmulq_s32(v1538, (int32x4_t)vmovl_high_u16(*(uint16x8_t *)v1539->i8)), 0xFuLL);
        v1540[-1] = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v1538, (int32x4_t)vmovl_u16(v1539[-2])), 0xFuLL), vmulq_s32(v1538, (int32x4_t)vmovl_high_u16(*(uint16x8_t *)v1539[-2].i8)), 0xFuLL);
        *v1540 = v1542;
        v1539 += 4;
        v1540 += 2;
        v1541 -= 16;
      }
      while (v1541);
      if (v42 != v1529)
      {
LABEL_1093:
        v1543 = v42 - v1529;
        v1544 = (_WORD *)(v1526 + 2 * (v1529 + v1528));
        v1545 = (unsigned __int16 *)v1523 + v1529 + v1525;
        do
        {
          v1546 = *v1545++;
          *v1544++ = ((v13->u16[1] + v13->u16[0]) * v1546) >> 15;
          --v1543;
        }
        while (v1543);
      }
LABEL_1095:
      v1547 = v1519 + 1;
      if (v1519 + 1 < v3536)
      {
        v1548 = v1519 + 4;
        if ((int)v3536 >= -2147483645)
        {
          v1549 = v3577;
          v8 = v1548 < v3577;
          v1527 = v3557;
          v2725 = v1519 - 2;
          if (v8)
          {
            if (v2725 >= v1518)
              v2725 = (int)v3536 - 2;
            v2726 = v1518 - v2725 + 1;
            v2727 = (unsigned __int16 *)v1523 + (_QWORD)v1524 * (v1518 - 3);
            v2728 = (unsigned __int16 *)v1523 + (_QWORD)v1524 * (v1518 - 2);
            v2729 = (unsigned __int16 *)v1523 + (_QWORD)v1524 * (v1518 - 1);
            v2730 = (_WORD *)(v1526 + 2 * v3557 * v1547);
            v2731 = (unsigned __int16 *)v1523 + (_QWORD)v1524 * v1518;
            v2732 = v42;
            do
            {
              v2733 = *v2731++;
              v2734 = v13->u16[0] * v2733;
              if (v2726 != 1)
              {
                v2734 += v13->u16[1] * *v2729;
                if (v2726 != 2)
                {
                  v2734 += v13->u16[2] * *v2728;
                  if (v2726 != 3)
                    v2734 += v13->u16[3] * *v2727;
                }
              }
              *v2730++ = v2734 >> 15;
              ++v2727;
              ++v2728;
              ++v2729;
              --v2732;
            }
            while (v2732);
          }
          else
          {
            if (v2725 >= v1518)
              v2725 = (int)v3536 - 2;
            v3267 = v1518 - v2725 + 4;
            v3268 = (unsigned __int16 *)v1523 + (_QWORD)v1524 * (v1518 - 3);
            v3269 = (unsigned __int16 *)v1523 + (_QWORD)v1524 * (v1518 - 2);
            v3270 = (unsigned __int16 *)v1523 + (_QWORD)v1524 * (v1518 - 1);
            v3271 = (_WORD *)(v1526 + 2 * v3557 * v1547);
            v3272 = (unsigned __int16 *)v1523 + (_QWORD)v1524 * v1518;
            v3273 = (unsigned __int16 *)v1523 + v1525;
            v3274 = v42;
            do
            {
              v3275 = *v3273++;
              v3276 = (v13->u16[1] + v13->u16[0] + v13->u16[2]) * v3275;
              v3277 = *v3272++;
              v3278 = v3276 + v13->u16[3] * v3277;
              if (v3267 != 4)
              {
                v3278 += v13[1].u16[0] * *v3270;
                if (v3267 != 5)
                {
                  v3278 += v13[1].u16[1] * *v3269;
                  if (v3267 != 6)
                    v3278 += v13[1].u16[2] * *v3268;
                }
              }
              *v3271++ = v3278 >> 15;
              ++v3268;
              ++v3269;
              ++v3270;
              --v3274;
            }
            while (v3274);
          }
          goto LABEL_2261;
        }
        v1549 = v3577;
        v1527 = v3557;
        if (v1548 >= v3577)
        {
          if (v42 >= 8)
          {
            v3266 = 0;
            v3279 = 2 * v3557 * v1547;
            v3280 = v1526 + v3279;
            v3281 = v1526 + v3545 + v3279;
            v3283 = v1526 + v3279 < (unint64_t)v1523 + 2 * v1525 + v3545
                 && (unint64_t)v1523 + 2 * v1525 < v3281;
            if (((unint64_t)v13 >= v3281 || v3280 >= (unint64_t)v13 + 6) && !v3283)
            {
              v3285 = (const __int16 *)v13;
              v3286 = (uint16x4_t)vld1_dup_s16(v3285++);
              v3266 = v42 & 0xFFFFFFF8;
              v3287 = (uint16x4_t)vld1_dup_s16(v3285);
              v3288 = vaddl_u16(v3287, v3286);
              v3289 = (const __int16 *)v13 + 2;
              v3290 = (uint16x4_t)vld1_dup_s16(v3289);
              v3291 = (int32x4_t)vaddw_u16(v3288, v3290);
              v3292 = (uint16x8_t *)((char *)v1523 + 2 * v1525);
              v3293 = (int16x8_t *)(v1526 + 2 * v3557 * v1547);
              v3294 = v3266;
              do
              {
                v3295 = *v3292++;
                *v3293++ = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v3291, (int32x4_t)vmovl_u16(*(uint16x4_t *)v3295.i8)), 0xFuLL), vmulq_s32(v3291, (int32x4_t)vmovl_high_u16(v3295)), 0xFuLL);
                v3294 -= 8;
              }
              while (v3294);
              if (v42 == v3266)
                goto LABEL_2261;
            }
          }
          else
          {
            v3266 = 0;
          }
          v3296 = v42 - v3266;
          v3297 = (_WORD *)(v1526 + 2 * v3557 * v1547 + 2 * v3266);
          v3298 = (unsigned __int16 *)v1523 + v3266 + v1525;
          do
          {
            v3299 = *v3298++;
            *v3297++ = ((v13->u16[1] + v13->u16[0] + v13->u16[2]) * v3299) >> 15;
            --v3296;
          }
          while (v3296);
        }
        else
        {
          bzero((void *)(v1526 + v3557 * (v3529 + 2)), v3545);
          v1527 = v3557;
          v1549 = v3577;
        }
LABEL_2261:
        v3300 = v1519 + 5;
        v3301 = v1527 * (v1519 + 2);
        if (v1519 + 2 > v3571)
        {
          if (v3300 < v1549)
          {
            v1520 = v3529 + 4;
            v1521 = v3545;
            goto LABEL_2264;
          }
          v3426 = 0;
          if (v42 < 8)
            goto LABEL_2359;
          v3427 = v1526 + 2 * v3301;
          v3428 = v1526 + v3545 + 2 * v3301;
          v3429 = v3427 >= (unint64_t)v1523 + 2 * v1525 + v3545 || (unint64_t)v1523 + 2 * v1525 >= v3428;
          v3430 = !v3429;
          if ((unint64_t)v13 < v3428 && v3427 < (unint64_t)&v13[1])
            goto LABEL_2359;
          if (v3430)
            goto LABEL_2359;
          v3426 = v42 & 0x7FFFFFF8;
          v3432 = (const __int16 *)v13;
          v3433 = (uint16x4_t)vld1_dup_s16(v3432++);
          v3434 = (uint16x4_t)vld1_dup_s16(v3432);
          v3435 = vaddl_u16(v3434, v3433);
          v3436 = (const __int16 *)v13 + 2;
          v3437 = (uint16x4_t)vld1_dup_s16(v3436);
          v3438 = vaddw_u16(v3435, v3437);
          v3439 = (const __int16 *)v13 + 3;
          v3440 = (uint16x4_t)vld1_dup_s16(v3439);
          v3441 = (int32x4_t)vaddw_u16(v3438, v3440);
          v3442 = (uint16x8_t *)((char *)v1523 + 2 * v1525);
          v3443 = (int16x8_t *)(v1526 + 2 * v3301);
          v3444 = v42 & 0xFFFFFFF8;
          do
          {
            v3445 = *v3442++;
            *v3443++ = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32(v3441, (int32x4_t)vmovl_u16(*(uint16x4_t *)v3445.i8)), 0xFuLL), vmulq_s32(v3441, (int32x4_t)vmovl_high_u16(v3445)), 0xFuLL);
            v3444 -= 8;
          }
          while (v3444);
          if (v42 != v3426)
          {
LABEL_2359:
            v3446 = v42 - v3426;
            v3447 = (_WORD *)(v1526 + 2 * v3301 + 2 * v3426);
            v3448 = (unsigned __int16 *)v1523 + v3426 + v1525;
            do
            {
              v3449 = *v3448++;
              *v3447++ = (vaddvq_s32((int32x4_t)vmovl_u16(*v13)) * v3449) >> 15;
              --v3446;
            }
            while (v3446);
          }
          goto LABEL_2265;
        }
        v3406 = v1519 - 1;
        if (v1519 - 1 >= v1518)
          v3406 = (int)v3536 - 2;
        v3407 = v1518 - v3406 + 1;
        v3408 = v3407 & 0xFFFFFFFFFFFFFFFELL;
        if (v3300 < v1549)
        {
          v3409 = 0;
          v3410 = (uint64_t)v1523->i64 + 2 * (_QWORD)v1524 * v1518;
          v3411 = (uint64_t)v1523->i64 + 2 * (_QWORD)v1524 * (v1518 - 1);
          while (1)
          {
            if (v3407 >= 2)
            {
              v3415 = 0;
              v3416 = 0;
              v3417 = 0;
              v3418 = v3407 & 0xFFFFFFFFFFFFFFFELL;
              v3419 = (unsigned __int16 *)v13 + 1;
              do
              {
                v3420 = *(v3419 - 1);
                v3421 = *v3419;
                v3419 += 2;
                v3416 += v3420 * *(unsigned __int16 *)(v3410 + v3415);
                v3417 += v3421 * *(unsigned __int16 *)(v3411 + v3415);
                v3415 -= 4 * (_QWORD)v1524;
                v3418 -= 2;
              }
              while (v3418);
              v3413 = v3417 + v3416;
              v3414 = v1518 - (v3407 & 0xFFFFFFFFFFFFFFFELL);
              v3412 = v3407 & 0xFFFFFFFFFFFFFFFELL;
              if (v3407 == v3408)
                goto LABEL_2334;
            }
            else
            {
              v3412 = 0;
              v3413 = 0;
              v3414 = (int)v3536 - 2;
            }
            v3422 = v3414 + 1;
            v3423 = (unsigned __int16 *)v1523 + v3409 + (_QWORD)v1524 * v3414;
            v3424 = (unsigned __int16 *)v13 + v3412;
            do
            {
              v3425 = *v3424++;
              v3413 += v3425 * *v3423;
              --v3422;
              v3423 -= (uint64_t)v1524;
            }
            while (v3422 >= v1519);
LABEL_2334:
            *(_WORD *)(v1526 + 2 * (v3409 + v3301)) = v3413 >> 15;
            ++v3409;
            v3410 += 2;
            v3411 += 2;
            if (v3409 == v42)
              goto LABEL_2265;
          }
        }
        v3450 = 0;
        v3451 = (uint64_t)v1523->i64 + 2 * (_QWORD)v1524 * v1518;
        v3452 = (uint64_t)v1523->i64 + 2 * (_QWORD)v1524 * (v1518 - 1);
        do
        {
          v3453 = vaddvq_s32((int32x4_t)vmovl_u16(*v13)) * v1523->u16[v3450 + v1525];
          if (v3407 >= 2)
          {
            v3456 = 0;
            v3457 = 0;
            v3458 = v3407 & 0xFFFFFFFFFFFFFFFELL;
            v3459 = (unsigned __int16 *)&v13[1] + 1;
            do
            {
              v3460 = *(v3459 - 1);
              v3461 = *v3459;
              v3459 += 2;
              v3453 += v3460 * *(unsigned __int16 *)(v3451 + v3456);
              v3457 += v3461 * *(unsigned __int16 *)(v3452 + v3456);
              v3456 -= 4 * (_QWORD)v1524;
              v3458 -= 2;
            }
            while (v3458);
            v3453 += v3457;
            v3454 = v1518 - (v3407 & 0xFFFFFFFFFFFFFFFELL);
            v3455 = v3408 + 4;
            if (v3407 == v3408)
              goto LABEL_2363;
          }
          else
          {
            v3454 = (int)v3536 - 2;
            v3455 = 4;
          }
          v3462 = v3454 + 1;
          v3463 = (unsigned __int16 *)v1523 + v3450 + (_QWORD)v1524 * v3454;
          v3464 = (unsigned __int16 *)v13 + v3455;
          do
          {
            v3465 = *v3464++;
            v3453 += v3465 * *v3463;
            --v3462;
            v3463 -= (uint64_t)v1524;
          }
          while (v3462 >= v1519);
LABEL_2363:
          *(_WORD *)(v1526 + 2 * (v3450 + v3301)) = v3453 >> 15;
          ++v3450;
          v3451 += 2;
          v3452 += 2;
        }
        while (v3450 != v42);
      }
LABEL_2265:
      v541 = v3581;
      if ((int)v3536 >= 1)
      {
        v3302 = 0;
        v3303 = 0;
        v3304 = (unint64_t)(v3581 + 3);
        v3305 = v13 + 2;
        do
        {
          v3306 = *a2;
          v3307 = a2[2];
          v3308 = v3307 * v3303;
          v3309 = (unsigned __int16 *)(*a2 + 2 * v3307 * v3303);
          *v541 = ((v13->u16[1] + v13->u16[0] + v13->u16[2] + v13->u16[3]) * *v3309
                 + v3309[1] * v13[1].u16[0]
                 + v3309[2] * v13[1].u16[1]
                 + v3309[3] * v13[1].u16[2]) >> 15;
          v541[1] = ((v13->u16[1] + v13->u16[0] + v13->u16[2]) * *v3309
                   + v3309[1] * v13->u16[3]
                   + v3309[2] * v13[1].u16[0]
                   + v3309[3] * v13[1].u16[1]
                   + v3309[4] * v13[1].u16[2]) >> 15;
          v541[2] = ((v13->u16[1] + v13->u16[0]) * *v3309
                   + v3309[1] * v13->u16[2]
                   + v3309[2] * v13->u16[3]
                   + v3309[3] * v13[1].u16[0]
                   + v3309[4] * v13[1].u16[1]
                   + v3309[5] * v13[1].u16[2]) >> 15;
          v3310 = *((int *)v3573 + 2);
          if ((int)v3310 > 6)
          {
            v3311 = (v3310 - 6);
            if (v3311 < 8)
            {
              v3312 = 0;
              v3313 = 3;
LABEL_2287:
              v3342 = &v3581[v3313];
              v3343 = (unsigned __int16 *)(v3306 + 2 * (v3312 + v3307 * v3303) + 12);
              v3344 = v3311 - v3312;
              do
              {
                v3345 = (int32x4_t)vmull_u16(*(uint16x4_t *)(v3343 - 6), *v13);
                v3346 = *(v3343 - 2);
                v3347 = *(v3343 - 1);
                v3348 = *v3343++;
                *v3342++ = (vaddvq_s32(v3345)
                          + v3346 * v13[1].u16[0]
                          + v3348 * v13[1].u16[2]
                          + v3347 * v13[1].u16[1]) >> 15;
                --v3344;
              }
              while (v3344);
              goto LABEL_2289;
            }
            v3312 = 0;
            v3314 = v3304 + 2 * v3311;
            v3315 = v3307 * 2 * v3303;
            v3317 = v3304 < v3306 + 2 * v3311 + v3315 + 12 && v3306 + v3315 < v3314;
            v3313 = 3;
            if ((unint64_t)v13 < v3314 && v3304 < (unint64_t)&v13[1] + 6)
              goto LABEL_2287;
            if (v3317)
              goto LABEL_2287;
            v3319 = (const __int16 *)v13;
            v3320 = (uint16x4_t)vld1_dup_s16(v3319++);
            v3312 = v3311 & 0xFFFFFFF8;
            v3313 = v3312 | 3;
            v3321 = (int16x8_t)vmovl_u16(v3320);
            v3322 = (uint16x4_t)vld1_dup_s16(v3319);
            v3323 = (int16x8_t)vmovl_u16(v3322);
            v3324 = (const __int16 *)v13 + 2;
            v3325 = (uint16x4_t)vld1_dup_s16(v3324);
            v3326 = (const __int16 *)v13 + 3;
            v3327 = (uint16x4_t)vld1_dup_s16(v3326);
            v3328 = (int16x8_t)vmovl_u16(v3325);
            v3329 = (int16x8_t)vmovl_u16(v3327);
            v3330 = (const __int16 *)&v13[1];
            v3331 = (uint16x4_t)vld1_dup_s16(v3330);
            v3332 = (int16x8_t)vmovl_u16(v3331);
            v3333 = (const __int16 *)&v13[1] + 1;
            v3334 = (uint16x4_t)vld1_dup_s16(v3333);
            v3335 = (const __int16 *)&v13[1] + 2;
            v3336 = (uint16x4_t)vld1_dup_s16(v3335);
            v3337 = (int16x8_t)vmovl_u16(v3334);
            v3338 = (int16x8_t)vmovl_u16(v3336);
            v3339 = v3306 + v3307 * v3302 + 6;
            v3340 = (int16x8_t *)(v3581 + 3);
            v3341 = v3312;
            do
            {
              *v3340++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)(v3339 - 4), (uint16x4_t)vmovn_s32((int32x4_t)v3323)), *(uint16x4_t *)(v3339 - 6), (uint16x4_t)vmovn_s32((int32x4_t)v3321)), *(uint16x4_t *)(v3339 - 2), (uint16x4_t)vmovn_s32((int32x4_t)v3328)), *(uint16x4_t *)v3339, (uint16x4_t)vmovn_s32((int32x4_t)v3329)), *(uint16x4_t *)(v3339 + 2), (uint16x4_t)vmovn_s32((int32x4_t)v3332)), *(uint16x4_t *)(v3339 + 4),
                                            (uint16x4_t)vmovn_s32((int32x4_t)v3337)),
                                          *(uint16x4_t *)(v3339 + 6),
                                          (uint16x4_t)vmovn_s32((int32x4_t)v3338)),
                             0xFuLL),
                           (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmull_high_u16(*(uint16x8_t *)(v3339 - 4), (uint16x8_t)vuzp1q_s16(v3321, v3323)), *(uint16x8_t *)(v3339 - 6), (uint16x8_t)vuzp1q_s16(v3321, v3321)), *(uint16x8_t *)(v3339 - 2), (uint16x8_t)vuzp1q_s16(v3321, v3328)), *(uint16x8_t *)v3339, (uint16x8_t)vuzp1q_s16(v3321, v3329)), *(uint16x8_t *)(v3339 + 2), (uint16x8_t)vuzp1q_s16(v3321, v3332)), *(uint16x8_t *)(v3339 + 4), (uint16x8_t)vuzp1q_s16(v3321, v3337)), *(uint16x8_t *)(v3339 + 6),
                                        (uint16x8_t)vuzp1q_s16(v3321, v3338)),
                           0xFuLL);
              v3339 += 16;
              v3341 -= 8;
            }
            while (v3341);
            if (v3312 != v3311)
              goto LABEL_2287;
          }
LABEL_2289:
          v3349 = v3310 - 3;
          v3350 = v3310 - 1;
          v3351 = (int)v3310 - 3;
          if (v3351 + 3 >= v3310 - 1)
          {
            v3353 = v13->u16[1] + v13->u16[0];
            v3352 = 2;
          }
          else
          {
            v3352 = 0;
            v3353 = 0;
          }
          v3354 = v3308 + v3350;
          v3355 = v3310 + 1;
          v3356 = (int)v3310 - 2;
          v3357 = v3353 * *(unsigned __int16 *)(v3306 + 2 * (v3308 + v3350));
          if ((int)v3310 + 1 >= v3349)
          {
            v3358 = v3349 - 3;
            if (v3351 - 3 >= v3356)
              v3358 = (int)v3310 - 2;
            v3359 = v3356 - v3358 + 1;
            if (v3359 < 0x10)
            {
              v3360 = (int)v3310 - 2;
              v3361 = v3352;
LABEL_2300:
              v3374 = (unsigned __int16 *)v13 + v3361;
              do
              {
                v3375 = *v3374++;
                v3357 += v3375 * *(unsigned __int16 *)(v3306 + v3307 * v3302 + 2 * v3360);
                v8 = v3360-- < v3351 - 2;
              }
              while (!v8);
              goto LABEL_2303;
            }
            v3360 = v3356 - (v3359 & 0xFFFFFFFFFFFFFFF0);
            v3361 = v3352 | v3359 & 0xFFFFFFFFFFFFFFF0;
            v3362 = 0uLL;
            v3363 = (int32x4_t)v3357;
            v3364 = (int16x8_t *)(v3306 + 2 * (v3356 + v3307 * v3303) - 14);
            v3365 = (uint16x8_t *)((char *)v3305 + 2 * v3352);
            v3366 = v3359 & 0xFFFFFFFFFFFFFFF0;
            v3367 = 0uLL;
            v3368 = 0uLL;
            do
            {
              v3369 = (int8x16_t)vrev64q_s16(*v3364);
              v3370 = (uint16x8_t)vextq_s8(v3369, v3369, 8uLL);
              v3371 = (int8x16_t)vrev64q_s16(v3364[-1]);
              v3372 = (uint16x8_t)vextq_s8(v3371, v3371, 8uLL);
              v3373 = v3365[-1];
              v3362 = (int32x4_t)vmlal_high_u16((uint32x4_t)v3362, v3373, v3370);
              v3363 = (int32x4_t)vmlal_u16((uint32x4_t)v3363, *(uint16x4_t *)v3373.i8, *(uint16x4_t *)v3370.i8);
              v3368 = (int32x4_t)vmlal_high_u16((uint32x4_t)v3368, *v3365, v3372);
              v3367 = (int32x4_t)vmlal_u16((uint32x4_t)v3367, *(uint16x4_t *)v3365->i8, *(uint16x4_t *)v3372.i8);
              v3364 -= 2;
              v3365 += 2;
              v3366 -= 16;
            }
            while (v3366);
            v3357 = vaddvq_s32(vaddq_s32(vaddq_s32(v3367, v3363), vaddq_s32(v3368, v3362)));
            if (v3359 != (v3359 & 0xFFFFFFFFFFFFFFF0))
              goto LABEL_2300;
          }
LABEL_2303:
          v541 = v3581;
          v3581[v3351] = v3357 >> 15;
          if (v3351 + 1 >= v3310)
            goto LABEL_2268;
          if (v3351 + 4 >= v3350)
          {
            v3376 = 3;
            v3377 = (v13->u16[1] + v13->u16[0] + v13->u16[2]) * *(unsigned __int16 *)(v3306 + 2 * v3354);
            if ((int)v3310 < -2147483645)
              goto LABEL_2314;
          }
          else
          {
            v3376 = 0;
            v3377 = 0;
            if ((int)v3310 < -2147483645)
              goto LABEL_2314;
          }
          v3378 = v3351 - 2;
          v3379 = v3376 + 1;
          if (v3351 - 2 >= v3356)
            v3378 = (int)v3310 - 2;
          v3380 = v3376 + 1 + v3356 - v3378;
          v3377 += v13->u16[v3376] * *(unsigned __int16 *)(v3306 + 2 * (v3308 + v3356));
          if (v3379 != v3380)
          {
            v3381 = v3306 + 2 * (v3356 + v3308);
            v3382 = v3376 + 2;
            v3377 += v13->u16[v3379] * *(unsigned __int16 *)(v3381 - 2);
            if (v3376 + 2 != v3380)
            {
              v3383 = v3376 + 3;
              v3377 += v13->u16[v3382] * *(unsigned __int16 *)(v3381 - 4);
              if (v3383 != v3380)
                v3377 += v13->u16[v3383] * *(unsigned __int16 *)(v3306 + 2 * (v3356 + v3308) - 6);
            }
          }
LABEL_2314:
          v3581[v3351 + 1] = v3377 >> 15;
          if (v3351 + 5 >= v3350)
          {
            v3384 = 1;
            v3385 = v3351 + 2;
            v3386 = vaddvq_s32((int32x4_t)vmovl_u16(*v13)) * *(unsigned __int16 *)(v3306 + 2 * v3354);
            if (v3351 + 2 > v3355)
              goto LABEL_2267;
          }
          else
          {
            v3384 = 0;
            v3385 = v3351 + 2;
            v3386 = 0;
            if (v3351 + 2 > v3355)
              goto LABEL_2267;
          }
          v3387 = v3351 - 1;
          if (v3351 - 1 >= v3356)
            v3387 = (int)v3310 - 2;
          v3388 = v3356 - v3387 + 1;
          if (v3388 >= 0x10)
          {
            v3389 = v3356 - (v3388 & 0xFFFFFFFFFFFFFFF0);
            v3390 = (v3384 * 4) | v3388 & 0xFFFFFFFFFFFFFFF0;
            v3391 = 0uLL;
            v3392 = (int32x4_t)v3386;
            v3393 = (int16x8_t *)(v3306 + 2 * (v3356 + v3307 * v3303) - 14);
            v3394 = (uint16x8_t *)&v3305[v3384];
            v3395 = v3388 & 0xFFFFFFFFFFFFFFF0;
            v3396 = 0uLL;
            v3397 = 0uLL;
            do
            {
              v3398 = (int8x16_t)vrev64q_s16(*v3393);
              v3399 = (uint16x8_t)vextq_s8(v3398, v3398, 8uLL);
              v3400 = (int8x16_t)vrev64q_s16(v3393[-1]);
              v3401 = (uint16x8_t)vextq_s8(v3400, v3400, 8uLL);
              v3402 = v3394[-1];
              v3391 = (int32x4_t)vmlal_high_u16((uint32x4_t)v3391, v3402, v3399);
              v3392 = (int32x4_t)vmlal_u16((uint32x4_t)v3392, *(uint16x4_t *)v3402.i8, *(uint16x4_t *)v3399.i8);
              v3397 = (int32x4_t)vmlal_high_u16((uint32x4_t)v3397, *v3394, v3401);
              v3396 = (int32x4_t)vmlal_u16((uint32x4_t)v3396, *(uint16x4_t *)v3394->i8, *(uint16x4_t *)v3401.i8);
              v3393 -= 2;
              v3394 += 2;
              v3395 -= 16;
            }
            while (v3395);
            v3386 = vaddvq_s32(vaddq_s32(vaddq_s32(v3396, v3392), vaddq_s32(v3397, v3391)));
            if (v3388 == (v3388 & 0xFFFFFFFFFFFFFFF0))
              goto LABEL_2267;
          }
          else
          {
            v3389 = (int)v3310 - 2;
            v3390 = v3384 * 4;
          }
          v3403 = v3306 + v3307 * v3302;
          v3404 = (unsigned __int16 *)v13 + v3390;
          do
          {
            v3405 = *v3404++;
            v3386 += v3405 * *(unsigned __int16 *)(v3403 + 2 * v3389);
            v8 = v3389-- < v3351;
          }
          while (!v8);
LABEL_2267:
          v541 = v3581;
          v3581[v3385] = v3386 >> 15;
LABEL_2268:
          memcpy(v3309, v541, 2 * v3310);
          ++v3303;
          v3302 += 2;
        }
        while (v3303 < *((int *)v3573 + 3));
      }
LABEL_2329:
      free(v541);
      free(v13);
      return;
    case 4:
      v116 = *((unsigned int *)v4 + 2);
      v3566 = v116;
      if ((int)v116 <= 0)
        goto LABEL_1561;
      v117 = (uint16x4_t *)*v4;
      v118 = (uint64_t)v4[2];
      v119 = *a2;
      v120 = 2 * v118;
      v121 = 4 * v118;
      if (v116 < 8)
      {
        v122 = 0;
LABEL_497:
        v747 = v116 - v122;
        v748 = 2 * v122;
        v749 = (_WORD *)(v119 + 2 * v122);
        v750 = (uint16x4_t *)((char *)v117 + v748);
        do
        {
          v751 = (unsigned __int16 *)((char *)v750 + v120 + v120);
          *v749++ = ((vaddvq_s32((int32x4_t)vmovl_u16(*v13)) + v13[1].u16[0]) * v750->u16[0]
                   + v13[1].u16[1] * v750->u16[(unint64_t)v120 / 2]
                   + v13[1].u16[2] * *v751
                   + v13[1].u16[3] * v751[(unint64_t)v120 / 2]
                   + v13[2].u16[0] * v751[(unint64_t)v120 / 2 + (unint64_t)v120 / 2]) >> 15;
          v750 = (uint16x4_t *)((char *)v750 + 2);
          --v747;
        }
        while (v747);
        goto LABEL_499;
      }
      v122 = 0;
      v698 = v119 + 2 * v116;
      v699 = (unint64_t)v117 + 2 * v116;
      v701 = v119 < (unint64_t)&v117[v118] + 2 * v116 && (unint64_t)&v117[v118] < v698;
      v703 = v119 < v699 + 6 * v118 && (unint64_t)v117 + 6 * v118 < v698;
      v705 = v119 < (unint64_t)v117 + 2 * v116 + v121 && (unint64_t)v117 + v121 < v698;
      v707 = v119 < (unint64_t)v117 + 2 * v116 + v120 && (unint64_t)v117 + v120 < v698;
      v709 = v119 < v699 && (unint64_t)v117 < v698;
      if ((unint64_t)v13 < v698 && v119 < (unint64_t)&v13[2] + 2)
        goto LABEL_497;
      if (v701)
        goto LABEL_497;
      if (v703)
        goto LABEL_497;
      if (v705)
        goto LABEL_497;
      if (v707)
        goto LABEL_497;
      if (v709)
        goto LABEL_497;
      v711 = (const __int16 *)v13;
      v712 = (uint16x4_t)vld1_dup_s16(v711++);
      v713 = (uint16x4_t)vld1_dup_s16(v711);
      v714 = vaddl_u16(v713, v712);
      v715 = (const __int16 *)v13 + 2;
      v716 = (uint16x4_t)vld1_dup_s16(v715);
      v717 = vaddw_u16(v714, v716);
      v718 = (const __int16 *)v13 + 3;
      v719 = (uint16x4_t)vld1_dup_s16(v718);
      v720 = (const __int16 *)&v13[1];
      v721 = (uint16x4_t)vld1_dup_s16(v720);
      v722 = (int16x8_t)vaddw_u16(vaddw_u16(v717, v719), v721);
      v723 = (const __int16 *)&v13[1] + 1;
      v724 = (uint16x4_t)vld1_dup_s16(v723);
      v725 = (int16x8_t)vmovl_u16(v724);
      v726 = (const __int16 *)&v13[1] + 2;
      v727 = (uint16x4_t)vld1_dup_s16(v726);
      v728 = (const __int16 *)&v13[1] + 3;
      v729 = (uint16x4_t)vld1_dup_s16(v728);
      v730 = (int16x8_t)vmovl_u16(v727);
      v731 = (int16x8_t)vmovl_u16(v729);
      v732 = (const __int16 *)&v13[2];
      v733 = (uint16x4_t)vld1_dup_s16(v732);
      v734 = (int16x8_t)vmovl_u16(v733);
      v735 = (uint16x8_t)vuzp1q_s16(v722, v725);
      v736 = (uint16x4_t)vmovn_s32((int32x4_t)v725);
      v122 = v116 & 0xFFFFFFF8;
      v737 = (uint16x8_t)vuzp1q_s16(v722, v730);
      v738 = (uint16x4_t)vmovn_s32((int32x4_t)v730);
      v739 = (uint16x8_t)vuzp1q_s16(v722, v731);
      v740 = (uint16x4_t)vmovn_s32((int32x4_t)v731);
      v741 = (uint16x8_t)vuzp1q_s16(v722, v734);
      v742 = (uint16x4_t)vmovn_s32((int32x4_t)v734);
      v743 = v122;
      v744 = (int16x8_t *)*a2;
      v745 = (uint16x4_t *)*v4;
      do
      {
        v746 = (uint16x4_t *)((char *)v745 + v120 + v120);
        *v744++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v722, (int32x4_t)vmovl_u16(*v745)), v736, *(uint16x4_t *)((char *)v745 + 2 * v118)), v738, *v746), v740, *(uint16x4_t *)((char *)v746 + v120)), v742, *(uint16x4_t *)((char *)v746 + 2 * v118 + v120)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(
                                       (uint32x4_t)vmulq_s32((int32x4_t)v722, (int32x4_t)vmovl_high_u16(*(uint16x8_t *)v745->i8)), v735, *(uint16x8_t *)&v745->i8[2 * v118]), v737, *(uint16x8_t *)v746->i8), v739, *(uint16x8_t *)&v746->i8[v120]), v741, *(uint16x8_t *)&v746->i8[2 * v118 + v120]), 0xFuLL);
        v745 += 2;
        v743 -= 8;
      }
      while (v743);
      if (v122 != v116)
        goto LABEL_497;
LABEL_499:
      v752 = a2[2];
      if (v116 >= 8)
      {
        v753 = 0;
        v990 = v119 + 2 * v752;
        v991 = 2 * v116;
        v992 = v119 + 2 * v116 + 2 * v752;
        v993 = (unint64_t)v117 + 10 * v118 + 2 * v116;
        v994 = (unint64_t)&v117[v118] + 2 * v116;
        v995 = (unint64_t)v117 + 6 * v118 + 2 * v116;
        v996 = (unint64_t)v117 + 2 * v116 + v121;
        v997 = (unint64_t)v117 + v120 + v991;
        v998 = (unint64_t)v117 + v991;
        v1000 = v990 < v993 && (unint64_t)v117 + 10 * v118 < v992;
        v1002 = v990 < v994 && (unint64_t)&v117[v118] < v992;
        v1004 = v990 < v995 && (unint64_t)v117 + 6 * v118 < v992;
        v1006 = v990 < v996 && (unint64_t)v117 + v121 < v992;
        v1008 = v990 < v997 && (unint64_t)v117 + v120 < v992;
        v1010 = v990 < v998 && (unint64_t)v117 < v992;
        if ((unint64_t)v13 >= v992 || v990 >= (unint64_t)&v13[2] + 2)
        {
          v116 = v3566;
          v41 = a2;
          if (!v1000 && !v1002 && !v1004 && !v1006 && !v1008 && !v1010)
          {
            v1012 = (const __int16 *)v13;
            v1013 = (uint16x4_t)vld1_dup_s16(v1012++);
            v1014 = (uint16x4_t)vld1_dup_s16(v1012);
            v1015 = vaddl_u16(v1014, v1013);
            v1016 = (const __int16 *)v13 + 2;
            v1017 = (uint16x4_t)vld1_dup_s16(v1016);
            v1018 = (const __int16 *)v13 + 3;
            v1019 = (uint16x4_t)vld1_dup_s16(v1018);
            v1020 = (int16x8_t)vaddw_u16(vaddw_u16(v1015, v1017), v1019);
            v1021 = (const __int16 *)&v13[1];
            v1022 = (uint16x4_t)vld1_dup_s16(v1021);
            v1023 = (int16x8_t)vmovl_u16(v1022);
            v1024 = (const __int16 *)&v13[1] + 1;
            v1025 = (uint16x4_t)vld1_dup_s16(v1024);
            v1026 = (const __int16 *)&v13[1] + 2;
            v1027 = (uint16x4_t)vld1_dup_s16(v1026);
            v1028 = (int16x8_t)vmovl_u16(v1025);
            v1029 = (int16x8_t)vmovl_u16(v1027);
            v1030 = (const __int16 *)&v13[1] + 3;
            v1031 = (uint16x4_t)vld1_dup_s16(v1030);
            v1032 = (int16x8_t)vmovl_u16(v1031);
            v1033 = (const __int16 *)&v13[2];
            v1034 = (uint16x4_t)vld1_dup_s16(v1033);
            v1035 = (int16x8_t)vmovl_u16(v1034);
            v1036 = (uint16x8_t)vuzp1q_s16(v1020, v1023);
            v1037 = (uint16x4_t)vmovn_s32((int32x4_t)v1023);
            v753 = v3566 & 0xFFFFFFF8;
            v1038 = (uint16x8_t)vuzp1q_s16(v1020, v1028);
            v1039 = (int16x8_t *)(v119 + 2 * v752);
            v1040 = (uint16x4_t)vmovn_s32((int32x4_t)v1028);
            v1041 = (uint16x8_t)vuzp1q_s16(v1020, v1029);
            v1042 = (uint16x4_t)vmovn_s32((int32x4_t)v1029);
            v1043 = (uint16x8_t)vuzp1q_s16(v1020, v1032);
            v1044 = (uint16x4_t)vmovn_s32((int32x4_t)v1032);
            v1045 = (uint16x8_t)vuzp1q_s16(v1020, v1035);
            v1046 = (uint16x4_t)vmovn_s32((int32x4_t)v1035);
            v1047 = v753;
            v1048 = (uint16x8_t *)v117;
            do
            {
              v1049 = *(uint16x8_t *)((char *)v1048 + 2 * v118);
              v1050 = (uint16x8_t *)((char *)v1048 + v120 + v120);
              v1051 = vmlal_high_u16(vmlal_high_u16((uint32x4_t)vmulq_s32((int32x4_t)v1020, (int32x4_t)vmovl_high_u16(*v1048)), v1036, v1049), v1038, *v1050);
              v1052 = vmlal_u16(vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v1020, (int32x4_t)vmovl_u16(*(uint16x4_t *)v1048->i8)), v1037, *(uint16x4_t *)v1049.i8), v1040, *(uint16x4_t *)v1050->i8);
              v1053 = (uint16x4_t *)&v1050->i8[v120];
              *v1039++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v1052, v1042, *v1053), v1044, *(uint16x4_t *)((char *)v1053 + 2 * v118)), v1046, *(uint16x4_t *)((char *)v1053 + 2 * v118 + 2 * v118)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v1051, v1041, *(uint16x8_t *)v1053->i8), v1043, *(uint16x8_t *)&v1053->i8[2 * v118]), v1045, *(uint16x8_t *)&v1053->i8[2 * v118 + 2 * v118]), 0xFuLL);
              ++v1048;
              v1047 -= 8;
            }
            while (v1047);
            if (v753 == v3566)
            {
LABEL_736:
              v1058 = 6 * v118;
              if (v116 >= 8)
              {
                v1059 = 0;
                v1550 = v119 + 4 * v752;
                v1551 = v119 + 4 * v752 + 2 * v116;
                v1553 = v1550 < (unint64_t)v117 + 12 * v118 + 2 * v116
                     && (unint64_t)v117 + 12 * v118 < v1551;
                v1555 = v1550 < (unint64_t)v117 + 10 * v118 + 2 * v116
                     && (unint64_t)v117 + 10 * v118 < v1551;
                v1557 = v1550 < (unint64_t)&v117[v118] + 2 * v116 && (unint64_t)&v117[v118] < v1551;
                v1559 = v1550 < (unint64_t)v117 + 2 * v116 + v1058 && (unint64_t)v117 + v1058 < v1551;
                v1561 = v1550 < (unint64_t)v117 + 2 * v116 + v121 && (unint64_t)v117 + v121 < v1551;
                v1563 = v1550 < (unint64_t)v117 + 2 * v116 + v120 && (unint64_t)v117 + v120 < v1551;
                v1565 = v1550 < (unint64_t)v117 + 2 * v116 && (unint64_t)v117 < v1551;
                if ((unint64_t)v13 >= v1551 || v1550 >= (unint64_t)&v13[2] + 2)
                {
                  v116 = v3566;
                  v41 = a2;
                  if (!v1553 && !v1555 && !v1557 && !v1559 && !v1561 && !v1563 && !v1565)
                  {
                    v1567 = (const __int16 *)v13;
                    v1568 = (uint16x4_t)vld1_dup_s16(v1567++);
                    v1569 = (uint16x4_t)vld1_dup_s16(v1567);
                    v1570 = (const __int16 *)v13 + 2;
                    v1571 = (uint16x4_t)vld1_dup_s16(v1570);
                    v1572 = (int16x8_t)vaddw_u16(vaddl_u16(v1569, v1568), v1571);
                    v1573 = (const __int16 *)v13 + 3;
                    v1574 = (uint16x4_t)vld1_dup_s16(v1573);
                    v1575 = (int16x8_t)vmovl_u16(v1574);
                    v1576 = (const __int16 *)&v13[1];
                    v1577 = (uint16x4_t)vld1_dup_s16(v1576);
                    v1578 = (const __int16 *)&v13[1] + 1;
                    v1579 = (uint16x4_t)vld1_dup_s16(v1578);
                    v1580 = (int16x8_t)vmovl_u16(v1577);
                    v1581 = (int16x8_t)vmovl_u16(v1579);
                    v1582 = (const __int16 *)&v13[1] + 2;
                    v1583 = (uint16x4_t)vld1_dup_s16(v1582);
                    v1584 = (int16x8_t)vmovl_u16(v1583);
                    v1585 = (const __int16 *)&v13[1] + 3;
                    v1586 = (uint16x4_t)vld1_dup_s16(v1585);
                    v1587 = (const __int16 *)&v13[2];
                    v1588 = (uint16x4_t)vld1_dup_s16(v1587);
                    v1589 = (int16x8_t)vmovl_u16(v1586);
                    v1590 = (int16x8_t)vmovl_u16(v1588);
                    v1591 = (uint16x8_t)vuzp1q_s16(v1572, v1575);
                    v1592 = (uint16x4_t)vmovn_s32((int32x4_t)v1575);
                    v1059 = v3566 & 0xFFFFFFF8;
                    v1593 = (uint16x8_t)vuzp1q_s16(v1572, v1580);
                    v1594 = (int16x8_t *)(v119 + 4 * v752);
                    v1595 = (uint16x4_t)vmovn_s32((int32x4_t)v1580);
                    v1596 = (uint16x8_t)vuzp1q_s16(v1572, v1581);
                    v1597 = (uint16x4_t)vmovn_s32((int32x4_t)v1581);
                    v1598 = (uint16x8_t)vuzp1q_s16(v1572, v1584);
                    v1599 = (uint16x4_t)vmovn_s32((int32x4_t)v1584);
                    v1600 = (uint16x8_t)vuzp1q_s16(v1572, v1589);
                    v1601 = (uint16x4_t)vmovn_s32((int32x4_t)v1589);
                    v1602 = (uint16x8_t)vuzp1q_s16(v1572, v1590);
                    v1603 = (uint16x4_t)vmovn_s32((int32x4_t)v1590);
                    v1604 = v1059;
                    v1605 = (uint16x8_t *)v117;
                    do
                    {
                      v1606 = *(uint16x8_t *)((char *)v1605 + 2 * v118);
                      v1607 = (uint16x8_t *)((char *)v1605 + v120 + v120);
                      v1608 = vmlal_high_u16(vmlal_high_u16((uint32x4_t)vmulq_s32((int32x4_t)v1572, (int32x4_t)vmovl_high_u16(*v1605)), v1591, v1606), v1593, *v1607);
                      v1609 = vmlal_u16(vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v1572, (int32x4_t)vmovl_u16(*(uint16x4_t *)v1605->i8)), v1592, *(uint16x4_t *)v1606.i8), v1595, *(uint16x4_t *)v1607->i8);
                      v1610 = (uint16x8_t *)((char *)v1607 + v120);
                      v1611 = vmlal_high_u16(v1608, v1596, *v1610);
                      v1612 = vmlal_u16(v1609, v1597, *(uint16x4_t *)v1610->i8);
                      v1613 = (uint16x4_t *)&v1610->i8[v120];
                      *v1594++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v1612, v1599, *v1613), v1601, *(uint16x4_t *)((char *)v1613 + 2 * v118)), v1603, *(uint16x4_t *)((char *)v1613 + 2 * v118 + 2 * v118)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v1611, v1598, *(uint16x8_t *)v1613->i8), v1600, *(uint16x8_t *)&v1613->i8[2 * v118]), v1602, *(uint16x8_t *)&v1613->i8[2 * v118 + 2 * v118]), 0xFuLL);
                      ++v1605;
                      v1604 -= 8;
                    }
                    while (v1604);
                    if (v1059 == v3566)
                    {
LABEL_1158:
                      if (v116 >= 8)
                      {
                        v1621 = 0;
                        v2148 = v119 + 6 * v752;
                        v2149 = 2 * v116;
                        v2150 = v119 + 6 * v752 + 2 * v116;
                        v2151 = (char *)v117 + 14 * v118;
                        v2152 = (unint64_t)v117 + 14 * v118 + 2 * v116;
                        v2153 = (char *)v117 + 12 * v118;
                        v2154 = (unint64_t)v117 + 12 * v118 + 2 * v116;
                        v2155 = (char *)v117 + 10 * v118;
                        v2156 = (unint64_t)v117 + 10 * v118 + 2 * v116;
                        v2157 = v118;
                        v2158 = &v117[v2157];
                        v2159 = (unint64_t)&v117[v2157] + v2149;
                        v2160 = (char *)v117 + v1058;
                        v2161 = (unint64_t)v117 + v1058 + v2149;
                        v2162 = (char *)v117 + v121;
                        v2163 = (unint64_t)v117 + v121 + v2149;
                        v2164 = (unint64_t)v117 + v120 + v2149;
                        v2165 = (unint64_t)v117 + v2149;
                        v2167 = v2148 < v2152 && (unint64_t)v2151 < v2150;
                        v2169 = v2148 < v2154 && (unint64_t)v2153 < v2150;
                        v2171 = v2148 < v2156 && (unint64_t)v2155 < v2150;
                        v2173 = v2148 < v2159 && (unint64_t)v2158 < v2150;
                        v2175 = v2148 < v2161 && (unint64_t)v2160 < v2150;
                        v2177 = v2148 < v2163 && (unint64_t)v2162 < v2150;
                        v2179 = v2148 < v2164 && (unint64_t)v117 + v120 < v2150;
                        v2181 = v2148 < v2165 && (unint64_t)v117 < v2150;
                        if ((unint64_t)v13 >= v2150 || v2148 >= (unint64_t)&v13[2] + 2)
                        {
                          v41 = a2;
                          v4 = v3573;
                          v116 = v3566;
                          if (!v2167 && !v2169 && !v2171 && !v2173 && !v2175 && !v2177 && !v2179 && !v2181)
                          {
                            v2183 = (const __int16 *)v13;
                            v2184 = (uint16x4_t)vld1_dup_s16(v2183++);
                            v2185 = (uint16x4_t)vld1_dup_s16(v2183);
                            v1621 = v3566 & 0xFFFFFFF8;
                            v2186 = (int16x8_t)vaddl_u16(v2185, v2184);
                            v2187 = (const __int16 *)v13 + 2;
                            v2188 = (uint16x4_t)vld1_dup_s16(v2187);
                            v2189 = (int16x8_t)vmovl_u16(v2188);
                            v2190 = (const __int16 *)v13 + 3;
                            v2191 = (uint16x4_t)vld1_dup_s16(v2190);
                            v2192 = (const __int16 *)&v13[1];
                            v2193 = (uint16x4_t)vld1_dup_s16(v2192);
                            v2194 = (int16x8_t)vmovl_u16(v2191);
                            v2195 = (int16x8_t)vmovl_u16(v2193);
                            v2196 = (const __int16 *)&v13[1] + 1;
                            v2197 = (uint16x4_t)vld1_dup_s16(v2196);
                            v2198 = (int16x8_t)vmovl_u16(v2197);
                            v2199 = (const __int16 *)&v13[1] + 2;
                            v2200 = (uint16x4_t)vld1_dup_s16(v2199);
                            v2201 = (const __int16 *)&v13[1] + 3;
                            v2202 = (uint16x4_t)vld1_dup_s16(v2201);
                            v2203 = (int16x8_t)vmovl_u16(v2200);
                            v2204 = (int16x8_t)vmovl_u16(v2202);
                            v2205 = (const __int16 *)&v13[2];
                            v2206 = (uint16x4_t)vld1_dup_s16(v2205);
                            v2207 = (int16x8_t)vmovl_u16(v2206);
                            v2208 = (uint16x8_t)vuzp1q_s16(v2186, v2189);
                            v2209 = (uint16x4_t)vmovn_s32((int32x4_t)v2189);
                            v2210 = (uint16x8_t)vuzp1q_s16(v2186, v2194);
                            v2211 = (uint16x4_t)vmovn_s32((int32x4_t)v2194);
                            v2212 = (int16x8_t *)(v119 + 6 * v752);
                            v2213 = (uint16x8_t)vuzp1q_s16(v2186, v2195);
                            v2214 = (uint16x4_t)vmovn_s32((int32x4_t)v2195);
                            v2215 = (uint16x8_t)vuzp1q_s16(v2186, v2198);
                            v2216 = (uint16x4_t)vmovn_s32((int32x4_t)v2198);
                            v2217 = (uint16x8_t)vuzp1q_s16(v2186, v2203);
                            v2218 = (uint16x4_t)vmovn_s32((int32x4_t)v2203);
                            v2219 = (uint16x8_t)vuzp1q_s16(v2186, v2204);
                            v2220 = (uint16x4_t)vmovn_s32((int32x4_t)v2204);
                            v2221 = (uint16x8_t)vuzp1q_s16(v2186, v2207);
                            v2222 = (uint16x4_t)vmovn_s32((int32x4_t)v2207);
                            v2223 = v1621;
                            v2224 = (uint16x8_t *)v117;
                            do
                            {
                              v2225 = *(uint16x8_t *)((char *)v2224 + v120);
                              v2226 = vmlal_high_u16((uint32x4_t)vmulq_s32((int32x4_t)v2186, (int32x4_t)vmovl_high_u16(*v2224)), v2208, v2225);
                              v2227 = vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v2186, (int32x4_t)vmovl_u16(*(uint16x4_t *)v2224->i8)), v2209, *(uint16x4_t *)v2225.i8);
                              v2228 = (uint16x4_t *)&v2224->i8[v120 + v120];
                              v2229 = *(uint16x8_t *)v2228->i8;
                              v2230 = vmlal_u16(v2227, v2211, *v2228);
                              v2231 = (uint16x8_t *)((char *)v2228 + v120);
                              v2232 = vmlal_high_u16(vmlal_high_u16(v2226, v2210, v2229), v2213, *v2231);
                              v2233 = vmlal_u16(v2230, v2214, *(uint16x4_t *)v2231->i8);
                              v2234 = (uint16x8_t *)((char *)v2231 + v120);
                              v2235 = vmlal_high_u16(v2232, v2215, *v2234);
                              v2236 = vmlal_u16(v2233, v2216, *(uint16x4_t *)v2234->i8);
                              v2237 = (uint16x4_t *)&v2234->i8[v120];
                              *v2212++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v2236, v2218, *v2237), v2220, *(uint16x4_t *)((char *)v2237 + v120)), v2222, *(uint16x4_t *)((char *)v2237 + v120 + v120)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v2235, v2217, *(uint16x8_t *)v2237->i8), v2219, *(uint16x8_t *)&v2237->i8[v120]), v2221, *(uint16x8_t *)&v2237->i8[v120 + v120]), 0xFuLL);
                              ++v2224;
                              v2223 -= 8;
                            }
                            while (v2223);
                            if (v1621 == v3566)
                            {
LABEL_1561:
                              v2247 = *((_DWORD *)v4 + 3);
                              v3504 = v2247 - 4;
                              v3526 = v2247;
                              if (v2247 > 8)
                              {
                                v2248 = 0;
                                v2249 = 0;
                                v2250 = (v2247 - 8);
                                v3517 = 2 * v116;
                                v3510 = v116 & 0xFFFFFFF8;
                                v2251 = 4;
                                v2252 = 8;
                                do
                                {
                                  if ((int)v116 <= 0)
                                  {
                                    v2253 = v2249 + 1;
                                  }
                                  else
                                  {
                                    v2254 = (uint16x4_t *)*v4;
                                    v2255 = v4[2];
                                    v2256 = *v41;
                                    v2257 = v41[2];
                                    v2258 = v2249 * (_QWORD)v2255;
                                    v2253 = v2249 + 1;
                                    v2259 = 2 * (_QWORD)v2255;
                                    if (v116 >= 8)
                                    {
                                      v2260 = 0;
                                      v2261 = v2249 + 2;
                                      v2262 = v2249 + 3;
                                      v2263 = v2249 + 4;
                                      v2264 = v2249 + 5;
                                      v2265 = v2249 + 6;
                                      v2266 = v2249 + 7;
                                      v3558 = v2256;
                                      v3542 = v2257;
                                      v2267 = v2256 + v2257 * (2 * v2248 + 8);
                                      v2268 = v2267 + v3517;
                                      v2269 = v2259 * (v2249 + 8);
                                      v3531 = (unint64_t)v2254 + v3517 + v2269;
                                      v3538 = (char *)v2254 + v2269;
                                      v2270 = v2259 * v2266;
                                      v2271 = (char *)v2254 + v2259 * v2266;
                                      v2272 = v2259 * v2265;
                                      v2273 = (char *)v2254 + v2272;
                                      v2274 = (unint64_t)v2254 + v3517 + v2272;
                                      v2275 = v2259 * v2264;
                                      v2276 = (char *)v2254 + v2275;
                                      v2277 = (unint64_t)v2254 + v3517 + v2275;
                                      v2278 = v2259 * v2263;
                                      v2279 = (char *)v2254 + v2278;
                                      v2280 = (unint64_t)v2254 + v3517 + v2278;
                                      v2281 = v2259 * v2262;
                                      v2282 = (char *)v2254 + v2281;
                                      v2283 = (unint64_t)v2254 + v3517 + v2281;
                                      v2284 = v2259 * v2261;
                                      v2285 = (char *)v2254 + v2284;
                                      v2286 = (unint64_t)v2254 + v3517 + v2284;
                                      v3578 = v2253;
                                      v2287 = v2259 * v2253;
                                      v2288 = (char *)v2254 + v2259 * v2253;
                                      v2289 = (unint64_t)v2254 + v3517 + v2287;
                                      v3547 = v2258;
                                      v2290 = 2 * v2258;
                                      v2291 = (unint64_t)v2254 + 2 * v2258 + v3517;
                                      v2292 = (char *)v2254 + v2290;
                                      v2294 = v2267 < (unint64_t)v2254 + v3517 + v2270
                                           && (unint64_t)v2271 < v2268;
                                      v2296 = v2267 < v2274 && (unint64_t)v2273 < v2268;
                                      v2298 = v2267 < v2277 && (unint64_t)v2276 < v2268;
                                      v2300 = v2267 < v2280 && (unint64_t)v2279 < v2268;
                                      v2302 = v2267 < v2283 && (unint64_t)v2282 < v2268;
                                      v2304 = v2267 < v2286 && (unint64_t)v2285 < v2268;
                                      v2306 = v2267 < v2289 && (unint64_t)v2288 < v2268;
                                      v2308 = v2267 < v2291 && (unint64_t)v2292 < v2268;
                                      v2310 = v2267 < (unint64_t)&v13[2] + 2 && (unint64_t)v13 < v2268;
                                      if ((unint64_t)v3538 >= v2268 || v2267 >= v3531)
                                      {
                                        v4 = v3573;
                                        v2253 = v3578;
                                        v2250 = (v3526 - 8);
                                        v2258 = v3547;
                                        v2256 = v3558;
                                        v2257 = v3542;
                                        if (v2294 || v2296 || v2298 || v2300)
                                        {
                                          v116 = v3566;
                                          v41 = a2;
                                        }
                                        else
                                        {
                                          v116 = v3566;
                                          if (v2302 || v2304 || v2306)
                                          {
                                            v41 = a2;
                                          }
                                          else
                                          {
                                            v41 = a2;
                                            if (!v2308 && !v2310)
                                            {
                                              v2312 = (const __int16 *)v13;
                                              v2313 = (uint16x4_t)vld1_dup_s16(v2312++);
                                              v2314 = (int16x8_t)vmovl_u16(v2313);
                                              v2315 = (uint16x4_t)vld1_dup_s16(v2312);
                                              v2316 = (int16x8_t)vmovl_u16(v2315);
                                              v2317 = (const __int16 *)v13 + 2;
                                              v2318 = (uint16x4_t)vld1_dup_s16(v2317);
                                              v2319 = (int16x8_t)vmovl_u16(v2318);
                                              v2320 = (const __int16 *)v13 + 3;
                                              v2321 = (uint16x4_t)vld1_dup_s16(v2320);
                                              v2322 = (int16x8_t)vmovl_u16(v2321);
                                              v2323 = (const __int16 *)&v13[1];
                                              v2324 = (uint16x4_t)vld1_dup_s16(v2323);
                                              v2325 = (int16x8_t)vmovl_u16(v2324);
                                              v2326 = (const __int16 *)&v13[1] + 1;
                                              v2327 = (uint16x4_t)vld1_dup_s16(v2326);
                                              v2328 = (int16x8_t)vmovl_u16(v2327);
                                              v2329 = (const __int16 *)&v13[1] + 2;
                                              v2330 = (uint16x4_t)vld1_dup_s16(v2329);
                                              v2331 = (int16x8_t)vmovl_u16(v2330);
                                              v2332 = (const __int16 *)&v13[1] + 3;
                                              v2333 = (uint16x4_t)vld1_dup_s16(v2332);
                                              v2334 = (int16x8_t)vmovl_u16(v2333);
                                              v2335 = (const __int16 *)&v13[2];
                                              v2336 = (uint16x4_t)vld1_dup_s16(v2335);
                                              v2337 = (int16x8_t)vmovl_u16(v2336);
                                              v2338 = (uint16x8_t *)((char *)v2254 + 2 * v3547);
                                              v2339 = (int16x8_t *)(v3558 + v3542 * v2252);
                                              v2340 = v3510;
                                              do
                                              {
                                                v2341 = *(uint16x8_t *)((char *)v2338 + 2 * (_QWORD)v2255);
                                                v2342 = (uint16x8_t *)((char *)v2338 + v2259 + v2259);
                                                v2343 = vmlal_high_u16(vmlal_high_u16(vmull_high_u16((uint16x8_t)vuzp1q_s16(v2314, v2316), v2341), (uint16x8_t)vuzp1q_s16(v2314, v2314), *v2338), (uint16x8_t)vuzp1q_s16(v2314, v2319), *v2342);
                                                v2344 = vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)v2316), *(uint16x4_t *)v2341.i8), (uint16x4_t)vmovn_s32((int32x4_t)v2314), *(uint16x4_t *)v2338->i8), (uint16x4_t)vmovn_s32((int32x4_t)v2319), *(uint16x4_t *)v2342->i8);
                                                v2345 = (uint16x4_t *)&v2342->i8[v2259];
                                                v2346 = vmlal_u16(v2344, (uint16x4_t)vmovn_s32((int32x4_t)v2322), *v2345);
                                                v2347 = vmlal_high_u16(v2343, (uint16x8_t)vuzp1q_s16(v2314, v2322), *(uint16x8_t *)v2345->i8);
                                                v2348 = (uint16x8_t *)((char *)v2345 + v2259);
                                                v2349 = vmlal_high_u16(v2347, (uint16x8_t)vuzp1q_s16(v2314, v2325), *v2348);
                                                v2350 = vmlal_u16(v2346, (uint16x4_t)vmovn_s32((int32x4_t)v2325), *(uint16x4_t *)v2348->i8);
                                                v2351 = (uint16x4_t *)&v2348->i8[v2259];
                                                v2352 = vmlal_u16(v2350, (uint16x4_t)vmovn_s32((int32x4_t)v2328), *v2351);
                                                v2353 = vmlal_high_u16(v2349, (uint16x8_t)vuzp1q_s16(v2314, v2328), *(uint16x8_t *)v2351->i8);
                                                v2354 = (uint16x4_t *)((char *)v2351 + v2259);
                                                *v2339++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v2352, (uint16x4_t)vmovn_s32((int32x4_t)v2331), *v2354), (uint16x4_t)vmovn_s32((int32x4_t)v2334), *(uint16x4_t *)((char *)v2354 + v2259)), (uint16x4_t)vmovn_s32((int32x4_t)v2337), *(uint16x4_t *)((char *)v2354+ 2 * (_QWORD)v2255+ v2259)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v2353, (uint16x8_t)vuzp1q_s16(v2314, v2331),
                                                                              *(uint16x8_t *)v2354->i8),
                                                                            (uint16x8_t)vuzp1q_s16(v2314, v2334),
                                                                            *(uint16x8_t *)&v2354->i8[v2259]),
                                                                          (uint16x8_t)vuzp1q_s16(v2314, v2337),
                                                                          *(uint16x8_t *)&v2354->i8[2 * (_QWORD)v2255 + v2259]),
                                                             0xFuLL);
                                                ++v2338;
                                                v2340 -= 8;
                                              }
                                              while (v2340);
                                              v2260 = v3510;
                                              if (v3510 == v3566)
                                                goto LABEL_1564;
                                            }
                                          }
                                        }
                                      }
                                      else
                                      {
                                        v41 = a2;
                                        v4 = v3573;
                                        v2256 = v3558;
                                        v116 = v3566;
                                        v2250 = (v3526 - 8);
                                        v2253 = v3578;
                                        v2257 = v3542;
                                        v2258 = v3547;
                                      }
                                    }
                                    else
                                    {
                                      v2260 = 0;
                                    }
                                    v2355 = v116 - v2260;
                                    v2356 = (_WORD *)(v2256 + 2 * (v2260 + v2257 * v2251));
                                    v2357 = (unsigned __int16 *)v2254 + v2260 + v2258;
                                    do
                                    {
                                      v2358 = &v2357[(_QWORD)v2255];
                                      v2359 = *v2358;
                                      v2360 = &v2358[(unint64_t)v2259 / 2];
                                      v2361 = v13->u16[0] * *v2357 + v13->u16[1] * v2359 + v13->u16[2] * *v2360;
                                      v2362 = &v2360[(unint64_t)v2259 / 2 + (unint64_t)v2259 / 2];
                                      v2363 = v2361 + v13->u16[3] * v2360[(_QWORD)v2255];
                                      LODWORD(v2360) = *v2362;
                                      v2364 = &v2362[(unint64_t)v2259 / 2];
                                      *v2356++ = (v2363
                                                + v13[1].u16[0] * (_DWORD)v2360
                                                + v13[1].u16[1] * *v2364
                                                + v13[1].u16[2] * v2364[(unint64_t)v2259 / 2]
                                                + v13[1].u16[3]
                                                * v2364[(unint64_t)v2259 / 2 + (unint64_t)v2259 / 2]
                                                + v13[2].u16[0]
                                                * v2364[(unint64_t)v2259 / 2
                                                                    + (unint64_t)v2259 / 2
                                                                    + (unint64_t)v2259 / 2]) >> 15;
                                      ++v2357;
                                      --v2355;
                                    }
                                    while (v2355);
                                  }
LABEL_1564:
                                  ++v2251;
                                  ++v2248;
                                  v2252 += 2;
                                  v2249 = v2253;
                                }
                                while (v2253 != v2250);
                              }
                              v2365 = 0;
                              v2366 = (int)v3526 - 2;
                              v2367 = v3504;
                              v3480 = 2 * v116;
                              v3499 = v2366 + 4;
                              v3505 = v3526 - 5;
                              v2368 = v2367 - 1;
                              v3518 = v2366 + 3;
                              v3494 = 2 * v2366;
                              v3489 = 2 * v2366 - 2;
                              v2369 = (unsigned __int16 *)v13 + 3;
                              v2370 = 2;
                              v3522 = v2367 - 1;
                              v3485 = v2367;
                              while (1)
                              {
                                v2371 = v2368 >= v3518 ? v2366 + 3 : v2368;
                                v3532 = v2365;
                                v2372 = v3522 + v2365 >= v3518 ? v2366 + 3 : v3522 + v2365;
                                v2373 = v3522 + v2365 >= v3518 ? v2366 + 3 : v3522 + v2365;
                                if ((int)v116 >= 1)
                                  break;
LABEL_1647:
                                ++v2367;
                                ++v2370;
                                v2365 = v3532 + 1;
                                ++v2368;
                                ++v2369;
                                if (v2367 >= v3526)
                                {
                                  v2436 = v3573;
                                  v541 = v3581;
                                  if ((int)v3526 < 1)
                                    goto LABEL_2329;
                                  v2437 = 0;
                                  v2438 = 0;
                                  v2439 = (unint64_t)(v3581 + 4);
                                  v2440 = v13 + 2;
                                  while (1)
                                  {
                                    v2441 = *a2;
                                    v2442 = a2[2];
                                    v2443 = (unsigned __int16 *)(*a2 + 2 * v2442 * v2438);
                                    *v541 = ((v13->u16[1] + v13->u16[0] + v13->u16[2] + v13->u16[3] + v13[1].u16[0])
                                           * *v2443
                                           + v2443[1] * v13[1].u16[1]
                                           + v2443[2] * v13[1].u16[2]
                                           + v2443[3] * v13[1].u16[3]
                                           + v2443[4] * v13[2].u16[0]) >> 15;
                                    v541[1] = ((v13->u16[1] + v13->u16[0] + v13->u16[2] + v13->u16[3]) * *v2443
                                             + v2443[1] * v13[1].u16[0]
                                             + v2443[2] * v13[1].u16[1]
                                             + v2443[3] * v13[1].u16[2]
                                             + v2443[4] * v13[1].u16[3]
                                             + v2443[5] * v13[2].u16[0]) >> 15;
                                    v541[2] = ((v13->u16[1] + v13->u16[0] + v13->u16[2]) * *v2443
                                             + v2443[1] * v13->u16[3]
                                             + v2443[2] * v13[1].u16[0]
                                             + v2443[3] * v13[1].u16[1]
                                             + v2443[4] * v13[1].u16[2]
                                             + v2443[5] * v13[1].u16[3]
                                             + v2443[6] * v13[2].u16[0]) >> 15;
                                    v541[3] = ((v13->u16[1] + v13->u16[0]) * *v2443
                                             + v2443[1] * v13->u16[2]
                                             + v2443[2] * v13->u16[3]
                                             + v2443[3] * v13[1].u16[0]
                                             + v2443[4] * v13[1].u16[1]
                                             + v2443[5] * v13[1].u16[2]
                                             + v2443[6] * v13[1].u16[3]
                                             + v2443[7] * v13[2].u16[0]) >> 15;
                                    v2444 = *((int *)v2436 + 2);
                                    if ((int)v2444 > 8)
                                    {
                                      v2445 = (v2444 - 8);
                                      if (v2445 < 8)
                                      {
                                        v2446 = 0;
                                        v2447 = 4;
LABEL_1718:
                                        v2484 = &v3581[v2447];
                                        v2485 = (uint16x8_t *)(v2441 + 2 * (v2446 + v2442 * v2438) + 16);
                                        v2486 = v2445 - v2446;
                                        do
                                        {
                                          v2487 = v2485[-1];
                                          v2488 = v2485->u16[0];
                                          v2485 = (uint16x8_t *)((char *)v2485 + 2);
                                          *v2484++ = (vaddvq_s32((int32x4_t)vmlal_high_u16(vmull_u16(*(uint16x4_t *)v2487.i8, *v13), v2487, *(uint16x8_t *)v13->i8))+ v2488 * v13[2].u16[0]) >> 15;
                                          --v2486;
                                        }
                                        while (v2486);
                                        goto LABEL_1720;
                                      }
                                      v2446 = 0;
                                      v2448 = v2439 + 2 * v2445;
                                      v2449 = v2442 * 2 * v2438;
                                      v2451 = v2439 < v2441 + 2 * v2445 + v2449 + 16 && v2441 + v2449 < v2448;
                                      v2447 = 4;
                                      if ((unint64_t)v13 < v2448 && v2439 < (unint64_t)&v13[2] + 2)
                                        goto LABEL_1718;
                                      if (v2451)
                                        goto LABEL_1718;
                                      v2446 = v2445 & 0xFFFFFFF8;
                                      v2447 = v2446 | 4;
                                      v2453 = (const __int16 *)v13;
                                      v2454 = (uint16x4_t)vld1_dup_s16(v2453++);
                                      v2455 = (int16x8_t)vmovl_u16(v2454);
                                      v2456 = (uint16x4_t)vld1_dup_s16(v2453);
                                      v2457 = (const __int16 *)v13 + 2;
                                      v2458 = (uint16x4_t)vld1_dup_s16(v2457);
                                      v2459 = (int16x8_t)vmovl_u16(v2456);
                                      v2460 = (int16x8_t)vmovl_u16(v2458);
                                      v2461 = (const __int16 *)v13 + 3;
                                      v2462 = (uint16x4_t)vld1_dup_s16(v2461);
                                      v2463 = (int16x8_t)vmovl_u16(v2462);
                                      v2464 = (const __int16 *)&v13[1];
                                      v2465 = (uint16x4_t)vld1_dup_s16(v2464);
                                      v2466 = (const __int16 *)&v13[1] + 1;
                                      v2467 = (uint16x4_t)vld1_dup_s16(v2466);
                                      v2468 = (int16x8_t)vmovl_u16(v2465);
                                      v2469 = (int16x8_t)vmovl_u16(v2467);
                                      v2470 = (const __int16 *)&v13[1] + 2;
                                      v2471 = (uint16x4_t)vld1_dup_s16(v2470);
                                      v2472 = (int16x8_t)vmovl_u16(v2471);
                                      v2473 = (const __int16 *)&v13[1] + 3;
                                      v2474 = (uint16x4_t)vld1_dup_s16(v2473);
                                      v2475 = (const __int16 *)&v13[2];
                                      v2476 = (uint16x4_t)vld1_dup_s16(v2475);
                                      v2477 = (int16x8_t)vmovl_u16(v2474);
                                      v2478 = (int16x8_t)vmovl_u16(v2476);
                                      v2479 = v2441 + v2442 * v2437 + 8;
                                      v2480 = (int16x8_t *)(v3581 + 4);
                                      v2481 = v2446;
                                      do
                                      {
                                        v2482 = *(uint16x8_t *)(v2479 - 8);
                                        v2483 = *(uint16x8_t *)(v2479 - 6);
                                        *v2480++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v2483.i8, (uint16x4_t)vmovn_s32((int32x4_t)v2459)), *(uint16x4_t *)v2482.i8, (uint16x4_t)vmovn_s32((int32x4_t)v2455)), *(uint16x4_t *)(v2479 - 4), (uint16x4_t)vmovn_s32((int32x4_t)v2460)), *(uint16x4_t *)(v2479 - 2), (uint16x4_t)vmovn_s32((int32x4_t)v2463)), *(uint16x4_t *)v2479,
                                                                            (uint16x4_t)vmovn_s32((int32x4_t)v2468)),
                                                                          *(uint16x4_t *)(v2479 + 2),
                                                                          (uint16x4_t)vmovn_s32((int32x4_t)v2469)),
                                                                        *(uint16x4_t *)(v2479 + 4),
                                                                        (uint16x4_t)vmovn_s32((int32x4_t)v2472)),
                                                                      *(uint16x4_t *)(v2479 + 6),
                                                                      (uint16x4_t)vmovn_s32((int32x4_t)v2477)),
                                                                    *(uint16x4_t *)(v2479 + 8),
                                                                    (uint16x4_t)vmovn_s32((int32x4_t)v2478)),
                                                       0xFuLL),
                                                     (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v2483, (uint16x8_t)vuzp1q_s16(v2455, v2459)), v2482, (uint16x8_t)vuzp1q_s16(v2455, v2455)), *(uint16x8_t *)(v2479 - 4), (uint16x8_t)vuzp1q_s16(v2455, v2460)), *(uint16x8_t *)(v2479 - 2), (uint16x8_t)vuzp1q_s16(v2455, v2463)), *(uint16x8_t *)v2479, (uint16x8_t)vuzp1q_s16(v2455, v2468)), *(uint16x8_t *)(v2479 + 2),
                                                                        (uint16x8_t)vuzp1q_s16(v2455, v2469)),
                                                                      *(uint16x8_t *)(v2479 + 4),
                                                                      (uint16x8_t)vuzp1q_s16(v2455, v2472)),
                                                                    *(uint16x8_t *)(v2479 + 6),
                                                                    (uint16x8_t)vuzp1q_s16(v2455, v2477)),
                                                                  *(uint16x8_t *)(v2479 + 8),
                                                                  (uint16x8_t)vuzp1q_s16(v2455, v2478)),
                                                     0xFuLL);
                                        v2479 += 16;
                                        v2481 -= 8;
                                      }
                                      while (v2481);
                                      if (v2446 != v2445)
                                        goto LABEL_1718;
                                    }
LABEL_1720:
                                    v2489 = v2444 - 4;
                                    v2490 = v2444 - 1;
                                    v2491 = (int)v2444 - 4;
                                    if (v2491 + 4 >= v2444 - 1)
                                    {
                                      v2493 = v13->u16[1] + v13->u16[0];
                                      v2492 = 2;
                                    }
                                    else
                                    {
                                      v2492 = 0;
                                      v2493 = 0;
                                    }
                                    v2494 = v2442 * v2438 + v2490;
                                    v2495 = v2444 + 2;
                                    v2496 = (int)v2444 - 2;
                                    v2497 = v2493 * *(unsigned __int16 *)(v2441 + 2 * v2494);
                                    if ((int)v2444 + 2 >= v2489)
                                    {
                                      v2498 = v2489 - 4;
                                      if (v2491 - 4 >= v2496)
                                        v2498 = (int)v2444 - 2;
                                      v2499 = v2496 - v2498 + 1;
                                      if (v2499 < 0x10)
                                      {
                                        v2500 = (int)v2444 - 2;
                                        v2501 = v2492;
LABEL_1731:
                                        v2514 = (unsigned __int16 *)v13 + v2501;
                                        do
                                        {
                                          v2515 = *v2514++;
                                          v2497 += v2515 * *(unsigned __int16 *)(v2441 + v2442 * v2437 + 2 * v2500);
                                          v8 = v2500-- < v2491 - 3;
                                        }
                                        while (!v8);
                                        goto LABEL_1734;
                                      }
                                      v2500 = v2496 - (v2499 & 0xFFFFFFFFFFFFFFF0);
                                      v2501 = v2492 | v2499 & 0xFFFFFFFFFFFFFFF0;
                                      v2502 = 0uLL;
                                      v2503 = (int32x4_t)v2497;
                                      v2504 = (int16x8_t *)(v2441 + 2 * (v2496 + v2442 * v2438) - 14);
                                      v2505 = (uint16x8_t *)((char *)v2440 + 2 * v2492);
                                      v2506 = v2499 & 0xFFFFFFFFFFFFFFF0;
                                      v2507 = 0uLL;
                                      v2508 = 0uLL;
                                      do
                                      {
                                        v2509 = (int8x16_t)vrev64q_s16(*v2504);
                                        v2510 = (uint16x8_t)vextq_s8(v2509, v2509, 8uLL);
                                        v2511 = (int8x16_t)vrev64q_s16(v2504[-1]);
                                        v2512 = (uint16x8_t)vextq_s8(v2511, v2511, 8uLL);
                                        v2513 = v2505[-1];
                                        v2502 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2502, v2513, v2510);
                                        v2503 = (int32x4_t)vmlal_u16((uint32x4_t)v2503, *(uint16x4_t *)v2513.i8, *(uint16x4_t *)v2510.i8);
                                        v2508 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2508, *v2505, v2512);
                                        v2507 = (int32x4_t)vmlal_u16((uint32x4_t)v2507, *(uint16x4_t *)v2505->i8, *(uint16x4_t *)v2512.i8);
                                        v2504 -= 2;
                                        v2505 += 2;
                                        v2506 -= 16;
                                      }
                                      while (v2506);
                                      v2497 = vaddvq_s32(vaddq_s32(vaddq_s32(v2507, v2503), vaddq_s32(v2508, v2502)));
                                      if (v2499 != (v2499 & 0xFFFFFFFFFFFFFFF0))
                                        goto LABEL_1731;
                                    }
LABEL_1734:
                                    v541 = v3581;
                                    v3581[v2491] = v2497 >> 15;
                                    if (v2491 + 1 >= v2444)
                                      goto LABEL_1699;
                                    if (v2491 + 5 >= v2490)
                                    {
                                      v2517 = v13->u16[1] + v13->u16[0] + v13->u16[2];
                                      v2516 = 3;
                                    }
                                    else
                                    {
                                      v2516 = 0;
                                      v2517 = 0;
                                    }
                                    v2518 = v2517 * *(unsigned __int16 *)(v2441 + 2 * v2494);
                                    v2519 = v2491 - 3;
                                    if (v2491 - 3 >= v2496)
                                      v2519 = (int)v2444 - 2;
                                    v2520 = v2496 - v2519 + 1;
                                    v2521 = (int)v2444 - 2;
                                    v2522 = v2516;
                                    if (v2520 < 0x10)
                                      goto LABEL_1744;
                                    v2521 = v2496 - (v2520 & 0xFFFFFFFFFFFFFFF0);
                                    v2522 = v2516 | v2520 & 0xFFFFFFFFFFFFFFF0;
                                    v2523 = 0uLL;
                                    v2524 = (int32x4_t)v2518;
                                    v2525 = (int16x8_t *)(v2441 + 2 * (v2496 + v2442 * v2438) - 14);
                                    v2526 = (uint16x8_t *)((char *)v2440 + 2 * v2516);
                                    v2527 = v2520 & 0xFFFFFFFFFFFFFFF0;
                                    v2528 = 0uLL;
                                    v2529 = 0uLL;
                                    do
                                    {
                                      v2530 = (int8x16_t)vrev64q_s16(*v2525);
                                      v2531 = (uint16x8_t)vextq_s8(v2530, v2530, 8uLL);
                                      v2532 = (int8x16_t)vrev64q_s16(v2525[-1]);
                                      v2533 = (uint16x8_t)vextq_s8(v2532, v2532, 8uLL);
                                      v2534 = v2526[-1];
                                      v2523 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2523, v2534, v2531);
                                      v2524 = (int32x4_t)vmlal_u16((uint32x4_t)v2524, *(uint16x4_t *)v2534.i8, *(uint16x4_t *)v2531.i8);
                                      v2529 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2529, *v2526, v2533);
                                      v2528 = (int32x4_t)vmlal_u16((uint32x4_t)v2528, *(uint16x4_t *)v2526->i8, *(uint16x4_t *)v2533.i8);
                                      v2525 -= 2;
                                      v2526 += 2;
                                      v2527 -= 16;
                                    }
                                    while (v2527);
                                    v2518 = vaddvq_s32(vaddq_s32(vaddq_s32(v2528, v2524), vaddq_s32(v2529, v2523)));
                                    if (v2520 != (v2520 & 0xFFFFFFFFFFFFFFF0))
                                    {
LABEL_1744:
                                      v2535 = (unsigned __int16 *)(v2441 + 2 * (v2521 + v2442 * v2438));
                                      v2536 = (unsigned __int16 *)v13 + v2522;
                                      v2537 = v2516 + v2496 - v2522 - v2519 + 1;
                                      do
                                      {
                                        v2539 = *v2535--;
                                        v2538 = v2539;
                                        v2540 = *v2536++;
                                        v2518 += v2540 * v2538;
                                        --v2537;
                                      }
                                      while (v2537);
                                    }
                                    v3581[v2491 + 1] = v2518 >> 15;
                                    if (v2491 + 6 >= v2490)
                                    {
                                      v2541 = 1;
                                      v2542 = v2491 + 2;
                                      v2543 = vaddvq_s32((int32x4_t)vmovl_u16(*v13))
                                            * *(unsigned __int16 *)(v2441 + 2 * v2494);
                                      if (v2491 + 2 > v2495)
                                        goto LABEL_1760;
                                    }
                                    else
                                    {
                                      v2541 = 0;
                                      v2542 = v2491 + 2;
                                      v2543 = 0;
                                      if (v2491 + 2 > v2495)
                                        goto LABEL_1760;
                                    }
                                    v2544 = v2491 - 2;
                                    if (v2491 - 2 >= v2496)
                                      v2544 = (int)v2444 - 2;
                                    v2545 = v2496 - v2544 + 1;
                                    if (v2545 < 0x10)
                                    {
                                      v2546 = (int)v2444 - 2;
                                      v2547 = v2541 * 4;
LABEL_1757:
                                      v2560 = (unsigned __int16 *)v13 + v2547;
                                      do
                                      {
                                        v2561 = *v2560++;
                                        v2543 += v2561 * *(unsigned __int16 *)(v2441 + v2442 * v2437 + 2 * v2546);
                                        v8 = v2546-- < v2491 - 1;
                                      }
                                      while (!v8);
                                      goto LABEL_1760;
                                    }
                                    v2546 = v2496 - (v2545 & 0xFFFFFFFFFFFFFFF0);
                                    v2547 = (v2541 * 4) | v2545 & 0xFFFFFFFFFFFFFFF0;
                                    v2548 = 0uLL;
                                    v2549 = (int32x4_t)v2543;
                                    v2550 = (int16x8_t *)(v2441 + 2 * (v2496 + v2442 * v2438) - 14);
                                    v2551 = (uint16x8_t *)&v2440[v2541];
                                    v2552 = v2545 & 0xFFFFFFFFFFFFFFF0;
                                    v2553 = 0uLL;
                                    v2554 = 0uLL;
                                    do
                                    {
                                      v2555 = (int8x16_t)vrev64q_s16(*v2550);
                                      v2556 = (uint16x8_t)vextq_s8(v2555, v2555, 8uLL);
                                      v2557 = (int8x16_t)vrev64q_s16(v2550[-1]);
                                      v2558 = (uint16x8_t)vextq_s8(v2557, v2557, 8uLL);
                                      v2559 = v2551[-1];
                                      v2548 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2548, v2559, v2556);
                                      v2549 = (int32x4_t)vmlal_u16((uint32x4_t)v2549, *(uint16x4_t *)v2559.i8, *(uint16x4_t *)v2556.i8);
                                      v2554 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2554, *v2551, v2558);
                                      v2553 = (int32x4_t)vmlal_u16((uint32x4_t)v2553, *(uint16x4_t *)v2551->i8, *(uint16x4_t *)v2558.i8);
                                      v2550 -= 2;
                                      v2551 += 2;
                                      v2552 -= 16;
                                    }
                                    while (v2552);
                                    v2543 = vaddvq_s32(vaddq_s32(vaddq_s32(v2553, v2549), vaddq_s32(v2554, v2548)));
                                    if (v2545 != (v2545 & 0xFFFFFFFFFFFFFFF0))
                                      goto LABEL_1757;
LABEL_1760:
                                    v3581[v2542] = v2543 >> 15;
                                    if (v2491 + 7 >= v2490)
                                    {
                                      v2562 = 5;
                                      v2563 = v2491 + 3;
                                      v2564 = (vaddvq_s32((int32x4_t)vmovl_u16(*v13)) + v13[1].u16[0])
                                            * *(unsigned __int16 *)(v2441 + 2 * v2494);
                                      if (v2491 + 3 > v2495)
                                        goto LABEL_1698;
                                    }
                                    else
                                    {
                                      v2562 = 0;
                                      v2563 = v2491 + 3;
                                      v2564 = 0;
                                      if (v2491 + 3 > v2495)
                                        goto LABEL_1698;
                                    }
                                    v2565 = v2491 - 1;
                                    if (v2491 - 1 >= v2496)
                                      v2565 = (int)v2444 - 2;
                                    v2566 = v2496 - v2565 + 1;
                                    if (v2566 >= 0x10)
                                    {
                                      v2567 = v2496 - (v2566 & 0xFFFFFFFFFFFFFFF0);
                                      v2568 = v2562 | v2566 & 0xFFFFFFFFFFFFFFF0;
                                      v2569 = 0uLL;
                                      v2570 = (int32x4_t)v2564;
                                      v2571 = (int16x8_t *)(v2441 + 2 * (v2496 + v2442 * v2438) - 14);
                                      v2572 = (uint16x8_t *)((char *)v2440 + 2 * v2562);
                                      v2573 = v2566 & 0xFFFFFFFFFFFFFFF0;
                                      v2574 = 0uLL;
                                      v2575 = 0uLL;
                                      do
                                      {
                                        v2576 = (int8x16_t)vrev64q_s16(*v2571);
                                        v2577 = (uint16x8_t)vextq_s8(v2576, v2576, 8uLL);
                                        v2578 = (int8x16_t)vrev64q_s16(v2571[-1]);
                                        v2579 = (uint16x8_t)vextq_s8(v2578, v2578, 8uLL);
                                        v2580 = v2572[-1];
                                        v2569 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2569, v2580, v2577);
                                        v2570 = (int32x4_t)vmlal_u16((uint32x4_t)v2570, *(uint16x4_t *)v2580.i8, *(uint16x4_t *)v2577.i8);
                                        v2575 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2575, *v2572, v2579);
                                        v2574 = (int32x4_t)vmlal_u16((uint32x4_t)v2574, *(uint16x4_t *)v2572->i8, *(uint16x4_t *)v2579.i8);
                                        v2571 -= 2;
                                        v2572 += 2;
                                        v2573 -= 16;
                                      }
                                      while (v2573);
                                      v2564 = vaddvq_s32(vaddq_s32(vaddq_s32(v2574, v2570), vaddq_s32(v2575, v2569)));
                                      if (v2566 == (v2566 & 0xFFFFFFFFFFFFFFF0))
                                        goto LABEL_1698;
                                    }
                                    else
                                    {
                                      v2567 = (int)v2444 - 2;
                                      v2568 = v2562;
                                    }
                                    v2581 = v2441 + v2442 * v2437;
                                    v2582 = (unsigned __int16 *)v13 + v2568;
                                    do
                                    {
                                      v2583 = *v2582++;
                                      v2564 += v2583 * *(unsigned __int16 *)(v2581 + 2 * v2567);
                                      v8 = v2567-- < v2491;
                                    }
                                    while (!v8);
LABEL_1698:
                                    v541 = v3581;
                                    v3581[v2563] = v2564 >> 15;
LABEL_1699:
                                    memcpy(v2443, v541, 2 * v2444);
                                    ++v2438;
                                    v2436 = v3573;
                                    v2437 += 2;
                                    if (v2438 >= *((int *)v3573 + 3))
                                      goto LABEL_2329;
                                  }
                                }
                              }
                              v2374 = *v3573;
                              v2375 = v3573[2];
                              v2376 = (_QWORD)v2375 * (v3526 - 1);
                              v2377 = *a2;
                              v2378 = a2[2];
                              v2379 = v2378 * v2367;
                              if (v2367 > v3526 + 2)
                              {
                                if (v2367 >= v3505)
                                {
                                  v2380 = 0;
                                  while (1)
                                  {
                                    if (v2370 >= 0x10)
                                    {
                                      v2383 = 0uLL;
                                      v2384 = v2370 & 0xFFFFFFFFFFFFFFF0;
                                      v2385 = (uint16x8_t *)&v13[2];
                                      v2386 = 0uLL;
                                      v2387 = 0uLL;
                                      v2388 = 0uLL;
                                      do
                                      {
                                        v2389 = v2385[-1];
                                        v2386 = (int32x4_t)vaddw_high_u16((uint32x4_t)v2386, v2389);
                                        v2383 = (int32x4_t)vaddw_u16((uint32x4_t)v2383, *(uint16x4_t *)v2389.i8);
                                        v2388 = (int32x4_t)vaddw_high_u16((uint32x4_t)v2388, *v2385);
                                        v2387 = (int32x4_t)vaddw_u16((uint32x4_t)v2387, *(uint16x4_t *)v2385->i8);
                                        v2385 += 2;
                                        v2384 -= 16;
                                      }
                                      while (v2384);
                                      v2382 = vaddvq_s32(vaddq_s32(vaddq_s32(v2387, v2383), vaddq_s32(v2388, v2386)));
                                      v2381 = v2370 & 0x7FFFFFFFFFFFFFF0;
                                      if (v2370 == (v2370 & 0x7FFFFFFFFFFFFFF0))
                                        goto LABEL_1661;
                                    }
                                    else
                                    {
                                      v2381 = 0;
                                      v2382 = 0;
                                    }
                                    do
                                      v2382 += v13->u16[v2381++];
                                    while (v2370 != v2381);
LABEL_1661:
                                    *(_WORD *)(v2377 + 2 * (v2380 + v2379)) = (v2382
                                                                             * v2374->u16[v2380 + v2376]) >> 15;
                                    if (++v2380 == v116)
                                      goto LABEL_1647;
                                  }
                                }
                                bzero((void *)(v2377 + 2 * (v3532 + v3485) * v2378), v3480);
                                goto LABEL_1647;
                              }
                              v2390 = (v3499 - v2371) & 0xFFFFFFFFFFFFFFFELL;
                              if (v2367 < v3505)
                              {
                                v2391 = 0;
                                v2392 = v3499 - v2373;
                                v2393 = (v3499 - v2373) & 0xFFFFFFFFFFFFFFFELL;
                                v2394 = (uint64_t)v2374->i64 + v3494 * (_QWORD)v2375;
                                v2395 = (uint64_t)v2374->i64 + v3489 * (_QWORD)v2375;
                                while (1)
                                {
                                  if (v2392 >= 2)
                                  {
                                    v2399 = 0;
                                    v2400 = 0;
                                    v2401 = 0;
                                    v2402 = (v3499 - v2371) & 0xFFFFFFFFFFFFFFFELL;
                                    v2403 = (unsigned __int16 *)v13 + 1;
                                    do
                                    {
                                      v2404 = *(v2403 - 1);
                                      v2405 = *v2403;
                                      v2403 += 2;
                                      v2400 += v2404 * *(unsigned __int16 *)(v2394 + v2399);
                                      v2401 += v2405 * *(unsigned __int16 *)(v2395 + v2399);
                                      v2399 -= 4 * (_QWORD)v2375;
                                      v2402 -= 2;
                                    }
                                    while (v2402);
                                    v2397 = v2401 + v2400;
                                    v2398 = v2366 - v2393;
                                    v2396 = v2393;
                                    if (v2392 == v2393)
                                      goto LABEL_1671;
                                  }
                                  else
                                  {
                                    v2396 = 0;
                                    v2397 = 0;
                                    v2398 = (int)v3526 - 2;
                                  }
                                  v2406 = v2398 + 4;
                                  v2407 = (unsigned __int16 *)v2374 + v2391 + (_QWORD)v2375 * v2398;
                                  v2408 = (unsigned __int16 *)v13 + v2396;
                                  do
                                  {
                                    v2409 = *v2408++;
                                    v2397 += v2409 * *v2407;
                                    --v2406;
                                    v2407 -= (uint64_t)v2375;
                                  }
                                  while (v2406 >= v2367);
LABEL_1671:
                                  *(_WORD *)(v2377 + 2 * (v2391 + v2379)) = v2397 >> 15;
                                  ++v2391;
                                  v2394 += 2;
                                  v2395 += 2;
                                  if (v2391 == v116)
                                    goto LABEL_1647;
                                }
                              }
                              v2410 = 0;
                              v2411 = v3499 - v2372;
                              v3548 = v2366 - ((v3499 - v2372) & 0xFFFFFFFFFFFFFFFELL);
                              v3559 = (v3499 - v2372) & 0xFFFFFFFFFFFFFFFELL;
                              v2412 = (uint64_t)v2374->i64 + v3494 * (_QWORD)v2375;
                              v2413 = (uint64_t)v2374->i64 + v3489 * (_QWORD)v2375;
                              while (v2370 >= 0x10)
                              {
                                v2416 = 0uLL;
                                v2417 = v2370 & 0xFFFFFFFFFFFFFFF0;
                                v2418 = (uint16x8_t *)&v13[2];
                                v2419 = 0uLL;
                                v2420 = 0uLL;
                                v2421 = 0uLL;
                                do
                                {
                                  v2422 = v2418[-1];
                                  v2419 = (int32x4_t)vaddw_high_u16((uint32x4_t)v2419, v2422);
                                  v2416 = (int32x4_t)vaddw_u16((uint32x4_t)v2416, *(uint16x4_t *)v2422.i8);
                                  v2421 = (int32x4_t)vaddw_high_u16((uint32x4_t)v2421, *v2418);
                                  v2420 = (int32x4_t)vaddw_u16((uint32x4_t)v2420, *(uint16x4_t *)v2418->i8);
                                  v2418 += 2;
                                  v2417 -= 16;
                                }
                                while (v2417);
                                v2415 = vaddvq_s32(vaddq_s32(vaddq_s32(v2420, v2416), vaddq_s32(v2421, v2419)));
                                v2414 = v2370 & 0x7FFFFFFFFFFFFFF0;
                                if (v2370 != (v2370 & 0x7FFFFFFFFFFFFFF0))
                                  goto LABEL_1687;
LABEL_1688:
                                v2423 = v2415 * v2374->u16[v2410 + v2376];
                                if (v2411 >= 2)
                                {
                                  v2426 = 0;
                                  v2427 = 0;
                                  v2428 = v2369;
                                  v2429 = v2390;
                                  do
                                  {
                                    v2430 = *(v2428 - 1);
                                    v2431 = *v2428;
                                    v2428 += 2;
                                    v2423 += v2430 * *(unsigned __int16 *)(v2412 + v2426);
                                    v2427 += v2431 * *(unsigned __int16 *)(v2413 + v2426);
                                    v2426 -= 4 * (_QWORD)v2375;
                                    v2429 -= 2;
                                  }
                                  while (v2429);
                                  v2423 += v2427;
                                  v2425 = v2370 + v3559;
                                  v2424 = v3548;
                                  v116 = v3566;
                                  if (v2411 == v3559)
                                    goto LABEL_1681;
                                }
                                else
                                {
                                  v2424 = (int)v3526 - 2;
                                  v2425 = v2370;
                                }
                                v2432 = v2424 + 4;
                                v2433 = (unsigned __int16 *)v2374 + v2410 + (_QWORD)v2375 * v2424;
                                v2434 = (unsigned __int16 *)v13 + v2425;
                                do
                                {
                                  v2435 = *v2434++;
                                  v2423 += v2435 * *v2433;
                                  --v2432;
                                  v2433 -= (uint64_t)v2375;
                                }
                                while (v2432 >= v2367);
LABEL_1681:
                                *(_WORD *)(v2377 + 2 * (v2410 + v2379)) = v2423 >> 15;
                                ++v2410;
                                v2412 += 2;
                                v2413 += 2;
                                if (v2410 == v116)
                                  goto LABEL_1647;
                              }
                              v2414 = 0;
                              v2415 = 0;
                              do
LABEL_1687:
                                v2415 += v13->u16[v2414++];
                              while (v2370 != v2414);
                              goto LABEL_1688;
                            }
                          }
                        }
                        else
                        {
                          v41 = a2;
                          v4 = v3573;
                          v116 = v3566;
                        }
                      }
                      else
                      {
                        v1621 = 0;
                      }
                      v2238 = v116 - v1621;
                      v2239 = (_WORD *)(v119 + 2 * v1621 + 6 * v752);
                      v2240 = (unsigned __int16 *)v117 + v1621;
                      do
                      {
                        v2241 = &v2240[(unint64_t)v120 / 2 + (unint64_t)v120 / 2];
                        v2242 = *v2241;
                        v2243 = &v2241[(unint64_t)v120 / 2];
                        v2244 = (v13->u16[1] + v13->u16[0]) * *v2240
                              + v13->u16[2] * v2240[(unint64_t)v120 / 2]
                              + v13->u16[3] * v2242;
                        v2245 = *v2243;
                        v2246 = &v2243[(unint64_t)v120 / 2];
                        *v2239++ = (v2244
                                  + v13[1].u16[0] * v2245
                                  + v13[1].u16[1] * *v2246
                                  + v13[1].u16[2] * v2246[(unint64_t)v120 / 2]
                                  + v13[1].u16[3] * v2246[(unint64_t)v120 / 2 + (unint64_t)v120 / 2]
                                  + v13[2].u16[0]
                                  * v2246[(unint64_t)v120 / 2
                                                      + (unint64_t)v120 / 2
                                                      + (unint64_t)v120 / 2]) >> 15;
                        ++v2240;
                        --v2238;
                      }
                      while (v2238);
                      goto LABEL_1561;
                    }
                  }
                }
                else
                {
                  v116 = v3566;
                  v41 = a2;
                }
              }
              else
              {
                v1059 = 0;
              }
              v1614 = v116 - v1059;
              v1615 = 2 * v1059;
              v1616 = (_WORD *)(v119 + 2 * v1059 + 4 * v752);
              v1617 = (uint16x4_t *)((char *)v117 + v1615);
              do
              {
                v1618 = (unsigned __int16 *)((char *)v1617 + v120 + v120);
                v1619 = *v1618;
                v1620 = &v1618[(unint64_t)v120 / 2];
                *v1616++ = ((v13->u16[1] + v13->u16[0] + v13->u16[2]) * v1617->u16[0]
                          + v13->u16[3] * v1617->u16[v118]
                          + v13[1].u16[0] * v1619
                          + v13[1].u16[1] * *v1620
                          + v13[1].u16[2] * v1620[(unint64_t)v120 / 2]
                          + v13[1].u16[3] * v1620[(unint64_t)v120 / 2 + (unint64_t)v120 / 2]
                          + v13[2].u16[0]
                          * v1620[(unint64_t)v120 / 2 + (unint64_t)v120 / 2 + v118]) >> 15;
                v1617 = (uint16x4_t *)((char *)v1617 + 2);
                --v1614;
              }
              while (v1614);
              goto LABEL_1158;
            }
          }
        }
        else
        {
          v116 = v3566;
          v41 = a2;
        }
      }
      else
      {
        v753 = 0;
      }
      v1054 = v116 - v753;
      v1055 = (_WORD *)(v119 + 2 * (v753 + v752));
      v1056 = (unsigned __int16 *)v117 + v753;
      do
      {
        v1057 = &v1056[(unint64_t)v120 / 2 + (unint64_t)v120 / 2];
        *v1055++ = (vaddvq_s32((int32x4_t)vmovl_u16(*v13)) * *v1056
                  + v13[1].u16[0] * v1056[(unint64_t)v120 / 2]
                  + v13[1].u16[1] * *v1057
                  + v13[1].u16[2] * v1057[(unint64_t)v120 / 2]
                  + v13[1].u16[3] * v1057[(unint64_t)v120 / 2 + (unint64_t)v120 / 2]
                  + v13[2].u16[0]
                  * v1057[(unint64_t)v120 / 2
                                      + (unint64_t)v120 / 2
                                      + (unint64_t)v120 / 2]) >> 15;
        ++v1056;
        --v1054;
      }
      while (v1054);
      goto LABEL_736;
    case 5:
      v123 = *((unsigned int *)v4 + 2);
      v3567 = v123;
      if ((int)v123 <= 0)
        goto LABEL_1989;
      v124 = (uint16x4_t *)*v4;
      v125 = (uint64_t)v4[2];
      v126 = 2 * v125;
      v127 = *a2;
      v128 = 4 * v125;
      v129 = v125;
      if (v123 < 8)
      {
        v130 = 0;
        goto LABEL_551;
      }
      v130 = 0;
      v754 = 2 * v123;
      v755 = v127 + 2 * v123;
      v756 = (unint64_t)v124 + 2 * v123;
      v757 = (unint64_t)v124 + 2 * v123 + v129 * 8;
      v758 = (unint64_t)v124 + 2 * v123 + v128;
      v759 = (unint64_t)v124 + v126 + v754;
      v761 = v127 < v756 + 10 * v125 && (unint64_t)v124 + 10 * v125 < v755;
      v763 = v127 < v757 && (unint64_t)&v124[v129] < v755;
      v765 = v127 < v756 + 6 * v125 && (unint64_t)v124 + 6 * v125 < v755;
      v767 = v127 < v758 && (unint64_t)v124 + v128 < v755;
      v769 = v127 < v759 && (unint64_t)v124 + v126 < v755;
      v771 = v127 < v756 && (unint64_t)v124 < v755;
      if ((unint64_t)v13 < v755 && v127 < (unint64_t)&v13[2] + 6)
      {
        v123 = *((unsigned int *)v4 + 2);
LABEL_551:
        v820 = v123 - v130;
        v821 = 2 * v130;
        v822 = (_WORD *)(v127 + 2 * v130);
        v823 = (uint16x4_t *)((char *)v124 + v821);
        do
        {
          v824 = (unsigned __int16 *)((char *)v823 + v126 + v126);
          *v822++ = ((vaddvq_s32((int32x4_t)vmovl_u16(*v13)) + v13[1].u16[0] + v13[1].u16[1]) * v823->u16[0]
                   + v13[1].u16[2] * v823->u16[(unint64_t)v126 / 2]
                   + v13[1].u16[3] * *v824
                   + v13[2].u16[0] * v824[(unint64_t)v126 / 2]
                   + v13[2].u16[1] * v824[(unint64_t)v126 / 2 + (unint64_t)v126 / 2]
                   + v13[2].u16[2]
                   * v824[(unint64_t)v126 / 2
                                      + (unint64_t)v126 / 2
                                      + (unint64_t)v126 / 2]) >> 15;
          v823 = (uint16x4_t *)((char *)v823 + 2);
          --v820;
        }
        while (v820);
        goto LABEL_553;
      }
      v123 = *((unsigned int *)v4 + 2);
      if (v761)
        goto LABEL_551;
      if (v763)
        goto LABEL_551;
      if (v765)
        goto LABEL_551;
      if (v767)
        goto LABEL_551;
      if (v769)
        goto LABEL_551;
      if (v771)
        goto LABEL_551;
      v773 = (const __int16 *)v13;
      v774 = (uint16x4_t)vld1_dup_s16(v773++);
      v775 = (uint16x4_t)vld1_dup_s16(v773);
      v776 = (const __int16 *)v13 + 2;
      v777 = (uint16x4_t)vld1_dup_s16(v776);
      v778 = vaddw_u16(vaddl_u16(v775, v774), v777);
      v779 = (const __int16 *)v13 + 3;
      v780 = (uint16x4_t)vld1_dup_s16(v779);
      v781 = vaddw_u16(v778, v780);
      v782 = (const __int16 *)&v13[1];
      v783 = (uint16x4_t)vld1_dup_s16(v782);
      v784 = (const __int16 *)&v13[1] + 1;
      v785 = (uint16x4_t)vld1_dup_s16(v784);
      v786 = (int16x8_t)vaddw_u16(vaddw_u16(v781, v783), v785);
      v787 = (const __int16 *)&v13[1] + 2;
      v788 = (uint16x4_t)vld1_dup_s16(v787);
      v789 = (int16x8_t)vmovl_u16(v788);
      v790 = (const __int16 *)&v13[1] + 3;
      v791 = (uint16x4_t)vld1_dup_s16(v790);
      v792 = (const __int16 *)&v13[2];
      v793 = (uint16x4_t)vld1_dup_s16(v792);
      v794 = (int16x8_t)vmovl_u16(v791);
      v795 = (int16x8_t)vmovl_u16(v793);
      v796 = (const __int16 *)&v13[2] + 1;
      v797 = (uint16x4_t)vld1_dup_s16(v796);
      v798 = (int16x8_t)vmovl_u16(v797);
      v799 = (const __int16 *)&v13[2] + 2;
      v800 = (uint16x4_t)vld1_dup_s16(v799);
      v801 = (int16x8_t)vmovl_u16(v800);
      v802 = (uint16x8_t)vuzp1q_s16(v786, v789);
      v803 = (uint16x4_t)vmovn_s32((int32x4_t)v789);
      v130 = v3567 & 0xFFFFFFF8;
      v804 = (uint16x8_t)vuzp1q_s16(v786, v794);
      v805 = (uint16x4_t)vmovn_s32((int32x4_t)v794);
      v806 = (uint16x8_t)vuzp1q_s16(v786, v795);
      v807 = (uint16x4_t)vmovn_s32((int32x4_t)v795);
      v808 = (uint16x8_t)vuzp1q_s16(v786, v798);
      v809 = (uint16x4_t)vmovn_s32((int32x4_t)v798);
      v810 = (uint16x8_t)vuzp1q_s16(v786, v801);
      v811 = (uint16x4_t)vmovn_s32((int32x4_t)v801);
      v812 = v130;
      v813 = (int16x8_t *)*a2;
      v814 = *v4;
      do
      {
        v815 = *(uint16x8_t *)((char *)v814 + 2 * v125);
        v816 = (uint16x8_t *)((char *)v814 + v126 + v126);
        v817 = vmlal_high_u16(vmlal_high_u16((uint32x4_t)vmulq_s32((int32x4_t)v786, (int32x4_t)vmovl_high_u16(*v814)), v802, v815), v804, *v816);
        v818 = vmlal_u16(vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v786, (int32x4_t)vmovl_u16(*(uint16x4_t *)v814->i8)), v803, *(uint16x4_t *)v815.i8), v805, *(uint16x4_t *)v816->i8);
        v819 = (uint16x4_t *)&v816->i8[v126];
        *v813++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v818, v807, *v819), v809, *(uint16x4_t *)((char *)v819 + 2 * v125)), v811, *(uint16x4_t *)((char *)v819 + 2 * v125 + 2 * v125)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v817, v806, *(uint16x8_t *)v819->i8), v808, *(uint16x8_t *)&v819->i8[2 * v125]), v810, *(uint16x8_t *)&v819->i8[2 * v125 + 2 * v125]), 0xFuLL);
        ++v814;
        v812 -= 8;
      }
      while (v812);
      if (v130 != v3567)
        goto LABEL_551;
LABEL_553:
      v825 = a2[2];
      v826 = 6 * v125;
      if (v123 >= 8)
      {
        v827 = 0;
        v1060 = v127 + 2 * v825;
        v1061 = v127 + 2 * v123 + 2 * v825;
        v1063 = v1060 < (unint64_t)v124 + 12 * v125 + 2 * v123 && (unint64_t)v124 + 12 * v125 < v1061;
        v1065 = v1060 < (unint64_t)v124 + 10 * v125 + 2 * v123 && (unint64_t)v124 + 10 * v125 < v1061;
        v1067 = v1060 < (unint64_t)v124 + 2 * v123 + v129 * 8 && (unint64_t)&v124[v129] < v1061;
        v1069 = v1060 < (unint64_t)v124 + 2 * v123 + v826 && (unint64_t)v124 + v826 < v1061;
        v1071 = v1060 < (unint64_t)v124 + 2 * v123 + v128 && (unint64_t)v124 + v128 < v1061;
        v1073 = v1060 < (unint64_t)v124 + 2 * v123 + v126 && (unint64_t)v124 + v126 < v1061;
        v1075 = v1060 < (unint64_t)v124 + 2 * v123 && (unint64_t)v124 < v1061;
        if ((unint64_t)v13 >= v1061 || v1060 >= (unint64_t)&v13[2] + 6)
        {
          v41 = a2;
          v123 = v3567;
          if (!v1063 && !v1065 && !v1067 && !v1069 && !v1071 && !v1073 && !v1075)
          {
            v1077 = (const __int16 *)v13;
            v1078 = (uint16x4_t)vld1_dup_s16(v1077++);
            v1079 = (uint16x4_t)vld1_dup_s16(v1077);
            v1080 = vaddl_u16(v1079, v1078);
            v1081 = (const __int16 *)v13 + 2;
            v1082 = (uint16x4_t)vld1_dup_s16(v1081);
            v1083 = vaddw_u16(v1080, v1082);
            v1084 = (const __int16 *)v13 + 3;
            v1085 = (uint16x4_t)vld1_dup_s16(v1084);
            v1086 = (const __int16 *)&v13[1];
            v1087 = (uint16x4_t)vld1_dup_s16(v1086);
            v1088 = (int16x8_t)vaddw_u16(vaddw_u16(v1083, v1085), v1087);
            v1089 = (const __int16 *)&v13[1] + 1;
            v1090 = (uint16x4_t)vld1_dup_s16(v1089);
            v1091 = (int16x8_t)vmovl_u16(v1090);
            v1092 = (const __int16 *)&v13[1] + 2;
            v1093 = (uint16x4_t)vld1_dup_s16(v1092);
            v1094 = (const __int16 *)&v13[1] + 3;
            v1095 = (uint16x4_t)vld1_dup_s16(v1094);
            v1096 = (int16x8_t)vmovl_u16(v1093);
            v1097 = (int16x8_t)vmovl_u16(v1095);
            v1098 = (const __int16 *)&v13[2];
            v1099 = (uint16x4_t)vld1_dup_s16(v1098);
            v1100 = (int16x8_t)vmovl_u16(v1099);
            v1101 = (const __int16 *)&v13[2] + 1;
            v1102 = (uint16x4_t)vld1_dup_s16(v1101);
            v1103 = (const __int16 *)&v13[2] + 2;
            v1104 = (uint16x4_t)vld1_dup_s16(v1103);
            v1105 = (int16x8_t)vmovl_u16(v1102);
            v1106 = (int16x8_t)vmovl_u16(v1104);
            v1107 = (uint16x8_t)vuzp1q_s16(v1088, v1091);
            v1108 = (uint16x4_t)vmovn_s32((int32x4_t)v1091);
            v827 = v3567 & 0xFFFFFFF8;
            v1109 = (uint16x8_t)vuzp1q_s16(v1088, v1096);
            v1110 = (int16x8_t *)(v127 + 2 * v825);
            v1111 = (uint16x4_t)vmovn_s32((int32x4_t)v1096);
            v1112 = (uint16x8_t)vuzp1q_s16(v1088, v1097);
            v1113 = (uint16x4_t)vmovn_s32((int32x4_t)v1097);
            v1114 = (uint16x8_t)vuzp1q_s16(v1088, v1100);
            v1115 = (uint16x4_t)vmovn_s32((int32x4_t)v1100);
            v1116 = (uint16x8_t)vuzp1q_s16(v1088, v1105);
            v1117 = (uint16x4_t)vmovn_s32((int32x4_t)v1105);
            v1118 = (uint16x8_t)vuzp1q_s16(v1088, v1106);
            v1119 = (uint16x4_t)vmovn_s32((int32x4_t)v1106);
            v1120 = v827;
            v1121 = (uint16x8_t *)v124;
            do
            {
              v1122 = *(uint16x8_t *)((char *)v1121 + 2 * v125);
              v1123 = (uint16x8_t *)((char *)v1121 + v126 + v126);
              v1124 = vmlal_high_u16(vmlal_high_u16((uint32x4_t)vmulq_s32((int32x4_t)v1088, (int32x4_t)vmovl_high_u16(*v1121)), v1107, v1122), v1109, *v1123);
              v1125 = vmlal_u16(vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v1088, (int32x4_t)vmovl_u16(*(uint16x4_t *)v1121->i8)), v1108, *(uint16x4_t *)v1122.i8), v1111, *(uint16x4_t *)v1123->i8);
              v1126 = (uint16x8_t *)((char *)v1123 + v126);
              v1127 = vmlal_high_u16(v1124, v1112, *v1126);
              v1128 = vmlal_u16(v1125, v1113, *(uint16x4_t *)v1126->i8);
              v1129 = (uint16x4_t *)&v1126->i8[v126];
              *v1110++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v1128, v1115, *v1129), v1117, *(uint16x4_t *)((char *)v1129 + 2 * v125)), v1119, *(uint16x4_t *)((char *)v1129 + 2 * v125 + 2 * v125)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v1127, v1114, *(uint16x8_t *)v1129->i8), v1116, *(uint16x8_t *)&v1129->i8[2 * v125]), v1118, *(uint16x8_t *)&v1129->i8[2 * v125 + 2 * v125]), 0xFuLL);
              ++v1121;
              v1120 -= 8;
            }
            while (v1120);
            if (v827 == v3567)
            {
LABEL_797:
              v3575 = v825;
              v1136 = 0;
              if (v123 >= 8)
              {
                v1137 = v127 + 4 * v825;
                v1138 = 2 * v123;
                v1139 = v127 + 4 * v825 + 2 * v123;
                v1140 = (unint64_t)v124 + 10 * v125 + v1138;
                v1141 = (unint64_t)&v124[v129] + v1138;
                v1142 = (unint64_t)v124 + v826 + v1138;
                v1143 = (unint64_t)v124 + v128 + v1138;
                v1144 = (unint64_t)v124 + v126 + v1138;
                v1145 = (unint64_t)v124 + v1138;
                v1147 = v1137 < (unint64_t)v124 + 14 * v125 + v1138 && (unint64_t)v124 + 14 * v125 < v1139;
                v1149 = v1137 < (unint64_t)v124 + 12 * v125 + v1138 && (unint64_t)v124 + 12 * v125 < v1139;
                v1151 = v1137 < v1140 && (unint64_t)v124 + 10 * v125 < v1139;
                v1153 = v1137 < v1141 && (unint64_t)&v124[v129] < v1139;
                v1155 = v1137 < v1142 && (unint64_t)v124 + v826 < v1139;
                v1157 = v1137 < v1143 && (unint64_t)v124 + v128 < v1139;
                v1159 = v1137 < v1144 && (unint64_t)v124 + v126 < v1139;
                v1161 = v1137 < v1145 && (unint64_t)v124 < v1139;
                if ((unint64_t)v13 >= v1139 || v1137 >= (unint64_t)&v13[2] + 6)
                {
                  v41 = a2;
                  v123 = v3567;
                  v825 = v3575;
                  if (!v1147 && !v1149 && !v1151 && !v1153 && !v1155 && !v1157 && !v1159 && !v1161)
                  {
                    v1163 = (const __int16 *)v13;
                    v1164 = (uint16x4_t)vld1_dup_s16(v1163++);
                    v1165 = (uint16x4_t)vld1_dup_s16(v1163);
                    v1166 = vaddl_u16(v1165, v1164);
                    v1167 = (const __int16 *)v13 + 2;
                    v1168 = (uint16x4_t)vld1_dup_s16(v1167);
                    v1169 = (const __int16 *)v13 + 3;
                    v1170 = (uint16x4_t)vld1_dup_s16(v1169);
                    v1171 = (int16x8_t)vaddw_u16(vaddw_u16(v1166, v1168), v1170);
                    v1172 = (const __int16 *)&v13[1];
                    v1173 = (uint16x4_t)vld1_dup_s16(v1172);
                    v1174 = (int16x8_t)vmovl_u16(v1173);
                    v1175 = (const __int16 *)&v13[1] + 1;
                    v1176 = (uint16x4_t)vld1_dup_s16(v1175);
                    v1177 = (const __int16 *)&v13[1] + 2;
                    v1178 = (uint16x4_t)vld1_dup_s16(v1177);
                    v1179 = (int16x8_t)vmovl_u16(v1176);
                    v1180 = (int16x8_t)vmovl_u16(v1178);
                    v1181 = (const __int16 *)&v13[1] + 3;
                    v1182 = (uint16x4_t)vld1_dup_s16(v1181);
                    v1183 = (int16x8_t)vmovl_u16(v1182);
                    v1184 = (const __int16 *)&v13[2];
                    v1185 = (uint16x4_t)vld1_dup_s16(v1184);
                    v1186 = (const __int16 *)&v13[2] + 1;
                    v1187 = (uint16x4_t)vld1_dup_s16(v1186);
                    v1188 = (int16x8_t)vmovl_u16(v1185);
                    v1189 = (int16x8_t)vmovl_u16(v1187);
                    v1190 = (const __int16 *)&v13[2] + 2;
                    v1191 = (uint16x4_t)vld1_dup_s16(v1190);
                    v1192 = (int16x8_t)vmovl_u16(v1191);
                    v1193 = (uint16x8_t)vuzp1q_s16(v1171, v1174);
                    v1194 = (uint16x4_t)vmovn_s32((int32x4_t)v1174);
                    v1136 = v3567 & 0xFFFFFFF8;
                    v1195 = (uint16x8_t)vuzp1q_s16(v1171, v1179);
                    v1196 = (int16x8_t *)(v127 + 4 * v3575);
                    v1197 = (uint16x4_t)vmovn_s32((int32x4_t)v1179);
                    v1198 = (uint16x8_t)vuzp1q_s16(v1171, v1180);
                    v1199 = (uint16x4_t)vmovn_s32((int32x4_t)v1180);
                    v1200 = (uint16x8_t)vuzp1q_s16(v1171, v1183);
                    v1201 = (uint16x4_t)vmovn_s32((int32x4_t)v1183);
                    v1202 = (uint16x8_t)vuzp1q_s16(v1171, v1188);
                    v1203 = (uint16x4_t)vmovn_s32((int32x4_t)v1188);
                    v1204 = (uint16x8_t)vuzp1q_s16(v1171, v1189);
                    v1205 = (uint16x4_t)vmovn_s32((int32x4_t)v1189);
                    v1206 = (uint16x8_t)vuzp1q_s16(v1171, v1192);
                    v1207 = (uint16x4_t)vmovn_s32((int32x4_t)v1192);
                    v1208 = v1136;
                    v1209 = (uint16x8_t *)v124;
                    do
                    {
                      v1210 = *(uint16x8_t *)((char *)v1209 + 2 * v125);
                      v1211 = vmlal_high_u16((uint32x4_t)vmulq_s32((int32x4_t)v1171, (int32x4_t)vmovl_high_u16(*v1209)), v1193, v1210);
                      v1212 = vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v1171, (int32x4_t)vmovl_u16(*(uint16x4_t *)v1209->i8)), v1194, *(uint16x4_t *)v1210.i8);
                      v1213 = (uint16x4_t *)&v1209->i8[v126 + v126];
                      v1214 = *(uint16x8_t *)v1213->i8;
                      v1215 = vmlal_u16(v1212, v1197, *v1213);
                      v1216 = (uint16x8_t *)((char *)v1213 + v126);
                      v1217 = vmlal_high_u16(vmlal_high_u16(v1211, v1195, v1214), v1198, *v1216);
                      v1218 = vmlal_u16(v1215, v1199, *(uint16x4_t *)v1216->i8);
                      v1219 = (uint16x8_t *)((char *)v1216 + v126);
                      v1220 = vmlal_high_u16(v1217, v1200, *v1219);
                      v1221 = vmlal_u16(v1218, v1201, *(uint16x4_t *)v1219->i8);
                      v1222 = (uint16x4_t *)&v1219->i8[v126];
                      *v1196++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v1221, v1203, *v1222), v1205, *(uint16x4_t *)((char *)v1222 + 2 * v125)), v1207, *(uint16x4_t *)((char *)v1222 + 2 * v125 + 2 * v125)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v1220, v1202, *(uint16x8_t *)v1222->i8), v1204, *(uint16x8_t *)&v1222->i8[2 * v125]), v1206, *(uint16x8_t *)&v1222->i8[2 * v125 + 2 * v125]), 0xFuLL);
                      ++v1209;
                      v1208 -= 8;
                    }
                    while (v1208);
                    if (v1136 == v3567)
                    {
LABEL_864:
                      v3544 = v125;
                      if (v123 >= 8)
                      {
                        v1234 = 0;
                        v1622 = v127 + 6 * v825;
                        v1623 = v127 + 6 * v825 + 2 * v123;
                        v1624 = (unint64_t)&v124[v129];
                        v1625 = (unint64_t)v124 + 2 * v123 + v129 * 8;
                        v1626 = (unint64_t)v124 + v128;
                        v1233 = 4 * v125;
                        v1627 = (unint64_t)v124 + 2 * v123 + v128;
                        v1628 = (unint64_t)v124 + 2 * v123 + v126;
                        v1629 = (unint64_t)v124 + 2 * v123;
                        v1631 = v1622 < (unint64_t)&v124[2 * v125] + 2 * v123
                             && (unint64_t)&v124[2 * v125] < v1623;
                        v1633 = v1622 < (unint64_t)v124 + 14 * v125 + 2 * v123
                             && (unint64_t)v124 + 14 * v125 < v1623;
                        v1635 = v1622 < (unint64_t)v124 + 12 * v125 + 2 * v123
                             && (unint64_t)v124 + 12 * v125 < v1623;
                        v1637 = v1622 < (unint64_t)v124 + 10 * v125 + 2 * v123
                             && (unint64_t)v124 + 10 * v125 < v1623;
                        v1639 = v1622 < v1625 && v1624 < v1623;
                        v1641 = v1622 < (unint64_t)v124 + 2 * v123 + v826
                             && (unint64_t)v124 + v826 < v1623;
                        v1643 = v1622 < v1627 && v1626 < v1623;
                        v1645 = v1622 < v1628 && (unint64_t)v124 + v126 < v1623;
                        v1647 = v1622 < v1629 && (unint64_t)v124 < v1623;
                        v1648 = (unint64_t)v13 >= v1623 || v1622 >= (unint64_t)&v13[2] + 6;
                        if (!v1648 || v1631)
                        {
                          v41 = a2;
                          v4 = v3573;
                          v123 = v3567;
                          v825 = v3575;
                        }
                        else
                        {
                          v41 = a2;
                          v4 = v3573;
                          v825 = v3575;
                          if (v1633 || v1635 || v1637 || v1639 || v1641 || v1643 || v1645)
                          {
                            v123 = v3567;
                          }
                          else
                          {
                            v123 = v3567;
                            if (!v1647)
                            {
                              v1649 = (const __int16 *)v13;
                              v1650 = (uint16x4_t)vld1_dup_s16(v1649++);
                              v1234 = v3567 & 0xFFFFFFF8;
                              v1651 = (uint16x4_t)vld1_dup_s16(v1649);
                              v1652 = (const __int16 *)v13 + 2;
                              v1653 = (uint16x4_t)vld1_dup_s16(v1652);
                              v1654 = (int16x8_t)vaddw_u16(vaddl_u16(v1651, v1650), v1653);
                              v1655 = (const __int16 *)v13 + 3;
                              v1656 = (uint16x4_t)vld1_dup_s16(v1655);
                              v1657 = (int16x8_t)vmovl_u16(v1656);
                              v1658 = (const __int16 *)&v13[1];
                              v1659 = (uint16x4_t)vld1_dup_s16(v1658);
                              v1660 = (const __int16 *)&v13[1] + 1;
                              v1661 = (uint16x4_t)vld1_dup_s16(v1660);
                              v1662 = (int16x8_t)vmovl_u16(v1659);
                              v1663 = (int16x8_t)vmovl_u16(v1661);
                              v1664 = (const __int16 *)&v13[1] + 2;
                              v1665 = (uint16x4_t)vld1_dup_s16(v1664);
                              v1666 = (int16x8_t)vmovl_u16(v1665);
                              v1667 = (const __int16 *)&v13[1] + 3;
                              v1668 = (uint16x4_t)vld1_dup_s16(v1667);
                              v1669 = (const __int16 *)&v13[2];
                              v1670 = (uint16x4_t)vld1_dup_s16(v1669);
                              v1671 = (int16x8_t)vmovl_u16(v1668);
                              v1672 = (int16x8_t)vmovl_u16(v1670);
                              v1673 = (const __int16 *)&v13[2] + 1;
                              v1674 = (uint16x4_t)vld1_dup_s16(v1673);
                              v1675 = (int16x8_t)vmovl_u16(v1674);
                              v1676 = (const __int16 *)&v13[2] + 2;
                              v1677 = (uint16x4_t)vld1_dup_s16(v1676);
                              v1678 = (int16x8_t)vmovl_u16(v1677);
                              v1679 = (uint16x8_t)vuzp1q_s16(v1654, v1657);
                              v1680 = (uint16x4_t)vmovn_s32((int32x4_t)v1657);
                              v1681 = (uint16x8_t)vuzp1q_s16(v1654, v1662);
                              v1682 = (uint16x4_t)vmovn_s32((int32x4_t)v1662);
                              v1683 = (int16x8_t *)(v127 + 6 * v3575);
                              v1684 = (uint16x8_t)vuzp1q_s16(v1654, v1663);
                              v1685 = (uint16x4_t)vmovn_s32((int32x4_t)v1663);
                              v1686 = (uint16x8_t)vuzp1q_s16(v1654, v1666);
                              v1687 = (uint16x4_t)vmovn_s32((int32x4_t)v1666);
                              v1688 = (uint16x8_t)vuzp1q_s16(v1654, v1671);
                              v1689 = (uint16x4_t)vmovn_s32((int32x4_t)v1671);
                              v1690 = (uint16x8_t)vuzp1q_s16(v1654, v1672);
                              v1691 = (uint16x4_t)vmovn_s32((int32x4_t)v1672);
                              v1692 = (uint16x8_t)vuzp1q_s16(v1654, v1675);
                              v1693 = (uint16x4_t)vmovn_s32((int32x4_t)v1675);
                              v1694 = (uint16x8_t)vuzp1q_s16(v1654, v1678);
                              v1695 = (uint16x4_t)vmovn_s32((int32x4_t)v1678);
                              v1696 = v1234;
                              v1697 = (uint16x8_t *)v124;
                              do
                              {
                                v1698 = *(uint16x8_t *)((char *)v1697 + 2 * v125);
                                v1699 = (uint16x8_t *)((char *)v1697 + v126 + v126);
                                v1700 = vmlal_high_u16(vmlal_high_u16((uint32x4_t)vmulq_s32((int32x4_t)v1654, (int32x4_t)vmovl_high_u16(*v1697)), v1679, v1698), v1681, *v1699);
                                v1701 = vmlal_u16(vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v1654, (int32x4_t)vmovl_u16(*(uint16x4_t *)v1697->i8)), v1680, *(uint16x4_t *)v1698.i8), v1682, *(uint16x4_t *)v1699->i8);
                                v1702 = (uint16x4_t *)&v1699->i8[v126];
                                v1703 = *(uint16x8_t *)v1702->i8;
                                v1704 = vmlal_u16(v1701, v1685, *v1702);
                                v1705 = (uint16x8_t *)((char *)v1702 + v126);
                                v1706 = vmlal_high_u16(vmlal_high_u16(v1700, v1684, v1703), v1686, *v1705);
                                v1707 = vmlal_u16(v1704, v1687, *(uint16x4_t *)v1705->i8);
                                v1708 = (uint16x8_t *)((char *)v1705 + v126);
                                v1709 = vmlal_high_u16(v1706, v1688, *v1708);
                                v1710 = vmlal_u16(v1707, v1689, *(uint16x4_t *)v1708->i8);
                                v1711 = (uint16x4_t *)&v1708->i8[v126];
                                *v1683++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v1710, v1691, *v1711), v1693, *(uint16x4_t *)((char *)v1711 + 2 * v125)), v1695, *(uint16x4_t *)((char *)v1711 + 2 * v125 + 2 * v125)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v1709, v1690, *(uint16x8_t *)v1711->i8), v1692, *(uint16x8_t *)&v1711->i8[2 * v125]), v1694, *(uint16x8_t *)&v1711->i8[2 * v125 + 2 * v125]), 0xFuLL);
                                ++v1697;
                                v1696 -= 8;
                              }
                              while (v1696);
                              if (v1234 == v3567)
                              {
LABEL_1908:
                                v3562 = v127;
                                v2743 = 0;
                                if (v123 >= 8)
                                {
                                  v2744 = v127 + 8 * v825;
                                  v2745 = 2 * v123;
                                  v2746 = v127 + 8 * v825 + 2 * v123;
                                  v2747 = (char *)v124 + 18 * v125;
                                  v2748 = (unint64_t)v124 + 18 * v125 + 2 * v123;
                                  v2749 = &v124[2 * v125];
                                  v2750 = (unint64_t)&v124[2 * v125] + 2 * v123;
                                  v2751 = (char *)v124 + 14 * v125;
                                  v2752 = (unint64_t)v124 + 14 * v125 + 2 * v123;
                                  v2753 = (char *)v124 + 12 * v125;
                                  v2754 = (unint64_t)v124 + 12 * v125 + v2745;
                                  v2755 = 10 * v125;
                                  v2756 = (char *)v124 + v2755;
                                  v2757 = (unint64_t)v124 + v2755 + v2745;
                                  v2758 = (unint64_t)&v124[v3544] + v2745;
                                  v2759 = (char *)v124 + v826;
                                  v2760 = (unint64_t)v124 + v826 + v2745;
                                  v2761 = (char *)v124 + v1233;
                                  v2762 = (unint64_t)v124 + v1233 + v2745;
                                  v2763 = (unint64_t)v124 + v126 + v2745;
                                  v2764 = (unint64_t)v124 + v2745;
                                  v2766 = v2744 < v2748 && (unint64_t)v2747 < v2746;
                                  v2768 = v2744 < v2750 && (unint64_t)v2749 < v2746;
                                  v2770 = v2744 < v2752 && (unint64_t)v2751 < v2746;
                                  v2772 = v2744 < v2754 && (unint64_t)v2753 < v2746;
                                  v2774 = v2744 < v2757 && (unint64_t)v2756 < v2746;
                                  v2776 = v2744 < v2758 && (unint64_t)&v124[v3544] < v2746;
                                  v2778 = v2744 < v2760 && (unint64_t)v2759 < v2746;
                                  v2780 = v2744 < v2762 && (unint64_t)v2761 < v2746;
                                  v2782 = v2744 < v2763 && (unint64_t)v124 + v126 < v2746;
                                  v2784 = v2744 < v2764 && (unint64_t)v124 < v2746;
                                  v2785 = (unint64_t)v13 >= v2746 || v2744 >= (unint64_t)&v13[2] + 6;
                                  if (!v2785 || v2766)
                                  {
                                    v41 = a2;
                                    v4 = v3573;
                                    v123 = v3567;
                                    v825 = v3575;
                                  }
                                  else
                                  {
                                    v41 = a2;
                                    v4 = v3573;
                                    v123 = v3567;
                                    v825 = v3575;
                                    if (!v2768
                                      && !v2770
                                      && !v2772
                                      && !v2774
                                      && !v2776
                                      && !v2778
                                      && !v2780
                                      && !v2782
                                      && !v2784)
                                    {
                                      v2786 = (const __int16 *)v13;
                                      v2787 = (uint16x4_t)vld1_dup_s16(v2786++);
                                      v2788 = (uint16x4_t)vld1_dup_s16(v2786);
                                      v2789 = (int16x8_t)vaddl_u16(v2788, v2787);
                                      v2790 = (const __int16 *)v13 + 2;
                                      v2791 = (uint16x4_t)vld1_dup_s16(v2790);
                                      v2792 = (int16x8_t)vmovl_u16(v2791);
                                      v2793 = (const __int16 *)v13 + 3;
                                      v2794 = (uint16x4_t)vld1_dup_s16(v2793);
                                      v2795 = (const __int16 *)&v13[1];
                                      v2796 = (uint16x4_t)vld1_dup_s16(v2795);
                                      v2797 = (int16x8_t)vmovl_u16(v2794);
                                      v2798 = (int16x8_t)vmovl_u16(v2796);
                                      v2799 = (const __int16 *)&v13[1] + 1;
                                      v2800 = (uint16x4_t)vld1_dup_s16(v2799);
                                      v2801 = (int16x8_t)vmovl_u16(v2800);
                                      v2802 = (const __int16 *)&v13[1] + 2;
                                      v2803 = (uint16x4_t)vld1_dup_s16(v2802);
                                      v2804 = (const __int16 *)&v13[1] + 3;
                                      v2805 = (uint16x4_t)vld1_dup_s16(v2804);
                                      v2806 = (int16x8_t)vmovl_u16(v2803);
                                      v2807 = (int16x8_t)vmovl_u16(v2805);
                                      v2808 = (const __int16 *)&v13[2];
                                      v2809 = (uint16x4_t)vld1_dup_s16(v2808);
                                      v2810 = (int16x8_t)vmovl_u16(v2809);
                                      v2811 = (const __int16 *)&v13[2] + 1;
                                      v2812 = (uint16x4_t)vld1_dup_s16(v2811);
                                      v2813 = (const __int16 *)&v13[2] + 2;
                                      v2814 = (uint16x4_t)vld1_dup_s16(v2813);
                                      v2815 = (int16x8_t)vmovl_u16(v2812);
                                      v2816 = (int16x8_t)vmovl_u16(v2814);
                                      v2817 = (uint16x8_t)vuzp1q_s16(v2789, v2792);
                                      v2818 = (uint16x4_t)vmovn_s32((int32x4_t)v2792);
                                      v2743 = v3567 & 0xFFFFFFF8;
                                      v2819 = (uint16x8_t)vuzp1q_s16(v2789, v2797);
                                      v2820 = (int16x8_t *)(v3562 + 8 * v3575);
                                      v2821 = (uint16x4_t)vmovn_s32((int32x4_t)v2797);
                                      v2822 = (uint16x8_t)vuzp1q_s16(v2789, v2798);
                                      v2823 = (uint16x4_t)vmovn_s32((int32x4_t)v2798);
                                      v2824 = (uint16x8_t)vuzp1q_s16(v2789, v2801);
                                      v2825 = (uint16x4_t)vmovn_s32((int32x4_t)v2801);
                                      v2826 = (uint16x8_t)vuzp1q_s16(v2789, v2806);
                                      v2827 = (uint16x4_t)vmovn_s32((int32x4_t)v2806);
                                      v2828 = (uint16x8_t)vuzp1q_s16(v2789, v2807);
                                      v2829 = (uint16x4_t)vmovn_s32((int32x4_t)v2807);
                                      v2830 = (uint16x8_t)vuzp1q_s16(v2789, v2810);
                                      v2831 = (uint16x4_t)vmovn_s32((int32x4_t)v2810);
                                      v2832 = (uint16x8_t)vuzp1q_s16(v2789, v2815);
                                      v2833 = (uint16x4_t)vmovn_s32((int32x4_t)v2815);
                                      v2834 = (uint16x8_t)vuzp1q_s16(v2789, v2816);
                                      v2835 = (uint16x4_t)vmovn_s32((int32x4_t)v2816);
                                      v2836 = v2743;
                                      v2837 = (uint16x8_t *)v124;
                                      do
                                      {
                                        v2838 = *(uint16x8_t *)((char *)v2837 + v126);
                                        v2839 = (uint16x8_t *)((char *)v2837 + v126 + v126);
                                        v2840 = vmlal_high_u16(vmlal_high_u16((uint32x4_t)vmulq_s32((int32x4_t)v2789, (int32x4_t)vmovl_high_u16(*v2837)), v2817, v2838), v2819, *v2839);
                                        v2841 = vmlal_u16(vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v2789, (int32x4_t)vmovl_u16(*(uint16x4_t *)v2837->i8)), v2818, *(uint16x4_t *)v2838.i8), v2821, *(uint16x4_t *)v2839->i8);
                                        v2842 = (uint16x8_t *)((char *)v2839 + v126);
                                        v2843 = vmlal_high_u16(v2840, v2822, *v2842);
                                        v2844 = vmlal_u16(v2841, v2823, *(uint16x4_t *)v2842->i8);
                                        v2845 = (uint16x4_t *)&v2842->i8[v126];
                                        v2846 = *(uint16x8_t *)v2845->i8;
                                        v2847 = vmlal_u16(v2844, v2825, *v2845);
                                        v2848 = (uint16x8_t *)((char *)v2845 + v126);
                                        v2849 = vmlal_high_u16(vmlal_high_u16(v2843, v2824, v2846), v2826, *v2848);
                                        v2850 = vmlal_u16(v2847, v2827, *(uint16x4_t *)v2848->i8);
                                        v2851 = (uint16x8_t *)((char *)v2848 + v126);
                                        v2852 = vmlal_high_u16(v2849, v2828, *v2851);
                                        v2853 = vmlal_u16(v2850, v2829, *(uint16x4_t *)v2851->i8);
                                        v2854 = (uint16x4_t *)&v2851->i8[v126];
                                        *v2820++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v2853, v2831, *v2854), v2833, *(uint16x4_t *)((char *)v2854 + v126)), v2835, *(uint16x4_t *)((char *)v2854 + v126 + v126)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v2852, v2830, *(uint16x8_t *)v2854->i8), v2832, *(uint16x8_t *)&v2854->i8[v126]), v2834, *(uint16x8_t *)&v2854->i8[v126 + v126]),
                                                     0xFuLL);
                                        ++v2837;
                                        v2836 -= 8;
                                      }
                                      while (v2836);
                                      if (v2743 == v3567)
                                      {
LABEL_1989:
                                        v2868 = *((_DWORD *)v4 + 3);
                                        v3534 = v2868 - 5;
                                        v3527 = v2868;
                                        if (v2868 > 10)
                                        {
                                          v2869 = 0;
                                          v2870 = 0;
                                          v3550 = 2 * v123;
                                          v3540 = v123 & 0xFFFFFFF8;
                                          v2871 = 5;
                                          v2872 = 10;
                                          while ((int)v123 <= 0)
                                          {
                                            v2873 = v2870 + 1;
LABEL_1992:
                                            ++v2871;
                                            ++v2869;
                                            v2872 += 2;
                                            v2870 = v2873;
                                            if (v2873 == (_DWORD)v3527 - 10)
                                              goto LABEL_2090;
                                          }
                                          v2874 = (uint16x4_t *)*v4;
                                          v2875 = v4[2];
                                          v2876 = *v41;
                                          v2877 = v41[2];
                                          v2878 = v2870 * (_QWORD)v2875;
                                          v2873 = v2870 + 1;
                                          v2879 = 2 * (_QWORD)v2875;
                                          if (v123 < 8)
                                          {
                                            v2880 = 0;
                                            goto LABEL_2085;
                                          }
                                          v2880 = 0;
                                          v2881 = v2870 + 2;
                                          v2882 = v2870 + 3;
                                          v2883 = v2870 + 4;
                                          v2884 = v2870 + 5;
                                          v2885 = v2870 + 6;
                                          v2886 = v2870 + 7;
                                          v2887 = v2870 + 8;
                                          v2888 = v2870 + 9;
                                          v2889 = v2870 + 10;
                                          v3580 = v2876;
                                          v3563 = v2877;
                                          v2890 = v2876 + v2877 * (2 * v2869 + 10);
                                          v2891 = v2890 + v3550;
                                          v2892 = v2879 * v2889;
                                          v2893 = (char *)v2874 + v3550;
                                          v2894 = v2879 * v2888;
                                          v2895 = (char *)v2874 + v2879 * v2888;
                                          v2896 = v2879 * v2887;
                                          v2897 = (char *)v2874 + v2896;
                                          v2898 = (unint64_t)v2874 + v3550 + v2896;
                                          v2899 = v2879 * v2886;
                                          v2900 = (char *)v2874 + v2899;
                                          v2901 = (unint64_t)v2874 + v3550 + v2899;
                                          v2902 = v2879 * v2885;
                                          v143 = v2890 >= (unint64_t)v2874 + v3550 + v2894;
                                          v2903 = (char *)v2874 + v2902;
                                          v2904 = (unint64_t)v2874 + v3550 + v2902;
                                          v2905 = v2879 * v2884;
                                          v2907 = !v143 && (unint64_t)v2895 < v2891;
                                          v2908 = (char *)v2874 + v2905;
                                          v2909 = (unint64_t)&v2893[v2905];
                                          v2910 = v2879 * v2883;
                                          v2912 = v2890 < v2898 && (unint64_t)v2897 < v2891;
                                          v2913 = (char *)v2874 + v2910;
                                          v2914 = (unint64_t)&v2893[v2910];
                                          v2915 = v2879 * v2882;
                                          v2917 = v2890 < v2901 && (unint64_t)v2900 < v2891;
                                          v143 = v2890 >= v2904;
                                          v2918 = (char *)v2874 + v2915;
                                          v2919 = (unint64_t)&v2893[v2915];
                                          v2920 = v2879 * v2881;
                                          v2922 = !v143 && (unint64_t)v2903 < v2891;
                                          v2923 = (char *)v2874 + v2920;
                                          v2924 = (unint64_t)&v2893[v2920];
                                          v2926 = v2890 < v2909 && (unint64_t)v2908 < v2891;
                                          v143 = v2890 >= v2914;
                                          v2927 = v2879 * v2873;
                                          v2929 = !v143 && (unint64_t)v2913 < v2891;
                                          v143 = v2890 >= v2919;
                                          v2930 = (char *)v2874 + v2927;
                                          v2931 = (unint64_t)&v2893[v2927];
                                          v2933 = !v143 && (unint64_t)v2918 < v2891;
                                          v2934 = 2 * v2878;
                                          v2936 = v2890 < v2924 && (unint64_t)v2923 < v2891;
                                          v2937 = (char *)v2874 + v2934;
                                          v2938 = (unint64_t)&v2893[v2934];
                                          v2940 = v2890 < v2931 && (unint64_t)v2930 < v2891;
                                          v2942 = v2890 < v2938 && (unint64_t)v2937 < v2891;
                                          v2944 = v2890 < (unint64_t)&v13[2] + 6 && (unint64_t)v13 < v2891;
                                          if ((unint64_t)v2874 + v2892 >= v2891
                                            || v2890 >= (unint64_t)&v2893[v2892])
                                          {
                                            v123 = v3567;
                                            if ((v2907 & 1) != 0 || v2912)
                                            {
                                              v41 = a2;
                                            }
                                            else
                                            {
                                              v41 = a2;
                                              if (!v2917)
                                              {
                                                if ((v2922 & 1) != 0 || v2926 || (v2929 & 1) != 0)
                                                {
                                                  v4 = v3573;
                                                  v2876 = v3580;
                                                }
                                                else
                                                {
                                                  v4 = v3573;
                                                  if ((v2933 & 1) != 0)
                                                  {
                                                    v2876 = v3580;
                                                  }
                                                  else
                                                  {
                                                    v2876 = v3580;
                                                    if (!v2936 && !v2940 && !v2942)
                                                    {
                                                      v2877 = v3563;
                                                      if (!v2944)
                                                      {
                                                        v2946 = (const __int16 *)v13;
                                                        v2947 = (uint16x4_t)vld1_dup_s16(v2946++);
                                                        v2948 = (int16x8_t)vmovl_u16(v2947);
                                                        v2949 = (uint16x4_t)vld1_dup_s16(v2946);
                                                        v2950 = (int16x8_t)vmovl_u16(v2949);
                                                        v2951 = (const __int16 *)v13 + 2;
                                                        v2952 = (uint16x4_t)vld1_dup_s16(v2951);
                                                        v2953 = (int16x8_t)vmovl_u16(v2952);
                                                        v2954 = (const __int16 *)v13 + 3;
                                                        v2955 = (uint16x4_t)vld1_dup_s16(v2954);
                                                        v2956 = (int16x8_t)vmovl_u16(v2955);
                                                        v2957 = (const __int16 *)&v13[1];
                                                        v2958 = (uint16x4_t)vld1_dup_s16(v2957);
                                                        v2959 = (int16x8_t)vmovl_u16(v2958);
                                                        v2960 = (const __int16 *)&v13[1] + 1;
                                                        v2961 = (uint16x4_t)vld1_dup_s16(v2960);
                                                        v2962 = (int16x8_t)vmovl_u16(v2961);
                                                        v2963 = (const __int16 *)&v13[1] + 2;
                                                        v2964 = (uint16x4_t)vld1_dup_s16(v2963);
                                                        v2965 = (int16x8_t)vmovl_u16(v2964);
                                                        v2966 = (const __int16 *)&v13[1] + 3;
                                                        v2967 = (uint16x4_t)vld1_dup_s16(v2966);
                                                        v2968 = (int16x8_t)vmovl_u16(v2967);
                                                        v2969 = (const __int16 *)&v13[2];
                                                        v2970 = (uint16x4_t)vld1_dup_s16(v2969);
                                                        v2971 = (int16x8_t)vmovl_u16(v2970);
                                                        v2972 = (const __int16 *)&v13[2] + 1;
                                                        v2973 = (uint16x4_t)vld1_dup_s16(v2972);
                                                        v2974 = (int16x8_t)vmovl_u16(v2973);
                                                        v2975 = (const __int16 *)&v13[2] + 2;
                                                        v2976 = (uint16x4_t)vld1_dup_s16(v2975);
                                                        v2977 = (int16x8_t)vmovl_u16(v2976);
                                                        v2978 = (uint16x8_t *)((char *)v2874 + 2 * v2878);
                                                        v2979 = (int16x8_t *)(v3580 + v3563 * v2872);
                                                        v2980 = v3540;
                                                        do
                                                        {
                                                          v2981 = *(uint16x8_t *)((char *)v2978 + 2 * (_QWORD)v2875);
                                                          v2982 = (uint16x8_t *)((char *)v2978 + v2879 + v2879);
                                                          v2983 = vmlal_high_u16(vmlal_high_u16(vmull_high_u16((uint16x8_t)vuzp1q_s16(v2948, v2950), v2981), (uint16x8_t)vuzp1q_s16(v2948, v2948), *v2978), (uint16x8_t)vuzp1q_s16(v2948, v2953), *v2982);
                                                          v2984 = vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)v2950), *(uint16x4_t *)v2981.i8), (uint16x4_t)vmovn_s32((int32x4_t)v2948), *(uint16x4_t *)v2978->i8), (uint16x4_t)vmovn_s32((int32x4_t)v2953), *(uint16x4_t *)v2982->i8);
                                                          v2985 = (uint16x4_t *)&v2982->i8[v2879];
                                                          v2986 = vmlal_u16(v2984, (uint16x4_t)vmovn_s32((int32x4_t)v2956), *v2985);
                                                          v2987 = vmlal_high_u16(v2983, (uint16x8_t)vuzp1q_s16(v2948, v2956), *(uint16x8_t *)v2985->i8);
                                                          v2988 = (uint16x8_t *)((char *)v2985 + v2879);
                                                          v2989 = vmlal_high_u16(v2987, (uint16x8_t)vuzp1q_s16(v2948, v2959), *v2988);
                                                          v2990 = vmlal_u16(v2986, (uint16x4_t)vmovn_s32((int32x4_t)v2959), *(uint16x4_t *)v2988->i8);
                                                          v2991 = (uint16x4_t *)&v2988->i8[v2879];
                                                          v2992 = vmlal_u16(v2990, (uint16x4_t)vmovn_s32((int32x4_t)v2962), *v2991);
                                                          v2993 = vmlal_high_u16(v2989, (uint16x8_t)vuzp1q_s16(v2948, v2962), *(uint16x8_t *)v2991->i8);
                                                          v2994 = (uint16x8_t *)((char *)v2991 + v2879);
                                                          v2995 = vmlal_high_u16(v2993, (uint16x8_t)vuzp1q_s16(v2948, v2965), *v2994);
                                                          v2996 = vmlal_u16(v2992, (uint16x4_t)vmovn_s32((int32x4_t)v2965), *(uint16x4_t *)v2994->i8);
                                                          v2997 = (uint16x4_t *)&v2994->i8[v2879];
                                                          v2998 = vmlal_u16(v2996, (uint16x4_t)vmovn_s32((int32x4_t)v2968), *v2997);
                                                          v2999 = vmlal_high_u16(v2995, (uint16x8_t)vuzp1q_s16(v2948, v2968), *(uint16x8_t *)v2997->i8);
                                                          v3000 = (uint16x4_t *)((char *)v2997 + v2879);
                                                          *v2979++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v2998, (uint16x4_t)vmovn_s32((int32x4_t)v2971), *v3000), (uint16x4_t)vmovn_s32((int32x4_t)v2974), *(uint16x4_t *)((char *)v3000 + v2879)), (uint16x4_t)vmovn_s32((int32x4_t)v2977), *(uint16x4_t *)((char *)v3000 + 2 * (_QWORD)v2875 + v2879)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v2999, (uint16x8_t)vuzp1q_s16(v2948, v2971), *(uint16x8_t *)v3000->i8), (uint16x8_t)vuzp1q_s16(
                                                                                                    v2948,
                                                                                                    v2974),
                                                                                      *(uint16x8_t *)&v3000->i8[v2879]),
                                                                                    (uint16x8_t)vuzp1q_s16(v2948, v2977),
                                                                                    *(uint16x8_t *)&v3000->i8[2 * (_QWORD)v2875 + v2879]),
                                                                       0xFuLL);
                                                          ++v2978;
                                                          v2980 -= 8;
                                                        }
                                                        while (v2980);
                                                        v2880 = v3540;
                                                        if (v3540 == v3567)
                                                          goto LABEL_1992;
                                                      }
                                                      goto LABEL_2085;
                                                    }
                                                  }
                                                }
                                                goto LABEL_2084;
                                              }
                                            }
                                            v4 = v3573;
                                            v2876 = v3580;
                                          }
                                          else
                                          {
                                            v41 = a2;
                                            v4 = v3573;
                                            v123 = v3567;
                                            v2876 = v3580;
                                          }
LABEL_2084:
                                          v2877 = v3563;
LABEL_2085:
                                          v3001 = v123 - v2880;
                                          v3002 = (_WORD *)(v2876 + 2 * (v2880 + v2877 * v2871));
                                          v3003 = (unsigned __int16 *)v2874 + v2880 + v2878;
                                          do
                                          {
                                            v3004 = &v3003[(_QWORD)v2875];
                                            v3005 = &v3004[(unint64_t)v2879 / 2 + (unint64_t)v2879 / 2];
                                            v3006 = v13->u16[0] * *v3003
                                                  + v13->u16[1] * *v3004
                                                  + v13->u16[2] * v3004[(_QWORD)v2875];
                                            LODWORD(v3004) = *v3005;
                                            v3007 = &v3005[(unint64_t)v2879 / 2];
                                            v3008 = v3006 + v13->u16[3] * (_DWORD)v3004 + v13[1].u16[0] * *v3007;
                                            v3009 = &v3007[(unint64_t)v2879 / 2];
                                            LODWORD(v3004) = *v3009;
                                            v3010 = &v3009[(unint64_t)v2879 / 2];
                                            v3011 = v3008 + v13[1].u16[1] * (_DWORD)v3004;
                                            LODWORD(v3004) = *v3010;
                                            v3012 = &v3010[(unint64_t)v2879 / 2];
                                            *v3002++ = (v3011
                                                      + v13[1].u16[2] * (_DWORD)v3004
                                                      + v13[1].u16[3] * *v3012
                                                      + v13[2].u16[0] * v3012[(unint64_t)v2879 / 2]
                                                      + v13[2].u16[1]
                                                      * v3012[(unint64_t)v2879 / 2 + (unint64_t)v2879 / 2]
                                                      + v13[2].u16[2]
                                                      * v3012[(unint64_t)v2879 / 2
                                                                          + (unint64_t)v2879 / 2
                                                                          + (unint64_t)v2879 / 2]) >> 15;
                                            ++v3003;
                                            --v3001;
                                          }
                                          while (v3001);
                                          goto LABEL_1992;
                                        }
LABEL_2090:
                                        v3013 = 0;
                                        v3014 = (int)v3527 - 2;
                                        v3015 = v3534;
                                        v3482 = 2 * v123;
                                        v3501 = v3014 + 5;
                                        v3507 = v3527 - 6;
                                        v3016 = v3534 - 1;
                                        v3520 = v3014 + 4;
                                        v3496 = 2 * v3014;
                                        v3491 = 2 * v3014 - 2;
                                        v3017 = (unsigned __int16 *)v13 + 3;
                                        v3018 = 2;
                                        v3524 = v3016;
                                        v3486 = v3534;
                                        while (1)
                                        {
                                          v3019 = v3016 >= v3520 ? v3014 + 4 : v3016;
                                          v3535 = v3013;
                                          v3020 = v3524 + v3013 >= v3520 ? v3014 + 4 : v3524 + v3013;
                                          v3021 = v3524 + v3013 >= v3520 ? v3014 + 4 : v3524 + v3013;
                                          if ((int)v123 >= 1)
                                            break;
LABEL_2092:
                                          ++v3015;
                                          ++v3018;
                                          v3013 = v3535 + 1;
                                          ++v3016;
                                          ++v3017;
                                          if (v3015 >= v3527)
                                          {
                                            v3084 = v3573;
                                            v541 = v3581;
                                            if ((int)v3527 < 1)
                                              goto LABEL_2329;
                                            v3085 = 0;
                                            v3086 = 0;
                                            v3087 = (unint64_t)(v3581 + 5);
                                            v3088 = v13 + 2;
                                            while (1)
                                            {
                                              v3089 = *a2;
                                              v3090 = a2[2];
                                              v3091 = (unsigned __int16 *)(*a2 + 2 * v3090 * v3086);
                                              *v541 = ((v13->u16[1]
                                                      + v13->u16[0]
                                                      + v13->u16[2]
                                                      + v13->u16[3]
                                                      + v13[1].u16[0]
                                                      + v13[1].u16[1])
                                                     * *v3091
                                                     + v3091[1] * v13[1].u16[2]
                                                     + v3091[2] * v13[1].u16[3]
                                                     + v3091[3] * v13[2].u16[0]
                                                     + v3091[4] * v13[2].u16[1]
                                                     + v3091[5] * v13[2].u16[2]) >> 15;
                                              v541[1] = ((v13->u16[1]
                                                        + v13->u16[0]
                                                        + v13->u16[2]
                                                        + v13->u16[3]
                                                        + v13[1].u16[0])
                                                       * *v3091
                                                       + v3091[1] * v13[1].u16[1]
                                                       + v3091[2] * v13[1].u16[2]
                                                       + v3091[3] * v13[1].u16[3]
                                                       + v3091[4] * v13[2].u16[0]
                                                       + v3091[5] * v13[2].u16[1]
                                                       + v3091[6] * v13[2].u16[2]) >> 15;
                                              v541[2] = ((v13->u16[1] + v13->u16[0] + v13->u16[2] + v13->u16[3])
                                                       * *v3091
                                                       + v3091[1] * v13[1].u16[0]
                                                       + v3091[2] * v13[1].u16[1]
                                                       + v3091[3] * v13[1].u16[2]
                                                       + v3091[4] * v13[1].u16[3]
                                                       + v3091[5] * v13[2].u16[0]
                                                       + v3091[6] * v13[2].u16[1]
                                                       + v3091[7] * v13[2].u16[2]) >> 15;
                                              v541[3] = ((v13->u16[1] + v13->u16[0] + v13->u16[2]) * *v3091
                                                       + v3091[1] * v13->u16[3]
                                                       + v3091[2] * v13[1].u16[0]
                                                       + v3091[3] * v13[1].u16[1]
                                                       + v3091[4] * v13[1].u16[2]
                                                       + v3091[5] * v13[1].u16[3]
                                                       + v3091[6] * v13[2].u16[0]
                                                       + v3091[7] * v13[2].u16[1]
                                                       + v3091[8] * v13[2].u16[2]) >> 15;
                                              v541[4] = ((v13->u16[1] + v13->u16[0]) * *v3091
                                                       + v3091[1] * v13->u16[2]
                                                       + v3091[2] * v13->u16[3]
                                                       + v3091[3] * v13[1].u16[0]
                                                       + v3091[4] * v13[1].u16[1]
                                                       + v3091[5] * v13[1].u16[2]
                                                       + v3091[6] * v13[1].u16[3]
                                                       + v3091[7] * v13[2].u16[0]
                                                       + v3091[8] * v13[2].u16[1]
                                                       + v3091[9] * v13[2].u16[2]) >> 15;
                                              v3092 = *((int *)v3084 + 2);
                                              if ((int)v3092 > 10)
                                              {
                                                v3093 = (v3092 - 10);
                                                if (v3093 < 8)
                                                {
                                                  v3094 = 0;
                                                  v3095 = 5;
LABEL_2163:
                                                  v3143 = &v3581[v3095];
                                                  v3144 = (unsigned __int16 *)(v3089 + 2 * (v3094 + v3090 * v3086) + 20);
                                                  v3145 = v3093 - v3094;
                                                  do
                                                  {
                                                    v3146 = *(uint16x8_t *)(v3144 - 10);
                                                    v3147 = *(v3144 - 2);
                                                    v3148 = *(v3144 - 1);
                                                    v3149 = *v3144++;
                                                    *v3143++ = (vaddvq_s32((int32x4_t)vmlal_high_u16(vmull_u16(*(uint16x4_t *)v3146.i8, *v13), v3146, *(uint16x8_t *)v13->i8))+ v3147 * v13[2].u16[0]+ v3149 * v13[2].u16[2]+ v3148 * v13[2].u16[1]) >> 15;
                                                    --v3145;
                                                  }
                                                  while (v3145);
                                                  goto LABEL_2165;
                                                }
                                                v3094 = 0;
                                                v3096 = v3087 + 2 * v3093;
                                                v3097 = v3090 * 2 * v3086;
                                                v3099 = v3087 < v3089 + 2 * v3093 + v3097 + 20 && v3089 + v3097 < v3096;
                                                v3095 = 5;
                                                if ((unint64_t)v13 < v3096
                                                  && v3087 < (unint64_t)&v13[2] + 6)
                                                {
                                                  goto LABEL_2163;
                                                }
                                                if (v3099)
                                                  goto LABEL_2163;
                                                v3094 = v3093 & 0xFFFFFFF8;
                                                v3095 = v3094 | 5;
                                                v3101 = (const __int16 *)v13;
                                                v3102 = (uint16x4_t)vld1_dup_s16(v3101++);
                                                v3103 = (uint16x4_t)vld1_dup_s16(v3101);
                                                v3104 = (int16x8_t)vmovl_u16(v3102);
                                                v3105 = (int16x8_t)vmovl_u16(v3103);
                                                v3106 = (const __int16 *)v13 + 2;
                                                v3107 = (uint16x4_t)vld1_dup_s16(v3106);
                                                v3108 = (int16x8_t)vmovl_u16(v3107);
                                                v3109 = (const __int16 *)v13 + 3;
                                                v3110 = (uint16x4_t)vld1_dup_s16(v3109);
                                                v3111 = (const __int16 *)&v13[1];
                                                v3112 = (uint16x4_t)vld1_dup_s16(v3111);
                                                v3113 = (int16x8_t)vmovl_u16(v3110);
                                                v3114 = (int16x8_t)vmovl_u16(v3112);
                                                v3115 = (const __int16 *)&v13[1] + 1;
                                                v3116 = (uint16x4_t)vld1_dup_s16(v3115);
                                                v3117 = (int16x8_t)vmovl_u16(v3116);
                                                v3118 = (const __int16 *)&v13[1] + 2;
                                                v3119 = (uint16x4_t)vld1_dup_s16(v3118);
                                                v3120 = (const __int16 *)&v13[1] + 3;
                                                v3121 = (uint16x4_t)vld1_dup_s16(v3120);
                                                v3122 = (int16x8_t)vmovl_u16(v3119);
                                                v3123 = (int16x8_t)vmovl_u16(v3121);
                                                v3124 = (const __int16 *)&v13[2];
                                                v3125 = (uint16x4_t)vld1_dup_s16(v3124);
                                                v3126 = (int16x8_t)vmovl_u16(v3125);
                                                v3127 = (const __int16 *)&v13[2] + 1;
                                                v3128 = (uint16x4_t)vld1_dup_s16(v3127);
                                                v3129 = (const __int16 *)&v13[2] + 2;
                                                v3130 = (uint16x4_t)vld1_dup_s16(v3129);
                                                v3131 = (int16x8_t)vmovl_u16(v3128);
                                                v3132 = (int16x8_t)vmovl_u16(v3130);
                                                v3133 = v3089 + v3090 * v3085 + 10;
                                                v3134 = (int16x8_t *)(v3581 + 5);
                                                v3135 = v3094;
                                                do
                                                {
                                                  v3136 = *(uint16x8_t *)(v3133 - 10);
                                                  v3137 = *(uint16x8_t *)(v3133 - 8);
                                                  v3138 = vmull_u16(*(uint16x4_t *)v3137.i8, (uint16x4_t)vmovn_s32((int32x4_t)v3105));
                                                  v3139 = *(uint16x8_t *)(v3133 - 6);
                                                  v3140 = vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v3137, (uint16x8_t)vuzp1q_s16(v3104, v3105)), v3136, (uint16x8_t)vuzp1q_s16(v3104, v3104)), v3139, (uint16x8_t)vuzp1q_s16(v3104, v3108));
                                                  v3141 = vmlal_u16(vmlal_u16(v3138, *(uint16x4_t *)v3136.i8, (uint16x4_t)vmovn_s32((int32x4_t)v3104)), *(uint16x4_t *)v3139.i8, (uint16x4_t)vmovn_s32((int32x4_t)v3108));
                                                  v3142 = *(uint16x8_t *)(v3133 - 4);
                                                  *v3134++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(v3141, *(uint16x4_t *)v3142.i8, (uint16x4_t)vmovn_s32((int32x4_t)v3113)), *(uint16x4_t *)(v3133 - 2), (uint16x4_t)vmovn_s32((int32x4_t)v3114)), *(uint16x4_t *)v3133, (uint16x4_t)vmovn_s32((int32x4_t)v3117)), *(uint16x4_t *)(v3133 + 2), (uint16x4_t)vmovn_s32((int32x4_t)v3122)), *(uint16x4_t *)(v3133 + 4),
                                                                                    (uint16x4_t)vmovn_s32((int32x4_t)v3123)),
                                                                                  *(uint16x4_t *)(v3133 + 6),
                                                                                  (uint16x4_t)vmovn_s32((int32x4_t)v3126)),
                                                                                *(uint16x4_t *)(v3133 + 8),
                                                                                (uint16x4_t)vmovn_s32((int32x4_t)v3131)),
                                                                              *(uint16x4_t *)(v3133 + 10),
                                                                              (uint16x4_t)vmovn_s32((int32x4_t)v3132)),
                                                                 0xFuLL),
                                                               (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v3140, v3142, (uint16x8_t)vuzp1q_s16(v3104, v3113)), *(uint16x8_t *)(v3133 - 2), (uint16x8_t)vuzp1q_s16(v3104, v3114)), *(uint16x8_t *)v3133, (uint16x8_t)vuzp1q_s16(v3104, v3117)), *(uint16x8_t *)(v3133 + 2), (uint16x8_t)vuzp1q_s16(v3104, v3122)), *(uint16x8_t *)(v3133 + 4),
                                                                                  (uint16x8_t)vuzp1q_s16(v3104, v3123)),
                                                                                *(uint16x8_t *)(v3133 + 6),
                                                                                (uint16x8_t)vuzp1q_s16(v3104, v3126)),
                                                                              *(uint16x8_t *)(v3133 + 8),
                                                                              (uint16x8_t)vuzp1q_s16(v3104, v3131)),
                                                                            *(uint16x8_t *)(v3133 + 10),
                                                                            (uint16x8_t)vuzp1q_s16(v3104, v3132)),
                                                               0xFuLL);
                                                  v3133 += 16;
                                                  v3135 -= 8;
                                                }
                                                while (v3135);
                                                if (v3094 != v3093)
                                                  goto LABEL_2163;
                                              }
LABEL_2165:
                                              v3150 = v3092 - 5;
                                              v3151 = v3092 - 1;
                                              v3152 = (int)v3092 - 5;
                                              if (v3152 + 5 >= v3092 - 1)
                                              {
                                                v3154 = v13->u16[1] + v13->u16[0];
                                                v3153 = 2;
                                              }
                                              else
                                              {
                                                v3153 = 0;
                                                v3154 = 0;
                                              }
                                              v3155 = v3090 * v3086 + v3151;
                                              v3156 = v3092 + 3;
                                              v3157 = (int)v3092 - 2;
                                              v3158 = v3154 * *(unsigned __int16 *)(v3089 + 2 * v3155);
                                              if ((int)v3092 + 3 >= v3150)
                                              {
                                                v3159 = v3150 - 5;
                                                if (v3152 - 5 >= v3157)
                                                  v3159 = (int)v3092 - 2;
                                                v3160 = v3157 - v3159 + 1;
                                                if (v3160 < 0x10)
                                                {
                                                  v3161 = (int)v3092 - 2;
                                                  v3162 = v3153;
LABEL_2176:
                                                  v3175 = (unsigned __int16 *)v13 + v3162;
                                                  do
                                                  {
                                                    v3176 = *v3175++;
                                                    v3158 += v3176
                                                           * *(unsigned __int16 *)(v3089 + v3090 * v3085 + 2 * v3161);
                                                    v8 = v3161-- < v3152 - 4;
                                                  }
                                                  while (!v8);
                                                  goto LABEL_2179;
                                                }
                                                v3161 = v3157 - (v3160 & 0xFFFFFFFFFFFFFFF0);
                                                v3162 = v3153 | v3160 & 0xFFFFFFFFFFFFFFF0;
                                                v3163 = 0uLL;
                                                v3164 = (int32x4_t)v3158;
                                                v3165 = (int16x8_t *)(v3089 + 2 * (v3157 + v3090 * v3086) - 14);
                                                v3166 = (uint16x8_t *)((char *)v3088 + 2 * v3153);
                                                v3167 = v3160 & 0xFFFFFFFFFFFFFFF0;
                                                v3168 = 0uLL;
                                                v3169 = 0uLL;
                                                do
                                                {
                                                  v3170 = (int8x16_t)vrev64q_s16(*v3165);
                                                  v3171 = (uint16x8_t)vextq_s8(v3170, v3170, 8uLL);
                                                  v3172 = (int8x16_t)vrev64q_s16(v3165[-1]);
                                                  v3173 = (uint16x8_t)vextq_s8(v3172, v3172, 8uLL);
                                                  v3174 = v3166[-1];
                                                  v3163 = (int32x4_t)vmlal_high_u16((uint32x4_t)v3163, v3174, v3171);
                                                  v3164 = (int32x4_t)vmlal_u16((uint32x4_t)v3164, *(uint16x4_t *)v3174.i8, *(uint16x4_t *)v3171.i8);
                                                  v3169 = (int32x4_t)vmlal_high_u16((uint32x4_t)v3169, *v3166, v3173);
                                                  v3168 = (int32x4_t)vmlal_u16((uint32x4_t)v3168, *(uint16x4_t *)v3166->i8, *(uint16x4_t *)v3173.i8);
                                                  v3165 -= 2;
                                                  v3166 += 2;
                                                  v3167 -= 16;
                                                }
                                                while (v3167);
                                                v3158 = vaddvq_s32(vaddq_s32(vaddq_s32(v3168, v3164), vaddq_s32(v3169, v3163)));
                                                if (v3160 != (v3160 & 0xFFFFFFFFFFFFFFF0))
                                                  goto LABEL_2176;
                                              }
LABEL_2179:
                                              v541 = v3581;
                                              v3581[v3152] = v3158 >> 15;
                                              if (v3152 + 1 >= v3092)
                                                goto LABEL_2144;
                                              if (v3152 + 6 >= v3151)
                                              {
                                                v3178 = v13->u16[1] + v13->u16[0] + v13->u16[2];
                                                v3177 = 3;
                                              }
                                              else
                                              {
                                                v3177 = 0;
                                                v3178 = 0;
                                              }
                                              v3179 = v3178 * *(unsigned __int16 *)(v3089 + 2 * v3155);
                                              v3180 = v3152 - 4;
                                              if (v3152 - 4 >= v3157)
                                                v3180 = (int)v3092 - 2;
                                              v3181 = v3157 - v3180 + 1;
                                              v3182 = (int)v3092 - 2;
                                              v3183 = v3177;
                                              if (v3181 < 0x10)
                                                goto LABEL_2189;
                                              v3182 = v3157 - (v3181 & 0xFFFFFFFFFFFFFFF0);
                                              v3183 = v3177 | v3181 & 0xFFFFFFFFFFFFFFF0;
                                              v3184 = 0uLL;
                                              v3185 = (int32x4_t)v3179;
                                              v3186 = (int16x8_t *)(v3089 + 2 * (v3157 + v3090 * v3086) - 14);
                                              v3187 = (uint16x8_t *)((char *)v3088 + 2 * v3177);
                                              v3188 = v3181 & 0xFFFFFFFFFFFFFFF0;
                                              v3189 = 0uLL;
                                              v3190 = 0uLL;
                                              do
                                              {
                                                v3191 = (int8x16_t)vrev64q_s16(*v3186);
                                                v3192 = (uint16x8_t)vextq_s8(v3191, v3191, 8uLL);
                                                v3193 = (int8x16_t)vrev64q_s16(v3186[-1]);
                                                v3194 = (uint16x8_t)vextq_s8(v3193, v3193, 8uLL);
                                                v3195 = v3187[-1];
                                                v3184 = (int32x4_t)vmlal_high_u16((uint32x4_t)v3184, v3195, v3192);
                                                v3185 = (int32x4_t)vmlal_u16((uint32x4_t)v3185, *(uint16x4_t *)v3195.i8, *(uint16x4_t *)v3192.i8);
                                                v3190 = (int32x4_t)vmlal_high_u16((uint32x4_t)v3190, *v3187, v3194);
                                                v3189 = (int32x4_t)vmlal_u16((uint32x4_t)v3189, *(uint16x4_t *)v3187->i8, *(uint16x4_t *)v3194.i8);
                                                v3186 -= 2;
                                                v3187 += 2;
                                                v3188 -= 16;
                                              }
                                              while (v3188);
                                              v3179 = vaddvq_s32(vaddq_s32(vaddq_s32(v3189, v3185), vaddq_s32(v3190, v3184)));
                                              if (v3181 != (v3181 & 0xFFFFFFFFFFFFFFF0))
                                              {
LABEL_2189:
                                                v3196 = (unsigned __int16 *)(v3089 + 2 * (v3182 + v3090 * v3086));
                                                v3197 = (unsigned __int16 *)v13 + v3183;
                                                v3198 = v3177 + v3157 - v3183 - v3180 + 1;
                                                do
                                                {
                                                  v3200 = *v3196--;
                                                  v3199 = v3200;
                                                  v3201 = *v3197++;
                                                  v3179 += v3201 * v3199;
                                                  --v3198;
                                                }
                                                while (v3198);
                                              }
                                              v3581[v3152 + 1] = v3179 >> 15;
                                              if (v3152 + 7 >= v3151)
                                              {
                                                v3202 = 1;
                                                v3203 = v3152 + 2;
                                                v3204 = vaddvq_s32((int32x4_t)vmovl_u16(*v13))
                                                      * *(unsigned __int16 *)(v3089 + 2 * v3155);
                                                if (v3152 + 2 > v3156)
                                                  goto LABEL_2205;
                                              }
                                              else
                                              {
                                                v3202 = 0;
                                                v3203 = v3152 + 2;
                                                v3204 = 0;
                                                if (v3152 + 2 > v3156)
                                                  goto LABEL_2205;
                                              }
                                              v3205 = v3152 - 3;
                                              if (v3152 - 3 >= v3157)
                                                v3205 = (int)v3092 - 2;
                                              v3206 = v3157 - v3205 + 1;
                                              if (v3206 < 0x10)
                                              {
                                                v3207 = (int)v3092 - 2;
                                                v3208 = v3202 * 4;
LABEL_2202:
                                                v3221 = (unsigned __int16 *)v13 + v3208;
                                                do
                                                {
                                                  v3222 = *v3221++;
                                                  v3204 += v3222
                                                         * *(unsigned __int16 *)(v3089 + v3090 * v3085 + 2 * v3207);
                                                  v8 = v3207-- < v3152 - 2;
                                                }
                                                while (!v8);
                                                goto LABEL_2205;
                                              }
                                              v3207 = v3157 - (v3206 & 0xFFFFFFFFFFFFFFF0);
                                              v3208 = (v3202 * 4) | v3206 & 0xFFFFFFFFFFFFFFF0;
                                              v3209 = 0uLL;
                                              v3210 = (int32x4_t)v3204;
                                              v3211 = (int16x8_t *)(v3089 + 2 * (v3157 + v3090 * v3086) - 14);
                                              v3212 = (uint16x8_t *)&v3088[v3202];
                                              v3213 = v3206 & 0xFFFFFFFFFFFFFFF0;
                                              v3214 = 0uLL;
                                              v3215 = 0uLL;
                                              do
                                              {
                                                v3216 = (int8x16_t)vrev64q_s16(*v3211);
                                                v3217 = (uint16x8_t)vextq_s8(v3216, v3216, 8uLL);
                                                v3218 = (int8x16_t)vrev64q_s16(v3211[-1]);
                                                v3219 = (uint16x8_t)vextq_s8(v3218, v3218, 8uLL);
                                                v3220 = v3212[-1];
                                                v3209 = (int32x4_t)vmlal_high_u16((uint32x4_t)v3209, v3220, v3217);
                                                v3210 = (int32x4_t)vmlal_u16((uint32x4_t)v3210, *(uint16x4_t *)v3220.i8, *(uint16x4_t *)v3217.i8);
                                                v3215 = (int32x4_t)vmlal_high_u16((uint32x4_t)v3215, *v3212, v3219);
                                                v3214 = (int32x4_t)vmlal_u16((uint32x4_t)v3214, *(uint16x4_t *)v3212->i8, *(uint16x4_t *)v3219.i8);
                                                v3211 -= 2;
                                                v3212 += 2;
                                                v3213 -= 16;
                                              }
                                              while (v3213);
                                              v3204 = vaddvq_s32(vaddq_s32(vaddq_s32(v3214, v3210), vaddq_s32(v3215, v3209)));
                                              if (v3206 != (v3206 & 0xFFFFFFFFFFFFFFF0))
                                                goto LABEL_2202;
LABEL_2205:
                                              v3581[v3203] = v3204 >> 15;
                                              if (v3152 + 8 >= v3151)
                                              {
                                                v3223 = 5;
                                                v3224 = v3152 + 3;
                                                v3225 = (vaddvq_s32((int32x4_t)vmovl_u16(*v13)) + v13[1].u16[0])
                                                      * *(unsigned __int16 *)(v3089 + 2 * v3155);
                                                if (v3152 + 3 > v3156)
                                                  goto LABEL_2219;
                                              }
                                              else
                                              {
                                                v3223 = 0;
                                                v3224 = v3152 + 3;
                                                v3225 = 0;
                                                if (v3152 + 3 > v3156)
                                                  goto LABEL_2219;
                                              }
                                              v3226 = v3152 - 2;
                                              if (v3152 - 2 >= v3157)
                                                v3226 = (int)v3092 - 2;
                                              v3227 = v3157 - v3226 + 1;
                                              if (v3227 < 0x10)
                                              {
                                                v3228 = (int)v3092 - 2;
                                                v3229 = v3223;
LABEL_2216:
                                                v3242 = (unsigned __int16 *)v13 + v3229;
                                                do
                                                {
                                                  v3243 = *v3242++;
                                                  v3225 += v3243
                                                         * *(unsigned __int16 *)(v3089 + v3090 * v3085 + 2 * v3228);
                                                  v8 = v3228-- < v3152 - 1;
                                                }
                                                while (!v8);
                                                goto LABEL_2219;
                                              }
                                              v3228 = v3157 - (v3227 & 0xFFFFFFFFFFFFFFF0);
                                              v3229 = v3223 | v3227 & 0xFFFFFFFFFFFFFFF0;
                                              v3230 = 0uLL;
                                              v3231 = (int32x4_t)v3225;
                                              v3232 = (int16x8_t *)(v3089 + 2 * (v3157 + v3090 * v3086) - 14);
                                              v3233 = (uint16x8_t *)((char *)v3088 + 2 * v3223);
                                              v3234 = v3227 & 0xFFFFFFFFFFFFFFF0;
                                              v3235 = 0uLL;
                                              v3236 = 0uLL;
                                              do
                                              {
                                                v3237 = (int8x16_t)vrev64q_s16(*v3232);
                                                v3238 = (uint16x8_t)vextq_s8(v3237, v3237, 8uLL);
                                                v3239 = (int8x16_t)vrev64q_s16(v3232[-1]);
                                                v3240 = (uint16x8_t)vextq_s8(v3239, v3239, 8uLL);
                                                v3241 = v3233[-1];
                                                v3230 = (int32x4_t)vmlal_high_u16((uint32x4_t)v3230, v3241, v3238);
                                                v3231 = (int32x4_t)vmlal_u16((uint32x4_t)v3231, *(uint16x4_t *)v3241.i8, *(uint16x4_t *)v3238.i8);
                                                v3236 = (int32x4_t)vmlal_high_u16((uint32x4_t)v3236, *v3233, v3240);
                                                v3235 = (int32x4_t)vmlal_u16((uint32x4_t)v3235, *(uint16x4_t *)v3233->i8, *(uint16x4_t *)v3240.i8);
                                                v3232 -= 2;
                                                v3233 += 2;
                                                v3234 -= 16;
                                              }
                                              while (v3234);
                                              v3225 = vaddvq_s32(vaddq_s32(vaddq_s32(v3235, v3231), vaddq_s32(v3236, v3230)));
                                              if (v3227 != (v3227 & 0xFFFFFFFFFFFFFFF0))
                                                goto LABEL_2216;
LABEL_2219:
                                              v3581[v3224] = v3225 >> 15;
                                              if (v3152 + 9 >= v3151)
                                              {
                                                v3244 = 6;
                                                v3245 = v3152 + 4;
                                                v3246 = (vaddvq_s32((int32x4_t)vmovl_u16(*v13))
                                                       + v13[1].u16[0]
                                                       + v13[1].u16[1])
                                                      * *(unsigned __int16 *)(v3089 + 2 * v3155);
                                                if (v3152 + 4 > v3156)
                                                  goto LABEL_2143;
                                              }
                                              else
                                              {
                                                v3244 = 0;
                                                v3245 = v3152 + 4;
                                                v3246 = 0;
                                                if (v3152 + 4 > v3156)
                                                  goto LABEL_2143;
                                              }
                                              v3247 = v3152 - 1;
                                              if (v3152 - 1 >= v3157)
                                                v3247 = (int)v3092 - 2;
                                              v3248 = v3157 - v3247 + 1;
                                              if (v3248 >= 0x10)
                                              {
                                                v3249 = v3157 - (v3248 & 0xFFFFFFFFFFFFFFF0);
                                                v3250 = v3244 | v3248 & 0xFFFFFFFFFFFFFFF0;
                                                v3251 = 0uLL;
                                                v3252 = (int32x4_t)v3246;
                                                v3253 = (int16x8_t *)(v3089 + 2 * (v3157 + v3090 * v3086) - 14);
                                                v3254 = (uint16x8_t *)((char *)v3088 + 2 * v3244);
                                                v3255 = v3248 & 0xFFFFFFFFFFFFFFF0;
                                                v3256 = 0uLL;
                                                v3257 = 0uLL;
                                                do
                                                {
                                                  v3258 = (int8x16_t)vrev64q_s16(*v3253);
                                                  v3259 = (uint16x8_t)vextq_s8(v3258, v3258, 8uLL);
                                                  v3260 = (int8x16_t)vrev64q_s16(v3253[-1]);
                                                  v3261 = (uint16x8_t)vextq_s8(v3260, v3260, 8uLL);
                                                  v3262 = v3254[-1];
                                                  v3251 = (int32x4_t)vmlal_high_u16((uint32x4_t)v3251, v3262, v3259);
                                                  v3252 = (int32x4_t)vmlal_u16((uint32x4_t)v3252, *(uint16x4_t *)v3262.i8, *(uint16x4_t *)v3259.i8);
                                                  v3257 = (int32x4_t)vmlal_high_u16((uint32x4_t)v3257, *v3254, v3261);
                                                  v3256 = (int32x4_t)vmlal_u16((uint32x4_t)v3256, *(uint16x4_t *)v3254->i8, *(uint16x4_t *)v3261.i8);
                                                  v3253 -= 2;
                                                  v3254 += 2;
                                                  v3255 -= 16;
                                                }
                                                while (v3255);
                                                v3246 = vaddvq_s32(vaddq_s32(vaddq_s32(v3256, v3252), vaddq_s32(v3257, v3251)));
                                                if (v3248 == (v3248 & 0xFFFFFFFFFFFFFFF0))
                                                  goto LABEL_2143;
                                              }
                                              else
                                              {
                                                v3249 = (int)v3092 - 2;
                                                v3250 = v3244;
                                              }
                                              v3263 = v3089 + v3090 * v3085;
                                              v3264 = (unsigned __int16 *)v13 + v3250;
                                              do
                                              {
                                                v3265 = *v3264++;
                                                v3246 += v3265 * *(unsigned __int16 *)(v3263 + 2 * v3249);
                                                v8 = v3249-- < v3152;
                                              }
                                              while (!v8);
LABEL_2143:
                                              v541 = v3581;
                                              v3581[v3245] = v3246 >> 15;
LABEL_2144:
                                              memcpy(v3091, v541, 2 * v3092);
                                              ++v3086;
                                              v3084 = v3573;
                                              v3085 += 2;
                                              if (v3086 >= *((int *)v3573 + 3))
                                                goto LABEL_2329;
                                            }
                                          }
                                        }
                                        v3022 = *v3573;
                                        v3023 = v3573[2];
                                        v3024 = (_QWORD)v3023 * (v3527 - 1);
                                        v3025 = *a2;
                                        v3026 = a2[2];
                                        v3027 = v3026 * v3015;
                                        if (v3015 > v3527 + 3)
                                        {
                                          if (v3015 >= v3507)
                                          {
                                            v3028 = 0;
                                            while (1)
                                            {
                                              if (v3018 >= 0x10)
                                              {
                                                v3031 = 0uLL;
                                                v3032 = v3018 & 0xFFFFFFFFFFFFFFF0;
                                                v3033 = (uint16x8_t *)&v13[2];
                                                v3034 = 0uLL;
                                                v3035 = 0uLL;
                                                v3036 = 0uLL;
                                                do
                                                {
                                                  v3037 = v3033[-1];
                                                  v3034 = (int32x4_t)vaddw_high_u16((uint32x4_t)v3034, v3037);
                                                  v3031 = (int32x4_t)vaddw_u16((uint32x4_t)v3031, *(uint16x4_t *)v3037.i8);
                                                  v3036 = (int32x4_t)vaddw_high_u16((uint32x4_t)v3036, *v3033);
                                                  v3035 = (int32x4_t)vaddw_u16((uint32x4_t)v3035, *(uint16x4_t *)v3033->i8);
                                                  v3033 += 2;
                                                  v3032 -= 16;
                                                }
                                                while (v3032);
                                                v3030 = vaddvq_s32(vaddq_s32(vaddq_s32(v3035, v3031), vaddq_s32(v3036, v3034)));
                                                v3029 = v3018 & 0x7FFFFFFFFFFFFFF0;
                                                if (v3018 == (v3018 & 0x7FFFFFFFFFFFFFF0))
                                                  goto LABEL_2106;
                                              }
                                              else
                                              {
                                                v3029 = 0;
                                                v3030 = 0;
                                              }
                                              do
                                                v3030 += v13->u16[v3029++];
                                              while (v3018 != v3029);
LABEL_2106:
                                              *(_WORD *)(v3025 + 2 * (v3028 + v3027)) = (v3030
                                                                                       * v3022->u16[v3028 + v3024]) >> 15;
                                              if (++v3028 == v123)
                                                goto LABEL_2092;
                                            }
                                          }
                                          bzero((void *)(v3025 + 2 * (v3535 + v3486) * v3026), v3482);
                                          goto LABEL_2092;
                                        }
                                        v3038 = (v3501 - v3019) & 0xFFFFFFFFFFFFFFFELL;
                                        if (v3015 < v3507)
                                        {
                                          v3039 = 0;
                                          v3040 = v3501 - v3021;
                                          v3041 = (v3501 - v3021) & 0xFFFFFFFFFFFFFFFELL;
                                          v3042 = (uint64_t)v3022->i64 + v3496 * (_QWORD)v3023;
                                          v3043 = (uint64_t)v3022->i64 + v3491 * (_QWORD)v3023;
                                          while (1)
                                          {
                                            if (v3040 >= 2)
                                            {
                                              v3047 = 0;
                                              v3048 = 0;
                                              v3049 = 0;
                                              v3050 = (v3501 - v3019) & 0xFFFFFFFFFFFFFFFELL;
                                              v3051 = (unsigned __int16 *)v13 + 1;
                                              do
                                              {
                                                v3052 = *(v3051 - 1);
                                                v3053 = *v3051;
                                                v3051 += 2;
                                                v3048 += v3052 * *(unsigned __int16 *)(v3042 + v3047);
                                                v3049 += v3053 * *(unsigned __int16 *)(v3043 + v3047);
                                                v3047 -= 4 * (_QWORD)v3023;
                                                v3050 -= 2;
                                              }
                                              while (v3050);
                                              v3045 = v3049 + v3048;
                                              v3046 = v3014 - v3041;
                                              v3044 = v3041;
                                              if (v3040 == v3041)
                                                goto LABEL_2116;
                                            }
                                            else
                                            {
                                              v3044 = 0;
                                              v3045 = 0;
                                              v3046 = (int)v3527 - 2;
                                            }
                                            v3054 = v3046 + 5;
                                            v3055 = (unsigned __int16 *)v3022 + v3039 + (_QWORD)v3023 * v3046;
                                            v3056 = (unsigned __int16 *)v13 + v3044;
                                            do
                                            {
                                              v3057 = *v3056++;
                                              v3045 += v3057 * *v3055;
                                              --v3054;
                                              v3055 -= (uint64_t)v3023;
                                            }
                                            while (v3054 >= v3015);
LABEL_2116:
                                            *(_WORD *)(v3025 + 2 * (v3039 + v3027)) = v3045 >> 15;
                                            ++v3039;
                                            v3042 += 2;
                                            v3043 += 2;
                                            if (v3039 == v123)
                                              goto LABEL_2092;
                                          }
                                        }
                                        v3058 = 0;
                                        v3059 = v3501 - v3020;
                                        v3551 = v3014 - ((v3501 - v3020) & 0xFFFFFFFFFFFFFFFELL);
                                        v3564 = (v3501 - v3020) & 0xFFFFFFFFFFFFFFFELL;
                                        v3060 = (uint64_t)v3022->i64 + v3496 * (_QWORD)v3023;
                                        v3061 = (uint64_t)v3022->i64 + v3491 * (_QWORD)v3023;
                                        while (v3018 >= 0x10)
                                        {
                                          v3064 = 0uLL;
                                          v3065 = v3018 & 0xFFFFFFFFFFFFFFF0;
                                          v3066 = (uint16x8_t *)&v13[2];
                                          v3067 = 0uLL;
                                          v3068 = 0uLL;
                                          v3069 = 0uLL;
                                          do
                                          {
                                            v3070 = v3066[-1];
                                            v3067 = (int32x4_t)vaddw_high_u16((uint32x4_t)v3067, v3070);
                                            v3064 = (int32x4_t)vaddw_u16((uint32x4_t)v3064, *(uint16x4_t *)v3070.i8);
                                            v3069 = (int32x4_t)vaddw_high_u16((uint32x4_t)v3069, *v3066);
                                            v3068 = (int32x4_t)vaddw_u16((uint32x4_t)v3068, *(uint16x4_t *)v3066->i8);
                                            v3066 += 2;
                                            v3065 -= 16;
                                          }
                                          while (v3065);
                                          v3063 = vaddvq_s32(vaddq_s32(vaddq_s32(v3068, v3064), vaddq_s32(v3069, v3067)));
                                          v3062 = v3018 & 0x7FFFFFFFFFFFFFF0;
                                          if (v3018 != (v3018 & 0x7FFFFFFFFFFFFFF0))
                                            goto LABEL_2132;
LABEL_2133:
                                          v3071 = v3063 * v3022->u16[v3058 + v3024];
                                          if (v3059 >= 2)
                                          {
                                            v3074 = 0;
                                            v3075 = 0;
                                            v3076 = v3017;
                                            v3077 = v3038;
                                            do
                                            {
                                              v3078 = *(v3076 - 1);
                                              v3079 = *v3076;
                                              v3076 += 2;
                                              v3071 += v3078 * *(unsigned __int16 *)(v3060 + v3074);
                                              v3075 += v3079 * *(unsigned __int16 *)(v3061 + v3074);
                                              v3074 -= 4 * (_QWORD)v3023;
                                              v3077 -= 2;
                                            }
                                            while (v3077);
                                            v3071 += v3075;
                                            v3073 = v3018 + v3564;
                                            v3072 = v3551;
                                            v123 = v3567;
                                            if (v3059 == v3564)
                                              goto LABEL_2126;
                                          }
                                          else
                                          {
                                            v3072 = (int)v3527 - 2;
                                            v3073 = v3018;
                                          }
                                          v3080 = v3072 + 5;
                                          v3081 = (unsigned __int16 *)v3022 + v3058 + (_QWORD)v3023 * v3072;
                                          v3082 = (unsigned __int16 *)v13 + v3073;
                                          do
                                          {
                                            v3083 = *v3082++;
                                            v3071 += v3083 * *v3081;
                                            --v3080;
                                            v3081 -= (uint64_t)v3023;
                                          }
                                          while (v3080 >= v3015);
LABEL_2126:
                                          *(_WORD *)(v3025 + 2 * (v3058 + v3027)) = v3071 >> 15;
                                          ++v3058;
                                          v3060 += 2;
                                          v3061 += 2;
                                          if (v3058 == v123)
                                            goto LABEL_2092;
                                        }
                                        v3062 = 0;
                                        v3063 = 0;
                                        do
LABEL_2132:
                                          v3063 += v13->u16[v3062++];
                                        while (v3018 != v3062);
                                        goto LABEL_2133;
                                      }
                                    }
                                  }
                                }
                                v2855 = v123 - v2743;
                                v2856 = (_WORD *)(v3562 + 2 * v2743 + 8 * v825);
                                v2857 = (unsigned __int16 *)v124 + v2743;
                                do
                                {
                                  v2858 = &v2857[(unint64_t)v126 / 2 + (unint64_t)v126 / 2];
                                  v2859 = *v2858;
                                  v2860 = &v2858[(unint64_t)v126 / 2];
                                  v2861 = (v13->u16[1] + v13->u16[0]) * *v2857
                                        + v13->u16[2] * v2857[(unint64_t)v126 / 2]
                                        + v13->u16[3] * v2859
                                        + v13[1].u16[0] * *v2860;
                                  v2862 = &v2860[(unint64_t)v126 / 2];
                                  v2863 = *v2862;
                                  v2864 = &v2862[(unint64_t)v126 / 2];
                                  v2865 = v2861 + v13[1].u16[1] * v2863;
                                  v2866 = *v2864;
                                  v2867 = &v2864[(unint64_t)v126 / 2];
                                  *v2856++ = (v2865
                                            + v13[1].u16[2] * v2866
                                            + v13[1].u16[3] * *v2867
                                            + v13[2].u16[0] * v2867[(unint64_t)v126 / 2]
                                            + v13[2].u16[1]
                                            * v2867[(unint64_t)v126 / 2 + (unint64_t)v126 / 2]
                                            + v13[2].u16[2]
                                            * v2867[(unint64_t)v126 / 2
                                                                + (unint64_t)v126 / 2
                                                                + (unint64_t)v126 / 2]) >> 15;
                                  ++v2857;
                                  --v2855;
                                }
                                while (v2855);
                                goto LABEL_1989;
                              }
                            }
                          }
                        }
                      }
                      else
                      {
                        v1233 = 4 * v125;
                        v1234 = 0;
                      }
                      v2735 = v123 - v1234;
                      v2736 = 2 * v1234;
                      v2737 = (_WORD *)(v127 + 2 * v1234 + 6 * v825);
                      v2738 = (uint16x4_t *)((char *)v124 + v2736);
                      do
                      {
                        v2739 = (unsigned __int16 *)((char *)v2738 + v126 + v126);
                        v2740 = &v2739[(unint64_t)v126 / 2 + (unint64_t)v126 / 2];
                        v2741 = (v13->u16[1] + v13->u16[0] + v13->u16[2]) * v2738->u16[0]
                              + v13->u16[3] * v2738->u16[v125]
                              + v13[1].u16[0] * *v2739
                              + v13[1].u16[1] * v2739[v125];
                        LODWORD(v2739) = *v2740;
                        v2742 = &v2740[(unint64_t)v126 / 2];
                        *v2737++ = (v2741
                                  + v13[1].u16[2] * (_DWORD)v2739
                                  + v13[1].u16[3] * *v2742
                                  + v13[2].u16[0] * v2742[(unint64_t)v126 / 2]
                                  + v13[2].u16[1] * v2742[(unint64_t)v126 / 2 + (unint64_t)v126 / 2]
                                  + v13[2].u16[2]
                                  * v2742[(unint64_t)v126 / 2 + (unint64_t)v126 / 2 + v125]) >> 15;
                        v2738 = (uint16x4_t *)((char *)v2738 + 2);
                        --v2735;
                      }
                      while (v2735);
                      goto LABEL_1908;
                    }
                  }
                }
                else
                {
                  v41 = a2;
                  v123 = v3567;
                  v825 = v3575;
                }
              }
              v1223 = v123 - v1136;
              v1224 = 2 * v1136;
              v1225 = (_WORD *)(v127 + 2 * v1136 + 4 * v825);
              v1226 = (uint16x4_t *)((char *)v124 + v1224);
              do
              {
                v1227 = (unsigned __int16 *)((char *)v1226 + v126 + v126);
                v1228 = *v1227;
                v1229 = &v1227[(unint64_t)v126 / 2];
                v1230 = vaddvq_s32((int32x4_t)vmovl_u16(*v13)) * v1226->u16[0]
                      + v13[1].u16[0] * v1226->u16[v125]
                      + v13[1].u16[1] * v1228;
                v1231 = *v1229;
                v1232 = &v1229[(unint64_t)v126 / 2];
                *v1225++ = (v1230
                          + v13[1].u16[2] * v1231
                          + v13[1].u16[3] * *v1232
                          + v13[2].u16[0] * v1232[(unint64_t)v126 / 2]
                          + v13[2].u16[1] * v1232[(unint64_t)v126 / 2 + (unint64_t)v126 / 2]
                          + v13[2].u16[2]
                          * v1232[(unint64_t)v126 / 2
                                              + (unint64_t)v126 / 2
                                              + (unint64_t)v126 / 2]) >> 15;
                v1226 = (uint16x4_t *)((char *)v1226 + 2);
                --v1223;
              }
              while (v1223);
              goto LABEL_864;
            }
          }
        }
        else
        {
          v41 = a2;
          v123 = v3567;
        }
      }
      else
      {
        v827 = 0;
      }
      v1130 = v123 - v827;
      v1131 = (_WORD *)(v127 + 2 * (v827 + v825));
      v1132 = (unsigned __int16 *)v124 + v827;
      do
      {
        v1133 = &v1132[(unint64_t)v126 / 2 + (unint64_t)v126 / 2];
        v1134 = *v1133;
        v1135 = &v1133[(unint64_t)v126 / 2];
        *v1131++ = ((vaddvq_s32((int32x4_t)vmovl_u16(*v13)) + v13[1].u16[0]) * *v1132
                  + v13[1].u16[1] * v1132[(unint64_t)v126 / 2]
                  + v13[1].u16[2] * v1134
                  + v13[1].u16[3] * *v1135
                  + v13[2].u16[0] * v1135[(unint64_t)v126 / 2]
                  + v13[2].u16[1] * v1135[(unint64_t)v126 / 2 + (unint64_t)v126 / 2]
                  + v13[2].u16[2]
                  * v1135[(unint64_t)v126 / 2
                                      + (unint64_t)v126 / 2
                                      + (unint64_t)v126 / 2]) >> 15;
        ++v1132;
        --v1130;
      }
      while (v1130);
      goto LABEL_797;
    case 6:
      v131 = *((unsigned int *)v4 + 2);
      if ((int)v131 < 1)
      {
        v655 = (int *)v4 + 3;
        v656 = v4;
        v541 = v5;
        if (*((int *)v4 + 3) < 1)
          goto LABEL_2329;
        goto LABEL_1376;
      }
      v132 = (uint16x4_t *)*v4;
      v133 = (uint64_t)v4[2];
      v134 = *a2;
      v135 = v133;
      v136 = 4 * v133;
      v137 = 6 * v133;
      v138 = a2[2];
      v139 = v133;
      v140 = 2 * v131;
      v141 = 0;
      if (v131 < 8)
        goto LABEL_137;
      v142 = v134 + v140;
      v143 = v134 >= (unint64_t)v132 + 12 * v133 + v140 || (unint64_t)v132 + 12 * v133 >= v142;
      v144 = !v143;
      v146 = v134 < (unint64_t)v132 + 10 * v133 + v140 && (unint64_t)v132 + 10 * v133 < v142;
      v148 = v134 < (unint64_t)&v132[v139] + v140 && (unint64_t)&v132[v139] < v142;
      v150 = v134 < (unint64_t)v132 + v140 + v137 && (unint64_t)v132 + v137 < v142;
      v152 = v134 < (unint64_t)v132 + v136 + v140 && (unint64_t)v132 + v136 < v142;
      v154 = v134 < (unint64_t)v132 + v135 * 2 + v140 && (unint64_t)v132 + v135 * 2 < v142;
      v156 = v134 < (unint64_t)v132 + v140 && (unint64_t)v132 < v142;
      if ((unint64_t)v13 < v142 && v134 < (unint64_t)&v13[3] + 2)
      {
        v139 = v133;
LABEL_137:
        v216 = (_WORD *)(v134 + 2 * v141);
        v217 = (unsigned __int16 *)v132 + v141;
        v218 = v131 - v141;
        do
        {
          v219 = &v217[v135 + v135];
          v220 = *v219;
          v221 = &v219[v135];
          *v216++ = ((vaddvq_s32((int32x4_t)vmovl_u16(*v13)) + v13[1].u16[0] + v13[1].u16[1] + v13[1].u16[2]) * *v217
                   + v13[1].u16[3] * v217[v135]
                   + v13[2].u16[0] * v220
                   + v13[2].u16[1] * *v221
                   + v13[2].u16[2] * v221[v135]
                   + v13[2].u16[3] * v221[v135 + v135]
                   + v13[3].u16[0] * v221[v135 + v135 + v135]) >> 15;
          ++v217;
          --v218;
        }
        while (v218);
        goto LABEL_139;
      }
      v139 = v133;
      if ((v144 & 1) != 0)
        goto LABEL_137;
      if (v146)
        goto LABEL_137;
      if (v148)
        goto LABEL_137;
      if (v150)
        goto LABEL_137;
      if (v152)
        goto LABEL_137;
      if (v154)
        goto LABEL_137;
      if (v156)
        goto LABEL_137;
      v158 = (const __int16 *)v13;
      v159 = (uint16x4_t)vld1_dup_s16(v158++);
      v160 = (uint16x4_t)vld1_dup_s16(v158);
      v161 = vaddl_u16(v159, v160);
      v162 = (const __int16 *)v13 + 2;
      v163 = (uint16x4_t)vld1_dup_s16(v162);
      v164 = (const __int16 *)v13 + 3;
      v165 = (uint16x4_t)vld1_dup_s16(v164);
      v166 = vaddw_u16(vaddw_u16(v161, v163), v165);
      v167 = (const __int16 *)&v13[1];
      v168 = (uint16x4_t)vld1_dup_s16(v167);
      v169 = vaddw_u16(v166, v168);
      v170 = (const __int16 *)&v13[1] + 1;
      v171 = (uint16x4_t)vld1_dup_s16(v170);
      v172 = (const __int16 *)&v13[1] + 2;
      v173 = (uint16x4_t)vld1_dup_s16(v172);
      v174 = (int16x8_t)vaddw_u16(vaddw_u16(v169, v171), v173);
      v175 = (const __int16 *)&v13[1] + 3;
      v176 = (uint16x4_t)vld1_dup_s16(v175);
      v177 = (int16x8_t)vmovl_u16(v176);
      v178 = (const __int16 *)&v13[2];
      v179 = (uint16x4_t)vld1_dup_s16(v178);
      v180 = (const __int16 *)&v13[2] + 1;
      v181 = (uint16x4_t)vld1_dup_s16(v180);
      v182 = (int16x8_t)vmovl_u16(v179);
      v183 = (int16x8_t)vmovl_u16(v181);
      v184 = (const __int16 *)&v13[2] + 2;
      v185 = (uint16x4_t)vld1_dup_s16(v184);
      v186 = (int16x8_t)vmovl_u16(v185);
      v187 = (const __int16 *)&v13[2] + 3;
      v188 = (uint16x4_t)vld1_dup_s16(v187);
      v189 = (const __int16 *)&v13[3];
      v190 = (uint16x4_t)vld1_dup_s16(v189);
      v191 = (int16x8_t)vmovl_u16(v188);
      v192 = (int16x8_t)vmovl_u16(v190);
      v193 = (uint16x8_t)vuzp1q_s16(v174, v177);
      v194 = (uint16x4_t)vmovn_s32((int32x4_t)v177);
      v141 = v131 & 0xFFFFFFF8;
      v195 = (uint16x8_t)vuzp1q_s16(v174, v182);
      v196 = (uint16x4_t)vmovn_s32((int32x4_t)v182);
      v197 = (uint16x8_t)vuzp1q_s16(v174, v183);
      v198 = (uint16x4_t)vmovn_s32((int32x4_t)v183);
      v199 = (uint16x8_t)vuzp1q_s16(v174, v186);
      v200 = (uint16x4_t)vmovn_s32((int32x4_t)v186);
      v201 = (uint16x8_t)vuzp1q_s16(v174, v191);
      v202 = (uint16x4_t)vmovn_s32((int32x4_t)v191);
      v203 = (uint16x8_t)vuzp1q_s16(v174, v192);
      v204 = (uint16x4_t)vmovn_s32((int32x4_t)v192);
      v205 = v141;
      v206 = (int16x8_t *)*a2;
      v207 = *v4;
      do
      {
        v208 = *(uint16x8_t *)((char *)v207 + 2 * v133);
        v209 = (uint16x8_t *)((char *)v207 + v135 * 2 + v135 * 2);
        v210 = vmlal_high_u16(vmlal_high_u16((uint32x4_t)vmulq_s32((int32x4_t)v174, (int32x4_t)vmovl_high_u16(*v207)), v193, v208), v195, *v209);
        v211 = vmlal_u16(vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v174, (int32x4_t)vmovl_u16(*(uint16x4_t *)v207->i8)), v194, *(uint16x4_t *)v208.i8), v196, *(uint16x4_t *)v209->i8);
        v212 = (uint16x8_t *)((char *)v209 + v135 * 2);
        v213 = vmlal_high_u16(v210, v197, *v212);
        v214 = vmlal_u16(v211, v198, *(uint16x4_t *)v212->i8);
        v215 = (uint16x4_t *)&v212->i8[v135 * 2];
        *v206++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v214, v200, *v215), v202, *(uint16x4_t *)((char *)v215 + 2 * v133)), v204, *(uint16x4_t *)((char *)v215 + 2 * v133 + 2 * v133)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v213, v199, *(uint16x8_t *)v215->i8), v201, *(uint16x8_t *)&v215->i8[2 * v133]), v203, *(uint16x8_t *)&v215->i8[2 * v133 + 2 * v133]), 0xFuLL);
        ++v207;
        v205 -= 8;
      }
      while (v205);
      if (v141 != v131)
        goto LABEL_137;
LABEL_139:
      v3483 = 2 * v131;
      v222 = 0;
      if (v131 < 8)
        goto LABEL_204;
      v223 = v134 + 2 * v138;
      v224 = v134 + 2 * v138 + v140;
      v225 = (unint64_t)v132 + 14 * v133 + v140;
      v226 = (unint64_t)v132 + 12 * v133 + v140;
      v227 = (unint64_t)v132 + 10 * v133 + v140;
      v228 = (unint64_t)&v132[v139];
      v229 = (unint64_t)&v132[v139] + v140;
      v230 = (unint64_t)v132 + v137 + v140;
      v231 = (unint64_t)v132 + v136 + v140;
      v232 = (unint64_t)v132 + v135 * 2 + v140;
      v233 = (unint64_t)v132 + v140;
      v235 = v223 < v225 && (unint64_t)v132 + 14 * v133 < v224;
      v237 = v223 < v226 && (unint64_t)v132 + 12 * v133 < v224;
      v239 = v223 < v227 && (unint64_t)v132 + 10 * v133 < v224;
      v241 = v223 < v229 && v228 < v224;
      v243 = v223 < v230 && (unint64_t)v132 + v137 < v224;
      v245 = v223 < v231 && (unint64_t)v132 + v136 < v224;
      v247 = v223 < v232 && (unint64_t)v132 + v135 * 2 < v224;
      v249 = v223 < v233 && (unint64_t)v132 < v224;
      if ((unint64_t)v13 >= v224 || v223 >= (unint64_t)&v13[3] + 2)
      {
        v4 = v3573;
        v139 = v133;
        v140 = 2 * v131;
        v136 = 4 * v133;
        if (!v235 && !v237 && !v239 && !v241 && !v243 && !v245 && !v247 && !v249)
        {
          v251 = (const __int16 *)v13;
          v252 = (uint16x4_t)vld1_dup_s16(v251++);
          v253 = (uint16x4_t)vld1_dup_s16(v251);
          v254 = (const __int16 *)v13 + 2;
          v255 = (uint16x4_t)vld1_dup_s16(v254);
          v256 = vaddw_u16(vaddl_u16(v252, v253), v255);
          v257 = (const __int16 *)v13 + 3;
          v258 = (uint16x4_t)vld1_dup_s16(v257);
          v259 = vaddw_u16(v256, v258);
          v260 = (const __int16 *)&v13[1];
          v261 = (uint16x4_t)vld1_dup_s16(v260);
          v262 = (const __int16 *)&v13[1] + 1;
          v263 = (uint16x4_t)vld1_dup_s16(v262);
          v264 = (int16x8_t)vaddw_u16(vaddw_u16(v259, v261), v263);
          v265 = (const __int16 *)&v13[1] + 2;
          v266 = (uint16x4_t)vld1_dup_s16(v265);
          v267 = (int16x8_t)vmovl_u16(v266);
          v268 = (const __int16 *)&v13[1] + 3;
          v269 = (uint16x4_t)vld1_dup_s16(v268);
          v270 = (const __int16 *)&v13[2];
          v271 = (uint16x4_t)vld1_dup_s16(v270);
          v272 = (int16x8_t)vmovl_u16(v269);
          v273 = (int16x8_t)vmovl_u16(v271);
          v274 = (const __int16 *)&v13[2] + 1;
          v275 = (uint16x4_t)vld1_dup_s16(v274);
          v276 = (int16x8_t)vmovl_u16(v275);
          v277 = (const __int16 *)&v13[2] + 2;
          v278 = (uint16x4_t)vld1_dup_s16(v277);
          v279 = (const __int16 *)&v13[2] + 3;
          v280 = (uint16x4_t)vld1_dup_s16(v279);
          v281 = (int16x8_t)vmovl_u16(v278);
          v282 = (int16x8_t)vmovl_u16(v280);
          v283 = (const __int16 *)&v13[3];
          v284 = (uint16x4_t)vld1_dup_s16(v283);
          v285 = (int16x8_t)vmovl_u16(v284);
          v286 = (uint16x8_t)vuzp1q_s16(v264, v267);
          v287 = (uint16x4_t)vmovn_s32((int32x4_t)v267);
          v222 = v131 & 0xFFFFFFF8;
          v288 = (uint16x8_t)vuzp1q_s16(v264, v272);
          v289 = (int16x8_t *)(v134 + 2 * v138);
          v290 = (uint16x4_t)vmovn_s32((int32x4_t)v272);
          v291 = (uint16x8_t)vuzp1q_s16(v264, v273);
          v292 = (uint16x4_t)vmovn_s32((int32x4_t)v273);
          v293 = (uint16x8_t)vuzp1q_s16(v264, v276);
          v294 = (uint16x4_t)vmovn_s32((int32x4_t)v276);
          v295 = (uint16x8_t)vuzp1q_s16(v264, v281);
          v296 = (uint16x4_t)vmovn_s32((int32x4_t)v281);
          v297 = (uint16x8_t)vuzp1q_s16(v264, v282);
          v298 = (uint16x4_t)vmovn_s32((int32x4_t)v282);
          v299 = (uint16x8_t)vuzp1q_s16(v264, v285);
          v300 = (uint16x4_t)vmovn_s32((int32x4_t)v285);
          v301 = v222;
          v302 = (uint16x8_t *)v132;
          do
          {
            v303 = *(uint16x8_t *)((char *)v302 + 2 * v133);
            v304 = vmlal_high_u16((uint32x4_t)vmulq_s32((int32x4_t)v264, (int32x4_t)vmovl_high_u16(*v302)), v286, v303);
            v305 = vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v264, (int32x4_t)vmovl_u16(*(uint16x4_t *)v302->i8)), v287, *(uint16x4_t *)v303.i8);
            v306 = (uint16x4_t *)&v302->i8[v135 * 2 + v135 * 2];
            v307 = *(uint16x8_t *)v306->i8;
            v308 = vmlal_u16(v305, v290, *v306);
            v309 = (uint16x8_t *)((char *)v306 + v135 * 2);
            v310 = vmlal_high_u16(vmlal_high_u16(v304, v288, v307), v291, *v309);
            v311 = vmlal_u16(v308, v292, *(uint16x4_t *)v309->i8);
            v312 = (uint16x8_t *)((char *)v309 + v135 * 2);
            v313 = vmlal_high_u16(v310, v293, *v312);
            v314 = vmlal_u16(v311, v294, *(uint16x4_t *)v312->i8);
            v315 = (uint16x4_t *)&v312->i8[v135 * 2];
            *v289++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v314, v296, *v315), v298, *(uint16x4_t *)((char *)v315 + 2 * v133)), v300, *(uint16x4_t *)((char *)v315 + 2 * v133 + 2 * v133)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v313, v295, *(uint16x8_t *)v315->i8), v297, *(uint16x8_t *)&v315->i8[2 * v133]), v299, *(uint16x8_t *)&v315->i8[2 * v133 + 2 * v133]), 0xFuLL);
            ++v302;
            v301 -= 8;
          }
          while (v301);
          if (v222 == v131)
          {
LABEL_206:
            v3568 = v131;
            v325 = 0;
            if (v131 >= 8)
            {
              v326 = v134 + 4 * v138;
              v327 = v134 + 4 * v138 + v140;
              v328 = (unint64_t)&v132[2 * v133] + v140;
              v329 = (unint64_t)v132 + 14 * v133 + v140;
              v330 = (unint64_t)v132 + 12 * v133 + v140;
              v331 = (unint64_t)v132 + 10 * v133 + v140;
              v332 = (unint64_t)&v132[v139];
              v333 = (unint64_t)&v132[v139] + v140;
              v334 = (unint64_t)v132 + v137;
              v335 = v136;
              v336 = (unint64_t)v132 + v137 + v140;
              v337 = (unint64_t)v132 + v335;
              v338 = v335;
              v339 = v140;
              v340 = (unint64_t)v132 + v335 + v140;
              v341 = (unint64_t)v132 + v135 * 2 + v339;
              v342 = (unint64_t)v132 + v339;
              v344 = v326 < v328 && (unint64_t)&v132[2 * v133] < v327;
              v346 = v326 < v329 && (unint64_t)v132 + 14 * v133 < v327;
              v348 = v326 < v330 && (unint64_t)v132 + 12 * v133 < v327;
              v350 = v326 < v331 && (unint64_t)v132 + 10 * v133 < v327;
              v352 = v326 < v333 && v332 < v327;
              v354 = v326 < v336 && v334 < v327;
              v356 = v326 < v340 && v337 < v327;
              v358 = v326 < v341 && (unint64_t)v132 + v135 * 2 < v327;
              v360 = v326 < v342 && (unint64_t)v132 < v327;
              v361 = (unint64_t)v13 >= v327 || v326 >= (unint64_t)&v13[3] + 2;
              if (!v361 || v344)
              {
                v4 = v3573;
                v139 = v133;
                v140 = 2 * v131;
                v136 = v338;
                v137 = 6 * v133;
              }
              else
              {
                v4 = v3573;
                v139 = v133;
                v140 = 2 * v131;
                v136 = v338;
                v137 = 6 * v133;
                if (!v346 && !v348 && !v350 && !v352 && !v354 && !v356 && !v358 && !v360)
                {
                  v362 = (const __int16 *)v13;
                  v363 = (uint16x4_t)vld1_dup_s16(v362++);
                  v364 = (uint16x4_t)vld1_dup_s16(v362);
                  v365 = vaddl_u16(v363, v364);
                  v366 = (const __int16 *)v13 + 2;
                  v367 = (uint16x4_t)vld1_dup_s16(v366);
                  v368 = vaddw_u16(v365, v367);
                  v369 = (const __int16 *)v13 + 3;
                  v370 = (uint16x4_t)vld1_dup_s16(v369);
                  v371 = (const __int16 *)&v13[1];
                  v372 = (uint16x4_t)vld1_dup_s16(v371);
                  v373 = (int16x8_t)vaddw_u16(vaddw_u16(v368, v370), v372);
                  v374 = (const __int16 *)&v13[1] + 1;
                  v375 = (uint16x4_t)vld1_dup_s16(v374);
                  v376 = (int16x8_t)vmovl_u16(v375);
                  v377 = (const __int16 *)&v13[1] + 2;
                  v378 = (uint16x4_t)vld1_dup_s16(v377);
                  v379 = (const __int16 *)&v13[1] + 3;
                  v380 = (uint16x4_t)vld1_dup_s16(v379);
                  v381 = (int16x8_t)vmovl_u16(v378);
                  v382 = (int16x8_t)vmovl_u16(v380);
                  v383 = (const __int16 *)&v13[2];
                  v384 = (uint16x4_t)vld1_dup_s16(v383);
                  v385 = (int16x8_t)vmovl_u16(v384);
                  v386 = (const __int16 *)&v13[2] + 1;
                  v387 = (uint16x4_t)vld1_dup_s16(v386);
                  v388 = (const __int16 *)&v13[2] + 2;
                  v389 = (uint16x4_t)vld1_dup_s16(v388);
                  v390 = (int16x8_t)vmovl_u16(v387);
                  v391 = (int16x8_t)vmovl_u16(v389);
                  v392 = (const __int16 *)&v13[2] + 3;
                  v393 = (uint16x4_t)vld1_dup_s16(v392);
                  v394 = (int16x8_t)vmovl_u16(v393);
                  v395 = (const __int16 *)&v13[3];
                  v396 = (uint16x4_t)vld1_dup_s16(v395);
                  v397 = (int16x8_t)vmovl_u16(v396);
                  v398 = (uint16x8_t)vuzp1q_s16(v373, v376);
                  v399 = (uint16x4_t)vmovn_s32((int32x4_t)v376);
                  v325 = v131 & 0xFFFFFFF8;
                  v400 = (uint16x8_t)vuzp1q_s16(v373, v381);
                  v401 = (int16x8_t *)(v134 + 4 * v138);
                  v402 = (uint16x4_t)vmovn_s32((int32x4_t)v381);
                  v403 = (uint16x8_t)vuzp1q_s16(v373, v382);
                  v404 = (uint16x4_t)vmovn_s32((int32x4_t)v382);
                  v405 = (uint16x8_t)vuzp1q_s16(v373, v385);
                  v406 = (uint16x4_t)vmovn_s32((int32x4_t)v385);
                  v407 = (uint16x8_t)vuzp1q_s16(v373, v390);
                  v408 = (uint16x4_t)vmovn_s32((int32x4_t)v390);
                  v409 = (uint16x8_t)vuzp1q_s16(v373, v391);
                  v410 = (uint16x4_t)vmovn_s32((int32x4_t)v391);
                  v411 = (uint16x8_t)vuzp1q_s16(v373, v394);
                  v412 = (uint16x4_t)vmovn_s32((int32x4_t)v394);
                  v413 = (uint16x8_t)vuzp1q_s16(v373, v397);
                  v414 = (uint16x4_t)vmovn_s32((int32x4_t)v397);
                  v415 = v325;
                  v416 = (uint16x8_t *)v132;
                  do
                  {
                    v417 = *(uint16x8_t *)((char *)v416 + 2 * v133);
                    v418 = (uint16x8_t *)((char *)v416 + v135 * 2 + v135 * 2);
                    v419 = vmlal_high_u16(vmlal_high_u16((uint32x4_t)vmulq_s32((int32x4_t)v373, (int32x4_t)vmovl_high_u16(*v416)), v398, v417), v400, *v418);
                    v420 = vmlal_u16(vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v373, (int32x4_t)vmovl_u16(*(uint16x4_t *)v416->i8)), v399, *(uint16x4_t *)v417.i8), v402, *(uint16x4_t *)v418->i8);
                    v421 = (uint16x4_t *)&v418->i8[v135 * 2];
                    v422 = *(uint16x8_t *)v421->i8;
                    v423 = vmlal_u16(v420, v404, *v421);
                    v424 = (uint16x8_t *)((char *)v421 + v135 * 2);
                    v425 = vmlal_high_u16(vmlal_high_u16(v419, v403, v422), v405, *v424);
                    v426 = vmlal_u16(v423, v406, *(uint16x4_t *)v424->i8);
                    v427 = (uint16x8_t *)((char *)v424 + v135 * 2);
                    v428 = vmlal_high_u16(v425, v407, *v427);
                    v429 = vmlal_u16(v426, v408, *(uint16x4_t *)v427->i8);
                    v430 = (uint16x4_t *)&v427->i8[v135 * 2];
                    *v401++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v429, v410, *v430), v412, *(uint16x4_t *)((char *)v430 + 2 * v133)), v414, *(uint16x4_t *)((char *)v430 + 2 * v133 + 2 * v133)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v428, v409, *(uint16x8_t *)v430->i8), v411, *(uint16x8_t *)&v430->i8[2 * v133]), v413, *(uint16x8_t *)&v430->i8[2 * v133 + 2 * v133]), 0xFuLL);
                    ++v416;
                    v415 -= 8;
                  }
                  while (v415);
                  if (v325 == v131)
                  {
LABEL_280:
                    if (v131 >= 8)
                    {
                      v439 = 0;
                      v828 = v134 + 6 * v138;
                      v829 = v134 + 6 * v138 + v140;
                      v831 = v828 < (unint64_t)v132 + 18 * v133 + v140
                          && (unint64_t)v132 + 18 * v133 < v829;
                      v833 = v828 < (unint64_t)&v132[2 * v133] + v140 && (unint64_t)&v132[2 * v133] < v829;
                      v835 = v828 < (unint64_t)v132 + 14 * v133 + v140
                          && (unint64_t)v132 + 14 * v133 < v829;
                      v837 = v828 < (unint64_t)v132 + 12 * v133 + v140
                          && (unint64_t)v132 + 12 * v133 < v829;
                      v839 = v828 < (unint64_t)v132 + 10 * v133 + v140
                          && (unint64_t)v132 + 10 * v133 < v829;
                      v841 = v828 < (unint64_t)&v132[v139] + v140 && (unint64_t)&v132[v139] < v829;
                      v843 = v828 < (unint64_t)v132 + v137 + v140 && (unint64_t)v132 + v137 < v829;
                      v845 = v828 < (unint64_t)v132 + v136 + v140 && (unint64_t)v132 + v136 < v829;
                      v847 = v828 < (unint64_t)v132 + v135 * 2 + v140 && (unint64_t)v132 + v135 * 2 < v829;
                      v849 = v828 < (unint64_t)v132 + v140 && (unint64_t)v132 < v829;
                      if (((unint64_t)v13 >= v829 || v828 >= (unint64_t)&v13[3] + 2)
                        && !v831
                        && !v833
                        && !v835
                        && !v837
                        && !v839
                        && !v841
                        && !v843
                        && !v845
                        && !v847
                        && !v849)
                      {
                        v851 = (const __int16 *)v13;
                        v852 = (uint16x4_t)vld1_dup_s16(v851++);
                        v853 = (uint16x4_t)vld1_dup_s16(v851);
                        v854 = vaddl_u16(v852, v853);
                        v855 = (const __int16 *)v13 + 2;
                        v856 = (uint16x4_t)vld1_dup_s16(v855);
                        v857 = vaddw_u16(v854, v856);
                        v858 = (const __int16 *)v13 + 3;
                        v859 = (uint16x4_t)vld1_dup_s16(v858);
                        v860 = (int16x8_t)vaddw_u16(v857, v859);
                        v861 = (const __int16 *)&v13[1];
                        v862 = (uint16x4_t)vld1_dup_s16(v861);
                        v863 = (int16x8_t)vmovl_u16(v862);
                        v864 = (const __int16 *)&v13[1] + 1;
                        v865 = (uint16x4_t)vld1_dup_s16(v864);
                        v866 = (int16x8_t)vmovl_u16(v865);
                        v867 = (const __int16 *)&v13[1] + 2;
                        v868 = (uint16x4_t)vld1_dup_s16(v867);
                        v869 = (int16x8_t)vmovl_u16(v868);
                        v870 = (const __int16 *)&v13[1] + 3;
                        v871 = (uint16x4_t)vld1_dup_s16(v870);
                        v872 = (int16x8_t)vmovl_u16(v871);
                        v873 = (const __int16 *)&v13[2];
                        v874 = (uint16x4_t)vld1_dup_s16(v873);
                        v875 = (int16x8_t)vmovl_u16(v874);
                        v876 = (const __int16 *)&v13[2] + 1;
                        v877 = (uint16x4_t)vld1_dup_s16(v876);
                        v878 = (int16x8_t)vmovl_u16(v877);
                        v879 = (const __int16 *)&v13[2] + 2;
                        v880 = (uint16x4_t)vld1_dup_s16(v879);
                        v881 = (int16x8_t)vmovl_u16(v880);
                        v882 = (const __int16 *)&v13[2] + 3;
                        v883 = (uint16x4_t)vld1_dup_s16(v882);
                        v884 = (int16x8_t)vmovl_u16(v883);
                        v885 = (const __int16 *)&v13[3];
                        v886 = (uint16x4_t)vld1_dup_s16(v885);
                        v887 = (int16x8_t)vmovl_u16(v886);
                        v439 = v131 & 0xFFFFFFF8;
                        v888 = (uint16x8_t)vuzp1q_s16(v860, v863);
                        v889 = (uint16x4_t)vmovn_s32((int32x4_t)v863);
                        v890 = (uint16x8_t)vuzp1q_s16(v860, v866);
                        v891 = (uint16x4_t)vmovn_s32((int32x4_t)v866);
                        v892 = (int16x8_t *)(v134 + 6 * v138);
                        v893 = (uint16x8_t)vuzp1q_s16(v860, v869);
                        v894 = (uint16x4_t)vmovn_s32((int32x4_t)v869);
                        v895 = (uint16x8_t)vuzp1q_s16(v860, v872);
                        v896 = (uint16x4_t)vmovn_s32((int32x4_t)v872);
                        v897 = (uint16x8_t)vuzp1q_s16(v860, v875);
                        v898 = (uint16x4_t)vmovn_s32((int32x4_t)v875);
                        v899 = (uint16x8_t)vuzp1q_s16(v860, v878);
                        v900 = (uint16x4_t)vmovn_s32((int32x4_t)v878);
                        v901 = (uint16x8_t)vuzp1q_s16(v860, v881);
                        v902 = (uint16x4_t)vmovn_s32((int32x4_t)v881);
                        v903 = (uint16x8_t)vuzp1q_s16(v860, v884);
                        v904 = (uint16x4_t)vmovn_s32((int32x4_t)v884);
                        v905 = (uint16x8_t)vuzp1q_s16(v860, v887);
                        v906 = (uint16x4_t)vmovn_s32((int32x4_t)v887);
                        v907 = v439;
                        v908 = (uint16x8_t *)v132;
                        do
                        {
                          v909 = *(uint16x8_t *)((char *)v908 + 2 * v133);
                          v910 = (uint16x8_t *)((char *)v908 + v135 * 2 + v135 * 2);
                          v911 = vmlal_high_u16(vmlal_high_u16((uint32x4_t)vmulq_s32((int32x4_t)v860, (int32x4_t)vmovl_high_u16(*v908)), v888, v909), v890, *v910);
                          v912 = vmlal_u16(vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v860, (int32x4_t)vmovl_u16(*(uint16x4_t *)v908->i8)), v889, *(uint16x4_t *)v909.i8), v891, *(uint16x4_t *)v910->i8);
                          v913 = (uint16x8_t *)((char *)v910 + v135 * 2);
                          v914 = vmlal_high_u16(v911, v893, *v913);
                          v915 = vmlal_u16(v912, v894, *(uint16x4_t *)v913->i8);
                          v916 = (uint16x4_t *)&v913->i8[v135 * 2];
                          v917 = *(uint16x8_t *)v916->i8;
                          v918 = vmlal_u16(v915, v896, *v916);
                          v919 = (uint16x8_t *)((char *)v916 + v135 * 2);
                          v920 = vmlal_high_u16(vmlal_high_u16(v914, v895, v917), v897, *v919);
                          v921 = vmlal_u16(v918, v898, *(uint16x4_t *)v919->i8);
                          v922 = (uint16x8_t *)((char *)v919 + v135 * 2);
                          v923 = vmlal_high_u16(v920, v899, *v922);
                          v924 = vmlal_u16(v921, v900, *(uint16x4_t *)v922->i8);
                          v925 = (uint16x4_t *)&v922->i8[v135 * 2];
                          *v892++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v924, v902, *v925), v904, *(uint16x4_t *)((char *)v925 + 2 * v133)), v906, *(uint16x4_t *)((char *)v925 + 2 * v133 + 2 * v133)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v923, v901, *(uint16x8_t *)v925->i8), v903, *(uint16x8_t *)&v925->i8[2 * v133]), v905, *(uint16x8_t *)&v925->i8[2 * v133 + 2 * v133]), 0xFuLL);
                          ++v908;
                          v907 -= 8;
                        }
                        while (v907);
                        if (v439 == v131)
                        {
LABEL_635:
                          v940 = 10 * v133;
                          if (v131 >= 8)
                          {
                            v941 = 0;
                            v1235 = v134 + 8 * v138;
                            v1236 = v134 + 8 * v138 + v140;
                            v1238 = v1235 < (unint64_t)v132 + 20 * v133 + v140
                                 && (unint64_t)v132 + 20 * v133 < v1236;
                            v1240 = v1235 < (unint64_t)v132 + 18 * v133 + v140
                                 && (unint64_t)v132 + 18 * v133 < v1236;
                            v1242 = v1235 < (unint64_t)&v132[2 * v133] + v140
                                 && (unint64_t)&v132[2 * v133] < v1236;
                            v1244 = v1235 < (unint64_t)v132 + 14 * v133 + v140
                                 && (unint64_t)v132 + 14 * v133 < v1236;
                            v1246 = v1235 < (unint64_t)v132 + 12 * v133 + v140
                                 && (unint64_t)v132 + 12 * v133 < v1236;
                            v1248 = v1235 < (unint64_t)v132 + v940 + v140
                                 && (unint64_t)v132 + v940 < v1236;
                            v1250 = v1235 < (unint64_t)&v132[v139] + v140
                                 && (unint64_t)&v132[v139] < v1236;
                            v1252 = v1235 < (unint64_t)v132 + v137 + v140
                                 && (unint64_t)v132 + v137 < v1236;
                            v1254 = v1235 < (unint64_t)v132 + v136 + v140
                                 && (unint64_t)v132 + v136 < v1236;
                            v1256 = v1235 < (unint64_t)v132 + v135 * 2 + v140
                                 && (unint64_t)v132 + v135 * 2 < v1236;
                            v1258 = v1235 < (unint64_t)v132 + v140 && (unint64_t)v132 < v1236;
                            v1259 = (unint64_t)v13 >= v1236 || v1235 >= (unint64_t)&v13[3] + 2;
                            if (!v1259 || v1238)
                            {
                              v139 = v133;
                            }
                            else
                            {
                              v139 = v133;
                              if (!v1240
                                && !v1242
                                && !v1244
                                && !v1246
                                && !v1248
                                && !v1250
                                && !v1252
                                && !v1254
                                && !v1256
                                && !v1258)
                              {
                                v1260 = (const __int16 *)v13;
                                v1261 = (uint16x4_t)vld1_dup_s16(v1260++);
                                v1262 = (uint16x4_t)vld1_dup_s16(v1260);
                                v1263 = (const __int16 *)v13 + 2;
                                v1264 = (uint16x4_t)vld1_dup_s16(v1263);
                                v1265 = (int16x8_t)vaddw_u16(vaddl_u16(v1261, v1262), v1264);
                                v1266 = (const __int16 *)v13 + 3;
                                v1267 = (uint16x4_t)vld1_dup_s16(v1266);
                                v1268 = (int16x8_t)vmovl_u16(v1267);
                                v1269 = (const __int16 *)&v13[1];
                                v1270 = (uint16x4_t)vld1_dup_s16(v1269);
                                v1271 = (const __int16 *)&v13[1] + 1;
                                v1272 = (uint16x4_t)vld1_dup_s16(v1271);
                                v1273 = (int16x8_t)vmovl_u16(v1270);
                                v1274 = (int16x8_t)vmovl_u16(v1272);
                                v1275 = (const __int16 *)&v13[1] + 2;
                                v1276 = (uint16x4_t)vld1_dup_s16(v1275);
                                v1277 = (int16x8_t)vmovl_u16(v1276);
                                v1278 = (const __int16 *)&v13[1] + 3;
                                v1279 = (uint16x4_t)vld1_dup_s16(v1278);
                                v1280 = (const __int16 *)&v13[2];
                                v1281 = (uint16x4_t)vld1_dup_s16(v1280);
                                v1282 = (int16x8_t)vmovl_u16(v1279);
                                v1283 = (int16x8_t)vmovl_u16(v1281);
                                v1284 = (const __int16 *)&v13[2] + 1;
                                v1285 = (uint16x4_t)vld1_dup_s16(v1284);
                                v1286 = (int16x8_t)vmovl_u16(v1285);
                                v1287 = (const __int16 *)&v13[2] + 2;
                                v1288 = (uint16x4_t)vld1_dup_s16(v1287);
                                v1289 = (const __int16 *)&v13[2] + 3;
                                v1290 = (uint16x4_t)vld1_dup_s16(v1289);
                                v1291 = (int16x8_t)vmovl_u16(v1288);
                                v1292 = (int16x8_t)vmovl_u16(v1290);
                                v1293 = (const __int16 *)&v13[3];
                                v1294 = (uint16x4_t)vld1_dup_s16(v1293);
                                v1295 = (int16x8_t)vmovl_u16(v1294);
                                v1296 = (uint16x8_t)vuzp1q_s16(v1265, v1268);
                                v1297 = (uint16x4_t)vmovn_s32((int32x4_t)v1268);
                                v941 = v131 & 0xFFFFFFF8;
                                v1298 = (uint16x8_t)vuzp1q_s16(v1265, v1273);
                                v1299 = (int16x8_t *)(v134 + 8 * v138);
                                v1300 = (uint16x4_t)vmovn_s32((int32x4_t)v1273);
                                v1301 = (uint16x8_t)vuzp1q_s16(v1265, v1274);
                                v1302 = (uint16x4_t)vmovn_s32((int32x4_t)v1274);
                                v1303 = (uint16x8_t)vuzp1q_s16(v1265, v1277);
                                v1304 = (uint16x4_t)vmovn_s32((int32x4_t)v1277);
                                v1305 = (uint16x8_t)vuzp1q_s16(v1265, v1282);
                                v1306 = (uint16x4_t)vmovn_s32((int32x4_t)v1282);
                                v1307 = (uint16x8_t)vuzp1q_s16(v1265, v1283);
                                v1308 = (uint16x4_t)vmovn_s32((int32x4_t)v1283);
                                v1309 = (uint16x8_t)vuzp1q_s16(v1265, v1286);
                                v1310 = (uint16x4_t)vmovn_s32((int32x4_t)v1286);
                                v1311 = (uint16x8_t)vuzp1q_s16(v1265, v1291);
                                v1312 = (uint16x4_t)vmovn_s32((int32x4_t)v1291);
                                v1313 = (uint16x8_t)vuzp1q_s16(v1265, v1292);
                                v1314 = (uint16x4_t)vmovn_s32((int32x4_t)v1292);
                                v1315 = (uint16x8_t)vuzp1q_s16(v1265, v1295);
                                v1316 = (uint16x4_t)vmovn_s32((int32x4_t)v1295);
                                v1317 = v941;
                                v1318 = (uint16x8_t *)v132;
                                do
                                {
                                  v1319 = *(uint16x8_t *)((char *)v1318 + 2 * v133);
                                  v1320 = vmlal_high_u16((uint32x4_t)vmulq_s32((int32x4_t)v1265, (int32x4_t)vmovl_high_u16(*v1318)), v1296, v1319);
                                  v1321 = vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v1265, (int32x4_t)vmovl_u16(*(uint16x4_t *)v1318->i8)), v1297, *(uint16x4_t *)v1319.i8);
                                  v1322 = (uint16x4_t *)&v1318->i8[v135 * 2 + v135 * 2];
                                  v1323 = *(uint16x8_t *)v1322->i8;
                                  v1324 = vmlal_u16(v1321, v1300, *v1322);
                                  v1325 = (uint16x8_t *)((char *)v1322 + v135 * 2);
                                  v1326 = vmlal_high_u16(vmlal_high_u16(v1320, v1298, v1323), v1301, *v1325);
                                  v1327 = vmlal_u16(v1324, v1302, *(uint16x4_t *)v1325->i8);
                                  v1328 = (uint16x8_t *)((char *)v1325 + v135 * 2);
                                  v1329 = vmlal_high_u16(v1326, v1303, *v1328);
                                  v1330 = vmlal_u16(v1327, v1304, *(uint16x4_t *)v1328->i8);
                                  v1331 = (uint16x4_t *)&v1328->i8[v135 * 2];
                                  v1332 = *(uint16x8_t *)v1331->i8;
                                  v1333 = vmlal_u16(v1330, v1306, *v1331);
                                  v1334 = (uint16x8_t *)((char *)v1331 + v135 * 2);
                                  v1335 = vmlal_high_u16(vmlal_high_u16(v1329, v1305, v1332), v1307, *v1334);
                                  v1336 = vmlal_u16(v1333, v1308, *(uint16x4_t *)v1334->i8);
                                  v1337 = (uint16x8_t *)((char *)v1334 + v135 * 2);
                                  v1338 = vmlal_high_u16(v1335, v1309, *v1337);
                                  v1339 = vmlal_u16(v1336, v1310, *(uint16x4_t *)v1337->i8);
                                  v1340 = (uint16x4_t *)&v1337->i8[v135 * 2];
                                  *v1299++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v1339, v1312, *v1340), v1314, *(uint16x4_t *)((char *)v1340 + 2 * v133)), v1316, *(uint16x4_t *)((char *)v1340 + 2 * v133 + 2 * v133)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v1338, v1311, *(uint16x8_t *)v1340->i8), v1313, *(uint16x8_t *)&v1340->i8[2 * v133]), v1315, *(uint16x8_t *)&v1340->i8[2 * v133 + 2 * v133]), 0xFuLL);
                                  ++v1318;
                                  v1317 -= 8;
                                }
                                while (v1317);
                                if (v941 == v131)
                                {
LABEL_953:
                                  if (v131 >= 8)
                                  {
                                    v1358 = 0;
                                    v1712 = v138;
                                    v1713 = v134 + 10 * v138;
                                    v1714 = v134 + 10 * v138 + v140;
                                    v1715 = 2 * v133;
                                    v1717 = v1713 < (unint64_t)v132 + 22 * v133 + v140
                                         && (unint64_t)v132 + 22 * v133 < v1714;
                                    v1718 = (unint64_t)&v132[v1715];
                                    v1720 = v1713 < (unint64_t)v132 + 20 * v133 + v140
                                         && (unint64_t)v132 + 20 * v133 < v1714;
                                    v1721 = (unint64_t)&v132[v1715] + v140;
                                    v1722 = v1715 * 8 - v135 * 2;
                                    v1724 = v1713 < (unint64_t)v132 + 18 * v133 + v140
                                         && (unint64_t)v132 + 18 * v133 < v1714;
                                    v143 = v1713 >= v1721;
                                    v1725 = (unint64_t)v132 + v1722;
                                    v1726 = (unint64_t)v132 + v1722 + v140;
                                    v1727 = 12 * v133;
                                    v1729 = !v143 && v1718 < v1714;
                                    v143 = v1713 >= v1726;
                                    v1730 = (unint64_t)v132 + v1727;
                                    v1732 = !v143 && v1725 < v1714;
                                    v143 = v1713 >= (unint64_t)v132 + v1727 + v140;
                                    v1733 = (unint64_t)v132 + v940;
                                    v1734 = (unint64_t)v132 + v940 + v140;
                                    v1736 = !v143 && v1730 < v1714;
                                    v1737 = v137;
                                    v1739 = v1713 < v1734 && v1733 < v1714;
                                    v1741 = v1713 < (unint64_t)&v132[v139] + v140
                                         && (unint64_t)&v132[v139] < v1714;
                                    v1743 = v1713 < (unint64_t)v132 + v1737 + v140
                                         && (unint64_t)v132 + v1737 < v1714;
                                    v1745 = v1713 < (unint64_t)v132 + v136 + v140
                                         && (unint64_t)v132 + v136 < v1714;
                                    v1747 = v1713 < (unint64_t)v132 + v135 * 2 + v140
                                         && (unint64_t)v132 + v135 * 2 < v1714;
                                    v1749 = v1713 < (unint64_t)v132 + v140 && (unint64_t)v132 < v1714;
                                    v138 = v1712;
                                    if (((unint64_t)v13 >= v1714 || v1713 >= (unint64_t)&v13[3] + 2)
                                      && !v1717
                                      && !v1720
                                      && !v1724
                                      && (v1729 & 1) == 0
                                      && (v1732 & 1) == 0
                                      && (v1736 & 1) == 0
                                      && !v1739
                                      && !v1741
                                      && !v1743
                                      && !v1745
                                      && !v1747
                                      && !v1749)
                                    {
                                      v1751 = (const __int16 *)v13;
                                      v1752 = (uint16x4_t)vld1_dup_s16(v1751++);
                                      v1753 = (uint16x4_t)vld1_dup_s16(v1751);
                                      v1754 = (int16x8_t)vaddl_u16(v1752, v1753);
                                      v1755 = (const __int16 *)v13 + 2;
                                      v1756 = (uint16x4_t)vld1_dup_s16(v1755);
                                      v1757 = (int16x8_t)vmovl_u16(v1756);
                                      v1758 = (const __int16 *)v13 + 3;
                                      v1759 = (uint16x4_t)vld1_dup_s16(v1758);
                                      v1760 = (int16x8_t)vmovl_u16(v1759);
                                      v1761 = (const __int16 *)&v13[1];
                                      v1762 = (uint16x4_t)vld1_dup_s16(v1761);
                                      v1763 = (int16x8_t)vmovl_u16(v1762);
                                      v1764 = (const __int16 *)&v13[1] + 1;
                                      v1765 = (uint16x4_t)vld1_dup_s16(v1764);
                                      v1766 = (int16x8_t)vmovl_u16(v1765);
                                      v1767 = (const __int16 *)&v13[1] + 2;
                                      v1768 = (uint16x4_t)vld1_dup_s16(v1767);
                                      v1769 = (int16x8_t)vmovl_u16(v1768);
                                      v1770 = (const __int16 *)&v13[1] + 3;
                                      v1771 = (uint16x4_t)vld1_dup_s16(v1770);
                                      v1772 = (int16x8_t)vmovl_u16(v1771);
                                      v1773 = (const __int16 *)&v13[2];
                                      v1774 = (uint16x4_t)vld1_dup_s16(v1773);
                                      v1775 = (int16x8_t)vmovl_u16(v1774);
                                      v1776 = (const __int16 *)&v13[2] + 1;
                                      v1777 = (uint16x4_t)vld1_dup_s16(v1776);
                                      v1778 = (int16x8_t)vmovl_u16(v1777);
                                      v1779 = (const __int16 *)&v13[2] + 2;
                                      v1780 = (uint16x4_t)vld1_dup_s16(v1779);
                                      v1781 = (int16x8_t)vmovl_u16(v1780);
                                      v1782 = (const __int16 *)&v13[2] + 3;
                                      v1783 = (uint16x4_t)vld1_dup_s16(v1782);
                                      v1784 = (int16x8_t)vmovl_u16(v1783);
                                      v1785 = (const __int16 *)&v13[3];
                                      v1786 = (uint16x4_t)vld1_dup_s16(v1785);
                                      v1787 = (int16x8_t)vmovl_u16(v1786);
                                      v1788 = (uint16x8_t)vuzp1q_s16(v1754, v1757);
                                      v1789 = (uint16x4_t)vmovn_s32((int32x4_t)v1757);
                                      v1358 = v131 & 0xFFFFFFF8;
                                      v1790 = (uint16x8_t)vuzp1q_s16(v1754, v1760);
                                      v1791 = (uint16x4_t)vmovn_s32((int32x4_t)v1760);
                                      v1792 = (int16x8_t *)(v134 + 10 * v1712);
                                      v1793 = (uint16x8_t)vuzp1q_s16(v1754, v1763);
                                      v1794 = (uint16x4_t)vmovn_s32((int32x4_t)v1763);
                                      v1795 = (uint16x8_t)vuzp1q_s16(v1754, v1766);
                                      v1796 = (uint16x4_t)vmovn_s32((int32x4_t)v1766);
                                      v1797 = (uint16x8_t)vuzp1q_s16(v1754, v1769);
                                      v1798 = (uint16x4_t)vmovn_s32((int32x4_t)v1769);
                                      v1799 = (uint16x8_t)vuzp1q_s16(v1754, v1772);
                                      v1800 = (uint16x4_t)vmovn_s32((int32x4_t)v1772);
                                      v1801 = (uint16x8_t)vuzp1q_s16(v1754, v1775);
                                      v1802 = (uint16x4_t)vmovn_s32((int32x4_t)v1775);
                                      v1803 = (uint16x8_t)vuzp1q_s16(v1754, v1778);
                                      v1804 = (uint16x4_t)vmovn_s32((int32x4_t)v1778);
                                      v1805 = (uint16x8_t)vuzp1q_s16(v1754, v1781);
                                      v1806 = (uint16x4_t)vmovn_s32((int32x4_t)v1781);
                                      v1807 = (uint16x8_t)vuzp1q_s16(v1754, v1784);
                                      v1808 = (uint16x4_t)vmovn_s32((int32x4_t)v1784);
                                      v1809 = (uint16x8_t)vuzp1q_s16(v1754, v1787);
                                      v1810 = (uint16x4_t)vmovn_s32((int32x4_t)v1787);
                                      v1811 = v1358;
                                      v1812 = (uint16x8_t *)v132;
                                      do
                                      {
                                        v1813 = *(uint16x8_t *)((char *)v1812 + v135 * 2);
                                        v1814 = (uint16x8_t *)((char *)v1812 + v135 * 2 + v135 * 2);
                                        v1815 = vmlal_high_u16(vmlal_high_u16((uint32x4_t)vmulq_s32((int32x4_t)v1754, (int32x4_t)vmovl_high_u16(*v1812)), v1788, v1813), v1790, *v1814);
                                        v1816 = vmlal_u16(vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)v1754, (int32x4_t)vmovl_u16(*(uint16x4_t *)v1812->i8)), v1789, *(uint16x4_t *)v1813.i8), v1791, *(uint16x4_t *)v1814->i8);
                                        v1817 = (uint16x4_t *)&v1814->i8[v135 * 2];
                                        v1818 = *(uint16x8_t *)v1817->i8;
                                        v1819 = vmlal_u16(v1816, v1794, *v1817);
                                        v1820 = (uint16x8_t *)((char *)v1817 + v135 * 2);
                                        v1821 = vmlal_high_u16(vmlal_high_u16(v1815, v1793, v1818), v1795, *v1820);
                                        v1822 = vmlal_u16(v1819, v1796, *(uint16x4_t *)v1820->i8);
                                        v1823 = (uint16x8_t *)((char *)v1820 + v135 * 2);
                                        v1824 = vmlal_high_u16(v1821, v1797, *v1823);
                                        v1825 = vmlal_u16(v1822, v1798, *(uint16x4_t *)v1823->i8);
                                        v1826 = (uint16x4_t *)&v1823->i8[v135 * 2];
                                        v1827 = *(uint16x8_t *)v1826->i8;
                                        v1828 = vmlal_u16(v1825, v1800, *v1826);
                                        v1829 = (uint16x8_t *)((char *)v1826 + v135 * 2);
                                        v1830 = vmlal_high_u16(vmlal_high_u16(v1824, v1799, v1827), v1801, *v1829);
                                        v1831 = vmlal_u16(v1828, v1802, *(uint16x4_t *)v1829->i8);
                                        v1832 = (uint16x8_t *)((char *)v1829 + v135 * 2);
                                        v1833 = vmlal_high_u16(v1830, v1803, *v1832);
                                        v1834 = vmlal_u16(v1831, v1804, *(uint16x4_t *)v1832->i8);
                                        v1835 = (uint16x4_t *)&v1832->i8[v135 * 2];
                                        *v1792++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v1834, v1806, *v1835), v1808, *(uint16x4_t *)((char *)v1835 + v135 * 2)), v1810, *(uint16x4_t *)((char *)v1835 + v135 * 2 + v135 * 2)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v1833, v1805, *(uint16x8_t *)v1835->i8), v1807, *(uint16x8_t *)&v1835->i8[v135 * 2]), v1809, *(uint16x8_t *)&v1835->i8[v135 * 2 + v135 * 2]),
                                                     0xFuLL);
                                        ++v1812;
                                        v1811 -= 8;
                                      }
                                      while (v1811);
                                      if (v1358 == v131)
                                        goto LABEL_1326;
                                    }
                                  }
                                  else
                                  {
                                    v1358 = 0;
                                  }
                                  v1836 = v131 - v1358;
                                  v1837 = (_WORD *)(v134 + 2 * v1358 + 10 * v138);
                                  v1838 = (unsigned __int16 *)v132 + v1358;
                                  do
                                  {
                                    v1839 = &v1838[v135 + v135];
                                    v1840 = &v1839[v135 + v135];
                                    v1841 = (v13->u16[0] + v13->u16[1]) * *v1838
                                          + v13->u16[2] * v1838[v135]
                                          + v13->u16[3] * *v1839
                                          + v13[1].u16[0] * v1839[v135];
                                    LODWORD(v1839) = *v1840;
                                    v1842 = &v1840[v135];
                                    v1843 = v1841 + v13[1].u16[1] * (_DWORD)v1839 + v13[1].u16[2] * *v1842;
                                    v1844 = &v1842[v135];
                                    LODWORD(v1839) = *v1844;
                                    v1845 = &v1844[v135];
                                    v1846 = v1843 + v13[1].u16[3] * (_DWORD)v1839;
                                    LODWORD(v1839) = *v1845;
                                    v1847 = &v1845[v135];
                                    *v1837++ = (v1846
                                              + v13[2].u16[0] * (_DWORD)v1839
                                              + v13[2].u16[1] * *v1847
                                              + v13[2].u16[2] * v1847[v135]
                                              + v13[2].u16[3] * v1847[v135 + v135]
                                              + v13[3].u16[0] * v1847[v135 + v135 + v135]) >> 15;
                                    ++v1838;
                                    --v1836;
                                  }
                                  while (v1836);
LABEL_1326:
                                  v3466 = (int *)v4 + 3;
                                  v3525 = *((int *)v4 + 3);
                                  if ((int)v3525 < 13)
                                  {
LABEL_1327:
                                    v1848 = 0;
                                    v1849 = *v3573;
                                    v1850 = v3573[2];
                                    v1851 = (_QWORD)v1850 * (v3525 - 1);
                                    v1852 = *a2;
                                    v1853 = (int)v3525 - 2;
                                    v1854 = (int)v3525 - 6;
                                    v3513 = v3525 - 7;
                                    v3516 = a2[2];
                                    v1855 = v1854 - 1;
                                    v3498 = v1853 + 6;
                                    v3503 = v1853 + 5;
                                    v1856 = 4 * (_QWORD)v1850;
                                    v3488 = (uint64_t)(*v3573)->i64 + 2 * (_QWORD)v1850 * (v1853 - 1);
                                    v3493 = (uint64_t)(*v3573)->i64 + 2 * (_QWORD)v1850 * v1853;
                                    v1857 = (unsigned __int16 *)v13 + 3;
                                    v1858 = 2;
                                    v3509 = v1854 - 1;
                                    while (1)
                                    {
                                      v1859 = v3503;
                                      v3530 = v1855;
                                      if (v1855 >= v3503)
                                        v1855 = v3503;
                                      if (v3509 + v1848 >= v3503)
                                        v1860 = v3503;
                                      else
                                        v1860 = v3509 + v1848;
                                      if (v3509 + v1848 < v3503)
                                        v1859 = v3509 + v1848;
                                      v1861 = v1854 * v3516;
                                      v3537 = v1848;
                                      if (v1854 <= v3525 + 4)
                                        break;
                                      if (v1854 >= v3513)
                                      {
                                        v1862 = 0;
                                        while (1)
                                        {
                                          if (v1858 >= 0x10)
                                          {
                                            v1865 = 0uLL;
                                            v1866 = v1858 & 0xFFFFFFFFFFFFFFF0;
                                            v1867 = (uint16x8_t *)&v13[2];
                                            v1868 = 0uLL;
                                            v1869 = 0uLL;
                                            v1870 = 0uLL;
                                            do
                                            {
                                              v1871 = v1867[-1];
                                              v1868 = (int32x4_t)vaddw_high_u16((uint32x4_t)v1868, v1871);
                                              v1865 = (int32x4_t)vaddw_u16((uint32x4_t)v1865, *(uint16x4_t *)v1871.i8);
                                              v1870 = (int32x4_t)vaddw_high_u16((uint32x4_t)v1870, *v1867);
                                              v1869 = (int32x4_t)vaddw_u16((uint32x4_t)v1869, *(uint16x4_t *)v1867->i8);
                                              v1867 += 2;
                                              v1866 -= 16;
                                            }
                                            while (v1866);
                                            v1864 = vaddvq_s32(vaddq_s32(vaddq_s32(v1869, v1865), vaddq_s32(v1870, v1868)));
                                            v1863 = v1858 & 0x7FFFFFFFFFFFFFF0;
                                            if (v1858 == (v1858 & 0x7FFFFFFFFFFFFFF0))
                                              goto LABEL_1340;
                                          }
                                          else
                                          {
                                            v1863 = 0;
                                            v1864 = 0;
                                          }
                                          do
                                            v1864 += v13->u16[v1863++];
                                          while (v1858 != v1863);
LABEL_1340:
                                          *(_WORD *)(v1852 + 2 * (v1862 + v1861)) = (v1864
                                                                                   * v1849->u16[v1862 + v1851]) >> 15;
                                          if (++v1862 == v131)
                                            goto LABEL_1329;
                                        }
                                      }
                                      bzero((void *)(v1852 + 2 * v3516 * (v1848 + (int)v3525 - 6)), v3483);
                                      v1853 = (int)v3525 - 2;
                                      v131 = v3568;
LABEL_1329:
                                      ++v1854;
                                      ++v1858;
                                      v1848 = v3537 + 1;
                                      v1855 = v3530 + 1;
                                      ++v1857;
                                      if (v1854 >= v3525)
                                      {
                                        v655 = v3466;
                                        v656 = v3573;
                                        v541 = v3581;
                                        if (*v3466 < 1)
                                          goto LABEL_2329;
LABEL_1376:
                                        v1917 = 0;
                                        v1918 = 0;
                                        v1919 = (unint64_t)(v541 + 6);
                                        v1920 = v13 + 2;
                                        while (1)
                                        {
                                          v1921 = *a2;
                                          v1922 = a2[2];
                                          v1923 = (unsigned __int16 *)(*a2 + 2 * v1922 * v1918);
                                          *v541 = ((v13->u16[1]
                                                  + v13->u16[0]
                                                  + v13->u16[2]
                                                  + v13->u16[3]
                                                  + v13[1].u16[0]
                                                  + v13[1].u16[1]
                                                  + v13[1].u16[2])
                                                 * *v1923
                                                 + v1923[1] * v13[1].u16[3]
                                                 + v1923[2] * v13[2].u16[0]
                                                 + v1923[3] * v13[2].u16[1]
                                                 + v1923[4] * v13[2].u16[2]
                                                 + v1923[5] * v13[2].u16[3]
                                                 + v1923[6] * v13[3].u16[0]) >> 15;
                                          v541[1] = ((v13->u16[1]
                                                    + v13->u16[0]
                                                    + v13->u16[2]
                                                    + v13->u16[3]
                                                    + v13[1].u16[0]
                                                    + v13[1].u16[1])
                                                   * *v1923
                                                   + v1923[1] * v13[1].u16[2]
                                                   + v1923[2] * v13[1].u16[3]
                                                   + v1923[3] * v13[2].u16[0]
                                                   + v1923[4] * v13[2].u16[1]
                                                   + v1923[5] * v13[2].u16[2]
                                                   + v1923[6] * v13[2].u16[3]
                                                   + v1923[7] * v13[3].u16[0]) >> 15;
                                          v541[2] = ((v13->u16[1]
                                                    + v13->u16[0]
                                                    + v13->u16[2]
                                                    + v13->u16[3]
                                                    + v13[1].u16[0])
                                                   * *v1923
                                                   + v1923[1] * v13[1].u16[1]
                                                   + v1923[2] * v13[1].u16[2]
                                                   + v1923[3] * v13[1].u16[3]
                                                   + v1923[4] * v13[2].u16[0]
                                                   + v1923[5] * v13[2].u16[1]
                                                   + v1923[6] * v13[2].u16[2]
                                                   + v1923[7] * v13[2].u16[3]
                                                   + v1923[8] * v13[3].u16[0]) >> 15;
                                          v541[3] = ((v13->u16[1] + v13->u16[0] + v13->u16[2] + v13->u16[3]) * *v1923
                                                   + v1923[1] * v13[1].u16[0]
                                                   + v1923[2] * v13[1].u16[1]
                                                   + v1923[3] * v13[1].u16[2]
                                                   + v1923[4] * v13[1].u16[3]
                                                   + v1923[5] * v13[2].u16[0]
                                                   + v1923[6] * v13[2].u16[1]
                                                   + v1923[7] * v13[2].u16[2]
                                                   + v1923[8] * v13[2].u16[3]
                                                   + v1923[9] * v13[3].u16[0]) >> 15;
                                          v541[4] = ((v13->u16[1] + v13->u16[0] + v13->u16[2]) * *v1923
                                                   + v1923[1] * v13->u16[3]
                                                   + v1923[2] * v13[1].u16[0]
                                                   + v1923[3] * v13[1].u16[1]
                                                   + v1923[4] * v13[1].u16[2]
                                                   + v1923[5] * v13[1].u16[3]
                                                   + v1923[6] * v13[2].u16[0]
                                                   + v1923[7] * v13[2].u16[1]
                                                   + v1923[8] * v13[2].u16[2]
                                                   + v1923[9] * v13[2].u16[3]
                                                   + v1923[10] * v13[3].u16[0]) >> 15;
                                          v541[5] = ((v13->u16[1] + v13->u16[0]) * *v1923
                                                   + v1923[1] * v13->u16[2]
                                                   + v1923[2] * v13->u16[3]
                                                   + v1923[3] * v13[1].u16[0]
                                                   + v1923[4] * v13[1].u16[1]
                                                   + v1923[5] * v13[1].u16[2]
                                                   + v1923[6] * v13[1].u16[3]
                                                   + v1923[7] * v13[2].u16[0]
                                                   + v1923[8] * v13[2].u16[1]
                                                   + v1923[9] * v13[2].u16[2]
                                                   + v1923[10] * v13[2].u16[3]
                                                   + v1923[11] * v13[3].u16[0]) >> 15;
                                          v1924 = *((int *)v656 + 2);
                                          if ((int)v1924 > 12)
                                          {
                                            v1925 = (v1924 - 12);
                                            if (v1925 < 8)
                                            {
                                              v1926 = 0;
                                              v1927 = 6;
LABEL_1397:
                                              v1985 = &v541[v1927];
                                              v1986 = (unsigned __int16 *)(v1921 + 2 * (v1926 + v1922 * v1918) + 24);
                                              v1987 = v1925 - v1926;
                                              do
                                              {
                                                v1988 = *(uint16x8_t *)(v1986 - 12);
                                                v1989 = *(uint16x4_t *)(v1986 - 4);
                                                v1990 = *v1986++;
                                                *v1985++ = (vaddvq_s32((int32x4_t)vmlal_u16(vmlal_high_u16(vmull_u16(*(uint16x4_t *)v1988.i8, *v13), v1988, *(uint16x8_t *)v13->i8), v1989, v13[2]))+ v1990 * v13[3].u16[0]) >> 15;
                                                --v1987;
                                              }
                                              while (v1987);
                                              goto LABEL_1399;
                                            }
                                            v1926 = 0;
                                            v1928 = v1919 + 2 * v1925;
                                            v1929 = v1922 * 2 * v1918;
                                            v1931 = v1919 < v1921 + 2 * v1925 + v1929 + 24 && v1921 + v1929 < v1928;
                                            v1927 = 6;
                                            if ((unint64_t)v13 < v1928 && v1919 < (unint64_t)&v13[3] + 2)
                                              goto LABEL_1397;
                                            if (v1931)
                                              goto LABEL_1397;
                                            v1933 = (const __int16 *)v13;
                                            v1934 = (uint16x4_t)vld1_dup_s16(v1933++);
                                            v1926 = v1925 & 0xFFFFFFF8;
                                            v1927 = v1926 | 6;
                                            v1935 = (int16x8_t)vmovl_u16(v1934);
                                            v1936 = (uint16x4_t)vld1_dup_s16(v1933);
                                            v1937 = (int16x8_t)vmovl_u16(v1936);
                                            v1938 = (const __int16 *)v13 + 2;
                                            v1939 = (uint16x4_t)vld1_dup_s16(v1938);
                                            v1940 = (const __int16 *)v13 + 3;
                                            v1941 = (uint16x4_t)vld1_dup_s16(v1940);
                                            v1942 = (int16x8_t)vmovl_u16(v1939);
                                            v1943 = (int16x8_t)vmovl_u16(v1941);
                                            v1944 = (const __int16 *)&v13[1];
                                            v1945 = (uint16x4_t)vld1_dup_s16(v1944);
                                            v1946 = (int16x8_t)vmovl_u16(v1945);
                                            v1947 = (const __int16 *)&v13[1] + 1;
                                            v1948 = (uint16x4_t)vld1_dup_s16(v1947);
                                            v1949 = (const __int16 *)&v13[1] + 2;
                                            v1950 = (uint16x4_t)vld1_dup_s16(v1949);
                                            v1951 = (int16x8_t)vmovl_u16(v1948);
                                            v1952 = (int16x8_t)vmovl_u16(v1950);
                                            v1953 = (const __int16 *)&v13[1] + 3;
                                            v1954 = (uint16x4_t)vld1_dup_s16(v1953);
                                            v1955 = (int16x8_t)vmovl_u16(v1954);
                                            v1956 = (const __int16 *)&v13[2];
                                            v1957 = (uint16x4_t)vld1_dup_s16(v1956);
                                            v1958 = (const __int16 *)&v13[2] + 1;
                                            v1959 = (uint16x4_t)vld1_dup_s16(v1958);
                                            v1960 = (int16x8_t)vmovl_u16(v1957);
                                            v1961 = (int16x8_t)vmovl_u16(v1959);
                                            v1962 = (const __int16 *)&v13[2] + 2;
                                            v1963 = (uint16x4_t)vld1_dup_s16(v1962);
                                            v1964 = (int16x8_t)vmovl_u16(v1963);
                                            v1965 = (const __int16 *)&v13[2] + 3;
                                            v1966 = (uint16x4_t)vld1_dup_s16(v1965);
                                            v1967 = (const __int16 *)&v13[3];
                                            v1968 = (uint16x4_t)vld1_dup_s16(v1967);
                                            v1969 = (int16x8_t)vmovl_u16(v1966);
                                            v1970 = (int16x8_t)vmovl_u16(v1968);
                                            v1971 = v1921 + v1922 * v1917 + 12;
                                            v1972 = (int16x8_t *)(v541 + 6);
                                            v1973 = v1926;
                                            do
                                            {
                                              v1974 = *(uint16x8_t *)(v1971 - 12);
                                              v1975 = *(uint16x8_t *)(v1971 - 10);
                                              v1976 = vmull_u16(*(uint16x4_t *)v1975.i8, (uint16x4_t)vmovn_s32((int32x4_t)v1937));
                                              v1977 = *(uint16x8_t *)(v1971 - 8);
                                              v1978 = *(uint16x8_t *)(v1971 - 6);
                                              v1979 = vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v1975, (uint16x8_t)vuzp1q_s16(v1935, v1937)), v1974, (uint16x8_t)vuzp1q_s16(v1935, v1935)), v1977, (uint16x8_t)vuzp1q_s16(v1935, v1942));
                                              v1980 = vmlal_u16(vmlal_u16(vmlal_u16(v1976, *(uint16x4_t *)v1974.i8, (uint16x4_t)vmovn_s32((int32x4_t)v1935)), *(uint16x4_t *)v1977.i8, (uint16x4_t)vmovn_s32((int32x4_t)v1942)), *(uint16x4_t *)v1978.i8, (uint16x4_t)vmovn_s32((int32x4_t)v1943));
                                              v1981 = *(uint16x8_t *)(v1971 - 4);
                                              v1982 = vmlal_high_u16(vmlal_high_u16(v1979, v1978, (uint16x8_t)vuzp1q_s16(v1935, v1943)), v1981, (uint16x8_t)vuzp1q_s16(v1935, v1946));
                                              v1983 = vmlal_u16(v1980, *(uint16x4_t *)v1981.i8, (uint16x4_t)vmovn_s32((int32x4_t)v1946));
                                              v1984 = *(uint16x8_t *)(v1971 - 2);
                                              *v1972++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(vmlal_u16(v1983, *(uint16x4_t *)v1984.i8, (uint16x4_t)vmovn_s32((int32x4_t)v1951)), *(uint16x4_t *)v1971, (uint16x4_t)vmovn_s32((int32x4_t)v1952)), *(uint16x4_t *)(v1971 + 2), (uint16x4_t)vmovn_s32((int32x4_t)v1955)), *(uint16x4_t *)(v1971 + 4), (uint16x4_t)vmovn_s32((int32x4_t)v1960)), *(uint16x4_t *)(v1971 + 6),
                                                                                (uint16x4_t)vmovn_s32((int32x4_t)v1961)),
                                                                              *(uint16x4_t *)(v1971 + 8),
                                                                              (uint16x4_t)vmovn_s32((int32x4_t)v1964)),
                                                                            *(uint16x4_t *)(v1971 + 10),
                                                                            (uint16x4_t)vmovn_s32((int32x4_t)v1969)),
                                                                          *(uint16x4_t *)(v1971 + 12),
                                                                          (uint16x4_t)vmovn_s32((int32x4_t)v1970)),
                                                             0xFuLL),
                                                           (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v1982, v1984, (uint16x8_t)vuzp1q_s16(v1935, v1951)), *(uint16x8_t *)v1971, (uint16x8_t)vuzp1q_s16(v1935, v1952)), *(uint16x8_t *)(v1971 + 2), (uint16x8_t)vuzp1q_s16(v1935, v1955)), *(uint16x8_t *)(v1971 + 4), (uint16x8_t)vuzp1q_s16(v1935, v1960)), *(uint16x8_t *)(v1971 + 6),
                                                                              (uint16x8_t)vuzp1q_s16(v1935, v1961)),
                                                                            *(uint16x8_t *)(v1971 + 8),
                                                                            (uint16x8_t)vuzp1q_s16(v1935, v1964)),
                                                                          *(uint16x8_t *)(v1971 + 10),
                                                                          (uint16x8_t)vuzp1q_s16(v1935, v1969)),
                                                                        *(uint16x8_t *)(v1971 + 12),
                                                                        (uint16x8_t)vuzp1q_s16(v1935, v1970)),
                                                           0xFuLL);
                                              v1971 += 16;
                                              v1973 -= 8;
                                            }
                                            while (v1973);
                                            if (v1926 != v1925)
                                              goto LABEL_1397;
                                          }
LABEL_1399:
                                          v1991 = v1924 - 6;
                                          v1992 = v1924 - 1;
                                          v1993 = (int)v1924 - 6;
                                          if (v1993 + 6 >= v1924 - 1)
                                          {
                                            v1995 = v13->u16[1] + v13->u16[0];
                                            v1994 = 2;
                                          }
                                          else
                                          {
                                            v1994 = 0;
                                            v1995 = 0;
                                          }
                                          v1996 = v1922 * v1918 + v1992;
                                          v1997 = v1924 + 4;
                                          v1998 = (int)v1924 - 2;
                                          v1999 = v1995 * *(unsigned __int16 *)(v1921 + 2 * v1996);
                                          if ((int)v1924 + 4 >= v1991)
                                          {
                                            v2000 = v1991 - 6;
                                            if (v1993 - 6 >= v1998)
                                              v2000 = (int)v1924 - 2;
                                            v2001 = v1998 - v2000 + 1;
                                            if (v2001 < 0x10)
                                            {
                                              v2002 = (int)v1924 - 2;
                                              v2003 = v1994;
LABEL_1410:
                                              v2016 = (unsigned __int16 *)v13 + v2003;
                                              do
                                              {
                                                v2017 = *v2016++;
                                                v1999 += v2017
                                                       * *(unsigned __int16 *)(v1921 + v1922 * v1917 + 2 * v2002);
                                                v8 = v2002-- < v1993 - 5;
                                              }
                                              while (!v8);
                                              goto LABEL_1413;
                                            }
                                            v2002 = v1998 - (v2001 & 0xFFFFFFFFFFFFFFF0);
                                            v2003 = v1994 | v2001 & 0xFFFFFFFFFFFFFFF0;
                                            v2004 = 0uLL;
                                            v2005 = (int32x4_t)v1999;
                                            v2006 = (int16x8_t *)(v1921 + 2 * (v1998 + v1922 * v1918) - 14);
                                            v2007 = (uint16x8_t *)((char *)v1920 + 2 * v1994);
                                            v2008 = v2001 & 0xFFFFFFFFFFFFFFF0;
                                            v2009 = 0uLL;
                                            v2010 = 0uLL;
                                            do
                                            {
                                              v2011 = (int8x16_t)vrev64q_s16(*v2006);
                                              v2012 = (uint16x8_t)vextq_s8(v2011, v2011, 8uLL);
                                              v2013 = (int8x16_t)vrev64q_s16(v2006[-1]);
                                              v2014 = (uint16x8_t)vextq_s8(v2013, v2013, 8uLL);
                                              v2015 = v2007[-1];
                                              v2004 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2004, v2015, v2012);
                                              v2005 = (int32x4_t)vmlal_u16((uint32x4_t)v2005, *(uint16x4_t *)v2015.i8, *(uint16x4_t *)v2012.i8);
                                              v2010 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2010, *v2007, v2014);
                                              v2009 = (int32x4_t)vmlal_u16((uint32x4_t)v2009, *(uint16x4_t *)v2007->i8, *(uint16x4_t *)v2014.i8);
                                              v2006 -= 2;
                                              v2007 += 2;
                                              v2008 -= 16;
                                            }
                                            while (v2008);
                                            v1999 = vaddvq_s32(vaddq_s32(vaddq_s32(v2009, v2005), vaddq_s32(v2010, v2004)));
                                            if (v2001 != (v2001 & 0xFFFFFFFFFFFFFFF0))
                                              goto LABEL_1410;
                                          }
LABEL_1413:
                                          v541[v1993] = v1999 >> 15;
                                          if (v1993 + 1 >= v1924)
                                            goto LABEL_1378;
                                          if (v1993 + 7 >= v1992)
                                          {
                                            v2019 = v13->u16[1] + v13->u16[0] + v13->u16[2];
                                            v2018 = 3;
                                          }
                                          else
                                          {
                                            v2018 = 0;
                                            v2019 = 0;
                                          }
                                          v2020 = v2019 * *(unsigned __int16 *)(v1921 + 2 * v1996);
                                          v2021 = v1993 - 5;
                                          if (v1993 - 5 >= v1998)
                                            v2021 = (int)v1924 - 2;
                                          v2022 = v1998 - v2021 + 1;
                                          v2023 = (int)v1924 - 2;
                                          v2024 = v2018;
                                          if (v2022 < 0x10)
                                            goto LABEL_1423;
                                          v2023 = v1998 - (v2022 & 0xFFFFFFFFFFFFFFF0);
                                          v2024 = v2018 | v2022 & 0xFFFFFFFFFFFFFFF0;
                                          v2025 = 0uLL;
                                          v2026 = (int32x4_t)v2020;
                                          v2027 = (int16x8_t *)(v1921 + 2 * (v1998 + v1922 * v1918) - 14);
                                          v2028 = (uint16x8_t *)((char *)v1920 + 2 * v2018);
                                          v2029 = v2022 & 0xFFFFFFFFFFFFFFF0;
                                          v2030 = 0uLL;
                                          v2031 = 0uLL;
                                          do
                                          {
                                            v2032 = (int8x16_t)vrev64q_s16(*v2027);
                                            v2033 = (uint16x8_t)vextq_s8(v2032, v2032, 8uLL);
                                            v2034 = (int8x16_t)vrev64q_s16(v2027[-1]);
                                            v2035 = (uint16x8_t)vextq_s8(v2034, v2034, 8uLL);
                                            v2036 = v2028[-1];
                                            v2025 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2025, v2036, v2033);
                                            v2026 = (int32x4_t)vmlal_u16((uint32x4_t)v2026, *(uint16x4_t *)v2036.i8, *(uint16x4_t *)v2033.i8);
                                            v2031 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2031, *v2028, v2035);
                                            v2030 = (int32x4_t)vmlal_u16((uint32x4_t)v2030, *(uint16x4_t *)v2028->i8, *(uint16x4_t *)v2035.i8);
                                            v2027 -= 2;
                                            v2028 += 2;
                                            v2029 -= 16;
                                          }
                                          while (v2029);
                                          v2020 = vaddvq_s32(vaddq_s32(vaddq_s32(v2030, v2026), vaddq_s32(v2031, v2025)));
                                          if (v2022 != (v2022 & 0xFFFFFFFFFFFFFFF0))
                                          {
LABEL_1423:
                                            v2037 = (unsigned __int16 *)(v1921 + 2 * (v2023 + v1922 * v1918));
                                            v2038 = (unsigned __int16 *)v13 + v2024;
                                            v2039 = v2018 + v1998 - v2024 - v2021 + 1;
                                            do
                                            {
                                              v2041 = *v2037--;
                                              v2040 = v2041;
                                              v2042 = *v2038++;
                                              v2020 += v2042 * v2040;
                                              --v2039;
                                            }
                                            while (v2039);
                                          }
                                          v541[v1993 + 1] = v2020 >> 15;
                                          if (v1993 + 8 >= v1992)
                                          {
                                            v2043 = 1;
                                            v2044 = v1993 + 2;
                                            v2045 = vaddvq_s32((int32x4_t)vmovl_u16(*v13))
                                                  * *(unsigned __int16 *)(v1921 + 2 * v1996);
                                            if (v1993 + 2 > v1997)
                                              goto LABEL_1439;
                                          }
                                          else
                                          {
                                            v2043 = 0;
                                            v2044 = v1993 + 2;
                                            v2045 = 0;
                                            if (v1993 + 2 > v1997)
                                              goto LABEL_1439;
                                          }
                                          v2046 = v1993 - 4;
                                          if (v1993 - 4 >= v1998)
                                            v2046 = (int)v1924 - 2;
                                          v2047 = v1998 - v2046 + 1;
                                          if (v2047 < 0x10)
                                          {
                                            v2048 = (int)v1924 - 2;
                                            v2049 = v2043 * 4;
LABEL_1436:
                                            v2062 = (unsigned __int16 *)v13 + v2049;
                                            do
                                            {
                                              v2063 = *v2062++;
                                              v2045 += v2063 * *(unsigned __int16 *)(v1921 + v1922 * v1917 + 2 * v2048);
                                              v8 = v2048-- < v1993 - 3;
                                            }
                                            while (!v8);
                                            goto LABEL_1439;
                                          }
                                          v2048 = v1998 - (v2047 & 0xFFFFFFFFFFFFFFF0);
                                          v2049 = (v2043 * 4) | v2047 & 0xFFFFFFFFFFFFFFF0;
                                          v2050 = 0uLL;
                                          v2051 = (int32x4_t)v2045;
                                          v2052 = (int16x8_t *)(v1921 + 2 * (v1998 + v1922 * v1918) - 14);
                                          v2053 = (uint16x8_t *)&v1920[v2043];
                                          v2054 = v2047 & 0xFFFFFFFFFFFFFFF0;
                                          v2055 = 0uLL;
                                          v2056 = 0uLL;
                                          do
                                          {
                                            v2057 = (int8x16_t)vrev64q_s16(*v2052);
                                            v2058 = (uint16x8_t)vextq_s8(v2057, v2057, 8uLL);
                                            v2059 = (int8x16_t)vrev64q_s16(v2052[-1]);
                                            v2060 = (uint16x8_t)vextq_s8(v2059, v2059, 8uLL);
                                            v2061 = v2053[-1];
                                            v2050 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2050, v2061, v2058);
                                            v2051 = (int32x4_t)vmlal_u16((uint32x4_t)v2051, *(uint16x4_t *)v2061.i8, *(uint16x4_t *)v2058.i8);
                                            v2056 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2056, *v2053, v2060);
                                            v2055 = (int32x4_t)vmlal_u16((uint32x4_t)v2055, *(uint16x4_t *)v2053->i8, *(uint16x4_t *)v2060.i8);
                                            v2052 -= 2;
                                            v2053 += 2;
                                            v2054 -= 16;
                                          }
                                          while (v2054);
                                          v2045 = vaddvq_s32(vaddq_s32(vaddq_s32(v2055, v2051), vaddq_s32(v2056, v2050)));
                                          if (v2047 != (v2047 & 0xFFFFFFFFFFFFFFF0))
                                            goto LABEL_1436;
LABEL_1439:
                                          v541[v2044] = v2045 >> 15;
                                          if (v1993 + 9 >= v1992)
                                          {
                                            v2064 = 5;
                                            v2065 = v1993 + 3;
                                            v2066 = (vaddvq_s32((int32x4_t)vmovl_u16(*v13)) + v13[1].u16[0])
                                                  * *(unsigned __int16 *)(v1921 + 2 * v1996);
                                            if (v1993 + 3 > v1997)
                                              goto LABEL_1453;
                                          }
                                          else
                                          {
                                            v2064 = 0;
                                            v2065 = v1993 + 3;
                                            v2066 = 0;
                                            if (v1993 + 3 > v1997)
                                              goto LABEL_1453;
                                          }
                                          v2067 = v1993 - 3;
                                          if (v1993 - 3 >= v1998)
                                            v2067 = (int)v1924 - 2;
                                          v2068 = v1998 - v2067 + 1;
                                          if (v2068 < 0x10)
                                          {
                                            v2069 = (int)v1924 - 2;
                                            v2070 = v2064;
LABEL_1450:
                                            v2083 = (unsigned __int16 *)v13 + v2070;
                                            do
                                            {
                                              v2084 = *v2083++;
                                              v2066 += v2084 * *(unsigned __int16 *)(v1921 + v1922 * v1917 + 2 * v2069);
                                              v8 = v2069-- < v1993 - 2;
                                            }
                                            while (!v8);
                                            goto LABEL_1453;
                                          }
                                          v2069 = v1998 - (v2068 & 0xFFFFFFFFFFFFFFF0);
                                          v2070 = v2064 | v2068 & 0xFFFFFFFFFFFFFFF0;
                                          v2071 = 0uLL;
                                          v2072 = (int32x4_t)v2066;
                                          v2073 = (int16x8_t *)(v1921 + 2 * (v1998 + v1922 * v1918) - 14);
                                          v2074 = (uint16x8_t *)((char *)v1920 + 2 * v2064);
                                          v2075 = v2068 & 0xFFFFFFFFFFFFFFF0;
                                          v2076 = 0uLL;
                                          v2077 = 0uLL;
                                          do
                                          {
                                            v2078 = (int8x16_t)vrev64q_s16(*v2073);
                                            v2079 = (uint16x8_t)vextq_s8(v2078, v2078, 8uLL);
                                            v2080 = (int8x16_t)vrev64q_s16(v2073[-1]);
                                            v2081 = (uint16x8_t)vextq_s8(v2080, v2080, 8uLL);
                                            v2082 = v2074[-1];
                                            v2071 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2071, v2082, v2079);
                                            v2072 = (int32x4_t)vmlal_u16((uint32x4_t)v2072, *(uint16x4_t *)v2082.i8, *(uint16x4_t *)v2079.i8);
                                            v2077 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2077, *v2074, v2081);
                                            v2076 = (int32x4_t)vmlal_u16((uint32x4_t)v2076, *(uint16x4_t *)v2074->i8, *(uint16x4_t *)v2081.i8);
                                            v2073 -= 2;
                                            v2074 += 2;
                                            v2075 -= 16;
                                          }
                                          while (v2075);
                                          v2066 = vaddvq_s32(vaddq_s32(vaddq_s32(v2076, v2072), vaddq_s32(v2077, v2071)));
                                          if (v2068 != (v2068 & 0xFFFFFFFFFFFFFFF0))
                                            goto LABEL_1450;
LABEL_1453:
                                          v541[v2065] = v2066 >> 15;
                                          if (v1993 + 10 >= v1992)
                                          {
                                            v2085 = 6;
                                            v2086 = v1993 + 4;
                                            v2087 = (vaddvq_s32((int32x4_t)vmovl_u16(*v13))
                                                   + v13[1].u16[0]
                                                   + v13[1].u16[1])
                                                  * *(unsigned __int16 *)(v1921 + 2 * v1996);
                                            if (v1993 + 4 > v1997)
                                              goto LABEL_1467;
                                          }
                                          else
                                          {
                                            v2085 = 0;
                                            v2086 = v1993 + 4;
                                            v2087 = 0;
                                            if (v1993 + 4 > v1997)
                                              goto LABEL_1467;
                                          }
                                          v2088 = v1993 - 2;
                                          if (v1993 - 2 >= v1998)
                                            v2088 = (int)v1924 - 2;
                                          v2089 = v1998 - v2088 + 1;
                                          if (v2089 < 0x10)
                                          {
                                            v2090 = (int)v1924 - 2;
                                            v2091 = v2085;
LABEL_1464:
                                            v2104 = (unsigned __int16 *)v13 + v2091;
                                            do
                                            {
                                              v2105 = *v2104++;
                                              v2087 += v2105 * *(unsigned __int16 *)(v1921 + v1922 * v1917 + 2 * v2090);
                                              v8 = v2090-- < v1993 - 1;
                                            }
                                            while (!v8);
                                            goto LABEL_1467;
                                          }
                                          v2090 = v1998 - (v2089 & 0xFFFFFFFFFFFFFFF0);
                                          v2091 = v2085 | v2089 & 0xFFFFFFFFFFFFFFF0;
                                          v2092 = 0uLL;
                                          v2093 = (int32x4_t)v2087;
                                          v2094 = (int16x8_t *)(v1921 + 2 * (v1998 + v1922 * v1918) - 14);
                                          v2095 = (uint16x8_t *)((char *)v1920 + 2 * v2085);
                                          v2096 = v2089 & 0xFFFFFFFFFFFFFFF0;
                                          v2097 = 0uLL;
                                          v2098 = 0uLL;
                                          do
                                          {
                                            v2099 = (int8x16_t)vrev64q_s16(*v2094);
                                            v2100 = (uint16x8_t)vextq_s8(v2099, v2099, 8uLL);
                                            v2101 = (int8x16_t)vrev64q_s16(v2094[-1]);
                                            v2102 = (uint16x8_t)vextq_s8(v2101, v2101, 8uLL);
                                            v2103 = v2095[-1];
                                            v2092 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2092, v2103, v2100);
                                            v2093 = (int32x4_t)vmlal_u16((uint32x4_t)v2093, *(uint16x4_t *)v2103.i8, *(uint16x4_t *)v2100.i8);
                                            v2098 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2098, *v2095, v2102);
                                            v2097 = (int32x4_t)vmlal_u16((uint32x4_t)v2097, *(uint16x4_t *)v2095->i8, *(uint16x4_t *)v2102.i8);
                                            v2094 -= 2;
                                            v2095 += 2;
                                            v2096 -= 16;
                                          }
                                          while (v2096);
                                          v2087 = vaddvq_s32(vaddq_s32(vaddq_s32(v2097, v2093), vaddq_s32(v2098, v2092)));
                                          if (v2089 != (v2089 & 0xFFFFFFFFFFFFFFF0))
                                            goto LABEL_1464;
LABEL_1467:
                                          v541[v2086] = v2087 >> 15;
                                          if (v1993 + 11 >= v1992)
                                          {
                                            v2106 = 7;
                                            v2107 = v1993 + 5;
                                            v2108 = (vaddvq_s32((int32x4_t)vmovl_u16(*v13))
                                                   + v13[1].u16[0]
                                                   + v13[1].u16[1]
                                                   + v13[1].u16[2])
                                                  * *(unsigned __int16 *)(v1921 + 2 * v1996);
                                            if (v1993 + 5 > v1997)
                                              goto LABEL_1377;
                                          }
                                          else
                                          {
                                            v2106 = 0;
                                            v2107 = v1993 + 5;
                                            v2108 = 0;
                                            if (v1993 + 5 > v1997)
                                              goto LABEL_1377;
                                          }
                                          v2109 = v1993 - 1;
                                          if (v1993 - 1 >= v1998)
                                            v2109 = (int)v1924 - 2;
                                          v2110 = v1998 - v2109 + 1;
                                          if (v2110 >= 0x10)
                                          {
                                            v2111 = v1998 - (v2110 & 0xFFFFFFFFFFFFFFF0);
                                            v2112 = v2106 | v2110 & 0xFFFFFFFFFFFFFFF0;
                                            v2113 = 0uLL;
                                            v2114 = (int32x4_t)v2108;
                                            v2115 = (int16x8_t *)(v1921 + 2 * (v1998 + v1922 * v1918) - 14);
                                            v2116 = (uint16x8_t *)((char *)v1920 + 2 * v2106);
                                            v2117 = v2110 & 0xFFFFFFFFFFFFFFF0;
                                            v2118 = 0uLL;
                                            v2119 = 0uLL;
                                            do
                                            {
                                              v2120 = (int8x16_t)vrev64q_s16(*v2115);
                                              v2121 = (uint16x8_t)vextq_s8(v2120, v2120, 8uLL);
                                              v2122 = (int8x16_t)vrev64q_s16(v2115[-1]);
                                              v2123 = (uint16x8_t)vextq_s8(v2122, v2122, 8uLL);
                                              v2124 = v2116[-1];
                                              v2113 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2113, v2124, v2121);
                                              v2114 = (int32x4_t)vmlal_u16((uint32x4_t)v2114, *(uint16x4_t *)v2124.i8, *(uint16x4_t *)v2121.i8);
                                              v2119 = (int32x4_t)vmlal_high_u16((uint32x4_t)v2119, *v2116, v2123);
                                              v2118 = (int32x4_t)vmlal_u16((uint32x4_t)v2118, *(uint16x4_t *)v2116->i8, *(uint16x4_t *)v2123.i8);
                                              v2115 -= 2;
                                              v2116 += 2;
                                              v2117 -= 16;
                                            }
                                            while (v2117);
                                            v2108 = vaddvq_s32(vaddq_s32(vaddq_s32(v2118, v2114), vaddq_s32(v2119, v2113)));
                                            if (v2110 == (v2110 & 0xFFFFFFFFFFFFFFF0))
                                              goto LABEL_1377;
                                          }
                                          else
                                          {
                                            v2111 = (int)v1924 - 2;
                                            v2112 = v2106;
                                          }
                                          v2125 = v1921 + v1922 * v1917;
                                          v2126 = (unsigned __int16 *)v13 + v2112;
                                          do
                                          {
                                            v2127 = *v2126++;
                                            v2108 += v2127 * *(unsigned __int16 *)(v2125 + 2 * v2111);
                                            v8 = v2111-- < v1993;
                                          }
                                          while (!v8);
LABEL_1377:
                                          v541[v2107] = v2108 >> 15;
LABEL_1378:
                                          memcpy(v1923, v541, 2 * v1924);
                                          ++v1918;
                                          v1917 += 2;
                                          v656 = v3573;
                                          if (v1918 >= *v655)
                                            goto LABEL_2329;
                                        }
                                      }
                                    }
                                    v1872 = (v3498 - v1855) & 0xFFFFFFFFFFFFFFFELL;
                                    if (v1854 < v3513)
                                    {
                                      v1873 = 0;
                                      v1874 = v3498 - v1859;
                                      v1875 = v3488;
                                      v1876 = v3493;
                                      while (1)
                                      {
                                        if (v1874 >= 2)
                                        {
                                          v1880 = 0;
                                          v1881 = 0;
                                          v1882 = 0;
                                          v1883 = v1872;
                                          v1884 = (unsigned __int16 *)v13 + 1;
                                          do
                                          {
                                            v1885 = *(v1884 - 1);
                                            v1886 = *v1884;
                                            v1884 += 2;
                                            v1881 += v1885 * *(unsigned __int16 *)(v1876 + v1880);
                                            v1882 += v1886 * *(unsigned __int16 *)(v1875 + v1880);
                                            v1880 -= v1856;
                                            v1883 -= 2;
                                          }
                                          while (v1883);
                                          v1878 = v1882 + v1881;
                                          v1879 = v1853 - (v1874 & 0xFFFFFFFFFFFFFFFELL);
                                          v1877 = v1874 & 0xFFFFFFFFFFFFFFFELL;
                                          if (v1874 == (v1874 & 0xFFFFFFFFFFFFFFFELL))
                                            goto LABEL_1350;
                                        }
                                        else
                                        {
                                          v1877 = 0;
                                          v1878 = 0;
                                          v1879 = v1853;
                                        }
                                        v1887 = v1879 + 6;
                                        v1888 = (unsigned __int16 *)v1849 + v1873 + (_QWORD)v1850 * v1879;
                                        v1889 = (unsigned __int16 *)v13 + v1877;
                                        do
                                        {
                                          v1890 = *v1889++;
                                          v1878 += v1890 * *v1888;
                                          --v1887;
                                          v1888 -= (uint64_t)v1850;
                                        }
                                        while (v1887 >= v1854);
LABEL_1350:
                                        *(_WORD *)(v1852 + 2 * (v1873 + v1861)) = v1878 >> 15;
                                        ++v1873;
                                        v1876 += 2;
                                        v1875 += 2;
                                        if (v1873 == v131)
                                          goto LABEL_1329;
                                      }
                                    }
                                    v1891 = 0;
                                    v1892 = v3498 - v1860;
                                    v3546 = v1853 - (v1892 & 0xFFFFFFFFFFFFFFFELL);
                                    v1894 = v3488;
                                    v1893 = v3493;
                                    while (v1858 >= 0x10)
                                    {
                                      v1897 = 0uLL;
                                      v1898 = v1858 & 0xFFFFFFFFFFFFFFF0;
                                      v1899 = (uint16x8_t *)&v13[2];
                                      v1900 = 0uLL;
                                      v1901 = 0uLL;
                                      v1902 = 0uLL;
                                      do
                                      {
                                        v1903 = v1899[-1];
                                        v1900 = (int32x4_t)vaddw_high_u16((uint32x4_t)v1900, v1903);
                                        v1897 = (int32x4_t)vaddw_u16((uint32x4_t)v1897, *(uint16x4_t *)v1903.i8);
                                        v1902 = (int32x4_t)vaddw_high_u16((uint32x4_t)v1902, *v1899);
                                        v1901 = (int32x4_t)vaddw_u16((uint32x4_t)v1901, *(uint16x4_t *)v1899->i8);
                                        v1899 += 2;
                                        v1898 -= 16;
                                      }
                                      while (v1898);
                                      v1896 = vaddvq_s32(vaddq_s32(vaddq_s32(v1901, v1897), vaddq_s32(v1902, v1900)));
                                      v1895 = v1858 & 0x7FFFFFFFFFFFFFF0;
                                      if (v1858 != (v1858 & 0x7FFFFFFFFFFFFFF0))
                                        goto LABEL_1366;
LABEL_1367:
                                      v1904 = v1896 * v1849->u16[v1891 + v1851];
                                      if (v1892 >= 2)
                                      {
                                        v1907 = 0;
                                        v1908 = 0;
                                        v1909 = v1857;
                                        v1910 = v1872;
                                        do
                                        {
                                          v1911 = *(v1909 - 1);
                                          v1912 = *v1909;
                                          v1909 += 2;
                                          v1904 += v1911 * *(unsigned __int16 *)(v1893 + v1907);
                                          v1908 += v1912 * *(unsigned __int16 *)(v1894 + v1907);
                                          v1907 -= v1856;
                                          v1910 -= 2;
                                        }
                                        while (v1910);
                                        v1904 += v1908;
                                        v1905 = v3546;
                                        v1853 = (int)v3525 - 2;
                                        v1906 = v1858 + (v1892 & 0xFFFFFFFFFFFFFFFELL);
                                        v131 = v3568;
                                        if (v1892 == (v1892 & 0xFFFFFFFFFFFFFFFELL))
                                          goto LABEL_1360;
                                      }
                                      else
                                      {
                                        v1905 = v1853;
                                        v1906 = v1858;
                                      }
                                      v1913 = v1905 + 6;
                                      v1914 = (unsigned __int16 *)v1849 + v1891 + (_QWORD)v1850 * v1905;
                                      v1915 = (unsigned __int16 *)v13 + v1906;
                                      do
                                      {
                                        v1916 = *v1915++;
                                        v1904 += v1916 * *v1914;
                                        --v1913;
                                        v1914 -= (uint64_t)v1850;
                                      }
                                      while (v1913 >= v1854);
LABEL_1360:
                                      *(_WORD *)(v1852 + 2 * (v1891 + v1861)) = v1904 >> 15;
                                      ++v1891;
                                      v1893 += 2;
                                      v1894 += 2;
                                      if (v1891 == v131)
                                        goto LABEL_1329;
                                    }
                                    v1895 = 0;
                                    v1896 = 0;
                                    do
LABEL_1366:
                                      v1896 += v13->u16[v1895++];
                                    while (v1858 != v1895);
                                    goto LABEL_1367;
                                  }
                                  v2584 = 0;
                                  v2585 = a2[2];
                                  v2586 = 2 * v2585;
                                  v2587 = 3 * v2585;
                                  v2588 = *v3573;
                                  v2589 = 4 * v2587;
                                  v3560 = 4 * v2587 + v3483;
                                  v2590 = v3573[2];
                                  v2591 = 2 * (_QWORD)v2590;
                                  v3561 = *a2 + v3560;
                                  v3543 = (uint64_t)(*v3573)->i64 + 4 * (_QWORD)v2590 + v3483;
                                  v3549 = (uint64_t)(*v3573)->i64 + 2 * (_QWORD)v2590 + v3483;
                                  v3539 = (uint64_t)(*v3573)->i64 + 4 * (_QWORD)v2590;
                                  v3533 = (uint64_t)(*v3573)->i64 + 6 * (_QWORD)v2590 + v3483;
                                  v3523 = (uint64_t)(*v3573)->i64 + 6 * (_QWORD)v2590;
                                  v3519 = (uint64_t)&(*v3573)->i64[(_QWORD)v2590] + v3483;
                                  v3514 = (uint64_t)&(*v3573)->i64[(_QWORD)v2590];
                                  v3511 = (uint64_t)(*v3573)->i64 + 10 * (_QWORD)v2590 + v3483;
                                  v3506 = (uint64_t)(*v3573)->i64 + 10 * (_QWORD)v2590;
                                  v3500 = (uint64_t)(*v3573)->i64 + 12 * (_QWORD)v2590 + v3483;
                                  v3495 = (uint64_t)(*v3573)->i64 + 12 * (_QWORD)v2590;
                                  v3490 = (uint64_t)(*v3573)->i64 + 14 * (_QWORD)v2590 + v3483;
                                  v3481 = (uint64_t)(*v3573)->i64 + 14 * (_QWORD)v2590;
                                  v3478 = (uint64_t)(*v3573)[(_QWORD)v2590].i64 + v3483;
                                  i64 = (uint64_t)(*v3573)[(_QWORD)v2590].i64;
                                  v3475 = (uint64_t)(*v3573)->i64 + 18 * (_QWORD)v2590 + v3483;
                                  v3474 = (uint64_t)(*v3573)->i64 + 18 * (_QWORD)v2590;
                                  v3473 = (uint64_t)(*v3573)->i64 + 20 * (_QWORD)v2590 + v3483;
                                  v3472 = (uint64_t)(*v3573)->i64 + 20 * (_QWORD)v2590;
                                  v3471 = (uint64_t)(*v3573)->i64 + 22 * (_QWORD)v2590 + v3483;
                                  v3470 = (uint64_t)(*v3573)->i64 + 22 * (_QWORD)v2590;
                                  v3469 = (uint64_t)&(*v3573)->i64[3 * (_QWORD)v2590] + v3483;
                                  v3468 = (uint64_t)&(*v3573)->i64[3 * (_QWORD)v2590];
                                  v3467 = (uint64_t)(*v3573)->i64 + v3483;
                                  v3579 = *a2 + v2589;
                                  v2592 = (int16x8_t *)v3579;
                                  v2593 = *v3573;
                                  while (1)
                                  {
                                    v2594 = v2584 + 1;
                                    if (v131 >= 8)
                                    {
                                      v2595 = 0;
                                      v2596 = v2591 * v2584;
                                      v2597 = v3579 + v2586 * v2584;
                                      v2598 = v3561 + v2586 * v2584;
                                      v2600 = v2597 < v3471 + v2591 * v2584 && v3470 + v2591 * v2584 < v2598;
                                      v2602 = v2597 < v3473 + v2591 * v2584 && v3472 + v2596 < v2598;
                                      v2604 = v2597 < v3475 + v2591 * v2584 && v3474 + v2596 < v2598;
                                      v2606 = v2597 < v3478 + v2591 * v2584 && i64 + v2596 < v2598;
                                      v2608 = v2597 < v3490 + v2591 * v2584 && v3481 + v2596 < v2598;
                                      v2610 = v2597 < v3500 + v2591 * v2584 && v3495 + v2596 < v2598;
                                      v2612 = v2597 < v3511 + v2591 * v2584 && v3506 + v2596 < v2598;
                                      v2614 = v2597 < v3519 + v2591 * v2584 && v3514 + v2596 < v2598;
                                      v2616 = v2597 < v3533 + v2591 * v2584 && v3523 + v2596 < v2598;
                                      v2618 = v2597 < v3543 + v2591 * v2584 && v3539 + v2596 < v2598;
                                      v2619 = v3468 + v2596;
                                      v2621 = v2597 < v3549 + v2591 * v2584
                                           && (unint64_t)v2588->u64 + v2591 + v2591 * v2584 < v2598;
                                      v2623 = v2597 < v3467 + v2591 * v2584
                                           && (unint64_t)v2588->u64 + v2591 * v2584 < v2598;
                                      v2625 = v2597 < (unint64_t)&v13[3] + 2 && (unint64_t)v13 < v2598;
                                      v2626 = v3469 + v2596;
                                      v2627 = v2619 >= v2598 || v2597 >= v2626;
                                      if (!v2627
                                        || v2600
                                        || v2602
                                        || v2604
                                        || v2606
                                        || v2608
                                        || v2610
                                        || v2612
                                        || v2614
                                        || v2616
                                        || v2618
                                        || v2621)
                                      {
                                        v131 = v3568;
                                      }
                                      else
                                      {
                                        v131 = v3568;
                                        if (!v2623 && !v2625)
                                        {
                                          v2628 = (const __int16 *)v13;
                                          v2629 = (uint16x4_t)vld1_dup_s16(v2628++);
                                          v2630 = (int16x8_t)vmovl_u16(v2629);
                                          v2631 = (uint16x4_t)vld1_dup_s16(v2628);
                                          v2632 = (int16x8_t)vmovl_u16(v2631);
                                          v2633 = (const __int16 *)v13 + 2;
                                          v2634 = (uint16x4_t)vld1_dup_s16(v2633);
                                          v2635 = (int16x8_t)vmovl_u16(v2634);
                                          v2636 = (const __int16 *)v13 + 3;
                                          v2637 = (uint16x4_t)vld1_dup_s16(v2636);
                                          v2638 = (int16x8_t)vmovl_u16(v2637);
                                          v2639 = (const __int16 *)&v13[1];
                                          v2640 = (uint16x4_t)vld1_dup_s16(v2639);
                                          v2641 = (int16x8_t)vmovl_u16(v2640);
                                          v2642 = (const __int16 *)&v13[1] + 1;
                                          v2643 = (uint16x4_t)vld1_dup_s16(v2642);
                                          v2644 = (int16x8_t)vmovl_u16(v2643);
                                          v2645 = (const __int16 *)&v13[1] + 2;
                                          v2646 = (uint16x4_t)vld1_dup_s16(v2645);
                                          v2647 = (int16x8_t)vmovl_u16(v2646);
                                          v2648 = (const __int16 *)&v13[1] + 3;
                                          v2649 = (uint16x4_t)vld1_dup_s16(v2648);
                                          v2650 = (int16x8_t)vmovl_u16(v2649);
                                          v2651 = (const __int16 *)&v13[2];
                                          v2652 = (uint16x4_t)vld1_dup_s16(v2651);
                                          v2653 = (int16x8_t)vmovl_u16(v2652);
                                          v2654 = (const __int16 *)&v13[2] + 1;
                                          v2655 = (uint16x4_t)vld1_dup_s16(v2654);
                                          v2656 = (int16x8_t)vmovl_u16(v2655);
                                          v2657 = (const __int16 *)&v13[2] + 2;
                                          v2658 = (uint16x4_t)vld1_dup_s16(v2657);
                                          v2659 = (int16x8_t)vmovl_u16(v2658);
                                          v2660 = (const __int16 *)&v13[2] + 3;
                                          v2661 = (uint16x4_t)vld1_dup_s16(v2660);
                                          v2662 = (int16x8_t)vmovl_u16(v2661);
                                          v2663 = (const __int16 *)&v13[3];
                                          v2664 = (uint16x4_t)vld1_dup_s16(v2663);
                                          v2665 = (int16x8_t)vmovl_u16(v2664);
                                          v2666 = v3568 & 0xFFFFFFF8;
                                          v2667 = v2592;
                                          v2668 = v2593;
                                          do
                                          {
                                            v2669 = *(uint16x8_t *)((char *)v2668 + 2 * (_QWORD)v2590);
                                            v2670 = (uint16x8_t *)((char *)v2668 + v2591 + v2591);
                                            v2671 = vmlal_high_u16(vmlal_high_u16(vmull_high_u16((uint16x8_t)vuzp1q_s16(v2630, v2632), v2669), (uint16x8_t)vuzp1q_s16(v2630, v2630), *v2668), (uint16x8_t)vuzp1q_s16(v2630, v2635), *v2670);
                                            v2672 = vmlal_u16(vmlal_u16(vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)v2632), *(uint16x4_t *)v2669.i8), (uint16x4_t)vmovn_s32((int32x4_t)v2630), *(uint16x4_t *)v2668->i8), (uint16x4_t)vmovn_s32((int32x4_t)v2635), *(uint16x4_t *)v2670->i8);
                                            v2673 = (uint16x4_t *)&v2670->i8[v2591];
                                            v2674 = vmlal_u16(v2672, (uint16x4_t)vmovn_s32((int32x4_t)v2638), *v2673);
                                            v2675 = vmlal_high_u16(v2671, (uint16x8_t)vuzp1q_s16(v2630, v2638), *(uint16x8_t *)v2673->i8);
                                            v2676 = (uint16x8_t *)((char *)v2673 + v2591);
                                            v2677 = vmlal_high_u16(v2675, (uint16x8_t)vuzp1q_s16(v2630, v2641), *v2676);
                                            v2678 = vmlal_u16(v2674, (uint16x4_t)vmovn_s32((int32x4_t)v2641), *(uint16x4_t *)v2676->i8);
                                            v2679 = (uint16x4_t *)&v2676->i8[v2591];
                                            v2680 = vmlal_u16(v2678, (uint16x4_t)vmovn_s32((int32x4_t)v2644), *v2679);
                                            v2681 = vmlal_high_u16(v2677, (uint16x8_t)vuzp1q_s16(v2630, v2644), *(uint16x8_t *)v2679->i8);
                                            v2682 = (uint16x8_t *)((char *)v2679 + v2591);
                                            v2683 = vmlal_high_u16(v2681, (uint16x8_t)vuzp1q_s16(v2630, v2647), *v2682);
                                            v2684 = vmlal_u16(v2680, (uint16x4_t)vmovn_s32((int32x4_t)v2647), *(uint16x4_t *)v2682->i8);
                                            v2685 = (uint16x4_t *)&v2682->i8[v2591];
                                            v2686 = vmlal_u16(v2684, (uint16x4_t)vmovn_s32((int32x4_t)v2650), *v2685);
                                            v2687 = vmlal_high_u16(v2683, (uint16x8_t)vuzp1q_s16(v2630, v2650), *(uint16x8_t *)v2685->i8);
                                            v2688 = (uint16x8_t *)((char *)v2685 + v2591);
                                            v2689 = vmlal_high_u16(v2687, (uint16x8_t)vuzp1q_s16(v2630, v2653), *v2688);
                                            v2690 = vmlal_u16(v2686, (uint16x4_t)vmovn_s32((int32x4_t)v2653), *(uint16x4_t *)v2688->i8);
                                            v2691 = (uint16x4_t *)&v2688->i8[v2591];
                                            v2692 = vmlal_u16(v2690, (uint16x4_t)vmovn_s32((int32x4_t)v2656), *v2691);
                                            v2693 = vmlal_high_u16(v2689, (uint16x8_t)vuzp1q_s16(v2630, v2656), *(uint16x8_t *)v2691->i8);
                                            v2694 = (uint16x4_t *)((char *)v2691 + v2591);
                                            *v2667++ = vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmlal_u16(vmlal_u16(vmlal_u16(v2692, (uint16x4_t)vmovn_s32((int32x4_t)v2659), *v2694), (uint16x4_t)vmovn_s32((int32x4_t)v2662), *(uint16x4_t *)((char *)v2694 + v2591)), (uint16x4_t)vmovn_s32((int32x4_t)v2665), *(uint16x4_t *)((char *)v2694+ 2 * (_QWORD)v2590+ v2591)), 0xFuLL), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmlal_high_u16(v2693, (uint16x8_t)vuzp1q_s16(v2630, v2659),
                                                                          *(uint16x8_t *)v2694->i8),
                                                                        (uint16x8_t)vuzp1q_s16(v2630, v2662),
                                                                        *(uint16x8_t *)&v2694->i8[v2591]),
                                                                      (uint16x8_t)vuzp1q_s16(v2630, v2665),
                                                                      *(uint16x8_t *)&v2694->i8[2 * (_QWORD)v2590
                                                                                              + v2591]),
                                                         0xFuLL);
                                            ++v2668;
                                            v2666 -= 8;
                                          }
                                          while (v2666);
                                          v2595 = v3568 & 0xFFFFFFF8;
                                          if (v2595 == v3568)
                                            goto LABEL_1776;
                                        }
                                      }
                                    }
                                    else
                                    {
                                      v2595 = 0;
                                    }
                                    v2695 = (v2584 + 2) * (_QWORD)v2590;
                                    v2696 = (v2584 + 3) * (_QWORD)v2590;
                                    v2697 = (v2584 + 4) * (_QWORD)v2590;
                                    v2698 = (v2584 + 5) * (_QWORD)v2590;
                                    v2699 = (v2584 + 6) * (_QWORD)v2590;
                                    v2700 = (v2584 + 7) * (_QWORD)v2590;
                                    v2701 = (v2584 + 8) * (_QWORD)v2590;
                                    v2702 = (v2584 + 9) * (_QWORD)v2590;
                                    v2703 = (v2584 + 10) * (_QWORD)v2590;
                                    v2704 = (v2584 + 11) * (_QWORD)v2590;
                                    v2705 = (v2584 + 12) * (_QWORD)v2590;
                                    do
                                    {
                                      v2706 = v2588->u16[v2595 + v2705];
                                      v2592->i16[v2595] = (v13->u16[0] * v2593->u16[v2595]
                                                         + v13->u16[1] * v2588->u16[v2595 + v2594 * (_QWORD)v2590]
                                                         + v13->u16[2] * v2588->u16[v2595 + v2695]
                                                         + v13->u16[3] * v2588->u16[v2595 + v2696]
                                                         + v13[1].u16[0] * v2588->u16[v2595 + v2697]
                                                         + v13[1].u16[1] * v2588->u16[v2595 + v2698]
                                                         + v13[1].u16[2] * v2588->u16[v2595 + v2699]
                                                         + v13[1].u16[3] * v2588->u16[v2595 + v2700]
                                                         + v13[2].u16[0] * v2588->u16[v2595 + v2701]
                                                         + v13[2].u16[1] * v2588->u16[v2595 + v2702]
                                                         + v13[2].u16[2] * v2588->u16[v2595 + v2703]
                                                         + v13[2].u16[3] * v2588->u16[v2595 + v2704]
                                                         + v13[3].u16[0] * v2706) >> 15;
                                      ++v2595;
                                    }
                                    while (v131 != v2595);
LABEL_1776:
                                    v2593 = (uint16x8_t *)((char *)v2593 + v2591);
                                    v2592 = (int16x8_t *)((char *)v2592 + v2586);
                                    v2584 = v2594;
                                    if (v2594 == (_DWORD)v3525 - 12)
                                      goto LABEL_1327;
                                  }
                                }
                              }
                            }
                          }
                          else
                          {
                            v941 = 0;
                          }
                          v1341 = v131 - v941;
                          v1342 = 2 * v941;
                          v1343 = (_WORD *)(v134 + 2 * v941 + 8 * v138);
                          v1344 = (uint16x4_t *)((char *)v132 + v1342);
                          do
                          {
                            v1345 = (unsigned __int16 *)((char *)v1344 + v135 * 2 + v135 * 2);
                            v1346 = *v1345;
                            v1347 = &v1345[v135];
                            v1348 = (v13->u16[0] + v13->u16[1] + v13->u16[2]) * v1344->u16[0]
                                  + v13->u16[3] * v1344->u16[v133]
                                  + v13[1].u16[0] * v1346;
                            v1349 = *v1347;
                            v1350 = &v1347[v135];
                            v1351 = v1348 + v13[1].u16[1] * v1349 + v13[1].u16[2] * *v1350;
                            v1352 = &v1350[v135];
                            v1353 = *v1352;
                            v1354 = &v1352[v135];
                            v1355 = v1351 + v13[1].u16[3] * v1353;
                            v1356 = *v1354;
                            v1357 = &v1354[v135];
                            *v1343++ = (v1355
                                      + v13[2].u16[0] * v1356
                                      + v13[2].u16[1] * *v1357
                                      + v13[2].u16[2] * v1357[v135]
                                      + v13[2].u16[3] * v1357[v135 + v135]
                                      + v13[3].u16[0] * v1357[v135 + v135 + v133]) >> 15;
                            v1344 = (uint16x4_t *)((char *)v1344 + 2);
                            --v1341;
                          }
                          while (v1341);
                          goto LABEL_953;
                        }
                      }
                    }
                    else
                    {
                      v439 = 0;
                    }
                    v926 = v131 - v439;
                    v927 = 2 * v439;
                    v928 = (_WORD *)(v134 + 2 * v439 + 6 * v138);
                    v929 = (uint16x4_t *)((char *)v132 + v927);
                    do
                    {
                      v930 = (unsigned __int16 *)((char *)v929 + v135 * 2 + v135 * 2);
                      v931 = *v930;
                      v932 = &v930[v135];
                      v933 = (v13->u16[0] + v13->u16[1] + v13->u16[2] + v13->u16[3]) * v929->u16[0]
                           + v13[1].u16[0] * v929->u16[v133]
                           + v13[1].u16[1] * v931
                           + v13[1].u16[2] * *v932;
                      v934 = &v932[v135];
                      v935 = *v934;
                      v936 = &v934[v135];
                      v937 = v933 + v13[1].u16[3] * v935;
                      v938 = *v936;
                      v939 = &v936[v135];
                      *v928++ = (v937
                               + v13[2].u16[0] * v938
                               + v13[2].u16[1] * *v939
                               + v13[2].u16[2] * v939[v135]
                               + v13[2].u16[3] * v939[v135 + v135]
                               + v13[3].u16[0] * v939[v135 + v135 + v135]) >> 15;
                      v929 = (uint16x4_t *)((char *)v929 + 2);
                      --v926;
                    }
                    while (v926);
                    goto LABEL_635;
                  }
                }
              }
            }
            v431 = v131 - v325;
            v432 = 2 * v325;
            v433 = (_WORD *)(v134 + 2 * v325 + 4 * v138);
            v434 = (uint16x4_t *)((char *)v132 + v432);
            do
            {
              v435 = (unsigned __int16 *)((char *)v434 + v135 * 2 + v135 * 2);
              v436 = &v435[v135 + v135];
              v437 = (vaddvq_s32((int32x4_t)vmovl_u16(*v13)) + v13[1].u16[0]) * v434->u16[0]
                   + v13[1].u16[1] * v434->u16[v133]
                   + v13[1].u16[2] * *v435
                   + v13[1].u16[3] * v435[v133];
              LODWORD(v435) = *v436;
              v438 = &v436[v135];
              *v433++ = (v437
                       + v13[2].u16[0] * (_DWORD)v435
                       + v13[2].u16[1] * *v438
                       + v13[2].u16[2] * v438[v135]
                       + v13[2].u16[3] * v438[v135 + v135]
                       + v13[3].u16[0] * v438[v135 + v135 + v135]) >> 15;
              v434 = (uint16x4_t *)((char *)v434 + 2);
              --v431;
            }
            while (v431);
            goto LABEL_280;
          }
        }
      }
      else
      {
        v4 = v3573;
        v139 = v133;
        v140 = 2 * v131;
        v136 = 4 * v133;
      }
LABEL_204:
      v316 = v131 - v222;
      v317 = (_WORD *)(v134 + 2 * (v222 + v138));
      v318 = (unsigned __int16 *)v132 + v222;
      do
      {
        v319 = &v318[v135 + v135];
        v320 = *v319;
        v321 = &v319[v135];
        v322 = (vaddvq_s32((int32x4_t)vmovl_u16(*v13)) + v13[1].u16[0] + v13[1].u16[1]) * *v318
             + v13[1].u16[2] * v318[v133]
             + v13[1].u16[3] * v320;
        v323 = *v321;
        v324 = &v321[v135];
        *v317++ = (v322
                 + v13[2].u16[0] * v323
                 + v13[2].u16[1] * *v324
                 + v13[2].u16[2] * v324[v135]
                 + v13[2].u16[3] * v324[v135 + v135]
                 + v13[3].u16[0] * v324[v135 + v135 + v135]) >> 15;
        ++v318;
        --v316;
      }
      while (v316);
      goto LABEL_206;
    default:
      v49 = (uint64_t)v3521 >> 1;
      if (v3521 < 2)
        goto LABEL_282;
      v50 = *((unsigned int *)v3573 + 2);
      if ((int)v50 < 1)
        goto LABEL_282;
      v51 = 0;
      v52 = *v3573;
      v53 = *a2;
      v54 = v40 + 1;
      v55 = v3573[2];
      v3552 = (uint64_t)(*v3573)[1].i64 + 2;
      v3565 = a2[2];
      v56 = 2 * (_QWORD)v55;
      v57 = v40 + 1;
      v58 = v3521 >> 1;
LABEL_30:
      v59 = v51 * v3565;
      v60 = v57;
      if ((int)v40 < (int)v51)
      {
        v61 = 0;
        v62 = v58 & 0xFFFFFFF0;
        v64 = v58 > 0xF && v55 == (uint16x8_t *)1;
        v65 = (uint16x8_t *)v3552;
        while (1)
        {
          if (v64)
          {
            v66 = 0uLL;
            v67 = v58 & 0xFFFFFFF0;
            v68 = (uint16x8_t *)&v13[2];
            v69 = v65;
            v70 = 0uLL;
            v71 = 0uLL;
            v72 = 0uLL;
            do
            {
              v73 = v69[-1];
              v74 = v68[-1];
              v70 = (int32x4_t)vmlal_high_u16((uint32x4_t)v70, v74, v73);
              v66 = (int32x4_t)vmlal_u16((uint32x4_t)v66, *(uint16x4_t *)v74.i8, *(uint16x4_t *)v73.i8);
              v72 = (int32x4_t)vmlal_high_u16((uint32x4_t)v72, *v68, *v69);
              v71 = (int32x4_t)vmlal_u16((uint32x4_t)v71, *(uint16x4_t *)v68->i8, *(uint16x4_t *)v69->i8);
              v69 += 2;
              v68 += 2;
              v67 -= 16;
            }
            while (v67);
            v75 = vaddvq_s32(vaddq_s32(vaddq_s32(v71, v66), vaddq_s32(v72, v70)));
            v76 = v62 | 1;
            v77 = v58 & 0xFFFFFFF0;
            if (v62 == v58)
              goto LABEL_38;
          }
          else
          {
            v77 = 0;
            v75 = 0;
            v76 = 1;
          }
          v78 = (unsigned __int16 *)v52 + v61 + (_QWORD)v55 * v76;
          v79 = (unsigned __int16 *)v13 + v77;
          v80 = v58 - v77;
          do
          {
            v81 = *v79++;
            v75 += v81 * *v78;
            v78 = (unsigned __int16 *)((char *)v78 + v56);
            --v80;
          }
          while (v80);
LABEL_38:
          *(_WORD *)(v53 + 2 * (v61 + v59)) = v75 >> 15;
          ++v61;
          v65 = (uint16x8_t *)((char *)v65 + 2);
          if (v61 == v50)
            goto LABEL_29;
        }
      }
      v82 = 0;
      v83 = (v54 - 1) & 0xFFFFFFFFFFFFFFF0;
      v84 = (uint64_t)&v13[2] + 2 * v57;
      v86 = (unint64_t)v54 - 1 > 0xF && v55 == (uint16x8_t *)1;
      v87 = (uint16x8_t *)v3552;
      break;
  }
  while (v60 >= 0x10)
  {
    v90 = 0uLL;
    v91 = v60 & 0xFFFFFFF0;
    v92 = (uint16x8_t *)&v13[2];
    v93 = 0uLL;
    v94 = 0uLL;
    v95 = 0uLL;
    do
    {
      v96 = v92[-1];
      v93 = (int32x4_t)vaddw_high_u16((uint32x4_t)v93, v96);
      v90 = (int32x4_t)vaddw_u16((uint32x4_t)v90, *(uint16x4_t *)v96.i8);
      v95 = (int32x4_t)vaddw_high_u16((uint32x4_t)v95, *v92);
      v94 = (int32x4_t)vaddw_u16((uint32x4_t)v94, *(uint16x4_t *)v92->i8);
      v92 += 2;
      v91 -= 16;
    }
    while (v91);
    v89 = vaddvq_s32(vaddq_s32(vaddq_s32(v94, v90), vaddq_s32(v95, v93)));
    v88 = v60 & 0xFFFFFFF0;
    if (v88 != v60)
      goto LABEL_61;
LABEL_63:
    v100 = v89 * v52->u16[v82];
    if (v86)
    {
      v101 = (int32x4_t)v100;
      v102 = 0uLL;
      v103 = (uint16x8_t *)v84;
      v104 = (v54 - 1) & 0xFFFFFFFFFFFFFFF0;
      v105 = v87;
      v106 = 0uLL;
      v107 = 0uLL;
      do
      {
        v108 = v105[-1];
        v109 = v103[-1];
        v102 = (int32x4_t)vmlal_high_u16((uint32x4_t)v102, v109, v108);
        v101 = (int32x4_t)vmlal_u16((uint32x4_t)v101, *(uint16x4_t *)v109.i8, *(uint16x4_t *)v108.i8);
        v107 = (int32x4_t)vmlal_high_u16((uint32x4_t)v107, *v103, *v105);
        v106 = (int32x4_t)vmlal_u16((uint32x4_t)v106, *(uint16x4_t *)v103->i8, *(uint16x4_t *)v105->i8);
        v105 += 2;
        v103 += 2;
        v104 -= 16;
      }
      while (v104);
      v100 = vaddvq_s32(vaddq_s32(vaddq_s32(v106, v101), vaddq_s32(v107, v102)));
      v110 = v83 | 1;
      v111 = v83 + v60;
      if (v54 - 1 == v83)
        goto LABEL_55;
    }
    else
    {
      v110 = 1;
      v111 = v60;
    }
    v112 = v54 - v110;
    v113 = (unsigned __int16 *)v52 + v82 + (_QWORD)v55 * v110;
    v114 = (unsigned __int16 *)v13 + v111;
    do
    {
      v115 = *v114++;
      v100 += v115 * *v113;
      v113 = (unsigned __int16 *)((char *)v113 + v56);
      --v112;
    }
    while (v112);
LABEL_55:
    *(_WORD *)(v53 + 2 * (v82 + v59)) = v100 >> 15;
    ++v82;
    v87 = (uint16x8_t *)((char *)v87 + 2);
    if (v82 == v50)
    {
LABEL_29:
      ++v51;
      ++v58;
      v57 = v60 - 1;
      ++v54;
      if (v51 != v40)
        goto LABEL_30;
LABEL_282:
      v3502 = *((int *)v3573 + 3);
      v3477 = v3502 - (int)v40;
      if ((int)v3477 > (int)v40)
      {
        v440 = *((unsigned int *)v3573 + 2);
        if ((int)v440 >= 1)
        {
          v441 = 0;
          v442 = *a2;
          v3553 = a2[2];
          v443 = (uint64_t)v3521 >> 1;
          do
          {
            if (v443 - v49 > v443 + v49)
            {
              bzero((void *)(v442 + 2 * v3553 * (v441 + v49)), 2 * v440);
            }
            else
            {
              v444 = 0;
              v445 = *v3573;
              v446 = v3573[2];
              v448 = v3574 > 0xF && v446 == (uint16x8_t *)1;
              v449 = (uint64_t)v445[1].i64 + 2 * (int)v441;
              do
              {
                if (v448)
                {
                  v450 = 0uLL;
                  v451 = (uint16x8_t *)v449;
                  v452 = v3574 & 0xFFFFFFF0;
                  v453 = (uint16x8_t *)&v13[2];
                  v454 = 0uLL;
                  v455 = 0uLL;
                  v456 = 0uLL;
                  do
                  {
                    v457 = v451[-1];
                    v458 = v453[-1];
                    v454 = (int32x4_t)vmlal_high_u16((uint32x4_t)v454, v458, v457);
                    v450 = (int32x4_t)vmlal_u16((uint32x4_t)v450, *(uint16x4_t *)v458.i8, *(uint16x4_t *)v457.i8);
                    v456 = (int32x4_t)vmlal_high_u16((uint32x4_t)v456, *v453, *v451);
                    v455 = (int32x4_t)vmlal_u16((uint32x4_t)v455, *(uint16x4_t *)v453->i8, *(uint16x4_t *)v451->i8);
                    v453 += 2;
                    v451 += 2;
                    v452 -= 16;
                  }
                  while (v452);
                  v459 = vaddvq_s32(vaddq_s32(vaddq_s32(v455, v450), vaddq_s32(v456, v454)));
                  v460 = (int)v441 + (unint64_t)(v3574 & 0xFFFFFFF0);
                  v461 = v3574 & 0xFFFFFFF0;
                }
                else
                {
                  v461 = 0;
                  v459 = 0;
                  v460 = (int)v441;
                }
                v462 = (unsigned __int16 *)v445 + v444 + (_QWORD)v446 * v460;
                v463 = (unsigned __int16 *)v13 + v461;
                v464 = v3574 - v461;
                do
                {
                  v465 = *v463++;
                  v459 += v465 * *v462;
                  v462 += (uint64_t)v446;
                  --v464;
                }
                while (v464);
                *(_WORD *)(v442 + 2 * (v444 + v443 * v3553)) = v459 >> 15;
                ++v444;
                v449 += 2;
              }
              while (v444 != v440);
            }
            ++v443;
            ++v441;
          }
          while ((_DWORD)v3502 - (v3521 & 0xFFFFFFFE) != (_DWORD)v441);
        }
      }
      if (v3521 > 1)
      {
        v466 = *((unsigned int *)v3573 + 2);
        if ((int)v466 >= 1)
        {
          v467 = 0;
          v468 = *v3573;
          v469 = v3573[2];
          v470 = (_QWORD)v469 * (v3502 - 1);
          v471 = *a2;
          v472 = (int)v3502 - 2;
          v3492 = v3502 - 1 - v40;
          v3497 = a2[2];
          v3484 = (size_t)*v3573 + 2 * (_QWORD)v469 * v472;
          v473 = 4 * (_QWORD)v469;
          v3554 = v472;
          v3479 = (uint64_t)(*v3573)->i64 + 2 * (_QWORD)v469 * (v472 - 1);
          v3569 = v469;
          v474 = -2 * (_QWORD)v469;
          v475 = 2;
          v3487 = v49 + v472 + v40 - v3502 + 1;
          v476 = v3487;
          v477 = v3502 - (int)v40;
          while (1)
          {
            v478 = v475;
            v479 = v477 - v40;
            v480 = v477 * v3497;
            v3512 = v476;
            v3515 = v467;
            v3508 = v477;
            if (v477 - v40 <= v3554)
              break;
            if (v477 >= v3492)
            {
              v481 = 0;
              while (1)
              {
                if (v475 >= 0x10)
                {
                  v484 = 0uLL;
                  v485 = v475 & 0xFFFFFFF0;
                  v486 = (uint16x8_t *)&v13[2];
                  v487 = 0uLL;
                  v488 = 0uLL;
                  v489 = 0uLL;
                  do
                  {
                    v490 = v486[-1];
                    v487 = (int32x4_t)vaddw_high_u16((uint32x4_t)v487, v490);
                    v484 = (int32x4_t)vaddw_u16((uint32x4_t)v484, *(uint16x4_t *)v490.i8);
                    v489 = (int32x4_t)vaddw_high_u16((uint32x4_t)v489, *v486);
                    v488 = (int32x4_t)vaddw_u16((uint32x4_t)v488, *(uint16x4_t *)v486->i8);
                    v486 += 2;
                    v485 -= 16;
                  }
                  while (v485);
                  v483 = vaddvq_s32(vaddq_s32(vaddq_s32(v488, v484), vaddq_s32(v489, v487)));
                  v482 = v475 & 0xFFFFFFF0;
                  if (v482 == v475)
                    goto LABEL_312;
                }
                else
                {
                  v482 = 0;
                  v483 = 0;
                }
                v491 = (unsigned __int16 *)v13 + v482;
                v492 = v475 - v482;
                do
                {
                  v493 = *v491++;
                  v483 += v493;
                  --v492;
                }
                while (v492);
LABEL_312:
                *(_WORD *)(v471 + 2 * (v481 + v480)) = (v483 * v468->u16[v481 + v470]) >> 15;
                if (++v481 == v466)
                  goto LABEL_308;
              }
            }
            bzero((void *)(v471 + 2 * v3497 * (v467 + v3477)), 2 * v466);
LABEL_308:
            v477 = v3508 + 1;
            v475 = v478 + 1;
            v467 = v3515 + 1;
            v476 = v3512 - 1;
            if (v3508 + 1 >= v3502)
              goto LABEL_349;
          }
          v494 = v476 & 0xFFFFFFFFFFFFFFFELL;
          v495 = v3487 - v467;
          if (v477 < v3492)
          {
            v496 = 0;
            v497 = v3479;
            v498 = v3484;
            while (1)
            {
              if (v495 >= 2)
              {
                v502 = 0;
                v503 = 0;
                v504 = 0;
                v505 = v494;
                v506 = (unsigned __int16 *)v13 + 1;
                do
                {
                  v507 = *(v506 - 1);
                  v508 = *v506;
                  v506 += 2;
                  v503 += v507 * *(unsigned __int16 *)(v498 + v502);
                  v504 += v508 * *(unsigned __int16 *)(v497 + v502);
                  v502 -= v473;
                  v505 -= 2;
                }
                while (v505);
                v500 = v504 + v503;
                v501 = v3554 - (v495 & 0xFFFFFFFFFFFFFFFELL);
                v499 = v495 & 0xFFFFFFFFFFFFFFFELL;
                if (v495 == (v495 & 0xFFFFFFFFFFFFFFFELL))
                  goto LABEL_323;
              }
              else
              {
                v499 = 0;
                v500 = 0;
                v501 = (int)v3502 - 2;
              }
              v509 = v501 + 1;
              v510 = (unsigned __int16 *)v468 + v496 + (_QWORD)v3569 * v501;
              v511 = (unsigned __int16 *)v13 + v499;
              do
              {
                v512 = *v511++;
                v500 += v512 * *v510;
                --v509;
                v510 = (unsigned __int16 *)((char *)v510 + v474);
              }
              while (v509 > v479);
LABEL_323:
              *(_WORD *)(v471 + 2 * (v496 + v480)) = v500 >> 15;
              ++v496;
              v498 += 2;
              v497 += 2;
              if (v496 == v466)
                goto LABEL_308;
            }
          }
          v513 = 0;
          v514 = v3479;
          v515 = v3484;
          while (2)
          {
            if (v475 < 0x10)
            {
              v516 = 0;
              v517 = 0;
              goto LABEL_339;
            }
            v518 = 0uLL;
            v519 = v475 & 0xFFFFFFF0;
            v520 = (uint16x8_t *)&v13[2];
            v521 = 0uLL;
            v522 = 0uLL;
            v523 = 0uLL;
            do
            {
              v524 = v520[-1];
              v521 = (int32x4_t)vaddw_high_u16((uint32x4_t)v521, v524);
              v518 = (int32x4_t)vaddw_u16((uint32x4_t)v518, *(uint16x4_t *)v524.i8);
              v523 = (int32x4_t)vaddw_high_u16((uint32x4_t)v523, *v520);
              v522 = (int32x4_t)vaddw_u16((uint32x4_t)v522, *(uint16x4_t *)v520->i8);
              v520 += 2;
              v519 -= 16;
            }
            while (v519);
            v517 = vaddvq_s32(vaddq_s32(vaddq_s32(v522, v518), vaddq_s32(v523, v521)));
            v516 = v475 & 0xFFFFFFF0;
            if (v516 != v475)
            {
LABEL_339:
              v525 = (unsigned __int16 *)v13 + v516;
              v526 = v475 - v516;
              do
              {
                v527 = *v525++;
                v517 += v527;
                --v526;
              }
              while (v526);
            }
            v528 = v517 * v468->u16[v513 + v470];
            if (v495 < 2)
            {
              v529 = (int)v3502 - 2;
              v530 = v475;
              goto LABEL_346;
            }
            v531 = 0;
            v532 = 0;
            v533 = (unsigned __int16 *)v13 + v475 + 1;
            v534 = v494;
            do
            {
              v535 = *(v533 - 1);
              v536 = *v533;
              v533 += 2;
              v528 += v535 * *(unsigned __int16 *)(v515 + v531);
              v532 += v536 * *(unsigned __int16 *)(v514 + v531);
              v531 -= v473;
              v534 -= 2;
            }
            while (v534);
            v528 += v532;
            v530 = (v495 & 0xFFFFFFFFFFFFFFFELL) + v475;
            v529 = v3554 - (v495 & 0xFFFFFFFFFFFFFFFELL);
            if (v495 != (v495 & 0xFFFFFFFFFFFFFFFELL))
            {
LABEL_346:
              v537 = v529 + 1;
              v538 = (unsigned __int16 *)v468 + v513 + (_QWORD)v3569 * v529;
              v539 = (unsigned __int16 *)v13 + v530;
              do
              {
                v540 = *v539++;
                v528 += v540 * *v538;
                --v537;
                v538 = (unsigned __int16 *)((char *)v538 + v474);
              }
              while (v537 > v479);
            }
            *(_WORD *)(v471 + 2 * (v513 + v480)) = v528 >> 15;
            ++v513;
            v515 += 2;
            v514 += 2;
            if (v513 == v466)
              goto LABEL_308;
            continue;
          }
        }
      }
LABEL_349:
      v542 = v3574;
      v541 = v3581;
      v543 = v3521;
      if ((int)v3502 < 1)
        goto LABEL_2329;
      v3570 = 0;
      v544 = 0;
      v545 = v13 + 2;
      v3528 = (2 * v49) | 1;
      while (2)
      {
        if (v543 >= 2)
        {
          v547 = 0;
          v548 = *a2;
          v549 = a2[2];
          v550 = v549 * v544;
          v551 = *a2 + v549 * v3570 + 18;
          v552 = v40 + 1;
          v553 = v40 + 1;
          v554 = -(int)v40;
          v555 = v3521 >> 1;
          while (1)
          {
            if (v554 <= 1)
              v556 = 1;
            else
              v556 = v554;
            if ((int)v40 < (int)v547)
            {
              v557 = 0;
              goto LABEL_368;
            }
            if (v552 < 0x10)
              break;
            v559 = v552 & 0xFFFFFFF0;
            v558 = v559;
            v560 = 0uLL;
            v561 = (uint16x8_t *)&v13[2];
            v562 = 0uLL;
            v563 = 0uLL;
            v564 = 0uLL;
            do
            {
              v565 = v561[-1];
              v562 = (int32x4_t)vaddw_high_u16((uint32x4_t)v562, v565);
              v560 = (int32x4_t)vaddw_u16((uint32x4_t)v560, *(uint16x4_t *)v565.i8);
              v564 = (int32x4_t)vaddw_high_u16((uint32x4_t)v564, *v561);
              v563 = (int32x4_t)vaddw_u16((uint32x4_t)v563, *(uint16x4_t *)v561->i8);
              v561 += 2;
              v559 -= 16;
            }
            while (v559);
            v557 = vaddvq_s32(vaddq_s32(vaddq_s32(v563, v560), vaddq_s32(v564, v562)));
            if (v558 != v552)
              goto LABEL_366;
LABEL_368:
            v569 = v557 * *(unsigned __int16 *)(v548 + 2 * v550);
            if (1 - (int)v40 <= (int)v547)
            {
              v570 = v553 - 1;
              v571 = (v556 + v555);
              if (v570 >= 0x10)
              {
                v573 = v570 & 0xFFFFFFFFFFFFFFF0;
                v574 = (uint16x8_t *)((char *)v545 + 2 * v571);
                v572 = v570 & 0xFFFFFFFFFFFFFFF0 | 1;
                v571 += v570 & 0xFFFFFFFFFFFFFFF0;
                v575 = 0uLL;
                v576 = (int32x4_t)v569;
                v577 = (uint16x8_t *)v551;
                v578 = 0uLL;
                v579 = 0uLL;
                do
                {
                  v580 = v574[-1];
                  v581 = v577[-1];
                  v575 = (int32x4_t)vmlal_high_u16((uint32x4_t)v575, v581, v580);
                  v576 = (int32x4_t)vmlal_u16((uint32x4_t)v576, *(uint16x4_t *)v581.i8, *(uint16x4_t *)v580.i8);
                  v579 = (int32x4_t)vmlal_high_u16((uint32x4_t)v579, *v577, *v574);
                  v578 = (int32x4_t)vmlal_u16((uint32x4_t)v578, *(uint16x4_t *)v577->i8, *(uint16x4_t *)v574->i8);
                  v577 += 2;
                  v574 += 2;
                  v573 -= 16;
                }
                while (v573);
                v569 = vaddvq_s32(vaddq_s32(vaddq_s32(v578, v576), vaddq_s32(v579, v575)));
                if (v570 == (v570 & 0xFFFFFFFFFFFFFFF0))
                  goto LABEL_355;
              }
              else
              {
                v572 = 1;
              }
              v582 = v553 - v572;
              v583 = (unsigned __int16 *)(v548 + 2 * (v550 + v572));
              v584 = (unsigned __int16 *)v13 + v571;
              do
              {
                v586 = *v584++;
                v585 = v586;
                v587 = *v583++;
                v569 += v587 * v585;
                --v582;
              }
              while (v582);
            }
LABEL_355:
            v541[v547++] = v569 >> 15;
            --v555;
            --v552;
            ++v554;
            ++v553;
            if (v547 == v40)
              goto LABEL_377;
          }
          v558 = 0;
          v557 = 0;
LABEL_366:
          v566 = (unsigned __int16 *)v13 + v558;
          v567 = v552 - v558;
          do
          {
            v568 = *v566++;
            v557 += v568;
            --v567;
          }
          while (v567);
          goto LABEL_368;
        }
LABEL_377:
        v588 = *((int *)v3573 + 2);
        v589 = v588 - (int)v40;
        if ((int)v589 > (int)v40)
        {
          v590 = 0;
          v591 = (uint64_t)v3521 >> 1;
          do
          {
            if (v591 - v49 > v591 + v49)
            {
              v592 = 0;
            }
            else
            {
              v593 = *a2;
              v594 = a2[2];
              if (v542 >= 0x10)
              {
                v596 = (v3574 & 0xFFFFFFF0) + (uint64_t)v590;
                v597 = (uint16x8_t *)(v593 + 2 * (v590 + v544 * v594) + 16);
                v598 = 0uLL;
                v599 = v3574 & 0xFFFFFFF0;
                v600 = (uint16x8_t *)&v13[2];
                v601 = 0uLL;
                v602 = 0uLL;
                v603 = 0uLL;
                do
                {
                  v604 = v600[-1];
                  v605 = v597[-1];
                  v601 = (int32x4_t)vmlal_high_u16((uint32x4_t)v601, v605, v604);
                  v598 = (int32x4_t)vmlal_u16((uint32x4_t)v598, *(uint16x4_t *)v605.i8, *(uint16x4_t *)v604.i8);
                  v603 = (int32x4_t)vmlal_high_u16((uint32x4_t)v603, *v597, *v600);
                  v602 = (int32x4_t)vmlal_u16((uint32x4_t)v602, *(uint16x4_t *)v597->i8, *(uint16x4_t *)v600->i8);
                  v600 += 2;
                  v597 += 2;
                  v599 -= 16;
                }
                while (v599);
                v592 = vaddvq_s32(vaddq_s32(vaddq_s32(v602, v598), vaddq_s32(v603, v601)));
                v595 = v3574 & 0xFFFFFFF0;
              }
              else
              {
                v595 = 0;
                v592 = 0;
                v596 = v590;
              }
              v606 = (unsigned __int16 *)(v593 + 2 * (v596 + v544 * v594));
              v607 = (unsigned __int16 *)v13 + v595;
              v608 = v542 - v595;
              do
              {
                v610 = *v607++;
                v609 = v610;
                v611 = *v606++;
                v592 += v611 * v609;
                --v608;
              }
              while (v608);
            }
            v541[v591++] = v592 >> 15;
            ++v590;
          }
          while (v590 != (_DWORD)v588 - (v3521 & 0xFFFFFFFE));
        }
        v612 = *a2;
        v613 = a2[2];
        v546 = v613 * v544;
        if (v543 <= 1)
        {
LABEL_352:
          memcpy((void *)(v612 + 2 * v546), v541, 2 * v588);
          ++v544;
          v3570 += 2;
          if (v544 >= *((int *)v3573 + 3))
            goto LABEL_2329;
          continue;
        }
        break;
      }
      v614 = 0;
      v615 = v546 + v588 - 1;
      v616 = (int)v588 - 2;
      v617 = v3528 + v616 - v588;
      v3555 = v613 * v544;
      v618 = v612 + 2 * (v546 + v616) - 14;
      v619 = v612 + v613 * v3570;
      v620 = 1;
      v621 = 2;
      while (2)
      {
        v622 = v621;
        ++v620;
        if (v589 < v588 - 1 - v49)
        {
          v623 = 0;
          v624 = 0;
          goto LABEL_403;
        }
        if (v621 < 0x10)
        {
          v625 = 0;
          v624 = 0;
          goto LABEL_400;
        }
        v626 = v621 & 0xFFFFFFF0;
        v625 = v622 & 0xFFFFFFF0;
        v627 = 0uLL;
        v628 = (uint16x8_t *)&v13[2];
        v629 = 0uLL;
        v630 = 0uLL;
        v631 = 0uLL;
        do
        {
          v632 = v628[-1];
          v629 = (int32x4_t)vaddw_high_u16((uint32x4_t)v629, v632);
          v627 = (int32x4_t)vaddw_u16((uint32x4_t)v627, *(uint16x4_t *)v632.i8);
          v631 = (int32x4_t)vaddw_high_u16((uint32x4_t)v631, *v628);
          v630 = (int32x4_t)vaddw_u16((uint32x4_t)v630, *(uint16x4_t *)v628->i8);
          v628 += 2;
          v626 -= 16;
        }
        while (v626);
        v624 = vaddvq_s32(vaddq_s32(vaddq_s32(v630, v627), vaddq_s32(v631, v629)));
        v623 = v620;
        if (v625 != v622)
        {
LABEL_400:
          v633 = (unsigned __int16 *)v13 + v625;
          v634 = v622 - v625;
          do
          {
            v635 = *v633++;
            v624 += v635;
            --v634;
          }
          while (v634);
          v623 = v620;
        }
LABEL_403:
        v636 = v624 * *(unsigned __int16 *)(v612 + 2 * v615);
        if (v589 - v49 <= v616)
        {
          v637 = v3528 + v616 - (v614 + v588);
          v638 = v623;
          if (v637 < 0x10)
          {
            v639 = (int)v588 - 2;
            v640 = v638;
            goto LABEL_409;
          }
          v641 = v617 & 0xFFFFFFFFFFFFFFF0;
          v639 = v616 - (v637 & 0xFFFFFFFFFFFFFFF0);
          v640 = (v637 & 0xFFFFFFFFFFFFFFF0) + v638;
          v642 = 0uLL;
          v643 = (int32x4_t)v636;
          v644 = (uint16x8_t *)((char *)v545 + 2 * v638);
          v645 = (int16x8_t *)v618;
          v646 = 0uLL;
          v647 = 0uLL;
          do
          {
            v648 = (int8x16_t)vrev64q_s16(*v645);
            v649 = (uint16x8_t)vextq_s8(v648, v648, 8uLL);
            v650 = (int8x16_t)vrev64q_s16(v645[-1]);
            v651 = (uint16x8_t)vextq_s8(v650, v650, 8uLL);
            v652 = v644[-1];
            v642 = (int32x4_t)vmlal_high_u16((uint32x4_t)v642, v652, v649);
            v643 = (int32x4_t)vmlal_u16((uint32x4_t)v643, *(uint16x4_t *)v652.i8, *(uint16x4_t *)v649.i8);
            v647 = (int32x4_t)vmlal_high_u16((uint32x4_t)v647, *v644, v651);
            v646 = (int32x4_t)vmlal_u16((uint32x4_t)v646, *(uint16x4_t *)v644->i8, *(uint16x4_t *)v651.i8);
            v644 += 2;
            v645 -= 2;
            v641 -= 16;
          }
          while (v641);
          v636 = vaddvq_s32(vaddq_s32(vaddq_s32(v646, v643), vaddq_s32(v647, v642)));
          v541 = v3581;
          if (v637 != (v637 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_409:
            v653 = (unsigned __int16 *)v13 + v640;
            do
            {
              v654 = *v653++;
              v636 += v654 * *(unsigned __int16 *)(v619 + 2 * v639);
              v8 = v639-- <= v589 - v49;
            }
            while (!v8);
          }
        }
        v541[v589++] = v636 >> 15;
        v621 = v622 + 1;
        ++v614;
        --v617;
        if (v589 >= v588)
        {
          v543 = v3521;
          v542 = v3574;
          v546 = v3555;
          goto LABEL_352;
        }
        continue;
      }
    }
  }
  v88 = 0;
  v89 = 0;
LABEL_61:
  v97 = (unsigned __int16 *)v13 + v88;
  v98 = v60 - v88;
  do
  {
    v99 = *v97++;
    v89 += v99;
    --v98;
  }
  while (v98);
  goto LABEL_63;
}

void vl_dog_create_octave_list_pwin(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 **v21;
  __int16 *v22;
  __int16 *v23;
  _WORD *v24;
  uint64_t v25;
  uint64_t v26;
  __int16 *v27;
  _WORD *v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  int8x16_t *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  _QWORD *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  int v78;
  int v79;
  unsigned int *v80;
  unint64_t v81;
  uint64_t v82;
  _WORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int16 *v87;
  uint64_t v88;
  uint64_t v89;
  __int16 *v90;
  _WORD *v91;
  uint64_t v92;
  __int16 v93;
  _QWORD *v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  v3 = a3;
  v4 = a2;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5 != -1)
  {
    v94 = a3;
    v96 = a2;
    if (*a3)
      goto LABEL_3;
    goto LABEL_33;
  }
  v35 = *(_DWORD *)(a2 + 12);
  v36 = (v35 + 1) * *(_DWORD *)(a1 + 8);
  if (v36 >= (v35 + 1) * *(_DWORD *)(a1 + 12))
    v36 = (v35 + 1) * *(_DWORD *)(a1 + 12);
  v5 = (int)(round(log((double)v36) / 0.693147181 + -2.0) + (double)v35);
  v94 = v3;
  v96 = v4;
  if (!*v3)
  {
LABEL_33:
    if (v5 <= 0)
    {
      *v3 = 0;
      v3[1] = 0;
      v3[2] = v5;
      return;
    }
    v37 = v5;
    v38 = malloc_type_malloc(72 * v5, 0x10A004022C67442uLL);
    v39 = 0;
    *v3 = 0;
    v3[1] = v38;
    v100 = v37;
    v3[2] = v37;
    while (1)
    {
      while (1)
      {
        v40 = *v3;
        v41 = v3[2];
        if (v39)
          break;
        if (*v3 >= v41)
        {
          v55 = 2 * v41;
          v32 = v41 == 0;
          v56 = 3;
          if (!v32)
            v56 = v55;
          if (v56 <= v40)
            v57 = v40 + 1;
          else
            v57 = v56;
          if (v57)
          {
            v3[1] = malloc_type_realloc((void *)v3[1], 72 * v57, 0xDAC0ADA8uLL);
            v40 = *v3;
          }
          v3[2] = v57;
        }
        *v3 = v40 + 1;
        v58 = v3[1] + 72 * v40;
        *(_QWORD *)(v58 + 64) = 0;
        *(_OWORD *)(v58 + 32) = 0u;
        *(_OWORD *)(v58 + 48) = 0u;
        *(_OWORD *)v58 = 0u;
        *(_OWORD *)(v58 + 16) = 0u;
        vl_dog_create_octave(a1, v4, v3[1] + 72 * *v3 - 72);
        v39 = 1;
        if (v100 == 1)
          return;
      }
      if (*v3 >= v41)
      {
        v42 = 2 * v41;
        v32 = v41 == 0;
        v43 = 3;
        if (!v32)
          v43 = v42;
        if (v43 <= v40)
          v44 = v40 + 1;
        else
          v44 = v43;
        if (v44)
        {
          v3[1] = malloc_type_realloc((void *)v3[1], 72 * v44, 0x1A0CF2CEuLL);
          v40 = *v3;
        }
        v3[2] = v44;
      }
      *v3 = v40 + 1;
      v45 = v3[1] + 72 * v40;
      *(_QWORD *)(v45 + 64) = 0;
      *(_OWORD *)(v45 + 32) = 0u;
      *(_OWORD *)(v45 + 48) = 0u;
      *(_OWORD *)v45 = 0u;
      *(_OWORD *)(v45 + 16) = 0u;
      v46 = *v3;
      v47 = v3[1];
      v48 = *(unsigned int *)(v4 + 4);
      v49 = v47 + 72 * (v39 - 1);
      v52 = *(_QWORD *)(v49 + 48);
      v51 = (uint64_t *)(v49 + 48);
      v50 = v52;
      v53 = *(v51 - 5);
      if (v52 < 1)
        v54 = 0;
      else
        v54 = malloc_type_malloc(4 * v50, 0xFF85D027uLL);
      v59 = v46 - 1;
      v60 = v47 + 72 * (v46 - 1);
      *(_QWORD *)(v60 + 48) = 0;
      v61 = v60 + 48;
      *(_QWORD *)(v61 + 8) = v54;
      v62 = *v51;
      *(_QWORD *)(v61 + 16) = *v51;
      if (v62 >= 1)
      {
        bzero(v54, 4 * v62);
        v62 = *v51;
      }
      *(_QWORD *)v61 = v62;
      if (*v51 >= 1)
        memcpy(*(void **)(v61 + 8), *(const void **)(v47 + 72 * (v39 - 1) + 56), 4 * *v51);
      v63 = (uint64_t *)(v47 + 72 * v59);
      v64 = (int8x16_t *)(int)v48;
      v65 = (int)v48 + 1;
      if ((v48 & 0x80000000) != 0)
      {
        v72 = (_QWORD *)(v47 + 72 * v59);
        v72[3] = 0;
        v72[4] = 0;
        v72[5] = v65;
        if ((_DWORD)v48 != -1)
        {
          *v63 = 0;
          v63[1] = 0;
          v63[2] = (int)v48 + 2;
          v73 = 2 * ((int)v48 + 2);
          if (v73 <= 1)
            v73 = 1;
          if ((_DWORD)v48 == -2)
            v74 = 10;
          else
            v74 = v73;
          v70 = (char *)malloc_type_realloc(0, 24 * v74, 0xBA43F2C6uLL);
          v63[1] = (uint64_t)v70;
          v63[2] = v74;
          v71 = *v63;
          goto LABEL_74;
        }
        v69 = 1;
      }
      else
      {
        v66 = v65;
        v67 = malloc_type_malloc(24 * v65, 0x1010040113C0ABBuLL);
        v68 = (_QWORD *)(v47 + 72 * v59);
        v68[3] = 0;
        v68[4] = v67;
        v68[5] = v66;
        v69 = v48 + 2;
      }
      v70 = (char *)malloc_type_malloc(24 * v69, 0x1010040113C0ABBuLL);
      v71 = 0;
      v63[1] = (uint64_t)v70;
      v63[2] = v69;
LABEL_74:
      v75 = v53 + 24 * (int)v48;
      *v63 = v71 + 1;
      v76 = &v70[24 * v71];
      *(_QWORD *)v76 = 0;
      *((_QWORD *)v76 + 1) = 0;
      *((_QWORD *)v76 + 2) = 0;
      v77 = v63[1] + 24 * *v63;
      LODWORD(v76) = *(_DWORD *)(v75 + 8) + (*(int *)(v75 + 8) < 0);
      v78 = *(_DWORD *)(v75 + 8) / 2;
      v79 = *(_DWORD *)(v75 + 12) / 2;
      *(_DWORD *)(v77 - 16) = v78;
      *(_DWORD *)(v77 - 12) = v79;
      v80 = (unsigned int *)(v77 - 16);
      *((_QWORD *)v80 + 1) = (uint64_t)(int)v76 >> 1;
      v81 = pmem_alloc_ex(2 * v78 * (uint64_t)(v79 + 16), 0, 0);
      v82 = *((_QWORD *)v80 + 1);
      v83 = (_WORD *)(v81 + 16 * v82);
      *((_QWORD *)v80 - 1) = v83;
      v84 = v80[1];
      if ((int)v84 >= 1)
      {
        v85 = *v80;
        if ((int)v85 >= 1)
        {
          v86 = 0;
          v87 = *(__int16 **)v75;
          v88 = 2 * v82;
          v89 = 4 * *(_QWORD *)(v53 + 24 * (int)v64 + 16);
          do
          {
            v90 = v87;
            v91 = v83;
            v92 = v85;
            do
            {
              v93 = *v90;
              v90 += 2;
              *v91++ = v93;
              --v92;
            }
            while (v92);
            ++v86;
            v83 = (_WORD *)((char *)v83 + v88);
            v87 = (__int16 *)((char *)v87 + v89);
          }
          while (v86 != v84);
        }
      }
      create_pyr(v64, v47 + 72 * v59);
      v3 = v94;
      v4 = v96;
      if (++v39 == v100)
        return;
    }
  }
LABEL_3:
  if (v5 >= 1)
  {
    v6 = 0;
    v98 = v5;
    do
    {
      while (1)
      {
        v7 = v3[1];
        if (v6)
          break;
        vl_dog_create_octave(a1, v4, v3[1]);
        v6 = 1;
        if (v98 == 1)
          return;
      }
      v8 = (_QWORD *)(v7 + 72 * v6);
      v99 = *(int *)(v4 + 4);
      v97 = *(v8 - 8);
      v9 = v8 + 6;
      v10 = v8[6];
      v12 = v8 - 3;
      v11 = *(v8 - 3);
      v13 = v8[8];
      if (v11 > v13)
      {
        v31 = 2 * v13;
        v32 = v13 == 0;
        v33 = 64;
        if (!v32)
          v33 = v31;
        if (v33 <= v11)
          v34 = *(v8 - 3);
        else
          v34 = v33;
        if (v34)
        {
          *(_QWORD *)(v7 + 72 * v6 + 56) = malloc_type_realloc(*(void **)(v7 + 72 * v6 + 56), 4 * v34, 0x65DACA68uLL);
          v3 = v94;
        }
        v8[8] = v34;
        v4 = v96;
        v14 = v11 - v10;
        if (v11 <= v10)
        {
LABEL_9:
          v15 = *v12;
          *v9 = *v12;
          v16 = v99;
          if (v15 < 1)
            goto LABEL_11;
LABEL_10:
          memcpy(*(void **)(v7 + 72 * v6 + 56), *(const void **)(v7 + 72 * (v6 - 1) + 56), 4 * v15);
          goto LABEL_11;
        }
      }
      else
      {
        v14 = v11 - v10;
        if (v11 <= v10)
          goto LABEL_9;
      }
      bzero((void *)(*(_QWORD *)(v7 + 72 * v6 + 56) + 4 * *v9), 4 * v14);
      v15 = *v12;
      *v9 = *v12;
      v16 = v99;
      if (v15 >= 1)
        goto LABEL_10;
LABEL_11:
      v17 = v8[1];
      v18 = *(unsigned int *)(v17 + 12);
      if ((int)v18 >= 1)
      {
        v19 = *(unsigned int *)(v17 + 8);
        if ((int)v19 >= 1)
        {
          v20 = 0;
          v21 = (__int16 **)(v97 + 24 * (int)v16);
          v22 = *v21;
          v23 = v21[2];
          v24 = *(_WORD **)v17;
          v25 = 2 * *(_QWORD *)(v17 + 16);
          v26 = 4 * (_QWORD)v23;
          do
          {
            v27 = v22;
            v28 = v24;
            v29 = v19;
            do
            {
              v30 = *v27;
              v27 += 2;
              *v28++ = v30;
              --v29;
            }
            while (v29);
            ++v20;
            v24 = (_WORD *)((char *)v24 + v25);
            v22 = (__int16 *)((char *)v22 + v26);
          }
          while (v20 != v18);
        }
      }
      create_pyr2(v16, (_QWORD *)(v7 + 72 * v6++));
    }
    while (v6 != v98);
  }
}

int8x16_t *vl_dog_create_octave(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v6;
  double v7;
  int v8;
  long double v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  double v17;
  int v18;
  float v19;
  double v20;
  uint64_t v21;
  float v22;
  uint64_t v24;
  float v25;
  int v26;
  void *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  if (*(_DWORD *)(a2 + 12))
  {
    printf("%sAborting : ", (const char *)&unk_210BC3C5E);
    puts("not implemented!");
    putchar(10);
    __assert_rtn("vl_dog_create_octave", "vl_dog.c", 578, "0");
  }
  v6 = *(float *)a2;
  v7 = fmax((float)(v6 * v6) - (float)(*(float *)(a2 + 24) * *(float *)(a2 + 24)) * 1.0, 0.01);
  v8 = *(_DWORD *)(a2 + 4);
  v9 = exp2(1.0 / (double)v8);
  *(_QWORD *)(a3 + 48) = 0;
  v10 = *(_QWORD *)(a3 + 64);
  if (v10 >= 1)
  {
    v11 = *(float **)(a3 + 56);
    v12 = 1;
    *(_QWORD *)(a3 + 48) = 1;
    *v11 = v6;
    v13 = sqrt(v7);
    if (v8 < -1)
      goto LABEL_24;
    goto LABEL_11;
  }
  v14 = 2 * v10;
  if (2 * v10 <= 1)
    v14 = 1;
  if (v10)
    v10 = v14;
  else
    v10 = 64;
  v11 = (float *)malloc_type_realloc(*(void **)(a3 + 56), 4 * v10, 0x9C7F3E90uLL);
  *(_QWORD *)(a3 + 56) = v11;
  *(_QWORD *)(a3 + 64) = v10;
  v15 = *(_QWORD *)(a3 + 48);
  v12 = v15 + 1;
  *(_QWORD *)(a3 + 48) = v15 + 1;
  v11[v15] = v6;
  v13 = sqrt(v7);
  if (v8 >= -1)
  {
LABEL_11:
    v16 = 0;
    v17 = v6;
    if (v8 + 2 <= 1)
      v18 = 1;
    else
      v18 = v8 + 2;
    do
    {
      v20 = pow(v9, (double)v16);
      if (v12 >= v10)
      {
        v21 = 2 * v10;
        if (!v10)
          v21 = 64;
        if (v21 <= v12)
          v10 = v12 + 1;
        else
          v10 = v21;
        if (v10)
        {
          v11 = (float *)malloc_type_realloc(v11, 4 * v10, 0xBB373182uLL);
          *(_QWORD *)(a3 + 56) = v11;
          v12 = *(_QWORD *)(a3 + 48);
        }
        *(_QWORD *)(a3 + 64) = v10;
      }
      v19 = sqrt(-(v20 * v17 * (v20 * v17) - v9 * (v20 * v17 * (v20 * v17)) * v9));
      v11[v12++] = v19;
      *(_QWORD *)(a3 + 48) = v12;
      ++v16;
    }
    while (v18 != v16);
  }
LABEL_24:
  if (*(_QWORD *)a3)
  {
    v22 = v13;
    create_initial_image(a1, *(uint64_t **)(a3 + 8), v22);
    return (int8x16_t *)create_pyr2(*(unsigned int *)(a2 + 4), (_QWORD *)a3);
  }
  else
  {
    v24 = *(int *)(a1 + 12);
    DWORD2(v36) = *(_DWORD *)(a1 + 8);
    HIDWORD(v36) = v24;
    v37 = SDWORD2(v36);
    *(_QWORD *)&v36 = pmem_alloc_ex(2 * SDWORD2(v36) * (v24 + 16), 0, 0) + 16 * SDWORD2(v36);
    v25 = v13;
    create_initial_image(a1, (uint64_t *)&v36, v25);
    v26 = *(_DWORD *)(a2 + 4);
    if (v26 < 0)
    {
      v27 = 0;
    }
    else
    {
      v27 = malloc_type_malloc(24 * v26 + 24, 0x1010040113C0ABBuLL);
      v26 = *(_DWORD *)(a2 + 4);
    }
    v28 = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = v27;
    *(_QWORD *)(a3 + 40) = v26 + 1;
    if (v26 >= -1)
      v28 = (char *)malloc_type_malloc(24 * (v26 + 2), 0x1010040113C0ABBuLL);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = v28;
    v29 = *(int *)(a2 + 4);
    v30 = v29 + 2;
    *(_QWORD *)(a3 + 16) = v29 + 2;
    if ((int)v29 > -2)
    {
      v33 = 0;
    }
    else
    {
      v31 = 2 * v30;
      if (2 * v30 <= 1)
        v31 = 1;
      if ((_DWORD)v29 == -2)
        v32 = 10;
      else
        v32 = v31;
      v28 = (char *)malloc_type_realloc(v28, 24 * v32, 0xA085A6C4uLL);
      *(_QWORD *)(a3 + 8) = v28;
      *(_QWORD *)(a3 + 16) = v32;
      v33 = *(_QWORD *)a3;
    }
    *(_QWORD *)a3 = v33 + 1;
    v34 = &v28[24 * v33];
    v35 = v36;
    *((_QWORD *)v34 + 2) = v37;
    *(_OWORD *)v34 = v35;
    return create_pyr((int8x16_t *)*(unsigned int *)(a2 + 4), a3);
  }
}

uint64_t vl_dog_extract_keypoints_pwin()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  double v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  float v24;
  _QWORD *v25;
  float v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  int *v37;
  int v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  double v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  float v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  float v60;
  float v61;
  float v62;
  uint64_t v63;
  float v64;
  float v65;
  float v66;
  uint64_t v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  uint64_t v73;
  float v74;
  float v75;
  float v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  float v80;
  float v81;
  float v82;
  uint64_t v83;
  float v84;
  float v85;
  float v86;
  uint64_t v87;
  float v88;
  float v89;
  float v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  float v95;
  float v96;
  uint64_t v97;
  float v98;
  uint64_t v99;
  float v100;
  float v101;
  float v102;
  uint64_t v103;
  float v104;
  float v105;
  float v106;
  uint64_t v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  uint64_t v113;
  float v114;
  float v115;
  float v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  float v120;
  float v121;
  float v122;
  uint64_t v123;
  float v124;
  float v125;
  float v126;
  uint64_t v127;
  float v128;
  float v129;
  uint64_t v130;
  int v131;
  int v132;
  int v133;
  int v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  float v146;
  uint64_t v147;
  float v148;
  float v149;
  uint64_t v150;
  float v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  uint64_t v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  int v185;
  float v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  float v194;
  BOOL v195;
  double v197;
  BOOL v198;
  BOOL v200;
  uint64_t v201;
  int v202;
  int v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  int v207;
  float v208;
  int v209;
  int v210;
  int v211;
  float v212;
  float v213;
  int v214;
  float v215;
  float v216;
  float v217;
  uint64_t v218;
  char *v219;
  int v220;
  uint64_t v221;
  int v222;
  int v223;
  float v224;
  float v225;
  int v226;
  int v227;
  size_t v228;
  char *v229;
  _DWORD *v230;
  int v231;
  _DWORD *v232;
  uint64_t v233;
  int *v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  uint64_t v241;
  int32x4_t *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  int32x4_t v247;
  int32x4_t *v248;
  uint64_t v249;
  int32x4_t v250;
  int32x4_t v251;
  char *v252;
  int32x4_t *v253;
  uint64_t v254;
  BOOL v255;
  int *v256;
  int *v257;
  int32x4_t *v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t v263;
  int v264;
  uint64_t i;
  int v266;
  uint64_t v267;
  uint64_t v268;
  int v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  __int32 v273;
  unint64_t v274;
  int v275;
  int v276;
  unint64_t v277;
  int v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  int v285;
  int v286;
  uint64_t v287;
  int v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  int v296;
  uint64_t v297;
  int v298;
  int v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  __int32 v303;
  uint64_t j;
  int v305;
  uint64_t v306;
  uint64_t v307;
  __int32 v308;
  int v309;
  uint64_t v310;
  __int32 v311;
  uint64_t v312;
  uint64_t v313;
  int v314;
  uint64_t v315;
  __int32 v316;
  char *v317;
  int *v318;
  int *v319;
  _DWORD *v320;
  uint64_t v321;
  char *v322;
  uint64_t v323;
  BOOL v324;
  uint64_t v325;
  int *v326;
  int *v327;
  int32x4_t *v328;
  int32x4_t *v329;
  uint64_t v330;
  uint64_t *v331;
  uint64_t v332;
  int v333;
  uint64_t k;
  int v335;
  uint64_t v336;
  uint64_t v337;
  __int32 v338;
  __int32 v339;
  uint64_t v340;
  uint64_t v341;
  int v342;
  size_t v343;
  __int32 v344;
  __int32 v345;
  size_t v346;
  __int32 v347;
  size_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  __int32 v354;
  __int32 v355;
  uint64_t v356;
  __int32 v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  __int32 v365;
  uint64_t v366;
  __int32 v367;
  __int32 v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  int v372;
  uint64_t m;
  __int32 v374;
  uint64_t v375;
  uint64_t v376;
  int v377;
  __int32 v378;
  uint64_t v379;
  int v380;
  uint64_t v381;
  uint64_t v382;
  __int32 v383;
  uint64_t v384;
  int v385;
  uint64_t v386;
  char *v387;
  int32x4_t *v388;
  int32x4_t *v389;
  int *v390;
  int32x4_t *v391;
  int32x4_t v392;
  int32x4_t v393;
  uint64_t v394;
  unint64_t v395;
  int32x4_t v396;
  int32x4_t *v397;
  unint64_t v398;
  uint64_t v399;
  int v400;
  __int32 v401;
  uint64_t v402;
  int32x4_t *v403;
  int v404;
  int *v405;
  int v406;
  int v407;
  int v408;
  int v409;
  int v410;
  int v411;
  int v412;
  uint64_t v413;
  int v414;
  uint64_t v415;
  int *v416;
  uint64_t v417;
  uint64_t v418;
  int *v419;
  uint64_t v420;
  BOOL v421;
  unint64_t v422;
  int *v423;
  __int128 v424;
  uint64_t v425;
  char *v426;
  _DWORD *v427;
  uint64_t v428;
  uint64_t n;
  _DWORD *v430;
  uint64_t v431;
  int *v432;
  int v433;
  unint64_t v434;
  int *v435;
  int v436;
  int v437;
  int v438;
  int v439;
  int v440;
  unint64_t v441;
  int *v442;
  int v443;
  int v444;
  int v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  unint64_t v449;
  uint64_t v450;
  int *v451;
  uint64_t v452;
  int *v453;
  int v454;
  int v455;
  int v456;
  int v457;
  int v458;
  uint64_t v459;
  int *v460;
  int v461;
  int v462;
  int v463;
  int v464;
  int v465;
  uint64_t v466;
  uint64_t v467;
  unint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  int *v474;
  int *v475;
  int v476;
  int v477;
  int v478;
  int v479;
  int v480;
  int *v481;
  int v482;
  int v483;
  int v484;
  int v485;
  int v486;
  uint64_t v487;
  uint64_t v488;
  unint64_t v489;
  _DWORD *v490;
  int v491;
  int v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  char *v496;
  char *v497;
  int v498;
  int v499;
  uint64_t v500;
  char *v501;
  int v502;
  int v503;
  float v504;
  uint64_t v505;
  float v506;
  float v507;
  float v508;
  double v509;
  double v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  unint64_t v514;
  int v515;
  uint64_t v516;
  int v517;
  uint64_t v518;
  int v519;
  float v520;
  float v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  unsigned int v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  int v532;
  uint64_t v533;
  int v534;
  float v535;
  float v536;
  float v537;
  float v538;
  float v539;
  float v540;
  float v541;
  float v542;
  BOOL v543;
  float v544;
  float v545;
  float v546;
  int v547;
  float v548;
  int v549;
  int v550;
  unint64_t v551;
  float *v552;
  float v553;
  float v554;
  float v555;
  float v556;
  uint64_t v557;
  float v558;
  uint64_t v559;
  uint64_t v560;
  int v561;
  float v562;
  float v563;
  unint64_t ii;
  int v565;
  int v566;
  float v567;
  unint64_t v568;
  float *v569;
  float *v570;
  float v571;
  float *v572;
  float v573;
  float v574;
  float v575;
  float v576;
  float v577;
  float v578;
  float v579;
  float v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  void *v585;
  uint64_t v586;
  float v587;
  _QWORD *v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  void *v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  float v598;
  float v599;
  uint64_t v600;
  float v601;
  float v602;
  float v603;
  float v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  void *v609;
  uint64_t v610;
  float v611;
  _QWORD *v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  void *v618;
  uint64_t v619;
  float32x2_t *v620;
  int *v621;
  int v622;
  float v623;
  _QWORD *v624;
  uint64_t v625;
  uint64_t *v626;
  uint64_t v627;
  uint64_t v628;
  _DWORD *v629;
  int v630;
  _QWORD *v631;
  int v632;
  uint64_t v633;
  int v634;
  uint64_t *v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t *v638;
  _QWORD *v639;
  int v640;
  uint64_t v641;
  _QWORD *v642;
  _DWORD *v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  int v648;
  uint64_t v649;
  int v650;
  uint64_t v651;
  uint64_t v652;
  int v653;
  int32x4_t *v654;
  uint64_t v655;
  float v656;
  uint64_t v657;
  int *ptr;
  uint64_t v659;
  char *v660;
  unint64_t v661;
  int v662;
  int *v663;
  uint64_t v664;
  double v665;
  _OWORD __src[1094];
  float v667;
  float v668[35];
  _OWORD v669[9];
  uint64_t v670;

  result = MEMORY[0x24BDAC7A8]();
  v8 = v7;
  v635 = (uint64_t *)result;
  v670 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(v1 + 16);
  v647 = v2;
  v657 = v1;
  if (v9 > 4999)
  {
    v12 = *(_QWORD *)(v2 + 16);
    if (v12 > 4999)
      goto LABEL_6;
  }
  else
  {
    v10 = 2 * v9;
    if (v10 <= 5000)
      v11 = 5000;
    else
      v11 = v10;
    result = (uint64_t)malloc_type_realloc(*(void **)(v1 + 8), 288 * v11, 0xFC4D1E11uLL);
    v2 = v647;
    *(_QWORD *)(v657 + 8) = result;
    *(_QWORD *)(v657 + 16) = v11;
    v12 = *(_QWORD *)(v647 + 16);
    if (v12 > 4999)
    {
LABEL_6:
      v13 = v635;
      if (*v635 < 1)
        goto LABEL_585;
      goto LABEL_15;
    }
  }
  v14 = 2 * v12;
  if (2 * v12 <= 5000)
    v14 = 5000;
  if (v12)
    v15 = v14;
  else
    v15 = 5000;
  result = (uint64_t)malloc_type_realloc(*(void **)(v2 + 8), 8 * v15, 0x21AA444CuLL);
  *(_QWORD *)(v647 + 8) = result;
  *(_QWORD *)(v647 + 16) = v15;
  v13 = v635;
  if (*v635 >= 1)
  {
LABEL_15:
    result = 0;
    v16 = 0.5;
    v17 = 4.0;
    v18 = 6.0;
    v19 = -23.0;
    v20 = 1.0;
    do
    {
      v21 = v13[1];
      v22 = *(_DWORD *)(v8 + 4);
      v636 = result;
      v637 = v21;
      if (v22 >= 1)
      {
        v23 = 0;
        v645 = 0;
        ptr = 0;
        v659 = 0;
        v24 = floorf((float)((float)((float)(*(float *)(v8 + 16) * v16) / (float)v22) * 255.0) * 256.0);
        v25 = (_QWORD *)(v21 + 72 * result + 32);
        v26 = (float)(int)result;
        v27 = *(_DWORD *)(v8 + 28);
        while (1)
        {
          v28 = v23;
          v29 = *v25;
          v30 = *v25 + 24 * v23++;
          v31 = (_DWORD *)(v30 + 36);
          v32 = *(_DWORD *)(v30 + 36);
          if (v27 < v32 - v27)
            break;
LABEL_21:
          if (v23 >= v22)
            goto LABEL_135;
        }
        v33 = (uint64_t *)(v30 + 24);
        v34 = (_QWORD *)(v30 + 48);
        v35 = v29 + 24 * v23;
        v38 = *(_DWORD *)(v35 + 8);
        v37 = (int *)(v35 + 8);
        v36 = v38;
        v39 = (uint64_t *)(v29 + 24 * v28 + 16);
        v40 = (_QWORD *)(v29 + 24 * (v28 + 2) + 16);
        v41 = v27;
        while (2)
        {
          while (v27 >= v36 - v27)
          {
            if (++v41 >= v32 - v27)
            {
LABEL_20:
              v22 = *(_DWORD *)(v8 + 4);
              goto LABEL_21;
            }
          }
          v42 = v41 - 1;
          v43 = v41 + 1;
          v44 = v27;
LABEL_31:
          v45 = *v33;
          v46 = *(_QWORD *)(v30 + 40);
          v47 = v46 * v41;
          v48 = *(unsigned __int16 *)(*v33 + 2 * (v46 * v41 + v44));
          *(float *)&v49 = (float)v48;
          v50 = fabsf((float)v48 + -32768.0);
          if (v50 >= v24)
          {
            if (v48 <= 0x8000)
            {
              if ((v48 & 0x8000) == 0)
              {
                v91 = *(_QWORD *)v30;
                v92 = v44 - 1;
                v93 = *v39;
                v94 = *v39 * v42;
                LOWORD(v50) = *(_WORD *)(*(_QWORD *)v30 + 2 * (v94 + v44 - 1));
                v95 = (float)LODWORD(v50);
                if (*(float *)&v49 < v95)
                {
                  LOWORD(v95) = *(_WORD *)(v91 + 2 * (v94 + v44));
                  v96 = (float)LODWORD(v95);
                  if (*(float *)&v49 < v96)
                  {
                    v97 = v44 + 1;
                    LOWORD(v96) = *(_WORD *)(v91 + 2 * (v94 + v44 + 1));
                    v98 = (float)LODWORD(v96);
                    if (*(float *)&v49 < v98)
                    {
                      v99 = v93 * v41;
                      LOWORD(v98) = *(_WORD *)(v91 + 2 * (v93 * v41 + v92));
                      v100 = (float)LODWORD(v98);
                      if (*(float *)&v49 < v100)
                      {
                        LOWORD(v100) = *(_WORD *)(v91 + 2 * (v99 + v44));
                        v101 = (float)LODWORD(v100);
                        if (*(float *)&v49 < v101)
                        {
                          LOWORD(v101) = *(_WORD *)(v91 + 2 * (v99 + v97));
                          v102 = (float)LODWORD(v101);
                          if (*(float *)&v49 < v102)
                          {
                            v103 = v93 * v43;
                            LOWORD(v102) = *(_WORD *)(v91 + 2 * (v103 + v92));
                            v104 = (float)LODWORD(v102);
                            if (*(float *)&v49 < v104)
                            {
                              LOWORD(v104) = *(_WORD *)(v91 + 2 * (v103 + v44));
                              v105 = (float)LODWORD(v104);
                              if (*(float *)&v49 < v105)
                              {
                                LOWORD(v105) = *(_WORD *)(v91 + 2 * (v103 + v97));
                                v106 = (float)LODWORD(v105);
                                if (*(float *)&v49 < v106)
                                {
                                  v107 = v46 * v42;
                                  LOWORD(v106) = *(_WORD *)(v45 + 2 * (v46 * v42 + v92));
                                  v108 = (float)LODWORD(v106);
                                  if (*(float *)&v49 < v108)
                                  {
                                    LOWORD(v108) = *(_WORD *)(v45 + 2 * (v107 + v44));
                                    v109 = (float)LODWORD(v108);
                                    if (*(float *)&v49 < v109)
                                    {
                                      LOWORD(v109) = *(_WORD *)(v45 + 2 * (v107 + v97));
                                      v110 = (float)LODWORD(v109);
                                      if (*(float *)&v49 < v110)
                                      {
                                        LOWORD(v110) = *(_WORD *)(v45 + 2 * (v47 + v92));
                                        v111 = (float)LODWORD(v110);
                                        if (*(float *)&v49 < v111)
                                        {
                                          LOWORD(v111) = *(_WORD *)(v45 + 2 * (v47 + v97));
                                          v112 = (float)LODWORD(v111);
                                          if (*(float *)&v49 < v112)
                                          {
                                            v113 = v46 * v43;
                                            LOWORD(v112) = *(_WORD *)(v45 + 2 * (v113 + v92));
                                            v114 = (float)LODWORD(v112);
                                            if (*(float *)&v49 < v114)
                                            {
                                              LOWORD(v114) = *(_WORD *)(v45 + 2 * (v113 + v44));
                                              v115 = (float)LODWORD(v114);
                                              if (*(float *)&v49 < v115)
                                              {
                                                LOWORD(v115) = *(_WORD *)(v45 + 2 * (v113 + v97));
                                                v116 = (float)LODWORD(v115);
                                                if (*(float *)&v49 < v116)
                                                {
                                                  v117 = *v34;
                                                  v118 = *v40;
                                                  v119 = *v40 * v42;
                                                  LOWORD(v116) = *(_WORD *)(*v34 + 2 * (v119 + v92));
                                                  v120 = (float)LODWORD(v116);
                                                  if (*(float *)&v49 < v120)
                                                  {
                                                    LOWORD(v120) = *(_WORD *)(v117 + 2 * (v119 + v44));
                                                    v121 = (float)LODWORD(v120);
                                                    if (*(float *)&v49 < v121)
                                                    {
                                                      LOWORD(v121) = *(_WORD *)(v117 + 2 * (v119 + v97));
                                                      v122 = (float)LODWORD(v121);
                                                      if (*(float *)&v49 < v122)
                                                      {
                                                        v123 = v118 * v41;
                                                        LOWORD(v122) = *(_WORD *)(v117 + 2 * (v118 * v41 + v92));
                                                        v124 = (float)LODWORD(v122);
                                                        if (*(float *)&v49 < v124)
                                                        {
                                                          LOWORD(v124) = *(_WORD *)(v117 + 2 * (v123 + v44));
                                                          v125 = (float)LODWORD(v124);
                                                          if (*(float *)&v49 < v125)
                                                          {
                                                            LOWORD(v125) = *(_WORD *)(v117 + 2 * (v123 + v97));
                                                            v126 = (float)LODWORD(v125);
                                                            if (*(float *)&v49 < v126)
                                                            {
                                                              v127 = v118 * v43;
                                                              LOWORD(v126) = *(_WORD *)(v117 + 2 * (v127 + v92));
                                                              v128 = (float)LODWORD(v126);
                                                              if (*(float *)&v49 < v128)
                                                              {
                                                                LOWORD(v128) = *(_WORD *)(v117 + 2 * (v127 + v44));
                                                                v129 = (float)LODWORD(v128);
                                                                if (*(float *)&v49 < v129)
                                                                {
                                                                  LOWORD(v129) = *(_WORD *)(v117 + 2 * (v127 + v97));
                                                                  v90 = (float)LODWORD(v129);
                                                                  if (*(float *)&v49 < v90)
                                                                    goto LABEL_87;
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            else
            {
              v51 = *(_QWORD *)v30;
              v52 = v44 - 1;
              v53 = *v39;
              v54 = *v39 * v42;
              LOWORD(v50) = *(_WORD *)(*(_QWORD *)v30 + 2 * (v54 + v44 - 1));
              v55 = (float)LODWORD(v50);
              if (*(float *)&v49 > v55)
              {
                LOWORD(v55) = *(_WORD *)(v51 + 2 * (v54 + v44));
                v56 = (float)LODWORD(v55);
                if (*(float *)&v49 > v56)
                {
                  v57 = v44 + 1;
                  LOWORD(v56) = *(_WORD *)(v51 + 2 * (v54 + v44 + 1));
                  v58 = (float)LODWORD(v56);
                  if (*(float *)&v49 > v58)
                  {
                    v59 = v53 * v41;
                    LOWORD(v58) = *(_WORD *)(v51 + 2 * (v53 * v41 + v52));
                    v60 = (float)LODWORD(v58);
                    if (*(float *)&v49 > v60)
                    {
                      LOWORD(v60) = *(_WORD *)(v51 + 2 * (v59 + v44));
                      v61 = (float)LODWORD(v60);
                      if (*(float *)&v49 > v61)
                      {
                        LOWORD(v61) = *(_WORD *)(v51 + 2 * (v59 + v57));
                        v62 = (float)LODWORD(v61);
                        if (*(float *)&v49 > v62)
                        {
                          v63 = v53 * v43;
                          LOWORD(v62) = *(_WORD *)(v51 + 2 * (v63 + v52));
                          v64 = (float)LODWORD(v62);
                          if (*(float *)&v49 > v64)
                          {
                            LOWORD(v64) = *(_WORD *)(v51 + 2 * (v63 + v44));
                            v65 = (float)LODWORD(v64);
                            if (*(float *)&v49 > v65)
                            {
                              LOWORD(v65) = *(_WORD *)(v51 + 2 * (v63 + v57));
                              v66 = (float)LODWORD(v65);
                              if (*(float *)&v49 > v66)
                              {
                                v67 = v46 * v42;
                                LOWORD(v66) = *(_WORD *)(v45 + 2 * (v46 * v42 + v52));
                                v68 = (float)LODWORD(v66);
                                if (*(float *)&v49 > v68)
                                {
                                  LOWORD(v68) = *(_WORD *)(v45 + 2 * (v67 + v44));
                                  v69 = (float)LODWORD(v68);
                                  if (*(float *)&v49 > v69)
                                  {
                                    LOWORD(v69) = *(_WORD *)(v45 + 2 * (v67 + v57));
                                    v70 = (float)LODWORD(v69);
                                    if (*(float *)&v49 > v70)
                                    {
                                      LOWORD(v70) = *(_WORD *)(v45 + 2 * (v47 + v52));
                                      v71 = (float)LODWORD(v70);
                                      if (*(float *)&v49 > v71)
                                      {
                                        LOWORD(v71) = *(_WORD *)(v45 + 2 * (v47 + v57));
                                        v72 = (float)LODWORD(v71);
                                        if (*(float *)&v49 > v72)
                                        {
                                          v73 = v46 * v43;
                                          LOWORD(v72) = *(_WORD *)(v45 + 2 * (v73 + v52));
                                          v74 = (float)LODWORD(v72);
                                          if (*(float *)&v49 > v74)
                                          {
                                            LOWORD(v74) = *(_WORD *)(v45 + 2 * (v73 + v44));
                                            v75 = (float)LODWORD(v74);
                                            if (*(float *)&v49 > v75)
                                            {
                                              LOWORD(v75) = *(_WORD *)(v45 + 2 * (v73 + v57));
                                              v76 = (float)LODWORD(v75);
                                              if (*(float *)&v49 > v76)
                                              {
                                                v77 = *v34;
                                                v78 = *v40;
                                                v79 = *v40 * v42;
                                                LOWORD(v76) = *(_WORD *)(*v34 + 2 * (v79 + v52));
                                                v80 = (float)LODWORD(v76);
                                                if (*(float *)&v49 > v80)
                                                {
                                                  LOWORD(v80) = *(_WORD *)(v77 + 2 * (v79 + v44));
                                                  v81 = (float)LODWORD(v80);
                                                  if (*(float *)&v49 > v81)
                                                  {
                                                    LOWORD(v81) = *(_WORD *)(v77 + 2 * (v79 + v57));
                                                    v82 = (float)LODWORD(v81);
                                                    if (*(float *)&v49 > v82)
                                                    {
                                                      v83 = v78 * v41;
                                                      LOWORD(v82) = *(_WORD *)(v77 + 2 * (v78 * v41 + v52));
                                                      v84 = (float)LODWORD(v82);
                                                      if (*(float *)&v49 > v84)
                                                      {
                                                        LOWORD(v84) = *(_WORD *)(v77 + 2 * (v83 + v44));
                                                        v85 = (float)LODWORD(v84);
                                                        if (*(float *)&v49 > v85)
                                                        {
                                                          LOWORD(v85) = *(_WORD *)(v77 + 2 * (v83 + v57));
                                                          v86 = (float)LODWORD(v85);
                                                          if (*(float *)&v49 > v86)
                                                          {
                                                            v87 = v78 * v43;
                                                            LOWORD(v86) = *(_WORD *)(v77 + 2 * (v87 + v52));
                                                            v88 = (float)LODWORD(v86);
                                                            if (*(float *)&v49 > v88)
                                                            {
                                                              LOWORD(v88) = *(_WORD *)(v77 + 2 * (v87 + v44));
                                                              v89 = (float)LODWORD(v88);
                                                              if (*(float *)&v49 > v89)
                                                              {
                                                                LOWORD(v89) = *(_WORD *)(v77 + 2 * (v87 + v57));
                                                                v90 = (float)LODWORD(v89);
                                                                if (*(float *)&v49 > v90)
                                                                {
LABEL_87:
                                                                  v623 = v26;
                                                                  v130 = *v25;
                                                                  v131 = 4;
                                                                  v132 = v44;
                                                                  v133 = v41;
                                                                  v134 = v23;
                                                                  v631 = v25;
                                                                  v633 = v23;
                                                                  v627 = *v25;
                                                                  v629 = v31;
                                                                  v642 = v34;
                                                                  v639 = v40;
                                                                  while (1)
                                                                  {
                                                                    v648 = v131;
                                                                    v135 = (uint64_t *)(v130 + 24 * v134);
                                                                    v136 = *(v135 - 3);
                                                                    v626 = v135 - 3;
                                                                    v137 = v135[3];
                                                                    v624 = v135 + 3;
                                                                    v138 = *(v135 - 1);
                                                                    v139 = *v135;
                                                                    v140 = v132;
                                                                    v141 = v133;
                                                                    v142 = v135[2];
                                                                    v143 = v135[5];
                                                                    v144 = v132 - 1;
                                                                    v145 = v133 - 1;
                                                                    LOWORD(v49) = *(_WORD *)(*v135
                                                                                           + 2 * (v142 * v145 + v144));
                                                                    v146 = (float)LODWORD(v49);
                                                                    v147 = v140;
                                                                    LOWORD(v49) = *(_WORD *)(*v135
                                                                                           + 2 * (v142 * v145 + v140));
                                                                    *(float *)&v49 = (float)LODWORD(v49);
                                                                    LOWORD(v90) = *(_WORD *)(v136
                                                                                           + 2 * (v140 + v138 * v145));
                                                                    v148 = (float)LODWORD(v90);
                                                                    LOWORD(v90) = *(_WORD *)(v137
                                                                                           + 2 * (v140 + v143 * v145));
                                                                    v149 = (float)LODWORD(v90);
                                                                    v662 = v140;
                                                                    v150 = v140 + 1;
                                                                    LOWORD(v90) = *(_WORD *)(*v135
                                                                                           + 2 * (v142 * v145 + v150));
                                                                    v151 = (float)LODWORD(v90);
                                                                    v152 = v141;
                                                                    v153 = v142 * v141;
                                                                    v154 = v138 * v141;
                                                                    v155 = v143 * v141;
                                                                    LOWORD(v90) = *(_WORD *)(*v135 + 2 * (v153 + v144));
                                                                    v156 = (float)LODWORD(v90);
                                                                    LOWORD(v26) = *(_WORD *)(v136 + 2 * (v154 + v144));
                                                                    v157 = (float)LODWORD(v26);
                                                                    LOWORD(v26) = *(_WORD *)(v137 + 2 * (v155 + v144));
                                                                    v158 = (float)LODWORD(v26);
                                                                    LOWORD(v26) = *(_WORD *)(*v135 + 2 * (v153 + v147));
                                                                    v159 = (float)LODWORD(v26);
                                                                    LOWORD(v26) = *(_WORD *)(v136 + 2 * (v154 + v147));
                                                                    v160 = (float)LODWORD(v26);
                                                                    LOWORD(v3) = *(_WORD *)(v137 + 2 * (v155 + v147));
                                                                    *(float *)&v3 = (float)LODWORD(v3);
                                                                    LOWORD(v4) = *(_WORD *)(*v135 + 2 * (v153 + v150));
                                                                    *(float *)&v4 = (float)LODWORD(v4);
                                                                    LOWORD(v5) = *(_WORD *)(v136 + 2 * (v154 + v150));
                                                                    v161 = (float)LODWORD(v5);
                                                                    LOWORD(v5) = *(_WORD *)(v137 + 2 * (v155 + v150));
                                                                    v162 = (float)LODWORD(v5);
                                                                    v653 = v141;
                                                                    v163 = v141 + 1;
                                                                    LOWORD(v5) = *(_WORD *)(*v135
                                                                                          + 2 * (v142 * v163 + v144));
                                                                    v164 = (float)LODWORD(v5);
                                                                    LOWORD(v5) = *(_WORD *)(*v135
                                                                                          + 2 * (v142 * v163 + v147));
                                                                    LOWORD(v6) = *(_WORD *)(v136
                                                                                          + 2 * (v147 + v138 * v163));
                                                                    *(float *)&v5 = (float)LODWORD(v5);
                                                                    v165 = (float)LODWORD(v6);
                                                                    LOWORD(v6) = *(_WORD *)(v137
                                                                                          + 2 * (v147 + v143 * v163));
                                                                    v166 = (float)LODWORD(v6);
                                                                    LOWORD(v6) = *(_WORD *)(*v135
                                                                                          + 2 * (v142 * v163 + v150));
                                                                    v167 = (float)((float)(v156 + *(float *)&v4)
                                                                                 + (float)(v159 * -2.0))
                                                                         * 0.000015319;
                                                                    v168 = (float)((float)((float)((float)((float)LODWORD(v6) - v164)
                                                                                                 - v151)
                                                                                         + v146)
                                                                                 * 0.25)
                                                                         * 0.000015319;
                                                                    v169 = (float)((float)((float)((float)(v162 - v158)
                                                                                                 - v161)
                                                                                         + v157)
                                                                                 * 0.25)
                                                                         * 0.000015319;
                                                                    v170 = (float)((float)(*(float *)&v49 + *(float *)&v5)
                                                                                 + (float)(v159 * -2.0))
                                                                         * 0.000015319;
                                                                    v171 = (float)((float)((float)((float)(v166 - v149)
                                                                                                 - v165)
                                                                                         + v148)
                                                                                 * 0.25)
                                                                         * 0.000015319;
                                                                    v172 = (float)((float)(v160 + *(float *)&v3)
                                                                                 + (float)(v159 * -2.0))
                                                                         * 0.000015319;
                                                                    v173 = (float)(v172 * v170) - (float)(v171 * v171);
                                                                    v174 = (float)(v171 * v168) - (float)(v170 * v169);
                                                                    v175 = (float)((float)(v167 * v173)
                                                                                 - (float)((float)((float)(v172 * v168)
                                                                                                 - (float)(v171 * v169))
                                                                                         * v168))
                                                                         + (float)(v169 * v174);
                                                                    v176 = 0.0;
                                                                    v177 = 0.0;
                                                                    v178 = 0.0;
                                                                    v179 = 0.0;
                                                                    v180 = 0.0;
                                                                    v181 = 0.0;
                                                                    v182 = 0.0;
                                                                    v183 = 0.0;
                                                                    v184 = 0.0;
                                                                    if (v175 != 0.0)
                                                                    {
                                                                      v176 = v173 * (float)(1.0 / v175);
                                                                      v177 = (float)(1.0 / v175)
                                                                           * (float)-(float)((float)(v172 * v168)
                                                                                           - (float)(v171 * v169));
                                                                      v178 = v174 * (float)(1.0 / v175);
                                                                      v179 = -(float)((float)((float)(v172 * v168)
                                                                                            - (float)(v169 * v171))
                                                                                    * (float)(1.0 / v175));
                                                                      v180 = (float)((float)(v172 * v167)
                                                                                   - (float)(v169 * v169))
                                                                           * (float)(1.0 / v175);
                                                                      v181 = -(float)((float)((float)(v171 * v167)
                                                                                            - (float)(v168 * v169))
                                                                                    * (float)(1.0 / v175));
                                                                      v182 = (float)((float)(v171 * v168)
                                                                                   - (float)(v169 * v170))
                                                                           * (float)(1.0 / v175);
                                                                      v183 = -(float)((float)((float)(v171 * v167)
                                                                                            - (float)(v169 * v168))
                                                                                    * (float)(1.0 / v175));
                                                                      v184 = (float)((float)(v170 * v167)
                                                                                   - (float)(v168 * v168))
                                                                           * (float)(1.0 / v175);
                                                                    }
                                                                    v185 = v134;
                                                                    v186 = (float)((float)(*(float *)&v4 - v156) * v16)
                                                                         * 0.000015319;
                                                                    v187 = (float)((float)(*(float *)&v5 - *(float *)&v49)
                                                                                 * v16)
                                                                         * 0.000015319;
                                                                    v188 = (float)((float)(*(float *)&v3 - v160) * v16)
                                                                         * 0.000015319;
                                                                    v189 = (float)((float)((float)(v176 * v186) + 0.0)
                                                                                 + (float)(v177 * v187))
                                                                         + (float)(v178 * v188);
                                                                    v190 = (float)((float)((float)(v179 * v186) + 0.0)
                                                                                 + (float)(v180 * v187))
                                                                         + (float)(v181 * v188);
                                                                    v191 = (float)((float)((float)(v182 * v186) + 0.0)
                                                                                 + (float)(v183 * v187))
                                                                         + (float)(v184 * v188);
                                                                    v26 = -v189;
                                                                    v90 = -v190;
                                                                    v192 = -v191;
                                                                    v193 = fabsf(-v190);
                                                                    v194 = fabsf(-v191);
                                                                    v195 = fabsf(v189) < v16 && v193 < v16;
                                                                    if (v195 && v194 < v16)
                                                                      break;
                                                                    v6 = -0.5;
                                                                    if (v189 >= 0.0)
                                                                      v5 = -0.5;
                                                                    else
                                                                      v5 = 0.5;
                                                                    if (v190 >= 0.0)
                                                                      v4 = -0.5;
                                                                    else
                                                                      v4 = 0.5;
                                                                    v3 = v192;
                                                                    if (v191 >= 0.0)
                                                                      v197 = -0.5;
                                                                    else
                                                                      v197 = 0.5;
                                                                    v134 += (int)(v197 + v3);
                                                                    v34 = v642;
                                                                    v40 = v639;
                                                                    if (v134 < 1)
                                                                    {
                                                                      result = v636;
                                                                      v21 = v637;
                                                                      v17 = 4.0;
                                                                      v18 = 6.0;
                                                                      v25 = v631;
                                                                      v23 = v633;
                                                                      v26 = v623;
                                                                      v31 = v629;
                                                                      goto LABEL_30;
                                                                    }
                                                                    v132 = v662 + (int)(v5 + v26);
                                                                    v198 = v134 > *(_DWORD *)(v8 + 4) || v132 < v27;
                                                                    result = v636;
                                                                    v21 = v637;
                                                                    v17 = 4.0;
                                                                    v18 = 6.0;
                                                                    v25 = v631;
                                                                    v23 = v633;
                                                                    v31 = v629;
                                                                    if (!v198)
                                                                    {
                                                                      v49 = v4 + v90;
                                                                      v133 = v653 + (int)v49;
                                                                      v130 = v627;
                                                                      if (v132 < *(_DWORD *)(v627 + 24 * v185 + 8)
                                                                                - v27
                                                                        && v133 >= v27)
                                                                      {
                                                                        v200 = v133 >= *(_DWORD *)(v627
                                                                                                 + 24 * v185
                                                                                                 + 12)
                                                                                     - v27
                                                                            || v648 == 0;
                                                                        v131 = v648 - 1;
                                                                        if (!v200)
                                                                          continue;
                                                                      }
                                                                    }
                                                                    v26 = v623;
                                                                    goto LABEL_30;
                                                                  }
                                                                  v649 = v134;
                                                                  v201 = v135[2];
                                                                  v202 = *(unsigned __int16 *)(v139
                                                                                             + 2 * (v201 * v141 + v150));
                                                                  v203 = *(unsigned __int16 *)(v139
                                                                                             + 2 * (v201 * v141 + v144));
                                                                  v204 = v201 * v163;
                                                                  v205 = *(unsigned __int16 *)(v139 + 2 * (v204 + v147));
                                                                  v206 = v201 * v145;
                                                                  v207 = *(unsigned __int16 *)(v139
                                                                                             + 2 * (v201 * v145 + v147));
                                                                  *(float *)&v4 = (float)(v202 - v203) * 0.0000076593;
                                                                  *(float *)&v6 = (float)(v205 - v207) * 0.0000076593;
                                                                  *(float *)&v5 = (float)(*(unsigned __int16 *)(v137 + 2 * (v147 + v624[2] * v152))
                                                                                        - *(unsigned __int16 *)(v136 + 2 * (v147 + v626[2] * v152)))
                                                                                * 0.0000076593;
                                                                  v208 = (float)((float)(*(float *)&v6 * v90)
                                                                               + (float)(*(float *)&v4 * v26))
                                                                       + (float)(*(float *)&v5 * v192);
                                                                  v209 = *(unsigned __int16 *)(v139
                                                                                             + 2 * (v201 * v152 + v147));
                                                                  WORD1(v3) = 14208;
                                                                  v210 = *(_DWORD *)(v8 + 4);
                                                                  if ((double)v210
                                                                     * fabsf((float)(v208 * v16)+ (float)((float)(v209 - 0x8000) * 0.000015319)) < *(float *)(v8 + 16))goto LABEL_130;
                                                                  v211 = 2 * v209;
                                                                  v212 = (float)(v203 + v202 - v211) * 0.000015319;
                                                                  *(float *)&v3 = (float)(v207 + v205 - v211)
                                                                                * 0.000015319;
                                                                  LODWORD(v5) = 0.25;
                                                                  *(float *)&v4 = (float)(*(unsigned __int16 *)(v139 + 2 * (v206 + v144))
                                                                                        - (*(unsigned __int16 *)(v139 + 2 * (v204 + v144))
                                                                                         + *(unsigned __int16 *)(v139 + 2 * (v206 + v150)))
                                                                                        + *(unsigned __int16 *)(v139 + 2 * (v204 + v150)))
                                                                                * 0.25;
                                                                  v213 = (float)(v212 * *(float *)&v3)
                                                                       - (float)((float)(*(float *)&v4 * 0.000015319)
                                                                               * (float)(*(float *)&v4 * 0.000015319));
                                                                  if (v213 <= 0.0
                                                                    || (v214 = *(_DWORD *)(v8 + 20),
                                                                        v215 = (float)((float)(v212 + *(float *)&v3)
                                                                                     * (float)(v212 + *(float *)&v3))
                                                                             * (float)v214,
                                                                        *(float *)&v3 = (float)((v214 + 1) * (v214 + 1)),
                                                                        v215 >= (float)(v213 * *(float *)&v3)))
                                                                  {
LABEL_130:
                                                                    v16 = 0.5;
                                                                    v17 = 4.0;
                                                                    v18 = 6.0;
                                                                    v19 = -23.0;
                                                                    v20 = 1.0;
                                                                    result = v636;
                                                                  }
                                                                  else
                                                                  {
                                                                    v216 = *(float *)v8;
                                                                    v217 = exp2f((float)((float)((float)(int)v649 - v191)/ (float)v210)+ v623);
                                                                    memset(__src, 0, 276);
                                                                    if (v659 >= v645)
                                                                    {
                                                                      v218 = 2 * v645;
                                                                      if (2 * v645 <= v659)
                                                                        v218 = v659 + 1;
                                                                      v645 = v218;
                                                                      if (v218)
                                                                        ptr = (int *)malloc_type_realloc(ptr, 304 * v218, 0x78E63A9AuLL);
                                                                      else
                                                                        v645 = 0;
                                                                    }
                                                                    v219 = (char *)&ptr[76 * v659];
                                                                    *(_DWORD *)v219 = v662;
                                                                    *((_DWORD *)v219 + 1) = v653;
                                                                    *((float *)v219 + 2) = (float)v662 - v189;
                                                                    *((float *)v219 + 3) = (float)v653 - v190;
                                                                    *((float *)v219 + 4) = (float)(v217 * v216)
                                                                                         + (float)(v217 * v216);
                                                                    memcpy(v219 + 20, __src, 0x114uLL);
                                                                    result = v636;
                                                                    *(_QWORD *)&ptr[76 * v659++ + 74] = v636 | (v649 << 32);
                                                                    v16 = 0.5;
                                                                    v17 = 4.0;
                                                                    v18 = 6.0;
                                                                    v19 = -23.0;
                                                                    v20 = 1.0;
                                                                  }
                                                                  v21 = v637;
                                                                  v40 = v639;
                                                                  v25 = v631;
                                                                  v23 = v633;
                                                                  v26 = v623;
                                                                  v31 = v629;
                                                                  v34 = v642;
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_30:
          ++v44;
          v36 = *v37;
          v27 = *(_DWORD *)(v8 + 28);
          if (v44 >= *v37 - v27)
          {
            v32 = *v31;
            ++v41;
            if (v43 >= *v31 - v27)
              goto LABEL_20;
            continue;
          }
          goto LABEL_31;
        }
      }
      ptr = 0;
      v659 = 0;
      v645 = 0;
LABEL_135:
      v220 = *(_DWORD *)(v8 + 48);
      if (v220 < 1)
      {
        v245 = v659;
        v246 = (char *)malloc_type_malloc(0x200uLL, 0xEB8841BDuLL);
        if (v659)
          goto LABEL_346;
LABEL_16:
        free(v246);
        goto LABEL_17;
      }
      v221 = *(_QWORD *)(v21 + 72 * result + 32);
      v223 = *(_DWORD *)(v221 + 8);
      v222 = *(_DWORD *)(v221 + 12);
      v224 = (float)v222 / (float)((v223 + 11) / 12);
      v225 = -0.5;
      if (v224 > 0.0)
        v225 = v16;
      v226 = (int)(float)(v224 + v225);
      if (v226 <= 1)
        v226 = 1;
      v227 = v222 - 1;
      v650 = (v226 + v222 - 1) / v226;
      v228 = (12 * v226);
      v229 = (char *)malloc_type_calloc(v228, 4uLL, 0x100004052888210uLL);
      v230 = malloc_type_calloc(v228, 4uLL, 0x100004052888210uLL);
      v231 = v222;
      v232 = v230;
      if ((int)v659 >= 1)
      {
        v233 = v659;
        v234 = ptr + 1;
        do
        {
          v235 = *(v234 - 1);
          if (v235 >= v223)
            v236 = v223 - 1;
          else
            v236 = *(v234 - 1);
          if (v235 >= 0)
            v237 = v236;
          else
            v237 = 0;
          v238 = v237 / ((v223 + 11) / 12);
          if (*v234 >= v231)
            v239 = v227;
          else
            v239 = *v234;
          if (*v234 >= 0)
            v240 = v239;
          else
            v240 = 0;
          v241 = 4 * (v238 + 12 * (v240 / v650));
          ++*(_DWORD *)&v229[v241];
          v234 += 76;
          --v233;
        }
        while (v233);
      }
      v630 = v227;
      v632 = (v223 + 11) / 12;
      v634 = v231;
      v663 = (int *)v229;
      v242 = (int32x4_t *)malloc_type_malloc(4 * v228, 0x100004052888210uLL);
      if (v228 <= 1)
        v243 = 1;
      else
        v243 = v228;
      v643 = v232;
      v640 = v223;
      if (v243 >= 8)
      {
        v244 = v243 & 0x7FFFFFF8;
        v247 = (int32x4_t)xmmword_210BCABD0;
        v248 = v242 + 1;
        v249 = v244;
        v250.i64[0] = 0x400000004;
        v250.i64[1] = 0x400000004;
        v251.i64[0] = 0x800000008;
        v251.i64[1] = 0x800000008;
        do
        {
          v248[-1] = v247;
          *v248 = vaddq_s32(v247, v250);
          v247 = vaddq_s32(v247, v251);
          v248 += 2;
          v249 -= 8;
        }
        while (v249);
        if (v244 == v243)
          goto LABEL_166;
      }
      else
      {
        v244 = 0;
      }
      do
      {
        v242->i32[v244] = v244;
        ++v244;
      }
      while (v243 != v244);
LABEL_166:
      v654 = v242;
      v252 = (char *)malloc_type_malloc(0x200uLL, 0xC4FF132EuLL);
      v253 = v654;
      v254 = 0;
      v255 = 1;
      v256 = v663;
      v257 = v663;
      v258 = v654;
      v259 = v228;
      v260 = 32;
      do
      {
        v261 = v254;
        while (1)
        {
          if (!v255)
          {
            --v261;
            v262 = (uint64_t *)&v252[16 * v261];
            v259 = v262[1];
            v263 = *v262;
            v257 = &v256[v263];
            v258 = (int32x4_t *)((char *)v253 + v263 * 4);
          }
          if ((uint64_t)v259 > 15)
            break;
          if ((uint64_t)v259 > 1)
          {
            v264 = 2;
            for (i = 1; i != v259; ++i)
            {
              v266 = v264;
              do
              {
                v267 = (v266 - 1);
                v268 = (v266 - 2);
                v269 = v257[v267];
                v270 = v257[v268];
                if (v269 >= v270)
                  break;
                v271 = v267;
                v257[v271] = v270;
                v272 = v268;
                v257[v272] = v269;
                v273 = v258->i32[v267];
                v258->i32[v271] = v258->i32[v272];
                v258->i32[v272] = v273;
                v266 = v267;
              }
              while ((int)v267 > 1);
              ++v264;
            }
          }
          v255 = 0;
          v259 = 0;
          if (v261 < 1)
            goto LABEL_234;
        }
        if (v259 > 0x27)
        {
          v280 = 0;
          v281 = 0;
          v282 = 26;
          if (v259 <= 0x7D0)
            v282 = 8;
          v283 = 3;
          if (v259 > 0x7D0)
            v283 = 9;
          while (2)
          {
            v284 = (uint64_t)(v259 - 1 + v280) / v282;
            v285 = v257[v280 / v282];
            v286 = v257[v284];
            v287 = (uint64_t)(2 * v259 - 2 + v280) / v282;
            v288 = v257[v287];
            if (v285 >= v286)
            {
              if (v285 < v288)
                goto LABEL_203;
              if (v286 < v288)
                goto LABEL_205;
            }
            else if (v286 >= v288)
            {
              if (v285 < v288)
              {
LABEL_205:
                *((_QWORD *)__src + v281) = v287;
LABEL_197:
                ++v281;
                v280 += 3 * v259 - 3;
                if (v283 != v281)
                  continue;
                while (2)
                {
                  v289 = 0;
                  v290 = 0;
                  v291 = v283;
                  v283 /= 3uLL;
                  if (v283 <= 1)
                    v292 = 1;
                  else
                    v292 = v283;
                  v293 = 8 * v292;
LABEL_213:
                  v294 = *(_QWORD *)((char *)__src + v289);
                  v295 = *(_QWORD *)((char *)__src + v289 + 8);
                  v296 = v257[v294];
                  v297 = *(_QWORD *)((char *)&__src[1] + v289);
                  v298 = v257[v295];
                  v299 = v257[v297];
                  if (v296 >= v298)
                  {
                    if (v296 < v299)
                      goto LABEL_218;
                    if (v298 < v299)
                      goto LABEL_220;
                  }
                  else if (v298 >= v299)
                  {
                    if (v296 < v299)
                    {
LABEL_220:
                      *(_QWORD *)((char *)__src + v290) = v297;
LABEL_212:
                      v290 += 8;
                      v289 += 24;
                      if (v293 == v290)
                      {
                        if (v291 < 9)
                        {
                          v274 = *(_QWORD *)&__src[0];
                          v275 = *v257;
                          goto LABEL_222;
                        }
                        continue;
                      }
                      goto LABEL_213;
                    }
LABEL_218:
                    *(_QWORD *)((char *)__src + v290) = v294;
                    goto LABEL_212;
                  }
                  break;
                }
                *(_QWORD *)((char *)__src + v290) = v295;
                goto LABEL_212;
              }
LABEL_203:
              *((_QWORD *)__src + v281) = v280 / v282;
              goto LABEL_197;
            }
            break;
          }
          *((_QWORD *)__src + v281) = v284;
          goto LABEL_197;
        }
        v274 = v259 >> 1;
        v275 = *v257;
        v276 = v257[v259 >> 1];
        v277 = v259 - 1;
        v278 = v257[v259 - 1];
        if (v276 >= v278)
          v279 = v259 >> 1;
        else
          v279 = v259 - 1;
        if (v275 >= v278)
          v277 = 0;
        else
          v279 = 0;
        if (v276 >= v278)
          v274 = v277;
        if (v275 >= v276)
          v274 = v279;
LABEL_222:
        v300 = 0;
        v301 = 0;
        v302 = v274;
        *v257 = v257[v302];
        v257[v302] = v275;
        v303 = v258->i32[0];
        v258->i32[0] = v258->i32[v302];
        v258->i32[v302] = v303;
        for (j = 1; j != v259; ++j)
        {
          v305 = v257[j];
          if (v305 <= *v257)
          {
            v306 = ++v300;
            v307 = j;
            v257[v307] = v257[v300];
            v257[v306] = v305;
            v308 = v258->i32[j];
            v258->i32[v307] = v258->i32[v300];
            v258->i32[v306] = v308;
            if (v257[j] == *v257)
            {
              ++v301;
              v309 = v257[v300];
              v310 = v301;
              v257[v300] = v257[v301];
              v257[v310] = v309;
              v311 = v258->i32[v300];
              v258->i32[v300] = v258->i32[v301];
              v258->i32[v310] = v311;
            }
          }
        }
        v312 = 4 * v300 - 4 * v301;
        v313 = v301;
        do
        {
          v314 = *(int *)((char *)v257 + v312);
          v315 = v313;
          *(int *)((char *)v257 + v312) = v257[v313];
          v257[v315] = v314;
          v316 = *(__int32 *)((char *)v258->i32 + v312);
          *(__int32 *)((char *)v258->i32 + v312) = v258->i32[v313];
          v258->i32[v315] = v316;
          v312 += 4;
          v198 = v313-- <= 0;
        }
        while (!v198);
        v254 = v261 + 1;
        if (v261 + 1 >= v260)
        {
          v625 = 2 * v260;
          v628 = v301;
          v252 = (char *)malloc_type_realloc(v252, 32 * v260, 0x9B99AC88uLL);
          v254 = v261 + 1;
          v301 = v628;
          v253 = v654;
          v256 = v663;
          v260 = v625;
        }
        v317 = &v252[16 * v261];
        *(_QWORD *)v317 = v300 + v257 - v256 + 1;
        *((_QWORD *)v317 + 1) = v259 + ~v300;
        v259 = v300 - v301;
        v255 = v300 != v301;
      }
      while ((v261 & 0x8000000000000000) == 0 || v259);
LABEL_234:
      v318 = v256;
      free(v252);
      v319 = v318;
      v320 = v643;
      do
      {
        v321 = *v319;
        if (v243 * v321 > v220)
        {
          v321 = v220 / v243;
          *v319 = v321;
        }
        v220 -= v321;
        ++v319;
        --v243;
      }
      while (v243);
      v322 = (char *)malloc_type_malloc(0x200uLL, 0xC4FF132EuLL);
      v323 = 0;
      v324 = 1;
      v325 = 32;
      v326 = v663;
      v327 = v663;
      v328 = v654;
      v329 = v654;
      while (2)
      {
        v330 = v323;
        while (1)
        {
          if (!v324)
          {
            --v330;
            v331 = (uint64_t *)&v322[16 * v330];
            v228 = v331[1];
            v332 = *v331;
            v329 = (int32x4_t *)((char *)v328 + v332 * 4);
            v327 = &v326[v332];
          }
          if ((uint64_t)v228 > 15)
            break;
          if ((uint64_t)v228 > 1)
          {
            v333 = 2;
            for (k = 1; k != v228; ++k)
            {
              v335 = v333;
              do
              {
                v336 = (v335 - 1);
                v337 = (v335 - 2);
                v338 = v329->i32[v336];
                v339 = v329->i32[v337];
                if (v338 >= v339)
                  break;
                v340 = v336;
                v329->i32[v340] = v339;
                v341 = v337;
                v329->i32[v341] = v338;
                v342 = v327[v336];
                v327[v340] = v327[v341];
                v327[v341] = v342;
                v335 = v336;
              }
              while ((int)v336 > 1);
              ++v333;
            }
          }
          v324 = 0;
          v228 = 0;
          if (v330 < 1)
            goto LABEL_306;
        }
        if (v228 > 0x27)
        {
          v349 = 0;
          v350 = 0;
          v351 = 26;
          if (v228 <= 0x7D0)
            v351 = 8;
          v352 = 3;
          if (v228 > 0x7D0)
            v352 = 9;
          while (2)
          {
            v353 = (uint64_t)(v228 - 1 + v349) / v351;
            v354 = v329->i32[v349 / v351];
            v355 = v329->i32[v353];
            v356 = (uint64_t)(2 * v228 - 2 + v349) / v351;
            v357 = v329->i32[v356];
            if (v354 >= v355)
            {
              if (v354 < v357)
                goto LABEL_275;
              if (v355 < v357)
                goto LABEL_277;
            }
            else if (v355 >= v357)
            {
              if (v354 < v357)
              {
LABEL_277:
                *((_QWORD *)__src + v350) = v356;
LABEL_269:
                ++v350;
                v349 += 3 * v228 - 3;
                if (v352 != v350)
                  continue;
                while (2)
                {
                  v358 = 0;
                  v359 = 0;
                  v360 = v352;
                  v352 /= 3uLL;
                  if (v352 <= 1)
                    v361 = 1;
                  else
                    v361 = v352;
                  v362 = 8 * v361;
LABEL_285:
                  v363 = *(_QWORD *)((char *)__src + v358);
                  v364 = *(_QWORD *)((char *)__src + v358 + 8);
                  v365 = v329->i32[v363];
                  v366 = *(_QWORD *)((char *)&__src[1] + v358);
                  v367 = v329->i32[v364];
                  v368 = v329->i32[v366];
                  if (v365 >= v367)
                  {
                    if (v365 < v368)
                      goto LABEL_290;
                    if (v367 < v368)
                      goto LABEL_292;
                  }
                  else if (v367 >= v368)
                  {
                    if (v365 < v368)
                    {
LABEL_292:
                      *(_QWORD *)((char *)__src + v359) = v366;
LABEL_284:
                      v359 += 8;
                      v358 += 24;
                      if (v362 == v359)
                      {
                        if (v360 < 9)
                        {
                          v343 = *(_QWORD *)&__src[0];
                          v344 = v329->i32[0];
                          goto LABEL_294;
                        }
                        continue;
                      }
                      goto LABEL_285;
                    }
LABEL_290:
                    *(_QWORD *)((char *)__src + v359) = v363;
                    goto LABEL_284;
                  }
                  break;
                }
                *(_QWORD *)((char *)__src + v359) = v364;
                goto LABEL_284;
              }
LABEL_275:
              *((_QWORD *)__src + v350) = v349 / v351;
              goto LABEL_269;
            }
            break;
          }
          *((_QWORD *)__src + v350) = v353;
          goto LABEL_269;
        }
        v343 = v228 >> 1;
        v344 = v329->i32[0];
        v345 = v329->i32[v228 >> 1];
        v346 = v228 - 1;
        v347 = v329->i32[v228 - 1];
        if (v345 >= v347)
          v348 = v228 >> 1;
        else
          v348 = v228 - 1;
        if (v344 >= v347)
          v346 = 0;
        else
          v348 = 0;
        if (v345 >= v347)
          v343 = v346;
        if (v344 >= v345)
          v343 = v348;
LABEL_294:
        v369 = 0;
        v370 = 0;
        v371 = v343;
        v329->i32[0] = v329->i32[v371];
        v329->i32[v371] = v344;
        v372 = *v327;
        *v327 = v327[v371];
        v327[v371] = v372;
        for (m = 1; m != v228; ++m)
        {
          v374 = v329->i32[m];
          if (v374 <= v329->i32[0])
          {
            v375 = ++v370;
            v376 = m;
            v329->i32[v376] = v329->i32[v370];
            v329->i32[v375] = v374;
            v377 = v327[m];
            v327[v376] = v327[v370];
            v327[v375] = v377;
            if (v329->i32[m] == v329->i32[0])
            {
              ++v369;
              v378 = v329->i32[v370];
              v379 = v369;
              v329->i32[v370] = v329->i32[v369];
              v329->i32[v379] = v378;
              v380 = v327[v370];
              v327[v370] = v327[v369];
              v327[v379] = v380;
            }
          }
        }
        v381 = 4 * v370 - 4 * v369;
        v382 = v369;
        do
        {
          v383 = *(__int32 *)((char *)v329->i32 + v381);
          v384 = v382;
          *(__int32 *)((char *)v329->i32 + v381) = v329->i32[v382];
          v329->i32[v384] = v383;
          v385 = *(int *)((char *)v327 + v381);
          *(int *)((char *)v327 + v381) = v327[v382];
          v327[v384] = v385;
          v381 += 4;
          v198 = v382-- <= 0;
        }
        while (!v198);
        v323 = v330 + 1;
        if (v330 + 1 >= v325)
        {
          v386 = 2 * v325;
          v322 = (char *)malloc_type_realloc(v322, 32 * v325, 0x9B99AC88uLL);
          v328 = v654;
          v326 = v663;
          v325 = v386;
          v320 = v643;
        }
        v387 = &v322[16 * v330];
        *(_QWORD *)v387 = v370 + (((char *)v329 - (char *)v328) >> 2) + 1;
        *((_QWORD *)v387 + 1) = v228 + ~v370;
        v228 = v370 - v369;
        v324 = v370 != v369;
        if ((v330 & 0x8000000000000000) == 0 || v228)
          continue;
        break;
      }
LABEL_306:
      v388 = v328;
      free(v322);
      free(v388);
      v389 = (int32x4_t *)malloc_type_malloc(4 * (int)v659, 0x100004052888210uLL);
      v390 = v663;
      v391 = v389;
      v392.i64[0] = 0x400000004;
      v392.i64[1] = 0x400000004;
      v393.i64[0] = 0x800000008;
      v393.i64[1] = 0x800000008;
      if ((int)v659 >= 1)
      {
        v394 = v659;
        if (v659 < 8uLL)
        {
          v395 = 0;
          goto LABEL_312;
        }
        v395 = v659 - (unint64_t)(v659 & 7);
        v396 = (int32x4_t)xmmword_210BCABD0;
        v397 = v389 + 1;
        v398 = v395;
        do
        {
          v397[-1] = v396;
          *v397 = vaddq_s32(v396, v392);
          v396 = vaddq_s32(v396, v393);
          v397 += 2;
          v398 -= 8;
        }
        while (v398);
        if ((v659 & 7) != 0)
        {
          do
          {
LABEL_312:
            v389->i32[v395] = v395;
            ++v395;
          }
          while (v659 != v395);
        }
        LODWORD(__src[0]) = 1337;
        if ((int)v659 >= 2)
        {
          v399 = 0;
          do
          {
            v400 = rand_r((unsigned int *)__src);
            v401 = v391->i32[v399];
            v402 = (int)v399 + v400 % ((int)v399 - (int)v659);
            v391->i32[v399] = v391->i32[v402];
            v391->i32[v402] = v401;
            ++v399;
          }
          while ((_DWORD)v659 - 1 != v399);
        }
        v403 = v391;
        v390 = v663;
        do
        {
          while (1)
          {
            v404 = v403->i32[0];
            v403 = (int32x4_t *)((char *)v403 + 4);
            v405 = &ptr[76 * v404];
            v406 = v405[1];
            v407 = *v405 >= v640 ? v640 - 1 : *v405;
            v408 = *v405 >= 0 ? v407 : 0;
            v409 = v408 / v632;
            v410 = v406 >= v634 ? v630 : v405[1];
            v411 = v406 >= 0 ? v410 : 0;
            v412 = v409 + 12 * (v411 / v650);
            v413 = v412;
            v414 = v320[v413];
            if (v414 < v663[v413])
              break;
            *v405 = -1337;
            if (!--v394)
              goto LABEL_332;
          }
          v320[v412] = v414 + 1;
          --v394;
        }
        while (v394);
      }
LABEL_332:
      if (v659 < 1)
      {
        v245 = 0;
        v417 = v645;
      }
      else
      {
        v245 = 0;
        v415 = 0;
        v416 = ptr;
        v417 = v645;
        do
        {
          if (*v416 != -1337)
          {
            memcpy(&ptr[76 * v245], v416, 0x130uLL);
            v390 = v663;
            ++v245;
          }
          ++v415;
          v416 += 76;
        }
        while (v415 < v659);
      }
      if (v245 > v417)
      {
        v418 = 2 * v417;
        if (2 * v417 <= v245)
          v418 = v245;
        if (v418)
        {
          v419 = (int *)malloc_type_realloc(ptr, 304 * v418, 0x85C33623uLL);
          v390 = v663;
          ptr = v419;
        }
      }
      if (v245 > v659)
      {
        bzero(&ptr[76 * v659], 304 * (v245 - v659));
        v390 = v663;
      }
      free(v390);
      free(v320);
      free(v391);
      v246 = (char *)malloc_type_malloc(0x200uLL, 0xEB8841BDuLL);
      if (!v245)
        goto LABEL_16;
LABEL_346:
      v660 = v246;
      v420 = 0;
      v421 = 1;
      v655 = 32;
      v641 = v245;
      v422 = v245;
      v423 = ptr;
      v424 = 0uLL;
      while (2)
      {
        v425 = v420;
        while (1)
        {
          if (!v421)
          {
            --v425;
            v426 = &v660[16 * v425];
            v422 = *((_QWORD *)v426 + 1);
            v423 = &ptr[76 * *(_QWORD *)v426];
          }
          v664 = v425;
          if ((uint64_t)v422 > 15)
            break;
          if ((uint64_t)v422 > 1)
          {
            v427 = v423 + 76;
            v428 = 2;
            for (n = 1; n != v422; ++n)
            {
              v430 = v427;
              v431 = v428;
              do
              {
                v432 = &v423[76 * (v431 - 2)];
                v433 = v430[75] - v432[75];
                if (!v433)
                {
                  v433 = v430[1] - v423[76 * (v431 - 2) + 1];
                  if (!v433)
                    v433 = *v430 - *v432;
                }
                if ((v433 & 0x80000000) == 0)
                  break;
                __src[17] = v424;
                __src[18] = v424;
                __src[15] = v424;
                __src[16] = v424;
                __src[13] = v424;
                __src[14] = v424;
                __src[11] = v424;
                __src[12] = v424;
                __src[9] = v424;
                __src[10] = v424;
                __src[7] = v424;
                __src[8] = v424;
                __src[5] = v424;
                __src[6] = v424;
                __src[3] = v424;
                __src[4] = v424;
                __src[1] = v424;
                __src[2] = v424;
                __src[0] = v424;
                memcpy(__src, v430, 0x130uLL);
                memcpy(v430, v432, 0x130uLL);
                memcpy(v432, __src, 0x130uLL);
                v424 = 0uLL;
                --v431;
                v430 -= 76;
              }
              while (v431 > 1);
              ++v428;
              v427 += 76;
            }
          }
          v421 = 0;
          v422 = 0;
          v425 = v664;
          if (v664 < 1)
            goto LABEL_466;
        }
        if (v422 > 0x27)
        {
          v446 = 0;
          v447 = 0;
          v448 = 26;
          if (v422 <= 0x7D0)
            v448 = 8;
          v449 = 3;
          if (v422 > 0x7D0)
            v449 = 9;
          while (2)
          {
            v450 = v446 / v448;
            v451 = &v423[76 * (v446 / v448)];
            v452 = (uint64_t)(v422 - 1 + v446) / v448;
            v453 = &v423[76 * v452];
            v454 = v451[75];
            v455 = v453[75];
            v456 = v454 - v455;
            if (v454 == v455)
            {
              v457 = v423[76 * v450 + 1];
              v458 = v423[76 * v452 + 1];
              v456 = v457 - v458;
              if (v457 == v458)
                v456 = *v451 - *v453;
            }
            v459 = (uint64_t)(2 * v422 - 2 + v446) / v448;
            v460 = &v423[76 * v459];
            v461 = v460[75];
            if (v456 < 0)
            {
              v464 = v455 - v461;
              if (!v464)
              {
                v464 = v423[76 * v452 + 1] - v423[76 * v459 + 1];
                if (!v464)
                  v464 = *v453 - *v460;
              }
              if (v464 < 0)
                goto LABEL_405;
              v465 = v454 - v461;
              if (v454 == v461)
              {
                v465 = v423[76 * v450 + 1] - v423[76 * v459 + 1];
                if (!v465)
                  v465 = *v451 - *v460;
              }
              if (v465 < 0)
              {
LABEL_397:
                *((_QWORD *)__src + v447) = v459;
                goto LABEL_384;
              }
            }
            else
            {
              v462 = v454 - v461;
              if (!v462)
              {
                v462 = v423[76 * v450 + 1] - v423[76 * v459 + 1];
                if (!v462)
                  v462 = *v451 - *v460;
              }
              if ((v462 & 0x80000000) == 0)
              {
                v463 = v455 - v461;
                if (v455 == v461)
                {
                  v463 = v423[76 * v452 + 1] - v423[76 * v459 + 1];
                  if (!v463)
                    v463 = *v453 - *v460;
                }
                if (v463 < 0)
                  goto LABEL_397;
LABEL_405:
                *((_QWORD *)__src + v447) = v452;
LABEL_384:
                ++v447;
                v446 += 3 * v422 - 3;
                if (v449 != v447)
                  continue;
                while (2)
                {
                  v466 = 0;
                  v467 = 0;
                  v468 = v449;
                  v449 /= 3uLL;
                  if (v449 <= 1)
                    v469 = 1;
                  else
                    v469 = v449;
                  v470 = 8 * v469;
LABEL_414:
                  v471 = *(_QWORD *)((char *)__src + v466);
                  v472 = *(_QWORD *)((char *)__src + v466 + 8);
                  v473 = *(_QWORD *)((char *)&__src[1] + v466);
                  v474 = &v423[76 * v471];
                  v475 = &v423[76 * v472];
                  v476 = v474[75];
                  v477 = v475[75];
                  v478 = v476 - v477;
                  if (v476 == v477)
                  {
                    v479 = v423[76 * v471 + 1];
                    v480 = v423[76 * v472 + 1];
                    v478 = v479 - v480;
                    if (v479 == v480)
                      v478 = *v474 - *v475;
                  }
                  v481 = &v423[76 * v473];
                  v482 = v481[75];
                  if (v478 < 0)
                  {
                    v485 = v477 - v482;
                    if (!v485)
                    {
                      v485 = v423[76 * v472 + 1] - v423[76 * v473 + 1];
                      if (!v485)
                        v485 = *v475 - *v481;
                    }
                    if (v485 < 0)
                      goto LABEL_434;
                    v486 = v476 - v482;
                    if (v476 == v482)
                    {
                      v486 = v423[76 * v471 + 1] - v423[76 * v473 + 1];
                      if (!v486)
                        v486 = *v474 - *v481;
                    }
                    if (v486 < 0)
                    {
LABEL_426:
                      *(_QWORD *)((char *)__src + v467) = v473;
                      goto LABEL_413;
                    }
                  }
                  else
                  {
                    v483 = v476 - v482;
                    if (!v483)
                    {
                      v483 = v423[76 * v471 + 1] - v423[76 * v473 + 1];
                      if (!v483)
                        v483 = *v474 - *v481;
                    }
                    if ((v483 & 0x80000000) == 0)
                    {
                      v484 = v477 - v482;
                      if (v477 == v482)
                      {
                        v484 = v423[76 * v472 + 1] - v423[76 * v473 + 1];
                        if (!v484)
                          v484 = *v475 - *v481;
                      }
                      if (v484 < 0)
                        goto LABEL_426;
LABEL_434:
                      *(_QWORD *)((char *)__src + v467) = v472;
LABEL_413:
                      v467 += 8;
                      v466 += 24;
                      if (v470 == v467)
                      {
                        if (v468 < 9)
                        {
                          v434 = *(_QWORD *)&__src[0];
                          goto LABEL_436;
                        }
                        continue;
                      }
                      goto LABEL_414;
                    }
                  }
                  break;
                }
                *(_QWORD *)((char *)__src + v467) = v471;
                goto LABEL_413;
              }
            }
            break;
          }
          *((_QWORD *)__src + v447) = v450;
          goto LABEL_384;
        }
        v434 = v422 >> 1;
        v435 = &v423[76 * (v422 >> 1)];
        v436 = v423[75];
        v437 = v435[75];
        v438 = v436 - v437;
        if (v436 == v437)
        {
          v439 = v423[1];
          v440 = v423[76 * v434 + 1];
          v438 = v439 - v440;
          if (v439 == v440)
            v438 = *v423 - *v435;
        }
        v441 = v422 - 1;
        v442 = &v423[76 * v422 - 76];
        v443 = v442[75];
        if (v438 < 0)
        {
          v498 = v437 - v443;
          if (!v498)
          {
            v498 = v423[76 * v434 + 1] - v423[76 * v441 + 1];
            if (!v498)
              v498 = *v435 - *v442;
          }
          if ((v498 & 0x80000000) == 0)
          {
            v499 = v436 - v443;
            if (v436 == v443)
            {
              v499 = v423[1] - v423[76 * v441 + 1];
              if (!v499)
                v499 = *v423 - *v442;
            }
            if (v499 >= 0)
              v434 = 0;
            else
              v434 = v422 - 1;
          }
        }
        else
        {
          v444 = v436 - v443;
          if (!v444)
          {
            v444 = v423[1] - v423[76 * v441 + 1];
            if (!v444)
              v444 = *v423 - *v442;
          }
          if (v444 < 0)
          {
            v434 = 0;
          }
          else
          {
            v445 = v437 - v443;
            if (v437 == v443)
            {
              v445 = v423[76 * v434 + 1] - v423[76 * v441 + 1];
              if (!v445)
                v445 = *v435 - *v442;
            }
            if (v445 < 0)
              v434 = v422 - 1;
          }
        }
LABEL_436:
        __src[17] = v424;
        __src[18] = v424;
        __src[15] = v424;
        __src[16] = v424;
        __src[13] = v424;
        __src[14] = v424;
        __src[11] = v424;
        __src[12] = v424;
        __src[9] = v424;
        __src[10] = v424;
        __src[7] = v424;
        __src[8] = v424;
        __src[5] = v424;
        __src[6] = v424;
        __src[3] = v424;
        __src[4] = v424;
        __src[1] = v424;
        __src[2] = v424;
        __src[0] = v424;
        memcpy(__src, v423, 0x130uLL);
        memcpy(v423, &v423[76 * v434], 0x130uLL);
        memcpy(&v423[76 * v434], __src, 0x130uLL);
        v424 = 0uLL;
        v487 = 0;
        v488 = 0;
        v489 = v422 - 1;
        v490 = v423 + 76;
        do
        {
          v491 = v490[75] - v423[75];
          if (!v491)
          {
            v491 = v490[1] - v423[1];
            if (!v491)
              v491 = *v490 - *v423;
          }
          if (v491 <= 0)
          {
            ++v488;
            __src[17] = v424;
            __src[18] = v424;
            __src[15] = v424;
            __src[16] = v424;
            __src[13] = v424;
            __src[14] = v424;
            __src[11] = v424;
            __src[12] = v424;
            __src[9] = v424;
            __src[10] = v424;
            __src[7] = v424;
            __src[8] = v424;
            __src[5] = v424;
            __src[6] = v424;
            __src[3] = v424;
            __src[4] = v424;
            __src[1] = v424;
            __src[2] = v424;
            __src[0] = v424;
            memcpy(__src, v490, 0x130uLL);
            memcpy(v490, &v423[76 * v488], 0x130uLL);
            memcpy(&v423[76 * v488], __src, 0x130uLL);
            v492 = v490[75] - v423[75];
            if (!v492)
            {
              v492 = v490[1] - v423[1];
              if (!v492)
                v492 = *v490 - *v423;
            }
            v424 = 0uLL;
            if (!v492)
            {
              ++v487;
              memset(__src, 0, 304);
              memcpy(__src, &v423[76 * v488], 0x130uLL);
              memcpy(&v423[76 * v488], &v423[76 * v487], 0x130uLL);
              memcpy(&v423[76 * v487], __src, 0x130uLL);
              v424 = 0uLL;
            }
          }
          v490 += 76;
          --v489;
        }
        while (v489);
        v493 = v487 + 1;
        v651 = v487;
        v494 = 76 * v487;
        v495 = 304 * v488 - v494 * 4;
        do
        {
          __src[17] = v424;
          __src[18] = v424;
          __src[15] = v424;
          __src[16] = v424;
          __src[13] = v424;
          __src[14] = v424;
          __src[11] = v424;
          __src[12] = v424;
          __src[9] = v424;
          __src[10] = v424;
          __src[7] = v424;
          __src[8] = v424;
          __src[5] = v424;
          __src[6] = v424;
          __src[3] = v424;
          __src[4] = v424;
          __src[1] = v424;
          __src[2] = v424;
          __src[0] = v424;
          memcpy(__src, (char *)v423 + v495, 0x130uLL);
          memcpy((char *)v423 + v495, &v423[v494], 0x130uLL);
          memcpy(&v423[v494], __src, 0x130uLL);
          v424 = 0uLL;
          --v493;
          v494 -= 76;
          v495 += 304;
        }
        while (v493 > 0);
        v420 = v664 + 1;
        if (v664 + 1 >= v655)
        {
          v496 = (char *)malloc_type_realloc(v660, 32 * v655, 0x2D5E27AuLL);
          v424 = 0uLL;
          v655 *= 2;
        }
        else
        {
          v496 = v660;
        }
        v660 = v496;
        v497 = &v496[16 * v664];
        *(_QWORD *)v497 = v488 - 0x79435E50D79435E5 * (((char *)v423 - (char *)ptr) >> 4) + 1;
        *((_QWORD *)v497 + 1) = v422 + ~v488;
        v422 = v488 - v651;
        v421 = v488 != v651;
        if ((v664 & 0x8000000000000000) == 0 || v422)
          continue;
        break;
      }
LABEL_466:
      free(v660);
      if (v641 >= 1)
      {
        v500 = 0;
        v638 = (uint64_t *)(v637 + 72 * v636 + 8);
        do
        {
          v652 = v500;
          v501 = (char *)&ptr[76 * v500];
          v503 = *(_DWORD *)v501;
          v502 = *((_DWORD *)v501 + 1);
          memset(__src, 0, 272);
          v646 = *((_QWORD *)v501 + 1);
          v504 = *((float *)v501 + 4);
          memcpy(__src, v501 + 24, 0x110uLL);
          v505 = *((_QWORD *)v501 + 37);
          v656 = v504;
          v506 = (float)(v504 / (float)(1 << v505)) * v16;
          v507 = *(float *)(v8 + 36);
          v508 = *(float *)(v8 + 32) * v506;
          v509 = v508;
          v198 = v508 <= 0.0;
          v510 = -0.5;
          if (!v198)
            v510 = 0.5;
          v511 = *v638;
          v644 = *((_QWORD *)v501 + 37);
          v512 = v505 >> 32;
          v513 = *v638 + 24 * SHIDWORD(v505);
          memset(v668, 0, sizeof(v668));
          v514 = *(unsigned int *)(v8 + 40);
          v515 = (int)(v510 + v509);
          memset(v669, 0, sizeof(v669));
          LODWORD(v516) = v502 - v515;
          if (v502 - v515 <= 1)
            v516 = 1;
          else
            v516 = v516;
          v517 = *(_DWORD *)(v513 + 12) - 2;
          if (v502 + v515 < v517)
            v517 = v502 + v515;
          if ((int)v516 <= v517)
          {
            LODWORD(v518) = v503 - v515;
            if (v503 - v515 <= 1)
              v518 = 1;
            else
              v518 = v518;
            v519 = v503 + v515;
            if (v519 >= *(_DWORD *)(v511 + 24 * (int)v512 + 8) - 2)
              v519 = *(_DWORD *)(v511 + 24 * (int)v512 + 8) - 2;
            if ((int)v518 <= v519)
            {
              v521 = 1.0 / (float)((float)(v506 * v507) * (float)((float)(v506 * v507) + (float)(v506 * v507)));
              v522 = *(_QWORD *)v513;
              v523 = *(_QWORD *)(v511 + 24 * (int)v512 + 16);
              v524 = (v519 + 1);
              v661 = (v517 + 1);
              v525 = v516 + 1;
              v526 = 2 * v523;
              v527 = 2 * v518;
              v528 = v522 + v527 + 2 * v523 * (v516 - 1);
              v529 = v522 + v527 + 2 * v523 * v516 - 2;
              v530 = v524 - v518;
              do
              {
                v531 = 0;
                v532 = (v516 - v502) * (v516 - v502);
                v533 = v516 * v523;
                ++v516;
                do
                {
                  v534 = *(unsigned __int16 *)(v528 + 2 * v531)
                       - *(unsigned __int16 *)(v522 + 2 * (v518 + v523 * v525) + 2 * v531);
                  v535 = -(float)((float)(v532 + (v518 - v503 + v531) * (v518 - v503 + v531)) * v521);
                  v536 = (float)v534 * 0.0039062;
                  v537 = v535 * 0.00390625 + v20;
                  v538 = (float)(*(unsigned __int16 *)(v522 + 2 * ((v518 + v531 + 1) + v533))
                               - *(unsigned __int16 *)(v529 + 2 * v531))
                       * 0.0039062;
                  v539 = (float)((float)((float)(v537 * v537) * (float)(v537 * v537))
                               * (float)((float)(v537 * v537) * (float)(v537 * v537)))
                       * (float)((float)((float)(v537 * v537) * (float)(v537 * v537))
                               * (float)((float)(v537 * v537) * (float)(v537 * v537)));
                  v195 = v535 < v19;
                  v540 = (float)((float)((float)(v539 * v539) * (float)(v539 * v539))
                               * (float)((float)(v539 * v539) * (float)(v539 * v539)))
                       * (float)((float)((float)(v539 * v539) * (float)(v539 * v539))
                               * (float)((float)(v539 * v539) * (float)(v539 * v539)));
                  if (v195)
                    v540 = 0.0;
                  v541 = -v538;
                  if (v538 >= 0.0)
                    v541 = (float)(*(unsigned __int16 *)(v522 + 2 * ((v518 + v531 + 1) + v533))
                                 - *(unsigned __int16 *)(v529 + 2 * v531))
                         * 0.0039062;
                  v542 = -v536;
                  if (v536 >= 0.0)
                    v542 = (float)v534 * 0.0039062;
                  v543 = v541 < v542;
                  if (v541 >= v542)
                    v544 = v542;
                  else
                    v544 = v541;
                  if (v541 <= v542)
                    v541 = v542;
                  v545 = v544 / v541;
                  v546 = v545
                       + (float)((float)((float)(v545 * v545)
                                       * (float)((float)((float)((float)((float)(v545 * v545) * -0.046496) + 0.15931)
                                                       * (float)(v545 * v545))
                                               + -0.32762))
                               * v545);
                  if (v543)
                    v546 = 1.5708 - v546;
                  if (v538 < 0.0)
                    v546 = 3.1416 - v546;
                  if (v536 < 0.0)
                    v546 = -v546;
                  if (v546 < 0.0)
                    v546 = v546 + 6.2832;
                  v520 = (double)(int)v514 / 6.28318531;
                  v547 = (int)(float)(v16 + (float)(v520 * v546));
                  v548 = sqrtf((float)(v536 * v536) + (float)(v538 * v538));
                  if ((int)v514 <= v547)
                    v549 = v514;
                  else
                    v549 = 0;
                  ++v531;
                  *((float *)v669 + v547 - v549) = *((float *)v669 + v547 - v549) + (float)(v540 * v548);
                }
                while (v530 != v531);
                ++v525;
                v528 += v526;
                v529 += v526;
              }
              while (v516 != v661);
            }
          }
          if ((int)v514 > 0)
          {
            v550 = 2 - v514;
            if (v514 > 2)
              v550 = 2;
            v551 = (v514 - 1);
            v552 = (float *)v669 + v514;
            v553 = *((float *)v669 + v550);
            v554 = *(v552 - 1);
            v555 = *(float *)v669;
            v556 = (float)((float)(*(float *)v669 * v18) * 0.0625)
                 + (float)((float)((float)(*(v552 - 2) + v553) * 0.0625)
                         + (float)((float)((float)(v554
                                                 + *(float *)((unint64_t)v669 | (4 * ((_DWORD)v514 != 1))))
                                         * v17)
                                 * 0.0625));
            v667 = v556;
            v557 = v657;
            if ((_DWORD)v514 == 1)
            {
              v558 = v556;
              v560 = v644;
              v559 = v646;
            }
            else
            {
              v561 = 3 - v514;
              if (v514 > 3)
                v561 = 3;
              v562 = (float)((float)((float)(v553 + *(float *)v669) * v17) * 0.0625)
                   + (float)((float)(v554 + *((float *)v669 + v561)) * 0.0625);
              v563 = *((float *)v669 + 1);
              v668[0] = (float)((float)(*((float *)v669 + 1) * v18) * 0.0625) + v562;
              if ((_DWORD)v514 != 2)
              {
                for (ii = 2; ii != v514; ++ii)
                {
                  if (ii >= v551)
                    v565 = v514;
                  else
                    v565 = 0;
                  if (ii + 2 >= v514)
                    v566 = v514;
                  else
                    v566 = 0;
                  v567 = (float)((float)(v555 + *((float *)v669 + (int)ii - v566 + 2)) * 0.0625)
                       + (float)((float)((float)(v563 + *((float *)v669 + (int)ii - v565 + 1)) * v17) * 0.0625);
                  v555 = v563;
                  v563 = *((float *)v669 + ii);
                  v668[ii - 1] = (float)((float)(v563 * v18) * 0.0625) + v567;
                }
              }
              v568 = v514 - 1;
              v569 = &v667;
              v570 = v668;
              v560 = v644;
              v571 = v556;
              v572 = v668;
              v559 = v646;
              do
              {
                v573 = *v572++;
                v574 = v573;
                if (v571 < v573)
                {
                  v571 = v574;
                  v569 = v570;
                }
                v570 = v572;
                --v568;
              }
              while (v568);
              v558 = *v569;
            }
            v575 = (float)(int)v514;
            v665 = (float)(int)v514;
            v576 = v668[v551 - 1];
            if (v576 < v556)
            {
              v577 = v668[((_DWORD)v514 != 1) - 1];
              if (v556 > v577 && v556 >= (float)(v558 * *(float *)(v8 + 44)))
              {
                v578 = (float)((float)(v576 - v577)
                             / (float)((float)((float)(v576 + v577) + (float)(v556 * -2.0))
                                     + (float)((float)(v576 + v577) + (float)(v556 * -2.0))))
                     + 0.0;
                v579 = v578 + v575;
                if (v578 >= 0.0)
                  v579 = v578;
                if (v578 >= v575)
                  v580 = v578 - v575;
                else
                  v580 = v579;
                v581 = *(_QWORD *)v657;
                v582 = *(_QWORD *)(v657 + 16);
                if (*(_QWORD *)v657 >= v582)
                {
                  v583 = 2 * v582;
                  if (v583 <= v581)
                    v584 = v581 + 1;
                  else
                    v584 = v583;
                  if (v584)
                  {
                    v585 = malloc_type_realloc(*(void **)(v657 + 8), 288 * v584, 0xEF89484BuLL);
                    v557 = v657;
                    *(_QWORD *)(v657 + 8) = v585;
                    v581 = *(_QWORD *)v657;
                  }
                  *(_QWORD *)(v557 + 16) = v584;
                }
                *(_QWORD *)v557 = v581 + 1;
                v586 = *(_QWORD *)(v557 + 8) + 288 * v581;
                *(_QWORD *)v586 = v559;
                v587 = 360.0 - v580 * 360.0 / v665;
                *(float *)(v586 + 8) = v656;
                *(float *)(v586 + 12) = v587;
                memcpy((void *)(v586 + 16), __src, 0x110uLL);
                v588 = (_QWORD *)v647;
                v589 = *(_QWORD *)v647;
                v590 = *(_QWORD *)(v647 + 16);
                if (*(_QWORD *)v647 >= v590)
                {
                  v591 = 2 * v590;
                  v200 = v590 == 0;
                  v592 = 32;
                  if (!v200)
                    v592 = v591;
                  if (v592 <= v589)
                    v593 = v589 + 1;
                  else
                    v593 = v592;
                  if (v593)
                  {
                    v594 = malloc_type_realloc(*(void **)(v647 + 8), 8 * v593, 0x2A36EB58uLL);
                    v588 = (_QWORD *)v647;
                    *(_QWORD *)(v647 + 8) = v594;
                    v589 = *(_QWORD *)v647;
                  }
                  v588[2] = v593;
                }
                *v588 = v589 + 1;
                *(_QWORD *)(v588[1] + 8 * v589) = v560;
                v557 = v657;
              }
            }
            if ((_DWORD)v514 != 1)
            {
              v595 = 0;
              v596 = 1;
              do
              {
                v597 = v596 + 1;
                v598 = *(float *)((char *)&v668[-1] + (v595 >> 30));
                v599 = v668[v596 - 1];
                if (v598 < v599)
                {
                  v600 = (v596 + 1);
                  if (v551 == v596)
                    v600 = 0;
                  v601 = v668[v600 - 1];
                  if (v599 > v601 && v599 >= (float)(v558 * *(float *)(v8 + 44)))
                  {
                    v602 = (float)((float)(v598 - v601)
                                 / (float)((float)((float)(v598 + v601) + (float)(v599 * -2.0))
                                         + (float)((float)(v598 + v601) + (float)(v599 * -2.0))))
                         + (float)(int)v596;
                    v603 = v602 + v575;
                    if (v602 >= 0.0)
                      v603 = v602;
                    if (v602 >= v575)
                      v604 = v602 - v575;
                    else
                      v604 = v603;
                    v605 = *(_QWORD *)v557;
                    v606 = *(_QWORD *)(v557 + 16);
                    if (*(_QWORD *)v557 >= v606)
                    {
                      v607 = 2 * v606;
                      if (v607 <= v605)
                        v608 = v605 + 1;
                      else
                        v608 = v607;
                      if (v608)
                      {
                        v609 = malloc_type_realloc(*(void **)(v557 + 8), 288 * v608, 0xEF89484BuLL);
                        v557 = v657;
                        *(_QWORD *)(v657 + 8) = v609;
                        v605 = *(_QWORD *)v657;
                      }
                      *(_QWORD *)(v557 + 16) = v608;
                    }
                    *(_QWORD *)v557 = v605 + 1;
                    v610 = *(_QWORD *)(v557 + 8) + 288 * v605;
                    *(_QWORD *)v610 = v559;
                    v611 = 360.0 - v604 * 360.0 / v665;
                    *(float *)(v610 + 8) = v656;
                    *(float *)(v610 + 12) = v611;
                    memcpy((void *)(v610 + 16), __src, 0x110uLL);
                    v612 = (_QWORD *)v647;
                    v613 = *(_QWORD *)v647;
                    v614 = *(_QWORD *)(v647 + 16);
                    if (*(_QWORD *)v647 >= v614)
                    {
                      v615 = 2 * v614;
                      v200 = v614 == 0;
                      v616 = 32;
                      if (!v200)
                        v616 = v615;
                      if (v616 <= v613)
                        v617 = v613 + 1;
                      else
                        v617 = v616;
                      if (v617)
                      {
                        v618 = malloc_type_realloc(*(void **)(v647 + 8), 8 * v617, 0x2A36EB58uLL);
                        v612 = (_QWORD *)v647;
                        *(_QWORD *)(v647 + 8) = v618;
                        v613 = *(_QWORD *)v647;
                      }
                      v612[2] = v617;
                    }
                    *v612 = v613 + 1;
                    *(_QWORD *)(v612[1] + 8 * v613) = v560;
                    v557 = v657;
                  }
                }
                v595 += 0x100000000;
                v596 = v597;
              }
              while (v514 != v597);
            }
          }
          v500 = v652 + 1;
          v17 = 4.0;
          v18 = 6.0;
        }
        while (v652 + 1 != v641);
      }
LABEL_17:
      free(ptr);
      v13 = v635;
      result = v636 + 1;
    }
    while (*v635 > v636 + 1);
  }
LABEL_585:
  v619 = *(_QWORD *)v657;
  if (*(_QWORD *)v657 >= *(_QWORD *)v647)
    v619 = *(_QWORD *)v647;
  if (v619 >= 1)
  {
    v620 = *(float32x2_t **)(v657 + 8);
    v621 = *(int **)(v647 + 8);
    do
    {
      v622 = *v621;
      v621 += 2;
      *v620 = vmul_n_f32(*v620, (float)(1 << v622));
      v620 += 36;
      --v619;
    }
    while (v619);
  }
  return result;
}

