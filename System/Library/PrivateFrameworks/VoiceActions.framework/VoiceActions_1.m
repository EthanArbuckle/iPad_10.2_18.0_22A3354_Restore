uint64_t sub_24A1B23B4(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t sub_24A1B23FC()
{
  char *v0;
  char *v1;
  uint64_t ObjectType;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  char *v7;
  uint64_t result;
  _QWORD v9[6];

  v1 = v0;
  ObjectType = swift_getObjectType();
  v3 = *(NSObject **)&v1[OBJC_IVAR___FeatureExtractObjc_stateAccessQueue];
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = ObjectType;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = sub_24A1B85C8;
  *(_QWORD *)(v5 + 24) = v4;
  v9[4] = sub_24A17C8CC;
  v9[5] = v5;
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 1107296256;
  v9[2] = sub_24A17D4D8;
  v9[3] = &unk_251B9CCF8;
  v6 = _Block_copy(v9);
  v7 = v1;
  swift_retain();
  swift_release();
  dispatch_sync(v3, v6);
  _Block_release(v6);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v1 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t *sub_24A1B2568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  float v50;
  unint64_t v51;
  uint64_t *result;
  uint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _WORD *v59;
  __int16 *v60;
  __int16 v61;
  __int128 *v62;
  _OWORD *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;

  v11 = OBJC_IVAR___FeatureExtractObjc_frameDuration;
  v12 = *(float *)(v4 + OBJC_IVAR___FeatureExtractObjc_frameDuration);
  v13 = (float)((float)(v12 * (float)a1) * 16000.0) + -560.0;
  if (v13 <= -9.2234e18)
    goto LABEL_70;
  if (v13 >= 9.2234e18)
    goto LABEL_71;
  v7 = a2;
  v14 = (float)((float)(v12 * (float)a2) * 16000.0) + 560.0;
  if ((LODWORD(v13) & 0x7F800000) == 0x7F800000 || (LODWORD(v14) & 0x7F800000) == 2139095040)
    goto LABEL_72;
  if (v14 <= -9.2234e18)
    goto LABEL_73;
  if (v14 >= 9.2234e18)
    goto LABEL_74;
  v6 = v4;
  v8 = (uint64_t)v13;
  v9 = OBJC_IVAR___FeatureExtractObjc_numSamplesRemovedFromAudioSampleInjestionBuffer;
  v16 = *(_QWORD *)(v4 + OBJC_IVAR___FeatureExtractObjc_numSamplesRemovedFromAudioSampleInjestionBuffer);
  v3 = (uint64_t)v13 - v16;
  if (__OFSUB__((uint64_t)v13, v16))
    goto LABEL_75;
  v5 = a3;
  v10 = (uint64_t)v14;
  if (v3 < 0)
  {
    if (qword_25791B520 != -1)
      swift_once();
    sub_24A135F88(qword_25790AEF0);
    v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_24A218660;
    v18 = MEMORY[0x24BEE1768];
    v19 = MEMORY[0x24BEE17F0];
    *(_QWORD *)(v17 + 56) = MEMORY[0x24BEE1768];
    *(_QWORD *)(v17 + 64) = v19;
    *(_QWORD *)(v17 + 32) = v8;
    v20 = *(_QWORD *)(v4 + v9);
    *(_QWORD *)(v17 + 96) = v18;
    *(_QWORD *)(v17 + 104) = v19;
    *(_QWORD *)(v17 + 72) = v20;
    OS_os_log.error(_:_:)((uint64_t)"startSample %d - removed %d < 0, using 0", 40, 2, v17);
    swift_bridgeObjectRelease();
    v3 = 0;
  }
  *(_QWORD *)v5 = v7;
  v21 = *(_QWORD *)(v4 + v9);
  v8 = v10 - v21;
  if (__OFSUB__(v10, v21))
    goto LABEL_76;
  if (v8 < 0)
  {
    if (qword_25791B520 != -1)
      swift_once();
    sub_24A135F88(qword_25790AEF0);
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_24A218660;
    v23 = MEMORY[0x24BEE1768];
    v24 = MEMORY[0x24BEE17F0];
    *(_QWORD *)(v22 + 56) = MEMORY[0x24BEE1768];
    *(_QWORD *)(v22 + 64) = v24;
    *(_QWORD *)(v22 + 32) = v10;
    v25 = *(_QWORD *)(v4 + v9);
    *(_QWORD *)(v22 + 96) = v23;
    *(_QWORD *)(v22 + 104) = v24;
    *(_QWORD *)(v22 + 72) = v25;
    OS_os_log.error(_:_:)((uint64_t)"endSample %d - removed %d < 0, using 0", 38, 2, v22);
    swift_bridgeObjectRelease();
    v8 = 0;
  }
  v7 = v4 + OBJC_IVAR___FeatureExtractObjc_audioSampleIngestionBuffer;
  swift_beginAccess();
  v26 = *(_QWORD *)(*(_QWORD *)v7 + 24);
  if (v8 < v26)
    goto LABEL_28;
  v8 = v26 - 1;
  if (__OFSUB__(v26, 1))
    goto LABEL_82;
  v27 = *(_QWORD *)(v4 + v9);
  v28 = __OFADD__(v8, v27);
  v29 = v8 + v27;
  if (v28)
    goto LABEL_83;
  v28 = __OFSUB__(v29, 560);
  v30 = v29 - 560;
  if (v28)
    goto LABEL_84;
  v31 = (double)v30 / (float)(*(float *)(v4 + v11) * 16000.0);
  if ((~*(_QWORD *)&v31 & 0x7FF0000000000000) == 0)
    goto LABEL_85;
  if (v31 <= -9.22337204e18)
    goto LABEL_86;
  if (v31 >= 9.22337204e18)
    goto LABEL_87;
  *(_QWORD *)v5 = (uint64_t)v31;
  if (qword_25791B520 != -1)
    goto LABEL_88;
  while (1)
  {
    sub_24A135F88(qword_25790AEF0);
    v32 = swift_allocObject();
    v33 = MEMORY[0x24BEE1768];
    *(_OWORD *)(v32 + 16) = xmmword_24A218670;
    v34 = MEMORY[0x24BEE17F0];
    *(_QWORD *)(v32 + 56) = v33;
    *(_QWORD *)(v32 + 64) = v34;
    *(_QWORD *)(v32 + 32) = v10;
    v35 = *(_QWORD *)(v6 + v9);
    *(_QWORD *)(v32 + 96) = v33;
    *(_QWORD *)(v32 + 104) = v34;
    *(_QWORD *)(v32 + 72) = v35;
    v36 = *(_QWORD *)v7;
    v37 = *(_QWORD *)(*(_QWORD *)v7 + 24);
    *(_QWORD *)(v32 + 136) = v33;
    *(_QWORD *)(v32 + 144) = v34;
    *(_QWORD *)(v32 + 112) = v37;
    v38 = *(_QWORD *)(v36 + 24);
    *(_QWORD *)(v32 + 176) = v33;
    *(_QWORD *)(v32 + 184) = v34;
    *(_QWORD *)(v32 + 152) = v38;
    v39 = *(_QWORD *)v5;
    *(_QWORD *)(v32 + 216) = v33;
    *(_QWORD *)(v32 + 224) = v34;
    *(_QWORD *)(v32 + 192) = v39;
    OS_os_log.error(_:_:)((uint64_t)"Getting data beyond end of buffer: (endSample %d - removed %d) > count %d, so using %d, actual end frame=%d", 107, 2, v32);
    swift_bridgeObjectRelease();
LABEL_28:
    if (__OFSUB__(v8, v3))
      goto LABEL_77;
    if (!(v8 | v3))
      return 0;
    v40 = (double)(v8 - v3) / 16000.0;
    if (v8 < 0)
    {
      v8 = *(_QWORD *)(*(_QWORD *)v7 + 24);
      if (qword_25791B520 != -1)
        swift_once();
      sub_24A135F88(qword_25790AEF0);
      v5 = swift_allocObject();
      v46 = MEMORY[0x24BEE13C8];
      *(_OWORD *)(v5 + 16) = xmmword_24A218650;
      v47 = MEMORY[0x24BEE1448];
      *(_QWORD *)(v5 + 56) = v46;
      *(_QWORD *)(v5 + 64) = v47;
      *(double *)(v5 + 32) = v40;
      v43 = "Keyword may be trimmed at the end, audio duration is %5.3lf secs";
      v44 = 64;
    }
    else
    {
      if (qword_25791B520 != -1)
        swift_once();
      sub_24A135F88(qword_25790AEF0);
      v5 = swift_allocObject();
      v41 = MEMORY[0x24BEE13C8];
      *(_OWORD *)(v5 + 16) = xmmword_24A218650;
      v42 = MEMORY[0x24BEE1448];
      *(_QWORD *)(v5 + 56) = v41;
      *(_QWORD *)(v5 + 64) = v42;
      *(double *)(v5 + 32) = v40;
      v43 = "Keyword audio duration is %5.3lf secs";
      v44 = 37;
    }
    OS_os_log.info(_:_:)((uint64_t)v43, v44, 2, v5);
    swift_bridgeObjectRelease();
    if (v8 < v3)
      goto LABEL_78;
    v5 = v8 + 1;
    if (__OFADD__(v8, 1))
      goto LABEL_79;
    v48 = *(_QWORD **)v7;
    if (*(_QWORD *)(*(_QWORD *)v7 + 24) < v5)
      goto LABEL_80;
    swift_retain();
    v5 = sub_24A16B218(v3, v8 + 1, v48);
    swift_release();
    v6 = *(_QWORD *)(v5 + 16);
    if (v6)
    {
      v66 = MEMORY[0x24BEE4AF8];
      sub_24A1586C4(0, v6, 0);
      v49 = 0;
      v3 = v66;
      v8 = 2139095040;
      v9 = 3338666240;
      while (1)
      {
        v50 = *(float *)(v5 + 4 * v49 + 32);
        if ((~LODWORD(v50) & 0x7F800000) == 0)
          break;
        if (v50 <= -32769.0)
          goto LABEL_68;
        if (v50 >= 32768.0)
          goto LABEL_69;
        v10 = *(_QWORD *)(v66 + 16);
        v51 = *(_QWORD *)(v66 + 24);
        v7 = v10 + 1;
        if (v10 >= v51 >> 1)
          sub_24A1586C4(v51 > 1, v10 + 1, 1);
        ++v49;
        *(_QWORD *)(v66 + 16) = v7;
        *(_WORD *)(v66 + 2 * v10 + 32) = (int)v50;
        if (v6 == v49)
        {
          swift_release();
          goto LABEL_51;
        }
      }
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
      goto LABEL_81;
    }
    swift_release();
    v3 = MEMORY[0x24BEE4AF8];
LABEL_51:
    result = (uint64_t *)objc_msgSend(objc_allocWithZone(MEMORY[0x24BDB1818]), sel_initWithCommonFormat_sampleRate_channels_interleaved_, 3, 1, 0, 16000.0);
    if (!result)
      break;
    v5 = *(_QWORD *)(v3 + 16);
    if (!HIDWORD(v5))
    {
      v53 = result;
      result = (uint64_t *)objc_msgSend(objc_allocWithZone(MEMORY[0x24BDB1838]), sel_initWithPCMFormat_frameCapacity_, result, v5);
      if (!result)
        goto LABEL_90;
      v45 = result;
      objc_msgSend(result, sel_setFrameLength_, objc_msgSend(result, sel_frameCapacity));
      result = (uint64_t *)objc_msgSend(v45, sel_int16ChannelData);
      if (!result)
        goto LABEL_91;
      v54 = *(_QWORD *)(v3 + 16);
      if (v54)
      {
        v55 = *result;
        if (v54 < 0x10 || (unint64_t)(v55 - v3 - 32) < 0x20)
        {
          v56 = 0;
          goto LABEL_59;
        }
        v56 = v54 & 0x7FFFFFFFFFFFFFF0;
        v62 = (__int128 *)(v3 + 48);
        v63 = (_OWORD *)(v55 + 16);
        v64 = v54 & 0x7FFFFFFFFFFFFFF0;
        do
        {
          v65 = *v62;
          *(v63 - 1) = *(v62 - 1);
          *v63 = v65;
          v62 += 2;
          v63 += 2;
          v64 -= 16;
        }
        while (v64);
        if (v54 != v56)
        {
LABEL_59:
          v57 = v54 - v56;
          v58 = 2 * v56;
          v59 = (_WORD *)(v55 + v58);
          v60 = (__int16 *)(v58 + v3 + 32);
          do
          {
            v61 = *v60++;
            *v59++ = v61;
            --v57;
          }
          while (v57);
        }
      }

      swift_bridgeObjectRelease();
      return v45;
    }
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    swift_once();
  }
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
  return result;
}

_QWORD *sub_24A1B2D38(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *(*v16)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v16 = (_QWORD *(*)(uint64_t *__return_ptr, uint64_t *))result;
  v5 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v6 = v4;
  v7 = MEMORY[0x24BEE4AF8];
  if (!v5)
    return (_QWORD *)v7;
  v19 = MEMORY[0x24BEE4AF8];
  result = (_QWORD *)sub_24A148BD4(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    v7 = v19;
    if (a4 <= a3)
      v10 = a3;
    else
      v10 = a4;
    v15 = v10;
    v11 = a3;
    while (a4 != v11)
    {
      v17 = v11;
      result = v16(&v18, &v17);
      if (v6)
      {
        swift_release();
        return (_QWORD *)v7;
      }
      v6 = 0;
      v12 = v18;
      v19 = v7;
      v14 = *(_QWORD *)(v7 + 16);
      v13 = *(_QWORD *)(v7 + 24);
      if (v14 >= v13 >> 1)
      {
        result = (_QWORD *)sub_24A148BD4(v13 > 1, v14 + 1, 1);
        v7 = v19;
      }
      *(_QWORD *)(v7 + 16) = v14 + 1;
      *(_QWORD *)(v7 + 8 * v14 + 32) = v12;
      if (a4 < a3)
        goto LABEL_19;
      if (v15 == v11)
        goto LABEL_20;
      if (a4 == ++v11)
        return (_QWORD *)v7;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_24A1B2E84(void (*a1)(int *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t *i;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v16 = MEMORY[0x24BEE4AF8];
    sub_24A148BB8(0, v5, 0);
    v6 = v16;
    for (i = (uint64_t *)(a3 + 32); ; ++i)
    {
      v14 = *i;
      swift_bridgeObjectRetain();
      a1(&v15, &v14);
      if (v4)
        break;
      v4 = 0;
      swift_bridgeObjectRelease();
      v10 = v15;
      v16 = v6;
      v12 = *(_QWORD *)(v6 + 16);
      v11 = *(_QWORD *)(v6 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_24A148BB8(v11 > 1, v12 + 1, 1);
        v6 = v16;
      }
      *(_QWORD *)(v6 + 16) = v12 + 1;
      *(_DWORD *)(v6 + 4 * v12 + 32) = v10;
      if (!--v5)
        return v6;
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_24A1B2FB0(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  void (*v24)(char *, _QWORD);
  void (*v25)(char *);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char v43[32];
  uint64_t v44;

  v30 = a5;
  v31 = a8;
  v38 = a1;
  v39 = a2;
  v29 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v40 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v14 = (char *)&v29 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(v17 - 8);
  v33 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v29 - v18;
  v20 = sub_24A216098();
  if (!v20)
    return sub_24A215EE8();
  v36 = AssociatedTypeWitness;
  v21 = v20;
  v44 = sub_24A215C00();
  v34 = sub_24A216380();
  sub_24A21635C();
  v37 = v8;
  result = sub_24A216080();
  if ((v21 & 0x8000000000000000) == 0)
  {
    v23 = v21;
    v35 = v16;
    while (v23)
    {
      v41 = v23;
      v24 = (void (*)(char *, _QWORD))sub_24A2160D4();
      v25 = *(void (**)(char *))(v11 + 16);
      v26 = v11;
      v27 = v36;
      v25(v14);
      v24(v43, 0);
      v28 = v42;
      v38(v14, v40);
      if (v28)
      {
        (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v27);
        (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v33);
        swift_release();
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 32))(v31, v40, v30);
      }
      v42 = 0;
      (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v27);
      sub_24A216368();
      result = sub_24A2160B0();
      v23 = v41 - 1;
      v11 = v26;
      if (v41 == 1)
      {
        (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v33);
        return v44;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_24A1B32F4(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t ObjectType;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  char isEscapingClosureAtFileLocation;
  uint64_t (*v15)();
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t aBlock;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  void *v23;
  uint64_t (*v24)();
  uint64_t v25;
  char v26;

  ObjectType = swift_getObjectType();
  v26 = 0;
  v6 = *(NSObject **)&v2[OBJC_IVAR___FeatureExtractObjc_stateAccessQueue];
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = &v26;
  *(_QWORD *)(v7 + 24) = v2;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = sub_24A1B9AF8;
  *(_QWORD *)(v8 + 24) = v7;
  v24 = sub_24A180168;
  v25 = v8;
  aBlock = MEMORY[0x24BDAC760];
  v21 = 1107296256;
  v22 = sub_24A17D4D8;
  v23 = &unk_251B9CD70;
  v9 = _Block_copy(&aBlock);
  v10 = v2;
  swift_retain();
  swift_release();
  dispatch_sync(v6, v9);
  _Block_release(v9);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v9 & 1) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((v26 & 1) == 0)
  {
    if (qword_25791B520 == -1)
    {
LABEL_6:
      sub_24A135F88(qword_25790AEF0);
      v16 = swift_allocObject();
      v17 = MEMORY[0x24BEE1768];
      *(_OWORD *)(v16 + 16) = xmmword_24A218650;
      v18 = MEMORY[0x24BEE17F0];
      *(_QWORD *)(v16 + 56) = v17;
      *(_QWORD *)(v16 + 64) = v18;
      *(_QWORD *)(v16 + 32) = a2;
      OS_os_log.info(_:_:)((uint64_t)"Ignoring addSamples %d float bytes when not running", 51, 2, v16);
      swift_release();
      swift_bridgeObjectRelease();
      v15 = 0;
      return sub_24A191318((uint64_t)v15);
    }
LABEL_10:
    swift_once();
    goto LABEL_6;
  }
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = v10;
  v11[3] = a2;
  v11[4] = a1;
  v11[5] = ObjectType;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = sub_24A1B89F4;
  *(_QWORD *)(v12 + 24) = v11;
  v24 = sub_24A180168;
  v25 = v12;
  aBlock = MEMORY[0x24BDAC760];
  v21 = 1107296256;
  v22 = sub_24A17D4D8;
  v23 = &unk_251B9CDE8;
  v13 = _Block_copy(&aBlock);
  v10;
  swift_retain();
  swift_release();
  dispatch_sync(v6, v13);
  _Block_release(v13);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  sub_24A216188();
  swift_release();
  v15 = sub_24A1B89F4;
  return sub_24A191318((uint64_t)v15);
}

uint64_t sub_24A1B3648(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t ObjectType;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  char isEscapingClosureAtFileLocation;
  void (*v15)();
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t aBlock;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  void *v23;
  uint64_t (*v24)();
  uint64_t v25;
  char v26;

  ObjectType = swift_getObjectType();
  v26 = 0;
  v6 = *(NSObject **)&v2[OBJC_IVAR___FeatureExtractObjc_stateAccessQueue];
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = &v26;
  *(_QWORD *)(v7 + 24) = v2;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = sub_24A1B8B7C;
  *(_QWORD *)(v8 + 24) = v7;
  v24 = sub_24A180168;
  v25 = v8;
  aBlock = MEMORY[0x24BDAC760];
  v21 = 1107296256;
  v22 = sub_24A17D4D8;
  v23 = &unk_251B9CE60;
  v9 = _Block_copy(&aBlock);
  v10 = v2;
  swift_retain();
  swift_release();
  dispatch_sync(v6, v9);
  _Block_release(v9);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v9 & 1) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((v26 & 1) == 0)
  {
    if (qword_25791B520 == -1)
    {
LABEL_6:
      sub_24A135F88(qword_25790AEF0);
      v16 = swift_allocObject();
      v17 = MEMORY[0x24BEE1768];
      *(_OWORD *)(v16 + 16) = xmmword_24A218650;
      v18 = MEMORY[0x24BEE17F0];
      *(_QWORD *)(v16 + 56) = v17;
      *(_QWORD *)(v16 + 64) = v18;
      *(_QWORD *)(v16 + 32) = a2;
      OS_os_log.info(_:_:)((uint64_t)"Ignoring addSamples %d int16 bytes when not running", 51, 2, v16);
      swift_release();
      swift_bridgeObjectRelease();
      v15 = 0;
      return sub_24A191318((uint64_t)v15);
    }
LABEL_10:
    swift_once();
    goto LABEL_6;
  }
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = v10;
  v11[3] = a2;
  v11[4] = a1;
  v11[5] = ObjectType;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = sub_24A1B8BA4;
  *(_QWORD *)(v12 + 24) = v11;
  v24 = sub_24A180168;
  v25 = v12;
  aBlock = MEMORY[0x24BDAC760];
  v21 = 1107296256;
  v22 = sub_24A17D4D8;
  v23 = &unk_251B9CED8;
  v13 = _Block_copy(&aBlock);
  v10;
  swift_retain();
  swift_release();
  dispatch_sync(v6, v13);
  _Block_release(v13);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  sub_24A216188();
  swift_release();
  v15 = sub_24A1B8BA4;
  return sub_24A191318((uint64_t)v15);
}

uint64_t sub_24A1B399C(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t ObjectType;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD aBlock[6];

  v22 = a1;
  ObjectType = swift_getObjectType();
  v4 = sub_24A215BC4();
  v25 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&ObjectType - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_24A215BF4();
  v23 = *(_QWORD *)(v7 - 8);
  v24 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&ObjectType - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_24A215BD0();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&ObjectType - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A16D544(0, &qword_25790BE40);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x24BEE5490], v10);
  v14 = (void *)sub_24A21614C();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v15 = (_QWORD *)swift_allocObject();
  v16 = v22;
  v15[2] = v2;
  v15[3] = v16;
  v17 = ObjectType;
  v15[4] = a2;
  v15[5] = v17;
  aBlock[4] = sub_24A1B8DB4;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_24A1B23B4;
  aBlock[3] = &unk_251B9CF28;
  v18 = _Block_copy(aBlock);
  v19 = v2;
  swift_retain();
  sub_24A215BDC();
  v26 = MEMORY[0x24BEE4AF8];
  sub_24A137FF0(&qword_25790F5B8, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  sub_24A135F88(&qword_25790F5C0);
  sub_24A1B8564(&qword_25790F5C8, &qword_25790F5C0);
  sub_24A2162D8();
  MEMORY[0x24BD099FC](0, v9, v6, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v24);
  return swift_release();
}

uint64_t sub_24A1B3C4C(void *a1, int a2, void *aBlock, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  void *v9;
  uint64_t v10;
  id v11;

  v9 = _Block_copy(aBlock);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v9;
  v11 = a1;
  a6(a5, v10);

  return swift_release();
}

uint64_t sub_24A1B3CC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t inited;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSString *v32;
  char *v33;
  id v34;
  uint64_t v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  id v42;
  void *v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  void (*v62)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  id v67[38];

  v61 = a6;
  v59 = a4;
  v60 = a5;
  v56 = a2;
  v57 = a3;
  v51 = a1;
  v64 = a7;
  v67[36] = *(id *)MEMORY[0x24BDAC8D0];
  v65 = sub_24A2157A4();
  v63 = *(_QWORD *)(v65 - 8);
  MEMORY[0x24BDAC7A8](v65);
  v54 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_24A2156FC();
  v52 = *(_QWORD *)(v8 - 8);
  v53 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_24A135F88(&qword_25790BCF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_24A215750();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v58 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v50 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v50 - v21;
  sub_24A135F88(&qword_25790C790);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24A218670;
  *(_QWORD *)(inited + 32) = sub_24A215CB4();
  *(_QWORD *)(inited + 40) = v24;
  *(_QWORD *)(inited + 72) = MEMORY[0x24BEE44F0];
  *(_DWORD *)(inited + 48) = 1819304813;
  *(_QWORD *)(inited + 80) = sub_24A215CB4();
  *(_QWORD *)(inited + 88) = v25;
  v26 = MEMORY[0x24BEE1768];
  *(_QWORD *)(inited + 120) = MEMORY[0x24BEE1768];
  *(_QWORD *)(inited + 96) = 16;
  v27 = sub_24A215CB4();
  v28 = MEMORY[0x24BEE1328];
  *(_QWORD *)(inited + 128) = v27;
  *(_QWORD *)(inited + 136) = v29;
  *(_QWORD *)(inited + 168) = v28;
  *(_BYTE *)(inited + 144) = 0;
  *(_QWORD *)(inited + 176) = sub_24A215CB4();
  *(_QWORD *)(inited + 184) = v30;
  *(_QWORD *)(inited + 216) = MEMORY[0x24BEE14E8];
  *(_DWORD *)(inited + 192) = 1182400512;
  *(_QWORD *)(inited + 224) = sub_24A215CB4();
  *(_QWORD *)(inited + 232) = v31;
  *(_QWORD *)(inited + 264) = v26;
  *(_QWORD *)(inited + 240) = 1;
  v55 = sub_24A18B6F8(inited);
  v32 = NSTemporaryDirectory();
  sub_24A215CB4();

  v62 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  v62(v13, 1, 1, v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v52 + 104))(v10, *MEMORY[0x24BDCD7A0], v53);
  v33 = v54;
  sub_24A215744();
  sub_24A215798();
  v34 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBCE60]), sel_init);
  objc_msgSend(v34, sel_timeIntervalSince1970);

  v67[0] = 0;
  v67[1] = (id)0xE000000000000000;
  sub_24A216308();
  sub_24A137FF0((unint64_t *)&qword_25790F5D0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
  sub_24A216584();
  sub_24A215D98();
  swift_bridgeObjectRelease();
  sub_24A215D98();
  sub_24A215D98();
  sub_24A215D98();
  sub_24A215D98();
  sub_24A215D98();
  sub_24A216020();
  sub_24A215D98();
  v66 = v61;
  sub_24A216584();
  sub_24A215D98();
  swift_bridgeObjectRelease();
  sub_24A215D98();
  sub_24A21572C();
  swift_bridgeObjectRelease();
  v35 = (uint64_t)v58;
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v58, v20, v14);
  v36 = objc_allocWithZone(MEMORY[0x24BDB1810]);
  v37 = sub_24A1B7C80(v35, v55, 3, 1);
  v67[0] = 0;
  if ((objc_msgSend(v37, sel_writeFromBuffer_error_, v51, v67) & 1) != 0)
  {
    v38 = v67[0];

    (*(void (**)(char *, uint64_t))(v63 + 8))(v33, v65);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v22, v14);
    v39 = v64;
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v64, v20, v14);
    v40 = 0;
  }
  else
  {
    v41 = v22;
    v42 = v67[0];
    v43 = (void *)sub_24A2156F0();

    swift_willThrow();
    v44 = *(void (**)(char *, uint64_t))(v15 + 8);
    v44(v20, v14);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v33, v65);
    v44(v41, v14);
    if (qword_25791B520 != -1)
      swift_once();
    sub_24A135F88(qword_25790AEF0);
    v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = xmmword_24A218650;
    swift_getErrorValue();
    v46 = sub_24A2165D8();
    v48 = v47;
    *(_QWORD *)(v45 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v45 + 64) = sub_24A182DD4();
    *(_QWORD *)(v45 + 32) = v46;
    *(_QWORD *)(v45 + 40) = v48;
    OS_os_log.error(_:_:)((uint64_t)"Error: %{public}@", 17, 2, v45);

    swift_bridgeObjectRelease();
    v40 = 1;
    v39 = v64;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v62)(v39, v40, 1, v14);
}

void sub_24A1B4470(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_24A1B44DC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  char v12;
  char v13;
  char v14;
  char v15;

  v10 = v6;
  v11 = v7;
  v12 = BYTE2(v7);
  v13 = BYTE3(v7);
  v14 = BYTE4(v7);
  v15 = BYTE5(v7);
  sub_24A1B4718((uint64_t)&v10, v6, v7);
  sub_24A135F1C(v6, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v0) + 0x3A0))(v9, v5, v4, v3, v2, v1);
  return swift_bridgeObjectRelease();
}

void sub_24A1B4718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X11 }
}

_QWORD *sub_24A1B4748(const void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *result;

  result = sub_24A1B8FB8(a1, (uint64_t)BYTE6(a3) >> 1);
  *v3 = result;
  return result;
}

uint64_t sub_24A1B4924@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t inited;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  NSString *v33;
  id v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  int v77;
  id v78[38];

  LODWORD(v71) = a6;
  v69 = a4;
  v70 = a5;
  v66 = a2;
  v67 = a3;
  v62 = a7;
  v78[36] = *(id *)MEMORY[0x24BDAC8D0];
  v74 = sub_24A2157A4();
  v61 = *(_QWORD *)(v74 - 8);
  MEMORY[0x24BDAC7A8](v74);
  v75 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_24A2156FC();
  v64 = *(_QWORD *)(v9 - 8);
  v65 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_24A135F88(&qword_25790BCF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_24A215750();
  v73 = *(_QWORD *)(v76 - 8);
  v15 = v73;
  v16 = MEMORY[0x24BDAC7A8](v76);
  v68 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v72 = (char *)&v59 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v59 - v20;
  v60 = a1;
  v22 = *(_QWORD *)(a1 + 16);
  sub_24A135F88(&qword_25790C790);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24A218670;
  *(_QWORD *)(inited + 32) = sub_24A215CB4();
  *(_QWORD *)(inited + 40) = v24;
  *(_QWORD *)(inited + 72) = MEMORY[0x24BEE44F0];
  *(_DWORD *)(inited + 48) = 1819304813;
  *(_QWORD *)(inited + 80) = sub_24A215CB4();
  *(_QWORD *)(inited + 88) = v25;
  v26 = MEMORY[0x24BEE1768];
  *(_QWORD *)(inited + 120) = MEMORY[0x24BEE1768];
  *(_QWORD *)(inited + 96) = 16;
  v27 = sub_24A215CB4();
  v28 = MEMORY[0x24BEE1328];
  *(_QWORD *)(inited + 128) = v27;
  *(_QWORD *)(inited + 136) = v29;
  *(_QWORD *)(inited + 168) = v28;
  *(_BYTE *)(inited + 144) = 0;
  *(_QWORD *)(inited + 176) = sub_24A215CB4();
  *(_QWORD *)(inited + 184) = v30;
  *(_QWORD *)(inited + 216) = MEMORY[0x24BEE13C8];
  *(_QWORD *)(inited + 192) = 0x40CF400000000000;
  *(_QWORD *)(inited + 224) = sub_24A215CB4();
  *(_QWORD *)(inited + 232) = v31;
  *(_QWORD *)(inited + 264) = v26;
  *(_QWORD *)(inited + 240) = 1;
  v32 = sub_24A18B6F8(inited);
  v33 = NSTemporaryDirectory();
  sub_24A215CB4();

  v63 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  v63(v14, 1, 1, v76);
  (*(void (**)(char *, _QWORD, uint64_t))(v64 + 104))(v11, *MEMORY[0x24BDCD7A0], v65);
  sub_24A215744();
  sub_24A215798();
  v34 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBCE60]), sel_init);
  objc_msgSend(v34, sel_timeIntervalSince1970);

  v78[0] = 0;
  v78[1] = (id)0xE000000000000000;
  sub_24A216308();
  sub_24A137FF0((unint64_t *)&qword_25790F5D0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
  sub_24A216584();
  sub_24A215D98();
  swift_bridgeObjectRelease();
  sub_24A215D98();
  sub_24A215D98();
  sub_24A215D98();
  sub_24A215D98();
  sub_24A215D98();
  sub_24A216020();
  sub_24A215D98();
  v77 = (int)v71;
  sub_24A216584();
  sub_24A215D98();
  swift_bridgeObjectRelease();
  sub_24A215D98();
  v35 = v72;
  v71 = v21;
  sub_24A21572C();
  swift_bridgeObjectRelease();
  v36 = (uint64_t)v68;
  v37 = v76;
  (*(void (**)(char *, char *))(v73 + 16))(v68, v35);
  v38 = objc_allocWithZone(MEMORY[0x24BDB1810]);
  swift_bridgeObjectRetain();
  v39 = sub_24A1B7C80(v36, v32, 3, 1);
  v40 = objc_allocWithZone(MEMORY[0x24BDB1818]);
  v41 = (void *)sub_24A215C0C();
  swift_bridgeObjectRelease();
  v42 = objc_msgSend(v40, sel_initWithSettings_, v41);

  if (!v42)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  if (HIDWORD(v22))
  {
    __break(1u);
    goto LABEL_16;
  }
  v43 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x24BDB1838]), sel_initWithPCMFormat_frameCapacity_, v42, v22);
  if (!v43)
    goto LABEL_19;
  v35 = v43;
  if (v22)
  {
    v44 = 0;
    v45 = v60 + 32;
    while (1)
    {
      v46 = objc_msgSend(v35, sel_int16ChannelData);
      if (!v46)
        break;
      *(_WORD *)(*v46 + 2 * v44) = *(_WORD *)(v45 + 2 * v44);
      if (v22 == ++v44)
        goto LABEL_8;
    }
    __break(1u);
    goto LABEL_18;
  }
LABEL_8:
  objc_msgSend(v35, sel_setFrameLength_, v22);
  if (!v39)
    goto LABEL_11;
  v78[0] = 0;
  if (!objc_msgSend(v39, sel_writeFromBuffer_error_, v35, v78))
  {
    v52 = v78[0];
    v22 = sub_24A2156F0();

    swift_willThrow();
    if (qword_25791B520 == -1)
    {
LABEL_13:
      sub_24A135F88(qword_25790AEF0);
      v53 = swift_allocObject();
      *(_OWORD *)(v53 + 16) = xmmword_24A218650;
      swift_getErrorValue();
      v54 = sub_24A2165D8();
      v56 = v55;
      *(_QWORD *)(v53 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v53 + 64) = sub_24A182DD4();
      *(_QWORD *)(v53 + 32) = v54;
      *(_QWORD *)(v53 + 40) = v56;
      OS_os_log.error(_:_:)((uint64_t)"Error: %{public}@", 17, 2, v53);
      swift_bridgeObjectRelease();

      v57 = *(void (**)(char *, uint64_t))(v73 + 8);
      v57(v72, v37);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v75, v74);
      v57(v71, v37);
      v51 = 1;
      v48 = v62;
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v63)(v48, v51, 1, v37);
    }
LABEL_16:
    swift_once();
    goto LABEL_13;
  }
  v47 = v78[0];

  v42 = v39;
LABEL_11:
  v49 = v61;
  v48 = v62;

  (*(void (**)(char *, uint64_t))(v49 + 8))(v75, v74);
  v50 = v73;
  (*(void (**)(char *, uint64_t))(v73 + 8))(v71, v37);
  (*(void (**)(uint64_t, char *, uint64_t))(v50 + 32))(v48, v72, v37);
  v51 = 0;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v63)(v48, v51, 1, v37);
}

void sub_24A1B5210()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t (*v5)(void);
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v10)(void);
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t (*v22)(void);
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;

  v1 = v0;
  v2 = OBJC_IVAR___FeatureExtractObjc_config;
  v3 = *(_QWORD **)(v0 + OBJC_IVAR___FeatureExtractObjc_config);
  v4 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v5 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v3) + 0x90);
  v6 = v3;
  v7 = (_QWORD *)v5();

  v8 = (*(uint64_t (**)(void))((*v4 & *v7) + 0xB8))();
  v9 = *(_QWORD **)(v1 + v2);
  v10 = *(uint64_t (**)(void))((*v4 & *v9) + 0x90);
  v11 = v9;
  v12 = (_QWORD *)v10();

  v13 = (*(uint64_t (**)(void))((*v4 & *v12) + 0xD0))();
  v14 = v8 + v13;
  if (__OFADD__(v8, v13))
  {
    __break(1u);
    goto LABEL_6;
  }
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v17 = OBJC_IVAR___FeatureExtractObjc_spliceBufferLength;
  *(_QWORD *)(v1 + OBJC_IVAR___FeatureExtractObjc_spliceBufferLength) = v16;
  v18 = (unsigned __int128)(v16 * (__int128)40) >> 64;
  v19 = 40 * v16;
  if (v18 == v19 >> 63)
  {
    *(_QWORD *)(v1 + OBJC_IVAR___FeatureExtractObjc_splicedVectorDim) = v19;
    *(_BYTE *)(v1 + OBJC_IVAR___FeatureExtractObjc_stopSignaled) = 0;
    v20 = sub_24A215EF4();
    *(_QWORD *)(v20 + 16) = 40;
    *(_OWORD *)(v20 + 32) = 0u;
    *(_OWORD *)(v20 + 48) = 0u;
    *(_OWORD *)(v20 + 64) = 0u;
    *(_OWORD *)(v20 + 80) = 0u;
    *(_OWORD *)(v20 + 96) = 0u;
    *(_OWORD *)(v20 + 112) = 0u;
    *(_OWORD *)(v20 + 128) = 0u;
    *(_OWORD *)(v20 + 144) = 0u;
    *(_OWORD *)(v20 + 160) = 0u;
    *(_OWORD *)(v20 + 176) = 0u;
    v21 = *(_QWORD **)(v1 + v2);
    v22 = *(uint64_t (**)(void))((*v4 & *v21) + 0x90);
    v23 = v21;
    v24 = (_QWORD *)v22();

    v25 = (*(uint64_t (**)(void))((*v4 & *v24) + 0x88))();
    *(_QWORD *)(v1 + OBJC_IVAR___FeatureExtractObjc_slidingCmvnBuffer) = sub_24A1421D4(v20, v25);
    swift_bridgeObjectRelease();
    v26 = sub_24A215EF4();
    *(_QWORD *)(v26 + 16) = 40;
    *(_OWORD *)(v26 + 32) = 0u;
    *(_OWORD *)(v26 + 48) = 0u;
    *(_OWORD *)(v26 + 64) = 0u;
    *(_OWORD *)(v26 + 80) = 0u;
    *(_OWORD *)(v26 + 96) = 0u;
    *(_OWORD *)(v26 + 112) = 0u;
    *(_OWORD *)(v26 + 128) = 0u;
    *(_OWORD *)(v26 + 144) = 0u;
    *(_OWORD *)(v26 + 160) = 0u;
    *(_OWORD *)(v26 + 176) = 0u;
    *(_QWORD *)(v1 + OBJC_IVAR___FeatureExtractObjc_spliceBuffer) = sub_24A1421D4(v26, *(_QWORD *)(v1 + v17));
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + OBJC_IVAR___FeatureExtractObjc_numSamplesRemovedFromAudioSampleInjestionBuffer) = 0;
    *(_QWORD *)(v1 + OBJC_IVAR___FeatureExtractObjc_audioSampleIngestionBufferStartIndex) = 0;
    v27 = (_QWORD *)(v1 + OBJC_IVAR___FeatureExtractObjc_audioSampleWorkBuffer);
    swift_beginAccess();
    swift_release();
    v28 = (_QWORD *)sub_24A2157C8();
    *v27 = *v28;
    swift_endAccess();
    v29 = (_QWORD *)(v1 + OBJC_IVAR___FeatureExtractObjc_audioSampleIngestionBuffer);
    swift_beginAccess();
    *v29 = *v28;
    swift_retain();
    swift_release();
    *(_QWORD *)(v1 + OBJC_IVAR___FeatureExtractObjc_nnetIntakeBuffer) = MEMORY[0x24BEE4AF8];
    swift_retain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + OBJC_IVAR___FeatureExtractObjc_spliceBufferCounter) = 0;
    *(_QWORD *)(v1 + OBJC_IVAR___FeatureExtractObjc_spliceBufferCounterAll) = 0;
    *(_QWORD *)(v1 + OBJC_IVAR___FeatureExtractObjc_frameCounter) = 0;
    v30 = sub_24A215EF4();
    *(_QWORD *)(v30 + 16) = 40;
    *(_OWORD *)(v30 + 32) = 0u;
    *(_OWORD *)(v30 + 48) = 0u;
    *(_OWORD *)(v30 + 64) = 0u;
    *(_OWORD *)(v30 + 80) = 0u;
    *(_OWORD *)(v30 + 96) = 0u;
    *(_OWORD *)(v30 + 112) = 0u;
    *(_OWORD *)(v30 + 128) = 0u;
    *(_OWORD *)(v30 + 144) = 0u;
    *(_OWORD *)(v30 + 160) = 0u;
    *(_OWORD *)(v30 + 176) = 0u;
    *(_QWORD *)(v1 + OBJC_IVAR___FeatureExtractObjc_cmvnSlidingWindowSum) = v30;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + OBJC_IVAR___FeatureExtractObjc_cmvnBufferCount) = 0;
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t sub_24A1B555C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  float v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  float v20;
  uint64_t v21;
  float *v22;
  uint64_t v23;
  vDSP_Length v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  uint64_t v36;
  vDSP_Length __P;
  const float *v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  float v43;
  float v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;

  v1 = (uint64_t *)(v0 + OBJC_IVAR___FeatureExtractObjc_audioSampleWorkBuffer);
  v59 = OBJC_IVAR___FeatureExtractObjc_fftCalculator;
  result = swift_beginAccess();
  v3 = (_QWORD *)*v1;
  if (*(uint64_t *)(*v1 + 24) >= 401)
  {
    v4 = &qword_25791CE88[47];
    v58 = v1;
    while (1)
    {
      swift_retain();
      v5 = sub_24A16B218(0, 400, v3);
      result = swift_release();
      v6 = *(_QWORD *)(v5 + 16);
      if (qword_25791B538 != -1)
        result = swift_once();
      if (v6 != *(_QWORD *)(v4[249] + 16))
        break;
      v7 = *(_QWORD *)(v5 + 16);
      if (v7)
      {
        v8 = 0;
        v9 = 0.0;
        do
        {
          v10 = *(float *)(v5 + 4 * v8++ + 32);
          v9 = v9 + v10;
        }
        while (v7 != v8);
        v11 = v9 / (float)v7;
        v61 = MEMORY[0x24BEE4AF8];
        swift_retain();
        sub_24A148BB8(0, v7, 0);
        v12 = 0;
        v13 = (char *)v61;
        v14 = *(_QWORD *)(v61 + 16);
        do
        {
          v15 = *(float *)(v5 + 4 * v12 + 32);
          v16 = *(_QWORD *)(v61 + 24);
          if (v14 >= v16 >> 1)
            sub_24A148BB8(v16 > 1, v14 + 1, 1);
          ++v12;
          *(_QWORD *)(v61 + 16) = v14 + 1;
          *(float *)(v61 + 4 * v14++ + 32) = v15 - v11;
        }
        while (v7 != v12);
        result = swift_release_n();
      }
      else
      {
        result = swift_release();
        v13 = (char *)MEMORY[0x24BEE4AF8];
      }
      v17 = *((_QWORD *)v13 + 2);
      if (v17 >= 2)
      {
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_24A148928((uint64_t)v13);
          v13 = (char *)result;
        }
        while (1)
        {
          v18 = v17 - 1;
          v19 = *((_QWORD *)v13 + 2);
          if (v17 - 1 >= v19)
            break;
          if (v17 - 2 >= v19)
            goto LABEL_73;
          *(float *)&v13[4 * v17 + 28] = *(float *)&v13[4 * v17 + 28] + (float)(*(float *)&v13[4 * v17 + 24] * -0.97);
          --v17;
          if (v18 <= 1)
          {
            v17 = *((_QWORD *)v13 + 2);
            goto LABEL_22;
          }
        }
        __break(1u);
LABEL_73:
        __break(1u);
        break;
      }
LABEL_22:
      if (!v17)
        goto LABEL_75;
      v20 = *((float *)v13 + 8);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v13 = sub_24A148928((uint64_t)v13);
      *((float *)v13 + 8) = v20 * 0.03;
      v21 = sub_24A215EF4();
      *(_QWORD *)(v21 + 16) = 400;
      v22 = (float *)(v21 + 32);
      bzero((void *)(v21 + 32), 0x640uLL);
      v23 = v4[249];
      v24 = *(_QWORD *)(v23 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      vDSP_vmul((const float *)v13 + 8, 1, (const float *)(v23 + 32), 1, v22, 1, v24);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v25 = *(uint64_t (**)(uint64_t))(**(_QWORD **)((char *)v60 + v59) + 136);
      swift_retain();
      v26 = swift_bridgeObjectRetain();
      v27 = v25(v26);
      swift_release();
      result = swift_bridgeObjectRelease();
      if (qword_25791B528 != -1)
        result = swift_once();
      if (qword_25791D7B8 >= 0)
        v28 = qword_25791D7B8;
      else
        v28 = qword_25791D7B8 + 1;
      if (qword_25791D7B8 < -3)
        goto LABEL_76;
      v29 = v28 >> 1;
      if (*(_QWORD *)(v27 + 16) <= v28 >> 1)
        goto LABEL_77;
      sub_24A2165C0();
      swift_unknownObjectRetain_n();
      v30 = swift_dynamicCastClass();
      if (!v30)
      {
        swift_bridgeObjectRelease();
        v30 = MEMORY[0x24BEE4AF8];
      }
      v31 = 2 * v29 + 3;
      v32 = *(_QWORD *)(v30 + 16);
      swift_release();
      if (v32 == v31 >> 1)
      {
        v33 = swift_dynamicCastClass();
        if (!v33)
        {
          swift_bridgeObjectRelease();
          v33 = MEMORY[0x24BEE4AF8];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v33 = sub_24A14A964(v27, v27 + 32, 0, v31);
      }
      swift_bridgeObjectRelease();
      result = sub_24A215EF4();
      v34 = result;
      *(_OWORD *)(result + 32) = 0u;
      v35 = (float *)(result + 32);
      *(_QWORD *)(result + 16) = 40;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 80) = 0u;
      *(_OWORD *)(result + 96) = 0u;
      *(_OWORD *)(result + 112) = 0u;
      *(_OWORD *)(result + 128) = 0u;
      *(_OWORD *)(result + 144) = 0u;
      *(_OWORD *)(result + 160) = 0u;
      *(_OWORD *)(result + 176) = 0u;
      if (qword_25791B540 != -1)
        result = swift_once();
      v36 = qword_25791D7B8;
      if (qword_25791D7B8 < -3)
        goto LABEL_78;
      if (qword_25791D7B8 < 0)
        v36 = qword_25791D7B8 + 1;
      __P = (v36 >> 1) + 1;
      v38 = (const float *)(qword_25791D7D0 + 32);
      swift_bridgeObjectRetain();
      vDSP_mmul((const float *)(v33 + 32), 1, v38, 1, v35, 1, 1uLL, 0x28uLL, __P);
      swift_release();
      swift_bridgeObjectRelease();
      v39 = *(_QWORD *)(v34 + 16);
      if (v39)
      {
        v62 = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        sub_24A148BB8(0, v39, 0);
        v40 = 0;
        v41 = v62;
        v42 = *(_QWORD *)(v62 + 16);
        do
        {
          v43 = *(float *)(v34 + 4 * v40 + 32);
          if (v43 <= 1.2e-38)
            v43 = 1.2e-38;
          v44 = logf(v43);
          v45 = *(_QWORD *)(v62 + 24);
          if (v42 >= v45 >> 1)
            sub_24A148BB8(v45 > 1, v42 + 1, 1);
          ++v40;
          *(_QWORD *)(v62 + 16) = v42 + 1;
          *(float *)(v62 + 4 * v42++ + 32) = v44;
        }
        while (v39 != v40);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v41 = MEMORY[0x24BEE4AF8];
      }
      (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v60) + 0x3D0))(v41);
      swift_bridgeObjectRelease();
      result = *v58;
      if (*(uint64_t *)(*v58 + 24) < 160)
        goto LABEL_79;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
        result = sub_24A16B0EC();
      v46 = *v58;
      v47 = *(_QWORD *)(*v58 + 32);
      v48 = *(_QWORD *)(*v58 + 16);
      if (v47 >= v48)
        v49 = *(_QWORD *)(*v58 + 16);
      else
        v49 = 0;
      v50 = v47 - v49;
      if (v47 + 160 >= v48)
        v51 = *(_QWORD *)(*v58 + 16);
      else
        v51 = 0;
      v52 = v50 >= v47 + 160 - v51 && __OFSUB__(v48, v50);
      v4 = qword_25791CE88 + 376;
      if (v52)
        goto LABEL_82;
      v52 = __OFADD__(v47, 160);
      v53 = v47 + 160;
      if (v52)
        goto LABEL_80;
      v54 = __OFSUB__(v53, v48);
      v55 = v53 - v48;
      if (v55 < 0 == v54)
      {
        v53 = v55;
        if (v54)
          goto LABEL_83;
      }
      *(_QWORD *)(v46 + 32) = v53;
      v56 = *(_QWORD *)(v46 + 24);
      v52 = __OFSUB__(v56, 160);
      v57 = v56 - 160;
      if (v52)
        goto LABEL_81;
      *(_QWORD *)(v46 + 24) = v57;
      result = swift_bridgeObjectRelease();
      v3 = (_QWORD *)*v58;
      if (*(uint64_t *)(*v58 + 24) <= 400)
        return result;
    }
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
  }
  return result;
}

void sub_24A1B5C34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t (*v6)(void);
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void (*v35)(id, uint64_t, uint64_t);
  id v36;
  uint64_t v37;
  uint64_t v38;

  v1 = v0;
  v2 = OBJC_IVAR___FeatureExtractObjc_nnetIntakeBuffer;
  v3 = *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR___FeatureExtractObjc_nnetIntakeBuffer) + 16);
  v4 = *(_QWORD **)(v0 + OBJC_IVAR___FeatureExtractObjc_config);
  v5 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v6 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v4) + 0x90);
  v7 = v4;
  v8 = (_QWORD *)v6();

  v9 = (*(uint64_t (**)(void))((*v5 & *v8) + 0x100))();
  if (v3 != v9)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v10 = *(_QWORD *)(v1 + v2);
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (*(_QWORD *)(*(_QWORD *)(v10 + 32) + 16) != *(_QWORD *)(v1 + OBJC_IVAR___FeatureExtractObjc_splicedVectorDim))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v11 = (void *)MEMORY[0x24BD0A1E8]();
  v12 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v1 + OBJC_IVAR___FeatureExtractObjc_nn) + 216);
  swift_retain();
  v13 = swift_bridgeObjectRetain();
  v14 = v12(v13);
  v37 = v16;
  v38 = v15;
  swift_bridgeObjectRelease();
  swift_release();
  v17 = *(_QWORD *)(v14 + 16);
  if (!v17)
  {
LABEL_36:
    __break(1u);
    return;
  }
  swift_bridgeObjectRetain();
  v18 = 0;
  v19 = (char *)MEMORY[0x24BEE4AF8];
  do
  {
    v20 = *(_QWORD *)(v14 + 8 * v18 + 32);
    v21 = *(_QWORD *)(v20 + 16);
    v22 = *((_QWORD *)v19 + 2);
    v23 = v22 + v21;
    if (__OFADD__(v22, v21))
    {
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
    if ((_DWORD)isUniquelyReferenced_nonNull_native && v23 <= *((_QWORD *)v19 + 3) >> 1)
    {
      if (!*(_QWORD *)(v20 + 16))
        goto LABEL_6;
    }
    else
    {
      if (v22 <= v23)
        v25 = v22 + v21;
      else
        v25 = v22;
      v19 = sub_24A147E34(isUniquelyReferenced_nonNull_native, v25, 1, v19);
      if (!*(_QWORD *)(v20 + 16))
      {
LABEL_6:
        if (v21)
          goto LABEL_28;
        goto LABEL_7;
      }
    }
    v26 = *((_QWORD *)v19 + 2);
    if ((*((_QWORD *)v19 + 3) >> 1) - v26 < v21)
      goto LABEL_29;
    memcpy(&v19[4 * v26 + 32], (const void *)(v20 + 32), 4 * v21);
    if (v21)
    {
      v27 = *((_QWORD *)v19 + 2);
      v28 = __OFADD__(v27, v21);
      v29 = v27 + v21;
      if (v28)
        goto LABEL_30;
      *((_QWORD *)v19 + 2) = v29;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    ++v18;
  }
  while (v17 != v18);
  swift_bridgeObjectRelease();
  v30 = *(_QWORD *)(v14 + 16);
  if (!v30)
    goto LABEL_36;
  v31 = *(_QWORD *)(v14 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v32 = *(_QWORD *)(v31 + 16);
  swift_bridgeObjectRelease();
  v33 = v30 * v32;
  if ((unsigned __int128)(v30 * (__int128)v32) >> 64 != (v30 * v32) >> 63)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if ((unint64_t)(v33 - 0x2000000000000000) >> 62 != 3)
    goto LABEL_35;
  v34 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBCE50]), sel_initWithBytes_length_, v19 + 32, 4 * v33);
  swift_bridgeObjectRelease();
  v35 = *(void (**)(id, uint64_t, uint64_t))(v1 + OBJC_IVAR___FeatureExtractObjc_acousticModelOutputAvailable);
  if (v35)
  {
    sub_24A1912AC((uint64_t)v35);
    v36 = v34;
    v35(v34, v38, v37);

    sub_24A191318((uint64_t)v35);
  }

  objc_autoreleasePoolPop(v11);
}

void sub_24A1B5F44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___FeatureExtractObjc_splicedVectorDim);
  if (v1 < 0)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (v1)
  {
    v2 = sub_24A215EF4();
    *(_QWORD *)(v2 + 16) = v1;
    bzero((void *)(v2 + 32), 4 * v1);
  }
  else
  {
    v2 = MEMORY[0x24BEE4AF8];
  }
  v3 = *(_QWORD *)(v0 + OBJC_IVAR___FeatureExtractObjc_spliceBufferCounterAll);
  v4 = *(_QWORD *)(v0 + OBJC_IVAR___FeatureExtractObjc_spliceBufferLength);
  if (v3 >= v4)
  {
    v19 = *(_QWORD *)(v2 + 16);
    if (v19)
    {
      v20 = 0;
      v21 = *(_QWORD *)(v0 + OBJC_IVAR___FeatureExtractObjc_spliceBuffer);
      v22 = v21 + 32;
      v23 = *(_QWORD *)(v21 + 16);
      while (1)
      {
        v24 = v20 / 0x28;
        if (v20 / 0x28 >= v23)
          goto LABEL_37;
        v25 = *(_QWORD *)(v22 + 8 * v24);
        if (v20 % 0x28 >= *(_QWORD *)(v25 + 16))
          goto LABEL_38;
        if (v20 >= v19)
          goto LABEL_39;
        *(_DWORD *)(v2 + 32 + 4 * v20) = *(_DWORD *)(v25 + 32 - 160 * v24 + 4 * v20);
        if (v19 == ++v20)
          return;
      }
    }
  }
  else
  {
    v5 = __OFSUB__(v4, v3);
    v6 = v4 - v3;
    if (v5)
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    v7 = 40 * v6;
    if ((unsigned __int128)((uint64_t)v6 * (__int128)40) >> 64 != (uint64_t)(40 * v6) >> 63)
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    if (v7 < 0)
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    if (v7)
    {
      if ((v6 & 0x8000000000000000) != 0)
      {
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
      v8 = *(_QWORD *)(v0 + OBJC_IVAR___FeatureExtractObjc_spliceBuffer);
      if (v6 >= *(_QWORD *)(v8 + 16))
      {
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      v9 = 0;
      v10 = *(_QWORD *)(v8 + 8 * v6 + 32);
      v11 = v10 + 32;
      v12 = *(_QWORD *)(v10 + 16);
      while (v9 % 0x28 < v12)
      {
        v13 = *(_QWORD *)(v2 + 16);
        if (v9 >= v13)
          goto LABEL_36;
        *(_DWORD *)(v2 + 32 + 4 * v9) = *(_DWORD *)(v11 - 160 * (v9 / 0x28));
        v11 += 4;
        if (v7 == ++v9)
        {
          if (v13 < v7)
            goto LABEL_34;
          goto LABEL_17;
        }
      }
      goto LABEL_35;
    }
    v13 = *(_QWORD *)(v2 + 16);
    if (v13 < 0)
    {
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
LABEL_17:
    if (v7 != v13)
    {
      if (v7 >= v13)
      {
LABEL_50:
        __break(1u);
        return;
      }
      v14 = *(_QWORD *)(v0 + OBJC_IVAR___FeatureExtractObjc_spliceBuffer);
      v15 = v14 + 32;
      v16 = *(_QWORD *)(v14 + 16);
      while (1)
      {
        v17 = v7 / 40;
        if (v7 / 40 >= v16)
          goto LABEL_40;
        if (v7 % 40 < 0)
          goto LABEL_41;
        v18 = *(_QWORD *)(v15 + 8 * v17);
        if ((unint64_t)(v7 % 40) >= *(_QWORD *)(v18 + 16))
          goto LABEL_42;
        if ((unint64_t)v7 >= *(_QWORD *)(v2 + 16))
          goto LABEL_43;
        *(_DWORD *)(v2 + 32 + 4 * v7) = *(_DWORD *)(v18 - 160 * v17 + 4 * v7 + 32);
        if (v13 == ++v7)
          return;
      }
    }
  }
}

void sub_24A1B61EC()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t (*v14)(void);
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t (*v19)(void);
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t (*v28)(void);
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  _QWORD *v37;
  char v38;
  char *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;

  v6 = OBJC_IVAR___FeatureExtractObjc_spliceBufferCounterAll;
  v7 = *(_QWORD *)(v1 + OBJC_IVAR___FeatureExtractObjc_spliceBufferCounterAll);
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v0 = (_QWORD *)v1;
  *(_QWORD *)(v1 + OBJC_IVAR___FeatureExtractObjc_spliceBufferCounterAll) = v9;
  v10 = OBJC_IVAR___FeatureExtractObjc_spliceBufferCounter;
  v11 = *(_QWORD *)(v1 + OBJC_IVAR___FeatureExtractObjc_spliceBufferCounter);
  v8 = __OFADD__(v11, 1);
  v12 = v11 + 1;
  if (v8)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  *(_QWORD *)(v1 + OBJC_IVAR___FeatureExtractObjc_spliceBufferCounter) = v12;
  v3 = OBJC_IVAR___FeatureExtractObjc_config;
  v13 = *(_QWORD **)(v1 + OBJC_IVAR___FeatureExtractObjc_config);
  v5 = MEMORY[0x24BEE4EA0];
  v14 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v13) + 0x90);
  v15 = v13;
  v2 = (_QWORD *)v14();

  v1 = (*(uint64_t (**)(void))((*(_QWORD *)v5 & *v2) + 0xD0))();
  v16 = v1 + 1;
  if (__OFADD__(v1, 1))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v17 = *(_QWORD *)((char *)v0 + v10);
  v18 = *(_QWORD **)((char *)v0 + v3);
  v19 = *(uint64_t (**)(void))((*(_QWORD *)v5 & *v18) + 0x90);
  v20 = v18;
  v21 = (_QWORD *)v19();

  v22 = (*(uint64_t (**)(void))((*(_QWORD *)v5 & *v21) + 0xE8))();
  if (v17 >= v22 && *(_QWORD *)((char *)v0 + v6) >= v16)
  {
    v1 = (*(uint64_t (**)(void))((*(_QWORD *)v5 & *v0) + 0x3C0))();
    *(_QWORD *)((char *)v0 + v10) = 0;
    v4 = OBJC_IVAR___FeatureExtractObjc_nnetIntakeBuffer;
    v2 = *(_QWORD **)((char *)v0 + OBJC_IVAR___FeatureExtractObjc_nnetIntakeBuffer);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)((char *)v0 + v4) = v2;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_44;
    while (1)
    {
      v25 = v2[2];
      v24 = v2[3];
      if (v25 >= v24 >> 1)
      {
        v2 = sub_24A173758((_QWORD *)(v24 > 1), v25 + 1, 1, v2);
        *(_QWORD *)((char *)v0 + v4) = v2;
      }
      v2[2] = v25 + 1;
      v2[v25 + 4] = v1;
      v26 = *(_QWORD *)(*(_QWORD *)((char *)v0 + v4) + 16);
      v27 = *(_QWORD **)((char *)v0 + v3);
      v28 = *(uint64_t (**)(void))((*(_QWORD *)v5 & *v27) + 0x90);
      v29 = v27;
      v2 = (_QWORD *)v28();

      v1 = (*(uint64_t (**)(void))((*(_QWORD *)v5 & *v2) + 0x100))();
      if (v26 != v1)
        break;
      v30 = *(_QWORD *)((char *)v0 + v4);
      v41 = *(_QWORD *)(v30 + 16);
      if (!v41)
      {
LABEL_33:
        (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x3B8))();
        *(_QWORD *)((char *)v0 + v4) = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRelease();
        return;
      }
      v31 = 0;
      while (v31 < *(_QWORD *)(v30 + 16))
      {
        v43 = *(_QWORD **)(*(_QWORD *)(v30 + 8 * v31 + 32) + 16);
        if (v43)
        {
          if (qword_25791B510 != -1)
            swift_once();
          if (qword_25791B518 != -1)
            swift_once();
          v5 = 0;
          v2 = (_QWORD *)qword_25791D7A0;
          v42 = qword_25791D7A0 + 32;
          v3 = qword_25791D7A8;
          v32 = qword_25791D7A8 + 32;
          while (v31 < *(_QWORD *)(v30 + 16))
          {
            v33 = *(_QWORD *)(v30 + 8 * v31 + 32);
            if (v5 >= *(_QWORD *)(v33 + 16))
              goto LABEL_35;
            if (v5 >= v2[2])
              goto LABEL_36;
            if (v5 >= *(_QWORD *)(v3 + 16))
              goto LABEL_37;
            v34 = *(float *)(v33 + 4 * v5 + 32);
            v35 = *(float *)(v42 + 4 * v5);
            v36 = *(float *)(v32 + 4 * v5);
            v37 = *(_QWORD **)((char *)v0 + v4);
            v38 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)((char *)v0 + v4) = v37;
            if ((v38 & 1) == 0)
            {
              v37 = sub_24A14893C(v37);
              *(_QWORD *)((char *)v0 + v4) = v37;
            }
            if (v31 >= v37[2])
              goto LABEL_38;
            v1 = (uint64_t)(v37 + 4);
            v39 = (char *)v37[v31 + 4];
            v40 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)(v1 + 8 * v31) = v39;
            if ((v40 & 1) == 0)
            {
              v39 = sub_24A148928((uint64_t)v39);
              *(_QWORD *)(v1 + 8 * v31) = v39;
            }
            if (v5 >= *((_QWORD *)v39 + 2))
              goto LABEL_39;
            *(float *)&v39[4 * v5 + 32] = (float)(v34 + v35) * v36;
            v30 = *(_QWORD *)((char *)v0 + v4);
            if (v43 == (_QWORD *)++v5)
              goto LABEL_13;
          }
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          goto LABEL_40;
        }
LABEL_13:
        if (++v31 == v41)
          goto LABEL_33;
      }
LABEL_43:
      __break(1u);
LABEL_44:
      v2 = sub_24A173758(0, v2[2] + 1, 1, v2);
      *(_QWORD *)((char *)v0 + v4) = v2;
    }
  }
}

uint64_t sub_24A1B6648(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t (*v13)(void);
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t (*v27)(void);
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  unint64_t v38;
  float v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t (*v43)(void);
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  _QWORD *v49;
  uint64_t (*v50)(void);
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t (*v55)(void);
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t (*v63)(void);
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t (*v67)(void);
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  char v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t);
  uint64_t v83;
  _QWORD *v84;
  char *v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;

  if (*(_QWORD *)(a1 + 16) != 40)
    goto LABEL_46;
  v1 = v2;
  v4 = a1;
  v3 = (_QWORD *)((char *)v2 + OBJC_IVAR___FeatureExtractObjc_slidingCmvnBuffer);
  v2 = *(_QWORD **)((char *)v2 + OBJC_IVAR___FeatureExtractObjc_slidingCmvnBuffer);
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v3 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_47;
  while (1)
  {
    v7 = v2[2];
    v6 = v2[3];
    if (v7 >= v6 >> 1)
    {
      v2 = sub_24A173758((_QWORD *)(v6 > 1), v7 + 1, 1, v2);
      *v3 = v2;
    }
    v2[2] = v7 + 1;
    v2[v7 + 4] = v4;
    v8 = (_QWORD *)OBJC_IVAR___FeatureExtractObjc_cmvnBufferCount;
    v9 = *(_QWORD *)((char *)v1 + OBJC_IVAR___FeatureExtractObjc_cmvnBufferCount);
    v10 = (_QWORD *)OBJC_IVAR___FeatureExtractObjc_config;
    v11 = *(_QWORD **)((char *)v1 + OBJC_IVAR___FeatureExtractObjc_config);
    v12 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v13 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v11) + 0x90);
    v14 = v11;
    v15 = (_QWORD *)v13();

    v16 = (*(uint64_t (**)(void))((*v12 & *v15) + 0x88))();
    if (v9 < v16)
    {
      v17 = *(_QWORD *)((char *)v8 + (_QWORD)v1);
      v18 = __OFADD__(v17, 1);
      v19 = v17 + 1;
      if (v18)
        goto LABEL_49;
      *(_QWORD *)((char *)v8 + (_QWORD)v1) = v19;
    }
    if (!*(_QWORD *)(*v3 + 16))
    {
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    v20 = *(_QWORD *)(*v3 + 32);
    swift_bridgeObjectRetain();
    v87 = v3;
    sub_24A1B9118(0, 1);
    v84 = v8;
    v21 = OBJC_IVAR___FeatureExtractObjc_cmvnSlidingWindowSum;
    swift_bridgeObjectRetain();
    v22 = swift_bridgeObjectRetain();
    v15 = 0;
    v23 = sub_24A1B6DA8(v22, v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)((char *)v1 + v21) = v23;
    swift_bridgeObjectRelease();
    v24 = swift_bridgeObjectRetain();
    v25 = sub_24A1B6FC4(v24, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)((char *)v1 + v21) = v25;
    swift_bridgeObjectRelease();
    v26 = *(_QWORD **)((char *)v10 + (_QWORD)v1);
    v8 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v27 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v26) + 0x90);
    v28 = v26;
    v29 = (_QWORD *)v27();

    v30 = (*(uint64_t (**)(void))((*v8 & *v29) + 0x88))();
    v31 = *(_QWORD *)((char *)v84 + (_QWORD)v1);
    if (v31 >= v30)
      v32 = v30;
    else
      v32 = *(_QWORD *)((char *)v84 + (_QWORD)v1);
    v33 = *(_QWORD *)((char *)v1 + v21);
    v34 = *(_QWORD *)(v33 + 16);
    v35 = MEMORY[0x24BEE4AF8];
    if (v34)
    {
      v36 = (float)v32;
      v88 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      sub_24A148BB8(0, v34, 0);
      v37 = 0;
      v35 = v88;
      v38 = *(_QWORD *)(v88 + 16);
      do
      {
        v39 = *(float *)(v33 + 4 * v37 + 32);
        v40 = *(_QWORD *)(v88 + 24);
        if (v38 >= v40 >> 1)
          sub_24A148BB8(v40 > 1, v38 + 1, 1);
        ++v37;
        *(_QWORD *)(v88 + 16) = v38 + 1;
        *(float *)(v88 + 4 * v38++ + 32) = v39 / v36;
      }
      while (v34 != v37);
      swift_bridgeObjectRelease();
      v41 = v84;
      v31 = *(_QWORD *)((char *)v84 + (_QWORD)v1);
      v8 = (_QWORD *)MEMORY[0x24BEE4EA0];
    }
    else
    {
      v41 = v84;
    }
    v42 = *(_QWORD **)((char *)v10 + (_QWORD)v1);
    v43 = *(uint64_t (**)(void))((*v8 & *v42) + 0x90);
    v44 = v42;
    v45 = (_QWORD *)v43();

    v46 = (*(uint64_t (**)(void))((*v8 & *v45) + 0xA0))();
    if (v31 < v46)
      return swift_bridgeObjectRelease();
    v48 = *(_QWORD *)((char *)v41 + (_QWORD)v1);
    v49 = *(_QWORD **)((char *)v10 + (_QWORD)v1);
    v50 = *(uint64_t (**)(void))((*v8 & *v49) + 0x90);
    v51 = v49;
    v52 = (_QWORD *)v50();

    v53 = (*(uint64_t (**)(void))((*v8 & *v52) + 0xA0))();
    if (v48 != v53)
      break;
    v54 = *(_QWORD **)((char *)v10 + (_QWORD)v1);
    v55 = *(uint64_t (**)(void))((*v8 & *v54) + 0x90);
    v56 = v54;
    v57 = (_QWORD *)v55();

    v16 = (*(uint64_t (**)(void))((*v8 & *v57) + 0xA0))();
    if (v16 < 0)
      goto LABEL_50;
    if (!v16)
      return swift_bridgeObjectRelease();
    v58 = v8;
    v59 = 0;
    v82 = *(void (**)(uint64_t))((*v58 & *v1) + 0x3C8);
    v83 = v16;
    v85 = (char *)v1 + OBJC_IVAR___FeatureExtractObjc_spliceBuffer;
    v86 = v10;
    while (1)
    {
      v60 = *(_QWORD **)((char *)v10 + (_QWORD)v1);
      v3 = v1;
      v61 = v10;
      v62 = (_QWORD *)MEMORY[0x24BEE4EA0];
      v63 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v60) + 0x90);
      v64 = v60;
      v65 = (_QWORD *)v63();

      v4 = (*(uint64_t (**)(void))((*v62 & *v65) + 0x88))();
      v66 = *(_QWORD **)((char *)v61 + (_QWORD)v3);
      v1 = v3;
      v67 = *(uint64_t (**)(void))((*v62 & *v66) + 0x90);
      v68 = v66;
      v69 = (_QWORD *)v67();

      v2 = (_QWORD *)(*(uint64_t (**)(void))((*v62 & *v69) + 0xA0))();
      v70 = v4 - (_QWORD)v2;
      if (__OFSUB__(v4, v2))
        break;
      v18 = __OFADD__(v70, v59);
      v71 = v70 + v59;
      if (v18)
        goto LABEL_42;
      if ((v71 & 0x8000000000000000) != 0)
        goto LABEL_43;
      if (v71 >= *(_QWORD *)(*v87 + 16))
        goto LABEL_44;
      v72 = *(_QWORD *)(*v87 + 8 * v71 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v2 = (_QWORD *)sub_24A1B6FC4(v72, v35);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = v85;
      v73 = *(_QWORD **)v85;
      v74 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)v85 = v73;
      if ((v74 & 1) == 0)
      {
        v73 = sub_24A173758(0, v73[2] + 1, 1, v73);
        *(_QWORD *)v85 = v73;
      }
      v10 = v86;
      v76 = v73[2];
      v75 = v73[3];
      v4 = v76 + 1;
      if (v76 >= v75 >> 1)
      {
        v73 = sub_24A173758((_QWORD *)(v75 > 1), v76 + 1, 1, v73);
        *(_QWORD *)v85 = v73;
      }
      v73[2] = v4;
      v73[v76 + 4] = v2;
      if (!*(_QWORD *)(*(_QWORD *)v85 + 16))
        goto LABEL_45;
      ++v59;
      swift_bridgeObjectRetain();
      sub_24A1B9118(0, 1);
      v77 = swift_bridgeObjectRelease();
      v82(v77);
      if (v83 == v59)
        return swift_bridgeObjectRelease();
    }
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    v2 = sub_24A173758(0, v2[2] + 1, 1, v2);
    *v3 = v2;
  }
  v78 = swift_bridgeObjectRetain();
  v15 = (_QWORD *)sub_24A1B6FC4(v78, v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = (uint64_t)v1 + OBJC_IVAR___FeatureExtractObjc_spliceBuffer;
  v10 = *(_QWORD **)((char *)v1 + OBJC_IVAR___FeatureExtractObjc_spliceBuffer);
  result = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)v16 = v10;
  if ((result & 1) != 0)
    goto LABEL_37;
LABEL_51:
  result = (uint64_t)sub_24A173758(0, v10[2] + 1, 1, v10);
  v10 = (_QWORD *)result;
  *(_QWORD *)v16 = result;
LABEL_37:
  v80 = v10[2];
  v79 = v10[3];
  if (v80 >= v79 >> 1)
  {
    result = (uint64_t)sub_24A173758((_QWORD *)(v79 > 1), v80 + 1, 1, v10);
    v10 = (_QWORD *)result;
    *(_QWORD *)v16 = result;
  }
  v10[2] = v80 + 1;
  v10[v80 + 4] = v15;
  if (*(_QWORD *)(*(_QWORD *)v16 + 16))
  {
    swift_bridgeObjectRetain();
    sub_24A1B9118(0, 1);
    v81 = swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t))((*v8 & *v1) + 0x3C8))(v81);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24A1B6DA8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  float *v7;
  float *v8;
  uint64_t result;
  int64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 >= v4)
    v6 = *(_QWORD *)(a1 + 16);
  else
    v6 = *(_QWORD *)(a2 + 16);
  v33 = MEMORY[0x24BEE4AF8];
  sub_24A148BB8(0, v6, 0);
  v30 = v5;
  v31 = v4;
  v32 = a1;
  if (v6)
  {
    v7 = (float *)(a1 + 32);
    v8 = (float *)(a2 + 32);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v10 = v6;
    v11 = a2;
    while (v4)
    {
      if (!v5)
        goto LABEL_26;
      v12 = *v7;
      v13 = *v8;
      v15 = *(_QWORD *)(v33 + 16);
      v14 = *(_QWORD *)(v33 + 24);
      if (v15 >= v14 >> 1)
      {
        v28 = v11;
        result = sub_24A148BB8(v14 > 1, v15 + 1, 1);
        v11 = v28;
      }
      --v5;
      *(_QWORD *)(v33 + 16) = v15 + 1;
      *(float *)(v33 + 4 * v15 + 32) = v12 + v13;
      --v4;
      ++v8;
      ++v7;
      if (!--v10)
        goto LABEL_13;
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v11 = a2;
LABEL_13:
    if (v31 <= v30)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v33;
    }
    v16 = 0;
    if (v6 <= v30)
      v17 = v30;
    else
      v17 = v6;
    v18 = v17 - v6;
    v19 = v31 - v6;
    v20 = v30 - v6;
    v21 = 4 * v6 + 32;
    v22 = v32 + v21;
    v23 = v11 + v21;
    while (v19 != v16)
    {
      if (v20 == v16)
        goto LABEL_24;
      if (v18 == v16)
        goto LABEL_28;
      v24 = *(float *)(v22 + 4 * v16);
      v25 = *(float *)(v23 + 4 * v16);
      v27 = *(_QWORD *)(v33 + 16);
      v26 = *(_QWORD *)(v33 + 24);
      if (v27 >= v26 >> 1)
      {
        v29 = v11;
        result = sub_24A148BB8(v26 > 1, v27 + 1, 1);
        v11 = v29;
      }
      *(_QWORD *)(v33 + 16) = v27 + 1;
      *(float *)(v33 + 4 * v27 + 32) = v24 + v25;
      if (v19 == ++v16)
        goto LABEL_24;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_24A1B6FC4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  float *v7;
  float *v8;
  uint64_t result;
  int64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 >= v4)
    v6 = *(_QWORD *)(a1 + 16);
  else
    v6 = *(_QWORD *)(a2 + 16);
  v33 = MEMORY[0x24BEE4AF8];
  sub_24A148BB8(0, v6, 0);
  v30 = v5;
  v31 = v4;
  v32 = a1;
  if (v6)
  {
    v7 = (float *)(a1 + 32);
    v8 = (float *)(a2 + 32);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v10 = v6;
    v11 = a2;
    while (v4)
    {
      if (!v5)
        goto LABEL_26;
      v12 = *v7;
      v13 = *v8;
      v15 = *(_QWORD *)(v33 + 16);
      v14 = *(_QWORD *)(v33 + 24);
      if (v15 >= v14 >> 1)
      {
        v28 = v11;
        result = sub_24A148BB8(v14 > 1, v15 + 1, 1);
        v11 = v28;
      }
      --v5;
      *(_QWORD *)(v33 + 16) = v15 + 1;
      *(float *)(v33 + 4 * v15 + 32) = v12 - v13;
      --v4;
      ++v8;
      ++v7;
      if (!--v10)
        goto LABEL_13;
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v11 = a2;
LABEL_13:
    if (v31 <= v30)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v33;
    }
    v16 = 0;
    if (v6 <= v30)
      v17 = v30;
    else
      v17 = v6;
    v18 = v17 - v6;
    v19 = v31 - v6;
    v20 = v30 - v6;
    v21 = 4 * v6 + 32;
    v22 = v32 + v21;
    v23 = v11 + v21;
    while (v19 != v16)
    {
      if (v20 == v16)
        goto LABEL_24;
      if (v18 == v16)
        goto LABEL_28;
      v24 = *(float *)(v22 + 4 * v16);
      v25 = *(float *)(v23 + 4 * v16);
      v27 = *(_QWORD *)(v33 + 16);
      v26 = *(_QWORD *)(v33 + 24);
      if (v27 >= v26 >> 1)
      {
        v29 = v11;
        result = sub_24A148BB8(v26 > 1, v27 + 1, 1);
        v11 = v29;
      }
      *(_QWORD *)(v33 + 16) = v27 + 1;
      *(float *)(v33 + 4 * v27 + 32) = v24 - v25;
      if (v19 == ++v16)
        goto LABEL_24;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

void sub_24A1B71E0()
{
  uint64_t v0;
  int64x2_t v1;
  int64x2_t v2;
  uint64_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float v6;
  float32x4_t v7;
  float v8;
  float32x4_t v9;
  int64x2_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int64x2_t v15;
  int64x2_t v16;
  float v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;

  v0 = sub_24A215EF4();
  *(_QWORD *)(v0 + 16) = 400;
  bzero((void *)(v0 + 32), 0x640uLL);
  v1 = (int64x2_t)xmmword_24A21D9C0;
  v2 = (int64x2_t)xmmword_24A21D9D0;
  v3 = 32;
  v13 = (float32x4_t)vdupq_n_s32(0x43C78000u);
  v14 = (float32x4_t)vdupq_n_s32(0x40490FDAu);
  v11 = (float32x4_t)vdupq_n_s32(0x3F0A3D71u);
  v12 = (float32x4_t)vdupq_n_s32(0xBEEB851F);
  v10 = vdupq_n_s64(4uLL);
  do
  {
    v15 = v2;
    v16 = v1;
    v4 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_s64(v2)), vcvtq_f64_s64(v1));
    v20 = vdivq_f32(vmulq_f32(vaddq_f32(v4, v4), v14), v13);
    v17 = cosf(v20.f32[1]);
    v5.f32[0] = cosf(v20.f32[0]);
    v5.f32[1] = v17;
    v18 = v5;
    v6 = cosf(v20.f32[2]);
    v7 = v18;
    v7.f32[2] = v6;
    v19 = v7;
    v8 = cosf(v20.f32[3]);
    v9 = v19;
    v9.f32[3] = v8;
    *(float32x4_t *)(v0 + v3) = vaddq_f32(vmulq_f32(v9, v12), v11);
    v1 = vaddq_s64(v16, v10);
    v2 = vaddq_s64(v15, v10);
    v3 += 16;
  }
  while (v3 != 1632);
  qword_25791D7C8 = v0;
}

void sub_24A1B733C()
{
  uint64_t v0;

  sub_24A1B7358();
  qword_25791D7D0 = v0;
}

void sub_24A1B7358()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t i;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  int64_t v27;
  char *v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  _QWORD v34[4];
  uint64_t v35;
  _QWORD *v36;

  if (qword_25791B528 != -1)
LABEL_71:
    swift_once();
  v0 = qword_25791D7B8;
  if (qword_25791D7B8 >= 0)
    v1 = qword_25791D7B8;
  else
    v1 = qword_25791D7B8 + 1;
  if (qword_25791D7B8 < -3)
  {
    __break(1u);
    return;
  }
  v2 = v1 >> 1;
  v3 = (v1 >> 1) + 1;
  if (qword_25791D7B8 < -1)
  {
    v4 = MEMORY[0x24BEE4AF8];
    if (v1 >> 1 == -1)
      goto LABEL_12;
  }
  else
  {
    v4 = sub_24A215EF4();
    *(_QWORD *)(v4 + 16) = v3;
    if (!v3)
      goto LABEL_12;
  }
  *(_DWORD *)(v4 + 32) = 0;
  if ((unint64_t)(v0 + 1) >= 3)
    bzero((void *)(v4 + 36), 4 * v2);
LABEL_12:
  sub_24A135F88(&qword_25790A458);
  v5 = (_QWORD *)sub_24A215EF4();
  v5[2] = 40;
  v5[4] = v4;
  v6 = v5 + 4;
  v5[5] = v4;
  for (i = 6; i != 44; ++i)
  {
    v5[i] = v4;
    swift_bridgeObjectRetain();
  }
  isUniquelyReferenced_nonNull_native = swift_bridgeObjectRetain();
  v9 = 0;
  while (1)
  {
    v35 = v9 + 1;
    if (v3)
      break;
LABEL_15:
    v9 = v35;
    if (v35 == 40)
      goto LABEL_41;
  }
  v10 = 0;
  v11 = (float)((float)(uint64_t)v9 * 66.864) + 98.598;
  v12 = (float)((float)v35 * 66.864) + 98.598;
  v13 = (float)((float)(uint64_t)(v9 + 2) * 66.864) + 98.598;
  while (1)
  {
    v15 = (float)(logf((float)((float)((float)(16000.0 / (float)v0) * (float)(uint64_t)v10) / 700.0) + 1.0) / 2.3026)
        * 2595.0;
    if (v11 >= v15 || v15 >= v13)
      goto LABEL_20;
    v17 = v5[2];
    if (v15 > v12)
    {
      if (v9 >= v17)
      {
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
        goto LABEL_71;
      }
      v18 = v6[v9];
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v6[v9] = v18;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v10 & 0x8000000000000000) != 0)
          goto LABEL_66;
      }
      else
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)sub_24A148928(v18);
        v18 = isUniquelyReferenced_nonNull_native;
        v6[v9] = isUniquelyReferenced_nonNull_native;
        if ((v10 & 0x8000000000000000) != 0)
          goto LABEL_66;
      }
      if (v10 >= *(_QWORD *)(v18 + 16))
        goto LABEL_63;
      v14 = (float)(v13 - v15) / (float)(v13 - v12);
      goto LABEL_19;
    }
    if (v9 >= v17)
      goto LABEL_64;
    v18 = v6[v9];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v6[v9] = v18;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v10 & 0x8000000000000000) != 0)
        break;
      goto LABEL_35;
    }
    isUniquelyReferenced_nonNull_native = (uint64_t)sub_24A148928(v18);
    v18 = isUniquelyReferenced_nonNull_native;
    v6[v9] = isUniquelyReferenced_nonNull_native;
    if ((v10 & 0x8000000000000000) != 0)
      break;
LABEL_35:
    if (v10 >= *(_QWORD *)(v18 + 16))
      goto LABEL_65;
    v14 = (float)(v15 - v11) / (float)(v12 - v11);
LABEL_19:
    *(float *)(v18 + 4 * v10 + 32) = v14;
LABEL_20:
    if (v3 == ++v10)
      goto LABEL_15;
  }
  __break(1u);
LABEL_41:
  v36 = v5;
  if (!v5[2])
  {
    v20 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v21 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (!v21)
      goto LABEL_61;
LABEL_43:
    swift_bridgeObjectRetain();
    v22 = 0;
    v23 = (char *)MEMORY[0x24BEE4AF8];
    while (1)
    {
      v24 = v20[v22 + 4];
      v25 = *(_QWORD *)(v24 + 16);
      v26 = *((_QWORD *)v23 + 2);
      v27 = v26 + v25;
      if (__OFADD__(v26, v25))
        goto LABEL_67;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v28 = (char *)swift_isUniquelyReferenced_nonNull_native();
      if ((_DWORD)v28 && v27 <= *((_QWORD *)v23 + 3) >> 1)
      {
        if (*(_QWORD *)(v24 + 16))
          goto LABEL_55;
      }
      else
      {
        if (v26 <= v27)
          v29 = v26 + v25;
        else
          v29 = v26;
        v23 = sub_24A147E34(v28, v29, 1, v23);
        if (*(_QWORD *)(v24 + 16))
        {
LABEL_55:
          v30 = *((_QWORD *)v23 + 2);
          if ((*((_QWORD *)v23 + 3) >> 1) - v30 < v25)
            goto LABEL_69;
          memcpy(&v23[4 * v30 + 32], (const void *)(v24 + 32), 4 * v25);
          if (v25)
          {
            v31 = *((_QWORD *)v23 + 2);
            v32 = __OFADD__(v31, v25);
            v33 = v31 + v25;
            if (v32)
              goto LABEL_70;
            *((_QWORD *)v23 + 2) = v33;
          }
          goto LABEL_45;
        }
      }
      if (v25)
        goto LABEL_68;
LABEL_45:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v21 == ++v22)
      {
        swift_bridgeObjectRelease();
        goto LABEL_61;
      }
    }
  }
  v19 = *(_QWORD *)(v5[4] + 16);
  MEMORY[0x24BDAC7A8](isUniquelyReferenced_nonNull_native);
  v34[2] = &v36;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20 = sub_24A1B2D38(sub_24A1B9644, (uint64_t)v34, 0, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21 = v20[2];
  if (v21)
    goto LABEL_43;
LABEL_61:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t sub_24A1B7818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t AssociatedConformanceWitness;
  uint64_t v24;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;

  v27 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(v7 - 8);
  v31 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v29 = (char *)v26 - v8;
  v9 = sub_24A216200();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v26 - v12;
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)v26 - v15;
  v28 = v3;
  sub_24A2160BC();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    swift_getAssociatedTypeWitness();
    sub_24A215F30();
    return sub_24A215EE8();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v13, AssociatedTypeWitness);
    v18 = v29;
    v19 = sub_24A2160A4();
    v26[1] = v26;
    MEMORY[0x24BDAC7A8](v19);
    v26[-4] = a1;
    v26[-3] = a2;
    v20 = v28;
    v26[-2] = v27;
    v26[-1] = v20;
    swift_getAssociatedTypeWitness();
    v21 = sub_24A215F30();
    v22 = v31;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v17 = sub_24A1B2FB0((void (*)(char *, char *))sub_24A1B92D0, (uint64_t)&v26[-6], v22, v21, MEMORY[0x24BEE4078], AssociatedConformanceWitness, MEMORY[0x24BEE40A8], v24);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v18, v22);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
  }
  return v17;
}

id FeatureExtract.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void FeatureExtract.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id FeatureExtract.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FeatureExtract();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_24A1B7C80(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  void *v4;
  void *v5;
  void *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  id v15;
  id v16;
  uint64_t v17;
  id v19[2];

  v5 = v4;
  v19[1] = *(id *)MEMORY[0x24BDAC8D0];
  v9 = (void *)sub_24A215720();
  v10 = (void *)sub_24A215C0C();
  swift_bridgeObjectRelease();
  v19[0] = 0;
  v11 = objc_msgSend(v5, sel_initForWriting_settings_commonFormat_interleaved_error_, v9, v10, a3, a4 & 1, v19);

  v12 = v19[0];
  if (v11)
  {
    v13 = sub_24A215750();
    v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8);
    v15 = v12;
    v14(a1, v13);
  }
  else
  {
    v16 = v19[0];
    sub_24A2156F0();

    swift_willThrow();
    v17 = sub_24A215750();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(a1, v17);
  }
  return v11;
}

uint64_t sub_24A1B7DE0()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)();
  uint64_t (*v13)();
  uint64_t v14;
  char *v15;
  uint64_t (*v16)();
  mach_timebase_info v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t);
  NSObject *queue;
  char *v53;
  char v54;
  uint64_t v55;
  mach_timebase_info aBlock;
  uint64_t v57;
  uint64_t (*v58)(uint64_t);
  void *v59;
  uint64_t (*v60)();
  uint64_t v61;

  v1 = *(char **)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(NSObject **)&v1[OBJC_IVAR___FeatureExtractObjc_stateAccessQueue];
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v1;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = sub_24A1B9768;
  *(_QWORD *)(v5 + 24) = v4;
  v60 = sub_24A180168;
  v61 = v5;
  aBlock = (mach_timebase_info)MEMORY[0x24BDAC760];
  v57 = 1107296256;
  v58 = sub_24A17D4D8;
  v59 = &unk_251B9D090;
  v6 = _Block_copy(&aBlock);
  v53 = v1;
  swift_retain();
  swift_release();
  dispatch_sync(v3, v6);
  _Block_release(v6);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v6 & 1) != 0)
  {
LABEL_22:
    __break(1u);
  }
  else
  {
    queue = v3;
    if (qword_25791B520 == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  sub_24A135F88(qword_25790AEF0);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_24A218650;
  dispatch_queue_get_label(0);
  v8 = sub_24A215DA4();
  v10 = v9;
  *(_QWORD *)(v7 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v7 + 64) = sub_24A182DD4();
  *(_QWORD *)(v7 + 32) = v8;
  *(_QWORD *)(v7 + 40) = v10;
  OS_os_log.info(_:_:)((uint64_t)"Start Processing in thread %s", 29, 2, v7);
  swift_bridgeObjectRelease();
  v55 = 0;
  v50 = mach_absolute_time();
  ((void (*)(void))v2)();
  v11 = 0;
  v12 = 0;
  v51 = *(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)v53) + 0x3B0);
  v13 = sub_24A1B97CC;
  while (1)
  {
    sub_24A21617C();
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = v53;
    *(_QWORD *)(v14 + 24) = &v55;
    v15 = v53;
    sub_24A191318(v11);
    v2 = swift_allocObject();
    v16 = v13;
    *(_QWORD *)(v2 + 16) = v13;
    *(_QWORD *)(v2 + 24) = v14;
    v60 = sub_24A180168;
    v61 = v2;
    v17 = (mach_timebase_info)MEMORY[0x24BDAC760];
    aBlock = (mach_timebase_info)MEMORY[0x24BDAC760];
    v57 = 1107296256;
    v58 = sub_24A17D4D8;
    v59 = &unk_251B9D108;
    v18 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    dispatch_sync(queue, v18);
    _Block_release(v18);
    LOBYTE(v18) = swift_isEscapingClosureAtFileLocation();
    v19 = swift_release();
    if ((v18 & 1) != 0)
    {
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    v51(v19);
    v54 = 0;
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = &v54;
    *(_QWORD *)(v20 + 24) = v15;
    v2 = (uint64_t)queue;
    v21 = v15;
    sub_24A191318((uint64_t)v12);
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = sub_24A1B99F0;
    *(_QWORD *)(v22 + 24) = v20;
    v60 = sub_24A180168;
    v61 = v22;
    aBlock = v17;
    v57 = 1107296256;
    v58 = sub_24A17D4D8;
    v59 = &unk_251B9D180;
    v23 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    dispatch_sync(queue, v23);
    _Block_release(v23);
    LOBYTE(v23) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v23 & 1) != 0)
      goto LABEL_21;
    if (v54 == 1)
      break;
    v13 = v16;
    v11 = (uint64_t)v16;
    v12 = sub_24A1B99F0;
  }
  v24 = &v21[OBJC_IVAR___FeatureExtractObjc_audioSampleWorkBuffer];
  swift_beginAccess();
  v25 = *(_QWORD *)v24;
  v26 = MEMORY[0x24BEE1768];
  v27 = MEMORY[0x24BEE17F0];
  if (*(uint64_t *)(*(_QWORD *)v24 + 24) > 0)
    goto LABEL_11;
  v28 = &v21[OBJC_IVAR___FeatureExtractObjc_audioSampleIngestionBuffer];
  result = swift_beginAccess();
  v30 = *(_QWORD *)(*(_QWORD *)v28 + 24);
  v31 = *(_QWORD *)&v21[OBJC_IVAR___FeatureExtractObjc_audioSampleIngestionBufferStartIndex];
  v32 = __OFSUB__(v30, v31);
  v33 = v30 - v31;
  if (v32)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v33 < 1)
  {
    v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = xmmword_24A218650;
    v49 = v55;
    *(_QWORD *)(v34 + 56) = v26;
    *(_QWORD *)(v34 + 64) = v27;
    *(_QWORD *)(v34 + 32) = v49;
    v37 = "Stopped after processing %d samples";
    v38 = 35;
  }
  else
  {
LABEL_11:
    v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = xmmword_24A218660;
    v35 = *(_QWORD *)(v25 + 24);
    *(_QWORD *)(v34 + 56) = v26;
    *(_QWORD *)(v34 + 64) = v27;
    *(_QWORD *)(v34 + 32) = v35;
    v36 = v55;
    *(_QWORD *)(v34 + 96) = v26;
    *(_QWORD *)(v34 + 104) = v27;
    *(_QWORD *)(v34 + 72) = v36;
    v37 = "Ignoring last %d of work buffer when stopping, processed total of %d bytes";
    v38 = 74;
  }
  OS_os_log.debug(_:_:)((uint64_t)v37, v38, 2, v34);
  swift_bridgeObjectRelease();
  sub_24A216188();
  v39 = swift_allocObject();
  *(_QWORD *)(v39 + 16) = v21;
  v40 = swift_allocObject();
  *(_QWORD *)(v40 + 16) = sub_24A1B9A3C;
  *(_QWORD *)(v40 + 24) = v39;
  v60 = sub_24A180168;
  v61 = v40;
  aBlock = (mach_timebase_info)MEMORY[0x24BDAC760];
  v57 = 1107296256;
  v58 = sub_24A17D4D8;
  v59 = &unk_251B9D1F8;
  v41 = _Block_copy(&aBlock);
  v42 = v21;
  swift_retain();
  swift_release();
  dispatch_sync(queue, v41);
  _Block_release(v41);
  LOBYTE(v41) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v41 & 1) != 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  v43 = mach_absolute_time();
  v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_24A218660;
  v45 = v55;
  *(_QWORD *)(v44 + 56) = v26;
  *(_QWORD *)(v44 + 64) = v27;
  *(_QWORD *)(v44 + 32) = v45;
  aBlock = 0;
  result = mach_timebase_info(&aBlock);
  v46 = -1.0;
  if ((_DWORD)result)
  {
LABEL_18:
    v48 = MEMORY[0x24BEE1448];
    *(_QWORD *)(v44 + 96) = MEMORY[0x24BEE13C8];
    *(_QWORD *)(v44 + 104) = v48;
    *(double *)(v44 + 72) = v46;
    OS_os_log.debug(_:_:)((uint64_t)"[TIMING] Done processing %d samples in %5.3lf secs", 50, 2, v44);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  v47 = v43 - v50;
  if (v43 < v50)
    goto LABEL_26;
  if (!is_mul_ok(v47, aBlock.numer))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (aBlock.denom)
  {
    v46 = (double)(v47 * aBlock.numer / aBlock.denom) / 1000000000.0;
    goto LABEL_18;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_24A1B854C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_24A1B855C()
{
  return swift_release();
}

uint64_t sub_24A1B8564(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_24A139148(a2);
    result = MEMORY[0x24BD0A9EC](MEMORY[0x24BEE12C8], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A1B85A4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_24A1B85C8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = *(_QWORD **)(v0 + 16);
  if (*((_BYTE *)v1 + OBJC_IVAR___FeatureExtractObjc_isRunning) != 1)
    return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x3A8))();
  if (qword_25791B520 != -1)
    swift_once();
  return OS_os_log.info(_:_:)((uint64_t)"Ignoring reset when running", 27, 2, MEMORY[0x24BEE4AF8]);
}

uint64_t sub_24A1B8664()
{
  return swift_deallocObject();
}

uint64_t sub_24A1B8674(char *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  _BYTE v18[8];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  result = *a3;
  v5 = *(_QWORD *)(*a3 + 24);
  v6 = v5 + a2;
  if (__OFADD__(v5, a2))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if (*(_QWORD *)(*a3 + 16) >= v6 && (result & 1) != 0)
  {
    if (a2 < 1)
      return result;
  }
  else
  {
    result = sub_24A16A73C(v6);
    if (a2 < 1)
      return result;
  }
  v9 = *a3;
  result = *(_QWORD *)(*a3 + 24);
  v10 = result + a2;
  if (__OFADD__(result, a2))
    goto LABEL_14;
  *(_QWORD *)(v9 + 24) = v10;
  if (v10 < result)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  sub_24A16B074(result, v10, (uint64_t *)(v9 + 16), v9 + 40, (uint64_t)&v13);
  v17 = v13;
  sub_24A16C3B0((uint64_t)&v17, (uint64_t)v18, &qword_25790B498);
  sub_24A16C3B0((uint64_t)v18, (uint64_t)&v24, &qword_25790B498);
  v11 = v14;
  v12 = v15;
  if (v16 & 1 | (v15 == 0))
  {
    v11 = 0;
    v12 = 0;
  }
  v19 = v24;
  v20 = *((_QWORD *)&v17 + 1);
  v21 = v11;
  v22 = v12;
  v23 = v16 & 1 | (v15 == 0);
  return (uint64_t)sub_24A16AA30(a1, a2);
}

_QWORD *sub_24A1B87AC@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  v4 = result[1];
  v3 = result[2];
  v5 = v3 + v4;
  if (__OFADD__(v3, v4))
  {
    __break(1u);
    goto LABEL_24;
  }
  if ((v4 & 0x8000000000000000) == 0)
  {
    v6 = *result;
    v7 = __OFSUB__(v5, *result);
    if (v5 < *result)
      goto LABEL_9;
    v5 -= *result;
    if (!v7)
      goto LABEL_9;
    __break(1u);
  }
  v6 = *result;
  if (v5 < 0)
  {
    v7 = __OFADD__(v5, v6);
    v5 += v6;
    if (v7)
      goto LABEL_26;
  }
LABEL_9:
  if (v4 >= v6)
    goto LABEL_14;
  if (v5 < v3)
  {
    v8 = v3 - v5;
    if (!__OFSUB__(v3, v5))
      goto LABEL_15;
    __break(1u);
LABEL_14:
    v8 = 0;
LABEL_15:
    v9 = 0;
    v3 = 0;
    v10 = 1;
LABEL_22:
    *(_QWORD *)a3 = a2 + 4 * v5;
    *(_QWORD *)(a3 + 8) = v8;
    *(_QWORD *)(a3 + 16) = v9;
    *(_QWORD *)(a3 + 24) = v3;
    *(_BYTE *)(a3 + 32) = v10;
    return result;
  }
  v8 = v6 - v5;
  if (!__OFSUB__(v6, v5))
  {
    if ((v3 & 0x8000000000000000) == 0 && v6 >= v5)
    {
      v10 = v3 == 0;
      if (v3)
        v9 = a2;
      else
        v9 = 0;
      goto LABEL_22;
    }
    goto LABEL_25;
  }
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_24A1B8858@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _BYTE v19[24];
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23[8];
  uint64_t v24;
  char v25;

  v5 = *v2;
  v6 = v2[1];
  v7 = v2[2];
  v8 = v2[3];
  v9 = *((_BYTE *)v2 + 32);
  sub_24A16C3B0((uint64_t)(v2 + 2), (uint64_t)v19, &qword_25790B488);
  result = sub_24A16C3B0((uint64_t)v19, (uint64_t)v23, &qword_25790B488);
  if (v25)
    v11 = 0;
  else
    v11 = v24;
  v12 = v2[1];
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (v13)
  {
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v14 <= a1)
  {
    v18 = v9 & 1;
    a1 = v6;
    goto LABEL_26;
  }
  v5 = *v2;
  if (v12 >= a1)
  {
    if (a1 < 0)
    {
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    v7 = 0;
    v8 = 0;
    v18 = 1;
LABEL_26:
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = a1;
    *(_QWORD *)(a2 + 16) = v7;
    *(_QWORD *)(a2 + 24) = v8;
    *(_BYTE *)(a2 + 32) = v18;
    return result;
  }
  result = sub_24A16C3B0((uint64_t)v19, (uint64_t)&v20, &qword_25790B488);
  if ((v22 & 1) == 0)
  {
    v15 = a1 - v12;
    if (!__OFSUB__(a1, v12))
    {
      if ((v15 & 0x8000000000000000) == 0)
      {
        if (v21 >= v15)
          v16 = a1 - v12;
        else
          v16 = v21;
        if (v21 >= 0)
          v17 = v16;
        else
          v17 = a1 - v12;
        if (v15)
          v8 = v17;
        else
          v8 = 0;
        v18 = v8 == 0;
        if (v8)
          v7 = v20;
        else
          v7 = 0;
        a1 = v12;
        goto LABEL_26;
      }
      goto LABEL_30;
    }
    goto LABEL_28;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_24A1B899C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_24A1B89C0()
{
  return swift_deallocObject();
}

uint64_t sub_24A1B89D0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_24A1B89F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  if (*(_BYTE *)(v2 + OBJC_IVAR___FeatureExtractObjc_stopSignaled) == 1)
  {
    if (qword_25791B520 != -1)
      swift_once();
    sub_24A135F88(qword_25790AEF0);
    v3 = swift_allocObject();
    v4 = MEMORY[0x24BEE1768];
    *(_OWORD *)(v3 + 16) = xmmword_24A218650;
    v5 = MEMORY[0x24BEE17F0];
    *(_QWORD *)(v3 + 56) = v4;
    *(_QWORD *)(v3 + 64) = v5;
    *(_QWORD *)(v3 + 32) = v1;
    OS_os_log.info(_:_:)((uint64_t)"Ignoring addSamples %d int16 bytes when running but stop is pending", 67, 2, v3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v7 = (char *)sub_24A1B8F18(*(const void **)(v0 + 32), *(_QWORD *)(v0 + 24));
    v8 = (uint64_t *)(v2 + OBJC_IVAR___FeatureExtractObjc_audioSampleIngestionBuffer);
    swift_beginAccess();
    v9 = *((_QWORD *)v7 + 2);
    result = *v8;
    v10 = *(_QWORD *)(*v8 + 24);
    v11 = v10 + v9;
    if (__OFADD__(v10, v9))
    {
      __break(1u);
    }
    else
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v13 = *v8;
      if (*(_QWORD *)(*v8 + 16) < v11 || (isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_24A16A73C(v11);
        v13 = *v8;
      }
      sub_24A16A908((uint64_t *)(v13 + 16), v13 + 40, v7 + 32, v9);
      swift_endAccess();
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_24A1B8B6C()
{
  return swift_deallocObject();
}

void sub_24A1B8B7C()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = *(_BYTE *)(*(_QWORD *)(v0 + 24) + OBJC_IVAR___FeatureExtractObjc_isRunning);
}

uint64_t sub_24A1B8B94()
{
  return swift_deallocObject();
}

void sub_24A1B8BA4()
{
  _QWORD *v0;
  vDSP_Length v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __int16 *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;

  v2 = v0[2];
  v1 = v0[3];
  if (*(_BYTE *)(v2 + OBJC_IVAR___FeatureExtractObjc_stopSignaled) == 1)
  {
    if (qword_25791B520 != -1)
      swift_once();
    sub_24A135F88(qword_25790AEF0);
    v3 = swift_allocObject();
    v4 = MEMORY[0x24BEE1768];
    *(_OWORD *)(v3 + 16) = xmmword_24A218650;
    v5 = MEMORY[0x24BEE17F0];
    *(_QWORD *)(v3 + 56) = v4;
    *(_QWORD *)(v3 + 64) = v5;
    *(_QWORD *)(v3 + 32) = v1;
    OS_os_log.info(_:_:)((uint64_t)"Ignoring addSamples %d int16 bytes when running but stop is pending", 67, 2, v3);
    swift_bridgeObjectRelease();
    return;
  }
  if ((v1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    return;
  }
  v6 = (const __int16 *)v0[4];
  if (v1)
  {
    v7 = sub_24A215EF4();
    *(_QWORD *)(v7 + 16) = v1;
    bzero((void *)(v7 + 32), 4 * v1);
  }
  else
  {
    v7 = MEMORY[0x24BEE4AF8];
  }
  vDSP_vflt16(v6, 1, (float *)(v7 + 32), 1, v1);
  v8 = (uint64_t *)(v2 + OBJC_IVAR___FeatureExtractObjc_audioSampleIngestionBuffer);
  swift_beginAccess();
  v9 = *(_QWORD *)(v7 + 16);
  v10 = *(_QWORD *)(*v8 + 24);
  v11 = v10 + v9;
  if (__OFADD__(v10, v9))
    goto LABEL_15;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v13 = *v8;
  if (*(_QWORD *)(*v8 + 16) < v11 || (isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_24A16A73C(v11);
    v13 = *v8;
  }
  sub_24A16A908((uint64_t *)(v13 + 16), v13 + 40, (char *)(v7 + 32), v9);
  swift_endAccess();
  swift_bridgeObjectRelease();
}

uint64_t sub_24A1B8D74()
{
  return swift_deallocObject();
}

uint64_t sub_24A1B8D88()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24A1B8DB4()
{
  _QWORD *v0;
  char *v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  uint64_t v9;
  _QWORD v10[6];

  v1 = (char *)v0[2];
  v2 = (void (*)(uint64_t))v0[3];
  v3 = v0[5];
  v4 = *(NSObject **)&v1[OBJC_IVAR___FeatureExtractObjc_stateAccessQueue];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v1;
  *(_QWORD *)(v5 + 24) = v3;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = sub_24A1B96CC;
  *(_QWORD *)(v6 + 24) = v5;
  v10[4] = sub_24A180168;
  v10[5] = v6;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1107296256;
  v10[2] = sub_24A17D4D8;
  v10[3] = &unk_251B9D018;
  v7 = _Block_copy(v10);
  v1;
  swift_retain();
  swift_release();
  dispatch_sync(v4, v7);
  _Block_release(v7);
  LODWORD(v4) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((_DWORD)v4)
  {
    __break(1u);
  }
  else
  {
    sub_24A216188();
    v9 = sub_24A21617C();
    v2(v9);
    return swift_release();
  }
  return result;
}

_QWORD *sub_24A1B8F18(const void *a1, uint64_t a2)
{
  size_t v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;

  if (!a2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  if (a2 <= 0)
  {
    v4 = 4 * a2;
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    sub_24A135F88(&qword_257909960);
    v4 = 4 * a2;
    v5 = (_QWORD *)swift_allocObject();
    v6 = j__malloc_size(v5);
    v7 = v6 - 32;
    if (v6 < 32)
      v7 = v6 - 29;
    v5[2] = a2;
    v5[3] = 2 * (v7 >> 2);
  }
  memcpy(v5 + 4, a1, v4);
  return v5;
}

_QWORD *sub_24A1B8FB8(const void *a1, uint64_t a2)
{
  size_t v4;
  _QWORD *v5;
  int64_t v6;
  int64_t v7;

  if (!a2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  if (a2 <= 0)
  {
    v4 = 2 * a2;
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    sub_24A135F88(&qword_25790A808);
    v4 = 2 * a2;
    v5 = (_QWORD *)swift_allocObject();
    v6 = j__malloc_size(v5);
    v7 = v6 - 32;
    if (v6 < 32)
      v7 = v6 - 31;
    v5[2] = a2;
    v5[3] = v7 & 0xFFFFFFFFFFFFFFFELL;
  }
  memcpy(v5 + 4, a1, v4);
  return v5;
}

_QWORD *sub_24A1B9054@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X2>, _QWORD *(*a3)(uint64_t *__return_ptr, char *, uint64_t)@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v6 = *a2;
  v7 = a2[1];
  v8 = __OFSUB__(v7, *a2);
  v9 = v7 - *a2;
  if (v8)
  {
    __break(1u);
    goto LABEL_11;
  }
  v8 = __OFADD__(v6, v9);
  v10 = v6 + v9;
  if (v8)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v11 = v10 - v6;
  if (v10 < v6)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = (char *)result + 4 * v6;
  if (result)
    v13 = v12;
  else
    v13 = 0;
  result = a3(&v14, v13, v11);
  if (!v4)
    *a4 = v14;
  return result;
}

uint64_t sub_24A1B90C4(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a3;
  v5 = a3[1];
  v6 = __OFSUB__(v5, *a3);
  v7 = v5 - *a3;
  if (v6)
  {
    __break(1u);
    goto LABEL_9;
  }
  v6 = __OFADD__(v4, v7);
  v8 = v4 + v7;
  if (v6)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v9 = v8 - v4;
  if (v8 < v4)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v10 = result + 4 * v4;
  if (result)
    v11 = v10;
  else
    v11 = 0;
  return a4(v11, v9);
}

uint64_t sub_24A1B9118(uint64_t result, int64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v6 = result;
  v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_24A173758(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  sub_24A135F88(&qword_25790A458);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_19;
  v12 = v4[2];
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_25;
  v15 = (char *)&v4[a2 + 4];
  if (v6 != a2 || &v4[v6 + 4] >= (_QWORD *)&v15[8 * v14])
    result = (uint64_t)memmove(&v4[v6 + 4], v15, 8 * v14);
  v16 = v4[2];
  v13 = __OFADD__(v16, v8);
  v17 = v16 - v7;
  if (!v13)
  {
    v4[2] = v17;
LABEL_19:
    *(_QWORD *)v2 = v4;
    return result;
  }
LABEL_26:
  __break(1u);
  return result;
}

void sub_24A1B9234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = sub_24A21569C();
  if (v9)
  {
    v10 = sub_24A2156B4();
    if (__OFSUB__(a1, v10))
      goto LABEL_7;
    v9 += a1 - v10;
  }
  if (!__OFSUB__(a2, a1))
  {
    sub_24A2156A8();
    sub_24A1B4718(v9, a4, a5);
    return;
  }
  __break(1u);
LABEL_7:
  __break(1u);
}

uint64_t sub_24A1B92D0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = v2[3];
  v5 = v2[4];
  v10 = v2[2];
  v11 = v4;
  v12 = v5;
  v13 = a1;
  swift_getAssociatedTypeWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  result = sub_24A1B2FB0((void (*)(char *, char *))sub_24A1B9568, (uint64_t)&v9, v10, AssociatedTypeWitness, MEMORY[0x24BEE4078], v4, MEMORY[0x24BEE40A8], v7);
  *a2 = result;
  return result;
}

uint64_t method lookup function for FeatureExtract()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FeatureExtract.__allocating_init(config:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 816))();
}

uint64_t dispatch thunk of FeatureExtract.addCallbackForAcousticModelOutputAvailable(callback:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x338))();
}

uint64_t dispatch thunk of FeatureExtract.setCmvnMinWindowLength(cmvnMinWindowLength:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x340))();
}

uint64_t dispatch thunk of FeatureExtract.configuration()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x348))();
}

uint64_t dispatch thunk of FeatureExtract.setStreamingMode(streaming:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x350))();
}

uint64_t dispatch thunk of FeatureExtract.startWithCompletionHandler(completionHandler:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x358))();
}

uint64_t dispatch thunk of FeatureExtract.reset()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x368))();
}

uint64_t dispatch thunk of FeatureExtract.audioForKeyword(startFrame:endFrame:actualEndFrame:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x370))();
}

uint64_t dispatch thunk of FeatureExtract.addFloatSamples(_:count:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x378))();
}

uint64_t dispatch thunk of FeatureExtract.addSamples(_:count:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x380))();
}

uint64_t dispatch thunk of FeatureExtract.stopWithCompletionHandler(completionHandler:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x388))();
}

uint64_t dispatch thunk of FeatureExtract.saveAudioBufferToFile(pcmBuffer:keyword:score:duration:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x390))();
}

uint64_t dispatch thunk of FeatureExtract.saveAudioDataToFile(data:keyword:score:duration:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x398))();
}

uint64_t dispatch thunk of FeatureExtract.saveStandaloneDebugSamplesToFile(debugAudioSamples:keyword:score:duration:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x3A0))();
}

uint64_t sub_24A1B9520()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_24A1B9544()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_24A1B9550()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_24A1B9568@<X0>(uint64_t a1@<X8>)
{
  uint64_t (*v2)(uint64_t *, _QWORD);
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;

  swift_getAssociatedTypeWitness();
  v2 = (uint64_t (*)(uint64_t *, _QWORD))sub_24A2160D4();
  v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, v4, AssociatedTypeWitness);
  return v2(&v7, 0);
}

uint64_t sub_24A1B9644@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[3];
  uint64_t v7;

  v4 = **(_QWORD **)(v2 + 16);
  v7 = *a1;
  v6[2] = &v7;
  result = sub_24A1B2E84((void (*)(int *__return_ptr, uint64_t *))sub_24A1B9698, (uint64_t)v6, v4);
  *a2 = result;
  return result;
}

uint64_t sub_24A1B9698@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;

  v3 = **(_QWORD **)(v2 + 16);
  if ((v3 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(_QWORD *)(*(_QWORD *)result + 16))
  {
    *a2 = *(_DWORD *)(*(_QWORD *)result + 4 * v3 + 32);
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A1B96CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 16);
  if (*(_BYTE *)(v1 + OBJC_IVAR___FeatureExtractObjc_isRunning) == 1)
  {
    if (qword_25791B520 != -1)
      swift_once();
    result = OS_os_log.info(_:_:)((uint64_t)"stop signalled", 14, 2, MEMORY[0x24BEE4AF8]);
    *(_BYTE *)(v1 + OBJC_IVAR___FeatureExtractObjc_stopSignaled) = 1;
  }
  return result;
}

uint64_t sub_24A1B9758()
{
  return swift_deallocObject();
}

uint64_t sub_24A1B9768()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t result;

  v1 = *(_QWORD **)(v0 + 16);
  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x3A8))();
  *((_BYTE *)v1 + OBJC_IVAR___FeatureExtractObjc_isRunning) = 1;
  *((_BYTE *)v1 + OBJC_IVAR___FeatureExtractObjc_stopSignaled) = 0;
  return result;
}

uint64_t sub_24A1B97BC()
{
  return swift_deallocObject();
}

uint64_t sub_24A1B97CC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD **)(v0 + 24);
  v3 = (uint64_t *)(v1 + OBJC_IVAR___FeatureExtractObjc_audioSampleIngestionBuffer);
  result = swift_beginAccess();
  v5 = (_QWORD *)*v3;
  v6 = *(_QWORD *)(*v3 + 24);
  v7 = OBJC_IVAR___FeatureExtractObjc_audioSampleIngestionBufferStartIndex;
  v8 = *(_QWORD *)(v1 + OBJC_IVAR___FeatureExtractObjc_audioSampleIngestionBufferStartIndex);
  v9 = __OFSUB__(v6, v8);
  v10 = v6 - v8;
  if (v9)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v10 < 1)
    return result;
  v9 = __OFADD__(v8, v10);
  v11 = v8 + v10;
  if (v9)
    goto LABEL_25;
  *(_QWORD *)(v1 + OBJC_IVAR___FeatureExtractObjc_audioSampleIngestionBufferStartIndex) = v11;
  v9 = __OFSUB__(v11, 1);
  v12 = v11 - 1;
  if (v9)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v12 < v8)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v13 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v8 < 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v5[3] < v13)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v0 = v1 + OBJC_IVAR___FeatureExtractObjc_audioSampleWorkBuffer;
  swift_beginAccess();
  swift_retain();
  sub_24A1B1DEC(v8, v13, v5);
  result = swift_endAccess();
  v14 = v13 - v8;
  if (__OFSUB__(v13, v8))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v9 = __OFADD__(*v2, v14);
  v15 = *v2 + v14;
  if (v9)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    result = swift_once();
    goto LABEL_13;
  }
  *v2 = v15;
  if (*(_BYTE *)(v1 + OBJC_IVAR___FeatureExtractObjc_streamingMode) != 1)
    return swift_release();
  v0 = *(_QWORD *)(*v3 + 24);
  if (qword_25791B530 != -1)
    goto LABEL_33;
LABEL_13:
  if (qword_25791D7C0 < v0)
  {
    v16 = *(_QWORD *)(*v3 + 24);
    v17 = v16 - qword_25791D7C0;
    if (__OFSUB__(v16, qword_25791D7C0))
    {
      __break(1u);
    }
    else
    {
      v18 = *(_QWORD *)(v1 + OBJC_IVAR___FeatureExtractObjc_numSamplesRemovedFromAudioSampleInjestionBuffer);
      v9 = __OFADD__(v18, v17);
      v19 = v18 + v17;
      if (!v9)
      {
        *(_QWORD *)(v1 + OBJC_IVAR___FeatureExtractObjc_numSamplesRemovedFromAudioSampleInjestionBuffer) = v19;
        if ((v17 & 0x8000000000000000) == 0)
        {
          result = *v3;
          if (*(_QWORD *)(*v3 + 24) >= v17)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              sub_24A16B0EC();
            result = (uint64_t)sub_24A16B180((uint64_t *)(*v3 + 16), *v3 + 40, v17);
            v20 = *(_QWORD *)(v1 + v7);
            v9 = __OFSUB__(v20, v17);
            v21 = v20 - v17;
            if (!v9)
            {
              *(_QWORD *)(v1 + v7) = v21;
              return swift_release();
            }
LABEL_38:
            __break(1u);
            return result;
          }
LABEL_37:
          __break(1u);
          goto LABEL_38;
        }
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
    }
    __break(1u);
    goto LABEL_36;
  }
  return swift_release();
}

uint64_t sub_24A1B99E0()
{
  return swift_deallocObject();
}

void sub_24A1B99F0()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = *(_BYTE *)(*(_QWORD *)(v0 + 24) + OBJC_IVAR___FeatureExtractObjc_stopSignaled);
}

uint64_t sub_24A1B9A08()
{
  return swift_deallocObject();
}

uint64_t sub_24A1B9A18()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_24A1B9A3C()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR___FeatureExtractObjc_isRunning) = 0;
}

uint64_t sub_24A1B9A50()
{
  return swift_deallocObject();
}

uint64_t sub_24A1B9A60(char *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_24A1B8674(a1, a2, *(uint64_t **)(v2 + 16));
}

void *sub_24A1B9A78@<X0>(void *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_24A1B9A8C(a1, a2, a3);
}

void *sub_24A1B9A8C@<X0>(void *__src@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  const void *v6;

  if (!__src)
  {
    v5 = 0;
    goto LABEL_7;
  }
  v5 = a2;
  if (!a2)
  {
LABEL_7:
    *a3 = v5;
    return __src;
  }
  if (*(_QWORD *)(v3 + 24) >= a2)
  {
    v6 = __src;
    __src = *(void **)(v3 + 16);
    if (__src)
      __src = memcpy(__src, v6, 4 * v5);
    goto LABEL_7;
  }
  __break(1u);
  return __src;
}

uint64_t sub_24A1B9B74()
{
  uint64_t result;

  sub_24A1BB53C();
  result = sub_24A2161F4();
  qword_25791D7D8 = result;
  return result;
}

uint64_t sub_24A1B9BD8()
{
  uint64_t result;

  sub_24A1BB53C();
  if (qword_25791B558 != -1)
    swift_once();
  swift_bridgeObjectRetain();
  result = sub_24A2161F4();
  qword_25791D7E0 = result;
  return result;
}

void sub_24A1B9C6C()
{
  strcpy((char *)&qword_25791D7E8, "VoiceActions2");
  unk_25791D7F6 = -4864;
}

uint64_t sub_24A1B9C9C(uint64_t a1)
{
  return sub_24A1B9D08(a1, qword_25791B568, &qword_25791B548, (id *)&qword_25791D7D8);
}

uint64_t static VALog.cli.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1B9E1C(&qword_25791B560, (uint64_t (*)(_QWORD))MEMORY[0x24BEE78D8], (uint64_t)qword_25791B568, a1);
}

uint64_t sub_24A1B9CE4(uint64_t a1)
{
  return sub_24A1B9D08(a1, qword_25791B588, &qword_25791B550, (id *)&qword_25791D7E0);
}

uint64_t sub_24A1B9D08(uint64_t a1, uint64_t *a2, _QWORD *a3, id *a4)
{
  uint64_t v7;
  id v8;

  v7 = sub_24A215A8C();
  sub_24A13DA68(v7, a2);
  sub_24A136154(v7, (uint64_t)a2);
  if (*a3 != -1)
    swift_once();
  v8 = *a4;
  return sub_24A215A98();
}

uint64_t sub_24A1B9D90()
{
  return sub_24A1B9DB4(&qword_25791B580, (uint64_t (*)(_QWORD))MEMORY[0x24BEE78D8], (uint64_t)qword_25791B588);
}

uint64_t sub_24A1B9DB4(_QWORD *a1, uint64_t (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v5;

  if (*a1 != -1)
    swift_once();
  v5 = a2(0);
  return sub_24A136154(v5, a3);
}

uint64_t static VALog.va.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1B9E1C(&qword_25791B580, (uint64_t (*)(_QWORD))MEMORY[0x24BEE78D8], (uint64_t)qword_25791B588, a1);
}

uint64_t sub_24A1B9E1C@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;

  if (*a1 != -1)
    swift_once();
  v7 = a2(0);
  v8 = sub_24A136154(v7, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a4, v8, v7);
}

uint64_t sub_24A1B9E88()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_24A2161E8();
  MEMORY[0x24BDAC7A8](v0);
  v1 = sub_24A215A2C();
  sub_24A13DA68(v1, qword_25791B5A8);
  sub_24A136154(v1, (uint64_t)qword_25791B5A8);
  sub_24A2161DC();
  return sub_24A215A20();
}

uint64_t static VALog.signposter.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1B9E1C(&qword_25791B5A0, (uint64_t (*)(_QWORD))MEMORY[0x24BEE77F0], (uint64_t)qword_25791B5A8, a1);
}

uint64_t static VALog.event(_:_:)(const char *a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  NSObject *v26;
  os_signpost_type_t v27;
  const char *v28;
  uint64_t result;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  os_signpost_id_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  char *v38;
  uint8_t *v39;
  os_signpost_id_t v40;
  void (*v41)(char *, uint64_t);
  const char *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;

  LODWORD(v46) = a3;
  v8 = sub_24A215A08();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v47 = (char *)&v42 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v42 - v15;
  v17 = sub_24A215A2C();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a5)
  {
    v45 = a4;
    v21 = a1;
    v22 = qword_25791B5A0;
    swift_bridgeObjectRetain();
    if (v22 != -1)
      swift_once();
    v23 = sub_24A136154(v17, (uint64_t)qword_25791B5A8);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v23, v17);
    swift_bridgeObjectRetain();
    sub_24A2159FC();
    v24 = sub_24A215A14();
    v44 = sub_24A216170();
    if ((sub_24A2161D0() & 1) == 0)
    {
      swift_bridgeObjectRelease_n();

      (*(void (**)(char *, uint64_t))(v9 + 8))(v16, v8);
      return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    }
    if ((v46 & 1) == 0)
    {
      if (v21)
      {
        v42 = v21;
LABEL_20:
        (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v47, v16, v8);
        v30 = swift_slowAlloc();
        v46 = v8;
        v31 = (uint8_t *)v30;
        v32 = swift_slowAlloc();
        v43 = v9;
        v33 = v32;
        v49 = v32;
        *(_DWORD *)v31 = 136315138;
        swift_bridgeObjectRetain();
        v48 = sub_24A148270(v45, a5, &v49);
        sub_24A216260();
        swift_bridgeObjectRelease_n();
        v34 = v47;
        v35 = sub_24A2159F0();
        _os_signpost_emit_with_name_impl(&dword_24A12D000, v24, (os_signpost_type_t)v44, v35, v42, "%s", v31, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24BD0AAAC](v33, -1, -1);
        MEMORY[0x24BD0AAAC](v31, -1, -1);

        v36 = *(void (**)(char *, uint64_t))(v43 + 8);
        v37 = v46;
        v36(v16, v46);
        (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
        return ((uint64_t (*)(char *, uint64_t))v36)(v34, v37);
      }
      goto LABEL_33;
    }
    if ((unint64_t)v21 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (v21 >> 11 == 27)
      {
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      if (v21 >> 16 <= 0x10)
      {
        v42 = &v50;
        goto LABEL_20;
      }
    }
    __break(1u);
    goto LABEL_28;
  }
  v25 = v9;
  if (qword_25791B5A0 != -1)
    swift_once();
  sub_24A136154(v17, (uint64_t)qword_25791B5A8);
  sub_24A2159FC();
  v26 = sub_24A215A14();
  v27 = sub_24A216170();
  if ((sub_24A2161D0() & 1) == 0)
  {

    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v12, v8);
  }
  if ((v46 & 1) == 0)
  {
    if (!a1)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v28 = a1;
LABEL_25:
    v38 = v47;
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v47, v12, v8);
    v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v39 = 0;
    v40 = sub_24A2159F0();
    _os_signpost_emit_with_name_impl(&dword_24A12D000, v26, v27, v40, v28, "", v39, 2u);
    MEMORY[0x24BD0AAAC](v39, -1, -1);

    v41 = *(void (**)(char *, uint64_t))(v25 + 8);
    v41(v12, v8);
    return ((uint64_t (*)(char *, uint64_t))v41)(v38, v8);
  }
  if ((unint64_t)a1 >> 32)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (a1 >> 11 != 27)
  {
    if (a1 >> 16 > 0x10)
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    v28 = &v51;
    goto LABEL_25;
  }
LABEL_32:
  __break(1u);
LABEL_33:
  result = swift_bridgeObjectRelease_n();
  __break(1u);
  return result;
}

uint64_t static VALog.begin(_:_:)@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void (*v24)(NSObject *, uint64_t, uint64_t);
  const char *v25;
  uint64_t result;
  const char *v27;
  NSObject *v28;
  int v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  os_signpost_id_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  uint64_t v42;
  uint8_t *v43;
  os_signpost_id_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  void (*v48)(char *, char *, uint64_t);
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  char *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;

  v52 = a4;
  v57 = (char *)a1;
  v58 = a3;
  v9 = sub_24A215A2C();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = ((char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = MEMORY[0x24BDAC7A8](v11);
  v53 = (char *)&v46 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v56 = ((char *)&v46 - v16);
  v54 = sub_24A215A08();
  v59 = *(_QWORD *)(v54 - 8);
  v17 = MEMORY[0x24BDAC7A8](v54);
  v19 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v46 - v20;
  if (qword_25791B5A0 != -1)
    swift_once();
  v22 = sub_24A136154(v9, (uint64_t)qword_25791B5A8);
  sub_24A215A14();
  v23 = v21;
  sub_24A2159E4();
  v55 = v10;
  if (a5)
  {
    v24 = *(void (**)(NSObject *, uint64_t, uint64_t))(v10 + 16);
    v24(v56, v22, v9);
    v25 = v53;
    v24(v53, v22, v9);
    swift_bridgeObjectRetain_n();
    v13 = sub_24A215A14();
    v10 = sub_24A216164();
    v22 = (uint64_t)v13;
    result = sub_24A2161D0();
    if ((result & 1) == 0)
    {
      swift_bridgeObjectRelease_n();

      v30 = v54;
      (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v19, v23, v54);
LABEL_19:
      sub_24A215A5C();
      swift_allocObject();
      v36 = sub_24A215A50();
      v37 = v55;
      (*(void (**)(const char *, uint64_t))(v55 + 8))(v25, v9);
      v38 = v23;
      v13 = v56;
LABEL_26:
      (*(void (**)(char *, uint64_t))(v59 + 8))(v38, v30);
      (*(void (**)(uint64_t, NSObject *, uint64_t))(v37 + 32))(a6, v13, v9);
      result = type metadata accessor for VASignpostInterval();
      v45 = a6 + *(int *)(result + 20);
      *(_QWORD *)v45 = v57;
      *(_QWORD *)(v45 + 8) = a2;
      *(_BYTE *)(v45 + 16) = v58;
      *(_QWORD *)(a6 + *(int *)(result + 24)) = v36;
      return result;
    }
    v50 = a2;
    v51 = a6;
    v49 = v10;
    if ((v58 & 1) == 0)
    {
      v27 = v57;
      if (!v57)
      {
        swift_bridgeObjectRelease_n();
        __break(1u);
        goto LABEL_8;
      }
      goto LABEL_18;
    }
    if ((unint64_t)v57 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (v57 >> 11 == 27)
      {
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      if (v57 >> 16 <= 0x10)
      {
        v27 = &v62;
LABEL_18:
        v47 = v27;
        v48 = *(void (**)(char *, char *, uint64_t))(v59 + 16);
        v32 = v54;
        v48(v19, v23, v54);
        v33 = (uint8_t *)swift_slowAlloc();
        v34 = swift_slowAlloc();
        v61 = v34;
        *(_DWORD *)v33 = 136315138;
        swift_bridgeObjectRetain();
        v60 = sub_24A148270(v52, a5, &v61);
        sub_24A216260();
        v30 = v32;
        swift_bridgeObjectRelease_n();
        v35 = sub_24A2159F0();
        _os_signpost_emit_with_name_impl(&dword_24A12D000, v13, (os_signpost_type_t)v49, v35, v47, "%s", v33, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24BD0AAAC](v34, -1, -1);
        MEMORY[0x24BD0AAAC](v33, -1, -1);

        (*(void (**)(char *, uint64_t))(v59 + 8))(v19, v32);
        a2 = v50;
        a6 = v51;
        v25 = v53;
        v48(v19, v23, v30);
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
LABEL_8:
  (*(void (**)(NSObject *, uint64_t, uint64_t))(v10 + 16))(v13, v22, v9);
  v28 = sub_24A215A14();
  v29 = sub_24A216164();
  result = sub_24A2161D0();
  if ((result & 1) == 0)
  {

    v30 = v54;
    v31 = v23;
    (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v19, v23, v54);
LABEL_25:
    sub_24A215A5C();
    swift_allocObject();
    v36 = sub_24A215A50();
    v37 = v55;
    v38 = v31;
    goto LABEL_26;
  }
  v50 = a2;
  v51 = a6;
  LODWORD(v56) = v29;
  if ((v58 & 1) == 0)
  {
    if (v57)
    {
      v53 = v57;
LABEL_24:
      v39 = v59;
      v40 = *(void (**)(char *, char *, uint64_t))(v59 + 16);
      v31 = v23;
      v41 = v23;
      v42 = v54;
      v40(v19, v41, v54);
      v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v43 = 0;
      v44 = sub_24A2159F0();
      _os_signpost_emit_with_name_impl(&dword_24A12D000, v28, (os_signpost_type_t)v56, v44, v53, "", v43, 2u);
      MEMORY[0x24BD0AAAC](v43, -1, -1);

      v30 = v42;
      (*(void (**)(char *, uint64_t))(v39 + 8))(v19, v42);
      a2 = v50;
      a6 = v51;
      v40(v19, v31, v42);
      goto LABEL_25;
    }
    goto LABEL_29;
  }
  if ((unint64_t)v57 >> 32)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v57 >> 11 != 27)
  {
    if (v57 >> 16 <= 0x10)
    {
      v53 = &v63;
      goto LABEL_24;
    }
    goto LABEL_31;
  }
LABEL_33:
  __break(1u);
  return result;
}

id VALog.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id VALog.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_init);
}

id VALog.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

Swift::Void __swiftcall VASignpostInterval.end(_:)(Swift::String_optional a1)
{
  const char *v1;
  void *object;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  const char *v30;
  NSObject *v31;
  const char *v32;
  char v33;
  char v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_signpost_id_t v40;
  void (*v41)(NSObject *, uint64_t);
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint8_t *v46;
  os_signpost_id_t v47;
  void (*v48)(NSObject *, uint64_t);
  _BYTE v49[4];
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t countAndFlagsBits;
  const char *v54;
  NSObject *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;

  object = a1.value._object;
  countAndFlagsBits = a1.value._countAndFlagsBits;
  v3 = (const char *)sub_24A215A38();
  v56 = *((_QWORD *)v3 - 1);
  v57 = v3;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = &v49[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v4);
  v8 = &v49[-v7];
  v9 = sub_24A215A08();
  v10 = *(_QWORD *)(v9 - 8);
  v58 = v9;
  v59 = v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = &v49[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = MEMORY[0x24BDAC7A8](v11);
  v55 = &v49[-v15];
  MEMORY[0x24BDAC7A8](v14);
  v17 = &v49[-v16];
  v18 = sub_24A215A2C();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v22 = &v49[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v20);
  v24 = &v49[-v23];
  if (!object)
  {
LABEL_6:
    (*(void (**)(_BYTE *, const char *, uint64_t))(v19 + 16))(v22, v1, v18);
    v28 = type metadata accessor for VASignpostInterval();
    v29 = &v1[*(int *)(v28 + 20)];
    v30 = *(const char **)v29;
    v17 = (_BYTE *)*((unsigned __int8 *)v29 + 16);
    v24 = *(_BYTE **)&v1[*(int *)(v28 + 24)];
    v31 = sub_24A215A14();
    sub_24A215A44();
    LODWORD(v54) = sub_24A216158();
    if ((sub_24A2161D0() & 1) == 0)
    {

      (*(void (**)(NSObject *, uint64_t))(v59 + 8))(v13, v58);
      (*(void (**)(_BYTE *, uint64_t))(v19 + 8))(v22, v18);
      return;
    }
    v51 = v19;
    v52 = v18;
    if ((v17 & 1) == 0)
    {
      v19 = v56;
      v32 = v57;
      if (!v30)
      {
        __break(1u);
        goto LABEL_10;
      }
      goto LABEL_25;
    }
    v19 = v56;
    v32 = v57;
    if (!((unint64_t)v30 >> 32))
    {
      if (v30 >> 11 == 27)
      {
LABEL_36:
        __break(1u);
        return;
      }
      if (v30 >> 16 <= 0x10)
      {
        v30 = &v63;
LABEL_25:
        swift_retain();
        sub_24A215A68();
        swift_release();
        if ((*(unsigned int (**)(_BYTE *, const char *))(v19 + 88))(v6, v32) == *MEMORY[0x24BEE7810])
        {
          v42 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(_BYTE *, const char *))(v19 + 8))(v6, v32);
          v42 = "";
        }
        v43 = v58;
        v44 = v59;
        v45 = v55;
        (*(void (**)(NSObject *, NSObject *, uint64_t))(v59 + 16))(v55, v13, v58);
        v46 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v46 = 0;
        v47 = sub_24A2159F0();
        _os_signpost_emit_with_name_impl(&dword_24A12D000, v31, (os_signpost_type_t)v54, v47, v30, v42, v46, 2u);
        MEMORY[0x24BD0AAAC](v46, -1, -1);

        v48 = *(void (**)(NSObject *, uint64_t))(v44 + 8);
        v48(v13, v43);
        (*(void (**)(_BYTE *, uint64_t))(v51 + 8))(v22, v52);
        v48(v45, v43);
        return;
      }
      goto LABEL_34;
    }
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  (*(void (**)(_BYTE *, const char *, uint64_t))(v19 + 16))(&v49[-v23], v1, v18);
  v25 = type metadata accessor for VASignpostInterval();
  v26 = *(int *)(v25 + 24);
  v27 = &v1[*(int *)(v25 + 20)];
  v54 = *(const char **)v27;
  v22 = (_BYTE *)*((unsigned __int8 *)v27 + 16);
  v6 = *(_BYTE **)&v1[v26];
  swift_bridgeObjectRetain_n();
  v13 = sub_24A215A14();
  sub_24A215A44();
  v50 = sub_24A216158();
  if ((sub_24A2161D0() & 1) == 0)
  {
LABEL_10:
    swift_bridgeObjectRelease_n();

    (*(void (**)(NSObject *, uint64_t))(v59 + 8))(v17, v58);
    (*(void (**)(_BYTE *, uint64_t))(v19 + 8))(v24, v18);
    return;
  }
  v51 = v19;
  v52 = v18;
  if ((v22 & 1) != 0)
  {
    v19 = v56;
    v1 = v57;
    if ((unint64_t)v54 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (v54 >> 11 == 27)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      if (v54 >> 16 <= 0x10)
      {
        v54 = &v62;
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_33;
  }
  v19 = v56;
  v1 = v57;
  if (!v54)
  {
    swift_bridgeObjectRelease_n();
    __break(1u);
    goto LABEL_6;
  }
LABEL_17:
  swift_retain();
  sub_24A215A68();
  swift_release();
  if ((*(unsigned int (**)(_BYTE *, const char *))(v19 + 88))(v8, v1) == *MEMORY[0x24BEE7810])
  {
    v33 = 0;
    v34 = 0;
    v57 = "[Error] Interval already ended";
  }
  else
  {
    (*(void (**)(_BYTE *, const char *))(v19 + 8))(v8, v1);
    v57 = "%s";
    v34 = 2;
    v33 = 1;
  }
  v35 = v58;
  v36 = v55;
  (*(void (**)(NSObject *, NSObject *, uint64_t))(v59 + 16))(v55, v17, v58);
  v37 = swift_slowAlloc();
  v38 = swift_slowAlloc();
  v61 = v38;
  *(_BYTE *)v37 = v34;
  *(_BYTE *)(v37 + 1) = v33;
  *(_WORD *)(v37 + 2) = 2080;
  swift_bridgeObjectRetain();
  v60 = sub_24A148270(countAndFlagsBits, (unint64_t)object, &v61);
  sub_24A216260();
  swift_bridgeObjectRelease_n();
  v39 = v36;
  v40 = sub_24A2159F0();
  _os_signpost_emit_with_name_impl(&dword_24A12D000, v13, (os_signpost_type_t)v50, v40, v54, v57, (uint8_t *)v37, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x24BD0AAAC](v38, -1, -1);
  MEMORY[0x24BD0AAAC](v37, -1, -1);

  v41 = *(void (**)(NSObject *, uint64_t))(v59 + 8);
  v41(v17, v35);
  (*(void (**)(_BYTE *, uint64_t))(v51 + 8))(v24, v52);
  v41(v39, v35);
}

uint64_t type metadata accessor for VASignpostInterval()
{
  uint64_t result;

  result = qword_25791B5C0;
  if (!qword_25791B5C0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for VALog()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for VALog.OSLogs()
{
  return &type metadata for VALog.OSLogs;
}

ValueMetadata *type metadata accessor for VALog.Category()
{
  return &type metadata for VALog.Category;
}

uint64_t *initializeBufferWithCopyOfBuffer for VASignpostInterval(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_24A215A2C();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_OWORD *)v10 = *(_OWORD *)v11;
    v10[16] = v11[16];
    *(uint64_t *)((char *)a1 + v9) = *(uint64_t *)((char *)a2 + v9);
  }
  swift_retain();
  return a1;
}

uint64_t destroy for VASignpostInterval(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_24A215A2C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

uint64_t initializeWithCopy for VASignpostInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_24A215A2C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for VASignpostInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_24A215A2C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(v9 + 8);
  *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for VASignpostInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_24A215A2C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  return a1;
}

uint64_t assignWithTake for VASignpostInterval(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_24A215A2C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for VASignpostInterval()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A1BB3BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_24A215A2C();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for VASignpostInterval()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A1BB444(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_24A215A2C();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t sub_24A1BB4BC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_24A215A2C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_24A1BB53C()
{
  unint64_t result;

  result = qword_25790C3C0;
  if (!qword_25790C3C0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25790C3C0);
  }
  return result;
}

uint64_t sub_24A1BB5E0()
{
  uint64_t v0;

  v0 = sub_24A18C830((uint64_t)&unk_251B9D290);
  swift_arrayDestroy();
  return v0;
}

uint64_t sub_24A1BB70C()
{
  uint64_t v0;

  (*(void (**)(void))(*(_QWORD *)v0 + 88))();
  return sub_24A215AA4();
}

uint64_t sub_24A1BB86C(void *a1)
{
  uint64_t v2;
  uint64_t inited;
  id v4;
  id v5;
  id v6;

  v2 = swift_allocObject();
  sub_24A135F88(&qword_25790C790);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24A218650;
  strcpy((char *)(inited + 32), "enc_3d_output");
  *(_WORD *)(inited + 46) = -4864;
  v4 = objc_msgSend((id)objc_opt_self(), sel_featureValueWithMultiArray_, a1);
  *(_QWORD *)(inited + 72) = sub_24A16D544(0, &qword_25790C798);
  *(_QWORD *)(inited + 48) = v4;
  sub_24A18B6F8(inited);
  v5 = objc_allocWithZone(MEMORY[0x24BDBFF88]);
  v6 = sub_24A18C690();

  *(_QWORD *)(v2 + 16) = v6;
  return v2;
}

uint64_t sub_24A1BB9A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t result;
  uint64_t v16;

  v2 = sub_24A215750();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_24A135F88(&qword_25790BCF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_24A17DDE0();
  if (!v9)
  {
    __break(1u);
    goto LABEL_6;
  }
  v10 = v9;
  v11 = (void *)sub_24A215C90();
  v12 = (void *)sub_24A215C90();
  v13 = objc_msgSend(v10, sel_URLForResource_withExtension_, v11, v12);

  if (!v13)
  {
LABEL_6:
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    goto LABEL_7;
  }
  sub_24A215738();

  v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  v14(v8, v5, v2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
  if ((_DWORD)result != 1)
  {

    return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v8, v2);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_24A1BBB58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  sub_24A16D544(0, qword_25790C7A0);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  swift_retain();
  sub_24A2161A0();
  return swift_release();
}

uint64_t sub_24A1BBBF0()
{
  uint64_t v0;
  _QWORD *v1;

  sub_24A16D544(0, qword_25790C7A0);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_24A1BBC70;
  return sub_24A2161AC();
}

uint64_t sub_24A1BBC70(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 24) = a1;
  return swift_task_switch();
}

uint64_t sub_24A1BBCEC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  type metadata accessor for quant_enc_f16_wofeats();
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A1BBD30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v12[2];

  v12[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = *(void **)(v2 + 16);
  v12[0] = 0;
  v6 = objc_msgSend(v5, sel_predictionFromFeatures_options_error_, a1, a2, v12);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    type metadata accessor for quant_enc_f16_wofeatsOutput();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v8;
    v9 = v7;
  }
  else
  {
    v10 = v12[0];
    sub_24A2156F0();

    swift_willThrow();
  }
  return v3;
}

uint64_t sub_24A1BBE04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_24A1BBE20()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_24A1BBE78;
  return sub_24A216194();
}

uint64_t sub_24A1BBE78(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 48) = a1;
  return swift_task_switch();
}

uint64_t sub_24A1BBEF4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  type metadata accessor for quant_enc_f16_wofeatsOutput();
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A1BBF38(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  id v5;
  uint64_t v6;

  type metadata accessor for quant_enc_f16_wofeatsInput();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = a1;
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 136);
  v5 = a1;
  v6 = v4(v3);
  swift_release();
  return v6;
}

uint64_t sub_24A1BBFB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = v1;
  v4 = sub_24A135F88(&qword_25790F6B0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v16 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v16 - v9, a1, v4);
  sub_24A16D544(0, (unint64_t *)&qword_25790C780);
  v11(v8, (uint64_t)v10, v4);
  sub_24A1BC3CC();
  v12 = sub_24A2160E0();
  type metadata accessor for quant_enc_f16_wofeatsInput();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v12;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 136))(v13);
  swift_release();
  return v14;
}

void sub_24A1BC0F8(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22[2];

  v22[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_24A135F88(&qword_25790C820);
    sub_24A2163F8();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_24A2165B4();
  }
  v6 = objc_allocWithZone(MEMORY[0x24BDBFF58]);
  sub_24A135F88(&qword_25790C820);
  v7 = (void *)sub_24A215E94();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v6, sel_initWithFeatureProviderArray_, v7);

  v9 = *(void **)(v2 + 16);
  v22[0] = 0;
  v10 = objc_msgSend(v9, sel_predictionsFromBatch_options_error_, v8, a2, v22);
  v11 = v22[0];
  if (v10)
  {
    v12 = v10;
    v22[0] = (id)MEMORY[0x24BEE4AF8];
    if (v5)
    {
      swift_bridgeObjectRetain();
      v16 = v11;
      v13 = sub_24A216410();
      swift_bridgeObjectRelease();
    }
    else
    {
      v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      v14 = v11;
    }
    sub_24A18C774(v13, 0);
    sub_24A215EB8();
    v17 = (unint64_t)objc_msgSend(v12, sel_count);
    if ((v17 & 0x8000000000000000) != 0)
      __break(1u);
    v18 = v17;
    if (v17)
    {
      v19 = 0;
      do
      {
        v20 = objc_msgSend(v12, sel_featuresAtIndex_, v19);
        type metadata accessor for quant_enc_f16_wofeatsOutput();
        *(_QWORD *)(swift_allocObject() + 16) = v20;
        swift_unknownObjectRetain();
        v21 = swift_retain();
        MEMORY[0x24BD09750](v21);
        if (*(_QWORD *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8)
                                                                                               + 0x18) >> 1)
          sub_24A215ED0();
        ++v19;
        sub_24A215F0C();
        sub_24A215EB8();
        swift_release();
        swift_unknownObjectRelease();
      }
      while (v18 != v19);
    }
    swift_unknownObjectRelease();

  }
  else
  {
    v15 = v22[0];
    sub_24A2156F0();

    swift_willThrow();
  }
}

unint64_t sub_24A1BC3CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25790F6B8[0];
  if (!qword_25790F6B8[0])
  {
    v1 = sub_24A139148(&qword_25790F6B0);
    result = MEMORY[0x24BD0A9EC](MEMORY[0x24BDBFCC8], v1);
    atomic_store(result, qword_25790F6B8);
  }
  return result;
}

uint64_t sub_24A1BC418()
{
  swift_release();
  return swift_deallocObject();
}

void sub_24A1BC43C(id a1, char a2)
{
  uint64_t v2;
  void (*v4)(id, uint64_t);
  uint64_t v5;
  id v6;
  id v7;

  v4 = *(void (**)(id, uint64_t))(v2 + 16);
  if ((a2 & 1) != 0)
  {
    v7 = a1;
    v4(a1, 1);
    sub_24A18CC40(a1);
  }
  else
  {
    type metadata accessor for quant_enc_f16_wofeats();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = a1;
    v6 = a1;
    v4((id)v5, 0);
    swift_release();
  }
}

uint64_t type metadata accessor for quant_enc_f16_wofeats()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for quant_enc_f16_wofeatsOutput()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for quant_enc_f16_wofeatsInput()
{
  return objc_opt_self();
}

uint64_t sub_24A1BC588()
{
  uint64_t v0;

  v0 = sub_24A18C830((uint64_t)&unk_251B9D318);
  swift_arrayDestroy();
  return v0;
}

uint64_t sub_24A1BC7D8(void *a1)
{
  uint64_t v2;
  uint64_t inited;
  id v4;
  id v5;
  id v6;

  v2 = swift_allocObject();
  sub_24A135F88(&qword_25790C790);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24A218650;
  strcpy((char *)(inited + 32), "enc_3d_output");
  *(_WORD *)(inited + 46) = -4864;
  v4 = objc_msgSend((id)objc_opt_self(), sel_featureValueWithMultiArray_, a1);
  *(_QWORD *)(inited + 72) = sub_24A16D544(0, &qword_25790C798);
  *(_QWORD *)(inited + 48) = v4;
  sub_24A18B6F8(inited);
  v5 = objc_allocWithZone(MEMORY[0x24BDBFF88]);
  v6 = sub_24A18C690();

  *(_QWORD *)(v2 + 16) = v6;
  return v2;
}

uint64_t sub_24A1BC910@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t result;
  uint64_t v16;

  v2 = sub_24A215750();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_24A135F88(&qword_25790BCF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_24A17DDE0();
  if (!v9)
  {
    __break(1u);
    goto LABEL_6;
  }
  v10 = v9;
  v11 = (void *)sub_24A215C90();
  v12 = (void *)sub_24A215C90();
  v13 = objc_msgSend(v10, sel_URLForResource_withExtension_, v11, v12);

  if (!v13)
  {
LABEL_6:
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    goto LABEL_7;
  }
  sub_24A215738();

  v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  v14(v8, v5, v2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
  if ((_DWORD)result != 1)
  {

    return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v8, v2);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_24A1BCAC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  sub_24A16D544(0, qword_25790C7A0);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  swift_retain();
  sub_24A2161A0();
  return swift_release();
}

uint64_t sub_24A1BCB5C()
{
  uint64_t v0;
  _QWORD *v1;

  sub_24A16D544(0, qword_25790C7A0);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_24A1BCBDC;
  return sub_24A2161AC();
}

uint64_t sub_24A1BCBDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 24) = a1;
  return swift_task_switch();
}

uint64_t sub_24A1BCC58()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  type metadata accessor for aa_encoder_rdr_125141826();
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A1BCC9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v12[2];

  v12[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = *(void **)(v2 + 16);
  v12[0] = 0;
  v6 = objc_msgSend(v5, sel_predictionFromFeatures_options_error_, a1, a2, v12);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    type metadata accessor for aa_encoder_rdr_125141826Output();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v8;
    v9 = v7;
  }
  else
  {
    v10 = v12[0];
    sub_24A2156F0();

    swift_willThrow();
  }
  return v3;
}

uint64_t sub_24A1BCD70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_24A1BCD8C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_24A1BCDE4;
  return sub_24A216194();
}

uint64_t sub_24A1BCDE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 48) = a1;
  return swift_task_switch();
}

uint64_t sub_24A1BCE60()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  type metadata accessor for aa_encoder_rdr_125141826Output();
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A1BCEA4(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  id v5;
  uint64_t v6;

  type metadata accessor for aa_encoder_rdr_125141826Input();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = a1;
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 136);
  v5 = a1;
  v6 = v4(v3);
  swift_release();
  return v6;
}

uint64_t sub_24A1BCF1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = v1;
  v4 = sub_24A135F88(&qword_25790C778);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v16 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v16 - v9, a1, v4);
  sub_24A16D544(0, (unint64_t *)&qword_25790C780);
  v11(v8, (uint64_t)v10, v4);
  sub_24A18C9D0();
  v12 = sub_24A2160E0();
  type metadata accessor for aa_encoder_rdr_125141826Input();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v12;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 136))(v13);
  swift_release();
  return v14;
}

void sub_24A1BD064(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22[2];

  v22[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_24A135F88(&qword_25790C820);
    sub_24A2163F8();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_24A2165B4();
  }
  v6 = objc_allocWithZone(MEMORY[0x24BDBFF58]);
  sub_24A135F88(&qword_25790C820);
  v7 = (void *)sub_24A215E94();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v6, sel_initWithFeatureProviderArray_, v7);

  v9 = *(void **)(v2 + 16);
  v22[0] = 0;
  v10 = objc_msgSend(v9, sel_predictionsFromBatch_options_error_, v8, a2, v22);
  v11 = v22[0];
  if (v10)
  {
    v12 = v10;
    v22[0] = (id)MEMORY[0x24BEE4AF8];
    if (v5)
    {
      swift_bridgeObjectRetain();
      v16 = v11;
      v13 = sub_24A216410();
      swift_bridgeObjectRelease();
    }
    else
    {
      v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      v14 = v11;
    }
    sub_24A18C774(v13, 0);
    sub_24A215EB8();
    v17 = (unint64_t)objc_msgSend(v12, sel_count);
    if ((v17 & 0x8000000000000000) != 0)
      __break(1u);
    v18 = v17;
    if (v17)
    {
      v19 = 0;
      do
      {
        v20 = objc_msgSend(v12, sel_featuresAtIndex_, v19);
        type metadata accessor for aa_encoder_rdr_125141826Output();
        *(_QWORD *)(swift_allocObject() + 16) = v20;
        swift_unknownObjectRetain();
        v21 = swift_retain();
        MEMORY[0x24BD09750](v21);
        if (*(_QWORD *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8)
                                                                                               + 0x18) >> 1)
          sub_24A215ED0();
        ++v19;
        sub_24A215F0C();
        sub_24A215EB8();
        swift_release();
        swift_unknownObjectRelease();
      }
      while (v18 != v19);
    }
    swift_unknownObjectRelease();

  }
  else
  {
    v15 = v22[0];
    sub_24A2156F0();

    swift_willThrow();
  }
}

uint64_t sub_24A1BD338()
{
  swift_release();
  return swift_deallocObject();
}

void sub_24A1BD35C(id a1, char a2)
{
  uint64_t v2;
  void (*v4)(id, uint64_t);
  uint64_t v5;
  id v6;
  id v7;

  v4 = *(void (**)(id, uint64_t))(v2 + 16);
  if ((a2 & 1) != 0)
  {
    v7 = a1;
    v4(a1, 1);
    sub_24A18CC40(a1);
  }
  else
  {
    type metadata accessor for aa_encoder_rdr_125141826();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = a1;
    v6 = a1;
    v4((id)v5, 0);
    swift_release();
  }
}

uint64_t type metadata accessor for aa_encoder_rdr_125141826()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for aa_encoder_rdr_125141826Output()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for aa_encoder_rdr_125141826Input()
{
  return objc_opt_self();
}

Swift::Void __swiftcall DetectionInfo.reset()()
{
  uint64_t v0;

  *(_DWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = -1;
  *(_QWORD *)(v0 + 40) = -1;
  *(_WORD *)(v0 + 52) = 0;
  *(_BYTE *)(v0 + 54) = 2;
}

_QWORD *sub_24A1BD460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;

  result = (_QWORD *)swift_allocObject();
  result[2] = a1;
  result[3] = 0;
  v7 = MEMORY[0x24BEE4AF8];
  result[4] = a3;
  result[5] = v7;
  result[6] = a2;
  return result;
}

uint64_t sub_24A1BD4B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  int v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v3 = (uint64_t *)(v1 + 40);
  result = swift_beginAccess();
  v5 = *(_QWORD *)(v1 + 40);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)(v5 + 32);
    v8 = *(_QWORD *)(v5 + 40);
    v9 = *(float *)(v5 + 48);
    v10 = *(_QWORD *)(v5 + 64);
    v11 = *(_DWORD *)(v5 + 80);
    v12 = *(_BYTE *)(v5 + 84);
    v13 = *(_BYTE *)(v5 + 85);
    v14 = v6 - 1;
    if (v6 == 1)
    {
      result = swift_bridgeObjectRetain();
      v15 = 1;
LABEL_8:
      v19 = v5 + 56 * v15;
      v20 = *(_QWORD *)(v19 + 16);
      LOBYTE(v19) = *(_BYTE *)(v19 + 30);
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v8;
      *(float *)(a1 + 16) = v9;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = v10;
      *(_QWORD *)(a1 + 40) = v20;
      *(_DWORD *)(a1 + 48) = v11;
      *(_BYTE *)(a1 + 52) = v12;
      *(_BYTE *)(a1 + 53) = v13 & 1;
      *(_BYTE *)(a1 + 54) = v19;
      return result;
    }
    v21 = *(_BYTE *)(v5 + 84);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = v5 + 88;
    do
    {
      v17 = *(float *)(v16 + 16);
      v18 = *(_BYTE *)(v16 + 53);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_24A215D98();
      swift_bridgeObjectRetain();
      sub_24A215D98();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v13 |= v18;
      v9 = v9 * v17;
      v16 += 56;
      --v14;
    }
    while (v14);
    result = swift_bridgeObjectRelease();
    v5 = *v3;
    v15 = *(_QWORD *)(*v3 + 16);
    if (v15)
    {
      v12 = v21;
      goto LABEL_8;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_24A1BD648()
{
  _QWORD *v0;
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  uint64_t result;

  v1 = v0[3];
  v2 = __OFADD__(v1, 1);
  v3 = v1 + 1;
  if (v2)
  {
    __break(1u);
  }
  else
  {
    v0[3] = v3;
    if (v3 >= v0[2])
    {
      v0[3] = 0;
      swift_beginAccess();
      v0[5] = MEMORY[0x24BEE4AF8];
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_24A1BD6AC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD **v11;
  uint64_t result;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  _QWORD v43[2];
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  unsigned __int8 v51;

  v4 = *a1;
  v5 = a1[1];
  v6 = *((_DWORD *)a1 + 4);
  v8 = a1[3];
  v7 = a1[4];
  v9 = a1[5];
  v10 = *((_DWORD *)a1 + 12);
  v41 = *((_BYTE *)a1 + 52);
  v11 = (_QWORD **)(v2 + 5);
  v38 = *((_BYTE *)a1 + 54);
  v39 = *((_BYTE *)a1 + 53);
  result = swift_beginAccess();
  v13 = v2[4];
  v14 = (_QWORD *)v2[5];
  v15 = v14[2];
  if (v15 < *(_QWORD *)(v13 + 16))
  {
    v16 = v13 + 16 * v15;
    if (v4 != *(_QWORD *)(v16 + 32) || v5 != *(_QWORD *)(v16 + 40))
    {
      result = sub_24A21659C();
      if ((result & 1) == 0)
        goto LABEL_14;
    }
    if (v15)
    {
      v18 = v14[7 * v15 + 2];
      v19 = __OFSUB__(v18, v7);
      v20 = v18 - v7;
      if (!v19)
        goto LABEL_9;
    }
    else
    {
      v20 = -v7;
      if (!__OFSUB__(0, v7))
      {
LABEL_9:
        if (v2[6] < v20)
          goto LABEL_14;
        v37 = v9;
        swift_beginAccess();
        v14 = *v11;
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v11 = v14;
        v9 = v8;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          goto LABEL_11;
        goto LABEL_26;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_26:
  v14 = sub_24A1C25C4(0, v14[2] + 1, 1, v14);
  *v11 = v14;
LABEL_11:
  v23 = v14[2];
  v22 = v14[3];
  if (v23 >= v22 >> 1)
  {
    v14 = sub_24A1C25C4((_QWORD *)(v22 > 1), v23 + 1, 1, v14);
    *v11 = v14;
  }
  v14[2] = v23 + 1;
  v24 = &v14[7 * v23];
  v24[4] = v4;
  v24[5] = v5;
  *((_DWORD *)v24 + 12) = v6;
  v24[7] = v9;
  v24[8] = v7;
  v24[9] = v37;
  *((_DWORD *)v24 + 20) = v10;
  *((_BYTE *)v24 + 84) = v41;
  *((_BYTE *)v24 + 85) = v39;
  *((_BYTE *)v24 + 86) = v38;
  v14 = (_QWORD *)v2[5];
  result = swift_endAccess();
  v2[3] = 0;
LABEL_14:
  if (v14[2] == *(_QWORD *)(v2[4] + 16))
  {
    sub_24A1BD4B0((uint64_t)v43);
    v25 = v43[0];
    v26 = v43[1];
    v27 = v44;
    v28 = v45;
    v29 = v46;
    v30 = v47;
    v40 = v48;
    v31 = v49;
    v32 = v50;
    v42 = v51;
    v2[3] = 0;
    v2[5] = MEMORY[0x24BEE4AF8];
    result = swift_bridgeObjectRelease();
    v33 = 0x100000000;
    if (!v31)
      v33 = 0;
    v34 = v33 | v40;
    v35 = 0x10000000000;
    if (!v32)
      v35 = 0;
    v36 = v34 | v35 | (v42 << 48);
  }
  else
  {
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v36 = 0;
  }
  *(_QWORD *)a2 = v25;
  *(_QWORD *)(a2 + 8) = v26;
  *(_QWORD *)(a2 + 16) = v27;
  *(_QWORD *)(a2 + 24) = v28;
  *(_QWORD *)(a2 + 32) = v29;
  *(_QWORD *)(a2 + 40) = v30;
  *(_DWORD *)(a2 + 48) = v36;
  *(_BYTE *)(a2 + 54) = BYTE6(v36);
  *(_WORD *)(a2 + 52) = WORD2(v36);
  return result;
}

uint64_t VAWordDecoder.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VAWordDecoder.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_24A1BD9A0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 344))();
  *a2 = result;
  return result;
}

uint64_t sub_24A1BD9D0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 352);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_24A1BDA00()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A1BDA34(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 144) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A1BDA78())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_24A1BDAB4()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A1BDAE8(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 152) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A1BDB2C(_QWORD *a1, uint64_t a2)
{
  swift_allocObject();
  return sub_24A1BDB7C(a1, a2);
}

uint64_t sub_24A1BDB7C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int32 v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t (*v17)(void);
  _QWORD *v18;
  void *v19;
  uint64_t (*v20)(void);
  void *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  int32x2_t v32;
  _QWORD *v33;
  uint64_t result;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  unint64_t v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  _BOOL8 v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  char v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  int32x2_t v61;
  uint64_t v62;
  int32x2_t v63;
  int32x2_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t (*v73)(void);
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint8_t *v77;
  char *v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t);
  char *v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  uint64_t v96;
  uint8_t *v97;
  uint64_t v98;
  char v99;
  char v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char v104;
  char v105;
  int64_t v106;
  uint8_t *v107;
  char v108;
  int32x2_t v109;
  _QWORD *v110;
  _QWORD *v111;
  char **v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int64_t v117;
  unint64_t v118;
  unint64_t v119;
  int64_t v120;
  unint64_t v121;
  void *v122;
  int64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  int64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  int64_t v137;
  uint64_t v138;
  uint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int64_t v143;
  unint64_t *v144;
  unint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  unint64_t v151;
  unint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  BOOL v155;
  int64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  BOOL v160;
  _QWORD *v161;
  unint64_t v162;
  unint64_t v163;
  _QWORD *v164;
  _QWORD *v165;
  char **v166;
  char *v167;
  char v168;
  unint64_t v169;
  char **v170;
  char *v171;
  char v172;
  _QWORD *v173;
  uint64_t (*v174)(void);
  _QWORD *v175;
  uint64_t v176;
  _QWORD *v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  int64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  char v187;
  int64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  int64_t v196;
  char **v197;
  char *v198;
  char v199;
  char **v200;
  char *v201;
  char v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  _QWORD *v226;
  _QWORD v227[2];
  id v228;
  uint64_t v229;
  char *v230;
  uint8_t *v231;
  char *v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  int v237;
  int v238;
  _QWORD *v239;
  uint64_t v240;
  int64_t v241;
  _QWORD *v242;
  uint64_t v243;
  _QWORD *v244;
  int64_t v245;
  unint64_t v246;
  int64_t *v247;
  char **v248;
  char **v249;
  uint64_t v250;
  uint64_t v251;
  int64_t v252;
  unint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  uint64_t v256;
  int64_t v257;
  uint64_t v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  unint64_t v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  __int32 v267;
  char v268;
  char v269;
  uint64_t v270;
  uint64_t v271;
  char v272;
  int64_t *v273;
  char v274;
  char v275;
  int v276;
  char v277;
  int64_t v278;
  uint64_t v279;
  char v280;
  char v281;
  char v282;
  char v283;
  char v284;
  char v285;
  char v286;
  _QWORD v287[2];
  int v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  int v292;
  __int16 v293;
  char v294;

  v3 = v2;
  v261 = sub_24A215690();
  v260 = *(_QWORD *)(v261 - 8);
  MEMORY[0x24BDAC7A8](v261);
  v259 = (char *)v227 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v234 = sub_24A215A8C();
  v231 = *(uint8_t **)(v234 - 8);
  v7 = MEMORY[0x24BDAC7A8](v234);
  v232 = (char *)v227 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v230 = (char *)v227 - v9;
  v10 = *(_QWORD *)a2;
  v11 = *(_DWORD *)(a2 + 8);
  v236 = *(unsigned __int8 *)(a2 + 12);
  v238 = *(unsigned __int8 *)(a2 + 13);
  v251 = *(_QWORD *)(a2 + 16);
  v250 = *(_QWORD *)(a2 + 24);
  LODWORD(v248) = *(unsigned __int8 *)(a2 + 32);
  v247 = *(int64_t **)(a2 + 40);
  LODWORD(v246) = *(unsigned __int8 *)(a2 + 48);
  LODWORD(v255) = *(unsigned __int8 *)(a2 + 49);
  v12 = *(_DWORD *)(a2 + 52);
  LODWORD(v254) = *(unsigned __int8 *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 72);
  v245 = *(_QWORD *)(a2 + 64);
  LODWORD(v243) = *(unsigned __int8 *)(a2 + 80);
  LODWORD(v241) = *(unsigned __int8 *)(a2 + 81);
  LODWORD(v240) = *(unsigned __int8 *)(a2 + 82);
  v14 = *(unsigned __int8 *)(a2 + 83);
  LODWORD(v253) = *(unsigned __int8 *)(a2 + 84);
  LODWORD(v252) = *(unsigned __int8 *)(a2 + 85);
  v15 = MEMORY[0x24BEE4AF8];
  v237 = *(unsigned __int8 *)(a2 + 86);
  *(_QWORD *)(v3 + 128) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + 120) = v15;
  v242 = (_QWORD *)(v3 + 128);
  *(_QWORD *)(v3 + 16) = a1;
  v16 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v17 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *a1) + 0xC8);
  v18 = a1;
  v19 = (void *)v17();
  if (!v19)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_24A14C404();
    swift_allocError();
    *v33 = 0xD00000000000001BLL;
    v33[1] = 0x800000024A225F50;
    swift_willThrow();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for VAResultGenerator();
    return swift_deallocPartialClassInstance();
  }
  v256 = v13;
  *(_QWORD *)(v3 + 24) = v19;
  v20 = *(uint64_t (**)(void))((*v16 & *v18) + 0x98);
  v228 = v19;
  v21 = (void *)v20();

  v244 = (_QWORD *)v3;
  v239 = v18;
  v235 = v10;
  if (!v21)
  {
    v266 = v10;
    v267 = v11;
    v35 = v236;
    v268 = v236;
    v36 = v238;
    v269 = v238;
    v270 = v251;
    v271 = v250;
    v272 = (char)v248;
    v273 = v247;
    v274 = v246;
    v275 = v255;
    v276 = v12;
    v277 = (char)v254;
    v37 = v256;
    v278 = v245;
    v279 = v256;
    v280 = v243;
    v281 = v241;
    v282 = v240;
    v283 = v14;
    v284 = v253;
    v285 = v252;
    v286 = v237;
    v38 = *(_QWORD *)(VARuntimeParameters.keywordsNoThresholds.getter() + 16);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 96) = v38;
    *(_QWORD *)(v3 + 136) = v38;
    v266 = v10;
    v267 = v11;
    v268 = v35;
    v269 = v36;
    v270 = v251;
    v271 = v250;
    v272 = (char)v248;
    v273 = v247;
    v274 = v246;
    v275 = v255;
    v276 = v12;
    v277 = (char)v254;
    v278 = v245;
    v279 = v37;
    v280 = v243;
    v281 = v241;
    v282 = v240;
    v233 = v14;
    v283 = v14;
    v284 = v253;
    v285 = v252;
    v286 = v237;
    v258 = VARuntimeParameters.keywordsNoThresholds.getter();
    *(_QWORD *)(v3 + 40) = sub_24A1C32B0(MEMORY[0x24BEE4AF8]);
    v39 = (uint64_t *)(v3 + 40);
    v40 = *(_QWORD *)(v3 + 96);
    if (v40 < 0)
      goto LABEL_194;
    if (v40)
    {
      v41 = 0;
      v42 = (uint64_t *)(v258 + 40);
      v257 = v40;
      while (v40 != v41)
      {
        if (v41 >= *(_QWORD *)(v258 + 16))
          goto LABEL_189;
        v44 = *(v42 - 1);
        v45 = *v42;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v262 = (_QWORD *)*v39;
        v47 = (uint64_t)v262;
        *v39 = 0x8000000000000000;
        v49 = sub_24A1489D4(v41);
        v50 = *(_QWORD *)(v47 + 16);
        v51 = (v48 & 1) == 0;
        v52 = v50 + v51;
        if (__OFADD__(v50, v51))
          goto LABEL_190;
        v53 = v48;
        if (*(_QWORD *)(v47 + 24) >= v52)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            sub_24A14A208();
        }
        else
        {
          sub_24A149C4C(v52, isUniquelyReferenced_nonNull_native);
          v54 = sub_24A1489D4(v41);
          if ((v53 & 1) != (v55 & 1))
            goto LABEL_199;
          v49 = v54;
        }
        v16 = (_QWORD *)MEMORY[0x24BEE4EA0];
        v56 = v262;
        if ((v53 & 1) != 0)
        {
          v43 = (_QWORD *)(v262[7] + 16 * v49);
          swift_bridgeObjectRelease();
          *v43 = v44;
          v43[1] = v45;
        }
        else
        {
          v262[(v49 >> 6) + 8] |= 1 << v49;
          *(_QWORD *)(v56[6] + 8 * v49) = v41;
          v57 = (_QWORD *)(v56[7] + 16 * v49);
          *v57 = v44;
          v57[1] = v45;
          v58 = v56[2];
          v59 = __OFADD__(v58, 1);
          v60 = v58 + 1;
          if (v59)
            goto LABEL_192;
          v56[2] = v60;
        }
        ++v41;
        *v39 = (uint64_t)v56;
        swift_bridgeObjectRelease();
        swift_endAccess();
        v42 += 2;
        v40 = v257;
        if (v257 == v41)
          goto LABEL_24;
      }
LABEL_188:
      __break(1u);
LABEL_189:
      __break(1u);
LABEL_190:
      __break(1u);
LABEL_191:
      __break(1u);
LABEL_192:
      __break(1u);
      goto LABEL_193;
    }
LABEL_24:
    swift_bridgeObjectRelease();
    v25 = v244;
    v10 = v235;
    v14 = v233;
    goto LABEL_25;
  }
  v22 = (_QWORD *)v20();
  if (!v22)
    goto LABEL_195;
  v23 = v22;
  v24 = (*(uint64_t (**)(void))((*v16 & *v22) + 0x170))();

  v25 = v244;
  v244[12] = v24;
  v26 = (_QWORD *)v20();
  if (!v26)
  {
LABEL_196:
    __break(1u);
    goto LABEL_197;
  }
  v27 = v26;
  v28 = (*(uint64_t (**)(void))((*v16 & *v26) + 0xB0))();

  v25[5] = v28;
  v29 = (_QWORD *)v20();
  if (!v29)
  {
LABEL_197:
    __break(1u);
LABEL_198:
    v262 = 0;
    v263 = 0xE000000000000000;
    sub_24A216308();
    swift_bridgeObjectRelease();
    v262 = (_QWORD *)0xD000000000000019;
    v263 = 0x800000024A225FC0;
    sub_24A215D98();
    sub_24A2163EC();
    __break(1u);
LABEL_199:
    sub_24A2165CC();
    __break(1u);
    goto LABEL_200;
  }
  v30 = v29;
  v31 = (*(uint64_t (**)(void))((*v16 & *v29) + 0x178))();

  v25[17] = v31;
LABEL_25:
  v32.i32[0] = 0;
  v25[18] = sub_24A1420E4(v25[12], v32);
  v61.i32[0] = 0;
  v25[19] = sub_24A1420E4(v25[12], v61);
  v62 = MEMORY[0x24BEE4AF8];
  v25[6] = MEMORY[0x24BEE4AF8];
  v63.i32[0] = 0;
  v25[7] = sub_24A1420E4(v25[12], v63);
  v64.i32[0] = 0;
  v25[10] = sub_24A1420E4(v25[12], v64);
  v287[0] = 0;
  v287[1] = 0xE000000000000000;
  v288 = 0;
  v290 = 0;
  v291 = 0;
  v289 = 0;
  v292 = -1082130432;
  v293 = 0;
  v294 = 2;
  v25[11] = sub_24A1BFA0C((uint64_t)v287, v25[12]);
  v249 = (char **)(v25 + 10);
  v25[14] = v62;
  v266 = v10;
  v267 = v11;
  v268 = v236;
  v269 = v238;
  v270 = v251;
  v271 = v250;
  v272 = (char)v248;
  v273 = v247;
  v274 = v246;
  v275 = v255;
  v276 = v12;
  v277 = (char)v254;
  v278 = v245;
  v279 = v256;
  v280 = v243;
  v281 = v241;
  v282 = v240;
  v283 = v14;
  v284 = v253;
  v285 = v252;
  v286 = v237;
  v65 = VARuntimeParameters.keywordsToThresholds.getter();
  v66 = v229;
  v67 = sub_24A1BFB34(v65);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v67 + 16))
  {
    sub_24A135F88(&qword_25790FC00);
    v68 = sub_24A216440();
  }
  else
  {
    v68 = MEMORY[0x24BEE4B00];
  }
  v233 = v14;
  v266 = v68;
  v69 = (_QWORD *)swift_bridgeObjectRetain();
  sub_24A1C2708(v69, 1, &v266);
  v229 = v66;
  if (!v66)
  {
    swift_bridgeObjectRelease();
    v70 = v266;
    v71 = v244;
    v244[8] = 0;
    v71[9] = v70;
    v72 = (_QWORD *)v71[3];
    v73 = *(uint64_t (**)(void))((*v16 & *v72) + 0x258);
    v74 = v72;
    v75 = v73();

    v71[4] = v75;
    v76 = sub_24A1B9D90();
    v77 = v231;
    v78 = v230;
    v79 = v234;
    v258 = *((_QWORD *)v231 + 2);
    ((void (*)(char *, uint64_t, uint64_t))v258)(v230, v76, v234);
    swift_retain_n();
    v80 = sub_24A215A74();
    v81 = sub_24A2160F8();
    if (os_log_type_enabled(v80, v81))
    {
      v82 = (uint8_t *)swift_slowAlloc();
      v83 = swift_slowAlloc();
      v257 = v76;
      v84 = v83;
      v266 = v83;
      *(_DWORD *)v82 = 136315138;
      v227[1] = v82 + 4;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v85 = sub_24A215C30();
      v87 = v86;
      swift_bridgeObjectRelease();
      v88 = v85;
      v79 = v234;
      v262 = (_QWORD *)sub_24A148270(v88, v87, &v266);
      sub_24A216260();
      swift_release_n();
      v89 = v235;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24A12D000, v80, v81, "Keywords Trained for: %s", v82, 0xCu);
      swift_arrayDestroy();
      v90 = v84;
      v76 = v257;
      MEMORY[0x24BD0AAAC](v90, -1, -1);
      MEMORY[0x24BD0AAAC](v82, -1, -1);

      v91 = (void (*)(char *, uint64_t))*((_QWORD *)v231 + 1);
      v91(v230, v79);
      v92 = v232;
    }
    else
    {

      swift_release_n();
      v91 = (void (*)(char *, uint64_t))*((_QWORD *)v77 + 1);
      v91(v78, v79);
      v92 = v232;
      v89 = v235;
    }
    ((void (*)(char *, uint64_t, uint64_t))v258)(v92, v76, v79);
    v93 = v256;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v94 = sub_24A215A74();
    v95 = sub_24A2160F8();
    if (os_log_type_enabled(v94, v95))
    {
      v96 = swift_slowAlloc();
      v258 = (uint64_t)v91;
      v97 = (uint8_t *)v96;
      v98 = swift_slowAlloc();
      v257 = v98;
      *(_DWORD *)v97 = 136315138;
      v262 = (_QWORD *)v98;
      v231 = v97 + 4;
      v266 = v235;
      v267 = v11;
      v99 = v236;
      v268 = v236;
      v269 = v238;
      v270 = v251;
      v271 = v250;
      v272 = (char)v248;
      v273 = v247;
      v274 = v246;
      v275 = v255;
      v276 = v12;
      v277 = (char)v254;
      v278 = v245;
      v279 = v256;
      v280 = v243;
      v281 = v241;
      v282 = v240;
      v283 = v233;
      v284 = v253;
      v285 = v252;
      v100 = v237;
      v286 = v237;
      VARuntimeParameters.keywordsNoThresholds.getter();
      v101 = MEMORY[0x24BD09774]();
      v103 = v102;
      v104 = v99;
      swift_bridgeObjectRelease();
      v266 = sub_24A148270(v101, v103, (uint64_t *)&v262);
      sub_24A216260();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      v105 = v238;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24A12D000, v94, v95, "Keywords Looking for: %s", v97, 0xCu);
      v106 = v257;
      swift_arrayDestroy();
      MEMORY[0x24BD0AAAC](v106, -1, -1);
      v107 = v97;
      v108 = v255;
      v89 = v235;
      v93 = v256;
      MEMORY[0x24BD0AAAC](v107, -1, -1);

      ((void (*)(char *, uint64_t))v258)(v232, v234);
      v110 = (_QWORD *)MEMORY[0x24BEE4EA0];
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      v91(v92, v79);
      v110 = (_QWORD *)MEMORY[0x24BEE4EA0];
      v104 = v236;
      v105 = v238;
      v108 = v255;
      v100 = v237;
    }
    v111 = v244;
    v109.i32[0] = v11;
    v111[13] = sub_24A1420E4(v244[12], v109);
    v112 = (char **)(v111 + 13);
    v266 = v89;
    v267 = v11;
    v268 = v104;
    v269 = v105;
    v270 = v251;
    v271 = v250;
    v272 = (char)v248;
    v273 = v247;
    v274 = v246;
    v275 = v108;
    v276 = v12;
    v277 = (char)v254;
    v278 = v245;
    v279 = v93;
    v280 = v243;
    v281 = v241;
    v282 = v240;
    v283 = v233;
    v284 = v253;
    v285 = v252;
    v286 = v100;
    v113 = VARuntimeParameters.keywordsToThresholds.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v114 = *(_QWORD *)(v113 + 64);
    v240 = v113 + 64;
    v243 = v113;
    v115 = 1 << *(_BYTE *)(v113 + 32);
    if (v115 < 64)
      v116 = ~(-1 << v115);
    else
      v116 = -1;
    v246 = v116 & v114;
    v248 = v112;
    v247 = (int64_t *)(v112 - 8);
    swift_beginAccess();
    v117 = 0;
    v241 = (unint64_t)(v115 + 63) >> 6;
    while (1)
    {
      if (v246)
      {
        v118 = __clz(__rbit64(v246));
        v246 &= v246 - 1;
        v245 = v117;
        v119 = v118 | (v117 << 6);
      }
      else
      {
        v59 = __OFADD__(v117, 1);
        v120 = v117 + 1;
        if (v59)
          goto LABEL_191;
        if (v120 >= v241)
          goto LABEL_173;
        v121 = *(_QWORD *)(v240 + 8 * v120);
        v122 = v239;
        if (!v121)
        {
          v123 = v120 + 1;
          if (v120 + 1 >= v241)
            goto LABEL_174;
          v121 = *(_QWORD *)(v240 + 8 * v123);
          if (!v121)
          {
            v123 = v120 + 2;
            if (v120 + 2 >= v241)
              goto LABEL_174;
            v121 = *(_QWORD *)(v240 + 8 * v123);
            if (!v121)
            {
              v123 = v120 + 3;
              if (v120 + 3 >= v241)
                goto LABEL_174;
              v121 = *(_QWORD *)(v240 + 8 * v123);
              if (!v121)
              {
                while (1)
                {
                  v120 = v123 + 1;
                  if (__OFADD__(v123, 1))
                    break;
                  if (v120 >= v241)
                    goto LABEL_174;
                  v121 = *(_QWORD *)(v240 + 8 * v120);
                  ++v123;
                  if (v121)
                    goto LABEL_51;
                }
LABEL_193:
                __break(1u);
LABEL_194:
                __break(1u);
LABEL_195:
                __break(1u);
                goto LABEL_196;
              }
            }
          }
          v120 = v123;
        }
LABEL_51:
        v246 = (v121 - 1) & v121;
        v245 = v120;
        v119 = __clz(__rbit64(v121)) + (v120 << 6);
      }
      v124 = (uint64_t *)(*(_QWORD *)(v243 + 48) + 16 * v119);
      v125 = *v124;
      v126 = v124[1];
      v127 = *(_DWORD *)(*(_QWORD *)(v243 + 56) + 4 * v119);
      v128 = *v247;
      v129 = *(_QWORD *)(*v247 + 64);
      v251 = *v247 + 64;
      v130 = 1 << *(_BYTE *)(v128 + 32);
      if (v130 < 64)
        v131 = ~(-1 << v130);
      else
        v131 = -1;
      v132 = v131 & v129;
      v252 = (unint64_t)(v130 + 63) >> 6;
      swift_bridgeObjectRetain();
      v257 = v128;
      swift_bridgeObjectRetain();
      v133 = 0;
      v250 = v126;
      v255 = v125;
      if (!v132)
        goto LABEL_59;
      while (2)
      {
        while (1)
        {
          v134 = __clz(__rbit64(v132));
          v132 &= v132 - 1;
          v135 = v134 | (v133 << 6);
LABEL_70:
          v138 = *(_QWORD *)(v257 + 56);
          v253 = *(_QWORD *)(*(_QWORD *)(v257 + 48) + 8 * v135);
          v139 = (uint64_t *)(v138 + 16 * v135);
          v141 = *v139;
          v140 = v139[1];
          v262 = (_QWORD *)v141;
          v263 = v140;
          v264 = 44;
          v265 = 0xE100000000000000;
          sub_24A14C688();
          v142 = sub_24A216284();
          v143 = *(_QWORD *)(v142 + 16);
          if (v143)
          {
            v258 = v132;
            v256 = v133;
            v264 = MEMORY[0x24BEE4AF8];
            sub_24A148B80(0, v143, 0);
            v254 = (_QWORD *)v142;
            v144 = (unint64_t *)(v142 + 40);
            do
            {
              v145 = *v144;
              v262 = (_QWORD *)*(v144 - 1);
              v263 = v145;
              swift_bridgeObjectRetain();
              v146 = v259;
              sub_24A215630();
              v147 = sub_24A21629C();
              v149 = v148;
              (*(void (**)(char *, uint64_t))(v260 + 8))(v146, v261);
              swift_bridgeObjectRelease();
              v150 = (_QWORD *)v264;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                sub_24A148B80(0, v150[2] + 1, 1);
                v150 = (_QWORD *)v264;
              }
              v152 = v150[2];
              v151 = v150[3];
              if (v152 >= v151 >> 1)
              {
                sub_24A148B80(v151 > 1, v152 + 1, 1);
                v150 = (_QWORD *)v264;
              }
              v144 += 2;
              v150[2] = v152 + 1;
              v153 = &v150[2 * v152];
              v153[4] = v147;
              v153[5] = v149;
              --v143;
            }
            while (v143);
            swift_bridgeObjectRelease();
            v110 = (_QWORD *)MEMORY[0x24BEE4EA0];
            v126 = v250;
            v133 = v256;
            v132 = v258;
          }
          else
          {
            swift_bridgeObjectRelease();
            v150 = (_QWORD *)MEMORY[0x24BEE4AF8];
          }
          v154 = v150[2];
          v125 = v255;
          if (v154)
          {
            v155 = v150[4] == v255 && v150[5] == v126;
            if (v155 || (sub_24A21659C() & 1) != 0)
            {
LABEL_104:
              swift_bridgeObjectRelease();
              v161 = sub_24A14804C(0, 1, 1, MEMORY[0x24BEE4AF8]);
              v163 = v161[2];
              v162 = v161[3];
              v164 = v161;
              if (v163 >= v162 >> 1)
                v164 = sub_24A14804C((_QWORD *)(v162 > 1), v163 + 1, 1, v161);
              v164[2] = v163 + 1;
              v165 = &v164[2 * v163];
              v165[4] = v125;
              v165[5] = v126;
              v166 = v249;
              swift_beginAccess();
              v167 = *v166;
              v168 = swift_isUniquelyReferenced_nonNull_native();
              *v166 = v167;
              if ((v168 & 1) == 0)
              {
                v167 = sub_24A148928((uint64_t)v167);
                *v249 = v167;
              }
              v169 = v253;
              if ((v253 & 0x8000000000000000) != 0)
                goto LABEL_184;
              if (v253 >= *((_QWORD *)v167 + 2))
              {
LABEL_185:
                __break(1u);
              }
              else
              {
                *(_DWORD *)&v167[4 * v253 + 32] = 1065353216;
                swift_endAccess();
                v170 = v248;
                swift_beginAccess();
                v171 = *v170;
                v172 = swift_isUniquelyReferenced_nonNull_native();
                *v170 = v171;
                if ((v172 & 1) == 0)
                {
                  v171 = sub_24A148928((uint64_t)v171);
                  *v248 = v171;
                }
                if (v169 < *((_QWORD *)v171 + 2))
                {
                  *(_DWORD *)&v171[4 * v169 + 32] = v127;
                  swift_endAccess();
                  swift_release();
                  goto LABEL_114;
                }
              }
              __break(1u);
LABEL_187:
              __break(1u);
              goto LABEL_188;
            }
            if (v154 != 1)
            {
              if (v150[6] == v125 && v150[7] == v126 || (sub_24A21659C() & 1) != 0)
                goto LABEL_104;
              if (v154 != 2)
                break;
            }
          }
          swift_bridgeObjectRelease();
          if (!v132)
            goto LABEL_59;
        }
        v258 = v132;
        v156 = v133;
        v157 = v150 + 9;
        v158 = 2;
        do
        {
          v159 = v158 + 1;
          if (__OFADD__(v158, 1))
          {
            __break(1u);
            goto LABEL_176;
          }
          v160 = *(v157 - 1) == v125 && *v157 == v126;
          if (v160 || (sub_24A21659C() & 1) != 0)
            goto LABEL_104;
          v157 += 2;
          ++v158;
        }
        while (v159 != v154);
        swift_bridgeObjectRelease();
        v133 = v156;
        v132 = v258;
        if (v258)
          continue;
        break;
      }
LABEL_59:
      v59 = __OFADD__(v133++, 1);
      if (v59)
        goto LABEL_181;
      if (v133 < v252)
      {
        v136 = *(_QWORD *)(v251 + 8 * v133);
        if (v136)
        {
LABEL_69:
          v132 = (v136 - 1) & v136;
          v135 = __clz(__rbit64(v136)) + (v133 << 6);
          goto LABEL_70;
        }
        v137 = v133 + 1;
        if (v133 + 1 < v252)
        {
          v136 = *(_QWORD *)(v251 + 8 * v137);
          if (v136)
            goto LABEL_68;
          v137 = v133 + 2;
          if (v133 + 2 < v252)
          {
            v136 = *(_QWORD *)(v251 + 8 * v137);
            if (v136)
              goto LABEL_68;
            v137 = v133 + 3;
            if (v133 + 3 < v252)
            {
              v136 = *(_QWORD *)(v251 + 8 * v137);
              if (v136)
              {
LABEL_68:
                v133 = v137;
                goto LABEL_69;
              }
              while (1)
              {
                v133 = v137 + 1;
                if (__OFADD__(v137, 1))
                  goto LABEL_187;
                if (v133 >= v252)
                  break;
                v136 = *(_QWORD *)(v251 + 8 * v133);
                ++v137;
                if (v136)
                  goto LABEL_69;
              }
            }
          }
        }
      }
      swift_release();
      swift_bridgeObjectRetain();
      if (sub_24A215D5C() >= 1)
      {
        v180 = v125;
        v258 = v126;
        v181 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_120:
        v182 = *v247;
        v183 = *(_QWORD *)(*v247 + 64);
        v256 = *v247 + 64;
        v184 = 1 << *(_BYTE *)(v182 + 32);
        if (v184 < 64)
          v185 = ~(-1 << v184);
        else
          v185 = -1;
        v186 = v185 & v183;
        v257 = (unint64_t)(v184 + 63) >> 6;
        swift_bridgeObjectRetain();
        v187 = 0;
        v188 = 0;
        if (v186)
        {
LABEL_124:
          v189 = __clz(__rbit64(v186));
          v186 &= v186 - 1;
          v190 = v189 | (v188 << 6);
          goto LABEL_125;
        }
        while (1)
        {
          v59 = __OFADD__(v188++, 1);
          if (v59)
            break;
          if (v188 >= v257)
            goto LABEL_164;
          v195 = *(_QWORD *)(v256 + 8 * v188);
          if (!v195)
          {
            v196 = v188 + 1;
            if (v188 + 1 >= v257)
              goto LABEL_164;
            v195 = *(_QWORD *)(v256 + 8 * v196);
            if (!v195)
            {
              v196 = v188 + 2;
              if (v188 + 2 >= v257)
                goto LABEL_164;
              v195 = *(_QWORD *)(v256 + 8 * v196);
              if (!v195)
              {
                v196 = v188 + 3;
                if (v188 + 3 >= v257)
                {
LABEL_164:
                  swift_release();
                  if ((v187 & 1) == 0)
                    goto LABEL_198;
                  if (sub_24A215D5C() <= 0)
                  {
                    v164 = v181;
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    v110 = (_QWORD *)MEMORY[0x24BEE4EA0];
                    goto LABEL_114;
                  }
                  goto LABEL_120;
                }
                v195 = *(_QWORD *)(v256 + 8 * v196);
                if (!v195)
                {
                  while (1)
                  {
                    v188 = v196 + 1;
                    if (__OFADD__(v196, 1))
                      break;
                    if (v188 >= v257)
                      goto LABEL_164;
                    v195 = *(_QWORD *)(v256 + 8 * v188);
                    ++v196;
                    if (v195)
                      goto LABEL_137;
                  }
LABEL_176:
                  __break(1u);
LABEL_177:
                  __break(1u);
LABEL_178:
                  __break(1u);
LABEL_179:
                  __break(1u);
LABEL_180:
                  __break(1u);
LABEL_181:
                  __break(1u);
LABEL_182:
                  __break(1u);
LABEL_183:
                  __break(1u);
LABEL_184:
                  __break(1u);
                  goto LABEL_185;
                }
              }
            }
            v188 = v196;
          }
LABEL_137:
          v186 = (v195 - 1) & v195;
          v190 = __clz(__rbit64(v195)) + (v188 << 6);
LABEL_125:
          v191 = *(_QWORD *)(*(_QWORD *)(v182 + 48) + 8 * v190);
          v192 = (uint64_t *)(*(_QWORD *)(v182 + 56) + 16 * v190);
          v193 = *v192;
          v194 = v192[1];
          swift_bridgeObjectRetain();
          if ((sub_24A215E04() & 1) != 0)
          {
            v254 = v181;
            v197 = v249;
            swift_beginAccess();
            v198 = *v197;
            v199 = swift_isUniquelyReferenced_nonNull_native();
            *v197 = v198;
            if ((v199 & 1) != 0)
            {
              if ((v191 & 0x8000000000000000) != 0)
                goto LABEL_177;
            }
            else
            {
              v198 = sub_24A148928((uint64_t)v198);
              *v249 = v198;
              if ((v191 & 0x8000000000000000) != 0)
                goto LABEL_177;
            }
            if (v191 >= *((_QWORD *)v198 + 2))
              goto LABEL_178;
            *(_DWORD *)&v198[4 * v191 + 32] = 1065353216;
            swift_endAccess();
            v200 = v248;
            swift_beginAccess();
            v201 = *v200;
            v202 = swift_isUniquelyReferenced_nonNull_native();
            *v200 = v201;
            if ((v202 & 1) == 0)
            {
              v201 = sub_24A148928((uint64_t)v201);
              *v248 = v201;
            }
            if (v191 >= *((_QWORD *)v201 + 2))
              goto LABEL_179;
            *(_DWORD *)&v201[4 * v191 + 32] = v127;
            swift_endAccess();
            v203 = v258;
            swift_bridgeObjectRetain();
            sub_24A215D5C();
            v204 = sub_24A215D80();
            swift_bridgeObjectRelease();
            v205 = HIBYTE(v203) & 0xF;
            if ((v203 & 0x2000000000000000) == 0)
              v205 = v180 & 0xFFFFFFFFFFFFLL;
            if (4 * v205 < v204 >> 14)
              goto LABEL_180;
            v253 = sub_24A215E40();
            v207 = v206;
            v209 = v208;
            v211 = v210;
            swift_bridgeObjectRelease();
            v180 = MEMORY[0x24BD095F4](v253, v207, v209, v211);
            v213 = v212;
            swift_bridgeObjectRelease();
            v258 = v213;
            if ((sub_24A215E04() & 1) != 0)
            {
              v214 = v258;
              swift_bridgeObjectRetain();
              v215 = sub_24A215D80();
              swift_bridgeObjectRelease();
              v216 = HIBYTE(v214) & 0xF;
              if ((v214 & 0x2000000000000000) == 0)
                v216 = v180 & 0xFFFFFFFFFFFFLL;
              if (4 * v216 < v215 >> 14)
                goto LABEL_182;
              v217 = sub_24A215E40();
              v253 = v218;
              v220 = v219;
              v222 = v221;
              swift_bridgeObjectRelease();
              v180 = MEMORY[0x24BD095F4](v217, v253, v220, v222);
              v258 = v223;
              swift_bridgeObjectRelease();
            }
            v181 = v254;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v181 = sub_24A14804C(0, v181[2] + 1, 1, v181);
            v225 = v181[2];
            v224 = v181[3];
            if (v225 >= v224 >> 1)
              v181 = sub_24A14804C((_QWORD *)(v224 > 1), v225 + 1, 1, v181);
            v181[2] = v225 + 1;
            v226 = &v181[2 * v225];
            v226[4] = v193;
            v226[5] = v194;
            v187 = 1;
            if (v186)
              goto LABEL_124;
          }
          else
          {
            swift_bridgeObjectRelease();
            if (v186)
              goto LABEL_124;
          }
        }
        __break(1u);
LABEL_173:
        v122 = v239;
LABEL_174:

        swift_release();
        return (uint64_t)v244;
      }
      swift_bridgeObjectRelease_n();
      v164 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_114:
      v173 = (_QWORD *)v244[3];
      v174 = *(uint64_t (**)(void))((*v110 & *v173) + 0x168);
      v175 = v173;
      v176 = v174();

      if (__OFADD__(v176, 100))
        goto LABEL_183;
      type metadata accessor for VAWordDecoder();
      v177 = (_QWORD *)swift_allocObject();
      v177[2] = v176 + 100;
      v177[3] = 0;
      v177[4] = v164;
      v177[5] = MEMORY[0x24BEE4AF8];
      v177[6] = 10;
      v178 = v242;
      v179 = swift_beginAccess();
      MEMORY[0x24BD09750](v179);
      if (*(_QWORD *)((*v178 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v178 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_24A215ED0();
      sub_24A215F0C();
      sub_24A215EB8();
      swift_endAccess();
      v117 = v245;
    }
  }
LABEL_200:
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_24A1BFA0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t result;

  if (a2 < 0)
  {
    result = sub_24A2163E0();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      v4 = sub_24A215EF4();
      v5 = v4;
      *(_QWORD *)(v4 + 16) = a2;
      v7 = *(_OWORD *)(a1 + 16);
      v6 = *(_OWORD *)(a1 + 32);
      v8 = *(_OWORD *)a1;
      *(_QWORD *)(v4 + 79) = *(_QWORD *)(a1 + 47);
      *(_OWORD *)(v4 + 48) = v7;
      *(_OWORD *)(v4 + 64) = v6;
      *(_OWORD *)(v4 + 32) = v8;
      if (a2 != 1)
      {
        v9 = *(_OWORD *)a1;
        v10 = *(_OWORD *)(a1 + 16);
        v11 = *(_OWORD *)(a1 + 32);
        *(_QWORD *)(v4 + 135) = *(_QWORD *)(a1 + 47);
        *(_OWORD *)(v4 + 120) = v11;
        *(_OWORD *)(v4 + 104) = v10;
        *(_OWORD *)(v4 + 88) = v9;
        v12 = a2 - 2;
        if (v12)
        {
          v13 = v4 + 144;
          do
          {
            sub_24A14C448(a1);
            v15 = *(_OWORD *)(a1 + 16);
            v14 = *(_OWORD *)(a1 + 32);
            v16 = *(_OWORD *)a1;
            *(_QWORD *)(v13 + 47) = *(_QWORD *)(a1 + 47);
            *(_OWORD *)(v13 + 16) = v15;
            *(_OWORD *)(v13 + 32) = v14;
            *(_OWORD *)v13 = v16;
            v13 += 56;
            --v12;
          }
          while (v12);
        }
        sub_24A14C448(a1);
      }
    }
    else
    {
      sub_24A14C498(a1);
      return MEMORY[0x24BEE4AF8];
    }
    return v5;
  }
  return result;
}

uint64_t sub_24A1BFB34(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v26 = MEMORY[0x24BEE4AF8];
  sub_24A1C2F4C(0, v1, 0);
  v2 = v26;
  result = sub_24A1C310C(a1);
  v6 = result;
  v7 = 0;
  v8 = a1 + 64;
  v22 = v1;
  v23 = v5;
  v24 = a1 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(a1 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != v5)
      goto LABEL_24;
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v6);
    v13 = v12[1];
    v25 = *v12;
    v15 = *(_QWORD *)(v26 + 16);
    v14 = *(_QWORD *)(v26 + 24);
    result = swift_bridgeObjectRetain();
    if (v15 >= v14 >> 1)
      result = sub_24A1C2F4C(v14 > 1, v15 + 1, 1);
    *(_QWORD *)(v26 + 16) = v15 + 1;
    v16 = (_QWORD *)(v26 + 24 * v15);
    v16[4] = v25;
    v16[5] = v13;
    v16[6] = -100;
    v9 = 1 << *(_BYTE *)(a1 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = a1 + 64;
    v17 = *(_QWORD *)(v24 + 8 * v11);
    if ((v17 & (1 << v6)) == 0)
      goto LABEL_26;
    v5 = v23;
    if (*(_DWORD *)(a1 + 36) != v23)
      goto LABEL_27;
    v18 = v17 & (-2 << (v6 & 0x3F));
    if (v18)
    {
      v9 = __clz(__rbit64(v18)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v22;
    }
    else
    {
      v19 = v11 + 1;
      v20 = (unint64_t)(v9 + 63) >> 6;
      v10 = v22;
      if (v11 + 1 < v20)
      {
        v21 = *(_QWORD *)(v24 + 8 * v19);
        if (v21)
        {
LABEL_20:
          v9 = __clz(__rbit64(v21)) + (v19 << 6);
        }
        else
        {
          while (v20 - 2 != v11)
          {
            v21 = *(_QWORD *)(a1 + 80 + 8 * v11++);
            if (v21)
            {
              v19 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v7;
    v6 = v9;
    if (v7 == v10)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_24A1BFD48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  (*(void (**)(void))(*(_QWORD *)v7 + 608))();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 600))(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_24A1BFDC4(uint64_t a1, uint64_t a2, uint64_t a3, int64_t a4, char a5, char a6, char a7)
{
  vDSP_Length v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  void (*v17)(uint64_t *, _QWORD);
  uint64_t *v18;
  uint64_t *v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t (*v24)(uint64_t);
  float v25;
  uint64_t v26;
  float v27;
  char *v28;
  char v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t (*v33)(void);
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  char *v41;
  char v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  float v46;
  void (*v47)(uint64_t *, _QWORD);
  char **v48;
  char **v49;
  char *v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  float v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t *, _QWORD);
  uint64_t *v57;
  char v58;
  uint64_t (*v59)(uint64_t);
  uint64_t (*v60)(uint64_t *);
  void (*v61)(uint64_t *, _QWORD);
  uint64_t *v62;
  char v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _BOOL4 v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  char **v73;
  char *v74;
  char v75;
  uint64_t v76;
  float v77;
  uint64_t v78;
  unint64_t i;
  uint64_t v81;
  int v82;
  char **v83;
  char *v84;
  char v85;
  char **v86;
  char *v87;
  char v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  int v92;
  uint64_t (*v93)(uint64_t);
  uint64_t v94;
  unsigned int *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  float v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  float v105;
  char v106;
  uint64_t v107;
  unint64_t v108;
  unsigned int *v109;
  uint64_t v110;
  unint64_t v111;
  unsigned int *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  char v116;
  char v117;
  _QWORD *v118;
  char v119;
  char v120;
  _QWORD *v121;
  char v122;
  _QWORD *v123;
  char v124;
  unint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t *v128;
  _QWORD *v129;
  char v130;
  _QWORD *v131;
  uint64_t v132;
  int v133;
  char v134;
  int v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  int v150;
  char v151;
  char v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  _BOOL8 v164;
  uint64_t v165;
  char v166;
  unint64_t v167;
  char v168;
  _QWORD *v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  int v175;
  _QWORD *v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t j;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  vDSP_Length v184;
  char v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  float *v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  float v195;
  uint64_t v196;
  char v197;
  int v198;
  _QWORD *v199;
  char v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t (*v204)(void);
  uint64_t v205;
  uint64_t v206;
  uint64_t (*v207)(void);
  _QWORD *v208;
  double v209;
  _QWORD *v210;
  double v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  double v217;
  _QWORD *v218;
  double v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  uint64_t v228;
  int64_t v229;
  uint64_t v230;
  uint64_t v231;
  char v232;
  char v233;
  char v234;
  unint64_t v235;
  unint64_t v236;
  _QWORD *v237;
  _QWORD *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  _QWORD *v242;
  float *v243;
  float v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  char v249;
  char v250;
  char v251;
  unint64_t v252;
  unint64_t v253;
  _QWORD *v254;
  uint64_t (*v255)(void);
  uint64_t v256;
  uint64_t (*v257)(void);
  _QWORD *v258;
  double v259;
  _QWORD *v260;
  double v261;
  _QWORD *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  double v267;
  _QWORD *v268;
  double v269;
  _QWORD *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  uint64_t v278;
  int64_t v279;
  uint64_t v280;
  uint64_t v281;
  char v282;
  char v283;
  char v284;
  unint64_t v285;
  unint64_t v286;
  _QWORD *v287;
  uint64_t result;
  uint64_t *v289;
  uint64_t v290;
  int v291;
  int v292;
  _QWORD *v293;
  int v294;
  uint64_t v295;
  uint64_t v296;
  char v297;
  uint64_t v298;
  uint64_t v299;
  _QWORD **v300;
  _QWORD *v301;
  _QWORD *v302;
  char v303;
  uint64_t v304;
  uint64_t v305;
  char v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  char v310;
  unint64_t v311;
  char v312;
  uint64_t (*v313)(uint64_t);
  uint64_t v314;
  _QWORD *v315;
  uint64_t v316;
  char v317;
  char v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  int64_t v323;
  uint64_t v324;
  char v325;
  uint64_t v326;
  char v327;
  uint64_t v328;
  uint64_t (*v329)(uint64_t);
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  _QWORD *v336;
  uint64_t *v337;
  uint64_t v338;
  uint64_t v339;
  int v340;
  uint64_t v341;
  int64_t v342;
  uint64_t v343;
  uint64_t v344;
  char v345;
  char v346;
  char v347;
  _QWORD v348[2];
  int v349;
  uint64_t v350;
  __int128 v351;
  int v352;
  char v353;
  char v354;
  char v355;

  v12 = v8[8];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    goto LABEL_269;
  v9 = a1;
  LOBYTE(v316) = a6;
  LOBYTE(v320) = a5;
  v314 = a3;
  v8[8] = v14;
  v10 = *(_QWORD *)(*v8 + 536);
  v7 = *(_QWORD *)(((uint64_t (*)(void))v10)() + 16);
  swift_bridgeObjectRelease();
  v335 = *(_QWORD *)(*v8 + 552);
  v17 = (void (*)(uint64_t *, _QWORD))((uint64_t (*)(uint64_t *))v335)(&v338);
  v19 = v18;
  v11 = *v18;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v19 = v11;
  v323 = a4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v11 = (uint64_t)sub_24A147E34(0, *(_QWORD *)(v11 + 16), 0, (char *)v11);
  *v19 = v11;
  swift_bridgeObjectRetain();
  vDSP_vclr((float *)(v11 + 32), 1, v7);
  v17(&v338, 0);
  v21 = swift_bridgeObjectRelease();
  v22 = v8[12];
  if (v22 < 0)
    goto LABEL_270;
  LOBYTE(v307) = a7;
  v326 = v10;
  v337 = v8;
  if (v22)
  {
    if ((unint64_t)(v22 - 1) >= *(_QWORD *)(v9 + 16))
      goto LABEL_324;
    v23 = 0;
    v7 = (vDSP_Length)(v8 + 7);
    v24 = *(uint64_t (**)(uint64_t))(*v8 + 344);
    v10 = v9 + 32;
    do
    {
      v25 = *(float *)(v10 + 4 * v23);
      v26 = v24(v21);
      if (v23 >= *(_QWORD *)(v26 + 16))
        goto LABEL_230;
      v27 = *(float *)(v26 + 4 * v23 + 32);
      swift_bridgeObjectRelease();
      swift_beginAccess();
      v28 = *(char **)v7;
      v29 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)v7 = v28;
      if ((v29 & 1) == 0)
      {
        v28 = sub_24A148928((uint64_t)v28);
        *(_QWORD *)v7 = v28;
      }
      if (v23 >= *((_QWORD *)v28 + 2))
      {
LABEL_231:
        __break(1u);
LABEL_232:
        __break(1u);
LABEL_233:
        __break(1u);
LABEL_234:
        __break(1u);
        goto LABEL_235;
      }
      *(float *)&v28[4 * v23 + 32] = (float)(v25 * v27) + *(float *)&v28[4 * v23 + 32];
      v21 = swift_endAccess();
      ++v23;
    }
    while (v22 != v23);
  }
  v10 = (uint64_t)v337;
  v11 = (uint64_t)(v337 + 6);
  swift_beginAccess();
  v7 = v337[6];
  swift_bridgeObjectRetain();
  v30 = swift_isUniquelyReferenced_nonNull_native();
  v337[6] = v7;
  if ((v30 & 1) == 0)
    goto LABEL_271;
  while (1)
  {
    v32 = *(_QWORD *)(v7 + 16);
    v31 = *(_QWORD *)(v7 + 24);
    if (v32 >= v31 >> 1)
    {
      v7 = (vDSP_Length)sub_24A173758((_QWORD *)(v31 > 1), v32 + 1, 1, (_QWORD *)v7);
      *(_QWORD *)v11 = v7;
    }
    v33 = (uint64_t (*)(void))v326;
    *(_QWORD *)(v7 + 16) = v32 + 1;
    *(_QWORD *)(v7 + 8 * v32 + 32) = v9;
    v34 = swift_endAccess();
    v35 = *(_QWORD *)(v10 + 64);
    v302 = *(_QWORD **)(v10 + 24);
    v36 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v302) + 0x168);
    v37 = v36(v34);
    if (v37 >= v35)
    {
      v52 = *(_QWORD *)(v10 + 96);
      if (v52 < 0)
        goto LABEL_326;
      if (v52)
      {
        v7 = v10 + 56;
        swift_beginAccess();
        v53 = 0;
        while (v53 < *(_QWORD *)(*(_QWORD *)v7 + 16))
        {
          v54 = *(float *)(*(_QWORD *)v7 + 4 * v53 + 32);
          v55 = *(_QWORD *)(v10 + 64);
          v56 = (uint64_t (*)(uint64_t *, _QWORD))((uint64_t (*)(uint64_t *))v335)(&v338);
          v11 = (uint64_t)v57;
          v9 = *v57;
          v58 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)v11 = v9;
          if ((v58 & 1) == 0)
          {
            v9 = (uint64_t)sub_24A148928(v9);
            *(_QWORD *)v11 = v9;
          }
          if (v53 >= *(_QWORD *)(v9 + 16))
            goto LABEL_236;
          *(float *)(v9 + 4 * v53 + 32) = v54 / (float)v55;
          v37 = v56(&v338, 0);
          ++v53;
          v10 = (uint64_t)v337;
          if (v52 == v53)
            goto LABEL_41;
        }
LABEL_235:
        __break(1u);
LABEL_236:
        __break(1u);
        goto LABEL_237;
      }
    }
    else
    {
      swift_beginAccess();
      if (!*(_QWORD *)(*(_QWORD *)v11 + 16))
        goto LABEL_325;
      v7 = *(_QWORD *)(*(_QWORD *)v11 + 32);
      swift_bridgeObjectRetain();
      sub_24A1B9118(0, 1);
      swift_endAccess();
      v38 = *(_QWORD *)(v10 + 96);
      if (v38 < 0)
        goto LABEL_327;
      if (v38)
      {
        if ((unint64_t)(v38 - 1) >= *(_QWORD *)(v7 + 16))
          goto LABEL_332;
        v9 = v10 + 56;
        v10 = -v38;
        v39 = 8;
        while (1)
        {
          v40 = *(float *)(v7 + 4 * v39);
          swift_beginAccess();
          v41 = *(char **)v9;
          v42 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)v9 = v41;
          if ((v42 & 1) == 0)
          {
            v41 = sub_24A148928((uint64_t)v41);
            *(_QWORD *)v9 = v41;
          }
          v43 = v39 - 8;
          if ((unint64_t)(v39 - 8) >= *((_QWORD *)v41 + 2))
            break;
          *(float *)&v41[4 * v39] = *(float *)&v41[4 * v39] - v40;
          v44 = *(char **)v9;
          v45 = swift_endAccess();
          if (v43 >= *((_QWORD *)v44 + 2))
            goto LABEL_238;
          v46 = *(float *)&v44[4 * v39];
          v11 = v36(v45);
          v47 = (void (*)(uint64_t *, _QWORD))((uint64_t (*)(uint64_t *))v335)(&v338);
          v49 = v48;
          v50 = *v48;
          v51 = swift_isUniquelyReferenced_nonNull_native();
          *v49 = v50;
          if ((v51 & 1) == 0)
          {
            v50 = sub_24A148928((uint64_t)v50);
            *v49 = v50;
          }
          if (v43 >= *((_QWORD *)v50 + 2))
            goto LABEL_239;
          *(float *)&v50[4 * v39] = v46 / (float)v11;
          v47(&v338, 0);
          ++v39;
          if (v10 + v39 == 8)
          {
            v37 = swift_bridgeObjectRelease();
            v10 = (uint64_t)v337;
            v33 = (uint64_t (*)(void))v326;
            goto LABEL_41;
          }
        }
LABEL_237:
        __break(1u);
LABEL_238:
        __break(1u);
LABEL_239:
        __break(1u);
        goto LABEL_240;
      }
      v37 = swift_bridgeObjectRelease();
    }
LABEL_41:
    v59 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 560);
    v7 = *(_QWORD *)(v59(v37) + 16);
    swift_bridgeObjectRelease();
    v60 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v10 + 576);
    v61 = (void (*)(uint64_t *, _QWORD))v60(&v338);
    v11 = (uint64_t)v62;
    v9 = *v62;
    v63 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v11 = v9;
    if ((v63 & 1) == 0)
      v9 = (uint64_t)sub_24A147E34(0, *(_QWORD *)(v9 + 16), 0, (char *)v9);
    *(_QWORD *)v11 = v9;
    swift_bridgeObjectRetain();
    vDSP_vclr((float *)(v9 + 32), 1, v7);
    v61(&v338, 0);
    v64 = swift_bridgeObjectRelease();
    v329 = v59;
    if (((*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v302) + 0x240))(v64) & 1) != 0)
      break;
    v69 = *(_QWORD *)(v10 + 96);
    if (v69 < 0)
      goto LABEL_328;
    if (!v69)
      goto LABEL_80;
    v70 = 0;
    while (1)
    {
      v71 = v33();
      if (v70 >= *(_QWORD *)(v71 + 16))
        break;
      v72 = *(_DWORD *)(v71 + 4 * v70 + 32);
      swift_bridgeObjectRelease();
      v7 = v60(&v338);
      v9 = (uint64_t)v73;
      v74 = *v73;
      v75 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)v9 = v74;
      if ((v75 & 1) == 0)
      {
        v74 = sub_24A148928((uint64_t)v74);
        *(_QWORD *)v9 = v74;
      }
      if (v70 >= *((_QWORD *)v74 + 2))
        goto LABEL_241;
      *(_DWORD *)&v74[4 * v70 + 32] = v72;
      ((void (*)(uint64_t *, _QWORD))v7)(&v338, 0);
      v9 = ++v70;
      if (v69 == v70)
        goto LABEL_80;
    }
LABEL_240:
    __break(1u);
LABEL_241:
    __break(1u);
LABEL_242:
    __break(1u);
LABEL_243:
    __break(1u);
LABEL_244:
    __break(1u);
LABEL_245:
    __break(1u);
LABEL_246:
    __break(1u);
LABEL_247:
    __break(1u);
LABEL_248:
    __break(1u);
LABEL_249:
    __break(1u);
LABEL_250:
    __break(1u);
LABEL_251:
    __break(1u);
LABEL_252:
    __break(1u);
LABEL_253:
    __break(1u);
LABEL_254:
    __break(1u);
LABEL_255:
    __break(1u);
LABEL_256:
    __break(1u);
LABEL_257:
    __break(1u);
LABEL_258:
    __break(1u);
LABEL_259:
    __break(1u);
LABEL_260:
    __break(1u);
LABEL_261:
    __break(1u);
LABEL_262:
    __break(1u);
LABEL_263:
    __break(1u);
LABEL_264:
    __break(1u);
LABEL_265:
    __break(1u);
LABEL_266:
    __break(1u);
LABEL_267:
    __break(1u);
LABEL_268:
    __break(1u);
LABEL_269:
    __break(1u);
LABEL_270:
    __break(1u);
LABEL_271:
    v7 = (vDSP_Length)sub_24A173758(0, *(_QWORD *)(v7 + 16) + 1, 1, (_QWORD *)v7);
    *(_QWORD *)v11 = v7;
  }
  v7 = v33();
  v9 = v33();
  v65 = sub_24A1C1D00(v9);
  swift_bridgeObjectRelease();
  if ((v65 & 0x100000000) != 0)
    goto LABEL_334;
  v66 = *(_QWORD *)(v7 + 16);
  if (v66)
  {
    v67 = 0;
    if (*(float *)(v7 + 32) == *(float *)&v65)
    {
      v68 = 1;
    }
    else
    {
      v76 = v66 - 1;
      while (1)
      {
        v68 = v76 != v67;
        if (v76 == v67)
          break;
        v77 = *(float *)(v7 + 36 + 4 * v67++);
        if (v77 == *(float *)&v65)
          goto LABEL_63;
      }
      v67 = 0;
    }
  }
  else
  {
    v67 = 0;
    v68 = 0;
  }
LABEL_63:
  v78 = swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(v10 + 96);
  if (v11 < 0)
    goto LABEL_329;
  if (v11)
  {
    for (i = 0; v11 != i; ++i)
    {
      if (v67 == i && v68)
      {
        v81 = ((uint64_t (*)(uint64_t))v33)(v78);
        if (v67 >= *(_QWORD *)(v81 + 16))
          goto LABEL_249;
        v82 = *(_DWORD *)(v81 + 4 * v67 + 32);
        swift_bridgeObjectRelease();
        v7 = v60(&v338);
        v9 = (uint64_t)v83;
        v84 = *v83;
        v85 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)v9 = v84;
        if ((v85 & 1) == 0)
        {
          v84 = sub_24A148928((uint64_t)v84);
          *(_QWORD *)v9 = v84;
        }
        if (v67 >= *((_QWORD *)v84 + 2))
          goto LABEL_251;
        *(_DWORD *)&v84[4 * v67 + 32] = v82;
      }
      else
      {
        v7 = v60(&v338);
        v9 = (uint64_t)v86;
        v87 = *v86;
        v88 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)v9 = v87;
        if ((v88 & 1) == 0)
        {
          v87 = sub_24A148928((uint64_t)v87);
          *(_QWORD *)v9 = v87;
        }
        if (i >= *((_QWORD *)v87 + 2))
          goto LABEL_250;
        *(_DWORD *)&v87[4 * i + 32] = 0;
      }
      v78 = ((uint64_t (*)(uint64_t *, _QWORD))v7)(&v338, 0);
    }
  }
LABEL_80:
  if (v320 == 2)
  {
    v89 = v302;
    v90 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v310 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v302) + 0xD8))();
  }
  else
  {
    v310 = v320 & 1;
    v89 = v302;
    v90 = (_QWORD *)MEMORY[0x24BEE4EA0];
  }
  v91 = (_QWORD *)v323;
  v92 = v307;
  if (v316 == 2)
    LOBYTE(v307) = (*(uint64_t (**)(void))((*v90 & *v89) + 0xF0))();
  else
    LOBYTE(v307) = v316 & 1;
  v93 = v329;
  if (v92 == 2)
    v303 = (*(uint64_t (**)(void))((*v90 & *v89) + 0x108))();
  else
    v303 = v92 & 1;
  v7 = *(_QWORD *)(v10 + 96);
  if ((v7 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_273:
    __break(1u);
    goto LABEL_274;
  }
  if (v7)
  {
    v9 = v10 + 104;
    swift_beginAccess();
    v320 = v10 + 88;
    swift_beginAccess();
    v298 = v10 + 40;
    v94 = swift_beginAccess();
    v95 = (unsigned int *)(v314 + 32);
    v11 = v323 + 32;
    v335 = -(uint64_t)v7;
    v10 = 8;
    v96 = 48;
    v316 = v9;
    while (1)
    {
      v97 = v10 - 8;
      v98 = v93(v94);
      if ((unint64_t)(v10 - 8) >= *(_QWORD *)(v98 + 16))
        goto LABEL_232;
      v99 = *(float *)(v98 + 4 * v10);
      v94 = swift_bridgeObjectRelease();
      if (v97 >= *(_QWORD *)(*(_QWORD *)v9 + 16))
        goto LABEL_233;
      if (*(float *)(*(_QWORD *)v9 + 4 * v10) <= v99)
      {
        v104 = v93(v94);
        if (v97 >= *(_QWORD *)(v104 + 16))
          goto LABEL_242;
        v105 = *(float *)(v104 + 4 * v10);
        swift_bridgeObjectRelease();
        if (v97 >= *(_QWORD *)(*(_QWORD *)v320 + 16))
          goto LABEL_244;
        if (*(float *)(*(_QWORD *)v320 + v96) <= v105)
        {
          if (v314)
          {
            v108 = *(_QWORD *)(v314 + 16);
            v109 = (unsigned int *)(v314 + 32);
            if (v108 != 1)
            {
              v109 = v95;
              if (v97 >= v108)
                goto LABEL_266;
            }
            v110 = *v109;
            if (v91)
            {
LABEL_118:
              v111 = v91[2];
              v112 = (unsigned int *)(v323 + 32);
              if (v111 != 1)
              {
                v112 = (unsigned int *)v11;
                if (v97 >= v111)
                  goto LABEL_267;
              }
              v113 = *v112;
              goto LABEL_123;
            }
          }
          else
          {
            v110 = 0;
            if (v91)
              goto LABEL_118;
          }
          v113 = 0;
LABEL_123:
          LOBYTE(v338) = v91 == 0;
          v7 = sub_24A1C2360(v110 | ((unint64_t)(v314 == 0) << 32), v113 | ((unint64_t)(v91 == 0) << 32));
          v9 = v114;
          swift_beginAccess();
          v115 = (_QWORD *)v337[11];
          v116 = swift_isUniquelyReferenced_nonNull_native();
          v337[11] = (uint64_t)v115;
          if ((v116 & 1) == 0)
          {
            v115 = sub_24A1C2A84(v115);
            *(_QWORD *)v320 = v115;
          }
          if (v97 >= v115[2])
            goto LABEL_253;
          v115[(unint64_t)v96 / 8 + 2] = v7;
          if (v97 >= *(_QWORD *)(*(_QWORD *)v320 + 16))
            goto LABEL_255;
          *(_QWORD *)(*(_QWORD *)v320 + v96 + 24) = v9;
          swift_endAccess();
          if ((v310 & 1) != 0)
            v117 = (*(uint64_t (**)(vDSP_Length))(*v337 + 616))(v7);
          else
            v117 = 1;
          swift_beginAccess();
          v118 = *(_QWORD **)v320;
          v119 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)v320 = v118;
          if ((v119 & 1) == 0)
          {
            v118 = sub_24A1C2A84(v118);
            *(_QWORD *)v320 = v118;
          }
          if (v97 >= v118[2])
            goto LABEL_256;
          BYTE4(v118[(unint64_t)v96 / 8 + 4]) = v117 & 1;
          swift_endAccess();
          if ((v307 & 1) != 0)
            v120 = (*(uint64_t (**)(uint64_t))(*v337 + 624))(v9);
          else
            v120 = 1;
          swift_beginAccess();
          v121 = *(_QWORD **)v320;
          v122 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)v320 = v121;
          if ((v122 & 1) == 0)
          {
            v121 = sub_24A1C2A84(v121);
            *(_QWORD *)v320 = v121;
          }
          v93 = v329;
          if (v97 >= v121[2])
            goto LABEL_257;
          BYTE6(v121[(unint64_t)v96 / 8 + 4]) = v120;
          swift_endAccess();
          if ((v303 & 1) != 0)
            v7 = (*(uint64_t (**)(vDSP_Length, uint64_t))(*v337 + 632))(v7, v9);
          else
            v7 = 1;
          v91 = (_QWORD *)v323;
          swift_beginAccess();
          v123 = *(_QWORD **)v320;
          v124 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)v320 = v123;
          if ((v124 & 1) == 0)
          {
            v123 = sub_24A1C2A84(v123);
            *(_QWORD *)v320 = v123;
          }
          v9 = v316;
          if (v97 >= v123[2])
            goto LABEL_258;
          BYTE5(v123[(unint64_t)v96 / 8 + 4]) = v7 & 1;
          v125 = swift_endAccess();
          v126 = *(_QWORD *)v298;
          if (*(_QWORD *)(*(_QWORD *)v298 + 16))
          {
            v125 = sub_24A1489D4(v10 - 8);
            if ((v127 & 1) != 0)
            {
              v128 = (uint64_t *)(*(_QWORD *)(v126 + 56) + 16 * v125);
              v9 = *v128;
              v7 = v128[1];
              swift_beginAccess();
              v129 = *(_QWORD **)v320;
              swift_bridgeObjectRetain();
              v130 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)v320 = v129;
              if ((v130 & 1) == 0)
              {
                v129 = sub_24A1C2A84(v129);
                *(_QWORD *)v320 = v129;
              }
              v93 = v329;
              if (v97 >= v129[2])
                goto LABEL_268;
              v131 = &v129[(unint64_t)v96 / 8];
              *(v131 - 2) = v9;
              *(v131 - 1) = v7;
              swift_endAccess();
              v125 = swift_bridgeObjectRelease();
              v9 = v316;
            }
          }
          v132 = ((uint64_t (*)(unint64_t))v326)(v125);
          if (v97 >= *(_QWORD *)(v132 + 16))
            goto LABEL_259;
          v133 = *(_DWORD *)(v132 + 4 * v10);
          swift_bridgeObjectRelease();
          swift_beginAccess();
          v7 = *(_QWORD *)v320;
          v134 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)v320 = v7;
          if ((v134 & 1) == 0)
          {
            v7 = (vDSP_Length)sub_24A1C2A84((_QWORD *)v7);
            *(_QWORD *)v320 = v7;
          }
          if (v97 >= *(_QWORD *)(v7 + 16))
            goto LABEL_260;
          *(_DWORD *)(v7 + v96) = v133;
          if (v97 >= *(_QWORD *)(*(_QWORD *)v9 + 16))
            goto LABEL_261;
          v7 = *(_QWORD *)v320;
          v135 = *(_DWORD *)(*(_QWORD *)v9 + 4 * v10);
          v136 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)v320 = v7;
          if ((v136 & 1) == 0)
          {
            v7 = (vDSP_Length)sub_24A1C2A84((_QWORD *)v7);
            *(_QWORD *)v320 = v7;
          }
          if (v97 >= *(_QWORD *)(v7 + 16))
            goto LABEL_262;
          *(_DWORD *)(v7 + v96 + 32) = v135;
          if (v97 >= *(_QWORD *)(*(_QWORD *)v320 + 16))
            goto LABEL_263;
          v101 = *(_QWORD *)v320 + v96;
          v103 = 1;
          goto LABEL_92;
        }
        swift_beginAccess();
        v7 = *(_QWORD *)v320;
        v106 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)v320 = v7;
        if ((v106 & 1) == 0)
        {
          v7 = (vDSP_Length)sub_24A1C2A84((_QWORD *)v7);
          *(_QWORD *)v320 = v7;
        }
        if (v97 >= *(_QWORD *)(v7 + 16))
          goto LABEL_252;
        v101 = v7 + v96;
        v107 = *(_QWORD *)(v7 + v96 + 8);
        v13 = __OFADD__(v107, 1);
        v103 = v107 + 1;
        if (v13)
          goto LABEL_254;
      }
      else
      {
        if (v97 >= *(_QWORD *)(*(_QWORD *)v320 + 16))
          goto LABEL_243;
        if (*(uint64_t *)(*(_QWORD *)v320 + v96 + 8) < 1)
          goto LABEL_93;
        swift_beginAccess();
        v7 = *(_QWORD *)v320;
        v100 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)v320 = v7;
        if ((v100 & 1) == 0)
        {
          v7 = (vDSP_Length)sub_24A1C2A84((_QWORD *)v7);
          *(_QWORD *)v320 = v7;
        }
        if (v97 >= *(_QWORD *)(v7 + 16))
          goto LABEL_247;
        v101 = v7 + v96;
        v102 = *(_QWORD *)(v7 + v96 + 8);
        v13 = __OFADD__(v102, 1);
        v103 = v102 + 1;
        if (v13)
          goto LABEL_248;
      }
LABEL_92:
      *(_QWORD *)(v101 + 8) = v103;
      v94 = swift_endAccess();
LABEL_93:
      ++v10;
      v96 += 56;
      v11 += 4;
      ++v95;
      if (v335 + v10 == 8)
      {
        v10 = (uint64_t)v337;
        v137 = v337[12];
        if (v137 < 0)
          goto LABEL_273;
        if (v137)
        {
          v316 = (uint64_t)(v337 + 9);
          v289 = v337 + 16;
          v290 = v337[12];
          swift_beginAccess();
          v138 = v290;
          v139 = 0;
          v91 = (_QWORD *)MEMORY[0x24BEE4AF8];
          v140 = v302;
          v11 = v320;
          while (v139 != v138)
          {
            v9 = *v289;
            if ((unint64_t)*v289 >> 62)
            {
              if (v9 < 0)
                v7 = *v289;
              else
                v7 = v9 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain_n();
              v141 = sub_24A216410();
              swift_bridgeObjectRelease();
              if (v141)
              {
LABEL_168:
                v330 = *(_QWORD *)(v10 + 32);
                v335 = v9 & 0xC000000000000001;
                swift_beginAccess();
                swift_beginAccess();
                v326 = 56 * v139;
                v10 = 4;
                v307 = v9;
                v311 = v139;
                v304 = v141;
                do
                {
                  v7 = v10 - 4;
                  if (v335)
                  {
                    v142 = MEMORY[0x24BD09BE8](v10 - 4, v9);
                    v143 = v10 - 3;
                    if (__OFADD__(v7, 1))
                      goto LABEL_226;
                  }
                  else
                  {
                    v142 = *(_QWORD *)(v9 + 8 * v10);
                    swift_retain();
                    v143 = v10 - 3;
                    if (__OFADD__(v7, 1))
                    {
LABEL_226:
                      __break(1u);
LABEL_227:
                      __break(1u);
LABEL_228:
                      __break(1u);
LABEL_229:
                      __break(1u);
LABEL_230:
                      __break(1u);
                      goto LABEL_231;
                    }
                  }
                  v144 = *(_QWORD *)v11;
                  if (v139 >= *(_QWORD *)(*(_QWORD *)v11 + 16))
                    goto LABEL_227;
                  v145 = v144 + v326;
                  v146 = *(_QWORD *)(v144 + v326 + 56);
                  if (v146 < v330)
                  {
                    swift_release();
                  }
                  else
                  {
                    v148 = *(_QWORD *)(v145 + 32);
                    v7 = *(_QWORD *)(v145 + 40);
                    v147 = v145 + 32;
                    v149 = *(_DWORD *)(v147 + 16);
                    v150 = *(_DWORD *)(v147 + 48);
                    v151 = *(_BYTE *)(v147 + 52);
                    v152 = *(_BYTE *)(v147 + 53);
                    v153 = *(_BYTE *)(v147 + 54);
                    v348[0] = v148;
                    v348[1] = v7;
                    v349 = v149;
                    v350 = v146;
                    v351 = *(_OWORD *)(v147 + 32);
                    v352 = v150;
                    v353 = v151;
                    v354 = v152;
                    v355 = v153;
                    v9 = *(_QWORD *)(*(_QWORD *)v142 + 248);
                    swift_bridgeObjectRetain();
                    ((void (*)(uint64_t *__return_ptr, _QWORD *))v9)(&v338, v348);
                    swift_bridgeObjectRelease();
                    v154 = v339;
                    if (v339)
                    {
                      v155 = *(_QWORD *)v316;
                      if (!*(_QWORD *)(*(_QWORD *)v316 + 16))
                        goto LABEL_228;
                      v9 = v338;
                      v323 = v342;
                      v314 = v343;
                      v291 = WORD2(v344);
                      v292 = BYTE6(v344);
                      v296 = v344;
                      v299 = v341;
                      v294 = v340;
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      v156 = sub_24A148970(v9, v154);
                      if ((v157 & 1) == 0)
                        goto LABEL_333;
                      v7 = *(_QWORD *)(*(_QWORD *)(v155 + 56) + 8 * v156);
                      swift_bridgeObjectRelease();
                      v158 = swift_bridgeObjectRelease();
                      v159 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v140) + 0x150))(v158);
                      if (__OFSUB__(v7, v159))
                        goto LABEL_229;
                      if ((uint64_t)(v7 - v159) >= v323)
                      {
                        swift_bridgeObjectRelease();
                      }
                      else
                      {
                        v11 = (uint64_t)v91;
                        swift_beginAccess();
                        swift_bridgeObjectRetain();
                        v160 = swift_isUniquelyReferenced_nonNull_native();
                        v348[0] = *(_QWORD *)v316;
                        v161 = v348[0];
                        *(_QWORD *)v316 = 0x8000000000000000;
                        v7 = sub_24A148970(v9, v154);
                        v163 = *(_QWORD *)(v161 + 16);
                        v164 = (v162 & 1) == 0;
                        v165 = v163 + v164;
                        if (__OFADD__(v163, v164))
                          goto LABEL_234;
                        v166 = v162;
                        if (*(_QWORD *)(v161 + 24) >= v165)
                        {
                          if ((v160 & 1) == 0)
                            sub_24A1C2A98();
                        }
                        else
                        {
                          sub_24A1C2C44(v165, v160);
                          v167 = sub_24A148970(v9, v154);
                          if ((v166 & 1) != (v168 & 1))
                            goto LABEL_335;
                          v7 = v167;
                        }
                        v91 = (_QWORD *)v11;
                        v169 = (_QWORD *)v348[0];
                        v11 = v320;
                        if ((v166 & 1) != 0)
                        {
                          *(_QWORD *)(*(_QWORD *)(v348[0] + 56) + 8 * v7) = v314;
                        }
                        else
                        {
                          *(_QWORD *)(v348[0] + 8 * (v7 >> 6) + 64) |= 1 << v7;
                          v170 = (uint64_t *)(v169[6] + 16 * v7);
                          *v170 = v9;
                          v170[1] = v154;
                          *(_QWORD *)(v169[7] + 8 * v7) = v314;
                          v171 = v169[2];
                          v13 = __OFADD__(v171, 1);
                          v172 = v171 + 1;
                          if (v13)
                            goto LABEL_245;
                          v169[2] = v172;
                          swift_bridgeObjectRetain();
                        }
                        *(_QWORD *)v316 = v169;
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_endAccess();
                        v140 = v302;
                        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                          v91 = sub_24A1C25C4(0, v91[2] + 1, 1, v91);
                        v174 = v91[2];
                        v173 = v91[3];
                        v7 = v174 + 1;
                        if (v174 >= v173 >> 1)
                          v91 = sub_24A1C25C4((_QWORD *)(v173 > 1), v174 + 1, 1, v91);
                        v175 = v291 | (v292 << 16);
                        v91[2] = v7;
                        v176 = &v91[7 * v174];
                        v176[4] = v9;
                        v176[5] = v154;
                        v177 = v296 & 0xFF000000FFFFFFFFLL | ((*(_QWORD *)&v175 & 0xFFFFFFLL) << 32);
                        *((_DWORD *)v176 + 12) = v294;
                        v176[7] = v299;
                        v176[8] = v323;
                        v176[9] = v314;
                        *((_DWORD *)v176 + 20) = v296;
                        *((_BYTE *)v176 + 84) = BYTE4(v177) & 1;
                        *((_BYTE *)v176 + 85) = BYTE5(v177) & 1;
                        *((_BYTE *)v176 + 86) = BYTE2(v175);
                      }
                    }
                    swift_release();
                    v9 = v307;
                    v139 = v311;
                    v141 = v304;
                  }
                  ++v10;
                }
                while (v143 != v141);
              }
            }
            else
            {
              v141 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain();
              if (v141)
                goto LABEL_168;
            }
            ++v139;
            swift_bridgeObjectRelease();
            v138 = v290;
            v10 = (uint64_t)v337;
            if (v139 == v290)
            {
              v181 = v337[12];
              if (v181 < 0)
                goto LABEL_331;
              if (!v181)
                goto LABEL_206;
              v9 = v337[4];
              swift_beginAccess();
              v182 = 0;
              v183 = 0;
              v10 = 2;
              while (v183 < *(_QWORD *)(*(_QWORD *)v11 + 16))
              {
                if (*(_QWORD *)(*(_QWORD *)v11 + v182 + 56) >= v9)
                {
                  swift_beginAccess();
                  v7 = *(_QWORD *)v11;
                  v185 = swift_isUniquelyReferenced_nonNull_native();
                  *(_QWORD *)v11 = v7;
                  if ((v185 & 1) == 0)
                  {
                    v7 = (vDSP_Length)sub_24A1C2A84((_QWORD *)v7);
                    *(_QWORD *)v11 = v7;
                  }
                  if (v183 >= *(_QWORD *)(v7 + 16))
                    goto LABEL_265;
                  v184 = v7 + v182;
                  *(_DWORD *)(v184 + 48) = 0;
                  *(_QWORD *)(v184 + 56) = 0;
                  *(_QWORD *)(v184 + 64) = -1;
                  *(_QWORD *)(v184 + 72) = -1;
                  *(_WORD *)(v184 + 84) = 0;
                  *(_BYTE *)(v184 + 86) = 2;
                  swift_endAccess();
                }
                ++v183;
                v182 += 56;
                if (v181 == v183)
                {
                  v10 = (uint64_t)v337;
                  goto LABEL_206;
                }
              }
              goto LABEL_264;
            }
          }
          goto LABEL_246;
        }
        break;
      }
    }
  }
  v91 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_206:
  swift_beginAccess();
  v7 = *(_QWORD *)(v10 + 128);
  if (v7 >> 62)
  {
LABEL_274:
    swift_bridgeObjectRetain();
    v178 = sub_24A216410();
    if (v178)
      goto LABEL_208;
    goto LABEL_275;
  }
  v178 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v178)
  {
LABEL_208:
    if (v178 < 1)
      goto LABEL_330;
    for (j = 0; j != v178; ++j)
    {
      if ((v7 & 0xC000000000000001) != 0)
      {
        v180 = MEMORY[0x24BD09BE8](j, v7);
      }
      else
      {
        v180 = *(_QWORD *)(v7 + 8 * j + 32);
        swift_retain();
      }
      (*(void (**)(void))(*(_QWORD *)v180 + 240))();
      swift_release();
    }
  }
LABEL_275:
  swift_bridgeObjectRelease();
  v186 = v91[2];
  v315 = v91;
  if (!v186)
  {
    v336 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_295:
    v238 = (_QWORD *)(v10 + 120);
    swift_beginAccess();
    v239 = *(_QWORD *)(v10 + 120);
    v240 = *(_QWORD *)(v239 + 16);
    if (v240)
    {
      v293 = (_QWORD *)(v10 + 120);
      v313 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 624);
      swift_bridgeObjectRetain();
      v241 = 0;
      v242 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v309 = v239;
      do
      {
        v322 = *(_QWORD *)(v239 + v241 + 32);
        v244 = *(float *)(v239 + v241 + 48);
        v246 = *(_QWORD *)(v239 + v241 + 56);
        v245 = *(_QWORD *)(v239 + v241 + 64);
        v247 = *(_QWORD *)(v239 + v241 + 72);
        v248 = *(_DWORD *)(v239 + v241 + 80);
        v249 = *(_BYTE *)(v239 + v241 + 84);
        v250 = *(_BYTE *)(v239 + v241 + 85);
        v318 = *(_BYTE *)(v239 + v241 + 86);
        v333 = *(_QWORD *)(v239 + v241 + 40);
        swift_bridgeObjectRetain();
        v251 = v313(v247);
        v325 = v249;
        v328 = v245;
        if (v251 == 2)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v242 = sub_24A1C25C4(0, v242[2] + 1, 1, v242);
          v253 = v242[2];
          v252 = v242[3];
          if (v253 >= v252 >> 1)
            v242 = sub_24A1C25C4((_QWORD *)(v252 > 1), v253 + 1, 1, v242);
          v242[2] = v253 + 1;
          v243 = (float *)&v242[7 * v253];
          *((_QWORD *)v243 + 4) = v322;
          *((_QWORD *)v243 + 5) = v333;
          v243[12] = v244;
          *((_QWORD *)v243 + 7) = v246;
          *((_QWORD *)v243 + 8) = v245;
          *((_QWORD *)v243 + 9) = v247;
          *((_DWORD *)v243 + 20) = v248;
          *((_BYTE *)v243 + 84) = v249;
          *((_BYTE *)v243 + 85) = v250;
          *((_BYTE *)v243 + 86) = v318;
        }
        else
        {
          v306 = v251;
          v319 = v240;
          v254 = (_QWORD *)MEMORY[0x24BEE4EA0];
          v255 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v302) + 0x138);
          v256 = v255();
          if ((unsigned __int128)(v245 * (__int128)v256) >> 64 != (v245 * v256) >> 63)
            goto LABEL_320;
          v295 = v245 * v256;
          v297 = v250;
          v301 = v242;
          v257 = *(uint64_t (**)(void))((*v254 & *(_QWORD *)v337[2]) + 0x80);
          v258 = (_QWORD *)v257();
          v259 = (*(double (**)(void))((*v254 & *v258) + 0x190))();

          v260 = (_QWORD *)v257();
          v261 = (*(double (**)(void))((*v254 & *v260) + 0x198))();

          v262 = (_QWORD *)v257();
          v263 = (*(uint64_t (**)(void))((*v254 & *v262) + 0xA0))();

          v264 = v255();
          v265 = v247 * v264;
          if ((unsigned __int128)(v247 * (__int128)v264) >> 64 != (v247 * v264) >> 63)
            goto LABEL_321;
          v266 = (_QWORD *)v257();
          v267 = (*(double (**)(void))((*v254 & *v266) + 0x190))();

          v268 = (_QWORD *)v257();
          v269 = (*(double (**)(void))((*v254 & *v268) + 0x198))();

          v270 = (_QWORD *)v257();
          v271 = (*(uint64_t (**)(void))((*v254 & *v270) + 0xA0))();

          v272 = swift_bridgeObjectRetain();
          v273 = ((uint64_t (*)(uint64_t))v255)(v272);
          v274 = v328 * v273;
          if ((unsigned __int128)(v328 * (__int128)v273) >> 64 != (v328 * v273) >> 63)
            goto LABEL_322;
          v275 = v255();
          if ((unsigned __int128)(v247 * (__int128)v275) >> 64 != (v247 * v275) >> 63)
            goto LABEL_323;
          sub_24A1DF928(v322, v333, v274, v247 * v275, v325, v306 & 1, v297, (uint64_t)&v338, v244, (v259 * (double)v295 + v261) / (double)v263, (v267 * (double)v265 + v269) / (double)v271);
          swift_bridgeObjectRelease();
          v276 = v339;
          v334 = v338;
          v277 = v340;
          v278 = v341;
          v279 = v342;
          v280 = v343;
          v281 = v344;
          v282 = v345;
          v283 = v346;
          v284 = v347;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v336 = sub_24A17B434(0, v336[2] + 1, 1, v336);
          v240 = v319;
          v286 = v336[2];
          v285 = v336[3];
          if (v286 >= v285 >> 1)
            v336 = sub_24A17B434((_QWORD *)(v285 > 1), v286 + 1, 1, v336);
          v336[2] = v286 + 1;
          v287 = &v336[8 * v286];
          v287[4] = v334;
          v287[5] = v276;
          *((_DWORD *)v287 + 12) = v277;
          v287[7] = v278;
          v287[8] = v279;
          v287[9] = v280;
          v287[10] = v281;
          *((_BYTE *)v287 + 88) = v282;
          *((_BYTE *)v287 + 89) = v283;
          *((_BYTE *)v287 + 90) = v284;
          v242 = v301;
        }
        v239 = v309;
        v241 += 56;
        --v240;
      }
      while (v240);
      swift_bridgeObjectRelease();
      v238 = v293;
    }
    else
    {
      v242 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    swift_bridgeObjectRelease();
    *v238 = v242;
    swift_bridgeObjectRelease();
    type metadata accessor for VAKeywordResult();
    return VAKeywordResult.__allocating_init(detections:)((uint64_t)v336);
  }
  v300 = (_QWORD **)(v10 + 120);
  swift_bridgeObjectRetain();
  v187 = 0;
  v336 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v188 = v302;
  v189 = (_QWORD *)MEMORY[0x24BEE4EA0];
  while (1)
  {
    v191 = v10;
    v192 = &v315[v187];
    v193 = v315[v187 + 4];
    v194 = v315[v187 + 5];
    v195 = *(float *)&v315[v187 + 6];
    v196 = v315[v187 + 8];
    v331 = v315[v187 + 9];
    v197 = BYTE5(v315[v187 + 10]);
    v327 = BYTE4(v315[v187 + 10]);
    if (BYTE6(v315[v187 + 10]) == 2)
    {
      v324 = v192[7];
      v198 = *((_DWORD *)v192 + 20);
      swift_beginAccess();
      v199 = *v300;
      swift_bridgeObjectRetain();
      v200 = swift_isUniquelyReferenced_nonNull_native();
      *v300 = v199;
      v201 = v196;
      if ((v200 & 1) == 0)
      {
        v199 = sub_24A1C25C4(0, v199[2] + 1, 1, v199);
        *v300 = v199;
      }
      v203 = v199[2];
      v202 = v199[3];
      if (v203 >= v202 >> 1)
      {
        v199 = sub_24A1C25C4((_QWORD *)(v202 > 1), v203 + 1, 1, v199);
        *v300 = v199;
      }
      v199[2] = v203 + 1;
      v190 = (float *)&v199[7 * v203];
      *((_QWORD *)v190 + 4) = v193;
      *((_QWORD *)v190 + 5) = v194;
      v190[12] = v195;
      *((_QWORD *)v190 + 7) = v324;
      *((_QWORD *)v190 + 8) = v201;
      *((_QWORD *)v190 + 9) = v331;
      *((_DWORD *)v190 + 20) = v198;
      *((_BYTE *)v190 + 84) = v327;
      *((_BYTE *)v190 + 85) = v197;
      *((_BYTE *)v190 + 86) = 2;
      swift_endAccess();
      v10 = v191;
      goto LABEL_278;
    }
    v312 = BYTE6(v315[v187 + 10]);
    v317 = BYTE5(v315[v187 + 10]);
    v204 = *(uint64_t (**)(void))((*v189 & *v188) + 0x138);
    v205 = swift_bridgeObjectRetain();
    v206 = ((uint64_t (*)(uint64_t))v204)(v205);
    if ((unsigned __int128)(v196 * (__int128)v206) >> 64 != (v196 * v206) >> 63)
      break;
    v305 = v196 * v206;
    v308 = v193;
    v321 = v196;
    v207 = *(uint64_t (**)(void))((*v189 & **(_QWORD **)(v191 + 16)) + 0x80);
    v208 = (_QWORD *)v207();
    v209 = (*(double (**)(void))((*v189 & *v208) + 0x190))();

    v210 = (_QWORD *)v207();
    v211 = (*(double (**)(void))((*v189 & *v210) + 0x198))();

    v212 = (_QWORD *)v207();
    v213 = (*(uint64_t (**)(void))((*v189 & *v212) + 0xA0))();

    v214 = v204();
    v215 = v331 * v214;
    if ((unsigned __int128)(v331 * (__int128)v214) >> 64 != (v331 * v214) >> 63)
      goto LABEL_317;
    v216 = (_QWORD *)v207();
    v217 = (*(double (**)(void))((*v189 & *v216) + 0x190))();

    v218 = (_QWORD *)v207();
    v219 = (*(double (**)(void))((*v189 & *v218) + 0x198))();

    v220 = (_QWORD *)v207();
    v221 = (*(uint64_t (**)(void))((*v189 & *v220) + 0xA0))();

    v222 = swift_bridgeObjectRetain();
    v223 = ((uint64_t (*)(uint64_t))v204)(v222);
    v224 = v321 * v223;
    if ((unsigned __int128)(v321 * (__int128)v223) >> 64 != (v321 * v223) >> 63)
      goto LABEL_318;
    v225 = v204();
    if ((unsigned __int128)(v331 * (__int128)v225) >> 64 != (v331 * v225) >> 63)
      goto LABEL_319;
    sub_24A1DF928(v308, v194, v224, v331 * v225, v327, v312 & 1, v317, (uint64_t)&v338, v195, (v209 * (double)v305 + v211) / (double)v213, (v217 * (double)v215 + v219) / (double)v221);
    swift_bridgeObjectRelease();
    v226 = v339;
    v332 = v338;
    v227 = v340;
    v228 = v341;
    v229 = v342;
    v230 = v343;
    v231 = v344;
    v232 = v345;
    v233 = v346;
    v234 = v347;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v336 = sub_24A17B434(0, v336[2] + 1, 1, v336);
    v236 = v336[2];
    v235 = v336[3];
    if (v236 >= v235 >> 1)
      v336 = sub_24A17B434((_QWORD *)(v235 > 1), v236 + 1, 1, v336);
    v336[2] = v236 + 1;
    v237 = &v336[8 * v236];
    v237[4] = v332;
    v237[5] = v226;
    *((_DWORD *)v237 + 12) = v227;
    v237[7] = v228;
    v237[8] = v229;
    v237[9] = v230;
    v237[10] = v231;
    *((_BYTE *)v237 + 88) = v232;
    *((_BYTE *)v237 + 89) = v233;
    *((_BYTE *)v237 + 90) = v234;
    v10 = (uint64_t)v337;
LABEL_278:
    v187 += 7;
    --v186;
    v188 = v302;
    v189 = (_QWORD *)MEMORY[0x24BEE4EA0];
    if (!v186)
    {
      swift_bridgeObjectRelease();
      goto LABEL_295;
    }
  }
  __break(1u);
LABEL_317:
  __break(1u);
LABEL_318:
  __break(1u);
LABEL_319:
  __break(1u);
LABEL_320:
  __break(1u);
LABEL_321:
  __break(1u);
LABEL_322:
  __break(1u);
LABEL_323:
  __break(1u);
LABEL_324:
  __break(1u);
LABEL_325:
  __break(1u);
LABEL_326:
  __break(1u);
LABEL_327:
  __break(1u);
LABEL_328:
  __break(1u);
LABEL_329:
  __break(1u);
LABEL_330:
  __break(1u);
LABEL_331:
  __break(1u);
LABEL_332:
  __break(1u);
LABEL_333:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_334:
  __break(1u);
LABEL_335:
  result = sub_24A2165CC();
  __break(1u);
  return result;
}

unint64_t sub_24A1C1D00(uint64_t a1)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float *v4;
  float v5;
  float v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(float *)(a1 + 32);
    v3 = v1 - 1;
    if (v1 != 1)
    {
      v4 = (float *)(a1 + 36);
      do
      {
        v5 = *v4++;
        v6 = v5;
        if (v2 < v5)
          v2 = v6;
        --v3;
      }
      while (v3);
    }
    v7 = LODWORD(v2);
  }
  else
  {
    v7 = 0;
  }
  return v7 | ((unint64_t)(v1 == 0) << 32);
}

uint64_t sub_24A1C1D58(float a1)
{
  uint64_t v1;
  char **v3;
  char *v4;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t result;

  v3 = (char **)(v1 + 112);
  swift_beginAccess();
  v4 = *(char **)(v1 + 112);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v1 + 112) = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v4 = sub_24A147E34(0, *((_QWORD *)v4 + 2) + 1, 1, v4);
    *v3 = v4;
  }
  v7 = *((_QWORD *)v4 + 2);
  v6 = *((_QWORD *)v4 + 3);
  if (v7 >= v6 >> 1)
  {
    v4 = sub_24A147E34((char *)(v6 > 1), v7 + 1, 1, v4);
    *v3 = v4;
  }
  *((_QWORD *)v4 + 2) = v7 + 1;
  *(float *)&v4[4 * v7 + 32] = a1;
  v8 = *v3;
  result = swift_endAccess();
  if (*((_QWORD *)v8 + 2) >= 0xBB9uLL)
  {
    result = swift_beginAccess();
    if (*((_QWORD *)*v3 + 2))
    {
      sub_24A158FD8(0, 1);
      return swift_endAccess();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

void sub_24A1C1E70(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  float v19;

  v3 = v1[8];
  v4 = v1 + 14;
  v5 = swift_beginAccess();
  v6 = *(_QWORD *)(v1[14] + 16);
  v7 = v3 - v6;
  if (__OFSUB__(v3, v6))
    goto LABEL_23;
  if (v7 < a1)
  {
    v8 = (_QWORD *)v1[3];
    v9 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v10 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v8) + 0x180);
    v11 = ((uint64_t (*)(uint64_t))v10)(v5);
    v12 = v10();
    if (v12 < 0)
    {
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v13 = v12;
    if (!v12)
    {
      v16 = 0;
LABEL_18:
      if (!__OFADD__(v16, v11))
      {
        (*(uint64_t (**)(void))((*v9 & *v8) + 0x198))();
        return;
      }
      goto LABEL_25;
    }
    v14 = __OFSUB__(a1, v7);
    v15 = a1 - v7;
    if (v14)
    {
LABEL_26:
      __break(1u);
      return;
    }
    v16 = 0;
    v17 = 0;
    v18 = v15;
    while (1)
    {
      if (v17 < v15)
      {
        if ((v18 & 0x8000000000000000) != 0)
          goto LABEL_21;
        if (v18 >= *(_QWORD *)(*v4 + 16))
          goto LABEL_22;
        v19 = *(float *)(*v4 + 4 * v18 + 32);
        if ((*(float (**)(void))((*v9 & *v8) + 0x1B0))() <= v19)
        {
          v14 = __OFADD__(v16++, 1);
          if (v14)
          {
            __break(1u);
            return;
          }
        }
        v14 = __OFSUB__(v11--, 1);
        if (v14)
          break;
      }
      ++v17;
      --v18;
      if (v13 == v17)
        goto LABEL_18;
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
}

void sub_24A1C1FEC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;

  v3 = v1[8];
  v4 = v1 + 14;
  v5 = swift_beginAccess();
  v6 = *(_QWORD *)(v1[14] + 16);
  v7 = v3 - v6;
  if (__OFSUB__(v3, v6))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v8 = (_QWORD *)v1[3];
  v9 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v10 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v8) + 0x210))(v5);
  if (__OFSUB__(v3, v10))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v3 - v10 < a1)
    return;
  v11 = *(uint64_t (**)(void))((*v9 & *v8) + 0x1F8);
  v12 = v11();
  v13 = __OFSUB__(a1, v7);
  v14 = a1 - v7;
  if (v13)
    goto LABEL_27;
  v15 = v12;
  v16 = v11();
  v17 = v14 + v16;
  if (__OFADD__(v14, v16))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v17 < v14)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v14 == v17)
  {
    if (v15 <= 0)
      goto LABEL_21;
LABEL_9:
    (*(uint64_t (**)(void))((*v9 & *v8) + 0x210))();
    return;
  }
  if (v14 >= v17)
  {
LABEL_30:
    __break(1u);
    return;
  }
  v18 = v16;
  v19 = 0;
  while (1)
  {
    if (v14 >= *(_QWORD *)(*v4 + 16))
      goto LABEL_13;
    if (v14 < 0)
      goto LABEL_24;
    v20 = *(float *)(*v4 + 4 * v14 + 32);
    if ((*(float (**)(void))((*v9 & *v8) + 0x228))() <= v20)
    {
      v13 = __OFADD__(v19++, 1);
      if (v13)
        break;
    }
    v13 = __OFSUB__(v15--, 1);
    if (v13)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
LABEL_13:
    ++v14;
    if (!--v18)
      goto LABEL_20;
  }
  __break(1u);
LABEL_20:
  if (v15 >= 1)
    goto LABEL_9;
LABEL_21:
  (*(uint64_t (**)(void))((*v9 & *v8) + 0x210))();
}

void sub_24A1C21AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  uint64_t v18;
  float (*v19)(uint64_t);
  float v20;

  v3 = v2;
  v6 = *(_QWORD *)(v2 + 64);
  v7 = v3 + 112;
  v8 = swift_beginAccess();
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 112) + 16);
  v10 = v6 - v9;
  if (__OFSUB__(v6, v9))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v11 = a1 - v10;
  if (__OFSUB__(a1, v10))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v12 = __OFSUB__(a2, v10);
  v13 = a2 - v10;
  if (v12)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v14 = v11 & ~(v11 >> 63);
  if (v9 >= v13)
    v15 = v13;
  else
    v15 = *(_QWORD *)(*(_QWORD *)(v3 + 112) + 16);
  if (v15 < v14)
    goto LABEL_26;
  v16 = (_QWORD *)MEMORY[0x24BEE4EA0];
  if (v14 != v15)
  {
    if (v14 >= v15)
    {
LABEL_31:
      __break(1u);
      return;
    }
    v18 = 0;
    v19 = *(float (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v3 + 24)) + 0x1E0);
    while ((unint64_t)v14 < *(_QWORD *)(*(_QWORD *)v7 + 16))
    {
      v20 = 1.0 - *(float *)(*(_QWORD *)v7 + 4 * v14 + 32);
      if (v19(v8) <= v20)
      {
        v12 = __OFADD__(v18++, 1);
        if (v12)
        {
          __break(1u);
          break;
        }
      }
      if (v15 == ++v14)
        goto LABEL_9;
    }
    __break(1u);
    goto LABEL_23;
  }
LABEL_9:
  if (__OFSUB__(a2, a1))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v17 = (float)((*(float (**)(uint64_t))((*v16 & **(_QWORD **)(v3 + 24)) + 0x1C8))(v8) * (float)(a2 - a1))
      + 0.5;
  if ((~LODWORD(v17) & 0x7F800000) == 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v17 <= -9.2234e18)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v17 >= 9.2234e18)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
}

uint64_t sub_24A1C2360(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  float v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = v2;
  v4 = *(float *)&a2;
  v5 = *(float *)&a1;
  v6 = a2 | a1;
  v7 = *(_QWORD **)(v2 + 24);
  v8 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v9 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v7) + 0x120))();
  result = (*(uint64_t (**)(void))((*v8 & *v7) + 0x138))();
  v11 = *(_QWORD *)(v3 + 64);
  if ((v6 & 0x100000000) != 0)
  {
    if (result)
    {
      if (v9 == 0x8000000000000000 && result == -1)
        goto LABEL_46;
      v13 = v11 & ~(v11 >> 63);
      if (!__OFSUB__(v13, v9 / result))
        return (v13 - v9 / result) & ~((v13 - v9 / result) >> 63);
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_35;
  }
  if (!result)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v9 == 0x8000000000000000 && result == -1)
    goto LABEL_47;
  v15 = v9 / result;
  if (v9 / result >= 0)
    v16 = v9 / result;
  else
    v16 = v15 + 1;
  v17 = __OFSUB__(v11, v16 >> 1);
  v18 = v11 - (v16 >> 1);
  if (v17)
    goto LABEL_36;
  if ((~LODWORD(v5) & 0x7F800000) == 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v5 <= -9.2234e18)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (v5 >= 9.2234e18)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v17 = __OFADD__(v18, (uint64_t)v5);
  v19 = v18 + (uint64_t)v5;
  if (v17)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v20 = roundf(v4 * (float)v15);
  if ((~LODWORD(v20) & 0x7F800000) == 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v20 <= -9.2234e18)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v20 >= 9.2234e18)
  {
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v21 = (uint64_t)v20;
  if ((uint64_t)v20 >= 0)
    v22 = (uint64_t)v20;
  else
    v22 = v21 + 1;
  v17 = __OFSUB__(v19, v22 >> 1);
  v23 = v19 - (v22 >> 1);
  if (v17)
    goto LABEL_44;
  result = v23 & ~(v23 >> 63);
  if (__OFADD__(result, v21))
  {
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    return result;
  }
  if (result + v21 >= v11 && __OFSUB__(v11, 1))
    goto LABEL_48;
  return result;
}

uint64_t VAResultGenerator.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VAResultGenerator.__deallocating_deinit()
{
  VAResultGenerator.deinit();
  return swift_deallocClassInstance();
}

_QWORD *sub_24A1C25C4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_24A135F88(&qword_257910020);
      v10 = (_QWORD *)swift_allocObject();
      v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4])
          memmove(v12, a4 + 4, 56 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_24A1C31BC(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for VAResultGenerator()
{
  return objc_opt_self();
}

void sub_24A1C2708(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  void *v18;
  id v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  char v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v4 = a1[2];
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v8 = a1[4];
  v7 = a1[5];
  v42 = a1[6];
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)*a3;
  swift_bridgeObjectRetain();
  v11 = sub_24A148970(v8, v7);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    goto LABEL_23;
  v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_24A1C2A98();
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v20 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v21 = (uint64_t *)(v20[6] + 16 * v11);
    *v21 = v8;
    v21[1] = v7;
    *(_QWORD *)(v20[7] + 8 * v11) = v42;
    v22 = v20[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v20[2] = v24;
    v25 = v4 - 1;
    if (v4 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v26 = a1 + 9;
    while (1)
    {
      v28 = *(v26 - 2);
      v27 = *(v26 - 1);
      v29 = *v26;
      v30 = (_QWORD *)*a3;
      swift_bridgeObjectRetain();
      v31 = sub_24A148970(v28, v27);
      v33 = v30[2];
      v34 = (v32 & 1) == 0;
      v23 = __OFADD__(v33, v34);
      v35 = v33 + v34;
      if (v23)
        break;
      v36 = v32;
      if (v30[3] < v35)
      {
        sub_24A1C2C44(v35, 1);
        v31 = sub_24A148970(v28, v27);
        if ((v36 & 1) != (v37 & 1))
          goto LABEL_25;
      }
      if ((v36 & 1) != 0)
        goto LABEL_10;
      v38 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      v39 = (uint64_t *)(v38[6] + 16 * v31);
      *v39 = v28;
      v39[1] = v27;
      *(_QWORD *)(v38[7] + 8 * v31) = v29;
      v40 = v38[2];
      v23 = __OFADD__(v40, 1);
      v41 = v40 + 1;
      if (v23)
        goto LABEL_24;
      v26 += 3;
      v38[2] = v41;
      if (!--v25)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_24A1C2C44(v14, a2 & 1);
  v16 = sub_24A148970(v8, v7);
  if ((v15 & 1) == (v17 & 1))
  {
    v11 = v16;
    if ((v15 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v18 = (void *)swift_allocError();
    swift_willThrow();
    v19 = v18;
    sub_24A135F88(&qword_25790A8B8);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_24A2165CC();
  __break(1u);
LABEL_26:
  sub_24A216308();
  sub_24A215D98();
  sub_24A2163D4();
  sub_24A215D98();
  sub_24A2163EC();
  __break(1u);
}

_QWORD *sub_24A1C2A84(_QWORD *a1)
{
  return sub_24A1C25C4(0, a1[2], 0, a1);
}

void *sub_24A1C2A98()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_24A135F88(&qword_25790FC00);
  v2 = *v0;
  v3 = sub_24A216428();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_24A1C2C44(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  sub_24A135F88(&qword_25790FC00);
  v37 = a2;
  v6 = sub_24A216434();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_24A216638();
    sub_24A215D50();
    result = sub_24A21665C();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_24A1C2F4C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_24A1C2F68(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_24A1C2F68(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_24A135F88(&qword_257910010);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8)
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    sub_24A135F88(&qword_257910018);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_24A21644C();
  __break(1u);
  return result;
}

uint64_t sub_24A1C310C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v1 = *(_QWORD *)(a1 + 88);
  if (v1)
  {
    v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4)
    v7 = 4;
  v8 = v7 - 4;
  v9 = (unint64_t *)(a1 + 96);
  v2 = 192;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_24A1C31BC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 56 * a1 + 32;
    v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_24A21644C();
  __break(1u);
  return result;
}

unint64_t sub_24A1C32B0(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v1 = a1[2];
  if (!v1)
    return MEMORY[0x24BEE4B00];
  sub_24A135F88(&qword_25790A470);
  v3 = (_QWORD *)sub_24A216440();
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  result = sub_24A1489D4(v4);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v9 = a1 + 9;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v4;
    v10 = (_QWORD *)(v3[7] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    if (!--v1)
      goto LABEL_8;
    v14 = v9 + 3;
    v4 = *(v9 - 2);
    v5 = *(v9 - 1);
    v15 = *v9;
    swift_bridgeObjectRetain();
    result = sub_24A1489D4(v4);
    v9 = v14;
    v6 = v15;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for VAWordDecoder()
{
  return objc_opt_self();
}

uint64_t initializeWithCopy for DetectionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_WORD *)(a1 + 53) = *(_WORD *)(a2 + 53);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DetectionInfo(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_BYTE *)(a1 + 53) = *(_BYTE *)(a2 + 53);
  *(_BYTE *)(a1 + 54) = *(_BYTE *)(a2 + 54);
  return a1;
}

__n128 initializeWithTake for DetectionInfo(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 47) = *(_QWORD *)(a2 + 47);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DetectionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_BYTE *)(a1 + 53) = *(_BYTE *)(a2 + 53);
  *(_BYTE *)(a1 + 54) = *(_BYTE *)(a2 + 54);
  return a1;
}

uint64_t getEnumTagSinglePayload for DetectionInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 55))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DetectionInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 54) = 0;
    *(_WORD *)(result + 52) = 0;
    *(_DWORD *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 55) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 55) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DetectionInfo()
{
  return &type metadata for DetectionInfo;
}

uint64_t method lookup function for VAWordDecoder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAWordDecoder.increment()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of VAWordDecoder.update(newDetection:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t method lookup function for VAResultGenerator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAResultGenerator.predMask.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of VAResultGenerator.predMask.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of VAResultGenerator.predMask.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of VAResultGenerator.searchFrame(predictions:silence:keywordsLookingFor:offsets:widths:preSilenceCheckOverride:postSilenceCheckOverride:duringSpeechCheckOverride:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 592))();
}

uint64_t dispatch thunk of VAResultGenerator.searchFrame(predictions:keywordsLookingFor:offsets:widths:preSilenceCheckOverride:postSilenceCheckOverride:duringSpeechCheckOverride:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 600))();
}

uint64_t dispatch thunk of VAResultGenerator.addSilence(silence:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 608))();
}

uint64_t sub_24A1C3674()
{
  sub_24A1C3BA8(&qword_257910040, (uint64_t)&unk_24A21DD84);
  sub_24A1C3BE8();
  return sub_24A216614();
}

void type metadata accessor for espresso_storage_type_t(uint64_t a1)
{
  sub_24A192F14(a1, &qword_257910038);
}

uint64_t sub_24A1C36DC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v1 = v0[10];
  v2 = v0[15];
  v3 = v1 * v2;
  if ((unsigned __int128)(v1 * (__int128)v2) >> 64 != (v1 * v2) >> 63)
  {
    __break(1u);
    goto LABEL_16;
  }
  v4 = v0[11];
  v5 = v0[16];
  v6 = v4 * v5;
  if ((unsigned __int128)(v4 * (__int128)v5) >> 64 != (v4 * v5) >> 63)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v7 = v0[12];
  v8 = v0[17];
  v9 = v7 * v8;
  if ((unsigned __int128)(v7 * (__int128)v8) >> 64 != (v7 * v8) >> 63)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v10 = v0[13];
  v11 = v0[18];
  v12 = v10 * v11;
  if ((unsigned __int128)(v10 * (__int128)v11) >> 64 != (v10 * v11) >> 63)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v13 = v0[14];
  v14 = v0[19];
  if ((unsigned __int128)(v13 * (__int128)v14) >> 64 != (v13 * v14) >> 63)
  {
LABEL_19:
    __break(1u);
    return result;
  }
  if (v6 > v3)
    v3 = v6;
  if (v9 > v3)
    v3 = v9;
  if (v12 > v3)
    v3 = v12;
  if (v13 * v14 <= v3)
    return v3;
  else
    return v13 * v14;
}

uint64_t sub_24A1C378C(uint64_t (*a1)(void))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = *(_QWORD *)v1;
  if (*(_DWORD *)(v1 + 160) != 65568 || result == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if ((unsigned __int128)(*(uint64_t *)(v1 + 80) * (__int128)*(uint64_t *)(v1 + 120)) >> 64 != (uint64_t)(*(_QWORD *)(v1 + 80) * *(_QWORD *)(v1 + 120)) >> 63)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v5 = *(_QWORD *)(v1 + 88);
  v6 = *(_QWORD *)(v1 + 128);
  if ((unsigned __int128)(v5 * (__int128)v6) >> 64 != (v5 * v6) >> 63)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if ((unsigned __int128)(*(uint64_t *)(v1 + 96) * (__int128)*(uint64_t *)(v1 + 136)) >> 64 != (uint64_t)(*(_QWORD *)(v1 + 96) * *(_QWORD *)(v1 + 136)) >> 63)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((unsigned __int128)(*(uint64_t *)(v1 + 104) * (__int128)*(uint64_t *)(v1 + 144)) >> 64 != (uint64_t)(*(_QWORD *)(v1 + 104) * *(_QWORD *)(v1 + 144)) >> 63)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((unsigned __int128)(*(uint64_t *)(v1 + 112) * (__int128)*(uint64_t *)(v1 + 152)) >> 64 == (uint64_t)(*(_QWORD *)(v1 + 112) * *(_QWORD *)(v1 + 152)) >> 63)
    return a1();
LABEL_16:
  __break(1u);
  return result;
}

void *sub_24A1C3880()
{
  return &unk_24A21DCB0;
}

void *sub_24A1C388C()
{
  return &unk_24A21DCB4;
}

uint64_t sub_24A1C3898()
{
  int v0;
  _DWORD *v1;

  sub_24A215D20();
  v0 = espresso_plan_add_network();
  swift_release();
  if (!v0)
    return 0;
  type metadata accessor for espresso_return_status_t(0);
  sub_24A1C3BA8(&qword_257910028, (uint64_t)&protocol conformance descriptor for espresso_return_status_t);
  swift_allocError();
  *v1 = v0;
  return swift_willThrow();
}

uint64_t sub_24A1C3980(uint64_t a1)
{
  return sub_24A1C39B8(a1, MEMORY[0x24BE2FC80]);
}

uint64_t sub_24A1C399C(uint64_t a1)
{
  return sub_24A1C39B8(a1, MEMORY[0x24BE2FCA0]);
}

uint64_t sub_24A1C39B8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result;
  int v3;
  _DWORD *v4;

  result = a2();
  if ((_DWORD)result)
  {
    v3 = result;
    type metadata accessor for espresso_return_status_t(0);
    sub_24A1C3BA8(&qword_257910028, (uint64_t)&protocol conformance descriptor for espresso_return_status_t);
    swift_allocError();
    *v4 = v3;
    return swift_willThrow();
  }
  return result;
}

void *sub_24A1C3A28()
{
  return &unk_24A21DCB8;
}

void *sub_24A1C3A34()
{
  return &unk_24A21DCBC;
}

uint64_t sub_24A1C3A40()
{
  return 0x10000;
}

uint64_t sub_24A1C3A48@<X0>(uint64_t a1@<X8>)
{
  int v2;
  uint64_t result;
  _DWORD *v4;
  uint64_t v5;

  LODWORD(v5) = 0;
  sub_24A215D20();
  v2 = espresso_network_bind_buffer();
  result = swift_release();
  if (v2)
  {
    type metadata accessor for espresso_return_status_t(0);
    sub_24A1C3BA8(&qword_257910028, (uint64_t)&protocol conformance descriptor for espresso_return_status_t);
    swift_allocError();
    *v4 = v2;
    return swift_willThrow();
  }
  else
  {
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_QWORD *)(a1 + 160) = v5;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
  }
  return result;
}

void type metadata accessor for espresso_return_status_t(uint64_t a1)
{
  sub_24A192F14(a1, &qword_257910030);
}

uint64_t sub_24A1C3BA8(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for espresso_return_status_t(255);
    result = MEMORY[0x24BD0A9EC](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_24A1C3BE8()
{
  unint64_t result;

  result = qword_257910048;
  if (!qword_257910048)
  {
    result = MEMORY[0x24BD0A9EC](MEMORY[0x24BEE3FD8], MEMORY[0x24BEE3F88]);
    atomic_store(result, (unint64_t *)&qword_257910048);
  }
  return result;
}

Swift::Void __swiftcall VAEspressoModel.destroy()()
{
  espresso_context_destroy();
  espresso_plan_destroy();
}

BOOL static BlobType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t BlobType.hash(into:)()
{
  return sub_24A216644();
}

uint64_t BlobType.hashValue.getter()
{
  sub_24A216638();
  sub_24A216644();
  return sub_24A21665C();
}

uint64_t static VAEspressoUtils.getBlobNames(model:blobType:)(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;

  v2 = 0;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(unsigned int *)(a1 + 24);
  if (*a2)
    v5 = sub_24A1C3DE8;
  else
    v5 = sub_24A1C3DE0;
  v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (((uint64_t (*)(uint64_t, uint64_t, uint64_t))v5)(v3, v4, v2))
  {
    v7 = sub_24A215DA4();
    v9 = v8;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_24A14804C(0, v6[2] + 1, 1, v6);
      v6 = (_QWORD *)result;
    }
    v12 = v6[2];
    v11 = v6[3];
    if (v12 >= v11 >> 1)
    {
      result = (uint64_t)sub_24A14804C((_QWORD *)(v11 > 1), v12 + 1, 1, v6);
      v6 = (_QWORD *)result;
    }
    v6[2] = v12 + 1;
    v13 = &v6[2 * v12];
    v13[4] = v7;
    v13[5] = v9;
    if (__OFADD__(v2++, 1))
    {
      __break(1u);
      return result;
    }
  }
  return (uint64_t)v6;
}

uint64_t sub_24A1C3DE0()
{
  return espresso_get_input_blob_name();
}

uint64_t sub_24A1C3DE8()
{
  return espresso_get_output_blob_name();
}

uint64_t sub_24A1C3DF0()
{
  return 0x6C65646F6DLL;
}

uint64_t static VAEspressoUtils.loadModel(_:computeUnits:espressoPrefix:debug:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, _OWORD *a7@<X8>)
{
  void *v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  char v21;
  uint64_t result;
  __int128 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint8_t *v38;
  __int128 v39;
  _OWORD *v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  uint8_t *v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint8_t *v60;
  uint64_t v61;
  _OWORD *v62;
  uint8_t *v63;
  NSObject *v64;
  uint64_t v65;
  char *v66;
  _OWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  char v80;
  __int128 v81;
  int v82;
  char v83;
  char v84;

  v82 = a6;
  v71 = a4;
  v72 = a5;
  v70 = a2;
  v11 = sub_24A215A8C();
  v12 = *(_QWORD *)(v11 - 8);
  v68 = v11;
  v69 = v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v66 = (char *)&v63 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v63 - v18;
  v20 = *a3;
  v84 = *a3;
  v83 = 0;
  sub_24A180568();
  sub_24A215E64();
  sub_24A215E64();
  v67 = a7;
  if (v73 == v81)
  {
    swift_bridgeObjectRelease_n();
LABEL_4:
    result = sub_24A1C4568(a1, v70, 0, v82 & 1, &v73);
    if (v7)
      return result;
    v23 = v73;
    v24 = v74;
    v25 = v75;
    v26 = v76;
    v27 = v77;
    v28 = v78;
    v29 = v79;
    v30 = v80;
    v32 = v68;
    v31 = v69;
    if (!v76)
    {
LABEL_6:
      v33 = sub_24A1B9D90();
      v34 = v66;
      (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v66, v33, v32);
      v35 = sub_24A215A74();
      v36 = sub_24A2160EC();
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v37 = 0;
        _os_log_impl(&dword_24A12D000, v35, v36, "Failed to init neural net after two attempts", v37, 2u);
        v38 = v37;
        v31 = v69;
        MEMORY[0x24BD0AAAC](v38, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v31 + 8))(v34, v32);
      *(_QWORD *)&v73 = 0;
      *((_QWORD *)&v73 + 1) = 0xE000000000000000;
      sub_24A216308();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v73 = 0xD000000000000021;
      *((_QWORD *)&v73 + 1) = 0x800000024A2261F0;
      sub_24A215D98();
      v39 = v73;
      sub_24A14C404();
      swift_allocError();
      *v40 = v39;
      return swift_willThrow();
    }
    goto LABEL_26;
  }
  v21 = sub_24A21659C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v21 & 1) != 0)
    goto LABEL_4;
  v84 = v20;
  v83 = 1;
  sub_24A215E64();
  sub_24A215E64();
  if (v73 == v81)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v41 = sub_24A21659C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v41 & 1) == 0)
    {
      sub_24A14C404();
      swift_allocError();
      *v52 = 0xD000000000000033;
      v52[1] = 0x800000024A2261B0;
      return swift_willThrow();
    }
  }
  v42 = a1;
  v43 = v70;
  result = sub_24A1C4568(a1, v70, 1, v82 & 1, &v73);
  if (v7)
  {
    v65 = 0;
    v44 = sub_24A1B9D90();
    v31 = v69;
    (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v15, v44, v68);
    swift_bridgeObjectRetain_n();
    v45 = sub_24A215A74();
    v46 = sub_24A2160EC();
    v64 = v45;
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc();
      v48 = swift_slowAlloc();
      *(_QWORD *)&v73 = v48;
      *(_DWORD *)v47 = 136315138;
      v43 = v70;
      v63 = v47 + 4;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v81 = sub_24A148270(a1, v43, (uint64_t *)&v73);
      sub_24A216260();
      swift_bridgeObjectRelease_n();
      v49 = v64;
      _os_log_impl(&dword_24A12D000, v64, v46, "Failed to init %s on ANE, will init it on CPU directly", v47, 0xCu);
      swift_arrayDestroy();
      v50 = v48;
      v31 = v69;
      MEMORY[0x24BD0AAAC](v50, -1, -1);
      v51 = v47;
      v42 = a1;
      MEMORY[0x24BD0AAAC](v51, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n();

    }
    v53 = v15;
    v32 = v68;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v53, v68);
  }
  else
  {
    v26 = v76;
    v31 = v69;
    if (v76)
    {
      v23 = v73;
      v24 = v74;
      v25 = v75;
      v27 = v77;
      v28 = v78;
      v29 = v79;
      v30 = v80;
LABEL_26:
      v62 = v67;
      *v67 = v23;
      *((_QWORD *)v62 + 2) = v24;
      *((_DWORD *)v62 + 6) = v25;
      *((_QWORD *)v62 + 4) = v26;
      *((_QWORD *)v62 + 5) = v27;
      *((_QWORD *)v62 + 6) = v28;
      *(_OWORD *)((char *)v62 + 56) = v29;
      *((_BYTE *)v62 + 72) = v30 & 1;
      return result;
    }
    v65 = 0;
    v32 = v68;
  }
  v54 = sub_24A1B9D90();
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v19, v54, v32);
  swift_bridgeObjectRetain_n();
  v55 = sub_24A215A74();
  v56 = sub_24A2160EC();
  if (os_log_type_enabled(v55, v56))
  {
    v57 = (uint8_t *)swift_slowAlloc();
    v58 = swift_slowAlloc();
    *(_QWORD *)&v73 = v58;
    *(_DWORD *)v57 = 136315138;
    v43 = v70;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v81 = sub_24A148270(a1, v43, (uint64_t *)&v73);
    v42 = a1;
    sub_24A216260();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_24A12D000, v55, v56, "Try loading %s on CPU", v57, 0xCu);
    swift_arrayDestroy();
    v59 = v58;
    v31 = v69;
    MEMORY[0x24BD0AAAC](v59, -1, -1);
    v60 = v57;
    v32 = v68;
    MEMORY[0x24BD0AAAC](v60, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v31 + 8))(v19, v32);
  v61 = v65;
  result = sub_24A1C4568(v42, v43, 0, v82 & 1, &v73);
  if (!v61)
  {
    v23 = v73;
    v24 = v74;
    v25 = v75;
    v26 = v76;
    v27 = v77;
    v28 = v78;
    v29 = v79;
    v30 = v80;
    if (!v76)
      goto LABEL_6;
    goto LABEL_26;
  }
  return result;
}

uint64_t sub_24A1C4568@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t result;
  id v31;
  void *v32;
  unsigned int v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  unsigned __int8 v52;
  char *v53;
  NSObject *v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  os_log_type_t v78;
  uint8_t *v79;
  uint64_t v80;
  NSObject *v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  const char *v97;
  _QWORD *v98;
  uint64_t v99;
  void (*v100)(char *, uint64_t, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE *v104;
  _BYTE *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  int v115;
  uint8_t *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  NSObject *v120;
  uint8_t *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  int v125;
  char *v126;
  uint64_t v127;
  unsigned int v128;
  unsigned int v129;
  char *v130;
  id v131;
  void *v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v149;
  uint64_t *v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  char v159;
  _QWORD *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  char v164;
  _QWORD *v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  _QWORD *v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  unint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  unint64_t v203;
  char v204;
  uint64_t v205;
  unint64_t v206;
  char v207;
  char *v208;
  _QWORD *v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  char v213;
  _QWORD *v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  char v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint8_t *v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  NSObject *v232;
  uint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  char v238;
  _QWORD *v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  char v243;
  _QWORD *v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  char v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  _QWORD *v254;
  unint64_t v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  _QWORD *v260;
  char v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  uint64_t v267;
  uint64_t v268;
  NSObject *v269;
  int64_t isa;
  NSObject *v271;
  Class v272;
  Class v273;
  Class v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  uint64_t v282;
  char *v283;
  NSObject *v284;
  NSObject *v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  _QWORD *v296;
  uint64_t v297;
  const char *v298;
  char *v299;
  os_log_type_t v300;
  uint64_t v301;
  uint8_t *v302;
  uint64_t v303;
  unint64_t v304;
  char *v305;
  uint64_t v306;
  _QWORD *v307;
  NSObject *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  unint64_t v314;
  unsigned __int8 v315;
  _QWORD *v316;
  uint64_t v317;
  uint8_t *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  int v322;
  NSObject *v323;
  uint64_t v324;
  _QWORD *v325;
  unint64_t v326;
  unint64_t v327;
  uint64_t v328;
  __int128 v329;
  uint64_t v330;
  void (*v331)(char *, uint64_t, uint64_t);
  uint64_t v332;
  uint64_t v333;
  const char *v334;
  char *v335;
  __int128 v336;
  uint64_t v337;
  unint64_t v338;
  _QWORD *v339;
  uint64_t v340;
  char *v341;
  const char *v342;
  const char *v343;
  uint64_t v344;
  _QWORD *v345;
  const char *v346;
  char *v347;
  id v348;
  char *v349;
  char *v350;
  char *v351;
  NSObject *v352;
  char *v353;
  uint64_t v354;
  uint64_t v355;
  NSObject *v356;
  uint64_t v357;
  unint64_t v358;
  unint64_t v359;
  uint64_t v360;
  unint64_t v361;
  uint64_t v362;
  unsigned __int8 v363;
  __int128 v364;
  __int128 v365;
  _QWORD *v366;
  uint64_t v367;
  __int128 v368;
  char v369;
  char v370;
  char v371;
  uint64_t v372;
  unsigned int v373;
  _QWORD v374[2];

  LODWORD(v356) = a4;
  v345 = a5;
  v374[1] = *MEMORY[0x24BDAC8D0];
  v344 = sub_24A215690();
  v343 = *(const char **)(v344 - 8);
  MEMORY[0x24BDAC7A8](v344);
  v342 = (char *)&v317 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_24A215CFC();
  MEMORY[0x24BDAC7A8](v9);
  v346 = (char *)&v317 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_24A215A8C();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v347 = (char *)&v317 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v350 = (char *)&v317 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v341 = (char *)&v317 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v353 = (char *)&v317 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v352 = ((char *)&v317 - v22);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v351 = (char *)&v317 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v317 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v317 - v28;
  v363 = 0;
  if ((a3 & 1) != 0)
  {
    v374[0] = espresso_create_context();
    if (v374[0])
    {
      v363 = 1;
      goto LABEL_5;
    }
    v82 = sub_24A1B9D90();
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v29, v82, v11);
    swift_bridgeObjectRetain_n();
    v83 = sub_24A215A74();
    v84 = sub_24A2160EC();
    if (os_log_type_enabled(v83, v84))
    {
      v85 = (uint8_t *)swift_slowAlloc();
      v86 = swift_slowAlloc();
      v355 = v11;
      v87 = v86;
      *(_QWORD *)&v365 = v86;
      v354 = v12;
      *(_DWORD *)v85 = 136315138;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v364 = sub_24A148270(a1, a2, (uint64_t *)&v365);
      sub_24A216260();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24A12D000, v83, v84, "Not able to utilized ANE; will use CPU instead: %s", v85, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24BD0AAAC](v87, -1, -1);
      MEMORY[0x24BD0AAAC](v85, -1, -1);

      (*(void (**)(char *, uint64_t))(v354 + 8))(v29, v355);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v29, v11);
    }
    *(_QWORD *)&v365 = 0;
    *((_QWORD *)&v365 + 1) = 0xE000000000000000;
    sub_24A216308();
    swift_bridgeObjectRelease();
    v96 = 0xD00000000000001ALL;
    v97 = "Failed to utilize ANE for ";
LABEL_31:
    *(_QWORD *)&v365 = v96;
    *((_QWORD *)&v365 + 1) = (unint64_t)(v97 - 32) | 0x8000000000000000;
    goto LABEL_32;
  }
  v374[0] = espresso_create_context();
  if (!v374[0])
  {
    v88 = sub_24A1B9D90();
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v27, v88, v11);
    swift_bridgeObjectRetain_n();
    v89 = sub_24A215A74();
    v90 = sub_24A2160EC();
    if (os_log_type_enabled(v89, v90))
    {
      v91 = (uint8_t *)swift_slowAlloc();
      v92 = swift_slowAlloc();
      v355 = v11;
      v93 = v92;
      *(_QWORD *)&v365 = v92;
      v354 = v12;
      *(_DWORD *)v91 = 136315138;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v364 = sub_24A148270(a1, a2, (uint64_t *)&v365);
      sub_24A216260();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24A12D000, v89, v90, "Not able to utilized ANE and CPU: %s", v91, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24BD0AAAC](v93, -1, -1);
      MEMORY[0x24BD0AAAC](v91, -1, -1);

      (*(void (**)(char *, uint64_t))(v354 + 8))(v27, v355);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v27, v11);
    }
    *(_QWORD *)&v365 = 0;
    *((_QWORD *)&v365 + 1) = 0xE000000000000000;
    sub_24A216308();
    swift_bridgeObjectRelease();
    v96 = 0xD000000000000022;
    v97 = "Failed to utilize ANE and CPU for ";
    goto LABEL_31;
  }
LABEL_5:
  if ((v356 & 1) != 0)
  {
    sub_24A1C8B08((uint64_t)v374, &qword_25790C3A8, "Pointer of espresso_context_ref_t %s");
    result = espresso_create_plan();
    if (!result)
      goto LABEL_183;
    v362 = result;
    sub_24A1C8B08((uint64_t)&v362, &qword_25790C398, "Pointer of espresso_plan_ref_t %s");
  }
  else
  {
    result = espresso_create_plan();
    if (!result)
      goto LABEL_183;
    v362 = result;
  }
  v348 = (id)objc_opt_self();
  v31 = objc_msgSend(v348, sel_defaultManager);
  v32 = (void *)sub_24A215C90();
  v33 = objc_msgSend(v31, sel_fileExistsAtPath_, v32);

  v355 = v11;
  v354 = v12;
  if (v33)
  {
    v34 = objc_allocWithZone(MEMORY[0x24BDD17C8]);
    swift_bridgeObjectRetain();
    v35 = (void *)sub_24A215C90();
    swift_bridgeObjectRelease();
    v36 = objc_msgSend(v34, sel_initWithString_, v35);

    v37 = objc_msgSend(v36, sel_stringByStandardizingPath);
    v38 = sub_24A215CB4();
    v40 = v39;

    *(_QWORD *)&v365 = 0;
    *((_QWORD *)&v365 + 1) = 0xE000000000000000;
    sub_24A216308();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v365 = 47;
    *((_QWORD *)&v365 + 1) = 0xE100000000000000;
    sub_24A215D98();
    sub_24A215D98();
    *(_QWORD *)&v365 = v38;
    *((_QWORD *)&v365 + 1) = v40;
    swift_bridgeObjectRetain();
    sub_24A215D98();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v41 = *((_QWORD *)&v365 + 1);
    v42 = v365;
    goto LABEL_14;
  }
  v43 = (void *)sub_24A215C90();
  v44 = objc_msgSend(v43, sel_pathExtension);

  sub_24A215CB4();
  v45 = (void *)sub_24A215C90();
  v46 = objc_msgSend(v45, sel_stringByDeletingPathExtension);

  sub_24A215CB4();
  v47 = sub_24A17E2D0();
  v49 = v48;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v49)
  {
    *(_QWORD *)&v365 = 0;
    *((_QWORD *)&v365 + 1) = 0xE000000000000000;
    sub_24A216308();
    sub_24A215D98();
    sub_24A215D98();
LABEL_32:
    sub_24A215D98();
    v95 = *((_QWORD *)&v365 + 1);
    v94 = v365;
LABEL_33:
    sub_24A14C404();
    swift_allocError();
    *v98 = v94;
    v98[1] = v95;
    return swift_willThrow();
  }
  *(_QWORD *)&v365 = 0;
  *((_QWORD *)&v365 + 1) = 0xE000000000000000;
  sub_24A216308();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v365 = 47;
  *((_QWORD *)&v365 + 1) = 0xE100000000000000;
  sub_24A215D98();
  sub_24A215D98();
  *(_QWORD *)&v365 = v47;
  *((_QWORD *)&v365 + 1) = v49;
  swift_bridgeObjectRetain();
  sub_24A215D98();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v41 = *((_QWORD *)&v365 + 1);
  v42 = v365;
  v11 = v355;
  v12 = v354;
LABEL_14:
  v360 = v42;
  v361 = v41;
  v50 = objc_msgSend(v348, sel_defaultManager);
  swift_bridgeObjectRetain();
  v51 = (void *)sub_24A215C90();
  swift_bridgeObjectRelease();
  v52 = objc_msgSend(v50, sel_isReadableFileAtPath_, v51);

  v53 = v353;
  v54 = v352;
  if ((v52 & 1) == 0)
  {
    v68 = sub_24A1B9D90();
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v351, v68, v11);
    v69 = swift_allocObject();
    *(_QWORD *)(v69 + 16) = v42;
    *(_QWORD *)(v69 + 24) = v41;
    swift_bridgeObjectRetain_n();
    v70 = sub_24A215A74();
    v71 = sub_24A216104();
    v72 = swift_allocObject();
    v340 = v42;
    v73 = v72;
    *(_BYTE *)(v72 + 16) = 32;
    v74 = swift_allocObject();
    *(_BYTE *)(v74 + 16) = 8;
    v75 = swift_allocObject();
    *(_QWORD *)(v75 + 16) = sub_24A1C9190;
    *(_QWORD *)(v75 + 24) = v69;
    v76 = swift_allocObject();
    *(_QWORD *)(v76 + 16) = sub_24A17C8CC;
    *(_QWORD *)(v76 + 24) = v75;
    sub_24A135F88(&qword_2579100F0);
    v77 = swift_allocObject();
    *(_OWORD *)(v77 + 16) = xmmword_24A218680;
    *(_QWORD *)(v77 + 32) = sub_24A1C91CC;
    *(_QWORD *)(v77 + 40) = v73;
    *(_QWORD *)(v77 + 48) = sub_24A1C9A18;
    *(_QWORD *)(v77 + 56) = v74;
    *(_QWORD *)(v77 + 64) = sub_24A1C91F0;
    *(_QWORD *)(v77 + 72) = v76;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    v78 = v71;
    v356 = v70;
    if (os_log_type_enabled(v70, v71))
    {
      v79 = (uint8_t *)swift_slowAlloc();
      v80 = swift_slowAlloc();
      *(_QWORD *)&v365 = v80;
      *(_WORD *)v79 = 258;
      v79[2] = 32;
      swift_release();
      v79[3] = 8;
      swift_release();
      swift_bridgeObjectRetain();
      *(_QWORD *)&v364 = sub_24A148270(v340, v41, (uint64_t *)&v365);
      sub_24A216260();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease_n();
      v81 = v356;
      _os_log_impl(&dword_24A12D000, v356, v78, "Network not found in %s", v79, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24BD0AAAC](v80, -1, -1);
      MEMORY[0x24BD0AAAC](v79, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v354 + 8))(v351, v355);
    *(_QWORD *)&v365 = 0;
    *((_QWORD *)&v365 + 1) = 0xE000000000000000;
    sub_24A216308();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v364 = 0xD00000000000002FLL;
    *((_QWORD *)&v364 + 1) = 0x800000024A226280;
    swift_beginAccess();
    sub_24A215D98();
    swift_bridgeObjectRelease();
    v95 = *((_QWORD *)&v364 + 1);
    v94 = v364;
    goto LABEL_33;
  }
  if ((v356 & 1) != 0)
  {
    v55 = sub_24A1B9D90();
    (*(void (**)(NSObject *, uint64_t, uint64_t))(v12 + 16))(v54, v55, v11);
    v56 = swift_allocObject();
    *(_QWORD *)(v56 + 16) = v42;
    *(_QWORD *)(v56 + 24) = v41;
    swift_bridgeObjectRetain_n();
    v57 = sub_24A215A74();
    LODWORD(v351) = sub_24A2160F8();
    v58 = swift_allocObject();
    v340 = v42;
    v59 = v58;
    *(_BYTE *)(v58 + 16) = 32;
    v60 = swift_allocObject();
    *(_BYTE *)(v60 + 16) = 8;
    v61 = swift_allocObject();
    *(_QWORD *)(v61 + 16) = sub_24A1C9A1C;
    *(_QWORD *)(v61 + 24) = v56;
    v62 = swift_allocObject();
    *(_QWORD *)(v62 + 16) = sub_24A180168;
    *(_QWORD *)(v62 + 24) = v61;
    sub_24A135F88(&qword_2579100F0);
    v63 = swift_allocObject();
    *(_OWORD *)(v63 + 16) = xmmword_24A218680;
    *(_QWORD *)(v63 + 32) = sub_24A1C9A18;
    *(_QWORD *)(v63 + 40) = v59;
    *(_QWORD *)(v63 + 48) = sub_24A1C9A18;
    *(_QWORD *)(v63 + 56) = v60;
    *(_QWORD *)(v63 + 64) = sub_24A1C99A8;
    *(_QWORD *)(v63 + 72) = v62;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    v64 = v57;
    LODWORD(v351) = v351;
    if (os_log_type_enabled(v57, (os_log_type_t)v351))
    {
      v65 = (uint8_t *)swift_slowAlloc();
      v66 = swift_slowAlloc();
      *(_QWORD *)&v365 = v66;
      *(_WORD *)v65 = 258;
      v65[2] = 32;
      swift_release();
      v65[3] = 8;
      swift_release();
      swift_bridgeObjectRetain();
      *(_QWORD *)&v364 = sub_24A148270(v340, v41, (uint64_t *)&v365);
      sub_24A216260();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24A12D000, v64, (os_log_type_t)v351, "Path for the model file is %s", v65, 0xCu);
      swift_arrayDestroy();
      v67 = v66;
      v53 = v353;
      MEMORY[0x24BD0AAAC](v67, -1, -1);
      MEMORY[0x24BD0AAAC](v65, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    v12 = v354;
    (*(void (**)(NSObject *, uint64_t))(v354 + 8))(v352, v355);
  }
  v99 = sub_24A1B9D90();
  v100 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v330 = v99;
  v331 = v100;
  ((void (*)(char *))v100)(v53);
  v101 = v360;
  v102 = v361;
  v103 = swift_allocObject();
  v333 = v101;
  *(_QWORD *)(v103 + 16) = v101;
  *(_QWORD *)(v103 + 24) = v102;
  LODWORD(v101) = v363;
  v104 = (_BYTE *)swift_allocObject();
  LODWORD(v334) = v101;
  v104[16] = v101;
  v105 = v104;
  v351 = v104;
  v340 = v102;
  swift_bridgeObjectRetain_n();
  v352 = sub_24A215A74();
  LODWORD(v336) = sub_24A2160EC();
  v335 = (char *)swift_allocObject();
  v335[16] = 32;
  v106 = swift_allocObject();
  *(_BYTE *)(v106 + 16) = 8;
  v107 = swift_allocObject();
  *(_QWORD *)(v107 + 16) = sub_24A1C9A1C;
  *(_QWORD *)(v107 + 24) = v103;
  v108 = swift_allocObject();
  *(_QWORD *)(v108 + 16) = sub_24A180168;
  *(_QWORD *)(v108 + 24) = v107;
  v109 = swift_allocObject();
  *(_BYTE *)(v109 + 16) = 32;
  v110 = swift_allocObject();
  *(_BYTE *)(v110 + 16) = 8;
  v111 = swift_allocObject();
  *(_QWORD *)(v111 + 16) = sub_24A1C9208;
  *(_QWORD *)(v111 + 24) = v105;
  v112 = swift_allocObject();
  *(_QWORD *)(v112 + 16) = sub_24A180168;
  *(_QWORD *)(v112 + 24) = v111;
  v332 = sub_24A135F88(&qword_2579100F0);
  v113 = swift_allocObject();
  v329 = xmmword_24A218640;
  *(_OWORD *)(v113 + 16) = xmmword_24A218640;
  v114 = v335;
  *(_QWORD *)(v113 + 32) = sub_24A1C9A18;
  *(_QWORD *)(v113 + 40) = v114;
  *(_QWORD *)(v113 + 48) = sub_24A1C9A18;
  *(_QWORD *)(v113 + 56) = v106;
  *(_QWORD *)(v113 + 64) = sub_24A1C99A8;
  *(_QWORD *)(v113 + 72) = v108;
  *(_QWORD *)(v113 + 80) = sub_24A1C9A18;
  *(_QWORD *)(v113 + 88) = v109;
  *(_QWORD *)(v113 + 96) = sub_24A1C9A18;
  *(_QWORD *)(v113 + 104) = v110;
  *(_QWORD *)(v113 + 112) = sub_24A1C99A8;
  *(_QWORD *)(v113 + 120) = v112;
  v339 = (_QWORD *)v103;
  swift_retain();
  v337 = v107;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v338 = v109;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  v115 = v336;
  if (os_log_type_enabled(v352, (os_log_type_t)v336))
  {
    v116 = (uint8_t *)swift_slowAlloc();
    v117 = swift_slowAlloc();
    *(_QWORD *)&v365 = v117;
    *(_WORD *)v116 = 514;
    v116[2] = 32;
    swift_release();
    v116[3] = 8;
    swift_release();
    LODWORD(v336) = v115;
    v118 = v340;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v364 = sub_24A148270(v333, v118, (uint64_t *)&v365);
    sub_24A216260();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease_n();
    v116[12] = 32;
    swift_release();
    v116[13] = 8;
    swift_release();
    if ((_DWORD)v334)
      v119 = 4542017;
    else
      v119 = 5591107;
    *(_QWORD *)&v364 = sub_24A148270(v119, 0xE300000000000000, (uint64_t *)&v365);
    sub_24A216260();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v120 = v352;
    _os_log_impl(&dword_24A12D000, v352, (os_log_type_t)v336, "Loading model %s on %s", v116, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24BD0AAAC](v117, -1, -1);
    v121 = v116;
    v122 = v355;
    MEMORY[0x24BD0AAAC](v121, -1, -1);

    (*(void (**)(char *, uint64_t))(v354 + 8))(v353, v122);
  }
  else
  {

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v122 = v355;
    (*(void (**)(char *, uint64_t))(v354 + 8))(v353, v355);
  }
  swift_beginAccess();
  v123 = v360;
  v124 = v361;
  swift_beginAccess();
  v125 = v363;
  swift_bridgeObjectRetain();
  if (v125 == 1)
    sub_24A1C388C();
  else
    sub_24A1C3880();
  v126 = v349;
  v127 = sub_24A1C3898();
  v129 = v128;
  v130 = v126;
  swift_bridgeObjectRelease();
  if (v126)
    return swift_bridgeObjectRelease();
  v372 = v127;
  v373 = v129;
  if ((v356 & 1) != 0)
    sub_24A1C8B08((uint64_t)&v372, &qword_25790C380, "Pointer of espresso_network_t %s");
  *(_QWORD *)&v365 = v123;
  *((_QWORD *)&v365 + 1) = v124;
  swift_bridgeObjectRetain();
  sub_24A215D98();
  v368 = v365;
  v359 = MEMORY[0x24BEE4B00];
  swift_bridgeObjectRetain();
  v131 = objc_msgSend(v348, sel_defaultManager);
  swift_bridgeObjectRetain();
  v132 = (void *)sub_24A215C90();
  swift_bridgeObjectRelease();
  v133 = objc_msgSend(v131, sel_isReadableFileAtPath_, v132);

  if (v133)
  {
    swift_bridgeObjectRetain();
    sub_24A215CF0();
    v134 = sub_24A215C78();
    v136 = v135;
    swift_bridgeObjectRelease_n();
    *(_QWORD *)&v365 = v134;
    *((_QWORD *)&v365 + 1) = v136;
    v137 = v342;
    sub_24A215684();
    sub_24A14C688();
    v138 = MEMORY[0x24BEE0D00];
    v139 = sub_24A216278();
    (*((void (**)(const char *, uint64_t))v343 + 1))(v137, v344);
    swift_bridgeObjectRelease();
    v356 = *(NSObject **)(v139 + 16);
    if (v356)
    {
      v351 = 0;
      v140 = 0;
      v353 = (char *)(v139 + 32);
      v333 = (uint64_t)&v364 + 8;
      v349 = "tateShapes from config";
      v352 = 0x800000024A221130;
      v346 = "<ContextEmbeddingDim>";
      v350 = (char *)0x800000024A221170;
      v343 = "<ContextEmbeddings>";
      v348 = (id)0x800000024A221150;
      v342 = "<ContextEmbeddingMask>";
      v344 = 0x800000024A221190;
      v336 = xmmword_24A218680;
      v328 = MEMORY[0x24BEE4AD8] + 8;
      v335 = "fer";
      v340 = 0x800000024A2231A0;
      v337 = (uint64_t)"ds joinerModelPath";
      v339 = (_QWORD *)0x800000024A2210A0;
      v334 = "<InputFrameCount>";
      v338 = 0x800000024A2210C0;
      v326 = (unint64_t)"<FrameSubsamplingFactor>";
      v327 = 0x800000024A2210E0;
      while (1)
      {
        if (*(_QWORD *)(v139 + 16) <= v140)
        {
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
LABEL_181:
          __break(1u);
        }
        v141 = v139;
        v142 = &v353[16 * v140];
        v144 = *(_QWORD *)v142;
        v143 = *((_QWORD *)v142 + 1);
        *(_QWORD *)&v365 = *(_QWORD *)v142;
        *((_QWORD *)&v365 + 1) = v143;
        *(_QWORD *)&v364 = 0xD000000000000013;
        *((_QWORD *)&v364 + 1) = v352;
        swift_bridgeObjectRetain();
        if ((sub_24A2162C0() & 1) != 0)
          break;
        *(_QWORD *)&v365 = v144;
        *((_QWORD *)&v365 + 1) = v143;
        *(_QWORD *)&v364 = 0xD000000000000016;
        *((_QWORD *)&v364 + 1) = v350;
        if ((sub_24A2162C0() & 1) != 0)
        {
          *(_QWORD *)&v365 = v144;
          *((_QWORD *)&v365 + 1) = v143;
          *(_QWORD *)&v364 = 32;
          *((_QWORD *)&v364 + 1) = 0xE100000000000000;
          v151 = (_QWORD *)sub_24A216284();
          swift_bridgeObjectRelease();
          v367 = v138;
          if (v151[2] <= 1uLL)
            goto LABEL_176;
          v153 = v151[6];
          v152 = v151[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v365 = v153;
          *((_QWORD *)&v365 + 1) = v152;
          sub_24A170EFC(&v365, &v364);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v357 = v359;
          v359 = 0x8000000000000000;
          v149 = 0xD000000000000016;
          v150 = (uint64_t *)&v371;
          goto LABEL_62;
        }
        *(_QWORD *)&v365 = v144;
        *((_QWORD *)&v365 + 1) = v143;
        *(_QWORD *)&v364 = 0xD000000000000015;
        *((_QWORD *)&v364 + 1) = v348;
        if ((sub_24A2162C0() & 1) != 0)
        {
          *(_QWORD *)&v364 = v144;
          *((_QWORD *)&v364 + 1) = v143;
          v357 = 32;
          v358 = 0xE100000000000000;
          v155 = (_QWORD *)sub_24A216284();
          swift_bridgeObjectRelease();
          if (v155[2] <= 1uLL)
            goto LABEL_177;
          v156 = v155[6];
          v157 = v155[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v158 = sub_24A13F1BC(v156, v157);
          if ((v159 & 1) != 0)
          {
            v171 = 0xD000000000000015;
            v172 = &v370;
            goto LABEL_83;
          }
          v367 = MEMORY[0x24BEE1768];
          *(_QWORD *)&v365 = v158;
          sub_24A170EFC(&v365, &v364);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v357 = v359;
          v359 = 0x8000000000000000;
          v149 = 0xD000000000000015;
          v150 = (uint64_t *)&v370;
          goto LABEL_62;
        }
        *(_QWORD *)&v365 = v144;
        *((_QWORD *)&v365 + 1) = v143;
        *(_QWORD *)&v364 = 0xD000000000000019;
        *((_QWORD *)&v364 + 1) = v344;
        if ((sub_24A2162C0() & 1) != 0)
        {
          *(_QWORD *)&v364 = v144;
          *((_QWORD *)&v364 + 1) = v143;
          v357 = 32;
          v358 = 0xE100000000000000;
          v160 = (_QWORD *)sub_24A216284();
          swift_bridgeObjectRelease();
          if (v160[2] <= 1uLL)
            goto LABEL_178;
          v161 = v160[6];
          v162 = v160[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v163 = sub_24A13F1BC(v161, v162);
          if ((v164 & 1) != 0)
          {
            v171 = 0xD000000000000019;
            v172 = &v369;
            goto LABEL_83;
          }
          v367 = MEMORY[0x24BEE1768];
          *(_QWORD *)&v365 = v163;
          sub_24A170EFC(&v365, &v364);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v357 = v359;
          v359 = 0x8000000000000000;
          v149 = 0xD000000000000019;
          v150 = (uint64_t *)&v369;
          goto LABEL_62;
        }
        *(_QWORD *)&v365 = v144;
        *((_QWORD *)&v365 + 1) = v143;
        strcpy((char *)&v364, "<InputStates>");
        HIWORD(v364) = -4864;
        if ((sub_24A2162C0() & 1) != 0)
        {
          *(_QWORD *)&v365 = v144;
          *((_QWORD *)&v365 + 1) = v143;
          *(_QWORD *)&v364 = 32;
          *((_QWORD *)&v364 + 1) = 0xE100000000000000;
          v165 = (_QWORD *)sub_24A216284();
          swift_bridgeObjectRelease();
          if (v165[2] <= 1uLL)
            goto LABEL_179;
          v166 = v165[6];
          v167 = v165[7];
          swift_bridgeObjectRetain();
          v168 = swift_bridgeObjectRelease();
          *(_QWORD *)&v365 = 44;
          *((_QWORD *)&v365 + 1) = 0xE100000000000000;
          MEMORY[0x24BDAC7A8](v168);
          *(&v317 - 2) = (uint64_t)&v365;
          swift_bridgeObjectRetain();
          v169 = v351;
          v170 = sub_24A147840(0x7FFFFFFFFFFFFFFFLL, 1, sub_24A1862A0, (uint64_t)(&v317 - 4), v166, v167);
          v351 = v169;
          swift_bridgeObjectRelease();
          v367 = sub_24A135F88(&qword_25790A498);
          *(_QWORD *)&v365 = v170;
          sub_24A170EFC(&v365, &v364);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v357 = v359;
          v359 = 0x8000000000000000;
          v154 = 0xED00003E73657461;
          v149 = 0x74537475706E493CLL;
          goto LABEL_63;
        }
        *(_QWORD *)&v365 = v144;
        *((_QWORD *)&v365 + 1) = v143;
        strcpy((char *)&v364, "<OutputStates>");
        HIBYTE(v364) = -18;
        if ((sub_24A2162C0() & 1) != 0)
        {
          *(_QWORD *)&v365 = v144;
          *((_QWORD *)&v365 + 1) = v143;
          *(_QWORD *)&v364 = 32;
          *((_QWORD *)&v364 + 1) = 0xE100000000000000;
          v173 = (_QWORD *)sub_24A216284();
          swift_bridgeObjectRelease();
          if (v173[2] <= 1uLL)
            goto LABEL_180;
          v174 = v173[6];
          v175 = v173[7];
          swift_bridgeObjectRetain();
          v176 = swift_bridgeObjectRelease();
          *(_QWORD *)&v365 = 44;
          *((_QWORD *)&v365 + 1) = 0xE100000000000000;
          MEMORY[0x24BDAC7A8](v176);
          *(&v317 - 2) = (uint64_t)&v365;
          swift_bridgeObjectRetain();
          v177 = v351;
          v178 = sub_24A147840(0x7FFFFFFFFFFFFFFFLL, 1, sub_24A1862A0, (uint64_t)(&v317 - 4), v174, v175);
          v351 = v177;
          swift_bridgeObjectRelease();
          v367 = sub_24A135F88(&qword_25790A498);
          *(_QWORD *)&v365 = v178;
          sub_24A170EFC(&v365, &v364);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v357 = v359;
          v359 = 0x8000000000000000;
          v149 = 0x5374757074754F3CLL;
          v154 = 0xEE003E7365746174;
          goto LABEL_63;
        }
        *(_QWORD *)&v365 = v144;
        *((_QWORD *)&v365 + 1) = v143;
        strcpy((char *)&v364, "<InputFeats>");
        BYTE13(v364) = 0;
        HIWORD(v364) = -5120;
        if ((sub_24A2162C0() & 1) != 0)
        {
          *(_QWORD *)&v365 = v144;
          *((_QWORD *)&v365 + 1) = v143;
          *(_QWORD *)&v364 = 32;
          *((_QWORD *)&v364 + 1) = 0xE100000000000000;
          v180 = (_QWORD *)sub_24A216284();
          swift_bridgeObjectRelease();
          v367 = v138;
          if (v180[2] <= 1uLL)
            goto LABEL_181;
          v182 = v180[6];
          v181 = v180[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v365 = v182;
          *((_QWORD *)&v365 + 1) = v181;
          goto LABEL_88;
        }
        *(_QWORD *)&v365 = v144;
        *((_QWORD *)&v365 + 1) = v143;
        strcpy((char *)&v364, "<ConformerOut>");
        HIBYTE(v364) = -18;
        if ((sub_24A2162C0() & 1) != 0)
        {
          *(_QWORD *)&v365 = v144;
          *((_QWORD *)&v365 + 1) = v143;
          *(_QWORD *)&v364 = 32;
          *((_QWORD *)&v364 + 1) = 0xE100000000000000;
          v183 = (_QWORD *)sub_24A216284();
          result = swift_bridgeObjectRelease();
          v367 = v138;
          if (v183[2] <= 1uLL)
          {
            __break(1u);
LABEL_183:
            __break(1u);
LABEL_184:
            __break(1u);
LABEL_185:
            __break(1u);
LABEL_186:
            __break(1u);
LABEL_187:
            __break(1u);
LABEL_188:
            __break(1u);
LABEL_189:
            __break(1u);
LABEL_190:
            __break(1u);
LABEL_191:
            __break(1u);
LABEL_192:
            __break(1u);
LABEL_193:
            __break(1u);
LABEL_194:
            __break(1u);
LABEL_195:
            __break(1u);
LABEL_196:
            __break(1u);
LABEL_197:
            __break(1u);
LABEL_198:
            __break(1u);
            return result;
          }
          v185 = v183[6];
          v184 = v183[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v365 = v185;
          *((_QWORD *)&v365 + 1) = v184;
          goto LABEL_92;
        }
        *(_QWORD *)&v365 = v144;
        *((_QWORD *)&v365 + 1) = v143;
        *(_QWORD *)&v364 = 0x74736F504354433CLL;
        *((_QWORD *)&v364 + 1) = 0xEF3E73726F697265;
        if ((sub_24A2162C0() & 1) != 0)
        {
          *(_QWORD *)&v365 = v144;
          *((_QWORD *)&v365 + 1) = v143;
          *(_QWORD *)&v364 = 32;
          *((_QWORD *)&v364 + 1) = 0xE100000000000000;
          v186 = (_QWORD *)sub_24A216284();
          result = swift_bridgeObjectRelease();
          v367 = v138;
          if (v186[2] <= 1uLL)
            goto LABEL_184;
          v188 = v186[6];
          v187 = v186[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v365 = v188;
          *((_QWORD *)&v365 + 1) = v187;
          goto LABEL_96;
        }
        *(_QWORD *)&v365 = v144;
        *((_QWORD *)&v365 + 1) = v143;
        strcpy((char *)&v364, "<OutputData>");
        BYTE13(v364) = 0;
        HIWORD(v364) = -5120;
        v325 = (_QWORD *)0xEC0000003E617461;
        if ((sub_24A2162C0() & 1) != 0)
        {
          *(_QWORD *)&v365 = v144;
          *((_QWORD *)&v365 + 1) = v143;
          *(_QWORD *)&v364 = 32;
          *((_QWORD *)&v364 + 1) = 0xE100000000000000;
          v189 = (_QWORD *)sub_24A216284();
          result = swift_bridgeObjectRelease();
          v367 = v138;
          if (v189[2] <= 1uLL)
            goto LABEL_185;
          v191 = v189[6];
          v190 = v189[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v365 = v191;
          *((_QWORD *)&v365 + 1) = v190;
          sub_24A170EFC(&v365, &v364);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v357 = v359;
          v359 = 0x8000000000000000;
          v149 = 0x4474757074754F3CLL;
LABEL_103:
          v154 = (unint64_t)v325;
          goto LABEL_63;
        }
        *(_QWORD *)&v365 = v144;
        *((_QWORD *)&v365 + 1) = v143;
        strcpy((char *)&v364, "<InputData>");
        HIDWORD(v364) = -352321536;
        v325 = (_QWORD *)0xEB000000003E6174;
        if ((sub_24A2162C0() & 1) != 0)
        {
          *(_QWORD *)&v365 = v144;
          *((_QWORD *)&v365 + 1) = v143;
          *(_QWORD *)&v364 = 32;
          *((_QWORD *)&v364 + 1) = 0xE100000000000000;
          v192 = (_QWORD *)sub_24A216284();
          result = swift_bridgeObjectRelease();
          v367 = v138;
          if (v192[2] <= 1uLL)
            goto LABEL_186;
          v194 = v192[6];
          v193 = v192[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v365 = v194;
          *((_QWORD *)&v365 + 1) = v193;
          sub_24A170EFC(&v365, &v364);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v357 = v359;
          v359 = 0x8000000000000000;
          v149 = 0x61447475706E493CLL;
          goto LABEL_103;
        }
        *(_QWORD *)&v365 = v144;
        *((_QWORD *)&v365 + 1) = v143;
        *(_QWORD *)&v364 = 0xD000000000000011;
        *((_QWORD *)&v364 + 1) = v340;
        if ((sub_24A2162C0() & 1) != 0)
        {
          *(_QWORD *)&v365 = v144;
          *((_QWORD *)&v365 + 1) = v143;
          *(_QWORD *)&v364 = 32;
          *((_QWORD *)&v364 + 1) = 0xE100000000000000;
          v195 = (_QWORD *)sub_24A216284();
          result = swift_bridgeObjectRelease();
          if (v195[2] <= 1uLL)
            goto LABEL_187;
          v196 = v195[6];
          v197 = v195[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v365 = v196;
          *((_QWORD *)&v365 + 1) = v197;
          *(_QWORD *)&v364 = 44;
          *((_QWORD *)&v364 + 1) = 0xE100000000000000;
          v198 = sub_24A216284();
          swift_bridgeObjectRelease();
          v325 = (_QWORD *)v198;
          v199 = *(_QWORD *)(v198 + 16);
          if (v199 == 2)
            goto LABEL_64;
          if (v199 != 4)
          {
            v331(v341, v330, v355);
            v219 = swift_allocObject();
            *(_QWORD *)(v219 + 16) = v325;
            v220 = swift_allocObject();
            v324 = v220;
            *(_QWORD *)(v220 + 16) = sub_24A1C98EC;
            *(_QWORD *)(v220 + 24) = v219;
            swift_bridgeObjectRetain();
            v321 = v219;
            swift_retain();
            v323 = sub_24A215A74();
            v322 = sub_24A216104();
            v221 = swift_allocObject();
            *(_BYTE *)(v221 + 16) = 32;
            v222 = swift_allocObject();
            *(_BYTE *)(v222 + 16) = 8;
            v223 = swift_allocObject();
            v224 = v324;
            *(_QWORD *)(v223 + 16) = sub_24A1C98F8;
            *(_QWORD *)(v223 + 24) = v224;
            v225 = swift_allocObject();
            *(_QWORD *)(v225 + 16) = sub_24A180168;
            *(_QWORD *)(v225 + 24) = v223;
            v226 = swift_allocObject();
            *(_OWORD *)(v226 + 16) = v336;
            *(_QWORD *)(v226 + 32) = sub_24A1C9A18;
            *(_QWORD *)(v226 + 40) = v221;
            *(_QWORD *)(v226 + 48) = sub_24A1C9A18;
            *(_QWORD *)(v226 + 56) = v222;
            *(_QWORD *)(v226 + 64) = sub_24A1C99A8;
            *(_QWORD *)(v226 + 72) = v225;
            swift_retain();
            v320 = v223;
            swift_retain();
            v318 = (uint8_t *)v221;
            swift_retain();
            swift_retain();
            v319 = v225;
            swift_retain();
            swift_bridgeObjectRelease();
            v322 = v322;
            if (os_log_type_enabled(v323, (os_log_type_t)v322))
            {
              v227 = (uint8_t *)swift_slowAlloc();
              v317 = swift_slowAlloc();
              *(_QWORD *)&v365 = v317;
              *(_WORD *)v227 = 258;
              v227[2] = 32;
              swift_release();
              v227[3] = 8;
              swift_release();
              v318 = v227 + 4;
              v228 = swift_bridgeObjectRetain();
              v229 = MEMORY[0x24BD09774](v228, v138);
              v231 = v230;
              swift_bridgeObjectRelease();
              *(_QWORD *)&v364 = sub_24A148270(v229, v231, (uint64_t *)&v365);
              sub_24A216260();
              swift_bridgeObjectRelease();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_bridgeObjectRelease();
              v232 = v323;
              _os_log_impl(&dword_24A12D000, v323, (os_log_type_t)v322, "Invalid ouput shape: %s", v227, 0xCu);
              v233 = v317;
              swift_arrayDestroy();
              MEMORY[0x24BD0AAAC](v233, -1, -1);
              MEMORY[0x24BD0AAAC](v227, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
            }
            (*(void (**)(char *, uint64_t))(v354 + 8))(v341, v355);
            goto LABEL_65;
          }
          v367 = sub_24A135F88(&qword_25790C390);
          result = swift_allocObject();
          *(_QWORD *)&v365 = result;
          if (v325[2] <= 2uLL)
            goto LABEL_190;
          v200 = result;
          v201 = v325;
          v202 = v325[8];
          v203 = v325[9];
          swift_bridgeObjectRetain();
          result = sub_24A13F1BC(v202, v203);
          *(_QWORD *)(v200 + 16) = result;
          *(_BYTE *)(v200 + 24) = v204 & 1;
          if (v201[2] <= 3uLL)
            goto LABEL_191;
          v205 = v325[10];
          v206 = v325[11];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(v200 + 32) = sub_24A13F1BC(v205, v206);
          *(_BYTE *)(v200 + 40) = v207 & 1;
          sub_24A170EFC(&v365, &v364);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v357 = v359;
          v359 = 0x8000000000000000;
          v208 = (char *)&v364 + 8;
          goto LABEL_115;
        }
        *(_QWORD *)&v365 = v144;
        *((_QWORD *)&v365 + 1) = v143;
        *(_QWORD *)&v364 = 0xD000000000000011;
        *((_QWORD *)&v364 + 1) = v339;
        if ((sub_24A2162C0() & 1) != 0)
        {
          *(_QWORD *)&v364 = v144;
          *((_QWORD *)&v364 + 1) = v143;
          v357 = 32;
          v358 = 0xE100000000000000;
          v209 = (_QWORD *)sub_24A216284();
          result = swift_bridgeObjectRelease();
          if (v209[2] <= 1uLL)
            goto LABEL_189;
          v210 = v209[6];
          v211 = v209[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v212 = sub_24A13F1BC(v210, v211);
          if ((v213 & 1) != 0)
          {
            v179 = v337 | 0x8000000000000000;
            v171 = 0xD000000000000011;
            goto LABEL_84;
          }
          v367 = MEMORY[0x24BEE1768];
          *(_QWORD *)&v365 = v212;
          sub_24A170EFC(&v365, &v364);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v357 = v359;
          v359 = 0x8000000000000000;
          v208 = (char *)&v365 + 8;
LABEL_115:
          v154 = *((_QWORD *)v208 - 32) | 0x8000000000000000;
          v149 = 0xD000000000000011;
          goto LABEL_63;
        }
        *(_QWORD *)&v365 = v144;
        *((_QWORD *)&v365 + 1) = v143;
        *(_QWORD *)&v364 = 0xD000000000000018;
        *((_QWORD *)&v364 + 1) = v338;
        if ((sub_24A2162C0() & 1) != 0)
        {
          *(_QWORD *)&v364 = v144;
          *((_QWORD *)&v364 + 1) = v143;
          v357 = 32;
          v358 = 0xE100000000000000;
          v214 = (_QWORD *)sub_24A216284();
          result = swift_bridgeObjectRelease();
          if (v214[2] <= 1uLL)
            goto LABEL_192;
          v215 = v214[6];
          v216 = v214[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v217 = sub_24A13F1BC(v215, v216);
          if ((v218 & 1) != 0)
          {
            v171 = 0xD000000000000018;
            v172 = (char *)&v364;
LABEL_83:
            v179 = *((_QWORD *)v172 - 32) | 0x8000000000000000;
LABEL_84:
            sub_24A1C9470(v171, v179, &v364);
            sub_24A14D268((uint64_t)&v364);
            goto LABEL_65;
          }
          v367 = MEMORY[0x24BEE1768];
          *(_QWORD *)&v365 = v217;
          sub_24A170EFC(&v365, &v364);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v357 = v359;
          v359 = 0x8000000000000000;
          v149 = 0xD000000000000018;
          v150 = (uint64_t *)&v364;
          goto LABEL_62;
        }
        *(_QWORD *)&v365 = v144;
        *((_QWORD *)&v365 + 1) = v143;
        strcpy((char *)&v364, "<FrameOverlap>");
        HIBYTE(v364) = -18;
        if ((sub_24A2162C0() & 1) != 0)
        {
          *(_QWORD *)&v364 = v144;
          *((_QWORD *)&v364 + 1) = v143;
          v357 = 32;
          v358 = 0xE100000000000000;
          v234 = (_QWORD *)sub_24A216284();
          result = swift_bridgeObjectRelease();
          if (v234[2] <= 1uLL)
            goto LABEL_193;
          v235 = v234[6];
          v236 = v234[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v237 = sub_24A13F1BC(v235, v236);
          if ((v238 & 1) != 0)
          {
            v171 = 0x764F656D6172463CLL;
            v179 = 0xEE003E70616C7265;
            goto LABEL_84;
          }
          v367 = MEMORY[0x24BEE1768];
          *(_QWORD *)&v365 = v237;
          sub_24A170EFC(&v365, &v364);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v357 = v359;
          v359 = 0x8000000000000000;
          v149 = 0x764F656D6172463CLL;
          v154 = 0xEE003E70616C7265;
          goto LABEL_63;
        }
        *(_QWORD *)&v365 = v144;
        *((_QWORD *)&v365 + 1) = v143;
        strcpy((char *)&v364, "<InputDim>");
        BYTE11(v364) = 0;
        HIDWORD(v364) = -369098752;
        if ((sub_24A2162C0() & 1) != 0)
        {
          *(_QWORD *)&v364 = v144;
          *((_QWORD *)&v364 + 1) = v143;
          v357 = 32;
          v358 = 0xE100000000000000;
          v239 = (_QWORD *)sub_24A216284();
          result = swift_bridgeObjectRelease();
          if (v239[2] <= 1uLL)
            goto LABEL_194;
          v240 = v239[6];
          v241 = v239[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v242 = sub_24A13F1BC(v240, v241);
          if ((v243 & 1) != 0)
          {
            v171 = 0x69447475706E493CLL;
            v179 = 0xEA00000000003E6DLL;
            goto LABEL_84;
          }
          v367 = MEMORY[0x24BEE1768];
          *(_QWORD *)&v365 = v242;
          sub_24A170EFC(&v365, &v364);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v357 = v359;
          v359 = 0x8000000000000000;
          v149 = 0x69447475706E493CLL;
          v154 = 0xEA00000000003E6DLL;
          goto LABEL_63;
        }
        *(_QWORD *)&v365 = v144;
        *((_QWORD *)&v365 + 1) = v143;
        strcpy((char *)&v364, "<OutputDim>");
        HIDWORD(v364) = -352321536;
        if ((sub_24A2162C0() & 1) != 0)
        {
          *(_QWORD *)&v364 = v144;
          *((_QWORD *)&v364 + 1) = v143;
          v357 = 32;
          v358 = 0xE100000000000000;
          v244 = (_QWORD *)sub_24A216284();
          result = swift_bridgeObjectRelease();
          if (v244[2] <= 1uLL)
            goto LABEL_195;
          v245 = v244[6];
          v246 = v244[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v247 = sub_24A13F1BC(v245, v246);
          if ((v248 & 1) != 0)
          {
            v171 = 0x4474757074754F3CLL;
            v179 = 0xEB000000003E6D69;
            goto LABEL_84;
          }
          v367 = MEMORY[0x24BEE1768];
          *(_QWORD *)&v365 = v247;
          sub_24A170EFC(&v365, &v364);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v357 = v359;
          v359 = 0x8000000000000000;
          v149 = 0x4474757074754F3CLL;
          v154 = 0xEB000000003E6D69;
          goto LABEL_63;
        }
        *(_QWORD *)&v365 = v144;
        *((_QWORD *)&v365 + 1) = v143;
        strcpy((char *)&v364, "<InputFeats>");
        BYTE13(v364) = 0;
        HIWORD(v364) = -5120;
        if ((sub_24A2162C0() & 1) != 0)
        {
          *(_QWORD *)&v365 = v144;
          *((_QWORD *)&v365 + 1) = v143;
          *(_QWORD *)&v364 = 32;
          *((_QWORD *)&v364 + 1) = 0xE100000000000000;
          v249 = sub_24A216284();
          swift_bridgeObjectRelease();
          v367 = sub_24A135F88(&qword_257909948);
          *(_QWORD *)&v365 = v249;
LABEL_88:
          sub_24A170EFC(&v365, &v364);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v357 = v359;
          v359 = 0x8000000000000000;
          v149 = 0x65467475706E493CLL;
          v154 = 0xEC0000003E737461;
          goto LABEL_63;
        }
        *(_QWORD *)&v365 = v144;
        *((_QWORD *)&v365 + 1) = v143;
        *(_QWORD *)&v364 = 0x3E6B73614D3CLL;
        *((_QWORD *)&v364 + 1) = 0xE600000000000000;
        if ((sub_24A2162C0() & 1) != 0)
        {
          *(_QWORD *)&v365 = v144;
          *((_QWORD *)&v365 + 1) = v143;
          *(_QWORD *)&v364 = 32;
          *((_QWORD *)&v364 + 1) = 0xE100000000000000;
          v250 = sub_24A216284();
          swift_bridgeObjectRelease();
          v367 = sub_24A135F88(&qword_257909948);
          *(_QWORD *)&v365 = v250;
          sub_24A170EFC(&v365, &v364);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v357 = v359;
          v359 = 0x8000000000000000;
          v149 = 0x3E6B73614D3CLL;
          v154 = 0xE600000000000000;
          goto LABEL_63;
        }
        *(_QWORD *)&v365 = v144;
        *((_QWORD *)&v365 + 1) = v143;
        v325 = (_QWORD *)0xD000000000000010;
        *(_QWORD *)&v364 = 0xD000000000000010;
        *((_QWORD *)&v364 + 1) = v327;
        if ((sub_24A2162C0() & 1) != 0)
        {
          *(_QWORD *)&v365 = v144;
          *((_QWORD *)&v365 + 1) = v143;
          *(_QWORD *)&v364 = 32;
          *((_QWORD *)&v364 + 1) = 0xE100000000000000;
          v251 = sub_24A216284();
          swift_bridgeObjectRelease();
          v367 = sub_24A135F88(&qword_257909948);
          *(_QWORD *)&v365 = v251;
          sub_24A170EFC(&v365, &v364);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v357 = v359;
          v359 = 0x8000000000000000;
          v154 = v326 | 0x8000000000000000;
          v149 = (uint64_t)v325;
          goto LABEL_63;
        }
        *(_QWORD *)&v365 = v144;
        *((_QWORD *)&v365 + 1) = v143;
        strcpy((char *)&v364, "<ConformerOut>");
        HIBYTE(v364) = -18;
        if ((sub_24A2162C0() & 1) != 0)
        {
          *(_QWORD *)&v365 = v144;
          *((_QWORD *)&v365 + 1) = v143;
          *(_QWORD *)&v364 = 32;
          *((_QWORD *)&v364 + 1) = 0xE100000000000000;
          v252 = sub_24A216284();
          swift_bridgeObjectRelease();
          v367 = sub_24A135F88(&qword_257909948);
          *(_QWORD *)&v365 = v252;
LABEL_92:
          sub_24A170EFC(&v365, &v364);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v357 = v359;
          v359 = 0x8000000000000000;
          v149 = 0x6D726F666E6F433CLL;
          v154 = 0xEE003E74754F7265;
          goto LABEL_63;
        }
        *(_QWORD *)&v365 = v144;
        *((_QWORD *)&v365 + 1) = v143;
        *(_QWORD *)&v364 = 0x74736F504354433CLL;
        *((_QWORD *)&v364 + 1) = 0xEF3E73726F697265;
        if ((sub_24A2162C0() & 1) != 0)
        {
          *(_QWORD *)&v365 = v144;
          *((_QWORD *)&v365 + 1) = v143;
          *(_QWORD *)&v364 = 32;
          *((_QWORD *)&v364 + 1) = 0xE100000000000000;
          v253 = sub_24A216284();
          swift_bridgeObjectRelease();
          v367 = sub_24A135F88(&qword_257909948);
          *(_QWORD *)&v365 = v253;
LABEL_96:
          sub_24A170EFC(&v365, &v364);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v357 = v359;
          v359 = 0x8000000000000000;
          v149 = 0x74736F504354433CLL;
          v154 = 0xEF3E73726F697265;
          goto LABEL_63;
        }
        *(_QWORD *)&v365 = v144;
        *((_QWORD *)&v365 + 1) = v143;
        strcpy((char *)&v364, "<StateShapes>");
        HIWORD(v364) = -4864;
        if ((sub_24A2162C0() & 1) == 0)
          goto LABEL_64;
        *(_QWORD *)&v365 = v144;
        *((_QWORD *)&v365 + 1) = v143;
        *(_QWORD *)&v364 = 32;
        *((_QWORD *)&v364 + 1) = 0xE100000000000000;
        v254 = (_QWORD *)sub_24A216284();
        result = swift_bridgeObjectRelease();
        if (v254[2] <= 1uLL)
          goto LABEL_196;
        v256 = v254[6];
        v255 = v254[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v257 = sub_24A1C97A4(1uLL, v256, v255);
        v259 = v258;
        v325 = v260;
        swift_bridgeObjectRelease();
        result = sub_24A216230();
        if (__OFSUB__(result, 1))
          goto LABEL_197;
        result = sub_24A216224();
        if ((v261 & 1) != 0)
          v262 = v259;
        else
          v262 = result;
        if (v262 >> 14 < v257 >> 14)
          goto LABEL_198;
        v263 = sub_24A216248();
        v265 = v264;
        v325 = v266;
        v268 = v267;
        swift_bridgeObjectRelease();
        *(_QWORD *)&v365 = v263;
        *((_QWORD *)&v365 + 1) = v265;
        v366 = v325;
        v367 = v268;
        *(_QWORD *)&v364 = 2632745;
        *((_QWORD *)&v364 + 1) = 0xE300000000000000;
        sub_24A1C9840();
        sub_24A1C9884();
        v269 = sub_24A21608C();
        swift_bridgeObjectRelease();
        v323 = v269;
        if (v269[2].isa)
        {
          isa = (int64_t)v269[2].isa;
          *(_QWORD *)&v365 = MEMORY[0x24BEE4AF8];
          sub_24A1C8CD4(isa);
          v271 = v323 + 7;
          do
          {
            v273 = v271[-3].isa;
            v272 = v271[-2].isa;
            v274 = v271->isa;
            v325 = v271[-1].isa;
            swift_bridgeObjectRetain();
            v325 = (_QWORD *)MEMORY[0x24BD095F4](v273, v272, v325, v274);
            v324 = v275;
            swift_bridgeObjectRelease();
            sub_24A1C9734();
            v276 = *(_QWORD *)(v365 + 16);
            sub_24A1C977C(v276);
            v277 = v365;
            *(_QWORD *)(v365 + 16) = v276 + 1;
            v278 = v277 + 16 * v276;
            v279 = v324;
            *(_QWORD *)(v278 + 32) = v325;
            *(_QWORD *)(v278 + 40) = v279;
            v271 += 4;
            --isa;
          }
          while (isa);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          v277 = MEMORY[0x24BEE4AF8];
        }
        v367 = sub_24A135F88(&qword_257909948);
        *(_QWORD *)&v365 = v277;
        sub_24A170EFC(&v365, &v364);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v357 = v359;
        v359 = 0x8000000000000000;
        v149 = 0x685365746174533CLL;
        v154 = 0xED00003E73657061;
LABEL_63:
        sub_24A181408(&v364, v149, v154, isUniquelyReferenced_nonNull_native);
        v359 = v357;
LABEL_64:
        swift_bridgeObjectRelease();
LABEL_65:
        v139 = v141;
        if (++v140 == v356)
        {
          swift_bridgeObjectRelease();
          v122 = v355;
          v130 = v351;
          goto LABEL_167;
        }
      }
      *(_QWORD *)&v365 = v144;
      *((_QWORD *)&v365 + 1) = v143;
      *(_QWORD *)&v364 = 32;
      *((_QWORD *)&v364 + 1) = 0xE100000000000000;
      v145 = (_QWORD *)sub_24A216284();
      swift_bridgeObjectRelease();
      v367 = v138;
      if (v145[2] <= 1uLL)
        goto LABEL_175;
      v147 = v145[6];
      v146 = v145[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v365 = v147;
      *((_QWORD *)&v365 + 1) = v146;
      sub_24A170EFC(&v365, &v364);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v357 = v359;
      v359 = 0x8000000000000000;
      v149 = 0xD000000000000013;
      v150 = &v372;
LABEL_62:
      v154 = *(v150 - 32) | 0x8000000000000000;
      goto LABEL_63;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    v368 = 0uLL;
  }
LABEL_167:
  v280 = v362;
  result = sub_24A1C3980(v362);
  v281 = v347;
  if (v130)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v331(v281, v330, v122);
    v282 = v360;
    v283 = (char *)v361;
    v284 = swift_allocObject();
    v340 = v282;
    v284[2].isa = (Class)v282;
    v284[3].isa = (Class)v283;
    v285 = v284;
    v352 = v284;
    v286 = swift_allocObject();
    *(_QWORD *)(v286 + 16) = v130;
    v287 = v286;
    v353 = (char *)v286;
    v288 = v130;
    v289 = v130;
    v349 = v283;
    swift_bridgeObjectRetain();
    v356 = sub_24A215A74();
    LODWORD(v351) = sub_24A216104();
    v342 = (const char *)swift_allocObject();
    *((_BYTE *)v342 + 16) = 32;
    v341 = (char *)swift_allocObject();
    v341[16] = 8;
    v290 = swift_allocObject();
    *(_QWORD *)(v290 + 16) = sub_24A1C9A1C;
    *(_QWORD *)(v290 + 24) = v285;
    v291 = swift_allocObject();
    *(_QWORD *)(v291 + 16) = sub_24A180168;
    *(_QWORD *)(v291 + 24) = v290;
    v292 = swift_allocObject();
    *(_BYTE *)(v292 + 16) = 64;
    v293 = swift_allocObject();
    *(_BYTE *)(v293 + 16) = 8;
    v350 = (char *)v293;
    v294 = swift_allocObject();
    *(_QWORD *)(v294 + 16) = sub_24A1C9A14;
    *(_QWORD *)(v294 + 24) = v287;
    v295 = swift_allocObject();
    *(_QWORD *)(v295 + 16) = sub_24A1C92D0;
    *(_QWORD *)(v295 + 24) = v294;
    v296 = (_QWORD *)swift_allocObject();
    v296[2] = sub_24A17C8CC;
    v296[3] = v295;
    v297 = swift_allocObject();
    *(_OWORD *)(v297 + 16) = v329;
    v298 = v342;
    *(_QWORD *)(v297 + 32) = sub_24A1C9A18;
    *(_QWORD *)(v297 + 40) = v298;
    v299 = v341;
    *(_QWORD *)(v297 + 48) = sub_24A1C9A18;
    *(_QWORD *)(v297 + 56) = v299;
    *(_QWORD *)(v297 + 64) = sub_24A1C99A8;
    *(_QWORD *)(v297 + 72) = v291;
    *(_QWORD *)(v297 + 80) = sub_24A1C9A18;
    *(_QWORD *)(v297 + 88) = v292;
    *(_QWORD *)(v297 + 96) = sub_24A1C9A18;
    *(_QWORD *)(v297 + 104) = v293;
    *(_QWORD *)(v297 + 112) = sub_24A1C9384;
    *(_QWORD *)(v297 + 120) = v296;
    swift_retain();
    v344 = v290;
    swift_retain();
    swift_retain();
    v345 = (_QWORD *)v294;
    swift_retain();
    v346 = (const char *)v295;
    swift_retain();
    swift_retain();
    swift_retain();
    v343 = (const char *)v291;
    swift_retain();
    swift_retain();
    swift_retain();
    v348 = v296;
    swift_retain();
    swift_bridgeObjectRelease();
    v300 = v351;
    if (os_log_type_enabled(v356, (os_log_type_t)v351))
    {
      v301 = swift_slowAlloc();
      v351 = v130;
      v302 = (uint8_t *)v301;
      v339 = (_QWORD *)swift_slowAlloc();
      v303 = swift_slowAlloc();
      *(_QWORD *)&v365 = v303;
      *(_WORD *)v302 = 514;
      v302[2] = 32;
      swift_release();
      v302[3] = 8;
      swift_release();
      v304 = (unint64_t)v349;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v364 = sub_24A148270(v340, v304, (uint64_t *)&v365);
      sub_24A216260();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease_n();
      v302[12] = 64;
      swift_release();
      v302[13] = 8;
      swift_release();
      v305 = v351;
      v306 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)&v364 = v306;
      sub_24A216260();
      v307 = v339;
      *v339 = v306;
      swift_release();
      swift_release();
      swift_release();
      swift_release();

      v308 = v356;
      _os_log_impl(&dword_24A12D000, v356, v300, "Failed to call plan.build() for %s: %@", v302, 0x16u);
      sub_24A135F88(&qword_25790A820);
      swift_arrayDestroy();
      MEMORY[0x24BD0AAAC](v307, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x24BD0AAAC](v303, -1, -1);
      MEMORY[0x24BD0AAAC](v302, -1, -1);

    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();

    }
    (*(void (**)(char *, uint64_t))(v354 + 8))(v347, v355);
    return swift_willThrow();
  }
  v309 = v374[0];
  if (!v374[0])
    goto LABEL_188;
  v310 = v372;
  v311 = v373;
  v312 = v359;
  v313 = v360;
  v314 = v361;
  result = swift_beginAccess();
  v315 = v363;
  v316 = v345;
  *v345 = v280;
  v316[1] = v309;
  v316[2] = v310;
  v316[3] = v311;
  v316[4] = v312;
  v316[5] = v313;
  v316[6] = v314;
  *(_OWORD *)(v316 + 7) = v368;
  *((_BYTE *)v316 + 72) = v315;
  return result;
}

uint64_t sub_24A1C8B08(uint64_t a1, uint64_t *a2, const char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t *v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint8_t *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_24A215A8C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_24A1B9D90();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  v11 = sub_24A215A74();
  v12 = sub_24A2160F8();
  if (os_log_type_enabled(v11, v12))
  {
    v20 = a3;
    v13 = a2;
    v14 = (uint8_t *)swift_slowAlloc();
    v15 = swift_slowAlloc();
    v21 = a1;
    v22 = v15;
    *(_DWORD *)v14 = 136315138;
    v19 = v14 + 4;
    sub_24A135F88(v13);
    v16 = sub_24A215D08();
    v21 = sub_24A148270(v16, v17, &v22);
    sub_24A216260();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24A12D000, v11, v12, v20, v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD0AAAC](v15, -1, -1);
    MEMORY[0x24BD0AAAC](v14, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t VAEspressoUtils.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t VAEspressoUtils.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_24A1C8CD4(int64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  int64_t v5;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v3;
  if (!(_DWORD)result || a1 > *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v3 + 16) <= a1)
      v5 = a1;
    else
      v5 = *(_QWORD *)(v3 + 16);
    return sub_24A148B80(result, v5, 0);
  }
  return result;
}

uint64_t sub_24A1C8D38(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = a4();
  sub_24A148270(v6, v7, a3);
  v8 = *a1 + 8;
  sub_24A216260();
  result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

unint64_t sub_24A1C8DAC()
{
  unint64_t result;

  result = qword_257910050;
  if (!qword_257910050)
  {
    result = MEMORY[0x24BD0A9EC](&protocol conformance descriptor for BlobType, &type metadata for BlobType);
    atomic_store(result, (unint64_t *)&qword_257910050);
  }
  return result;
}

uint64_t destroy for VAEspressoModel()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for VAEspressoModel(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VAEspressoModel(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

__n128 initializeWithTake for VAEspressoModel(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for VAEspressoModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for VAEspressoModel(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 73))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VAEspressoModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 73) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VAEspressoModel()
{
  return &type metadata for VAEspressoModel;
}

uint64_t storeEnumTagSinglePayload for BlobType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24A1C90C0 + 4 * byte_24A21DDC5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24A1C90F4 + 4 * byte_24A21DDC0[v4]))();
}

uint64_t sub_24A1C90F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A1C90FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A1C9104);
  return result;
}

uint64_t sub_24A1C9110(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A1C9118);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24A1C911C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A1C9124(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BlobType()
{
  return &type metadata for BlobType;
}

uint64_t type metadata accessor for VAEspressoUtils()
{
  return objc_opt_self();
}

uint64_t method lookup function for VAEspressoUtils()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_24A1C916C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24A1C9190()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24A1C91BC()
{
  return swift_deallocObject();
}

_BYTE **sub_24A1C91CC(_BYTE **result)
{
  uint64_t v1;
  _BYTE *v2;

  v2 = *result;
  *v2 = *(_BYTE *)(v1 + 16);
  *result = v2 + 1;
  return result;
}

uint64_t sub_24A1C91E0()
{
  return swift_deallocObject();
}

uint64_t sub_24A1C91F0(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return sub_24A1C8D38(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_24A1C91F8()
{
  return swift_deallocObject();
}

uint64_t sub_24A1C9208()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 16))
    return 4542017;
  else
    return 5591107;
}

uint64_t sub_24A1C922C()
{
  return swift_deallocObject();
}

uint64_t sub_24A1C923C()
{
  return swift_deallocObject();
}

uint64_t sub_24A1C924C()
{
  return swift_deallocObject();
}

uint64_t sub_24A1C925C()
{
  return swift_deallocObject();
}

uint64_t sub_24A1C926C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_24A1C9290()
{
  return swift_deallocObject();
}

uint64_t sub_24A1C92A0()
{
  return swift_deallocObject();
}

uint64_t sub_24A1C92B0()
{
  return swift_deallocObject();
}

uint64_t sub_24A1C92C0()
{
  return swift_deallocObject();
}

void sub_24A1C92D4(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t (*a4)(void))
{
  void *v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = (void *)a4();
  v7 = *a1 + 8;
  sub_24A216260();
  *a1 = v7;
  v8 = *a2;
  if (*a2)
  {
    *v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {

  }
}

void sub_24A1C9384(uint64_t *a1, _QWORD **a2, uint64_t a3)
{
  uint64_t v3;

  sub_24A1C92D4(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_24A1C938C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (*(_QWORD *)(v0 + 24))
  {
    v1 = *(_QWORD *)(v0 + 16);
    swift_bridgeObjectRetain();
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *sub_24A1C93C4()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

uint64_t sub_24A1C93EC()
{
  return swift_deallocObject();
}

uint64_t sub_24A1C93FC()
{
  return swift_deallocObject();
}

uint64_t sub_24A1C940C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24A1C9430()
{
  return swift_deallocObject();
}

uint64_t sub_24A1C9440()
{
  return swift_deallocObject();
}

uint64_t sub_24A1C9450()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + 16))();
  return _swift_stdlib_bridgeErrorToNSError();
}

double sub_24A1C9470@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_24A148970(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_24A1815A0();
      v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_24A170EFC((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v8), a3);
    sub_24A1C9560(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

unint64_t sub_24A1C9560(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_24A2162E4();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_24A216638();
        swift_bridgeObjectRetain();
        sub_24A215D50();
        v10 = sub_24A21665C();
        result = swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_OWORD *)(v12 + 16 * v3);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = (_OWORD *)(v15 + 32 * v3);
          v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= v17 + 2))
          {
            v9 = v17[1];
            *v16 = *v17;
            v16[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_24A1C9734()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;

  v1 = *v0;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v0 = v1;
  if ((result & 1) == 0)
    return sub_24A148B80(0, *(_QWORD *)(v1 + 16) + 1, 1);
  return result;
}

uint64_t sub_24A1C977C(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  if (result + 1 > (uint64_t)(v2 >> 1))
    return sub_24A148B80(v2 > 1, result + 1, 1);
  return result;
}

unint64_t sub_24A1C97A4(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = v4 | (v3 << 16);
    result = sub_24A215D74();
    if ((v6 & 1) != 0)
      result = v5;
    if (4 * v3 >= result >> 14)
      return sub_24A215E40();
  }
  __break(1u);
  return result;
}

unint64_t sub_24A1C9840()
{
  unint64_t result;

  result = qword_2579100F8;
  if (!qword_2579100F8)
  {
    result = MEMORY[0x24BD0A9EC](MEMORY[0x24BEE1E28], MEMORY[0x24BEE1E08]);
    atomic_store(result, (unint64_t *)&qword_2579100F8);
  }
  return result;
}

unint64_t sub_24A1C9884()
{
  unint64_t result;

  result = qword_257910100;
  if (!qword_257910100)
  {
    result = MEMORY[0x24BD0A9EC](MEMORY[0x24BEE0D40], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_257910100);
  }
  return result;
}

uint64_t sub_24A1C98C8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24A1C98EC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A1C98F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v3);
  v1 = MEMORY[0x24BD09774](v3, MEMORY[0x24BEE0D00]);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_24A1C9958()
{
  return swift_deallocObject();
}

uint64_t sub_24A1C9968()
{
  return swift_deallocObject();
}

uint64_t sub_24A1C9978()
{
  return swift_deallocObject();
}

uint64_t sub_24A1C9988()
{
  return swift_deallocObject();
}

uint64_t sub_24A1C9998()
{
  return swift_deallocObject();
}

float AVSConfig.rejectEnrollmentThreshold.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void AVSConfig.rejectEnrollmentThreshold.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t (*AVSConfig.rejectEnrollmentThreshold.modify())()
{
  return nullsub_1;
}

uint64_t AVSConfig.minEnrollmentsBeforeRejecting.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t AVSConfig.minEnrollmentsBeforeRejecting.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*AVSConfig.minEnrollmentsBeforeRejecting.modify())()
{
  return nullsub_1;
}

uint64_t AVSConfig.minDuration.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t AVSConfig.minDuration.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*AVSConfig.minDuration.modify())()
{
  return nullsub_1;
}

uint64_t AVSConfig.maxDuration.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t AVSConfig.maxDuration.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*AVSConfig.maxDuration.modify())()
{
  return nullsub_1;
}

uint64_t AVSConfig.resampleDuration.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t AVSConfig.streamingMinimumSilenceFrames.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t AVSConfig.streamingMinimumSpeechFrames.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

float AVSConfig.streamingSpeechThreshold.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 56);
}

uint64_t AVSConfig.streamingMinDuration.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t AVSConfig.streamingMaxDuration.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

uint64_t AVSConfig.enrollMinimumSilenceFrames.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

uint64_t AVSConfig.enrollMinimumSpeechFrames.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 88);
}

float AVSConfig.enrollSpeechThreshold.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 96);
}

uint64_t AVSConfig.enrollMinDuration.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 104);
}

uint64_t AVSConfig.recency.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 112);
}

uint64_t AVSConfig.maxSamplesPerEnrollment.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 120);
}

uint64_t (*AVSConfig.maxSamplesPerEnrollment.modify())()
{
  return nullsub_1;
}

void __swiftcall AVSConfig.init()(VoiceActions::AVSConfig *__return_ptr retstr)
{
  retstr->rejectEnrollmentThreshold = -25.0;
  *(_OWORD *)&retstr->minEnrollmentsBeforeRejecting = xmmword_24A21DE90;
  *(_OWORD *)&retstr->maxDuration = xmmword_24A21DEA0;
  *(_OWORD *)&retstr->streamingMinimumSilenceFrames = xmmword_24A21DEB0;
  retstr->streamingSpeechThreshold = 0.44;
  *(_OWORD *)&retstr->streamingMinDuration = xmmword_24A21DEC0;
  *(_OWORD *)&retstr->enrollMinimumSilenceFrames = xmmword_24A21DEB0;
  retstr->enrollSpeechThreshold = 0.44;
  *(_OWORD *)&retstr->enrollMinDuration = xmmword_24A21DED0;
  retstr->maxSamplesPerEnrollment = 160000;
}

void __swiftcall AVSConfig.getAVSEndpointerConfig()(VoiceActions::AVSEndpointerConfig *__return_ptr retstr)
{
  uint64_t v1;

  sub_24A173D8C(*(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112), (uint64_t)retstr, *(float *)(v1 + 96));
}

Swift::Void __swiftcall AVSConfig.setDetectionParams(rejectEnrollmentThreshold:minDuration:maxDuration:)(Swift::Float rejectEnrollmentThreshold, Swift::Int minDuration, Swift::Int maxDuration)
{
  uint64_t v3;

  *(Swift::Float *)v3 = rejectEnrollmentThreshold;
  *(_QWORD *)(v3 + 16) = minDuration;
  *(_QWORD *)(v3 + 24) = maxDuration;
}

Swift::Void __swiftcall AVSConfig.setEnrollmentParams(maxSamplesPerEnrollment:)(Swift::Int maxSamplesPerEnrollment)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 120) = maxSamplesPerEnrollment;
}

__n128 initializeWithCopy for AVSConfig(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t getEnumTagSinglePayload for AVSConfig(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 128))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AVSConfig(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 128) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AVSConfig()
{
  return &type metadata for AVSConfig;
}

void *sub_24A1C9C3C()
{
  return &unk_24A21DF30;
}

uint64_t static VAFlexibleKeywordSpotter.defaultPreSilenceCheckEnabled.getter()
{
  return 0;
}

void *sub_24A1C9C50()
{
  return &unk_24A21DF31;
}

uint64_t static VAFlexibleKeywordSpotter.defaultPostSilenceCheckEnabled.getter()
{
  return 0;
}

void *sub_24A1C9C64()
{
  return &unk_24A21DF32;
}

uint64_t static VAFlexibleKeywordSpotter.defaultDuringSpeechCheckEnabled.getter()
{
  return 0;
}

id VAFlexibleKeywordSpotter.__allocating_init(delegate:verifier:encoder:configuration:strategyProvider:runtimeParametersFactory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_class *v6;
  id v13;
  id v14;

  v13 = objc_allocWithZone(v6);
  v14 = sub_24A1CA780(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  return v14;
}

id VAFlexibleKeywordSpotter.init(delegate:verifier:encoder:configuration:strategyProvider:runtimeParametersFactory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v6;

  v6 = sub_24A1CA780(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  return v6;
}

uint64_t *sub_24A1C9D5C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  const char *v54;
  _QWORD *v55;
  _QWORD v57[2];
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  char v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  char v80;
  char v81;
  int v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  char v87;
  char v88;
  char v89;
  char v90;
  char v91;
  char v92;
  int v93;
  int v94;

  v3 = v2;
  v4 = v1;
  v6 = sub_24A135F88(&qword_25790A7C0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)a1;
  v10 = *(_DWORD *)(a1 + 8);
  v11 = *(unsigned __int8 *)(a1 + 12);
  v12 = *(unsigned __int8 *)(a1 + 13);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(unsigned __int8 *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(unsigned __int8 *)(a1 + 48);
  v18 = *(unsigned __int8 *)(a1 + 49);
  v19 = *(_DWORD *)(a1 + 52);
  v20 = *(unsigned __int8 *)(a1 + 56);
  v21 = *(_QWORD *)(a1 + 64);
  v22 = *(_QWORD *)(a1 + 72);
  v23 = *(unsigned __int8 *)(a1 + 80);
  v24 = *(unsigned __int8 *)(a1 + 81);
  v25 = *(unsigned __int8 *)(a1 + 82);
  v26 = *(unsigned __int8 *)(a1 + 83);
  v27 = *(unsigned __int8 *)(a1 + 84);
  v28 = *(unsigned __int8 *)(a1 + 85);
  v29 = *(unsigned __int8 *)(a1 + 86);
  v73 = v10;
  v74 = v11;
  v75 = v12;
  v61 = v13;
  v76 = v13;
  v77 = v14;
  v60 = v14;
  v93 = v17;
  v94 = v15;
  v78 = v15;
  v71 = v16;
  v72 = v9;
  v79 = v16;
  v80 = v17;
  v70 = v18;
  v81 = v18;
  v82 = v19;
  v83 = v20;
  v69 = v21;
  v84 = v21;
  v85 = v22;
  v67 = v24;
  v68 = v23;
  v86 = v23;
  v87 = v24;
  v65 = v26;
  v66 = v25;
  v88 = v25;
  v89 = v26;
  v63 = v28;
  v64 = v27;
  v90 = v27;
  v91 = v28;
  v62 = v29;
  v92 = v29;
  v30 = &v72;
  if ((VARuntimeParameters.allKeywordsAreValid.getter() & 1) == 0)
  {
    sub_24A14C404();
    swift_allocError();
    v53 = 0xD00000000000006DLL;
    v54 = "Keywords should be lower case and should not contain spaces to ensure model compatibility and API consistency";
LABEL_13:
    *v52 = v53;
    v52[1] = (unint64_t)(v54 - 32) | 0x8000000000000000;
    swift_willThrow();
    return v30;
  }
  if (v20)
  {
    v30 = *(uint64_t **)((char *)v4 + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_encoderModel);
    type metadata accessor for VAFeatureExtractingEncoder();
    v31 = swift_dynamicCastClass();
    if (v31)
    {
      if (!*(_QWORD *)(v31 + 64))
      {
        sub_24A14C404();
        swift_allocError();
        v53 = 0xD00000000000003BLL;
        v54 = "Inference is gated by VAD, but VAD model is not initialized";
        goto LABEL_13;
      }
    }
  }
  v57[0] = v8;
  v57[1] = v3;
  type metadata accessor for VARequestContext();
  v32 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v33 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v4) + 0x78))();
  v72 = v9;
  v73 = v10;
  v74 = v11;
  v75 = v12;
  v59 = v12;
  v34 = v61;
  v58 = v11;
  v35 = v60;
  v76 = v61;
  v77 = v60;
  v78 = v94;
  v79 = v71;
  v80 = v93;
  v81 = v70;
  v82 = v19;
  v83 = v20;
  v84 = v69;
  v85 = v22;
  v86 = v68;
  v87 = v67;
  v88 = v66;
  v89 = v65;
  v90 = v64;
  v91 = v63;
  v92 = v62;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v36 = sub_24A167FE8(v33, &v72);
  (*(void (**)(uint64_t))((*v32 & *v4) + 0x120))(v36);
  v37 = *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_strategyProvider + 24);
  v38 = *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_strategyProvider + 32);
  sub_24A14B668((uint64_t *)((char *)v4 + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_strategyProvider), v37);
  v72 = v9;
  v73 = v10;
  v74 = v58;
  v39 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v75 = v59;
  v76 = v34;
  v77 = v35;
  v78 = v94;
  v79 = v71;
  v80 = v93;
  v81 = v70;
  v82 = v19;
  v83 = v20;
  v84 = v69;
  v85 = v22;
  v86 = v68;
  v87 = v67;
  v88 = v66;
  v89 = v65;
  v90 = v64;
  v91 = v63;
  v92 = v62;
  v40 = (*(uint64_t (**)(uint64_t *, _UNKNOWN **, uint64_t *, uint64_t, uint64_t))(v38 + 8))(v4, &protocol witness table for VAKeywordSpotterBase, &v72, v37, v38);
  (*(void (**)(uint64_t))((*v39 & *v4) + 0x150))(v40);
  v41 = (uint64_t *)((char *)v4 + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_encodingSet);
  swift_beginAccess();
  *v41 = MEMORY[0x24BEE4AF8];
  v42 = swift_bridgeObjectRelease();
  v43 = v39;
  v30 = v4;
  v44 = (*(uint64_t (**)(uint64_t))((*v39 & *v4) + 0x118))(v42);
  if (!v44)
  {
    sub_24A14C404();
    swift_allocError();
    v53 = 0xD00000000000001DLL;
    v54 = "Failed to create request info";
    goto LABEL_13;
  }
  v45 = v44;
  v46 = sub_24A215F78();
  v47 = v57[0];
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v57[0], 1, 1, v46);
  v48 = (_QWORD *)swift_allocObject();
  v48[2] = 0;
  v48[3] = 0;
  v48[4] = v4;
  v48[5] = v45;
  v30 = v4;
  swift_retain();
  v49 = sub_24A152B18(v47, (uint64_t)&unk_257910120, (uint64_t)v48);
  v50 = (*(uint64_t (**)(uint64_t))((*v43 & *v30) + 0x138))(v49);
  v51 = (*(uint64_t (**)(uint64_t))((*v43 & *v30) + 0x130))(v50);
  if (v51)
  {
    v30 = (uint64_t *)v51;
  }
  else
  {
    sub_24A14C404();
    swift_allocError();
    *v55 = 0xD00000000000001DLL;
    v55[1] = 0x800000024A2213B0;
    swift_willThrow();
  }
  swift_release();
  return v30;
}

uint64_t sub_24A1CA2F8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;

  v1[3] = a1;
  v2 = sub_24A215A8C();
  v1[4] = v2;
  v1[5] = *(_QWORD *)(v2 - 8);
  v1[6] = swift_task_alloc();
  v3 = (_QWORD *)swift_task_alloc();
  v1[7] = v3;
  *v3 = v1;
  v3[1] = sub_24A1527E8;
  return sub_24A1CABA0();
}

uint64_t sub_24A1CA36C()
{
  uint64_t v0;

  swift_release();
  swift_release();
  sub_24A14D184(v0 + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_strategyProvider);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

id VAFlexibleKeywordSpotter.__deallocating_deinit()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  objc_class *v10;
  objc_super v12;

  v1 = v0;
  v2 = sub_24A215A8C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_24A1B9D90();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  v7 = sub_24A215A74();
  v8 = sub_24A2160F8();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_24A12D000, v7, v8, "deInit keyword spotter", v9, 2u);
    MEMORY[0x24BD0AAAC](v9, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v10 = (objc_class *)type metadata accessor for VAFlexibleKeywordSpotter();
  v12.receiver = v1;
  v12.super_class = v10;
  return objc_msgSendSuper2(&v12, sel_dealloc);
}

void sub_24A1CA574(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_encodingSet);
  swift_beginAccess();
  *v3 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
  sub_24A1EFAC0(a1);
}

void sub_24A1CA5DC()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_24A1CA608(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x24BEE4AF8];
    v8 = v5;
    if (v5 <= 0)
    {
      v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = a2 + 8 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8)
          goto LABEL_19;
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      sub_24A135F88(&qword_25790BE68);
      v9 = (_QWORD *)swift_allocObject();
      v10 = j__malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 25;
      v9[2] = v5;
      v9[3] = (2 * (v11 >> 3)) | 1;
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = sub_24A21644C();
  __break(1u);
  return result;
}

id sub_24A1CA780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[5];

  *(_QWORD *)(v6 + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_previousKeywordTime) = 0;
  v11 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v6 + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_keywordCallbackDelays) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v6 + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_keywordCallbackDelayMax) = 0;
  *(_QWORD *)(v6 + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_keywordCallbackDelayMin) = 0;
  *(_QWORD *)(v6 + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_keywordCallbackDelayAvg) = 0;
  *(_QWORD *)(v6 + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_encodingSet) = v11;
  *(_QWORD *)(v6 + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_verifierModel) = a2;
  *(_QWORD *)(v6 + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_encoderModel) = a3;
  sub_24A152310(a5, v6 + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_strategyProvider);
  sub_24A1CBA64(a6, (uint64_t)&v16);
  if (v17)
  {
    sub_24A13DB20(&v16, (uint64_t)v18);
    swift_retain();
    swift_retain();
  }
  else
  {
    v12 = type metadata accessor for VARuntimeParametersFactoryDummy();
    swift_retain();
    swift_retain();
    v13 = sub_24A1801F4();
    v18[3] = v12;
    v18[4] = &protocol witness table for VARuntimeParametersFactoryDummy;
    v18[0] = v13;
    sub_24A13DAA8((uint64_t)&v16, &qword_257910190);
  }
  v14 = sub_24A1ED848(a1, a4, (uint64_t)v18);
  sub_24A13DAA8(a6, &qword_257910190);
  sub_24A14D184(a5);
  return v14;
}

uint64_t sub_24A1CA90C()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24A1CA940(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_24A152AD0;
  return sub_24A1CA2F8(a1);
}

uint64_t type metadata accessor for VAFlexibleKeywordSpotter()
{
  return objc_opt_self();
}

uint64_t method lookup function for VAFlexibleKeywordSpotter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAFlexibleKeywordSpotter.__allocating_init(delegate:verifier:encoder:configuration:strategyProvider:runtimeParametersFactory:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 768))();
}

uint64_t sub_24A1CA9DC(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (result < 0)
  {
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v5 = sub_24A216410();
    result = swift_bridgeObjectRelease();
    v6 = -v5;
    if (!__OFSUB__(0, v5))
      goto LABEL_4;
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v2 = a2;
  v3 = result;
  v4 = a2 >> 62;
  if (a2 >> 62)
    goto LABEL_25;
  v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = -v5;
  if (__OFSUB__(0, v5))
    goto LABEL_27;
LABEL_4:
  v7 = -v3;
  if (v6 > 0 || v6 <= v7)
  {
    v8 = v5 - v3;
    if (__OFADD__(v5, v7))
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    if (v5 < v8)
    {
LABEL_34:
      __break(1u);
      return result;
    }
    if (!v4)
    {
LABEL_8:
      v9 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_13;
    }
  }
  else
  {
    if (v5 < 0)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    v8 = 0;
    if (!v4)
      goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  v9 = sub_24A216410();
  result = swift_bridgeObjectRelease();
LABEL_13:
  if (v9 < v8)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v8 < 0)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v4)
  {
    swift_bridgeObjectRetain();
    v10 = sub_24A216410();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v10 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v10 < v5)
    goto LABEL_30;
  if (v5 < 0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v4)
  {
    swift_bridgeObjectRetain();
    v11 = sub_24A21641C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  return v11;
}

uint64_t sub_24A1CABA0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[34] = v0;
  v2 = sub_24A215A8C();
  v1[35] = v2;
  v1[36] = *(_QWORD *)(v2 - 8);
  v1[37] = swift_task_alloc();
  v1[38] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_24A1CAC10()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t *__return_ptr);
  unint64_t *v22;
  unint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v29;
  _QWORD *v30;
  uint64_t (*v31)(void);
  uint64_t (*v32)(void);
  uint64_t v33;
  int v34;
  char v35;
  char v36;
  __int128 v37;
  char v38;
  uint64_t v39;
  char v40;
  char v41;
  int v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  uint64_t v52;
  int v53;
  char v54;
  char v55;
  __int128 v56;
  char v57;
  uint64_t v58;
  char v59;
  char v60;
  int v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  __int16 v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;

  v1 = v0[38];
  v2 = v0[35];
  v3 = v0[36];
  v4 = sub_24A1B9D90();
  v0[39] = v4;
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[40] = v5;
  v5(v1, v4, v2);
  v6 = sub_24A215A74();
  v7 = sub_24A2160F8();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_24A12D000, v6, v7, "Entering StartProcessingAudioToAudio()", v8, 2u);
    MEMORY[0x24BD0AAAC](v8, -1, -1);
  }
  v9 = v0[38];
  v10 = v0[35];
  v11 = v0[36];
  v12 = (_QWORD *)v0[34];

  v13 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
  v0[41] = v13;
  v14 = v13(v9, v10);
  v15 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v16 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v12) + 0x148))(v14);
  v17 = swift_release();
  if (!v16)
  {
    sub_24A14C404();
    swift_allocError();
    v23 = 0xD000000000000016;
    v24 = "Invalid strategy layer";
LABEL_8:
    *v22 = v23;
    v22[1] = (unint64_t)(v24 - 32) | 0x8000000000000000;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    v31 = (uint64_t (*)(void))v0[1];
    return v31();
  }
  v18 = (*(uint64_t (**)(uint64_t))((*v15 & *(_QWORD *)v0[34]) + 0x118))(v17);
  v0[42] = v18;
  if (!v18)
  {
    sub_24A14C404();
    swift_allocError();
    v23 = 0xD000000000000014;
    v24 = "Invalid request info";
    goto LABEL_8;
  }
  v19 = v18;
  v20 = *(_QWORD *)(v0[34] + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_encoderModel);
  v0[43] = v20;
  v21 = *(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v18 + 280);
  v0[44] = v21;
  v21(&v33);
  v52 = v33;
  v53 = v34;
  v54 = v35;
  v55 = v36;
  v56 = v37;
  v57 = v38;
  v58 = v39;
  v59 = v40;
  v60 = v41;
  v61 = v42;
  v62 = v43;
  v63 = v44;
  v64 = v45;
  v65 = v46;
  v66 = v47;
  v67 = v48;
  v68 = v49;
  v69 = v50;
  v70 = v51;
  (*(void (**)(uint64_t *))(*(_QWORD *)v20 + 96))(&v52);
  v25 = v0[34];
  swift_bridgeObjectRelease();
  v26 = swift_bridgeObjectRelease();
  v27 = *(_QWORD *)(v25 + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_verifierModel);
  v0[45] = v27;
  ((void (*)(uint64_t *__return_ptr, uint64_t))v21)(&v33, v26);
  v52 = v33;
  v53 = v34;
  v54 = v35;
  v55 = v36;
  v56 = v37;
  v57 = v38;
  v58 = v39;
  v59 = v40;
  v60 = v41;
  v61 = v42;
  v62 = v43;
  v63 = v44;
  v64 = v45;
  v65 = v46;
  v66 = v47;
  v67 = v48;
  v68 = v49;
  v69 = v50;
  v70 = v51;
  (*(void (**)(uint64_t *))(*(_QWORD *)v27 + 88))(&v52);
  v0[46] = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v29 = *(int **)(*(_QWORD *)v19 + 336);
  v0[47] = v29;
  v32 = (uint64_t (*)(void))((char *)v29 + *v29);
  v30 = (_QWORD *)swift_task_alloc();
  v0[48] = v30;
  *v30 = v0;
  v30[1] = sub_24A1CB01C;
  v31 = v32;
  return v31();
}

uint64_t sub_24A1CB01C(char a1)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 103) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24A1CB078()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t (*v3)(void);
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v1 = *(_QWORD **)(v0 + 272);
  if (*(_BYTE *)(v0 + 103) == 1)
  {
    v2 = (_QWORD *)((char *)v1 + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_encodingSet);
    swift_beginAccess();
    *v2 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & *v1) + 0x200))(0);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    v3 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    v4 = OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_encodingSet;
    *(_QWORD *)(v0 + 392) = *(_QWORD *)(**(_QWORD **)(v0 + 336) + 352);
    *(_QWORD *)(v0 + 400) = v4;
    swift_beginAccess();
    *(_QWORD *)(v0 + 408) = *(_QWORD *)(v0 + 368);
    v7 = (uint64_t (*)(void))(**(int **)(v0 + 392) + *(_QWORD *)(v0 + 392));
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 416) = v5;
    *v5 = v0;
    v5[1] = sub_24A1CB1C0;
    v3 = v7;
  }
  return v3();
}

uint64_t sub_24A1CB1C0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 424) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24A1CB21C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  _QWORD *v26;
  uint64_t v27;
  float v28;
  unsigned int v29;
  char v30;
  char v31;
  uint64_t (*v32)(uint64_t);
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, _QWORD);
  uint64_t v59;
  uint64_t (*v60)(void);
  void (*v62)(uint64_t);
  uint64_t v63;
  _QWORD *v64;
  int *v65;
  _QWORD *v66;
  uint64_t (*v67)(void);
  uint64_t v68;

  v1 = MEMORY[0x24BEE4AF8];
  if (*(_QWORD *)(v0 + 424))
    v2 = *(_QWORD *)(v0 + 424);
  else
    v2 = MEMORY[0x24BEE4AF8];
  if (!*(_QWORD *)(v2 + 16))
  {
    v5 = *(_QWORD *)(v0 + 312);
    v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 320);
    v7 = *(_QWORD *)(v0 + 296);
    v8 = *(_QWORD *)(v0 + 280);
    swift_bridgeObjectRelease();
    v6(v7, v5, v8);
    v9 = sub_24A215A74();
    v10 = sub_24A2160F8();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_24A12D000, v9, v10, "processing was stopped, stop predictions", v11, 2u);
      MEMORY[0x24BD0AAAC](v11, -1, -1);
    }
    v12 = *(void (**)(uint64_t, uint64_t))(v0 + 328);
    v13 = *(_QWORD *)(v0 + 296);
    v14 = *(_QWORD *)(v0 + 280);

    v12(v13, v14);
    v15 = *(_QWORD **)(v0 + 272);
    v16 = (_QWORD *)((char *)v15 + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_encodingSet);
    swift_beginAccess();
    *v16 = v1;
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & *v15) + 0x200))(0);
    goto LABEL_30;
  }
  v3 = *(_QWORD *)(v0 + 408);
  v4 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v0 + 344) + 80))(v2);
  if (v3)
  {
    swift_bridgeObjectRelease();
LABEL_30:
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    v60 = *(uint64_t (**)(void))(v0 + 8);
    return v60();
  }
  v17 = v4;
  v18 = *(void (**)(uint64_t))(v0 + 352);
  v19 = swift_bridgeObjectRelease();
  v18(v19);
  v20 = *(unsigned __int8 *)(v0 + 72);
  swift_bridgeObjectRelease();
  v21 = swift_bridgeObjectRelease();
  v22 = (_QWORD *)MEMORY[0x24BEE4EA0];
  if (v20 == 1)
  {
    type metadata accessor for VAFeatureExtractingEncoderOutput();
    swift_unknownObjectRetain();
    v23 = swift_dynamicCastClass();
    if (!v23)
    {
      swift_unknownObjectRelease();
      sub_24A14C404();
      swift_allocError();
      *v64 = 0xD00000000000003BLL;
      v64[1] = 0x800000024A226440;
      swift_willThrow();
      swift_unknownObjectRelease();
      goto LABEL_30;
    }
    v24 = *(_QWORD *)(v23 + 32);
    if (v24)
    {
      v25 = *(void (**)(uint64_t))(v0 + 352);
      v26 = *(_QWORD **)(v0 + 272);
      v27 = swift_bridgeObjectRetain();
      v25(v27);
      v28 = *(float *)(v0 + 156);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v29 = (*(uint64_t (**)(uint64_t, float))((*v22 & *v26) + 0x208))(v24, v28);
      swift_bridgeObjectRelease();
      LODWORD(v24) = (v29 >> 8) & 1;
    }
    v30 = (*(uint64_t (**)(void))((*v22 & **(_QWORD **)(v0 + 272)) + 0x178))();
    v21 = swift_unknownObjectRelease();
    v31 = (v30 | v24) ^ 1;
  }
  else
  {
    v31 = 0;
  }
  v32 = *(uint64_t (**)(uint64_t))((*v22 & **(_QWORD **)(v0 + 272)) + 0x78);
  v33 = (_QWORD *)v32(v21);
  v34 = (_QWORD *)(*(uint64_t (**)(void))((*v22 & *v33) + 0x80))();

  v35 = (*(uint64_t (**)(void))((*v22 & *v34) + 0xE8))();
  v36 = (uint64_t *)(*(_QWORD *)(v0 + 272) + *(_QWORD *)(v0 + 400));
  if (v35 == 1)
  {
    sub_24A135F88(&qword_25790BE68);
    v37 = swift_allocObject();
    *(_OWORD *)(v37 + 16) = xmmword_24A21AA60;
    *(_QWORD *)(v37 + 32) = v17;
    v68 = v37;
    sub_24A215EB8();
    *v36 = v68;
    swift_unknownObjectRetain();
    goto LABEL_29;
  }
  swift_beginAccess();
  v38 = swift_unknownObjectRetain();
  MEMORY[0x24BD09750](v38);
  if (*(_QWORD *)((*v36 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v36 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_24A215ED0();
  v39 = (unint64_t *)(*(_QWORD *)(v0 + 272) + *(_QWORD *)(v0 + 400));
  sub_24A215F0C();
  sub_24A215EB8();
  swift_endAccess();
  v40 = *v39;
  v41 = swift_bridgeObjectRetain();
  v42 = (_QWORD *)v32(v41);
  v43 = (_QWORD *)(*(uint64_t (**)(void))((*v22 & *v42) + 0x80))();

  v44 = (*(uint64_t (**)(void))((*v22 & *v43) + 0xE8))();
  v45 = sub_24A1CA9DC(v44, v40);
  v47 = v46;
  v49 = v48;
  v51 = v50;
  swift_bridgeObjectRelease();
  if ((v51 & 1) != 0)
  {
    sub_24A2165C0();
    swift_unknownObjectRetain_n();
    v53 = swift_dynamicCastClass();
    if (!v53)
    {
      swift_unknownObjectRelease();
      v53 = MEMORY[0x24BEE4AF8];
    }
    v54 = *(_QWORD *)(v53 + 16);
    swift_release();
    if (__OFSUB__(v51 >> 1, v49))
    {
      __break(1u);
    }
    else if (v54 == (v51 >> 1) - v49)
    {
      v52 = swift_dynamicCastClass();
      if (!v52)
      {
        swift_unknownObjectRelease();
        v52 = MEMORY[0x24BEE4AF8];
      }
      goto LABEL_28;
    }
    swift_unknownObjectRelease();
  }
  v52 = sub_24A1CA608(v45, v47, v49, v51);
LABEL_28:
  v55 = *(_QWORD *)(v0 + 400);
  v56 = *(_QWORD *)(v0 + 272);
  swift_unknownObjectRelease();
  *(_QWORD *)(v56 + v55) = v52;
LABEL_29:
  v57 = *(_QWORD *)(v0 + 360);
  swift_bridgeObjectRelease();
  v58 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)v57 + 80);
  v59 = swift_bridgeObjectRetain();
  v58(v59, v31 & 1);
  swift_bridgeObjectRelease();
  if (!VAVerifierModelOutput.isNone.getter())
  {
    v62 = *(void (**)(uint64_t))((*v22 & **(_QWORD **)(v0 + 272)) + 0x210);
    v63 = swift_retain();
    v62(v63);
    swift_release();
  }
  *(_QWORD *)(v0 + 432) = 0;
  v65 = *(int **)(v0 + 376);
  swift_unknownObjectRelease();
  swift_release();
  v67 = (uint64_t (*)(void))((char *)v65 + *v65);
  v66 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 440) = v66;
  *v66 = v0;
  v66[1] = sub_24A1CB8EC;
  v60 = v67;
  return v60();
}

uint64_t sub_24A1CB8EC(char a1)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 191) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24A1CB948()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t (*v3)(void);
  _QWORD *v4;
  uint64_t (*v6)(void);

  if (*(_BYTE *)(v0 + 191) == 1)
  {
    v1 = *(_QWORD **)(v0 + 272);
    v2 = (_QWORD *)((char *)v1 + OBJC_IVAR____TtC12VoiceActions24VAFlexibleKeywordSpotter_encodingSet);
    swift_beginAccess();
    *v2 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & *v1) + 0x200))(0);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    v3 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    *(_QWORD *)(v0 + 408) = *(_QWORD *)(v0 + 432);
    v6 = (uint64_t (*)(void))(**(int **)(v0 + 392) + *(_QWORD *)(v0 + 392));
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 416) = v4;
    *v4 = v0;
    v4[1] = sub_24A1CB1C0;
    v3 = v6;
  }
  return v3();
}

uint64_t sub_24A1CBA64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_24A135F88(&qword_257910190);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t VAA2AAudioEncoderModelV2.__allocating_init(computeUnits:)(char *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  VAA2AAudioEncoderModelV2.init(computeUnits:)(a1);
  return v2;
}

uint64_t VAA2AAudioEncoderModelV2.init(computeUnits:)(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  id v9;
  uint64_t v10;
  char v11;
  char v12;
  id v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;

  v3 = v1;
  v5 = type metadata accessor for VASignpostInterval();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  type metadata accessor for VALog();
  v18 = 0;
  v19 = 0xE000000000000000;
  sub_24A216308();
  sub_24A215D98();
  LOBYTE(v16) = v8;
  sub_24A2163D4();
  static VALog.begin(_:_:)("VoiceActions", 12, 2u, v18, v19, (uint64_t)v7);
  swift_bridgeObjectRelease();
  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBFFE0]), sel_init);
  v21 = v8;
  v20 = 0;
  sub_24A180568();
  sub_24A215E64();
  sub_24A215E64();
  if (v18 == v16 && v19 == v17)
  {
    swift_bridgeObjectRelease_n();
    v10 = 0;
  }
  else
  {
    v11 = sub_24A21659C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0)
    {
      v10 = 0;
    }
    else
    {
      v21 = v8;
      v20 = 1;
      sub_24A215E64();
      sub_24A215E64();
      if (v18 == v16 && v19 == v17)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v12 = sub_24A21659C();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v12 & 1) == 0)
          goto LABEL_12;
      }
      v10 = 3;
    }
  }
  objc_msgSend(v9, sel_setComputeUnits_, v10);
LABEL_12:
  type metadata accessor for quant_enc_f32_wofeats();
  v13 = v9;
  v14 = sub_24A18B9F8(v13);
  if (v2)
  {

    sub_24A18EDEC((uint64_t)v7);
    type metadata accessor for VAA2AAudioEncoderModelV2();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v14;
    VASignpostInterval.end(_:)((Swift::String_optional)0);

    sub_24A18EDEC((uint64_t)v7);
  }
  return v3;
}

uint64_t type metadata accessor for VAA2AAudioEncoderModelV2()
{
  return objc_opt_self();
}

uint64_t sub_24A1CBDFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;

  v3 = v1;
  sub_24A135F88(&qword_25790BE68);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_24A21AA50;
  v6 = *(_QWORD *)(a1 + 16);
  result = sub_24A216074();
  *(_QWORD *)(v5 + 32) = result;
  if (v6)
  {
    *(_QWORD *)(v5 + 40) = sub_24A216074();
    sub_24A215EB8();
    v8 = objc_allocWithZone(MEMORY[0x24BDBFFF8]);
    result = (uint64_t)sub_24A17F3CC(v5, 65568);
    if (!v2)
    {
      v24 = (void *)result;
      v23 = v3;
      swift_bridgeObjectRetain();
      v9 = 0;
      v10 = a1 + 32;
      do
      {
        v11 = *(_QWORD *)(*(_QWORD *)(v10 + 8 * v9) + 16);
        if (v11)
        {
          swift_bridgeObjectRetain();
          for (i = 0; i != v11; ++i)
          {
            v13 = swift_allocObject();
            *(_OWORD *)(v13 + 16) = xmmword_24A21AA50;
            *(_QWORD *)(v13 + 32) = sub_24A216074();
            *(_QWORD *)(v13 + 40) = sub_24A216074();
            sub_24A215EB8();
            v14 = (void *)sub_24A21602C();
            sub_24A170EC0();
            v15 = (void *)sub_24A215E94();
            swift_bridgeObjectRelease();
            objc_msgSend(v24, sel_setObject_forKeyedSubscript_, v14, v15);

          }
          swift_bridgeObjectRelease();
          v10 = a1 + 32;
        }
        ++v9;
      }
      while (v9 != v6);
      swift_bridgeObjectRelease();
      type metadata accessor for quant_enc_f32_wofeatsInput();
      v16 = v24;
      v17 = sub_24A18CC94();
      v18 = (*(uint64_t (**)(void))(*(_QWORD *)v23 + 88))();
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 136))(v17);
      v20 = swift_release();
      v21 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 88))(v20);
      swift_release();
      v22 = sub_24A17F39C(v21);

      swift_release();
      return v22;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t VAA2AAudioEncoderModelV2.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t VAA2AAudioEncoderModelV2.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t method lookup function for VAA2AAudioEncoderModelV2()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAA2AAudioEncoderModelV2.__allocating_init(computeUnits:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of VAA2AAudioEncoderModelV2.predict(featureExtractionBuffer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

void *sub_24A1CC138()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR___G2PFactoredObjc_g2p);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void sub_24A1CC184(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR___G2PFactoredObjc_g2p);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*sub_24A1CC1D4())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_24A1CC218()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for G2PFactored();
  v2 = (*(uint64_t (**)(void))(v1 + 80))();
  return (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v0) + 0x68))(v2);
}

uint64_t sub_24A1CC2D0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t);
  _QWORD *v59;
  uint64_t v60;
  char v61[16];
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;

  v6 = v5;
  v52 = a5;
  v60 = a4;
  v57 = a3;
  v9 = sub_24A215690();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = a1;
  v64 = a2;
  sub_24A215660();
  sub_24A14C688();
  v13 = sub_24A21629C();
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v63 = 32;
  v64 = 0xE100000000000000;
  v62 = &v63;
  swift_bridgeObjectRetain();
  v16 = sub_24A147840(0x7FFFFFFFFFFFFFFFLL, 1, sub_24A14D1E0, (uint64_t)v61, v13, v15);
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(v16 + 16);
  if (!v17)
  {
    v19 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if ((v52 & 1) != 0)
      goto LABEL_17;
LABEL_20:
    swift_bridgeObjectRelease();
    if (v19[2])
    {
      v63 = (uint64_t)v19;
      sub_24A135F88(&qword_257909948);
      sub_24A16BCE4((unint64_t *)&qword_257909978, &qword_257909948, MEMORY[0x24BEE12B0]);
      v48 = sub_24A215C60();
      swift_bridgeObjectRelease();
      return v48;
    }
LABEL_23:
    swift_bridgeObjectRelease();
    return 0;
  }
  v58 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v6) + 0x88);
  v56 = (char *)v6 + OBJC_IVAR___G2PFactoredObjc_logger;
  swift_bridgeObjectRetain();
  v51 = v16;
  v18 = (uint64_t *)(v16 + 56);
  v19 = (_QWORD *)MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v20 = 136315138;
  v54 = v20;
  v53 = MEMORY[0x24BEE4AD8] + 8;
  v59 = v6;
  do
  {
    v22 = *(v18 - 3);
    v21 = *(v18 - 2);
    v23 = *(v18 - 1);
    v24 = *v18;
    swift_bridgeObjectRetain();
    v25 = MEMORY[0x24BD095F4](v22, v21, v23, v24);
    v26 = v58(v25);
    v28 = v27;
    swift_bridgeObjectRelease();
    if (v28)
    {
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v19 = sub_24A14804C(0, v19[2] + 1, 1, v19);
      v30 = v19[2];
      v29 = v19[3];
      v31 = v30 + 1;
      if (v30 >= v29 >> 1)
        v19 = sub_24A14804C((_QWORD *)(v29 > 1), v30 + 1, 1, v19);
      v19[2] = v31;
      v32 = &v19[2 * v30];
      v32[4] = v26;
      v32[5] = v28;
      v33 = v19[3];
      swift_bridgeObjectRetain();
      if (v31 >= v33 >> 1)
        v19 = sub_24A14804C((_QWORD *)(v33 > 1), v30 + 2, 1, v19);
      v19[2] = v30 + 2;
      v34 = &v19[2 * v31];
      v35 = v60;
      v34[4] = v57;
      v34[5] = v35;
    }
    else
    {
      swift_bridgeObjectRetain();
      v36 = sub_24A215A74();
      v37 = sub_24A216104();
      if (os_log_type_enabled(v36, v37))
      {
        v38 = swift_slowAlloc();
        v55 = swift_slowAlloc();
        v63 = v55;
        *(_DWORD *)v38 = v54;
        swift_bridgeObjectRetain();
        v39 = MEMORY[0x24BD095F4](v22, v21, v23, v24);
        v41 = v40;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v38 + 4) = sub_24A148270(v39, v41, &v63);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_24A12D000, v36, v37, "Word did not generate any phonemes : %s", (uint8_t *)v38, 0xCu);
        v42 = v55;
        swift_arrayDestroy();
        MEMORY[0x24BD0AAAC](v42, -1, -1);
        MEMORY[0x24BD0AAAC](v38, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

    }
    v18 += 4;
    --v17;
  }
  while (v17);
  v16 = v51;
  swift_bridgeObjectRelease();
  if ((v52 & 1) == 0)
    goto LABEL_20;
LABEL_17:
  if (!v19[2])
  {
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  v63 = v16;
  sub_24A135F88(&qword_25790A498);
  sub_24A16BCE4(&qword_257910258, &qword_25790A498, MEMORY[0x24BEE12C8]);
  sub_24A186988();
  v43 = sub_24A215E58();
  v45 = v44;
  swift_bridgeObjectRelease();
  v63 = v43;
  v64 = v45;
  swift_bridgeObjectRetain();
  sub_24A215D98();
  swift_bridgeObjectRelease();
  v47 = v63;
  v46 = v64;
  v63 = (uint64_t)v19;
  sub_24A135F88(&qword_257909948);
  sub_24A16BCE4((unint64_t *)&qword_257909978, &qword_257909948, MEMORY[0x24BEE12B0]);
  sub_24A215C60();
  swift_bridgeObjectRelease();
  v63 = v47;
  v64 = v46;
  swift_bridgeObjectRetain();
  sub_24A215D98();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v63;
}

uint64_t sub_24A1CC91C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;

  v5 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v6 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v2) + 0x60))();
  if (!v6)
    return 0;
  v7 = v6;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))((*v5 & *v6) + 0x58))(a1, a2);

  return v8;
}

id G2P.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id G2P.init()()
{
  void *v0;
  char *v1;
  objc_super v3;

  v1 = v0;
  sub_24A215A80();
  *(_QWORD *)&v1[OBJC_IVAR___G2PFactoredObjc_g2p] = 0;

  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for G2P();
  return objc_msgSendSuper2(&v3, sel_init);
}

id G2P.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for G2P();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for G2P()
{
  uint64_t result;

  result = qword_25791B850;
  if (!qword_25791B850)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_24A1CCC64()
{
  return type metadata accessor for G2P();
}

uint64_t sub_24A1CCC6C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_24A215A8C();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for G2P()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of G2P.setup()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of G2P.getPhrasePronounciation(phrase:wordSep:prefixWithPhrase:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of G2P.getPronounciation(word:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
}

uint64_t sub_24A1CCDC0()
{
  uint64_t v0;

  v0 = sub_24A18C830((uint64_t)&unk_251B9DEF0);
  swift_arrayDestroy();
  return v0;
}

uint64_t sub_24A1CCE64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v21 = a1;
  v20 = a2;
  v8 = sub_24A135F88(&qword_25790F6B0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A16D544(0, (unint64_t *)&qword_25790C780);
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v12(v11, a1, v8);
  sub_24A1BC3CC();
  v19 = sub_24A2160E0();
  v12(v11, a2, v8);
  v13 = sub_24A2160E0();
  v12(v11, a3, v8);
  v14 = sub_24A2160E0();
  v12(v11, a4, v8);
  v15 = sub_24A2160E0();
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 224))(v19, v13, v14, v15);
  v17 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v17(a4, v8);
  v17(a3, v8);
  v17(v20, v8);
  v17(v21, v8);
  return v16;
}

uint64_t sub_24A1CD128(void *a1)
{
  uint64_t v2;
  uint64_t inited;
  id v4;
  id v5;
  id v6;

  v2 = swift_allocObject();
  sub_24A135F88(&qword_25790C790);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24A218650;
  *(_QWORD *)(inited + 32) = 0x74757074756FLL;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  v4 = objc_msgSend((id)objc_opt_self(), sel_featureValueWithMultiArray_, a1);
  *(_QWORD *)(inited + 72) = sub_24A16D544(0, &qword_25790C798);
  *(_QWORD *)(inited + 48) = v4;
  sub_24A18B6F8(inited);
  v5 = objc_allocWithZone(MEMORY[0x24BDBFF88]);
  v6 = sub_24A18C690();

  *(_QWORD *)(v2 + 16) = v6;
  return v2;
}

uint64_t sub_24A1CD250@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t result;
  uint64_t v16;

  v2 = sub_24A215750();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_24A135F88(&qword_25790BCF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_24A17DDE0();
  if (!v9)
  {
    __break(1u);
    goto LABEL_6;
  }
  v10 = v9;
  v11 = (void *)sub_24A215C90();
  v12 = (void *)sub_24A215C90();
  v13 = objc_msgSend(v10, sel_URLForResource_withExtension_, v11, v12);

  if (!v13)
  {
LABEL_6:
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    goto LABEL_7;
  }
  sub_24A215738();

  v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  v14(v8, v5, v2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
  if ((_DWORD)result != 1)
  {

    return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v8, v2);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_24A1CD404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  sub_24A16D544(0, qword_25790C7A0);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  swift_retain();
  sub_24A2161A0();
  return swift_release();
}

uint64_t sub_24A1CD49C()
{
  uint64_t v0;
  _QWORD *v1;

  sub_24A16D544(0, qword_25790C7A0);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_24A1CD51C;
  return sub_24A2161AC();
}

uint64_t sub_24A1CD51C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 24) = a1;
  return swift_task_switch();
}

uint64_t sub_24A1CD598()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  type metadata accessor for quant_verifier_aa_fp16();
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A1CD5DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v12[2];

  v12[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = *(void **)(v2 + 16);
  v12[0] = 0;
  v6 = objc_msgSend(v5, sel_predictionFromFeatures_options_error_, a1, a2, v12);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    type metadata accessor for quant_verifier_aa_fp16Output();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v8;
    v9 = v7;
  }
  else
  {
    v10 = v12[0];
    sub_24A2156F0();

    swift_willThrow();
  }
  return v3;
}

uint64_t sub_24A1CD6B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_24A1CD6CC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_24A1CD724;
  return sub_24A216194();
}

uint64_t sub_24A1CD724(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 48) = a1;
  return swift_task_switch();
}

uint64_t sub_24A1CD7A0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  type metadata accessor for quant_verifier_aa_fp16Output();
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A1CD7E4(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v10)(_QWORD *);
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;

  type metadata accessor for quant_verifier_aa_fp16Input();
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  v10 = *(uint64_t (**)(_QWORD *))(*(_QWORD *)v4 + 136);
  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = v10(v9);
  swift_release();
  return v15;
}

uint64_t sub_24A1CD880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = v4;
  v25 = a3;
  v26 = a4;
  v24 = a2;
  v7 = sub_24A135F88(&qword_25790F6B0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v23 - v13;
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v23 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v23 - v18;
  type metadata accessor for quant_verifier_aa_fp16Input();
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v20(v19, a1, v7);
  v20(v17, v24, v7);
  v20(v14, v25, v7);
  v20(v11, v26, v7);
  sub_24A1CCE64((uint64_t)v19, (uint64_t)v17, (uint64_t)v14, (uint64_t)v11);
  v21 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 136))();
  swift_release();
  return v21;
}

void sub_24A1CD9F8(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22[2];

  v22[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_24A135F88(&qword_25790C820);
    sub_24A2163F8();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_24A2165B4();
  }
  v6 = objc_allocWithZone(MEMORY[0x24BDBFF58]);
  sub_24A135F88(&qword_25790C820);
  v7 = (void *)sub_24A215E94();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v6, sel_initWithFeatureProviderArray_, v7);

  v9 = *(void **)(v2 + 16);
  v22[0] = 0;
  v10 = objc_msgSend(v9, sel_predictionsFromBatch_options_error_, v8, a2, v22);
  v11 = v22[0];
  if (v10)
  {
    v12 = v10;
    v22[0] = (id)MEMORY[0x24BEE4AF8];
    if (v5)
    {
      swift_bridgeObjectRetain();
      v16 = v11;
      v13 = sub_24A216410();
      swift_bridgeObjectRelease();
    }
    else
    {
      v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      v14 = v11;
    }
    sub_24A18C774(v13, 0);
    sub_24A215EB8();
    v17 = (unint64_t)objc_msgSend(v12, sel_count);
    if ((v17 & 0x8000000000000000) != 0)
      __break(1u);
    v18 = v17;
    if (v17)
    {
      v19 = 0;
      do
      {
        v20 = objc_msgSend(v12, sel_featuresAtIndex_, v19);
        type metadata accessor for quant_verifier_aa_fp16Output();
        *(_QWORD *)(swift_allocObject() + 16) = v20;
        swift_unknownObjectRetain();
        v21 = swift_retain();
        MEMORY[0x24BD09750](v21);
        if (*(_QWORD *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8)
                                                                                               + 0x18) >> 1)
          sub_24A215ED0();
        ++v19;
        sub_24A215F0C();
        sub_24A215EB8();
        swift_release();
        swift_unknownObjectRelease();
      }
      while (v18 != v19);
    }
    swift_unknownObjectRelease();

  }
  else
  {
    v15 = v22[0];
    sub_24A2156F0();

    swift_willThrow();
  }
}

uint64_t sub_24A1CDCCC()
{
  swift_release();
  return swift_deallocObject();
}

void sub_24A1CDCF0(id a1, char a2)
{
  uint64_t v2;
  void (*v4)(id, uint64_t);
  uint64_t v5;
  id v6;
  id v7;

  v4 = *(void (**)(id, uint64_t))(v2 + 16);
  if ((a2 & 1) != 0)
  {
    v7 = a1;
    v4(a1, 1);
    sub_24A18CC40(a1);
  }
  else
  {
    type metadata accessor for quant_verifier_aa_fp16();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = a1;
    v6 = a1;
    v4((id)v5, 0);
    swift_release();
  }
}

uint64_t type metadata accessor for quant_verifier_aa_fp16()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for quant_verifier_aa_fp16Output()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for quant_verifier_aa_fp16Input()
{
  return objc_opt_self();
}

uint64_t VAASRResult.transcript.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12VoiceActions11VAASRResult_transcript);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VAASRResult.usedPartialAsFinal.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC12VoiceActions11VAASRResult_usedPartialAsFinal);
}

uint64_t VAASRResult.isFinal.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC12VoiceActions11VAASRResult_isFinal);
}

uint64_t sub_24A1CDE2C()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC12VoiceActions11VAASRResult_isFinalTerminal);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_24A1CDE70(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC12VoiceActions11VAASRResult_isFinalTerminal);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_24A1CDEB8())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t VAASRResult.isIgnored.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC12VoiceActions11VAASRResult_isIgnored);
}

void *VAASRResult.audioBuffer.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC12VoiceActions11VAASRResult_audioBuffer);
  v2 = v1;
  return v1;
}

id sub_24A1CDF38(uint64_t a1, uint64_t a2, char a3, char a4, char a5, char a6, uint64_t a7)
{
  objc_class *v7;
  _BYTE *v15;
  _BYTE *v16;
  _QWORD *v17;
  objc_super v19;

  v15 = objc_allocWithZone(v7);
  v16 = &v15[OBJC_IVAR____TtC12VoiceActions11VAASRResult_isFinalTerminal];
  v15[OBJC_IVAR____TtC12VoiceActions11VAASRResult_isFinalTerminal] = 0;
  v17 = &v15[OBJC_IVAR____TtC12VoiceActions11VAASRResult_transcript];
  *v17 = a1;
  v17[1] = a2;
  v15[OBJC_IVAR____TtC12VoiceActions11VAASRResult_isFinal] = a3;
  v15[OBJC_IVAR____TtC12VoiceActions11VAASRResult_usedPartialAsFinal] = a5;
  v15[OBJC_IVAR____TtC12VoiceActions11VAASRResult_isIgnored] = a6;
  *(_QWORD *)&v15[OBJC_IVAR____TtC12VoiceActions11VAASRResult_audioBuffer] = a7;
  swift_beginAccess();
  *v16 = a4;
  v19.receiver = v15;
  v19.super_class = v7;
  return objc_msgSendSuper2(&v19, sel_init);
}

uint64_t type metadata accessor for VAASRResult()
{
  return objc_opt_self();
}

unint64_t sub_24A1CE090()
{
  _QWORD *v0;
  unint64_t v1;
  void *v2;
  unint64_t v4;

  if (((*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))() & 1) != 0)
  {
    sub_24A216308();
    swift_bridgeObjectRelease();
    v1 = 0xD000000000000011;
  }
  else if (*((_BYTE *)v0 + OBJC_IVAR____TtC12VoiceActions11VAASRResult_isFinal) == 1)
  {
    sub_24A216308();
    swift_bridgeObjectRelease();
    v1 = 0x205D6C616E69465BLL;
  }
  else
  {
    sub_24A216308();
    swift_bridgeObjectRelease();
    v1 = 0x6C6169747261505BLL;
  }
  v4 = v1;
  swift_bridgeObjectRetain();
  sub_24A215D98();
  swift_bridgeObjectRelease();
  sub_24A215D98();
  v2 = *(void **)((char *)v0 + OBJC_IVAR____TtC12VoiceActions11VAASRResult_audioBuffer);
  if (v2)
    objc_msgSend(v2, sel_frameLength);
  sub_24A135F88(&qword_2579105B8);
  sub_24A215D08();
  sub_24A215D98();
  swift_bridgeObjectRelease();
  sub_24A215D98();
  return v4;
}

id VAASRResult.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void VAASRResult.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id VAASRResult.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VAASRResult();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for VAASRResult()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAASRResult.isFinalTerminal.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of VAASRResult.isFinalTerminal.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of VAASRResult.isFinalTerminal.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x90))();
}

uint64_t sub_24A1CE3A0@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t static VAVerifierModelOutput.none.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for VAKeywordResult();
  result = VAKeywordResult.__allocating_init(detections:)(MEMORY[0x24BEE4AF8]);
  *a1 = result;
  return result;
}

BOOL VAVerifierModelOutput.isNone.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)((*(uint64_t (**)(void))(**(_QWORD **)v0 + 88))() + 16);
  swift_bridgeObjectRelease();
  return v1 == 0;
}

void sub_24A1CE418()
{
  sub_24A2163EC();
  __break(1u);
}

uint64_t VAVerifierModel.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t VAVerifierModel.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

ValueMetadata *type metadata accessor for VAVerifierModelError()
{
  return &type metadata for VAVerifierModelError;
}

ValueMetadata *type metadata accessor for VAVerifierModelOutput()
{
  return &type metadata for VAVerifierModelOutput;
}

uint64_t type metadata accessor for VAVerifierModel()
{
  return objc_opt_self();
}

uint64_t method lookup function for VAVerifierModel()
{
  return swift_lookUpClassMethod();
}

uint64_t (*sub_24A1CE4DC())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_24A1CE518@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_delegate;
  swift_beginAccess();
  return sub_24A193940(v3, a1);
}

uint64_t sub_24A1CE568(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_delegate;
  swift_beginAccess();
  sub_24A1CE5C0(a1, v3);
  return swift_endAccess();
}

uint64_t sub_24A1CE5C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_24A135F88(qword_25790D468);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*sub_24A1CE608())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A1CE64C()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A1CE694(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_floatArr);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A1CE6E4())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

_QWORD *VAA2AAudioEnroller.__allocating_init(encoder:keywordIdentifier:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v8 = (_QWORD *)swift_allocObject();
  v9 = (char *)v8 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_delegate;
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  *((_QWORD *)v9 + 4) = 0;
  v10 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)((char *)v8 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_floatArr) = MEMORY[0x24BEE4AF8];
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = v10;
  sub_24A215798();
  v11 = (uint64_t)v8 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_delegate;
  swift_beginAccess();
  sub_24A1CE5C0(a4, v11);
  swift_endAccess();
  return v8;
}

_QWORD *VAA2AAudioEnroller.init(encoder:keywordIdentifier:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v9 = sub_24A2157A4();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (char *)v4 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_delegate;
  *(_OWORD *)v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  *((_QWORD *)v13 + 4) = 0;
  v14 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_floatArr) = MEMORY[0x24BEE4AF8];
  v4[2] = a1;
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = v14;
  sub_24A215798();
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))((uint64_t)v4 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_id, v12, v9);
  v15 = (uint64_t)v4 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_delegate;
  swift_beginAccess();
  sub_24A1CE5C0(a4, v15);
  swift_endAccess();
  return v4;
}

uint64_t sub_24A1CE908(objc_class *a1)
{
  _QWORD **v1;
  _QWORD **v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(__int128 *, uint64_t);
  AVAudioPCMBuffer v8;
  Swift::OpaquePointer *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(__int128 *, _QWORD);
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v2 = v1;
  v4 = type metadata accessor for VASingleEnrollmentData();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v28[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t (*)(__int128 *, uint64_t))((uint64_t (*)(__int128 *))(*v1)[24])(&v31);
  v8.super.super.isa = a1;
  VAfp16AVAudioBufferToFP32Array(buffer:floatBuffer:)(v8, v9);
  if (v10)
    return v7(&v31, 1);
  v12 = v7(&v31, 0);
  v13 = ((uint64_t (*)(uint64_t))(*v2)[22])(v12);
  v14 = (uint64_t (*)(__int128 *, _QWORD))((uint64_t (*)(__int128 *))(*v2)[18])(&v31);
  sub_24A1472A0(v13);
  v15 = v14(&v31, 0);
  v16 = (*(uint64_t (**)(uint64_t))(*v2[2] + 168))(v15);
  v17 = (uint64_t (*)(void))(*v2)[16];
  v18 = *(_QWORD *)(v17() + 16);
  v19 = swift_bridgeObjectRelease();
  if (v16 < v18)
  {
    if (v16 < 0)
    {
      __break(1u);
    }
    else
    {
      v18 = (uint64_t)v2;
      v20 = ((uint64_t (*)(uint64_t))v17)(v19);
      if (*(_QWORD *)(v20 + 16) >= (unint64_t)v16)
      {
        v18 = v20;
        sub_24A2165C0();
        swift_unknownObjectRetain_n();
        v21 = swift_dynamicCastClass();
        if (!v21)
        {
          swift_bridgeObjectRelease();
          v21 = MEMORY[0x24BEE4AF8];
        }
        v22 = *(_QWORD *)(v21 + 16);
        swift_release();
        if (v22 == v16)
        {
          v23 = swift_dynamicCastClass();
          if (!v23)
          {
            swift_bridgeObjectRelease();
            v23 = MEMORY[0x24BEE4AF8];
          }
          goto LABEL_11;
        }
LABEL_20:
        swift_bridgeObjectRelease();
        v23 = sub_24A14A964(v18, v18 + 32, 0, (2 * v16) | 1);
LABEL_11:
        swift_bridgeObjectRelease();
        v19 = ((uint64_t (*)(uint64_t))(*v2)[17])(v23);
        goto LABEL_12;
      }
    }
    __break(1u);
    goto LABEL_20;
  }
LABEL_12:
  v24 = *(_QWORD *)(((uint64_t (*)(uint64_t))v17)(v19) + 16);
  result = swift_bridgeObjectRelease();
  if (v24 == v16)
  {
    ((void (*)(__int128 *__return_ptr, uint64_t))(*v2)[19])(&v31, result);
    if (*((_QWORD *)&v32 + 1))
    {
      sub_24A152310((uint64_t)&v31, (uint64_t)v28);
      sub_24A1CF518((uint64_t)&v31);
      v25 = v29;
      v26 = v30;
      sub_24A14B668(v28, v29);
      ((void (*)(void))(*v2)[28])();
      (*(void (**)(char *, uint64_t, uint64_t))(v26 + 8))(v6, v25, v26);
      sub_24A1AB4D8((uint64_t)v6);
      sub_24A14D184((uint64_t)v28);
    }
    else
    {
      sub_24A1CF518((uint64_t)&v31);
    }
    v33 = 0;
    v31 = 0u;
    v32 = 0u;
    return ((uint64_t (*)(__int128 *))(*v2)[20])(&v31);
  }
  return result;
}

uint64_t sub_24A1CEBF4@<X0>(uint64_t a1@<X8>)
{
  _QWORD **v1;
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = (uint64_t (*)(void))(*v1)[16];
  v4 = *(_QWORD *)(v3() + 16);
  v5 = swift_bridgeObjectRelease();
  v6 = *(uint64_t (**)(uint64_t))(*v1[2] + 168);
  v7 = v6(v5);
  v8 = *(_QWORD *)(v3() + 16);
  v9 = swift_bridgeObjectRelease();
  v10 = v8 >= v6(v9);
  return sub_24A1AB614(v4, v7, v10, a1);
}

void sub_24A1CEC84(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  char **v15;
  id v16;
  uint64_t v17;
  id i;
  id v19;
  id v20;
  void *v21;
  id v22;
  char **v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  char **v29;
  uint64_t v30;
  void *v31;
  id v32;
  int v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  char *v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t);
  uint64_t v54;
  char **v55;
  void *v56;
  uint64_t v57;
  _QWORD *v58;
  __int128 v59;
  char v60;
  uint64_t v61;

  v3 = v1;
  v54 = a1;
  v4 = sub_24A2157A4();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v1[2];
  v10 = *(uint64_t (**)(uint64_t))(*v1 + 128);
  v11 = (void *)v10(v6);
  v12 = (*(uint64_t (**)(void))(*(_QWORD *)v9 + 160))();
  swift_bridgeObjectRelease();
  if (!v2)
  {
    v57 = v5;
    v53 = v10;
    objc_opt_self();
    v13 = (void *)swift_dynamicCastObjCClass();
    if (v13)
    {
      v14 = v13;
      v48 = v4;
      v49 = v12;
      v50 = v3;
      v51 = v8;
      v52 = 0;
      v15 = &selRef_copy;
      v16 = objc_msgSend(v13, sel_shape);
      sub_24A170EC0();
      v17 = sub_24A215EA0();

      if ((v17 & 0xC000000000000001) != 0)
        goto LABEL_36;
      if (!*(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_38;
      }
      for (i = *(id *)(v17 + 32); ; i = (id)MEMORY[0x24BD09BE8](0, v17))
      {
        v11 = i;
        swift_bridgeObjectRelease();
        v19 = objc_msgSend(v14, v15[292]);
        v17 = sub_24A215EA0();

        if ((v17 & 0xC000000000000001) != 0)
        {
LABEL_38:
          v20 = (id)MEMORY[0x24BD09BE8](1, v17);
        }
        else
        {
          if (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
            goto LABEL_40;
          v20 = *(id *)(v17 + 40);
        }
        v21 = v20;
        swift_bridgeObjectRelease();
        v17 = (uint64_t)&selRef_copy;
        v22 = objc_msgSend(v11, sel_integerValue);
        if (((unint64_t)v22 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_40:
          __break(1u);
          return;
        }
        v15 = (char **)v22;
        v47 = v11;
        if (!v22)
          break;
        v23 = 0;
        v24 = (_QWORD *)MEMORY[0x24BEE4AF8];
        v59 = xmmword_24A21AA50;
        v55 = (char **)v22;
        v56 = v21;
        while (v23 != v15)
        {
          v25 = (unint64_t)objc_msgSend(v21, *(SEL *)(v17 + 2344), v47);
          if ((v25 & 0x8000000000000000) != 0)
            goto LABEL_34;
          v26 = v25;
          v58 = v24;
          if (v25)
          {
            v27 = sub_24A215EF4();
            *(_QWORD *)(v27 + 16) = v26;
            bzero((void *)(v27 + 32), 4 * v26);
          }
          else
          {
            v27 = MEMORY[0x24BEE4AF8];
          }
          v28 = objc_msgSend(v21, *(SEL *)(v17 + 2344));
          if (((unint64_t)v28 & 0x8000000000000000) != 0)
            goto LABEL_35;
          v15 = (char **)v28;
          if (v28)
          {
            v29 = 0;
            v17 = v27 + 32;
            while (1)
            {
              sub_24A135F88(&qword_25790BE68);
              v30 = swift_allocObject();
              *(_OWORD *)(v30 + 16) = v59;
              *(_QWORD *)(v30 + 32) = sub_24A216074();
              *(_QWORD *)(v30 + 40) = sub_24A216074();
              v61 = v30;
              sub_24A215EB8();
              v31 = (void *)sub_24A215E94();
              swift_bridgeObjectRelease();
              v32 = objc_msgSend(v14, sel_objectForKeyedSubscript_, v31);

              objc_msgSend(v32, sel_floatValue);
              v34 = v33;

              if ((unint64_t)v29 >= *(_QWORD *)(v27 + 16))
                break;
              *(_DWORD *)(v17 + 4 * (_QWORD)v29) = v34;
              v29 = (char **)((char *)v29 + 1);
              if (v15 == v29)
                goto LABEL_22;
            }
            __break(1u);
            break;
          }
LABEL_22:
          v24 = v58;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v24 = sub_24A173758(0, v24[2] + 1, 1, v24);
          v15 = v55;
          v21 = v56;
          v36 = v24[2];
          v35 = v24[3];
          if (v36 >= v35 >> 1)
            v24 = sub_24A173758((_QWORD *)(v35 > 1), v36 + 1, 1, v24);
          v23 = (char **)((char *)v23 + 1);
          v24[2] = v36 + 1;
          v24[v36 + 4] = v27;
          v37 = v57;
          v17 = 0x251BAC000;
          if (v23 == v15)
            goto LABEL_30;
        }
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        ;
      }
      v24 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v37 = v57;
LABEL_30:
      v39 = v50;
      v40 = (uint64_t)v51;
      (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v51, (uint64_t)v50 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_id, v48);
      v41 = v39[3];
      v42 = v39[4];
      v43 = swift_bridgeObjectRetain();
      v44 = v53(v43);
      v60 = 1;
      v45 = sub_24A1AB514();
      v46 = sub_24A1AB514();
      sub_24A1AB51C(v40, (uint64_t)v24, v41, v42, v44, v45, v46, &v60, v54);
      swift_unknownObjectRelease();

    }
    else
    {
      swift_unknownObjectRelease();
      sub_24A14C404();
      swift_allocError();
      *v38 = 0xD00000000000001ELL;
      v38[1] = 0x800000024A223A40;
      swift_willThrow();
    }
  }
}

uint64_t VAA2AAudioEnroller.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_id;
  v2 = sub_24A2157A4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_24A1CF518(v0 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_delegate);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VAA2AAudioEnroller.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_id;
  v2 = sub_24A2157A4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_24A1CF518(v0 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_delegate);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_24A1CF258()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 208))();
}

uint64_t sub_24A1CF280()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 224))();
}

uint64_t sub_24A1CF2A8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 216))();
}

uint64_t VAA2AAudioEnrollerFactory.__allocating_init(encoder:delegate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  sub_24A1CF558(a2, v4 + 24);
  return v4;
}

uint64_t VAA2AAudioEnrollerFactory.init(encoder:delegate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  sub_24A1CF558(a2, v2 + 24);
  return v2;
}

uint64_t sub_24A1CF348@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  _BYTE v19[40];

  v7 = sub_24A2157A4();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0) + 22;
  v11 = *(_QWORD *)(v3 + 16);
  sub_24A193940(v3 + 24, (uint64_t)v19);
  v12 = type metadata accessor for VAA2AAudioEnroller();
  v13 = (_QWORD *)swift_allocObject();
  v14 = (char *)v13 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_delegate;
  *(_OWORD *)v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  *((_QWORD *)v14 + 4) = 0;
  v15 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)((char *)v13 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_floatArr) = MEMORY[0x24BEE4AF8];
  v13[2] = v11;
  v13[3] = a1;
  v13[4] = a2;
  v13[5] = v15;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_24A215798();
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v8 + 32))((uint64_t)v13 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_id, v10, v7);
  v16 = (uint64_t)v13 + OBJC_IVAR____TtC12VoiceActions18VAA2AAudioEnroller_delegate;
  swift_beginAccess();
  sub_24A1CE5C0((uint64_t)v19, v16);
  result = swift_endAccess();
  a3[3] = v12;
  a3[4] = &protocol witness table for VAA2AAudioEnroller;
  *a3 = v13;
  return result;
}

uint64_t VAA2AAudioEnrollerFactory.deinit()
{
  uint64_t v0;

  swift_release();
  sub_24A1CF518(v0 + 24);
  return v0;
}

uint64_t VAA2AAudioEnrollerFactory.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  sub_24A1CF518(v0 + 24);
  return swift_deallocClassInstance();
}

uint64_t sub_24A1CF4F0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 104))();
}

uint64_t sub_24A1CF518(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_24A135F88(qword_25790D468);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24A1CF558(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_24A135F88(qword_25790D468);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for VAA2AAudioEnroller()
{
  uint64_t result;

  result = qword_25791B8E0;
  if (!qword_25791B8E0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_24A1CF5DC()
{
  return type metadata accessor for VAA2AAudioEnroller();
}

uint64_t sub_24A1CF5E4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_24A2157A4();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for VAA2AAudioEnroller()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAA2AAudioEnroller.__allocating_init(encoder:keywordIdentifier:delegate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of VAA2AAudioEnroller.addAudio(buffer:hostTime:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of VAA2AAudioEnroller.getEnrollmentProgress()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of VAA2AAudioEnroller.getEnrollmentData()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t type metadata accessor for VAA2AAudioEnrollerFactory()
{
  return objc_opt_self();
}

uint64_t method lookup function for VAA2AAudioEnrollerFactory()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAA2AAudioEnrollerFactory.__allocating_init(encoder:delegate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of VAA2AAudioEnrollerFactory.makeAudioEnroller(keywordIdentifier:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t sub_24A1CF71C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_modelFilename);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_24A1CF770(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_modelFilename);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A1CF7CC()
{
  return sub_24A151B30();
}

uint64_t sub_24A1CF7D8(uint64_t a1)
{
  return sub_24A151B80(a1, &OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_keywordsTrainedFor);
}

uint64_t sub_24A1CF7E4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_samplesPerPredictionWindow;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1CF828(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_samplesPerPredictionWindow);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A1CF870()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_modelInputSize;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1CF8B4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_modelInputSize);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A1CF8FC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_receptiveFieldLength;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1CF940(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_receptiveFieldLength);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A1CF988()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_receptiveFieldStride;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1CF9CC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_receptiveFieldStride);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A1CFA14()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_useCMVN);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_24A1CFA58(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_useCMVN);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A1CFAA0()
{
  return sub_24A151B30();
}

uint64_t sub_24A1CFAAC(uint64_t a1)
{
  return sub_24A151B80(a1, &OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_layerNormScale);
}

uint64_t sub_24A1CFAB8()
{
  return sub_24A151B30();
}

uint64_t sub_24A1CFAC4(uint64_t a1)
{
  return sub_24A151B80(a1, &OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_layerNormOffset);
}

uint64_t sub_24A1CFAD0()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *(_QWORD *)((*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))() + 16);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_24A1CFB10()
{
  _QWORD *v0;
  uint64_t v1;
  BOOL v2;
  uint64_t result;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x170))();
  v2 = __OFADD__(v1, 3);
  result = v1 + 3;
  if (v2)
    __break(1u);
  return result;
}

uint64_t sub_24A1CFB48(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_24A1CFB84 + 4 * byte_24A21E260[a1]))(0xD000000000000012, 0x800000024A226840);
}

uint64_t sub_24A1CFB84()
{
  return 0x6C69466C65646F6DLL;
}

uint64_t sub_24A1CFBA8()
{
  uint64_t v0;

  return v0 + 6;
}

uint64_t sub_24A1CFBC0()
{
  return 0x706E496C65646F6DLL;
}

unint64_t sub_24A1CFBE4()
{
  return 0xD000000000000014;
}

uint64_t sub_24A1CFC0C()
{
  return 0x4E564D43657375;
}

uint64_t sub_24A1CFC24()
{
  return 0x726F4E726579616CLL;
}

uint64_t sub_24A1CFC5C()
{
  unsigned __int8 *v0;

  return sub_24A1CFB48(*v0);
}

uint64_t sub_24A1CFC64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24A1D0F18(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A1CFC88()
{
  sub_24A1D1844();
  return sub_24A2166A4();
}

uint64_t sub_24A1CFCB0()
{
  sub_24A1D1844();
  return sub_24A2166B0();
}

id sub_24A1CFCD8(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  objc_class *v4;
  id v9;

  v9 = objc_allocWithZone(v4);
  return sub_24A1CFD38(a1, a2, a3, a4);
}

id sub_24A1CFD38(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  void *v4;
  uint64_t v5;
  void *v6;
  unint64_t v9;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  objc_super v21;
  uint64_t v22;
  unint64_t v23;

  v6 = v4;
  if (a4)
  {
    v9 = a4;
  }
  else
  {
    v22 = a1;
    v23 = a2;
    swift_bridgeObjectRetain();
    sub_24A215D98();
    a3 = v22;
    v9 = v23;
  }
  v11 = v6;
  sub_24A1D12CC(a3, v9);
  swift_bridgeObjectRelease();
  if (v5)
  {
    swift_bridgeObjectRelease();

    type metadata accessor for VAFixedSpotterModelConfiguration();
    return (id)swift_deallocPartialClassInstance();
  }
  else
  {
    v12 = sub_24A1D12CC(a1, a2);
    v14 = v13;
    swift_bridgeObjectRelease();
    v15 = (_QWORD *)sub_24A1D1714();
    v16 = swift_bridgeObjectRelease();
    v17 = (uint64_t *)&v11[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_modelFilename];
    *v17 = v12;
    v17[1] = v14;
    v18 = (_QWORD *)MEMORY[0x24BEE4EA0];
    *(_QWORD *)&v11[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_samplesPerPredictionWindow] = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v15) + 0xC8))(v16);
    *(_QWORD *)&v11[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_keywordsTrainedFor] = (*(uint64_t (**)(void))((*v18 & *v15) + 0xB0))();
    *(_QWORD *)&v11[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_modelInputSize] = (*(uint64_t (**)(void))((*v18 & *v15) + 0xE0))();
    *(_QWORD *)&v11[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_receptiveFieldLength] = (*(uint64_t (**)(void))((*v18 & *v15) + 0xF8))();
    *(_QWORD *)&v11[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_receptiveFieldStride] = (*(uint64_t (**)(void))((*v18 & *v15) + 0x110))();
    v11[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_useCMVN] = (*(uint64_t (**)(void))((*v18 & *v15) + 0x128))() & 1;
    *(_QWORD *)&v11[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_layerNormScale] = (*(uint64_t (**)(void))((*v18 & *v15) + 0x140))();
    v19 = (*(uint64_t (**)(void))((*v18 & *v15) + 0x158))();

    *(_QWORD *)&v11[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_layerNormOffset] = v19;
    v21.receiver = v11;
    v21.super_class = (Class)type metadata accessor for VAFixedSpotterModelConfiguration();
    return objc_msgSendSuper2(&v21, sel_init);
  }
}

unint64_t static VAFixedSpotterModelConfiguration.buildFromConfigFile(jsonFile:)()
{
  return sub_24A1D1714();
}

uint64_t VAFixedSpotterModelConfiguration.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return VAFixedSpotterModelConfiguration.init(from:)(a1);
}

uint64_t VAFixedSpotterModelConfiguration.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  char v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  void *v23;
  objc_class *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  objc_super v28;
  char v29;
  uint64_t v30;

  v4 = sub_24A135F88(&qword_2579108B8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v26 = a1;
  sub_24A14B668(a1, v8);
  v9 = sub_24A1D1844();
  v27 = v1;
  sub_24A216674();
  if (v2)
  {
    v12 = v27;
    sub_24A14D184((uint64_t)v26);

    type metadata accessor for VAFixedSpotterModelConfiguration();
    swift_deallocPartialClassInstance();
    return v9;
  }
  LOBYTE(v30) = 0;
  v10 = sub_24A216488();
  if (v11)
    v14 = v10;
  else
    v14 = 0;
  v15 = 0xE000000000000000;
  if (v11)
    v15 = v11;
  v16 = v27;
  v17 = (uint64_t *)&v27[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_modelFilename];
  *v17 = v14;
  v17[1] = v15;
  LOBYTE(v30) = 2;
  result = sub_24A2164AC();
  if ((v18 & 1) != 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  *(_QWORD *)&v16[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_samplesPerPredictionWindow] = result;
  LOBYTE(v30) = 3;
  result = sub_24A2164AC();
  if ((v19 & 1) != 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  *(_QWORD *)&v16[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_modelInputSize] = result;
  sub_24A135F88(&qword_2579108C0);
  v29 = 1;
  sub_24A1D1888(&qword_2579108C8, MEMORY[0x24BEE1798], MEMORY[0x24BEE0D38], MEMORY[0x24BEE04E0]);
  result = sub_24A2164B8();
  if (!v30)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  *(_QWORD *)&v16[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_keywordsTrainedFor] = v30;
  LOBYTE(v30) = 4;
  result = sub_24A2164AC();
  if ((v20 & 1) != 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  *(_QWORD *)&v16[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_receptiveFieldLength] = result;
  LOBYTE(v30) = 5;
  result = sub_24A2164AC();
  if ((v21 & 1) != 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  *(_QWORD *)&v16[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_receptiveFieldStride] = result;
  LOBYTE(v30) = 6;
  result = sub_24A216494();
  if (result == 2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v16[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_useCMVN] = result & 1;
  sub_24A135F88(&qword_25790A458);
  v29 = 7;
  sub_24A1AB434(&qword_25790E7D0, MEMORY[0x24BEE1520], MEMORY[0x24BEE12D0]);
  result = sub_24A2164B8();
  if (!v30)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  *(_QWORD *)&v27[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_layerNormScale] = v30;
  v29 = 8;
  result = sub_24A2164B8();
  v22 = v30;
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v23 = v27;
    *(_QWORD *)&v27[OBJC_IVAR____TtC12VoiceActions32VAFixedSpotterModelConfiguration_layerNormOffset] = v22;

    v24 = (objc_class *)type metadata accessor for VAFixedSpotterModelConfiguration();
    v28.receiver = v23;
    v28.super_class = v24;
    v9 = (unint64_t)objc_msgSendSuper2(&v28, sel_init);
    sub_24A14D184((uint64_t)v26);
    return v9;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_24A1D051C(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v3 = v1;
  v5 = sub_24A135F88(&qword_2579108D0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A14B668(a1, a1[3]);
  sub_24A1D1844();
  v9 = sub_24A21668C();
  v10 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v3) + 0x98))(v9);
  LOBYTE(v23) = 0;
  sub_24A216530();
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v12 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0xC8))(v12);
    LOBYTE(v23) = 2;
    v13 = sub_24A216554();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0xE0))(v13);
    LOBYTE(v23) = 3;
    v14 = sub_24A216554();
    v23 = (*(uint64_t (**)(uint64_t))((*v10 & *v3) + 0xB0))(v14);
    v22 = 1;
    sub_24A135F88(&qword_2579108C0);
    sub_24A1D1888(&qword_2579108D8, MEMORY[0x24BEE1770], MEMORY[0x24BEE0D08], MEMORY[0x24BEE04C0]);
    sub_24A216560();
    v15 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0xF8))(v15);
    LOBYTE(v23) = 4;
    v16 = sub_24A216554();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x110))(v16);
    LOBYTE(v23) = 5;
    v17 = sub_24A216554();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x128))(v17);
    LOBYTE(v23) = 6;
    v18 = sub_24A21653C();
    v23 = (*(uint64_t (**)(uint64_t))((*v10 & *v3) + 0x140))(v18);
    v22 = 7;
    v19 = sub_24A135F88(&qword_25790A458);
    sub_24A1AB434(&qword_25790E7A8, MEMORY[0x24BEE14F8], MEMORY[0x24BEE12A0]);
    v21 = v19;
    sub_24A216560();
    v20 = swift_bridgeObjectRelease();
    v23 = (*(uint64_t (**)(uint64_t))((*v10 & *v3) + 0x158))(v20);
    v22 = 8;
    sub_24A216560();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

unint64_t sub_24A1D0950(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  sub_24A164A60(&qword_2579108E0, a2, (uint64_t (*)(uint64_t))type metadata accessor for VAFixedSpotterModelConfiguration, (uint64_t)&protocol conformance descriptor for VAFixedSpotterModelConfiguration);
  v2 = sub_24A1D0A14();
  v3 = v2;
  v5 = v4;
  if ((v6 & 1) != 0)
  {
    if (v2 == 0x8000000000000000)
    {
      return 0xD00000000000001CLL;
    }
    else
    {
      sub_24A2163D4();
      sub_24A1649E8(v3, v5, 1);
      return 0;
    }
  }
  return v3;
}

uint64_t sub_24A1D0A14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v0 = sub_24A215CFC();
  MEMORY[0x24BDAC7A8](v0);
  v1 = sub_24A2155F4();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCB2A8];
  MEMORY[0x24BDAC7A8](v1);
  sub_24A215624();
  swift_allocObject();
  sub_24A215618();
  sub_24A135F88(&qword_25790AE80);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_24A218660;
  sub_24A2155E8();
  sub_24A2155DC();
  sub_24A164A60(&qword_25790AE88, 255, v2, MEMORY[0x24BDCB2C8]);
  sub_24A135F88(&qword_25790AE90);
  sub_24A164A14();
  sub_24A2162D8();
  sub_24A215600();
  type metadata accessor for VAFixedSpotterModelConfiguration();
  sub_24A164A60(&qword_2579108E8, v3, (uint64_t (*)(uint64_t))type metadata accessor for VAFixedSpotterModelConfiguration, (uint64_t)&protocol conformance descriptor for VAFixedSpotterModelConfiguration);
  v4 = sub_24A21560C();
  v6 = v5;
  sub_24A215CF0();
  v7 = sub_24A215CCC();
  if (v8)
  {
    v9 = v7;
    sub_24A135F1C(v4, v6);
    swift_release();
  }
  else
  {
    sub_24A135F1C(v4, v6);
    swift_release();
    return 0;
  }
  return v9;
}

id VAFixedSpotterModelConfiguration.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void VAFixedSpotterModelConfiguration.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id VAFixedSpotterModelConfiguration.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VAFixedSpotterModelConfiguration();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_24A1D0D68@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 392))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t sub_24A1D0D94()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0x190))();
}

id static VAFixedSpotterModelConfiguration.buildForFixedA2T(modelFilepath:modelConfigJsonFilepath:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  id v8;

  v8 = objc_allocWithZone((Class)type metadata accessor for VAFixedSpotterModelConfiguration());
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_24A1CFD38(a1, a2, a3, a4);
}

id static VAFixedSpotterModelConfiguration.buildForFixedA2TDefault()()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  id v6;

  v0 = (uint64_t *)sub_24A1FF220();
  v1 = *v0;
  v2 = v0[1];
  swift_bridgeObjectRetain();
  v3 = (uint64_t *)sub_24A1FF248();
  v4 = *v3;
  v5 = v3[1];
  v6 = objc_allocWithZone((Class)type metadata accessor for VAFixedSpotterModelConfiguration());
  swift_bridgeObjectRetain();
  return sub_24A1CFD38(v1, v2, v4, v5);
}

id static VAFixedSpotterModelConfiguration.buildForFixedA2TBreakthrough()()
{
  id v0;

  v0 = objc_allocWithZone((Class)type metadata accessor for VAFixedSpotterModelConfiguration());
  return sub_24A1CFD38(0xD000000000000017, 0x800000024A2267A0, 0xD000000000000023, 0x800000024A2267C0);
}

uint64_t sub_24A1D0F18(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x6C69466C65646F6DLL && a2 == 0xED0000656D616E65;
  if (v3 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A226840 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x800000024A226860 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x706E496C65646F6DLL && a2 == 0xEE00657A69537475 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000024A222200 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000024A222220 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x4E564D43657375 && a2 == 0xE700000000000000 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x726F4E726579616CLL && a2 == 0xEE00656C6163536DLL || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x726F4E726579616CLL && a2 == 0xEF74657366664F6DLL)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    v6 = sub_24A21659C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t sub_24A1D12CC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  unsigned int v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  void *v17;
  unsigned __int8 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;

  v34 = sub_24A215A8C();
  v32 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v33 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (void *)objc_opt_self();
  v6 = objc_msgSend(v5, sel_defaultManager);
  v7 = (void *)sub_24A215C90();
  v8 = objc_msgSend(v6, sel_fileExistsAtPath_, v7);

  if (v8)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    v9 = (void *)sub_24A215C90();
    v10 = objc_msgSend(v9, sel_pathExtension);

    sub_24A215CB4();
    v11 = (void *)sub_24A215C90();
    v12 = objc_msgSend(v11, sel_stringByDeletingPathExtension);

    sub_24A215CB4();
    v13 = sub_24A17E2D0();
    v15 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v15)
    {
      v35 = 0;
      v36 = 0xE000000000000000;
      sub_24A216308();
      swift_bridgeObjectRelease();
      v35 = 0xD00000000000002DLL;
      v36 = 0x800000024A2268F0;
      sub_24A215D98();
LABEL_11:
      v28 = v35;
      v27 = v36;
      sub_24A14C404();
      swift_allocError();
      *v29 = v28;
      v29[1] = v27;
      swift_willThrow();
      return a1;
    }
    a1 = v13;
    a2 = v15;
  }
  v16 = objc_msgSend(v5, sel_defaultManager);
  v17 = (void *)sub_24A215C90();
  v18 = objc_msgSend(v16, sel_isReadableFileAtPath_, v17);

  if ((v18 & 1) == 0)
  {
    v19 = sub_24A1B9D90();
    v21 = v32;
    v20 = v33;
    v22 = v34;
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v33, v19, v34);
    swift_bridgeObjectRetain_n();
    v23 = sub_24A215A74();
    v24 = sub_24A216104();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v26 = swift_slowAlloc();
      v35 = v26;
      *(_DWORD *)v25 = 136315138;
      swift_bridgeObjectRetain();
      v37 = sub_24A148270(a1, a2, &v35);
      sub_24A216260();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24A12D000, v23, v24, "File not readable in %s", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24BD0AAAC](v26, -1, -1);
      MEMORY[0x24BD0AAAC](v25, -1, -1);

      (*(void (**)(char *, uint64_t))(v21 + 8))(v33, v34);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v20, v22);
    }
    v35 = 0;
    v36 = 0xE000000000000000;
    sub_24A216308();
    swift_bridgeObjectRelease();
    v35 = 0xD000000000000023;
    v36 = 0x800000024A226920;
    sub_24A215D98();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  return a1;
}

uint64_t type metadata accessor for VAFixedSpotterModelConfiguration()
{
  return objc_opt_self();
}

unint64_t sub_24A1D1714()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  unint64_t *v4;
  unint64_t v6;
  char v7;

  type metadata accessor for VAFixedSpotterModelConfiguration();
  v1 = sub_24A164A60(&qword_2579108E0, v0, (uint64_t (*)(uint64_t))type metadata accessor for VAFixedSpotterModelConfiguration, (uint64_t)&protocol conformance descriptor for VAFixedSpotterModelConfiguration);
  sub_24A17D140(v1, &v6);
  v2 = v6;
  if ((v7 & 1) != 0)
  {
    if (v6 == 0x8000000000000000)
    {
      sub_24A216308();
      swift_bridgeObjectRelease();
      sub_24A215D98();
      v2 = 0x800000024A2268C0;
      sub_24A14C404();
      swift_allocError();
      *v3 = 0xD000000000000029;
      v3[1] = 0x800000024A2268C0;
    }
    else
    {
      sub_24A14D2EC();
      swift_allocError();
      *v4 = v2;
    }
    swift_willThrow();
  }
  return v2;
}

unint64_t sub_24A1D1844()
{
  unint64_t result;

  result = qword_25791B8F0[0];
  if (!qword_25791B8F0[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21E3CC, &type metadata for VAFixedSpotterModelConfiguration.CodingKeys);
    atomic_store(result, qword_25791B8F0);
  }
  return result;
}

uint64_t sub_24A1D1888(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = sub_24A139148(&qword_2579108C0);
    v10[0] = a2;
    v10[1] = a3;
    result = MEMORY[0x24BD0A9EC](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for VAFixedSpotterModelConfiguration()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAFixedSpotterModelConfiguration.maxNumberOfKeywords.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of VAFixedSpotterModelConfiguration.vectorSizePerOutput.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of VAFixedSpotterModelConfiguration.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 392))();
}

uint64_t dispatch thunk of VAFixedSpotterModelConfiguration.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x190))();
}

uint64_t storeEnumTagSinglePayload for VAFixedSpotterModelConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_24A1D19C0 + 4 * byte_24A21E26E[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_24A1D19F4 + 4 * byte_24A21E269[v4]))();
}

uint64_t sub_24A1D19F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A1D19FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A1D1A04);
  return result;
}

uint64_t sub_24A1D1A10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A1D1A18);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_24A1D1A1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A1D1A24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VAFixedSpotterModelConfiguration.CodingKeys()
{
  return &type metadata for VAFixedSpotterModelConfiguration.CodingKeys;
}

unint64_t sub_24A1D1A44()
{
  unint64_t result;

  result = qword_25791BB00[0];
  if (!qword_25791BB00[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21E3A4, &type metadata for VAFixedSpotterModelConfiguration.CodingKeys);
    atomic_store(result, qword_25791BB00);
  }
  return result;
}

unint64_t sub_24A1D1A8C()
{
  unint64_t result;

  result = qword_25791BC10;
  if (!qword_25791BC10)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21E314, &type metadata for VAFixedSpotterModelConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25791BC10);
  }
  return result;
}

unint64_t sub_24A1D1AD4()
{
  unint64_t result;

  result = qword_25791BC18[0];
  if (!qword_25791BC18[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21E33C, &type metadata for VAFixedSpotterModelConfiguration.CodingKeys);
    atomic_store(result, qword_25791BC18);
  }
  return result;
}

uint64_t sub_24A1D1B18()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_processedAudioSamples;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1D1B5C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_processedAudioSamples);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_24A1D1BA4())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A1D1BE8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_newSamples;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1D1C2C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_newSamples);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_24A1D1C74())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A1D1CB8()
{
  return sub_24A151B30();
}

uint64_t sub_24A1D1CC4(uint64_t a1)
{
  return sub_24A167CD0(a1, &OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_embeddings, (uint64_t (*)(uint64_t))MEMORY[0x24BEE4BC0]);
}

uint64_t (*sub_24A1D1CD8())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_24A1D1D1C()
{
  return sub_24A151B30();
}

uint64_t sub_24A1D1D28(uint64_t a1)
{
  return sub_24A167CD0(a1, &OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_silProbs, (uint64_t (*)(uint64_t))MEMORY[0x24BEE4BC0]);
}

uint64_t (*sub_24A1D1D3C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A1D1D80()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t sub_24A1D1DC8(uint64_t a1)
{
  return sub_24A167CD0(a1, &OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_endpointer, (uint64_t (*)(uint64_t))MEMORY[0x24BEE4EF8]);
}

uint64_t (*sub_24A1D1DDC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A1D1E20()
{
  return sub_24A151B30();
}

uint64_t sub_24A1D1E2C(uint64_t a1)
{
  return sub_24A167CD0(a1, &OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_floatArr, (uint64_t (*)(uint64_t))MEMORY[0x24BEE4BC0]);
}

uint64_t (*sub_24A1D1E40())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

_QWORD *VAAVSAudioEnroller.__allocating_init(encoder:keywordIdentifier:endpointerConfig:delegate:maxSamplesPerEnrollment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;

  swift_allocObject();
  v12 = sub_24A1D3AD8(a1, a2, a3, a4, a5, a6);
  swift_release();
  return v12;
}

_QWORD *VAAVSAudioEnroller.init(encoder:keywordIdentifier:endpointerConfig:delegate:maxSamplesPerEnrollment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6 = sub_24A1D3AD8(a1, a2, a3, a4, a5, a6);
  swift_release();
  return v6;
}

uint64_t sub_24A1D1F3C(objc_class *a1)
{
  uint64_t v1;
  uint64_t (*v3)(_BYTE *, uint64_t);
  AVAudioPCMBuffer v4;
  Swift::OpaquePointer *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE v20[32];

  v3 = (uint64_t (*)(_BYTE *, uint64_t))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 336))(v20);
  v4.super.super.isa = a1;
  VAfp16AVAudioBufferToFP32Array(buffer:floatBuffer:)(v4, v5);
  if (v6)
    return v3(v20, 1);
  v8 = v3(v20, 0);
  v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 320);
  v10 = *(_QWORD *)(v9(v8) + 16);
  result = swift_bridgeObjectRelease();
  if (v10)
  {
    v11 = 0;
    while (1)
    {
      v12 = v11 + 640;
      if (__OFADD__(v11, 640))
        break;
      v13 = *(_QWORD *)(v9(result) + 16);
      result = swift_bridgeObjectRelease();
      if (v13 >= v12)
        v13 = v11 + 640;
      if (v13 < v11)
        goto LABEL_26;
      result = v9(result);
      v14 = *(_QWORD *)(result + 16);
      if (v14 < (unint64_t)v11 || v14 < v13)
        goto LABEL_27;
      v16 = sub_24A1D20C0(result, result + 32, v11, (2 * v13) | 1);
      result = swift_bridgeObjectRelease();
      if ((v16 & 1) != 0)
        return result;
      v11 += 640;
      if (v12 >= v10)
        goto LABEL_17;
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v13 = 0;
LABEL_17:
  v17 = *(_QWORD *)(v9(result) + 16);
  result = swift_bridgeObjectRelease();
  if (v17 < v13)
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    return result;
  }
  result = v9(result);
  v18 = *(_QWORD *)(result + 16);
  if (v18 < v13 || v18 < v17)
    goto LABEL_29;
  sub_24A1D20C0(result, result + 32, v13, (2 * v17) | 1);
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A1D20C0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4))(_QWORD *, _QWORD)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(_QWORD *, _QWORD);
  uint64_t v17;
  uint64_t (*result)(_QWORD *, _QWORD);
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[2];
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v5 = v4;
  v9 = type metadata accessor for VASingleEnrollmentData();
  MEMORY[0x24BDAC7A8](v9);
  v50 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_24A215A8C();
  v57 = *(_QWORD *)(v52 - 8);
  v11 = MEMORY[0x24BDAC7A8](v52);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v48 - v14;
  v16 = (uint64_t (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*(_QWORD *)v4 + 192))(v53);
  v17 = swift_unknownObjectRetain();
  sub_24A158E44(v17, a2, a3, a4);
  swift_unknownObjectRelease();
  result = (uint64_t (*)(_QWORD *, _QWORD))v16(v53, 0);
  v19 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_20;
  }
  result = (uint64_t (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*(_QWORD *)v4 + 240))(v53);
  v21 = *v20 + v19;
  if (__OFADD__(*v20, v19))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v49 = v13;
  *v20 = v21;
  v22 = result(v53, 0);
  v23 = *(uint64_t (**)(void))(*(_QWORD *)v4 + 176);
  v24 = *(_QWORD *)(((uint64_t (*)(uint64_t))v23)(v22) + 16);
  v25 = swift_bridgeObjectRelease();
  v26 = *(_QWORD *)(v4 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_maxSamplesPerEnrollment);
  v27 = v52;
  if (v26 < v24)
  {
    v28 = sub_24A1B9D90();
    (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v15, v28, v27);
    swift_retain_n();
    v29 = sub_24A215A74();
    v30 = sub_24A216104();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v31 = 134217984;
      v32 = *(_QWORD *)(v23() + 16);
      swift_release();
      result = (uint64_t (*)(_QWORD *, _QWORD))swift_bridgeObjectRelease();
      if (__OFSUB__(v32, v26))
      {
LABEL_22:
        __break(1u);
        return result;
      }
      v53[0] = v32 - v26;
      sub_24A216260();
      swift_release();
      _os_log_impl(&dword_24A12D000, v29, v30, "Enrollment is running long, need to reduce %ld samples", v31, 0xCu);
      MEMORY[0x24BD0AAAC](v31, -1, -1);

      v27 = v52;
    }
    else
    {

      swift_release_n();
    }
    v33 = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v15, v27);
    v34 = ((uint64_t (*)(uint64_t))v23)(v33);
    v35 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 200))();
    v36 = __OFSUB__(v26, v35);
    result = (uint64_t (*)(_QWORD *, _QWORD))(v26 - v35);
    if (!v36)
    {
      v37 = sub_24A15EE50((uint64_t)result, v34);
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 184))(v37);
      v25 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v5 + 208))(0);
      goto LABEL_10;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
LABEL_10:
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v5 + 368))(v53, v25);
  v38 = v54;
  if (v54 == 1)
  {
    v39 = sub_24A1B9D90();
    v40 = v49;
    (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v49, v39, v27);
    v41 = sub_24A215A74();
    v42 = sub_24A2160F8();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v43 = 0;
      _os_log_impl(&dword_24A12D000, v41, v42, "Enrollment audio capture completed", v43, 2u);
      MEMORY[0x24BD0AAAC](v43, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v57 + 8))(v40, v27);
    sub_24A193940(v5 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_delegate, (uint64_t)v53);
    v44 = v55;
    v45 = (uint64_t)v50;
    if (v55)
    {
      v46 = v56;
      sub_24A14B668(v53, v55);
      v47 = v51;
      (*(void (**)(void))(*(_QWORD *)v5 + 384))();
      if (!v47)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 8))(v45, v44, v46);
        sub_24A1AB4D8(v45);
      }
      sub_24A14D184((uint64_t)v53);
    }
    else
    {
      sub_24A1CF518((uint64_t)v53);
    }
  }
  return (uint64_t (*)(_QWORD *, _QWORD))v38;
}

uint64_t sub_24A1D2530@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  char v19;
  uint8_t *v20;
  uint64_t v21;
  _DWORD v23[4];

  v2 = v1;
  v4 = sub_24A215A8C();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v23 - v8;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 376))(v7);
  v23[0] = 1;
  v11 = v10;
  v12 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 296))();
  v13 = (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)v12 + 440))(v11);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14 = swift_bridgeObjectRelease();
  if ((v13 & 1) != 0)
  {
    v15 = sub_24A1B9D90();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v9, v15, v4);
    v16 = sub_24A215A74();
    v17 = sub_24A2160F8();
    v18 = os_log_type_enabled(v16, v17);
    v19 = v23[0];
    if (v18)
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v20 = 67109120;
      v23[1] = 1;
      sub_24A216260();
      _os_log_impl(&dword_24A12D000, v16, v17, "%{BOOL}d", v20, 8u);
      MEMORY[0x24BD0AAAC](v20, -1, -1);
    }

    v14 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  }
  else
  {
    v19 = 0;
  }
  v21 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 176))(v14) + 16);
  swift_bridgeObjectRelease();
  return sub_24A1AB614(v21, *(_QWORD *)(v2 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_maxSamplesPerEnrollment), v19, a1);
}

uint64_t sub_24A1D27E0()
{
  _QWORD **v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD **v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t result;
  BOOL v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(_BYTE *);
  _QWORD **v28;
  _QWORD *v29;
  _QWORD *v30;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(_BYTE *);
  void (*v36)(_BYTE *, _QWORD);
  void (*v37)(_BYTE *, _QWORD);
  _QWORD *v38;
  int64_t v39;
  uint64_t v40;
  void *v41;
  char *v42;
  uint64_t __n;
  void *v44;
  uint64_t v45;
  void (*v46)(_BYTE *, _QWORD);
  uint64_t v47;
  uint64_t (*v48)(void);
  uint64_t v49;
  _BYTE v50[32];
  _QWORD **v51;

  v2 = v1;
  v3 = v0;
  type metadata accessor for VAStrideConfiguration();
  v4 = static VAStrideConfiguration.forFlexibleAVS()();
  v5 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v6 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v4) + 0xB8))();
  v7 = (*(uint64_t (**)(void))((*v5 & *v4) + 0xD0))();
  v8 = ((uint64_t (*)(void))(*v0)[25])();
  v48 = (uint64_t (*)(void))(*v0)[22];
  v9 = *(_QWORD *)(v48() + 16);
  v10 = swift_bridgeObjectRelease();
  v49 = v9 - v6;
  if (__OFSUB__(v9, v6))
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if (!v7)
  {
LABEL_55:
    __break(1u);
LABEL_56:
    swift_unknownObjectRelease();
    __break(1u);
LABEL_57:
    result = sub_24A21644C();
    __break(1u);
    return result;
  }
  v44 = v4;
  v11 = v49 >= v8;
  if (v7 > 0)
    v11 = v8 >= v49;
  if (!v11)
  {
    __n = 4 * v6;
    v51 = v0;
    v45 = v6;
    v47 = v7;
    while (1)
    {
      v15 = __OFADD__(v8, v7) ? ((v8 + v7) >> 63) ^ 0x8000000000000000 : v8 + v7;
      v16 = v8 + v6;
      if (__OFADD__(v8, v6))
        break;
      if (v16 < v8)
        goto LABEL_50;
      v17 = ((uint64_t (*)(uint64_t))v48)(v10);
      if (v8 < 0)
        goto LABEL_51;
      v18 = v17;
      v19 = *(_QWORD *)(v17 + 16);
      if (v19 < v8 || (uint64_t)v19 < v16)
        goto LABEL_52;
      v12 = sub_24A2165C0();
      swift_unknownObjectRetain_n();
      v21 = swift_dynamicCastClass();
      if (!v21)
      {
        swift_bridgeObjectRelease();
        v21 = MEMORY[0x24BEE4AF8];
      }
      v22 = *(_QWORD *)(v21 + 16);
      swift_release();
      if (v22 == v6)
      {
        v23 = (_QWORD *)swift_dynamicCastClass();
        v3 = v51;
        if (!v23)
        {
          swift_bridgeObjectRelease();
          v23 = (_QWORD *)MEMORY[0x24BEE4AF8];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v23 = (_QWORD *)MEMORY[0x24BEE4AF8];
        v3 = v51;
        if (v16 != v8)
        {
          if (v6 < 1)
          {
            if (v6 < 0)
              goto LABEL_57;
          }
          else
          {
            sub_24A135F88(&qword_257909960);
            v23 = (_QWORD *)swift_allocObject();
            v39 = j__malloc_size(v23);
            v40 = v39 - 32;
            if (v39 < 32)
              v40 = v39 - 29;
            v23[2] = v6;
            v23[3] = 2 * (v40 >> 2);
          }
          v41 = v23 + 4;
          v42 = (char *)(v18 + 32 + 4 * v8);
          if (v42 < (char *)v23 + 4 * v6 + 32 && (unint64_t)v41 < v18 + 32 + 4 * v16)
            goto LABEL_57;
          memcpy(v41, v42, __n);
        }
      }
      swift_bridgeObjectRelease();
      if (v23[2] == v6)
      {
        (*(void (**)(_QWORD *))(*v3[2] + 264))(v23);
        if (v2)
        {
          swift_release();

          return v12;
        }
        swift_release();
        type metadata accessor for EncoderPredictionAVS();
        v24 = swift_dynamicCastClass();
        if (!v24)
          goto LABEL_56;
        v25 = v24;
        v26 = *(_QWORD *)(v24 + 16);
        if (*(_QWORD *)(v26 + 16))
        {
          v27 = (uint64_t (*)(_BYTE *))(*v3)[33];
          swift_bridgeObjectRetain();
          v46 = (void (*)(_BYTE *, _QWORD))v27(v50);
          v29 = v28;
          v30 = *v28;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *v29 = v30;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v30 = sub_24A173758(0, v30[2] + 1, 1, v30);
            *v29 = v30;
          }
          v33 = v30[2];
          v32 = v30[3];
          if (v33 >= v32 >> 1)
          {
            v30 = sub_24A173758((_QWORD *)(v32 > 1), v33 + 1, 1, v30);
            *v29 = v30;
          }
          v30[2] = v33 + 1;
          v30[v33 + 4] = v26;
          v46(v50, 0);
          v34 = *(_QWORD *)(v25 + 24);
          v3 = v51;
          v35 = (uint64_t (*)(_BYTE *))(*v51)[36];
          swift_bridgeObjectRetain();
          v36 = (void (*)(_BYTE *, _QWORD))v35(v50);
          sub_24A1472A0(v34);
          v36(v50, 0);
        }
        v37 = (void (*)(_BYTE *, _QWORD))((uint64_t (*)(_BYTE *))(*v3)[27])(v50);
        v7 = v47;
        if (__OFADD__(*v38, v47))
          goto LABEL_53;
        *v38 += v47;
        v37(v50, 0);
        v10 = swift_unknownObjectRelease();
        v2 = 0;
        v6 = v45;
      }
      else
      {
        v10 = swift_release();
        v7 = v47;
      }
      v14 = v49 >= v15;
      if (v7 > 0)
        v14 = v15 >= v49;
      v8 = v15;
      if (v14)
        goto LABEL_6;
    }
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
LABEL_6:
  v12 = ((uint64_t (*)(uint64_t))(*v3)[31])(v10);
  ((void (*)(void))(*v3)[34])();

  return v12;
}

uint64_t sub_24A1D2D08@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(_QWORD);
  NSObject *v61;
  os_log_type_t v62;
  int v63;
  _BOOL4 v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  uint8_t *v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t (*v86)(uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v91;
  _BYTE v92[4];
  int v93;
  uint64_t (*v94)(void);
  uint64_t v95;
  uint64_t v96;
  void (*v97)(_BYTE *, uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  uint64_t (*v103)(uint64_t);
  uint64_t (*v104)(void);
  uint64_t v105;
  uint64_t v106;
  _BYTE *v107;
  uint64_t (*v108)(uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114[3];
  uint64_t v115;
  uint64_t v116;

  v3 = v2;
  v4 = v1;
  v6 = sub_24A2157A4();
  v109 = *(_QWORD *)(v6 - 8);
  v110 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v92[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_24A215A8C();
  v105 = *(_QWORD *)(v9 - 8);
  v106 = v9;
  v10 = MEMORY[0x24BDAC7A8](v9);
  v107 = &v92[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = MEMORY[0x24BDAC7A8](v10);
  v104 = (uint64_t (*)(void))&v92[-v13];
  v116 = -1;
  v115 = -1;
  v14 = *(void (**)(uint64_t))(*v1 + 272);
  v14(v12);
  v15 = swift_bridgeObjectRelease();
  v103 = (uint64_t (*)(uint64_t))v14;
  v16 = ((uint64_t (*)(uint64_t))v14)(v15);
  v17 = *(uint64_t (**)(void))(*v1 + 296);
  v18 = v17();
  v19 = (*(float (**)(uint64_t))(*(_QWORD *)v18 + 216))(v18);
  v20 = swift_release();
  v21 = ((uint64_t (*)(uint64_t))v17)(v20);
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 240))(v21);
  swift_release();
  v23 = sub_24A174CA8();
  v24 = sub_24A174CB0();
  v25 = sub_24A174CC0();
  v26 = sub_24A174CC8(v16, v22, v23, v25, v19, v24);
  v28 = v27;
  swift_bridgeObjectRelease();
  v29 = *(uint64_t (**)(uint64_t))(*v4 + 248);
  v30 = swift_bridgeObjectRetain();
  v108 = v29;
  v31 = v29(v30);
  v32 = v26[2];
  v111 = a1;
  if (!v32 || !*(_QWORD *)(v28 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v74 = 2;
    goto LABEL_30;
  }
  v102 = v8;
  v33 = sub_24A171EB0();
  v34 = sub_24A1753E8((uint64_t)v26, v28, v33);
  v8 = v35;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRetain();
  v36 = sub_24A175798(v34, (uint64_t)v8);
  v38 = v37;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v39 = *(_QWORD *)(v38 + 16);
  if (!v39)
  {
    __break(1u);
    goto LABEL_32;
  }
  if (!*(_QWORD *)(v36 + 16))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v101 = v3;
  v40 = *(_QWORD *)(v38 + 32 + 8 * v39 - 8);
  v41 = *(_QWORD *)(v36 + 32);
  v42 = v40 - v41;
  if (__OFSUB__(v40, v41))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v43 = swift_bridgeObjectRetain();
  v44 = ((uint64_t (*)(uint64_t))v17)(v43);
  v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 192))(v44);
  swift_release();
  if (v45 >= v42)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v74 = 2;
    v8 = v102;
    goto LABEL_30;
  }
  swift_bridgeObjectRelease();
  v8 = *(_BYTE **)(v36 + 32);
  swift_bridgeObjectRelease();
  v46 = *(_QWORD *)(v38 + 16);
  if (!v46)
    goto LABEL_34;
  v47 = *(_QWORD *)(v38 + 32 + 8 * v46 - 8);
  v48 = swift_bridgeObjectRelease();
  v49 = ((uint64_t (*)(uint64_t))v17)(v48);
  v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 288))(v49);
  v51 = swift_release();
  v52 = v105;
  v36 = v106;
  if (__OFSUB__(v8, v50))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v8 = (_BYTE *)((unint64_t)&v8[-v50] & ~((uint64_t)&v8[-v50] >> 63));
  v116 = (uint64_t)v8;
  v53 = ((uint64_t (*)(uint64_t))v17)(v51);
  v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 312))(v53);
  v55 = swift_release();
  v17 = (uint64_t (*)(void))(v47 + v54);
  if (__OFADD__(v47, v54))
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v56 = *(_QWORD *)(v108(v55) + 16);
  swift_bridgeObjectRelease();
  if (v56 >= (uint64_t)v17)
    v57 = v47 + v54;
  else
    v57 = v56;
  v115 = v57;
  v100 = v57;
  v99 = v57 - (_QWORD)v8;
  if (__OFSUB__(v57, v8))
    goto LABEL_37;
  v58 = (uint64_t)v8;
  v59 = sub_24A1B9D90();
  v60 = *(void (**)(_QWORD))(v52 + 16);
  v17 = v104;
  v96 = v59;
  v97 = (void (*)(_BYTE *, uint64_t, uint64_t))v60;
  v60(v104);
  swift_retain_n();
  v61 = sub_24A215A74();
  v62 = sub_24A2160F8();
  v63 = v62;
  v64 = os_log_type_enabled(v61, v62);
  v98 = v58;
  if (v64)
  {
    v65 = swift_slowAlloc();
    v95 = swift_slowAlloc();
    v114[0] = v95;
    *(_DWORD *)v65 = 136316162;
    v94 = (uint64_t (*)(void))v61;
    v93 = v63;
    v66 = v4[3];
    v67 = v4[4];
    swift_bridgeObjectRetain();
    v113 = sub_24A148270(v66, v67, v114);
    sub_24A216260();
    swift_bridgeObjectRelease();
    *(_WORD *)(v65 + 12) = 2048;
    v113 = v98;
    sub_24A216260();
    *(_WORD *)(v65 + 22) = 2048;
    v68 = v100;
    v113 = v100;
    sub_24A216260();
    *(_WORD *)(v65 + 32) = 2048;
    v113 = v99;
    v69 = sub_24A216260();
    *(_WORD *)(v65 + 42) = 2048;
    v70 = *(_QWORD *)(v103(v69) + 16);
    swift_release();
    swift_bridgeObjectRelease();
    v113 = v70;
    v36 = v106;
    sub_24A216260();
    swift_release();
    v17 = v94;
    _os_log_impl(&dword_24A12D000, (os_log_t)v94, (os_log_type_t)v93, "Enrollment %s clipping to [%ld , %ld](%ld total) frames from original %ld frames", (uint8_t *)v65, 0x34u);
    v71 = v95;
    swift_arrayDestroy();
    MEMORY[0x24BD0AAAC](v71, -1, -1);
    v72 = v65;
    v58 = v98;
    MEMORY[0x24BD0AAAC](v72, -1, -1);

    v105 = *(_QWORD *)(v105 + 8);
    v73 = ((uint64_t (*)(uint64_t (*)(void), uint64_t))v105)(v104, v36);
    v8 = v102;
  }
  else
  {

    swift_release_n();
    v105 = *(_QWORD *)(v52 + 8);
    v73 = ((uint64_t (*)(uint64_t (*)(void), uint64_t))v105)(v17, v36);
    v8 = v102;
    v68 = v100;
  }
  if (v68 < v58)
    goto LABEL_38;
  v75 = v108(v73);
  v76 = *(_QWORD *)(v75 + 16);
  if (v76 < v58 || (uint64_t)v76 < v100)
    goto LABEL_39;
  v17 = (uint64_t (*)(void))v75;
  sub_24A2165C0();
  swift_unknownObjectRetain_n();
  v77 = swift_dynamicCastClass();
  if (!v77)
  {
    swift_bridgeObjectRelease();
    v77 = MEMORY[0x24BEE4AF8];
  }
  v78 = *(_QWORD *)(v77 + 16);
  swift_release();
  if (v78 == v99)
  {
    v31 = swift_dynamicCastClass();
    if (!v31)
    {
      swift_bridgeObjectRelease();
      v31 = MEMORY[0x24BEE4AF8];
    }
    goto LABEL_27;
  }
LABEL_40:
  v91 = (2 * v100) | 1;
  swift_bridgeObjectRelease();
  v31 = sub_24A14A7E4((uint64_t)v17, (uint64_t)v17 + 32, v98, v91);
LABEL_27:
  swift_bridgeObjectRelease();
  v97(v107, v96, v36);
  v79 = sub_24A215A74();
  v80 = sub_24A2160F8();
  if (os_log_type_enabled(v79, v80))
  {
    v81 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v81 = 134217984;
    v114[0] = v99;
    sub_24A216260();
    _os_log_impl(&dword_24A12D000, v79, v80, "[Enroll] (clusterWindows+getMetaClusters): %ld", v81, 0xCu);
    v82 = v81;
    v8 = v102;
    MEMORY[0x24BD0AAAC](v82, -1, -1);
  }

  ((void (*)(_BYTE *, uint64_t))v105)(v107, v36);
  v74 = 1;
LABEL_30:
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v109 + 16))(v8, (uint64_t)v4 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_id, v110);
  v83 = (uint64_t)v8;
  v84 = v4[3];
  v85 = v4[4];
  v86 = *(uint64_t (**)(uint64_t))(*v4 + 176);
  v87 = swift_bridgeObjectRetain();
  v88 = v86(v87);
  swift_beginAccess();
  v89 = v116;
  swift_beginAccess();
  v112 = v74;
  sub_24A1AB51C(v83, v31, v84, v85, v88, v89, v115, &v112, v111);
  return swift_bridgeObjectRelease();
}

uint64_t VAAVSAudioEnroller.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_id;
  v2 = sub_24A2157A4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_24A1CF518(v0 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_delegate);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VAAVSAudioEnroller.__deallocating_deinit()
{
  VAAVSAudioEnroller.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_24A1D366C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 352))();
}

uint64_t sub_24A1D3694()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 384))();
}

uint64_t sub_24A1D36BC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 368))();
}

uint64_t VAAVSAudioEnrollerFactory.__allocating_init(encoder:endpointerConfig:delegate:maxSamplesPerEnrollment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  int v11;

  v10 = swift_allocObject();
  v11 = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(v10 + 16) = a1;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)a2;
  *(_DWORD *)(v10 + 40) = v11;
  *(_OWORD *)(v10 + 48) = *(_OWORD *)(a2 + 24);
  sub_24A1CF558(a3, v10 + 64);
  if ((a5 & 1) != 0)
    a4 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(v10 + 104) = a4;
  return v10;
}

uint64_t VAAVSAudioEnrollerFactory.init(encoder:endpointerConfig:delegate:maxSamplesPerEnrollment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  int v9;

  v9 = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(v5 + 16) = a1;
  *(_OWORD *)(v5 + 24) = *(_OWORD *)a2;
  *(_DWORD *)(v5 + 40) = v9;
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(a2 + 24);
  sub_24A1CF558(a3, v5 + 64);
  if ((a5 & 1) != 0)
    a4 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(v5 + 104) = a4;
  return v5;
}

uint64_t sub_24A1D37D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  __int128 v14;
  int v15;
  __int128 v16;
  _BYTE v17[40];

  v7 = sub_24A215A8C();
  MEMORY[0x24BDAC7A8](v7);
  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_DWORD *)(v3 + 40);
  v14 = *(_OWORD *)(v3 + 24);
  v15 = v9;
  v16 = *(_OWORD *)(v3 + 48);
  sub_24A193940(v3 + 64, (uint64_t)v17);
  v10 = *(_QWORD *)(v3 + 104);
  v11 = type metadata accessor for VAAVSAudioEnroller();
  swift_allocObject();
  swift_retain();
  swift_bridgeObjectRetain();
  v12 = sub_24A1D3AD8(v8, a1, a2, (uint64_t *)&v14, (uint64_t)v17, v10);
  swift_release();
  VARuntimeParameters.init()((uint64_t)&v14);
  (*(void (**)(__int128 *))(*(_QWORD *)v8 + 96))(&v14);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  a3[3] = v11;
  a3[4] = &protocol witness table for VAAVSAudioEnroller;
  *a3 = v12;
  return result;
}

uint64_t VAAVSAudioEnrollerFactory.deinit()
{
  uint64_t v0;

  swift_release();
  sub_24A1CF518(v0 + 64);
  return v0;
}

uint64_t VAAVSAudioEnrollerFactory.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  sub_24A1CF518(v0 + 64);
  return swift_deallocClassInstance();
}

uint64_t sub_24A1D3AB0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 120))();
}

_QWORD *sub_24A1D3AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  int v30;
  uint64_t v31;
  uint64_t v32;

  v7 = v6;
  v28 = a6;
  v13 = sub_24A2157A4();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *a4;
  v17 = a4[1];
  v19 = *((_DWORD *)a4 + 4);
  v20 = a4[3];
  v21 = a4[4];
  v26 = v20;
  v27 = v17;
  v22 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_embeddings) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_silProbs) = v22;
  *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_floatArr) = v22;
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = a3;
  v7[5] = v22;
  swift_retain();
  sub_24A215798();
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))((uint64_t)v7 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_id, v16, v13);
  sub_24A193940(a5, (uint64_t)v7 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_delegate);
  *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_maxSamplesPerEnrollment) = v28;
  *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_processedAudioSamples) = 0;
  *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_newSamples) = 0;
  type metadata accessor for AVSEndpointer();
  v29[0] = v18;
  v29[1] = v27;
  v30 = v19;
  v31 = v26;
  v32 = v21;
  AVSEndpointer.__allocating_init(config:)((uint64_t)v29);
  v24 = v23;
  sub_24A1CF518(a5);
  *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12VoiceActions18VAAVSAudioEnroller_endpointer) = v24;
  return v7;
}

uint64_t type metadata accessor for VAAVSAudioEnroller()
{
  uint64_t result;

  result = qword_25791BCA0;
  if (!qword_25791BCA0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_24A1D3CA0()
{
  return type metadata accessor for VAAVSAudioEnroller();
}

uint64_t sub_24A1D3CA8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_24A2157A4();
  if (v1 <= 0x3F)
    return swift_updateClassMetadata2();
  return result;
}

uint64_t method lookup function for VAAVSAudioEnroller()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAAVSAudioEnroller.__allocating_init(encoder:keywordIdentifier:endpointerConfig:delegate:maxSamplesPerEnrollment:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 344))();
}

uint64_t dispatch thunk of VAAVSAudioEnroller.addAudio(buffer:hostTime:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of VAAVSAudioEnroller.getEnrollmentProgress()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of VAAVSAudioEnroller.getEnrollmentData()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t type metadata accessor for VAAVSAudioEnrollerFactory()
{
  return objc_opt_self();
}

uint64_t method lookup function for VAAVSAudioEnrollerFactory()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAAVSAudioEnrollerFactory.__allocating_init(encoder:endpointerConfig:delegate:maxSamplesPerEnrollment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v5 + 112))(a1, a2, a3, a4, a5 & 1);
}

uint64_t dispatch thunk of VAAVSAudioEnrollerFactory.makeAudioEnroller(keywordIdentifier:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

_QWORD *sub_24A1D3E00(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;

  result = (_QWORD *)swift_allocObject();
  result[3] = 0;
  result[4] = a1;
  result[5] = a2;
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = result;
    if (a2)
    {
      v6 = sub_24A215EF4();
      *(_QWORD *)(v6 + 16) = a2;
      bzero((void *)(v6 + 32), 4 * a2);
    }
    else
    {
      v6 = MEMORY[0x24BEE4AF8];
    }
    v5[2] = sub_24A1421D4(v6, a1);
    return v5;
  }
  return result;
}

uint64_t sub_24A1D3E94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD **)(v2 + 16);
  if (!v4[2])
  {
    __break(1u);
    goto LABEL_10;
  }
  v1 = a1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(v4[4] + 16))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v3 = *(_QWORD *)(v2 + 24);
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v2 + 16) = v4;
  if ((result & 1) != 0)
  {
    if ((v3 & 0x8000000000000000) == 0)
      goto LABEL_5;
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
LABEL_11:
  result = (uint64_t)sub_24A14893C(v4);
  v4 = (_QWORD *)result;
  *(_QWORD *)(v2 + 16) = result;
  if ((v3 & 0x8000000000000000) != 0)
    goto LABEL_12;
LABEL_5:
  if (v3 >= v4[2])
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v4[v3 + 4] = v1;
  v6 = *(_QWORD *)(v2 + 16);
  result = swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v2 + 24);
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v10 = *(_QWORD *)(v6 + 16);
  if (v10)
  {
    *(_QWORD *)(v2 + 24) = v9 % v10;
    return result;
  }
LABEL_15:
  __break(1u);
  return result;
}

void sub_24A1D3F64()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v1 = v0[4];
  if (v1 < 0)
  {
LABEL_17:
    __break(1u);
    return;
  }
  if (v1)
  {
    v2 = 0;
    v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
    while (1)
    {
      v4 = v0[3];
      v5 = __OFADD__(v2, v4);
      v6 = v2 + v4;
      if (v5)
        break;
      v7 = v6 % v1;
      if ((v7 & 0x8000000000000000) != 0)
        goto LABEL_15;
      v8 = v0[2];
      if (v7 >= *(_QWORD *)(v8 + 16))
        goto LABEL_16;
      v9 = *(_QWORD *)(v8 + 8 * v7 + 32);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = sub_24A173758(0, v3[2] + 1, 1, v3);
      v11 = v3[2];
      v10 = v3[3];
      if (v11 >= v10 >> 1)
        v3 = sub_24A173758((_QWORD *)(v10 > 1), v11 + 1, 1, v3);
      ++v2;
      v3[2] = v11 + 1;
      v3[v11 + 4] = v9;
      if (v1 == v2)
        return;
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
}

void sub_24A1D4078()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[5];
  if (v1 < 0)
  {
    __break(1u);
  }
  else
  {
    if (v1)
    {
      v2 = sub_24A215EF4();
      *(_QWORD *)(v2 + 16) = v1;
      bzero((void *)(v2 + 32), 4 * v1);
    }
    else
    {
      v2 = MEMORY[0x24BEE4AF8];
    }
    v0[2] = sub_24A1421D4(v2, v0[4]);
    swift_bridgeObjectRelease();
    v0[3] = 0;
  }
}

uint64_t sub_24A1D40F8()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for VACircularMatrixBuffer()
{
  return objc_opt_self();
}

uint64_t VAA2TEncoderV2.__allocating_init(computeUnits:)()
{
  uint64_t v0;

  v0 = swift_allocObject();
  VAA2TEncoderV2.init(computeUnits:)();
  return v0;
}

uint64_t VAA2TEncoderV2.init(computeUnits:)()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBFFE0]), sel_init);
  sub_24A180568();
  sub_24A215E64();
  sub_24A215E64();
  if (v10 == v8 && v11 == v9)
  {
    swift_bridgeObjectRelease_n();
    v3 = 0;
  }
  else
  {
    v4 = sub_24A21659C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v4 & 1) != 0)
    {
      v3 = 0;
    }
    else
    {
      sub_24A215E64();
      sub_24A215E64();
      if (v10 == v8 && v11 == v9)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v5 = sub_24A21659C();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v5 & 1) == 0)
          goto LABEL_12;
      }
      v3 = 3;
    }
  }
  objc_msgSend(v2, sel_setComputeUnits_, v3);
LABEL_12:
  type metadata accessor for at_encoder_rdr_125141826();
  v6 = sub_24A18B9F8(v2);
  if (v1)
  {
    swift_bridgeObjectRelease();

    type metadata accessor for VAA2TEncoderV2();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(_QWORD *)(v0 + 16) = v6;
  }
  return v0;
}

uint64_t type metadata accessor for VAA2TEncoderV2()
{
  return objc_opt_self();
}

void (*sub_24A1D43A0(uint64_t a1))(_BYTE *, uint64_t)
{
  _QWORD **v1;
  uint64_t v2;
  _QWORD **v3;
  void (*v5)(_BYTE *, uint64_t);
  void **v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t (*v15)(_BYTE *, _QWORD);
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _BYTE v20[32];

  v3 = v1;
  v5 = (void (*)(_BYTE *, uint64_t))((uint64_t (*)(_BYTE *))(*v1)[18])(v20);
  sub_24A17EAF4(a1, v6);
  if (v2)
  {
    v5(v20, 1);
  }
  else
  {
    v8 = ((uint64_t (*)(_BYTE *, _QWORD))v5)(v20, 0);
    v5 = (void (*)(_BYTE *, uint64_t))v3;
    v9 = ((uint64_t (*)(uint64_t))(*v3)[16])(v8);
    if (v9)
    {
      v10 = (void *)v9;
      type metadata accessor for at_encoder_rdr_125141826Input();
      v11 = v10;
      sub_24A18CC94();
      v12 = (*(uint64_t (**)(void))(*v3[2] + 136))();
      v14 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
      swift_release();
      v15 = (uint64_t (*)(_BYTE *, _QWORD))((uint64_t (*)(_BYTE *))(*v3)[15])(v20);
      sub_24A17EDAC(v14, v16);
      v17 = v15(v20, 0);
      v5 = (void (*)(_BYTE *, uint64_t))v3;
      v18 = ((uint64_t (*)(uint64_t))(*v3)[13])(v17);
      if (v18)
      {
        v5 = (void (*)(_BYTE *, uint64_t))v18;
      }
      else
      {
        sub_24A14C404();
        swift_allocError();
        *v19 = 0xD00000000000001ELL;
        v19[1] = 0x800000024A2230F0;
        swift_willThrow();
      }

      swift_release();
    }
    else
    {
      sub_24A14C404();
      swift_allocError();
      *v13 = 0xD00000000000001DLL;
      v13[1] = 0x800000024A2230D0;
      swift_willThrow();
    }
  }
  return v5;
}

uint64_t VAA2TEncoderV2.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t VAA2TEncoderV2.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_24A1D45FC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 160))();
}

uint64_t method lookup function for VAA2TEncoderV2()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAA2TEncoderV2.__allocating_init(computeUnits:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of VAA2TEncoderV2.predict(featureExtractionBuffer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t sub_24A1D4664@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_delegate;
  swift_beginAccess();
  return sub_24A193940(v3, a1);
}

uint64_t sub_24A1D46B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_delegate;
  swift_beginAccess();
  sub_24A1CE5C0(a1, v3);
  return swift_endAccess();
}

uint64_t (*sub_24A1D470C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A1D4750()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A1D4798(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_embeddings);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A1D47E8())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_24A1D482C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_processedAudioSamples;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1D4870(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_processedAudioSamples);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_24A1D48B8())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A1D48FC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_newSamples;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1D4940(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_newSamples);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_24A1D4988())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t VAA2AAudioEnrollerV2.__allocating_init(encoder:keywordIdentifier:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = swift_allocObject();
  VAA2AAudioEnrollerV2.init(encoder:keywordIdentifier:delegate:)(a1, a2, a3, a4);
  return v8;
}

_QWORD *VAA2AAudioEnrollerV2.init(encoder:keywordIdentifier:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v9 = sub_24A2157A4();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BEE4AF8];
  v4[5] = MEMORY[0x24BEE4AF8];
  v4[6] = v13;
  v14 = (char *)v4 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_delegate;
  *(_OWORD *)v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  *((_QWORD *)v14 + 4) = 0;
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_embeddings) = v13;
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_numEmbeddingsPerEnrollment) = 48;
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_maxSamplesPerEnrollment) = 31920;
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_processedAudioSamples) = 0;
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_newSamples) = 0;
  v4[2] = a1;
  v4[3] = a2;
  v4[4] = a3;
  sub_24A215798();
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))((uint64_t)v4 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_id, v12, v9);
  v15 = (uint64_t)v4 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_delegate;
  swift_beginAccess();
  sub_24A1CE5C0(a4, v15);
  swift_endAccess();
  return v4;
}

uint64_t (*sub_24A1D4B80(objc_class *a1))(__int128 *, _QWORD)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(__int128 *, uint64_t);
  AVAudioPCMBuffer v10;
  Swift::OpaquePointer *v11;
  uint64_t v12;
  uint64_t (*result)(__int128 *, _QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t (*v18)(__int128 *, _QWORD);
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  __int16 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  int v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  __int16 v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;

  v3 = v1;
  v5 = type metadata accessor for VASingleEnrollmentData();
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(uint64_t (**)(uint64_t))(*v1 + 288))(v6))
    goto LABEL_2;
  v14 = v1[2];
  VARuntimeParameters.init()((uint64_t)&v52);
  v34 = v52;
  v35 = DWORD2(v52);
  v36 = WORD6(v52);
  v37 = v53;
  LOBYTE(v38) = v54;
  v39 = v55;
  v40 = v56;
  v41 = v57;
  v42 = v58;
  v43 = v59;
  v44 = v60;
  v45 = v61;
  v46 = v62;
  v47 = v63;
  v48 = v64;
  v49 = v65;
  v50 = v66;
  v51 = v67;
  (*(void (**)(uint64_t *))(*(_QWORD *)v14 + 96))(&v34);
  swift_bridgeObjectRelease();
  result = (uint64_t (*)(__int128 *, _QWORD))swift_bridgeObjectRelease();
  if (!v2)
  {
LABEL_2:
    v9 = (uint64_t (*)(__int128 *, uint64_t))(*(uint64_t (**)(__int128 *))(*v3 + 208))(&v52);
    v10.super.super.isa = a1;
    VAfp16AVAudioBufferToFP32Array(buffer:floatBuffer:)(v10, v11);
    if (v12)
    {
      return (uint64_t (*)(__int128 *, _QWORD))v9(&v52, 1);
    }
    else
    {
      v15 = v9(&v52, 0);
      v16 = *(uint64_t (**)(uint64_t))(*v3 + 192);
      v17 = v16(v15);
      v18 = (uint64_t (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *))(*v3 + 184))(&v52);
      sub_24A1472A0(v17);
      v19 = v18(&v52, 0);
      v20 = *(_QWORD *)(v16(v19) + 16);
      swift_bridgeObjectRelease();
      result = (uint64_t (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *))(*v3 + 304))(&v52);
      if (__OFADD__(*v21, v20))
      {
        __break(1u);
      }
      else
      {
        *v21 += v20;
        v22 = result(&v52, 0);
        v23 = *(uint64_t (**)(uint64_t))(*v3 + 168);
        v24 = *(_QWORD *)(v23(v22) + 16);
        v25 = swift_bridgeObjectRelease();
        if (v24 >= 0x7CB1)
        {
          sub_24A135F88(&qword_25790C378);
          v26 = swift_allocObject();
          *(_OWORD *)(v26 + 16) = xmmword_24A218650;
          *(_QWORD *)(v26 + 56) = MEMORY[0x24BEE0D00];
          *(_QWORD *)(v26 + 32) = 0xD00000000000002ALL;
          *(_QWORD *)(v26 + 40) = 0x800000024A226AB0;
          sub_24A216620();
          v27 = swift_bridgeObjectRelease();
          v28 = v23(v27);
          v29 = sub_24A15EE50(31920, v28);
          v25 = (*(uint64_t (**)(uint64_t))(*v3 + 176))(v29);
        }
        v30 = *(_QWORD *)(v23(v25) + 16);
        result = (uint64_t (*)(__int128 *, _QWORD))swift_bridgeObjectRelease();
        if (v30 == 31920)
        {
          (*(void (**)(__int128 *__return_ptr, uint64_t (*)(__int128 *, _QWORD)))(*v3 + 216))(&v52, result);
          if (*((_QWORD *)&v53 + 1))
          {
            sub_24A152310((uint64_t)&v52, (uint64_t)&v34);
            sub_24A1CF518((uint64_t)&v52);
            v31 = *((_QWORD *)&v37 + 1);
            v32 = v38;
            sub_24A14B668(&v34, *((uint64_t *)&v37 + 1));
            (*(void (**)(void))(*v3 + 344))();
            (*(void (**)(char *, uint64_t, uint64_t))(v32 + 8))(v8, v31, v32);
            sub_24A1AB4D8((uint64_t)v8);
            sub_24A14D184((uint64_t)&v34);
          }
          else
          {
            sub_24A1CF518((uint64_t)&v52);
          }
          v54 = 0;
          v52 = 0u;
          v53 = 0u;
          return (uint64_t (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *))(*v3 + 224))(&v52);
        }
      }
    }
  }
  return result;
}

uint64_t sub_24A1D4F3C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  _QWORD *v25;
  int64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  uint64_t (*v30)(void);
  uint64_t v31;
  _BYTE v32[32];
  uint64_t v33;

  v2 = v0;
  type metadata accessor for VAStrideConfiguration();
  v3 = (_QWORD *)static VAStrideConfiguration.forFlexibleA2Av2()();
  v4 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v5 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v3) + 0xB8))();
  v6 = (*(uint64_t (**)(void))((*v4 & *v3) + 0xD0))();
  v7 = (*(uint64_t (**)(void))(*v0 + 264))();
  v30 = *(uint64_t (**)(void))(*v0 + 168);
  v8 = *(_QWORD *)(v30() + 16);
  result = swift_bridgeObjectRelease();
  v31 = v8 - v5;
  if (__OFSUB__(v8, v5))
  {
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
    return result;
  }
  if (!v6)
    goto LABEL_53;
  v29 = v3;
  v33 = v1;
  v10 = v31 >= v7;
  if (v6 > 0)
    v10 = v7 >= v31;
  if (!v10)
  {
    while (1)
    {
      v13 = __OFADD__(v7, v6) ? ((v7 + v6) >> 63) ^ 0x8000000000000000 : v7 + v6;
      v14 = v7 + v5;
      if (__OFADD__(v7, v5))
        break;
      if (v14 < v7)
        goto LABEL_47;
      result = ((uint64_t (*)(uint64_t))v30)(result);
      if (v7 < 0)
        goto LABEL_48;
      v15 = result;
      v16 = *(_QWORD *)(result + 16);
      if (v16 < v7 || (uint64_t)v16 < v14)
        goto LABEL_49;
      sub_24A2165C0();
      swift_unknownObjectRetain_n();
      v18 = swift_dynamicCastClass();
      if (!v18)
      {
        swift_bridgeObjectRelease();
        v18 = MEMORY[0x24BEE4AF8];
      }
      v19 = *(_QWORD *)(v18 + 16);
      swift_release();
      if (v19 == v5)
      {
        v20 = (_QWORD *)swift_dynamicCastClass();
        if (!v20)
        {
          swift_bridgeObjectRelease();
          v20 = (_QWORD *)MEMORY[0x24BEE4AF8];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v20 = (_QWORD *)MEMORY[0x24BEE4AF8];
        if (v14 != v7)
        {
          if (v5 >= 1)
          {
            sub_24A135F88(&qword_257909960);
            v20 = (_QWORD *)swift_allocObject();
            v26 = j__malloc_size(v20);
            v27 = v26 - 32;
            if (v26 < 32)
              v27 = v26 - 29;
            v20[2] = v5;
            v20[3] = 2 * (v27 >> 2);
          }
          memcpy(v20 + 4, (const void *)(v15 + 4 * v7 + 32), 4 * v5);
        }
      }
      swift_bridgeObjectRelease();
      if (v20[2] == v5)
      {
        v11 = v2[2];
        v21 = v33;
        (*(void (**)(_QWORD *))(*(_QWORD *)v11 + 80))(v20);
        v33 = v21;
        if (v21)
        {
          swift_release();
LABEL_44:

          return v11;
        }
        swift_release();
        type metadata accessor for VAFeatureExtractingEncoderOutput();
        result = swift_dynamicCastClass();
        if (!result)
        {
          swift_unknownObjectRelease();
          sub_24A14C404();
          swift_allocError();
          *v28 = 0xD00000000000001ELL;
          v28[1] = 0x800000024A223A40;
          swift_willThrow();
          goto LABEL_44;
        }
        if (*(_BYTE *)(result + 16) == 1)
        {
          v22 = *(_QWORD *)(result + 40);
          if (!v22)
            goto LABEL_54;
          if (!*(_QWORD *)(v22 + 16))
            goto LABEL_51;
          v23 = *(void (**)(uint64_t))(*v2 + 248);
          v24 = swift_bridgeObjectRetain();
          v23(v24);
        }
        result = (*(uint64_t (**)(_BYTE *))(*v2 + 280))(v32);
        if (__OFADD__(*v25, v6))
          goto LABEL_50;
        *v25 += v6;
        ((void (*)(_BYTE *, _QWORD))result)(v32, 0);
        result = swift_unknownObjectRelease();
      }
      else
      {
        result = swift_release();
      }
      v12 = v31 >= v13;
      if (v6 > 0)
        v12 = v13 >= v31;
      v7 = v13;
      if (v12)
        goto LABEL_6;
    }
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
LABEL_6:
  v11 = (*(uint64_t (**)(uint64_t))(*v2 + 240))(result);

  return v11;
}

uint64_t sub_24A1D5314@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *(uint64_t (**)(void))(*(_QWORD *)v1 + 168);
  v4 = *(_QWORD *)(v3() + 16);
  v5 = swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(((uint64_t (*)(uint64_t))v3)(v5) + 16);
  swift_bridgeObjectRelease();
  return sub_24A1AB614(v4, 31920, v6 >> 4 > 0x7CA, a1);
}

int *sub_24A1D5370@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v4 = sub_24A2157A4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, (uint64_t)v1 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_id, v4);
  v9 = (*(uint64_t (**)(uint64_t))(*v1 + 328))(v8);
  if (v2)
    return (int *)(*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v11 = v9;
  v12 = v1[3];
  v13 = v1[4];
  v14 = *(uint64_t (**)(uint64_t))(*v1 + 168);
  v15 = swift_bridgeObjectRetain();
  v16 = v14(v15);
  v20 = 1;
  v17 = sub_24A1AB514();
  v18 = sub_24A1AB514();
  return sub_24A1AB51C((uint64_t)v7, v11, v12, v13, v16, v17, v18, &v20, a1);
}

uint64_t VAA2AAudioEnrollerV2.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_id;
  v2 = sub_24A2157A4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_24A1CF518(v0 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_delegate);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VAA2AAudioEnrollerV2.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_id;
  v2 = sub_24A2157A4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_24A1CF518(v0 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV2_delegate);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_24A1D55A4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 344))();
}

uint64_t sub_24A1D55CC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 336))();
}

uint64_t VAA2AAudioEnrollerFactoryV2.__allocating_init(encoder:delegate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  sub_24A1CF558(a2, v4 + 24);
  return v4;
}

uint64_t VAA2AAudioEnrollerFactoryV2.init(encoder:delegate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  sub_24A1CF558(a2, v2 + 24);
  return v2;
}

_QWORD *sub_24A1D566C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  _BYTE v11[40];

  v7 = *(_QWORD *)(v3 + 16);
  sub_24A193940(v3 + 24, (uint64_t)v11);
  v8 = type metadata accessor for VAA2AAudioEnrollerV2();
  v9 = swift_allocObject();
  swift_retain();
  swift_bridgeObjectRetain();
  result = VAA2AAudioEnrollerV2.init(encoder:keywordIdentifier:delegate:)(v7, a1, a2, (uint64_t)v11);
  a3[3] = v8;
  a3[4] = (uint64_t)&protocol witness table for VAA2AAudioEnrollerV2;
  *a3 = v9;
  return result;
}

uint64_t VAA2AAudioEnrollerFactoryV2.deinit()
{
  uint64_t v0;

  swift_release();
  sub_24A1CF518(v0 + 24);
  return v0;
}

uint64_t VAA2AAudioEnrollerFactoryV2.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  sub_24A1CF518(v0 + 24);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for VAA2AAudioEnrollerV2()
{
  uint64_t result;

  result = qword_25791BCB0;
  if (!qword_25791BCB0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_24A1D5794()
{
  return type metadata accessor for VAA2AAudioEnrollerV2();
}

uint64_t sub_24A1D579C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_24A2157A4();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for VAA2AAudioEnrollerV2()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAA2AAudioEnrollerV2.__allocating_init(encoder:keywordIdentifier:delegate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 312))();
}

uint64_t dispatch thunk of VAA2AAudioEnrollerV2.addAudio(buffer:hostTime:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of VAA2AAudioEnrollerV2.getEnrollmentProgress()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of VAA2AAudioEnrollerV2.getEnrollmentData()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t type metadata accessor for VAA2AAudioEnrollerFactoryV2()
{
  return objc_opt_self();
}

uint64_t method lookup function for VAA2AAudioEnrollerFactoryV2()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAA2AAudioEnrollerFactoryV2.__allocating_init(encoder:delegate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of VAA2AAudioEnrollerFactoryV2.makeAudioEnroller(keywordIdentifier:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t sub_24A1D58E8(uint64_t result, uint64_t a2)
{
  int64_t v2;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    goto LABEL_56;
  v4 = result;
  v5 = *(_QWORD *)(result + 16);
  v35 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 16);
  if (v5)
  {
    result = swift_bridgeObjectRetain();
    v6 = 0;
    v7 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      v8 = *(_QWORD *)(v4 + 8 * v6 + 32);
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_QWORD *)(v7 + 16);
      v11 = v10 + v9;
      if (__OFADD__(v10, v9))
      {
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
      swift_bridgeObjectRetain();
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((_DWORD)result && v11 <= *(_QWORD *)(v7 + 24) >> 1)
      {
        if (*(_QWORD *)(v8 + 16))
          goto LABEL_15;
      }
      else
      {
        if (v10 <= v11)
          v12 = v10 + v9;
        else
          v12 = v10;
        result = (uint64_t)sub_24A147E34((char *)result, v12, 1, (char *)v7);
        v7 = result;
        if (*(_QWORD *)(v8 + 16))
        {
LABEL_15:
          v13 = *(_QWORD *)(v7 + 16);
          if ((*(_QWORD *)(v7 + 24) >> 1) - v13 < v9)
            goto LABEL_53;
          result = (uint64_t)memcpy((void *)(v7 + 4 * v13 + 32), (const void *)(v8 + 32), 4 * v9);
          if (v9)
          {
            v14 = *(_QWORD *)(v7 + 16);
            v15 = __OFADD__(v14, v9);
            v16 = v14 + v9;
            if (v15)
              goto LABEL_55;
            *(_QWORD *)(v7 + 16) = v16;
          }
          goto LABEL_5;
        }
      }
      if (v9)
        goto LABEL_51;
LABEL_5:
      result = swift_bridgeObjectRelease();
      if (v5 == ++v6)
      {
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }
  }
  v7 = MEMORY[0x24BEE4AF8];
LABEL_21:
  result = swift_bridgeObjectRetain();
  v17 = 0;
  v18 = MEMORY[0x24BEE4AF8];
  do
  {
    v19 = *(_QWORD *)(a2 + 8 * v17 + 32);
    v20 = *(_QWORD *)(v19 + 16);
    v21 = *(_QWORD *)(v18 + 16);
    v22 = v21 + v20;
    if (__OFADD__(v21, v20))
    {
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    swift_bridgeObjectRetain();
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((_DWORD)result && v22 <= *(_QWORD *)(v18 + 24) >> 1)
    {
      if (*(_QWORD *)(v19 + 16))
        goto LABEL_33;
    }
    else
    {
      if (v21 <= v22)
        v23 = v21 + v20;
      else
        v23 = v21;
      result = (uint64_t)sub_24A147E34((char *)result, v23, 1, (char *)v18);
      v18 = result;
      if (*(_QWORD *)(v19 + 16))
      {
LABEL_33:
        v24 = *(_QWORD *)(v18 + 16);
        if ((*(_QWORD *)(v18 + 24) >> 1) - v24 < v20)
          goto LABEL_52;
        result = (uint64_t)memcpy((void *)(v18 + 4 * v24 + 32), (const void *)(v19 + 32), 4 * v20);
        if (v20)
        {
          v25 = *(_QWORD *)(v18 + 16);
          v15 = __OFADD__(v25, v20);
          v26 = v25 + v20;
          if (v15)
            goto LABEL_54;
          *(_QWORD *)(v18 + 16) = v26;
        }
        goto LABEL_23;
      }
    }
    if (v20)
      goto LABEL_49;
LABEL_23:
    result = swift_bridgeObjectRelease();
    ++v17;
  }
  while (v2 != v17);
  result = swift_bridgeObjectRelease();
  v27 = v2 * v35;
  if ((unsigned __int128)(v2 * (__int128)v35) >> 64 != (v2 * v35) >> 63)
    goto LABEL_57;
  if (v27 < 0)
    goto LABEL_58;
  if (v27)
  {
    v28 = sub_24A215EF4();
    *(_QWORD *)(v28 + 16) = v27;
    bzero((void *)(v28 + 32), 4 * v27);
  }
  else
  {
    v28 = MEMORY[0x24BEE4AF8];
  }
  vDSP_mtrans((const float *)(v18 + 32), 1, (float *)(v28 + 32), 1, v35, v2);
  result = swift_bridgeObjectRelease();
  v29 = v2 * v5;
  if ((unsigned __int128)(v2 * (__int128)v5) >> 64 == (v2 * v5) >> 63)
  {
    if (v29 < 0)
      goto LABEL_60;
    if (v29)
    {
      v30 = sub_24A215EF4();
      *(_QWORD *)(v30 + 16) = v29;
      bzero((void *)(v30 + 32), 4 * v29);
    }
    else
    {
      v30 = MEMORY[0x24BEE4AF8];
    }
    vDSP_mmul((const float *)(v7 + 32), 1, (const float *)(v28 + 32), 1, (float *)(v30 + 32), 1, v5, v2, v35);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v31 = MEMORY[0x24BDAC7A8](*(_QWORD *)(v30 + 16));
    v32 = sub_24A1D5F30(v31, (uint64_t (*)(_QWORD *, uint64_t *))sub_24A1D60A4);
    swift_bridgeObjectRelease();
    v33 = MEMORY[0x24BDAC7A8](*(_QWORD *)(v32 + 16));
    v34 = sub_24A1D5F30(v33, (uint64_t (*)(_QWORD *, uint64_t *))sub_24A1D60C0);
    swift_bridgeObjectRelease();
    return v34;
  }
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
  return result;
}

void sub_24A1D5CE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  float *v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = sub_24A1D58E8(a1, a2);
  v5 = sub_24A215EF4();
  v6 = v5;
  *(_QWORD *)(v5 + 16) = v3 + 1;
  if (v3)
    memset_pattern16((void *)(v5 + 36), &unk_24A21E690, 4 * v3);
  *(_DWORD *)(v6 + 32) = 0;
  v7 = sub_24A215EF4();
  v8 = v7;
  *(_QWORD *)(v7 + 16) = v3 + 1;
  *(_DWORD *)(v7 + 32) = 0;
  if (v3)
    bzero((void *)(v7 + 36), 4 * v3);
  if (v2)
  {
    v9 = 0;
    v10 = 0;
    v11 = v4 + 32;
    while (1)
    {
      v12 = v8;
      if (!*(_QWORD *)(v8 + 16))
        goto LABEL_28;
      v8 = v6;
      *(_DWORD *)(v12 + 32) = 2139095040;
      if (v3)
        break;
LABEL_7:
      ++v10;
      v11 += 4 * v3;
      v9 += v3;
      v6 = v12;
      if (v10 == v2)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v6 = v12;
        goto LABEL_24;
      }
    }
    if ((unsigned __int128)(v10 * (__int128)(uint64_t)v3) >> 64 != (uint64_t)(v10 * v3) >> 63)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v13 = *(_QWORD *)(v6 + 16);
    if (v3 < v13 && v13 >= 2)
    {
      v14 = 0;
      v15 = *(_QWORD *)(v4 + 16);
      v16 = (float *)(v6 + 36);
      v17 = INFINITY;
      while (v9 + v14 < v15)
      {
        v18 = v14 + 1;
        if ((unint64_t)(v14 + 1) >= *(_QWORD *)(v12 + 16))
          goto LABEL_27;
        v19 = 4 * v14;
        v20 = *v16;
        if (*v16 >= *(v16 - 1))
          v20 = *(v16 - 1);
        if (v17 >= v20)
          v17 = v20;
        v17 = *(float *)(v11 + v19) + v17;
        *(float *)(v12 + 36 + v19) = v17;
        ++v16;
        v14 = v18;
        if (v3 == v18)
          goto LABEL_7;
      }
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
LABEL_30:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_24:
    if (v3 < *(_QWORD *)(v6 + 16))
    {
      swift_bridgeObjectRelease();
      return;
    }
  }
  __break(1u);
}

void sub_24A1D5EC8(uint64_t a1, vDSP_Length *a2, uint64_t a3)
{
  vDSP_Length v3;

  v3 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a3 + 16) == v3)
  {
    if (*(_QWORD *)a1)
    {
      vDSP_vneg((const float *)(a3 + 32), 1, *(float **)a1, 1, v3);
      *a2 = v3;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_24A1D5F30(uint64_t result, uint64_t (*a2)(_QWORD *, uint64_t *))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];
  uint64_t v8;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v4 = result;
  if (result)
  {
    v5 = sub_24A215EF4();
    *(_QWORD *)(v5 + 16) = v4;
  }
  else
  {
    v5 = MEMORY[0x24BEE4AF8];
  }
  v6 = v5 + 32;
  v7[1] = v4;
  v8 = 0;
  v7[0] = v5 + 32;
  result = a2(v7, &v8);
  if (v2)
  {
    if (v8 <= v4)
    {
      if (!v7[0])
      {
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      if (v6 == v7[0])
      {
        *(_QWORD *)(v5 + 16) = v8;
        swift_bridgeObjectRelease();
        return v5;
      }
      goto LABEL_17;
    }
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v8 > v4)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v7[0])
  {
    if (v6 == v7[0])
    {
      *(_QWORD *)(v5 + 16) = v8;
      return v5;
    }
    goto LABEL_19;
  }
LABEL_21:
  __break(1u);
  return result;
}

void sub_24A1D6028(uint64_t a1, uint64_t a2, float a3)
{
  vDSP_Length v3;
  float __B;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 16) != v3)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  __B = a3;
  if (!*(_QWORD *)a2)
    goto LABEL_5;
  vDSP_vsadd((const float *)(a1 + 32), 1, &__B, *(float **)a2, 1, v3);
}

void sub_24A1D60A4(uint64_t a1, vDSP_Length *a2)
{
  uint64_t v2;

  sub_24A1D5EC8(a1, a2, **(_QWORD **)(v2 + 16));
}

void sub_24A1D60C0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  float v4;
  uint64_t v5;

  v4 = *(float *)(v2 + 16);
  v5 = **(_QWORD **)(v2 + 24);
  sub_24A1D6028(v5, a1, v4);
  *a2 = *(_QWORD *)(v5 + 16);
}

uint64_t sub_24A1D610C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV3_delegate;
  swift_beginAccess();
  return sub_24A193940(v3, a1);
}

uint64_t sub_24A1D615C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV3_delegate;
  swift_beginAccess();
  sub_24A1CE5C0(a1, v3);
  return swift_endAccess();
}

uint64_t (*sub_24A1D61B4())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A1D61F8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV3_newSamples;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1D623C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV3_newSamples);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_24A1D6284())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t VAA2AAudioEnrollerV3.__allocating_init(encoder:keywordIdentifier:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = swift_allocObject();
  VAA2AAudioEnrollerV3.init(encoder:keywordIdentifier:delegate:)(a1, a2, a3, a4);
  return v8;
}

_QWORD *VAA2AAudioEnrollerV3.init(encoder:keywordIdentifier:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v9 = sub_24A2157A4();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BEE4AF8];
  v4[5] = MEMORY[0x24BEE4AF8];
  v4[6] = v13;
  v14 = (char *)v4 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV3_delegate;
  *(_OWORD *)v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  *((_QWORD *)v14 + 4) = 0;
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV3_numEmbeddingsPerEnrollment) = 48;
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV3_maxSamplesPerEnrollment) = 31920;
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV3_newSamples) = 0;
  v4[2] = a1;
  v4[3] = a2;
  v4[4] = a3;
  sub_24A215798();
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))((uint64_t)v4 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV3_id, v12, v9);
  v15 = (uint64_t)v4 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV3_delegate;
  swift_beginAccess();
  sub_24A1CE5C0(a4, v15);
  swift_endAccess();
  return v4;
}

uint64_t sub_24A1D6464(objc_class *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(__int128 *, uint64_t);
  AVAudioPCMBuffer v13;
  Swift::OpaquePointer *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t (*v21)(__int128 *, _QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(__int128 *, _QWORD);
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  __int16 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  int v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  __int16 v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  int v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  __int16 v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char *v78;

  v3 = v1;
  v5 = type metadata accessor for VASingleEnrollmentData();
  MEMORY[0x24BDAC7A8](v5);
  v78 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_24A215A8C();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!(*(uint64_t (**)(uint64_t))(*v1 + 224))(v9))
  {
    v17 = v1[2];
    VARuntimeParameters.init()((uint64_t)&v62);
    v44 = v62;
    v45 = DWORD2(v62);
    v46 = WORD6(v62);
    v47 = v63;
    LOBYTE(v48) = v64;
    v49 = v65;
    v50 = v66;
    v51 = v67;
    v52 = v68;
    v53 = v69;
    v54 = v70;
    v55 = v71;
    v56 = v72;
    v57 = v73;
    v58 = v74;
    v59 = v75;
    v60 = v76;
    v61 = v77;
    (*(void (**)(uint64_t *))(*(_QWORD *)v17 + 96))(&v44);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (v2)
      return result;
  }
  v12 = (uint64_t (*)(__int128 *, uint64_t))(*(uint64_t (**)(__int128 *))(*v3 + 192))(&v62);
  v13.super.super.isa = a1;
  VAfp16AVAudioBufferToFP32Array(buffer:floatBuffer:)(v13, v14);
  if (v15)
    return v12(&v62, 1);
  v18 = v12(&v62, 0);
  v19 = *(uint64_t (**)(uint64_t))(*v3 + 176);
  v20 = v19(v18);
  v21 = (uint64_t (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *))(*v3 + 168))(&v62);
  sub_24A1472A0(v20);
  v22 = v21(&v62, 0);
  v23 = (uint64_t)v3;
  v24 = *(_QWORD *)(v19(v22) + 16);
  swift_bridgeObjectRelease();
  v25 = (uint64_t (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *))(*v3 + 240))(&v62);
  if (__OFADD__(*v26, v24))
  {
    __break(1u);
  }
  else
  {
    *v26 += v24;
    v27 = v25(&v62, 0);
    v19 = *(uint64_t (**)(uint64_t))(*v3 + 152);
    v28 = *(_QWORD *)(v19(v27) + 16);
    v29 = swift_bridgeObjectRelease();
    if (v28 < 0x7CB1)
      goto LABEL_19;
    v30 = sub_24A1B9D90();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v30, v7);
    v31 = sub_24A215A74();
    v32 = sub_24A216104();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v33 = 0;
      _os_log_impl(&dword_24A12D000, v31, v32, "Enrollment is running long, need to reduce", v33, 2u);
      MEMORY[0x24BD0AAAC](v33, -1, -1);
    }

    v34 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    v35 = v19(v34);
    v23 = v35;
    if (*(_QWORD *)(v35 + 16) >= 0x7CB0uLL)
      v8 = 31920;
    else
      v8 = *(_QWORD *)(v35 + 16);
    sub_24A2165C0();
    swift_unknownObjectRetain_n();
    v36 = swift_dynamicCastClass();
    if (!v36)
    {
      swift_bridgeObjectRelease();
      v36 = MEMORY[0x24BEE4AF8];
    }
    v37 = *(_QWORD *)(v36 + 16);
    swift_release();
    if (v37 == v8)
    {
      v38 = swift_dynamicCastClass();
      if (!v38)
      {
        swift_bridgeObjectRelease();
        v38 = MEMORY[0x24BEE4AF8];
      }
      goto LABEL_18;
    }
  }
  swift_bridgeObjectRelease();
  v38 = sub_24A14A964(v23, v23 + 32, 0, (2 * v8) | 1);
LABEL_18:
  swift_bridgeObjectRelease();
  v29 = (*(uint64_t (**)(uint64_t))(*v3 + 160))(v38);
LABEL_19:
  v39 = *(_QWORD *)(v19(v29) + 16);
  result = swift_bridgeObjectRelease();
  if (v39 == 31920)
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*v3 + 200))(&v62, result);
    if (*((_QWORD *)&v63 + 1))
    {
      sub_24A152310((uint64_t)&v62, (uint64_t)&v44);
      sub_24A1CF518((uint64_t)&v62);
      v40 = *((_QWORD *)&v47 + 1);
      v41 = v48;
      sub_24A14B668(&v44, *((uint64_t *)&v47 + 1));
      v42 = (uint64_t)v78;
      (*(void (**)(void))(*v3 + 280))();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 8))(v42, v40, v41);
      sub_24A1AB4D8(v42);
      sub_24A14D184((uint64_t)&v44);
    }
    else
    {
      sub_24A1CF518((uint64_t)&v62);
    }
    v64 = 0;
    v62 = 0u;
    v63 = 0u;
    return (*(uint64_t (**)(__int128 *))(*v3 + 208))(&v62);
  }
  return result;
}

uint64_t sub_24A1D6944()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _BOOL4 v22;
  int64_t v23;
  uint64_t v24;
  void *v25;
  char *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t result;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t (*v34)(void);
  uint64_t v35;
  uint64_t v36;

  type metadata accessor for VAStrideConfiguration();
  v2 = (_QWORD *)static VAStrideConfiguration.forFlexibleA2Av3()();
  v3 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v4 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v2) + 0x118))();
  v5 = (*(uint64_t (**)(void))((*v3 & *v2) + 0x130))();
  type metadata accessor for VAFeatureExtractingEncoderOutput();
  v6 = VAFeatureExtractingEncoderOutput.__allocating_init(hasNewFeature:featureExtractionBuffer:vadBuffer:encoderOutput:)(0, 0, 0, 0);
  v36 = v0;
  v34 = *(uint64_t (**)(void))(*(_QWORD *)v0 + 152);
  v7 = *(_QWORD *)(v34() + 16);
  v8 = swift_bridgeObjectRelease();
  v33 = (_QWORD *)(v7 - v4);
  if (__OFSUB__(v7, v4))
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  v35 = v7 + 1 - v4;
  if (__OFSUB__(v7 + 1, v4))
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if (!v5)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  v31 = v2;
  v9 = v35 >= 0;
  if (v5 > 0)
    v9 = v35 < 1;
  if (!v9)
  {
    v12 = 0;
    v32 = v5;
    while (1)
    {
      v2 = (_QWORD *)(__OFADD__(v12, v5) ? ((v12 + v5) >> 63) ^ 0x8000000000000000 : v12 + v5);
      v13 = v12 + v4;
      if (__OFADD__(v12, v4))
        break;
      if (v13 < v12)
        goto LABEL_51;
      v14 = ((uint64_t (*)(uint64_t))v34)(v8);
      if (v12 < 0)
        goto LABEL_52;
      v15 = v14;
      v16 = *(_QWORD *)(v14 + 16);
      if (v16 < v12 || (uint64_t)v16 < v13)
        goto LABEL_53;
      sub_24A2165C0();
      swift_unknownObjectRetain_n();
      v18 = swift_dynamicCastClass();
      if (!v18)
      {
        swift_bridgeObjectRelease();
        v18 = MEMORY[0x24BEE4AF8];
      }
      v19 = *(_QWORD *)(v18 + 16);
      swift_release();
      if (v19 == v4)
      {
        v20 = (_QWORD *)swift_dynamicCastClass();
        if (!v20)
        {
          swift_bridgeObjectRelease();
          v20 = (_QWORD *)MEMORY[0x24BEE4AF8];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v20 = (_QWORD *)MEMORY[0x24BEE4AF8];
        if (v13 != v12)
        {
          if (v4 < 1)
          {
            if (v4 < 0)
              goto LABEL_58;
          }
          else
          {
            sub_24A135F88(&qword_257909960);
            v20 = (_QWORD *)swift_allocObject();
            v23 = j__malloc_size(v20);
            v24 = v23 - 32;
            if (v23 < 32)
              v24 = v23 - 29;
            v20[2] = v4;
            v20[3] = 2 * (v24 >> 2);
          }
          v25 = v20 + 4;
          v26 = (char *)(v15 + 32 + 4 * v12);
          if (v26 < (char *)v20 + 4 * v4 + 32 && (unint64_t)v25 < v15 + 32 + 4 * v13)
            goto LABEL_58;
          memcpy(v25, v26, 4 * v4);
        }
      }
      swift_bridgeObjectRelease();
      if (v20[2] != v4)
      {
        swift_release();
        sub_24A14C404();
        swift_allocError();
        *v28 = 0xD00000000000002DLL;
        v28[1] = 0x800000024A226B70;
        swift_willThrow();
LABEL_46:

        goto LABEL_48;
      }
      v21 = (*(uint64_t (**)(_QWORD *, BOOL))(**(_QWORD **)(v36 + 16) + 312))(v20, v12 == (_QWORD)v33);
      if (v1)
      {
        swift_release();
        goto LABEL_46;
      }
      v10 = v21;
      swift_release();
      v8 = swift_release();
      v22 = v35 >= (uint64_t)v2;
      v5 = v32;
      if (v32 > 0)
        v22 = (uint64_t)v2 >= v35;
      v12 = (uint64_t)v2;
      if (v22)
        goto LABEL_8;
    }
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  v10 = v6;
LABEL_8:
  if ((*(_BYTE *)(v10 + 16) & 1) == 0)
  {
    sub_24A14C404();
    swift_allocError();
    *v27 = 0xD000000000000019;
    v27[1] = 0x800000024A226BA0;
    swift_willThrow();

LABEL_48:
    swift_release();
    return (uint64_t)v2;
  }
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    sub_24A1D7288();
    swift_allocError();
    *v29 = 0xD00000000000002FLL;
    v29[1] = 0x800000024A226BC0;
    swift_willThrow();

    goto LABEL_48;
  }
  if (*(_QWORD *)(v11 + 16))
  {
    v2 = *(_QWORD **)(v11 + 32);
    swift_bridgeObjectRetain();
    swift_release();

    return (uint64_t)v2;
  }
LABEL_57:
  __break(1u);
LABEL_58:
  result = sub_24A21644C();
  __break(1u);
  return result;
}

uint64_t sub_24A1D6E3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *(uint64_t (**)(void))(*(_QWORD *)v1 + 152);
  v4 = *(_QWORD *)(v3() + 16);
  v5 = swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(((uint64_t (*)(uint64_t))v3)(v5) + 16);
  swift_bridgeObjectRelease();
  return sub_24A1AB614(v4, 31920, v6 >> 4 > 0x7CA, a1);
}

int *sub_24A1D6E98@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v4 = sub_24A2157A4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, (uint64_t)v1 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV3_id, v4);
  v9 = (*(uint64_t (**)(uint64_t))(*v1 + 264))(v8);
  if (v2)
    return (int *)(*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v11 = v9;
  v12 = v1[3];
  v13 = v1[4];
  v14 = *(uint64_t (**)(uint64_t))(*v1 + 152);
  v15 = swift_bridgeObjectRetain();
  v16 = v14(v15);
  v20 = 1;
  v17 = sub_24A1AB514();
  v18 = sub_24A1AB514();
  return sub_24A1AB51C((uint64_t)v7, v11, v12, v13, v16, v17, v18, &v20, a1);
}

uint64_t VAA2AAudioEnrollerV3.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV3_id;
  v2 = sub_24A2157A4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_24A1CF518(v0 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV3_delegate);
  return v0;
}

uint64_t VAA2AAudioEnrollerV3.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV3_id;
  v2 = sub_24A2157A4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_24A1CF518(v0 + OBJC_IVAR____TtC12VoiceActions20VAA2AAudioEnrollerV3_delegate);
  return swift_deallocClassInstance();
}

uint64_t sub_24A1D70AC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 256))();
}

uint64_t sub_24A1D70D4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 280))();
}

uint64_t sub_24A1D70FC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 272))();
}

uint64_t VAA2AAudioEnrollerFactoryV3.__allocating_init(encoder:delegate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  sub_24A1CF558(a2, v4 + 24);
  return v4;
}

uint64_t VAA2AAudioEnrollerFactoryV3.init(encoder:delegate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  sub_24A1CF558(a2, v2 + 24);
  return v2;
}

_QWORD *sub_24A1D719C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  _BYTE v11[40];

  v7 = *(_QWORD *)(v3 + 16);
  sub_24A193940(v3 + 24, (uint64_t)v11);
  v8 = type metadata accessor for VAA2AAudioEnrollerV3();
  v9 = swift_allocObject();
  swift_retain();
  swift_bridgeObjectRetain();
  result = VAA2AAudioEnrollerV3.init(encoder:keywordIdentifier:delegate:)(v7, a1, a2, (uint64_t)v11);
  a3[3] = v8;
  a3[4] = (uint64_t)&protocol witness table for VAA2AAudioEnrollerV3;
  *a3 = v9;
  return result;
}

uint64_t VAA2AAudioEnrollerFactoryV3.deinit()
{
  uint64_t v0;

  swift_release();
  sub_24A1CF518(v0 + 24);
  return v0;
}

uint64_t VAA2AAudioEnrollerFactoryV3.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  sub_24A1CF518(v0 + 24);
  return swift_deallocClassInstance();
}

unint64_t sub_24A1D7288()
{
  unint64_t result;

  result = qword_257910FD8;
  if (!qword_257910FD8)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21F298, &type metadata for VAKWSModelError);
    atomic_store(result, (unint64_t *)&qword_257910FD8);
  }
  return result;
}

uint64_t type metadata accessor for VAA2AAudioEnrollerV3()
{
  uint64_t result;

  result = qword_25791BCC0;
  if (!qword_25791BCC0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_24A1D7308()
{
  return type metadata accessor for VAA2AAudioEnrollerV3();
}

uint64_t sub_24A1D7310()
{
  uint64_t result;
  unint64_t v1;

  result = sub_24A2157A4();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for VAA2AAudioEnrollerV3()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAA2AAudioEnrollerV3.__allocating_init(encoder:keywordIdentifier:delegate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t dispatch thunk of VAA2AAudioEnrollerV3.addAudio(buffer:hostTime:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of VAA2AAudioEnrollerV3.getEnrollmentProgress()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of VAA2AAudioEnrollerV3.getEnrollmentData()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t type metadata accessor for VAA2AAudioEnrollerFactoryV3()
{
  return objc_opt_self();
}

uint64_t method lookup function for VAA2AAudioEnrollerFactoryV3()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAA2AAudioEnrollerFactoryV3.__allocating_init(encoder:delegate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of VAA2AAudioEnrollerFactoryV3.makeAudioEnroller(keywordIdentifier:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t VAA2AAudioEncoderModel.__allocating_init(computeUnits:)(char *a1)
{
  swift_allocObject();
  return VAA2AAudioEncoderModel.init(computeUnits:)(a1);
}

uint64_t VAA2AAudioEncoderModel.init(computeUnits:)(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  id v9;
  uint64_t v10;
  char v11;
  char v12;
  id v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;

  v3 = v1;
  v5 = type metadata accessor for VASignpostInterval();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  type metadata accessor for VALog();
  v18 = 0;
  v19 = 0xE000000000000000;
  swift_retain();
  sub_24A216308();
  sub_24A215D98();
  LOBYTE(v16) = v8;
  sub_24A2163D4();
  static VALog.begin(_:_:)("VoiceActions", 12, 2u, v18, v19, (uint64_t)v7);
  swift_bridgeObjectRelease();
  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBFFE0]), sel_init);
  v21 = v8;
  v20 = 0;
  sub_24A180568();
  sub_24A215E64();
  sub_24A215E64();
  if (v18 == v16 && v19 == v17)
  {
    swift_bridgeObjectRelease_n();
    v10 = 0;
  }
  else
  {
    v11 = sub_24A21659C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0)
    {
      v10 = 0;
    }
    else
    {
      v21 = v8;
      v20 = 1;
      sub_24A215E64();
      sub_24A215E64();
      if (v18 == v16 && v19 == v17)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v12 = sub_24A21659C();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v12 & 1) == 0)
          goto LABEL_12;
      }
      v10 = 3;
    }
  }
  objc_msgSend(v9, sel_setComputeUnits_, v10);
LABEL_12:
  type metadata accessor for all_audio2audio_encoder_ig2p();
  v13 = v9;
  v14 = sub_24A18B9F8(v13);
  if (v2)
  {
    swift_release();

    sub_24A18EDEC((uint64_t)v7);
    type metadata accessor for VAA2AAudioEncoderModel();
    return swift_deallocPartialClassInstance();
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v14;
    swift_release();
    VASignpostInterval.end(_:)((Swift::String_optional)0);

    sub_24A18EDEC((uint64_t)v7);
    return sub_24A180204();
  }
}

uint64_t type metadata accessor for VAA2AAudioEncoderModel()
{
  return objc_opt_self();
}

id sub_24A1D77C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  id v8;
  id result;
  void *v10;
  uint64_t i;
  int v12;
  id v13;
  double v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = v1;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 == (*(uint64_t (**)(void))(*(_QWORD *)v1 + 168))())
  {
    sub_24A135F88(&qword_25790BE68);
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_24A21AA60;
    v7 = 0x24BDD1000uLL;
    *(_QWORD *)(v6 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, v5);
    sub_24A215EB8();
    v8 = objc_allocWithZone(MEMORY[0x24BDBFFF8]);
    result = sub_24A17F3CC(v6, 65568);
    if (!v2)
    {
      v10 = result;
      if (v5)
      {
        swift_bridgeObjectRetain();
        for (i = 0; i != v5; ++i)
        {
          v12 = *(_DWORD *)(a1 + 4 * i + 32);
          v13 = objc_allocWithZone(*(Class *)(v7 + 1760));
          LODWORD(v14) = v12;
          v15 = v7;
          v16 = objc_msgSend(v13, sel_initWithFloat_, v14);
          objc_msgSend(v10, sel_setObject_atIndexedSubscript_, v16, i);

          v7 = v15;
        }
        swift_bridgeObjectRelease();
      }
      type metadata accessor for all_audio2audio_encoder_ig2pInput();
      v17 = sub_24A18CC94(v10);
      v18 = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 128))();
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 136))(v17);
      v21 = swift_release();
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 88))(v21);
      swift_release();
      swift_release();
      return (id)v22;
    }
  }
  else
  {
    sub_24A1D7B64();
    swift_allocError();
    *v19 = 0xD000000000000014;
    v19[1] = 0x800000024A226C70;
    return (id)swift_willThrow();
  }
  return result;
}

id static VAA2AAudioEncoderModel.VACreateMLMultiArray(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  id v10;
  double v11;
  id v12;

  sub_24A135F88(&qword_25790BE68);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_24A21AA60;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v3 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, v4);
  sub_24A215EB8();
  v5 = objc_allocWithZone(MEMORY[0x24BDBFFF8]);
  v6 = sub_24A17F3CC(v3, 65568);
  if (v1)
    v7 = 1;
  else
    v7 = v4 == 0;
  if (!v7)
  {
    swift_bridgeObjectRetain();
    v8 = 0;
    do
    {
      v9 = *(_DWORD *)(a1 + 4 * v8 + 32);
      v10 = objc_allocWithZone(MEMORY[0x24BDD16E0]);
      LODWORD(v11) = v9;
      v12 = objc_msgSend(v10, sel_initWithFloat_, v11);
      objc_msgSend(v6, sel_setObject_atIndexedSubscript_, v12, v8);

      ++v8;
    }
    while (v4 != v8);
    swift_bridgeObjectRelease();
  }
  return v6;
}

unint64_t sub_24A1D7B64()
{
  unint64_t result;

  result = qword_2579111F0;
  if (!qword_2579111F0)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21B6C0, &type metadata for VAAudioEncoderModelError);
    atomic_store(result, (unint64_t *)&qword_2579111F0);
  }
  return result;
}

uint64_t sub_24A1D7BA8()
{
  _QWORD *v0;
  uint64_t v1;

  type metadata accessor for VAStrideConfiguration();
  v0 = static VAStrideConfiguration.forFlexibleA2A()();
  v1 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();

  return v1;
}

void sub_24A1D7BFC()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_24A1D7C28()
{
  return swift_release();
}

uint64_t VAA2AAudioEncoderModel.deinit()
{
  uint64_t v0;

  v0 = VAAudioEncoderModel.deinit();
  swift_release();
  return v0;
}

uint64_t VAA2AAudioEncoderModel.__deallocating_deinit()
{
  VAAudioEncoderModel.deinit();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_24A1D7C90()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t sub_24A1D7CAC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t method lookup function for VAA2AAudioEncoderModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAA2AAudioEncoderModel.__allocating_init(computeUnits:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of VAA2AAudioEncoderModel.predict(currFrame:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of VAA2AAudioEncoderModel.processingWindowSampleCount.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t sub_24A1D7D04()
{
  uint64_t *v0;
  uint64_t v1;

  sub_24A216308();
  v1 = *v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_24A215D98();
  type metadata accessor for VAEspressoV2Port();
  swift_bridgeObjectRetain();
  sub_24A215C30();
  sub_24A215D98();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24A215D98();
  swift_bridgeObjectRetain();
  sub_24A215C30();
  sub_24A215D98();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t type metadata accessor for VAEspressoV2Port()
{
  return objc_opt_self();
}

uint64_t sub_24A1D7E60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v9;
  uint64_t v10;
  uint64_t result;
  _QWORD *v12;

  if (*(_QWORD *)(*(_QWORD *)(v4 + 16) + 16))
  {
    swift_bridgeObjectRetain();
    sub_24A148970(a1, a2);
    if ((v9 & 1) != 0)
    {
      swift_retain();
      swift_bridgeObjectRelease();
      type metadata accessor for VAEspressoV2Input(0, a3, a4, v10);
      result = swift_dynamicCastClass();
      if (result)
        return result;
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  sub_24A216308();
  swift_bridgeObjectRelease();
  sub_24A215D98();
  sub_24A14C404();
  swift_allocError();
  *v12 = 0xD000000000000022;
  v12[1] = 0x800000024A226CF0;
  return swift_willThrow();
}

uint64_t sub_24A1D7F90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v9;
  uint64_t v10;
  uint64_t result;
  _QWORD *v12;

  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 16))
  {
    swift_bridgeObjectRetain();
    sub_24A148970(a1, a2);
    if ((v9 & 1) != 0)
    {
      swift_retain();
      swift_bridgeObjectRelease();
      type metadata accessor for VAEspressoV2Output(0, a3, a4, v10);
      result = swift_dynamicCastClass();
      if (result)
        return result;
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  sub_24A216308();
  swift_bridgeObjectRelease();
  sub_24A215D98();
  sub_24A14C404();
  swift_allocError();
  *v12 = 0xD000000000000023;
  v12[1] = 0x800000024A226D20;
  return swift_willThrow();
}

uint64_t sub_24A1D80C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  _QWORD v41[3];
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;

  LODWORD(v57) = a3;
  v8 = sub_24A215A8C();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for VABundleUtil();
  v58 = a1;
  v59 = a2;
  swift_bridgeObjectRetain();
  sub_24A215D98();
  v12 = static VABundleUtil.bundlePathFallback(path:)();
  if (v4)
    return swift_bridgeObjectRelease();
  v15 = v12;
  v16 = v13;
  v55 = a4;
  v56 = v9;
  swift_bridgeObjectRelease();
  v17 = sub_24A1D97E8;
  if ((v57 & 1) != 0)
    v17 = sub_24A1D97C0;
  v18 = v17(1852399981, 0xE400000000000000, v15, v16, 1852399981, 0xE400000000000000, 1, 1);
  v19 = sub_24A1D98A8(MEMORY[0x24BEE4AF8]);
  v20 = (_QWORD *)sub_24A192330();
  v21 = v11;
  v48 = v16;
  v49 = v15;
  v22 = v20[2];
  v57 = v21;
  if (v22)
  {
    v53 = v19;
    v45 = v20;
    v46 = v8;
    v43 = 0x800000024A227060;
    v44 = 0xD000000000000022;
    v42 = 0x800000024A227090;
    v23 = v20[4];
    v24 = v20[5];
    swift_bridgeObjectRetain();
    v54 = (_QWORD *)v23;
    sub_24A192468(v23, v24);
    v25 = sub_24A191D7C();
    v50 = v22;
    swift_release();
    v26 = sub_24A191C90();
    sub_24A192468((uint64_t)v54, v24);
    sub_24A191E18(v26);
    v51 = v26;
    swift_release();
    sub_24A191B3C();
    v27 = sub_24A191AB4();
    sub_24A191BF4();
    v28 = sub_24A1917D8();
    swift_release();
    sub_24A191BF4();
    v47 = v27;
    sub_24A191750();
    swift_release();
    v52 = v25;
    sub_24A191B58();
    __asm { BR              X9 }
  }
  swift_bridgeObjectRelease();
  v29 = sub_24A1D98A8(MEMORY[0x24BEE4AF8]);
  v30 = (_QWORD *)sub_24A192298();
  v52 = v29;
  v45 = v30;
  v46 = v8;
  v31 = v30[2];
  if (v31)
  {
    v53 = v19;
    v54 = v30 + 5;
    v41[2] = v18;
    v42 = 0x800000024A227090;
    v43 = 0xD000000000000022;
    v44 = 0x800000024A227060;
    v32 = v30[4];
    v33 = v30[5];
    swift_bridgeObjectRetain();
    v34 = sub_24A1923C8(v32, v33);
    sub_24A191D7C();
    v47 = v31;
    v51 = sub_24A191C90();
    sub_24A191E18(v51);
    v50 = v34;
    sub_24A191B3C();
    sub_24A191AB4();
    sub_24A191BF4();
    v35 = sub_24A1917D8();
    swift_release();
    sub_24A191BF4();
    sub_24A191750();
    swift_release();
    sub_24A191B58();
    v54 += 2;
    __asm { BR              X9 }
  }
  swift_bridgeObjectRelease();
  type metadata accessor for E5RTExecutionStream();
  v36 = sub_24A19262C();
  v37 = v48;
  v38 = v36;
  result = sub_24A192710(v18);
  v39 = v55;
  *v55 = v49;
  v39[1] = v37;
  v40 = v52;
  v39[2] = v19;
  v39[3] = v40;
  v39[4] = v18;
  v39[5] = v38;
  return result;
}

uint64_t sub_24A1D97C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_24A1D9810(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_24A192238);
}

uint64_t sub_24A1D97E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_24A1D9810(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_24A192190);
}

uint64_t sub_24A1D9810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  type metadata accessor for E5RTExecutionStreamOperation();
  return a9(a1, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t sub_24A1D98A8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_24A135F88(&qword_257911C50);
  v2 = (_QWORD *)sub_24A216440();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    result = sub_24A148970(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_24A1D99C0(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v14;

  v14 = swift_allocObject();
  sub_24A1DC7AC(a1, a2, a3, a4, a5, a6, a7);
  return v14;
}

_QWORD *sub_24A1D9A54(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  swift_allocObject();
  return sub_24A1DB4EC(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_24A1D9AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v14;

  v14 = swift_allocObject();
  sub_24A1DA05C(a1, a2, a3, a4, a5, a6, a7);
  return v14;
}

uint64_t sub_24A1D9B78()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 608) - 8) + 64);
}

uint64_t sub_24A1D9B8C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (*(uint64_t (**)(void))(*v1 + 296))();
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*v1 + 600))(a1, v4, *(_QWORD *)(v3 + 608), *(_QWORD *)(v3 + 616));
}

uint64_t sub_24A1D9BD4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 624))();
}

uint64_t sub_24A1D9BE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0;
  v2 = sub_24A215F30();
  v3 = sub_24A215F30();
  swift_bridgeObjectRetain();
  v4 = MEMORY[0x24BEE12C8];
  MEMORY[0x24BD0A9EC](MEMORY[0x24BEE12C8], v3);
  MEMORY[0x24BD0A9EC](v4, v2);
  sub_24A215E4C();
  v5 = sub_24A2163C8();
  MEMORY[0x24BD0A9EC](MEMORY[0x24BEE2AC8], v5);
  v6 = sub_24A215F3C();
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 624))(v6);
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A1D9CEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = sub_24A215F30();
  v2 = sub_24A215F30();
  v3 = sub_24A215F30();
  swift_bridgeObjectRetain();
  v4 = MEMORY[0x24BEE12C8];
  MEMORY[0x24BD0A9EC](MEMORY[0x24BEE12C8], v3);
  MEMORY[0x24BD0A9EC](v4, v2);
  sub_24A215E4C();
  v5 = sub_24A2163C8();
  v6 = MEMORY[0x24BEE2AC8];
  MEMORY[0x24BD0A9EC](MEMORY[0x24BEE2AC8], v5);
  MEMORY[0x24BD0A9EC](v4, v1);
  sub_24A215E4C();
  v7 = sub_24A2163C8();
  MEMORY[0x24BD0A9EC](v6, v7);
  sub_24A215F3C();
  (*(void (**)(void))(*(_QWORD *)v0 + 624))();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A1D9E6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = sub_24A215F30();
  v2 = sub_24A215F30();
  v3 = sub_24A215F30();
  v4 = sub_24A215F30();
  swift_bridgeObjectRetain();
  v5 = MEMORY[0x24BEE12C8];
  MEMORY[0x24BD0A9EC](MEMORY[0x24BEE12C8], v4);
  MEMORY[0x24BD0A9EC](v5, v3);
  sub_24A215E4C();
  v6 = sub_24A2163C8();
  v7 = MEMORY[0x24BEE2AC8];
  MEMORY[0x24BD0A9EC](MEMORY[0x24BEE2AC8], v6);
  MEMORY[0x24BD0A9EC](v5, v2);
  sub_24A215E4C();
  v8 = sub_24A2163C8();
  MEMORY[0x24BD0A9EC](v7, v8);
  MEMORY[0x24BD0A9EC](v5, v1);
  sub_24A215E4C();
  v9 = sub_24A2163C8();
  MEMORY[0x24BD0A9EC](v7, v9);
  sub_24A215F3C();
  (*(void (**)(void))(*(_QWORD *)v0 + 624))();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A1DA05C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;

  *(_QWORD *)(v7 + 80) = 0;
  *(_BYTE *)(v7 + 88) = 1;
  *(_QWORD *)(v7 + 96) = 0;
  *(_BYTE *)(v7 + 104) = 1;
  *(_QWORD *)(v7 + 112) = 0;
  *(_BYTE *)(v7 + 120) = 1;
  *(_QWORD *)(v7 + 128) = 0;
  *(_BYTE *)(v7 + 136) = 1;
  *(_QWORD *)(v7 + 152) = 0;
  *(_QWORD *)(v7 + 160) = 0;
  *(_QWORD *)(v7 + 144) = 0;
  *(_BYTE *)(v7 + 168) = 2;
  *(_QWORD *)(v7 + 40) = a1;
  *(_QWORD *)(v7 + 48) = a2;
  *(_QWORD *)(v7 + 16) = a3;
  *(_QWORD *)(v7 + 24) = a4;
  *(_QWORD *)(v7 + 32) = a5;
  v11 = sub_24A191870(*(_QWORD *)(a5 + 16));
  if (v8)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for VAEspressoV2Port();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(_QWORD *)(v7 + 56) = v11;
    *(_BYTE *)(v7 + 64) = a6;
    *(_QWORD *)(v7 + 72) = a7;
  }
  return v7;
}

uint64_t sub_24A1DA13C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_24A1DA188()
{
  sub_24A1DA13C();
  return swift_deallocClassInstance();
}

uint64_t sub_24A1DA1A8()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24A1DA1F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A1DA240()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t sub_24A1DA270(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 64) = a1;
  return result;
}

uint64_t sub_24A1DA2AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = sub_24A216308();
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 272))(v1);
  sub_24A215D98();
  swift_bridgeObjectRelease();
  v2 = sub_24A215D98();
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 200))(v2);
  MEMORY[0x24BD09774]();
  sub_24A215D98();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3 = sub_24A215D98();
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 224))(v3);
  sub_24A216584();
  sub_24A215D98();
  swift_bridgeObjectRelease();
  v4 = sub_24A215D98();
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 320))(v4);
  sub_24A2163D4();
  v5 = sub_24A215D98();
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 344))(v5);
  MEMORY[0x24BD09774]();
  sub_24A215D98();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_24A1DA46C()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_BYTE *)(v0 + 88) != 1)
    return *(_QWORD *)(v0 + 80);
  result = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
  v2 = *(_QWORD *)(result + 16);
  if (!v2)
  {
    v6 = 1;
LABEL_9:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 80) = v6;
    *(_BYTE *)(v0 + 88) = 0;
    return v6;
  }
  v3 = (uint64_t *)(result + 32);
  v4 = 1;
  while (1)
  {
    v5 = *v3++;
    v6 = v4 * v5;
    if ((unsigned __int128)(v4 * (__int128)v5) >> 64 != (v4 * v5) >> 63)
      break;
    v4 = v6;
    if (!--v2)
      goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A1DA4F0(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 80) = result;
  *(_BYTE *)(v1 + 88) = 0;
  return result;
}

_QWORD *(*sub_24A1DA4FC(uint64_t *a1))(_QWORD *result)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_24A1DA46C();
  return sub_24A1DA530;
}

_QWORD *sub_24A1DA530(_QWORD *result)
{
  uint64_t v1;

  v1 = result[1];
  *(_QWORD *)(v1 + 80) = *result;
  *(_BYTE *)(v1 + 88) = 0;
  return result;
}

uint64_t sub_24A1DA540()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  if (*(_BYTE *)(v0 + 104) != 1)
    return *(_QWORD *)(v0 + 96);
  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
  v2 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
  result = v1 * v2;
  if ((unsigned __int128)(v1 * (__int128)v2) >> 64 == (v1 * v2) >> 63)
  {
    *(_QWORD *)(v0 + 96) = result;
    *(_BYTE *)(v0 + 104) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24A1DA5A8(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 96) = result;
  *(_BYTE *)(v1 + 104) = 0;
  return result;
}

_QWORD *(*sub_24A1DA5B4(uint64_t *a1))(_QWORD *result)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_24A1DA540();
  return sub_24A1DA5E8;
}

_QWORD *sub_24A1DA5E8(_QWORD *result)
{
  uint64_t v1;

  v1 = result[1];
  *(_QWORD *)(v1 + 96) = *result;
  *(_BYTE *)(v1 + 104) = 0;
  return result;
}

uint64_t sub_24A1DA5F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  if (*(_BYTE *)(v0 + 120) != 1)
    return *(_QWORD *)(v0 + 112);
  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
  v2 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 416))();
  result = v1 * v2;
  if ((unsigned __int128)(v1 * (__int128)v2) >> 64 == (v1 * v2) >> 63)
  {
    *(_QWORD *)(v0 + 112) = result;
    *(_BYTE *)(v0 + 120) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24A1DA660(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 112) = result;
  *(_BYTE *)(v1 + 120) = 0;
  return result;
}

_QWORD *(*sub_24A1DA66C(uint64_t *a1))(_QWORD *result)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_24A1DA5F8();
  return sub_24A1DA6A0;
}

_QWORD *sub_24A1DA6A0(_QWORD *result)
{
  uint64_t v1;

  v1 = result[1];
  *(_QWORD *)(v1 + 112) = *result;
  *(_BYTE *)(v1 + 120) = 0;
  return result;
}

uint64_t sub_24A1DA6B0()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(v0 + 136) != 1)
    return *(_QWORD *)(v0 + 128);
  result = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
  if (*(_QWORD *)(result + 16))
  {
    v2 = *(_QWORD *)(result + 32);
    v3 = swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 200))(v3);
    if (*(_QWORD *)(result + 16))
    {
      v4 = *(_QWORD *)(result + 32);
      swift_bridgeObjectRelease();
      result = v2 * v4;
      if ((unsigned __int128)(v2 * (__int128)v4) >> 64 == (v2 * v4) >> 63)
      {
        *(_QWORD *)(v0 + 128) = result;
        *(_BYTE *)(v0 + 136) = 0;
        return result;
      }
      goto LABEL_9;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_24A1DA740(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = result;
  *(_BYTE *)(v1 + 136) = 0;
  return result;
}

_QWORD *(*sub_24A1DA74C(uint64_t *a1))(_QWORD *result)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_24A1DA6B0();
  return sub_24A1DA780;
}

_QWORD *sub_24A1DA780(_QWORD *result)
{
  uint64_t v1;

  v1 = result[1];
  *(_QWORD *)(v1 + 128) = *result;
  *(_BYTE *)(v1 + 136) = 0;
  return result;
}

_QWORD *sub_24A1DA790()
{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)v0[18];
  if (v1)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    v1 = (_QWORD *)(*(uint64_t (**)(void))(*v0 + 200))();
    if (v1[2] <= 3uLL)
    {
      while (1)
      {
        sub_24A14F4D4((uint64_t)v1);
        v1 = &unk_251B9E308;
      }
    }
    v0[18] = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return v1;
}

uint64_t sub_24A1DA830(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 144) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A1DA840(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_24A1DA790();
  return sub_24A1DA874;
}

uint64_t sub_24A1DA874(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 144) = *a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A1DA884()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v3;

  v1 = v0[19];
  if (v1)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    v1 = (*(uint64_t (**)(void))(*v0 + 344))();
    if (*(_QWORD *)(v1 + 16) <= 3uLL)
    {
      v2 = *(uint64_t (**)(void))(*v0 + 472);
      do
      {
        sub_24A135F88(&qword_25790A4A8);
        v3 = swift_allocObject();
        *(_OWORD *)(v3 + 16) = xmmword_24A218650;
        *(_QWORD *)(v3 + 32) = v2();
        sub_24A14F4D4(v1);
        v1 = v3;
      }
      while (*(_QWORD *)(v3 + 16) < 4uLL);
    }
    v0[19] = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return v1;
}

uint64_t sub_24A1DA96C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 152) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A1DA97C(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_24A1DA884();
  return sub_24A1DA9B0;
}

uint64_t sub_24A1DA9B0(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 152) = *a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A1DA9C0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t result;
  unint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t (*v53)(void);
  uint64_t v54;
  uint64_t v55;

  if (v0[20])
  {
    v1 = (_QWORD *)v0[20];
LABEL_3:
    swift_bridgeObjectRetain();
    return (uint64_t)v1;
  }
  v3 = (*(uint64_t (**)(void))(*v0 + 384))();
  v1 = (_QWORD *)sub_24A1DCFEC(0, v3);
  v4 = *(uint64_t (**)(void))(*v0 + 496);
  result = v4();
  if (*(_QWORD *)(result + 16) < 4uLL)
  {
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  v5 = *(_QWORD *)(result + 56);
  v6 = swift_bridgeObjectRelease();
  result = ((uint64_t (*)(uint64_t))v4)(v6);
  if (*(_QWORD *)(result + 16) < 3uLL)
  {
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  v7 = *(_QWORD *)(result + 48);
  result = swift_bridgeObjectRelease();
  v8 = v5 * v7;
  if ((unsigned __int128)(v5 * (__int128)v7) >> 64 != (v5 * v7) >> 63)
  {
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  result = ((uint64_t (*)(uint64_t))v4)(result);
  if (*(_QWORD *)(result + 16) < 2uLL)
  {
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  v9 = *(_QWORD *)(result + 40);
  result = swift_bridgeObjectRelease();
  v10 = v8 * v9;
  if ((unsigned __int128)(v8 * (__int128)v9) >> 64 != (v8 * v9) >> 63)
  {
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  result = ((uint64_t (*)(uint64_t))v4)(result);
  if (!*(_QWORD *)(result + 16))
  {
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  v11 = *(_QWORD *)(result + 32);
  result = swift_bridgeObjectRelease();
  if (v11 < 0)
  {
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  if (!v11)
  {
LABEL_57:
    v0[20] = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_3;
  }
  v44 = 0;
  v12 = 0;
  v34 = 8 * v10;
  v35 = v11;
  v13 = *(uint64_t (**)(uint64_t))(*v0 + 520);
  v36 = 8 * v8;
  v52 = 8 * v5;
  v43 = 32;
  v53 = v4;
  v55 = v5;
  v37 = v10;
  v38 = v8;
  while (1)
  {
    result = v13(result);
    if (!*(_QWORD *)(result + 16))
      break;
    v14 = *(_QWORD *)(result + 32);
    result = swift_bridgeObjectRelease();
    v42 = v12 * v14;
    if ((unsigned __int128)(v12 * (__int128)v14) >> 64 != (v12 * v14) >> 63)
      goto LABEL_85;
    v41 = v12 * v10;
    if ((unsigned __int128)(v12 * (__int128)v10) >> 64 != (v12 * v10) >> 63)
      goto LABEL_86;
    result = ((uint64_t (*)(uint64_t))v4)(result);
    if (*(_QWORD *)(result + 16) < 2uLL)
      goto LABEL_87;
    v15 = *(_QWORD *)(result + 40);
    result = swift_bridgeObjectRelease();
    if (v15 < 0)
      goto LABEL_88;
    if (v15)
    {
      v16 = 0;
      v45 = v44;
      v46 = v43;
      v39 = v15;
      v40 = v12;
      while (1)
      {
        v47 = v16;
        result = v13(result);
        if (*(_QWORD *)(result + 16) < 2uLL)
          break;
        v17 = *(_QWORD *)(result + 40);
        result = swift_bridgeObjectRelease();
        v18 = v47 * v17;
        if ((unsigned __int128)(v47 * (__int128)v17) >> 64 != (v47 * v17) >> 63)
          goto LABEL_73;
        v19 = v47 * v8;
        if ((unsigned __int128)(v47 * (__int128)v8) >> 64 != (v47 * v8) >> 63)
          goto LABEL_74;
        result = ((uint64_t (*)(uint64_t))v4)(result);
        if (*(_QWORD *)(result + 16) < 3uLL)
          goto LABEL_75;
        v54 = *(_QWORD *)(result + 48);
        result = swift_bridgeObjectRelease();
        if (v54 < 0)
          goto LABEL_76;
        if (v54)
        {
          v20 = 0;
          v50 = v42 + v18;
          v21 = __OFADD__(v42, v18);
          v51 = v21;
          v48 = v41 + v19;
          v22 = __OFADD__(v41, v19);
          v49 = v22;
          v23 = v45;
          v24 = v46;
          while (1)
          {
            result = v13(result);
            if (*(_QWORD *)(result + 16) < 3uLL)
              break;
            v25 = *(_QWORD *)(result + 48);
            result = swift_bridgeObjectRelease();
            v26 = v20 * v25;
            if ((unsigned __int128)(v20 * (__int128)v25) >> 64 != (v20 * v25) >> 63)
              goto LABEL_64;
            if ((unsigned __int128)(v20 * (__int128)v55) >> 64 != (v20 * v55) >> 63)
              goto LABEL_65;
            result = ((uint64_t (*)(uint64_t))v4)(result);
            if (*(_QWORD *)(result + 16) < 4uLL)
              goto LABEL_66;
            v27 = *(_QWORD *)(result + 56);
            result = swift_bridgeObjectRelease();
            if (v27 < 0)
              goto LABEL_67;
            if (v27)
            {
              if (v51)
                goto LABEL_68;
              v28 = __OFADD__(v50, v26);
              v29 = v50 + v26;
              if (v28)
                goto LABEL_69;
              if (v49)
                goto LABEL_70;
              if (__OFADD__(v48, v20 * v55))
                goto LABEL_71;
              v30 = 0;
              while (1)
              {
                result = v13(result);
                if (*(_QWORD *)(result + 16) < 4uLL)
                  break;
                v31 = *(_QWORD *)(result + 56);
                result = swift_bridgeObjectRelease();
                v32 = v30 * v31;
                if ((unsigned __int128)(v30 * (__int128)v31) >> 64 != (v30 * v31) >> 63)
                  goto LABEL_59;
                v33 = v29 + v32;
                if (__OFADD__(v29, v32))
                  goto LABEL_60;
                result = swift_isUniquelyReferenced_nonNull_native();
                if ((result & 1) != 0)
                {
                  if (v23 < 0)
                    goto LABEL_61;
                }
                else
                {
                  result = (uint64_t)sub_24A176238(v1);
                  v1 = (_QWORD *)result;
                  if (v23 < 0)
                    goto LABEL_61;
                }
                if ((unint64_t)(v23 + v30) >= v1[2])
                  goto LABEL_62;
                *(_QWORD *)((char *)&v1[v30++] + v24) = v33;
                if (v27 == v30)
                  goto LABEL_34;
              }
              __break(1u);
LABEL_59:
              __break(1u);
LABEL_60:
              __break(1u);
LABEL_61:
              __break(1u);
LABEL_62:
              __break(1u);
              break;
            }
LABEL_34:
            ++v20;
            v23 += v55;
            v4 = v53;
            v24 += v52;
            if (v20 == v54)
              goto LABEL_20;
          }
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
LABEL_71:
          __break(1u);
          break;
        }
LABEL_20:
        v16 = v47 + 1;
        v8 = v38;
        v45 += v38;
        v10 = v37;
        v46 += v36;
        v12 = v40;
        if (v47 + 1 == v39)
          goto LABEL_56;
      }
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
      goto LABEL_77;
    }
LABEL_56:
    ++v12;
    v44 += v10;
    v43 += v34;
    if (v12 == v35)
      goto LABEL_57;
  }
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
  return result;
}

uint64_t sub_24A1DAE28(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 160) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A1DAE38(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_24A1DA9C0();
  return sub_24A1DAE6C;
}

uint64_t sub_24A1DAE6C(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 160) = *a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A1DAE7C()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t result;
  BOOL v11;
  uint64_t v12;

  v1 = v0[168];
  if (v1 != 2)
    return v1 & 1;
  v2 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 544))();
  v3 = v2;
  v4 = *(_QWORD *)(v2 + 16);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_12;
  }
  if (*(_QWORD *)(v2 + 32))
  {
    v5 = 1;
LABEL_12:
    swift_bridgeObjectRelease();
    v0[168] = v5;
    return v5;
  }
  v6 = 0;
  v7 = 0;
  v8 = *(uint64_t (**)(void))(*(_QWORD *)v0 + 408);
  v9 = v4 - 1;
  while (1)
  {
    result = v8();
    v11 = __OFADD__(v7, result);
    v7 += result;
    if (v11)
      break;
    v5 = v9 != v6;
    if (v9 == v6)
      goto LABEL_12;
    if ((unint64_t)(v6 + 1) >= *(_QWORD *)(v3 + 16))
      goto LABEL_15;
    v12 = *(_QWORD *)(v3 + 40 + 8 * v6++);
    if (v12 != v7)
      goto LABEL_12;
  }
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_24A1DAF58(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 168) = result;
  return result;
}

_BYTE *(*sub_24A1DAF60(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = sub_24A1DAE7C() & 1;
  return sub_24A1DAF98;
}

_BYTE *sub_24A1DAF98(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 168) = result[8];
  return result;
}

uint64_t sub_24A1DAFA8(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  size_t v17;
  uint64_t v18;

  v8 = *(_QWORD *)(a4 - 8);
  v9 = MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 568))(v9) & 1) != 0)
  {
    v12 = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 544))();
    result = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 384))();
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      v14 = result;
      if (!result)
        return swift_bridgeObjectRelease();
      if ((unint64_t)(result - 1) < *(_QWORD *)(v12 + 16))
      {
        v15 = 0;
        do
        {
          sub_24A216254();
          (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(a1 + *(_QWORD *)(v8 + 72) * v15++, v11, a4);
        }
        while (v14 != v15);
        return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
  }
  else
  {
    v16 = (void *)sub_24A21620C();
    v17 = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 424))();
    return (uint64_t)memcpy(v16, a3, v17);
  }
  return result;
}

uint64_t sub_24A1DB130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a3 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = MEMORY[0x24BDAC7A8](a1);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 568))(v8);
  if ((v9 & 1) != 0)
  {
    v10 = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 544))();
    result = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 384))();
    if ((result & 0x8000000000000000) == 0)
    {
      v12 = result;
      if (!result)
        return swift_bridgeObjectRelease();
      if ((unint64_t)(result - 1) >= *(_QWORD *)(v10 + 16))
        goto LABEL_14;
      v13 = 0;
      while (1)
      {
        result = sub_24A215F48();
        if ((v7 & 0x8000000000000000) != 0)
          break;
        v14 = *(_QWORD *)(v10 + 8 * v13++ + 32);
        memcpy((void *)(a2 + v14), (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
        (*(void (**)(char *, uint64_t))(v6 + 8))((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
        if (v12 == v13)
          return swift_bridgeObjectRelease();
      }
      __break(1u);
    }
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  MEMORY[0x24BDAC7A8](v9);
  *(&v15 - 2) = a2;
  *(&v15 - 1) = v3;
  sub_24A135F88(&qword_2579112E8);
  return sub_24A215EC4();
}

uint64_t sub_24A1DB2D4()
{
  return 2;
}

uint64_t sub_24A1DB2DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 384))();
  swift_bridgeObjectRetain();
  swift_retain();
  v4 = sub_24A1DE6AC(v3, a1, v1);
  swift_bridgeObjectRelease();
  v5 = swift_release();
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 296))(v5);
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v1 + 600))(v4, v6, MEMORY[0x24BEE4478], MEMORY[0x24BEE44B0]);
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A1DB384()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A1DB3B8(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 176) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A1DB3FC()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A1DB430(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 184) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A1DB474()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A1DB4A8(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 192) = a1;
  return swift_bridgeObjectRelease();
}

_QWORD *sub_24A1DB4EC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  int32x2_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int32x2_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int32x2_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v40;
  _QWORD v41[5];

  v7[22] = 0;
  v7[23] = 0;
  v7[24] = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_24A1DA05C(a1, a2, (uint64_t)a3, a4, a5, a6, a7);
  if (v40)
  {
    swift_bridgeObjectRelease();
LABEL_3:
    swift_release();
  }
  else
  {
    v14 = a3[2];
    switch(v14)
    {
      case 1:
        swift_release();
        break;
      case 2:
        v17 = a3[5];
        swift_retain();
        v18.i32[0] = 0;
        v19 = sub_24A1420E4(v17, v18);
        if (!a3[2])
        {
          __break(1u);
LABEL_19:
          __break(1u);
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
LABEL_23:
          __break(1u);
          JUMPOUT(0x24A1DB884);
        }
        v20 = v19;
        v21 = a3[4];
        swift_bridgeObjectRelease();
        v22 = sub_24A17CA38(v20, v21, &qword_25790A458);
        swift_release();
        swift_release();
        swift_beginAccess();
        v7[22] = v22;
        break;
      case 3:
        v23 = a3[6];
        swift_retain();
        v24.i32[0] = 0;
        v25 = sub_24A1420E4(v23, v24);
        if (a3[2] < 2uLL)
          goto LABEL_19;
        v26 = sub_24A17CA38(v25, a3[5], &qword_25790A458);
        if (!a3[2])
          goto LABEL_20;
        v27 = v26;
        v28 = a3[4];
        swift_bridgeObjectRelease();
        v29 = sub_24A17CA38(v27, v28, &qword_25790BA70);
        swift_release();
        swift_release();
        swift_beginAccess();
        v7[23] = v29;
        break;
      case 4:
        v30 = a3[7];
        swift_retain();
        v31.i32[0] = 0;
        v32 = sub_24A1420E4(v30, v31);
        if (a3[2] < 3uLL)
          goto LABEL_21;
        v33 = sub_24A17CA38(v32, a3[6], &qword_25790A458);
        if (a3[2] < 2uLL)
          goto LABEL_22;
        v34 = sub_24A17CA38(v33, a3[5], &qword_25790BA70);
        if (!a3[2])
          goto LABEL_23;
        v35 = v34;
        v36 = a3[4];
        swift_bridgeObjectRelease();
        v37 = sub_24A17CA38(v35, v36, &qword_257911C48);
        swift_release();
        swift_release();
        swift_beginAccess();
        v7[24] = v37;
        break;
      default:
        sub_24A216308();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        strcpy((char *)v41, "Invalid rank: ");
        HIBYTE(v41[1]) = -18;
        v41[4] = v14;
        sub_24A216584();
        sub_24A215D98();
        swift_bridgeObjectRelease();
        v15 = v41[1];
        sub_24A14C404();
        swift_allocError();
        *v16 = v41[0];
        v16[1] = v15;
        swift_willThrow();
        swift_release();
        goto LABEL_3;
    }
    swift_bridgeObjectRelease();
  }
  return v7;
}

_QWORD *sub_24A1DB894(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v37;
  _QWORD v38[5];

  v7[22] = 0;
  v7[23] = 0;
  v7[24] = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_24A1DA05C(a1, a2, (uint64_t)a3, a4, a5, a6, a7);
  if (v37)
  {
    swift_bridgeObjectRelease();
LABEL_3:
    swift_release();
  }
  else
  {
    v14 = a3[2];
    switch(v14)
    {
      case 1:
        swift_release();
        break;
      case 2:
        v17 = a3[5];
        swift_retain();
        v18 = sub_24A1DCD34(v17, 0.0);
        if (!a3[2])
        {
          __break(1u);
LABEL_19:
          __break(1u);
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
LABEL_23:
          __break(1u);
          JUMPOUT(0x24A1DBC2CLL);
        }
        v19 = v18;
        v20 = a3[4];
        swift_bridgeObjectRelease();
        v21 = sub_24A17CA38(v19, v20, &qword_257911D30);
        swift_release();
        swift_release();
        swift_beginAccess();
        v7[22] = v21;
        break;
      case 3:
        v22 = a3[6];
        swift_retain();
        v23 = sub_24A1DCD34(v22, 0.0);
        if (a3[2] < 2uLL)
          goto LABEL_19;
        v24 = sub_24A17CA38(v23, a3[5], &qword_257911D30);
        if (!a3[2])
          goto LABEL_20;
        v25 = v24;
        v26 = a3[4];
        swift_bridgeObjectRelease();
        v27 = sub_24A17CA38(v25, v26, &qword_257911D28);
        swift_release();
        swift_release();
        swift_beginAccess();
        v7[23] = v27;
        break;
      case 4:
        v28 = a3[7];
        swift_retain();
        v29 = sub_24A1DCD34(v28, 0.0);
        if (a3[2] < 3uLL)
          goto LABEL_21;
        v30 = sub_24A17CA38(v29, a3[6], &qword_257911D30);
        if (a3[2] < 2uLL)
          goto LABEL_22;
        v31 = sub_24A17CA38(v30, a3[5], &qword_257911D28);
        if (!a3[2])
          goto LABEL_23;
        v32 = v31;
        v33 = a3[4];
        swift_bridgeObjectRelease();
        v34 = sub_24A17CA38(v32, v33, &qword_257911D20);
        swift_release();
        swift_release();
        swift_beginAccess();
        v7[24] = v34;
        break;
      default:
        sub_24A216308();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        strcpy((char *)v38, "Invalid rank: ");
        HIBYTE(v38[1]) = -18;
        v38[4] = v14;
        sub_24A216584();
        sub_24A215D98();
        swift_bridgeObjectRelease();
        v15 = v38[1];
        sub_24A14C404();
        swift_allocError();
        *v16 = v38[0];
        v16[1] = v15;
        swift_willThrow();
        swift_release();
        goto LABEL_3;
    }
    swift_bridgeObjectRelease();
  }
  return v7;
}

_QWORD *sub_24A1DBC3C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t *a10, uint64_t *a11)
{
  _QWORD *v11;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v41;
  _QWORD v42[5];

  v11[22] = 0;
  v11[23] = 0;
  v11[24] = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_24A1DA05C(a1, a2, (uint64_t)a3, a4, a5, a6, a7);
  if (v41)
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    switch(a3[2])
    {
      case 1:
        swift_release();
        break;
      case 2:
        v20 = a3[5];
        swift_retain();
        v21 = sub_24A1DCFEC(0, v20);
        if (!a3[2])
        {
          __break(1u);
LABEL_18:
          __break(1u);
LABEL_19:
          __break(1u);
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
          JUMPOUT(0x24A1DBFFCLL);
        }
        v22 = v21;
        v23 = a3[4];
        swift_bridgeObjectRelease();
        v24 = sub_24A17CA38(v22, v23, a9);
        swift_release();
        swift_release();
        swift_beginAccess();
        v11[22] = v24;
        break;
      case 3:
        v25 = a3[6];
        swift_retain();
        v26 = sub_24A1DCFEC(0, v25);
        if (a3[2] < 2uLL)
          goto LABEL_18;
        v27 = sub_24A17CA38(v26, a3[5], a9);
        if (!a3[2])
          goto LABEL_19;
        v28 = v27;
        v29 = a3[4];
        swift_bridgeObjectRelease();
        v30 = sub_24A17CA38(v28, v29, a10);
        swift_release();
        swift_release();
        swift_beginAccess();
        v11[23] = v30;
        break;
      case 4:
        v31 = a3[7];
        swift_retain();
        v32 = sub_24A1DCFEC(0, v31);
        if (a3[2] < 3uLL)
          goto LABEL_20;
        v33 = sub_24A17CA38(v32, a3[6], a9);
        if (a3[2] < 2uLL)
          goto LABEL_21;
        v34 = sub_24A17CA38(v33, a3[5], a10);
        v35 = a3;
        if (!a3[2])
          goto LABEL_22;
        v36 = v34;
        v37 = v35[4];
        swift_bridgeObjectRelease();
        v38 = sub_24A17CA38(v36, v37, a11);
        swift_release();
        swift_release();
        swift_beginAccess();
        v11[24] = v38;
        break;
      default:
        sub_24A216308();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        strcpy((char *)v42, "Invalid rank: ");
        HIBYTE(v42[1]) = -18;
        v42[4] = a9;
        sub_24A216584();
        sub_24A215D98();
        swift_bridgeObjectRelease();
        v18 = v42[1];
        sub_24A14C404();
        swift_allocError();
        *v19 = v42[0];
        v19[1] = v18;
        swift_willThrow();
        swift_release();
        swift_release();
        return v11;
    }
    swift_bridgeObjectRelease();
  }
  return v11;
}

_QWORD *sub_24A1DC00C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t *a10, uint64_t *a11)
{
  _QWORD *v11;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v41;
  _QWORD v42[5];

  v11[22] = 0;
  v11[23] = 0;
  v11[24] = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_24A1DA05C(a1, a2, (uint64_t)a3, a4, a5, a6, a7);
  if (v41)
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    switch(a3[2])
    {
      case 1:
        swift_release();
        break;
      case 2:
        v20 = a3[5];
        swift_retain();
        v21 = sub_24A1DCE24(0, v20);
        if (!a3[2])
        {
          __break(1u);
LABEL_18:
          __break(1u);
LABEL_19:
          __break(1u);
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
          JUMPOUT(0x24A1DC3CCLL);
        }
        v22 = v21;
        v23 = a3[4];
        swift_bridgeObjectRelease();
        v24 = sub_24A17CA38(v22, v23, a9);
        swift_release();
        swift_release();
        swift_beginAccess();
        v11[22] = v24;
        break;
      case 3:
        v25 = a3[6];
        swift_retain();
        v26 = sub_24A1DCE24(0, v25);
        if (a3[2] < 2uLL)
          goto LABEL_18;
        v27 = sub_24A17CA38(v26, a3[5], a9);
        if (!a3[2])
          goto LABEL_19;
        v28 = v27;
        v29 = a3[4];
        swift_bridgeObjectRelease();
        v30 = sub_24A17CA38(v28, v29, a10);
        swift_release();
        swift_release();
        swift_beginAccess();
        v11[23] = v30;
        break;
      case 4:
        v31 = a3[7];
        swift_retain();
        v32 = sub_24A1DCE24(0, v31);
        if (a3[2] < 3uLL)
          goto LABEL_20;
        v33 = sub_24A17CA38(v32, a3[6], a9);
        if (a3[2] < 2uLL)
          goto LABEL_21;
        v34 = sub_24A17CA38(v33, a3[5], a10);
        v35 = a3;
        if (!a3[2])
          goto LABEL_22;
        v36 = v34;
        v37 = v35[4];
        swift_bridgeObjectRelease();
        v38 = sub_24A17CA38(v36, v37, a11);
        swift_release();
        swift_release();
        swift_beginAccess();
        v11[24] = v38;
        break;
      default:
        sub_24A216308();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        strcpy((char *)v42, "Invalid rank: ");
        HIBYTE(v42[1]) = -18;
        v42[4] = a9;
        sub_24A216584();
        sub_24A215D98();
        swift_bridgeObjectRelease();
        v18 = v42[1];
        sub_24A14C404();
        swift_allocError();
        *v19 = v42[0];
        v19[1] = v18;
        swift_willThrow();
        swift_release();
        swift_release();
        return v11;
    }
    swift_bridgeObjectRelease();
  }
  return v11;
}

_QWORD *sub_24A1DC3DC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t *a10, uint64_t *a11)
{
  _QWORD *v11;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v41;
  _QWORD v42[5];

  v11[22] = 0;
  v11[23] = 0;
  v11[24] = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_24A1DA05C(a1, a2, (uint64_t)a3, a4, a5, a6, a7);
  if (v41)
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    switch(a3[2])
    {
      case 1:
        swift_release();
        break;
      case 2:
        v20 = a3[5];
        swift_retain();
        v21 = sub_24A1DCF08(0, v20);
        if (!a3[2])
        {
          __break(1u);
LABEL_18:
          __break(1u);
LABEL_19:
          __break(1u);
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
          JUMPOUT(0x24A1DC79CLL);
        }
        v22 = v21;
        v23 = a3[4];
        swift_bridgeObjectRelease();
        v24 = sub_24A17CA38(v22, v23, a9);
        swift_release();
        swift_release();
        swift_beginAccess();
        v11[22] = v24;
        break;
      case 3:
        v25 = a3[6];
        swift_retain();
        v26 = sub_24A1DCF08(0, v25);
        if (a3[2] < 2uLL)
          goto LABEL_18;
        v27 = sub_24A17CA38(v26, a3[5], a9);
        if (!a3[2])
          goto LABEL_19;
        v28 = v27;
        v29 = a3[4];
        swift_bridgeObjectRelease();
        v30 = sub_24A17CA38(v28, v29, a10);
        swift_release();
        swift_release();
        swift_beginAccess();
        v11[23] = v30;
        break;
      case 4:
        v31 = a3[7];
        swift_retain();
        v32 = sub_24A1DCF08(0, v31);
        if (a3[2] < 3uLL)
          goto LABEL_20;
        v33 = sub_24A17CA38(v32, a3[6], a9);
        if (a3[2] < 2uLL)
          goto LABEL_21;
        v34 = sub_24A17CA38(v33, a3[5], a10);
        v35 = a3;
        if (!a3[2])
          goto LABEL_22;
        v36 = v34;
        v37 = v35[4];
        swift_bridgeObjectRelease();
        v38 = sub_24A17CA38(v36, v37, a11);
        swift_release();
        swift_release();
        swift_beginAccess();
        v11[24] = v38;
        break;
      default:
        sub_24A216308();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        strcpy((char *)v42, "Invalid rank: ");
        HIBYTE(v42[1]) = -18;
        v42[4] = a9;
        sub_24A216584();
        sub_24A215D98();
        swift_bridgeObjectRelease();
        v18 = v42[1];
        sub_24A14C404();
        swift_allocError();
        *v19 = v42[0];
        v19[1] = v18;
        swift_willThrow();
        swift_release();
        swift_release();
        return v11;
    }
    swift_bridgeObjectRelease();
  }
  return v11;
}

_QWORD *sub_24A1DC7AC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[5];

  v52 = a7;
  v51 = a6;
  v48 = *v7;
  v49 = *(_QWORD *)(v48 + 608);
  v50 = a4;
  v12 = *(_QWORD *)(v49 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7[22] = 0;
  v7[23] = 0;
  v7[24] = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  v15 = a5;
  v16 = a2;
  v17 = v7;
  v18 = v50;
  v50 = v15;
  v19 = v53;
  sub_24A1DA05C(a1, v16, (uint64_t)a3, v18, v15, v51, v52);
  if (!v19)
  {
    v53 = v12;
    v21 = v49;
    v22 = a3[2];
    switch(v22)
    {
      case 1:
        swift_release();
        swift_bridgeObjectRelease();
        return v17;
      case 2:
        swift_retain();
        sub_24A216404();
        if (a3[2] < 2uLL)
        {
          __break(1u);
        }
        else
        {
          v26 = sub_24A1DE5FC((uint64_t)v14, a3[5], v21);
          (*(void (**)(char *, uint64_t))(v53 + 8))(v14, v21);
          v54[0] = v26;
          if (a3[2])
          {
            v27 = a3[4];
            swift_bridgeObjectRelease();
            v28 = sub_24A215F30();
            v29 = sub_24A1DE5FC((uint64_t)v54, v27, v28);
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            swift_beginAccess();
            v17[22] = v29;
            swift_bridgeObjectRelease();
            return v17;
          }
        }
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        JUMPOUT(0x24A1DCD24);
      case 3:
        swift_retain();
        sub_24A216404();
        if (a3[2] < 3uLL)
          goto LABEL_22;
        v52 = 0;
        v30 = sub_24A1DE5FC((uint64_t)v14, a3[6], v21);
        (*(void (**)(char *, uint64_t))(v53 + 8))(v14, v21);
        v54[0] = v30;
        if (a3[2] < 2uLL)
          goto LABEL_23;
        v31 = a3[5];
        v32 = sub_24A215F30();
        v33 = sub_24A1DE5FC((uint64_t)v54, v31, v32);
        swift_bridgeObjectRelease();
        v54[0] = v33;
        if (!a3[2])
          goto LABEL_24;
        v34 = a3[4];
        swift_bridgeObjectRelease();
        v35 = sub_24A215F30();
        v36 = sub_24A1DE5FC((uint64_t)v54, v34, v35);
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_beginAccess();
        v17[23] = v36;
        swift_bridgeObjectRelease();
        return v17;
      case 4:
        swift_retain();
        sub_24A216404();
        if (a3[2] < 4uLL)
          goto LABEL_25;
        v37 = sub_24A1DE5FC((uint64_t)v14, a3[7], v21);
        (*(void (**)(char *, uint64_t))(v53 + 8))(v14, v21);
        v54[0] = v37;
        if (a3[2] < 3uLL)
          goto LABEL_26;
        v38 = a3[6];
        v39 = sub_24A215F30();
        v40 = sub_24A1DE5FC((uint64_t)v54, v38, v39);
        swift_bridgeObjectRelease();
        v54[0] = v40;
        if (a3[2] < 2uLL)
          goto LABEL_27;
        v41 = a3[5];
        v42 = sub_24A215F30();
        v43 = sub_24A1DE5FC((uint64_t)v54, v41, v42);
        swift_bridgeObjectRelease();
        v54[0] = v43;
        if (!a3[2])
          goto LABEL_28;
        v44 = a3[4];
        swift_bridgeObjectRelease();
        v45 = sub_24A215F30();
        v46 = sub_24A1DE5FC((uint64_t)v54, v44, v45);
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_beginAccess();
        v17[24] = v46;
        swift_bridgeObjectRelease();
        return v17;
      default:
        v54[0] = 0;
        v54[1] = 0xE000000000000000;
        sub_24A216308();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        strcpy((char *)v54, "Invalid rank: ");
        HIBYTE(v54[1]) = -18;
        v54[4] = v22;
        sub_24A216584();
        sub_24A215D98();
        swift_bridgeObjectRelease();
        v24 = v54[0];
        v23 = v54[1];
        sub_24A14C404();
        swift_allocError();
        *v25 = v24;
        v25[1] = v23;
        swift_willThrow();
        swift_release();
        goto LABEL_3;
    }
  }
  swift_bridgeObjectRelease();
LABEL_3:
  swift_release();
  return v17;
}

uint64_t sub_24A1DCD34(unint64_t a1, double a2)
{
  uint64_t result;
  double *v4;
  unint64_t v5;
  double v6;
  int64x2_t v7;
  int64x2_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a1 & 0x8000000000000000) != 0)
  {
    result = sub_24A2163E0();
    __break(1u);
    return result;
  }
  if (!a1)
    return MEMORY[0x24BEE4AF8];
  result = sub_24A215EF4();
  *(_QWORD *)(result + 16) = a1;
  v4 = (double *)(result + 32);
  if (a1 < 4)
  {
    v5 = 0;
    v6 = a2;
LABEL_9:
    v10 = a1 - v5;
    do
    {
      *v4++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  v5 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  v4 += a1 & 0xFFFFFFFFFFFFFFFCLL;
  v6 = a2;
  v7 = vdupq_lane_s64(*(uint64_t *)&a2, 0);
  v8 = (int64x2_t *)(result + 48);
  v9 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v5 != a1)
    goto LABEL_9;
  return result;
}

uint64_t sub_24A1DCE24(unsigned int a1, unint64_t a2)
{
  uint64_t result;
  unsigned int *v5;
  unint64_t v6;
  int32x4_t v7;
  int32x4_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = sub_24A2163E0();
    __break(1u);
    return result;
  }
  if (!a2)
    return MEMORY[0x24BEE4AF8];
  result = sub_24A215EF4();
  *(_QWORD *)(result + 16) = a2;
  v5 = (unsigned int *)(result + 32);
  if (a2 < 8)
  {
    v6 = 0;
LABEL_9:
    v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  v5 += a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = vdupq_n_s32(a1);
  v8 = (int32x4_t *)(result + 48);
  v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v6 != a2)
    goto LABEL_9;
  return result;
}

uint64_t sub_24A1DCF08(unsigned int a1, unint64_t a2)
{
  uint64_t result;
  _WORD *v5;
  unint64_t v6;
  int16x8_t v7;
  int16x8_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = sub_24A2163E0();
    __break(1u);
    return result;
  }
  if (!a2)
    return MEMORY[0x24BEE4AF8];
  result = sub_24A215EF4();
  *(_QWORD *)(result + 16) = a2;
  v5 = (_WORD *)(result + 32);
  if (a2 < 0x10)
  {
    v6 = 0;
LABEL_9:
    v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  v6 = a2 & 0xFFFFFFFFFFFFFFF0;
  v5 += a2 & 0xFFFFFFFFFFFFFFF0;
  v7 = vdupq_n_s16(a1);
  v8 = (int16x8_t *)(result + 48);
  v9 = a2 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 16;
  }
  while (v9);
  if (v6 != a2)
    goto LABEL_9;
  return result;
}

uint64_t sub_24A1DCFEC(unint64_t a1, unint64_t a2)
{
  uint64_t result;
  unint64_t *v5;
  unint64_t v6;
  int64x2_t v7;
  int64x2_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = sub_24A2163E0();
    __break(1u);
    return result;
  }
  if (!a2)
    return MEMORY[0x24BEE4AF8];
  result = sub_24A215EF4();
  *(_QWORD *)(result + 16) = a2;
  v5 = (unint64_t *)(result + 32);
  if (a2 < 4)
  {
    v6 = 0;
LABEL_9:
    v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  v6 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v5 += a2 & 0xFFFFFFFFFFFFFFFCLL;
  v7 = vdupq_n_s64(a1);
  v8 = (int64x2_t *)(result + 48);
  v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v6 != a2)
    goto LABEL_9;
  return result;
}

uint64_t sub_24A1DD0D0()
{
  uint64_t v0;

  (*(void (**)(void))(*(_QWORD *)v0 + 384))();
  return sub_24A215F00();
}

uint64_t sub_24A1DD11C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 720))();
}

_QWORD *sub_24A1DD128(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t (*v17)(_BYTE *, _QWORD);
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char isClassOrObjCExistentialType;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(_BYTE *);
  uint64_t (*v32)(void);
  int64_t v33;
  _BYTE v34[32];

  v2 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 608);
  v29 = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = (*(uint64_t (**)(uint64_t))(v7 + 720))(v4);
  v32 = *(uint64_t (**)(void))(*(_QWORD *)v1 + 200);
  result = (_QWORD *)v32();
  if (!result[2])
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v9 = result[4];
  result = (_QWORD *)swift_bridgeObjectRelease();
  if (v9 < 0)
    goto LABEL_30;
  if (v9)
  {
    v10 = 0;
    v28 = v9;
    while (v10 != v9)
    {
      result = (_QWORD *)((uint64_t (*)(_QWORD *))v32)(result);
      if (result[2] < 2uLL)
        goto LABEL_27;
      v11 = result[5];
      result = (_QWORD *)swift_bridgeObjectRelease();
      if (v11 < 0)
        goto LABEL_28;
      v33 = v10;
      if (v11)
      {
        v12 = 0;
        v31 = *(uint64_t (**)(_BYTE *))(*(_QWORD *)v2 + 664);
        while (v11 != v12)
        {
          result = (_QWORD *)((uint64_t (*)(_QWORD *))v32)(result);
          if (result[2] < 2uLL)
            goto LABEL_23;
          v13 = result[5];
          result = (_QWORD *)swift_bridgeObjectRelease();
          v14 = v33;
          v15 = v33 * v13;
          if ((unsigned __int128)(v33 * (__int128)v13) >> 64 != (v33 * v13) >> 63)
            goto LABEL_24;
          result = (_QWORD *)(v15 + v12);
          if (__OFADD__(v15, v12))
            goto LABEL_25;
          sub_24A215F48();
          result = (_QWORD *)v31(v34);
          if (!*v16)
            goto LABEL_31;
          v17 = (uint64_t (*)(_BYTE *, _QWORD))result;
          v18 = v16;
          v19 = v12 + 1;
          sub_24A215F30();
          sub_24A215F30();
          sub_24A215EDC();
          v20 = *v18;
          sub_24A1DE550(v14, v20);
          v21 = v14;
          v22 = v2;
          v23 = v20 + 8 * v21;
          sub_24A215EDC();
          v24 = *(_QWORD *)(v23 + 32);
          v2 = v22;
          sub_24A1DE550(v12, v24);
          isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
          v26 = v24 & 0xFFFFFFFFFFFFFF8;
          if ((isClassOrObjCExistentialType & 1) == 0)
            v26 = v24;
          (*(void (**)(unint64_t, char *, uint64_t))(v29 + 40))(v26+ ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))+ *(_QWORD *)(v29 + 72) * v12, v6, v3);
          result = (_QWORD *)v17(v34, 0);
          ++v12;
          if (v11 == v19)
            goto LABEL_5;
        }
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
        break;
      }
LABEL_5:
      v10 = v33 + 1;
      v9 = v28;
      if (v33 + 1 == v28)
        goto LABEL_20;
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
LABEL_20:
  v27 = swift_bridgeObjectRelease();
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 648))(v27);
  if (!result)
LABEL_32:
    __break(1u);
  return result;
}

_QWORD *sub_24A1DD3D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t (*v15)(_BYTE *);
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  int64_t v21;
  BOOL v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t (*v25)(_BYTE *, _QWORD);
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char isClassOrObjCExistentialType;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(_BYTE *);
  unint64_t v41;
  char *v42;
  int64_t v43;
  uint64_t (*v44)(void);
  _BYTE v45[32];

  v2 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 608);
  v37 = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x24BDAC7A8](a1);
  v42 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = (*(uint64_t (**)(uint64_t))(v6 + 720))(v4);
  v44 = *(uint64_t (**)(void))(*(_QWORD *)v1 + 200);
  result = (_QWORD *)v44();
  if (!result[2])
  {
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  v8 = result[4];
  result = (_QWORD *)swift_bridgeObjectRelease();
  if (v8 < 0)
    goto LABEL_49;
  v9 = v8;
  if (v8)
  {
    v10 = 0;
    v35 = v8;
    while (v10 != v9)
    {
      v43 = v10;
      result = (_QWORD *)((uint64_t (*)(_QWORD *))v44)(result);
      if (result[2] < 2uLL)
        goto LABEL_46;
      v11 = result[5];
      result = (_QWORD *)swift_bridgeObjectRelease();
      if (v11 < 0)
        goto LABEL_47;
      if (v11)
      {
        v12 = 0;
        v36 = v11;
        while (v12 != v11)
        {
          result = (_QWORD *)((uint64_t (*)(_QWORD *))v44)(result);
          if (result[2] < 3uLL)
            goto LABEL_43;
          v13 = result[6];
          result = (_QWORD *)swift_bridgeObjectRelease();
          if (v13 < 0)
            goto LABEL_44;
          if (v13)
          {
            v14 = 0;
            v15 = *(uint64_t (**)(_BYTE *))(*(_QWORD *)v2 + 688);
            v39 = v13;
            v40 = v15;
            while (v13 != v14)
            {
              result = (_QWORD *)((uint64_t (*)(_QWORD *))v44)(result);
              if (result[2] < 2uLL)
                goto LABEL_34;
              v16 = result[5];
              result = (_QWORD *)swift_bridgeObjectRelease();
              v17 = v43 * v16;
              if ((unsigned __int128)(v43 * (__int128)v16) >> 64 != (v43 * v16) >> 63)
                goto LABEL_35;
              result = (_QWORD *)((uint64_t (*)(_QWORD *))v44)(result);
              if (result[2] < 3uLL)
                goto LABEL_36;
              v18 = result[6];
              result = (_QWORD *)swift_bridgeObjectRelease();
              v19 = v17 * v18;
              if ((unsigned __int128)(v17 * (__int128)v18) >> 64 != (v17 * v18) >> 63)
                goto LABEL_37;
              result = (_QWORD *)((uint64_t (*)(_QWORD *))v44)(result);
              if (result[2] < 3uLL)
                goto LABEL_38;
              v20 = result[6];
              result = (_QWORD *)swift_bridgeObjectRelease();
              v21 = v12 * v20;
              if ((unsigned __int128)(v12 * (__int128)v20) >> 64 != (v12 * v20) >> 63)
                goto LABEL_39;
              v22 = __OFADD__(v19, v21);
              v23 = v19 + v21;
              if (v22)
                goto LABEL_40;
              result = (_QWORD *)(v23 + v14);
              if (__OFADD__(v23, v14))
                goto LABEL_41;
              sub_24A215F48();
              result = (_QWORD *)v40(v45);
              if (!*v24)
                goto LABEL_50;
              v25 = (uint64_t (*)(_BYTE *, _QWORD))result;
              v26 = v24;
              v41 = v14 + 1;
              sub_24A215F30();
              sub_24A215F30();
              sub_24A215F30();
              sub_24A215EDC();
              v27 = *v26;
              v28 = v43;
              sub_24A1DE550(v43, v27);
              sub_24A215EDC();
              v29 = *(_QWORD *)(v27 + 8 * v28 + 32);
              sub_24A1DE550(v12, v29);
              v13 = v39;
              sub_24A215EDC();
              v30 = *(_QWORD *)(v29 + 8 * v12 + 32);
              v31 = v42;
              sub_24A1DE550(v14, v30);
              isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
              v33 = v30 & 0xFFFFFFFFFFFFFF8;
              if ((isClassOrObjCExistentialType & 1) == 0)
                v33 = v30;
              (*(void (**)(unint64_t, char *, uint64_t))(v37 + 40))(v33+ ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(_QWORD *)(v37 + 72) * v14, v31, v3);
              result = (_QWORD *)v25(v45, 0);
              v14 = v41;
              if (v13 == v41)
                goto LABEL_11;
            }
            __break(1u);
LABEL_34:
            __break(1u);
LABEL_35:
            __break(1u);
LABEL_36:
            __break(1u);
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
LABEL_41:
            __break(1u);
            break;
          }
LABEL_11:
          ++v12;
          v11 = v36;
          if (v12 == v36)
            goto LABEL_5;
        }
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
        break;
      }
LABEL_5:
      v10 = v43 + 1;
      v9 = v35;
      if (v43 + 1 == v35)
        goto LABEL_31;
    }
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
LABEL_31:
  v34 = swift_bridgeObjectRelease();
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 672))(v34);
  if (!result)
LABEL_51:
    __break(1u);
  return result;
}

_QWORD *sub_24A1DD784(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t (*v19)(_BYTE *);
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  int64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t (*v38)(_BYTE *, _QWORD);
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  char isClassOrObjCExistentialType;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(_BYTE *);
  int64_t v57;
  unint64_t v58;
  int64_t v59;
  int64_t v60;
  _BYTE v61[32];

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 608);
  v53 = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = (*(uint64_t (**)(uint64_t))(v6 + 720))(v3);
  v7 = *(uint64_t (**)(void))(*(_QWORD *)v1 + 200);
  result = (_QWORD *)v7();
  if (!result[2])
  {
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  v9 = result[4];
  result = (_QWORD *)swift_bridgeObjectRelease();
  if (v9 < 0)
    goto LABEL_72;
  v10 = v9;
  if (v9)
  {
    v11 = 0;
    v52 = v2;
    v49 = v10;
    while (v11 != v10)
    {
      result = (_QWORD *)((uint64_t (*)(_QWORD *))v7)(result);
      if (result[2] < 2uLL)
        goto LABEL_69;
      v12 = result[5];
      result = (_QWORD *)swift_bridgeObjectRelease();
      if (v12 < 0)
        goto LABEL_70;
      v13 = v12;
      if (v12)
      {
        v14 = 0;
        v57 = v11;
        v50 = v12;
        while (v14 != v13)
        {
          result = (_QWORD *)((uint64_t (*)(_QWORD *))v7)(result);
          if (result[2] < 3uLL)
            goto LABEL_66;
          v15 = result[6];
          result = (_QWORD *)swift_bridgeObjectRelease();
          if (v15 < 0)
            goto LABEL_67;
          if (v15)
          {
            v16 = 0;
            v59 = v14;
            v51 = v15;
            while (v16 != v15)
            {
              result = (_QWORD *)((uint64_t (*)(_QWORD *))v7)(result);
              if (result[2] < 4uLL)
                goto LABEL_63;
              v17 = result[7];
              result = (_QWORD *)swift_bridgeObjectRelease();
              if (v17 < 0)
                goto LABEL_64;
              v60 = v16;
              if (v17)
              {
                v18 = 0;
                v19 = *(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 712);
                v55 = v17;
                v56 = v19;
                while (v17 != v18)
                {
                  result = (_QWORD *)((uint64_t (*)(_QWORD *))v7)(result);
                  if (result[2] < 2uLL)
                    goto LABEL_47;
                  v20 = result[5];
                  result = (_QWORD *)swift_bridgeObjectRelease();
                  v21 = v57;
                  v22 = v57 * v20;
                  if ((unsigned __int128)(v57 * (__int128)v20) >> 64 != (v57 * v20) >> 63)
                    goto LABEL_48;
                  result = (_QWORD *)((uint64_t (*)(_QWORD *))v7)(result);
                  if (result[2] < 3uLL)
                    goto LABEL_49;
                  v23 = result[6];
                  result = (_QWORD *)swift_bridgeObjectRelease();
                  v24 = v22 * v23;
                  if ((unsigned __int128)(v22 * (__int128)v23) >> 64 != (v22 * v23) >> 63)
                    goto LABEL_50;
                  result = (_QWORD *)((uint64_t (*)(_QWORD *))v7)(result);
                  if (result[2] < 4uLL)
                    goto LABEL_51;
                  v25 = result[7];
                  result = (_QWORD *)swift_bridgeObjectRelease();
                  v26 = v24 * v25;
                  if ((unsigned __int128)(v24 * (__int128)v25) >> 64 != (v24 * v25) >> 63)
                    goto LABEL_52;
                  result = (_QWORD *)((uint64_t (*)(_QWORD *))v7)(result);
                  if (result[2] < 3uLL)
                    goto LABEL_53;
                  v27 = result[6];
                  result = (_QWORD *)swift_bridgeObjectRelease();
                  v28 = v59 * v27;
                  if ((unsigned __int128)(v59 * (__int128)v27) >> 64 != (v59 * v27) >> 63)
                    goto LABEL_54;
                  result = (_QWORD *)((uint64_t (*)(_QWORD *))v7)(result);
                  if (result[2] < 4uLL)
                    goto LABEL_55;
                  v29 = result[7];
                  result = (_QWORD *)swift_bridgeObjectRelease();
                  v30 = v28 * v29;
                  if ((unsigned __int128)(v28 * (__int128)v29) >> 64 != (v28 * v29) >> 63)
                    goto LABEL_56;
                  v31 = __OFADD__(v26, v30);
                  v32 = v26 + v30;
                  if (v31)
                    goto LABEL_57;
                  result = (_QWORD *)((uint64_t (*)(_QWORD *))v7)(result);
                  if (result[2] < 4uLL)
                    goto LABEL_58;
                  v33 = result[7];
                  result = (_QWORD *)swift_bridgeObjectRelease();
                  v34 = v60 * v33;
                  if ((unsigned __int128)(v60 * (__int128)v33) >> 64 != (v60 * v33) >> 63)
                    goto LABEL_59;
                  v31 = __OFADD__(v32, v34);
                  v35 = v32 + v34;
                  if (v31)
                    goto LABEL_60;
                  result = (_QWORD *)(v35 + v18);
                  if (__OFADD__(v35, v18))
                    goto LABEL_61;
                  sub_24A215F48();
                  v36 = v1;
                  result = (_QWORD *)v56(v61);
                  if (!*v37)
                    goto LABEL_73;
                  v38 = (uint64_t (*)(_BYTE *, _QWORD))result;
                  v39 = v37;
                  v58 = v18 + 1;
                  sub_24A215F30();
                  sub_24A215F30();
                  sub_24A215F30();
                  sub_24A215F30();
                  sub_24A215EDC();
                  v40 = *v39;
                  sub_24A1DE550(v21, v40);
                  sub_24A215EDC();
                  v41 = *(_QWORD *)(v40 + 8 * v21 + 32);
                  v14 = v59;
                  sub_24A1DE550(v59, v41);
                  sub_24A215EDC();
                  v42 = *(_QWORD *)(v41 + 8 * v14 + 32);
                  v43 = v60;
                  sub_24A1DE550(v60, v42);
                  v44 = v52;
                  sub_24A215EDC();
                  v45 = *(_QWORD *)(v42 + 8 * v43 + 32);
                  sub_24A1DE550(v18, v45);
                  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
                  v47 = v45 & 0xFFFFFFFFFFFFFF8;
                  if ((isClassOrObjCExistentialType & 1) == 0)
                    v47 = v45;
                  (*(void (**)(unint64_t, char *, uint64_t))(v53 + 40))(v47+ ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))+ *(_QWORD *)(v53 + 72) * v18, v5, v44);
                  result = (_QWORD *)v38(v61, 0);
                  v18 = v58;
                  v17 = v55;
                  v1 = v36;
                  if (v55 == v58)
                    goto LABEL_15;
                }
                __break(1u);
LABEL_47:
                __break(1u);
LABEL_48:
                __break(1u);
LABEL_49:
                __break(1u);
LABEL_50:
                __break(1u);
LABEL_51:
                __break(1u);
LABEL_52:
                __break(1u);
LABEL_53:
                __break(1u);
LABEL_54:
                __break(1u);
LABEL_55:
                __break(1u);
LABEL_56:
                __break(1u);
LABEL_57:
                __break(1u);
LABEL_58:
                __break(1u);
LABEL_59:
                __break(1u);
LABEL_60:
                __break(1u);
LABEL_61:
                __break(1u);
                break;
              }
LABEL_15:
              v16 = v60 + 1;
              v15 = v51;
              v11 = v57;
              if (v60 + 1 == v51)
                goto LABEL_42;
            }
            __break(1u);
LABEL_63:
            __break(1u);
LABEL_64:
            __break(1u);
            break;
          }
LABEL_42:
          ++v14;
          v13 = v50;
          if (v14 == v50)
            goto LABEL_43;
        }
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
        break;
      }
LABEL_43:
      ++v11;
      v10 = v49;
      if (v11 == v49)
        goto LABEL_44;
    }
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
LABEL_44:
  v48 = swift_bridgeObjectRelease();
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 696))(v48);
  if (!result)
LABEL_74:
    __break(1u);
  return result;
}

uint64_t sub_24A1DDC40()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A1DDC64()
{
  sub_24A1DDF20();
  return swift_deallocClassInstance();
}

uint64_t sub_24A1DDC84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;

  v1 = sub_24A215594();
  MEMORY[0x24BDAC7A8](v1);
  v2 = sub_24A135F88(&qword_2579112F8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_24A135F88(&qword_2579112F0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 384);
  v12 = v11(v8);
  if ((v12 & 0x8000000000000000) == 0)
  {
    v13 = v12;
    swift_retain();
    v21 = v7;
    v22 = v3;
    if (v13)
    {
      v14 = sub_24A215EF4();
      *(_QWORD *)(v14 + 16) = v13;
    }
    else
    {
      v14 = MEMORY[0x24BEE4AF8];
    }
    v15 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v0 + 592))(v14 + 32, v13, v15, MEMORY[0x24BEE4478], MEMORY[0x24BEE44B0]);
    v17 = v11(v16);
    if (v13 >= v17)
    {
      *(_QWORD *)(v14 + 16) = v17;
      v18 = swift_release();
      v11(v18);
      sub_24A2155AC();
      sub_24A215558();
      sub_24A21554C();
      sub_24A2155A0();
      sub_24A215564();
      sub_24A215588();
      v19 = sub_24A215570();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v5, v2);
      (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v6);
      swift_bridgeObjectRelease();
      return v19;
    }
    __break(1u);
  }
  result = sub_24A2163E0();
  __break(1u);
  return result;
}

uint64_t sub_24A1DDF20()
{
  uint64_t v0;

  sub_24A1DA13C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_24A1DDF50()
{
  sub_24A1DA13C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void sub_24A1DDF88()
{
  sub_24A2163EC();
  __break(1u);
}

void sub_24A1DDFE8()
{
  sub_24A2163EC();
  __break(1u);
}

uint64_t sub_24A1DE048()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 376))();
}

uint64_t type metadata accessor for VAEspressoV2Input(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24A1A4230(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for VAEspressoV2Input);
}

uint64_t type metadata accessor for VAEspressoV2Output(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24A1A4230(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for VAEspressoV2Output);
}

uint64_t sub_24A1DE088(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  sub_24A135F88(&qword_257911C50);
  v36 = a2;
  v6 = sub_24A216434();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    sub_24A216638();
    sub_24A215D50();
    result = sub_24A21665C();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

void *sub_24A1DE39C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_24A135F88(&qword_257911C50);
  v2 = *v0;
  v3 = sub_24A216428();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_24A1DE550(unint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = _swift_isClassOrObjCExistentialType();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  v5 = a2 & 0xFFFFFFFFFFFFF8;
  if ((result & 1) == 0)
    v5 = a2;
  if (*(_QWORD *)(v5 + 16) <= a1)
    goto LABEL_7;
  return result;
}

void *sub_24A1DE5A0@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void *v5;
  size_t v6;
  void *result;

  v5 = *(void **)(v2 + 16);
  v6 = (*(uint64_t (**)(void))(**(_QWORD **)(v2 + 24) + 424))();
  result = memcpy(v5, a1, v6);
  *a2 = v5;
  return result;
}

uint64_t sub_24A1DE5FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = sub_24A215EE8();
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v8 = result;
    if (a2)
    {
      v9 = v7;
      v10 = *(_QWORD *)(a3 - 8);
      v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
      v11(v7, a1, a3);
      v12 = a2 - 1;
      if (v12)
      {
        v13 = *(_QWORD *)(v10 + 72);
        v14 = v9 + v13;
        do
        {
          v11(v14, a1, a3);
          v14 += v13;
          --v12;
        }
        while (v12);
      }
    }
    sub_24A215F30();
    return v8;
  }
  return result;
}

uint64_t sub_24A1DE6AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = sub_24A135F88(&qword_2579112F0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_24A135F88(&qword_2579112F8);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0x8000000000000000) == 0)
  {
    v20 = v12;
    v21 = v7;
    v19 = v3;
    v23 = a3;
    v22 = v6;
    if (a1)
    {
      v15 = sub_24A215EF4();
      *(_QWORD *)(v15 + 16) = a1;
    }
    else
    {
      v15 = MEMORY[0x24BEE4AF8];
    }
    sub_24A2155A0();
    swift_bridgeObjectRetain();
    sub_24A215558();
    sub_24A2155AC();
    sub_24A215558();
    sub_24A21557C();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v22);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v20);
    v16 = swift_bridgeObjectRelease();
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 384))(v16);
    if (v17 <= a1)
    {
      *(_QWORD *)(v15 + 16) = v17;
      return v15;
    }
    __break(1u);
  }
  swift_release();
  swift_bridgeObjectRelease();
  result = sub_24A2163E0();
  __break(1u);
  return result;
}

uint64_t sub_24A1DE8E4(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = *v2;
  v5 = *a1;
  v6 = a1[1];
  v7 = (*(uint64_t (**)(void))(*v2 + 296))();
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*v2 + 592))(v5, v6, v7, *(_QWORD *)(v4 + 608), *(_QWORD *)(v4 + 616));
  result = (*(uint64_t (**)(uint64_t))(*v2 + 384))(v8);
  *a2 = result;
  return result;
}

uint64_t destroy for VAEspressoModelV2()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

_QWORD *initializeWithCopy for VAEspressoModelV2(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for VAEspressoModelV2(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for VAEspressoModelV2(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for VAEspressoModelV2(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for VAEspressoModelV2(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VAEspressoModelV2(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VAEspressoModelV2()
{
  return &type metadata for VAEspressoModelV2;
}

uint64_t type metadata accessor for VAEspressoUtilsV2()
{
  return objc_opt_self();
}

uint64_t sub_24A1DEBF8()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for VAEspressoV2InputFp32Wrapped(uint64_t a1)
{
  return sub_24A1360F8(a1, qword_25791BE50);
}

uint64_t sub_24A1DEC40()
{
  return swift_initClassMetadata2();
}

uint64_t sub_24A1DEC74()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for VAEspressoV2OutputFp32Wrapped(uint64_t a1)
{
  return sub_24A1360F8(a1, (uint64_t *)&unk_25791BEE0);
}

uint64_t sub_24A1DECCC()
{
  return swift_initClassMetadata2();
}

float sub_24A1DED08()
{
  return 0.00001;
}

uint64_t sub_24A1DED18(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_24A1DED24(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_24A1DF1F4(a1, a2);
  v3 = sub_24A1DF3A0(v2, (float (*)(uint64_t, float))sub_24A1DF350);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_24A1DED98()
{
  return 24;
}

uint64_t sub_24A1DEDA0()
{
  return 600;
}

uint64_t sub_24A1DEDA8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = result;
    if (a3)
    {
      v8 = sub_24A215EF4();
      *(_QWORD *)(v8 + 16) = a3;
      bzero((void *)(v8 + 32), 4 * a3);
      v9 = sub_24A215EF4();
      *(_QWORD *)(v9 + 16) = a3;
      bzero((void *)(v9 + 32), 4 * a3);
    }
    else
    {
      v9 = MEMORY[0x24BEE4AF8];
      v8 = MEMORY[0x24BEE4AF8];
    }
    result = sub_24A1421D4(v9, a2);
    *a4 = v6;
    a4[1] = a2;
    a4[2] = a3;
    a4[3] = 0;
    a4[4] = v8;
    a4[5] = result;
  }
  return result;
}

uint64_t sub_24A1DEE68(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v5 = v2[3];
  v6 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    v1 = v2;
    v8 = v2[5];
    v2 += 5;
    v7 = v8;
    if (*(v2 - 4) < v6)
      v6 = *(v2 - 4);
    *(v2 - 2) = v6;
    if (*(_QWORD *)(v7 + 16))
    {
      v4 = a1;
      v3 = *(_QWORD *)(v7 + 32);
      swift_bridgeObjectRetain();
      sub_24A1B9118(0, 1);
      v2 = (_QWORD *)*v2;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_6;
      goto LABEL_11;
    }
  }
  __break(1u);
LABEL_11:
  v2 = sub_24A173758(0, v2[2] + 1, 1, v2);
LABEL_6:
  v10 = v2[2];
  v9 = v2[3];
  if (v10 >= v9 >> 1)
    v2 = sub_24A173758((_QWORD *)(v9 > 1), v10 + 1, 1, v2);
  v2[2] = v10 + 1;
  v2[v10 + 4] = v4;
  v1[5] = v2;
  swift_bridgeObjectRetain();
  v11 = swift_bridgeObjectRetain();
  sub_24A1B6DA8(v11, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v12 = swift_bridgeObjectRetain();
  v13 = sub_24A1B6FC4(v12, v3);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease_n();
  v1[4] = v13;
  return result;
}

uint64_t sub_24A1DEFCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_24A1DEE68(a1);
  v2 = sub_24A1DF4AC(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
  v3 = swift_bridgeObjectRetain();
  v4 = sub_24A1B6FC4(v3, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

float sub_24A1DF044(uint64_t a1)
{
  int64_t v1;
  float *v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  float v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  int64_t v12;
  float *v13;
  float v14;
  float v15;
  unint64_t v16;
  float v17;
  unint64_t v18;
  float v19;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = (float *)(a1 + 32);
    if (v1 == 1)
    {
      v3 = 0;
      v4 = 0.0;
    }
    else
    {
      v3 = v1 & 0x7FFFFFFFFFFFFFFELL;
      v10 = (float *)(a1 + 36);
      v4 = 0.0;
      v11 = v1 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v4 = (float)(v4 + *(v10 - 1)) + *v10;
        v10 += 2;
        v11 -= 2;
      }
      while (v11);
      if (v1 == v3)
      {
LABEL_15:
        v15 = v4 / (float)v1;
        v21 = MEMORY[0x24BEE4AF8];
        sub_24A148BB8(0, v1, 0);
        v5 = v21;
        v16 = *(_QWORD *)(v21 + 16);
        do
        {
          v17 = *v2;
          v22 = v5;
          v18 = *(_QWORD *)(v5 + 24);
          v6 = v16 + 1;
          if (v16 >= v18 >> 1)
          {
            sub_24A148BB8(v18 > 1, v16 + 1, 1);
            v5 = v22;
          }
          *(_QWORD *)(v5 + 16) = v6;
          *(float *)(v5 + 4 * v16 + 32) = (float)(v17 - v15) * (float)(v17 - v15);
          ++v2;
          ++v16;
          --v1;
        }
        while (v1);
        goto LABEL_5;
      }
    }
    v12 = v1 - v3;
    v13 = (float *)(a1 + 4 * v3 + 32);
    do
    {
      v14 = *v13++;
      v4 = v4 + v14;
      --v12;
    }
    while (v12);
    goto LABEL_15;
  }
  v5 = MEMORY[0x24BEE4AF8];
  v6 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
  if (!v6)
  {
    v8 = 0.0;
    goto LABEL_23;
  }
LABEL_5:
  if ((unint64_t)v6 >= 2)
  {
    v9 = 0;
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    v8 = 0.0;
    do
    {
      v8 = (float)(v8 + *(float *)(v5 + 4 * v9 + 32)) + *(float *)(v5 + 4 * v9 + 36);
      v9 += 2;
    }
    while (v7 != v9);
    goto LABEL_22;
  }
  v7 = 0;
  v8 = 0.0;
  do
  {
    v19 = *(float *)(v5 + 4 * v7++ + 32);
    v8 = v8 + v19;
LABEL_22:
    ;
  }
  while (v6 != v7);
LABEL_23:
  swift_bridgeObjectRelease();
  return v8 / (float)v6;
}

uint64_t sub_24A1DF1F4(uint64_t a1, float a2)
{
  int64_t v2;
  float *v4;
  uint64_t v5;
  float v6;
  uint64_t result;
  float *v8;
  uint64_t v9;
  int64_t v10;
  float *v11;
  float v12;
  float v13;
  float v14;
  unint64_t v15;
  float v16;
  float v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    sub_24A1DF044(a1);
    return MEMORY[0x24BEE4AF8];
  }
  v4 = (float *)(a1 + 32);
  if (v2 == 1)
  {
    v5 = 0;
    v6 = 0.0;
LABEL_8:
    v10 = v2 - v5;
    v11 = (float *)(a1 + 4 * v5 + 32);
    do
    {
      v12 = *v11++;
      v6 = v6 + v12;
      --v10;
    }
    while (v10);
    goto LABEL_10;
  }
  v5 = v2 & 0x7FFFFFFFFFFFFFFELL;
  v8 = (float *)(a1 + 36);
  v6 = 0.0;
  v9 = v2 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    v6 = (float)(v6 + *(v8 - 1)) + *v8;
    v8 += 2;
    v9 -= 2;
  }
  while (v9);
  if (v2 != v5)
    goto LABEL_8;
LABEL_10:
  v13 = v6 / (float)v2;
  v14 = sub_24A1DF044(a1);
  v19 = MEMORY[0x24BEE4AF8];
  sub_24A148BB8(0, v2, 0);
  result = v19;
  v15 = *(_QWORD *)(v19 + 16);
  v16 = sqrtf(v14 + a2);
  do
  {
    v17 = *v4;
    v20 = result;
    v18 = *(_QWORD *)(result + 24);
    if (v15 >= v18 >> 1)
    {
      sub_24A148BB8(v18 > 1, v15 + 1, 1);
      result = v20;
    }
    *(_QWORD *)(result + 16) = v15 + 1;
    *(float *)(result + 4 * v15 + 32) = (float)(v17 - v13) / v16;
    ++v4;
    ++v15;
    --v2;
  }
  while (v2);
  return result;
}

unint64_t sub_24A1DF350(unint64_t result)
{
  uint64_t v1;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (*(_QWORD *)(*(_QWORD *)(v1 + 16) + 16) <= result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (*(_QWORD *)(*(_QWORD *)(v1 + 24) + 16) <= result)
LABEL_7:
    __break(1u);
  return result;
}

uint64_t sub_24A1DF3A0(uint64_t a1, float (*a2)(uint64_t, float))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v11 = MEMORY[0x24BEE4AF8];
  sub_24A148BB8(0, 0, 0);
  v4 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v4)
  {
    v5 = 0;
    v6 = a1 + 32;
    do
    {
      v7 = a2(v5, *(float *)(v6 + 4 * v5));
      v9 = *(_QWORD *)(v11 + 16);
      v8 = *(_QWORD *)(v11 + 24);
      if (v9 >= v8 >> 1)
        sub_24A148BB8(v8 > 1, v9 + 1, 1);
      ++v5;
      *(_QWORD *)(v11 + 16) = v9 + 1;
      *(float *)(v11 + 4 * v9 + 32) = v7;
    }
    while (v4 != v5);
  }
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_24A1DF4AC(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  float v5;
  uint64_t v6;
  unint64_t v7;
  float v8;
  unint64_t v9;
  uint64_t v11;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v5 = (float)a1;
    v11 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_24A148BB8(0, v2, 0);
    v6 = 0;
    v3 = v11;
    v7 = *(_QWORD *)(v11 + 16);
    do
    {
      v8 = *(float *)(a2 + 4 * v6 + 32);
      v9 = *(_QWORD *)(v11 + 24);
      if (v7 >= v9 >> 1)
        sub_24A148BB8(v9 > 1, v7 + 1, 1);
      ++v6;
      *(_QWORD *)(v11 + 16) = v7 + 1;
      *(float *)(v11 + 4 * v7++ + 32) = v8 / v5;
    }
    while (v2 != v6);
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t destroy for VALayerNorm()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t _s12VoiceActions11VALayerNormVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VALayerNorm(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

__n128 initializeWithTake for VALayerNorm(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for VALayerNorm(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for VALayerNorm(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 20))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VALayerNorm(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 20) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 20) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VALayerNorm()
{
  return &type metadata for VALayerNorm;
}

uint64_t destroy for VACMVN()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for VACMVN(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for VACMVN(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for VACMVN(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for VACMVN(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VACMVN(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VACMVN()
{
  return &type metadata for VACMVN;
}

double sub_24A1DF918()
{
  return 0.0;
}

uint64_t sub_24A1DF920()
{
  return 0;
}

uint64_t sub_24A1DF928@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, char a7@<W6>, uint64_t a8@<X8>, float a9@<S0>, double a10@<D1>, double a11@<D2>)
{
  *(_QWORD *)a8 = result;
  *(_QWORD *)(a8 + 8) = a2;
  *(float *)(a8 + 16) = a9;
  *(double *)(a8 + 24) = a10;
  *(double *)(a8 + 32) = a11;
  *(_QWORD *)(a8 + 40) = a3;
  *(_QWORD *)(a8 + 48) = a4;
  *(_BYTE *)(a8 + 56) = a5;
  *(_BYTE *)(a8 + 57) = a6;
  *(_BYTE *)(a8 + 58) = a7;
  return result;
}

void sub_24A1DF948(char *a1)
{
  sub_24A1DFA04(*a1);
}

uint64_t sub_24A1DF954(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6F69746365746564;
  else
    v3 = 0x4164726F7779656BLL;
  if (v2)
    v4 = 0xEC0000006F696475;
  else
    v4 = 0xEA0000000000736ELL;
  if ((a2 & 1) != 0)
    v5 = 0x6F69746365746564;
  else
    v5 = 0x4164726F7779656BLL;
  if ((a2 & 1) != 0)
    v6 = 0xEA0000000000736ELL;
  else
    v6 = 0xEC0000006F696475;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_24A21659C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_24A1DFA04(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_24A1DFA54(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_24A1DFB1C + 4 * byte_24A21EA15[a2]))(0x65726F6373);
}

uint64_t sub_24A1DFB1C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x65726F6373 && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = sub_24A21659C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_24A1DFC30()
{
  char *v0;

  sub_24A1DFD40(0, *v0);
}

void sub_24A1DFC3C()
{
  __asm { BR              X10 }
}

uint64_t sub_24A1DFC78()
{
  sub_24A215D50();
  return swift_bridgeObjectRelease();
}

void sub_24A1DFD38(uint64_t a1)
{
  char *v1;

  sub_24A1DFD40(a1, *v1);
}

void sub_24A1DFD40(uint64_t a1, char a2)
{
  sub_24A216638();
  __asm { BR              X10 }
}

uint64_t sub_24A1DFD8C()
{
  sub_24A215D50();
  swift_bridgeObjectRelease();
  return sub_24A21665C();
}

uint64_t sub_24A1DFE60@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_24A1E3D6C();
  *a1 = result;
  return result;
}

uint64_t sub_24A1DFE8C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_24A1DFEBC + 4 * byte_24A21EA2A[*v0]))();
}

void sub_24A1DFEBC(_QWORD *a1@<X8>)
{
  *a1 = 0x65726F6373;
  a1[1] = 0xE500000000000000;
}

void sub_24A1DFED4(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "silenceBefore");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_24A1DFEFC(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "speechDuring");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_24A1DFF20(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "silenceAfter");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_24A1DFF44(_QWORD *a1@<X8>)
{
  *a1 = 0x6172467472617473;
  a1[1] = 0xEA0000000000656DLL;
}

void sub_24A1DFF64(_QWORD *a1@<X8>)
{
  *a1 = 0x656D617246646E65;
  a1[1] = 0xE800000000000000;
}

uint64_t sub_24A1DFF80()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24A1DFFB0 + 4 * byte_24A21EA31[*v0]))(0x64726F7779656BLL, 0xE700000000000000);
}

uint64_t sub_24A1DFFB0()
{
  return 0x65726F6373;
}

uint64_t sub_24A1DFFC4()
{
  return 0x4265636E656C6973;
}

uint64_t sub_24A1DFFE8()
{
  return 0x7544686365657073;
}

uint64_t sub_24A1E0008()
{
  return 0x4165636E656C6973;
}

uint64_t sub_24A1E0028()
{
  return 0x6172467472617473;
}

uint64_t sub_24A1E0044()
{
  return 0x656D617246646E65;
}

uint64_t sub_24A1E005C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_24A1E3D6C();
  *a1 = result;
  return result;
}

uint64_t sub_24A1E0080()
{
  sub_24A1E3DB4();
  return sub_24A2166A4();
}

uint64_t sub_24A1E00A8()
{
  sub_24A1E3DB4();
  return sub_24A2166B0();
}

uint64_t VAKeywordDetection.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;

  v3 = sub_24A135F88(&qword_257911D70);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v1 + 40);
  v10 = *(_QWORD *)(v1 + 48);
  v7 = *(unsigned __int8 *)(v1 + 56);
  v12 = *(unsigned __int8 *)(v1 + 57);
  v13 = v7;
  v11 = *(unsigned __int8 *)(v1 + 58);
  sub_24A14B668(a1, a1[3]);
  sub_24A1E3DB4();
  sub_24A21668C();
  v22 = 0;
  v8 = v15;
  sub_24A216530();
  if (!v8)
  {
    v21 = 1;
    sub_24A216548();
    v20 = 2;
    sub_24A21653C();
    v19 = 3;
    sub_24A21653C();
    v18 = 4;
    sub_24A21653C();
    v17 = 5;
    sub_24A21656C();
    v16 = 6;
    sub_24A21656C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t VAKeywordDetection.description.getter()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_DWORD *)(v0 + 16);
  if (*(_BYTE *)(v0 + 56))
    v2 = 0x3E6C69733CLL;
  else
    v2 = 0x3E6863656570733CLL;
  if ((*(_BYTE *)(v0 + 58) & 1) != 0)
  {
    sub_24A216308();
    swift_bridgeObjectRelease();
    v7 = v2;
    swift_bridgeObjectRetain();
    sub_24A215D98();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_24A216308();
    swift_bridgeObjectRelease();
    v7 = v2;
    sub_24A215D98();
    swift_bridgeObjectRetain();
    sub_24A215D98();
    swift_bridgeObjectRelease();
    sub_24A215D98();
  }
  sub_24A215D98();
  swift_bridgeObjectRelease();
  sub_24A215D98();
  sub_24A135F88(qword_25790AEF0);
  v3 = swift_allocObject();
  v4 = MEMORY[0x24BEE14E8];
  *(_OWORD *)(v3 + 16) = xmmword_24A218650;
  v5 = MEMORY[0x24BEE1568];
  *(_QWORD *)(v3 + 56) = v4;
  *(_QWORD *)(v3 + 64) = v5;
  *(_DWORD *)(v3 + 32) = v1;
  sub_24A215CE4();
  sub_24A215D98();
  swift_bridgeObjectRelease();
  sub_24A215D98();
  sub_24A216584();
  sub_24A215D98();
  swift_bridgeObjectRelease();
  sub_24A215D98();
  sub_24A216584();
  sub_24A215D98();
  swift_bridgeObjectRelease();
  sub_24A215D98();
  return v7;
}

uint64_t sub_24A1E0564(_QWORD *a1)
{
  return VAKeywordDetection.encode(to:)(a1);
}

uint64_t VAKeywordResult.__allocating_init(detections:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t VAKeywordResult.init(detections:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t static VAKeywordResult.buildFromScoresMap(scores:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (!v5)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v10 | (v8 << 6); ; i = __clz(__rbit64(v13)) + (v8 << 6))
  {
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v17 = *v15;
    v16 = v15[1];
    v18 = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4 * i);
    swift_bridgeObjectRetain();
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_24A17B434(0, v9[2] + 1, 1, v9);
      v9 = (_QWORD *)result;
    }
    v20 = v9[2];
    v19 = v9[3];
    if (v20 >= v19 >> 1)
    {
      result = (uint64_t)sub_24A17B434((_QWORD *)(v19 > 1), v20 + 1, 1, v9);
      v9 = (_QWORD *)result;
    }
    v9[2] = v20 + 1;
    v21 = &v9[8 * v20];
    v21[4] = v17;
    v21[5] = v16;
    *((_DWORD *)v21 + 12) = v18;
    *(_OWORD *)(v21 + 7) = 0u;
    *(_OWORD *)(v21 + 9) = 0u;
    *((_WORD *)v21 + 44) = 0;
    *((_BYTE *)v21 + 90) = 1;
    if (v5)
      goto LABEL_4;
LABEL_5:
    v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v6)
      goto LABEL_25;
    v13 = *(_QWORD *)(v2 + 8 * v12);
    ++v8;
    if (!v13)
    {
      v8 = v12 + 1;
      if (v12 + 1 >= v6)
        goto LABEL_25;
      v13 = *(_QWORD *)(v2 + 8 * v8);
      if (!v13)
      {
        v8 = v12 + 2;
        if (v12 + 2 >= v6)
          goto LABEL_25;
        v13 = *(_QWORD *)(v2 + 8 * v8);
        if (!v13)
          break;
      }
    }
LABEL_18:
    v5 = (v13 - 1) & v13;
  }
  v14 = v12 + 3;
  if (v14 >= v6)
  {
LABEL_25:
    swift_release();
    type metadata accessor for VAKeywordResult();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v9;
    return result;
  }
  v13 = *(_QWORD *)(v2 + 8 * v14);
  if (v13)
  {
    v8 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    v8 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v8 >= v6)
      goto LABEL_25;
    v13 = *(_QWORD *)(v2 + 8 * v8);
    ++v14;
    if (v13)
      goto LABEL_18;
  }
LABEL_27:
  __break(1u);
  return result;
}

char *sub_24A1E07B0()
{
  uint64_t v0;
  char *v2;

  v2 = (char *)(*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
  swift_bridgeObjectRetain();
  sub_24A1E2BDC(&v2);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_24A1E0818()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char isUniquelyReferenced_nonNull_native;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t result;

  v1 = (_QWORD *)sub_24A1E09E0(MEMORY[0x24BEE4AF8]);
  v2 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    return (uint64_t)v1;
  }
  v4 = (_DWORD *)(v2 + 48);
  while (1)
  {
    v6 = *((_QWORD *)v4 - 2);
    v5 = *((_QWORD *)v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain_n();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v10 = sub_24A148970(v6, v5);
    v11 = v1[2];
    v12 = (v9 & 1) == 0;
    v13 = v11 + v12;
    if (__OFADD__(v11, v12))
      break;
    v14 = v9;
    if (v1[3] >= v13)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v9 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        sub_24A1E38B0();
        if ((v14 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      sub_24A1E35AC(v13, isUniquelyReferenced_nonNull_native);
      v15 = sub_24A148970(v6, v5);
      if ((v14 & 1) != (v16 & 1))
        goto LABEL_19;
      v10 = v15;
      if ((v14 & 1) != 0)
      {
LABEL_3:
        *(_DWORD *)(v1[7] + 4 * v10) = v7;
        goto LABEL_4;
      }
    }
    v1[(v10 >> 6) + 8] |= 1 << v10;
    v17 = (uint64_t *)(v1[6] + 16 * v10);
    *v17 = v6;
    v17[1] = v5;
    *(_DWORD *)(v1[7] + 4 * v10) = v7;
    v18 = v1[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_18;
    v1[2] = v20;
    swift_bridgeObjectRetain();
LABEL_4:
    v4 += 16;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    if (!--v3)
      goto LABEL_16;
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  result = sub_24A2165CC();
  __break(1u);
  return result;
}

unint64_t sub_24A1E09E0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_24A135F88(&qword_2579120C8);
  v2 = (_QWORD *)sub_24A216440();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_DWORD *)(a1 + 48);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 2);
    v6 = *((_QWORD *)v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = sub_24A148970(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_DWORD *)(v2[7] + 4 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 6;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_24A1E0AF0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char isUniquelyReferenced_nonNull_native;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t result;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
  v2 = (_QWORD *)sub_24A1E09E0(MEMORY[0x24BEE4AF8]);
  v3 = *(_QWORD *)(v1 + 16);
  if (!v3)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    return (uint64_t)v2;
  }
  v4 = (_DWORD *)(v1 + 48);
  while (1)
  {
    v6 = *((_QWORD *)v4 - 2);
    v5 = *((_QWORD *)v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain_n();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v10 = sub_24A148970(v6, v5);
    v11 = v2[2];
    v12 = (v9 & 1) == 0;
    v13 = v11 + v12;
    if (__OFADD__(v11, v12))
      break;
    v14 = v9;
    if (v2[3] >= v13)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v9 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        sub_24A1E38B0();
        if ((v14 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      sub_24A1E35AC(v13, isUniquelyReferenced_nonNull_native);
      v15 = sub_24A148970(v6, v5);
      if ((v14 & 1) != (v16 & 1))
        goto LABEL_19;
      v10 = v15;
      if ((v14 & 1) != 0)
      {
LABEL_3:
        *(_DWORD *)(v2[7] + 4 * v10) = v7;
        goto LABEL_4;
      }
    }
    v2[(v10 >> 6) + 8] |= 1 << v10;
    v17 = (uint64_t *)(v2[6] + 16 * v10);
    *v17 = v6;
    v17[1] = v5;
    *(_DWORD *)(v2[7] + 4 * v10) = v7;
    v18 = v2[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_18;
    v2[2] = v20;
    swift_bridgeObjectRetain();
LABEL_4:
    v4 += 16;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    if (!--v3)
      goto LABEL_16;
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  result = sub_24A2165CC();
  __break(1u);
  return result;
}

double sub_24A1E0CB4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  char v11;
  char v12;
  double result;

  v3 = *(_QWORD *)((*(uint64_t (**)(void))(*(_QWORD *)v1 + 88))() + 16);
  v4 = swift_bridgeObjectRelease();
  if (v3)
  {
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 120))(v4);
    v6 = v5;
    if (v5[2])
    {
      v8 = v5[4];
      v7 = v5[5];
      v9 = *((_DWORD *)v6 + 12);
      v10 = *((_BYTE *)v6 + 88);
      v11 = *((_BYTE *)v6 + 89);
      v12 = *((_BYTE *)v6 + 90);
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v7;
      *(_DWORD *)(a1 + 16) = v9;
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(v6 + 7);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(v6 + 9);
      *(_BYTE *)(a1 + 56) = v10;
      *(_BYTE *)(a1 + 57) = v11;
      *(_BYTE *)(a1 + 58) = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return result;
    }
    swift_bridgeObjectRelease();
  }
  result = 0.0;
  *(_OWORD *)(a1 + 43) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_24A1E0D70(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t result;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  char v61;
  _QWORD *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  int v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;
  char v80;
  char v81;
  uint64_t v82;
  unint64_t v83;

  v54 = *(_QWORD *)a1;
  v2 = *(_DWORD *)(a1 + 8);
  v52 = *(_BYTE *)(a1 + 13);
  v53 = *(_BYTE *)(a1 + 12);
  v50 = *(_QWORD *)(a1 + 24);
  v51 = *(_QWORD *)(a1 + 16);
  v49 = *(_BYTE *)(a1 + 32);
  v48 = *(_QWORD *)(a1 + 40);
  v46 = *(_BYTE *)(a1 + 49);
  v47 = *(_BYTE *)(a1 + 48);
  v3 = *(_DWORD *)(a1 + 52);
  v45 = *(_BYTE *)(a1 + 56);
  v43 = *(_QWORD *)(a1 + 72);
  v44 = *(_QWORD *)(a1 + 64);
  v41 = *(_BYTE *)(a1 + 81);
  v42 = *(_BYTE *)(a1 + 80);
  v39 = *(_BYTE *)(a1 + 83);
  v40 = *(_BYTE *)(a1 + 82);
  v37 = *(_BYTE *)(a1 + 85);
  v38 = *(_BYTE *)(a1 + 84);
  v36 = *(_BYTE *)(a1 + 86);
  v56 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 88))();
  v4 = *(_QWORD *)(v56 + 16);
  if (v4)
  {
    v35 = v1;
    v5 = 0;
    v62 = (_QWORD *)MEMORY[0x24BEE4AF8];
    sub_24A14C688();
    while (1)
    {
      v7 = *(_QWORD *)(v56 + v5 + 32);
      v8 = *(_QWORD *)(v56 + v5 + 40);
      v9 = *(_DWORD *)(v56 + v5 + 48);
      v11 = *(_QWORD *)(v56 + v5 + 56);
      v10 = *(_QWORD *)(v56 + v5 + 64);
      v57 = *(_QWORD *)(v56 + v5 + 72);
      v58 = *(_QWORD *)(v56 + v5 + 80);
      v59 = *(_BYTE *)(v56 + v5 + 88);
      v60 = *(_BYTE *)(v56 + v5 + 89);
      v61 = *(_BYTE *)(v56 + v5 + 90);
      v63 = v7;
      v64 = v8;
      v82 = 44;
      v83 = 0xE100000000000000;
      swift_bridgeObjectRetain();
      if ((sub_24A2162C0() & 1) != 0)
      {
        v63 = v7;
        v64 = v8;
        v82 = 44;
        v83 = 0xE100000000000000;
        v12 = (_QWORD *)sub_24A216284();
        v63 = v54;
        LODWORD(v64) = v2;
        BYTE4(v64) = v53;
        BYTE5(v64) = v52;
        v65 = v51;
        v66 = v50;
        LOBYTE(v67) = v49;
        v68 = v48;
        v69 = v47;
        v70 = v46;
        v71 = v3;
        v72 = v45;
        v73 = v44;
        v74 = v43;
        v75 = v42;
        v76 = v41;
        v77 = v40;
        v78 = v39;
        v79 = v38;
        v80 = v37;
        v81 = v36;
        v13 = VARuntimeParameters.keywordsToThresholds.getter();
        v14 = *(_QWORD *)(v13 + 16);
        if (v14)
        {
          sub_24A135F88(&qword_25790A460);
          v15 = (_QWORD *)swift_allocObject();
          v16 = j__malloc_size(v15);
          v17 = v16 - 32;
          if (v16 < 32)
            v17 = v16 - 17;
          v15[2] = v14;
          v15[3] = 2 * (v17 >> 4);
          v55 = sub_24A1E3B70((uint64_t)&v63, v15 + 4, v14, v13);
          swift_bridgeObjectRetain();
          result = sub_24A18B030();
          if (v55 != v14)
          {
            __break(1u);
            return result;
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
        }
        v23 = swift_retain();
        v24 = (_QWORD *)sub_24A1E3E18(v23, v12);
        swift_release();
        swift_bridgeObjectRelease();
        if (v24[2] != 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v63 = 0;
          v64 = 0xE000000000000000;
          sub_24A216308();
          swift_bridgeObjectRelease();
          v63 = 0xD00000000000001FLL;
          v64 = 0x800000024A227120;
          v31 = MEMORY[0x24BEE0D00];
          MEMORY[0x24BD09774](v24, MEMORY[0x24BEE0D00]);
          sub_24A215D98();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_24A215D98();
          sub_24A215D98();
          swift_bridgeObjectRelease();
          sub_24A215D98();
          MEMORY[0x24BD09774](v15, v31);
          sub_24A215D98();
          swift_release();
          swift_bridgeObjectRelease();
          v32 = v63;
          v33 = v64;
          sub_24A14C404();
          swift_allocError();
          *v34 = v32;
          v34[1] = v33;
          return swift_willThrow();
        }
        v26 = v24[4];
        v25 = v24[5];
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        v27 = v62;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v27 = sub_24A17B434(0, v62[2] + 1, 1, v62);
        v29 = v27[2];
        v28 = v27[3];
        v62 = v27;
        if (v29 >= v28 >> 1)
          v62 = sub_24A17B434((_QWORD *)(v28 > 1), v29 + 1, 1, v27);
        v62[2] = v29 + 1;
        v6 = &v62[8 * v29];
        v6[4] = v26;
        v6[5] = v25;
        *((_DWORD *)v6 + 12) = v9;
        v6[7] = v11;
        v6[8] = v10;
        v6[9] = v57;
        v6[10] = v58;
        *((_BYTE *)v6 + 88) = v59;
        *((_BYTE *)v6 + 89) = v60;
        *((_BYTE *)v6 + 90) = v61;
        swift_bridgeObjectRelease();
      }
      else
      {
        v19 = v62;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v19 = sub_24A17B434(0, v62[2] + 1, 1, v62);
        v21 = v19[2];
        v20 = v19[3];
        v62 = v19;
        if (v21 >= v20 >> 1)
          v62 = sub_24A17B434((_QWORD *)(v20 > 1), v21 + 1, 1, v19);
        v62[2] = v21 + 1;
        v22 = &v62[8 * v21];
        v22[4] = v7;
        v22[5] = v8;
        *((_DWORD *)v22 + 12) = v9;
        v22[7] = v11;
        v22[8] = v10;
        v22[9] = v57;
        v22[10] = v58;
        *((_BYTE *)v22 + 88) = v59;
        *((_BYTE *)v22 + 89) = v60;
        *((_BYTE *)v22 + 90) = v61;
      }
      v5 += 64;
      if (!--v4)
      {
        swift_bridgeObjectRelease();
        v1 = v35;
        v30 = v62;
        return (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v1 + 96))(v30);
      }
    }
  }
  swift_bridgeObjectRelease();
  v30 = (_QWORD *)MEMORY[0x24BEE4AF8];
  return (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v1 + 96))(v30);
}

uint64_t sub_24A1E13B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v1 + 90;
    v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      v5 = VAKeywordDetection.description.getter();
      v7 = v6;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v4 = sub_24A14804C(0, v4[2] + 1, 1, v4);
      v9 = v4[2];
      v8 = v4[3];
      if (v9 >= v8 >> 1)
        v4 = sub_24A14804C((_QWORD *)(v8 > 1), v9 + 1, 1, v4);
      v3 += 64;
      v4[2] = v9 + 1;
      v10 = &v4[2 * v9];
      v10[4] = v5;
      v10[5] = v7;
      --v2;
    }
    while (v2);
  }
  swift_bridgeObjectRelease();
  sub_24A135F88(&qword_257909948);
  sub_24A14C9E8();
  v11 = sub_24A215C60();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_24A1E152C()
{
  sub_24A216638();
  sub_24A216644();
  return sub_24A21665C();
}

uint64_t sub_24A1E156C()
{
  return sub_24A216644();
}

uint64_t sub_24A1E1590()
{
  sub_24A216638();
  sub_24A216644();
  return sub_24A21665C();
}

uint64_t sub_24A1E15CC()
{
  return 0x6F69746365746564;
}

uint64_t sub_24A1E15E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6F69746365746564 && a2 == 0xEA0000000000736ELL)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_24A21659C();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_24A1E1688()
{
  sub_24A1E3FDC();
  return sub_24A2166A4();
}

uint64_t sub_24A1E16B0()
{
  sub_24A1E3FDC();
  return sub_24A2166B0();
}

uint64_t VAKeywordResult.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VAKeywordResult.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_24A1E1718(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[2];

  v2 = v1;
  v4 = sub_24A135F88(&qword_257911D80);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A14B668(a1, a1[3]);
  sub_24A1E3FDC();
  v8 = sub_24A21668C();
  v10[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 88))(v8);
  sub_24A135F88(&qword_257911D88);
  sub_24A1E4020();
  sub_24A216560();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_24A1E1838()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 160))();
}

uint64_t sub_24A1E1860@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_uuid;
  swift_beginAccess();
  return sub_24A1E40C8(v3, a1);
}

uint64_t sub_24A1E18B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_uuid;
  swift_beginAccess();
  sub_24A1E4110(a1, v3);
  return swift_endAccess();
}

uint64_t (*sub_24A1E1908())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A1E194C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_hostTime;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1E1990(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_hostTime);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_24A1E19D8())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A1E1A1C()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)(v0 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_chunk);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_24A1E1A60(int a1)
{
  uint64_t v1;
  _DWORD *v3;
  uint64_t result;

  v3 = (_DWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_chunk);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_24A1E1AA8())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A1E1AEC()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A1E1B34(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_audioBytes);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A1E1B84())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A1E1BC8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_count;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1E1C0C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_count);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_24A1E1C54())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

double sub_24A1E1C98()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_intervalFromEndOfSpeech;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t sub_24A1E1CDC(double a1)
{
  uint64_t v1;
  double *v3;
  uint64_t result;

  v3 = (double *)(v1 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_intervalFromEndOfSpeech);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_24A1E1D2C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A1E1D70()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_startFrame;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1E1DB4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_startFrame);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_24A1E1DFC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A1E1E40()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_endFrame;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1E1E84(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_endFrame);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_24A1E1ECC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A1E1F10(char *a1, char *a2)
{
  return sub_24A1DF954(*a1, *a2);
}

uint64_t sub_24A1E1F1C()
{
  sub_24A216638();
  sub_24A215D50();
  swift_bridgeObjectRelease();
  return sub_24A21665C();
}

uint64_t sub_24A1E1FA8()
{
  sub_24A215D50();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A1E2010()
{
  sub_24A216638();
  sub_24A215D50();
  swift_bridgeObjectRelease();
  return sub_24A21665C();
}

uint64_t sub_24A1E2098@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_24A216464();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_24A1E20F4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x4164726F7779656BLL;
  if (*v1)
    v2 = 0x6F69746365746564;
  v3 = 0xEC0000006F696475;
  if (*v1)
    v3 = 0xEA0000000000736ELL;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_24A1E2140()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F69746365746564;
  else
    return 0x4164726F7779656BLL;
}

uint64_t sub_24A1E2188@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_24A216464();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_24A1E21E8()
{
  sub_24A1E4158();
  return sub_24A2166A4();
}

uint64_t sub_24A1E2210()
{
  sub_24A1E4158();
  return sub_24A2166B0();
}

uint64_t sub_24A1E2238(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE v10[8];
  uint64_t v11;

  v2 = v1;
  v4 = sub_24A135F88(&qword_257911DA0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_24A14B668(a1, a1[3]);
  sub_24A1E4158();
  v8 = sub_24A21668C();
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 88))(v8);
  v10[7] = 1;
  sub_24A135F88(&qword_257911D88);
  sub_24A1E4020();
  sub_24A216560();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_24A1E2364()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[2];
  int v67;
  __int128 v68;
  __int128 v69;
  char v70;
  char v71;
  char v72;

  v1 = v0;
  v2 = sub_24A135F88(&qword_25790AFA8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_24A2157A4();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v62 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(double (**)(uint64_t))(*(_QWORD *)v0 + 360);
  if (v9(v7) <= 0.0)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    v66[0] = 0;
    v66[1] = 0xE000000000000000;
    sub_24A216308();
    v10 = sub_24A215D98();
    v9(v10);
    sub_24A216020();
    sub_24A215D98();
    v11 = v66[0];
    v12 = v66[1];
    v13 = sub_24A14804C(0, 1, 1, MEMORY[0x24BEE4AF8]);
    v15 = v13[2];
    v14 = v13[3];
    if (v15 >= v14 >> 1)
      v13 = sub_24A14804C((_QWORD *)(v14 > 1), v15 + 1, 1, v13);
    v13[2] = v15 + 1;
    v16 = &v13[2 * v15];
    v16[4] = v11;
    v16[5] = v12;
  }
  v63 = v6;
  v64 = v5;
  v17 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
  v18 = *(_QWORD *)(v17 + 16);
  if (v18)
  {
    v19 = (char *)(v17 + 90);
    do
    {
      v20 = *(_QWORD *)(v19 - 50);
      v21 = *(_DWORD *)(v19 - 42);
      v22 = *(v19 - 2);
      v23 = *(v19 - 1);
      v24 = *v19;
      v66[0] = *(_QWORD *)(v19 - 58);
      v66[1] = v20;
      v67 = v21;
      v68 = *(_OWORD *)(v19 - 34);
      v69 = *(_OWORD *)(v19 - 18);
      v70 = v22;
      v71 = v23;
      v72 = v24;
      v25 = VAKeywordDetection.description.getter();
      v27 = v26;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v13 = sub_24A14804C(0, v13[2] + 1, 1, v13);
      v29 = v13[2];
      v28 = v13[3];
      if (v29 >= v28 >> 1)
        v13 = sub_24A14804C((_QWORD *)(v28 > 1), v29 + 1, 1, v13);
      v19 += 64;
      v13[2] = v29 + 1;
      v30 = &v13[2 * v29];
      v30[4] = v25;
      v30[5] = v27;
      --v18;
    }
    while (v18);
  }
  v31 = swift_bridgeObjectRelease();
  strcpy((char *)v66, "hostTime: ");
  BYTE3(v66[1]) = 0;
  HIDWORD(v66[1]) = -369098752;
  v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 264))(v31);
  sub_24A216584();
  sub_24A215D98();
  swift_bridgeObjectRelease();
  v32 = v66[0];
  v33 = v66[1];
  v34 = sub_24A14804C(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v36 = v34[2];
  v35 = v34[3];
  if (v36 >= v35 >> 1)
    v34 = sub_24A14804C((_QWORD *)(v35 > 1), v36 + 1, 1, v34);
  v37 = v63;
  v34[2] = v36 + 1;
  v38 = &v34[2 * v36];
  v38[4] = v32;
  v38[5] = v33;
  (*(void (**)(void))(*(_QWORD *)v1 + 240))();
  v39 = v64;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v4, 1, v64) == 1)
  {
    sub_24A1E419C((uint64_t)v4);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v62, v4, v39);
    sub_24A1E41DC();
    sub_24A216584();
    v66[0] = 3826793;
    v66[1] = 0xE300000000000000;
    sub_24A215D98();
    swift_bridgeObjectRelease();
    v40 = v66[0];
    v41 = v66[1];
    v43 = v34[2];
    v42 = v34[3];
    if (v43 >= v42 >> 1)
      v34 = sub_24A14804C((_QWORD *)(v42 > 1), v43 + 1, 1, v34);
    v34[2] = v43 + 1;
    v44 = &v34[2 * v43];
    v44[4] = v40;
    v44[5] = v41;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v62, v39);
  }
  v66[0] = v13;
  sub_24A135F88(&qword_257909948);
  sub_24A14C9E8();
  sub_24A215C60();
  swift_bridgeObjectRelease();
  v66[0] = 91;
  v66[1] = 0xE100000000000000;
  sub_24A215D98();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_24A215D98();
  swift_bridgeObjectRelease();
  v45 = v66[0];
  v46 = v66[1];
  v48 = v34[2];
  v47 = v34[3];
  if (v48 >= v47 >> 1)
    v34 = sub_24A14804C((_QWORD *)(v47 > 1), v48 + 1, 1, v34);
  v34[2] = v48 + 1;
  v49 = &v34[2 * v48];
  v49[4] = v45;
  v49[5] = v46;
  strcpy((char *)v66, "startFrame: ");
  BYTE5(v66[1]) = 0;
  HIWORD(v66[1]) = -5120;
  v65 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 384))();
  sub_24A216584();
  sub_24A215D98();
  swift_bridgeObjectRelease();
  v50 = v66[0];
  v51 = v66[1];
  v53 = v34[2];
  v52 = v34[3];
  if (v53 >= v52 >> 1)
    v34 = sub_24A14804C((_QWORD *)(v52 > 1), v53 + 1, 1, v34);
  v34[2] = v53 + 1;
  v54 = &v34[2 * v53];
  v54[4] = v50;
  v54[5] = v51;
  strcpy((char *)v66, "endFrame: ");
  BYTE3(v66[1]) = 0;
  HIDWORD(v66[1]) = -369098752;
  v65 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 408))();
  sub_24A216584();
  sub_24A215D98();
  swift_bridgeObjectRelease();
  v55 = v66[0];
  v56 = v66[1];
  v58 = v34[2];
  v57 = v34[3];
  if (v58 >= v57 >> 1)
    v34 = sub_24A14804C((_QWORD *)(v57 > 1), v58 + 1, 1, v34);
  v34[2] = v58 + 1;
  v59 = &v34[2 * v58];
  v59[4] = v55;
  v59[5] = v56;
  v66[0] = v34;
  v60 = sub_24A215C60();
  swift_bridgeObjectRelease();
  return v60;
}

uint64_t VAInstrumentedKeywordResult.__allocating_init(detections:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = swift_allocObject();
  v3 = v2 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_uuid;
  v4 = sub_24A2157A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_hostTime) = 0;
  *(_DWORD *)(v2 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_chunk) = 0;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_audioBytes) = 0;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_count) = 0;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_intervalFromEndOfSpeech) = 0;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_startFrame) = 0;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_endFrame) = 0;
  *(_QWORD *)(v2 + 16) = a1;
  return v2;
}

uint64_t VAInstrumentedKeywordResult.init(detections:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_uuid;
  v4 = sub_24A2157A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_hostTime) = 0;
  *(_DWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_chunk) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_audioBytes) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_count) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_intervalFromEndOfSpeech) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_startFrame) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_endFrame) = 0;
  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t sub_24A1E2B2C()
{
  uint64_t v0;

  sub_24A1E419C(v0 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_uuid);
  return swift_bridgeObjectRelease();
}

uint64_t VAInstrumentedKeywordResult.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_24A1E419C(v0 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_uuid);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VAInstrumentedKeywordResult.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_24A1E419C(v0 + OBJC_IVAR____TtC12VoiceActions27VAInstrumentedKeywordResult_uuid);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_24A1E2BDC(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_24A1E3B5C((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  result = sub_24A1E2C44(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_24A1E2C44(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  float *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 *v25;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  __int128 v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  char v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  char v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t i;
  uint64_t v103;
  uint64_t v104;
  float v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  char v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  unint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  float *v129;
  uint64_t v130;

  v3 = a1[1];
  result = sub_24A216578();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_142;
    if ((unint64_t)v3 >= 2)
    {
      v99 = *a1;
      v100 = *a1 + 64;
      v101 = -1;
      for (i = 1; i != v3; ++i)
      {
        v103 = v100;
        v104 = v101;
        do
        {
          v105 = *(float *)(v103 + 16);
          if (*(float *)(v103 - 48) >= v105)
            break;
          if (!v99)
            goto LABEL_146;
          v106 = *(_QWORD *)v103;
          v107 = *(_QWORD *)(v103 + 8);
          v108 = *(_BYTE *)(v103 + 56);
          v109 = *(_BYTE *)(v103 + 57);
          result = *(unsigned __int8 *)(v103 + 58);
          v110 = *(_OWORD *)(v103 + 24);
          v111 = *(_OWORD *)(v103 + 40);
          v112 = *(_OWORD *)(v103 - 48);
          *(_OWORD *)v103 = *(_OWORD *)(v103 - 64);
          *(_OWORD *)(v103 + 16) = v112;
          v113 = *(_OWORD *)(v103 - 16);
          *(_OWORD *)(v103 + 32) = *(_OWORD *)(v103 - 32);
          *(_OWORD *)(v103 + 48) = v113;
          *(_QWORD *)(v103 - 56) = v107;
          *(float *)(v103 - 48) = v105;
          *(_OWORD *)(v103 - 40) = v110;
          *(_OWORD *)(v103 - 24) = v111;
          *(_BYTE *)(v103 - 8) = v108;
          *(_BYTE *)(v103 - 7) = v109;
          *(_BYTE *)(v103 - 6) = result;
          *(_QWORD *)(v103 - 64) = v106;
          v103 -= 64;
        }
        while (!__CFADD__(v104++, 1));
        --v101;
        v100 += 64;
      }
    }
  }
  else
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 < -1)
      goto LABEL_141;
    v6 = result;
    v130 = v1;
    v122 = a1;
    if (v3 > 1)
    {
      v7 = v5 >> 1;
      result = sub_24A215EF4();
      *(_QWORD *)(result + 16) = v7;
      v125 = result;
      v129 = (float *)(result + 32);
LABEL_13:
      v9 = 0;
      v10 = *a1;
      v123 = *a1 + 144;
      v124 = *a1 + 16;
      v11 = MEMORY[0x24BEE4AF8];
      v126 = v6;
      v127 = v3;
      v128 = v10;
      while (1)
      {
        v13 = v9++;
        if (v9 < v3)
        {
          v14 = *(float *)(v124 + (v9 << 6));
          v15 = v13 << 6;
          v16 = *(float *)(v124 + (v13 << 6));
          v9 = v13 + 2;
          if (v13 + 2 < v3)
          {
            v17 = (float *)(v123 + (v13 << 6));
            while (v16 < v14 != *(v17 - 16) >= *v17)
            {
              ++v9;
              v17 += 16;
              if (v3 == v9)
              {
                v9 = v3;
                break;
              }
            }
          }
          if (v16 < v14)
          {
            if (v9 < v13)
              goto LABEL_143;
            if (v13 < v9)
            {
              v18 = (v9 << 6) - 64;
              v19 = v9;
              v20 = v13;
              do
              {
                if (v20 != --v19)
                {
                  if (!v10)
                    goto LABEL_149;
                  v25 = (__int128 *)(v10 + v15);
                  v26 = (__int128 *)(v10 + v18);
                  v27 = *(_QWORD *)(v10 + v15);
                  v28 = *(_QWORD *)(v10 + v15 + 8);
                  v29 = *(_DWORD *)(v10 + v15 + 16);
                  v30 = *(_OWORD *)(v10 + v15 + 24);
                  v31 = *(_OWORD *)(v10 + v15 + 40);
                  v32 = *(_BYTE *)(v10 + v15 + 56);
                  v33 = *(_BYTE *)(v10 + v15 + 57);
                  v34 = *(_BYTE *)(v10 + v15 + 58);
                  if (v15 != v18 || (result = (uint64_t)(v26 + 4), v25 >= v26 + 4))
                  {
                    v21 = *v26;
                    v22 = v26[1];
                    v23 = v26[3];
                    v25[2] = v26[2];
                    v25[3] = v23;
                    *v25 = v21;
                    v25[1] = v22;
                  }
                  v24 = v10 + v18;
                  *(_QWORD *)v24 = v27;
                  *(_QWORD *)(v24 + 8) = v28;
                  *(_DWORD *)(v24 + 16) = v29;
                  *(_OWORD *)(v24 + 24) = v30;
                  *(_OWORD *)(v24 + 40) = v31;
                  *(_BYTE *)(v24 + 56) = v32;
                  *(_BYTE *)(v24 + 57) = v33;
                  *(_BYTE *)(v24 + 58) = v34;
                }
                ++v20;
                v18 -= 64;
                v15 += 64;
              }
              while (v20 < v19);
            }
          }
        }
        if (v9 < v3)
        {
          if (__OFSUB__(v9, v13))
            goto LABEL_140;
          if (v9 - v13 < v6)
          {
            v35 = v13 + v6;
            if (__OFADD__(v13, v6))
              goto LABEL_144;
            if (v35 >= v3)
              v35 = v3;
            if (v35 < v13)
            {
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
              return result;
            }
            if (v9 != v35)
            {
              v36 = (uint64_t *)(v10 + (v9 << 6));
              do
              {
                v37 = v36;
                v38 = v13;
                do
                {
                  v39 = *((float *)v37 + 4);
                  if (*((float *)v37 - 12) >= v39)
                    break;
                  if (!v10)
                    goto LABEL_147;
                  v40 = *v37;
                  v41 = v37[1];
                  v42 = *((_BYTE *)v37 + 56);
                  v43 = *((_BYTE *)v37 + 57);
                  v44 = *((_BYTE *)v37 + 58);
                  v45 = *(_OWORD *)(v37 + 3);
                  v46 = *(_OWORD *)(v37 + 5);
                  v47 = *((_OWORD *)v37 - 3);
                  *(_OWORD *)v37 = *((_OWORD *)v37 - 4);
                  *((_OWORD *)v37 + 1) = v47;
                  v48 = *((_OWORD *)v37 - 1);
                  *((_OWORD *)v37 + 2) = *((_OWORD *)v37 - 2);
                  *((_OWORD *)v37 + 3) = v48;
                  *(v37 - 7) = v41;
                  *((float *)v37 - 12) = v39;
                  *(_OWORD *)(v37 - 5) = v45;
                  *(_OWORD *)(v37 - 3) = v46;
                  *((_BYTE *)v37 - 8) = v42;
                  *((_BYTE *)v37 - 7) = v43;
                  *((_BYTE *)v37 - 6) = v44;
                  ++v38;
                  *(v37 - 8) = v40;
                  v37 -= 8;
                }
                while (v9 != v38);
                ++v9;
                v36 += 8;
              }
              while (v9 != v35);
              v9 = v35;
            }
          }
        }
        if (v9 < v13)
          goto LABEL_135;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_24A17612C(0, *(_QWORD *)(v11 + 16) + 1, 1, (char *)v11);
          v11 = result;
        }
        v50 = *(_QWORD *)(v11 + 16);
        v49 = *(_QWORD *)(v11 + 24);
        v12 = v50 + 1;
        v10 = v128;
        if (v50 >= v49 >> 1)
        {
          result = (uint64_t)sub_24A17612C((char *)(v49 > 1), v50 + 1, 1, (char *)v11);
          v10 = v128;
          v11 = result;
        }
        *(_QWORD *)(v11 + 16) = v12;
        v51 = v11 + 32;
        v52 = (uint64_t *)(v11 + 32 + 16 * v50);
        *v52 = v13;
        v52[1] = v9;
        if (v50)
        {
          while (1)
          {
            v53 = v12 - 1;
            if (v12 >= 4)
            {
              v58 = v51 + 16 * v12;
              v59 = *(_QWORD *)(v58 - 64);
              v60 = *(_QWORD *)(v58 - 56);
              v64 = __OFSUB__(v60, v59);
              v61 = v60 - v59;
              if (v64)
                goto LABEL_124;
              v63 = *(_QWORD *)(v58 - 48);
              v62 = *(_QWORD *)(v58 - 40);
              v64 = __OFSUB__(v62, v63);
              v56 = v62 - v63;
              v57 = v64;
              if (v64)
                goto LABEL_125;
              v65 = v12 - 2;
              v66 = (uint64_t *)(v51 + 16 * (v12 - 2));
              v68 = *v66;
              v67 = v66[1];
              v64 = __OFSUB__(v67, v68);
              v69 = v67 - v68;
              if (v64)
                goto LABEL_126;
              v64 = __OFADD__(v56, v69);
              v70 = v56 + v69;
              if (v64)
                goto LABEL_128;
              if (v70 >= v61)
              {
                v88 = (uint64_t *)(v51 + 16 * v53);
                v90 = *v88;
                v89 = v88[1];
                v64 = __OFSUB__(v89, v90);
                v91 = v89 - v90;
                if (v64)
                  goto LABEL_134;
                v81 = v56 < v91;
                goto LABEL_87;
              }
            }
            else
            {
              if (v12 != 3)
              {
                v82 = *(_QWORD *)(v11 + 32);
                v83 = *(_QWORD *)(v11 + 40);
                v64 = __OFSUB__(v83, v82);
                v75 = v83 - v82;
                v76 = v64;
                goto LABEL_81;
              }
              v55 = *(_QWORD *)(v11 + 32);
              v54 = *(_QWORD *)(v11 + 40);
              v64 = __OFSUB__(v54, v55);
              v56 = v54 - v55;
              v57 = v64;
            }
            if ((v57 & 1) != 0)
              goto LABEL_127;
            v65 = v12 - 2;
            v71 = (uint64_t *)(v51 + 16 * (v12 - 2));
            v73 = *v71;
            v72 = v71[1];
            v74 = __OFSUB__(v72, v73);
            v75 = v72 - v73;
            v76 = v74;
            if (v74)
              goto LABEL_129;
            v77 = (uint64_t *)(v51 + 16 * v53);
            v79 = *v77;
            v78 = v77[1];
            v64 = __OFSUB__(v78, v79);
            v80 = v78 - v79;
            if (v64)
              goto LABEL_131;
            if (__OFADD__(v75, v80))
              goto LABEL_133;
            if (v75 + v80 >= v56)
            {
              v81 = v56 < v80;
LABEL_87:
              if (v81)
                v53 = v65;
              goto LABEL_89;
            }
LABEL_81:
            if ((v76 & 1) != 0)
              goto LABEL_130;
            v84 = (uint64_t *)(v51 + 16 * v53);
            v86 = *v84;
            v85 = v84[1];
            v64 = __OFSUB__(v85, v86);
            v87 = v85 - v86;
            if (v64)
              goto LABEL_132;
            if (v87 < v75)
              goto LABEL_15;
LABEL_89:
            v92 = v53 - 1;
            if (v53 - 1 >= v12)
            {
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
              goto LABEL_145;
            }
            if (!v10)
              goto LABEL_148;
            v93 = v11;
            v94 = (uint64_t *)(v51 + 16 * v92);
            v95 = *v94;
            v96 = (_QWORD *)(v51 + 16 * v53);
            v97 = v96[1];
            result = sub_24A1E3380((float *)(v10 + (*v94 << 6)), (float *)(v10 + (*v96 << 6)), v10 + (v97 << 6), v129);
            if (v130)
              goto LABEL_97;
            if (v97 < v95)
              goto LABEL_121;
            if (v53 > *(_QWORD *)(v93 + 16))
              goto LABEL_122;
            *v94 = v95;
            *(_QWORD *)(v51 + 16 * v92 + 8) = v97;
            v98 = *(_QWORD *)(v93 + 16);
            if (v53 >= v98)
              goto LABEL_123;
            v11 = v93;
            v12 = v98 - 1;
            result = (uint64_t)memmove((void *)(v51 + 16 * v53), v96 + 2, 16 * (v98 - 1 - v53));
            *(_QWORD *)(v93 + 16) = v98 - 1;
            v10 = v128;
            if (v98 <= 2)
              goto LABEL_15;
          }
        }
        v12 = 1;
LABEL_15:
        v6 = v126;
        v3 = v127;
        if (v9 >= v127)
        {
          v8 = v125;
          goto LABEL_107;
        }
      }
    }
    v8 = MEMORY[0x24BEE4AF8];
    v129 = (float *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 == 1)
    {
      v125 = MEMORY[0x24BEE4AF8];
      goto LABEL_13;
    }
    v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    v11 = MEMORY[0x24BEE4AF8];
LABEL_107:
    result = v11;
    v125 = v8;
    if (v12 >= 2)
    {
      v115 = *v122;
      do
      {
        v116 = v12 - 2;
        if (v12 < 2)
          goto LABEL_136;
        if (!v115)
          goto LABEL_150;
        v117 = result;
        v118 = *(_QWORD *)(result + 32 + 16 * v116);
        v119 = *(_QWORD *)(result + 32 + 16 * (v12 - 1) + 8);
        result = sub_24A1E3380((float *)(v115 + (v118 << 6)), (float *)(v115 + (*(_QWORD *)(result + 32 + 16 * (v12 - 1)) << 6)), v115 + (v119 << 6), v129);
        if (v130)
          break;
        if (v119 < v118)
          goto LABEL_137;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_24A176224(v117);
          v117 = result;
        }
        if (v116 >= *(_QWORD *)(v117 + 16))
          goto LABEL_138;
        v120 = (_QWORD *)(v117 + 32 + 16 * v116);
        *v120 = v118;
        v120[1] = v119;
        v121 = *(_QWORD *)(v117 + 16);
        if (v12 > v121)
          goto LABEL_139;
        memmove((void *)(v117 + 32 + 16 * (v12 - 1)), (const void *)(v117 + 32 + 16 * v12), 16 * (v121 - v12));
        result = v117;
        *(_QWORD *)(v117 + 16) = v121 - 1;
        v12 = v121 - 1;
      }
      while (v121 > 2);
    }
LABEL_97:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v125 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_24A1E3380(float *__dst, float *__src, unint64_t a3, float *a4)
{
  float *v4;
  float *v6;
  float *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  float *v23;
  float *v24;
  float *v25;
  BOOL v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  size_t v30;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = (char *)__src - (char *)__dst;
  v9 = (char *)__src - (char *)__dst + 63;
  if ((char *)__src - (char *)__dst >= 0)
    v9 = (char *)__src - (char *)__dst;
  v10 = v9 >> 6;
  v11 = a3 - (_QWORD)__src;
  v12 = a3 - (_QWORD)__src + 63;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v12 = a3 - (_QWORD)__src;
  v13 = v12 >> 6;
  if (v10 >= v13)
  {
    v22 = v13 << 6;
    if (a4 != __src || (float *)((char *)__src + v22) <= a4)
      memmove(a4, __src, v13 << 6);
    v15 = (float *)((char *)v4 + v22);
    if (v7 >= v6 || v11 < 64)
      goto LABEL_43;
    v23 = (float *)(a3 - 64);
    while (1)
    {
      v24 = v23 + 16;
      if (*(v6 - 12) >= *(v15 - 12))
      {
        v25 = v15 - 16;
        if (v24 != v15)
        {
          v15 -= 16;
          goto LABEL_40;
        }
        v26 = v23 >= v15;
        v15 -= 16;
        if (v26)
          goto LABEL_40;
      }
      else
      {
        v25 = v6 - 16;
        if (v24 != v6)
        {
          v6 -= 16;
LABEL_40:
          v27 = *(_OWORD *)v25;
          v28 = *((_OWORD *)v25 + 1);
          v29 = *((_OWORD *)v25 + 3);
          *((_OWORD *)v23 + 2) = *((_OWORD *)v25 + 2);
          *((_OWORD *)v23 + 3) = v29;
          *(_OWORD *)v23 = v27;
          *((_OWORD *)v23 + 1) = v28;
          goto LABEL_41;
        }
        v26 = v23 >= v6;
        v6 -= 16;
        if (v26)
          goto LABEL_40;
      }
LABEL_41:
      if (v6 > v7)
      {
        v23 -= 16;
        if (v15 > v4)
          continue;
      }
      goto LABEL_43;
    }
  }
  v14 = v10 << 6;
  if (a4 != __dst || (float *)((char *)__dst + v14) <= a4)
    memmove(a4, __dst, v14);
  v15 = (float *)((char *)v4 + v14);
  if ((unint64_t)v6 < a3 && v8 >= 64)
  {
    while (1)
    {
      if (v4[4] >= v6[4])
      {
        v18 = v4 + 16;
        v17 = v4;
        v16 = v6;
        if (v7 == v4)
        {
          v4 += 16;
          if (v7 < v18)
            goto LABEL_20;
        }
        else
        {
          v4 += 16;
        }
      }
      else
      {
        v16 = v6 + 16;
        v17 = v6;
        if (v7 == v6 && v7 < v16)
          goto LABEL_20;
      }
      v19 = *(_OWORD *)v17;
      v20 = *((_OWORD *)v17 + 1);
      v21 = *((_OWORD *)v17 + 3);
      *((_OWORD *)v7 + 2) = *((_OWORD *)v17 + 2);
      *((_OWORD *)v7 + 3) = v21;
      *(_OWORD *)v7 = v19;
      *((_OWORD *)v7 + 1) = v20;
LABEL_20:
      v7 += 16;
      if (v4 < v15)
      {
        v6 = v16;
        if ((unint64_t)v16 < a3)
          continue;
      }
      break;
    }
  }
  v6 = v7;
LABEL_43:
  v30 = ((char *)v15 - (char *)v4 + ((char *)v15 - (char *)v4 < 0 ? 0x3FuLL : 0)) & 0xFFFFFFFFFFFFFFC0;
  if (v6 != v4 || v6 >= (float *)((char *)v4 + v30))
    memmove(v6, v4, v30);
  return 1;
}

uint64_t sub_24A1E35AC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  sub_24A135F88(&qword_2579120C8);
  v37 = a2;
  v6 = sub_24A216434();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v2;
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_DWORD *)(*(_QWORD *)(v5 + 56) + 4 * v21);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_24A216638();
    sub_24A215D50();
    result = sub_24A21665C();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_DWORD *)(*(_QWORD *)(v7 + 56) + 4 * v18) = v33;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

void *sub_24A1E38B0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_24A135F88(&qword_2579120C8);
  v2 = *v0;
  v3 = sub_24A216428();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 4 * v15;
    v20 = *(_DWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_DWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

char *sub_24A1E3A5C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_24A135F88(&qword_25790A810);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 31;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[64 * v8])
      memmove(v13, v14, v8 << 6);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_24A1E3B5C(uint64_t a1)
{
  return sub_24A1E3A5C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_24A1E3B70(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_24A1E3D6C()
{
  unint64_t v0;

  v0 = sub_24A216464();
  swift_bridgeObjectRelease();
  if (v0 >= 7)
    return 7;
  else
    return v0;
}

unint64_t sub_24A1E3DB4()
{
  unint64_t result;

  result = qword_257911D78;
  if (!qword_257911D78)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21EAF8, &type metadata for VAKeywordDetection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257911D78);
  }
  return result;
}

uint64_t type metadata accessor for VAKeywordResult()
{
  return objc_opt_self();
}

uint64_t sub_24A1E3E18(uint64_t result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v4 = 0;
    v22 = result + 32;
    v20 = a2 + 7;
    v21 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      if (v4 <= v2)
        v5 = v2;
      else
        v5 = v4;
      v23 = v5;
      while (1)
      {
        if (v4 == v23)
          goto LABEL_34;
        v6 = v4++;
        v7 = a2[2];
        if (!v7)
          goto LABEL_7;
        v8 = (uint64_t *)(v22 + 16 * v6);
        v9 = *v8;
        v10 = v8[1];
        if (a2[4] == *v8 && a2[5] == v10)
          break;
        result = sub_24A21659C();
        if ((result & 1) != 0)
          break;
        if (v7 != 1)
        {
          v12 = v20;
          v13 = 1;
          while (1)
          {
            v14 = v13 + 1;
            if (__OFADD__(v13, 1))
              break;
            if (*(v12 - 1) == v9 && *v12 == v10)
              goto LABEL_25;
            result = sub_24A21659C();
            if ((result & 1) != 0)
              goto LABEL_25;
            v12 += 2;
            ++v13;
            if (v14 == v7)
              goto LABEL_7;
          }
          __break(1u);
LABEL_34:
          __break(1u);
          return result;
        }
LABEL_7:
        if (v4 == v2)
          return v21;
      }
LABEL_25:
      swift_bridgeObjectRetain();
      v16 = v21;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = sub_24A148B80(0, *(_QWORD *)(v21 + 16) + 1, 1);
        v16 = v21;
      }
      v18 = *(_QWORD *)(v16 + 16);
      v17 = *(_QWORD *)(v16 + 24);
      if (v18 >= v17 >> 1)
      {
        result = sub_24A148B80(v17 > 1, v18 + 1, 1);
        v16 = v21;
      }
      *(_QWORD *)(v16 + 16) = v18 + 1;
      v21 = v16;
      v19 = v16 + 16 * v18;
      *(_QWORD *)(v19 + 32) = v9;
      *(_QWORD *)(v19 + 40) = v10;
      if (v4 == v2)
        return v21;
    }
  }
  return MEMORY[0x24BEE4AF8];
}

unint64_t sub_24A1E3FDC()
{
  unint64_t result;

  result = qword_25791BEF0[0];
  if (!qword_25791BEF0[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21EED0, &type metadata for VAKeywordResult.CodingKeys);
    atomic_store(result, qword_25791BEF0);
  }
  return result;
}

unint64_t sub_24A1E4020()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_257911D90;
  if (!qword_257911D90)
  {
    v1 = sub_24A139148(&qword_257911D88);
    v2 = sub_24A1E4084();
    result = MEMORY[0x24BD0A9EC](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_257911D90);
  }
  return result;
}

unint64_t sub_24A1E4084()
{
  unint64_t result;

  result = qword_257911D98;
  if (!qword_257911D98)
  {
    result = MEMORY[0x24BD0A9EC](&protocol conformance descriptor for VAKeywordDetection, &type metadata for VAKeywordDetection);
    atomic_store(result, (unint64_t *)&qword_257911D98);
  }
  return result;
}

uint64_t sub_24A1E40C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_24A135F88(&qword_25790AFA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A1E4110(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_24A135F88(&qword_25790AFA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_24A1E4158()
{
  unint64_t result;

  result = qword_257911DA8;
  if (!qword_257911DA8)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21ECD8, &type metadata for VAInstrumentedKeywordResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257911DA8);
  }
  return result;
}

uint64_t sub_24A1E419C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_24A135F88(&qword_25790AFA8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_24A1E41DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25790F5D0;
  if (!qword_25790F5D0)
  {
    v1 = sub_24A2157A4();
    result = MEMORY[0x24BD0A9EC](MEMORY[0x24BDCEAB8], v1);
    atomic_store(result, (unint64_t *)&qword_25790F5D0);
  }
  return result;
}

unint64_t sub_24A1E4228()
{
  unint64_t result;

  result = qword_257911DB0;
  if (!qword_257911DB0)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21EA58, &type metadata for VAKeywordDetection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257911DB0);
  }
  return result;
}

unint64_t sub_24A1E4270()
{
  unint64_t result;

  result = qword_257911DB8;
  if (!qword_257911DB8)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21EB70, &type metadata for VAKeywordDetection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257911DB8);
  }
  return result;
}

unint64_t sub_24A1E42B8()
{
  unint64_t result;

  result = qword_257911DC0;
  if (!qword_257911DC0)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21EB48, &type metadata for VAKeywordDetection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257911DC0);
  }
  return result;
}

unint64_t sub_24A1E4300()
{
  unint64_t result;

  result = qword_257911DC8;
  if (!qword_257911DC8)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21EC38, &type metadata for VAInstrumentedKeywordResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257911DC8);
  }
  return result;
}

unint64_t sub_24A1E4348()
{
  unint64_t result;

  result = qword_257911DD0;
  if (!qword_257911DD0)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21ED50, &type metadata for VAInstrumentedKeywordResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257911DD0);
  }
  return result;
}

unint64_t sub_24A1E4390()
{
  unint64_t result;

  result = qword_257911DD8;
  if (!qword_257911DD8)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21ED28, &type metadata for VAInstrumentedKeywordResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257911DD8);
  }
  return result;
}

uint64_t initializeWithCopy for VAKeywordDetection(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_WORD *)(a1 + 57) = *(_WORD *)(a2 + 57);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VAKeywordDetection(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  return a1;
}

__n128 initializeWithTake for VAKeywordDetection(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 43) = *(_OWORD *)(a2 + 43);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for VAKeywordDetection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  return a1;
}

uint64_t getEnumTagSinglePayload for VAKeywordDetection(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 59))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VAKeywordDetection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 58) = 0;
    *(_WORD *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 59) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 59) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VAKeywordDetection()
{
  return &type metadata for VAKeywordDetection;
}

uint64_t storeEnumTagSinglePayload for VAKeywordDetection.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_24A1E462C + 4 * byte_24A21EA3D[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_24A1E4660 + 4 * byte_24A21EA38[v4]))();
}

uint64_t sub_24A1E4660(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A1E4668(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A1E4670);
  return result;
}

uint64_t sub_24A1E467C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A1E4684);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_24A1E4688(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A1E4690(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VAKeywordDetection.CodingKeys()
{
  return &type metadata for VAKeywordDetection.CodingKeys;
}

uint64_t method lookup function for VAKeywordResult()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAKeywordResult.__allocating_init(detections:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of VAKeywordResult.sortedDetections.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of VAKeywordResult.scores.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of VAKeywordResult.sortedScores.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of VAKeywordResult.resolveEquivalentKeywords(params:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of VAKeywordResult.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of VAKeywordResult.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t sub_24A1E4728()
{
  return type metadata accessor for VAInstrumentedKeywordResult();
}

uint64_t type metadata accessor for VAInstrumentedKeywordResult()
{
  uint64_t result;

  result = qword_25791C700;
  if (!qword_25791C700)
    return swift_getSingletonMetadata();
  return result;
}

void sub_24A1E476C()
{
  unint64_t v0;

  sub_24A1E4810();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for VAInstrumentedKeywordResult()
{
  return swift_lookUpClassMethod();
}

void sub_24A1E4810()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_257911EF8[0])
  {
    sub_24A2157A4();
    v0 = sub_24A216200();
    if (!v1)
      atomic_store(v0, qword_257911EF8);
  }
}

uint64_t storeEnumTagSinglePayload for VAInstrumentedKeywordResult.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24A1E48B0 + 4 * byte_24A21EA47[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24A1E48E4 + 4 * byte_24A21EA42[v4]))();
}

uint64_t sub_24A1E48E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A1E48EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A1E48F4);
  return result;
}

uint64_t sub_24A1E4900(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A1E4908);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24A1E490C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A1E4914(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VAInstrumentedKeywordResult.CodingKeys()
{
  return &type metadata for VAInstrumentedKeywordResult.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for VAKeywordResult.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_24A1E4970 + 4 * byte_24A21EA4C[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_24A1E4990 + 4 * byte_24A21EA51[v4]))();
}

_BYTE *sub_24A1E4970(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_24A1E4990(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24A1E4998(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24A1E49A0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24A1E49A8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24A1E49B0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for VAKeywordResult.CodingKeys()
{
  return &type metadata for VAKeywordResult.CodingKeys;
}

unint64_t sub_24A1E49D0()
{
  unint64_t result;

  result = qword_25791C810[0];
  if (!qword_25791C810[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21EEA8, &type metadata for VAKeywordResult.CodingKeys);
    atomic_store(result, qword_25791C810);
  }
  return result;
}

unint64_t sub_24A1E4A18()
{
  unint64_t result;

  result = qword_25791C920;
  if (!qword_25791C920)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21EE18, &type metadata for VAKeywordResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25791C920);
  }
  return result;
}

unint64_t sub_24A1E4A60()
{
  unint64_t result;

  result = qword_25791C928[0];
  if (!qword_25791C928[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21EE40, &type metadata for VAKeywordResult.CodingKeys);
    atomic_store(result, qword_25791C928);
  }
  return result;
}

uint64_t sub_24A1E4AA4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_audioSampleRate;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1E4AE8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_audioSampleRate);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A1E4B30()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncoding;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1E4B74(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncoding);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A1E4BBC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncodingStride;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1E4C00(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncodingStride);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A1E4C48()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_encodingsPerVerification;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1E4C8C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_encodingsPerVerification);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A1E4CD4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerPredictionWindow;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1E4D18(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerPredictionWindow);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A1E4D60()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesPerHop;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1E4DA4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesPerHop);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A1E4DEC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesStridePerHop;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1E4E30(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesStridePerHop);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A1E4E78()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1E4EBC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A1E4F04()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumHops;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1E4F48(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumHops);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A1E4F90()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1E4FD4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

double sub_24A1E501C()
{
  _QWORD *v0;
  _QWORD *v1;
  double v2;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v2 = (double)(*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x130))();
  return v2 / (double)(*(uint64_t (**)(void))((*v1 & *v0) + 0xA0))();
}

double sub_24A1E5078()
{
  _QWORD *v0;
  _QWORD *v1;
  double v2;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v2 = (double)(*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
  return v2 / (double)(*(uint64_t (**)(void))((*v1 & *v0) + 0xA0))();
}

id VAStrideConfiguration.__allocating_init(audioSampleRate:samplesPerEncoding:samplesPerEncodingStride:samplesPerPredictionWindow:encodingsPerVerification:featureExtractionModelInputSize:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_class *v6;
  char *v13;
  char *v14;
  objc_super v16;

  v13 = (char *)objc_allocWithZone(v6);
  *(_QWORD *)&v13[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesPerHop] = 400;
  *(_QWORD *)&v13[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesStridePerHop] = 160;
  *(_QWORD *)&v13[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice] = 40;
  *(_QWORD *)&v13[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumHops] = 24;
  v14 = &v13[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize];
  *(_QWORD *)&v13[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize] = 176;
  *(_QWORD *)&v13[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_audioSampleRate] = a1;
  *(_QWORD *)&v13[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncoding] = a2;
  *(_QWORD *)&v13[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncodingStride] = a3;
  *(_QWORD *)&v13[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerPredictionWindow] = a4;
  *(_QWORD *)&v13[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_encodingsPerVerification] = a5;
  swift_beginAccess();
  *(_QWORD *)v14 = a6;
  v16.receiver = v13;
  v16.super_class = v6;
  return objc_msgSendSuper2(&v16, sel_init);
}

id VAStrideConfiguration.init(audioSampleRate:samplesPerEncoding:samplesPerEncodingStride:samplesPerPredictionWindow:encodingsPerVerification:featureExtractionModelInputSize:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  char *v8;
  objc_super v10;

  *(_QWORD *)&v6[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesPerHop] = 400;
  *(_QWORD *)&v6[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesStridePerHop] = 160;
  *(_QWORD *)&v6[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice] = 40;
  *(_QWORD *)&v6[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumHops] = 24;
  v8 = &v6[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize];
  *(_QWORD *)&v6[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize] = 176;
  *(_QWORD *)&v6[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_audioSampleRate] = a1;
  *(_QWORD *)&v6[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncoding] = a2;
  *(_QWORD *)&v6[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncodingStride] = a3;
  *(_QWORD *)&v6[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerPredictionWindow] = a4;
  *(_QWORD *)&v6[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_encodingsPerVerification] = a5;
  swift_beginAccess();
  *(_QWORD *)v8 = a6;
  v10.receiver = v6;
  v10.super_class = (Class)type metadata accessor for VAStrideConfiguration();
  return objc_msgSendSuper2(&v10, sel_init);
}

uint64_t type metadata accessor for VAStrideConfiguration()
{
  return objc_opt_self();
}

double sub_24A1E5300()
{
  _QWORD *v0;
  _QWORD *v1;
  double v2;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v2 = (double)(*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
  return v2 / (double)(*(uint64_t (**)(void))((*v1 & *v0) + 0xA0))();
}

double sub_24A1E535C()
{
  _QWORD *v0;
  _QWORD *v1;
  double v2;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v2 = (double)(*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
  return v2 / (double)(*(uint64_t (**)(void))((*v1 & *v0) + 0xA0))();
}

id static VAStrideConfiguration.forFlexibleA2T()()
{
  objc_class *v0;
  char *v1;
  char *v2;
  objc_super v4;

  v0 = (objc_class *)type metadata accessor for VAStrideConfiguration();
  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesPerHop] = 400;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesStridePerHop] = 160;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice] = 40;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumHops] = 24;
  v2 = &v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize];
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize] = 176;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_audioSampleRate] = 16000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncoding] = 400;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncodingStride] = 160;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerPredictionWindow] = 22960;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_encodingsPerVerification] = 1;
  swift_beginAccess();
  *(_QWORD *)v2 = 142;
  v4.receiver = v1;
  v4.super_class = v0;
  return objc_msgSendSuper2(&v4, sel_init);
}

id static VAStrideConfiguration.forFlexibleA2A()()
{
  objc_class *v0;
  char *v1;
  char *v2;
  objc_super v4;

  v0 = (objc_class *)type metadata accessor for VAStrideConfiguration();
  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesPerHop] = 400;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesStridePerHop] = 160;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice] = 40;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumHops] = 24;
  v2 = &v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize];
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize] = 176;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_audioSampleRate] = 16000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncoding] = 19200;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncodingStride] = 3840;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerPredictionWindow] = 19200;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_encodingsPerVerification] = 1;
  swift_beginAccess();
  *(_QWORD *)v2 = 176;
  v4.receiver = v1;
  v4.super_class = v0;
  return objc_msgSendSuper2(&v4, sel_init);
}

id _s12VoiceActions21VAStrideConfigurationC16forFlexibleA2Tv2ACyFZ_0()
{
  objc_class *v0;
  char *v1;
  char *v2;
  objc_super v4;

  v0 = (objc_class *)type metadata accessor for VAStrideConfiguration();
  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesPerHop] = 400;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesStridePerHop] = 160;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice] = 40;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumHops] = 24;
  v2 = &v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize];
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize] = 176;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_audioSampleRate] = 16000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncoding] = 400;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncodingStride] = 160;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerPredictionWindow] = 32000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_encodingsPerVerification] = 1;
  swift_beginAccess();
  *(_QWORD *)v2 = 198;
  v4.receiver = v1;
  v4.super_class = v0;
  return objc_msgSendSuper2(&v4, sel_init);
}

id static VAStrideConfiguration.forFixedA2T(modelConfig:)(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  objc_class *v5;
  char *v6;
  uint64_t *v7;
  objc_super v9;

  v2 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v3 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *a1) + 0xC8))();
  v4 = (*(uint64_t (**)(void))((*v2 & *a1) + 0xE0))();
  v5 = (objc_class *)type metadata accessor for VAStrideConfiguration();
  v6 = (char *)objc_allocWithZone(v5);
  *(_QWORD *)&v6[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesPerHop] = 400;
  *(_QWORD *)&v6[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesStridePerHop] = 160;
  *(_QWORD *)&v6[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice] = 40;
  *(_QWORD *)&v6[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumHops] = 24;
  v7 = (uint64_t *)&v6[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize];
  *(_QWORD *)&v6[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize] = 176;
  *(_QWORD *)&v6[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_audioSampleRate] = 16000;
  *(_QWORD *)&v6[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncoding] = 400;
  *(_QWORD *)&v6[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncodingStride] = 160;
  *(_QWORD *)&v6[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerPredictionWindow] = v3;
  *(_QWORD *)&v6[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_encodingsPerVerification] = 1;
  swift_beginAccess();
  *v7 = v4;
  v9.receiver = v6;
  v9.super_class = v5;
  return objc_msgSendSuper2(&v9, sel_init);
}

id static VAStrideConfiguration.forFlexibleAVS()()
{
  objc_class *v0;
  char *v1;
  char *v2;
  objc_super v4;

  v0 = (objc_class *)type metadata accessor for VAStrideConfiguration();
  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesPerHop] = 400;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesStridePerHop] = 160;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice] = 40;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumHops] = 24;
  v2 = &v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize];
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize] = 176;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_audioSampleRate] = 16000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncoding] = 400;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncodingStride] = 160;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerPredictionWindow] = 160000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_encodingsPerVerification] = 1000;
  swift_beginAccess();
  *(_QWORD *)v2 = 176;
  v4.receiver = v1;
  v4.super_class = v0;
  return objc_msgSendSuper2(&v4, sel_init);
}

id static VAStrideConfiguration.forTasrConfig(tasrConfig:)()
{
  objc_class *v0;
  char *v1;
  char *v2;
  objc_super v4;

  v0 = (objc_class *)type metadata accessor for VAStrideConfiguration();
  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesPerHop] = 400;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesStridePerHop] = 160;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice] = 40;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumHops] = 24;
  v2 = &v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize];
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize] = 176;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_audioSampleRate] = 16000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncoding] = 400;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncodingStride] = 160;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerPredictionWindow] = 32000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_encodingsPerVerification] = 1;
  swift_beginAccess();
  *(_QWORD *)v2 = 176;
  v4.receiver = v1;
  v4.super_class = v0;
  return objc_msgSendSuper2(&v4, sel_init);
}

id static VAStrideConfiguration.forSpeechAPIConfig()()
{
  objc_class *v0;
  char *v1;
  char *v2;
  objc_super v4;

  v0 = (objc_class *)type metadata accessor for VAStrideConfiguration();
  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesPerHop] = 400;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesStridePerHop] = 160;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice] = 40;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumHops] = 24;
  v2 = &v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize];
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize] = 176;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_audioSampleRate] = 16000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncoding] = 400;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncodingStride] = 160;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerPredictionWindow] = 32000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_encodingsPerVerification] = 1;
  swift_beginAccess();
  *(_QWORD *)v2 = 176;
  v4.receiver = v1;
  v4.super_class = v0;
  return objc_msgSendSuper2(&v4, sel_init);
}

id static VAStrideConfiguration.forVAD()()
{
  objc_class *v0;
  char *v1;
  char *v2;
  objc_super v4;

  v0 = (objc_class *)type metadata accessor for VAStrideConfiguration();
  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesPerHop] = 400;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesStridePerHop] = 160;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice] = 40;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumHops] = 24;
  v2 = &v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize];
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize] = 176;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_audioSampleRate] = 16000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncoding] = 400;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncodingStride] = 160;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerPredictionWindow] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_encodingsPerVerification] = 1;
  swift_beginAccess();
  *(_QWORD *)v2 = 176;
  v4.receiver = v1;
  v4.super_class = v0;
  return objc_msgSendSuper2(&v4, sel_init);
}

id VAStrideConfiguration.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void VAStrideConfiguration.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_24A1E5C88(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24A1E5CC8 + 4 * byte_24A21EF20[a1]))(0x6D61536F69647561, 0xEF65746152656C70);
}

unint64_t sub_24A1E5CC8()
{
  return 0xD000000000000012;
}

uint64_t sub_24A1E5D94()
{
  unsigned __int8 *v0;

  return sub_24A1E5C88(*v0);
}

uint64_t sub_24A1E5D9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24A1E6968(a1, a2);
  *a3 = result;
  return result;
}

void sub_24A1E5DC0(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_24A1E5DCC()
{
  sub_24A1E6170();
  return sub_24A2166A4();
}

uint64_t sub_24A1E5DF4()
{
  sub_24A1E6170();
  return sub_24A2166B0();
}

id VAStrideConfiguration.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VAStrideConfiguration();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_24A1E5E4C(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v21[16];

  v3 = v1;
  v5 = sub_24A135F88(&qword_257912120);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_24A14B668(a1, a1[3]);
  sub_24A1E6170();
  v9 = sub_24A21668C();
  v10 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v3) + 0xA0))(v9);
  v21[15] = 0;
  v11 = sub_24A216554();
  if (!v2)
  {
    (*(void (**)(uint64_t))((*v10 & *v3) + 0xB8))(v11);
    v21[14] = 1;
    v12 = sub_24A216554();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0xD0))(v12);
    v21[13] = 2;
    v13 = sub_24A216554();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0xE8))(v13);
    v21[12] = 3;
    v14 = sub_24A216554();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x100))(v14);
    v21[11] = 4;
    v15 = sub_24A216554();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x118))(v15);
    v21[10] = 5;
    v16 = sub_24A216554();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x130))(v16);
    v21[9] = 6;
    v17 = sub_24A216554();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x148))(v17);
    v21[8] = 7;
    v18 = sub_24A216554();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x160))(v18);
    v21[7] = 8;
    v19 = sub_24A216554();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x178))(v19);
    v21[6] = 9;
    sub_24A216554();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_24A1E6170()
{
  unint64_t result;

  result = qword_25791C9B0[0];
  if (!qword_25791C9B0[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21F07C, &type metadata for VAStrideConfiguration.CodingKeys);
    atomic_store(result, qword_25791C9B0);
  }
  return result;
}

id VAStrideConfiguration.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return VAStrideConfiguration.init(from:)(a1);
}

id VAStrideConfiguration.init(from:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  id v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  objc_class *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  objc_super v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  uint64_t *v35;

  v27 = sub_24A135F88(&qword_257912128);
  v25 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = (uint64_t *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesPerHop];
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesPerHop] = 400;
  v23 = (uint64_t *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesStridePerHop];
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionSamplesStridePerHop] = 160;
  v22 = (uint64_t *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice];
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumFeaturesPerSlice] = 40;
  v5 = (uint64_t *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumHops];
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionNumHops] = 24;
  v6 = &v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize];
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_featureExtractionModelInputSize] = 176;
  v7 = a1[3];
  v28 = a1;
  v8 = sub_24A14B668(a1, v7);
  sub_24A1E6170();
  v9 = v1;
  v26 = v4;
  v10 = v8;
  v11 = v35;
  sub_24A216674();
  if (v11)
  {

    sub_24A14D184((uint64_t)v28);
    type metadata accessor for VAStrideConfiguration();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v12 = v24;
    v35 = (uint64_t *)v6;
    v13 = v25;
    v34 = 0;
    *(_QWORD *)&v9[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_audioSampleRate] = sub_24A2164E8();
    v34 = 1;
    *(_QWORD *)&v9[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncoding] = sub_24A2164E8();
    v34 = 2;
    *(_QWORD *)&v9[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerEncodingStride] = sub_24A2164E8();
    v34 = 3;
    *(_QWORD *)&v9[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_encodingsPerVerification] = sub_24A2164E8();
    v34 = 4;
    *(_QWORD *)&v9[OBJC_IVAR____TtC12VoiceActions21VAStrideConfiguration_samplesPerPredictionWindow] = sub_24A2164E8();
    v34 = 5;
    v21 = sub_24A2164E8();
    swift_beginAccess();
    *v12 = v21;
    v33 = 6;
    v14 = sub_24A2164E8();
    swift_beginAccess();
    *v23 = v14;
    v32 = 7;
    v15 = sub_24A2164E8();
    swift_beginAccess();
    *v22 = v15;
    v31 = 8;
    v17 = sub_24A2164E8();
    swift_beginAccess();
    *v5 = v17;
    v30 = 9;
    v18 = sub_24A2164E8();
    v19 = v35;
    swift_beginAccess();
    *v19 = v18;

    v20 = (objc_class *)type metadata accessor for VAStrideConfiguration();
    v29.receiver = v9;
    v29.super_class = v20;
    v10 = objc_msgSendSuper2(&v29, sel_init);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v26, v27);
    sub_24A14D184((uint64_t)v28);
  }
  return v10;
}

uint64_t sub_24A1E6640@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 448))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t sub_24A1E666C()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0x1B8))();
}

uint64_t method lookup function for VAStrideConfiguration()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAStrideConfiguration.__allocating_init(audioSampleRate:samplesPerEncoding:samplesPerEncodingStride:samplesPerPredictionWindow:encodingsPerVerification:featureExtractionModelInputSize:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 416))();
}

uint64_t dispatch thunk of VAStrideConfiguration.predictionWindowDurationSec.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of VAStrideConfiguration.audioChunkDurationSec.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of VAStrideConfiguration.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of VAStrideConfiguration.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 448))();
}

uint64_t getEnumTagSinglePayload for VAStrideConfiguration.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for VAStrideConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_24A1E6810 + 4 * byte_24A21EF2F[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_24A1E6844 + 4 * byte_24A21EF2A[v4]))();
}

uint64_t sub_24A1E6844(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A1E684C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A1E6854);
  return result;
}

uint64_t sub_24A1E6860(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A1E6868);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_24A1E686C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A1E6874(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VAStrideConfiguration.CodingKeys()
{
  return &type metadata for VAStrideConfiguration.CodingKeys;
}

unint64_t sub_24A1E6894()
{
  unint64_t result;

  result = qword_25791CBC0[0];
  if (!qword_25791CBC0[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21F054, &type metadata for VAStrideConfiguration.CodingKeys);
    atomic_store(result, qword_25791CBC0);
  }
  return result;
}

unint64_t sub_24A1E68DC()
{
  unint64_t result;

  result = qword_25791CCD0;
  if (!qword_25791CCD0)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21EFC4, &type metadata for VAStrideConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25791CCD0);
  }
  return result;
}

unint64_t sub_24A1E6924()
{
  unint64_t result;

  result = qword_25791CCD8[0];
  if (!qword_25791CCD8[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21EFEC, &type metadata for VAStrideConfiguration.CodingKeys);
    atomic_store(result, qword_25791CCD8);
  }
  return result;
}

uint64_t sub_24A1E6968(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6D61536F69647561 && a2 == 0xEF65746152656C70;
  if (v2 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A227280 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000024A2272A0 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000024A2272C0 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x800000024A226860 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD00000000000001ELL && a2 == 0x800000024A2272E0 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000024 && a2 == 0x800000024A227300 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000024 && a2 == 0x800000024A227330 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000024A227360 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD00000000000001FLL && a2 == 0x800000024A227380)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    v6 = sub_24A21659C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

_QWORD *sub_24A1E6D38(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;

  result = (_QWORD *)swift_allocObject();
  v5 = MEMORY[0x24BEE4AF8];
  result[3] = a2;
  result[4] = v5;
  result[2] = a1;
  return result;
}

uint64_t sub_24A1E6D80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t (*v7)(_BYTE *, _QWORD);
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  _BYTE v15[32];

  v3 = type metadata accessor for VASingleEnrollmentData();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_24A1A85E8(a1, (uint64_t)v6);
  v7 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 136))(v15);
  v9 = v8;
  v10 = *v8;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v9 = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v10 = sub_24A1A9918(0, *(_QWORD *)(v10 + 16) + 1, 1, v10);
    *v9 = v10;
  }
  v13 = *(_QWORD *)(v10 + 16);
  v12 = *(_QWORD *)(v10 + 24);
  if (v13 >= v12 >> 1)
  {
    v10 = sub_24A1A9918(v12 > 1, v13 + 1, 1, v10);
    *v9 = v10;
  }
  *(_QWORD *)(v10 + 16) = v13 + 1;
  sub_24A1A9B20((uint64_t)v6, v10+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v13);
  return v7(v15, 0);
}

uint64_t sub_24A1E6EB0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void *sub_24A1E6EDC()
{
  return &unk_24A21F0F0;
}

id sub_24A1E6EE8(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  objc_super v5;

  v3 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v3[OBJC_IVAR____TtC12VoiceActions16AVSVerifierModel_resampleDuration] = *(_QWORD *)(a1 + 32);
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

uint64_t sub_24A1E6F38(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  _QWORD *v16;
  __int128 v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  char v44;
  float v45;
  char isUniquelyReferenced_nonNull_native;
  char v47;
  unint64_t v48;
  uint64_t v49;
  _BOOL8 v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  char v54;
  char v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  _BOOL8 v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  char v63;
  uint64_t *v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t);
  uint64_t v81;
  uint64_t result;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int64_t v91;
  uint64_t v92;
  __int128 v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t (*v98)(uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107[3];
  float v108;
  uint64_t v109;
  unint64_t v110;

  v5 = sub_24A215A8C();
  v105 = *(_QWORD *)(v5 - 8);
  v106 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for VASingleEnrollmentData();
  v84 = *(_QWORD *)(v85 - 8);
  MEMORY[0x24BDAC7A8](v85);
  v9 = (char *)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = 0;
  v110 = 0xE000000000000000;
  v108 = -99999.0;
  v10 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v2) + 0x70);
  v99 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12VoiceActions16AVSVerifierModel_resampleDuration);
  v97 = v2;
  v98 = v10;
  v100 = ((uint64_t (*)(uint64_t))v10)(a1);
  v11 = *(_QWORD *)(a2 + 64);
  v86 = a2 + 64;
  v12 = 1 << *(_BYTE *)(a2 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v87 = (unint64_t)(v12 + 63) >> 6;
  v88 = a2;
  swift_bridgeObjectRetain();
  v15 = 0;
  v16 = (_QWORD *)MEMORY[0x24BEE4B00];
  *(_QWORD *)&v17 = 134218242;
  v93 = v17;
  v92 = MEMORY[0x24BEE4AD8] + 8;
  v94 = v9;
  while (1)
  {
    if (v14)
    {
      v18 = v16;
      v90 = (v14 - 1) & v14;
      v91 = v15;
      v19 = __clz(__rbit64(v14)) | (v15 << 6);
    }
    else
    {
      v20 = v15 + 1;
      if (__OFADD__(v15, 1))
        goto LABEL_66;
      if (v20 >= v87)
        goto LABEL_60;
      v21 = *(_QWORD *)(v86 + 8 * v20);
      v22 = v15 + 1;
      if (!v21)
      {
        v22 = v15 + 2;
        if (v15 + 2 >= v87)
          goto LABEL_60;
        v21 = *(_QWORD *)(v86 + 8 * v22);
        if (!v21)
        {
          v22 = v15 + 3;
          if (v15 + 3 >= v87)
            goto LABEL_60;
          v21 = *(_QWORD *)(v86 + 8 * v22);
          if (!v21)
          {
            v23 = v15 + 4;
            if (v15 + 4 >= v87)
              goto LABEL_60;
            v21 = *(_QWORD *)(v86 + 8 * v23);
            if (!v21)
            {
              while (1)
              {
                v22 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_67;
                if (v22 >= v87)
                  break;
                v21 = *(_QWORD *)(v86 + 8 * v22);
                ++v23;
                if (v21)
                  goto LABEL_21;
              }
LABEL_60:
              swift_bridgeObjectRelease();
              swift_release();
              swift_beginAccess();
              swift_beginAccess();
              return (uint64_t)v16;
            }
            v22 = v15 + 4;
          }
        }
      }
LABEL_21:
      v18 = v16;
      v90 = (v21 - 1) & v21;
      v91 = v22;
      v19 = __clz(__rbit64(v21)) + (v22 << 6);
    }
    v24 = (uint64_t *)(*(_QWORD *)(v88 + 48) + 16 * v19);
    v26 = *v24;
    v25 = v24[1];
    v27 = *(_QWORD *)(*(_QWORD *)(v88 + 56) + 8 * v19);
    v28 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 120);
    swift_bridgeObjectRetain();
    v29 = swift_retain();
    v30 = v28(v29);
    v31 = *(_QWORD *)(v30 + 16);
    if (v31)
      break;
    swift_release();
    swift_bridgeObjectRelease();
    v16 = v18;
LABEL_5:
    swift_bridgeObjectRelease();
    v15 = v91;
    v14 = v90;
  }
  v102 = *(int *)(v85 + 20);
  v32 = v84;
  v33 = (*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
  v89 = v30;
  v34 = v30 + v33;
  swift_beginAccess();
  swift_beginAccess();
  v101 = *(_QWORD *)(v32 + 72);
  v16 = v18;
  v96 = v27;
  v95 = v26;
  while (1)
  {
    sub_24A1A85E8(v34, (uint64_t)v9);
    v35 = *(_QWORD *)&v9[v102];
    swift_bridgeObjectRetain();
    sub_24A136064((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for VASingleEnrollmentData);
    v36 = v98(v35, v99);
    swift_bridgeObjectRelease();
    sub_24A1D5CE0(v100, v36);
    v38 = v37;
    swift_bridgeObjectRelease();
    v39 = -v38;
    v40 = v16[2];
    v103 = v34;
    v104 = v31;
    if (v40)
    {
      swift_bridgeObjectRetain();
      sub_24A148970(v26, v25);
      v42 = v41;
      swift_bridgeObjectRelease();
      if ((v42 & 1) != 0)
      {
        if (!v16[2])
          goto LABEL_63;
        swift_bridgeObjectRetain();
        v43 = sub_24A148970(v26, v25);
        if ((v44 & 1) == 0)
          goto LABEL_68;
        v45 = *(float *)(v16[7] + 4 * v43);
        swift_bridgeObjectRelease();
        if (v45 < v39)
          v45 = v39;
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v107[0] = (uint64_t)v16;
        v48 = sub_24A148970(v26, v25);
        v49 = v16[2];
        v50 = (v47 & 1) == 0;
        v51 = v49 + v50;
        if (__OFADD__(v49, v50))
          goto LABEL_64;
        v52 = v47;
        if (v16[3] >= v51)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v16 = (_QWORD *)v107[0];
            if ((v47 & 1) == 0)
              goto LABEL_53;
          }
          else
          {
            sub_24A1E38B0();
            v16 = (_QWORD *)v107[0];
            if ((v52 & 1) == 0)
              goto LABEL_53;
          }
        }
        else
        {
          sub_24A1E35AC(v51, isUniquelyReferenced_nonNull_native);
          v53 = sub_24A148970(v26, v25);
          if ((v52 & 1) != (v54 & 1))
            goto LABEL_69;
          v48 = v53;
          v16 = (_QWORD *)v107[0];
          if ((v52 & 1) == 0)
          {
LABEL_53:
            v16[(v48 >> 6) + 8] |= 1 << v48;
            v68 = (uint64_t *)(v16[6] + 16 * v48);
            *v68 = v26;
            v68[1] = v25;
            *(float *)(v16[7] + 4 * v48) = v45;
            v69 = v16[2];
            v66 = __OFADD__(v69, 1);
            v67 = v69 + 1;
            if (v66)
              goto LABEL_65;
LABEL_54:
            v16[2] = v67;
            swift_bridgeObjectRetain();
            goto LABEL_55;
          }
        }
        *(float *)(v16[7] + 4 * v48) = v45;
        goto LABEL_55;
      }
    }
    swift_bridgeObjectRetain();
    v55 = swift_isUniquelyReferenced_nonNull_native();
    v107[0] = (uint64_t)v16;
    v57 = sub_24A148970(v26, v25);
    v58 = v16[2];
    v59 = (v56 & 1) == 0;
    v60 = v58 + v59;
    if (__OFADD__(v58, v59))
      break;
    v61 = v56;
    if (v16[3] >= v60)
    {
      if ((v55 & 1) != 0)
      {
        v16 = (_QWORD *)v107[0];
        if ((v56 & 1) == 0)
          goto LABEL_49;
      }
      else
      {
        sub_24A1E38B0();
        v16 = (_QWORD *)v107[0];
        if ((v61 & 1) == 0)
          goto LABEL_49;
      }
    }
    else
    {
      sub_24A1E35AC(v60, v55);
      v62 = sub_24A148970(v26, v25);
      if ((v61 & 1) != (v63 & 1))
        goto LABEL_69;
      v57 = v62;
      v16 = (_QWORD *)v107[0];
      if ((v61 & 1) == 0)
      {
LABEL_49:
        v16[(v57 >> 6) + 8] |= 1 << v57;
        v64 = (uint64_t *)(v16[6] + 16 * v57);
        *v64 = v26;
        v64[1] = v25;
        *(float *)(v16[7] + 4 * v57) = v39;
        v65 = v16[2];
        v66 = __OFADD__(v65, 1);
        v67 = v65 + 1;
        if (v66)
          goto LABEL_62;
        goto LABEL_54;
      }
    }
    *(float *)(v16[7] + 4 * v57) = v39;
LABEL_55:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v108 < v39)
    {
      v109 = v26;
      v110 = v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v108 = v39;
    }
    v70 = sub_24A1B9D90();
    (*(void (**)(char *, uint64_t, uint64_t))(v105 + 16))(v7, v70, v106);
    v71 = sub_24A215A74();
    v72 = sub_24A2160F8();
    if (os_log_type_enabled(v71, v72))
    {
      v73 = swift_slowAlloc();
      v74 = swift_slowAlloc();
      v107[0] = v74;
      *(_DWORD *)v73 = v93;
      *(double *)(v73 + 4) = v108;
      *(_WORD *)(v73 + 12) = 2080;
      v75 = v25;
      v76 = v109;
      v77 = v110;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v73 + 14) = sub_24A148270(v76, v77, v107);
      v78 = v105;
      v79 = v106;
      v9 = v94;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24A12D000, v71, v72, "With remap, lowest score: %f for %s", (uint8_t *)v73, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24BD0AAAC](v74, -1, -1);
      MEMORY[0x24BD0AAAC](v73, -1, -1);

      v80 = *(void (**)(char *, uint64_t))(v78 + 8);
      v25 = v75;
      v81 = v79;
      v26 = v95;
      v80(v7, v81);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v105 + 8))(v7, v106);
    }
    v34 = v103 + v101;
    v31 = v104 - 1;
    if (v104 == 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }
  }
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_69:
  result = sub_24A2165CC();
  __break(1u);
  return result;
}

uint64_t sub_24A1E7824()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x60))();
}

id AVSVerifierModel.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void AVSVerifierModel.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id AVSVerifierModel.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AVSVerifierModel();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

__n128 sub_24A1E7908@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;

  swift_beginAccess();
  v3 = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 80) = v3;
  v4 = *(_OWORD *)(v1 + 128);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(a1 + 112) = v4;
  v5 = *(_OWORD *)(v1 + 32);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(a1 + 16) = v5;
  result = *(__n128 *)(v1 + 48);
  v7 = *(_OWORD *)(v1 + 64);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v7;
  return result;
}

__n128 sub_24A1E7960(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;

  swift_beginAccess();
  v3 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v1 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v1 + 96) = v3;
  v4 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v1 + 112) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v1 + 128) = v4;
  v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 32) = v5;
  result = *(__n128 *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(v1 + 48) = result;
  *(_OWORD *)(v1 + 64) = v7;
  return result;
}

id sub_24A1E79B8()
{
  uint64_t v0;

  swift_beginAccess();
  return *(id *)(v0 + 144);
}

void sub_24A1E79E8(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 144);
  *(_QWORD *)(v1 + 144) = a1;

}

uint64_t sub_24A1E7A2C()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t sub_24A1E7A60(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 152) = a1;
  return swift_release();
}

uint64_t sub_24A1E7AA4()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A1E7AD8(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 168) = a1;
  return swift_bridgeObjectRelease();
}

float sub_24A1E7B1C()
{
  uint64_t v0;

  swift_beginAccess();
  return *(float *)(v0 + 184);
}

uint64_t sub_24A1E7B4C(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(float *)(v1 + 184) = a1;
  return result;
}

float sub_24A1E7B88()
{
  uint64_t v0;

  swift_beginAccess();
  return *(float *)(v0 + 188);
}

uint64_t sub_24A1E7BB8(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(float *)(v1 + 188) = a1;
  return result;
}

uint64_t (*sub_24A1E7BF4())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

float sub_24A1E7C30()
{
  uint64_t v0;

  swift_beginAccess();
  return *(float *)(v0 + 192);
}

uint64_t sub_24A1E7C60(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(float *)(v1 + 192) = a1;
  return result;
}

float sub_24A1E7C9C()
{
  uint64_t v0;

  swift_beginAccess();
  return *(float *)(v0 + 196);
}

uint64_t sub_24A1E7CCC(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(float *)(v1 + 196) = a1;
  return result;
}

uint64_t (*sub_24A1E7D08())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A1E7D44()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 200);
}

uint64_t sub_24A1E7D74(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 200) = a1;
  return result;
}

float sub_24A1E7DB0()
{
  uint64_t v0;

  swift_beginAccess();
  return *(float *)(v0 + 208);
}

uint64_t sub_24A1E7DE0(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(float *)(v1 + 208) = a1;
  return result;
}

float sub_24A1E7E1C()
{
  uint64_t v0;

  swift_beginAccess();
  return *(float *)(v0 + 212);
}

uint64_t sub_24A1E7E4C(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(float *)(v1 + 212) = a1;
  return result;
}

uint64_t (*sub_24A1E7E88())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A1E7EC4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 568))();
  *a2 = result;
  return result;
}

uint64_t sub_24A1E7EF4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 576);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_24A1E7F24()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A1E7F58(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 216) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A1E7F9C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

void sub_24A1E7FD8(uint64_t a1@<X0>, float *a2@<X8>)
{
  *a2 = (*(float (**)(void))(**(_QWORD **)a1 + 592))();
}

uint64_t sub_24A1E8008(float *a1, uint64_t a2)
{
  return (*(uint64_t (**)(float))(**(_QWORD **)a2 + 600))(*a1);
}

float sub_24A1E8034()
{
  uint64_t v0;

  swift_beginAccess();
  return *(float *)(v0 + 224);
}

uint64_t sub_24A1E8064(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(float *)(v1 + 224) = a1;
  return result;
}

uint64_t sub_24A1E80A0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 640))();
  *a2 = result;
  return result;
}

uint64_t sub_24A1E80D0(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 648))(*a1);
}

uint64_t sub_24A1E80FC()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 232);
}

uint64_t sub_24A1E812C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 232) = a1;
  return result;
}

uint64_t sub_24A1E8168@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 664))();
  *a2 = result;
  return result;
}

uint64_t sub_24A1E8198(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 672);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_24A1E81C8()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A1E81FC(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 240) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t VAAVSVerifierModel.__allocating_init(configuration:)(uint64_t a1)
{
  swift_allocObject();
  return VAAVSVerifierModel.init(configuration:)(a1);
}

uint64_t VAAVSVerifierModel.init(configuration:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  float v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  objc_class *v25;
  char *v26;
  double v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  objc_super v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;

  v2 = v1;
  v40 = sub_24A215A8C();
  v4 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for VASignpostInterval();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(float *)a1;
  v11 = *(_DWORD *)(a1 + 4);
  v12 = *(_QWORD *)(a1 + 8);
  v54 = *(_OWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_OWORD *)(a1 + 88);
  v50 = *(_OWORD *)(a1 + 72);
  v51 = v14;
  v52 = *(_OWORD *)(a1 + 104);
  v53 = *(_QWORD *)(a1 + 120);
  v15 = *(_OWORD *)(a1 + 56);
  v48 = *(_OWORD *)(a1 + 40);
  v49 = v15;
  v16 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v2 + 160) = 0;
  *(_QWORD *)(v2 + 168) = v16;
  *(_QWORD *)(v2 + 176) = v16;
  *(_OWORD *)(v2 + 184) = xmmword_24A21F0E0;
  *(_QWORD *)(v2 + 200) = 150;
  __asm { FMOV            V0.2S, #-15.0 }
  *(_QWORD *)(v2 + 208) = _D0;
  v22 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 216) = MEMORY[0x24BEE4AF8];
  swift_retain_n();
  *(_QWORD *)(v2 + 240) = sub_24A1E09E0(v22);
  type metadata accessor for VALog();
  static VALog.begin(_:_:)("VoiceActions", 12, 2u, 0xD000000000000017, 0x800000024A2273C0, (uint64_t)v9);
  *(_OWORD *)(v2 + 32) = v54;
  v23 = v51;
  *(_OWORD *)(v2 + 88) = v50;
  *(_OWORD *)(v2 + 104) = v23;
  *(_OWORD *)(v2 + 120) = v52;
  v24 = v49;
  *(_OWORD *)(v2 + 56) = v48;
  *(float *)(v2 + 16) = v10;
  *(_DWORD *)(v2 + 20) = v11;
  v41 = v12;
  *(_QWORD *)(v2 + 24) = v12;
  *(_QWORD *)(v2 + 48) = v13;
  *(_QWORD *)(v2 + 136) = v53;
  *(_OWORD *)(v2 + 72) = v24;
  v25 = (objc_class *)type metadata accessor for AVSVerifierModel();
  v26 = (char *)objc_allocWithZone(v25);
  *(_QWORD *)&v26[OBJC_IVAR____TtC12VoiceActions16AVSVerifierModel_resampleDuration] = v13;
  v47.receiver = v26;
  v47.super_class = v25;
  *(_QWORD *)(v2 + 144) = objc_msgSendSuper2(&v47, sel_init);
  swift_beginAccess();
  sub_24A173D8C(*(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 128), (uint64_t)&v42, *(float *)(v2 + 72));
  v27 = v42;
  v28 = v43;
  v29 = v44;
  v30 = v45;
  v31 = v46;
  type metadata accessor for AVSEndpointer();
  v42 = v27;
  v43 = v28;
  v44 = v29;
  v45 = v30;
  v46 = v31;
  v32 = v4;
  v33 = v40;
  AVSEndpointer.__allocating_init(config:)((uint64_t)&v42);
  *(_QWORD *)(v2 + 152) = v34;
  v35 = sub_24A1B9D90();
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v6, v35, v33);
  swift_retain();
  v36 = sub_24A215A74();
  v37 = sub_24A2160F8();
  if (os_log_type_enabled(v36, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v38 = 134217984;
    v42 = *(float *)(v2 + 72);
    sub_24A216260();
    swift_release_n();
    _os_log_impl(&dword_24A12D000, v36, v37, "AVS streaming endpointer has threshold %f", v38, 0xCu);
    MEMORY[0x24BD0AAAC](v38, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  (*(void (**)(char *, uint64_t))(v32 + 8))(v6, v33);
  *(float *)(v2 + 224) = v10;
  *(float *)(v2 + 228) = v10 * 1.5;
  *(_QWORD *)(v2 + 232) = v41;
  swift_release();
  VASignpostInterval.end(_:)((Swift::String_optional)0);
  sub_24A136064((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for VASignpostInterval);
  return sub_24A180204();
}

uint64_t sub_24A1E865C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)((*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))() + 16);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_24A1E868C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  _QWORD v9[2];
  int v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_DWORD *)a1 + 4);
  v5 = a1[3];
  v6 = a1[4];
  type metadata accessor for AVSEndpointer();
  v9[0] = v2;
  v9[1] = v3;
  v10 = v4;
  v11 = v5;
  v12 = v6;
  v7 = AVSEndpointer.__allocating_init(config:)((uint64_t)v9);
  return (*(uint64_t (**)(__n128))(*(_QWORD *)v1 + 312))(v7);
}

uint64_t sub_24A1E86FC(unint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;

  if (!(a1 >> 62))
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_31:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  result = sub_24A216410();
  v2 = result;
  if (!result)
    goto LABEL_31;
LABEL_3:
  if (v2 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v4 = 0;
      v5 = (char *)MEMORY[0x24BEE4AF8];
      v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
      do
      {
        v8 = *(_QWORD *)(MEMORY[0x24BD09BE8](v4, a1) + 16);
        v9 = *(_QWORD *)(v8 + 16);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = sub_24A1EB460(0, *((_QWORD *)v5 + 2) + 1, 1, v5);
        v11 = *((_QWORD *)v5 + 2);
        v10 = *((_QWORD *)v5 + 3);
        if (v11 >= v10 >> 1)
          v5 = sub_24A1EB460((char *)(v10 > 1), v11 + 1, 1, v5);
        *((_QWORD *)v5 + 2) = v11 + 1;
        v5[v11 + 32] = v9 > 0;
        if (v9 >= 1)
        {
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v6 = sub_24A173758(0, v6[2] + 1, 1, v6);
          v13 = v6[2];
          v12 = v6[3];
          if (v13 >= v12 >> 1)
            v6 = sub_24A173758((_QWORD *)(v12 > 1), v13 + 1, 1, v6);
          v6[2] = v13 + 1;
          v6[v13 + 4] = v8;
          v7 = swift_bridgeObjectRetain();
          sub_24A1472A0(v7);
        }
        ++v4;
        swift_unknownObjectRelease();
      }
      while (v2 != v4);
    }
    else
    {
      v14 = 0;
      v15 = (char *)MEMORY[0x24BEE4AF8];
      v6 = (_QWORD *)MEMORY[0x24BEE4AF8];
      do
      {
        v17 = *(_QWORD *)(*(_QWORD *)(a1 + 8 * v14 + 32) + 16);
        v18 = *(_QWORD *)(v17 + 16);
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v15 = sub_24A1EB460(0, *((_QWORD *)v15 + 2) + 1, 1, v15);
        v20 = *((_QWORD *)v15 + 2);
        v19 = *((_QWORD *)v15 + 3);
        if (v20 >= v19 >> 1)
          v15 = sub_24A1EB460((char *)(v19 > 1), v20 + 1, 1, v15);
        *((_QWORD *)v15 + 2) = v20 + 1;
        v15[v20 + 32] = v18 > 0;
        if (v18 >= 1)
        {
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v6 = sub_24A173758(0, v6[2] + 1, 1, v6);
          v22 = v6[2];
          v21 = v6[3];
          if (v22 >= v21 >> 1)
            v6 = sub_24A173758((_QWORD *)(v21 > 1), v22 + 1, 1, v6);
          v6[2] = v22 + 1;
          v6[v22 + 4] = v17;
          v16 = swift_bridgeObjectRetain();
          sub_24A1472A0(v16);
        }
        ++v14;
        swift_release();
      }
      while (v2 != v14);
    }
    swift_bridgeObjectRelease();
    return (uint64_t)v6;
  }
  __break(1u);
  return result;
}

void sub_24A1E8A3C(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  NSObject *v52;
  os_log_type_t v53;
  _BOOL4 v54;
  uint8_t *v55;
  uint8_t *v56;
  _QWORD *v57;
  const char *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  int64_t v96;
  unint64_t v97;
  int64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  float v102;
  double v103;
  double v104;
  char v105;
  char v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  char v116;
  int v117;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v119;
  unint64_t v120;
  unint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  NSObject *v124;
  os_log_type_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  NSObject *v131;
  os_log_type_t v132;
  uint8_t *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  int64_t v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  void (*v148)(char *, uint64_t, uint64_t);
  void (*v149)(char *, uint64_t);
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  int64_t v158;
  uint64_t (*v159)(void);
  uint64_t (*v160)(uint64_t);
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168[2];
  int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  char v175;
  unsigned __int8 v176;
  uint64_t v177;
  uint64_t *v178;

  v4 = v3;
  v178 = a2;
  v6 = sub_24A215A8C();
  v7 = *(_QWORD **)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v134 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v167 = (char *)&v134 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v134 - v14;
  v16 = *(_QWORD *)(*(_QWORD *)v2 + 352);
  v17 = *(_QWORD *)(((uint64_t (*)(uint64_t))v16)(v13) + 16);
  swift_bridgeObjectRelease();
  if (!v17)
  {
    sub_24A14C404();
    swift_allocError();
    *v57 = 0xD000000000000029;
    v58 = "Cannot predict. No enrolled phrases found";
LABEL_24:
    v57[1] = (unint64_t)(v58 - 32) | 0x8000000000000000;
    swift_willThrow();
    return;
  }
  v159 = (uint64_t (*)(void))v16;
  if ((a1 & 0xC000000000000001) != 0)
  {
    MEMORY[0x24BD09BE8](0, a1);
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release_n();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v148(v150, v147, v16);
      v131 = sub_24A215A74();
      v132 = sub_24A216104();
      if (os_log_type_enabled(v131, v132))
      {
        v133 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v133 = 0;
        _os_log_impl(&dword_24A12D000, v131, v132, "Cannot generate prediction from AVS VerifierModel.", v133, 2u);
        MEMORY[0x24BD0AAAC](v133, -1, -1);
      }

      v149(v150, v16);
      static VAVerifierModelOutput.none.getter(v178);

      return;
    }
    swift_unknownObjectRetain();
  }
  type metadata accessor for EncoderPredictionAVS();
  v18 = swift_dynamicCastClass();
  swift_unknownObjectRelease();
  if (!v18)
  {
    sub_24A14C404();
    swift_allocError();
    *v57 = 0xD00000000000001ELL;
    v58 = "Unexpected encoder return type";
    goto LABEL_24;
  }
  v150 = v10;
  v161 = v6;
  sub_24A1E99D8(a1);
  v19 = *(uint64_t (**)(void))(*(_QWORD *)v2 + 712);
  v166 = v2;
  v165 = v19();
  v16 = v20;
  v22 = v21;
  swift_bridgeObjectRelease();
  v23 = *(_QWORD *)(v22 + 16);
  if (!v23)
  {
LABEL_110:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_111:
    swift_bridgeObjectRelease();
    __break(1u);
    return;
  }
  v24 = *(_BYTE *)(v23 + v22 + 31);
  v25 = swift_bridgeObjectRelease();
  if ((v24 & 1) == 0 || !*(_QWORD *)(v165 + 16))
  {
LABEL_27:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static VAVerifierModelOutput.none.getter(v178);
    return;
  }
  v160 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v166 + 304);
  v26 = v160(v25);
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 440))(v16);
  v29 = v28;
  swift_release();
  if ((v27 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  v30 = *(_QWORD *)(v29 + 16);
  if (!v30)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  v26 = *(_QWORD *)(v29 + 8 * v30 + 24);
  swift_bridgeObjectRelease();
  if ((v26 & 0x8000000000000000) != 0)
  {
LABEL_102:
    __break(1u);
    goto LABEL_103;
  }
  if (*(_QWORD *)(v16 + 16) < v26)
  {
LABEL_103:
    __break(1u);
LABEL_104:
    swift_bridgeObjectRelease();
    v34 = sub_24A14A964(v16, v16 + 32, 0, (2 * v26) | 1);
    goto LABEL_18;
  }
  v31 = sub_24A2165C0();
  swift_unknownObjectRetain_n();
  v32 = swift_dynamicCastClass();
  if (!v32)
  {
    swift_bridgeObjectRelease();
    v32 = MEMORY[0x24BEE4AF8];
  }
  v33 = *(_QWORD *)(v32 + 16);
  swift_release();
  v140 = v31;
  if (v33 != v26)
    goto LABEL_104;
  v34 = swift_dynamicCastClass();
  if (!v34)
  {
    swift_bridgeObjectRelease();
    v34 = MEMORY[0x24BEE4AF8];
  }
LABEL_18:
  v35 = swift_bridgeObjectRelease();
  v36 = v160;
  v37 = v160(v35);
  v38 = (*(float (**)(uint64_t))(*(_QWORD *)v37 + 216))(v37);
  v39 = swift_release();
  v40 = v36(v39);
  v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 240))(v40);
  swift_release();
  v42 = sub_24A174CA8();
  v43 = sub_24A174CB0();
  v44 = sub_24A174CC0();
  v45 = sub_24A174CC8(v34, v41, v42, v44, v38, v43);
  if (!v45[2] || !*(_QWORD *)(v46 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
LABEL_29:
    swift_bridgeObjectRelease();
    v59 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_91;
  }
  v47 = sub_24A1753E8((uint64_t)v45, v46, 80);
  v49 = v48;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v50 = sub_24A1B9D90();
  v51 = (void (*)(char *, uint64_t, uint64_t))v7[2];
  v147 = v50;
  v16 = v161;
  v148 = v51;
  ((void (*)(char *))v51)(v15);
  swift_bridgeObjectRetain();
  v52 = sub_24A215A74();
  v53 = sub_24A2160F8();
  v54 = os_log_type_enabled(v52, v53);
  v155 = v47;
  if (v54)
  {
    v55 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v55 = 134217984;
    v168[0] = *(_QWORD *)(v47 + 16);
    sub_24A216260();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24A12D000, v52, v53, "[n_segs] (clusterWindows+getMetaClusters): %ld", v55, 0xCu);
    v56 = v55;
    v16 = v161;
    MEMORY[0x24BD0AAAC](v56, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease();
  }
  v149 = (void (*)(char *, uint64_t))v7[1];
  v149(v15, v16);
  v60 = *(_QWORD *)(v49 + 16);
  if (!v60)
    goto LABEL_111;
  v61 = *(_QWORD *)(v49 + 8 * v60 + 24);
  v62 = swift_bridgeObjectRelease();
  v63 = v160(v62);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 312))(v63);
  swift_release();
  v64 = __OFADD__(v61, v17);
  v65 = v61 + v17;
  if (v64)
  {
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }
  v66 = *(_QWORD *)(v34 + 16);
  v67 = (_QWORD *)swift_release();
  if (v66 >= v65)
    v69 = v65;
  else
    v69 = v66;
  v70 = *(_QWORD *)(v155 + 16);
  if (!v70)
  {
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  v71 = 0;
  v72 = 0;
  v153 = v155 + 32;
  v137 = (2 * v69) | 1;
  v136 = v165 + 32;
  v138 = v70 - 1;
  *(_QWORD *)&v68 = 134218754;
  v142 = v68;
  v141 = MEMORY[0x24BEE4AD8] + 8;
  v163 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v162 = v69;
  v151 = v70;
  while (2)
  {
    v73 = v72;
    while (1)
    {
      if (v73 >= *(_QWORD *)(v155 + 16))
        goto LABEL_95;
      v74 = *(_QWORD *)(v153 + 8 * v73);
      v64 = __OFSUB__(v69, v74);
      v75 = v69 - v74;
      if (v64)
        goto LABEL_96;
      v164 = v73;
      v76 = v166;
      v77 = v160((uint64_t)v67);
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 192))(v77);
      v67 = (_QWORD *)swift_release();
      if (v17 < v75)
      {
        v67 = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD *))(*(_QWORD *)v76 + 256))(v168, v67);
        if (v75 < v177)
          break;
      }
      v73 = v164 + 1;
      v69 = v162;
      if (v151 == v164 + 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v71 & 1) != 0)
          goto LABEL_89;
        goto LABEL_90;
      }
    }
    v78 = v160((uint64_t)v67);
    v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 288))(v78);
    swift_release();
    if (__OFSUB__(v74, v79))
      goto LABEL_107;
    v15 = (char *)((v74 - v79) & ~((v74 - v79) >> 63));
    v69 = v162;
    v80 = v162 - (_QWORD)v15;
    if (v162 < (uint64_t)v15)
    {
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
      goto LABEL_110;
    }
    v81 = *(_QWORD *)(v165 + 16);
    if (v81 < (unint64_t)v15 || (uint64_t)v81 < v162)
      goto LABEL_109;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain_n();
    v83 = swift_dynamicCastClass();
    if (!v83)
    {
      swift_bridgeObjectRelease();
      v83 = MEMORY[0x24BEE4AF8];
    }
    v84 = *(_QWORD *)(v83 + 16);
    swift_release();
    if (v84 == v80)
    {
      v139 = swift_dynamicCastClass();
      if (!v139)
      {
        swift_bridgeObjectRelease();
        v139 = MEMORY[0x24BEE4AF8];
      }
    }
    else
    {
      v129 = v165;
      swift_bridgeObjectRelease();
      v139 = sub_24A14A7E4(v129, v136, (uint64_t)v15, v137);
    }
    swift_bridgeObjectRelease();
    if ((v71 & 1) != 0)
      swift_bridgeObjectRelease();
    v85 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v166 + 280);
    v86 = v139;
    v87 = swift_bridgeObjectRetain();
    v17 = v85(v87);
    v26 = v159();
    v88 = (*(uint64_t (**)(uint64_t, unint64_t))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)v17) + 0x68))(v86, v26);
    if (v4)
      goto LABEL_97;
    v89 = v88;
    v154 = v15;
    v135 = v164 + 1;

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v90 = 0;
    v91 = *(_QWORD *)(v89 + 64);
    v143 = v89 + 64;
    v92 = 1 << *(_BYTE *)(v89 + 32);
    if (v92 < 64)
      v93 = ~(-1 << v92);
    else
      v93 = -1;
    v94 = v93 & v91;
    v144 = (unint64_t)(v92 + 63) >> 6;
    v146 = 0;
    v7 = v163;
    v145 = v89;
    while (1)
    {
      if (v94)
      {
        v157 = (v94 - 1) & v94;
        v158 = v90;
        v95 = __clz(__rbit64(v94)) | (v90 << 6);
        goto LABEL_79;
      }
      v96 = v90 + 1;
      if (__OFADD__(v90, 1))
      {
        __break(1u);
        goto LABEL_101;
      }
      if (v96 >= v144)
        break;
      v97 = *(_QWORD *)(v143 + 8 * v96);
      v98 = v90 + 1;
      if (!v97)
      {
        v98 = v90 + 2;
        if (v90 + 2 >= v144)
          break;
        v97 = *(_QWORD *)(v143 + 8 * v98);
        if (!v97)
        {
          v98 = v90 + 3;
          if (v90 + 3 >= v144)
            break;
          v97 = *(_QWORD *)(v143 + 8 * v98);
          if (!v97)
          {
            v99 = v90 + 4;
            if (v90 + 4 >= v144)
              break;
            v97 = *(_QWORD *)(v143 + 8 * v99);
            v98 = v90 + 4;
            if (!v97)
            {
              while (1)
              {
                v98 = v99 + 1;
                if (__OFADD__(v99, 1))
                  break;
                if (v98 >= v144)
                  goto LABEL_85;
                v97 = *(_QWORD *)(v143 + 8 * v98);
                ++v99;
                if (v97)
                  goto LABEL_78;
              }
              __break(1u);
              goto LABEL_106;
            }
          }
        }
      }
LABEL_78:
      v157 = (v97 - 1) & v97;
      v158 = v98;
      v95 = __clz(__rbit64(v97)) + (v98 << 6);
LABEL_79:
      v100 = (uint64_t *)(*(_QWORD *)(v89 + 48) + 16 * v95);
      v101 = *v100;
      v15 = (char *)v100[1];
      v102 = *(float *)(*(_QWORD *)(v89 + 56) + 4 * v95);
      swift_bridgeObjectRetain_n();
      v103 = sub_24A1DF918();
      v104 = sub_24A1DF918();
      v105 = sub_24A1516F0();
      v106 = sub_24A1516F0();
      v107 = sub_24A162F28();
      v152 = v101;
      sub_24A1DF928(v101, (uint64_t)v15, (uint64_t)v154, v69, v105 & 1, v106 & 1, v107 & 1, (uint64_t)v168, v102, v103, v104);
      v108 = v168[0];
      v109 = v168[1];
      v110 = v169;
      v111 = v170;
      v112 = v171;
      v113 = v172;
      v114 = v173;
      v115 = v174;
      v116 = v175;
      v117 = v176;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v156 = v117;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        v7 = sub_24A17B434(0, v7[2] + 1, 1, v7);
      v119 = v7;
      v120 = v7[2];
      v163 = v119;
      v121 = v119[3];
      if (v120 >= v121 >> 1)
        v163 = sub_24A17B434((_QWORD *)(v121 > 1), v120 + 1, 1, v163);
      v122 = v163;
      v163[2] = v120 + 1;
      v123 = &v122[8 * v120];
      v7 = v122;
      v123[4] = v108;
      v123[5] = v109;
      *((_DWORD *)v123 + 12) = v110;
      v123[7] = v111;
      v123[8] = v112;
      v123[9] = v113;
      v123[10] = v114;
      *((_BYTE *)v123 + 88) = v115;
      *((_BYTE *)v123 + 89) = v116;
      *((_BYTE *)v123 + 90) = v156;
      v26 = (unint64_t)v167;
      v16 = v161;
      v148(v167, v147, v161);
      swift_bridgeObjectRetain();
      v124 = sub_24A215A74();
      v125 = sub_24A2160F8();
      v17 = v125;
      if (os_log_type_enabled(v124, v125))
      {
        v126 = swift_slowAlloc();
        v127 = swift_slowAlloc();
        v168[0] = v127;
        *(_DWORD *)v126 = v142;
        *(_QWORD *)(v126 + 4) = v154;
        *(_WORD *)(v126 + 12) = 2048;
        v69 = v162;
        *(_QWORD *)(v126 + 14) = v162;
        *(_WORD *)(v126 + 22) = 2080;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v126 + 24) = sub_24A148270(v152, (unint64_t)v15, v168);
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v126 + 32) = 2048;
        *(double *)(v126 + 34) = v102;
        _os_log_impl(&dword_24A12D000, v124, (os_log_type_t)v17, "\t[scores][%ld][%ld]: %s: %f", (uint8_t *)v126, 0x2Au);
        swift_arrayDestroy();
        v128 = v127;
        v7 = v163;
        MEMORY[0x24BD0AAAC](v128, -1, -1);
        MEMORY[0x24BD0AAAC](v126, -1, -1);

        v149((char *)v26, v16);
        v4 = v146;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        v149((char *)v26, v16);
        v4 = v146;
        v69 = v162;
      }
      v89 = v145;
      v90 = v158;
      v94 = v157;
    }
LABEL_85:
    v163 = v7;
    swift_release();
    v71 = 1;
    v67 = (_QWORD *)v139;
    v72 = v135;
    if (v138 != v164)
      continue;
    break;
  }
  swift_release();
  swift_bridgeObjectRelease();
LABEL_89:
  swift_bridgeObjectRelease();
LABEL_90:
  v59 = v163;
LABEL_91:
  type metadata accessor for VAKeywordResult();
  v130 = VAKeywordResult.__allocating_init(detections:)((uint64_t)v59);
  sub_24A1CE3A0(v130, v178);
}

uint64_t sub_24A1E99D8(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = a1;
  if (!(a1 >> 62))
  {
    v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    sub_24A2165B4();
    type metadata accessor for EncoderPredictionAVS();
    if (swift_dynamicCastMetatype())
      return v1;
    v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
      return v1;
    v5 = 0;
    while (v5 < v4)
    {
      swift_unknownObjectRetain();
      if (!swift_dynamicCastClass())
      {
        swift_unknownObjectRelease();
        return v2 | 1;
      }
      ++v5;
      swift_unknownObjectRelease();
      v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v5 == v4)
        return v1;
    }
    __break(1u);
  }
  type metadata accessor for EncoderPredictionAVS();
  swift_bridgeObjectRetain();
  v6 = sub_24A2163F8();
  swift_bridgeObjectRelease();
  return v6;
}

void sub_24A1E9AE0()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_24A1E9B0C()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t VAAVSVerifierModel.deinit()
{
  uint64_t v0;

  v0 = VAVerifierModel.deinit();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VAAVSVerifierModel.__deallocating_deinit()
{
  VAAVSVerifierModel.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_24A1E9BC8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 720))();
}

uint64_t VAAVSVerifierModel.makeRuntimeParameters()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  __int128 v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char v40;
  char v41;
  char v42;
  uint64_t v43;
  char v44;
  char v45;
  int v46;
  char v47;
  __int16 v48;
  char v49;
  char v50;
  char v51;
  char v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  int64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  char v68;
  char v69;
  __int128 v70;
  char v71;
  uint64_t v72;
  char v73;
  char v74;
  int v75;
  char v76;
  __int128 v77;
  __int16 v78;
  char v79;
  char v80;
  char v81;
  unsigned __int8 v82;
  char v83;

  v55 = a1;
  v2 = sub_24A215A8C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  VARuntimeParameters.init()((uint64_t)&v66);
  result = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 664))();
  v8 = result;
  v9 = 0;
  v10 = *(_QWORD *)(result + 64);
  v59 = result + 64;
  v11 = 1 << *(_BYTE *)(result + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v60 = (unint64_t)(v11 + 63) >> 6;
  v63 = (_QWORD *)MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v7 = 136315394;
  v57 = v7;
  v56 = MEMORY[0x24BEE4AD8] + 8;
  v58 = result;
  while (1)
  {
    if (v13)
    {
      v61 = (v13 - 1) & v13;
      v62 = v9;
      v14 = __clz(__rbit64(v13)) | (v9 << 6);
      goto LABEL_22;
    }
    v15 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v15 >= v60)
      goto LABEL_28;
    v16 = *(_QWORD *)(v59 + 8 * v15);
    v17 = v9 + 1;
    if (!v16)
    {
      v17 = v9 + 2;
      if (v9 + 2 >= v60)
        goto LABEL_28;
      v16 = *(_QWORD *)(v59 + 8 * v17);
      if (!v16)
      {
        v17 = v9 + 3;
        if (v9 + 3 >= v60)
          goto LABEL_28;
        v16 = *(_QWORD *)(v59 + 8 * v17);
        if (!v16)
          break;
      }
    }
LABEL_21:
    v61 = (v16 - 1) & v16;
    v62 = v17;
    v14 = __clz(__rbit64(v16)) + (v17 << 6);
LABEL_22:
    v19 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v14);
    v20 = v19[1];
    v21 = *(float *)(*(_QWORD *)(v8 + 56) + 4 * v14);
    v64 = *v19;
    v65 = v20;
    swift_bridgeObjectRetain();
    sub_24A215D98();
    v22 = v64;
    v23 = v65;
    sub_24A216038();
    v64 = v22;
    v65 = v23;
    swift_bridgeObjectRetain();
    sub_24A215D98();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25 = v64;
    v24 = v65;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v63 = sub_24A14804C(0, v63[2] + 1, 1, v63);
    v27 = v63[2];
    v26 = v63[3];
    if (v27 >= v26 >> 1)
      v63 = sub_24A14804C((_QWORD *)(v26 > 1), v27 + 1, 1, v63);
    v28 = v63;
    v63[2] = v27 + 1;
    v29 = &v28[2 * v27];
    v29[4] = v25;
    v29[5] = v24;
    v30 = sub_24A1B9D90();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v30, v2);
    swift_bridgeObjectRetain();
    v31 = sub_24A215A74();
    v32 = sub_24A2160F8();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = swift_slowAlloc();
      v34 = v5;
      v35 = v3;
      v36 = v2;
      v37 = swift_slowAlloc();
      v64 = v37;
      *(_DWORD *)v33 = v57;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v33 + 4) = sub_24A148270(v25, v24, &v64);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v33 + 12) = 2048;
      *(double *)(v33 + 14) = v21;
      _os_log_impl(&dword_24A12D000, v31, v32, "Command %s set to %f", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      v38 = v37;
      v2 = v36;
      v3 = v35;
      v5 = v34;
      v8 = v58;
      MEMORY[0x24BD0AAAC](v38, -1, -1);
      MEMORY[0x24BD0AAAC](v33, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v13 = v61;
    v9 = v62;
  }
  v18 = v9 + 4;
  if (v9 + 4 >= v60)
  {
LABEL_28:
    swift_release();
    swift_bridgeObjectRelease();
    v39 = v67;
    v40 = v68;
    v41 = v69;
    v42 = v71;
    v43 = v72;
    v44 = v73;
    v45 = v74;
    v46 = v75;
    v47 = v76;
    v48 = v78;
    v49 = v79;
    v50 = v80;
    v51 = v81;
    result = v82;
    v52 = v83;
    v53 = v55;
    *v55 = v63;
    *((_DWORD *)v53 + 2) = v39;
    *((_BYTE *)v53 + 12) = v40;
    *((_BYTE *)v53 + 13) = v41;
    *((_OWORD *)v53 + 1) = v70;
    *((_BYTE *)v53 + 32) = v42;
    v53[5] = v43;
    *((_BYTE *)v53 + 48) = v44;
    *((_BYTE *)v53 + 49) = v45;
    *((_DWORD *)v53 + 13) = v46;
    *((_BYTE *)v53 + 56) = v47;
    *((_OWORD *)v53 + 4) = v77;
    *((_WORD *)v53 + 40) = v48;
    *((_BYTE *)v53 + 82) = v49;
    *((_BYTE *)v53 + 83) = v50;
    *((_BYTE *)v53 + 84) = v51;
    *((_BYTE *)v53 + 85) = result;
    *((_BYTE *)v53 + 86) = v52;
    return result;
  }
  v16 = *(_QWORD *)(v59 + 8 * v18);
  if (v16)
  {
    v17 = v9 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v17 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v17 >= v60)
      goto LABEL_28;
    v16 = *(_QWORD *)(v59 + 8 * v17);
    ++v18;
    if (v16)
      goto LABEL_21;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_24A1EA0B8@<X0>(_QWORD *a1@<X8>)
{
  return VAAVSVerifierModel.makeRuntimeParameters()(a1);
}

uint64_t sub_24A1EA0D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  unint64_t v35;
  char v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(unsigned __int8 *);
  void (*v46)(unsigned __int8 *, _QWORD);
  uint64_t *v47;
  uint64_t *v48;
  char isUniquelyReferenced_nonNull_native;
  void (*v50)(unsigned __int8 *, _QWORD);
  unint64_t *v51;
  unint64_t *v52;
  unint64_t v53;
  char v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t result;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 v66[32];

  v3 = v1;
  v5 = type metadata accessor for VASingleEnrollmentData();
  v61 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v60 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v59 = (char *)&v58 - v9;
  v10 = (uint64_t *)(a1 + *(int *)(v8 + 24));
  v12 = *v10;
  v11 = v10[1];
  v13 = *(uint64_t (**)(void))(*(_QWORD *)v1 + 352);
  v14 = swift_bridgeObjectRetain_n();
  v15 = ((uint64_t (*)(uint64_t))v13)(v14);
  v16 = *(_QWORD *)(v15 + 16);
  v63 = v2;
  v64 = v12;
  if (v16 && (v17 = sub_24A148970(v12, v11), (v18 & 1) != 0))
  {
    v19 = *(_QWORD **)(*(_QWORD *)(v15 + 56) + 8 * v17);
    swift_retain();
    swift_bridgeObjectRelease();
    v20 = swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for AVSCommand();
    v19 = (_QWORD *)swift_allocObject();
    v21 = MEMORY[0x24BEE4AF8];
    v19[3] = v11;
    v19[4] = v21;
    v19[2] = v12;
    v20 = swift_bridgeObjectRetain();
  }
  v22 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 280))(v20);
  v23 = *(int *)(v5 + 20);
  v62 = a1;
  v24 = *(_QWORD *)(a1 + v23);
  v25 = v13();
  v26 = (*(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v22) + 0x60))(v24, v25);
  v28 = v27;

  v29 = swift_bridgeObjectRelease();
  v30 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*v19 + 120))(v29) + 16);
  v31 = swift_bridgeObjectRelease();
  if (v30 < (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 640))(v31) || !*(_QWORD *)(v26 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v32 = v64;
    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  v32 = v64;
  sub_24A148970(v64, v11);
  v34 = v33;
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (*(_QWORD *)(v26 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v35 = sub_24A148970(v32, v11);
    if ((v36 & 1) != 0)
    {
      v37 = *(float *)(*(_QWORD *)(v26 + 56) + 4 * v35);
      swift_bridgeObjectRelease();
      v38 = swift_bridgeObjectRelease();
      v39 = (*(float (**)(uint64_t))(*(_QWORD *)v3 + 592))(v38);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v37 < v39 || v28 == -99999.0)
      {
        swift_bridgeObjectRelease();
        v41 = v62;
        v42 = (uint64_t)v59;
        goto LABEL_20;
      }
LABEL_17:
      v43 = *(int *)(v5 + 40);
      v44 = v62;
      v66[0] = *(_BYTE *)(v62 + v43);
      LOBYTE(v65) = 1;
      if (static VASingleEnrollmentStatus.== infix(_:_:)(v66, (unsigned __int8 *)&v65))
      {
        (*(void (**)(uint64_t))(*v19 + 152))(v44);
        v45 = *(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v3 + 368);
        swift_retain();
        v46 = (void (*)(unsigned __int8 *, _QWORD))v45(v66);
        v48 = v47;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v65 = *v48;
        *v48 = 0x8000000000000000;
        sub_24A1EB9C0((uint64_t)v19, v32, v11, isUniquelyReferenced_nonNull_native);
        *v48 = v65;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v46(v66, 0);
        return swift_release();
      }
      swift_bridgeObjectRelease();
      v41 = v44;
      v42 = (uint64_t)v60;
LABEL_20:
      sub_24A1A85E8(v41, v42);
      v50 = (void (*)(unsigned __int8 *, _QWORD))(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v3 + 584))(v66);
      v52 = v51;
      v53 = *v51;
      v54 = swift_isUniquelyReferenced_nonNull_native();
      *v52 = v53;
      if ((v54 & 1) == 0)
      {
        v53 = sub_24A1A9918(0, *(_QWORD *)(v53 + 16) + 1, 1, v53);
        *v52 = v53;
      }
      v56 = *(_QWORD *)(v53 + 16);
      v55 = *(_QWORD *)(v53 + 24);
      if (v56 >= v55 >> 1)
      {
        v53 = sub_24A1A9918(v55 > 1, v56 + 1, 1, v53);
        *v52 = v53;
      }
      *(_QWORD *)(v53 + 16) = v56 + 1;
      sub_24A1A9B20(v42, v53+ ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80))+ *(_QWORD *)(v61 + 72) * v56);
      v50(v66, 0);
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> VAAVSVerifierModel.setAudioEnrollments(enrollments:)(Swift::OpaquePointer enrollments)
{
  uint64_t *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  __int128 v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t i;
  BOOL v36;
  unint64_t v37;
  int64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int32x2_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  _BOOL4 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  void (*v73)(uint64_t *__return_ptr, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  float v81;
  float v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  float v94;
  uint64_t v95;
  float v96;
  uint64_t v97;
  uint64_t v98;
  float (*v99)(void);
  uint64_t v100;
  float v101;
  unint64_t v102;
  float (*v103)(void);
  uint64_t v104;
  float (*v105)(void);
  uint64_t v106;
  float v107;
  float v109;
  uint64_t v110;
  char *v111;
  NSObject *v112;
  os_log_type_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  float v118;
  uint64_t (*v119)(uint64_t *);
  void (*v120)(uint64_t *, _QWORD);
  double *v121;
  double *v122;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t (*v133)(uint64_t *);
  uint64_t v134;
  void (*v135)(uint64_t *, _QWORD);
  double *v136;
  double *v137;
  char v138;
  _QWORD v139[2];
  __int128 v140;
  uint64_t *v141;
  uint64_t v142;
  int64_t v143;
  uint64_t (*v144)(uint64_t);
  uint64_t v145;
  char *v146;
  unint64_t v147;
  int64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  char *v158;
  unint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  unint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  double v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  double v171;
  uint64_t v172;
  float v173;
  uint64_t v174[4];
  uint64_t v175;

  v166 = type metadata accessor for VASingleEnrollmentData();
  v4 = *(_QWORD *)(v166 - 8);
  v5 = MEMORY[0x24BDAC7A8](v166);
  v150 = (uint64_t)v139 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v149 = (uint64_t)v139 - v7;
  v156 = sub_24A215A8C();
  v162 = *(_QWORD *)(v156 - 8);
  v8 = MEMORY[0x24BDAC7A8](v156);
  v10 = (char *)v139 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v146 = (char *)v139 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v158 = (char *)v139 - v13;
  v14 = MEMORY[0x24BEE4AF8];
  (*(void (**)(_QWORD))(*v1 + 336))(MEMORY[0x24BEE4AF8]);
  v15 = MEMORY[0x24BEE4B00];
  (*(void (**)(_QWORD))(*v1 + 360))(MEMORY[0x24BEE4B00]);
  (*(void (**)(uint64_t))(*v1 + 576))(v14);
  v16 = *(uint64_t (**)(uint64_t))(*v1 + 672);
  v165 = v1;
  v17 = v16(v15);
  v18 = *((_QWORD *)enrollments._rawValue + 2);
  v155 = v4;
  if (v18)
  {
    v19 = (char *)enrollments._rawValue
        + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v20 = *(_QWORD *)(v4 + 72);
    do
    {
      v17 = sub_24A1EA0D8((uint64_t)v19);
      if (v2)
      {
        v21 = sub_24A1B9D90();
        (*(void (**)(char *, uint64_t, uint64_t))(v162 + 16))(v10, v21, v156);
        v22 = sub_24A215A74();
        v23 = sub_24A216104();
        if (os_log_type_enabled(v22, v23))
        {
          v24 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v24 = 0;
          _os_log_impl(&dword_24A12D000, v22, v23, "Error adding enrollment.", v24, 2u);
          MEMORY[0x24BD0AAAC](v24, -1, -1);
        }

        v17 = (*(uint64_t (**)(char *, uint64_t))(v162 + 8))(v10, v156);
        v2 = 0;
      }
      v19 += v20;
      --v18;
    }
    while (v18);
  }
  v139[0] = v2;
  v144 = *(uint64_t (**)(uint64_t))(*v165 + 352);
  v25 = v144(v17);
  v27 = 0;
  v28 = *(_QWORD *)(v25 + 64);
  v142 = v25 + 64;
  v145 = v25;
  v29 = 1 << *(_BYTE *)(v25 + 32);
  v30 = -1;
  if (v29 < 64)
    v30 = ~(-1 << v29);
  v31 = v30 & v28;
  v143 = (unint64_t)(v29 + 63) >> 6;
  v141 = &v172;
  *(_QWORD *)&v26 = 136315650;
  v140 = v26;
  v139[1] = MEMORY[0x24BEE4AD8] + 8;
  *(_QWORD *)&v26 = 134217984;
  v154 = v26;
  v32 = v162;
  if ((v30 & v28) == 0)
    goto LABEL_12;
LABEL_11:
  v33 = __clz(__rbit64(v31));
  v34 = (v31 - 1) & v31;
  for (i = v33 | (v27 << 6); ; i = __clz(__rbit64(v37)) + (v27 << 6))
  {
    v39 = (uint64_t *)(*(_QWORD *)(v145 + 48) + 16 * i);
    v41 = *v39;
    v40 = v39[1];
    v42 = *(_QWORD *)(*(_QWORD *)(v145 + 56) + 8 * i);
    swift_bridgeObjectRetain_n();
    v43 = swift_retain();
    v44 = v144(v43);
    if (!*(_QWORD *)(v44 + 16))
      break;
    v152 = v41;
    v45 = sub_24A148970(v41, v40);
    if ((v46 & 1) == 0)
      goto LABEL_96;
    v147 = v34;
    v148 = v27;
    v47 = *(_QWORD *)(*(_QWORD *)(v44 + 56) + 8 * v45);
    swift_retain();
    v153 = v40;
    swift_bridgeObjectRelease();
    v48 = swift_bridgeObjectRelease();
    v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 120))(v48);
    swift_release();
    v50 = *(_QWORD *)(v49 + 16);
    v51.i32[0] = 0;
    v52 = sub_24A1420E4(v50, v51);
    v151 = v42;
    v161 = v49;
    if (v50)
    {
      v53 = 0;
      v159 = v49 + ((*(unsigned __int8 *)(v155 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v155 + 80));
      v54 = (char *)MEMORY[0x24BEE4AF8];
      v163 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v164 = v50;
      while (v53 < *(_QWORD *)(v49 + 16))
      {
        v170 = *(_QWORD *)(v155 + 72);
        *(_QWORD *)&v167 = *(int *)(v166 + 20);
        v168 = v159 + v170 * v53;
        v55 = *(_QWORD *)(*(_QWORD *)(v168 + *(_QWORD *)&v167) + 16);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v163 = sub_24A15037C(0, v163[2] + 1, 1, v163);
        v57 = v163[2];
        v56 = v163[3];
        v160 = v54;
        if (v57 >= v56 >> 1)
          v163 = sub_24A15037C((_QWORD *)(v56 > 1), v57 + 1, 1, v163);
        v58 = v163;
        v163[2] = v57 + 1;
        v58[v57 + 4] = v55;
        v59 = sub_24A1B9D90();
        v60 = v162;
        v61 = v156;
        (*(void (**)(char *, uint64_t, uint64_t))(v162 + 16))(v158, v59, v156);
        swift_bridgeObjectRetain();
        v62 = sub_24A215A74();
        v63 = sub_24A2160F8();
        v64 = os_log_type_enabled(v62, v63);
        v169 = v53;
        if (v64)
        {
          v65 = v52;
          v66 = swift_slowAlloc();
          *(_DWORD *)v66 = v154;
          *(_QWORD *)(v66 + 4) = *(_QWORD *)(*(_QWORD *)(v168 + *(_QWORD *)&v167) + 16);
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_24A12D000, v62, v63, "Command length %ld", (uint8_t *)v66, 0xCu);
          v67 = v66;
          v52 = v65;
          v53 = v169;
          MEMORY[0x24BD0AAAC](v67, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease();
        }
        v157 = v53 + 1;
        (*(void (**)(char *, uint64_t))(v60 + 8))(v158, v61);
        v68 = 0;
        v69 = v159;
        v54 = v160;
        do
        {
          if (v53 != v68)
          {
            v70 = v52;
            v71 = *(_QWORD *)(v168 + *(_QWORD *)&v167);
            v72 = v54;
            v73 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*v165 + 256);
            v74 = swift_bridgeObjectRetain();
            v73(v174, v74);
            sub_24A17526C(v71, v175);
            v76 = v75;
            swift_bridgeObjectRelease();
            v77 = *(_QWORD *)(v69 + *(int *)(v166 + 20));
            v78 = swift_bridgeObjectRetain();
            v73(v174, v78);
            v54 = v72;
            sub_24A17526C(v77, v175);
            v80 = v79;
            swift_bridgeObjectRelease();
            sub_24A1D5CE0(v76, v80);
            v82 = v81;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v54 = sub_24A147E34(0, *((_QWORD *)v72 + 2) + 1, 1, v72);
            v84 = *((_QWORD *)v54 + 2);
            v83 = *((_QWORD *)v54 + 3);
            v52 = v70;
            v50 = v164;
            if (v84 >= v83 >> 1)
              v54 = sub_24A147E34((char *)(v83 > 1), v84 + 1, 1, v54);
            v53 = v169;
            *((_QWORD *)v54 + 2) = v84 + 1;
            *(float *)&v54[4 * v84 + 32] = -v82;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v52 = (uint64_t)sub_24A148928(v52);
            if (v53 >= *(_QWORD *)(v52 + 16))
            {
              __break(1u);
              goto LABEL_87;
            }
            *(float *)(v52 + 4 * v53 + 32) = *(float *)(v52 + 4 * v53 + 32) - v82;
          }
          ++v68;
          v69 += v170;
        }
        while (v50 != v68);
        v53 = v157;
        v49 = v161;
        v32 = v162;
        if (v157 == v50)
          goto LABEL_49;
      }
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
      goto LABEL_93;
    }
    v54 = (char *)MEMORY[0x24BEE4AF8];
    v163 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_49:
    v85 = v163[2];
    if (!v85)
      goto LABEL_90;
    v86 = 0;
    v87 = 0;
    v88 = v165;
    do
    {
      v89 = v163[v86 + 4];
      v36 = __OFADD__(v87, v89);
      v87 += v89;
      if (v36)
      {
        __break(1u);
        goto LABEL_89;
      }
      ++v86;
    }
    while (v85 != v86);
    v90 = sub_24A1C1D00(v52);
    if ((v90 & 0x100000000) != 0)
      goto LABEL_97;
    v170 = v52;
    v91 = *(_QWORD *)(v52 + 16);
    if (!v91)
      goto LABEL_94;
    v92 = 0;
    if (*(float *)(v170 + 32) != *(float *)&v90)
    {
      v93 = v91 - 1;
      while (v93 != v92)
      {
        v94 = *(float *)(v170 + 36 + 4 * v92++);
        if (v94 == *(float *)&v90)
          goto LABEL_59;
      }
      goto LABEL_94;
    }
LABEL_59:
    v95 = v87 / v85;
    v96 = (*(float (**)(void))(*v88 + 400))() * *(float *)&v90;
    v173 = v96;
    v97 = (*(uint64_t (**)(void))(*v88 + 496))();
    v98 = *v88;
    if (v97 >= v87 / v85)
    {
      v105 = *(float (**)(void))(v98 + 520);
      v107 = v105();
      v102 = v153;
      if (v96 < v107)
      {
        v96 = v105();
        v106 = swift_beginAccess();
        v173 = v96;
      }
      v103 = *(float (**)(void))(*v88 + 544);
      if (((float (*)(uint64_t))v103)(v106) < v96)
      {
LABEL_67:
        v96 = v103();
        v104 = swift_beginAccess();
        v173 = v96;
      }
    }
    else
    {
      v99 = *(float (**)(void))(v98 + 424);
      v101 = v99();
      v102 = v153;
      if (v96 < v101)
      {
        v96 = v99();
        v100 = swift_beginAccess();
        v173 = v96;
      }
      v103 = *(float (**)(void))(*v88 + 448);
      if (((float (*)(uint64_t))v103)(v100) < v96)
        goto LABEL_67;
    }
    v160 = v54;
    if ((~LODWORD(v96) & 0x7F800000) == 0 && (LODWORD(v96) & 0x7FFFFF) != 0)
    {
      v109 = (*(float (**)(uint64_t))(*v88 + 472))(v104);
      swift_beginAccess();
      v173 = v109;
    }
    v110 = sub_24A1B9D90();
    v111 = v146;
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v146, v110, v156);
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    v112 = sub_24A215A74();
    v113 = sub_24A2160F8();
    LODWORD(v169) = v113;
    if (os_log_type_enabled(v112, v113))
    {
      v114 = swift_slowAlloc();
      v115 = swift_slowAlloc();
      v167 = *(double *)&v95;
      v168 = v115;
      v174[0] = v115;
      *(_DWORD *)v114 = v140;
      swift_bridgeObjectRetain();
      v116 = v152;
      v171 = COERCE_DOUBLE(sub_24A148270(v152, v102, v174));
      sub_24A216260();
      swift_release_n();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v114 + 12) = 2048;
      v171 = v167;
      sub_24A216260();
      *(_WORD *)(v114 + 22) = 2048;
      swift_beginAccess();
      v171 = v173;
      v102 = v153;
      sub_24A216260();
      _os_log_impl(&dword_24A12D000, v112, (os_log_type_t)v169, "Mean command length for %s was %ld; set to %f",
        (uint8_t *)v114,
        0x20u);
      v117 = v168;
      swift_arrayDestroy();
      MEMORY[0x24BD0AAAC](v117, -1, -1);
      MEMORY[0x24BD0AAAC](v114, -1, -1);

      (*(void (**)(char *, uint64_t))(v162 + 8))(v146, v156);
    }
    else
    {

      swift_release_n();
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v111, v156);
      v116 = v152;
    }
    swift_beginAccess();
    v118 = v173;
    v119 = *(uint64_t (**)(uint64_t *))(*v88 + 680);
    swift_bridgeObjectRetain();
    v120 = (void (*)(uint64_t *, _QWORD))v119(v174);
    v122 = v121;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v171 = *v122;
    *v122 = -0.0;
    sub_24A1EB86C(v116, v102, isUniquelyReferenced_nonNull_native, v118);
    *v122 = v171;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v120(v174, 0);
    type metadata accessor for AVSCommand();
    v124 = (_QWORD *)swift_allocObject();
    v124[4] = MEMORY[0x24BEE4AF8];
    v125 = v124 + 4;
    v124[2] = v116;
    v124[3] = v102;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v92 >= *(_QWORD *)(v161 + 16))
      goto LABEL_91;
    v126 = (*(unsigned __int8 *)(v155 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v155 + 80);
    v127 = *(_QWORD *)(v155 + 72);
    v128 = v149;
    sub_24A1A85E8(v161 + v126 + v127 * v92, v149);
    swift_bridgeObjectRelease();
    sub_24A1A85E8(v128, v150);
    swift_beginAccess();
    v129 = *v125;
    v130 = swift_isUniquelyReferenced_nonNull_native();
    *v125 = v129;
    if ((v130 & 1) == 0)
    {
      v129 = sub_24A1A9918(0, *(_QWORD *)(v129 + 16) + 1, 1, v129);
      *v125 = v129;
    }
    v132 = *(_QWORD *)(v129 + 16);
    v131 = *(_QWORD *)(v129 + 24);
    if (v132 >= v131 >> 1)
    {
      v129 = sub_24A1A9918(v131 > 1, v132 + 1, 1, v129);
      *v125 = v129;
    }
    *(_QWORD *)(v129 + 16) = v132 + 1;
    sub_24A1A9B20(v150, v129 + v126 + v132 * v127);
    swift_endAccess();
    sub_24A136064(v149, (uint64_t (*)(_QWORD))type metadata accessor for VASingleEnrollmentData);
    v133 = *(uint64_t (**)(uint64_t *))(*v165 + 392);
    v134 = v153;
    swift_bridgeObjectRetain();
    swift_retain();
    v135 = (void (*)(uint64_t *, _QWORD))v133(v174);
    v137 = v136;
    v138 = swift_isUniquelyReferenced_nonNull_native();
    v171 = *v137;
    *v137 = -0.0;
    sub_24A1EB9C0((uint64_t)v124, v152, v134, v138);
    *v137 = v171;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v135(v174, 0);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v31 = v147;
    v27 = v148;
    v32 = v162;
    if (v147)
      goto LABEL_11;
LABEL_12:
    v36 = __OFADD__(v27++, 1);
    if (v36)
      goto LABEL_92;
    if (v27 >= v143)
      goto LABEL_87;
    v37 = *(_QWORD *)(v142 + 8 * v27);
    if (!v37)
    {
      v38 = v27 + 1;
      if (v27 + 1 >= v143)
        goto LABEL_87;
      v37 = *(_QWORD *)(v142 + 8 * v38);
      if (!v37)
      {
        v38 = v27 + 2;
        if (v27 + 2 >= v143)
          goto LABEL_87;
        v37 = *(_QWORD *)(v142 + 8 * v38);
        if (!v37)
        {
          v38 = v27 + 3;
          if (v27 + 3 >= v143)
          {
LABEL_87:
            swift_release();
            return;
          }
          v37 = *(_QWORD *)(v142 + 8 * v38);
          if (!v37)
          {
            while (1)
            {
              v27 = v38 + 1;
              if (__OFADD__(v38, 1))
                break;
              if (v27 >= v143)
                goto LABEL_87;
              v37 = *(_QWORD *)(v142 + 8 * v27);
              ++v38;
              if (v37)
                goto LABEL_22;
            }
LABEL_93:
            __break(1u);
LABEL_94:
            __break(1u);
            break;
          }
        }
      }
      v27 = v38;
    }
LABEL_22:
    v34 = (v37 - 1) & v37;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_96:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_97:
  __break(1u);
}

void sub_24A1EB420(Swift::OpaquePointer a1)
{
  VAAVSVerifierModel.setAudioEnrollments(enrollments:)(a1);
}

uint64_t type metadata accessor for AVSVerifierModel()
{
  return objc_opt_self();
}

char *sub_24A1EB460(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      sub_24A135F88(&qword_25790BC88);
      v10 = (char *)swift_allocObject();
      v11 = j__malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v12 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_24A1868A4(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A1EB558(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  sub_24A135F88(&qword_257912580);
  v36 = a2;
  v6 = sub_24A216434();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    sub_24A216638();
    sub_24A215D50();
    result = sub_24A21665C();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_24A1EB86C(uint64_t a1, uint64_t a2, char a3, float a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v5 = v4;
  v10 = *v4;
  v12 = sub_24A148970(a1, a2);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_24A1E38B0();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(float *)(v18[7] + 4 * v12) = a4;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v20 = (uint64_t *)(v18[6] + 16 * v12);
    *v20 = a1;
    v20[1] = a2;
    *(float *)(v18[7] + 4 * v12) = a4;
    v21 = v18[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v18[2] = v23;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_24A1E35AC(result, a3 & 1);
  result = sub_24A148970(a1, a2);
  if ((v16 & 1) == (v19 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_24A2165CC();
  __break(1u);
  return result;
}

uint64_t sub_24A1EB9C0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_24A148970(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_24A1EBB1C();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_release();
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_24A1EB558(v15, a4 & 1);
  v21 = sub_24A148970(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_24A2165CC();
  __break(1u);
  return result;
}

void *sub_24A1EBB1C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_24A135F88(&qword_257912580);
  v2 = *v0;
  v3 = sub_24A216428();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for AVSCommand()
{
  return objc_opt_self();
}

uint64_t sub_24A1EBCF4()
{
  return swift_bridgeObjectRetain();
}

uint64_t destroy for AVSEnrollmentError()
{
  return sub_24A1EBD0C();
}

uint64_t sub_24A1EBD0C()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s12VoiceActions18AVSEnrollmentErrorOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  sub_24A1EBCF4();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AVSEnrollmentError(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  sub_24A1EBCF4();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_24A1EBD0C();
  return a1;
}

uint64_t assignWithTake for AVSEnrollmentError(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_24A1EBD0C();
  return a1;
}

uint64_t getEnumTagSinglePayload for AVSEnrollmentError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AVSEnrollmentError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_24A1EBE80(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_24A1EBE88(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AVSEnrollmentError()
{
  return &type metadata for AVSEnrollmentError;
}

uint64_t method lookup function for AVSVerifierModel()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for VAAVSVerifierModel()
{
  return objc_opt_self();
}

uint64_t method lookup function for VAAVSVerifierModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAAVSVerifierModel.enrollmentsRejected.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 568))();
}

uint64_t dispatch thunk of VAAVSVerifierModel.enrollmentsRejected.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 576))();
}

uint64_t dispatch thunk of VAAVSVerifierModel.enrollmentsRejected.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 584))();
}

uint64_t dispatch thunk of VAAVSVerifierModel.rejectEnrollmentThreshold.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 592))();
}

uint64_t dispatch thunk of VAAVSVerifierModel.rejectEnrollmentThreshold.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 600))();
}

uint64_t dispatch thunk of VAAVSVerifierModel.rejectEnrollmentThreshold.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 608))();
}

uint64_t dispatch thunk of VAAVSVerifierModel.minEnrollmentsBeforeRejecting.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 640))();
}

uint64_t dispatch thunk of VAAVSVerifierModel.minEnrollmentsBeforeRejecting.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 648))();
}

uint64_t dispatch thunk of VAAVSVerifierModel.minEnrollmentsBeforeRejecting.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 656))();
}

uint64_t dispatch thunk of VAAVSVerifierModel.personalizedKeywordThresholds.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 664))();
}

uint64_t dispatch thunk of VAAVSVerifierModel.personalizedKeywordThresholds.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 672))();
}

uint64_t dispatch thunk of VAAVSVerifierModel.personalizedKeywordThresholds.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 680))();
}

uint64_t dispatch thunk of VAAVSVerifierModel.__allocating_init(configuration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 688))();
}

uint64_t dispatch thunk of VAAVSVerifierModel.maxKeywords.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 696))();
}

uint64_t dispatch thunk of VAAVSVerifierModel.setEndpointerConfig(config:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 704))();
}

uint64_t dispatch thunk of VAAVSVerifierModel.unwrapEncoderPredictionObject(predictionInput:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 712))();
}

uint64_t dispatch thunk of VAAVSVerifierModel.predict(predictionInput:shouldSkipVerifierInference:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 720))();
}

uint64_t sub_24A1EBFC4(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  sub_24A1EC010(a1);
  return v2;
}

uint64_t sub_24A1EC010(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t (*v9)(void);
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  int v18;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t (*v38)(void);
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(void);
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  BOOL v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  BOOL v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t (*v84)(void);
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(void);
  uint64_t v88;
  _QWORD *v89;
  _OWORD v90[3];
  _QWORD *v91;

  v3 = v1;
  *(_QWORD *)(v3 + 72) = 0x7475706E69;
  *(_QWORD *)(v3 + 80) = 0xE500000000000000;
  strcpy((char *)(v3 + 88), "keyword_mask");
  *(_BYTE *)(v3 + 101) = 0;
  *(_WORD *)(v3 + 102) = -5120;
  *(_QWORD *)(v3 + 104) = 0x6974636964657270;
  *(_QWORD *)(v3 + 112) = 0xEB00000000736E6FLL;
  *(_QWORD *)(v3 + 120) = 0x7374657366666FLL;
  *(_QWORD *)(v3 + 128) = 0xE700000000000000;
  *(_QWORD *)(v3 + 136) = 0x736874646977;
  *(_QWORD *)(v3 + 144) = 0xE600000000000000;
  v5 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v6 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *a1) + 0x98))();
  if (!v6)
  {
    sub_24A14C404();
    swift_allocError();
    *v15 = 0xD000000000000020;
    v15[1] = 0x800000024A227660;
    swift_willThrow();
LABEL_7:

    goto LABEL_8;
  }
  v7 = (_QWORD *)v6;
  v8 = (_QWORD *)(*(uint64_t (**)(void))((*v5 & *a1) + 0xC8))();
  if (!v8)
  {
    sub_24A14C404();
    swift_allocError();
    *v16 = 0xD000000000000031;
    v16[1] = 0x800000024A227690;
    swift_willThrow();

    goto LABEL_7;
  }
  v91 = v8;
  *(_QWORD *)(v3 + 16) = a1;
  type metadata accessor for VAEspressoUtilsV2();
  v9 = *(uint64_t (**)(void))((*v5 & *v7) + 0x98);
  v10 = a1;
  v11 = v9();
  v13 = v12;
  v14 = sub_24A1516F0();
  sub_24A1D80C4(v11, v13, v14 & 1, (uint64_t *)v90);
  if (!v2)
  {
    v20 = swift_bridgeObjectRelease();
    v21 = v90[1];
    *(_OWORD *)(v3 + 24) = v90[0];
    *(_OWORD *)(v3 + 40) = v21;
    *(_OWORD *)(v3 + 56) = v90[2];
    v88 = *(_QWORD *)((*(uint64_t (**)(uint64_t))((*v5 & *v7) + 0xB0))(v20) + 16);
    v22 = swift_bridgeObjectRelease();
    v23 = *(uint64_t (**)(void))((*v5 & *v10) + 0x80);
    v24 = (_QWORD *)((uint64_t (*)(uint64_t))v23)(v22);
    v25 = (*(uint64_t (**)(void))((*v5 & *v24) + 0x160))();

    v26 = (*(uint64_t (**)(void))((*v5 & *v91) + 0x138))();
    if (v26)
    {
      v27 = v26;
      if (v25 != 0x8000000000000000 || v26 != -1)
      {
        v29 = *(_QWORD *)(v3 + 40);
        if (*(_QWORD *)(v29 + 16))
        {
          v89 = v10;
          v30 = *(_QWORD *)(v3 + 72);
          v31 = *(_QWORD *)(v3 + 80);
          swift_bridgeObjectRetain();
          v32 = sub_24A148970(v30, v31);
          if ((v33 & 1) != 0)
          {
            v86 = v25;
            v34 = *(_QWORD *)(*(_QWORD *)(v29 + 56) + 8 * v32);
            swift_retain();
            swift_bridgeObjectRelease();
            sub_24A135F88(&qword_25790A4A8);
            v35 = swift_allocObject();
            *(_OWORD *)(v35 + 16) = xmmword_24A218630;
            *(_QWORD *)(v35 + 32) = 1;
            v36 = (_QWORD *)v23();
            v37 = (*(uint64_t (**)(void))((*v5 & *v36) + 0x148))();

            *(_QWORD *)(v35 + 40) = v37;
            *(_QWORD *)(v35 + 48) = (*(uint64_t (**)(void))((*v5 & *v7) + 0xE0))();
            *(_QWORD *)(v35 + 56) = 1;
            v38 = *(uint64_t (**)(void))(*(_QWORD *)v34 + 200);
            v39 = (_QWORD *)v38();
            LOBYTE(v37) = sub_24A1A4C00(v39, (_QWORD *)v35);
            swift_bridgeObjectRelease();
            if ((v37 & 1) != 0)
            {
              swift_bridgeObjectRelease();
              v40 = *(_QWORD *)(v3 + 48);
              if (*(_QWORD *)(v40 + 16))
              {
                v41 = *(_QWORD *)(v3 + 104);
                v42 = *(_QWORD *)(v3 + 112);
                swift_bridgeObjectRetain();
                v43 = sub_24A148970(v41, v42);
                if ((v44 & 1) != 0)
                {
                  v45 = *(_QWORD *)(*(_QWORD *)(v40 + 56) + 8 * v43);
                  swift_retain();
                  swift_bridgeObjectRelease();
                  v46 = swift_allocObject();
                  *(_OWORD *)(v46 + 16) = xmmword_24A218630;
                  *(_QWORD *)(v46 + 32) = 1;
                  *(_QWORD *)(v46 + 40) = v88 + 1;
                  v85 = v86 / v27;
                  *(_QWORD *)(v46 + 48) = v86 / v27;
                  *(_QWORD *)(v46 + 56) = 1;
                  v47 = *(uint64_t (**)(void))(*(_QWORD *)v45 + 200);
                  v48 = (_QWORD *)v47();
                  LOBYTE(v45) = sub_24A1A4C00(v48, (_QWORD *)v46);
                  swift_bridgeObjectRelease();
                  if ((v45 & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    v49 = sub_24A215EF4();
                    v50 = v49;
                    *(_QWORD *)(v49 + 16) = v88 + 1;
                    *(_DWORD *)(v49 + 32) = 0;
                    v10 = v89;
                    if (v88)
                      bzero((void *)(v49 + 36), 4 * v88);
                    *(_QWORD *)(v3 + 152) = sub_24A1421D4(v50, v85);
                    v51 = *(_QWORD *)(v3 + 48);
                    if (*(_QWORD *)(v51 + 16))
                    {
                      v52 = *(_QWORD *)(v3 + 120);
                      v53 = *(_QWORD *)(v3 + 128);
                      swift_bridgeObjectRetain();
                      v54 = sub_24A148970(v52, v53);
                      if ((v55 & 1) != 0)
                      {
                        v56 = *(_QWORD *)(*(_QWORD *)(v51 + 56) + 8 * v54);
                        swift_retain();
                        swift_bridgeObjectRelease();
                        v57 = swift_allocObject();
                        *(_OWORD *)(v57 + 16) = xmmword_24A218630;
                        *(_QWORD *)(v57 + 32) = 1;
                        *(_QWORD *)(v57 + 40) = v88;
                        *(_QWORD *)(v57 + 48) = v85;
                        *(_QWORD *)(v57 + 56) = 1;
                        v84 = *(uint64_t (**)(void))(*(_QWORD *)v56 + 200);
                        v58 = (_QWORD *)v84();
                        v59 = sub_24A1A4C00(v58, (_QWORD *)v57);
                        swift_bridgeObjectRelease();
                        if (v59)
                        {
                          swift_bridgeObjectRelease();
                          if (v88)
                          {
                            v60 = sub_24A215EF4();
                            *(_QWORD *)(v60 + 16) = v88;
                            bzero((void *)(v60 + 32), 4 * v88);
                          }
                          else
                          {
                            v60 = MEMORY[0x24BEE4AF8];
                          }
                          *(_QWORD *)(v3 + 160) = sub_24A1421D4(v60, v85);
                          v70 = *(_QWORD *)(v3 + 48);
                          if (*(_QWORD *)(v70 + 16))
                          {
                            v71 = *(_QWORD *)(v3 + 136);
                            v72 = *(_QWORD *)(v3 + 144);
                            swift_bridgeObjectRetain();
                            v73 = sub_24A148970(v71, v72);
                            if ((v74 & 1) != 0)
                            {
                              v75 = *(_QWORD *)(*(_QWORD *)(v70 + 56) + 8 * v73);
                              swift_retain();
                              swift_bridgeObjectRelease();
                              v76 = swift_allocObject();
                              *(_OWORD *)(v76 + 16) = xmmword_24A218630;
                              *(_QWORD *)(v76 + 32) = 1;
                              *(_QWORD *)(v76 + 40) = v88;
                              *(_QWORD *)(v76 + 48) = v85;
                              *(_QWORD *)(v76 + 56) = 1;
                              v87 = *(uint64_t (**)(void))(*(_QWORD *)v75 + 200);
                              v77 = (_QWORD *)v87();
                              v78 = sub_24A1A4C00(v77, (_QWORD *)v76);
                              swift_bridgeObjectRelease();
                              if (v78)
                              {
                                swift_bridgeObjectRelease();
                                if (v88)
                                {
                                  v79 = sub_24A215EF4();
                                  *(_QWORD *)(v79 + 16) = v88;
                                  bzero((void *)(v79 + 32), 4 * v88);
LABEL_57:
                                  v83 = sub_24A1421D4(v79, v85);
                                  swift_release();
                                  swift_release();
                                  swift_release();
                                  swift_release();

                                  *(_QWORD *)(v3 + 168) = v83;
                                  return v3;
                                }
LABEL_56:
                                v79 = MEMORY[0x24BEE4AF8];
                                goto LABEL_57;
                              }
                              sub_24A216308();
                              sub_24A215D98();
                              MEMORY[0x24BD09774](v76, MEMORY[0x24BEE1768]);
                              sub_24A215D98();
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              v81 = sub_24A215D98();
                              ((void (*)(uint64_t))v87)(v81);
                              MEMORY[0x24BD09774]();
                              sub_24A215D98();
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              sub_24A14C404();
                              swift_allocError();
                              *v82 = 0;
                              v82[1] = 0xE000000000000000;
                              swift_willThrow();

                              swift_release();
                              swift_release();
                              v18 = 1;
                              goto LABEL_43;
                            }
                            swift_bridgeObjectRelease();
                          }
                          sub_24A216308();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRetain();
                          sub_24A215D98();
                          swift_bridgeObjectRelease();
                          sub_24A14C404();
                          swift_allocError();
                          *v80 = 0xD000000000000015;
                          v80[1] = 0x800000024A227710;
                          swift_willThrow();

                          swift_release();
                          v18 = 1;
                        }
                        else
                        {
                          sub_24A216308();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRetain();
                          sub_24A215D98();
                          swift_bridgeObjectRelease();
                          sub_24A215D98();
                          MEMORY[0x24BD09774](v57, MEMORY[0x24BEE1768]);
                          sub_24A215D98();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          v68 = sub_24A215D98();
                          ((void (*)(uint64_t))v84)(v68);
                          MEMORY[0x24BD09774]();
                          sub_24A215D98();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          sub_24A14C404();
                          swift_allocError();
                          *v69 = 0xD00000000000001ALL;
                          v69[1] = 0x800000024A227730;
                          swift_willThrow();

                          swift_release();
                          v18 = 0;
                        }
LABEL_43:
                        swift_release();
                        swift_release();
                        v17 = 1;
                        goto LABEL_39;
                      }
                      swift_bridgeObjectRelease();
                    }
                    sub_24A216308();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRetain();
                    sub_24A215D98();
                    swift_bridgeObjectRelease();
                    sub_24A14C404();
                    swift_allocError();
                    *v67 = 0xD000000000000015;
                    v67[1] = 0x800000024A227710;
                    swift_willThrow();

                    v18 = 0;
                    goto LABEL_43;
                  }
                  sub_24A216308();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRetain();
                  sub_24A215D98();
                  swift_bridgeObjectRelease();
                  sub_24A215D98();
                  MEMORY[0x24BD09774](v46, MEMORY[0x24BEE1768]);
                  sub_24A215D98();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v65 = sub_24A215D98();
                  ((void (*)(uint64_t))v47)(v65);
                  MEMORY[0x24BD09774]();
                  sub_24A215D98();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  sub_24A14C404();
                  swift_allocError();
                  *v66 = 0xD00000000000001ALL;
                  v66[1] = 0x800000024A227730;
                  swift_willThrow();

                  swift_release();
                  goto LABEL_38;
                }
                swift_bridgeObjectRelease();
              }
              sub_24A216308();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              sub_24A215D98();
              swift_bridgeObjectRelease();
              sub_24A14C404();
              swift_allocError();
              *v64 = 0xD000000000000015;
              v64[1] = 0x800000024A227710;
              swift_willThrow();

            }
            else
            {
              sub_24A216308();
              swift_bridgeObjectRelease();
              MEMORY[0x24BD09774](v35, MEMORY[0x24BEE1768]);
              sub_24A215D98();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v62 = sub_24A215D98();
              ((void (*)(uint64_t))v38)(v62);
              MEMORY[0x24BD09774]();
              sub_24A215D98();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_24A14C404();
              swift_allocError();
              *v63 = 0xD00000000000001FLL;
              v63[1] = 0x800000024A2276F0;
              swift_willThrow();

            }
LABEL_38:
            swift_release();
            v18 = 0;
            v17 = 0;
            v10 = v89;
            goto LABEL_39;
          }
          swift_bridgeObjectRelease();
          v10 = v89;
        }
        sub_24A216308();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_24A215D98();
        swift_bridgeObjectRelease();
        sub_24A14C404();
        swift_allocError();
        *v61 = 0xD000000000000014;
        v61[1] = 0x800000024A2276D0;
        swift_willThrow();

        v18 = 0;
        v17 = 0;
LABEL_39:

        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_56;
  }

  swift_bridgeObjectRelease();
LABEL_8:
  v17 = 0;
  v18 = 0;
LABEL_9:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v17)
    swift_bridgeObjectRelease();
  if (v18)
    swift_bridgeObjectRelease();
  type metadata accessor for VAKWSModel();
  swift_deallocPartialClassInstance();
  return v3;
}

uint64_t type metadata accessor for VAKWSModel()
{
  return objc_opt_self();
}

uint64_t sub_24A1ECF60()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24A1ECFAC(unint64_t a1, uint64_t a2, int32x2_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int32x2_t v12;
  uint64_t v13;
  uint64_t v14;
  int32x2_t v15;
  uint64_t v16;
  uint64_t v17;
  int32x2_t v18;

  v6 = sub_24A17E5C0(a1, a3);
  v7 = sub_24A1D7E60(v3[9], v3[10], MEMORY[0x24BEE14E8], MEMORY[0x24BEE1528]);
  if (!v4)
  {
    (*(void (**)(unint64_t))(*(_QWORD *)v7 + 624))(v6);
    swift_release();
    swift_bridgeObjectRelease();
    v8 = sub_24A1D7E60(v3[11], v3[12], MEMORY[0x24BEE14E8], MEMORY[0x24BEE1528]);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 624))(a2);
    swift_release();
    sub_24A1926B0();
    v9 = sub_24A1D7F90(v3[13], v3[14], MEMORY[0x24BEE14E8], MEMORY[0x24BEE1528]);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 752))(v9);
    swift_release();
    a2 = sub_24A17E6B8(v11, v12);
    swift_bridgeObjectRelease();
    v13 = sub_24A1D7F90(v3[15], v3[16], MEMORY[0x24BEE14E8], MEMORY[0x24BEE1528]);
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 752))(v13);
    swift_release();
    sub_24A17E6B8(v14, v15);
    swift_bridgeObjectRelease();
    v16 = sub_24A1D7F90(v3[17], v3[18], MEMORY[0x24BEE14E8], MEMORY[0x24BEE1528]);
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 752))(v16);
    swift_release();
    sub_24A17E6B8(v17, v18);
  }
  swift_bridgeObjectRelease();
  return a2;
}

uint64_t sub_24A1ED1E8()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_24A1ED28C()
{
  sub_24A1ED1E8();
  return swift_deallocClassInstance();
}

ValueMetadata *type metadata accessor for VAKWSModelError()
{
  return &type metadata for VAKWSModelError;
}

uint64_t sub_24A1ED2BC()
{
  return sub_24A1ED380();
}

uint64_t sub_24A1ED2C8(uint64_t a1)
{
  return sub_24A1ED3D0(a1, &OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_requestInfo);
}

uint64_t (*sub_24A1ED2D4())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A1ED318()
{
  return sub_24A1ED380();
}

uint64_t sub_24A1ED324(uint64_t a1)
{
  return sub_24A1ED3D0(a1, &OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_listeningTask);
}

uint64_t (*sub_24A1ED330())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A1ED374()
{
  return sub_24A1ED380();
}

uint64_t sub_24A1ED380()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t sub_24A1ED3C4(uint64_t a1)
{
  return sub_24A1ED3D0(a1, &OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_strategyLayer);
}

uint64_t sub_24A1ED3D0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)(v2 + *a2);
  swift_beginAccess();
  *v4 = a1;
  return swift_release();
}

uint64_t (*sub_24A1ED41C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A1ED460@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_runtimeParamsFactory;
  swift_beginAccess();
  return sub_24A152310(v3, a1);
}

uint64_t sub_24A1ED4B0(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_runtimeParamsFactory;
  swift_beginAccess();
  sub_24A14D184(v3);
  sub_24A13DB20(a1, v3);
  return swift_endAccess();
}

uint64_t (*sub_24A1ED510())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A1ED554()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_speechInProgress);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_24A1ED598(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_speechInProgress);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_24A1ED5E0())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A1ED624()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_numberOfChunksAfterEndOfSpeech;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1ED668(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_numberOfChunksAfterEndOfSpeech);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_24A1ED6B0())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_24A1ED6F4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_speechStartTime;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1ED738(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_speechStartTime);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_24A1ED780())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A1ED7C4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for VARuntimeParametersFactoryDummy();
  result = sub_24A1801F4();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for VARuntimeParametersFactoryDummy;
  *a1 = result;
  return result;
}

id sub_24A1ED800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  id v7;

  v7 = objc_allocWithZone(v3);
  return sub_24A1ED848(a1, a2, a3);
}

id sub_24A1ED848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v3;
  uint64_t v7;
  id v8;
  char *v9;
  id v10;

  *(_QWORD *)&v3[OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_requestInfo] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_listeningTask] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_strategyLayer] = 0;
  v3[OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_speechInProgress] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_numberOfChunksAfterEndOfSpeech] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_speechStartTime] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_numFramesForAveraging] = 3;
  v7 = OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_lock;
  v8 = objc_allocWithZone(MEMORY[0x24BDD1648]);
  v9 = v3;
  *(_QWORD *)&v3[v7] = objc_msgSend(v8, sel_init);
  *(_QWORD *)&v9[OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_floatBuffer] = MEMORY[0x24BEE4AF8];
  sub_24A152310(a3, (uint64_t)&v9[OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_runtimeParamsFactory]);

  v10 = VAKeywordSpotter.init(delegate:configuration:)(a1, a2);
  sub_24A14D184(a3);
  return v10;
}

uint64_t static VAKeywordSpotterBase.isSupportedAudioFormat(_:)(void *a1)
{
  double v2;

  objc_msgSend(a1, sel_sampleRate);
  if (v2 == 16000.0
    && objc_msgSend(a1, sel_channelCount) == 1
    && objc_msgSend(a1, sel_commonFormat) == (id)3)
  {
    return objc_msgSend(a1, sel_isInterleaved) ^ 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_24A1ED9E4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[7] = v0;
  v2 = sub_24A215A8C();
  v1[8] = v2;
  v1[9] = *(_QWORD *)(v2 - 8);
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_24A1EDA60()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t (*v21)(void);

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v2 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 56)) + 0x118);
  v3 = v2();
  v4 = swift_release();
  if (!v3)
  {
    v8 = *(_QWORD *)(v0 + 88);
    v9 = *(_QWORD *)(v0 + 64);
    v10 = *(_QWORD *)(v0 + 72);
    v11 = sub_24A1B9D90();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v8, v11, v9);
    v12 = sub_24A215A74();
    v13 = sub_24A216104();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_24A12D000, v12, v13, "Called stop() when keyword spotter was not running", v14, 2u);
      MEMORY[0x24BD0AAAC](v14, -1, -1);
    }
    v15 = *(_QWORD *)(v0 + 88);
    v16 = *(_QWORD *)(v0 + 64);
    v17 = *(_QWORD *)(v0 + 72);

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
    goto LABEL_7;
  }
  v5 = ((uint64_t (*)(uint64_t))v2)(v4);
  *(_QWORD *)(v0 + 104) = v5;
  if (v5)
  {
    v21 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v5 + 328) + *(_QWORD *)(*(_QWORD *)v5 + 328));
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 112) = v6;
    *v6 = v0;
    v6[1] = sub_24A1EDC68;
    v7 = v21;
    return v7();
  }
  v19 = (*(uint64_t (**)(void))((*v1 & **(_QWORD **)(v0 + 56)) + 0x130))();
  *(_QWORD *)(v0 + 120) = v19;
  if (!v19)
  {
LABEL_7:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
  v20 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v20;
  *(_QWORD *)(v0 + 136) = sub_24A135F88(&qword_25790A8B8);
  *v20 = v0;
  v20[1] = sub_24A1EDDAC;
  return sub_24A215FD8();
}

uint64_t sub_24A1EDC68()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_24A1EDCC4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 56)) + 0x130))();
  *(_QWORD *)(v0 + 120) = v1;
  if (v1)
  {
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v2;
    *(_QWORD *)(v0 + 136) = sub_24A135F88(&qword_25790A8B8);
    *v2 = v0;
    v2[1] = sub_24A1EDDAC;
    return sub_24A215FD8();
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_24A1EDDAC()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24A1EDE00()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t (*v32)(void);
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;

  v1 = *(void **)(v0 + 16);
  if ((*(_BYTE *)(v0 + 24) & 1) != 0)
  {
    v3 = *(_QWORD *)(v0 + 72);
    v2 = *(_QWORD *)(v0 + 80);
    v4 = *(_QWORD *)(v0 + 64);
    *(_QWORD *)(v0 + 32) = v1;
    v5 = v1;
    swift_willThrowTypedImpl();
    v6 = sub_24A1B9D90();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v4);
    v7 = v1;
    v8 = v1;
    v9 = sub_24A215A74();
    v10 = sub_24A216104();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v34 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v11 = 138412290;
      v12 = v1;
      v13 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 40) = v13;
      sub_24A216260();
      *v34 = v13;
      sub_24A1F0830(v1, 1);
      sub_24A1F0830(v1, 1);
      _os_log_impl(&dword_24A12D000, v9, v10, "Error stopping spotter: %@", v11, 0xCu);
      sub_24A135F88(&qword_25790A820);
      swift_arrayDestroy();
      MEMORY[0x24BD0AAAC](v34, -1, -1);
      MEMORY[0x24BD0AAAC](v11, -1, -1);
    }
    else
    {
      sub_24A1F0830(v1, 1);
      sub_24A1F0830(v1, 1);
    }
    v29 = *(_QWORD *)(v0 + 72);
    v28 = *(_QWORD *)(v0 + 80);
    v31 = *(_QWORD **)(v0 + 56);
    v30 = *(_QWORD *)(v0 + 64);

    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
    swift_willThrow();
    sub_24A1F0830(v1, 1);
    sub_24A1EE1E8(v31);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v32 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 96);
    v16 = *(_QWORD *)(v0 + 64);
    v15 = *(_QWORD *)(v0 + 72);
    v17 = sub_24A1B9D90();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v14, v17, v16);
    v18 = sub_24A215A74();
    v19 = sub_24A2160F8();
    v20 = os_log_type_enabled(v18, v19);
    v21 = *(_QWORD *)(v0 + 96);
    v23 = *(_QWORD *)(v0 + 64);
    v22 = *(_QWORD *)(v0 + 72);
    if (v20)
    {
      v35 = *(_QWORD *)(v0 + 96);
      v24 = (uint8_t *)swift_slowAlloc();
      v25 = swift_slowAlloc();
      *(_DWORD *)v24 = 136315138;
      v36 = v25;
      if ((v1 & 1) != 0)
        v26 = 1702195828;
      else
        v26 = 0x65736C6166;
      if ((v1 & 1) != 0)
        v27 = 0xE400000000000000;
      else
        v27 = 0xE500000000000000;
      *(_QWORD *)(v0 + 48) = sub_24A148270(v26, v27, &v36);
      sub_24A216260();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24A12D000, v18, v19, "Stop keyword spotter, success=%s", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24BD0AAAC](v25, -1, -1);
      MEMORY[0x24BD0AAAC](v24, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v35, v23);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    }
    sub_24A1EE1E8(*(_QWORD **)(v0 + 56));
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v32 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v32();
}

uint64_t sub_24A1EE1E8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v11;

  v2 = sub_24A215A8C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_24A1B9D90();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  v7 = sub_24A215A74();
  v8 = sub_24A2160F8();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_24A12D000, v7, v8, "set requestInfo to nil after stopping spotter", v9, 2u);
    MEMORY[0x24BD0AAAC](v9, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & *a1) + 0x120))(0);
}

void sub_24A1EE310(void *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  _QWORD v24[2];

  v6 = sub_24A215A8C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_24A135F88(&qword_25790A7C0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v2) + 0x118))(v11);
  swift_release();
  if (v14)
  {
    v15 = objc_msgSend(a1, sel_format);
    sub_24A1F083C(v15);

    if (!v3)
    {
      objc_msgSend(*(id *)((char *)v2 + OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_lock), sel_lock);
      v16 = sub_24A215F78();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 1, 1, v16);
      v17 = (_QWORD *)swift_allocObject();
      v17[2] = 0;
      v17[3] = 0;
      v17[4] = v2;
      v17[5] = a1;
      v17[6] = a2;
      v18 = v2;
      v19 = a1;
      sub_24A167948((uint64_t)v13, (uint64_t)&unk_2579126E0, (uint64_t)v17);
      swift_release();
    }
  }
  else
  {
    v20 = sub_24A1B9D90();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v20, v6);
    v21 = sub_24A215A74();
    v22 = sub_24A216104();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v23 = 0;
      _os_log_impl(&dword_24A12D000, v21, v22, "Called addAudio() when keyword spotter was not running", v23, 2u);
      MEMORY[0x24BD0AAAC](v23, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

uint64_t sub_24A1EE540(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v10;
  int *v11;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t, uint64_t);

  v6[3] = a4;
  v10 = sub_24A215A8C();
  v6[4] = v10;
  v6[5] = *(_QWORD *)(v10 - 8);
  v6[6] = swift_task_alloc();
  v11 = *(int **)((*MEMORY[0x24BEE4EA0] & *a4) + 0x1F8);
  v14 = (uint64_t (*)(uint64_t, uint64_t))((char *)v11 + *v11);
  v12 = (_QWORD *)swift_task_alloc();
  v6[7] = v12;
  *v12 = v6;
  v12[1] = sub_24A1EE5F4;
  return v14(a5, a6);
}

uint64_t sub_24A1EE5F4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24A1EE658()
{
  uint64_t v0;

  objc_msgSend(*(id *)(*(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_lock), sel_unlock);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A1EE6A8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  uint8_t *v11;
  _QWORD *v12;
  id v13;
  uint64_t v14;
  void *v15;

  v1 = *(void **)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = sub_24A1B9D90();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  v6 = v1;
  v7 = v1;
  v8 = sub_24A215A74();
  v9 = sub_24A216104();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = *(void **)(v0 + 64);
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v11 = 138412290;
    v13 = v10;
    v14 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 16) = v14;
    sub_24A216260();
    *v12 = v14;

    _os_log_impl(&dword_24A12D000, v8, v9, "Error adding audio: %@", v11, 0xCu);
    sub_24A135F88(&qword_25790A820);
    swift_arrayDestroy();
    MEMORY[0x24BD0AAAC](v12, -1, -1);
    MEMORY[0x24BD0AAAC](v11, -1, -1);

  }
  else
  {
    v15 = *(void **)(v0 + 64);

  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 8))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 32));
  objc_msgSend(*(id *)(*(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_lock), sel_unlock);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A1EE884(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = sub_24A215A8C();
  v3[5] = v4;
  v3[6] = *(_QWORD *)(v4 - 8);
  v3[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_24A1EE8E8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  _QWORD *v15;
  int *v17;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v2 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 32)) + 0x118))();
  swift_release();
  if (v2)
  {
    v3 = objc_msgSend(*(id *)(v0 + 16), sel_format);
    sub_24A1F083C(v3);

    v14 = *(int **)((*v1 & **(_QWORD **)(v0 + 32)) + 0x1F8);
    v17 = (int *)((char *)v14 + *v14);
    v15 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 64) = v15;
    *v15 = v0;
    v15[1] = sub_24A1EEAA0;
    return ((uint64_t (*)(_QWORD, _QWORD))v17)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 48);
    v4 = *(_QWORD *)(v0 + 56);
    v6 = *(_QWORD *)(v0 + 40);
    v7 = sub_24A1B9D90();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
    v8 = sub_24A215A74();
    v9 = sub_24A216104();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_24A12D000, v8, v9, "Called addAudioAsync() when keyword spotter was not running", v10, 2u);
      MEMORY[0x24BD0AAAC](v10, -1, -1);
    }
    v12 = *(_QWORD *)(v0 + 48);
    v11 = *(_QWORD *)(v0 + 56);
    v13 = *(_QWORD *)(v0 + 40);

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_24A1EEAA0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_24A1EEAEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  v4 = sub_24A215A8C();
  v3[8] = v4;
  v3[9] = *(_QWORD *)(v4 - 8);
  v3[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_24A1EEB50()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)(void);
  _QWORD *v4;
  uint64_t (*v6)(void);

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 56)) + 0x118))();
  *(_QWORD *)(v0 + 88) = v1;
  if (v1)
  {
    v6 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v1 + 336) + *(_QWORD *)(*(_QWORD *)v1 + 336));
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 96) = v2;
    *v2 = v0;
    v2[1] = sub_24A1EEC30;
    v3 = v6;
  }
  else
  {
    sub_24A14C404();
    swift_allocError();
    *v4 = 0xD00000000000001ELL;
    v4[1] = 0x800000024A227890;
    swift_willThrow();
    swift_task_dealloc();
    v3 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v3();
}

uint64_t sub_24A1EEC30(char a1)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 128) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24A1EEC8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  objc_class *v12;
  uint64_t *v13;
  AVAudioPCMBuffer v14;
  Swift::OpaquePointer *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t (*v21)(uint64_t, _QWORD);

  if (*(_BYTE *)(v0 + 128) == 1)
  {
    v2 = *(_QWORD *)(v0 + 72);
    v1 = *(_QWORD *)(v0 + 80);
    v3 = *(_QWORD *)(v0 + 64);
    v4 = sub_24A1B9D90();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
    v5 = sub_24A215A74();
    v6 = sub_24A216104();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_24A12D000, v5, v6, "Ignoring audio since stop is pending", v7, 2u);
      MEMORY[0x24BD0AAAC](v7, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 80);
    v9 = *(_QWORD *)(v0 + 64);
    v10 = *(_QWORD *)(v0 + 72);

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    swift_task_dealloc();
    v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
  v12 = *(objc_class **)(v0 + 40);
  v13 = (uint64_t *)(*(_QWORD *)(v0 + 56) + OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_floatBuffer);
  swift_beginAccess();
  v14.super.super.isa = v12;
  v14.super._impl = v13;
  VAfp16AVAudioBufferToFP32Array(buffer:floatBuffer:)(v14, v15);
  v16 = *(_QWORD *)(v0 + 88);
  swift_endAccess();
  if (v17)
  {
    swift_release();
    swift_task_dealloc();
    v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
  v19 = *v13;
  *(_QWORD *)(v0 + 104) = v19;
  v21 = (uint64_t (*)(uint64_t, _QWORD))(**(int **)(*(_QWORD *)v16 + 344)
                                                + *(_QWORD *)(*(_QWORD *)v16 + 344));
  swift_bridgeObjectRetain();
  v20 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v20;
  *v20 = v0;
  v20[1] = sub_24A1EEE58;
  return v21(v19, *(_QWORD *)(v0 + 48));
}

uint64_t sub_24A1EEE58()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_24A1EEEC4()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A1EEF00()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A1EEF48(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD v22[2];
  uint64_t v23;

  v4 = sub_24A2157A4();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (_QWORD *)MEMORY[0x24BEE4EA0];
  result = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x118))(v6);
  if (result)
  {
    v11 = result;
    v23 = a1;
    (*(void (**)(void))(*(_QWORD *)result + 376))();
    if (v2)
    {
      return swift_release();
    }
    else
    {
      v22[1] = v12;
      v13 = (*(uint64_t (**)(void))(*(_QWORD *)v11 + 136))();
      v14 = (void *)(*(uint64_t (**)(uint64_t))((*v9 & *v1) + 0x60))(v13);
      if (v14)
      {
        v15 = v14;
        if ((objc_msgSend(v14, sel_respondsToSelector_, sel_keywordSpotterDidStopWithSummaryWithJson_uuid_perfLogs_) & 1) != 0)
        {
          v16 = sub_24A215C90();
          v22[0] = sub_24A21578C();
          v17 = (void *)v16;
          if (v23)
            v18 = (void *)sub_24A215E94();
          else
            v18 = 0;
          v19 = v17;
          v20 = v17;
          v21 = (void *)v22[0];
          objc_msgSend(v15, sel_keywordSpotterDidStopWithSummaryWithJson_uuid_perfLogs_, v20, v22[0], v18, v22[0]);
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();

        }
        else
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_unknownObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_release();
      }
      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
  }
  return result;
}

int64_t sub_24A1EF13C(uint64_t a1, float a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t (*v14)(uint64_t);
  int64_t result;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  BOOL v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;

  v5 = sub_24A215A8C();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v38 - v11;
  v13 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v14 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v2) + 0x190);
  result = v14(v10);
  if (result < 1)
  {
    v17 = *(_QWORD *)(a1 + 16);
    if (v17)
    {
      v39 = v5;
      v40 = v6;
      v18 = 0;
      v19 = a1 + 32;
      while (1)
      {
        v20 = __OFADD__(v18, 3) ? 0x7FFFFFFFFFFFFFFFLL : v18 + 3;
        if (v18 < 0)
          break;
        if (v18 + 1 >= v17)
          goto LABEL_27;
        if (v18 + 2 >= v17)
          goto LABEL_28;
        v21 = (float)((float)((float)(*(float *)(v19 + 4 * v18) + 0.0) + *(float *)(v19 + 4 * (v18 + 1)))
                    + *(float *)(v19 + 4 * (v18 + 2)))
            / 3.0;
        result = (*(uint64_t (**)(void))((*v13 & *v2) + 0x178))();
        if ((result & 1) != 0)
        {
          if (v21 > a2)
          {
            (*(void (**)(uint64_t))((*v13 & *v2) + 0x198))(1);
            type metadata accessor for VARequestContext();
            v29 = mach_absolute_time();
            v30 = (*(uint64_t (**)(void))((*v13 & *v2) + 0x1A8))();
            v31 = v29 >= v30;
            result = v29 - v30;
            if (v31)
            {
              v32 = sub_24A165E68(result);
              v33 = sub_24A1B9D90();
              v34 = v39;
              (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v12, v33, v39);
              v35 = sub_24A215A74();
              v36 = sub_24A2160F8();
              if (os_log_type_enabled(v35, v36))
              {
                v37 = swift_slowAlloc();
                *(_DWORD *)v37 = 134218496;
                v41 = v32;
                sub_24A216260();
                *(_WORD *)(v37 + 12) = 2048;
                v41 = v21;
                sub_24A216260();
                *(_WORD *)(v37 + 22) = 2048;
                v41 = a2;
                sub_24A216260();
                _os_log_impl(&dword_24A12D000, v35, v36, "Speech stopped in %f secs, silence probability %f > %f, wait for one more chunk", (uint8_t *)v37, 0x20u);
                MEMORY[0x24BD0AAAC](v37, -1, -1);
              }

              result = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v12, v34);
              v16 = 0;
              return v16 | ((v14(result) > 0) << 16);
            }
LABEL_29:
            __break(1u);
            return result;
          }
        }
        else if (v21 < a2)
        {
          (*(void (**)(uint64_t))((*v13 & *v2) + 0x180))(1);
          v22 = mach_absolute_time();
          (*(void (**)(uint64_t))((*v13 & *v2) + 0x1B0))(v22);
          v23 = sub_24A1B9D90();
          v24 = v39;
          v25 = v40;
          (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v9, v23, v39);
          v26 = sub_24A215A74();
          v27 = sub_24A2160F8();
          if (os_log_type_enabled(v26, v27))
          {
            v28 = swift_slowAlloc();
            *(_DWORD *)v28 = 134218240;
            v41 = v21;
            sub_24A216260();
            *(_WORD *)(v28 + 12) = 2048;
            v41 = a2;
            sub_24A216260();
            _os_log_impl(&dword_24A12D000, v26, v27, "Speech started, silence probability %f < %f", (uint8_t *)v28, 0x16u);
            MEMORY[0x24BD0AAAC](v28, -1, -1);
          }

          result = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v9, v24);
          v16 = 1;
          return v16 | ((v14(result) > 0) << 16);
        }
        v18 = v20;
        if (v20 >= v17)
          goto LABEL_19;
      }
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
LABEL_19:
    v16 = 0;
  }
  else
  {
    (*(void (**)(_QWORD))((*v13 & *v2) + 0x180))(0);
    result = (*(uint64_t (**)(_QWORD))((*v13 & *v2) + 0x198))(0);
    v16 = 256;
  }
  return v16 | ((v14(result) > 0) << 16);
}

uint64_t sub_24A1EF5A0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  float v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char v37;
  char v38;
  __int128 v39;
  char v40;
  uint64_t v41;
  char v42;
  char v43;
  int v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  uint64_t v54;
  int v55;
  char v56;
  char v57;
  __int128 v58;
  char v59;
  uint64_t v60;
  char v61;
  char v62;
  int v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  __int16 v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  uint64_t v73;

  v4 = sub_24A2157A4();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v10 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v1) + 0x118))(v6);
  if (!v10)
  {
    sub_24A14C404();
    swift_allocError();
    *v26 = 0x75716552206C694ELL;
    v26[1] = 0xEF6F666E49747365;
    return swift_willThrow();
  }
  v11 = v10;
  v12 = (*(uint64_t (**)(void))((*v9 & *v1) + 0x148))();
  if (!v12)
  {
    sub_24A14C404();
    swift_allocError();
    *v27 = 0xD000000000000011;
    v27[1] = 0x800000024A2214A0;
    swift_willThrow();
    return swift_release();
  }
  v13 = v12;
  v73 = v2;
  type metadata accessor for VAInstrumentedKeywordResult();
  v14 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 88))();
  v15 = VAInstrumentedKeywordResult.__allocating_init(detections:)(v14);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v11 + 280))(&v54);
  v35 = v54;
  v36 = v55;
  v37 = v56;
  v38 = v57;
  v39 = v58;
  v40 = v59;
  v41 = v60;
  v42 = v61;
  v43 = v62;
  v44 = v63;
  v45 = v64;
  v46 = v65;
  v47 = v66;
  v48 = v67;
  v49 = v68;
  v50 = v69;
  v51 = v70;
  v52 = v71;
  v53 = v72;
  v16 = sub_24A1FA788();
  swift_bridgeObjectRelease();
  v17 = swift_bridgeObjectRelease();
  if ((v16 & 1) == 0)
  {
LABEL_17:
    v28 = v73;
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 384))(v15);
    if (!v28)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 136))(v29);
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v13 + 80))(v15, v8);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
    swift_release();
    swift_release();
    return swift_release();
  }
  v33 = v8;
  v34 = v5;
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 360))(v17);
  v19 = *(_QWORD *)(v18 + 16);
  if (!v19)
  {
    swift_bridgeObjectRelease();
    v22 = MEMORY[0x24BEE4AF8];
LABEL_16:
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 320))(v22);
    v5 = v34;
    v8 = v33;
    goto LABEL_17;
  }
  v30 = v15;
  v31 = v13;
  v32 = v4;
  v54 = MEMORY[0x24BEE4AF8];
  result = sub_24A1586C4(0, v19, 0);
  v21 = 0;
  v22 = v54;
  while (1)
  {
    v23 = *(float *)(v18 + 4 * v21 + 32);
    if ((~LODWORD(v23) & 0x7F800000) == 0)
      break;
    if (v23 <= -32769.0)
      goto LABEL_22;
    if (v23 >= 32768.0)
      goto LABEL_23;
    v54 = v22;
    v25 = *(_QWORD *)(v22 + 16);
    v24 = *(_QWORD *)(v22 + 24);
    if (v25 >= v24 >> 1)
    {
      result = sub_24A1586C4(v24 > 1, v25 + 1, 1);
      v22 = v54;
    }
    ++v21;
    *(_QWORD *)(v22 + 16) = v25 + 1;
    *(_WORD *)(v22 + 2 * v25 + 32) = (int)v23;
    if (v19 == v21)
    {
      swift_bridgeObjectRelease();
      v4 = v32;
      v13 = v31;
      v15 = v30;
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

void sub_24A1EF9FC()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  id v3;

  v1 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x60))();
  if (v1)
  {
    v2 = v1;
    if ((objc_msgSend(v1, sel_respondsToSelector_, sel_keywordSpotterDidUpdateScoresWithVerboseLog_) & 1) != 0)
    {
      v3 = (id)sub_24A215C90();
      objc_msgSend(v2, sel_keywordSpotterDidUpdateScoresWithVerboseLog_, v3);
      swift_unknownObjectRelease();

    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
}

void sub_24A1EFAC0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  char v20;
  unsigned int v21;
  char v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  _BYTE *v28;
  double v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  BOOL v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void (*v43)(_QWORD, _QWORD, _QWORD);
  char *v44;
  char *v45;
  NSObject *v46;
  os_log_type_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  os_log_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  os_log_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  _QWORD *v79;
  _QWORD *v80;
  void *v81;
  uint64_t v82;
  os_log_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(_QWORD, _QWORD, _QWORD);
  os_log_t v88;
  __int128 v89;
  char *v90;
  char *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  float v98;
  unsigned __int16 v99;
  unsigned __int8 v100;

  v3 = sub_24A215A8C();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v83 - v9;
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v83 - v12;
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v83 - v15;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 144))(&v96, v14);
  v17 = v97;
  if (v97)
  {
    v90 = v16;
    v91 = v7;
    v93 = v3;
    v94 = v4;
    v92 = v1;
    v18 = v96;
    v19 = v98;
    v20 = v99 & 1;
    v21 = ((v99 | (v100 << 16)) >> 8) & 1;
    v22 = v100 & 1;
    type metadata accessor for VAKeywordSpottedEvent();
    v23 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 264);
    v24 = swift_bridgeObjectRetain();
    v25 = v23(v24);
    v26 = (*(double (**)(void))(*(_QWORD *)a1 + 360))();
    v27 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 312))();
    v28 = sub_24A1F3BA8(v18, v17, v25, v20, v21, v22, v27, v19, v26);
    swift_bridgeObjectRelease();
    if ((v28[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_intervalFromEndOfSpeech + 8] & 1) != 0)
    {
      v29 = 0.0;
      v30 = v93;
      if ((v28[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_silenceBefore] & 1) == 0)
      {
LABEL_4:
        v31 = 0xE800000000000000;
        v32 = 0x3E6863656570733CLL;
LABEL_10:
        v88 = (os_log_t)v32;
        v37 = v28[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_silenceAfter] == 0;
        v38 = 0x3E6863656570733CLL;
        if (v28[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_silenceAfter])
          v38 = 0x3E6C69733CLL;
        *(_QWORD *)&v89 = v38;
        if (v37)
          v39 = 0xE800000000000000;
        else
          v39 = 0xE500000000000000;
        if (v28[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_speechDuring] == 1)
        {
          v40 = *(_QWORD *)&v28[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_keyword];
          v41 = *(_QWORD *)&v28[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_keyword + 8];
          swift_bridgeObjectRetain();
        }
        else
        {
          v96 = 2763306;
          v97 = 0xE300000000000000;
          swift_bridgeObjectRetain();
          sub_24A215D98();
          swift_bridgeObjectRelease();
          sub_24A215D98();
          v40 = v96;
          v41 = v97;
        }
        v42 = sub_24A1B9D90();
        v43 = *(void (**)(_QWORD, _QWORD, _QWORD))(v94 + 16);
        v87 = v43;
        if (v29 <= 0.0)
        {
          v43(v13, v42, v30);
          v90 = v28;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v65 = sub_24A215A74();
          v66 = sub_24A2160EC();
          v67 = v66;
          if (os_log_type_enabled(v65, v66))
          {
            v68 = swift_slowAlloc();
            v86 = swift_slowAlloc();
            v96 = v86;
            *(_DWORD *)v68 = 136315906;
            LODWORD(v85) = v67;
            swift_bridgeObjectRetain();
            v95 = sub_24A148270((uint64_t)v88, v31, &v96);
            v88 = v65;
            sub_24A216260();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v68 + 12) = 2080;
            swift_bridgeObjectRetain();
            v95 = sub_24A148270(v40, v41, &v96);
            sub_24A216260();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v68 + 22) = 2080;
            swift_bridgeObjectRetain();
            v95 = sub_24A148270(v89, v39, &v96);
            sub_24A216260();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v68 + 32) = 2080;
            sub_24A135F88(qword_25790AEF0);
            v69 = swift_allocObject();
            *(_OWORD *)(v69 + 16) = xmmword_24A218650;
            v70 = v90;
            v71 = *(_DWORD *)&v90[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_score];
            v72 = MEMORY[0x24BEE1568];
            *(_QWORD *)(v69 + 56) = MEMORY[0x24BEE14E8];
            *(_QWORD *)(v69 + 64) = v72;
            *(_DWORD *)(v69 + 32) = v71;
            v73 = sub_24A215CE4();
            v95 = sub_24A148270(v73, v74, &v96);
            sub_24A216260();

            swift_bridgeObjectRelease();
            v75 = v88;
            _os_log_impl(&dword_24A12D000, v88, (os_log_type_t)v85, "Result: \"%s%s%s\":%s", (uint8_t *)v68, 0x2Au);
            v76 = v86;
            swift_arrayDestroy();
            MEMORY[0x24BD0AAAC](v76, -1, -1);
            v77 = v68;
            v30 = v93;
            MEMORY[0x24BD0AAAC](v77, -1, -1);

          }
          else
          {

            v78 = v90;
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
          }
          v64 = (*(uint64_t (**)(char *, uint64_t))(v94 + 8))(v13, v30);
        }
        else
        {
          v86 = v40;
          v44 = v90;
          v43(v90, v42, v30);
          v45 = v28;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v46 = sub_24A215A74();
          v47 = sub_24A2160EC();
          v48 = v47;
          if (os_log_type_enabled(v46, v47))
          {
            v49 = swift_slowAlloc();
            v84 = v48;
            v50 = v49;
            v85 = swift_slowAlloc();
            v96 = v85;
            *(_DWORD *)v50 = 136316162;
            v83 = v46;
            swift_bridgeObjectRetain();
            v95 = sub_24A148270((uint64_t)v88, v31, &v96);
            sub_24A216260();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v50 + 12) = 2080;
            swift_bridgeObjectRetain();
            v95 = sub_24A148270(v86, v41, &v96);
            sub_24A216260();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v50 + 22) = 2080;
            swift_bridgeObjectRetain();
            v95 = sub_24A148270(v89, v39, &v96);
            sub_24A216260();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v50 + 32) = 2080;
            sub_24A135F88(qword_25790AEF0);
            v51 = swift_allocObject();
            v89 = xmmword_24A218650;
            *(_OWORD *)(v51 + 16) = xmmword_24A218650;
            v52 = *(_DWORD *)&v45[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_score];
            v53 = MEMORY[0x24BEE1568];
            *(_QWORD *)(v51 + 56) = MEMORY[0x24BEE14E8];
            *(_QWORD *)(v51 + 64) = v53;
            *(_DWORD *)(v51 + 32) = v52;
            v54 = sub_24A215CE4();
            v95 = sub_24A148270(v54, v55, &v96);
            sub_24A216260();

            v56 = v93;
            swift_bridgeObjectRelease();
            *(_WORD *)(v50 + 42) = 2080;
            v57 = swift_allocObject();
            v58 = MEMORY[0x24BEE13C8];
            *(_OWORD *)(v57 + 16) = v89;
            v59 = MEMORY[0x24BEE1448];
            *(_QWORD *)(v57 + 56) = v58;
            *(_QWORD *)(v57 + 64) = v59;
            *(double *)(v57 + 32) = v29;
            v60 = sub_24A215CE4();
            v95 = sub_24A148270(v60, v61, &v96);
            sub_24A216260();
            swift_bridgeObjectRelease();
            v62 = v83;
            _os_log_impl(&dword_24A12D000, v83, (os_log_type_t)v84, "Result: \"%s%s%s\":%s %s secs after end of speech", (uint8_t *)v50, 0x34u);
            v63 = v85;
            swift_arrayDestroy();
            MEMORY[0x24BD0AAAC](v63, -1, -1);
            MEMORY[0x24BD0AAAC](v50, -1, -1);

            v64 = (*(uint64_t (**)(char *, uint64_t))(v94 + 8))(v90, v56);
          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            v64 = (*(uint64_t (**)(char *, uint64_t))(v94 + 8))(v44, v30);
          }
        }
        v79 = v92;
        v80 = (_QWORD *)MEMORY[0x24BEE4EA0];
        v81 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v92) + 0x60))(v64);
        if (v81)
        {
          objc_msgSend(v81, sel_keywordSpotterDidDetectKeywordWithEvent_, v28);
          v81 = (void *)swift_unknownObjectRelease();
        }
        v82 = (*(uint64_t (**)(void *))((*v80 & *v79) + 0x118))(v81);
        if (v82)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v82 + 368))(a1);
          swift_release();
        }

        return;
      }
    }
    else
    {
      v29 = *(double *)&v28[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_intervalFromEndOfSpeech];
      v30 = v93;
      if ((v28[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_silenceBefore] & 1) == 0)
        goto LABEL_4;
    }
    v31 = 0xE500000000000000;
    v32 = 0x3E6C69733CLL;
    goto LABEL_10;
  }
  v33 = sub_24A1B9D90();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v10, v33, v3);
  v34 = sub_24A215A74();
  v35 = sub_24A216104();
  if (os_log_type_enabled(v34, v35))
  {
    v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v36 = 0;
    _os_log_impl(&dword_24A12D000, v34, v35, "Did not actually have a keyword in keywordSpotterShouldTriggerKeyword", v36, 2u);
    MEMORY[0x24BD0AAAC](v36, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v3);
}

void VAKeywordSpotterBase.__allocating_init(delegate:configuration:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void VAKeywordSpotterBase.init(delegate:configuration:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_24A1F06E4()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  sub_24A14D184(v0 + OBJC_IVAR____TtC12VoiceActions20VAKeywordSpotterBase_runtimeParamsFactory);

  return swift_bridgeObjectRelease();
}

id VAKeywordSpotterBase.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VAKeywordSpotterBase();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_24A1F07F8()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x218))();
}

uint64_t sub_24A1F0814()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x220))();
}

void sub_24A1F0830(id a1, char a2)
{
  if ((a2 & 1) != 0)

}

uint64_t sub_24A1F083C(void *a1)
{
  double v2;
  uint64_t result;
  _QWORD *v4;

  objc_msgSend(a1, sel_sampleRate);
  if (v2 != 16000.0
    || objc_msgSend(a1, sel_channelCount) != 1
    || objc_msgSend(a1, sel_commonFormat) != (id)3
    || (result = (uint64_t)objc_msgSend(a1, sel_isInterleaved), (result & 1) != 0))
  {
    sub_24A14C404();
    swift_allocError();
    *v4 = 0xD00000000000003ELL;
    v4[1] = 0x800000024A2279C0;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_24A1F0908()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_24A1F093C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (_QWORD *)v0[4];
  v3 = v0[5];
  v4 = v0[6];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_24A152AD0;
  return sub_24A1EE540((uint64_t)v5, v6, v7, v2, v3, v4);
}

uint64_t type metadata accessor for VAKeywordSpotterBase()
{
  return objc_opt_self();
}

uint64_t method lookup function for VAKeywordSpotterBase()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAKeywordSpotterBase.addAudioAsyncNoChecks(buffer:hostTime:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v6 = *(int **)((*MEMORY[0x24BEE4EA0] & *v2) + 0x1F8);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_24A152AD0;
  return v9(a1, a2);
}

uint64_t dispatch thunk of VAKeywordSpotterBase.keywordSpotterDidUpdateScores(verboseLog:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x218))();
}

uint64_t dispatch thunk of VAKeywordSpotterBase.keywordSpotterShouldTriggerKeyword(keywordResult:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x220))();
}

void sub_24A1F0A80()
{
  swift_deletedMethodError();
  __break(1u);
}

uint64_t sub_24A1F0A90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;

  swift_beginAccess();
  v3 = *(_DWORD *)(v1 + 40);
  v4 = *(_BYTE *)(v1 + 44);
  v5 = *(_BYTE *)(v1 + 45);
  v6 = *(_BYTE *)(v1 + 64);
  v7 = *(_QWORD *)(v1 + 72);
  v8 = *(_BYTE *)(v1 + 80);
  v9 = *(_BYTE *)(v1 + 81);
  v10 = *(_DWORD *)(v1 + 84);
  v11 = *(_BYTE *)(v1 + 88);
  v13 = *(_QWORD *)(v1 + 96);
  v12 = *(_QWORD *)(v1 + 104);
  v14 = *(_WORD *)(v1 + 112);
  v15 = *(_BYTE *)(v1 + 114);
  v16 = *(_BYTE *)(v1 + 115);
  v17 = *(_BYTE *)(v1 + 116);
  v18 = *(_BYTE *)(v1 + 117);
  v19 = *(_BYTE *)(v1 + 118);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 32);
  *(_DWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 12) = v4;
  *(_BYTE *)(a1 + 13) = v5;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 48);
  *(_BYTE *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 49) = v9;
  *(_DWORD *)(a1 + 52) = v10;
  *(_BYTE *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v13;
  *(_QWORD *)(a1 + 72) = v12;
  *(_WORD *)(a1 + 80) = v14;
  *(_BYTE *)(a1 + 82) = v15;
  *(_BYTE *)(a1 + 83) = v16;
  *(_BYTE *)(a1 + 84) = v17;
  *(_BYTE *)(a1 + 85) = v18;
  *(_BYTE *)(a1 + 86) = v19;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A1F0B6C(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  int v10;
  char v11;
  char v13;
  char v14;
  char v15;
  char v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;

  v22 = *a1;
  v2 = *((_DWORD *)a1 + 2);
  v3 = *((_BYTE *)a1 + 12);
  v4 = *((_BYTE *)a1 + 13);
  v5 = a1[2];
  v6 = a1[3];
  v7 = *((_BYTE *)a1 + 32);
  v8 = a1[5];
  v9 = *((_BYTE *)a1 + 48);
  v10 = *((_DWORD *)a1 + 13);
  v20 = *((_BYTE *)a1 + 56);
  v21 = *((_BYTE *)a1 + 49);
  v18 = a1[9];
  v19 = a1[8];
  v16 = *((_BYTE *)a1 + 82);
  v17 = *((_WORD *)a1 + 40);
  v14 = *((_BYTE *)a1 + 84);
  v15 = *((_BYTE *)a1 + 83);
  v13 = *((_BYTE *)a1 + 85);
  v11 = *((_BYTE *)a1 + 86);
  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = v22;
  *(_DWORD *)(v1 + 40) = v2;
  *(_BYTE *)(v1 + 44) = v3;
  *(_BYTE *)(v1 + 45) = v4;
  *(_QWORD *)(v1 + 48) = v5;
  *(_QWORD *)(v1 + 56) = v6;
  *(_BYTE *)(v1 + 64) = v7;
  *(_QWORD *)(v1 + 72) = v8;
  *(_BYTE *)(v1 + 80) = v9;
  *(_BYTE *)(v1 + 81) = v21;
  *(_DWORD *)(v1 + 84) = v10;
  *(_BYTE *)(v1 + 88) = v20;
  *(_QWORD *)(v1 + 96) = v19;
  *(_QWORD *)(v1 + 104) = v18;
  *(_WORD *)(v1 + 112) = v17;
  *(_BYTE *)(v1 + 114) = v16;
  *(_BYTE *)(v1 + 115) = v15;
  *(_BYTE *)(v1 + 116) = v14;
  *(_BYTE *)(v1 + 117) = v13;
  *(_BYTE *)(v1 + 118) = v11;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A1F0CB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC12VoiceActions13VAStrategyAVS_lastActivated;
  swift_beginAccess();
  return sub_24A1F0D04(v3, a1);
}

uint64_t sub_24A1F0D04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_24A135F88(&qword_257912728);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A1F0D4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC12VoiceActions13VAStrategyAVS_lastActivated;
  swift_beginAccess();
  sub_24A1F0DA4(a1, v3);
  return swift_endAccess();
}

uint64_t sub_24A1F0DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_24A135F88(&qword_257912728);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*sub_24A1F0DEC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A1F0E30()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A1F0E78(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions13VAStrategyAVS_detections);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A1F0EC8())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_24A1F0F0C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v35 = a1;
  v36 = a2;
  v4 = sub_24A2163BC();
  v37 = *(_QWORD *)(v4 - 8);
  v38 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = swift_allocObject();
  v8 = *a3;
  v9 = *((_DWORD *)a3 + 2);
  v10 = *((_BYTE *)a3 + 12);
  v11 = *((_BYTE *)a3 + 13);
  v12 = a3[2];
  v13 = a3[3];
  v14 = *((_BYTE *)a3 + 32);
  v34 = a3[5];
  v15 = *((unsigned __int8 *)a3 + 48);
  v32 = *((unsigned __int8 *)a3 + 49);
  v33 = v15;
  v16 = *((_DWORD *)a3 + 13);
  v31 = *((unsigned __int8 *)a3 + 56);
  v17 = a3[8];
  v29 = a3[9];
  v30 = v17;
  LODWORD(v17) = *((unsigned __int16 *)a3 + 40);
  v27 = *((unsigned __int8 *)a3 + 82);
  v28 = v17;
  LODWORD(v17) = *((unsigned __int8 *)a3 + 83);
  v25 = *((unsigned __int8 *)a3 + 84);
  v26 = v17;
  HIDWORD(v24) = *((unsigned __int8 *)a3 + 85);
  v18 = v7 + OBJC_IVAR____TtC12VoiceActions13VAStrategyAVS_lastActivated;
  LOBYTE(a3) = *((_BYTE *)a3 + 86);
  v19 = sub_24A2163A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  v20 = v36;
  *(_QWORD *)(v7 + 16) = v35;
  *(_QWORD *)(v7 + 24) = v20;
  *(_QWORD *)(v7 + 32) = v8;
  *(_DWORD *)(v7 + 40) = v9;
  *(_BYTE *)(v7 + 44) = v10;
  *(_BYTE *)(v7 + 45) = v11;
  *(_QWORD *)(v7 + 48) = v12;
  *(_QWORD *)(v7 + 56) = v13;
  *(_BYTE *)(v7 + 64) = v14;
  *(_QWORD *)(v7 + 72) = v34;
  *(_BYTE *)(v7 + 80) = v33;
  *(_BYTE *)(v7 + 81) = v32;
  *(_DWORD *)(v7 + 84) = v16;
  *(_BYTE *)(v7 + 88) = v31;
  v21 = v29;
  *(_QWORD *)(v7 + 96) = v30;
  *(_QWORD *)(v7 + 104) = v21;
  *(_WORD *)(v7 + 112) = v28;
  *(_BYTE *)(v7 + 114) = v27;
  *(_BYTE *)(v7 + 115) = v26;
  *(_BYTE *)(v7 + 116) = v25;
  *(_BYTE *)(v7 + 117) = BYTE4(v24);
  *(_BYTE *)(v7 + 118) = (_BYTE)a3;
  swift_retain();
  swift_unknownObjectRetain();
  sub_24A2163B0();
  (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v7 + OBJC_IVAR____TtC12VoiceActions13VAStrategyAVS_clock, v6, v38);
  *(_QWORD *)(v7 + OBJC_IVAR____TtC12VoiceActions13VAStrategyAVS_detections) = MEMORY[0x24BEE4AF8];
  swift_release();
  v22 = sub_24A180204();
  swift_unknownObjectRelease();
  return v22;
}

uint64_t sub_24A1F1124(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  float v20;
  uint64_t result;
  uint64_t (*v22)(double *);
  uint64_t (*v23)(double *, _QWORD);
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  unint64_t v28;
  uint64_t v29;
  float v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t i;
  _QWORD *v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  void (*v51)(double *__return_ptr);
  uint64_t v52;
  float v53;
  float *v54;
  uint64_t v55;
  uint64_t ObjectType;
  uint64_t v57;
  uint64_t (*v58)(void);
  float *v59;
  uint64_t v60;
  char *v61;
  float *v62;
  int v63;
  __int16 v64;
  __int128 v65;
  char v66;
  uint64_t v67;
  char v68;
  char v69;
  int v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  __int16 v74;
  char v75;
  char v76;
  char v77;
  char v78;
  char v79;
  double v80;
  unint64_t v81;
  __int128 v82;
  char v83;
  uint64_t v84;
  char v85;
  char v86;
  int v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  __int16 v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;

  v3 = v2;
  v4 = v1;
  v6 = sub_24A215A8C();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v61 = (char *)&v57 - v12;
  v13 = (*(_QWORD *(**)(double *__return_ptr, uint64_t))(*(_QWORD *)a1 + 144))(&v80, v11);
  v14 = v81;
  if (v81)
  {
    v60 = v6;
    v15 = *(_QWORD *)&v80;
    v16 = *(float *)&v82;
    (*(void (**)(double *__return_ptr, _QWORD *))(*v1 + 152))(&v80, v13);
    v62 = *(float **)&v80;
    v63 = v81;
    v64 = WORD2(v81);
    v65 = v82;
    v66 = v83;
    v67 = v84;
    v68 = v85;
    v69 = v86;
    v70 = v87;
    v71 = v88;
    v72 = v89;
    v73 = v90;
    v74 = v91;
    v75 = v92;
    v76 = v93;
    v77 = v94;
    v78 = v95;
    v79 = v96;
    v17 = VARuntimeParameters.keywordsToThresholds.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!*(_QWORD *)(v17 + 16) || (v18 = sub_24A148970(v15, v14), (v19 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_24A14C404();
      swift_allocError();
      *v35 = 0xD00000000000002ELL;
      v35[1] = 0x800000024A227A00;
      return swift_willThrow();
    }
    v20 = *(float *)(*(_QWORD *)(v17 + 56) + 4 * v18);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (v20 < v16)
    {
      result = sub_24A1F18A8();
      if ((result & 1) == 0)
      {
        v22 = *(uint64_t (**)(double *))(*v4 + 216);
        swift_retain();
        v23 = (uint64_t (*)(double *, _QWORD))v22(&v80);
        v25 = v24;
        MEMORY[0x24BD09750]();
        if (*(_QWORD *)((*v25 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v25 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_24A215ED0();
        sub_24A215F0C();
        sub_24A215EB8();
        v26 = v23(&v80, 0);
        v27 = *(uint64_t (**)(void))(*v4 + 200);
        v28 = ((uint64_t (*)(uint64_t))v27)(v26);
        v29 = v28 >> 62 ? sub_24A216410() : *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
        result = swift_bridgeObjectRelease();
        if (v29 >= 1)
        {
          v59 = (float *)sub_24A1E6EDC();
          v30 = *v59;
          v31 = v27();
          if (v31 >> 62)
            v32 = sub_24A216410();
          else
            v32 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
          v57 = v3;
          v58 = v27;
          if (v32)
          {
            if (v32 < 1)
              goto LABEL_46;
            v33 = 0;
            for (i = 0; i != v32; ++i)
            {
              if ((v31 & 0xC000000000000001) != 0)
              {
                v37 = MEMORY[0x24BD09BE8](i, v31);
              }
              else
              {
                v37 = *(_QWORD *)(v31 + 8 * i + 32);
                swift_retain();
              }
              (*(void (**)(double *__return_ptr))(*(_QWORD *)v37 + 144))(&v80);
              if (v81)
              {
                v36 = *(float *)&v82;
                swift_release();
                swift_bridgeObjectRelease();
              }
              else
              {
                v36 = *v59;
                swift_release();
              }
              if (v30 < v36)
                v33 = i;
            }
          }
          else
          {
            v33 = 0;
          }
          v42 = swift_bridgeObjectRelease();
          v43 = ((uint64_t (*)(uint64_t))v58)(v42);
          if ((v43 & 0xC000000000000001) != 0)
          {
            v45 = MEMORY[0x24BD09BE8](v33, v43);
            v44 = v60;
LABEL_35:
            swift_bridgeObjectRelease();
            v46 = sub_24A1B9D90();
            v47 = v61;
            (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v61, v46, v44);
            swift_retain_n();
            v48 = sub_24A215A74();
            v49 = sub_24A2160F8();
            if (!os_log_type_enabled(v48, v49))
            {

              swift_release_n();
              (*(void (**)(char *, uint64_t))(v7 + 8))(v47, v44);
              goto LABEL_40;
            }
            v50 = swift_slowAlloc();
            v59 = (float *)swift_slowAlloc();
            v62 = v59;
            *(_DWORD *)v50 = 136315650;
            v51 = *(void (**)(double *__return_ptr))(*(_QWORD *)v45 + 144);
            v51(&v80);
            if (v81)
            {
              v80 = COERCE_DOUBLE(sub_24A148270(*(uint64_t *)&v80, v81, (uint64_t *)&v62));
              sub_24A216260();
              swift_release_n();
              v52 = swift_bridgeObjectRelease();
              *(_WORD *)(v50 + 12) = 2048;
              ((void (*)(double *__return_ptr, uint64_t))v51)(&v80, v52);
              if (v81)
              {
                v53 = *(float *)&v82;
                swift_bridgeObjectRelease();
                v80 = v53;
                sub_24A216260();
                swift_release_n();
                *(_WORD *)(v50 + 22) = 2048;
                v80 = v20;
                sub_24A216260();
                _os_log_impl(&dword_24A12D000, v48, v49, "FINAL AVS KEYWORD DETECTED ((^D&^)): %s with score %f, using threshold %f", (uint8_t *)v50, 0x20u);
                v54 = v59;
                swift_arrayDestroy();
                MEMORY[0x24BD0AAAC](v54, -1, -1);
                MEMORY[0x24BD0AAAC](v50, -1, -1);

                (*(void (**)(char *, uint64_t))(v7 + 8))(v61, v60);
LABEL_40:
                (*(void (**)(_QWORD))(*v4 + 208))(MEMORY[0x24BEE4AF8]);
                v55 = v4[3];
                ObjectType = swift_getObjectType();
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v45, ObjectType, v55);
                return swift_release();
              }
              goto LABEL_48;
            }
LABEL_47:
            swift_release_n();
            __break(1u);
LABEL_48:
            result = swift_release();
            __break(1u);
            return result;
          }
          v44 = v60;
          if ((v33 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (v33 < *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            v45 = *(_QWORD *)(v43 + 8 * v33 + 32);
            swift_retain();
            goto LABEL_35;
          }
          __break(1u);
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
      }
    }
  }
  else
  {
    v38 = sub_24A1B9D90();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v38, v6);
    v39 = sub_24A215A74();
    v40 = sub_24A2160F8();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v41 = 0;
      _os_log_impl(&dword_24A12D000, v39, v40, "Did not find a detection in StrategyLayerAVS:handleKeywordResult", v41, 2u);
      MEMORY[0x24BD0AAAC](v41, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  return result;
}

uint64_t sub_24A1F18A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  uint64_t v22;
  uint64_t result;
  void (*v24)(char *, uint64_t);
  _QWORD v25[3];
  _QWORD v26[4];
  char v27;

  v1 = v0;
  v2 = sub_24A2163A4();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_24A135F88(&qword_257912728);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)v25 - v11;
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)v25 - v14;
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v0 + 152))(v26, v13);
  v16 = v26[3];
  v17 = v27;
  v25[2] = v26[2];
  swift_bridgeObjectRelease();
  v18 = swift_bridgeObjectRelease();
  if ((v17 & 1) == 0)
  {
    v25[1] = v16;
    v19 = *(void (**)(uint64_t))(*(_QWORD *)v0 + 176);
    v19(v18);
    v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48);
    v21 = v20(v15, 1, v2);
    sub_24A1F1E7C((uint64_t)v15);
    if (v21 != 1)
    {
      v22 = sub_24A21638C();
      v19(v22);
      result = v20(v12, 1, v2);
      if ((_DWORD)result == 1)
      {
        __break(1u);
        return result;
      }
      sub_24A216398();
      v24 = *(void (**)(char *, uint64_t))(v3 + 8);
      v24(v5, v2);
      v24(v12, v2);
      if ((sub_24A216698() & 1) == 0)
        return 1;
    }
    sub_24A21638C();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v9, 0, 1, v2);
    (*(void (**)(char *))(*(_QWORD *)v1 + 184))(v9);
  }
  return 0;
}

void sub_24A1F1AD4()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_24A1F1B00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24A1F1E7C(v0 + OBJC_IVAR____TtC12VoiceActions13VAStrategyAVS_lastActivated);
  v1 = v0 + OBJC_IVAR____TtC12VoiceActions13VAStrategyAVS_clock;
  v2 = sub_24A2163BC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A1F1B78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = VAStrategyLayer.deinit();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24A1F1E7C(v0 + OBJC_IVAR____TtC12VoiceActions13VAStrategyAVS_lastActivated);
  v1 = v0 + OBJC_IVAR____TtC12VoiceActions13VAStrategyAVS_clock;
  v2 = sub_24A2163BC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t VAStrategyProviderAVS.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t VAStrategyProviderAVS.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_24A1F1C24(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v37 = a1;
  v38 = a2;
  v4 = sub_24A2163BC();
  v39 = *(_QWORD *)(v4 - 8);
  v40 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a3;
  v8 = *((_DWORD *)a3 + 2);
  v9 = *((_BYTE *)a3 + 12);
  v10 = *((_BYTE *)a3 + 13);
  v11 = a3[2];
  v12 = a3[3];
  v13 = *((_BYTE *)a3 + 32);
  v36 = a3[5];
  v14 = *((unsigned __int8 *)a3 + 48);
  v34 = *((unsigned __int8 *)a3 + 49);
  v35 = v14;
  v15 = *((_DWORD *)a3 + 13);
  v33 = *((unsigned __int8 *)a3 + 56);
  v16 = a3[9];
  v32 = a3[8];
  v17 = *((unsigned __int16 *)a3 + 40);
  v30 = *((unsigned __int8 *)a3 + 82);
  v31 = v17;
  v18 = *((unsigned __int8 *)a3 + 83);
  v28 = *((unsigned __int8 *)a3 + 84);
  v29 = v18;
  v19 = *((unsigned __int8 *)a3 + 85);
  v26 = *((unsigned __int8 *)a3 + 86);
  v27 = v19;
  type metadata accessor for VAStrategyAVS();
  v20 = swift_allocObject();
  v21 = v20 + OBJC_IVAR____TtC12VoiceActions13VAStrategyAVS_lastActivated;
  v22 = sub_24A2163A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
  v23 = v38;
  *(_QWORD *)(v20 + 16) = v37;
  *(_QWORD *)(v20 + 24) = v23;
  *(_QWORD *)(v20 + 32) = v7;
  *(_DWORD *)(v20 + 40) = v8;
  *(_BYTE *)(v20 + 44) = v9;
  *(_BYTE *)(v20 + 45) = v10;
  *(_QWORD *)(v20 + 48) = v11;
  *(_QWORD *)(v20 + 56) = v12;
  *(_BYTE *)(v20 + 64) = v13;
  *(_QWORD *)(v20 + 72) = v36;
  *(_BYTE *)(v20 + 80) = v35;
  *(_BYTE *)(v20 + 81) = v34;
  *(_DWORD *)(v20 + 84) = v15;
  *(_BYTE *)(v20 + 88) = v33;
  *(_QWORD *)(v20 + 96) = v32;
  *(_QWORD *)(v20 + 104) = v16;
  *(_WORD *)(v20 + 112) = v31;
  *(_BYTE *)(v20 + 114) = v30;
  *(_BYTE *)(v20 + 115) = v29;
  *(_BYTE *)(v20 + 116) = v28;
  *(_BYTE *)(v20 + 117) = v27;
  *(_BYTE *)(v20 + 118) = v26;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  sub_24A2163B0();
  (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v20 + OBJC_IVAR____TtC12VoiceActions13VAStrategyAVS_clock, v6, v40);
  *(_QWORD *)(v20 + OBJC_IVAR____TtC12VoiceActions13VAStrategyAVS_detections) = MEMORY[0x24BEE4AF8];
  swift_release();
  return sub_24A180204();
}

uint64_t VAStrategyProviderAVS.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t VAStrategyProviderAVS.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_24A1F1E54()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 88))();
}

uint64_t sub_24A1F1E7C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_24A135F88(&qword_257912728);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for VAStrategyAVS()
{
  uint64_t result;

  result = qword_25791CE60;
  if (!qword_25791CE60)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_24A1F1EF8()
{
  return type metadata accessor for VAStrategyAVS();
}

void sub_24A1F1F00()
{
  unint64_t v0;
  unint64_t v1;

  sub_24A1F1FA8();
  if (v0 <= 0x3F)
  {
    sub_24A2163BC();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

void sub_24A1F1FA8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_257912758[0])
  {
    sub_24A2163A4();
    v0 = sub_24A216200();
    if (!v1)
      atomic_store(v0, qword_257912758);
  }
}

uint64_t type metadata accessor for VAStrategyProviderAVS()
{
  return objc_opt_self();
}

uint64_t method lookup function for VAStrategyProviderAVS()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAStrategyProviderAVS.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of VAStrategyProviderAVS.getStrategy(delegate:params:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t normalizeFP32Array(_:)(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  float *v4;
  unint64_t v5;
  float v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    sub_24A148BB8(0, v2, 0);
    result = v8;
    v4 = (float *)(a1 + 32);
    v5 = *(_QWORD *)(v8 + 16);
    do
    {
      v6 = *v4;
      v9 = result;
      v7 = *(_QWORD *)(result + 24);
      if (v5 >= v7 >> 1)
      {
        sub_24A148BB8(v7 > 1, v5 + 1, 1);
        result = v9;
      }
      *(_QWORD *)(result + 16) = v5 + 1;
      *(float *)(result + 4 * v5 + 32) = v6 / 32767.0;
      ++v4;
      ++v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t normalizeEmbedding(_:)(uint64_t a1)
{
  vDSP_Length v2;
  float v3;
  _QWORD __C[4];
  float v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  LODWORD(__C[0]) = 2143289344;
  vDSP_svesq((const float *)(a1 + 32), 1, (float *)__C, v2);
  v3 = *(float *)__C;
  __C[0] = a1;
  __C[3] = __C;
  v6 = sqrtf(v3);
  return sub_24A1D5F30(v2, (uint64_t (*)(_QWORD *, uint64_t *))sub_24A1F3990);
}

uint64_t EncoderPredictionAVS.embeddings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t EncoderPredictionAVS.speech.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t EncoderPredictionAVS.__allocating_init(embeddings:speech:normalize:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  vDSP_Length v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD __C[2];

  __C[1] = *MEMORY[0x24BDAC8D0];
  v6 = swift_allocObject();
  if ((a3 & 1) != 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    LODWORD(__C[0]) = 2143289344;
    vDSP_svesq((const float *)(a1 + 32), 1, (float *)__C, v7);
    __C[0] = a1;
    v8 = MEMORY[0x24BDAC7A8](*(_QWORD *)(a1 + 16));
    v9 = sub_24A1D5F30(v8, (uint64_t (*)(_QWORD *, uint64_t *))sub_24A1F3990);
    swift_bridgeObjectRelease();
    a1 = v9;
  }
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  return v6;
}

uint64_t EncoderPredictionAVS.init(embeddings:speech:normalize:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v5;
  vDSP_Length v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD __C[2];

  v5 = a1;
  __C[1] = *MEMORY[0x24BDAC8D0];
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a1 + 16);
    LODWORD(__C[0]) = 2143289344;
    vDSP_svesq((const float *)(a1 + 32), 1, (float *)__C, v6);
    __C[0] = v5;
    v7 = MEMORY[0x24BDAC7A8](*(_QWORD *)(v5 + 16));
    v8 = sub_24A1D5F30(v7, (uint64_t (*)(_QWORD *, uint64_t *))sub_24A1F3990);
    swift_bridgeObjectRelease();
    v5 = v8;
  }
  *(_QWORD *)(v3 + 16) = v5;
  *(_QWORD *)(v3 + 24) = a2;
  return v3;
}

uint64_t EncoderPredictionAVS.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t EncoderPredictionAVS.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

unint64_t static VAAVSAudioEncoderModel.modelName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_24A1F242C()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t sub_24A1F2460(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 80) = a1;
  return swift_release();
}

uint64_t (*sub_24A1F24A4())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_24A1F24E0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 96);
}

double VAAVSAudioEncoderModel.bufferDurationSeconds.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 112);
}

uint64_t VAAVSAudioEncoderModel.audioBufferMaxSamples.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 120);
}

uint64_t VAAVSAudioEncoderModel.embeddingMaxFrames.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 136);
}

uint64_t VAAVSAudioEncoderModel.__allocating_init(computeUnits:)(char *a1)
{
  swift_allocObject();
  return VAAVSAudioEncoderModel.init(computeUnits:)(a1);
}

uint64_t VAAVSAudioEncoderModel.init(computeUnits:)(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t (*v15)(void);
  uint64_t (*v16)(void);
  uint64_t v17;
  uint64_t result;
  uint64_t (*v19)(void);
  uint64_t v20;
  char v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  char v33;
  char v34;
  unint64_t v35;
  char v36;
  uint64_t (*v37)(uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  unint64_t v44;
  char v45;
  uint64_t (*v46)(uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t, uint64_t);
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  unint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  _OWORD v80[2];
  uint64_t v81;

  v3 = v1;
  v70 = sub_24A215A8C();
  v5 = *(_QWORD *)(v70 - 8);
  v6 = MEMORY[0x24BDAC7A8](v70);
  v69 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v71 = (char *)&v61 - v8;
  v9 = type metadata accessor for VASignpostInterval();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a1;
  type metadata accessor for VALog();
  *(_QWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  v74 = 0;
  v75 = 0xE000000000000000;
  swift_retain();
  sub_24A216308();
  sub_24A215D98();
  v73 = v12;
  sub_24A2163D4();
  static VALog.begin(_:_:)("VoiceActions with AVS", 21, 2u, v74, v75, (uint64_t)v11);
  swift_bridgeObjectRelease();
  type metadata accessor for VAStrideConfiguration();
  v13 = static VAStrideConfiguration.forFlexibleAVS()();
  v14 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v15 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v13) + 0xA0);
  *(_QWORD *)(v3 + 88) = v15();
  *(_QWORD *)(v3 + 96) = (*(uint64_t (**)(void))((*v14 & *v13) + 0xB8))();
  v16 = *(uint64_t (**)(void))((*v14 & *v13) + 0xD0);
  *(_QWORD *)(v3 + 104) = v16();
  v17 = v15();
  result = v16();
  if (!result)
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v17 == 0x8000000000000000 && result == -1)
    goto LABEL_33;
  *(_QWORD *)(v3 + 128) = v17 / result;
  *(double *)(v3 + 112) = (*(double (**)(void))((*v14 & *v13) + 0x1A8))();
  v19 = *(uint64_t (**)(void))((*v14 & *v13) + 0x100);
  *(_QWORD *)(v3 + 120) = v19();
  v20 = v19();
  result = v16();
  if (!result)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v20 == 0x8000000000000000 && result == -1)
    goto LABEL_34;
  *(_QWORD *)(v3 + 136) = v20 / result;
  type metadata accessor for VAEspressoUtilsV2();
  v21 = sub_24A1516F0();
  sub_24A1D80C4(0xD00000000000001ELL, 0x800000024A227AC0, v21 & 1, (uint64_t *)&v76);
  v72 = v2;
  if (v2)
  {
    sub_24A18EDEC((uint64_t)v11);

LABEL_29:
    swift_release();
    swift_release();
    type metadata accessor for VAAVSAudioEncoderModel();
    return swift_deallocPartialClassInstance();
  }
  v65 = v11;
  v22 = sub_24A1B9D90();
  v66 = v5;
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v62 = v22;
  v24 = v70;
  v63 = v23;
  ((void (*)(char *))v23)(v71);
  v80[0] = v76;
  v25 = v77;
  v79 = *((_QWORD *)&v77 + 1);
  v81 = v77;
  v26 = v78;
  sub_24A14C448((uint64_t)v80);
  sub_24A14C470((uint64_t)&v81);
  sub_24A14C470((uint64_t)&v79);
  swift_retain();
  swift_retain();
  v27 = sub_24A215A74();
  v28 = sub_24A2160F8();
  v29 = os_log_type_enabled(v27, v28);
  v67 = *((_QWORD *)&v26 + 1);
  v68 = v26;
  v64 = *((_QWORD *)&v25 + 1);
  if (v29)
  {
    v30 = swift_slowAlloc();
    *(_DWORD *)v30 = 134218240;
    v74 = *(_QWORD *)(v25 + 16);
    sub_24A216260();
    *(_WORD *)(v30 + 12) = 2048;
    v74 = *(_QWORD *)(*((_QWORD *)&v25 + 1) + 16);
    sub_24A216260();
    sub_24A14C498((uint64_t)v80);
    sub_24A14C4C0((uint64_t)&v81);
    sub_24A14C4C0((uint64_t)&v79);
    swift_release();
    swift_release();
    _os_log_impl(&dword_24A12D000, v27, v28, "AVS model is loaded with %ld inputs and %ld outputs", (uint8_t *)v30, 0x16u);
    v31 = v30;
    v24 = v70;
    MEMORY[0x24BD0AAAC](v31, -1, -1);

  }
  else
  {
    sub_24A14C498((uint64_t)v80);
    sub_24A14C4C0((uint64_t)&v81);
    sub_24A14C4C0((uint64_t)&v79);

    swift_release();
    swift_release();
  }
  v32 = *(void (**)(char *, uint64_t))(v66 + 8);
  v32(v71, v24);
  if (*(_QWORD *)(v25 + 16) != 1)
    goto LABEL_27;
  swift_bridgeObjectRetain();
  sub_24A148970(0xD000000000000011, 0x800000024A227B20);
  v34 = v33;
  sub_24A14C4C0((uint64_t)&v81);
  if ((v34 & 1) == 0)
    goto LABEL_27;
  if (!*(_QWORD *)(v25 + 16))
    goto LABEL_27;
  v35 = sub_24A148970(0xD000000000000011, 0x800000024A227B20);
  if ((v36 & 1) == 0)
    goto LABEL_27;
  v37 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v25 + 56) + 8 * v35) + 200);
  v38 = swift_retain();
  v39 = v37(v38);
  result = swift_release();
  if (*(_QWORD *)(v39 + 16) < 2uLL)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v40 = *(_QWORD *)(v39 + 40);
  swift_bridgeObjectRelease();
  if (v40 != 64)
  {
LABEL_27:
    sub_24A14C404();
    v57 = swift_allocError();
    *v58 = 0xD00000000000001BLL;
    v58[1] = 0x800000024A227B00;
    v72 = v57;
    swift_willThrow();

    sub_24A14C498((uint64_t)v80);
    sub_24A14C4C0((uint64_t)&v81);
    sub_24A14C4C0((uint64_t)&v79);
LABEL_28:
    swift_release();
    swift_release();
    sub_24A18EDEC((uint64_t)v65);
    goto LABEL_29;
  }
  v41 = v64;
  if (*(_QWORD *)(v64 + 16) != 3)
    goto LABEL_30;
  sub_24A14C470((uint64_t)&v79);
  sub_24A148970(0x6E69646465626D65, 0xEC000000745F7367);
  v43 = v42;
  sub_24A14C4C0((uint64_t)&v79);
  if ((v43 & 1) == 0)
    goto LABEL_30;
  if (!*(_QWORD *)(v41 + 16))
    goto LABEL_30;
  v44 = sub_24A148970(0x6E69646465626D65, 0xEC000000745F7367);
  if ((v45 & 1) == 0)
    goto LABEL_30;
  v46 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v41 + 56) + 8 * v44) + 200);
  v47 = swift_retain();
  v48 = v46(v47);
  result = swift_release();
  if (*(_QWORD *)(v48 + 16) < 2uLL)
  {
LABEL_36:
    __break(1u);
    return result;
  }
  v49 = *(_QWORD *)(v48 + 40);
  swift_bridgeObjectRelease();
  if (v49 != 320)
  {
LABEL_30:
    sub_24A14C404();
    v59 = swift_allocError();
    *v60 = 0xD00000000000001CLL;
    v60[1] = 0x800000024A227B40;
    v72 = v59;
    swift_willThrow();

    sub_24A14C498((uint64_t)v80);
    sub_24A14C4C0((uint64_t)&v81);
    sub_24A14C4C0((uint64_t)&v79);
    goto LABEL_28;
  }
  v50 = v77;
  *(_OWORD *)(v3 + 16) = v76;
  *(_OWORD *)(v3 + 32) = v50;
  *(_OWORD *)(v3 + 48) = v78;
  type metadata accessor for VAAVSFeatureExtract();
  sub_24A14C448((uint64_t)v80);
  sub_24A14C470((uint64_t)&v81);
  sub_24A14C470((uint64_t)&v79);
  swift_retain();
  v51 = swift_retain();
  *(_QWORD *)(v3 + 64) = VAAVSFeatureExtract.__allocating_init()(v51);
  *(_QWORD *)(v3 + 72) = -1;
  swift_release();
  v52 = v69;
  v63(v69, v62, v24);
  v53 = sub_24A215A74();
  v54 = sub_24A2160F8();
  if (os_log_type_enabled(v53, v54))
  {
    v55 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v55 = 134217984;
    v74 = 64;
    sub_24A216260();
    _os_log_impl(&dword_24A12D000, v53, v54, "VAFeatureExtract created with %ld filters", v55, 0xCu);
    MEMORY[0x24BD0AAAC](v55, -1, -1);
  }

  v32(v52, v70);
  v56 = (uint64_t)v65;
  VASignpostInterval.end(_:)((Swift::String_optional)0);

  sub_24A14C498((uint64_t)v80);
  sub_24A14C4C0((uint64_t)&v81);
  sub_24A14C4C0((uint64_t)&v79);
  swift_release();
  swift_release();
  sub_24A18EDEC(v56);
  return sub_24A180204();
}

uint64_t sub_24A1F2DFC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t result;

  type metadata accessor for VACircularMatrixBuffer();
  v1 = sub_24A1D3E00(41, 64);
  result = (*(uint64_t (**)(_QWORD *))(*v0 + 240))(v1);
  v0[9] = 0;
  return result;
}

uint64_t sub_24A1F2E54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  vDSP_Length v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD __C[3];

  v3 = v2;
  __C[2] = *MEMORY[0x24BDAC8D0];
  v5 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 232))();
  if (!v5)
  {
    sub_24A14C404();
    swift_allocError();
    *v16 = 0xD000000000000039;
    v16[1] = 0x800000024A227B60;
    swift_willThrow();
    return v3;
  }
  v6 = v5;
  if ((*(_QWORD *)(v1 + 72) & 0x8000000000000000) != 0)
  {
    sub_24A14C404();
    swift_allocError();
    *v17 = 0xD000000000000021;
    v17[1] = 0x800000024A227BC0;
LABEL_10:
    swift_willThrow();
    swift_release();
    return v3;
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(uint64_t (**)(void))(*(_QWORD *)v1 + 296);
  if (v7 != v8())
  {
    sub_24A216308();
    swift_bridgeObjectRelease();
    sub_24A216584();
    sub_24A215D98();
    swift_bridgeObjectRelease();
    v18 = sub_24A215D98();
    ((void (*)(uint64_t))v8)(v18);
    sub_24A216584();
    sub_24A215D98();
    swift_bridgeObjectRelease();
    v3 = 0x800000024A227BA0;
    sub_24A1D7B64();
    swift_allocError();
    *v19 = 0xD000000000000018;
    v19[1] = 0x800000024A227BA0;
    goto LABEL_10;
  }
  normalizeFP32Array(_:)(a1);
  v9 = *(_QWORD *)(v1 + 72);
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  *(_QWORD *)(v1 + 72) = v11;
  v12 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v1 + 64)) + 0x170))();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 168))(v12);
  v13 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 176))(v13);
  v14 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 288))();
  if (v2)
  {
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    v21 = v14;
    v22 = v15;
    swift_bridgeObjectRelease();
    type metadata accessor for EncoderPredictionAVS();
    v3 = swift_allocObject();
    v23 = *(_QWORD *)(v21 + 16);
    LODWORD(__C[0]) = 2143289344;
    vDSP_svesq((const float *)(v21 + 32), 1, (float *)__C, v23);
    __C[0] = v21;
    v24 = MEMORY[0x24BDAC7A8](*(_QWORD *)(v21 + 16));
    v25 = sub_24A1D5F30(v24, (uint64_t (*)(_QWORD *, uint64_t *))sub_24A1F3990);
    swift_release();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 16) = v25;
    *(_QWORD *)(v3 + 24) = v22;
  }
  return v3;
}

uint64_t sub_24A1F31E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[6];
  uint64_t v13;
  uint64_t v14;

  v3 = a1;
  v14 = a1;
  sub_24A215F30();
  v4 = sub_24A215F30();
  v5 = MEMORY[0x24BD0A9EC](MEMORY[0x24BEE12E0], v4);
  if ((sub_24A2160C8() & 1) != 0)
  {
    swift_bridgeObjectRetain();
    return v3;
  }
  v14 = sub_24A215C00();
  v12[5] = v3;
  result = sub_24A2160BC();
  if (v13)
  {
    v7 = MEMORY[0x24BD097E0](v13, a2);
    result = swift_bridgeObjectRelease();
    if ((v7 & 0x8000000000000000) == 0)
    {
      if (v7)
      {
        v8 = 0;
        do
        {
          v9 = v8 + 1;
          v13 = v3;
          MEMORY[0x24BDAC7A8](result);
          v12[2] = a2;
          v12[3] = v10;
          v13 = sub_24A1B2FB0((void (*)(char *, char *))sub_24A1F3A30, (uint64_t)v12, v4, a2, MEMORY[0x24BEE4078], v5, MEMORY[0x24BEE40A8], v11);
          result = sub_24A215F24();
          v8 = v9;
        }
        while (v7 != v9);
      }
      return v14;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_24A1F3368(uint64_t a1, int32x2_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return MEMORY[0x24BEE4AF8];
  v3 = a1 + 32;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
  result = v2 * v4;
  if ((unsigned __int128)(v2 * (__int128)v4) >> 64 == (v2 * v4) >> 63)
  {
    a2.i32[0] = 0;
    result = sub_24A1420E4(result, a2);
    v6 = result;
    if (v4)
    {
      v7 = 0;
      v8 = 0;
LABEL_6:
      v9 = v8 + 1;
      v10 = v3;
      v11 = v2;
      while (v8 < *(_QWORD *)(*(_QWORD *)v10 + 16))
      {
        v12 = *(_DWORD *)(*(_QWORD *)v10 + 4 * v8 + 32);
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (unint64_t)sub_24A148928(v6);
          v6 = result;
        }
        if (v7 >= *(_QWORD *)(v6 + 16))
          goto LABEL_16;
        *(_DWORD *)(v6 + 4 * v7++ + 32) = v12;
        v10 += 8;
        if (!--v11)
        {
          ++v8;
          if (v9 == v4)
            return v6;
          goto LABEL_6;
        }
      }
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    return v6;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_24A1F3474()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  char v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v18;
  _QWORD *v19;

  v2 = v1;
  v3 = (*(uint64_t (**)(void))(*v0 + 280))();
  if (!*(_QWORD *)(v0[4] + 16)
    || (sub_24A148970(0xD000000000000011, 0x800000024A227B20), (v4 & 1) == 0)
    || (sub_24A135F88(&qword_25790DED8), (v5 = swift_dynamicCastClass()) == 0))
  {
    swift_bridgeObjectRelease();
    sub_24A216308();
    swift_bridgeObjectRelease();
    sub_24A14C404();
    swift_allocError();
    *v16 = 0xD000000000000027;
    v16[1] = 0x800000024A227BF0;
    swift_willThrow();
    return v3;
  }
  v6 = *(void (**)(uint64_t))(*(_QWORD *)v5 + 624);
  swift_retain();
  v6(v3);
  swift_bridgeObjectRelease();
  sub_24A1926B0();
  if (v2)
  {
LABEL_15:
    swift_release();
    return v3;
  }
  v7 = v0[5];
  if (!*(_QWORD *)(v7 + 16)
    || (sub_24A148970(0x6E69646465626D65, 0xEC000000745F7367), (v8 & 1) == 0)
    || (sub_24A135F88(&qword_25790DEE0), (v9 = swift_dynamicCastClass()) == 0))
  {
    sub_24A216308();
    swift_bridgeObjectRelease();
    sub_24A14C404();
    swift_allocError();
    *v18 = 0xD000000000000023;
    v18[1] = 0x800000024A227C20;
    swift_willThrow();
    goto LABEL_15;
  }
  v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 720);
  v11 = swift_retain();
  v3 = v10(v11);
  if (!*(_QWORD *)(v7 + 16)
    || (sub_24A148970(0x5F65636E656C6973, 0xE900000000000074), (v12 & 1) == 0)
    || (v13 = swift_dynamicCastClass()) == 0)
  {
    swift_bridgeObjectRelease();
    sub_24A216308();
    swift_bridgeObjectRelease();
    sub_24A14C404();
    swift_allocError();
    *v19 = 0xD000000000000020;
    v19[1] = 0x800000024A227C50;
    swift_willThrow();
    swift_release();
    goto LABEL_15;
  }
  v14 = *(void (**)(uint64_t))(*(_QWORD *)v13 + 720);
  v15 = swift_retain();
  v14(v15);
  swift_release();
  swift_release();
  swift_release();
  return v3;
}

void sub_24A1F3794()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_24A1F37C0()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t VAAVSAudioEncoderModel.deinit()
{
  uint64_t v0;

  v0 = VAAudioEncoderModel.deinit();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  return v0;
}

uint64_t VAAVSAudioEncoderModel.__deallocating_deinit()
{
  uint64_t v0;

  v0 = VAAudioEncoderModel.deinit();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_24A1F3914()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t sub_24A1F3930()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

void sub_24A1F393C(uint64_t a1, uint64_t a2, float a3)
{
  vDSP_Length v3;
  float v4;

  v3 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 16) == v3)
  {
    v4 = a3;
    if (*(_QWORD *)a2)
    {
      vDSP_vsdiv((const float *)(a1 + 32), 1, &v4, *(float **)a2, 1, v3);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_24A1F3990(uint64_t a1, _QWORD *a2)
{
  sub_24A1F39E4(a1, a2);
}

uint64_t type metadata accessor for VAAVSAudioEncoderModel()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for EncoderPredictionAVS()
{
  return objc_opt_self();
}

void sub_24A1F39E4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  float v4;
  uint64_t v5;

  v4 = *(float *)(v2 + 24);
  v5 = **(_QWORD **)(v2 + 16);
  sub_24A1F393C(v5, a1, v4);
  *a2 = *(_QWORD *)(v5 + 16);
}

uint64_t sub_24A1F3A30()
{
  return sub_24A215F48();
}

uint64_t method lookup function for EncoderPredictionAVS()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of EncoderPredictionAVS.__allocating_init(embeddings:speech:normalize:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t method lookup function for VAAVSAudioEncoderModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAAVSAudioEncoderModel.__allocating_init(computeUnits:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t dispatch thunk of VAAVSAudioEncoderModel.predict(currFrame:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of VAAVSAudioEncoderModel.matrixTranspose<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of VAAVSAudioEncoderModel.matrixTransposeFlatten(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of VAAVSAudioEncoderModel.computeEmbeddingsFromLogMels(featBuffer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of VAAVSAudioEncoderModel.processingWindowSampleCount.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t VAKeywordSpottedEvent.keyword.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_keyword);
  swift_bridgeObjectRetain();
  return v1;
}

float VAKeywordSpottedEvent.score.getter()
{
  uint64_t v0;

  return *(float *)(v0 + OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_score);
}

uint64_t VAKeywordSpottedEvent.hostTime.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_hostTime);
}

uint64_t VAKeywordSpottedEvent.intervalFromEndOfSpeech.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_intervalFromEndOfSpeech);
}

uint64_t VAKeywordSpottedEvent.silenceBefore.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_silenceBefore);
}

uint64_t VAKeywordSpottedEvent.silenceAfter.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_silenceAfter);
}

uint64_t VAKeywordSpottedEvent.speechDuring.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_speechDuring);
}

uint64_t VAKeywordSpottedEvent.audioBytes.getter()
{
  return swift_bridgeObjectRetain();
}

id sub_24A1F3BA8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6, uint64_t a7, float a8, double a9)
{
  objc_class *v9;
  _BYTE *v19;
  _QWORD *v20;
  double *v21;
  objc_super v23;

  v19 = objc_allocWithZone(v9);
  v20 = &v19[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_keyword];
  *v20 = a1;
  v20[1] = a2;
  *(float *)&v19[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_score] = a8;
  *(_QWORD *)&v19[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_hostTime] = a3;
  v21 = (double *)&v19[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_intervalFromEndOfSpeech];
  *v21 = a9;
  *((_BYTE *)v21 + 8) = 0;
  v19[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_silenceBefore] = a4;
  v19[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_silenceAfter] = a5;
  v19[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_speechDuring] = a6;
  *(_QWORD *)&v19[OBJC_IVAR____TtC12VoiceActions21VAKeywordSpottedEvent_audioBytes] = a7;
  v23.receiver = v19;
  v23.super_class = v9;
  return objc_msgSendSuper2(&v23, sel_init);
}

uint64_t type metadata accessor for VAKeywordSpottedEvent()
{
  return objc_opt_self();
}

id VAKeywordSpottedEvent.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void VAKeywordSpottedEvent.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id VAKeywordSpottedEvent.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VAKeywordSpottedEvent();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for VAKeywordSpottedEvent()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_24A1F3DA4()
{
  uint64_t v0;

  swift_beginAccess();
  return MEMORY[0x24BD0AB54](v0 + 16);
}

uint64_t sub_24A1F3DE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 24) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*sub_24A1F3E48(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  v4 = MEMORY[0x24BD0AB54](v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v3[3] = v4;
  v3[4] = v5;
  return sub_24A1F3EB4;
}

void sub_24A1F3EB4(uint64_t a1, char a2)
{
  void *v3;

  v3 = *(void **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 24) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t sub_24A1F3F24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC12VoiceActions26VAStrategyLayerPassthrough_lastActivated;
  swift_beginAccess();
  return sub_24A1F0D04(v3, a1);
}

uint64_t sub_24A1F3F74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC12VoiceActions26VAStrategyLayerPassthrough_lastActivated;
  swift_beginAccess();
  sub_24A1F0DA4(a1, v3);
  return swift_endAccess();
}

uint64_t (*sub_24A1F3FCC())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_24A1F4010(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v36 = a2;
  v37 = a1;
  v4 = sub_24A2163BC();
  v38 = *(_QWORD *)(v4 - 8);
  v39 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = swift_allocObject();
  v8 = *a3;
  v9 = *((_DWORD *)a3 + 2);
  v10 = *((_BYTE *)a3 + 12);
  v11 = *((_BYTE *)a3 + 13);
  v12 = a3[2];
  v13 = a3[3];
  v14 = *((_BYTE *)a3 + 32);
  v35 = a3[5];
  v15 = *((unsigned __int8 *)a3 + 48);
  v33 = *((unsigned __int8 *)a3 + 49);
  v34 = v15;
  v16 = *((_DWORD *)a3 + 13);
  v32 = *((unsigned __int8 *)a3 + 56);
  v17 = a3[8];
  v30 = a3[9];
  v31 = v17;
  LODWORD(v17) = *((unsigned __int16 *)a3 + 40);
  v28 = *((unsigned __int8 *)a3 + 82);
  v29 = v17;
  LODWORD(v17) = *((unsigned __int8 *)a3 + 83);
  v26 = *((unsigned __int8 *)a3 + 84);
  v27 = v17;
  LODWORD(v17) = *((unsigned __int8 *)a3 + 85);
  v24 = *((unsigned __int8 *)a3 + 86);
  v25 = v17;
  *(_QWORD *)(v7 + 24) = 0;
  swift_unknownObjectWeakInit();
  v18 = v7 + OBJC_IVAR____TtC12VoiceActions26VAStrategyLayerPassthrough_lastActivated;
  v19 = sub_24A2163A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  swift_beginAccess();
  *(_QWORD *)(v7 + 24) = v36;
  swift_unknownObjectWeakAssign();
  *(_QWORD *)(v7 + 32) = v8;
  *(_DWORD *)(v7 + 40) = v9;
  *(_BYTE *)(v7 + 44) = v10;
  *(_BYTE *)(v7 + 45) = v11;
  *(_QWORD *)(v7 + 48) = v12;
  *(_QWORD *)(v7 + 56) = v13;
  *(_BYTE *)(v7 + 64) = v14;
  *(_QWORD *)(v7 + 72) = v35;
  *(_BYTE *)(v7 + 80) = v34;
  *(_BYTE *)(v7 + 81) = v33;
  *(_DWORD *)(v7 + 84) = v16;
  *(_BYTE *)(v7 + 88) = v32;
  v20 = v30;
  *(_QWORD *)(v7 + 96) = v31;
  *(_QWORD *)(v7 + 104) = v20;
  *(_WORD *)(v7 + 112) = v29;
  *(_BYTE *)(v7 + 114) = v28;
  *(_BYTE *)(v7 + 115) = v27;
  *(_BYTE *)(v7 + 116) = v26;
  *(_BYTE *)(v7 + 117) = v25;
  *(_BYTE *)(v7 + 118) = v24;
  swift_retain();
  sub_24A2163B0();
  (*(void (**)(uint64_t, char *, uint64_t))(v38 + 32))(v7 + OBJC_IVAR____TtC12VoiceActions26VAStrategyLayerPassthrough_clock, v6, v39);
  swift_release();
  v21 = sub_24A180204();
  swift_unknownObjectRelease();
  return v21;
}

uint64_t sub_24A1F4248(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(uint64_t);
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  uint64_t v23;
  uint64_t result;
  void (*v25)(char *, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t ObjectType;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;

  v2 = v1;
  v33 = a1;
  v3 = sub_24A2163A4();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&ObjectType - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_24A135F88(&qword_257912728);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v32 = (char *)&ObjectType - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&ObjectType - v11;
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&ObjectType - v14;
  if (*(_BYTE *)(v2 + 45) == 1)
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 144))(v13);
    if (v13)
    {
      v17 = v16;
      ObjectType = swift_getObjectType();
      v34 = 0x203A746C75736552;
      v35 = 0xE800000000000000;
      (*(void (**)(void))(*(_QWORD *)v33 + 160))();
      v31 = v4;
      sub_24A215D98();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v17 + 8))(v34, v35, ObjectType, v17);
      v4 = v31;
      swift_bridgeObjectRelease();
      v13 = swift_unknownObjectRelease();
    }
  }
  if ((*(_BYTE *)(v2 + 64) & 1) != 0)
    goto LABEL_9;
  v18 = v6;
  v19 = *(_QWORD *)(v2 + 48);
  ObjectType = *(_QWORD *)(v2 + 56);
  v31 = v19;
  v20 = *(void (**)(uint64_t))(*(_QWORD *)v2 + 168);
  v20(v13);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48);
  v22 = v21(v15, 1, v3);
  sub_24A1F1E7C((uint64_t)v15);
  if (v22 == 1)
    goto LABEL_8;
  v23 = sub_24A21638C();
  v20(v23);
  result = v21(v12, 1, v3);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    return result;
  }
  sub_24A216398();
  v25 = *(void (**)(char *, uint64_t))(v4 + 8);
  v25(v18, v3);
  v25(v12, v3);
  result = sub_24A216698();
  if ((result & 1) != 0)
  {
LABEL_8:
    v26 = v32;
    sub_24A21638C();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v26, 0, 1, v3);
    v13 = (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 176))(v26);
LABEL_9:
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 144))(v13);
    if (result)
    {
      v28 = v27;
      v29 = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v33, v29, v28);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

void sub_24A1F4548()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_24A1F4574()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_24A152354(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24A1F1E7C(v0 + OBJC_IVAR____TtC12VoiceActions26VAStrategyLayerPassthrough_lastActivated);
  v1 = v0 + OBJC_IVAR____TtC12VoiceActions26VAStrategyLayerPassthrough_clock;
  v2 = sub_24A2163BC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

uint64_t VAStrategyLayerPassthrough.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = VAStrategyLayer.deinit();
  sub_24A152354(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24A1F1E7C(v0 + OBJC_IVAR____TtC12VoiceActions26VAStrategyLayerPassthrough_lastActivated);
  v1 = v0 + OBJC_IVAR____TtC12VoiceActions26VAStrategyLayerPassthrough_clock;
  v2 = sub_24A2163BC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t VAStrategyLayerPassthrough.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = VAStrategyLayer.deinit();
  sub_24A152354(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24A1F1E7C(v0 + OBJC_IVAR____TtC12VoiceActions26VAStrategyLayerPassthrough_lastActivated);
  v1 = v0 + OBJC_IVAR____TtC12VoiceActions26VAStrategyLayerPassthrough_clock;
  v2 = sub_24A2163BC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_24A1F46D8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  char v9;
  char v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v38 = a2;
  v4 = sub_24A2163BC();
  v39 = *(_QWORD *)(v4 - 8);
  v40 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a3;
  v8 = *((_DWORD *)a3 + 2);
  v9 = *((_BYTE *)a3 + 12);
  v10 = *((_BYTE *)a3 + 13);
  v11 = a3[2];
  v37 = a3[3];
  v36 = *((unsigned __int8 *)a3 + 32);
  v35 = a3[5];
  v12 = *((unsigned __int8 *)a3 + 48);
  v33 = *((unsigned __int8 *)a3 + 49);
  v34 = v12;
  v13 = *((_DWORD *)a3 + 13);
  v32 = *((unsigned __int8 *)a3 + 56);
  v14 = a3[9];
  v31 = a3[8];
  v15 = *((unsigned __int16 *)a3 + 40);
  v29 = *((unsigned __int8 *)a3 + 82);
  v30 = v15;
  v16 = *((unsigned __int8 *)a3 + 83);
  v27 = *((unsigned __int8 *)a3 + 84);
  v28 = v16;
  v17 = *((unsigned __int8 *)a3 + 85);
  v25 = *((unsigned __int8 *)a3 + 86);
  v26 = v17;
  type metadata accessor for VAStrategyLayerPassthrough();
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 24) = 0;
  swift_unknownObjectWeakInit();
  v19 = v18 + OBJC_IVAR____TtC12VoiceActions26VAStrategyLayerPassthrough_lastActivated;
  v20 = sub_24A2163A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  swift_beginAccess();
  *(_QWORD *)(v18 + 24) = v38;
  swift_unknownObjectWeakAssign();
  *(_QWORD *)(v18 + 32) = v7;
  *(_DWORD *)(v18 + 40) = v8;
  *(_BYTE *)(v18 + 44) = v9;
  *(_BYTE *)(v18 + 45) = v10;
  v21 = v37;
  *(_QWORD *)(v18 + 48) = v11;
  *(_QWORD *)(v18 + 56) = v21;
  *(_BYTE *)(v18 + 64) = v36;
  *(_QWORD *)(v18 + 72) = v35;
  *(_BYTE *)(v18 + 80) = v34;
  *(_BYTE *)(v18 + 81) = v33;
  *(_DWORD *)(v18 + 84) = v13;
  *(_BYTE *)(v18 + 88) = v32;
  *(_QWORD *)(v18 + 96) = v31;
  *(_QWORD *)(v18 + 104) = v14;
  *(_WORD *)(v18 + 112) = v30;
  *(_BYTE *)(v18 + 114) = v29;
  *(_BYTE *)(v18 + 115) = v28;
  *(_BYTE *)(v18 + 116) = v27;
  *(_BYTE *)(v18 + 117) = v26;
  *(_BYTE *)(v18 + 118) = v25;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  sub_24A2163B0();
  (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v18 + OBJC_IVAR____TtC12VoiceActions26VAStrategyLayerPassthrough_clock, v6, v40);
  swift_release();
  v22 = sub_24A180204();
  swift_unknownObjectRelease();
  return v22;
}

uint64_t type metadata accessor for VAStrategyLayerPassthrough()
{
  uint64_t result;

  result = qword_25791CE70;
  if (!qword_25791CE70)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t VAStrategyProviderPassthrough.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t VAStrategyProviderPassthrough.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_24A1F4988()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 80))();
}

uint64_t sub_24A1F49B0()
{
  return type metadata accessor for VAStrategyLayerPassthrough();
}

void sub_24A1F49B8()
{
  unint64_t v0;
  unint64_t v1;

  sub_24A1F1FA8();
  if (v0 <= 0x3F)
  {
    sub_24A2163BC();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for VAStrategyLayerPassthrough()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for VAStrategyProviderPassthrough()
{
  return objc_opt_self();
}

uint64_t method lookup function for VAStrategyProviderPassthrough()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAStrategyProviderPassthrough.getStrategy(delegate:params:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 80))();
}

uint64_t sub_24A1F4A98(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_24A1F4E50(a1, a2, a3, a4, &OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechStartTime);
}

uint64_t sub_24A1F4AA4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechStartTime;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1F4AE8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechStartTime);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A1F4B30(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_24A1F4E50(a1, a2, a3, a4, &OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechEndTime);
}

uint64_t sub_24A1F4B3C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechEndTime;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1F4B80(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechEndTime);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A1F4BC8(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_24A1F4E50(a1, a2, a3, a4, &OBJC_IVAR____TtC12VoiceActions12VATimingInfo_finalResultTime);
}

uint64_t sub_24A1F4BD4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_finalResultTime;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1F4C18(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_finalResultTime);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A1F4C60()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechStartFrame;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1F4CA4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechStartFrame);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A1F4CEC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechEndFrame;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1F4D30(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechEndFrame);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A1F4D78()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_partialAsFinalResultTime;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1F4DBC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_partialAsFinalResultTime);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A1F4E04@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x190))();
  *a2 = result;
  return result;
}

uint64_t sub_24A1F4E44(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_24A1F4E50(a1, a2, a3, a4, &OBJC_IVAR____TtC12VoiceActions12VATimingInfo_loopStartTime);
}

uint64_t sub_24A1F4E50(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;

  v5 = *a1;
  v6 = (_QWORD *)(*a2 + *a5);
  result = swift_beginAccess();
  *v6 = v5;
  return result;
}

uint64_t sub_24A1F4E98()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_loopStartTime;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1F4EDC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_loopStartTime);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A1F4F24()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t sub_24A1F4F6C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_timerTask);
  swift_beginAccess();
  *v3 = a1;
  return swift_release();
}

uint64_t (*sub_24A1F4FBC())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_24A1F5000()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_waitTimeForFirstPartial;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1F5044(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_waitTimeForFirstPartial);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

id sub_24A1F508C(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return sub_24A1F50BC(a1);
}

id sub_24A1F50BC(uint64_t a1)
{
  char *v1;
  objc_super v3;

  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechStartTime] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechEndTime] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions12VATimingInfo_finalResultTime] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions12VATimingInfo_firstTokenTime] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions12VATimingInfo_keywordTime] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions12VATimingInfo_lastPartialTime] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechStartFrame] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechEndFrame] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions12VATimingInfo_partialAsFinalResultTime] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions12VATimingInfo_loopStartTime] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions12VATimingInfo_timerTask] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions12VATimingInfo_waitTimeForFirstPartial] = 4;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions12VATimingInfo_delegate] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for VATimingInfo();
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t type metadata accessor for VATimingInfo()
{
  return objc_opt_self();
}

uint64_t sub_24A1F51AC(uint64_t a1)
{
  return sub_24A1F5630(a1, &OBJC_IVAR____TtC12VoiceActions12VATimingInfo_loopStartTime);
}

uint64_t sub_24A1F51B8()
{
  uint64_t v0;
  uint64_t result;

  result = mach_absolute_time();
  *(_QWORD *)(v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_keywordTime) = result;
  return result;
}

uint64_t sub_24A1F51D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t result;

  v1 = mach_absolute_time();
  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_partialAsFinalResultTime);
  result = swift_beginAccess();
  *v2 = v1;
  return result;
}

uint64_t sub_24A1F5224(uint64_t a1, unint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t result;
  void *v27;
  _QWORD v28[2];
  uint8_t *v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34[3];

  v4 = v3;
  v8 = sub_24A215A8C();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = OBJC_IVAR____TtC12VoiceActions12VATimingInfo_firstTokenTime;
  if (!*(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_firstTokenTime))
  {
    v32 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v3) + 0x1A8);
    v14 = v32(v10);
    swift_release();
    if (v14)
    {
      v15 = sub_24A1B9D90();
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v15, v8);
      swift_bridgeObjectRetain_n();
      v16 = sub_24A215A74();
      v17 = sub_24A2160F8();
      v31 = v16;
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc();
        v30 = swift_slowAlloc();
        v34[0] = v30;
        v29 = v18;
        *(_DWORD *)v18 = 136315138;
        v28[1] = v18 + 4;
        swift_bridgeObjectRetain();
        v33 = sub_24A148270(a1, a2, v34);
        sub_24A216260();
        swift_bridgeObjectRelease_n();
        v19 = v31;
        v20 = v17;
        v21 = v29;
        _os_log_impl(&dword_24A12D000, v31, v20, "Got first partial \"%s\" after speech stopped, cancel timer", v29, 0xCu);
        v22 = v30;
        swift_arrayDestroy();
        MEMORY[0x24BD0AAAC](v22, -1, -1);
        MEMORY[0x24BD0AAAC](v21, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v23 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      if (v32(v23))
      {
        sub_24A135F88(&qword_25790A8B8);
        sub_24A215FCC();
        swift_release();
      }
      (*(void (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & *v4) + 0x1B0))(0);
    }
    *(_QWORD *)((char *)v4 + v13) = mach_absolute_time();
  }
  v24 = mach_absolute_time();
  if ((a3 & 1) != 0)
  {
    v25 = (_QWORD *)((char *)v4 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_finalResultTime);
    swift_beginAccess();
  }
  else
  {
    v25 = (_QWORD *)((char *)v4 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_lastPartialTime);
  }
  *v25 = v24;
  result = sub_24A1F6524();
  if ((result & 1) != 0)
  {
    result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v4) + 0x1A8))();
    if (result)
    {
      sub_24A135F88(&qword_25790A8B8);
      sub_24A215FCC();
      result = swift_release();
    }
    v27 = *(void **)((char *)v4 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_delegate);
    if (v27)
    {
      result = (uint64_t)objc_msgSend(*(id *)((char *)v4 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_delegate), sel_respondsToSelector_, sel_timingLogs_);
      if ((result & 1) != 0)
        return (uint64_t)objc_msgSend(v27, sel_timingLogs_, v4);
    }
  }
  return result;
}

uint64_t sub_24A1F55A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t result;

  v3 = mach_absolute_time();
  v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechStartTime);
  swift_beginAccess();
  *v4 = v3;
  v5 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechStartFrame);
  result = swift_beginAccess();
  *v5 = a1;
  return result;
}

uint64_t sub_24A1F5624(uint64_t a1)
{
  return sub_24A1F5630(a1, &OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechStartTime);
}

uint64_t sub_24A1F5630(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)(v2 + *a2);
  result = swift_beginAccess();
  *v4 = a1;
  return result;
}

uint64_t sub_24A1F5674(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t result;
  void *v21;
  uint64_t v22;

  v2 = v1;
  v4 = sub_24A135F88(&qword_25790A7C0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_24A215A8C();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_firstTokenTime))
  {
    v11 = sub_24A1B9D90();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
    v12 = sub_24A215A74();
    v13 = sub_24A2160F8();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_24A12D000, v12, v13, "Speech stopped time before any partials, start 5 sec timer", v14, 2u);
      MEMORY[0x24BD0AAAC](v14, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v15 = sub_24A215F78();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v6, 1, 1, v15);
    v16 = (_QWORD *)swift_allocObject();
    v16[2] = 0;
    v16[3] = 0;
    v16[4] = v2;
    v17 = v2;
    v18 = sub_24A15B54C((uint64_t)v6, (uint64_t)&unk_257912DB0, (uint64_t)v16);
    (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v17) + 0x1B0))(v18);
  }
  v19 = (_QWORD *)((char *)v2 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechEndTime);
  swift_beginAccess();
  *v19 = a1;
  result = sub_24A1F6524();
  if ((result & 1) != 0)
  {
    result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v2) + 0x1A8))();
    if (result)
    {
      sub_24A135F88(&qword_25790A8B8);
      sub_24A215FCC();
      result = swift_release();
    }
    v21 = *(void **)((char *)v2 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_delegate);
    if (v21)
    {
      result = (uint64_t)objc_msgSend(*(id *)((char *)v2 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_delegate), sel_respondsToSelector_, sel_timingLogs_);
      if ((result & 1) != 0)
        return (uint64_t)objc_msgSend(v21, sel_timingLogs_, v2);
    }
  }
  return result;
}

uint64_t sub_24A1F5918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[3] = a4;
  v5 = sub_24A215A8C();
  v4[4] = v5;
  v4[5] = *(_QWORD *)(v5 - 8);
  v4[6] = swift_task_alloc();
  v4[7] = swift_task_alloc();
  return swift_task_switch();
}

unint64_t sub_24A1F5988()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  unint64_t result;
  _QWORD *v3;

  v1 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 24)) + 0x1C0);
  *(_QWORD *)(v0 + 64) = v1;
  result = v1();
  if (is_mul_ok(result, 0x3B9ACA00uLL))
  {
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 72) = v3;
    *v3 = v0;
    v3[1] = sub_24A1F5A14;
    return sub_24A215FFC();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24A1F5A14()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (!v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_24A1F5A8C()
{
  uint64_t v0;
  id *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(_QWORD, uint64_t, uint64_t);
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t (*v18)(void);
  void *v19;
  uint8_t *v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;

  v1 = (id *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_firstTokenTime);
  v4 = sub_24A1B9D90();
  v5 = *(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 16);
  v6 = *(_QWORD *)(v0 + 32);
  if (v3)
  {
    v5(*(_QWORD *)(v0 + 48), v4, v6);
    v7 = sub_24A215A74();
    v8 = sub_24A2160F8();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_24A12D000, v7, v8, "Got partial after speech end", v9, 2u);
      MEMORY[0x24BD0AAAC](v9, -1, -1);
    }
    v11 = *(_QWORD *)(v0 + 40);
    v10 = *(_QWORD *)(v0 + 48);
    v12 = *(_QWORD *)(v0 + 32);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  else
  {
    v14 = *(void **)(v0 + 24);
    v5(*(_QWORD *)(v0 + 56), v4, v6);
    v15 = v14;
    v16 = sub_24A215A74();
    v17 = sub_24A2160F8();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = *(uint64_t (**)(void))(v0 + 64);
      v19 = *(void **)(v0 + 24);
      v20 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v20 = 134217984;
      *(_QWORD *)(v0 + 16) = v18();
      sub_24A216260();

      _os_log_impl(&dword_24A12D000, v16, v17, "No partials %llu sec after speech end, done", v20, 0xCu);
      MEMORY[0x24BD0AAAC](v20, -1, -1);
    }
    else
    {

    }
    v21 = *(_QWORD **)(v0 + 24);
    v22 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 8))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 32));
    if ((*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v21) + 0x1A8))(v22))
    {
      sub_24A135F88(&qword_25790A8B8);
      sub_24A215FCC();
      swift_release();
    }
    v23 = *(void **)((char *)*v1 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_delegate);
    if (v23
      && (objc_msgSend(*(id *)((char *)*v1 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_delegate), sel_respondsToSelector_, sel_timingLogs_) & 1) != 0)
    {
      objc_msgSend(v23, sel_timingLogs_, *v1);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

BOOL sub_24A1F5D20()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_firstTokenTime) != 0;
}

uint64_t sub_24A1F5D38(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t result;
  void *v23;
  _BYTE v24[24];

  v2 = v1;
  v4 = sub_24A135F88(&qword_25790A7C0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = &v24[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_24A215A8C();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = &v24[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (!*(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_firstTokenTime))
  {
    v11 = sub_24A1B9D90();
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
    v12 = sub_24A215A74();
    v13 = sub_24A2160F8();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_24A12D000, v12, v13, "Speech stopped frame before any partials, start 5 sec timer", v14, 2u);
      MEMORY[0x24BD0AAAC](v14, -1, -1);
    }

    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
    v15 = sub_24A215F78();
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v6, 1, 1, v15);
    v16 = (_QWORD *)swift_allocObject();
    v16[2] = 0;
    v16[3] = 0;
    v16[4] = v2;
    v17 = v2;
    v18 = sub_24A15B54C((uint64_t)v6, (uint64_t)&unk_257912DC0, (uint64_t)v16);
    (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v17) + 0x1B0))(v18);
  }
  v19 = mach_absolute_time();
  v20 = (_QWORD *)((char *)v2 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechEndTime);
  swift_beginAccess();
  *v20 = v19;
  v21 = (_QWORD *)((char *)v2 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechEndFrame);
  swift_beginAccess();
  *v21 = a1;
  result = sub_24A1F6524();
  if ((result & 1) != 0)
  {
    result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v2) + 0x1A8))();
    if (result)
    {
      sub_24A135F88(&qword_25790A8B8);
      sub_24A215FCC();
      result = swift_release();
    }
    v23 = *(void **)((char *)v2 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_delegate);
    if (v23)
    {
      result = (uint64_t)objc_msgSend(*(id *)((char *)v2 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_delegate), sel_respondsToSelector_, sel_timingLogs_);
      if ((result & 1) != 0)
        return (uint64_t)objc_msgSend(v23, sel_timingLogs_, v2);
    }
  }
  return result;
}

uint64_t sub_24A1F6008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[3] = a4;
  v5 = sub_24A215A8C();
  v4[4] = v5;
  v4[5] = *(_QWORD *)(v5 - 8);
  v4[6] = swift_task_alloc();
  v4[7] = swift_task_alloc();
  return swift_task_switch();
}

unint64_t sub_24A1F6078()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  unint64_t result;
  _QWORD *v3;

  v1 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 24)) + 0x1C0);
  *(_QWORD *)(v0 + 64) = v1;
  result = v1();
  if (is_mul_ok(result, 0x3B9ACA00uLL))
  {
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 72) = v3;
    *v3 = v0;
    v3[1] = sub_24A1F6104;
    return sub_24A215FFC();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24A1F6104()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (!v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void sub_24A1F617C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v2)(void);
  unint64_t v3;
  uint64_t (*v4)(void);
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v2 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8);
  v3 = v2();
  v4 = *(uint64_t (**)(void))((*v1 & *v0) + 0xB8);
  if (v4() < v3)
  {
    type metadata accessor for VARequestContext();
    v5 = v2();
    v6 = v4();
    v7 = v5 >= v6;
    v8 = v5 - v6;
    if (v7)
      sub_24A165E68(v8);
    else
      __break(1u);
  }
}

void sub_24A1F620C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v2)(void);
  unint64_t v3;
  uint64_t (*v4)(void);
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v2 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8);
  if (v2())
  {
    v3 = v2();
    v4 = *(uint64_t (**)(void))((*v1 & *v0) + 0xD0);
    v5 = v4();
    type metadata accessor for VARequestContext();
    if (v5 >= v3)
    {
      v10 = v4();
      v11 = v2();
      v8 = v10 >= v11;
      v12 = v10 - v11;
      if (v8)
      {
        sub_24A165E68(v12);
        return;
      }
    }
    else
    {
      v6 = v2();
      v7 = v4();
      v8 = v6 >= v7;
      v9 = v6 - v7;
      if (v8)
      {
        sub_24A165E68(v9);
        return;
      }
      __break(1u);
    }
    __break(1u);
  }
}

void sub_24A1F62DC()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t (*v3)(void);
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;

  v1 = OBJC_IVAR____TtC12VoiceActions12VATimingInfo_firstTokenTime;
  v2 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_firstTokenTime);
  if (v2)
  {
    v3 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8);
    if (v3() < v2)
    {
      type metadata accessor for VARequestContext();
      v4 = *(_QWORD *)((char *)v0 + v1);
      v5 = v3();
      v6 = v4 >= v5;
      v7 = v4 - v5;
      if (v6)
        sub_24A165E68(v7);
      else
        __break(1u);
    }
  }
}

void sub_24A1F6360()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;

  type metadata accessor for VARequestContext();
  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v2 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
  v3 = (*(uint64_t (**)(void))((*v1 & *v0) + 0xB8))();
  v4 = v2 >= v3;
  v5 = v2 - v3;
  if (v4)
    sub_24A165E68(v5);
  else
    __break(1u);
}

void sub_24A1F63D4()
{
  _QWORD *v0;
  uint64_t (*v1)(void);
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;

  if (*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_firstTokenTime))
  {
    v1 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8);
    v2 = v1();
    v3 = OBJC_IVAR____TtC12VoiceActions12VATimingInfo_lastPartialTime;
    v4 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_lastPartialTime);
    type metadata accessor for VARequestContext();
    v5 = v1();
    if (v4 >= v2)
    {
      v7 = v4 >= v5;
      v9 = v4 - v5;
      if (v7)
      {
        sub_24A165E68(v9);
        return;
      }
    }
    else
    {
      v6 = *(_QWORD *)((char *)v0 + v3);
      v7 = v5 >= v6;
      v8 = v5 - v6;
      if (v7)
      {
        sub_24A165E68(v8);
        return;
      }
      __break(1u);
    }
    __break(1u);
  }
}

void sub_24A1F6490()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v2)(void);
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;

  if (*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_firstTokenTime))
  {
    v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v2 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x178);
    if (v2())
    {
      type metadata accessor for VARequestContext();
      v3 = (*(uint64_t (**)(void))((*v1 & *v0) + 0xE8))();
      v4 = v2();
      v5 = v3 >= v4;
      v6 = v3 - v4;
      if (v5)
        sub_24A165E68(v6);
      else
        __break(1u);
    }
  }
}

uint64_t sub_24A1F6524()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t (*v10)(void);
  uint64_t result;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  os_log_type_t v17;
  uint64_t v18;

  v1 = sub_24A215A8C();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v3);
  v8 = (char *)&v18 - v7;
  v9 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v10 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8);
  if (((uint64_t (*)(uint64_t))v10)(v6) && (*(uint64_t (**)(void))((*v9 & *v0) + 0xD0))())
    return 1;
  if (v10())
  {
    v12 = sub_24A1B9D90();
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v8, v12, v1);
    v13 = sub_24A215A74();
    v14 = sub_24A2160F8();
    if (!os_log_type_enabled(v13, v14))
    {
LABEL_12:

      (*(void (**)(char *, uint64_t))(v2 + 8))(v8, v1);
      return 0;
    }
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_24A12D000, v13, v14, "Waiting for speech end after final", v15, 2u);
LABEL_11:
    MEMORY[0x24BD0AAAC](v15, -1, -1);
    goto LABEL_12;
  }
  result = (*(uint64_t (**)(void))((*v9 & *v0) + 0xD0))();
  if (!result)
    return result;
  if (*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_firstTokenTime))
  {
    v16 = sub_24A1B9D90();
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v16, v1);
    v13 = sub_24A215A74();
    v17 = sub_24A2160F8();
    if (!os_log_type_enabled(v13, v17))
    {
      v8 = v5;
      goto LABEL_12;
    }
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_24A12D000, v13, v17, "Waiting for final after speech end", v15, 2u);
    v8 = v5;
    goto LABEL_11;
  }
  return 0;
}

uint64_t sub_24A1F673C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t result;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  if ((*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1A8))())
  {
    sub_24A135F88(&qword_25790A8B8);
    sub_24A215FCC();
    swift_release();
  }
  (*(void (**)(_QWORD))((*v1 & *v0) + 0x1B0))(0);
  v2 = (_QWORD *)((char *)v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechStartTime);
  swift_beginAccess();
  *v2 = 0;
  v3 = (_QWORD *)((char *)v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechStartFrame);
  swift_beginAccess();
  *v3 = 0;
  v4 = (_QWORD *)((char *)v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechEndTime);
  swift_beginAccess();
  *v4 = 0;
  v5 = (_QWORD *)((char *)v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_speechEndFrame);
  swift_beginAccess();
  *v5 = 0;
  *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_firstTokenTime) = 0;
  v6 = (_QWORD *)((char *)v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_finalResultTime);
  result = swift_beginAccess();
  *v6 = 0;
  *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_lastPartialTime) = 0;
  *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC12VoiceActions12VATimingInfo_keywordTime) = 0;
  return result;
}

unint64_t sub_24A1F68AC()
{
  _QWORD *v0;
  uint64_t inited;
  _QWORD *v2;

  sub_24A135F88(&qword_257912DC8);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24A218640;
  *(_QWORD *)(inited + 32) = 0xD00000000000001BLL;
  *(_QWORD *)(inited + 40) = 0x800000024A228010;
  v2 = (_QWORD *)MEMORY[0x24BEE4EA0];
  *(double *)(inited + 48) = (*(double (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x238))();
  *(_QWORD *)(inited + 56) = 0xD000000000000015;
  *(_QWORD *)(inited + 64) = 0x800000024A228030;
  *(double *)(inited + 72) = (*(double (**)(void))((*v2 & *v0) + 0x228))();
  *(_QWORD *)(inited + 80) = 0x6420686365657073;
  *(_QWORD *)(inited + 88) = 0xEF6E6F6974617275;
  *(double *)(inited + 96) = (*(double (**)(void))((*v2 & *v0) + 0x240))();
  *(_QWORD *)(inited + 104) = 0xD000000000000015;
  *(_QWORD *)(inited + 112) = 0x800000024A228050;
  *(double *)(inited + 120) = (*(double (**)(void))((*v2 & *v0) + 0x248))();
  *(_QWORD *)(inited + 128) = 0xD000000000000019;
  *(_QWORD *)(inited + 136) = 0x800000024A228070;
  *(double *)(inited + 144) = (*(double (**)(void))((*v2 & *v0) + 0x250))();
  *(_QWORD *)(inited + 152) = 0xD000000000000013;
  *(_QWORD *)(inited + 160) = 0x800000024A228090;
  *(double *)(inited + 168) = (*(double (**)(void))((*v2 & *v0) + 0x230))();
  return sub_24A1F6A34(inited);
}

unint64_t sub_24A1F6A34(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_24A135F88(&qword_257912DF8);
  v2 = (_QWORD *)sub_24A216440();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = sub_24A148970(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_24A1F6B98()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_24A216308();
  v1 = sub_24A215D98();
  v2 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v0) + 0x238))(v1);
  sub_24A216020();
  v3 = sub_24A215D98();
  (*(void (**)(uint64_t))((*v2 & *v0) + 0x230))(v3);
  sub_24A216020();
  v4 = sub_24A215D98();
  (*(void (**)(uint64_t))((*v2 & *v0) + 0x228))(v4);
  sub_24A216020();
  v5 = sub_24A215D98();
  (*(void (**)(uint64_t))((*v2 & *v0) + 0x240))(v5);
  sub_24A216020();
  v6 = sub_24A215D98();
  (*(void (**)(uint64_t))((*v2 & *v0) + 0x248))(v6);
  sub_24A216020();
  v7 = sub_24A215D98();
  (*(void (**)(uint64_t))((*v2 & *v0) + 0x250))(v7);
  sub_24A216020();
  return 0;
}

id VATimingInfo.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void VATimingInfo.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id VATimingInfo.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VATimingInfo();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_24A1F6E94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_24A152AD0;
  return sub_24A1F5918((uint64_t)v3, v4, v5, v2);
}

uint64_t sub_24A1F6EE4()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_24A1F6F10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_24A15FEEC;
  return sub_24A1F6008((uint64_t)v3, v4, v5, v2);
}

uint64_t method lookup function for VATimingInfo()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VATimingInfo.speechStartTime.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of VATimingInfo.speechEndTime.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of VATimingInfo.finalResultTime.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of VATimingInfo.loopStartTime.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x190))();
}

uint64_t dispatch thunk of VATimingInfo.setLoopStartTime(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of VATimingInfo.setKeyword(text:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of VATimingInfo.setPartialAsFinal(partial:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of VATimingInfo.setToken(text:isFinal:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of VATimingInfo.speechStarted(frame:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x200))();
}

uint64_t dispatch thunk of VATimingInfo.speechStarted(time:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x208))();
}

uint64_t dispatch thunk of VATimingInfo.speechEnded(time:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x210))();
}

uint64_t dispatch thunk of VATimingInfo.gotAnyResults()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x218))();
}

uint64_t dispatch thunk of VATimingInfo.speechEnded(frame:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x220))();
}

uint64_t dispatch thunk of VATimingInfo.speechStartToFinal()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x228))();
}

uint64_t dispatch thunk of VATimingInfo.speechEndToFinal()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x230))();
}

uint64_t dispatch thunk of VATimingInfo.speechStartToFirstToken()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x238))();
}

uint64_t dispatch thunk of VATimingInfo.speechDuration()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x240))();
}

uint64_t dispatch thunk of VATimingInfo.lastPartialToFinal()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x248))();
}

uint64_t dispatch thunk of VATimingInfo.partialAsFinalToFinal()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x250))();
}

uint64_t dispatch thunk of VATimingInfo.reset()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x268))();
}

uint64_t dispatch thunk of VATimingInfo.logs()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x270))();
}

uint64_t sub_24A1F71B8()
{
  return 20;
}

uint64_t static VAA2AVerifierModelV2.maxEnrollments.getter()
{
  return 20;
}

uint64_t VAA2AVerifierModelV2.__allocating_init(computeUnits:)(unsigned __int8 *a1)
{
  swift_allocObject();
  return VAA2AVerifierModelV2.init(computeUnits:)(a1);
}

uint64_t VAA2AVerifierModelV2.init(computeUnits:)(unsigned __int8 *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v3 = v1;
  v5 = type metadata accessor for VASignpostInterval();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  v9 = MEMORY[0x24BEE4AF8];
  v3[3] = MEMORY[0x24BEE4AF8];
  v3[4] = v9;
  v3[5] = v9;
  v3[6] = v9;
  v16 = 0;
  v17 = 0xE000000000000000;
  swift_retain();
  sub_24A216308();
  sub_24A215D98();
  v18 = v8;
  sub_24A2163D4();
  type metadata accessor for VALog();
  sub_24A215D98();
  static VALog.begin(_:_:)("VoiceActions", 12, 2u, v16, v17, (uint64_t)v7);
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBFFE0]), sel_init);
  v11 = v10;
  if (v8)
    v12 = 3;
  else
    v12 = 0;
  objc_msgSend(v10, sel_setComputeUnits_, v12);
  type metadata accessor for quant_verifier_aa_fp32();
  v13 = v11;
  v14 = sub_24A18B9F8(v13);
  if (v2)
  {

    sub_24A136064((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for VASignpostInterval);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    type metadata accessor for VAA2AVerifierModelV2();
    return swift_deallocPartialClassInstance();
  }
  else
  {
    v3[2] = v14;
    swift_release();
    VASignpostInterval.end(_:)((Swift::String_optional)0);

    sub_24A136064((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for VASignpostInterval);
    return sub_24A180204();
  }
}

uint64_t type metadata accessor for VAA2AVerifierModelV2()
{
  return objc_opt_self();
}

uint64_t sub_24A1F746C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  unint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  BOOL v32;
  void (*v33)(uint64_t *, _QWORD);
  unint64_t *v34;
  unint64_t *v35;
  unint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t (*v86)(uint64_t);
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  char v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  char v97;
  char v98;
  int v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  char v104;
  char v105;
  char v106;
  char v107;
  char v108;
  char v109;
  uint64_t v110;

  v2 = v1;
  v4 = type metadata accessor for VASingleEnrollmentData();
  v83 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v84 = (uint64_t)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v63 - v7;
  v67 = *a1;
  v9 = *((_DWORD *)a1 + 2);
  v75 = *((unsigned __int8 *)a1 + 12);
  v74 = *((unsigned __int8 *)a1 + 13);
  v10 = a1[2];
  v11 = a1[3];
  v12 = *((unsigned __int8 *)a1 + 32);
  v13 = a1[5];
  v81 = *((unsigned __int8 *)a1 + 48);
  v73 = *((unsigned __int8 *)a1 + 49);
  v14 = *((_DWORD *)a1 + 13);
  v72 = *((unsigned __int8 *)a1 + 56);
  v80 = a1[8];
  v79 = a1[9];
  v78 = *((unsigned __int8 *)a1 + 80);
  v77 = *((unsigned __int8 *)a1 + 81);
  v76 = *((unsigned __int8 *)a1 + 82);
  v71 = *((unsigned __int8 *)a1 + 83);
  v70 = *((unsigned __int8 *)a1 + 84);
  v69 = *((unsigned __int8 *)a1 + 85);
  v68 = *((unsigned __int8 *)a1 + 86);
  v89 = v67;
  v90 = v9;
  v91 = v75;
  v92 = v74;
  v93 = v10;
  v94 = v11;
  v95 = v12;
  v96 = v13;
  v97 = v81;
  v98 = v73;
  v99 = v14;
  v100 = v72;
  v101 = v80;
  v102 = v79;
  v103 = v78;
  v104 = v77;
  v105 = v76;
  v106 = v71;
  v107 = v70;
  v108 = v69;
  v109 = v68;
  v15 = *(_QWORD *)(VARuntimeParameters.keywordsNoThresholds.getter() + 16);
  swift_bridgeObjectRelease();
  v16 = v15;
  v17 = v67;
  v18 = sub_24A1421D4((uint64_t)&unk_251B9EF88, v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 264))(v18);
  (*(void (**)(_QWORD))(*(_QWORD *)v1 + 216))(MEMORY[0x24BEE4AF8]);
  v89 = v17;
  v90 = v9;
  v91 = v75;
  v92 = v74;
  v66 = v10;
  v93 = v10;
  v94 = v11;
  v65 = v11;
  v64 = v12;
  v95 = v12;
  v63 = v13;
  v96 = v13;
  v97 = v81;
  v98 = v73;
  v99 = v14;
  v100 = v72;
  v101 = v80;
  v102 = v79;
  v103 = v78;
  v104 = v77;
  v105 = v76;
  v106 = v71;
  v107 = v70;
  v108 = v69;
  v109 = v68;
  result = VARuntimeParameters.keywordsNoThresholds.getter();
  v20 = result;
  v88 = *(_QWORD *)(result + 16);
  if (v88)
  {
    v21 = 0;
    v22 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 232);
    v85 = result + 32;
    v86 = v22;
    v110 = v1;
    v82 = result;
    while (v21 < *(_QWORD *)(v20 + 16))
    {
      v23 = (uint64_t *)(v85 + 16 * v21);
      v24 = *v23;
      v25 = v23[1];
      v26 = swift_bridgeObjectRetain();
      v27 = v86(v26);
      v28 = *(_QWORD *)(v27 + 16);
      if (v28)
      {
        v87 = (*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80);
        v29 = v27 + v87;
        v30 = *(_QWORD *)(v83 + 72);
        while (1)
        {
          sub_24A1A85E8(v29, (uint64_t)v8);
          v31 = &v8[*(int *)(v4 + 24)];
          v32 = *(_QWORD *)v31 == v24 && *((_QWORD *)v31 + 1) == v25;
          if (v32 || (sub_24A21659C() & 1) != 0)
            break;
          sub_24A136064((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for VASingleEnrollmentData);
          v29 += v30;
          if (!--v28)
          {
            swift_bridgeObjectRelease();
            result = swift_bridgeObjectRelease();
            v2 = v110;
            goto LABEL_20;
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_24A1A85E8((uint64_t)v8, v84);
        v33 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(*(_QWORD *)v110 + 224))(&v89);
        v35 = v34;
        v36 = *v34;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v35 = v36;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v36 = sub_24A1A9918(0, *(_QWORD *)(v36 + 16) + 1, 1, v36);
          *v35 = v36;
        }
        v39 = *(_QWORD *)(v36 + 16);
        v38 = *(_QWORD *)(v36 + 24);
        if (v39 >= v38 >> 1)
        {
          v36 = sub_24A1A9918(v38 > 1, v39 + 1, 1, v36);
          *v35 = v36;
        }
        v2 = v110;
        *(_QWORD *)(v36 + 16) = v39 + 1;
        sub_24A1A9B20(v84, v36 + v87 + v39 * v30);
        v33(&v89, 0);
        result = sub_24A136064((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for VASingleEnrollmentData);
LABEL_20:
        v20 = v82;
      }
      else
      {
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
      }
      if (++v21 == v88)
      {
        swift_bridgeObjectRelease();
        v17 = v67;
        v40 = v66;
        v41 = v65;
        v42 = v64;
        v43 = v63;
        v44 = v81;
        v45 = v80;
        v46 = v79;
        v47 = v78;
        v48 = v77;
        v49 = v76;
        v50 = v75;
        v51 = v74;
        v52 = v73;
        v53 = v72;
        v54 = v71;
        v55 = v70;
        v56 = v69;
        v57 = v68;
        goto LABEL_23;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v40 = v66;
    v41 = v65;
    v42 = v64;
    v43 = v63;
    v44 = v81;
    v45 = v80;
    v46 = v79;
    v47 = v78;
    v48 = v77;
    v49 = v76;
    v50 = v75;
    v51 = v74;
    v52 = v73;
    v53 = v72;
    v54 = v71;
    v55 = v70;
    v56 = v69;
    v57 = v68;
LABEL_23:
    v89 = v17;
    v90 = v9;
    v91 = v50;
    v92 = v51;
    v93 = v40;
    v94 = v41;
    v95 = v42;
    v96 = v43;
    v97 = v44;
    v98 = v52;
    v99 = v14;
    v100 = v53;
    v101 = v45;
    v102 = v46;
    v103 = v47;
    v104 = v48;
    v105 = v49;
    v106 = v54;
    v107 = v55;
    v108 = v56;
    v109 = v57;
    v58 = *(_QWORD *)(VARuntimeParameters.keywordsNoThresholds.getter() + 16);
    v59 = swift_bridgeObjectRelease();
    v60 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 208))(v59) + 16);
    v61 = swift_bridgeObjectRelease();
    if (v58 == v60)
    {
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 304))(v61);
    }
    else
    {
      sub_24A14C404();
      swift_allocError();
      *v62 = 0xD00000000000003CLL;
      v62[1] = 0x800000024A224ED0;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_24A1F7B78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_BYTE *, _QWORD);
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[32];
  void (*v19)(char *);

  v2 = v0;
  v3 = type metadata accessor for VASingleEnrollmentData();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v0 + 192))(MEMORY[0x24BEE4AF8]);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 208))(v7);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v19 = *(void (**)(char *))(*(_QWORD *)v0 + 296);
    v10 = v8 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v11 = *(_QWORD *)(v4 + 72);
    v16 = v8;
    v17 = v11;
    while (1)
    {
      sub_24A1A85E8(v10, (uint64_t)v6);
      v19(v6);
      if (v1)
        break;
      v12 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v2 + 200))(v18);
      v14 = v13;
      MEMORY[0x24BD09750](v12);
      if (*(_QWORD *)((*v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_24A215ED0();
      sub_24A215F0C();
      sub_24A215EB8();
      v12(v18, 0);
      sub_24A136064((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for VASingleEnrollmentData);
      v10 += v17;
      if (!--v9)
        return swift_bridgeObjectRelease();
    }
    sub_24A136064((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for VASingleEnrollmentData);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A1F7D14(unint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  _QWORD v32[2];

  v6 = sub_24A215A8C();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v15 = sub_24A216410();
    swift_bridgeObjectRelease();
    if (v15)
    {
      swift_bridgeObjectRetain();
      v11 = sub_24A216410();
      v8 = swift_bridgeObjectRelease();
      if (v11 >= 2)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v11)
    {
      if (v11 >= 2)
      {
LABEL_4:
        sub_24A14C404();
        swift_allocError();
        v13 = 0xD00000000000001FLL;
        v14 = "Did not expect multiple buffers";
LABEL_19:
        *v12 = v13;
        v12[1] = (unint64_t)(v14 - 32) | 0x8000000000000000;
        swift_willThrow();
        return v2;
      }
LABEL_7:
      if ((a1 & 0xC000000000000001) != 0)
      {
        MEMORY[0x24BD09BE8](0, a1);
      }
      else
      {
        if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_27;
        }
        swift_unknownObjectRetain();
      }
      type metadata accessor for VAFeatureExtractingEncoderOutput();
      v16 = swift_dynamicCastClass();
      if (!v16)
      {
        swift_unknownObjectRelease();
        sub_24A14C404();
        swift_allocError();
        v13 = 0xD000000000000018;
        v14 = "Unexpected type of input";
        goto LABEL_19;
      }
      v11 = v16;
      if ((*(_BYTE *)(v16 + 16) & 1) == 0)
        goto LABEL_31;
      v8 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 184))();
      if (!(v8 >> 62))
      {
        v17 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
        v18 = swift_bridgeObjectRelease();
        if (v17)
          goto LABEL_14;
LABEL_28:
        v27 = sub_24A1B9D90();
        (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v27, v6);
        v28 = sub_24A215A74();
        v29 = sub_24A216104();
        if (os_log_type_enabled(v28, v29))
        {
          v30 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v30 = 0;
          _os_log_impl(&dword_24A12D000, v28, v29, "No enrollments set for this model", v30, 2u);
          MEMORY[0x24BD0AAAC](v30, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
LABEL_31:
        type metadata accessor for VAResultGeneratorInput();
        v20 = 0;
        v21 = 0;
        v22 = 0;
        goto LABEL_32;
      }
LABEL_27:
      v32[1] = v8;
      v26 = sub_24A216410();
      v18 = swift_bridgeObjectRelease();
      if (v26)
      {
LABEL_14:
        if ((a2 & 1) != 0)
        {
          v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 256))(v18);
LABEL_16:
          type metadata accessor for VAResultGeneratorInput();
          v19 = *(_QWORD *)(v11 + 32);
          swift_bridgeObjectRetain();
          v20 = 1;
          v21 = v2;
          v22 = v19;
LABEL_32:
          v2 = VAResultGeneratorInput.__allocating_init(hasInput:scores:vadBuffer:)(v20, v21, v22);
          swift_unknownObjectRelease();
          return v2;
        }
        if (*(_QWORD *)(v11 + 40))
        {
          v23 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 328);
          v24 = swift_bridgeObjectRetain();
          v2 = v23(v24);
          swift_bridgeObjectRelease();
          if (!v3)
            goto LABEL_16;
        }
        else
        {
          sub_24A14C404();
          swift_allocError();
          *v25 = 0xD00000000000001ELL;
          v25[1] = 0x800000024A223A40;
          swift_willThrow();
        }
        swift_unknownObjectRelease();
        return v2;
      }
      goto LABEL_28;
    }
  }
  type metadata accessor for VAResultGeneratorInput();
  return VAResultGeneratorInput.__allocating_init(hasInput:scores:vadBuffer:)(0, 0, 0);
}

uint64_t sub_24A1F80E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float *v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD v60[2];
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  char v68;

  v8 = type metadata accessor for VASingleEnrollmentData();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 312))(a1, a2);
  if (!v4)
  {
    v13 = result;
    if ((*(_BYTE *)(result + 16) & 1) != 0)
    {
      v50 = 0;
      v51 = a3;
      v14 = *(_QWORD *)((*(uint64_t (**)(void))(*(_QWORD *)v3 + 208))() + 16);
      result = swift_bridgeObjectRelease();
      v57 = v14;
      if (v14)
      {
        v52 = v11;
        v15 = 0;
        v59 = (_QWORD *)MEMORY[0x24BEE4AF8];
        v55 = v3;
        v56 = v13;
        v53 = v9;
        v54 = v8;
        while (1)
        {
          v16 = *(_QWORD *)(v13 + 24);
          if (!v16)
            break;
          if (v15 >= *(_QWORD *)(v16 + 16))
          {
            __break(1u);
LABEL_25:
            __break(1u);
LABEL_26:
            __break(1u);
            break;
          }
          v17 = *(_QWORD *)(v16 + 8 * v15 + 32);
          v18 = *(_QWORD *)(v17 + 16);
          if (!v18)
            goto LABEL_25;
          v19 = *(float *)(v17 + 32);
          v20 = v18 - 1;
          if (v20)
          {
            v21 = (float *)(v17 + 36);
            do
            {
              v22 = *v21++;
              v23 = v22;
              if (v19 < v22)
                v19 = v23;
              --v20;
            }
            while (v20);
          }
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 232))(result);
          if (v15 >= *(_QWORD *)(result + 16))
            goto LABEL_26;
          v24 = (uint64_t)v52;
          sub_24A1A85E8(result+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v15, (uint64_t)v52);
          swift_bridgeObjectRelease();
          v25 = (uint64_t *)(v24 + *(int *)(v8 + 24));
          v27 = *v25;
          v26 = v25[1];
          swift_bridgeObjectRetain();
          sub_24A136064(v24, (uint64_t (*)(_QWORD))type metadata accessor for VASingleEnrollmentData);
          v28 = sub_24A1DF918();
          v29 = sub_24A1DF918();
          v30 = sub_24A1DF920();
          v31 = sub_24A1DF920();
          v32 = sub_24A1516F0();
          v33 = sub_24A1516F0();
          v34 = sub_24A162F28();
          sub_24A1DF928(v27, v26, v30, v31, v32 & 1, v33 & 1, v34 & 1, (uint64_t)v60, v19, v28, v29);
          v35 = v60[1];
          v58 = v60[0];
          v36 = v61;
          v37 = v62;
          v38 = v63;
          v39 = v64;
          v40 = v65;
          v41 = v66;
          v42 = v67;
          v43 = v68;
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_24A17B434(0, v59[2] + 1, 1, v59);
            v59 = (_QWORD *)result;
          }
          v45 = v59[2];
          v44 = v59[3];
          if (v45 >= v44 >> 1)
          {
            result = (uint64_t)sub_24A17B434((_QWORD *)(v44 > 1), v45 + 1, 1, v59);
            v59 = (_QWORD *)result;
          }
          ++v15;
          v47 = v58;
          v46 = v59;
          v59[2] = v45 + 1;
          v48 = &v46[8 * v45];
          v48[4] = v47;
          v48[5] = v35;
          *((_DWORD *)v48 + 12) = v36;
          v48[7] = v37;
          v48[8] = v38;
          v48[9] = v39;
          v48[10] = v40;
          *((_BYTE *)v48 + 88) = v41;
          *((_BYTE *)v48 + 89) = v42;
          *((_BYTE *)v48 + 90) = v43;
          v13 = v56;
          v8 = v54;
          v3 = v55;
          v9 = v53;
          if (v15 == v57)
            goto LABEL_22;
        }
        __break(1u);
      }
      else
      {
        v59 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_22:
        type metadata accessor for VAKeywordResult();
        v49 = VAKeywordResult.__allocating_init(detections:)((uint64_t)v59);
        sub_24A1CE3A0(v49, v51);
        return swift_release();
      }
    }
    else
    {
      static VAVerifierModelOutput.none.getter(a3);
      return swift_release();
    }
  }
  return result;
}

void sub_24A1F8420(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  id v6;
  id v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  _QWORD *v12;
  void *v13;
  unint64_t v14;
  uint64_t i;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  void *v28;
  id v29;
  int v30;
  int v31;
  void *v32;
  id v33;
  int v34;
  int v35;
  void *v36;
  id v37;
  int v38;
  int v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  void *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t (*v48)(void);
  _QWORD *v49;

  v3 = v1;
  sub_24A135F88(&qword_25790BE68);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_24A21AA60;
  sub_24A170EC0();
  *(_QWORD *)(v5 + 32) = sub_24A2161B8();
  sub_24A215EB8();
  v6 = objc_allocWithZone(MEMORY[0x24BDBFFF8]);
  v7 = sub_24A17F3CC(v5, 65568);
  if (!v2)
  {
    v8 = (unint64_t)v7;
    v9 = (void *)sub_24A2161B8();
    objc_msgSend((id)v8, sel_setObject_atIndexedSubscript_, v9, 0);

    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_24A21AA60;
    *(_QWORD *)(v10 + 32) = sub_24A2161B8();
    sub_24A215EB8();
    v11 = objc_allocWithZone(MEMORY[0x24BDBFFF8]);
    v12 = sub_24A17F3CC(v10, 65568);
    v13 = (void *)sub_24A2161B8();
    objc_msgSend(v12, sel_setObject_atIndexedSubscript_, v13, 0);

    v48 = *(uint64_t (**)(void))(*(_QWORD *)v3 + 184);
    v14 = v48();
    if (v14 >> 62)
      goto LABEL_20;
    for (i = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10); ; i = sub_24A216410())
    {
      swift_bridgeObjectRelease();
      v49 = (_QWORD *)sub_24A1421D4(MEMORY[0x24BEE4AF8], i);
      v16 = ((uint64_t (*)(_QWORD *))v48)(v49);
      v45 = a1;
      v46 = v3;
      if (v16 >> 62)
      {
        v40 = sub_24A216410();
        swift_bridgeObjectRelease();
        if (v40 < 0)
          __break(1u);
        v17 = (void *)v40;
        if (!v40)
        {
LABEL_24:

          return;
        }
      }
      else
      {
        v17 = *(void **)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRelease();
        if (!v17)
          goto LABEL_24;
      }
      v47 = (void *)v8;
      type metadata accessor for quant_verifier_aa_fp32Input();
      v8 = 0;
      v43 = v17;
      v44 = v12;
      while (v17 != (void *)v8)
      {
        sub_24A1F8BC8(a1);
        v19 = v18;
        v20 = ((uint64_t (*)(uint64_t))v48)(v18);
        if ((v20 & 0xC000000000000001) != 0)
        {
          v21 = (id)MEMORY[0x24BD09BE8](v8, v20);
        }
        else
        {
          if (v8 >= *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_18;
          v21 = *(id *)(v20 + 8 * v8 + 32);
        }
        v22 = (uint64_t)v21;
        swift_bridgeObjectRelease();
        v23 = v47;
        v41 = v12;
        v42 = v23;
        v24 = sub_24A190004(v19, v22, (uint64_t)v23, (uint64_t)v41);
        v25 = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 160))();
        v26 = (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v25 + 136))(v24);
        swift_release();
        sub_24A135F88(&qword_257909960);
        a1 = swift_allocObject();
        *(_OWORD *)(a1 + 16) = xmmword_24A218680;
        v27 = *(uint64_t (**)(void))(*(_QWORD *)v26 + 88);
        v28 = (void *)v27();
        v29 = objc_msgSend(v28, sel_objectAtIndexedSubscript_, 0);

        objc_msgSend(v29, sel_floatValue);
        v31 = v30;

        *(_DWORD *)(a1 + 32) = v31;
        v32 = (void *)v27();
        v33 = objc_msgSend(v32, sel_objectAtIndexedSubscript_, 1);

        objc_msgSend(v33, sel_floatValue);
        v35 = v34;

        *(_DWORD *)(a1 + 36) = v35;
        v36 = (void *)v27();
        v37 = objc_msgSend(v36, sel_objectAtIndexedSubscript_, 2);

        objc_msgSend(v37, sel_floatValue);
        v39 = v38;

        *(_DWORD *)(a1 + 40) = v39;
        v12 = v49;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v12 = sub_24A14893C(v49);
        v3 = v46;
        if (v8 >= v12[2])
          goto LABEL_19;
        v49 = v12;
        v12[v8 + 4] = a1;
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        ++v8;
        v12 = v44;
        v17 = v43;
        a1 = v45;
        if (v43 == (void *)v8)
        {

          return;
        }
      }
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      ;
    }
  }
}

void sub_24A1F895C()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_24A1F8988()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t VAA2AVerifierModelV2.deinit()
{
  uint64_t v0;

  v0 = VAVerifierModel.deinit();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VAA2AVerifierModelV2.__deallocating_deinit()
{
  VAVerifierModel.deinit();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_24A1F8A5C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t sub_24A1F8A78()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t sub_24A1F8A94()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 288))();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> VAA2AVerifierModelV2.setAudioEnrollments(enrollments:)(Swift::OpaquePointer enrollments)
{
  uint64_t v1;
  _QWORD *v2;
  void (*v3)(uint64_t);
  uint64_t v4;

  if (*((_QWORD *)enrollments._rawValue + 2) < 0x15uLL)
  {
    v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 240);
    v4 = swift_bridgeObjectRetain();
    v3(v4);
  }
  else
  {
    sub_24A14C404();
    swift_allocError();
    *v2 = 0xD000000000000018;
    v2[1] = 0x800000024A2282B0;
    swift_willThrow();
  }
}

uint64_t sub_24A1F8B40(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;

  if (*(_QWORD *)(a1 + 16) < 0x15uLL)
  {
    v4 = *(uint64_t (**)(uint64_t))(**(_QWORD **)v1 + 240);
    v5 = swift_bridgeObjectRetain();
    return v4(v5);
  }
  else
  {
    sub_24A14C404();
    swift_allocError();
    *v2 = 0xD000000000000018;
    v2[1] = 0x800000024A2282B0;
    return swift_willThrow();
  }
}

void sub_24A1F8BC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  id v17;
  double v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;

  sub_24A135F88(&qword_25790BE68);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_24A21AA40;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v3 + 32) = sub_24A216074();
  v21 = v4;
  if (!v4)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v6 = *(_QWORD *)(a1 + 32);
  v5 = a1 + 32;
  *(_QWORD *)(v3 + 40) = sub_24A216074();
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_21:
    __break(1u);
    return;
  }
  *(_QWORD *)(v3 + 48) = sub_24A216074();
  sub_24A215EB8();
  v7 = objc_allocWithZone(MEMORY[0x24BDBFFF8]);
  v25 = sub_24A17F3CC(v3, 65568);
  if (!v1)
  {
    v8 = 0;
    v22 = v5;
    while (1)
    {
      v24 = *(_QWORD *)(v5 + 8 * v8);
      v23 = *(_QWORD *)(v24 + 16);
      if (v23)
        break;
LABEL_6:
      ++v8;
      v5 = v22;
      if (v8 == v21)
        return;
    }
    v9 = 0;
    while (v9 < *(_QWORD *)(v24 + 16))
    {
      v10 = *(_QWORD *)(*(_QWORD *)(v24 + 32 + 8 * v9) + 16);
      if (v10)
      {
        v11 = 0;
        v12 = *(_QWORD *)(v22 + 8 * v8);
        while (1)
        {
          v13 = swift_allocObject();
          *(_OWORD *)(v13 + 16) = xmmword_24A21AA40;
          *(_QWORD *)(v13 + 32) = sub_24A216074();
          *(_QWORD *)(v13 + 40) = sub_24A216074();
          *(_QWORD *)(v13 + 48) = sub_24A216074();
          sub_24A215EB8();
          if (v9 >= *(_QWORD *)(v12 + 16))
            break;
          v14 = *(_QWORD *)(v12 + 32 + 8 * v9);
          if (v11 >= *(_QWORD *)(v14 + 16))
            goto LABEL_18;
          v15 = v11 + 1;
          v16 = *(_DWORD *)(v14 + 4 * v11 + 32);
          v17 = objc_allocWithZone(MEMORY[0x24BDD16E0]);
          LODWORD(v18) = v16;
          v19 = objc_msgSend(v17, sel_initWithFloat_, v18);
          sub_24A170EC0();
          v20 = (void *)sub_24A215E94();
          swift_bridgeObjectRelease();
          objc_msgSend(v25, sel_setObject_forKeyedSubscript_, v19, v20);

          v11 = v15;
          if (v10 == v15)
            goto LABEL_9;
        }
        __break(1u);
LABEL_18:
        __break(1u);
        break;
      }
LABEL_9:
      if (++v9 == v23)
        goto LABEL_6;
    }
    __break(1u);
    goto LABEL_20;
  }
}

uint64_t method lookup function for VAA2AVerifierModelV2()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAA2AVerifierModelV2.maxKeywords.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of VAA2AVerifierModelV2.__allocating_init(computeUnits:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t dispatch thunk of VAA2AVerifierModelV2.didStartListening(requestParams:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of VAA2AVerifierModelV2.predictScores(predictionInput:shouldSkipVerifierInference:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of VAA2AVerifierModelV2.predict(predictionInput:shouldSkipVerifierInference:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

VoiceActions::VAComputeUnits_optional __swiftcall VAComputeUnits.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  VoiceActions::VAComputeUnits_optional result;
  char v5;

  v2 = v1;
  v3 = sub_24A216464();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

uint64_t VAComputeUnits.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000012;
  else
    return 0x796C6E4F757063;
}

uint64_t sub_24A1F8F78(char *a1, char *a2)
{
  return sub_24A1F8F84(*a1, *a2);
}

uint64_t sub_24A1F8F84(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000012;
  else
    v3 = 0x796C6E4F757063;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0x800000024A228310;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000012;
  else
    v5 = 0x796C6E4F757063;
  if ((a2 & 1) != 0)
    v6 = 0x800000024A228310;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_24A21659C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_24A1F902C()
{
  sub_24A216638();
  sub_24A215D50();
  swift_bridgeObjectRelease();
  return sub_24A21665C();
}

uint64_t sub_24A1F90B0()
{
  sub_24A215D50();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A1F9110()
{
  sub_24A216638();
  sub_24A215D50();
  swift_bridgeObjectRelease();
  return sub_24A21665C();
}

VoiceActions::VAComputeUnits_optional sub_24A1F9190(Swift::String *a1)
{
  return VAComputeUnits.init(rawValue:)(*a1);
}

void sub_24A1F919C(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 0x796C6E4F757063;
  if (*v1)
    v2 = 0xD000000000000012;
  v3 = 0x800000024A228310;
  if (!*v1)
    v3 = 0xE700000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_24A1F91E0()
{
  sub_24A180568();
  return sub_24A215E7C();
}

uint64_t sub_24A1F923C()
{
  sub_24A180568();
  return sub_24A215E70();
}

float static VARuntimeParameters.defaultThreshold.getter()
{
  return 0.8;
}

uint64_t VARuntimeParameters.keywords.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t VARuntimeParameters.keywords.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*VARuntimeParameters.keywords.modify())()
{
  return nullsub_1;
}

float VARuntimeParameters.defaultThreshold.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

void VARuntimeParameters.defaultThreshold.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 8) = a1;
}

uint64_t (*VARuntimeParameters.defaultThreshold.modify())()
{
  return nullsub_1;
}

uint64_t VARuntimeParameters.returnKeywordAudio.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 12);
}

uint64_t VARuntimeParameters.returnKeywordAudio.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 12) = result;
  return result;
}

uint64_t (*VARuntimeParameters.returnKeywordAudio.modify())()
{
  return nullsub_1;
}

uint64_t VARuntimeParameters.verbose.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 13);
}

uint64_t VARuntimeParameters.verbose.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 13) = result;
  return result;
}

uint64_t (*VARuntimeParameters.verbose.modify())()
{
  return nullsub_1;
}

uint64_t VARuntimeParameters.debounce.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t VARuntimeParameters.debounce.setter(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = result;
  *(_QWORD *)(v3 + 24) = a2;
  *(_BYTE *)(v3 + 32) = a3 & 1;
  return result;
}

uint64_t (*VARuntimeParameters.debounce.modify())()
{
  return nullsub_1;
}

uint64_t VARuntimeParameters.maximumBufferSamples.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t VARuntimeParameters.maximumBufferSamples.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = result;
  *(_BYTE *)(v2 + 48) = a2 & 1;
  return result;
}

uint64_t (*VARuntimeParameters.maximumBufferSamples.modify())()
{
  return nullsub_1;
}

uint64_t VARuntimeParameters.stopWhenEmpty.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 49);
}

uint64_t VARuntimeParameters.stopWhenEmpty.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 49) = result;
  return result;
}

uint64_t (*VARuntimeParameters.stopWhenEmpty.modify())()
{
  return nullsub_1;
}

float VARuntimeParameters.minimumSilenceProbability.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 52);
}

void VARuntimeParameters.minimumSilenceProbability.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 52) = a1;
}

uint64_t (*VARuntimeParameters.minimumSilenceProbability.modify())()
{
  return nullsub_1;
}

uint64_t VARuntimeParameters.runInferenceOnlyWhenSpeechActive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t VARuntimeParameters.runInferenceOnlyWhenSpeechActive.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 56) = result;
  return result;
}

uint64_t (*VARuntimeParameters.runInferenceOnlyWhenSpeechActive.modify())()
{
  return nullsub_1;
}

uint64_t VARuntimeParameters.extraTasrBias.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VARuntimeParameters.extraTasrBias.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = a2;
  return result;
}

uint64_t (*VARuntimeParameters.extraTasrBias.modify())()
{
  return nullsub_1;
}

uint64_t VARuntimeParameters.preSilenceCheckOverride.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t VARuntimeParameters.preSilenceCheckOverride.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 80) = result;
  return result;
}

uint64_t (*VARuntimeParameters.preSilenceCheckOverride.modify())()
{
  return nullsub_1;
}

uint64_t VARuntimeParameters.postSilenceCheckOverride.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 81);
}

uint64_t VARuntimeParameters.postSilenceCheckOverride.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 81) = result;
  return result;
}

uint64_t (*VARuntimeParameters.postSilenceCheckOverride.modify())()
{
  return nullsub_1;
}

uint64_t VARuntimeParameters.duringSpeechCheckOverride.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 82);
}

uint64_t VARuntimeParameters.duringSpeechCheckOverride.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 82) = result;
  return result;
}

uint64_t (*VARuntimeParameters.duringSpeechCheckOverride.modify())()
{
  return nullsub_1;
}

uint64_t VARuntimeParameters.saveKeywordAudio.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 83);
}

uint64_t VARuntimeParameters.saveKeywordAudio.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 83) = result;
  return result;
}

uint64_t (*VARuntimeParameters.saveKeywordAudio.modify())()
{
  return nullsub_1;
}

uint64_t VARuntimeParameters.returnAudioForTasrFinalResult.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 84);
}

uint64_t VARuntimeParameters.returnAudioForTasrFinalResult.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 84) = result;
  return result;
}

uint64_t (*VARuntimeParameters.returnAudioForTasrFinalResult.modify())()
{
  return nullsub_1;
}

uint64_t VARuntimeParameters.usePartialResultsForKeywordDetection.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 85);
}

uint64_t VARuntimeParameters.usePartialResultsForKeywordDetection.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 85) = result;
  return result;
}

uint64_t (*VARuntimeParameters.usePartialResultsForKeywordDetection.modify())()
{
  return nullsub_1;
}

uint64_t VARuntimeParameters.blockModelInference.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 86);
}

uint64_t VARuntimeParameters.blockModelInference.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 86) = result;
  return result;
}

uint64_t (*VARuntimeParameters.blockModelInference.modify())()
{
  return nullsub_1;
}

void VARuntimeParameters.init()(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_DWORD *)(a1 + 8) = 1061997773;
  *(_WORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 48) = 1;
  *(_DWORD *)(a1 + 52) = 1050253722;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 80) = 514;
  *(_BYTE *)(a1 + 82) = 2;
  *(_DWORD *)(a1 + 83) = 0;
}

uint64_t sub_24A1F959C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t);
  uint64_t v13;

  v0 = sub_24A215690();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v2);
  v7 = (char *)&v13 - v6;
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v13 - v9;
  sub_24A13DA68(v8, qword_25791CE88);
  sub_24A136154(v0, (uint64_t)qword_25791CE88);
  sub_24A215654();
  sub_24A215648();
  sub_24A21566C();
  v11 = *(void (**)(char *, uint64_t))(v1 + 8);
  v11(v4, v0);
  v11(v7, v0);
  sub_24A21563C();
  sub_24A21566C();
  v11(v7, v0);
  return ((uint64_t (*)(char *, uint64_t))v11)(v10, v0);
}

uint64_t static VARuntimeParameters.allowedCharacterSet.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_25791CE80 != -1)
    swift_once();
  v2 = sub_24A215690();
  v3 = sub_24A136154(v2, (uint64_t)qword_25791CE88);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static VARuntimeParameters.isValidKeyword(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v4 = sub_24A215690();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v8 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v8)
    return 0;
  v27 = a1;
  v28 = a2;
  v25 = 58;
  v26 = 0xE100000000000000;
  sub_24A14C688();
  v9 = sub_24A2162C0();
  if ((v9 & 1) != 0)
  {
    v27 = 58;
    v28 = 0xE100000000000000;
    MEMORY[0x24BDAC7A8](v9);
    *(&v22 - 2) = (uint64_t)&v27;
    swift_bridgeObjectRetain();
    if (*(_QWORD *)(sub_24A147840(1, 0, sub_24A1862A0, (uint64_t)(&v22 - 4), a1, a2) + 16) < 2uLL)
    {
LABEL_19:
      __break(1u);
LABEL_20:
      swift_once();
      goto LABEL_14;
    }
    v23 = v7;
    v24 = 0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v7 = v23;
    v9 = sub_24A216050();
    if ((v9 & 0x100000000) != 0)
      return 0;
  }
  else
  {
    v24 = 0;
  }
  v27 = 58;
  v28 = 0xE100000000000000;
  MEMORY[0x24BDAC7A8](v9);
  *(&v22 - 2) = (uint64_t)&v27;
  swift_bridgeObjectRetain();
  v10 = (_QWORD *)sub_24A147840(0x7FFFFFFFFFFFFFFFLL, 1, sub_24A1862A0, (uint64_t)(&v22 - 4), a1, a2);
  if (!v10[2])
  {
    __break(1u);
    goto LABEL_19;
  }
  v11 = v10[4];
  v12 = v10[5];
  v13 = v10[6];
  v14 = v10[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = MEMORY[0x24BD095F4](v11, v12, v13, v14);
  v17 = v16;
  swift_bridgeObjectRelease();
  v18 = HIBYTE(v17) & 0xF;
  if ((v17 & 0x2000000000000000) == 0)
    v18 = v15 & 0xFFFFFFFFFFFFLL;
  if (!v18)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v27 = v15;
  v28 = v17;
  if (qword_25791CE80 != -1)
    goto LABEL_20;
LABEL_14:
  sub_24A136154(v4, (uint64_t)qword_25791CE88);
  sub_24A215678();
  sub_24A216290();
  v20 = v19 & 1;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t VARuntimeParameters.keywordsToThresholds.getter()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  unint64_t *v4;
  _QWORD *v5;
  float v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unint64_t v28;
  _BYTE *v29;
  BOOL v30;
  char isUniquelyReferenced_nonNull_native;
  char v32;
  unint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  char v39;
  uint64_t *v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  _BYTE *v44;
  unint64_t v45;
  char v46;
  char v47;
  char v48;
  uint64_t result;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  BOOL v55;
  _QWORD v56[2];
  uint64_t v57;
  uint64_t v58;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  if (!v2)
    return MEMORY[0x24BEE4B00];
  v3 = v0[2];
  swift_bridgeObjectRetain();
  v54 = sub_24A14C688();
  v52 = v1;
  v4 = (unint64_t *)(v1 + 40);
  v5 = (_QWORD *)MEMORY[0x24BEE4B00];
  while (1)
  {
    v9 = *(v4 - 1);
    v8 = *v4;
    v57 = v9;
    v58 = v8;
    v56[0] = 58;
    v56[1] = 0xE100000000000000;
    swift_bridgeObjectRetain();
    v10 = sub_24A2162C0();
    if ((v10 & 1) != 0)
      break;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v57 = (uint64_t)v5;
    v33 = sub_24A148970(v9, v8);
    v34 = v5[2];
    v35 = (v32 & 1) == 0;
    v36 = v34 + v35;
    if (__OFADD__(v34, v35))
      goto LABEL_47;
    v37 = v32;
    if (v5[3] >= v36)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_24A1E38B0();
    }
    else
    {
      sub_24A1E35AC(v36, isUniquelyReferenced_nonNull_native);
      v38 = sub_24A148970(v9, v8);
      if ((v37 & 1) != (v39 & 1))
        goto LABEL_50;
      v33 = v38;
    }
    v5 = (_QWORD *)v57;
    if ((v37 & 1) != 0)
    {
      *(_DWORD *)(*(_QWORD *)(v57 + 56) + 4 * v33) = v3;
    }
    else
    {
      *(_QWORD *)(v57 + 8 * (v33 >> 6) + 64) |= 1 << v33;
      v40 = (uint64_t *)(v5[6] + 16 * v33);
      *v40 = v9;
      v40[1] = v8;
      *(_DWORD *)(v5[7] + 4 * v33) = v3;
      v41 = v5[2];
      v42 = __OFADD__(v41, 1);
      v43 = v41 + 1;
      if (v42)
        goto LABEL_49;
      v5[2] = v43;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_4:
    v4 += 2;
    if (!--v2)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v5;
    }
  }
  v57 = 58;
  v58 = 0xE100000000000000;
  MEMORY[0x24BDAC7A8](v10);
  v51 = &v57;
  swift_bridgeObjectRetain();
  v11 = (_QWORD *)sub_24A147840(0x7FFFFFFFFFFFFFFFLL, 1, sub_24A1862A0, (uint64_t)&v50, v9, v8);
  swift_bridgeObjectRelease();
  if (v11[2])
  {
    v12 = v11[4];
    v13 = v11[5];
    v14 = v11[6];
    v15 = v11[7];
    swift_bridgeObjectRetain();
    v16 = MEMORY[0x24BD095F4](v12, v13, v14, v15);
    v18 = v17;
    swift_bridgeObjectRelease();
    if (v11[2] < 2uLL)
      goto LABEL_48;
    v53 = v2;
    v19 = v11[8];
    v20 = v11[9];
    v22 = v11[10];
    v21 = v11[11];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v23 = MEMORY[0x24BD095F4](v19, v20, v22, v21);
    v25 = v24;
    v26 = swift_bridgeObjectRelease();
    LODWORD(v56[0]) = 0;
    MEMORY[0x24BDAC7A8](v26);
    v51 = v56;
    if ((v25 & 0x1000000000000000) != 0 || !(v25 & 0x2000000000000000 | v23 & 0x1000000000000000))
    {
      sub_24A2162FC();
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((v25 & 0x2000000000000000) != 0)
      {
        v57 = v23;
        v58 = v25 & 0xFFFFFFFFFFFFFFLL;
        v30 = (v23 > 0x20u || ((0x100003E01uLL >> v23) & 1) == 0)
           && (v44 = (_BYTE *)_swift_stdlib_strtof_clocale()) != 0
           && *v44 == 0;
      }
      else
      {
        if ((v23 & 0x1000000000000000) != 0)
          v27 = (unsigned __int8 *)((v25 & 0xFFFFFFFFFFFFFFFLL) + 32);
        else
          v27 = (unsigned __int8 *)sub_24A216350();
        v28 = *v27;
        v30 = (v28 >= 0x21 || ((0x100003E01uLL >> v28) & 1) == 0)
           && (v29 = (_BYTE *)_swift_stdlib_strtof_clocale()) != 0
           && *v29 == 0;
      }
      v55 = v30;
      swift_bridgeObjectRelease();
    }
    if (v55)
    {
      v6 = *(float *)v56;
      v7 = swift_isUniquelyReferenced_nonNull_native();
      v57 = (uint64_t)v5;
      sub_24A1EB86C(v16, v18, v7, v6);
      v5 = (_QWORD *)v57;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v2 = v53;
    }
    else
    {
      swift_bridgeObjectRetain();
      v45 = sub_24A148970(v16, v18);
      v47 = v46;
      swift_bridgeObjectRelease();
      v2 = v53;
      if ((v47 & 1) != 0)
      {
        v48 = swift_isUniquelyReferenced_nonNull_native();
        v57 = (uint64_t)v5;
        if ((v48 & 1) == 0)
        {
          sub_24A1E38B0();
          v5 = (_QWORD *)v57;
        }
        swift_bridgeObjectRelease();
        sub_24A1FAEA8(v45, (uint64_t)v5);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    goto LABEL_4;
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  result = sub_24A2165CC();
  __break(1u);
  return result;
}

uint64_t VARuntimeParameters.keywordsNoThresholds.getter()
{
  uint64_t v0;
  int v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  int v8;
  char v9;
  __int16 v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v19;
  int v20;
  char v21;
  char v22;
  __int128 v23;
  char v24;
  uint64_t v25;
  char v26;
  char v27;
  int v28;
  char v29;
  __int128 v30;
  __int16 v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;

  v1 = *(_DWORD *)(v0 + 8);
  v2 = *(_BYTE *)(v0 + 12);
  v3 = *(_BYTE *)(v0 + 13);
  v4 = *(_BYTE *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_BYTE *)(v0 + 48);
  v7 = *(_BYTE *)(v0 + 49);
  v8 = *(_DWORD *)(v0 + 52);
  v9 = *(_BYTE *)(v0 + 56);
  v10 = *(_WORD *)(v0 + 80);
  v11 = *(_BYTE *)(v0 + 82);
  v12 = *(_BYTE *)(v0 + 83);
  v13 = *(_BYTE *)(v0 + 84);
  v14 = *(_BYTE *)(v0 + 85);
  v15 = *(_BYTE *)(v0 + 86);
  v19 = *(_QWORD **)v0;
  v20 = v1;
  v21 = v2;
  v22 = v3;
  v23 = *(_OWORD *)(v0 + 16);
  v24 = v4;
  v25 = v5;
  v26 = v6;
  v27 = v7;
  v28 = v8;
  v29 = v9;
  v30 = *(_OWORD *)(v0 + 64);
  v31 = v10;
  v32 = v11;
  v33 = v12;
  v34 = v13;
  v35 = v14;
  v36 = v15;
  v16 = VARuntimeParameters.keywordsToThresholds.getter();
  v17 = sub_24A1FB07C(v16, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))sub_24A1E3B70);
  swift_bridgeObjectRelease();
  v19 = v17;
  swift_retain();
  sub_24A18EE90((uint64_t *)&v19);
  swift_release();
  return (uint64_t)v19;
}

uint64_t VARuntimeParameters.allKeywordsAreValid.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *i;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  char v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;

  v1 = sub_24A215690();
  v25 = *(_QWORD *)(v1 - 8);
  v26 = v1;
  MEMORY[0x24BDAC7A8](v1);
  v24 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  if (!v3)
    return 1;
  v23 = swift_bridgeObjectRetain();
  for (i = (unint64_t *)(v23 + 40); ; i += 2)
  {
    v5 = *(i - 1);
    v6 = *i;
    v7 = HIBYTE(*i) & 0xF;
    if ((*i & 0x2000000000000000) == 0)
      v7 = v5 & 0xFFFFFFFFFFFFLL;
    if (!v7)
      goto LABEL_22;
    v30 = *(i - 1);
    v31 = v6;
    v28 = 58;
    v29 = 0xE100000000000000;
    v8 = sub_24A14C688();
    swift_bridgeObjectRetain();
    v9 = sub_24A2162C0();
    v27 = v8;
    if ((v9 & 1) != 0)
    {
      v30 = 58;
      v31 = 0xE100000000000000;
      MEMORY[0x24BDAC7A8](v9);
      *(&v23 - 2) = (uint64_t)&v30;
      swift_bridgeObjectRetain();
      result = sub_24A147840(1, 0, sub_24A1862A0, (uint64_t)(&v23 - 4), v5, v6);
      if (*(_QWORD *)(result + 16) < 2uLL)
        goto LABEL_24;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v9 = sub_24A216050();
      if ((v9 & 0x100000000) != 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
    }
    v30 = 58;
    v31 = 0xE100000000000000;
    MEMORY[0x24BDAC7A8](v9);
    *(&v23 - 2) = (uint64_t)&v30;
    swift_bridgeObjectRetain();
    result = sub_24A147840(0x7FFFFFFFFFFFFFFFLL, 1, sub_24A1862A0, (uint64_t)(&v23 - 4), v5, v6);
    if (!*(_QWORD *)(result + 16))
      break;
    v11 = *(_QWORD *)(result + 32);
    v12 = *(_QWORD *)(result + 40);
    v13 = *(_QWORD *)(result + 48);
    v14 = *(_QWORD *)(result + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v15 = MEMORY[0x24BD095F4](v11, v12, v13, v14);
    v17 = v16;
    swift_bridgeObjectRelease();
    v18 = HIBYTE(v17) & 0xF;
    if ((v17 & 0x2000000000000000) == 0)
      v18 = v15 & 0xFFFFFFFFFFFFLL;
    if (!v18)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_22:
      swift_bridgeObjectRelease();
      return 0;
    }
    v30 = v15;
    v31 = v17;
    if (qword_25791CE80 != -1)
      swift_once();
    v19 = v26;
    sub_24A136154(v26, (uint64_t)qword_25791CE88);
    v20 = v24;
    sub_24A215678();
    sub_24A216290();
    v22 = v21;
    (*(void (**)(char *, uint64_t))(v25 + 8))(v20, v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
      goto LABEL_22;
    if (!--v3)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_24A1FA3B8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v32;
  unint64_t v33;
  __int128 *v34;
  unint64_t v35;
  _QWORD v36[2];
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;

  v1 = sub_24A215690();
  v39 = *(_QWORD *)(v1 - 8);
  v40 = v1;
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *v0;
  if (!*(_QWORD *)(*v0 + 16))
    return 0;
  v5 = v0[9];
  v37 = v0[8];
  *(_QWORD *)&v43 = v4;
  swift_bridgeObjectRetain();
  v6 = sub_24A135F88(&qword_257909948);
  v38 = sub_24A14C9E8();
  sub_24A215C60();
  swift_bridgeObjectRelease();
  v7 = sub_24A215D14();
  v9 = v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v43 = v7;
  *((_QWORD *)&v43 + 1) = v9;
  v48 = 95;
  v49 = 0xE100000000000000;
  v46 = 32;
  v47 = 0xE100000000000000;
  v10 = sub_24A14C688();
  v34 = (__int128 *)v10;
  v35 = v10;
  v11 = MEMORY[0x24BEE0D00];
  v32 = MEMORY[0x24BEE0D00];
  v33 = v10;
  v12 = sub_24A2162A8();
  v14 = v13;
  v15 = swift_bridgeObjectRelease();
  v48 = v12;
  v49 = v14;
  if (v5)
  {
    v36[1] = v6;
    *(_QWORD *)&v43 = 44;
    *((_QWORD *)&v43 + 1) = 0xE100000000000000;
    MEMORY[0x24BDAC7A8](v15);
    v34 = &v43;
    swift_bridgeObjectRetain_n();
    v16 = sub_24A147840(0x7FFFFFFFFFFFFFFFLL, 1, sub_24A1862A0, (uint64_t)&v32, v37, v5);
    swift_bridgeObjectRelease();
    v17 = *(_QWORD *)(v16 + 16);
    v37 = v16;
    v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (v17)
    {
      v19 = (uint64_t *)(v16 + 56);
      do
      {
        v20 = *(v19 - 1);
        v21 = *v19;
        v43 = *(_OWORD *)(v19 - 3);
        v44 = v20;
        v45 = v21;
        swift_bridgeObjectRetain();
        sub_24A215630();
        sub_24A186988();
        sub_24A21629C();
        (*(void (**)(char *, uint64_t))(v39 + 8))(v3, v40);
        swift_bridgeObjectRelease();
        v22 = sub_24A215D14();
        v24 = v23;
        swift_bridgeObjectRelease();
        *(_QWORD *)&v43 = v22;
        *((_QWORD *)&v43 + 1) = v24;
        v46 = 95;
        v47 = 0xE100000000000000;
        v41 = 32;
        v42 = 0xE100000000000000;
        v34 = (__int128 *)v10;
        v35 = v10;
        v32 = v11;
        v33 = v10;
        v25 = sub_24A2162A8();
        v27 = v26;
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v18 = sub_24A14804C(0, v18[2] + 1, 1, v18);
        v29 = v18[2];
        v28 = v18[3];
        if (v29 >= v28 >> 1)
          v18 = sub_24A14804C((_QWORD *)(v28 > 1), v29 + 1, 1, v18);
        v18[2] = v29 + 1;
        v30 = &v18[2 * v29];
        v30[4] = v25;
        v30[5] = v27;
        v19 += 4;
        --v17;
      }
      while (v17);
    }
    swift_bridgeObjectRelease();
    *(_QWORD *)&v43 = v18;
    sub_24A215C60();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v43 = 44;
    *((_QWORD *)&v43 + 1) = 0xE100000000000000;
    sub_24A215D98();
    swift_bridgeObjectRelease();
    sub_24A215D98();
    swift_bridgeObjectRelease();
    return v48;
  }
  return v12;
}

uint64_t sub_24A1FA788()
{
  _BYTE *v0;

  return ((v0[12] | v0[83]) | v0[84]) & 1;
}

void sub_24A1FA7A4(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_DWORD *)(a1 + 8) = 1061997773;
  *(_WORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 48) = 1;
  *(_DWORD *)(a1 + 52) = 1050253722;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 80) = 514;
  *(_BYTE *)(a1 + 82) = 2;
  *(_DWORD *)(a1 + 83) = 0;
}

uint64_t VARuntimeParametersFactoryDummy.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t VARuntimeParametersFactoryDummy.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_24A1FA818(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x68);
  v3 = swift_unknownObjectRetain();
  return v2(v3);
}

uint64_t sub_24A1FA858()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions16VAKeywordSpotter_delegate;
  swift_beginAccess();
  return MEMORY[0x24BD0AB54](v1);
}

uint64_t sub_24A1FA8A0()
{
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*sub_24A1FA8F8(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC12VoiceActions16VAKeywordSpotter_delegate;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x24BD0AB54](v5);
  return sub_24A151A5C;
}

id sub_24A1FA968()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR____TtC12VoiceActions16VAKeywordSpotter_configuration);
  swift_beginAccess();
  return *v1;
}

void sub_24A1FA9AC(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtC12VoiceActions16VAKeywordSpotter_configuration);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*sub_24A1FA9FC())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

id VAKeywordSpotter.__allocating_init(delegate:configuration:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  char *v4;
  id v5;
  objc_super v7;

  v4 = (char *)objc_allocWithZone(v2);
  swift_unknownObjectWeakInit();
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  *(_QWORD *)&v4[OBJC_IVAR____TtC12VoiceActions16VAKeywordSpotter_configuration] = a2;
  v7.receiver = v4;
  v7.super_class = v2;
  v5 = objc_msgSendSuper2(&v7, sel_init);
  swift_unknownObjectRelease();
  return v5;
}

id VAKeywordSpotter.init(delegate:configuration:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  id v4;
  objc_super v6;

  swift_unknownObjectWeakInit();
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  *(_QWORD *)&v2[OBJC_IVAR____TtC12VoiceActions16VAKeywordSpotter_configuration] = a2;
  v6.receiver = v2;
  v6.super_class = (Class)type metadata accessor for VAKeywordSpotter();
  v4 = objc_msgSendSuper2(&v6, sel_init);
  swift_unknownObjectRelease();
  return v4;
}

_QWORD *sub_24A1FAB80()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v2 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
  v3 = (_QWORD *)(*(uint64_t (**)(void))((*v1 & *v2) + 0x98))();

  if (v3)
  {
    v4 = (*(uint64_t (**)(void))((*v1 & *v3) + 0xB0))();
    v2 = sub_24A1FB07C(v4, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))sub_24A18AA24);

    swift_bridgeObjectRelease();
  }
  else
  {
    sub_24A14C404();
    swift_allocError();
    *v5 = 0xD000000000000020;
    v5[1] = 0x800000024A227660;
    swift_willThrow();
  }
  return v2;
}

uint64_t sub_24A1FAC6C()
{
  _QWORD *v0;

  sub_24A14C404();
  swift_allocError();
  *v0 = 0xD000000000000023;
  v0[1] = 0x800000024A228330;
  return swift_willThrow();
}

uint64_t sub_24A1FACCC()
{
  return swift_task_switch();
}

uint64_t sub_24A1FACE0()
{
  uint64_t v0;
  _QWORD *v1;

  sub_24A14C404();
  swift_allocError();
  *v1 = 0xD000000000000023;
  v1[1] = 0x800000024A228330;
  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A1FAD54()
{
  return swift_task_switch();
}

uint64_t sub_24A1FAD68()
{
  _QWORD *v0;

  sub_24A14C404();
  swift_allocError();
  *v0 = 0xD000000000000025;
  v0[1] = 0x800000024A228360;
  return swift_willThrow();
}

id VAKeywordSpotter.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void VAKeywordSpotter.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id VAKeywordSpotter.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VAKeywordSpotter();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t sub_24A1FAEA8(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_24A2162E4();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_24A216638();
        swift_bridgeObjectRetain();
        sub_24A215D50();
        v9 = sub_24A21665C();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_DWORD *)(v14 + 4 * v3);
          v16 = (_DWORD *)(v14 + 4 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

_QWORD *sub_24A1FB07C(uint64_t a1, uint64_t (*a2)(uint64_t *, _QWORD *, uint64_t, uint64_t))
{
  uint64_t v2;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_24A135F88(&qword_25790A460);
  v5 = (_QWORD *)swift_allocObject();
  v6 = j__malloc_size(v5);
  v7 = v6 - 32;
  if (v6 < 32)
    v7 = v6 - 17;
  v5[2] = v2;
  v5[3] = 2 * (v7 >> 4);
  v8 = a2(&v10, v5 + 4, v2, a1);
  swift_bridgeObjectRetain();
  sub_24A18B030();
  if (v8 != v2)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v5;
}

_BYTE *sub_24A1FB164@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtof_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t type metadata accessor for VAKeywordSpotter()
{
  return objc_opt_self();
}

unint64_t sub_24A1FB1F4()
{
  unint64_t result;

  result = qword_257912FB0;
  if (!qword_257912FB0)
  {
    result = MEMORY[0x24BD0A9EC](&protocol conformance descriptor for VAComputeUnits, &type metadata for VAComputeUnits);
    atomic_store(result, (unint64_t *)&qword_257912FB0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for VAComputeUnits(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24A1FB284 + 4 * byte_24A21F6B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24A1FB2B8 + 4 * byte_24A21F6B0[v4]))();
}

uint64_t sub_24A1FB2B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A1FB2C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A1FB2C8);
  return result;
}

uint64_t sub_24A1FB2D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A1FB2DCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24A1FB2E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A1FB2E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VAComputeUnits()
{
  return &type metadata for VAComputeUnits;
}

uint64_t destroy for VARuntimeParameters()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for VARuntimeParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v3 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v3;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_WORD *)(a1 + 85) = *(_WORD *)(a2 + 85);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VARuntimeParameters(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  v4 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
  *(_BYTE *)(a1 + 83) = *(_BYTE *)(a2 + 83);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_BYTE *)(a1 + 85) = *(_BYTE *)(a2 + 85);
  *(_BYTE *)(a1 + 86) = *(_BYTE *)(a2 + 86);
  return a1;
}

__n128 initializeWithTake for VARuntimeParameters(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 79) = *(_QWORD *)(a2 + 79);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for VARuntimeParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(a2 + 13);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v4 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_WORD *)(a1 + 81) = *(_WORD *)(a2 + 81);
  *(_BYTE *)(a1 + 83) = *(_BYTE *)(a2 + 83);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_BYTE *)(a1 + 85) = *(_BYTE *)(a2 + 85);
  *(_BYTE *)(a1 + 86) = *(_BYTE *)(a2 + 86);
  return a1;
}

uint64_t getEnumTagSinglePayload for VARuntimeParameters(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 87))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VARuntimeParameters(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 86) = 0;
    *(_WORD *)(result + 84) = 0;
    *(_DWORD *)(result + 80) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 87) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 87) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VARuntimeParameters()
{
  return &type metadata for VARuntimeParameters;
}

uint64_t dispatch thunk of VARuntimeParametersFactory.makeRuntimeParameters()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t type metadata accessor for VARuntimeParametersFactoryDummy()
{
  return objc_opt_self();
}

uint64_t method lookup function for VARuntimeParametersFactoryDummy()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VARuntimeParametersFactoryDummy.makeRuntimeParameters()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 80))();
}

uint64_t method lookup function for VAKeywordSpotter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAKeywordSpotter.delegate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of VAKeywordSpotter.delegate.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of VAKeywordSpotter.delegate.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of VAKeywordSpotter.configuration.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of VAKeywordSpotter.configuration.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of VAKeywordSpotter.configuration.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of VAKeywordSpotter.__allocating_init(delegate:configuration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of VAKeywordSpotter.fixedSpotterKeywordsTrainedFor()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of VAKeywordSpotter.startWithKeywords(params:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of VAKeywordSpotter.addAudio(buffer:hostTime:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of VAKeywordSpotter.addAudioAsync(buffer:hostTime:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v6 = *(int **)((*MEMORY[0x24BEE4EA0] & *v2) + 0xB0);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_24A152AD0;
  return v9(a1, a2);
}

uint64_t dispatch thunk of VAKeywordSpotter.stop()()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v2 = *(int **)((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8);
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_24A15FEEC;
  return v5();
}

uint64_t dispatch thunk of VAKeywordSpotter.makeDefaultRuntimeParams()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

ValueMetadata *type metadata accessor for VAKeywordSpotterError()
{
  return &type metadata for VAKeywordSpotterError;
}

ValueMetadata *type metadata accessor for VABufferLimitExceededError()
{
  return &type metadata for VABufferLimitExceededError;
}

uint64_t sub_24A1FB9A0()
{
  uint64_t v0;

  v0 = sub_24A18C830((uint64_t)&unk_251B9F3D0);
  swift_arrayDestroy();
  return v0;
}

void sub_24A1FBACC()
{
  sub_24A1FBAFC();
}

void sub_24A1FBAE4()
{
  sub_24A1FBAFC();
}

void sub_24A1FBAFC()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;

  v1 = *(void **)(v0 + 16);
  v2 = (void *)sub_24A215C90();
  v3 = objc_msgSend(v1, sel_featureValueForName_, v2);

  if (!v3)
  {
    __break(1u);
    goto LABEL_5;
  }
  v4 = objc_msgSend(v3, sel_multiArrayValue);

  if (!v4)
LABEL_5:
    __break(1u);
}

uint64_t sub_24A1FBB78()
{
  uint64_t v0;

  (*(void (**)(void))(*(_QWORD *)v0 + 104))();
  return sub_24A215AA4();
}

uint64_t sub_24A1FBCD8(void *a1, void *a2)
{
  uint64_t v4;

  swift_allocObject();
  v4 = sub_24A1FC758((uint64_t)a1, (uint64_t)a2);

  return v4;
}

uint64_t sub_24A1FBD30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t result;
  uint64_t v16;

  v2 = sub_24A215750();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_24A135F88(&qword_25790BCF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_24A17DDE0();
  if (!v9)
  {
    __break(1u);
    goto LABEL_6;
  }
  v10 = v9;
  v11 = (void *)sub_24A215C90();
  v12 = (void *)sub_24A215C90();
  v13 = objc_msgSend(v10, sel_URLForResource_withExtension_, v11, v12);

  if (!v13)
  {
LABEL_6:
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    goto LABEL_7;
  }
  sub_24A215738();

  v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  v14(v8, v5, v2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
  if ((_DWORD)result != 1)
  {

    return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v8, v2);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_24A1FBEE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  sub_24A16D544(0, qword_25790C7A0);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  swift_retain();
  sub_24A2161A0();
  return swift_release();
}

uint64_t sub_24A1FBF7C()
{
  uint64_t v0;
  _QWORD *v1;

  sub_24A16D544(0, qword_25790C7A0);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_24A1FBFFC;
  return sub_24A2161AC();
}

uint64_t sub_24A1FBFFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 24) = a1;
  return swift_task_switch();
}

uint64_t sub_24A1FC078()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  type metadata accessor for all_audio2audio_encoder_ig2p();
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A1FC0BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v12[2];

  v12[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = *(void **)(v2 + 16);
  v12[0] = 0;
  v6 = objc_msgSend(v5, sel_predictionFromFeatures_options_error_, a1, a2, v12);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    type metadata accessor for all_audio2audio_encoder_ig2pOutput();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v8;
    v9 = v7;
  }
  else
  {
    v10 = v12[0];
    sub_24A2156F0();

    swift_willThrow();
  }
  return v3;
}

uint64_t sub_24A1FC190(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_24A1FC1AC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_24A1FC204;
  return sub_24A216194();
}

uint64_t sub_24A1FC204(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 48) = a1;
  return swift_task_switch();
}

uint64_t sub_24A1FC280()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  type metadata accessor for all_audio2audio_encoder_ig2pOutput();
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A1FC2C4(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  id v5;
  uint64_t v6;

  type metadata accessor for all_audio2audio_encoder_ig2pInput();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = a1;
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 136);
  v5 = a1;
  v6 = v4(v3);
  swift_release();
  return v6;
}

uint64_t sub_24A1FC33C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = v1;
  v4 = sub_24A135F88(&qword_25790C778);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v16 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v16 - v9, a1, v4);
  sub_24A16D544(0, (unint64_t *)&qword_25790C780);
  v11(v8, (uint64_t)v10, v4);
  sub_24A18C9D0();
  v12 = sub_24A2160E0();
  type metadata accessor for all_audio2audio_encoder_ig2pInput();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v12;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 136))(v13);
  swift_release();
  return v14;
}

void sub_24A1FC484(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22[2];

  v22[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_24A135F88(&qword_25790C820);
    sub_24A2163F8();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_24A2165B4();
  }
  v6 = objc_allocWithZone(MEMORY[0x24BDBFF58]);
  sub_24A135F88(&qword_25790C820);
  v7 = (void *)sub_24A215E94();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v6, sel_initWithFeatureProviderArray_, v7);

  v9 = *(void **)(v2 + 16);
  v22[0] = 0;
  v10 = objc_msgSend(v9, sel_predictionsFromBatch_options_error_, v8, a2, v22);
  v11 = v22[0];
  if (v10)
  {
    v12 = v10;
    v22[0] = (id)MEMORY[0x24BEE4AF8];
    if (v5)
    {
      swift_bridgeObjectRetain();
      v16 = v11;
      v13 = sub_24A216410();
      swift_bridgeObjectRelease();
    }
    else
    {
      v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      v14 = v11;
    }
    sub_24A18C774(v13, 0);
    sub_24A215EB8();
    v17 = (unint64_t)objc_msgSend(v12, sel_count);
    if ((v17 & 0x8000000000000000) != 0)
      __break(1u);
    v18 = v17;
    if (v17)
    {
      v19 = 0;
      do
      {
        v20 = objc_msgSend(v12, sel_featuresAtIndex_, v19);
        type metadata accessor for all_audio2audio_encoder_ig2pOutput();
        *(_QWORD *)(swift_allocObject() + 16) = v20;
        swift_unknownObjectRetain();
        v21 = swift_retain();
        MEMORY[0x24BD09750](v21);
        if (*(_QWORD *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8)
                                                                                               + 0x18) >> 1)
          sub_24A215ED0();
        ++v19;
        sub_24A215F0C();
        sub_24A215EB8();
        swift_release();
        swift_unknownObjectRelease();
      }
      while (v18 != v19);
    }
    swift_unknownObjectRelease();

  }
  else
  {
    v15 = v22[0];
    sub_24A2156F0();

    swift_willThrow();
  }
}

uint64_t sub_24A1FC758(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;

  v3 = v2;
  sub_24A135F88(&qword_25790C790);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24A218660;
  *(_QWORD *)(inited + 32) = 0x343834315F726176;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  v7 = (void *)objc_opt_self();
  v8 = objc_msgSend(v7, sel_featureValueWithMultiArray_, a1);
  v9 = sub_24A16D544(0, &qword_25790C798);
  *(_QWORD *)(inited + 48) = v8;
  *(_QWORD *)(inited + 72) = v9;
  *(_QWORD *)(inited + 80) = 0x3836315F726176;
  *(_QWORD *)(inited + 88) = 0xE700000000000000;
  v10 = objc_msgSend(v7, sel_featureValueWithMultiArray_, a2);
  *(_QWORD *)(inited + 120) = v9;
  *(_QWORD *)(inited + 96) = v10;
  sub_24A18B6F8(inited);
  v11 = objc_allocWithZone(MEMORY[0x24BDBFF88]);
  *(_QWORD *)(v3 + 16) = sub_24A18C690();
  return v3;
}

uint64_t sub_24A1FC8B8()
{
  swift_release();
  return swift_deallocObject();
}

void sub_24A1FC8DC(id a1, char a2)
{
  uint64_t v2;
  void (*v4)(id, uint64_t);
  uint64_t v5;
  id v6;
  id v7;

  v4 = *(void (**)(id, uint64_t))(v2 + 16);
  if ((a2 & 1) != 0)
  {
    v7 = a1;
    v4(a1, 1);
    sub_24A18CC40(a1);
  }
  else
  {
    type metadata accessor for all_audio2audio_encoder_ig2p();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = a1;
    v6 = a1;
    v4((id)v5, 0);
    swift_release();
  }
}

uint64_t type metadata accessor for all_audio2audio_encoder_ig2p()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for all_audio2audio_encoder_ig2pOutput()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for all_audio2audio_encoder_ig2pInput()
{
  return objc_opt_self();
}

uint64_t static VAA2AVerifierModel.maxEnrollments.getter()
{
  return 3;
}

void *sub_24A1FC9C8()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 24);
  v2 = v1;
  return v1;
}

uint64_t VAA2AVerifierModel.__allocating_init(computeUnits:)(unsigned __int8 *a1)
{
  swift_allocObject();
  return VAA2AVerifierModel.init(computeUnits:)(a1);
}

uint64_t VAA2AVerifierModel.init(computeUnits:)(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v3 = v1;
  v5 = type metadata accessor for VASignpostInterval();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = MEMORY[0x24BEE4AF8];
  type metadata accessor for VALog();
  v15 = 0;
  v16 = 0xE000000000000000;
  swift_retain();
  sub_24A216308();
  sub_24A215D98();
  v17 = v8;
  sub_24A2163D4();
  sub_24A215D98();
  static VALog.begin(_:_:)("VoiceActions", 12, 2u, v15, v16, (uint64_t)v7);
  swift_bridgeObjectRelease();
  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBFFE0]), sel_init);
  v10 = v9;
  if (v8)
    v11 = 3;
  else
    v11 = 0;
  objc_msgSend(v9, sel_setComputeUnits_, v11);
  type metadata accessor for _3enrollments_quant_all_verifier_aa();
  v12 = v10;
  v13 = sub_24A18B9F8(v12);
  if (v2)
  {

    sub_24A136064((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for VASignpostInterval);
    swift_release();
    swift_bridgeObjectRelease();
    type metadata accessor for VAA2AVerifierModel();
    return swift_deallocPartialClassInstance();
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v13;
    swift_release();
    VASignpostInterval.end(_:)((Swift::String_optional)0);

    sub_24A136064((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for VASignpostInterval);
    return sub_24A180204();
  }
}

uint64_t type metadata accessor for VAA2AVerifierModel()
{
  return objc_opt_self();
}

void sub_24A1FCCA4(uint64_t a1@<X0>, char **a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  _QWORD *v17;
  _QWORD *v18;
  id v19;
  id i;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  id v27;
  _QWORD *v28;
  void *v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  uint64_t v45;
  id v46;
  unint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  void *v50;
  float v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  id v78;
  id v79;
  id v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t (*v84)(void);
  uint64_t (*v85)(void);
  char **v86;
  uint64_t *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  char *v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD v95[2];
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char **v100;
  char v101;
  unsigned __int8 v102;
  char v103;

  v6 = v2;
  v9 = type metadata accessor for VASingleEnrollmentData();
  v10 = *(_QWORD **)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x24BD09BE8](0, a1);
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_40;
    }
    v4 = *(_QWORD *)(a1 + 32);
    swift_unknownObjectRetain();
  }
  objc_opt_self();
  v13 = swift_dynamicCastObjCClass();
  if (!v13)
  {
    swift_unknownObjectRelease();
    sub_24A14C404();
    swift_allocError();
    *v18 = 0xD00000000000001ELL;
    v18[1] = 0x800000024A223A40;
    swift_willThrow();
    return;
  }
  v5 = (_QWORD *)v13;
  v91 = v12;
  v92 = v10;
  v93 = v9;
  sub_24A135F88(&qword_25790BE68);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_24A21AA60;
  sub_24A170EC0();
  *(_QWORD *)(v14 + 32) = sub_24A2161B8();
  v95[0] = v14;
  sub_24A215EB8();
  v15 = v95[0];
  v16 = objc_allocWithZone(MEMORY[0x24BDBFFF8]);
  v17 = sub_24A17F3CC(v15, 65568);
  if (v3)
  {
    swift_unknownObjectRelease();
    return;
  }
  v10 = v17;
  v90 = v6;
  v88 = 0;
  v19 = objc_msgSend(v5, sel_shape);
  v9 = sub_24A215EA0();

  if ((v9 & 0xC000000000000001) != 0)
    goto LABEL_41;
  if (!*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_43;
  }
  for (i = *(id *)(v9 + 32); ; i = (id)MEMORY[0x24BD09BE8](0, v9))
  {
    v21 = i;
    swift_bridgeObjectRelease();
    objc_msgSend(v10, sel_setObject_atIndexedSubscript_, v21, 0);

    v22 = v90;
    v23 = (*(uint64_t (**)(void))(*(_QWORD *)v90 + 168))();
    if (!v23)
    {
      static VAVerifierModelOutput.none.getter((uint64_t *)a2);
      swift_unknownObjectRelease();

      return;
    }
    v24 = (void *)v23;
    v25 = (*(uint64_t (**)(void))(*(_QWORD *)v22 + 192))();
    if (!v25)
    {
      static VAVerifierModelOutput.none.getter((uint64_t *)a2);
      swift_unknownObjectRelease();

      return;
    }
    v26 = (void *)v25;
    v87 = (uint64_t *)a2;
    type metadata accessor for _3enrollments_quant_all_verifier_aaInput();
    swift_unknownObjectRetain();
    v27 = v24;
    v28 = v10;
    v29 = v27;
    v30 = v28;
    v31 = v26;
    v5 = sub_24A190004((uint64_t)v5, (uint64_t)v29, (uint64_t)v30, (uint64_t)v31);
    v32 = (*(uint64_t (**)(void))(*(_QWORD *)v22 + 144))();
    v33 = v88;
    v34 = (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v32 + 136))(v5);
    v88 = v33;
    if (v33)
    {
      swift_unknownObjectRelease();

      swift_release();
      swift_release();
      return;
    }
    a2 = (char **)v34;
    v79 = v31;
    v80 = v30;
    v78 = v29;
    v35 = swift_release();
    v84 = *(uint64_t (**)(void))(*(_QWORD *)v22 + 216);
    v19 = *(id *)(((uint64_t (*)(uint64_t))v84)(v35) + 16);
    v36 = swift_bridgeObjectRelease();
    v85 = (uint64_t (*)(void))*((_QWORD *)*a2 + 11);
    v37 = (void *)((uint64_t (*)(uint64_t))v85)(v36);
    v38 = objc_msgSend(v37, sel_shape);

    v9 = sub_24A215EA0();
    v86 = a2;
    if ((v9 & 0xC000000000000001) != 0)
      break;
    v39 = v80;
    v40 = v79;
    if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v41 = *(id *)(v9 + 32);
      goto LABEL_20;
    }
    __break(1u);
LABEL_45:
    v46 = (id)MEMORY[0x24BD09BE8](0, v9);
    v45 = v90;
LABEL_24:
    swift_bridgeObjectRelease();
    v47 = (unint64_t)objc_msgSend(v46, a2[293]);

    if ((v47 & 0x8000000000000000) != 0)
      goto LABEL_47;
    v48 = v87;
    if (!v47)
    {
      v94 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_36:
      type metadata accessor for VAKeywordResult();
      v77 = VAKeywordResult.__allocating_init(detections:)((uint64_t)v94);
      sub_24A1CE3A0(v77, v48);
      swift_release();
      swift_release();

      goto LABEL_37;
    }
    v49 = 0;
    v94 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v83 = v4;
    v82 = v5;
    v81 = v47;
    while (1)
    {
      v50 = (void *)v85();
      v10 = objc_msgSend(v50, sel_objectAtIndexedSubscript_, v49);

      objc_msgSend(v10, sel_floatValue);
      v52 = v51;

      v9 = v45;
      v53 = v84();
      if (v49 >= *(_QWORD *)(v53 + 16))
        break;
      v54 = (uint64_t)v91;
      sub_24A1A85E8(v53+ ((*((unsigned __int8 *)v92 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v92 + 80))+ v92[9] * v49, (uint64_t)v91);
      swift_bridgeObjectRelease();
      v55 = (uint64_t *)(v54 + *(int *)(v93 + 24));
      v56 = *v55;
      v57 = v55[1];
      swift_bridgeObjectRetain();
      sub_24A136064(v54, (uint64_t (*)(_QWORD))type metadata accessor for VASingleEnrollmentData);
      v58 = sub_24A1DF918();
      v59 = sub_24A1DF918();
      v60 = sub_24A1DF920();
      v61 = sub_24A1DF920();
      v62 = sub_24A1516F0();
      v63 = sub_24A1516F0();
      v64 = sub_24A162F28();
      sub_24A1DF928(v56, v57, v60, v61, v62 & 1, v63 & 1, v64 & 1, (uint64_t)v95, v52, v58, v59);
      v65 = v95[0];
      v66 = v95[1];
      v67 = v96;
      v68 = v97;
      v69 = v98;
      v70 = v99;
      a2 = v100;
      v71 = v101;
      v89 = v102;
      v72 = v103;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v94 = sub_24A17B434(0, v94[2] + 1, 1, v94);
      v74 = v94[2];
      v73 = v94[3];
      if (v74 >= v73 >> 1)
        v94 = sub_24A17B434((_QWORD *)(v73 > 1), v74 + 1, 1, v94);
      ++v49;
      v75 = v94;
      v94[2] = v74 + 1;
      v76 = &v75[8 * v74];
      v76[4] = v65;
      v76[5] = v66;
      *((_DWORD *)v76 + 12) = v67;
      v76[7] = v68;
      v76[8] = v69;
      v76[9] = v70;
      v76[10] = a2;
      *((_BYTE *)v76 + 88) = v71;
      *((_BYTE *)v76 + 89) = v89;
      *((_BYTE *)v76 + 90) = v72;
      v4 = v83;
      v48 = v87;
      v45 = v90;
      v5 = v82;
      if (v81 == v49)
        goto LABEL_36;
    }
LABEL_40:
    __break(1u);
LABEL_41:
    ;
  }
LABEL_43:
  v41 = (id)MEMORY[0x24BD09BE8](0, v9);
  v39 = v80;
  v40 = v79;
LABEL_20:
  swift_bridgeObjectRelease();
  a2 = &selRef_copy;
  v42 = objc_msgSend(v41, sel_integerValue);

  if (v19 != v42)
  {
    static VAVerifierModelOutput.none.getter(v87);
    swift_release();
    swift_release();

LABEL_37:
    swift_unknownObjectRelease();
    return;
  }
  v43 = (void *)v85();
  v44 = objc_msgSend(v43, sel_shape);

  v9 = sub_24A215EA0();
  if ((v9 & 0xC000000000000001) != 0)
    goto LABEL_45;
  v45 = v90;
  if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v46 = *(id *)(v9 + 32);
    goto LABEL_24;
  }
  __break(1u);
LABEL_47:
  __break(1u);
}

uint64_t sub_24A1FD48C()
{
  return 3;
}

void sub_24A1FD494()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_24A1FD4C0()
{
  uint64_t v0;

  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t VAA2AVerifierModel.deinit()
{
  uint64_t v0;

  v0 = VAVerifierModel.deinit();
  swift_release();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VAA2AVerifierModel.__deallocating_deinit()
{
  uint64_t v0;

  v0 = VAVerifierModel.deinit();
  swift_release();

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_24A1FD57C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> VAA2AVerifierModel.setAudioEnrollments(enrollments:)(Swift::OpaquePointer enrollments)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  id v33;
  double v34;
  id v35;
  void *v36;
  BOOL v37;
  void (*v38)(id);
  id v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v3 = v2;
  v5 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 224);
  v6 = swift_bridgeObjectRetain();
  v5(v6);
  v7 = *((_QWORD *)enrollments._rawValue + 2);
  if (!v7)
  {
    __break(1u);
    goto LABEL_23;
  }
  v8 = type metadata accessor for VASingleEnrollmentData();
  v43 = *(_QWORD *)(v8 - 8);
  v44 = v8;
  v42 = (char *)enrollments._rawValue
      + ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80));
  v9 = *(_QWORD *)&v42[*(int *)(v8 + 20)];
  v46 = *(_QWORD *)(v9 + 16);
  if (!v46)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  v41 = v1;
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 16);
  sub_24A135F88(&qword_25790BE68);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_24A21AA60;
  *(_QWORD *)(v11 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, v7);
  sub_24A215EB8();
  v12 = objc_allocWithZone(MEMORY[0x24BDBFFF8]);
  v13 = sub_24A17F3CC(v11, 65568);
  if (!v3)
  {
    v47 = v10;
    v14 = (*(uint64_t (**)(id))(*(_QWORD *)v1 + 200))(v13);
    v15 = 0;
    v16 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 192);
    v45 = v7;
    while (1)
    {
      v17 = v16(v14);
      if (!v17)
        goto LABEL_24;
      v18 = (void *)v17;
      v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, v46);
      objc_msgSend(v18, sel_setObject_atIndexedSubscript_, v19, v15);

      if (v45 == ++v15)
      {
        v20 = swift_allocObject();
        *(_OWORD *)(v20 + 16) = xmmword_24A21AA40;
        *(_QWORD *)(v20 + 32) = sub_24A216074();
        *(_QWORD *)(v20 + 40) = sub_24A216074();
        v21 = v10;
        *(_QWORD *)(v20 + 48) = sub_24A216074();
        sub_24A215EB8();
        v22 = objc_allocWithZone(MEMORY[0x24BDBFFF8]);
        v23 = sub_24A17F3CC(v20, 65568);
        v24 = 0;
LABEL_10:
        v25 = 0;
        v26 = v24;
        v40 = v24 + 1;
        while (!v21)
        {
LABEL_11:
          if (++v25 == v46)
          {
            v24 = v40;
            if (v40 == v45)
              goto LABEL_21;
            goto LABEL_10;
          }
        }
        v27 = 0;
        v28 = *(_QWORD *)&v42[*(_QWORD *)(v43 + 72) * v26 + *(int *)(v44 + 20)];
        while (1)
        {
          v29 = swift_allocObject();
          *(_OWORD *)(v29 + 16) = xmmword_24A21AA40;
          *(_QWORD *)(v29 + 32) = sub_24A216074();
          *(_QWORD *)(v29 + 40) = sub_24A216074();
          *(_QWORD *)(v29 + 48) = sub_24A216074();
          sub_24A215EB8();
          if (v25 >= *(_QWORD *)(v28 + 16))
            break;
          v30 = *(_QWORD *)(v28 + 32 + 8 * v25);
          if (v27 >= *(_QWORD *)(v30 + 16))
            goto LABEL_20;
          v31 = v27 + 1;
          v32 = *(_DWORD *)(v30 + 4 * v27 + 32);
          v33 = objc_allocWithZone(MEMORY[0x24BDD16E0]);
          LODWORD(v34) = v32;
          v35 = objc_msgSend(v33, sel_initWithFloat_, v34);
          sub_24A170EC0();
          v36 = (void *)sub_24A215E94();
          swift_bridgeObjectRelease();
          objc_msgSend(v23, sel_setObject_forKeyedSubscript_, v35, v36);

          v27 = v31;
          v37 = v47 == v31;
          v21 = v47;
          if (v37)
            goto LABEL_11;
        }
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        v38 = *(void (**)(id))(*(_QWORD *)v41 + 176);
        v39 = v23;
        v38(v23);

        return;
      }
    }
  }
}

void sub_24A1FD96C(Swift::OpaquePointer a1)
{
  VAA2AVerifierModel.setAudioEnrollments(enrollments:)(a1);
}

uint64_t method lookup function for VAA2AVerifierModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAA2AVerifierModel.__allocating_init(computeUnits:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of VAA2AVerifierModel.predict(predictionInput:shouldSkipVerifierInference:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of VAA2AVerifierModel.maxKeywords.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t sub_24A1FD9D8()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 104);
}

uint64_t sub_24A1FDA08(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 104) = a1;
  return result;
}

uint64_t sub_24A1FDA44()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t sub_24A1FDA78(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 120) = a1;
  return swift_release();
}

uint64_t sub_24A1FDABC()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t sub_24A1FDAF0(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 128) = a1;
  return swift_release();
}

double sub_24A1FDB34()
{
  uint64_t v0;

  swift_beginAccess();
  return *(double *)(v0 + 136);
}

uint64_t sub_24A1FDB64(double a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(double *)(v1 + 136) = a1;
  return result;
}

uint64_t sub_24A1FDBA0()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 144);
}

uint64_t sub_24A1FDBD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 144) = a1;
  return result;
}

uint64_t sub_24A1FDC0C()
{
  uint64_t v0;

  swift_beginAccess();
  return MEMORY[0x24BD0AB54](v0 + 160);
}

uint64_t sub_24A1FDC50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 168) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*sub_24A1FDCB0(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  v4 = MEMORY[0x24BD0AB54](v1 + 160);
  v5 = *(_QWORD *)(v1 + 168);
  v3[3] = v4;
  v3[4] = v5;
  return sub_24A1FDD1C;
}

void sub_24A1FDD1C(uint64_t a1, char a2)
{
  void *v3;

  v3 = *(void **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 168) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t sub_24A1FDD8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC12VoiceActions17VAStrategyDefault_lastActivated;
  swift_beginAccess();
  return sub_24A1F0D04(v3, a1);
}

uint64_t sub_24A1FDDDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC12VoiceActions17VAStrategyDefault_lastActivated;
  swift_beginAccess();
  sub_24A1F0DA4(a1, v3);
  return swift_endAccess();
}

uint64_t (*sub_24A1FDE34())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A1FDE78(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v8;

  swift_allocObject();
  v8 = sub_24A1FEE80(a1, a2, a3, a4);
  swift_unknownObjectRelease();

  return v8;
}

uint64_t sub_24A1FDEEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  float v17;
  int v18;
  char v19;
  char v20;
  uint64_t v21;
  char v22;
  char v23;
  int v24;
  char v25;
  __int16 v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  float v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint8_t *v42;
  uint8_t *v43;
  uint64_t (*v44)(char *, uint64_t);
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t ObjectType;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  __int128 v71;
  char v72;
  uint64_t v73;
  char v74;
  char v75;
  int v76;
  char v77;
  __int128 v78;
  __int16 v79;
  char v80;
  char v81;
  char v82;
  char v83;
  char v84;
  double v85;

  v2 = v1;
  v4 = sub_24A215A8C();
  v68 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&ObjectType - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v66 = (char *)&ObjectType - v9;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v67 = (char *)&ObjectType - v11;
  v12 = *(unsigned __int8 *)(v1 + 29);
  if (v12 == 1)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 344))(v10);
    if (v10)
    {
      v14 = v13;
      ObjectType = swift_getObjectType();
      v69 = 0x203A746C75736552;
      v70 = 0xE800000000000000;
      (*(void (**)(void))(*(_QWORD *)a1 + 160))();
      v65 = v4;
      sub_24A215D98();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v14 + 8))(v69, v70, ObjectType, v14);
      v4 = v65;
      swift_bridgeObjectRelease();
      v10 = swift_unknownObjectRelease();
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 144))(&v69, v10);
  v15 = v70;
  if (!v70)
  {
    v37 = sub_24A1B9D90();
    v38 = v68;
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v7, v37, v4);
    v39 = sub_24A215A74();
    v40 = sub_24A2160F8();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = v4;
      v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v42 = 0;
      _os_log_impl(&dword_24A12D000, v39, v40, "Did not find a detection in StrategyLayerDefault:handleKeywordResult", v42, 2u);
      v43 = v42;
      v4 = v41;
      MEMORY[0x24BD0AAAC](v43, -1, -1);
    }

    v44 = *(uint64_t (**)(char *, uint64_t))(v38 + 8);
    v45 = v7;
    return v44(v45, v4);
  }
  v16 = v69;
  v17 = *(float *)&v71;
  v18 = *(_DWORD *)(v1 + 24);
  v19 = *(_BYTE *)(v1 + 28);
  v20 = *(_BYTE *)(v1 + 48);
  v21 = *(_QWORD *)(v1 + 56);
  v22 = *(_BYTE *)(v1 + 64);
  v23 = *(_BYTE *)(v1 + 65);
  v24 = *(_DWORD *)(v1 + 68);
  v25 = *(_BYTE *)(v1 + 72);
  v26 = *(_WORD *)(v1 + 96);
  v27 = *(_BYTE *)(v1 + 98);
  v28 = *(_BYTE *)(v1 + 99);
  v29 = *(_BYTE *)(v1 + 100);
  v30 = *(_BYTE *)(v1 + 101);
  v31 = *(_BYTE *)(v1 + 102);
  v69 = *(_QWORD *)(v1 + 16);
  LODWORD(v70) = v18;
  BYTE4(v70) = v19;
  BYTE5(v70) = v12;
  v71 = *(_OWORD *)(v1 + 32);
  v72 = v20;
  v73 = v21;
  v74 = v22;
  v75 = v23;
  v76 = v24;
  v77 = v25;
  v78 = *(_OWORD *)(v1 + 80);
  v79 = v26;
  v80 = v27;
  v81 = v28;
  v82 = v29;
  v83 = v30;
  v84 = v31;
  v32 = VARuntimeParameters.keywordsToThresholds.getter();
  if (!*(_QWORD *)(v32 + 16))
  {
LABEL_27:
    result = swift_bridgeObjectRelease();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRetain();
  v33 = sub_24A148970(v16, v15);
  if ((v34 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  v35 = *(float *)(*(_QWORD *)(v32 + 56) + 4 * v33);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v35 > v17)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD))(*(_QWORD *)v2 + 232))(0);
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 256))(0);
  }
  if ((sub_24A1FE5E4(a1) & 1) != 0)
  {
    if (v12)
    {
      v46 = sub_24A1B9D90();
      v48 = v67;
      v47 = v68;
      (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v67, v46, v4);
      swift_bridgeObjectRetain_n();
      v49 = sub_24A215A74();
      v50 = sub_24A2160F8();
      if (os_log_type_enabled(v49, v50))
      {
        v51 = swift_slowAlloc();
        v52 = swift_slowAlloc();
        v69 = v52;
        *(_DWORD *)v51 = 136315394;
        swift_bridgeObjectRetain();
        v85 = COERCE_DOUBLE(sub_24A148270(v16, v15, &v69));
        sub_24A216260();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v51 + 12) = 2048;
        v85 = v17;
        sub_24A216260();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_24A12D000, v49, v50, "Ignoring repeated result in consecutive stride:%s %f", (uint8_t *)v51, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x24BD0AAAC](v52, -1, -1);
        MEMORY[0x24BD0AAAC](v51, -1, -1);

        return (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v67, v4);
      }
LABEL_25:

      swift_bridgeObjectRelease_n();
      v44 = *(uint64_t (**)(char *, uint64_t))(v47 + 8);
      v45 = v48;
      return v44(v45, v4);
    }
    return swift_bridgeObjectRelease();
  }
  if ((sub_24A1FE884() & 1) != 0)
  {
    if (v12)
    {
      v53 = sub_24A1B9D90();
      v47 = v68;
      v48 = v66;
      (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v66, v53, v4);
      swift_bridgeObjectRetain_n();
      v49 = sub_24A215A74();
      v54 = sub_24A2160F8();
      if (os_log_type_enabled(v49, v54))
      {
        v55 = swift_slowAlloc();
        v56 = swift_slowAlloc();
        v69 = v56;
        *(_DWORD *)v55 = 136315394;
        swift_bridgeObjectRetain();
        v85 = COERCE_DOUBLE(sub_24A148270(v16, v15, &v69));
        sub_24A216260();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v55 + 12) = 2048;
        v85 = v17;
        sub_24A216260();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_24A12D000, v49, v54, "Debounce without speech detector: Ignoring %s %f", (uint8_t *)v55, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x24BD0AAAC](v56, -1, -1);
        MEMORY[0x24BD0AAAC](v55, -1, -1);

        return (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v66, v4);
      }
      goto LABEL_25;
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v57 = mach_absolute_time();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 208))(v57);
  v58 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 232);
  v59 = swift_retain();
  v60 = v58(v59);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 344))(v60);
  if (result)
  {
    v62 = v61;
    v63 = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16))(a1, v63, v62);
    return swift_unknownObjectRelease();
  }
  return result;
}

unint64_t sub_24A1FE5E4(uint64_t a1)
{
  _QWORD **v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t result;
  double v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  void (*v28)(uint64_t);
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = sub_24A215A8C();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 144))(&v32, v5);
  v9 = v33;
  if (!v33)
  {
    v24 = sub_24A1B9D90();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v24, v3);
    v25 = sub_24A215A74();
    v26 = sub_24A2160F8();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_24A12D000, v25, v26, "No keyword detected when StrategyLayerDefault.isRepeatedKeywordInConsecutiveStride called", v27, 2u);
      MEMORY[0x24BD0AAAC](v27, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    goto LABEL_13;
  }
  v10 = v32;
  v11 = ((uint64_t (*)(_QWORD *))(*v1)[31])(v8);
  if (!v11)
  {
    swift_bridgeObjectRelease();
    v28 = (void (*)(uint64_t))(*v1)[32];
    v29 = swift_retain();
    v28(v29);
LABEL_13:
    v23 = 0;
    return v23 & 1;
  }
  v12 = v11;
  type metadata accessor for VARequestContext();
  v13 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 264))();
  v14 = (*(uint64_t (**)(void))(*(_QWORD *)v12 + 264))();
  v15 = v13 >= v14;
  result = v13 - v14;
  if (!v15)
  {
    __break(1u);
    return result;
  }
  v17 = sub_24A165E68(result);
  if (v17 == (*(double (**)(void))((*MEMORY[0x24BEE4EA0] & *v1[19]) + 0x1A8))())
  {
    v18 = (uint64_t (*)(uint64_t, uint64_t))(*v1)[53];
    v19 = v18(v10, v9);
    v21 = v20;
    if (v19 == v18(v10, v9) && v21 == v22)
      v23 = 1;
    else
      v23 = sub_24A21659C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v23 = 0;
  }
  swift_bridgeObjectRelease();
  v30 = (void (*)(uint64_t))(*v1)[32];
  v31 = swift_retain();
  v30(v31);
  swift_release();
  return v23 & 1;
}

uint64_t sub_24A1FE884()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  int v19;
  uint64_t v20;
  uint64_t result;
  void (*v22)(char *, uint64_t);
  _QWORD v23[2];

  v1 = v0;
  v2 = sub_24A2163A4();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_24A135F88(&qword_257912728);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)v23 - v11;
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)v23 - v14;
  if ((*(_BYTE *)(v0 + 48) & 1) == 0)
  {
    v16 = *(_QWORD *)(v0 + 32);
    v23[0] = *(_QWORD *)(v0 + 40);
    v23[1] = v16;
    v17 = *(void (**)(uint64_t))(*(_QWORD *)v0 + 368);
    v17(v13);
    v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48);
    v19 = v18(v15, 1, v2);
    sub_24A1F1E7C((uint64_t)v15);
    if (v19 != 1)
    {
      v20 = sub_24A21638C();
      v17(v20);
      result = v18(v12, 1, v2);
      if ((_DWORD)result == 1)
      {
        __break(1u);
        return result;
      }
      sub_24A216398();
      v22 = *(void (**)(char *, uint64_t))(v3 + 8);
      v22(v5, v2);
      v22(v12, v2);
      if ((sub_24A216698() & 1) == 0)
        return 1;
    }
    sub_24A21638C();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v9, 0, 1, v2);
    (*(void (**)(char *))(*(_QWORD *)v1 + 376))(v9);
  }
  return 0;
}

uint64_t sub_24A1FEA8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = sub_24A215690();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[0] = a1;
  v10[1] = a2;
  sub_24A215648();
  sub_24A14C688();
  v8 = sub_24A21629C();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

void sub_24A1FEB44()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_24A1FEB70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  sub_24A152354(v0 + 160);
  sub_24A1F1E7C(v0 + OBJC_IVAR____TtC12VoiceActions17VAStrategyDefault_lastActivated);
  v1 = v0 + OBJC_IVAR____TtC12VoiceActions17VAStrategyDefault_clock;
  v2 = sub_24A2163BC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

uint64_t sub_24A1FEBF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = VAStrategyLayer.deinit();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  sub_24A152354(v0 + 160);
  sub_24A1F1E7C(v0 + OBJC_IVAR____TtC12VoiceActions17VAStrategyDefault_lastActivated);
  v1 = v0 + OBJC_IVAR____TtC12VoiceActions17VAStrategyDefault_clock;
  v2 = sub_24A2163BC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_24A1FEC90()
{
  sub_24A1FEBF8();
  return swift_deallocClassInstance();
}

uint64_t VAStrategyProviderDefault.__allocating_init(strideConfig:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t VAStrategyProviderDefault.init(strideConfig:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t sub_24A1FECEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v27;
  int v28;
  char v29;
  char v30;
  __int128 v31;
  char v32;
  uint64_t v33;
  char v34;
  char v35;
  int v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;

  v6 = *(_DWORD *)(a3 + 8);
  v7 = *(_BYTE *)(a3 + 12);
  v8 = *(_BYTE *)(a3 + 13);
  v9 = *(_BYTE *)(a3 + 32);
  v10 = *(_QWORD *)(a3 + 40);
  v11 = *(_BYTE *)(a3 + 48);
  v12 = *(_BYTE *)(a3 + 49);
  v13 = *(_DWORD *)(a3 + 52);
  v14 = *(_BYTE *)(a3 + 56);
  v15 = *(_QWORD *)(a3 + 64);
  v16 = *(_QWORD *)(a3 + 72);
  v17 = *(_WORD *)(a3 + 80);
  v18 = *(_BYTE *)(a3 + 82);
  v19 = *(_BYTE *)(a3 + 83);
  v20 = *(_BYTE *)(a3 + 84);
  v21 = *(_BYTE *)(a3 + 85);
  v22 = *(_BYTE *)(a3 + 86);
  v27 = *(_QWORD *)a3;
  v28 = v6;
  v29 = v7;
  v30 = v8;
  v31 = *(_OWORD *)(a3 + 16);
  v32 = v9;
  v33 = v10;
  v34 = v11;
  v35 = v12;
  v36 = v13;
  v37 = v14;
  v38 = v15;
  v39 = v16;
  v40 = v17;
  v41 = v18;
  v42 = v19;
  v43 = v20;
  v44 = v21;
  v45 = v22;
  v23 = *(void **)(v3 + 16);
  type metadata accessor for VAStrategyDefault();
  swift_allocObject();
  swift_bridgeObjectRetain();
  v24 = v23;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v25 = sub_24A1FEE80(a1, a2, &v27, v24);
  swift_unknownObjectRelease();

  return v25;
}

uint64_t VAStrategyProviderDefault.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t VAStrategyProviderDefault.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t sub_24A1FEE58()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 96))();
}

uint64_t sub_24A1FEE80(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;

  v38 = a1;
  v39 = a4;
  v37 = a2;
  v6 = sub_24A2163BC();
  v40 = *(_QWORD *)(v6 - 8);
  v41 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a3;
  v10 = *((_DWORD *)a3 + 2);
  v11 = *((_BYTE *)a3 + 12);
  v12 = *((_BYTE *)a3 + 13);
  v13 = a3[2];
  v14 = a3[3];
  v15 = *((_BYTE *)a3 + 32);
  v36 = a3[5];
  v16 = *((unsigned __int8 *)a3 + 48);
  v34 = *((unsigned __int8 *)a3 + 49);
  v35 = v16;
  v17 = *((_DWORD *)a3 + 13);
  v33 = *((unsigned __int8 *)a3 + 56);
  v18 = a3[8];
  v31 = a3[9];
  v32 = v18;
  LODWORD(v18) = *((unsigned __int16 *)a3 + 40);
  v29 = *((unsigned __int8 *)a3 + 82);
  v30 = v18;
  LODWORD(v18) = *((unsigned __int8 *)a3 + 83);
  v27 = *((unsigned __int8 *)a3 + 84);
  v28 = v18;
  LODWORD(v18) = *((unsigned __int8 *)a3 + 85);
  v25 = *((unsigned __int8 *)a3 + 86);
  v26 = v18;
  *(_QWORD *)(v4 + 168) = 0;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  swift_unknownObjectWeakInit();
  v19 = v4 + OBJC_IVAR____TtC12VoiceActions17VAStrategyDefault_lastActivated;
  v20 = sub_24A2163A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  swift_beginAccess();
  *(_QWORD *)(v4 + 168) = v37;
  swift_unknownObjectWeakAssign();
  *(_QWORD *)(v4 + 16) = v9;
  *(_DWORD *)(v4 + 24) = v10;
  *(_BYTE *)(v4 + 28) = v11;
  *(_BYTE *)(v4 + 29) = v12;
  *(_QWORD *)(v4 + 32) = v13;
  *(_QWORD *)(v4 + 40) = v14;
  *(_BYTE *)(v4 + 48) = v15;
  *(_QWORD *)(v4 + 56) = v36;
  *(_BYTE *)(v4 + 64) = v35;
  *(_BYTE *)(v4 + 65) = v34;
  *(_DWORD *)(v4 + 68) = v17;
  *(_BYTE *)(v4 + 72) = v33;
  v21 = v31;
  *(_QWORD *)(v4 + 80) = v32;
  *(_QWORD *)(v4 + 88) = v21;
  *(_WORD *)(v4 + 96) = v30;
  *(_BYTE *)(v4 + 98) = v29;
  *(_BYTE *)(v4 + 99) = v28;
  *(_BYTE *)(v4 + 100) = v27;
  *(_BYTE *)(v4 + 101) = v26;
  *(_BYTE *)(v4 + 102) = v25;
  v22 = v39;
  *(_QWORD *)(v4 + 152) = v39;
  swift_retain();
  v23 = v22;
  sub_24A2163B0();
  (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v4 + OBJC_IVAR____TtC12VoiceActions17VAStrategyDefault_clock, v8, v41);
  swift_release();
  return sub_24A180204();
}

uint64_t type metadata accessor for VAStrategyDefault()
{
  uint64_t result;

  result = qword_25791D220;
  if (!qword_25791D220)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_24A1FF0E4()
{
  return type metadata accessor for VAStrategyDefault();
}

void sub_24A1FF0EC()
{
  unint64_t v0;
  unint64_t v1;

  sub_24A1F1FA8();
  if (v0 <= 0x3F)
  {
    sub_24A2163BC();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for VAStrategyProviderDefault()
{
  return objc_opt_self();
}

uint64_t method lookup function for VAStrategyProviderDefault()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAStrategyProviderDefault.__allocating_init(strideConfig:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of VAStrategyProviderDefault.getStrategy(delegate:params:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

const char *sub_24A1FF1F8()
{
  return "VAD_ANE.e5";
}

uint64_t static VAConfiguration.defaultVADFilename.getter()
{
  return 0x2E454E415F444156;
}

void *sub_24A1FF220()
{
  return &unk_251B9F488;
}

unint64_t static VAConfiguration.defaultVisionKWSModelFilename.getter()
{
  return 0xD000000000000017;
}

void *sub_24A1FF248()
{
  return &unk_251B9F498;
}

unint64_t static VAConfiguration.defaultVisionKWSModelConfigFilename.getter()
{
  return 0xD000000000000023;
}

id sub_24A1FF270()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR____TtC12VoiceActions15VAConfiguration_strideConfig);
  swift_beginAccess();
  return *v1;
}

void sub_24A1FF2B4(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtC12VoiceActions15VAConfiguration_strideConfig);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

void *sub_24A1FF304()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC12VoiceActions15VAConfiguration_fixedConfig);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void sub_24A1FF350(void *a1)
{
  sub_24A19F1FC(a1, &OBJC_IVAR____TtC12VoiceActions15VAConfiguration_fixedConfig);
}

uint64_t sub_24A1FF35C()
{
  return sub_24A1ED380();
}

uint64_t sub_24A1FF368(uint64_t a1)
{
  return sub_24A1ED3D0(a1, &OBJC_IVAR____TtC12VoiceActions15VAConfiguration_tasrConfig);
}

void *sub_24A1FF374()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC12VoiceActions15VAConfiguration_resultGeneratorConfig);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void sub_24A1FF3C0(void *a1)
{
  sub_24A19F1FC(a1, &OBJC_IVAR____TtC12VoiceActions15VAConfiguration_resultGeneratorConfig);
}

uint64_t sub_24A1FF3CC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC12VoiceActions15VAConfiguration_vadModelFilename);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_24A1FF420(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC12VoiceActions15VAConfiguration_vadModelFilename);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A1FF47C()
{
  return sub_24A1ED380();
}

uint64_t sub_24A1FF488(uint64_t a1)
{
  return sub_24A1ED3D0(a1, &OBJC_IVAR____TtC12VoiceActions15VAConfiguration_speechAPISpotterConfig);
}

id static VAConfiguration.buildForFlexibleA2A()()
{
  return sub_24A1FFA94((uint64_t (*)(void))static VAStrideConfiguration.forFlexibleA2A());
}

id sub_24A1FF4A0(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  objc_class *v5;
  id v11;
  id v12;

  v11 = objc_allocWithZone(v5);
  v12 = sub_24A200A8C(a1, a2, a3, a4, a5);

  return v12;
}

uint64_t type metadata accessor for VAConfiguration()
{
  return objc_opt_self();
}

id static VAConfiguration.buildForFlexibleA2Av2()()
{
  return sub_24A1FF584(static VAStrideConfiguration.forFlexibleA2Av2(), (uint64_t (*)(void))static VAResultGeneratorConfiguration.buildForFlexibleSpotter());
}

id static VAConfiguration.buildForFlexibleA2Av3()()
{
  return sub_24A1FF584(static VAStrideConfiguration.forFlexibleA2Av3(), static VAResultGeneratorConfiguration.buildForA2AV3());
}

id static VAConfiguration.buildForFlexibleA2T()()
{
  return sub_24A1FF584((uint64_t (*)(void))static VAStrideConfiguration.forFlexibleA2T(), (uint64_t (*)(void))static VAResultGeneratorConfiguration.buildForFlexibleSpotter());
}

id static VAConfiguration.buildForFlexibleA2Tv2()()
{
  return sub_24A1FF584(static VAStrideConfiguration.forFlexibleA2Tv2(), (uint64_t (*)(void))static VAResultGeneratorConfiguration.buildForFlexibleSpotter());
}

id sub_24A1FF584(uint64_t (*a1)(void), uint64_t (*a2)(void))
{
  void *v4;
  void *v5;
  id v6;
  id v7;

  type metadata accessor for VAStrideConfiguration();
  v4 = (void *)a1();
  type metadata accessor for VAResultGeneratorConfiguration();
  v5 = (void *)a2();
  v6 = objc_allocWithZone((Class)type metadata accessor for VAConfiguration());
  v7 = sub_24A200A8C(v4, 0, v5, 0x2E454E415F444156, 0xEA00000000003565);

  return v7;
}

id static VAConfiguration.buildForTasr(tasrConfig:)()
{
  id v0;
  uint64_t v1;
  id v2;

  v0 = objc_allocWithZone((Class)type metadata accessor for VAConfiguration());
  v1 = swift_retain();
  v2 = sub_24A200BC8(v1);
  swift_release();
  return v2;
}

id sub_24A1FF65C(uint64_t a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = sub_24A200BC8(a1);
  swift_release();
  return v4;
}

id static VAConfiguration.buildForSpeechAPISpotter(speechAPISpotterConfig:)(uint64_t a1)
{
  objc_class *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  id v7;
  objc_super v9;

  v2 = (objc_class *)type metadata accessor for VAConfiguration();
  v3 = (char *)objc_allocWithZone(v2);
  *(_QWORD *)&v3[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_fixedConfig] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_tasrConfig] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_resultGeneratorConfig] = 0;
  v4 = &v3[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_vadModelFilename];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v5 = &v3[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_speechAPISpotterConfig];
  *(_QWORD *)&v3[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_speechAPISpotterConfig] = 0;
  swift_beginAccess();
  *(_QWORD *)v5 = a1;
  swift_retain_n();
  v6 = v3;
  swift_release();
  type metadata accessor for VAStrideConfiguration();
  *(_QWORD *)&v6[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_strideConfig] = static VAStrideConfiguration.forSpeechAPIConfig()();

  v9.receiver = v6;
  v9.super_class = v2;
  v7 = objc_msgSendSuper2(&v9, sel_init);
  swift_release();
  return v7;
}

id sub_24A1FF7A0(uint64_t a1)
{
  objc_class *v1;
  objc_class *v2;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  id v8;
  objc_super v10;

  v2 = v1;
  v4 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v4[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_fixedConfig] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_tasrConfig] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_resultGeneratorConfig] = 0;
  v5 = &v4[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_vadModelFilename];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  v6 = &v4[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_speechAPISpotterConfig];
  *(_QWORD *)&v4[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_speechAPISpotterConfig] = 0;
  swift_beginAccess();
  *(_QWORD *)v6 = a1;
  v7 = v4;
  swift_retain();
  swift_release();
  type metadata accessor for VAStrideConfiguration();
  *(_QWORD *)&v7[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_strideConfig] = static VAStrideConfiguration.forSpeechAPIConfig()();

  v10.receiver = v7;
  v10.super_class = v2;
  v8 = objc_msgSendSuper2(&v10, sel_init);
  swift_release();
  return v8;
}

_QWORD *static VAConfiguration.buildForFixedWithCustomModel(modelFilepath:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  _QWORD *v6;
  id v7;
  id v8;
  id v9;
  id v10;

  type metadata accessor for VAFixedSpotterModelConfiguration();
  result = static VAFixedSpotterModelConfiguration.buildForFixedA2T(modelFilepath:modelConfigJsonFilepath:)(a1, a2, 0, 0);
  if (!v2)
  {
    v6 = result;
    type metadata accessor for VAStrideConfiguration();
    v7 = static VAStrideConfiguration.forFixedA2T(modelConfig:)(v6);
    type metadata accessor for VAResultGeneratorConfiguration();
    v8 = static VAResultGeneratorConfiguration.buildForFixedSpotter(fixedConfig:waitFrames:)(v6, 1);
    v9 = objc_allocWithZone((Class)type metadata accessor for VAConfiguration());
    v10 = sub_24A200A8C(v7, v6, v8, 0x2E454E415F444156, 0xEA00000000003565);

    return v10;
  }
  return result;
}

_QWORD *static VAConfiguration.buildForFixedVCWakeupRuntime()()
{
  return sub_24A1FF9B8(1);
}

_QWORD *static VAConfiguration.buildForFixedVCWakeupEval()()
{
  return sub_24A1FF9B8(3);
}

_QWORD *sub_24A1FF9B8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *result;
  _QWORD *v4;
  id v5;
  id v6;
  id v7;
  id v8;

  type metadata accessor for VAFixedSpotterModelConfiguration();
  result = static VAFixedSpotterModelConfiguration.buildForFixedA2TDefault()();
  if (!v1)
  {
    v4 = result;
    type metadata accessor for VAStrideConfiguration();
    v5 = static VAStrideConfiguration.forFixedA2T(modelConfig:)(v4);
    type metadata accessor for VAResultGeneratorConfiguration();
    v6 = static VAResultGeneratorConfiguration.buildForFixedSpotter(fixedConfig:waitFrames:)(v4, a1);
    v7 = objc_allocWithZone((Class)type metadata accessor for VAConfiguration());
    v8 = sub_24A200A8C(v5, v4, v6, 0x2E454E415F444156, 0xEA00000000003565);

    return v8;
  }
  return result;
}

id static VAConfiguration.buildForFlexibleAVS()()
{
  return sub_24A1FFA94((uint64_t (*)(void))static VAStrideConfiguration.forFlexibleAVS());
}

id sub_24A1FFA94(uint64_t (*a1)(void))
{
  void *v2;
  id v3;
  id v4;

  type metadata accessor for VAStrideConfiguration();
  v2 = (void *)a1();
  v3 = objc_allocWithZone((Class)type metadata accessor for VAConfiguration());
  v4 = sub_24A200A8C(v2, 0, 0, 0, 0);

  return v4;
}

unint64_t static VAConfiguration.buildFromConfigFile(jsonFile:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  unint64_t *v4;
  unint64_t v6;
  char v7;

  type metadata accessor for VAConfiguration();
  v1 = sub_24A164A60(&qword_257913750, v0, (uint64_t (*)(uint64_t))type metadata accessor for VAConfiguration, (uint64_t)&protocol conformance descriptor for VAConfiguration);
  sub_24A17D140(v1, &v6);
  v2 = v6;
  if ((v7 & 1) != 0)
  {
    if (v6 == 0x8000000000000000)
    {
      sub_24A216308();
      swift_bridgeObjectRelease();
      sub_24A215D98();
      v2 = 0x800000024A2220E0;
      sub_24A14C404();
      swift_allocError();
      *v3 = 0xD000000000000023;
      v3[1] = 0x800000024A2220E0;
    }
    else
    {
      sub_24A14D2EC();
      swift_allocError();
      *v4 = v2;
    }
    swift_willThrow();
  }
  return v2;
}

_QWORD *static VAConfiguration.buildForFixedBreakthrough()()
{
  uint64_t v0;
  _QWORD *result;
  _QWORD *v2;
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;

  type metadata accessor for VAFixedSpotterModelConfiguration();
  result = static VAFixedSpotterModelConfiguration.buildForFixedA2TBreakthrough()();
  if (!v0)
  {
    v2 = result;
    type metadata accessor for VAStrideConfiguration();
    v3 = static VAStrideConfiguration.forFixedA2T(modelConfig:)(v2);
    type metadata accessor for VAResultGeneratorConfiguration();
    v4 = sub_24A162F28();
    v5 = static VAResultGeneratorConfiguration.buildForFixedSpotter(fixedConfig:waitFrames:)(v2, v4);
    v6 = objc_allocWithZone((Class)type metadata accessor for VAConfiguration());
    v7 = sub_24A200A8C(v3, v2, v5, 0x2E454E415F444156, 0xEA00000000003565);

    return v7;
  }
  return result;
}

_QWORD *sub_24A1FFCF4()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *result;
  void *v3;
  char v4;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  result = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
  if (result)
  {
    v3 = result;
    v4 = (*(uint64_t (**)(void))((*v1 & *result) + 0xD8))();

    return (_QWORD *)(v4 & 1);
  }
  return result;
}

_QWORD *sub_24A1FFD50()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *result;
  void *v3;
  char v4;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  result = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
  if (result)
  {
    v3 = result;
    v4 = (*(uint64_t (**)(void))((*v1 & *result) + 0xF0))();

    return (_QWORD *)(v4 & 1);
  }
  return result;
}

uint64_t sub_24A1FFDAC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24A1FFDE4 + 4 * byte_24A21FBA0[*v0]))(0x6F43656469727473, 0xEC0000006769666ELL);
}

uint64_t sub_24A1FFDE4()
{
  return 0x6E6F436465786966;
}

unint64_t sub_24A1FFE04()
{
  return 0xD000000000000015;
}

unint64_t sub_24A1FFE28()
{
  return 0xD000000000000010;
}

uint64_t sub_24A1FFE44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24A2010B4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A1FFE68()
{
  sub_24A200CE8();
  return sub_24A2166A4();
}

uint64_t sub_24A1FFE90()
{
  sub_24A200CE8();
  return sub_24A2166B0();
}

uint64_t VAConfiguration.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return VAConfiguration.init(from:)(a1);
}

uint64_t VAConfiguration.init(from:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  id v12;
  char *v13;
  id *v14;
  id *v15;
  char *v16;
  void **v17;
  uint64_t v18;
  void **v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  objc_class *v28;
  _QWORD v29[2];
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  id *v35;
  char *v36;
  char *v37;
  objc_super v38;
  void *v39;
  void *v40;
  uint64_t v41;
  id *v42;

  v3 = v1;
  v5 = sub_24A135F88(&qword_257913758);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = (id *)&v3[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_fixedConfig];
  *(_QWORD *)&v3[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_fixedConfig] = 0;
  v32 = OBJC_IVAR____TtC12VoiceActions15VAConfiguration_tasrConfig;
  *(_QWORD *)&v3[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_tasrConfig] = 0;
  v34 = a1;
  v35 = (id *)&v3[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_resultGeneratorConfig];
  *v35 = 0;
  v9 = &v3[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_vadModelFilename];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  v36 = v9;
  v33 = OBJC_IVAR____TtC12VoiceActions15VAConfiguration_speechAPISpotterConfig;
  *(_QWORD *)&v3[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_speechAPISpotterConfig] = 0;
  sub_24A14B668(a1, a1[3]);
  sub_24A200CE8();
  v37 = v3;
  sub_24A216674();
  if (v2)
  {
    v12 = v36;
    v13 = v37;
    v14 = v42;
    sub_24A14D184((uint64_t)v34);
    v15 = v35;

    swift_release();
    swift_bridgeObjectRelease();

    swift_release();
    type metadata accessor for VAConfiguration();
    swift_deallocPartialClassInstance();
    return (uint64_t)v12;
  }
  v10 = v6;
  type metadata accessor for VAStrideConfiguration();
  LOBYTE(v40) = 0;
  sub_24A164A60(&qword_257913760, 255, (uint64_t (*)(uint64_t))type metadata accessor for VAStrideConfiguration, (uint64_t)&protocol conformance descriptor for VAStrideConfiguration);
  result = sub_24A2164B8();
  v30 = v8;
  v31 = v5;
  v16 = v37;
  v17 = v42;
  if (v41)
  {
    v18 = OBJC_IVAR____TtC12VoiceActions15VAConfiguration_strideConfig;
    *(_QWORD *)&v37[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_strideConfig] = v41;
    type metadata accessor for VAFixedSpotterModelConfiguration();
    LOBYTE(v41) = 1;
    sub_24A164A60(&qword_2579108E0, 255, (uint64_t (*)(uint64_t))type metadata accessor for VAFixedSpotterModelConfiguration, (uint64_t)&protocol conformance descriptor for VAFixedSpotterModelConfiguration);
    sub_24A2164B8();
    v19 = v35;
    v29[1] = v18;
    v20 = v40;
    swift_beginAccess();
    v21 = *v17;
    *v17 = v20;

    type metadata accessor for VAResultGeneratorConfiguration();
    LOBYTE(v40) = 2;
    sub_24A164A60(&qword_25790AE68, 255, (uint64_t (*)(uint64_t))type metadata accessor for VAResultGeneratorConfiguration, (uint64_t)&protocol conformance descriptor for VAResultGeneratorConfiguration);
    sub_24A2164B8();
    v22 = v39;
    swift_beginAccess();
    v23 = *v19;
    *v19 = v22;

    LOBYTE(v39) = 3;
    result = sub_24A216488();
    if (v24)
    {
      v25 = result;
      v26 = v24;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v30, v31);
      v27 = (uint64_t *)v36;
      swift_beginAccess();
      *v27 = v25;
      v27[1] = v26;

      swift_bridgeObjectRelease();
      v28 = (objc_class *)type metadata accessor for VAConfiguration();
      v38.receiver = v16;
      v38.super_class = v28;
      v12 = objc_msgSendSuper2(&v38, sel_init);
      sub_24A14D184((uint64_t)v34);
      return (uint64_t)v12;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_24A20030C(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v3 = v1;
  v5 = sub_24A135F88(&qword_257913768);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A14B668(a1, a1[3]);
  sub_24A200CE8();
  v9 = sub_24A21668C();
  v10 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v11 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v3) + 0x80))(v9);
  v17 = (uint64_t)v11;
  v19 = 0;
  type metadata accessor for VAStrideConfiguration();
  sub_24A164A60(&qword_257913770, 255, (uint64_t (*)(uint64_t))type metadata accessor for VAStrideConfiguration, (uint64_t)&protocol conformance descriptor for VAStrideConfiguration);
  sub_24A216560();
  if (v2)
  {

  }
  else
  {

    v12 = (void *)(*(uint64_t (**)(void))((*v10 & *v3) + 0x98))();
    v17 = (uint64_t)v12;
    v19 = 1;
    sub_24A135F88(&qword_257913778);
    sub_24A200D2C();
    sub_24A216560();

    v13 = (void *)(*(uint64_t (**)(void))((*v10 & *v3) + 0xC8))();
    v17 = (uint64_t)v13;
    v19 = 2;
    sub_24A135F88(&qword_257913788);
    sub_24A200DAC();
    sub_24A216560();

    v17 = (*(uint64_t (**)(void))((*v10 & *v3) + 0xE0))();
    v18 = v14;
    v19 = 3;
    sub_24A135F88(&qword_257909980);
    sub_24A200E2C();
    sub_24A216560();
    swift_bridgeObjectRelease();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_24A2005F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  sub_24A164A60(&qword_257913750, a2, (uint64_t (*)(uint64_t))type metadata accessor for VAConfiguration, (uint64_t)&protocol conformance descriptor for VAConfiguration);
  v2 = sub_24A2006B4();
  v3 = v2;
  v5 = v4;
  if ((v6 & 1) != 0)
  {
    if (v2 == 0x8000000000000000)
    {
      return 0xD00000000000001CLL;
    }
    else
    {
      sub_24A2163D4();
      sub_24A1649E8(v3, v5, 1);
      return 0;
    }
  }
  return v3;
}

uint64_t sub_24A2006B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v0 = sub_24A215CFC();
  MEMORY[0x24BDAC7A8](v0);
  v1 = sub_24A2155F4();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCB2A8];
  MEMORY[0x24BDAC7A8](v1);
  sub_24A215624();
  swift_allocObject();
  sub_24A215618();
  sub_24A135F88(&qword_25790AE80);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_24A218660;
  sub_24A2155E8();
  sub_24A2155DC();
  sub_24A164A60(&qword_25790AE88, 255, v2, MEMORY[0x24BDCB2C8]);
  sub_24A135F88(&qword_25790AE90);
  sub_24A164A14();
  sub_24A2162D8();
  sub_24A215600();
  type metadata accessor for VAConfiguration();
  sub_24A164A60(&qword_2579137A0, v3, (uint64_t (*)(uint64_t))type metadata accessor for VAConfiguration, (uint64_t)&protocol conformance descriptor for VAConfiguration);
  v4 = sub_24A21560C();
  v6 = v5;
  sub_24A215CF0();
  v7 = sub_24A215CCC();
  if (v8)
  {
    v9 = v7;
    sub_24A135F1C(v4, v6);
    swift_release();
  }
  else
  {
    sub_24A135F1C(v4, v6);
    swift_release();
    return 0;
  }
  return v9;
}

id VAConfiguration.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void VAConfiguration.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id VAConfiguration.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VAConfiguration();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_24A200A28@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 312))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t sub_24A200A54()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0x140))();
}

id sub_24A200A8C(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  void **v11;
  void **v12;
  char *v13;
  void *v14;
  char *v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  objc_super v21;

  v11 = (void **)&v5[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_fixedConfig];
  *(_QWORD *)&v5[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_fixedConfig] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_tasrConfig] = 0;
  v12 = (void **)&v5[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_resultGeneratorConfig];
  *(_QWORD *)&v5[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_resultGeneratorConfig] = 0;
  v13 = &v5[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_vadModelFilename];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_speechAPISpotterConfig] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_strideConfig] = a1;
  swift_beginAccess();
  v14 = *v11;
  *v11 = a2;
  v15 = v5;
  v16 = a1;
  v17 = a2;

  swift_beginAccess();
  v18 = *v12;
  *v12 = a3;
  v19 = a3;

  swift_beginAccess();
  *(_QWORD *)v13 = a4;
  *((_QWORD *)v13 + 1) = a5;

  swift_bridgeObjectRelease();
  v21.receiver = v15;
  v21.super_class = (Class)type metadata accessor for VAConfiguration();
  return objc_msgSendSuper2(&v21, sel_init);
}

id sub_24A200BC8(uint64_t a1)
{
  char *v1;
  char *v3;
  uint64_t *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  objc_super v11;

  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_fixedConfig] = 0;
  v3 = &v1[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_tasrConfig];
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_tasrConfig] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_resultGeneratorConfig] = 0;
  v4 = (uint64_t *)&v1[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_vadModelFilename];
  *v4 = 0;
  v4[1] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_speechAPISpotterConfig] = 0;
  swift_beginAccess();
  *(_QWORD *)v3 = a1;
  v5 = v1;
  swift_retain();
  v6 = swift_release();
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(v6);
  v9 = v8;
  swift_beginAccess();
  *v4 = v7;
  v4[1] = v9;
  swift_bridgeObjectRelease();
  type metadata accessor for VAStrideConfiguration();
  *(_QWORD *)&v5[OBJC_IVAR____TtC12VoiceActions15VAConfiguration_strideConfig] = static VAStrideConfiguration.forTasrConfig(tasrConfig:)();

  v11.receiver = v5;
  v11.super_class = (Class)type metadata accessor for VAConfiguration();
  return objc_msgSendSuper2(&v11, sel_init);
}

unint64_t sub_24A200CE8()
{
  unint64_t result;

  result = qword_25791D230[0];
  if (!qword_25791D230[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21FD04, &type metadata for VAConfiguration.CodingKeys);
    atomic_store(result, qword_25791D230);
  }
  return result;
}

unint64_t sub_24A200D2C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_257913780;
  if (!qword_257913780)
  {
    v1 = sub_24A139148(&qword_257913778);
    v2 = sub_24A164A60(&qword_2579108E8, 255, (uint64_t (*)(uint64_t))type metadata accessor for VAFixedSpotterModelConfiguration, (uint64_t)&protocol conformance descriptor for VAFixedSpotterModelConfiguration);
    result = MEMORY[0x24BD0A9EC](MEMORY[0x24BEE4AA8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_257913780);
  }
  return result;
}

unint64_t sub_24A200DAC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_257913790;
  if (!qword_257913790)
  {
    v1 = sub_24A139148(&qword_257913788);
    v2 = sub_24A164A60(&qword_25790AEA0, 255, (uint64_t (*)(uint64_t))type metadata accessor for VAResultGeneratorConfiguration, (uint64_t)&protocol conformance descriptor for VAResultGeneratorConfiguration);
    result = MEMORY[0x24BD0A9EC](MEMORY[0x24BEE4AA8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_257913790);
  }
  return result;
}

unint64_t sub_24A200E2C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_257913798;
  if (!qword_257913798)
  {
    v1 = sub_24A139148(&qword_257909980);
    v2 = MEMORY[0x24BEE0D08];
    result = MEMORY[0x24BD0A9EC](MEMORY[0x24BEE4AA8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_257913798);
  }
  return result;
}

uint64_t method lookup function for VAConfiguration()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAConfiguration.preSilenceCheckEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of VAConfiguration.postSilenceCheckEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of VAConfiguration.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 312))();
}

uint64_t dispatch thunk of VAConfiguration.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x140))();
}

uint64_t storeEnumTagSinglePayload for VAConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_24A200F5C + 4 * byte_24A21FBA9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_24A200F90 + 4 * byte_24A21FBA4[v4]))();
}

uint64_t sub_24A200F90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A200F98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A200FA0);
  return result;
}

uint64_t sub_24A200FAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A200FB4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_24A200FB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A200FC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VAConfiguration.CodingKeys()
{
  return &type metadata for VAConfiguration.CodingKeys;
}

unint64_t sub_24A200FE0()
{
  unint64_t result;

  result = qword_25791D440[0];
  if (!qword_25791D440[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21FCDC, &type metadata for VAConfiguration.CodingKeys);
    atomic_store(result, qword_25791D440);
  }
  return result;
}

unint64_t sub_24A201028()
{
  unint64_t result;

  result = qword_25791D550;
  if (!qword_25791D550)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21FC4C, &type metadata for VAConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25791D550);
  }
  return result;
}

unint64_t sub_24A201070()
{
  unint64_t result;

  result = qword_25791D558[0];
  if (!qword_25791D558[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21FC74, &type metadata for VAConfiguration.CodingKeys);
    atomic_store(result, qword_25791D558);
  }
  return result;
}

uint64_t sub_24A2010B4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6F43656469727473 && a2 == 0xEC0000006769666ELL;
  if (v2 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F436465786966 && a2 == 0xEB00000000676966 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000024A226080 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000024A222050)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_24A21659C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

void sub_24A201428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_24A201780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_24A201BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_24A202754(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD *WeakRetained;
  id obj;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD v22[5];
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    objc_msgSend(*(id *)(a1 + 32), "tokens");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16A8], "stringWithString:", &stru_251B9F998);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    obj = v2;
    v4 = 0;
    v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v18, v28, 16);
    if (v5)
    {
      v6 = *(_QWORD *)v19;
      do
      {
        v7 = 0;
        v8 = v4;
        do
        {
          if (*(_QWORD *)v19 != v6)
            objc_enumerationMutation(obj);
          v9 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * v7);
          if (v8 && objc_msgSend(v8, "hasSpaceAfter"))
            objc_msgSend(v3, "appendString:", CFSTR(" "));
          v23 = 0;
          v24 = &v23;
          v25 = 0x2050000000;
          v10 = (void *)qword_25791D638;
          v26 = qword_25791D638;
          if (!qword_25791D638)
          {
            v22[0] = MEMORY[0x24BDAC760];
            v22[1] = 3221225472;
            v22[2] = sub_24A202A24;
            v22[3] = &unk_251B9F6B8;
            v22[4] = &v23;
            sub_24A202A24((uint64_t)v22);
            v10 = (void *)v24[3];
          }
          v11 = objc_retainAutorelease(v10);
          _Block_object_dispose(&v23, 8);
          objc_msgSend(v9, "tokenName");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "hatToQsrString:", v12);
          v13 = (void *)objc_claimAutoreleasedReturnValue();

          if (v13)
            objc_msgSend(v3, "appendString:", v13);
          v4 = v9;

          ++v7;
          v8 = v4;
        }
        while (v5 != v7);
        v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v18, v28, 16);
      }
      while (v5);
    }

    v27 = *(_QWORD *)(a1 + 32);
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v27, 1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    +[VATSpeechRecognitionResult resultWithResults:locale:modelVersion:isFinal:](VATSpeechRecognitionResult, "resultWithResults:locale:modelVersion:isFinal:", v14, WeakRetained[14], WeakRetained[13], 0);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(WeakRetained, "_recognizedResult:error:", v15, 0);
  }

}

void sub_24A202A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_24A202A24(uint64_t a1)
{
  sub_24A202A90();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("_EARTransformUtil");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_25791D638 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    sub_24A202A90();
  }
}

void sub_24A202A90()
{
  void *v0;

  if (!qword_25791D600)
  {
    qword_25791D600 = _sl_dlopen();
    if (!qword_25791D600)
    {
      v0 = (void *)abort_report_np();
      free(v0);
    }
  }
}

void sub_24A202B4C(id *a1)
{
  id *WeakRetained;
  id *v3;
  id v4;
  id v5;
  id *v6;

  WeakRetained = (id *)objc_loadWeakRetained(a1 + 6);
  v3 = WeakRetained;
  if (!*((_BYTE *)WeakRetained + 24))
  {
    v6 = WeakRetained;
    if (objc_msgSend(WeakRetained[1], "detectUtterances"))
    {
      *((_BYTE *)v6 + 24) = 1;
      objc_msgSend(a1[4], "cancelRecognition");
      +[VATSpeechRecognitionResult resultWithPackage:locale:modelVersion:isFinal:](VATSpeechRecognitionResult, "resultWithPackage:locale:modelVersion:isFinal:", a1[5], v6[14], v6[13], 1);
      v4 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[4], "_recognizedResult:error:", v4, 0);
    }
    else
    {
      v5 = a1[5];
      v4 = v6[4];
      v6[4] = v5;
    }

    v3 = v6;
  }

}

void sub_24A202BFC(uint64_t a1)
{
  _QWORD *WeakRetained;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v14[2];
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = (void *)WeakRetained[2];
    WeakRetained[2] = 0;

    if (!*((_BYTE *)v3 + 24))
    {
      v5 = v3[4];
      if (v5
        && (+[VATSpeechRecognitionResult resultWithPackage:locale:modelVersion:isFinal:](VATSpeechRecognitionResult, "resultWithPackage:locale:modelVersion:isFinal:", v5, v3[14], v3[13], 1), (v6 = objc_claimAutoreleasedReturnValue()) != 0))
      {
        v7 = (void *)v6;
        v8 = *(_QWORD *)(a1 + 32);
      }
      else
      {
        v8 = *(_QWORD *)(a1 + 32);
        if (!v8)
        {
          v9 = (void *)MEMORY[0x24BDD1540];
          v10 = *MEMORY[0x24BDD0FD8];
          v14[0] = *MEMORY[0x24BDD0FC8];
          v14[1] = v10;
          v15[0] = CFSTR("Empty recognition");
          v15[1] = CFSTR("No speech recognized");
          objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v15, v14, 2);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "errorWithDomain:code:userInfo:", CFSTR("VoiceActions"), -1001, v11);
          v12 = (void *)objc_claimAutoreleasedReturnValue();

          +[VATSpeechRecognitionResult emptyResultWithLocale:isFinal:](VATSpeechRecognitionResult, "emptyResultWithLocale:isFinal:", v3[14], 1);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 40), "_recognizedResult:error:", v13, v12);

          goto LABEL_10;
        }
        v7 = 0;
      }
      objc_msgSend(v3, "_recognizedResult:error:", v7, v8);

    }
  }
LABEL_10:

}

double sub_24A202D7C()
{
  double result;
  unint64_t v1;

  if (!mach_timebase_info((mach_timebase_info_t)&dword_25791D628))
  {
    LODWORD(result) = dword_25791D628;
    LODWORD(v1) = *(_DWORD *)algn_25791D62C;
    result = (double)*(unint64_t *)&result / (double)v1 / 1000000000.0;
    qword_25791D620 = *(_QWORD *)&result;
  }
  return result;
}

void sub_24A202DCC(uint64_t a1)
{
  id *WeakRetained;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained[2], "triggerServerSideEndPointer");

}

void sub_24A202DFC(uint64_t a1)
{
  id *WeakRetained;
  id v2;
  id *v3;

  WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    objc_msgSend(WeakRetained[1], "cancelRecognition");
    objc_msgSend(v3[2], "endAudio");
    v2 = v3[2];
    v3[2] = 0;

    WeakRetained = v3;
  }

}

void sub_24A202E50(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    *((double *)WeakRetained + 8) = (double)mach_absolute_time();
    objc_msgSend(*((id *)WeakRetained + 2), "endAudio");
  }

}

void sub_24A202E94(uint64_t a1)
{
  double *WeakRetained;
  id *v3;

  WeakRetained = (double *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = (id *)WeakRetained;
    if (WeakRetained[6] == 0.0)
      WeakRetained[6] = (double)mach_absolute_time();
    objc_msgSend(v3[2], "addAudioSampleData:", *(_QWORD *)(a1 + 32));
    WeakRetained = (double *)v3;
  }

}

void sub_24A202EF8(uint64_t a1)
{
  int *WeakRetained;
  int *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD v16[3202];

  v16[3201] = *MEMORY[0x24BDAC8D0];
  WeakRetained = (int *)objc_loadWeakRetained((id *)(a1 + 56));
  v3 = WeakRetained;
  if (WeakRetained && !*((_QWORD *)WeakRetained + 2))
  {
    v4 = (void *)*((_QWORD *)WeakRetained + 4);
    *((_QWORD *)WeakRetained + 4) = 0;

    *((_BYTE *)v3 + 24) = 1;
    v5 = _Block_copy(*(const void **)(a1 + 48));
    v6 = (void *)*((_QWORD *)v3 + 15);
    *((_QWORD *)v3 + 15) = v5;

    objc_msgSend(*((id *)v3 + 1), "setDetectUtterances:", *(unsigned __int8 *)(a1 + 64));
    objc_msgSend(*((id *)v3 + 1), "setConcatenateUtterances:", 0);
    bzero(v16, 0x3200uLL);
    objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", v16, 6400);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = *(_QWORD *)objc_msgSend(*(id *)(a1 + 32), "int16ChannelData");
    v9 = 2 * objc_msgSend(*(id *)(a1 + 32), "frameLength");
    v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCE50]), "initWithBytesNoCopy:length:freeWhenDone:", v8, v9, 0);
    objc_msgSend(MEMORY[0x24BDBCEC8], "dataWithData:", v7);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "appendData:", v10);
    objc_msgSend(v11, "appendData:", v7);
    objc_msgSend(*(id *)(a1 + 40), "setAudioDataWithInjectedSilence:", v11);
    *((double *)v3 + 8) = (double)mach_absolute_time();
    v12 = *(void **)(*(_QWORD *)(a1 + 40) + 8);
    objc_msgSend(*((id *)v3 + 14), "localeIdentifier");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "recognitionResultsWithAudioData:userProfileData:language:task:samplingRate:extraLanguageModel:", v11, 0, v13, *((_QWORD *)v3 + 10), v3[22], 0);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    +[VATSpeechRecognitionResult resultWithResults:locale:modelVersion:isFinal:](VATSpeechRecognitionResult, "resultWithResults:locale:modelVersion:isFinal:", v14, *((_QWORD *)v3 + 14), *((_QWORD *)v3 + 13), 1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "_recognizedResult:error:", v15, 0);

  }
}

void sub_24A2030FC(uint64_t a1)
{
  int *WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  int *v10;

  WeakRetained = (int *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && !*((_QWORD *)WeakRetained + 2))
  {
    v3 = (void *)*((_QWORD *)WeakRetained + 4);
    *((_QWORD *)WeakRetained + 4) = 0;
    v10 = WeakRetained;

    *((_BYTE *)v10 + 24) = 0;
    v4 = _Block_copy(*(const void **)(a1 + 32));
    v5 = (void *)*((_QWORD *)v10 + 15);
    *((_QWORD *)v10 + 15) = v4;

    objc_msgSend(*((id *)v10 + 1), "setDetectUtterances:", *(unsigned __int8 *)(a1 + 48));
    objc_msgSend(*((id *)v10 + 1), "setConcatenateUtterances:", 0);
    v6 = (void *)*((_QWORD *)v10 + 1);
    objc_msgSend(*((id *)v10 + 14), "localeIdentifier");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "runRecognitionWithResultStream:language:task:samplingRate:", v10, v7, *((_QWORD *)v10 + 10), v10[22]);
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = (void *)*((_QWORD *)v10 + 2);
    *((_QWORD *)v10 + 2) = v8;

    WeakRetained = v10;
  }

}

Class sub_24A2031E4(uint64_t a1)
{
  Class result;
  uint64_t v3;

  sub_24A202A90();
  result = objc_getClass("_EARFormatter");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_25791D608 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return (Class)sub_24A203250(v3);
  }
  return result;
}

Class sub_24A203250(uint64_t a1)
{
  Class result;
  uint64_t v3;

  sub_24A202A90();
  result = objc_getClass("_EARSpeechRecognitionActiveConfiguration");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_25791D610 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return (Class)sub_24A2032BC(v3);
  }
  return result;
}

Class sub_24A2032BC(uint64_t a1)
{
  Class result;
  uint64_t v3;

  sub_24A202A90();
  result = objc_getClass("_EARSpeechRecognizer");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_25791D618 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return sub_24A203328(v3);
  }
  return result;
}

Class sub_24A203328(uint64_t a1)
{
  Class result;
  uint64_t v3;

  sub_24A202A90();
  result = objc_getClass("_EARSpeechModelInfo");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_25791D5F8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return sub_24A203394(v3);
  }
  return result;
}

Class sub_24A203394(uint64_t a1)
{
  Class result;
  uint64_t v3;

  sub_24A20346C();
  result = objc_getClass("SFEntitledAssetConfig");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_25791D5E0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return (Class)sub_24A203400(v3);
  }
  return result;
}

void sub_24A203400(uint64_t a1)
{
  sub_24A20346C();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("SFEntitledAssetManager");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_25791D5F0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    sub_24A20346C();
  }
}

void sub_24A20346C()
{
  void *v0;

  if (!qword_25791D5E8)
  {
    qword_25791D5E8 = _sl_dlopen();
    if (!qword_25791D5E8)
    {
      v0 = (void *)abort_report_np();
      free(v0);
    }
  }
}

void sub_24A203EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_24A2044A4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_24A2044B4(uint64_t a1)
{

}

void sub_24A2044BC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  FILE *v11;
  id v12;
  void *v13;
  void *v14;
  char v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint8_t v27[128];
  uint8_t buf[4];
  id v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a3);
  if (v9)
  {
    _VATLoggingFacility(kVATLogCategoryFramework);
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v29 = v9;
      _os_log_impl(&dword_24A12D000, v10, OS_LOG_TYPE_INFO, "2nd pass failed, error=%@", buf, 0xCu);
    }

    v11 = (FILE *)*MEMORY[0x24BDAC8D8];
    objc_msgSend(v9, "description");
    v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    fprintf(v11, "2nd pass failed, error=%s\n", (const char *)objc_msgSend(v12, "UTF8String"));

    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  }
  if ((objc_msgSend(v7, "isFinal") & 1) != 0
    || (objc_msgSend(*(id *)(a1 + 40), "configuration"),
        v13 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v13, "secondPass"),
        v14 = (void *)objc_claimAutoreleasedReturnValue(),
        v15 = objc_msgSend(v14, "waitForFinal"),
        v14,
        v13,
        (v15 & 1) == 0))
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    objc_msgSend(v7, "transcriptions");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    if (v17)
    {
      v18 = v17;
      v19 = *(_QWORD *)v24;
      do
      {
        v20 = 0;
        do
        {
          if (*(_QWORD *)v24 != v19)
            objc_enumerationMutation(v16);
          v21 = *(void **)(a1 + 48);
          objc_msgSend(*(id *)(*((_QWORD *)&v23 + 1) + 8 * v20), "formattedString");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "addObject:", v22);

          ++v20;
        }
        while (v18 != v20);
        v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
      }
      while (v18);
    }

    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  }

}

double sub_24A2046FC()
{
  double result;
  unint64_t v1;

  if (!mach_timebase_info((mach_timebase_info_t)&dword_25791D648))
  {
    LODWORD(result) = dword_25791D648;
    LODWORD(v1) = *(_DWORD *)algn_25791D64C;
    result = (double)*(unint64_t *)&result / (double)v1 / 1000000000.0;
    qword_25791D640 = *(_QWORD *)&result;
  }
  return result;
}

double ConvertMachTimeToSeconds(unint64_t a1)
{
  if (qword_25791D650 != -1)
    dispatch_once(&qword_25791D650, &unk_251B9F748);
  return *(double *)&qword_25791D640 * (double)a1;
}

void sub_24A2047FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)VATKeywordSpotter;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_24A204928(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_24A204B44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_24A204E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char *a37)
{
  a37 = &a12;
  sub_24A20E240((void ***)&a37);
  __p = &a34;
  sub_24A20E240((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_24A2050B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_24A2053BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_24A2054CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_24A2058D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_24A205940(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_24A2059A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_24A205A14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_24A205A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_24A205AE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_24A205B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_24A206688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,std::locale a37,uint64_t a38,uint64_t a39,void *a40)
{
  a37.__locale_ = (std::locale::__imp *)&a18;
  sub_24A20E240((void ***)&a37);
  a37.__locale_ = (std::locale::__imp *)&a40;
  sub_24A20E240((void ***)&a37);

  _Unwind_Resume(a1);
}

void sub_24A2079D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char *a33,void *a34,int a35,__int16 a36,char a37,char a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;

  *(_QWORD *)(v43 + 144) = v42;

  a33 = &a29;
  sub_24A209F90((void ***)&a33);
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_24A208358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, void *a16, _Unwind_Exception *exception_object)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  if (v19)
    operator delete(v19);

  _Unwind_Resume(a1);
}

void sub_24A208C48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_24A2099D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27,void *a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  _Unwind_Resume(a1);
}

void sub_24A209D6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_24A209DFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_24A209EE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_24A209F90(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_24A20A04C((uint64_t *)v2);
    operator delete(**a1);
  }
}

uint64_t sub_24A209FD0(uint64_t a1)
{
  void *v2;

  sub_24A20A008(*(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_24A20A008(void **__p)
{
  void **v1;
  void **v2;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = (void **)*v1;
      if (*((char *)v1 + 39) < 0)
        operator delete(v1[2]);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void sub_24A20A04C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 72)
  {
    if (*(char *)(i - 49) < 0)
      operator delete(*(void **)(i - 72));
  }
  a1[1] = v2;
}

void sub_24A20A098()
{
  sub_24A20B758("vector");
}

void *sub_24A20A0AC(unint64_t a1)
{
  if (a1 >> 62)
    sub_24A20B680();
  return operator new(4 * a1);
}

BOOL sub_24A20A0E0(uint64_t a1, int a2, char *a3, char *a4, int a5, int a6, _DWORD *a7, _DWORD *a8, float a9)
{
  unint64_t v9;
  char *v11;
  char *v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  _BOOL8 v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  BOOL v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  int64_t v68;
  char *v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char *i;
  char *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  size_t v93;
  void *v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t *v104;
  char *v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  char *v121;
  char *v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  size_t v127;
  void *v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  _QWORD *k;
  void *v138;
  __int128 v139;
  void *v140;
  uint64_t v141;
  void **v142;
  char *v143;
  char *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  void **v148;
  char *v149;
  char *v150;
  int v151;
  unint64_t v152;
  void **v153;
  char *v154;
  char *v155;
  int64x2_t v156;
  char *v157;
  void **v158;
  char *v159;
  char *v160;
  uint64_t v161;
  int v162;
  __n128 v163;
  uint64_t *v164;
  uint64_t *v165;
  _BYTE *v166;
  _BYTE *v167;
  void **v168;
  _BYTE *v169;
  uint64_t v170;
  uint64_t v171;
  _BYTE *v172;
  uint64_t j;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  int64_t v185;
  char *v186;
  unint64_t v187;
  char *v188;
  uint64_t v189;
  char *v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  void *v196;
  char *v197;
  char *v198;
  uint64_t v199;
  unint64_t v200;
  char *v201;
  char *v202;
  char *v203;
  char **v204;
  char *v205;
  char *v206;
  _QWORD *v207;
  char *v208;
  char *v209;
  _QWORD *v210;
  char *v211;
  char *v212;
  char *v213;
  char **v214;
  char *v215;
  char **v216;
  char *v217;
  char *v218;
  uint64_t *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  int v224;
  unsigned int v225;
  uint64_t v226;
  unint64_t v227;
  int v229;
  uint64_t v230;
  int v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  int v236;
  int v237;
  _DWORD *v238;
  _DWORD *v239;
  int v240;
  unint64_t v241;
  __n128 v242;
  unint64_t v243;
  void *v244;
  __n128 v245;
  __int128 v246;
  uint64_t v247;

  v9 = *(_QWORD *)(a1 + 64);
  if (v9 >= a2)
    __assert_rtn("VerifySilenceAfter", "OnlineFstSpottingDecoder.hpp", 437, "frame_num > speech_frame_offset");
  v11 = a4;
  v12 = a3;
  v14 = a4 - a3;
  if (a4 != a3)
  {
    v15 = *(_QWORD *)(a1 + 40);
    v16 = *(_QWORD *)(a1 + 48);
    v17 = v15 + v16;
    v18 = (v15 + v16) >> 10;
    v20 = *(char **)(a1 + 16);
    v19 = *(char **)(a1 + 24);
    v21 = &v20[8 * v18];
    v22 = v19 - v20;
    if (v19 == v20)
    {
      v23 = 0;
      v26 = 0;
      v24 = v15 >> 10;
      v25 = &v20[8 * (v15 >> 10)];
    }
    else
    {
      v23 = *(_QWORD *)v21 + 4 * (v17 & 0x3FF);
      v24 = v15 >> 10;
      v25 = &v20[8 * (v15 >> 10)];
      v26 = *(_QWORD *)v25 + 4 * (v15 & 0x3FF);
    }
    v241 = v14 >> 2;
    v240 = a6;
    v238 = a7;
    v239 = a8;
    v236 = a2;
    v237 = a5;
    if (v23 == v26)
      v27 = 0;
    else
      v27 = ((v23 - *(_QWORD *)v21) >> 2) + ((v21 - v25) << 7) - ((v26 - *(_QWORD *)v25) >> 2);
    v28 = (_QWORD *)(a1 + 8);
    if (v27 < v16 - v27)
    {
      v29 = v14 >> 2;
      v234 = v27;
      if (v241 > v15)
      {
        v30 = v19 - v20;
        if (v19 == v20)
          v31 = 0;
        else
          v31 = (v22 << 7) - 1;
        if (v19 == v20)
          v32 = v241 - v15 + 1;
        else
          v32 = v241 - v15;
        if ((v32 & 0x3FF) != 0)
          v33 = (v32 >> 10) + 1;
        else
          v33 = v32 >> 10;
        v34 = v31 - v17;
        if (v33 >= v34 >> 10)
          v35 = v34 >> 10;
        else
          v35 = v33;
        if (v33 <= v34 >> 10)
        {
          for (*(_QWORD *)(a1 + 40) = v15 + (v35 << 10); v35; --v35)
          {
            v57 = *(_QWORD *)(a1 + 24);
            v245.n128_u64[0] = *(_QWORD *)(v57 - 8);
            *(_QWORD *)(a1 + 24) = v57 - 8;
            sub_24A20B55C(a1 + 8, &v245);
          }
        }
        else
        {
          v36 = v33 - v35;
          v37 = *(char **)(a1 + 8);
          v38 = *(_QWORD *)(a1 + 32) - (_QWORD)v37;
          if (v33 - v35 <= (v38 >> 3) - (v30 >> 3))
          {
            if (v36)
            {
              v80 = v27;
              if (v20 == v37)
              {
LABEL_79:
                v83 = v36;
                do
                {
                  v245.n128_u64[0] = (unint64_t)operator new(0x1000uLL);
                  sub_24A20B44C((_QWORD *)(a1 + 8), &v245);
                  --v83;
                }
                while (v83);
                v35 += v36;
                v15 = *(_QWORD *)(a1 + 40);
              }
              else
              {
                while (1)
                {
                  v245.n128_u64[0] = (unint64_t)operator new(0x1000uLL);
                  sub_24A20B55C(a1 + 8, &v245);
                  v81 = *(_QWORD *)(a1 + 16);
                  v82 = *(_QWORD *)(a1 + 24) - v81 == 8 ? 1023 : 1024;
                  v15 = v82 + *(_QWORD *)(a1 + 40);
                  *(_QWORD *)(a1 + 40) = v15;
                  if (!--v36)
                    break;
                  if (v81 == *v28)
                    goto LABEL_79;
                }
              }
              v27 = v80;
            }
            for (*(_QWORD *)(a1 + 40) = v15 + (v35 << 10); v35; --v35)
            {
              v84 = *(_QWORD *)(a1 + 24);
              v245.n128_u64[0] = *(_QWORD *)(v84 - 8);
              *(_QWORD *)(a1 + 24) = v84 - 8;
              sub_24A20B55C(a1 + 8, &v245);
            }
          }
          else
          {
            v39 = v19 == v20;
            v40 = v33 << 10;
            if (v38 >> 2 <= v36 + (v30 >> 3))
              v41 = v36 + (v30 >> 3);
            else
              v41 = v38 >> 2;
            v247 = a1 + 32;
            if (v41)
              v41 = (unint64_t)sub_24A20B418(v41);
            else
              v42 = 0;
            v85 = v40 - v39;
            v245.n128_u64[0] = v41;
            v245.n128_u64[1] = v41;
            *(_QWORD *)&v246 = v41;
            *((_QWORD *)&v246 + 1) = v41 + 8 * v42;
            do
            {
              v244 = operator new(0x1000uLL);
              sub_24A20B44C(&v245, &v244);
              --v36;
            }
            while (v36);
            v232 = v85;
            v86 = *(_QWORD *)(a1 + 24);
            for (i = (char *)v246; v35; --v35)
            {
              if (i == *((char **)&v246 + 1))
              {
                v88 = (char *)v245.n128_u64[1];
                v89 = (void *)v245.n128_u64[0];
                if (v245.n128_u64[1] <= v245.n128_u64[0])
                {
                  if (i == (char *)v245.n128_u64[0])
                    v96 = 1;
                  else
                    v96 = (uint64_t)&i[-v245.n128_u64[0]] >> 2;
                  v97 = (char *)sub_24A20B418(v96);
                  v100 = i - v88;
                  v99 = i == v88;
                  i = &v97[8 * (v96 >> 2)];
                  if (!v99)
                  {
                    i = &v97[8 * (v96 >> 2) + (v100 & 0xFFFFFFFFFFFFFFF8)];
                    v101 = 8 * (v100 >> 3);
                    v102 = &v97[8 * (v96 >> 2)];
                    do
                    {
                      v103 = *(_QWORD *)v88;
                      v88 += 8;
                      *(_QWORD *)v102 = v103;
                      v102 += 8;
                      v101 -= 8;
                    }
                    while (v101);
                  }
                  v245.n128_u64[0] = (unint64_t)v97;
                  v245.n128_u64[1] = (unint64_t)&v97[8 * (v96 >> 2)];
                  *(_QWORD *)&v246 = i;
                  *((_QWORD *)&v246 + 1) = &v97[8 * v98];
                  if (v89)
                    operator delete(v89);
                }
                else
                {
                  v90 = (uint64_t)(v245.n128_u64[1] - v245.n128_u64[0]) >> 3;
                  if (v90 >= -1)
                    v91 = v90 + 1;
                  else
                    v91 = v90 + 2;
                  v92 = v245.n128_u64[1] - 8 * (v91 >> 1);
                  v93 = (size_t)&i[-v245.n128_u64[1]];
                  if (i != (char *)v245.n128_u64[1])
                  {
                    v94 = (void *)(v245.n128_u64[1] - 8 * (v91 >> 1));
                    memmove(v94, (const void *)v245.n128_u64[1], v93);
                    v92 = (unint64_t)v94;
                    i = v88;
                  }
                  v95 = (unint64_t)&i[-8 * (v91 >> 1)];
                  i = (char *)(v92 + v93);
                  v245.n128_u64[1] = v95;
                  *(_QWORD *)&v246 = v92 + v93;
                }
              }
              *(_QWORD *)i = *(_QWORD *)(v86 - 8);
              i = (char *)(v246 + 8);
              *(_QWORD *)&v246 = v246 + 8;
              v86 = *(_QWORD *)(a1 + 24) - 8;
              *(_QWORD *)(a1 + 24) = v86;
            }
            v104 = *(uint64_t **)(a1 + 16);
            if (v104 == (uint64_t *)v86)
            {
              v104 = (uint64_t *)v86;
            }
            else
            {
              do
              {
                if (i == *((char **)&v246 + 1))
                {
                  v105 = (char *)v245.n128_u64[1];
                  v106 = (void *)v245.n128_u64[0];
                  if (v245.n128_u64[1] <= v245.n128_u64[0])
                  {
                    if (i == (char *)v245.n128_u64[0])
                      v112 = 1;
                    else
                      v112 = (uint64_t)&i[-v245.n128_u64[0]] >> 2;
                    v113 = (char *)sub_24A20B418(v112);
                    v115 = i - v105;
                    v99 = i == v105;
                    i = &v113[8 * (v112 >> 2)];
                    if (!v99)
                    {
                      i = &v113[8 * (v112 >> 2) + (v115 & 0xFFFFFFFFFFFFFFF8)];
                      v116 = 8 * (v115 >> 3);
                      v117 = &v113[8 * (v112 >> 2)];
                      do
                      {
                        v118 = *(_QWORD *)v105;
                        v105 += 8;
                        *(_QWORD *)v117 = v118;
                        v117 += 8;
                        v116 -= 8;
                      }
                      while (v116);
                    }
                    v245.n128_u64[0] = (unint64_t)v113;
                    v245.n128_u64[1] = (unint64_t)&v113[8 * (v112 >> 2)];
                    *(_QWORD *)&v246 = i;
                    *((_QWORD *)&v246 + 1) = &v113[8 * v114];
                    if (v106)
                      operator delete(v106);
                  }
                  else
                  {
                    v107 = (uint64_t)(v245.n128_u64[1] - v245.n128_u64[0]) >> 3;
                    if (v107 >= -1)
                      v108 = v107 + 1;
                    else
                      v108 = v107 + 2;
                    v109 = v245.n128_u64[1] - 8 * (v108 >> 1);
                    v110 = &i[-v245.n128_u64[1]];
                    if (i != (char *)v245.n128_u64[1])
                    {
                      memmove((void *)(v245.n128_u64[1] - 8 * (v108 >> 1)), (const void *)v245.n128_u64[1], (size_t)&i[-v245.n128_u64[1]]);
                      i = v105;
                    }
                    v111 = (unint64_t)&i[-8 * (v108 >> 1)];
                    i = &v110[v109];
                    v245.n128_u64[1] = v111;
                    *(_QWORD *)&v246 = &v110[v109];
                  }
                }
                v119 = *v104++;
                *(_QWORD *)i = v119;
                i = (char *)(v246 + 8);
                *(_QWORD *)&v246 = v246 + 8;
              }
              while (v104 != *(uint64_t **)(a1 + 24));
              v86 = *(_QWORD *)(a1 + 16);
            }
            v140 = *(void **)(a1 + 8);
            *(__n128 *)(a1 + 8) = v245;
            v245.n128_u64[0] = (unint64_t)v140;
            v245.n128_u64[1] = v86;
            *(_QWORD *)&v246 = v104;
            v141 = *((_QWORD *)&v246 + 1);
            *(_QWORD *)(a1 + 24) = i;
            *(_QWORD *)(a1 + 32) = v141;
            *(_QWORD *)(a1 + 40) += v232;
            if (v140)
              operator delete(v140);
            v27 = v234;
          }
        }
        v15 = *(_QWORD *)(a1 + 40);
        v20 = *(char **)(a1 + 16);
        v19 = *(char **)(a1 + 24);
        v24 = v15 >> 10;
        v29 = v241;
      }
      v142 = (void **)&v20[8 * v24];
      if (v19 == v20)
        v143 = 0;
      else
        v143 = (char *)*v142 + 4 * (v15 & 0x3FF);
      if (v29 > v27)
      {
        v144 = &v12[4 * (v29 - v27)];
        if (v27 < v29 >> 1)
          v144 = &v11[-4 * v27];
        if (v144 != v12)
        {
          v145 = *(_QWORD *)(a1 + 48);
          v146 = (char *)*v142;
          v147 = v144;
          v148 = v142;
          v149 = v143;
          do
          {
            if (v149 == v146)
            {
              v150 = (char *)*--v148;
              v146 = v150;
              v149 = v150 + 4096;
            }
            v151 = *((_DWORD *)v147 - 1);
            v147 -= 4;
            *((_DWORD *)v149 - 1) = v151;
            v149 -= 4;
            --v15;
            ++v145;
          }
          while (v147 != v12);
          *(_QWORD *)(a1 + 40) = v15;
          *(_QWORD *)(a1 + 48) = v145;
          v12 = v144;
          v29 = v234;
          if (!v234)
            goto LABEL_258;
          goto LABEL_177;
        }
        v29 = v27;
      }
      v149 = v143;
      v148 = (void **)&v20[8 * v24];
      if (v29)
      {
LABEL_177:
        v152 = v29;
        v153 = (void **)sub_24A20B048(v142, (uint64_t)v143, v29);
        v155 = v154;
        if (v143 != v154)
        {
          v156 = *(int64x2_t *)(a1 + 40);
          v157 = (char *)*v148;
          v158 = v153;
          v159 = v154;
          do
          {
            if (v149 == v157)
            {
              v160 = (char *)*--v148;
              v157 = v160;
              v149 = v160 + 4096;
            }
            if (v159 == *v158)
            {
              v161 = (uint64_t)*--v158;
              v159 = (char *)(v161 + 4096);
            }
            v162 = *((_DWORD *)v159 - 1);
            v159 -= 4;
            *((_DWORD *)v149 - 1) = v162;
            v149 -= 4;
            v156 = vaddq_s64(v156, (int64x2_t)xmmword_24A21FDB0);
          }
          while (v159 != v143);
          *(int64x2_t *)(a1 + 40) = v156;
        }
        if (v152 < v234)
        {
          v163.n128_u64[0] = (unint64_t)v142;
          v163.n128_u64[1] = (unint64_t)v143;
          v242 = v163;
          v164 = (uint64_t *)v153;
          v165 = sub_24A20B048(v142, (uint64_t)v143, v234);
          v245 = v242;
          sub_24A20B09C(v164, v155, v165, v166, (uint64_t)&v245);
          v143 = (char *)v245.n128_u64[1];
          v142 = (void **)v245.n128_u64[0];
        }
        if (v12 != v11)
        {
          v169 = *v142;
          v168 = v142 + 1;
          v167 = v169;
          while (1)
          {
            v170 = v167 - v143 + 4096;
            if ((v11 - v12) >> 2 >= v170 >> 2)
              v171 = v170 >> 2;
            else
              v171 = (v11 - v12) >> 2;
            if (v171)
              memmove(v143, v12, 4 * v171);
            v12 += 4 * v171;
            if (v12 == v11)
              break;
            v172 = *v168++;
            v167 = v172;
            v143 = v172;
          }
        }
      }
LABEL_258:
      v224 = *(_DWORD *)(a1 + 48) - *(_DWORD *)(a1 + 56);
      if (v224 < 1)
      {
        v9 = *(_QWORD *)(a1 + 64);
      }
      else
      {
        v225 = v224 + 1;
        do
        {
          *(int64x2_t *)(a1 + 40) = vaddq_s64(*(int64x2_t *)(a1 + 40), (int64x2_t)xmmword_24A21FDC0);
          sub_24A20AFF4(a1 + 8);
          v9 = *(_QWORD *)(a1 + 64) + 1;
          *(_QWORD *)(a1 + 64) = v9;
          --v225;
        }
        while (v225 > 1);
      }
      a6 = v240;
      a7 = v238;
      a8 = v239;
      a2 = v236;
      a5 = v237;
      goto LABEL_264;
    }
    v43 = (v22 << 7) - 1;
    v44 = v19 - v20;
    if (v19 == v20)
      v43 = 0;
    v45 = v43 - v17;
    v46 = v241 >= v45;
    v47 = v241 - v45;
    if (v47 != 0 && v46)
    {
      if (v19 == v20)
        v48 = v47 + 1;
      else
        v48 = v47;
      if ((v48 & 0x3FF) != 0)
        v49 = (v48 >> 10) + 1;
      else
        v49 = v48 >> 10;
      if (v49 >= v24)
        v50 = v24;
      else
        v50 = v49;
      v235 = v27;
      if (v49 <= v24)
      {
        for (*(_QWORD *)(a1 + 40) = v15 - (v50 << 10); v50; --v50)
        {
          v58 = *(_QWORD **)(a1 + 16);
          v61 = *v58;
          v59 = (char *)(v58 + 1);
          v60 = v61;
          *(_QWORD *)(a1 + 16) = v59;
          if (v19 == *(char **)(a1 + 32))
          {
            v62 = (uint64_t)&v59[-*v28];
            if ((unint64_t)v59 <= *v28)
            {
              if (v19 == (char *)*v28)
                v70 = 1;
              else
                v70 = (uint64_t)&v19[-*v28] >> 2;
              v71 = (char *)sub_24A20B418(v70);
              v73 = &v71[8 * (v70 >> 2)];
              v74 = *(uint64_t **)(a1 + 16);
              v19 = v73;
              v75 = *(_QWORD *)(a1 + 24) - (_QWORD)v74;
              if (v75)
              {
                v19 = &v73[v75 & 0xFFFFFFFFFFFFFFF8];
                v76 = 8 * (v75 >> 3);
                v77 = &v71[8 * (v70 >> 2)];
                do
                {
                  v78 = *v74++;
                  *(_QWORD *)v77 = v78;
                  v77 += 8;
                  v76 -= 8;
                }
                while (v76);
              }
              v79 = *(void **)(a1 + 8);
              *(_QWORD *)(a1 + 8) = v71;
              *(_QWORD *)(a1 + 16) = v73;
              *(_QWORD *)(a1 + 24) = v19;
              *(_QWORD *)(a1 + 32) = &v71[8 * v72];
              if (v79)
              {
                operator delete(v79);
                v19 = *(char **)(a1 + 24);
              }
            }
            else
            {
              v63 = v62 >> 3;
              v64 = v62 >> 3 < -1;
              v65 = (v62 >> 3) + 2;
              if (v64)
                v66 = v65;
              else
                v66 = v63 + 1;
              v67 = &v59[-8 * (v66 >> 1)];
              v68 = v19 - v59;
              if (v19 != v59)
              {
                memmove(&v59[-8 * (v66 >> 1)], v59, v19 - v59);
                v19 = *(char **)(a1 + 16);
              }
              v69 = &v19[-8 * (v66 >> 1)];
              v19 = &v67[v68];
              *(_QWORD *)(a1 + 16) = v69;
              *(_QWORD *)(a1 + 24) = &v67[v68];
            }
          }
          *(_QWORD *)v19 = v60;
          v19 = (char *)(*(_QWORD *)(a1 + 24) + 8);
          *(_QWORD *)(a1 + 24) = v19;
        }
      }
      else
      {
        v51 = v49 - v50;
        v52 = *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 8);
        if (v51 <= (v52 >> 3) - (v44 >> 3))
        {
          if (v51)
          {
            while (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a1 + 24))
            {
              v245.n128_u64[0] = (unint64_t)operator new(0x1000uLL);
              sub_24A20B44C((_QWORD *)(a1 + 8), &v245);
              if (!--v51)
              {
                v19 = *(char **)(a1 + 24);
                goto LABEL_203;
              }
            }
            for (j = 0; j != v51; ++j)
            {
              v245.n128_u64[0] = (unint64_t)operator new(0x1000uLL);
              sub_24A20B55C(a1 + 8, &v245);
              v19 = *(char **)(a1 + 24);
              if (&v19[-*(_QWORD *)(a1 + 16)] == (char *)8)
                v174 = 1023;
              else
                v174 = 1024;
              v175 = v174 + *(_QWORD *)(a1 + 40);
              *(_QWORD *)(a1 + 40) = v175;
            }
            v50 += v51;
          }
          else
          {
LABEL_203:
            v175 = *(_QWORD *)(a1 + 40);
          }
          for (*(_QWORD *)(a1 + 40) = v175 - (v50 << 10); v50; --v50)
          {
            v176 = *(_QWORD **)(a1 + 16);
            v179 = *v176;
            v177 = (char *)(v176 + 1);
            v178 = v179;
            *(_QWORD *)(a1 + 16) = v177;
            if (v19 == *(char **)(a1 + 32))
            {
              v180 = (uint64_t)&v177[-*v28];
              if ((unint64_t)v177 <= *v28)
              {
                if (v19 == (char *)*v28)
                  v187 = 1;
                else
                  v187 = (uint64_t)&v19[-*v28] >> 2;
                v188 = (char *)sub_24A20B418(v187);
                v190 = &v188[8 * (v187 >> 2)];
                v191 = *(uint64_t **)(a1 + 16);
                v19 = v190;
                v192 = *(_QWORD *)(a1 + 24) - (_QWORD)v191;
                if (v192)
                {
                  v19 = &v190[v192 & 0xFFFFFFFFFFFFFFF8];
                  v193 = 8 * (v192 >> 3);
                  v194 = &v188[8 * (v187 >> 2)];
                  do
                  {
                    v195 = *v191++;
                    *(_QWORD *)v194 = v195;
                    v194 += 8;
                    v193 -= 8;
                  }
                  while (v193);
                }
                v196 = *(void **)(a1 + 8);
                *(_QWORD *)(a1 + 8) = v188;
                *(_QWORD *)(a1 + 16) = v190;
                *(_QWORD *)(a1 + 24) = v19;
                *(_QWORD *)(a1 + 32) = &v188[8 * v189];
                if (v196)
                {
                  operator delete(v196);
                  v19 = *(char **)(a1 + 24);
                }
              }
              else
              {
                v181 = v180 >> 3;
                v64 = v180 >> 3 < -1;
                v182 = (v180 >> 3) + 2;
                if (v64)
                  v183 = v182;
                else
                  v183 = v181 + 1;
                v184 = &v177[-8 * (v183 >> 1)];
                v185 = v19 - v177;
                if (v19 != v177)
                {
                  memmove(&v177[-8 * (v183 >> 1)], v177, v19 - v177);
                  v19 = *(char **)(a1 + 16);
                }
                v186 = &v19[-8 * (v183 >> 1)];
                v19 = &v184[v185];
                *(_QWORD *)(a1 + 16) = v186;
                *(_QWORD *)(a1 + 24) = &v184[v185];
              }
            }
            *(_QWORD *)v19 = v178;
            v19 = (char *)(*(_QWORD *)(a1 + 24) + 8);
            *(_QWORD *)(a1 + 24) = v19;
          }
        }
        else
        {
          v53 = v52 >> 2;
          if (v53 <= v51 + (v44 >> 3))
            v54 = (char *)(v51 + (v44 >> 3));
          else
            v54 = (char *)v53;
          v55 = (v44 >> 3) - v50;
          v247 = a1 + 32;
          if (v54)
            v54 = (char *)sub_24A20B418((unint64_t)v54);
          else
            v56 = 0;
          v245.n128_u64[0] = (unint64_t)v54;
          v245.n128_u64[1] = (unint64_t)&v54[8 * v55];
          *(_QWORD *)&v246 = v245.n128_u64[1];
          *((_QWORD *)&v246 + 1) = &v54[8 * v56];
          do
          {
            v244 = operator new(0x1000uLL);
            sub_24A20B44C(&v245, &v244);
            --v51;
          }
          while (v51);
          v233 = v50 << 10;
          if (v50)
          {
            v120 = *(_QWORD **)(a1 + 16);
            v121 = (char *)v246;
            do
            {
              if (v121 == *((char **)&v246 + 1))
              {
                v122 = (char *)v245.n128_u64[1];
                v123 = (void *)v245.n128_u64[0];
                if (v245.n128_u64[1] <= v245.n128_u64[0])
                {
                  if (v121 == (char *)v245.n128_u64[0])
                    v130 = 1;
                  else
                    v130 = (uint64_t)&v121[-v245.n128_u64[0]] >> 2;
                  v131 = (char *)sub_24A20B418(v130);
                  v133 = v121 - v122;
                  v99 = v121 == v122;
                  v121 = &v131[8 * (v130 >> 2)];
                  if (!v99)
                  {
                    v121 = &v131[8 * (v130 >> 2) + (v133 & 0xFFFFFFFFFFFFFFF8)];
                    v134 = 8 * (v133 >> 3);
                    v135 = &v131[8 * (v130 >> 2)];
                    do
                    {
                      v136 = *(_QWORD *)v122;
                      v122 += 8;
                      *(_QWORD *)v135 = v136;
                      v135 += 8;
                      v134 -= 8;
                    }
                    while (v134);
                  }
                  v245.n128_u64[0] = (unint64_t)v131;
                  v245.n128_u64[1] = (unint64_t)&v131[8 * (v130 >> 2)];
                  *(_QWORD *)&v246 = v121;
                  *((_QWORD *)&v246 + 1) = &v131[8 * v132];
                  if (v123)
                    operator delete(v123);
                }
                else
                {
                  v124 = (uint64_t)(v245.n128_u64[1] - v245.n128_u64[0]) >> 3;
                  if (v124 >= -1)
                    v125 = v124 + 1;
                  else
                    v125 = v124 + 2;
                  v126 = v245.n128_u64[1] - 8 * (v125 >> 1);
                  v127 = (size_t)&v121[-v245.n128_u64[1]];
                  if (v121 != (char *)v245.n128_u64[1])
                  {
                    v128 = (void *)(v245.n128_u64[1] - 8 * (v125 >> 1));
                    memmove(v128, (const void *)v245.n128_u64[1], v127);
                    v126 = (unint64_t)v128;
                    v121 = v122;
                  }
                  v129 = (unint64_t)&v121[-8 * (v125 >> 1)];
                  v121 = (char *)(v126 + v127);
                  v245.n128_u64[1] = v129;
                  *(_QWORD *)&v246 = v126 + v127;
                }
              }
              *(_QWORD *)v121 = *v120;
              v121 = (char *)(v246 + 8);
              *(_QWORD *)&v246 = v246 + 8;
              v120 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
              *(_QWORD *)(a1 + 16) = v120;
              --v50;
            }
            while (v50);
          }
          for (k = *(_QWORD **)(a1 + 24); k != *(_QWORD **)(a1 + 16); sub_24A20B55C((uint64_t)&v245, k))
            --k;
          v138 = *(void **)(a1 + 8);
          v139 = v246;
          *(__n128 *)(a1 + 8) = v245;
          v245.n128_u64[0] = (unint64_t)v138;
          v245.n128_u64[1] = (unint64_t)k;
          *(_OWORD *)(a1 + 24) = v139;
          *(_QWORD *)(a1 + 40) -= v233;
          if (v138)
          {
            operator delete(v138);
            v19 = *(char **)(a1 + 24);
          }
          else
          {
            v19 = (char *)v139;
          }
        }
      }
      v16 = *(_QWORD *)(a1 + 48);
      v20 = *(char **)(a1 + 16);
      v17 = *(_QWORD *)(a1 + 40) + v16;
      v18 = v17 >> 10;
      v27 = v235;
    }
    v197 = &v20[8 * v18];
    if (v19 == v20)
      v198 = 0;
    else
      v198 = (char *)(*(_QWORD *)v197 + 4 * (v17 & 0x3FF));
    v199 = v241;
    v200 = v16 - v27;
    if (v200 >= v241)
    {
      v205 = v198;
      v204 = (char **)&v20[8 * v18];
      if (!v241)
        goto LABEL_258;
    }
    else
    {
      v201 = &v11[4 * (v200 - v241)];
      if (v200 < v241 >> 1)
        v201 = &v12[4 * v200];
      if (v201 == v11)
      {
        v205 = v198;
        v204 = (char **)&v20[8 * v18];
      }
      else
      {
        v202 = *(char **)v197;
        v203 = v201;
        v204 = (char **)v197;
        v205 = v198;
        do
        {
          *(_DWORD *)v205 = *(_DWORD *)v203;
          v205 += 4;
          if (v205 - v202 == 4096)
          {
            v206 = v204[1];
            ++v204;
            v202 = v206;
            v205 = v206;
          }
          v203 += 4;
          ++v16;
        }
        while (v203 != v11);
        *(_QWORD *)(a1 + 48) = v16;
        v11 = v201;
      }
      v199 = v200;
      if (!v200)
        goto LABEL_258;
    }
    v243 = v199;
    v207 = sub_24A20B1CC(v197, (uint64_t)v198, v199);
    if (v198 != v208)
    {
      v209 = *v204;
      v210 = v207;
      v211 = v208;
      do
      {
        *(_DWORD *)v205 = *(_DWORD *)v211;
        v205 += 4;
        if (v205 - v209 == 4096)
        {
          v212 = v204[1];
          ++v204;
          v209 = v212;
          v205 = v212;
        }
        v211 += 4;
        if (&v211[-*v210] == (char *)4096)
        {
          v213 = (char *)v210[1];
          ++v210;
          v211 = v213;
        }
        ++v16;
      }
      while (v211 != v198);
      *(_QWORD *)(a1 + 48) = v16;
    }
    if (v243 < v200)
    {
      v214 = (char **)v207;
      v215 = v208;
      v216 = (char **)sub_24A20B1CC(v197, (uint64_t)v198, v200);
      sub_24A20B224(&v245, v216, v217, v214, v215, v197, v198);
      v198 = (char *)*((_QWORD *)&v246 + 1);
      v197 = (char *)v246;
    }
    if (v11 != v12)
    {
      v220 = *(char **)v197;
      v219 = (uint64_t *)(v197 - 8);
      v218 = v220;
      while (1)
      {
        v221 = v198 - v218;
        if ((v11 - v12) >> 2 >= v221 >> 2)
          v222 = v221 >> 2;
        else
          v222 = (v11 - v12) >> 2;
        v11 -= 4 * v222;
        if (v222)
          memmove(&v198[-4 * v222], v11, 4 * v222);
        if (v11 == v12)
          break;
        v223 = (char *)*v219--;
        v218 = v223;
        v198 = v223 + 4096;
      }
    }
    goto LABEL_258;
  }
LABEL_264:
  LODWORD(v226) = a2 - v9;
  v227 = *(_QWORD *)(a1 + 48);
  if (v227 - (a2 - (int)v9) < a6)
    return 0;
  *a7 = -1;
  v229 = 0;
  if ((a5 & 0x80000000) == 0)
  {
    v226 = (int)v226;
    if (v227 <= (int)v226)
      v227 = (int)v226;
    v230 = (int)v226 + a5 + 1;
    v231 = -1;
    do
    {
      if (v227 == v226)
        break;
      if (*(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 16)
                                + (((unint64_t)(v226 + *(_QWORD *)(a1 + 40)) >> 7) & 0x1FFFFFFFFFFFFF8))
                    + 4 * ((v226 + *(_QWORD *)(a1 + 40)) & 0x3FF)) <= a9)
      {
        if (v231 == -1)
        {
          *a7 = v226;
          v231 = v226;
        }
        ++v229;
      }
      ++v226;
    }
    while (v230 != v226);
  }
  if (a8)
    *a8 = v229;
  return v229 >= a6;
}

void sub_24A20AF68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_24A20AFF4(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1 >= 0x800)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 1024;
  }
  return v1 > 0x7FF;
}

_QWORD *sub_24A20B048(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a3)
  {
    v3 = a3 + ((a2 - *result) >> 2);
    if (v3 < 1)
      result -= (unint64_t)(1023 - v3) >> 10;
    else
      result += (unint64_t)v3 >> 10;
  }
  return result;
}

double sub_24A20B09C(uint64_t *a1, _BYTE *a2, uint64_t *a3, _BYTE *a4, uint64_t a5)
{
  uint64_t *v8;
  _QWORD *v9;
  char *i;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  _BYTE *v18;
  _QWORD *v19;
  char *v20;
  double result;
  uint64_t v22;
  __int128 v23;

  if (a1 == a3)
  {
    v19 = *(_QWORD **)a5;
    v20 = *(char **)(a5 + 8);
    v18 = a4;
  }
  else
  {
    v8 = a1 + 1;
    sub_24A20B6A8(&v22, a2, (_BYTE *)(*a1 + 4096), *(_QWORD **)a5, *(char **)(a5 + 8));
    *(_OWORD *)a5 = v23;
    v9 = *(_QWORD **)a5;
    for (i = *(char **)(a5 + 8); v8 != a3; ++v8)
    {
      v11 = 0;
      v12 = *v8;
      v13 = (char *)*v9;
      while (1)
      {
        v14 = v13 - i + 4096;
        if ((4096 - 4 * v11) >> 2 >= v14 >> 2)
          v15 = v14 >> 2;
        else
          v15 = (4096 - 4 * v11) >> 2;
        if (v15)
          memmove(i, (const void *)(v12 + 4 * v11), 4 * v15);
        v11 += v15;
        if (v11 == 1024)
          break;
        v16 = (char *)v9[1];
        ++v9;
        v13 = v16;
        i = v16;
      }
      i += 4 * v15;
      if ((char *)(*v9 + 4096) == i)
      {
        v17 = (char *)v9[1];
        ++v9;
        i = v17;
      }
      *(_QWORD *)a5 = v9;
      *(_QWORD *)(a5 + 8) = i;
    }
    a2 = (_BYTE *)*a3;
    v18 = a4;
    v19 = v9;
    v20 = i;
  }
  sub_24A20B6A8(&v22, a2, v18, v19, v20);
  result = *(double *)&v23;
  *(_OWORD *)a5 = v23;
  return result;
}

_QWORD *sub_24A20B1CC(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a3)
  {
    v3 = ((a2 - *result) >> 2) - a3;
    if (v3 < 1)
      result -= (unint64_t)(1023 - v3) >> 10;
    else
      result += (unint64_t)v3 >> 10;
  }
  return result;
}

__n128 sub_24A20B224(__n128 *a1, char **a2, char *a3, char **a4, char *a5, _QWORD *a6, char *a7)
{
  char **v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  _QWORD *v24;
  char *v25;
  __n128 result;
  uint64_t v27;
  __n128 v28;

  if (a2 == a4)
  {
    v23 = a3;
    v22 = a5;
    v24 = a6;
    v25 = a7;
  }
  else
  {
    v12 = a4 - 1;
    sub_24A20B360(&v27, *a4, a5, a6, a7);
    v14 = (char *)v28.n128_u64[1];
    v13 = (_QWORD *)v28.n128_u64[0];
    if (v12 != a2)
    {
      v15 = *(char **)v28.n128_u64[0];
      do
      {
        v16 = *v12;
        v17 = *v12 + 4096;
        while (1)
        {
          v18 = v14 - v15;
          if ((v17 - v16) >> 2 >= v18 >> 2)
            v19 = v18 >> 2;
          else
            v19 = (v17 - v16) >> 2;
          v17 -= 4 * v19;
          v14 -= 4 * v19;
          if (v19)
            memmove(v14, v17, 4 * v19);
          if (v17 == v16)
            break;
          v20 = (char *)*--v13;
          v15 = v20;
          v14 = v20 + 4096;
        }
        v15 = (char *)*v13;
        if ((char *)(*v13 + 4096) == v14)
        {
          v21 = (char *)v13[1];
          ++v13;
          v15 = v21;
          v14 = v21;
        }
        --v12;
      }
      while (v12 != a2);
    }
    v22 = *a2 + 4096;
    v23 = a3;
    v24 = v13;
    v25 = v14;
  }
  sub_24A20B360(&v27, v23, v22, v24, v25);
  result = v28;
  a1->n128_u64[0] = (unint64_t)a4;
  a1->n128_u64[1] = (unint64_t)a5;
  a1[1] = result;
  return result;
}

_QWORD *sub_24A20B360(_QWORD *result, char *a2, char *a3, _QWORD *a4, char *a5)
{
  _QWORD *v6;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;

  v6 = a4;
  v8 = result;
  if (a2 == a3)
  {
    v9 = a2;
  }
  else
  {
    v9 = a3;
    v10 = *a4;
    v11 = a3;
    while (1)
    {
      v12 = (uint64_t)&a5[-v10];
      if ((v11 - a2) >> 2 >= v12 >> 2)
        v13 = v12 >> 2;
      else
        v13 = (v11 - a2) >> 2;
      v11 -= 4 * v13;
      a5 -= 4 * v13;
      if (v13)
        result = memmove(a5, v11, 4 * v13);
      if (v11 == a2)
        break;
      v14 = *--v6;
      v10 = v14;
      a5 = (char *)(v14 + 4096);
    }
    if ((char *)(*v6 + 4096) == a5)
    {
      v15 = (char *)v6[1];
      ++v6;
      a5 = v15;
    }
  }
  *v8 = v9;
  v8[1] = v6;
  v8[2] = a5;
  return result;
}

void *sub_24A20B418(unint64_t a1)
{
  if (a1 >> 61)
    sub_24A20B680();
  return operator new(8 * a1);
}

void sub_24A20B44C(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)sub_24A20B418(v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void sub_24A20B55C(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)sub_24A20B418(v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void sub_24A20B670(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_24A20B680()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

_QWORD *sub_24A20B6A8(_QWORD *result, _BYTE *__src, _BYTE *a3, _QWORD *a4, char *__dst)
{
  _QWORD *v6;
  _QWORD *v8;
  _BYTE *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v6 = a4;
  v8 = result;
  if (__src != a3)
  {
    v9 = __src;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = v10 - __dst + 4096;
      if ((a3 - v9) >> 2 >= v11 >> 2)
        v12 = v11 >> 2;
      else
        v12 = (a3 - v9) >> 2;
      if (v12)
        result = memmove(__dst, v9, 4 * v12);
      v9 += 4 * v12;
      if (v9 == a3)
        break;
      v13 = (char *)v6[1];
      ++v6;
      v10 = v13;
      __dst = v13;
    }
    __dst += 4 * v12;
    if ((char *)(*v6 + 4096) == __dst)
    {
      v14 = (char *)v6[1];
      ++v6;
      __dst = v14;
    }
  }
  *v8 = a3;
  v8[1] = v6;
  v8[2] = __dst;
  return result;
}

void sub_24A20B758(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_24A20B7A8(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_251B985F8, MEMORY[0x24BEDAAF0]);
}

void sub_24A20B794(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_24A20B7A8(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

_QWORD *sub_24A20B7CC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  size_t v16;
  std::locale::__imp *p_b;
  uint64_t v18;
  uint64_t v19;
  std::locale *v20;
  uint64_t v21;
  _BYTE v23[16];
  std::locale __b;
  size_t v25;
  int64_t v26;

  MEMORY[0x24BD0A0B0](v23, a1);
  if (v23[0])
  {
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *((_QWORD *)v6 + 5);
    v8 = *((_DWORD *)v6 + 2);
    v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&__b, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20)
      v12 = a2 + a3;
    else
      v12 = a2;
    if (!v7)
      goto LABEL_29;
    v13 = *((_QWORD *)v6 + 3);
    v14 = v13 <= a3;
    v15 = v13 - a3;
    v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_29;
    }
    if ((uint64_t)v16 >= 1)
    {
      if (v16 >= 0x7FFFFFFFFFFFFFF8)
        sub_24A20C190();
      if (v16 >= 0x17)
      {
        v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17)
          v18 = v16 | 7;
        v19 = v18 + 1;
        p_b = (std::locale::__imp *)operator new(v18 + 1);
        v25 = v16;
        v26 = v19 | 0x8000000000000000;
        __b.__locale_ = p_b;
      }
      else
      {
        HIBYTE(v26) = v16;
        p_b = (std::locale::__imp *)&__b;
      }
      memset(p_b, v9, v16);
      *((_BYTE *)p_b + v16) = 0;
      v20 = v26 >= 0 ? &__b : (std::locale *)__b.__locale_;
      v21 = (*(uint64_t (**)(uint64_t, std::locale *, size_t))(*(_QWORD *)v7 + 96))(v7, v20, v16);
      if (SHIBYTE(v26) < 0)
        operator delete(__b.__locale_);
      if (v21 != v16)
        goto LABEL_29;
    }
    if (v11 - v12 < 1
      || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, v12, v11 - v12) == v11 - v12)
    {
      *((_QWORD *)v6 + 3) = 0;
    }
    else
    {
LABEL_29:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x24BD0A0BC](v23);
  return a1;
}

void sub_24A20B9EC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _QWORD *v17;

  if (a17 < 0)
    operator delete(__p);
  MEMORY[0x24BD0A0BC](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x24A20B9C0);
}

void sub_24A20BA4C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_24A20BA60(_QWORD *a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_24A20BADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void sub_24A20BAF0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  uint64_t *v6;
  char *v7;
  int v8;
  void *__p;
  char v10;

  v2 = a1[23];
  v3 = a1[24];
  if (v2 != v3)
  {
    v4 = voiceactions::kLogZero;
    do
    {
      *(_DWORD *)v2 = voiceactions::kNolabel;
      *(_DWORD *)(v2 + 4) = v4;
      *(_DWORD *)(v2 + 8) = voiceactions::kNoTime;
      *(_QWORD *)(v2 + 20) = 0;
      *(_QWORD *)(v2 + 12) = 0;
      v2 += 32;
    }
    while (v2 != v3);
  }
  sub_24A20BBD0((uint64_t)(a1 + 26));
  v5 = (_QWORD *)a1[20];
  if (v5)
  {
    v6 = a1 + 18;
    do
    {
      sub_24A20BC24((uint64_t)&v8, (uint64_t)(v5 + 2));
      v7 = sub_24A20BC88(v6, v8, &v8);
      sub_24A20BBD0((uint64_t)(v7 + 24));
      if (v10 < 0)
        operator delete(__p);
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
}

void sub_24A20BBB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float sub_24A20BBD0(uint64_t a1)
{
  float result;
  int v2;

  if (*(char *)(a1 + 23) < 0)
  {
    **(_BYTE **)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 23) = 0;
  }
  result = *(float *)&voiceactions::kLogZero;
  *(_DWORD *)(a1 + 24) = voiceactions::kLogZero;
  *(float *)(a1 + 28) = result;
  v2 = voiceactions::kNoTime;
  *(_DWORD *)(a1 + 32) = voiceactions::kNoTime;
  *(_DWORD *)(a1 + 36) = v2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(float *)(a1 + 60) = result;
  *(_DWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  return result;
}

uint64_t sub_24A20BC24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_24A20C108((_BYTE *)v4, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v4 = v5;
  }
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = v7;
  return a1;
}

char *sub_24A20BC88(uint64_t *a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  _QWORD *v12;
  int v13;
  int v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  void *v36;

  v6 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  v12 = a1 + 2;
  v10 = (char *)operator new(0x60uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *((_QWORD *)v10 + 11) = 0;
  v13 = voiceactions::kLogZero;
  *((_DWORD *)v10 + 12) = voiceactions::kLogZero;
  *((_DWORD *)v10 + 13) = v13;
  v14 = voiceactions::kNoTime;
  *((_DWORD *)v10 + 14) = voiceactions::kNoTime;
  *((_DWORD *)v10 + 15) = v14;
  *((_QWORD *)v10 + 8) = 0;
  *((_QWORD *)v10 + 9) = 0;
  *((_DWORD *)v10 + 20) = 0;
  *((_DWORD *)v10 + 21) = v13;
  v15 = (float)(unint64_t)(a1[3] + 1);
  v16 = *((float *)a1 + 8);
  if (!v7 || (float)(v16 * (float)v7) < v15)
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = (int8x8_t)v19;
    else
      prime = (int8x8_t)v18;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = a1[1];
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v27 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (*(_QWORD *)&prime <= v27)
        prime = (int8x8_t)v27;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            sub_24A20B680();
          v21 = operator new(8 * *(_QWORD *)&prime);
          v22 = (void *)*a1;
          *a1 = (uint64_t)v21;
          if (v22)
            operator delete(v22);
          v23 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v23++) = 0;
          while (*(_QWORD *)&prime != v23);
          v24 = (_QWORD *)*v12;
          if (*v12)
          {
            v25 = v24[1];
            v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(_QWORD *)&prime)
                v25 %= *(_QWORD *)&prime;
            }
            else
            {
              v25 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v25) = v12;
            v30 = (_QWORD *)*v24;
            if (*v24)
            {
              do
              {
                v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(_QWORD *)&prime)
                    v31 %= *(_QWORD *)&prime;
                }
                else
                {
                  v31 &= *(_QWORD *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v31))
                  {
                    *(_QWORD *)(*a1 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  *v24 = *v30;
                  *v30 = **(_QWORD **)(*a1 + 8 * v31);
                  **(_QWORD **)(*a1 + 8 * v31) = v30;
                  v30 = v24;
                }
                v31 = v25;
LABEL_55:
                v24 = v30;
                v30 = (_QWORD *)*v30;
                v25 = v31;
              }
              while (v30);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v36 = (void *)*a1;
        *a1 = 0;
        if (v36)
          operator delete(v36);
        v7 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v32 = *a1;
  v33 = *(_QWORD **)(*a1 + 8 * v3);
  if (v33)
  {
    *(_QWORD *)v10 = *v33;
LABEL_72:
    *v33 = v10;
    goto LABEL_73;
  }
  *(_QWORD *)v10 = *v12;
  *v12 = v10;
  *(_QWORD *)(v32 + 8 * v3) = v12;
  if (*(_QWORD *)v10)
  {
    v34 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v34 >= v7)
        v34 %= v7;
    }
    else
    {
      v34 &= v7 - 1;
    }
    v33 = (_QWORD *)(*a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void sub_24A20C0A4(_Unwind_Exception *a1)
{
  void **v1;

  sub_24A20C0BC(1, v1);
  _Unwind_Resume(a1);
}

void sub_24A20C0BC(char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 47) < 0)
      operator delete(__p[3]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void *sub_24A20C108(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_24A20C190();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

void sub_24A20C190()
{
  sub_24A20B758("basic_string");
}

char *sub_24A20C1A4(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  char *v4;
  __int128 *v6;
  __int128 v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  char *v14;
  char *v15;

  v4 = __dst;
  v14 = __dst;
  v15 = __dst;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_24A20C108(v4, *(void **)v6, *((_QWORD *)v6 + 1));
        v8 = v15;
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)v4 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v4 = v7;
        v8 = v4;
      }
      v9 = *(__int128 *)((char *)v6 + 24);
      v10 = *(__int128 *)((char *)v6 + 40);
      *(_OWORD *)(v4 + 49) = *(__int128 *)((char *)v6 + 49);
      *(_OWORD *)(v4 + 40) = v10;
      *(_OWORD *)(v4 + 24) = v9;
      v6 = (__int128 *)((char *)v6 + 72);
      v4 = v8 + 72;
      v15 = v8 + 72;
    }
    while (v6 != a3);
  }
  v13 = 1;
  sub_24A20C2C4((uint64_t)v12);
  return v4;
}

void sub_24A20C268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_24A20C2C4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *sub_24A20C27C(unint64_t a1)
{
  if (a1 >= 0x38E38E38E38E38FLL)
    sub_24A20B680();
  return operator new(72 * a1);
}

uint64_t sub_24A20C2C4(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 49) < 0)
        operator delete(*(void **)(v3 - 72));
      v3 -= 72;
    }
  }
  return a1;
}

uint64_t sub_24A20C320(uint64_t *a1, __int128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v17[2];
  char *v18;
  char *v19;
  uint64_t *v20;

  v2 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x38E38E38E38E38ELL)
    sub_24A20A098();
  v6 = a1 + 2;
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3);
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7)
    v7 = 0x38E38E38E38E38ELL;
  else
    v7 = v3;
  v20 = v6;
  if (v7)
  {
    v9 = (char *)sub_24A20C27C(v7);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v10 = &v9[72 * v2];
  v17[0] = v9;
  v17[1] = v10;
  v18 = v10;
  v19 = &v9[72 * v8];
  if (*((char *)a2 + 23) < 0)
  {
    sub_24A20C108(v10, *(void **)a2, *((_QWORD *)a2 + 1));
    v10 = v18;
  }
  else
  {
    v11 = *a2;
    *((_QWORD *)v10 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v10 = v11;
  }
  v12 = &v9[72 * v2];
  v13 = *(__int128 *)((char *)a2 + 49);
  v14 = *(__int128 *)((char *)a2 + 24);
  *(_OWORD *)(v12 + 40) = *(__int128 *)((char *)a2 + 40);
  *(_OWORD *)(v12 + 24) = v14;
  *(_OWORD *)(v12 + 49) = v13;
  v18 = v10 + 72;
  sub_24A20D6F4(a1, v17);
  v15 = a1[1];
  sub_24A20D788((uint64_t)v17);
  return v15;
}

void sub_24A20C464(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_24A20D788((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24A20C478(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  float v24;
  unint64_t v25;
  float v26;
  unint64_t v27;
  float v28;
  float v29;
  void **v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  BOOL v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  float v38;
  unint64_t v39;
  float v40;
  unint64_t v41;
  unint64_t v42;
  float v43;
  char v44;
  float v45;
  float v46;
  uint64_t v47;
  void **v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char v59;
  float v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  void **v64;
  __int128 v65;
  uint64_t v66;
  float v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t v74;
  float v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  int64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 *v94;
  void **v95;
  int v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  _OWORD *v100;
  uint64_t v101;
  unint64_t v102;
  float v103;
  void *v104;
  char v105;
  unint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _QWORD *v111;
  uint64_t v112;
  char v113;
  float v114;
  char v115;
  _QWORD *v116;
  _QWORD *v117;
  __int128 v118;
  float v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  char v124;
  char v125;
  char v127;
  uint64_t v128;
  void *v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  _BYTE v140[25];
  __int128 v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  _BYTE v147[15];
  _BYTE v148[15];
  _BYTE v149[15];
  _BYTE v150[15];
  _BYTE v151[15];
  __int128 v152;
  _BYTE v153[15];
  __int128 v154;
  int v155;
  _BYTE v156[15];

LABEL_1:
  v7 = a1;
  v121 = a1 + 144;
  v122 = a1 + 72;
  v123 = (_QWORD *)(a1 + 8);
  v8 = a1 + 24;
  while (2)
  {
    v9 = a2 - v7;
    v10 = 0x8E38E38E38E38E39 * ((uint64_t)(a2 - v7) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(float *)(a2 - 12) < *(float *)(v7 + 60))
          sub_24A20D16C((uint64_t *)v7, a2 - 72);
        return;
      case 3:
        sub_24A20D25C(v7, v7 + 72, a2 - 72);
        return;
      case 4:
        sub_24A20D308(v7, v7 + 72, v7 + 144, a2 - 72);
        return;
      case 5:
        sub_24A20D39C(v7, v7 + 72, v7 + 144, v7 + 216, a2 - 72);
        return;
      default:
        if (v9 > 1727)
        {
          if (!a3)
          {
            if (v7 != a2)
            {
              v70 = (unint64_t)(v10 - 2) >> 1;
              v71 = v70;
              do
              {
                v72 = v71;
                if (v70 >= v71)
                {
                  v73 = (2 * v71) | 1;
                  v74 = v7 + 72 * v73;
                  if (2 * v72 + 2 < v10 && *(float *)(v7 + 72 * v73 + 60) < *(float *)(v74 + 132))
                  {
                    v74 += 72;
                    v73 = 2 * v72 + 2;
                  }
                  v75 = *(float *)(v7 + 72 * v72 + 60);
                  if (*(float *)(v74 + 60) >= v75)
                  {
                    v76 = v7 + 72 * v72;
                    v129 = *(void **)v76;
                    *(_QWORD *)&v151[7] = *(_QWORD *)(v76 + 15);
                    *(_QWORD *)v151 = *(_QWORD *)(v76 + 8);
                    v127 = *(_BYTE *)(v76 + 23);
                    *(_QWORD *)v76 = 0;
                    *(_QWORD *)(v76 + 8) = 0;
                    *(_QWORD *)(v76 + 16) = 0;
                    v145 = *(_DWORD *)(v76 + 56);
                    v133 = *(_OWORD *)(v76 + 24);
                    v139 = *(_OWORD *)(v76 + 40);
                    v124 = *(_BYTE *)(v76 + 64);
                    do
                    {
                      v77 = v76;
                      v76 = v74;
                      if (*(char *)(v77 + 23) < 0)
                        operator delete(*(void **)v77);
                      v78 = *(_OWORD *)v76;
                      *(_QWORD *)(v77 + 16) = *(_QWORD *)(v76 + 16);
                      *(_OWORD *)v77 = v78;
                      *(_BYTE *)(v76 + 23) = 0;
                      *(_BYTE *)v76 = 0;
                      v79 = *(_OWORD *)(v76 + 24);
                      v80 = *(_OWORD *)(v76 + 40);
                      *(_OWORD *)(v77 + 49) = *(_OWORD *)(v76 + 49);
                      *(_OWORD *)(v77 + 40) = v80;
                      *(_OWORD *)(v77 + 24) = v79;
                      if (v70 < v73)
                        break;
                      v81 = (2 * v73) | 1;
                      v74 = v7 + 72 * v81;
                      if (2 * v73 + 2 < v10 && *(float *)(v7 + 72 * v81 + 60) < *(float *)(v74 + 132))
                      {
                        v74 += 72;
                        v81 = 2 * v73 + 2;
                      }
                      v73 = v81;
                    }
                    while (*(float *)(v74 + 60) >= v75);
                    if (*(char *)(v76 + 23) < 0)
                      operator delete(*(void **)v76);
                    *(_QWORD *)v76 = v129;
                    *(_QWORD *)(v76 + 15) = *(_QWORD *)&v151[7];
                    *(_QWORD *)(v76 + 8) = *(_QWORD *)v151;
                    *(_BYTE *)(v76 + 23) = v127;
                    *(_OWORD *)(v76 + 24) = v133;
                    *(_OWORD *)(v76 + 40) = v139;
                    *(_DWORD *)(v76 + 56) = v145;
                    *(float *)(v76 + 60) = v75;
                    *(_BYTE *)(v76 + 64) = v124;
                  }
                }
                v71 = v72 - 1;
              }
              while (v72);
              v82 = v9 / 0x48uLL;
              do
              {
                if (v82 >= 2)
                {
                  v83 = 0;
                  v84 = *(_QWORD *)v7;
                  *(_QWORD *)v147 = *(_QWORD *)(v7 + 8);
                  *(_QWORD *)&v147[7] = *(_QWORD *)(v7 + 15);
                  v85 = *(_BYTE *)(v7 + 23);
                  *(_QWORD *)(v7 + 8) = 0;
                  *(_QWORD *)(v7 + 16) = 0;
                  *(_QWORD *)v7 = 0;
                  v134 = *(_OWORD *)(v7 + 24);
                  *(_OWORD *)v140 = *(_OWORD *)(v7 + 40);
                  *(_OWORD *)&v140[9] = *(_OWORD *)(v7 + 49);
                  v86 = v7;
                  do
                  {
                    v87 = v83 + 1;
                    v88 = v86 + 72 * (v83 + 1);
                    v89 = 2 * v83;
                    v83 = (2 * v83) | 1;
                    v90 = v89 + 2;
                    if (v90 < v82 && *(float *)(v86 + 72 * v87 + 60) < *(float *)(v88 + 132))
                    {
                      v88 += 72;
                      v83 = v90;
                    }
                    if (*(char *)(v86 + 23) < 0)
                      operator delete(*(void **)v86);
                    v91 = *(_OWORD *)v88;
                    *(_QWORD *)(v86 + 16) = *(_QWORD *)(v88 + 16);
                    *(_OWORD *)v86 = v91;
                    *(_BYTE *)(v88 + 23) = 0;
                    *(_BYTE *)v88 = 0;
                    v92 = *(_OWORD *)(v88 + 24);
                    v93 = *(_OWORD *)(v88 + 40);
                    *(_OWORD *)(v86 + 49) = *(_OWORD *)(v88 + 49);
                    *(_OWORD *)(v86 + 40) = v93;
                    *(_OWORD *)(v86 + 24) = v92;
                    v86 = v88;
                  }
                  while (v83 <= (uint64_t)((unint64_t)(v82 - 2) >> 1));
                  v94 = (__int128 *)(v88 + 24);
                  v95 = (void **)(a2 - 72);
                  v96 = *(char *)(v88 + 23);
                  if (v88 == a2 - 72)
                  {
                    if (v96 < 0)
                      operator delete(*(void **)v88);
                    *(_QWORD *)v88 = v84;
                    *(_QWORD *)(v88 + 15) = *(_QWORD *)&v147[7];
                    *(_QWORD *)(v88 + 8) = *(_QWORD *)v147;
                    *(_BYTE *)(v88 + 23) = v85;
                    *(_OWORD *)(v88 + 49) = *(_OWORD *)&v140[9];
                    *v94 = v134;
                    *(_OWORD *)(v88 + 40) = *(_OWORD *)v140;
                  }
                  else
                  {
                    if (v96 < 0)
                      operator delete(*(void **)v88);
                    v97 = *(_OWORD *)v95;
                    *(_QWORD *)(v88 + 16) = *(_QWORD *)(a2 - 56);
                    *(_OWORD *)v88 = v97;
                    *(_BYTE *)(a2 - 49) = 0;
                    *(_BYTE *)(a2 - 72) = 0;
                    v98 = *(_OWORD *)(a2 - 48);
                    v99 = *(_OWORD *)(a2 - 32);
                    *(_OWORD *)(v88 + 49) = *(_OWORD *)(a2 - 23);
                    *v94 = v98;
                    *(_OWORD *)(v88 + 40) = v99;
                    if (*(char *)(a2 - 49) < 0)
                      operator delete(*v95);
                    v100 = (_OWORD *)(a2 - 48);
                    *(_QWORD *)(a2 - 72) = v84;
                    *(_QWORD *)(a2 - 57) = *(_QWORD *)&v147[7];
                    *(_QWORD *)(a2 - 64) = *(_QWORD *)v147;
                    *(_BYTE *)(a2 - 49) = v85;
                    *(_OWORD *)((char *)v100 + 25) = *(_OWORD *)&v140[9];
                    *v100 = v134;
                    v100[1] = *(_OWORD *)v140;
                    v101 = v88 + 72 - v7;
                    if (v101 >= 73)
                    {
                      v102 = (unint64_t)(-2 - 0x71C71C71C71C71C7 * (v101 >> 3)) >> 1;
                      v103 = *(float *)(v88 + 60);
                      if (*(float *)(v7 + 72 * v102 + 60) < v103)
                      {
                        v104 = *(void **)v88;
                        *(_QWORD *)v156 = *(_QWORD *)(v88 + 8);
                        *(_QWORD *)&v156[7] = *(_QWORD *)(v88 + 15);
                        v125 = *(_BYTE *)(v88 + 23);
                        *(_QWORD *)(v88 + 8) = 0;
                        *(_QWORD *)(v88 + 16) = 0;
                        *(_QWORD *)v88 = 0;
                        v155 = *(_DWORD *)(v88 + 56);
                        v152 = *v94;
                        v154 = *(_OWORD *)(v88 + 40);
                        v105 = *(_BYTE *)(v88 + 64);
                        do
                        {
                          if (*(char *)(v88 + 23) < 0)
                            operator delete(*(void **)v88);
                          v106 = v7 + 72 * v102;
                          v107 = *(_OWORD *)v106;
                          *(_QWORD *)(v88 + 16) = *(_QWORD *)(v106 + 16);
                          *(_OWORD *)v88 = v107;
                          *(_BYTE *)(v106 + 23) = 0;
                          *(_BYTE *)v106 = 0;
                          v108 = *(_OWORD *)(v106 + 24);
                          v109 = *(_OWORD *)(v106 + 40);
                          *(_OWORD *)(v88 + 49) = *(_OWORD *)(v106 + 49);
                          *(_OWORD *)(v88 + 40) = v109;
                          *(_OWORD *)(v88 + 24) = v108;
                          if (!v102)
                            break;
                          v102 = (v102 - 1) >> 1;
                          v88 = v106;
                        }
                        while (*(float *)(v7 + 72 * v102 + 60) < v103);
                        if (*(char *)(v106 + 23) < 0)
                          operator delete(*(void **)v106);
                        *(_QWORD *)v106 = v104;
                        *(_QWORD *)(v106 + 15) = *(_QWORD *)&v156[7];
                        *(_QWORD *)(v106 + 8) = *(_QWORD *)v156;
                        *(_BYTE *)(v106 + 23) = v125;
                        *(_DWORD *)(v106 + 56) = v155;
                        *(_OWORD *)(v106 + 24) = v152;
                        *(_OWORD *)(v106 + 40) = v154;
                        *(float *)(v106 + 60) = v103;
                        *(_BYTE *)(v106 + 64) = v105;
                      }
                    }
                  }
                }
                a2 -= 72;
              }
              while ((unint64_t)v82-- > 2);
            }
            return;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = v7 + 72 * ((unint64_t)v10 >> 1);
          v13 = a2 - 72;
          if ((unint64_t)v9 < 0x2401)
          {
            sub_24A20D25C(v12, v7, v13);
          }
          else
          {
            sub_24A20D25C(v7, v12, v13);
            v14 = v7 + 72 * v11;
            sub_24A20D25C(v122, v14 - 72, a2 - 144);
            sub_24A20D25C(v121, v14 + 72, a2 - 216);
            sub_24A20D25C(v14 - 72, v12, v14 + 72);
            sub_24A20D16C((uint64_t *)v7, v12);
          }
          v15 = a3 - 1;
          v128 = v15;
          if ((a4 & 1) != 0)
          {
            v16 = *(float *)(v7 + 60);
LABEL_11:
            v17 = *(_QWORD *)v7;
            *(_QWORD *)v148 = *v123;
            *(_QWORD *)&v148[7] = *(_QWORD *)((char *)v123 + 7);
            v18 = *(_BYTE *)(v7 + 23);
            *(_QWORD *)(v7 + 8) = 0;
            *(_QWORD *)(v7 + 16) = 0;
            *(_QWORD *)v7 = 0;
            v142 = *(_DWORD *)(v8 + 32);
            v130 = *(_OWORD *)v8;
            v136 = *(_OWORD *)(v8 + 16);
            v19 = v7;
            v20 = *(_BYTE *)(v7 + 64);
            do
            {
              v21 = v19;
              v19 += 72;
            }
            while (*(float *)(v21 + 132) < v16);
            v22 = a2;
            if (v21 == v7)
            {
              v25 = a2;
              while (v19 < v25)
              {
                v23 = v25 - 72;
                v26 = *(float *)(v25 - 12);
                v25 -= 72;
                if (v26 < v16)
                  goto LABEL_21;
              }
              v23 = v25;
            }
            else
            {
              do
              {
                v23 = v22 - 72;
                v24 = *(float *)(v22 - 12);
                v22 -= 72;
              }
              while (v24 >= v16);
            }
LABEL_21:
            a1 = v19;
            if (v19 < v23)
            {
              v27 = v23;
              do
              {
                sub_24A20D16C((uint64_t *)a1, v27);
                do
                {
                  v28 = *(float *)(a1 + 132);
                  a1 += 72;
                }
                while (v28 < v16);
                do
                {
                  v29 = *(float *)(v27 - 12);
                  v27 -= 72;
                }
                while (v29 >= v16);
              }
              while (a1 < v27);
            }
            v30 = (void **)(a1 - 72);
            if (a1 - 72 != v7)
            {
              if (*(char *)(v7 + 23) < 0)
                operator delete(*(void **)v7);
              v31 = *(_OWORD *)v30;
              *(_QWORD *)(v7 + 16) = *(_QWORD *)(a1 - 56);
              *(_OWORD *)v7 = v31;
              *(_BYTE *)(a1 - 49) = 0;
              *(_BYTE *)(a1 - 72) = 0;
              v32 = *(_OWORD *)(a1 - 48);
              v33 = *(_OWORD *)(a1 - 32);
              *(_OWORD *)(v8 + 25) = *(_OWORD *)(a1 - 23);
              *(_OWORD *)v8 = v32;
              *(_OWORD *)(v8 + 16) = v33;
            }
            if (*(char *)(a1 - 49) < 0)
              operator delete(*v30);
            *(_QWORD *)(a1 - 72) = v17;
            *(_QWORD *)(a1 - 57) = *(_QWORD *)&v148[7];
            *(_QWORD *)(a1 - 64) = *(_QWORD *)v148;
            *(_BYTE *)(a1 - 49) = v18;
            *(_DWORD *)(a1 - 16) = v142;
            *(_OWORD *)(a1 - 48) = v130;
            *(_OWORD *)(a1 - 32) = v136;
            *(float *)(a1 - 12) = v16;
            *(_BYTE *)(a1 - 8) = v20;
            a3 = v128;
            if (v19 >= v23)
            {
              v34 = sub_24A20D45C(v7, a1 - 72);
              if (sub_24A20D45C(a1, a2))
              {
                a2 = a1 - 72;
                if (!v34)
                  continue;
                return;
              }
              if (v34)
                goto LABEL_1;
            }
            sub_24A20C478(v7, a1 - 72, v128, a4 & 1);
            a4 = 0;
            goto LABEL_1;
          }
          v16 = *(float *)(v7 + 60);
          if (*(float *)(v7 - 12) < v16)
            goto LABEL_11;
          v35 = *(_QWORD *)v7;
          *(_QWORD *)v149 = *(_QWORD *)(v7 + 8);
          *(_QWORD *)&v149[7] = *(_QWORD *)(v7 + 15);
          v36 = *(_BYTE *)(v7 + 23);
          *(_QWORD *)(v7 + 8) = 0;
          *(_QWORD *)(v7 + 16) = 0;
          *(_QWORD *)v7 = 0;
          v131 = *(_OWORD *)(v7 + 24);
          v137 = *(_OWORD *)(v7 + 40);
          v143 = *(_DWORD *)(v7 + 56);
          if (v16 >= *(float *)(a2 - 12))
          {
            v39 = v7 + 72;
            do
            {
              a1 = v39;
              if (v39 >= a2)
                break;
              v40 = *(float *)(v39 + 60);
              v39 += 72;
            }
            while (v16 >= v40);
          }
          else
          {
            v37 = v7;
            do
            {
              a1 = v37 + 72;
              v38 = *(float *)(v37 + 132);
              v37 += 72;
            }
            while (v16 >= v38);
          }
          v41 = a2;
          if (a1 < a2)
          {
            v42 = a2;
            do
            {
              v41 = v42 - 72;
              v43 = *(float *)(v42 - 12);
              v42 -= 72;
            }
            while (v16 < v43);
          }
          v44 = *(_BYTE *)(v7 + 64);
          while (a1 < v41)
          {
            sub_24A20D16C((uint64_t *)a1, v41);
            do
            {
              v45 = *(float *)(a1 + 132);
              a1 += 72;
            }
            while (v16 >= v45);
            do
            {
              v46 = *(float *)(v41 - 12);
              v41 -= 72;
            }
            while (v16 < v46);
          }
          v47 = v15;
          v48 = (void **)(a1 - 72);
          if (a1 - 72 != v7)
          {
            if (*(char *)(v7 + 23) < 0)
              operator delete(*(void **)v7);
            v49 = *(_OWORD *)v48;
            *(_QWORD *)(v7 + 16) = *(_QWORD *)(a1 - 56);
            *(_OWORD *)v7 = v49;
            *(_BYTE *)(a1 - 49) = 0;
            *(_BYTE *)(a1 - 72) = 0;
            v50 = *(_OWORD *)(a1 - 48);
            v51 = *(_OWORD *)(a1 - 32);
            *(_OWORD *)(v7 + 49) = *(_OWORD *)(a1 - 23);
            *(_OWORD *)(v7 + 24) = v50;
            *(_OWORD *)(v7 + 40) = v51;
          }
          if (*(char *)(a1 - 49) < 0)
            operator delete(*v48);
          a4 = 0;
          *(_QWORD *)(a1 - 72) = v35;
          *(_QWORD *)(a1 - 57) = *(_QWORD *)&v149[7];
          *(_QWORD *)(a1 - 64) = *(_QWORD *)v149;
          *(_BYTE *)(a1 - 49) = v36;
          *(_DWORD *)(a1 - 16) = v143;
          *(_OWORD *)(a1 - 48) = v131;
          *(_OWORD *)(a1 - 32) = v137;
          *(float *)(a1 - 12) = v16;
          *(_BYTE *)(a1 - 8) = v44;
          a3 = v47;
          goto LABEL_1;
        }
        v52 = (_QWORD *)(v7 + 72);
        v54 = v7 == a2 || v52 == (_QWORD *)a2;
        if ((a4 & 1) != 0)
        {
          if (!v54)
          {
            v55 = 0;
            v56 = v7;
            do
            {
              v57 = v52;
              if (*(float *)(v56 + 132) < *(float *)(v56 + 60))
              {
                v58 = *v52;
                *(_QWORD *)v150 = *(_QWORD *)(v56 + 80);
                *(_QWORD *)&v150[7] = *(_QWORD *)(v56 + 87);
                v59 = *(_BYTE *)(v56 + 95);
                v52[1] = 0;
                v52[2] = 0;
                *v52 = 0;
                v132 = *(_OWORD *)(v56 + 96);
                v138 = *(_OWORD *)(v56 + 112);
                v144 = *(_DWORD *)(v56 + 128);
                v60 = *(float *)(v56 + 132);
                v61 = *(_BYTE *)(v56 + 136);
                v62 = v55;
                while (1)
                {
                  v63 = v7 + v62;
                  v64 = (void **)(v7 + v62 + 72);
                  if (*(char *)(v7 + v62 + 95) < 0)
                    operator delete(*v64);
                  *(_OWORD *)v64 = *(_OWORD *)v63;
                  *(_QWORD *)(v7 + v62 + 88) = *(_QWORD *)(v63 + 16);
                  *(_BYTE *)(v63 + 23) = 0;
                  *(_BYTE *)v63 = 0;
                  v65 = *(_OWORD *)(v63 + 40);
                  *(_OWORD *)(v63 + 96) = *(_OWORD *)(v63 + 24);
                  *(_OWORD *)(v63 + 112) = v65;
                  *(_OWORD *)(v63 + 121) = *(_OWORD *)(v63 + 49);
                  if (!v62)
                    break;
                  v66 = v7 + v62;
                  v67 = *(float *)(v7 + v62 - 12);
                  v62 -= 72;
                  if (v60 >= v67)
                  {
                    v68 = v7 + v62 + 72;
                    v69 = v66 + 24;
                    goto LABEL_85;
                  }
                }
                v69 = v7 + 24;
                v68 = v7;
LABEL_85:
                if (*(char *)(v68 + 23) < 0)
                  operator delete(*(void **)v68);
                *(_QWORD *)v68 = v58;
                *(_QWORD *)(v68 + 15) = *(_QWORD *)&v150[7];
                *(_QWORD *)(v68 + 8) = *(_QWORD *)v150;
                *(_BYTE *)(v68 + 23) = v59;
                *(_DWORD *)(v69 + 32) = v144;
                *(_OWORD *)v69 = v132;
                *(_OWORD *)(v69 + 16) = v138;
                *(float *)(v68 + 60) = v60;
                *(_BYTE *)(v68 + 64) = v61;
              }
              v52 = v57 + 9;
              v55 += 72;
              v56 = (uint64_t)v57;
            }
            while (v57 + 9 != (_QWORD *)a2);
          }
        }
        else if (!v54)
        {
          do
          {
            v111 = v52;
            if (*(float *)(v7 + 132) < *(float *)(v7 + 60))
            {
              v112 = *v52;
              *(_QWORD *)v153 = *(_QWORD *)(v7 + 80);
              *(_QWORD *)&v153[7] = *(_QWORD *)(v7 + 87);
              v113 = *(_BYTE *)(v7 + 95);
              v52[1] = 0;
              v52[2] = 0;
              *v52 = 0;
              v135 = *(_OWORD *)(v7 + 96);
              v141 = *(_OWORD *)(v7 + 112);
              v146 = *(_DWORD *)(v7 + 128);
              v114 = *(float *)(v7 + 132);
              v115 = *(_BYTE *)(v7 + 136);
              v116 = v52;
              do
              {
                v117 = v116;
                if (*((char *)v116 + 23) < 0)
                  operator delete((void *)*v116);
                *(_OWORD *)v116 = *(_OWORD *)(v116 - 9);
                v118 = *((_OWORD *)v116 - 2);
                *(_OWORD *)(v116 + 3) = *((_OWORD *)v116 - 3);
                v116[2] = *(v116 - 7);
                *((_BYTE *)v116 - 72) = 0;
                v116 -= 9;
                *((_BYTE *)v117 - 49) = 0;
                *(_OWORD *)(v117 + 5) = v118;
                v119 = *((float *)v117 - 21);
                *(_OWORD *)((char *)v117 + 49) = *(_OWORD *)((char *)v117 - 23);
              }
              while (v114 < v119);
              if (*((char *)v117 - 49) < 0)
                operator delete((void *)*v116);
              v120 = v117 - 6;
              *v116 = v112;
              *(_QWORD *)((char *)v117 - 57) = *(_QWORD *)&v153[7];
              *(v117 - 8) = *(_QWORD *)v153;
              *((_BYTE *)v117 - 49) = v113;
              *((_DWORD *)v120 + 8) = v146;
              *(_OWORD *)v120 = v135;
              *((_OWORD *)v120 + 1) = v141;
              *((float *)v117 - 3) = v114;
              *((_BYTE *)v117 - 8) = v115;
            }
            v52 = v111 + 9;
            v7 = (uint64_t)v111;
          }
          while (v111 + 9 != (_QWORD *)a2);
        }
        return;
    }
  }
}

  v8 = (__int128 *)(a2 - 24);
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = a2 - v9;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v9) >> 3);
    switch(v11)
    {
      case 0:
      case 1:
        return *(double *)&v34;
      case 2:
        if (*(_DWORD *)(a2 - 20) > *(_DWORD *)(v9 + 4))
        {
          *(_QWORD *)&v99[16] = *(_QWORD *)(v9 + 16);
          *(_OWORD *)v99 = *(_OWORD *)v9;
          v34 = *v8;
          *(_QWORD *)(v9 + 13) = *(_QWORD *)(a2 - 11);
          *(_OWORD *)v9 = v34;
          *(_QWORD *)&v34 = *(_QWORD *)v99;
          *(_QWORD *)(a2 - 11) = *(_QWORD *)&v99[13];
          *v8 = *(_OWORD *)v99;
        }
        return *(double *)&v34;
      case 3:
        sub_24A211548((__int128 *)v9, (__int128 *)(v9 + 24), (__int128 *)(a2 - 24));
        return *(double *)&v34;
      case 4:
        *(_QWORD *)&v34 = sub_24A211670(v9, v9 + 24, v9 + 48, a2 - 24).n128_u64[0];
        return *(double *)&v34;
      case 5:
        *(_QWORD *)&v34 = sub_24A211760(v9, v9 + 24, v9 + 48, v9 + 72, a2 - 24).n128_u64[0];
        return *(double *)&v34;
      default:
        if (v10 <= 575)
        {
          v45 = (_DWORD *)(v9 + 24);
          v47 = v9 == a2 || v45 == (_DWORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v47)
            {
              v48 = 0;
              v49 = (_DWORD *)v9;
              do
              {
                v50 = v45;
                v51 = v49[7];
                if (v51 > v49[1])
                {
                  v52 = *v50;
                  v100 = *((_OWORD *)v49 + 2);
                  v53 = v48;
                  while (1)
                  {
                    v54 = v9 + v53;
                    v34 = *(_OWORD *)(v9 + v53);
                    *(_OWORD *)(v54 + 24) = v34;
                    *(_QWORD *)(v54 + 37) = *(_QWORD *)(v9 + v53 + 13);
                    if (!v53)
                      break;
                    v53 -= 24;
                    if (v51 <= *(_DWORD *)(v54 - 20))
                    {
                      v55 = v9 + v53 + 24;
                      goto LABEL_75;
                    }
                  }
                  v55 = v9;
LABEL_75:
                  *(_DWORD *)v55 = v52;
                  *(_DWORD *)(v55 + 4) = v51;
                  *(_QWORD *)(v55 + 8) = v100;
                  *(_QWORD *)(v55 + 13) = *(_QWORD *)((char *)&v100 + 5);
                }
                v45 = v50 + 6;
                v48 += 24;
                v49 = v50;
              }
              while (v50 + 6 != (_DWORD *)a2);
            }
          }
          else if (!v47)
          {
            do
            {
              v88 = (uint64_t)v45;
              v89 = *(_DWORD *)(a1 + 28);
              if (v89 > *(_DWORD *)(a1 + 4))
              {
                v90 = *v45;
                v103 = *(_OWORD *)(a1 + 32);
                do
                {
                  v34 = *(_OWORD *)(v45 - 6);
                  *(_OWORD *)v45 = v34;
                  *(_QWORD *)((char *)v45 + 13) = *(_QWORD *)((char *)v45 - 11);
                  v91 = *(v45 - 11);
                  v45 -= 6;
                }
                while (v89 > v91);
                *v45 = v90;
                v45[1] = v89;
                *(_QWORD *)((char *)v45 + 13) = *(_QWORD *)((char *)&v103 + 5);
                *((_QWORD *)v45 + 1) = v103;
              }
              v45 = (_DWORD *)(v88 + 24);
              a1 = v88;
            }
            while (v88 + 24 != a2);
          }
          return *(double *)&v34;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v56 = (unint64_t)(v11 - 2) >> 1;
            v57 = v56;
            do
            {
              v58 = v57;
              if (v56 >= v57)
              {
                v59 = (2 * v57) | 1;
                v60 = v9 + 24 * v59;
                if (2 * v58 + 2 < v11)
                {
                  v61 = *(_DWORD *)(v60 + 4);
                  v62 = *(_DWORD *)(v60 + 28);
                  v60 += 24 * (v61 > v62);
                  if (v61 > v62)
                    v59 = 2 * v58 + 2;
                }
                v63 = v9 + 24 * v58;
                v64 = *(_DWORD *)(v63 + 4);
                if (*(_DWORD *)(v60 + 4) <= v64)
                {
                  v65 = *(_DWORD *)v63;
                  v101 = *(_OWORD *)(v63 + 8);
                  do
                  {
                    v66 = v63;
                    v63 = v60;
                    v67 = *(_OWORD *)v60;
                    *(_QWORD *)(v66 + 13) = *(_QWORD *)(v60 + 13);
                    *(_OWORD *)v66 = v67;
                    if (v56 < v59)
                      break;
                    v68 = (2 * v59) | 1;
                    v60 = v9 + 24 * v68;
                    v69 = 2 * v59 + 2;
                    if (v69 < v11)
                    {
                      v70 = *(_DWORD *)(v60 + 4);
                      v71 = *(_DWORD *)(v60 + 28);
                      v60 += 24 * (v70 > v71);
                      if (v70 > v71)
                        v68 = v69;
                    }
                    v59 = v68;
                  }
                  while (*(_DWORD *)(v60 + 4) <= v64);
                  *(_DWORD *)v63 = v65;
                  *(_DWORD *)(v63 + 4) = v64;
                  *(_QWORD *)(v63 + 8) = v101;
                  *(_QWORD *)(v63 + 13) = *(_QWORD *)((char *)&v101 + 5);
                }
              }
              v57 = v58 - 1;
            }
            while (v58);
            v72 = v10 / 0x18uLL;
            do
            {
              v73 = 0;
              *(_QWORD *)&v102[16] = *(_QWORD *)(v9 + 16);
              *(_OWORD *)v102 = *(_OWORD *)v9;
              v74 = v9;
              do
              {
                v75 = v74 + 24 * v73 + 24;
                v76 = (2 * v73) | 1;
                v77 = 2 * v73 + 2;
                if (v77 < v72)
                {
                  v78 = *(_DWORD *)(v75 + 4);
                  v79 = *(_DWORD *)(v75 + 28);
                  v75 += 24 * (v78 > v79);
                  if (v78 > v79)
                    v76 = v77;
                }
                v80 = *(_OWORD *)v75;
                *(_QWORD *)(v74 + 13) = *(_QWORD *)(v75 + 13);
                *(_OWORD *)v74 = v80;
                v74 = v75;
                v73 = v76;
              }
              while (v76 <= (uint64_t)((unint64_t)(v72 - 2) >> 1));
              a2 -= 24;
              if (v75 == a2)
              {
                *(_QWORD *)&v34 = *(_QWORD *)v102;
                *(_QWORD *)(v75 + 13) = *(_QWORD *)&v102[13];
                *(_OWORD *)v75 = *(_OWORD *)v102;
              }
              else
              {
                v34 = *(_OWORD *)a2;
                *(_QWORD *)(v75 + 13) = *(_QWORD *)(a2 + 13);
                *(_OWORD *)v75 = v34;
                *(_QWORD *)&v34 = *(_QWORD *)v102;
                *(_QWORD *)(a2 + 13) = *(_QWORD *)&v102[13];
                *(_OWORD *)a2 = *(_OWORD *)v102;
                v81 = v75 - v9 + 24;
                if (v81 >= 25)
                {
                  v82 = (unint64_t)(-2 - 0x5555555555555555 * (v81 >> 3)) >> 1;
                  v83 = v9 + 24 * v82;
                  v84 = *(_DWORD *)(v75 + 4);
                  if (*(_DWORD *)(v83 + 4) > v84)
                  {
                    v85 = *(_DWORD *)v75;
                    v95 = *(_OWORD *)(v75 + 8);
                    do
                    {
                      v86 = v75;
                      v75 = v83;
                      v34 = *(_OWORD *)v83;
                      *(_QWORD *)(v86 + 13) = *(_QWORD *)(v83 + 13);
                      *(_OWORD *)v86 = v34;
                      if (!v82)
                        break;
                      v82 = (v82 - 1) >> 1;
                      v83 = v9 + 24 * v82;
                    }
                    while (*(_DWORD *)(v83 + 4) > v84);
                    *(_DWORD *)v75 = v85;
                    *(_DWORD *)(v75 + 4) = v84;
                    *(_QWORD *)(v75 + 8) = v95;
                    *(_QWORD *)(v75 + 13) = *(_QWORD *)((char *)&v95 + 5);
                  }
                }
              }
            }
            while (v72-- > 2);
          }
          return *(double *)&v34;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = v9 + 24 * ((unint64_t)v11 >> 1);
        if ((unint64_t)v10 < 0xC01)
        {
          sub_24A211548((__int128 *)(a1 + 24 * v12), (__int128 *)a1, (__int128 *)(a2 - 24));
        }
        else
        {
          sub_24A211548((__int128 *)a1, (__int128 *)(a1 + 24 * v12), (__int128 *)(a2 - 24));
          v14 = 3 * v12;
          v15 = (__int128 *)(a1 + 24 * v12 - 24);
          sub_24A211548((__int128 *)(a1 + 24), v15, (__int128 *)(a2 - 48));
          v16 = (__int128 *)(a1 + 24 + 8 * v14);
          sub_24A211548((__int128 *)(a1 + 48), v16, (__int128 *)(a2 - 72));
          sub_24A211548(v15, (__int128 *)v13, v16);
          *(_QWORD *)&v96[16] = *(_QWORD *)(a1 + 16);
          *(_OWORD *)v96 = *(_OWORD *)a1;
          v17 = *(_QWORD *)(v13 + 13);
          *(_OWORD *)a1 = *(_OWORD *)v13;
          *(_QWORD *)(a1 + 13) = v17;
          *(_QWORD *)(v13 + 13) = *(_QWORD *)&v96[13];
          *(_OWORD *)v13 = *(_OWORD *)v96;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v18 = *(_DWORD *)(a1 + 4);
          if (*(_DWORD *)(a1 - 20) > v18)
            goto LABEL_11;
          v35 = *(_DWORD *)a1;
          v34 = *(_OWORD *)(a1 + 8);
          v94 = v34;
          if (v18 <= *(_DWORD *)(a2 - 20))
          {
            v38 = a1 + 24;
            do
            {
              v9 = v38;
              if (v38 >= a2)
                break;
              v39 = *(_DWORD *)(v38 + 4);
              v38 += 24;
            }
            while (v18 <= v39);
          }
          else
          {
            v36 = a1;
            do
            {
              v9 = v36 + 24;
              v37 = *(_DWORD *)(v36 + 28);
              v36 += 24;
            }
            while (v18 <= v37);
          }
          v40 = a2;
          if (v9 < a2)
          {
            v41 = a2;
            do
            {
              v40 = v41 - 24;
              v42 = *(_DWORD *)(v41 - 20);
              v41 -= 24;
            }
            while (v18 > v42);
          }
          while (v9 < v40)
          {
            *(_QWORD *)&v98[16] = *(_QWORD *)(v9 + 16);
            *(_OWORD *)v98 = *(_OWORD *)v9;
            v34 = *(_OWORD *)v40;
            *(_QWORD *)(v9 + 13) = *(_QWORD *)(v40 + 13);
            *(_OWORD *)v9 = v34;
            *(_QWORD *)&v34 = *(_QWORD *)v98;
            *(_QWORD *)(v40 + 13) = *(_QWORD *)&v98[13];
            *(_OWORD *)v40 = *(_OWORD *)v98;
            do
            {
              v43 = *(_DWORD *)(v9 + 28);
              v9 += 24;
            }
            while (v18 <= v43);
            do
            {
              v44 = *(_DWORD *)(v40 - 20);
              v40 -= 24;
            }
            while (v18 > v44);
          }
          if (v9 - 24 != a1)
          {
            v34 = *(_OWORD *)(v9 - 24);
            *(_QWORD *)(a1 + 13) = *(_QWORD *)(v9 - 11);
            *(_OWORD *)a1 = v34;
          }
          a4 = 0;
          *(_DWORD *)(v9 - 24) = v35;
          *(_DWORD *)(v9 - 20) = v18;
          *(_QWORD *)(v9 - 11) = *(_QWORD *)((char *)&v94 + 5);
          *(_QWORD *)(v9 - 16) = v94;
          continue;
        }
        v18 = *(_DWORD *)(a1 + 4);
LABEL_11:
        v19 = *(_DWORD *)a1;
        v93 = *(_OWORD *)(a1 + 8);
        v20 = a1;
        do
        {
          v21 = v20;
          v20 += 24;
        }
        while (*(_DWORD *)(v21 + 28) > v18);
        v22 = a2;
        if (v21 == a1)
        {
          v25 = a2;
          while (v20 < v25)
          {
            v23 = v25 - 24;
            v26 = *(_DWORD *)(v25 - 20);
            v25 -= 24;
            if (v26 > v18)
              goto LABEL_21;
          }
          v23 = v25;
        }
        else
        {
          do
          {
            v23 = v22 - 24;
            v24 = *(_DWORD *)(v22 - 20);
            v22 -= 24;
          }
          while (v24 <= v18);
        }
LABEL_21:
        v9 = v20;
        if (v20 < v23)
        {
          v27 = v23;
          do
          {
            *(_OWORD *)v97 = *(_OWORD *)v9;
            v28 = *(_OWORD *)v9;
            *(_QWORD *)&v97[16] = *(_QWORD *)(v9 + 16);
            v29 = *(_QWORD *)(v27 + 13);
            *(_OWORD *)v9 = *(_OWORD *)v27;
            *(_QWORD *)(v9 + 13) = v29;
            *(_QWORD *)(v27 + 13) = *(_QWORD *)&v97[13];
            *(_OWORD *)v27 = v28;
            do
            {
              v30 = *(_DWORD *)(v9 + 28);
              v9 += 24;
            }
            while (v30 > v18);
            do
            {
              v31 = *(_DWORD *)(v27 - 20);
              v27 -= 24;
            }
            while (v31 <= v18);
          }
          while (v9 < v27);
        }
        if (v9 - 24 != a1)
        {
          v32 = *(_OWORD *)(v9 - 24);
          *(_QWORD *)(a1 + 13) = *(_QWORD *)(v9 - 11);
          *(_OWORD *)a1 = v32;
        }
        *(_DWORD *)(v9 - 24) = v19;
        *(_DWORD *)(v9 - 20) = v18;
        *(_QWORD *)(v9 - 11) = *(_QWORD *)((char *)&v93 + 5);
        *(_QWORD *)(v9 - 16) = v93;
        if (v20 < v23)
        {
LABEL_32:
          sub_24A210D0C(a1, v9 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v33 = sub_24A211898(a1, v9 - 24);
        if (!sub_24A211898(v9, a2))
        {
          if (v33)
            continue;
          goto LABEL_32;
        }
        a2 = v9 - 24;
        if (!v33)
          goto LABEL_1;
        return *(double *)&v34;
    }
  }
}

  v7 = a1;
  v121 = a1 + 144;
  v122 = a1 + 72;
  v123 = (_QWORD *)(a1 + 8);
  v8 = a1 + 24;
  while (2)
  {
    v9 = a2 - v7;
    v10 = 0x8E38E38E38E38E39 * ((uint64_t)(a2 - v7) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(float *)(a2 - 12) < *(float *)(v7 + 60))
          sub_24A20D16C((uint64_t *)v7, a2 - 72);
        return;
      case 3:
        sub_24A20D25C(v7, v7 + 72, a2 - 72);
        return;
      case 4:
        sub_24A20D308(v7, v7 + 72, v7 + 144, a2 - 72);
        return;
      case 5:
        sub_24A20D39C(v7, v7 + 72, v7 + 144, v7 + 216, a2 - 72);
        return;
      default:
        if (v9 > 1727)
        {
          if (!a3)
          {
            if (v7 != a2)
            {
              v70 = (unint64_t)(v10 - 2) >> 1;
              v71 = v70;
              do
              {
                v72 = v71;
                if (v70 >= v71)
                {
                  v73 = (2 * v71) | 1;
                  v74 = v7 + 72 * v73;
                  if (2 * v72 + 2 < v10 && *(float *)(v7 + 72 * v73 + 60) < *(float *)(v74 + 132))
                  {
                    v74 += 72;
                    v73 = 2 * v72 + 2;
                  }
                  v75 = *(float *)(v7 + 72 * v72 + 60);
                  if (*(float *)(v74 + 60) >= v75)
                  {
                    v76 = v7 + 72 * v72;
                    v129 = *(void **)v76;
                    *(_QWORD *)&v151[7] = *(_QWORD *)(v76 + 15);
                    *(_QWORD *)v151 = *(_QWORD *)(v76 + 8);
                    v127 = *(_BYTE *)(v76 + 23);
                    *(_QWORD *)v76 = 0;
                    *(_QWORD *)(v76 + 8) = 0;
                    *(_QWORD *)(v76 + 16) = 0;
                    v145 = *(_DWORD *)(v76 + 56);
                    v133 = *(_OWORD *)(v76 + 24);
                    v139 = *(_OWORD *)(v76 + 40);
                    v124 = *(_BYTE *)(v76 + 64);
                    do
                    {
                      v77 = v76;
                      v76 = v74;
                      if (*(char *)(v77 + 23) < 0)
                        operator delete(*(void **)v77);
                      v78 = *(_OWORD *)v76;
                      *(_QWORD *)(v77 + 16) = *(_QWORD *)(v76 + 16);
                      *(_OWORD *)v77 = v78;
                      *(_BYTE *)(v76 + 23) = 0;
                      *(_BYTE *)v76 = 0;
                      v79 = *(_OWORD *)(v76 + 24);
                      v80 = *(_OWORD *)(v76 + 40);
                      *(_OWORD *)(v77 + 49) = *(_OWORD *)(v76 + 49);
                      *(_OWORD *)(v77 + 40) = v80;
                      *(_OWORD *)(v77 + 24) = v79;
                      if (v70 < v73)
                        break;
                      v81 = (2 * v73) | 1;
                      v74 = v7 + 72 * v81;
                      if (2 * v73 + 2 < v10 && *(float *)(v7 + 72 * v81 + 60) < *(float *)(v74 + 132))
                      {
                        v74 += 72;
                        v81 = 2 * v73 + 2;
                      }
                      v73 = v81;
                    }
                    while (*(float *)(v74 + 60) >= v75);
                    if (*(char *)(v76 + 23) < 0)
                      operator delete(*(void **)v76);
                    *(_QWORD *)v76 = v129;
                    *(_QWORD *)(v76 + 15) = *(_QWORD *)&v151[7];
                    *(_QWORD *)(v76 + 8) = *(_QWORD *)v151;
                    *(_BYTE *)(v76 + 23) = v127;
                    *(_OWORD *)(v76 + 24) = v133;
                    *(_OWORD *)(v76 + 40) = v139;
                    *(_DWORD *)(v76 + 56) = v145;
                    *(float *)(v76 + 60) = v75;
                    *(_BYTE *)(v76 + 64) = v124;
                  }
                }
                v71 = v72 - 1;
              }
              while (v72);
              v82 = v9 / 0x48uLL;
              do
              {
                if (v82 >= 2)
                {
                  v83 = 0;
                  v84 = *(_QWORD *)v7;
                  *(_QWORD *)v147 = *(_QWORD *)(v7 + 8);
                  *(_QWORD *)&v147[7] = *(_QWORD *)(v7 + 15);
                  v85 = *(_BYTE *)(v7 + 23);
                  *(_QWORD *)(v7 + 8) = 0;
                  *(_QWORD *)(v7 + 16) = 0;
                  *(_QWORD *)v7 = 0;
                  v134 = *(_OWORD *)(v7 + 24);
                  *(_OWORD *)v140 = *(_OWORD *)(v7 + 40);
                  *(_OWORD *)&v140[9] = *(_OWORD *)(v7 + 49);
                  v86 = v7;
                  do
                  {
                    v87 = v83 + 1;
                    v88 = v86 + 72 * (v83 + 1);
                    v89 = 2 * v83;
                    v83 = (2 * v83) | 1;
                    v90 = v89 + 2;
                    if (v90 < v82 && *(float *)(v86 + 72 * v87 + 60) < *(float *)(v88 + 132))
                    {
                      v88 += 72;
                      v83 = v90;
                    }
                    if (*(char *)(v86 + 23) < 0)
                      operator delete(*(void **)v86);
                    v91 = *(_OWORD *)v88;
                    *(_QWORD *)(v86 + 16) = *(_QWORD *)(v88 + 16);
                    *(_OWORD *)v86 = v91;
                    *(_BYTE *)(v88 + 23) = 0;
                    *(_BYTE *)v88 = 0;
                    v92 = *(_OWORD *)(v88 + 24);
                    v93 = *(_OWORD *)(v88 + 40);
                    *(_OWORD *)(v86 + 49) = *(_OWORD *)(v88 + 49);
                    *(_OWORD *)(v86 + 40) = v93;
                    *(_OWORD *)(v86 + 24) = v92;
                    v86 = v88;
                  }
                  while (v83 <= (uint64_t)((unint64_t)(v82 - 2) >> 1));
                  v94 = (__int128 *)(v88 + 24);
                  v95 = (void **)(a2 - 72);
                  v96 = *(char *)(v88 + 23);
                  if (v88 == a2 - 72)
                  {
                    if (v96 < 0)
                      operator delete(*(void **)v88);
                    *(_QWORD *)v88 = v84;
                    *(_QWORD *)(v88 + 15) = *(_QWORD *)&v147[7];
                    *(_QWORD *)(v88 + 8) = *(_QWORD *)v147;
                    *(_BYTE *)(v88 + 23) = v85;
                    *(_OWORD *)(v88 + 49) = *(_OWORD *)&v140[9];
                    *v94 = v134;
                    *(_OWORD *)(v88 + 40) = *(_OWORD *)v140;
                  }
                  else
                  {
                    if (v96 < 0)
                      operator delete(*(void **)v88);
                    v97 = *(_OWORD *)v95;
                    *(_QWORD *)(v88 + 16) = *(_QWORD *)(a2 - 56);
                    *(_OWORD *)v88 = v97;
                    *(_BYTE *)(a2 - 49) = 0;
                    *(_BYTE *)(a2 - 72) = 0;
                    v98 = *(_OWORD *)(a2 - 48);
                    v99 = *(_OWORD *)(a2 - 32);
                    *(_OWORD *)(v88 + 49) = *(_OWORD *)(a2 - 23);
                    *v94 = v98;
                    *(_OWORD *)(v88 + 40) = v99;
                    if (*(char *)(a2 - 49) < 0)
                      operator delete(*v95);
                    v100 = (_OWORD *)(a2 - 48);
                    *(_QWORD *)(a2 - 72) = v84;
                    *(_QWORD *)(a2 - 57) = *(_QWORD *)&v147[7];
                    *(_QWORD *)(a2 - 64) = *(_QWORD *)v147;
                    *(_BYTE *)(a2 - 49) = v85;
                    *(_OWORD *)((char *)v100 + 25) = *(_OWORD *)&v140[9];
                    *v100 = v134;
                    v100[1] = *(_OWORD *)v140;
                    v101 = v88 + 72 - v7;
                    if (v101 >= 73)
                    {
                      v102 = (unint64_t)(-2 - 0x71C71C71C71C71C7 * (v101 >> 3)) >> 1;
                      v103 = *(float *)(v88 + 60);
                      if (*(float *)(v7 + 72 * v102 + 60) < v103)
                      {
                        v104 = *(void **)v88;
                        *(_QWORD *)v156 = *(_QWORD *)(v88 + 8);
                        *(_QWORD *)&v156[7] = *(_QWORD *)(v88 + 15);
                        v125 = *(_BYTE *)(v88 + 23);
                        *(_QWORD *)(v88 + 8) = 0;
                        *(_QWORD *)(v88 + 16) = 0;
                        *(_QWORD *)v88 = 0;
                        v155 = *(_DWORD *)(v88 + 56);
                        v152 = *v94;
                        v154 = *(_OWORD *)(v88 + 40);
                        v105 = *(_BYTE *)(v88 + 64);
                        do
                        {
                          if (*(char *)(v88 + 23) < 0)
                            operator delete(*(void **)v88);
                          v106 = v7 + 72 * v102;
                          v107 = *(_OWORD *)v106;
                          *(_QWORD *)(v88 + 16) = *(_QWORD *)(v106 + 16);
                          *(_OWORD *)v88 = v107;
                          *(_BYTE *)(v106 + 23) = 0;
                          *(_BYTE *)v106 = 0;
                          v108 = *(_OWORD *)(v106 + 24);
                          v109 = *(_OWORD *)(v106 + 40);
                          *(_OWORD *)(v88 + 49) = *(_OWORD *)(v106 + 49);
                          *(_OWORD *)(v88 + 40) = v109;
                          *(_OWORD *)(v88 + 24) = v108;
                          if (!v102)
                            break;
                          v102 = (v102 - 1) >> 1;
                          v88 = v106;
                        }
                        while (*(float *)(v7 + 72 * v102 + 60) < v103);
                        if (*(char *)(v106 + 23) < 0)
                          operator delete(*(void **)v106);
                        *(_QWORD *)v106 = v104;
                        *(_QWORD *)(v106 + 15) = *(_QWORD *)&v156[7];
                        *(_QWORD *)(v106 + 8) = *(_QWORD *)v156;
                        *(_BYTE *)(v106 + 23) = v125;
                        *(_DWORD *)(v106 + 56) = v155;
                        *(_OWORD *)(v106 + 24) = v152;
                        *(_OWORD *)(v106 + 40) = v154;
                        *(float *)(v106 + 60) = v103;
                        *(_BYTE *)(v106 + 64) = v105;
                      }
                    }
                  }
                }
                a2 -= 72;
              }
              while ((unint64_t)v82-- > 2);
            }
            return;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = v7 + 72 * ((unint64_t)v10 >> 1);
          v13 = a2 - 72;
          if ((unint64_t)v9 < 0x2401)
          {
            sub_24A20D25C(v12, v7, v13);
          }
          else
          {
            sub_24A20D25C(v7, v12, v13);
            v14 = v7 + 72 * v11;
            sub_24A20D25C(v122, v14 - 72, a2 - 144);
            sub_24A20D25C(v121, v14 + 72, a2 - 216);
            sub_24A20D25C(v14 - 72, v12, v14 + 72);
            sub_24A20D16C((uint64_t *)v7, v12);
          }
          v15 = a3 - 1;
          v128 = v15;
          if ((a4 & 1) != 0)
          {
            v16 = *(float *)(v7 + 60);
LABEL_11:
            v17 = *(_QWORD *)v7;
            *(_QWORD *)v148 = *v123;
            *(_QWORD *)&v148[7] = *(_QWORD *)((char *)v123 + 7);
            v18 = *(_BYTE *)(v7 + 23);
            *(_QWORD *)(v7 + 8) = 0;
            *(_QWORD *)(v7 + 16) = 0;
            *(_QWORD *)v7 = 0;
            v142 = *(_DWORD *)(v8 + 32);
            v130 = *(_OWORD *)v8;
            v136 = *(_OWORD *)(v8 + 16);
            v19 = v7;
            v20 = *(_BYTE *)(v7 + 64);
            do
            {
              v21 = v19;
              v19 += 72;
            }
            while (*(float *)(v21 + 132) < v16);
            v22 = a2;
            if (v21 == v7)
            {
              v25 = a2;
              while (v19 < v25)
              {
                v23 = v25 - 72;
                v26 = *(float *)(v25 - 12);
                v25 -= 72;
                if (v26 < v16)
                  goto LABEL_21;
              }
              v23 = v25;
            }
            else
            {
              do
              {
                v23 = v22 - 72;
                v24 = *(float *)(v22 - 12);
                v22 -= 72;
              }
              while (v24 >= v16);
            }
LABEL_21:
            a1 = v19;
            if (v19 < v23)
            {
              v27 = v23;
              do
              {
                sub_24A20D16C((uint64_t *)a1, v27);
                do
                {
                  v28 = *(float *)(a1 + 132);
                  a1 += 72;
                }
                while (v28 < v16);
                do
                {
                  v29 = *(float *)(v27 - 12);
                  v27 -= 72;
                }
                while (v29 >= v16);
              }
              while (a1 < v27);
            }
            v30 = (void **)(a1 - 72);
            if (a1 - 72 != v7)
            {
              if (*(char *)(v7 + 23) < 0)
                operator delete(*(void **)v7);
              v31 = *(_OWORD *)v30;
              *(_QWORD *)(v7 + 16) = *(_QWORD *)(a1 - 56);
              *(_OWORD *)v7 = v31;
              *(_BYTE *)(a1 - 49) = 0;
              *(_BYTE *)(a1 - 72) = 0;
              v32 = *(_OWORD *)(a1 - 48);
              v33 = *(_OWORD *)(a1 - 32);
              *(_OWORD *)(v8 + 25) = *(_OWORD *)(a1 - 23);
              *(_OWORD *)v8 = v32;
              *(_OWORD *)(v8 + 16) = v33;
            }
            if (*(char *)(a1 - 49) < 0)
              operator delete(*v30);
            *(_QWORD *)(a1 - 72) = v17;
            *(_QWORD *)(a1 - 57) = *(_QWORD *)&v148[7];
            *(_QWORD *)(a1 - 64) = *(_QWORD *)v148;
            *(_BYTE *)(a1 - 49) = v18;
            *(_DWORD *)(a1 - 16) = v142;
            *(_OWORD *)(a1 - 48) = v130;
            *(_OWORD *)(a1 - 32) = v136;
            *(float *)(a1 - 12) = v16;
            *(_BYTE *)(a1 - 8) = v20;
            a3 = v128;
            if (v19 >= v23)
            {
              v34 = sub_24A2140F8(v7, a1 - 72);
              if (sub_24A2140F8(a1, a2))
              {
                a2 = a1 - 72;
                if (!v34)
                  continue;
                return;
              }
              if (v34)
                goto LABEL_1;
            }
            sub_24A213404(v7, a1 - 72, v128, a4 & 1);
            a4 = 0;
            goto LABEL_1;
          }
          v16 = *(float *)(v7 + 60);
          if (*(float *)(v7 - 12) < v16)
            goto LABEL_11;
          v35 = *(_QWORD *)v7;
          *(_QWORD *)v149 = *(_QWORD *)(v7 + 8);
          *(_QWORD *)&v149[7] = *(_QWORD *)(v7 + 15);
          v36 = *(_BYTE *)(v7 + 23);
          *(_QWORD *)(v7 + 8) = 0;
          *(_QWORD *)(v7 + 16) = 0;
          *(_QWORD *)v7 = 0;
          v131 = *(_OWORD *)(v7 + 24);
          v137 = *(_OWORD *)(v7 + 40);
          v143 = *(_DWORD *)(v7 + 56);
          if (v16 >= *(float *)(a2 - 12))
          {
            v39 = v7 + 72;
            do
            {
              a1 = v39;
              if (v39 >= a2)
                break;
              v40 = *(float *)(v39 + 60);
              v39 += 72;
            }
            while (v16 >= v40);
          }
          else
          {
            v37 = v7;
            do
            {
              a1 = v37 + 72;
              v38 = *(float *)(v37 + 132);
              v37 += 72;
            }
            while (v16 >= v38);
          }
          v41 = a2;
          if (a1 < a2)
          {
            v42 = a2;
            do
            {
              v41 = v42 - 72;
              v43 = *(float *)(v42 - 12);
              v42 -= 72;
            }
            while (v16 < v43);
          }
          v44 = *(_BYTE *)(v7 + 64);
          while (a1 < v41)
          {
            sub_24A20D16C((uint64_t *)a1, v41);
            do
            {
              v45 = *(float *)(a1 + 132);
              a1 += 72;
            }
            while (v16 >= v45);
            do
            {
              v46 = *(float *)(v41 - 12);
              v41 -= 72;
            }
            while (v16 < v46);
          }
          v47 = v15;
          v48 = (void **)(a1 - 72);
          if (a1 - 72 != v7)
          {
            if (*(char *)(v7 + 23) < 0)
              operator delete(*(void **)v7);
            v49 = *(_OWORD *)v48;
            *(_QWORD *)(v7 + 16) = *(_QWORD *)(a1 - 56);
            *(_OWORD *)v7 = v49;
            *(_BYTE *)(a1 - 49) = 0;
            *(_BYTE *)(a1 - 72) = 0;
            v50 = *(_OWORD *)(a1 - 48);
            v51 = *(_OWORD *)(a1 - 32);
            *(_OWORD *)(v7 + 49) = *(_OWORD *)(a1 - 23);
            *(_OWORD *)(v7 + 24) = v50;
            *(_OWORD *)(v7 + 40) = v51;
          }
          if (*(char *)(a1 - 49) < 0)
            operator delete(*v48);
          a4 = 0;
          *(_QWORD *)(a1 - 72) = v35;
          *(_QWORD *)(a1 - 57) = *(_QWORD *)&v149[7];
          *(_QWORD *)(a1 - 64) = *(_QWORD *)v149;
          *(_BYTE *)(a1 - 49) = v36;
          *(_DWORD *)(a1 - 16) = v143;
          *(_OWORD *)(a1 - 48) = v131;
          *(_OWORD *)(a1 - 32) = v137;
          *(float *)(a1 - 12) = v16;
          *(_BYTE *)(a1 - 8) = v44;
          a3 = v47;
          goto LABEL_1;
        }
        v52 = (_QWORD *)(v7 + 72);
        v54 = v7 == a2 || v52 == (_QWORD *)a2;
        if ((a4 & 1) != 0)
        {
          if (!v54)
          {
            v55 = 0;
            v56 = v7;
            do
            {
              v57 = v52;
              if (*(float *)(v56 + 132) < *(float *)(v56 + 60))
              {
                v58 = *v52;
                *(_QWORD *)v150 = *(_QWORD *)(v56 + 80);
                *(_QWORD *)&v150[7] = *(_QWORD *)(v56 + 87);
                v59 = *(_BYTE *)(v56 + 95);
                v52[1] = 0;
                v52[2] = 0;
                *v52 = 0;
                v132 = *(_OWORD *)(v56 + 96);
                v138 = *(_OWORD *)(v56 + 112);
                v144 = *(_DWORD *)(v56 + 128);
                v60 = *(float *)(v56 + 132);
                v61 = *(_BYTE *)(v56 + 136);
                v62 = v55;
                while (1)
                {
                  v63 = v7 + v62;
                  v64 = (void **)(v7 + v62 + 72);
                  if (*(char *)(v7 + v62 + 95) < 0)
                    operator delete(*v64);
                  *(_OWORD *)v64 = *(_OWORD *)v63;
                  *(_QWORD *)(v7 + v62 + 88) = *(_QWORD *)(v63 + 16);
                  *(_BYTE *)(v63 + 23) = 0;
                  *(_BYTE *)v63 = 0;
                  v65 = *(_OWORD *)(v63 + 40);
                  *(_OWORD *)(v63 + 96) = *(_OWORD *)(v63 + 24);
                  *(_OWORD *)(v63 + 112) = v65;
                  *(_OWORD *)(v63 + 121) = *(_OWORD *)(v63 + 49);
                  if (!v62)
                    break;
                  v66 = v7 + v62;
                  v67 = *(float *)(v7 + v62 - 12);
                  v62 -= 72;
                  if (v60 >= v67)
                  {
                    v68 = v7 + v62 + 72;
                    v69 = v66 + 24;
                    goto LABEL_85;
                  }
                }
                v69 = v7 + 24;
                v68 = v7;
LABEL_85:
                if (*(char *)(v68 + 23) < 0)
                  operator delete(*(void **)v68);
                *(_QWORD *)v68 = v58;
                *(_QWORD *)(v68 + 15) = *(_QWORD *)&v150[7];
                *(_QWORD *)(v68 + 8) = *(_QWORD *)v150;
                *(_BYTE *)(v68 + 23) = v59;
                *(_DWORD *)(v69 + 32) = v144;
                *(_OWORD *)v69 = v132;
                *(_OWORD *)(v69 + 16) = v138;
                *(float *)(v68 + 60) = v60;
                *(_BYTE *)(v68 + 64) = v61;
              }
              v52 = v57 + 9;
              v55 += 72;
              v56 = (uint64_t)v57;
            }
            while (v57 + 9 != (_QWORD *)a2);
          }
        }
        else if (!v54)
        {
          do
          {
            v111 = v52;
            if (*(float *)(v7 + 132) < *(float *)(v7 + 60))
            {
              v112 = *v52;
              *(_QWORD *)v153 = *(_QWORD *)(v7 + 80);
              *(_QWORD *)&v153[7] = *(_QWORD *)(v7 + 87);
              v113 = *(_BYTE *)(v7 + 95);
              v52[1] = 0;
              v52[2] = 0;
              *v52 = 0;
              v135 = *(_OWORD *)(v7 + 96);
              v141 = *(_OWORD *)(v7 + 112);
              v146 = *(_DWORD *)(v7 + 128);
              v114 = *(float *)(v7 + 132);
              v115 = *(_BYTE *)(v7 + 136);
              v116 = v52;
              do
              {
                v117 = v116;
                if (*((char *)v116 + 23) < 0)
                  operator delete((void *)*v116);
                *(_OWORD *)v116 = *(_OWORD *)(v116 - 9);
                v118 = *((_OWORD *)v116 - 2);
                *(_OWORD *)(v116 + 3) = *((_OWORD *)v116 - 3);
                v116[2] = *(v116 - 7);
                *((_BYTE *)v116 - 72) = 0;
                v116 -= 9;
                *((_BYTE *)v117 - 49) = 0;
                *(_OWORD *)(v117 + 5) = v118;
                v119 = *((float *)v117 - 21);
                *(_OWORD *)((char *)v117 + 49) = *(_OWORD *)((char *)v117 - 23);
              }
              while (v114 < v119);
              if (*((char *)v117 - 49) < 0)
                operator delete((void *)*v116);
              v120 = v117 - 6;
              *v116 = v112;
              *(_QWORD *)((char *)v117 - 57) = *(_QWORD *)&v153[7];
              *(v117 - 8) = *(_QWORD *)v153;
              *((_BYTE *)v117 - 49) = v113;
              *((_DWORD *)v120 + 8) = v146;
              *(_OWORD *)v120 = v135;
              *((_OWORD *)v120 + 1) = v141;
              *((float *)v117 - 3) = v114;
              *((_BYTE *)v117 - 8) = v115;
            }
            v52 = v111 + 9;
            v7 = (uint64_t)v111;
          }
          while (v111 + 9 != (_QWORD *)a2);
        }
        return;
    }
  }
}

__n128 sub_24A20D16C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  _BYTE v11[25];
  _BYTE v12[15];

  v3 = *a1;
  *(_QWORD *)v12 = a1[1];
  *(_QWORD *)&v12[7] = *(uint64_t *)((char *)a1 + 15);
  v4 = *((_BYTE *)a1 + 23);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v10 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)v11 = *(_OWORD *)(a1 + 5);
  *(_OWORD *)&v11[9] = *(_OWORD *)((char *)a1 + 49);
  v5 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v5;
  *(_BYTE *)(a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v6 = (_OWORD *)(a2 + 24);
  v7 = *(_OWORD *)(a2 + 49);
  v8 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 5) = v8;
  *(_OWORD *)((char *)a1 + 49) = v7;
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)v12;
  *(_QWORD *)(a2 + 15) = *(_QWORD *)&v12[7];
  *(_BYTE *)(a2 + 23) = v4;
  *v6 = v10;
  v6[1] = *(_OWORD *)v11;
  result = *(__n128 *)&v11[9];
  *(_OWORD *)((char *)v6 + 25) = *(_OWORD *)&v11[9];
  return result;
}

double sub_24A20D25C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __n128 v6;
  float v7;
  uint64_t v8;

  v5 = a1;
  v6.n128_u32[0] = *(_DWORD *)(a2 + 60);
  v7 = *(float *)(a3 + 60);
  if (v6.n128_f32[0] >= *(float *)(a1 + 60))
  {
    if (v7 < v6.n128_f32[0])
    {
      v6 = sub_24A20D16C((uint64_t *)a2, a3);
      v6.n128_u32[0] = *(_DWORD *)(a2 + 60);
      if (v6.n128_f32[0] < *(float *)(v5 + 60))
      {
        a1 = v5;
        v8 = a2;
        goto LABEL_9;
      }
    }
  }
  else
  {
    if (v7 < v6.n128_f32[0])
    {
LABEL_5:
      v8 = a3;
LABEL_9:
      v6.n128_u64[0] = sub_24A20D16C((uint64_t *)a1, v8).n128_u64[0];
      return v6.n128_f64[0];
    }
    v6 = sub_24A20D16C((uint64_t *)a1, a2);
    v6.n128_u32[0] = *(_DWORD *)(a3 + 60);
    if (v6.n128_f32[0] < *(float *)(a2 + 60))
    {
      a1 = a2;
      goto LABEL_5;
    }
  }
  return v6.n128_f64[0];
}

double sub_24A20D308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 v8;

  v8.n128_f64[0] = sub_24A20D25C(a1, a2, a3);
  v8.n128_u32[0] = *(_DWORD *)(a4 + 60);
  if (v8.n128_f32[0] < *(float *)(a3 + 60))
  {
    v8 = sub_24A20D16C((uint64_t *)a3, a4);
    v8.n128_u32[0] = *(_DWORD *)(a3 + 60);
    if (v8.n128_f32[0] < *(float *)(a2 + 60))
    {
      v8 = sub_24A20D16C((uint64_t *)a2, a3);
      v8.n128_u32[0] = *(_DWORD *)(a2 + 60);
      if (v8.n128_f32[0] < *(float *)(a1 + 60))
        v8.n128_u64[0] = sub_24A20D16C((uint64_t *)a1, a2).n128_u64[0];
    }
  }
  return v8.n128_f64[0];
}

double sub_24A20D39C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 v10;

  v10.n128_f64[0] = sub_24A20D308(a1, a2, a3, a4);
  v10.n128_u32[0] = *(_DWORD *)(a5 + 60);
  if (v10.n128_f32[0] < *(float *)(a4 + 60))
  {
    v10 = sub_24A20D16C((uint64_t *)a4, a5);
    v10.n128_u32[0] = *(_DWORD *)(a4 + 60);
    if (v10.n128_f32[0] < *(float *)(a3 + 60))
    {
      v10 = sub_24A20D16C((uint64_t *)a3, a4);
      v10.n128_u32[0] = *(_DWORD *)(a3 + 60);
      if (v10.n128_f32[0] < *(float *)(a2 + 60))
      {
        v10 = sub_24A20D16C((uint64_t *)a2, a3);
        v10.n128_u32[0] = *(_DWORD *)(a2 + 60);
        if (v10.n128_f32[0] < *(float *)(a1 + 60))
          v10.n128_u64[0] = sub_24A20D16C((uint64_t *)a1, a2).n128_u64[0];
      }
    }
  }
  return v10.n128_f64[0];
}

BOOL sub_24A20D45C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  float v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void **v15;
  __int128 v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  int v24;
  _BYTE v25[15];

  v4 = 0x8E38E38E38E38E39 * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(float *)(a2 - 12) < *(float *)(a1 + 60))
      {
        sub_24A20D16C((uint64_t *)a1, a2 - 72);
        return 1;
      }
      return result;
    case 3uLL:
      sub_24A20D25C(a1, a1 + 72, a2 - 72);
      return 1;
    case 4uLL:
      sub_24A20D308(a1, a1 + 72, a1 + 144, a2 - 72);
      return 1;
    case 5uLL:
      sub_24A20D39C(a1, a1 + 72, a1 + 144, a1 + 216, a2 - 72);
      return 1;
    default:
      v6 = a1 + 144;
      sub_24A20D25C(a1, a1 + 72, a1 + 144);
      v7 = a1 + 216;
      if (a1 + 216 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    v10 = *(float *)(v7 + 60);
    if (v10 < *(float *)(v6 + 60))
    {
      v21 = *(_QWORD *)v7;
      *(_QWORD *)v25 = *(_QWORD *)(v7 + 8);
      *(_QWORD *)&v25[7] = *(_QWORD *)(v7 + 15);
      v11 = *(_BYTE *)(v7 + 23);
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)v7 = 0;
      v22 = *(_OWORD *)(v7 + 24);
      v23 = *(_OWORD *)(v7 + 40);
      v24 = *(_DWORD *)(v7 + 56);
      v12 = v8;
      v13 = *(_BYTE *)(v7 + 64);
      while (1)
      {
        v14 = a1 + v12;
        v15 = (void **)(a1 + v12 + 216);
        if (*(char *)(a1 + v12 + 239) < 0)
          operator delete(*v15);
        *(_OWORD *)v15 = *(_OWORD *)(v14 + 144);
        *(_QWORD *)(a1 + v12 + 232) = *(_QWORD *)(v14 + 160);
        *(_BYTE *)(v14 + 167) = 0;
        *(_BYTE *)(v14 + 144) = 0;
        v16 = *(_OWORD *)(v14 + 184);
        *(_OWORD *)(v14 + 240) = *(_OWORD *)(v14 + 168);
        *(_OWORD *)(v14 + 256) = v16;
        *(_OWORD *)(v14 + 265) = *(_OWORD *)(v14 + 193);
        if (v12 == -144)
          break;
        v17 = a1 + v12;
        v18 = *(float *)(a1 + v12 + 132);
        v12 -= 72;
        if (v10 >= v18)
        {
          v19 = a1 + v12 + 216;
          v20 = v17 + 168;
          goto LABEL_14;
        }
      }
      v20 = a1 + 24;
      v19 = a1;
LABEL_14:
      if (*(char *)(v19 + 23) < 0)
        operator delete(*(void **)v19);
      *(_QWORD *)v19 = v21;
      *(_QWORD *)(v19 + 8) = *(_QWORD *)v25;
      *(_QWORD *)(v19 + 15) = *(_QWORD *)&v25[7];
      *(_BYTE *)(v19 + 23) = v11;
      *(_OWORD *)v20 = v22;
      *(_OWORD *)(v20 + 16) = v23;
      *(_DWORD *)(v20 + 32) = v24;
      *(float *)(v19 + 60) = v10;
      ++v9;
      *(_BYTE *)(v19 + 64) = v13;
      if (v9 == 8)
        return v7 + 72 == a2;
    }
    v6 = v7;
    v8 += 72;
    v7 += 72;
    if (v7 == a2)
      return 1;
  }
}

uint64_t *sub_24A20D6F4(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 72;
      v6 = *(_OWORD *)(v3 - 72);
      *(_QWORD *)(v4 - 56) = *(_QWORD *)(v3 - 56);
      *(_OWORD *)(v4 - 72) = v6;
      *(_QWORD *)(v3 - 64) = 0;
      *(_QWORD *)(v3 - 56) = 0;
      *(_QWORD *)(v3 - 72) = 0;
      v7 = *(_OWORD *)(v3 - 48);
      v8 = *(_OWORD *)(v3 - 32);
      *(_OWORD *)(v4 - 23) = *(_OWORD *)(v3 - 23);
      *(_OWORD *)(v4 - 48) = v7;
      *(_OWORD *)(v4 - 32) = v8;
      v4 -= 72;
      v3 -= 72;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v9 = *result;
  *result = v5;
  a2[1] = v9;
  v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t sub_24A20D788(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 9;
      *(_QWORD *)(a1 + 16) = v2 - 9;
      if (*((char *)v2 - 49) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_24A20D7E8(uint64_t result, float *a2, int a3, int a4, int a5, char a6, float a7)
{
  float v7;
  int v8;
  int v9;
  float v10;

  *(float *)(result + 4) = a2[1] + a7;
  v7 = a2[4];
  *(float *)(result + 16) = v7;
  v8 = *((_DWORD *)a2 + 3);
  *(_DWORD *)(result + 12) = v8;
  v9 = *((_DWORD *)a2 + 6);
  *(_DWORD *)(result + 24) = v9;
  if (a3 == a5)
  {
    *(_DWORD *)(result + 12) = v8 + 1;
    *(float *)(result + 16) = v7 + a7;
  }
  else if ((a6 & 1) == 0)
  {
    *(_DWORD *)(result + 24) = v9 + 1;
  }
  *(float *)(result + 8) = a2[2];
  v10 = *a2;
  if (a4)
    v10 = *(float *)&a4;
  *(float *)result = v10;
  *(_DWORD *)(result + 20) = *((_DWORD *)a2 + 5) + 1;
  return result;
}

unsigned __int8 *sub_24A20D85C(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  _BYTE *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unsigned __int8 **v37;
  unint64_t v38;
  void *v40;
  _QWORD v41[2];
  char v42;

  v7 = sub_24A20DCBC((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (sub_24A20E10C(i + 16, a2))
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v16 = (char *)operator new(0x48uLL);
  v41[0] = v16;
  v41[1] = a1 + 16;
  v42 = 0;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v8;
  v17 = v16 + 16;
  v18 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    sub_24A20C108(v17, *(void **)v18, *((_QWORD *)v18 + 1));
  }
  else
  {
    v19 = *v18;
    *((_QWORD *)v16 + 4) = *((_QWORD *)v18 + 2);
    *(_OWORD *)v17 = v19;
  }
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  v42 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v9 || (float)(v21 * (float)v9) < v20)
  {
    v22 = 1;
    if (v9 >= 3)
      v22 = (v9 & (v9 - 1)) != 0;
    v23 = v22 | (2 * v9);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = (int8x8_t)v24;
    else
      prime = (int8x8_t)v23;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v9)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v9)
    {
      v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (*(_QWORD *)&prime <= v32)
        prime = (int8x8_t)v32;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            sub_24A20B680();
          v26 = operator new(8 * *(_QWORD *)&prime);
          v27 = *(void **)a1;
          *(_QWORD *)a1 = v26;
          if (v27)
            operator delete(v27);
          v28 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
          while (*(_QWORD *)&prime != v28);
          v29 = (_QWORD *)*v15;
          if (*v15)
          {
            v30 = v29[1];
            v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(_QWORD *)&prime)
                v30 %= *(_QWORD *)&prime;
            }
            else
            {
              v30 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v15;
            v35 = (_QWORD *)*v29;
            if (*v29)
            {
              do
              {
                v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(_QWORD *)&prime)
                    v36 %= *(_QWORD *)&prime;
                }
                else
                {
                  v36 &= *(_QWORD *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  *v29 = *v35;
                  *v35 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v36);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v36) = v35;
                  v35 = v29;
                }
                v36 = v30;
LABEL_58:
                v29 = v35;
                v35 = (_QWORD *)*v35;
                v30 = v36;
              }
              while (v35);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        v40 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v40)
          operator delete(v40);
        v9 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v37 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
  i = (unsigned __int8 *)v41[0];
  if (v37)
  {
    *(_QWORD *)v41[0] = *v37;
LABEL_75:
    *v37 = i;
    goto LABEL_76;
  }
  *(_QWORD *)v41[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v15;
  if (*(_QWORD *)i)
  {
    v38 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9)
        v38 %= v9;
    }
    else
    {
      v38 &= v9 - 1;
    }
    v37 = (unsigned __int8 **)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  v41[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_24A20E1AC((uint64_t)v41);
  return i;
}

void sub_24A20DCA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_24A20E1AC((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_24A20DCBC(uint64_t a1)
{
  int v1;
  unint64_t v2;
  BOOL v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;

  v1 = *(char *)(a1 + 23);
  v2 = *(_QWORD *)(a1 + 8);
  v3 = v1 < 0;
  if (v1 >= 0)
    v4 = (uint64_t *)a1;
  else
    v4 = *(uint64_t **)a1;
  if (!v3)
    v2 = *(unsigned __int8 *)(a1 + 23);
  if (v2 > 0x20)
  {
    if (v2 > 0x40)
    {
      v34 = 0x9DDFEA08EB382D69;
      v44 = *(uint64_t *)((char *)v4 + v2 - 48);
      v43 = *(uint64_t *)((char *)v4 + v2 - 40);
      v45 = *(uint64_t *)((char *)v4 + v2 - 24);
      v47 = *(uint64_t *)((char *)v4 + v2 - 64);
      v46 = *(uint64_t *)((char *)v4 + v2 - 56);
      v48 = *(uint64_t *)((char *)v4 + v2 - 16);
      v49 = *(uint64_t *)((char *)v4 + v2 - 8);
      v50 = v46 + v48;
      v51 = 0x9DDFEA08EB382D69
          * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))));
      v52 = 0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47));
      v53 = v47 + v2 + v46 + v44;
      v54 = v53 + v43;
      v55 = __ROR8__(v53, 44) + v47 + v2 + __ROR8__(v43 + v47 + v2 - 0x622015F714C7D297 * (v51 ^ (v51 >> 47)), 21);
      v56 = v46 + v48 + *(uint64_t *)((char *)v4 + v2 - 32) - 0x4B6D499041670D8DLL;
      v57 = v56 + v45 + v48;
      v58 = __ROR8__(v57, 44);
      v59 = v57 + v49;
      v60 = v58 + v56 + __ROR8__(v56 + v43 + v49, 21);
      v62 = *v4;
      v61 = v4 + 4;
      v63 = v62 - 0x4B6D499041670D8DLL * v43;
      v64 = -(uint64_t)((v2 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v65 = *(v61 - 3);
        v66 = v63 + v54 + v50 + v65;
        v67 = v61[2];
        v68 = v61[3];
        v69 = v61[1];
        v50 = v69 + v54 - 0x4B6D499041670D8DLL * __ROR8__(v50 + v55 + v67, 42);
        v70 = v52 + v59;
        v71 = *(v61 - 2);
        v72 = *(v61 - 1);
        v73 = *(v61 - 4) - 0x4B6D499041670D8DLL * v55;
        v74 = v73 + v59 + v72;
        v75 = v73 + v65 + v71;
        v54 = v75 + v72;
        v76 = __ROR8__(v75, 44) + v73;
        v77 = (0xB492B66FBE98F273 * __ROR8__(v66, 37)) ^ v60;
        v63 = 0xB492B66FBE98F273 * __ROR8__(v70, 33);
        v55 = v76 + __ROR8__(v74 + v77, 21);
        v78 = v63 + v60 + *v61;
        v59 = v78 + v69 + v67 + v68;
        v60 = __ROR8__(v78 + v69 + v67, 44) + v78 + __ROR8__(v50 + v71 + v78 + v68, 21);
        v61 += 8;
        v52 = v77;
        v64 += 64;
      }
      while (v64);
      v79 = 0x9DDFEA08EB382D69
          * (v59 ^ ((0x9DDFEA08EB382D69 * (v59 ^ v54)) >> 47) ^ (0x9DDFEA08EB382D69 * (v59 ^ v54)));
      v80 = v63
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) ^ ((0x9DDFEA08EB382D69 * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) >> 47));
      v81 = 0x9DDFEA08EB382D69
          * (v80 ^ (v77 - 0x4B6D499041670D8DLL * (v50 ^ (v50 >> 47)) - 0x622015F714C7D297 * (v79 ^ (v79 >> 47))));
      v35 = 0x9DDFEA08EB382D69 * (v80 ^ (v81 >> 47) ^ v81);
    }
    else
    {
      v9 = (char *)v4 + v2;
      v10 = *(uint64_t *)((char *)v4 + v2 - 16);
      v11 = *(uint64_t *)((char *)v4 + v2 - 8);
      v12 = v4[1];
      v13 = *v4 - 0x3C5A37A36834CED9 * (v10 + v2);
      v16 = v4 + 2;
      v14 = v4[2];
      v15 = v16[1];
      v17 = __ROR8__(v13 + v15, 52);
      v18 = __ROR8__(v13, 37);
      v19 = v13 + v12;
      v20 = __ROR8__(v19, 7);
      v21 = v19 + v14;
      v22 = v20 + v18;
      v23 = *((_QWORD *)v9 - 4) + v14;
      v24 = v11 + v15;
      v25 = __ROR8__(v24 + v23, 52);
      v26 = v22 + v17;
      v27 = __ROR8__(v23, 37);
      v28 = *((_QWORD *)v9 - 3) + v23;
      v29 = __ROR8__(v28, 7);
      v30 = v26 + __ROR8__(v21, 31);
      v31 = v28 + v10;
      v32 = v31 + v24;
      v33 = v21 + v15 + v27 + v29 + v25 + __ROR8__(v31, 31);
      v34 = 0x9AE16A3B2F90404FLL;
      v35 = v30
          - 0x3C5A37A36834CED9
          * ((0xC3A5C85C97CB3127 * (v32 + v30) - 0x651E95C4D06FBFB1 * v33) ^ ((0xC3A5C85C97CB3127 * (v32 + v30)
                                                                                 - 0x651E95C4D06FBFB1 * v33) >> 47));
    }
    return (v35 ^ (v35 >> 47)) * v34;
  }
  else
  {
    if (v2 > 0x10)
    {
      v36 = v4[1];
      v37 = 0xB492B66FBE98F273 * *v4;
      v38 = 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)v4 + v2 - 8);
      v39 = __ROR8__(v38, 30) + __ROR8__(v37 - v36, 43);
      v40 = v37 + v2 + __ROR8__(v36 ^ 0xC949D7C7509E6557, 20) - v38;
      v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v39 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)v4 + v2 - 16)));
      v42 = v40 ^ (v41 >> 47) ^ v41;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    if (v2 >= 9)
    {
      v5 = *v4;
      v6 = *(uint64_t *)((char *)v4 + v2 - 8);
      v7 = __ROR8__(v6 + v2, v2);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) >> 47))) ^ v6;
    }
    if (v2 >= 4)
    {
      v82 = *(_DWORD *)v4;
      v83 = *(unsigned int *)((char *)v4 + v2 - 4);
      v84 = 0x9DDFEA08EB382D69 * ((v2 + (8 * v82)) ^ v83);
      v42 = v83 ^ (v84 >> 47) ^ v84;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    result = 0x9AE16A3B2F90404FLL;
    if (v2)
    {
      v85 = (0xC949D7C7509E6557 * (v2 + 4 * *((unsigned __int8 *)v4 + v2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)v4 | ((unint64_t)*((unsigned __int8 *)v4 + (v2 >> 1)) << 8)));
      return 0x9AE16A3B2F90404FLL * (v85 ^ (v85 >> 47));
    }
  }
  return result;
}

BOOL sub_24A20E10C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

void sub_24A20E1AC(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_24A20E1F0((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void sub_24A20E1F0(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 32);
  sub_24A20E240(&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_24A20E240(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_24A20E280((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_24A20E280(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

uint64_t *sub_24A20E2CC(_QWORD *a1, int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = (v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

_QWORD *sub_24A20E380(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_24A20C190();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void *sub_24A20E42C(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    sub_24A20B680();
  return operator new(24 * a1);
}

uint64_t *sub_24A20E470(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 24;
      v6 = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_OWORD *)(v4 - 24) = v6;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      *(_QWORD *)(v3 - 24) = 0;
      v4 -= 24;
      v3 -= 24;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v7 = *result;
  *result = v5;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_24A20E4F4(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_24A20E554(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;

  if (a4)
  {
    v6 = result;
    sub_24A2120D4(result, a4);
    result = sub_24A212120((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((_QWORD *)v6 + 1) = result;
  }
  return result;
}

void sub_24A20E5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_24A20E240(&a9);
  _Unwind_Resume(a1);
}

void sub_24A20E5D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  __int128 v10;
  std::string::size_type v11;
  std::string::size_type v12;
  std::string *v13;
  float v14;
  _OWORD *v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  _BYTE *v22;
  std::string::size_type v23;
  __int128 v24;
  _QWORD *v25;
  _QWORD *v26;
  std::string *p_dst;
  std::string::size_type size;
  _QWORD *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint8x8_t v36;
  unint64_t v37;
  std::string::size_type v38;
  uint64_t v39;
  unint64_t v40;
  std::string::size_type v41;
  uint64_t v42;
  __int128 v43;
  float *v44;
  _QWORD *v45;
  std::string *v46;
  std::string::size_type v47;
  _QWORD *v48;
  _QWORD *v49;
  float v50;
  _QWORD *v51;
  void **v52;
  char *v53;
  unint64_t v54;
  float v55;
  float v56;
  _BOOL8 v57;
  unint64_t v58;
  unint64_t v59;
  size_t v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  unsigned __int8 *v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t i;
  int v78;
  void **v79;
  char *v80;
  char *v81;
  void *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  __int128 v92;
  uint64_t v93;
  __int128 v94;
  std::string::size_type v95;
  __int128 v96;
  int v97;
  std::string::size_type v98;
  unint64_t v99;
  int v100;
  uint64_t v101;
  int v102;
  int v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  unint64_t v117;
  __int128 v118;
  uint64_t v119;
  int v120;
  int v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  char *v133;
  unint64_t v134;
  __int128 v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  char *v148;
  unint64_t v149;
  __int128 v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  _DWORD *v154;
  char *v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  __int128 v163;
  uint64_t v164;
  unint64_t v165;
  char *v166;
  _DWORD *v167;
  char *v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  __int128 v176;
  unint64_t v178;
  uint8x8_t v179;
  void **v180;
  _QWORD *v181;
  unint64_t v182;
  float v183;
  float v184;
  _BOOL8 v185;
  unint64_t v186;
  unint64_t v187;
  int8x8_t prime;
  void *v189;
  void *v190;
  uint64_t v191;
  _QWORD *v192;
  unint64_t v193;
  uint8x8_t v194;
  unint64_t v195;
  uint8x8_t v196;
  uint64_t v197;
  _QWORD *v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  unint64_t v203;
  uint64_t v204;
  void *v205;
  uint64_t *v206;
  uint64_t *v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  _QWORD *v215;
  _BYTE *v217;
  uint64_t v218;
  uint64_t v219;
  float *v220;
  char **v221;
  std::string __p;
  std::string v223;
  std::string v224;
  std::string __str;
  std::string __dst;
  uint64_t v227;
  _BYTE *v228;
  unint64_t v229;
  std::string *v230;
  std::string *v231;
  std::string v232;
  char *v233;
  unint64_t *v234;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v227 = 0;
  v228 = 0;
  v229 = 0;
  if (a3 != a4)
  {
    v5 = a4;
    v6 = a3;
    v7 = (unint64_t)&v229;
    v8 = (uint64_t *)(a2 + 440);
    v220 = (float *)(a2 + 512);
    v9 = a2 + 400;
    v213 = (_QWORD *)(a2 + 456);
    v218 = a2 + 400;
    while (1)
    {
      if (*(char *)(v6 + 23) < 0)
        sub_24A20C108(&__dst, *(void **)v6, *(_QWORD *)(v6 + 8));
      else
        __dst = *(std::string *)v6;
      voiceactions::StringSplit(&__dst, " \t", (uint64_t *)&__str);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3) >= 2)
        break;
LABEL_127:
      v232.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
      sub_24A20E240((void ***)&v232);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      v6 += 24;
      if (v6 == v5)
        goto LABEL_130;
    }
    if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) < 0)
    {
      sub_24A20C108(&v224, *(void **)__str.__r_.__value_.__l.__data_, *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 8));
    }
    else
    {
      v10 = *(_OWORD *)__str.__r_.__value_.__l.__data_;
      v224.__r_.__value_.__r.__words[2] = *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 16);
      *(_OWORD *)&v224.__r_.__value_.__l.__data_ = v10;
    }
    v11 = std::string::find(&v224, 58, 0);
    if (v11 == -1)
    {
      v14 = -1.0;
    }
    else
    {
      v12 = v11;
      std::string::basic_string(&v232, (const std::string *)__str.__r_.__value_.__l.__data_, 0, v11, (std::allocator<char> *)&v223);
      if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v224.__r_.__value_.__l.__data_);
      v224 = v232;
      v13 = std::string::basic_string(&v232, (const std::string *)__str.__r_.__value_.__l.__data_, v12 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v223);
      v14 = std::stof(v13, 0);
      if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v232.__r_.__value_.__l.__data_);
      std::string::operator=((std::string *)__str.__r_.__value_.__l.__data_, &v224);
    }
    voiceactions::StringJoin(&__str, " ", &v223);
    v15 = v228;
    if ((unint64_t)v228 >= v229)
    {
      v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v228[-v227] >> 3);
      v18 = v17 + 1;
      if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_24A20A098();
      if (0x5555555555555556 * ((uint64_t)(v229 - v227) >> 3) > v18)
        v18 = 0x5555555555555556 * ((uint64_t)(v229 - v227) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v229 - v227) >> 3) >= 0x555555555555555)
        v19 = 0xAAAAAAAAAAAAAAALL;
      else
        v19 = v18;
      v234 = &v229;
      if (v19)
      {
        v21 = (char *)sub_24A20E42C(v19);
      }
      else
      {
        v21 = 0;
        v20 = 0;
      }
      v23 = (std::string::size_type)&v21[24 * v17];
      v232.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
      v232.__r_.__value_.__l.__size_ = v23;
      v232.__r_.__value_.__r.__words[2] = v23;
      v233 = &v21[24 * v20];
      if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_24A20C108((_BYTE *)v23, v223.__r_.__value_.__l.__data_, v223.__r_.__value_.__l.__size_);
        v23 = v232.__r_.__value_.__r.__words[2];
      }
      else
      {
        v24 = *(_OWORD *)&v223.__r_.__value_.__l.__data_;
        *(_QWORD *)(v23 + 16) = *((_QWORD *)&v223.__r_.__value_.__l + 2);
        *(_OWORD *)v23 = v24;
      }
      v232.__r_.__value_.__r.__words[2] = v23 + 24;
      sub_24A20E470(&v227, &v232);
      v22 = v228;
      sub_24A20E4F4((uint64_t)&v232);
    }
    else
    {
      if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_24A20C108(v228, v223.__r_.__value_.__l.__data_, v223.__r_.__value_.__l.__size_);
      }
      else
      {
        v16 = *(_OWORD *)&v223.__r_.__value_.__l.__data_;
        *((_QWORD *)v228 + 2) = *((_QWORD *)&v223.__r_.__value_.__l + 2);
        *v15 = v16;
      }
      v22 = (char *)v15 + 24;
    }
    v228 = v22;
    memset(&v232, 0, sizeof(v232));
    sub_24A210254((char *)&v232, (__int128 *)(__str.__r_.__value_.__r.__words[0] + 24), (__int128 *)__str.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((int64_t)(__str.__r_.__value_.__l.__size_ - (__str.__r_.__value_.__r.__words[0] + 24)) >> 3));
    voiceactions::StringJoin(&v232, "_", &__p);
    v231 = &v232;
    sub_24A20E240((void ***)&v231);
    if (v14 != -1.0)
    {
      sub_24A20B7CC(MEMORY[0x24BEDB310], (uint64_t)"Custom threshold ", 17);
      v25 = (_QWORD *)std::ostream::operator<<();
      v26 = sub_24A20B7CC(v25, (uint64_t)" for \"", 6);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_dst = &__dst;
      else
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        size = __dst.__r_.__value_.__l.__size_;
LABEL_121:
      v65 = sub_24A20B7CC(v26, (uint64_t)p_dst, size);
      sub_24A20B7CC(v65, (uint64_t)"\"\n", 2);
      *(float *)&v232.__r_.__value_.__l.__data_ = v14;
      v233 = 0;
      *(_OWORD *)&v232.__r_.__value_.__r.__words[1] = 0uLL;
      sub_24A210254(&v232.__r_.__value_.__s.__data_[8], (__int128 *)(__str.__r_.__value_.__r.__words[0] + 24), (__int128 *)__str.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((int64_t)(__str.__r_.__value_.__l.__size_ - (__str.__r_.__value_.__r.__words[0] + 24)) >> 3));
      v230 = &v224;
      v66 = sub_24A20D85C(v9, (unsigned __int8 *)&v224, (__int128 **)&v230);
      *((_DWORD *)v66 + 10) = v232.__r_.__value_.__l.__data_;
      sub_24A210630((uint64_t *)v66 + 6);
      *((_OWORD *)v66 + 3) = *(_OWORD *)&v232.__r_.__value_.__r.__words[1];
      *((_QWORD *)v66 + 8) = v233;
      v233 = 0;
      *(_OWORD *)&v232.__r_.__value_.__r.__words[1] = 0uLL;
      v231 = (std::string *)&v232.__r_.__value_.__r.__words[1];
      sub_24A20E240((void ***)&v231);
      v232.__r_.__value_.__r.__words[0] = (std::string::size_type)&v224;
      *((float *)sub_24A2103D0(a1, (unsigned __int8 *)&v224, (__int128 **)&v232) + 10) = v14;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v223.__r_.__value_.__l.__data_);
      if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v224.__r_.__value_.__l.__data_);
      goto LABEL_127;
    }
    if (sub_24A2102D8((_QWORD *)(a2 + 440), (unsigned __int8 *)&__p))
    {
      v232.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v14 = *((float *)sub_24A2103D0(a2 + 440, (unsigned __int8 *)&__p, (__int128 **)&v232) + 10);
      sub_24A20B7CC(MEMORY[0x24BEDB310], (uint64_t)"Threshold from file ", 20);
      v29 = (_QWORD *)std::ostream::operator<<();
      v26 = sub_24A20B7CC(v29, (uint64_t)" for \"", 6);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_dst = &__dst;
      else
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        size = __dst.__r_.__value_.__l.__size_;
      goto LABEL_121;
    }
    sub_24A20E380(&v232, "DEFAULT");
    v30 = sub_24A2102D8((_QWORD *)(a2 + 440), (unsigned __int8 *)&v232);
    v31 = v30;
    if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v232.__r_.__value_.__l.__data_);
      if (v31)
        goto LABEL_51;
    }
    else if (v30)
    {
LABEL_51:
      v32 = sub_24A20E380(&v232, "DEFAULT");
      v33 = sub_24A20DCBC((uint64_t)v32);
      v34 = v33;
      v35 = *(_QWORD *)(a2 + 448);
      if (v35)
      {
        v36 = (uint8x8_t)vcnt_s8((int8x8_t)v35);
        v36.i16[0] = vaddlv_u8(v36);
        v37 = v36.u32[0];
        if (v36.u32[0] > 1uLL)
        {
          v7 = v33;
          if (v33 >= v35)
            v7 = v33 % v35;
        }
        else
        {
          v7 = (v35 - 1) & v33;
        }
        v52 = *(void ***)(*v8 + 8 * v7);
        if (v52)
        {
          v53 = (char *)*v52;
          if (*v52)
          {
            do
            {
              v54 = *((_QWORD *)v53 + 1);
              if (v54 == v34)
              {
                if (sub_24A20E10C((unsigned __int8 *)v53 + 16, (unsigned __int8 *)&v232))
                {
                  v5 = a4;
                  v7 = (unint64_t)&v229;
                  goto LABEL_113;
                }
              }
              else
              {
                if (v37 > 1)
                {
                  if (v54 >= v35)
                    v54 %= v35;
                }
                else
                {
                  v54 &= v35 - 1;
                }
                if (v54 != v7)
                  break;
              }
              v53 = *(char **)v53;
            }
            while (v53);
          }
        }
      }
      v53 = (char *)operator new(0x30uLL);
      *(_QWORD *)v53 = 0;
      *((_QWORD *)v53 + 1) = v34;
      *(std::string *)(v53 + 16) = v232;
      memset(&v232, 0, sizeof(v232));
      *((_DWORD *)v53 + 10) = 0;
      v55 = (float)(unint64_t)(*(_QWORD *)(a2 + 464) + 1);
      v56 = *(float *)(a2 + 472);
      if (!v35 || (float)(v56 * (float)v35) < v55)
      {
        v57 = (v35 & (v35 - 1)) != 0;
        if (v35 < 3)
          v57 = 1;
        v58 = v57 | (2 * v35);
        v59 = vcvtps_u32_f32(v55 / v56);
        if (v58 <= v59)
          v60 = v59;
        else
          v60 = v58;
        sub_24A211EDC(a2 + 440, v60);
        v35 = *(_QWORD *)(a2 + 448);
        if ((v35 & (v35 - 1)) != 0)
        {
          if (v34 >= v35)
            v7 = v34 % v35;
          else
            v7 = v34;
        }
        else
        {
          v7 = (v35 - 1) & v34;
        }
      }
      v61 = *v8;
      v62 = *(_QWORD **)(*v8 + 8 * v7);
      if (v62)
      {
        *(_QWORD *)v53 = *v62;
        v5 = a4;
        v7 = (unint64_t)&v229;
      }
      else
      {
        *(_QWORD *)v53 = *v213;
        *v213 = v53;
        *(_QWORD *)(v61 + 8 * v7) = v213;
        v5 = a4;
        v7 = (unint64_t)&v229;
        if (!*(_QWORD *)v53)
          goto LABEL_112;
        v63 = *(_QWORD *)(*(_QWORD *)v53 + 8);
        if ((v35 & (v35 - 1)) != 0)
        {
          if (v63 >= v35)
            v63 %= v35;
        }
        else
        {
          v63 &= v35 - 1;
        }
        v62 = (_QWORD *)(*v8 + 8 * v63);
      }
      *v62 = v53;
LABEL_112:
      ++*(_QWORD *)(a2 + 464);
LABEL_113:
      v14 = *((float *)v53 + 10);
      v9 = v218;
      if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v232.__r_.__value_.__l.__data_);
      sub_24A20B7CC(MEMORY[0x24BEDB310], (uint64_t)"Using override threshold ", 25);
      v64 = (_QWORD *)std::ostream::operator<<();
      v26 = sub_24A20B7CC(v64, (uint64_t)" for \"", 6);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_dst = &__dst;
      else
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        size = __dst.__r_.__value_.__l.__size_;
      goto LABEL_121;
    }
    v38 = __str.__r_.__value_.__r.__words[0];
    v14 = 0.0;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3) >= 2)
    {
      v39 = 0;
      v40 = 1;
      do
      {
        v41 = v38 + v39;
        v42 = v38 + v39 + 24;
        if (*(char *)(v41 + 47) < 0)
        {
          sub_24A20C108(&v232, *(void **)v42, *(_QWORD *)(v41 + 32));
        }
        else
        {
          v43 = *(_OWORD *)v42;
          v232.__r_.__value_.__r.__words[2] = *(_QWORD *)(v42 + 16);
          *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v43;
        }
        if (sub_24A2102D8((_QWORD *)(a2 + 440), (unsigned __int8 *)&v232))
        {
          v231 = &v232;
          v44 = (float *)(sub_24A2103D0(a2 + 440, (unsigned __int8 *)&v232, (__int128 **)&v231) + 40);
        }
        else
        {
          v45 = sub_24A20B7CC(MEMORY[0x24BEDB310], (uint64_t)"Missing threshold for ", 22);
          if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v46 = &v232;
          else
            v46 = (std::string *)v232.__r_.__value_.__r.__words[0];
          if ((v232.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v47 = HIBYTE(v232.__r_.__value_.__r.__words[2]);
          else
            v47 = v232.__r_.__value_.__l.__size_;
          v48 = sub_24A20B7CC(v45, (uint64_t)v46, v47);
          sub_24A20B7CC(v48, (uint64_t)", using default ", 16);
          v49 = (_QWORD *)std::ostream::operator<<();
          sub_24A20B7CC(v49, (uint64_t)"\n", 1);
          v44 = v220;
        }
        v50 = *v44;
        if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v232.__r_.__value_.__l.__data_);
        v14 = v14 + v50;
        ++v40;
        v38 = __str.__r_.__value_.__r.__words[0];
        v39 += 24;
      }
      while (0xAAAAAAAAAAAAAAABLL
            * ((uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3) > v40);
    }
    sub_24A20B7CC(MEMORY[0x24BEDB310], (uint64_t)"Computed threshold ", 19);
    v9 = v218;
    v7 = (unint64_t)&v229;
    v51 = (_QWORD *)std::ostream::operator<<();
    v26 = sub_24A20B7CC(v51, (uint64_t)" for \"", 6);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    goto LABEL_121;
  }
LABEL_130:
  v67 = a1 + 16;
  v68 = (_QWORD *)MEMORY[0x24BEDB310];
  v69 = (unint64_t)"\n";
  while (1)
  {
    v67 = *(_QWORD *)v67;
    if (!v67)
      break;
    sub_24A20B7CC(v68, (uint64_t)"threshold[ \"", 12);
    v70 = *(char *)(v67 + 39);
    if (v70 >= 0)
      v71 = v67 + 16;
    else
      v71 = *(_QWORD *)(v67 + 16);
    if (v70 >= 0)
      v72 = *(unsigned __int8 *)(v67 + 39);
    else
      v72 = *(_QWORD *)(v67 + 24);
    sub_24A20B7CC(v68, v71, v72);
    sub_24A20B7CC(v68, (uint64_t)"\"] = ", 5);
    v73 = (_QWORD *)std::ostream::operator<<();
    sub_24A20B7CC(v73, (uint64_t)"\n", 1);
  }
  v221 = (char **)(a2 + 80);
  sub_24A210668((uint64_t *)(a2 + 80));
  if (*(_QWORD *)(a2 + 128))
  {
    v74 = *(_QWORD **)(a2 + 120);
    if (v74)
    {
      do
      {
        v75 = (_QWORD *)*v74;
        operator delete(v74);
        v74 = v75;
      }
      while (v75);
    }
    *(_QWORD *)(a2 + 120) = 0;
    v76 = *(_QWORD *)(a2 + 112);
    if (v76)
    {
      for (i = 0; i != v76; ++i)
        *(_QWORD *)(*(_QWORD *)(a2 + 104) + 8 * i) = 0;
    }
    *(_QWORD *)(a2 + 128) = 0;
  }
  sub_24A20E380(&v232, "<eps>");
  sub_24A2106BC(a2, &v232);
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v232.__r_.__value_.__l.__data_);
  sub_24A20E380(&v232, "<eps>");
  sub_24A210B1C(a2, (__int128 *)&v232);
  if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v232.__r_.__value_.__l.__data_);
  memset(&v232, 0, sizeof(v232));
  sub_24A210B90(v221, (uint64_t)&v232);
  if (v232.__r_.__value_.__r.__words[0])
    operator delete(v232.__r_.__value_.__l.__data_);
  if (*(char *)(a2 + 511) < 0)
  {
    if (*(_QWORD *)(a2 + 496))
      goto LABEL_154;
  }
  else if (*(_BYTE *)(a2 + 511))
  {
LABEL_154:
    v78 = sub_24A210B1C(a2, (__int128 *)(a2 + 488));
    goto LABEL_157;
  }
  v78 = -1;
LABEL_157:
  *(_DWORD *)(a2 + 480) = v78;
  v79 = *(void ***)(a2 + 80);
  v80 = (char *)v79[1];
  v81 = (char *)v79[2];
  if (v80 >= v81)
  {
    v83 = 0xAAAAAAAAAAAAAAABLL * ((v80 - (_BYTE *)*v79) >> 3);
    v84 = v83 + 1;
    if (v83 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_24A20A098();
    v85 = 0xAAAAAAAAAAAAAAABLL * ((v81 - (_BYTE *)*v79) >> 3);
    if (2 * v85 > v84)
      v84 = 2 * v85;
    if (v85 >= 0x555555555555555)
      v86 = 0xAAAAAAAAAAAAAAALL;
    else
      v86 = v84;
    if (v86)
      v86 = (unint64_t)sub_24A20E42C(v86);
    else
      v87 = 0;
    v88 = v86 + 24 * v83;
    v89 = v86 + 24 * v87;
    *(_QWORD *)v88 = 0;
    *(_DWORD *)(v88 + 8) = v78;
    *(_QWORD *)(v88 + 12) = 0;
    *(_BYTE *)(v88 + 20) = 0;
    v82 = (void *)(v88 + 24);
    v91 = (char *)*v79;
    v90 = (char *)v79[1];
    if (v90 != *v79)
    {
      do
      {
        v92 = *(_OWORD *)(v90 - 24);
        *(_QWORD *)(v88 - 11) = *(_QWORD *)(v90 - 11);
        *(_OWORD *)(v88 - 24) = v92;
        v88 -= 24;
        v90 -= 24;
      }
      while (v90 != v91);
      v90 = (char *)*v79;
    }
    *v79 = (void *)v88;
    v79[1] = v82;
    v79[2] = (void *)v89;
    if (v90)
      operator delete(v90);
  }
  else
  {
    *(_QWORD *)v80 = 0;
    *((_DWORD *)v80 + 2) = v78;
    *(_QWORD *)(v80 + 12) = 0;
    v82 = v80 + 24;
    v80[20] = 0;
  }
  v79[1] = v82;
  v93 = v227;
  v217 = v228;
  if ((_BYTE *)v227 != v228)
  {
    v215 = (_QWORD *)(a2 + 120);
    while (1)
    {
      if (*(char *)(v93 + 23) < 0)
      {
        sub_24A20C108(&v232, *(void **)v93, *(_QWORD *)(v93 + 8));
      }
      else
      {
        v94 = *(_OWORD *)v93;
        v232.__r_.__value_.__r.__words[2] = *(_QWORD *)(v93 + 16);
        *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v94;
      }
      if (std::string::find(&v232, 58, 0) != -1)
        __assert_rtn("CompileFstFromProns", "OnlineFstSpottingDecoder.hpp", 821, "line.find(':') == std::string::npos");
      voiceactions::StringSplit(&v232, " \t", (uint64_t *)&__dst);
      v95 = __dst.__r_.__value_.__r.__words[0];
      if (*(char *)(__dst.__r_.__value_.__r.__words[0] + 23) < 0)
      {
        sub_24A20C108(&__str, *(void **)__dst.__r_.__value_.__l.__data_, *(_QWORD *)(__dst.__r_.__value_.__r.__words[0] + 8));
        v95 = __dst.__r_.__value_.__r.__words[0];
      }
      else
      {
        v96 = *(_OWORD *)__dst.__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(__dst.__r_.__value_.__r.__words[0] + 16);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v96;
      }
      memset(&v224, 0, sizeof(v224));
      sub_24A210254((char *)&v224, (__int128 *)(v95 + 24), (__int128 *)__dst.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__dst.__r_.__value_.__l.__size_ - (v95 + 24)) >> 3));
      v219 = v93;
      sub_24A210630((uint64_t *)&__dst);
      __dst = v224;
      memset(&v224, 0, sizeof(v224));
      v223.__r_.__value_.__r.__words[0] = (std::string::size_type)&v224;
      sub_24A20E240((void ***)&v223);
      v97 = -1 - 1431655765 * ((*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
      v98 = __dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
      {
        v99 = 1;
        do
        {
          v100 = sub_24A210B1C(a2, (__int128 *)(v98 + 24 * (v99 - 1)));
          memset(&v224, 0, sizeof(v224));
          sub_24A210B90(v221, (uint64_t)&v224);
          if (v224.__r_.__value_.__r.__words[0])
            operator delete(v224.__r_.__value_.__l.__data_);
          v101 = *(_QWORD *)(a2 + 88);
          v102 = v97 + 2 * v99;
          v103 = v102 - 1;
          v104 = *(_DWORD *)(a2 + 480);
          v105 = *(_QWORD *)(v101 - 16);
          v106 = *(_QWORD *)(v101 - 8);
          if (v105 >= v106)
          {
            v108 = *(_QWORD *)(v101 - 24);
            v109 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v105 - v108) >> 3);
            v110 = v109 + 1;
            if (v109 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_24A20A098();
            v111 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v106 - v108) >> 3);
            if (2 * v111 > v110)
              v110 = 2 * v111;
            if (v111 >= 0x555555555555555)
              v112 = 0xAAAAAAAAAAAAAAALL;
            else
              v112 = v110;
            if (v112)
              v112 = (unint64_t)sub_24A20E42C(v112);
            else
              v113 = 0;
            v114 = v112 + 24 * v109;
            *(_DWORD *)v114 = v103;
            *(_DWORD *)(v114 + 4) = v103;
            *(_DWORD *)(v114 + 8) = v104;
            *(_QWORD *)(v114 + 12) = 0;
            *(_BYTE *)(v114 + 20) = 0;
            v116 = *(char **)(v101 - 24);
            v115 = *(char **)(v101 - 16);
            v117 = v114;
            if (v115 != v116)
            {
              do
              {
                v118 = *(_OWORD *)(v115 - 24);
                *(_QWORD *)(v117 - 11) = *(_QWORD *)(v115 - 11);
                *(_OWORD *)(v117 - 24) = v118;
                v117 -= 24;
                v115 -= 24;
              }
              while (v115 != v116);
              v115 = *(char **)(v101 - 24);
            }
            v107 = v114 + 24;
            *(_QWORD *)(v101 - 24) = v117;
            *(_QWORD *)(v101 - 16) = v114 + 24;
            *(_QWORD *)(v101 - 8) = v112 + 24 * v113;
            if (v115)
              operator delete(v115);
          }
          else
          {
            *(_DWORD *)v105 = v103;
            *(_DWORD *)(v105 + 4) = v103;
            *(_DWORD *)(v105 + 8) = v104;
            *(_QWORD *)(v105 + 12) = 0;
            v107 = v105 + 24;
            *(_BYTE *)(v105 + 20) = 0;
          }
          *(_QWORD *)(v101 - 16) = v107;
          v119 = *(_QWORD *)(a2 + 88);
          if (v99 == 1)
            v120 = 0;
          else
            v120 = v97 + 2 * (v99 - 1);
          v121 = *(_DWORD *)(a2 + 480);
          v122 = *(_QWORD *)(v119 - 16);
          v123 = *(_QWORD *)(v119 - 8);
          if (v122 >= v123)
          {
            v125 = *(_QWORD *)(v119 - 24);
            v126 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v122 - v125) >> 3);
            v127 = v126 + 1;
            if (v126 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_24A20A098();
            v128 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v123 - v125) >> 3);
            if (2 * v128 > v127)
              v127 = 2 * v128;
            if (v128 >= 0x555555555555555)
              v129 = 0xAAAAAAAAAAAAAAALL;
            else
              v129 = v127;
            if (v129)
              v129 = (unint64_t)sub_24A20E42C(v129);
            else
              v130 = 0;
            v131 = v129 + 24 * v126;
            *(_DWORD *)v131 = v103;
            *(_DWORD *)(v131 + 4) = v120;
            *(_DWORD *)(v131 + 8) = v121;
            *(_QWORD *)(v131 + 12) = 0;
            *(_BYTE *)(v131 + 20) = 0;
            v133 = *(char **)(v119 - 24);
            v132 = *(char **)(v119 - 16);
            v134 = v131;
            if (v132 != v133)
            {
              do
              {
                v135 = *(_OWORD *)(v132 - 24);
                *(_QWORD *)(v134 - 11) = *(_QWORD *)(v132 - 11);
                *(_OWORD *)(v134 - 24) = v135;
                v134 -= 24;
                v132 -= 24;
              }
              while (v132 != v133);
              v132 = *(char **)(v119 - 24);
            }
            v124 = v131 + 24;
            *(_QWORD *)(v119 - 24) = v134;
            *(_QWORD *)(v119 - 16) = v131 + 24;
            *(_QWORD *)(v119 - 8) = v129 + 24 * v130;
            if (v132)
              operator delete(v132);
          }
          else
          {
            *(_DWORD *)v122 = v103;
            *(_DWORD *)(v122 + 4) = v120;
            *(_DWORD *)(v122 + 8) = v121;
            *(_QWORD *)(v122 + 12) = 0;
            v124 = v122 + 24;
            *(_BYTE *)(v122 + 20) = 0;
          }
          *(_QWORD *)(v119 - 16) = v124;
          memset(&v224, 0, sizeof(v224));
          sub_24A210B90(v221, (uint64_t)&v224);
          if (v224.__r_.__value_.__r.__words[0])
            operator delete(v224.__r_.__value_.__l.__data_);
          v136 = *(_QWORD *)(a2 + 88);
          v137 = *(_QWORD *)(v136 - 16);
          v138 = *(_QWORD *)(v136 - 8);
          if (v137 >= v138)
          {
            v140 = *(_QWORD *)(v136 - 24);
            v141 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v137 - v140) >> 3);
            v142 = v141 + 1;
            if (v141 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_24A20A098();
            v143 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v138 - v140) >> 3);
            if (2 * v143 > v142)
              v142 = 2 * v143;
            if (v143 >= 0x555555555555555)
              v144 = 0xAAAAAAAAAAAAAAALL;
            else
              v144 = v142;
            if (v144)
              v144 = (unint64_t)sub_24A20E42C(v144);
            else
              v145 = 0;
            v146 = v144 + 24 * v141;
            *(_DWORD *)v146 = v102;
            *(_DWORD *)(v146 + 4) = v102;
            *(_DWORD *)(v146 + 8) = v100;
            *(_QWORD *)(v146 + 12) = 0;
            *(_BYTE *)(v146 + 20) = 0;
            v148 = *(char **)(v136 - 24);
            v147 = *(char **)(v136 - 16);
            v149 = v146;
            if (v147 != v148)
            {
              do
              {
                v150 = *(_OWORD *)(v147 - 24);
                *(_QWORD *)(v149 - 11) = *(_QWORD *)(v147 - 11);
                *(_OWORD *)(v149 - 24) = v150;
                v149 -= 24;
                v147 -= 24;
              }
              while (v147 != v148);
              v147 = *(char **)(v136 - 24);
            }
            v139 = v146 + 24;
            *(_QWORD *)(v136 - 24) = v149;
            *(_QWORD *)(v136 - 16) = v146 + 24;
            *(_QWORD *)(v136 - 8) = v144 + 24 * v145;
            if (v147)
              operator delete(v147);
          }
          else
          {
            *(_DWORD *)v137 = v102;
            *(_DWORD *)(v137 + 4) = v102;
            *(_DWORD *)(v137 + 8) = v100;
            *(_QWORD *)(v137 + 12) = 0;
            v139 = v137 + 24;
            *(_BYTE *)(v137 + 20) = 0;
          }
          *(_QWORD *)(v136 - 16) = v139;
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(__dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0]) >> 3) == v99)
            v69 = sub_24A2106BC(a2, &__str);
          else
            v69 = 0;
          v151 = *(_QWORD *)(a2 + 88);
          v153 = *(char **)(v151 - 16);
          v152 = *(_QWORD *)(v151 - 8);
          if ((unint64_t)v153 >= v152)
          {
            v155 = *(char **)(v151 - 24);
            v156 = 0xAAAAAAAAAAAAAAABLL * ((v153 - v155) >> 3);
            v157 = v156 + 1;
            if (v156 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_24A20A098();
            v158 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v152 - (_QWORD)v155) >> 3);
            if (2 * v158 > v157)
              v157 = 2 * v158;
            if (v158 >= 0x555555555555555)
              v159 = 0xAAAAAAAAAAAAAAALL;
            else
              v159 = v157;
            if (v159)
            {
              v159 = (unint64_t)sub_24A20E42C(v159);
              v155 = *(char **)(v151 - 24);
              v153 = *(char **)(v151 - 16);
            }
            else
            {
              v160 = 0;
            }
            v161 = v159 + 24 * v156;
            *(_DWORD *)v161 = v102;
            *(_DWORD *)(v161 + 4) = v120;
            *(_DWORD *)(v161 + 8) = v100;
            *(_DWORD *)(v161 + 12) = v69;
            *(_DWORD *)(v161 + 16) = 0;
            *(_BYTE *)(v161 + 20) = 0;
            v162 = v161;
            if (v153 != v155)
            {
              do
              {
                v163 = *(_OWORD *)(v153 - 24);
                *(_QWORD *)(v162 - 11) = *(_QWORD *)(v153 - 11);
                *(_OWORD *)(v162 - 24) = v163;
                v162 -= 24;
                v153 -= 24;
              }
              while (v153 != v155);
              v155 = *(char **)(v151 - 24);
            }
            v154 = (_DWORD *)(v161 + 24);
            *(_QWORD *)(v151 - 24) = v162;
            *(_QWORD *)(v151 - 16) = v161 + 24;
            *(_QWORD *)(v151 - 8) = v159 + 24 * v160;
            if (v155)
              operator delete(v155);
          }
          else
          {
            *(_DWORD *)v153 = v102;
            *((_DWORD *)v153 + 1) = v120;
            *((_DWORD *)v153 + 2) = v100;
            *((_DWORD *)v153 + 3) = v69;
            *((_DWORD *)v153 + 4) = 0;
            v154 = v153 + 24;
            v153[20] = 0;
          }
          *(_QWORD *)(v151 - 16) = v154;
          v164 = *(_QWORD *)(a2 + 88);
          v166 = *(char **)(v164 - 16);
          v165 = *(_QWORD *)(v164 - 8);
          if ((unint64_t)v166 >= v165)
          {
            v168 = *(char **)(v164 - 24);
            v169 = 0xAAAAAAAAAAAAAAABLL * ((v166 - v168) >> 3);
            v170 = v169 + 1;
            if (v169 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_24A20A098();
            v171 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v165 - (_QWORD)v168) >> 3);
            if (2 * v171 > v170)
              v170 = 2 * v171;
            if (v171 >= 0x555555555555555)
              v172 = 0xAAAAAAAAAAAAAAALL;
            else
              v172 = v170;
            if (v172)
            {
              v172 = (unint64_t)sub_24A20E42C(v172);
              v168 = *(char **)(v164 - 24);
              v166 = *(char **)(v164 - 16);
            }
            else
            {
              v173 = 0;
            }
            v174 = v172 + 24 * v169;
            *(_DWORD *)v174 = v102;
            *(_DWORD *)(v174 + 4) = v103;
            *(_DWORD *)(v174 + 8) = v100;
            *(_DWORD *)(v174 + 12) = v69;
            *(_DWORD *)(v174 + 16) = 0;
            *(_BYTE *)(v174 + 20) = 0;
            v175 = v174;
            if (v166 != v168)
            {
              do
              {
                v176 = *(_OWORD *)(v166 - 24);
                *(_QWORD *)(v175 - 11) = *(_QWORD *)(v166 - 11);
                *(_OWORD *)(v175 - 24) = v176;
                v175 -= 24;
                v166 -= 24;
              }
              while (v166 != v168);
              v168 = *(char **)(v164 - 24);
            }
            v167 = (_DWORD *)(v174 + 24);
            *(_QWORD *)(v164 - 24) = v175;
            *(_QWORD *)(v164 - 16) = v174 + 24;
            *(_QWORD *)(v164 - 8) = v172 + 24 * v173;
            if (v168)
              operator delete(v168);
          }
          else
          {
            *(_DWORD *)v166 = v102;
            *((_DWORD *)v166 + 1) = v103;
            *((_DWORD *)v166 + 2) = v100;
            *((_DWORD *)v166 + 3) = v69;
            *((_DWORD *)v166 + 4) = 0;
            v167 = v166 + 24;
            v166[20] = 0;
          }
          *(_QWORD *)(v164 - 16) = v167;
          v98 = __dst.__r_.__value_.__r.__words[0];
        }
        while (0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(__dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0]) >> 3) > v99++);
        v97 = -1 - 1431655765 * ((*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
      }
      v178 = *(_QWORD *)(a2 + 112);
      if (v178)
      {
        v179 = (uint8x8_t)vcnt_s8((int8x8_t)v178);
        v179.i16[0] = vaddlv_u8(v179);
        if (v179.u32[0] > 1uLL)
        {
          v69 = v97;
          if (v178 <= v97)
            v69 = v97 % v178;
        }
        else
        {
          v69 = (v178 - 1) & v97;
        }
        v180 = *(void ***)(*(_QWORD *)(a2 + 104) + 8 * v69);
        if (v180)
        {
          v181 = *v180;
          if (*v180)
          {
            do
            {
              v182 = v181[1];
              if (v182 == v97)
              {
                if (*((_DWORD *)v181 + 4) == v97)
                {
                  v204 = v219;
                  goto LABEL_348;
                }
              }
              else
              {
                if (v179.u32[0] > 1uLL)
                {
                  if (v182 >= v178)
                    v182 %= v178;
                }
                else
                {
                  v182 &= v178 - 1;
                }
                if (v182 != v69)
                  break;
              }
              v181 = (_QWORD *)*v181;
            }
            while (v181);
          }
        }
      }
      v181 = operator new(0x18uLL);
      *v181 = 0;
      v181[1] = v97;
      *((_DWORD *)v181 + 4) = v97;
      *((_DWORD *)v181 + 5) = 0;
      v183 = (float)(unint64_t)(*(_QWORD *)(a2 + 128) + 1);
      v184 = *(float *)(a2 + 136);
      if (!v178 || (float)(v184 * (float)v178) < v183)
        break;
LABEL_338:
      v201 = *(_QWORD *)(a2 + 104);
      v202 = *(_QWORD **)(v201 + 8 * v69);
      v204 = v219;
      if (v202)
      {
        *v181 = *v202;
      }
      else
      {
        *v181 = *v215;
        *v215 = v181;
        *(_QWORD *)(v201 + 8 * v69) = v215;
        if (!*v181)
          goto LABEL_347;
        v203 = *(_QWORD *)(*v181 + 8);
        if ((v178 & (v178 - 1)) != 0)
        {
          if (v203 >= v178)
            v203 %= v178;
        }
        else
        {
          v203 &= v178 - 1;
        }
        v202 = (_QWORD *)(*(_QWORD *)(a2 + 104) + 8 * v203);
      }
      *v202 = v181;
LABEL_347:
      ++*(_QWORD *)(a2 + 128);
LABEL_348:
      *((_DWORD *)v181 + 5) = 0;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
      sub_24A20E240((void ***)&__str);
      if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v232.__r_.__value_.__l.__data_);
      v93 = v204 + 24;
      if ((_BYTE *)v93 == v217)
        goto LABEL_363;
    }
    v185 = (v178 & (v178 - 1)) != 0;
    if (v178 < 3)
      v185 = 1;
    v186 = v185 | (2 * v178);
    v187 = vcvtps_u32_f32(v183 / v184);
    if (v186 <= v187)
      prime = (int8x8_t)v187;
    else
      prime = (int8x8_t)v186;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v178 = *(_QWORD *)(a2 + 112);
    }
    if (*(_QWORD *)&prime > v178)
      goto LABEL_304;
    if (*(_QWORD *)&prime < v178)
    {
      v195 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 128) / *(float *)(a2 + 136));
      if (v178 < 3 || (v196 = (uint8x8_t)vcnt_s8((int8x8_t)v178), v196.i16[0] = vaddlv_u8(v196), v196.u32[0] > 1uLL))
      {
        v195 = std::__next_prime(v195);
      }
      else
      {
        v197 = 1 << -(char)__clz(v195 - 1);
        if (v195 >= 2)
          v195 = v197;
      }
      if (*(_QWORD *)&prime <= v195)
        prime = (int8x8_t)v195;
      if (*(_QWORD *)&prime >= v178)
      {
        v178 = *(_QWORD *)(a2 + 112);
      }
      else
      {
        if (prime)
        {
LABEL_304:
          if (*(_QWORD *)&prime >> 61)
            sub_24A20B680();
          v189 = operator new(8 * *(_QWORD *)&prime);
          v190 = *(void **)(a2 + 104);
          *(_QWORD *)(a2 + 104) = v189;
          if (v190)
            operator delete(v190);
          v191 = 0;
          *(int8x8_t *)(a2 + 112) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(a2 + 104) + 8 * v191++) = 0;
          while (*(_QWORD *)&prime != v191);
          v192 = (_QWORD *)*v215;
          if (*v215)
          {
            v193 = v192[1];
            v194 = (uint8x8_t)vcnt_s8(prime);
            v194.i16[0] = vaddlv_u8(v194);
            if (v194.u32[0] > 1uLL)
            {
              if (v193 >= *(_QWORD *)&prime)
                v193 %= *(_QWORD *)&prime;
            }
            else
            {
              v193 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(a2 + 104) + 8 * v193) = v215;
            v198 = (_QWORD *)*v192;
            if (*v192)
            {
              do
              {
                v199 = v198[1];
                if (v194.u32[0] > 1uLL)
                {
                  if (v199 >= *(_QWORD *)&prime)
                    v199 %= *(_QWORD *)&prime;
                }
                else
                {
                  v199 &= *(_QWORD *)&prime - 1;
                }
                if (v199 != v193)
                {
                  v200 = *(_QWORD *)(a2 + 104);
                  if (!*(_QWORD *)(v200 + 8 * v199))
                  {
                    *(_QWORD *)(v200 + 8 * v199) = v192;
                    goto LABEL_329;
                  }
                  *v192 = *v198;
                  *v198 = **(_QWORD **)(*(_QWORD *)(a2 + 104) + 8 * v199);
                  **(_QWORD **)(*(_QWORD *)(a2 + 104) + 8 * v199) = v198;
                  v198 = v192;
                }
                v199 = v193;
LABEL_329:
                v192 = v198;
                v198 = (_QWORD *)*v198;
                v193 = v199;
              }
              while (v198);
            }
          }
          v178 = (unint64_t)prime;
          goto LABEL_333;
        }
        v205 = *(void **)(a2 + 104);
        *(_QWORD *)(a2 + 104) = 0;
        if (v205)
          operator delete(v205);
        v178 = 0;
        *(_QWORD *)(a2 + 112) = 0;
      }
    }
LABEL_333:
    if ((v178 & (v178 - 1)) != 0)
    {
      if (v178 <= v97)
        v69 = v97 % v178;
      else
        v69 = v97;
    }
    else
    {
      v69 = (v178 - 1) & v97;
    }
    goto LABEL_338;
  }
LABEL_363:
  v206 = *(uint64_t **)(a2 + 80);
  v207 = *(uint64_t **)(a2 + 88);
  if (v206 == v207)
  {
    v212 = *(_QWORD *)(a2 + 80);
  }
  else
  {
    do
    {
      v208 = *v206;
      v209 = v206[1];
      v206 += 3;
      v210 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v209 - v208) >> 3));
      if (v209 == v208)
        v211 = 0;
      else
        v211 = v210;
      sub_24A210D0C(v208, v209, v211, 1);
    }
    while (v206 != v207);
    v206 = *(uint64_t **)(a2 + 80);
    v212 = *(_QWORD *)(a2 + 88);
  }
  sub_24A20FFEC((void **)(a2 + 184), (int)(-1431655765 * ((unint64_t)(v212 - (_QWORD)v206) >> 3)));
  sub_24A20BAF0((_QWORD *)a2);
  v232.__r_.__value_.__r.__words[0] = (std::string::size_type)&v227;
  sub_24A20E240((void ***)&v232);
}

void sub_24A20FDCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void **a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,char *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,uint64_t a50)
{
  void **v50;
  uint64_t v51;

  sub_24A211E90(1, v50);
  if (*(char *)(v51 - 137) < 0)
    operator delete(*(void **)(v51 - 160));
  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a34 < 0)
    operator delete(a29);
  a29 = &a36;
  sub_24A20E240(&a29);
  if (a48 < 0)
    operator delete(a43);
  a43 = &a49;
  sub_24A20E240((void ***)&a43);
  sub_24A209FD0(a11);
  _Unwind_Resume(a1);
}

void sub_24A20FFEC(void **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  int v23;

  v5 = (char *)*a1;
  v4 = (char *)a1[1];
  v6 = (v4 - (_BYTE *)*a1) >> 5;
  if (a2 <= v6)
  {
    if (a2 < v6)
      a1[1] = &v5[32 * a2];
  }
  else
  {
    v7 = a1[2];
    if (a2 - v6 <= (v7 - v4) >> 5)
    {
      v22 = &v4[32 * (a2 - v6)];
      v23 = voiceactions::kLogZero;
      do
      {
        *(_DWORD *)v4 = voiceactions::kNolabel;
        *((_DWORD *)v4 + 1) = v23;
        *((_DWORD *)v4 + 2) = voiceactions::kNoTime;
        *(_QWORD *)(v4 + 20) = 0;
        *(_QWORD *)(v4 + 12) = 0;
        *((_DWORD *)v4 + 7) = v23;
        v4 += 32;
      }
      while (v4 != v22);
      a1[1] = v22;
    }
    else
    {
      if (a2 >> 59)
        sub_24A20A098();
      v8 = v7 - v5;
      v9 = (v7 - v5) >> 4;
      if (v9 <= a2)
        v9 = a2;
      if (v8 >= 0x7FFFFFFFFFFFFFE0)
        v10 = 0x7FFFFFFFFFFFFFFLL;
      else
        v10 = v9;
      if (v10 >> 59)
        sub_24A20B680();
      v11 = (char *)operator new(32 * v10);
      v12 = &v11[32 * v6];
      v13 = &v11[32 * a2];
      v14 = voiceactions::kLogZero;
      v15 = voiceactions::kNolabel;
      v16 = voiceactions::kNoTime;
      v17 = v12;
      do
      {
        *(_DWORD *)v17 = v15;
        *((_DWORD *)v17 + 1) = v14;
        *((_DWORD *)v17 + 2) = v16;
        *(_QWORD *)(v17 + 20) = 0;
        *(_QWORD *)(v17 + 12) = 0;
        *((_DWORD *)v17 + 7) = v14;
        v17 += 32;
      }
      while (v17 != v13);
      v18 = &v11[32 * v10];
      v20 = (char *)*a1;
      v19 = (char *)a1[1];
      if (v19 != *a1)
      {
        do
        {
          v21 = *((_OWORD *)v19 - 1);
          *((_OWORD *)v12 - 2) = *((_OWORD *)v19 - 2);
          *((_OWORD *)v12 - 1) = v21;
          v12 -= 32;
          v19 -= 32;
        }
        while (v19 != v20);
        v19 = (char *)*a1;
      }
      *a1 = v12;
      a1[1] = v13;
      a1[2] = v18;
      if (v19)
        operator delete(v19);
    }
  }
}

void voiceactions::StringSplit(std::string *a1@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  void *__p[2];
  char v6;

  sub_24A20E380(__p, a2);
  voiceactions::StringSplit(a1, (unsigned __int8 *)__p, a3);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_24A2101CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void voiceactions::StringJoin(std::string *a1@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  void *__p[2];
  char v6;

  sub_24A20E380(__p, a2);
  voiceactions::StringJoin(a1, (uint64_t)__p, a3);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_24A210238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_24A210254(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;

  if (a4)
  {
    v6 = result;
    sub_24A2120D4(result, a4);
    result = sub_24A212120((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((_QWORD *)v6 + 1) = result;
  }
  return result;
}

void sub_24A2102B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_24A20E240(&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_24A2102D8(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;

  v4 = sub_24A20DCBC((uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = *(unsigned __int8 **)i)
  {
    v12 = *((_QWORD *)i + 1);
    if (v12 == v6)
    {
      if (sub_24A20E10C(i + 16, a2))
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

char *sub_24A2103D0(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  _BYTE *v15;
  __int128 *v16;
  __int128 v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v7 = sub_24A20DCBC((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v8)
          {
            if (sub_24A20E10C((unsigned __int8 *)v13 + 16, a2))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v8;
  v15 = v13 + 16;
  v16 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    sub_24A20C108(v15, *(void **)v16, *((_QWORD *)v16 + 1));
  }
  else
  {
    v17 = *v16;
    *((_QWORD *)v13 + 4) = *((_QWORD *)v16 + 2);
    *(_OWORD *)v15 = v17;
  }
  *((_DWORD *)v13 + 10) = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    sub_24A211EDC(a1, v23);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *(_QWORD *)v13 = *v25;
LABEL_41:
    *v25 = v13;
    goto LABEL_42;
  }
  *(_QWORD *)v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v24 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v13)
  {
    v26 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9)
        v26 %= v9;
    }
    else
    {
      v26 &= v9 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_24A21060C(_Unwind_Exception *a1)
{
  void **v1;

  sub_24A211E90(0, v1);
  _Unwind_Resume(a1);
}

void sub_24A210630(uint64_t *a1)
{
  if (*a1)
  {
    sub_24A20E280(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_24A210668(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t sub_24A2106BC(uint64_t a1, std::string *a2)
{
  unint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  std::string *v10;
  unint64_t size;
  std::string **v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  void *v20;
  uint64_t v21;
  std::string *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  std::string *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::string **v32;
  unint64_t v33;
  void *v35;
  std::string *v36;

  v5 = (uint64_t *)(a1 + 320);
  if (sub_24A2102D8((_QWORD *)(a1 + 320), (unsigned __int8 *)a2))
    goto LABEL_76;
  v6 = *(_QWORD *)(a1 + 344);
  v36 = a2;
  *((_DWORD *)sub_24A211A58(v5, (unsigned __int8 *)a2, (__int128 **)&v36) + 10) = v6;
  v7 = *(_QWORD *)(a1 + 368);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v2 = (int)v6;
      if (v7 <= (int)v6)
        v2 = (int)v6 % v7;
    }
    else
    {
      v2 = (v7 - 1) & (int)v6;
    }
    v9 = *(void ***)(*(_QWORD *)(a1 + 360) + 8 * v2);
    if (v9)
    {
      v10 = (std::string *)*v9;
      if (*v9)
      {
        do
        {
          size = v10->__r_.__value_.__l.__size_;
          if (size == (int)v6)
          {
            if (LODWORD(v10->__r_.__value_.__r.__words[2]) == (_DWORD)v6)
              goto LABEL_75;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (size >= v7)
                size %= v7;
            }
            else
            {
              size &= v7 - 1;
            }
            if (size != v2)
              break;
          }
          v10 = (std::string *)v10->__r_.__value_.__r.__words[0];
        }
        while (v10);
      }
    }
  }
  v12 = (std::string **)(a1 + 376);
  v10 = (std::string *)operator new(0x30uLL);
  v10->__r_.__value_.__r.__words[0] = 0;
  v10->__r_.__value_.__l.__size_ = (int)v6;
  LODWORD(v10->__r_.__value_.__r.__words[2]) = v6;
  v10[1].__r_.__value_.__r.__words[0] = 0;
  v10[1].__r_.__value_.__l.__size_ = 0;
  v10[1].__r_.__value_.__r.__words[2] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 384) + 1);
  v14 = *(float *)(a1 + 392);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = (int8x8_t)v17;
    else
      prime = (int8x8_t)v16;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = *(_QWORD *)(a1 + 368);
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_31;
    if (*(_QWORD *)&prime < v7)
    {
      v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 384) / *(float *)(a1 + 392));
      if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (*(_QWORD *)&prime <= v25)
        prime = (int8x8_t)v25;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *(_QWORD *)(a1 + 368);
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(_QWORD *)&prime >> 61)
            sub_24A20B680();
          v19 = operator new(8 * *(_QWORD *)&prime);
          v20 = *(void **)(a1 + 360);
          *(_QWORD *)(a1 + 360) = v19;
          if (v20)
            operator delete(v20);
          v21 = 0;
          *(int8x8_t *)(a1 + 368) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(a1 + 360) + 8 * v21++) = 0;
          while (*(_QWORD *)&prime != v21);
          v22 = *v12;
          if (*v12)
          {
            v23 = v22->__r_.__value_.__l.__size_;
            v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(_QWORD *)&prime)
                v23 %= *(_QWORD *)&prime;
            }
            else
            {
              v23 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 360) + 8 * v23) = v12;
            v28 = (std::string *)v22->__r_.__value_.__r.__words[0];
            if (v22->__r_.__value_.__r.__words[0])
            {
              do
              {
                v29 = v28->__r_.__value_.__l.__size_;
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(_QWORD *)&prime)
                    v29 %= *(_QWORD *)&prime;
                }
                else
                {
                  v29 &= *(_QWORD *)&prime - 1;
                }
                if (v29 != v23)
                {
                  v30 = *(_QWORD *)(a1 + 360);
                  if (!*(_QWORD *)(v30 + 8 * v29))
                  {
                    *(_QWORD *)(v30 + 8 * v29) = v22;
                    goto LABEL_56;
                  }
                  v22->__r_.__value_.__r.__words[0] = v28->__r_.__value_.__r.__words[0];
                  v28->__r_.__value_.__r.__words[0] = **(_QWORD **)(*(_QWORD *)(a1 + 360) + 8 * v29);
                  **(_QWORD **)(*(_QWORD *)(a1 + 360) + 8 * v29) = v28;
                  v28 = v22;
                }
                v29 = v23;
LABEL_56:
                v22 = v28;
                v28 = (std::string *)v28->__r_.__value_.__r.__words[0];
                v23 = v29;
              }
              while (v28);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_60;
        }
        v35 = *(void **)(a1 + 360);
        *(_QWORD *)(a1 + 360) = 0;
        if (v35)
          operator delete(v35);
        v7 = 0;
        *(_QWORD *)(a1 + 368) = 0;
      }
    }
LABEL_60:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= (int)v6)
        v2 = (int)v6 % v7;
      else
        v2 = (int)v6;
    }
    else
    {
      v2 = (v7 - 1) & (int)v6;
    }
  }
  v31 = *(_QWORD *)(a1 + 360);
  v32 = *(std::string ***)(v31 + 8 * v2);
  if (v32)
  {
    v10->__r_.__value_.__r.__words[0] = (std::string::size_type)*v32;
  }
  else
  {
    v10->__r_.__value_.__r.__words[0] = (std::string::size_type)*v12;
    *v12 = v10;
    *(_QWORD *)(v31 + 8 * v2) = v12;
    if (!v10->__r_.__value_.__r.__words[0])
      goto LABEL_74;
    v33 = *(_QWORD *)(v10->__r_.__value_.__r.__words[0] + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v33 >= v7)
        v33 %= v7;
    }
    else
    {
      v33 &= v7 - 1;
    }
    v32 = (std::string **)(*(_QWORD *)(a1 + 360) + 8 * v33);
  }
  *v32 = v10;
LABEL_74:
  ++*(_QWORD *)(a1 + 384);
LABEL_75:
  std::string::operator=(v10 + 1, a2);
LABEL_76:
  v36 = a2;
  return *((unsigned int *)sub_24A211A58(v5, (unsigned __int8 *)a2, (__int128 **)&v36) + 10);
}

void sub_24A210AF8(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[47] < 0)
    operator delete(*v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_24A210B1C(uint64_t a1, __int128 *a2)
{
  uint64_t *v4;
  uint64_t v5;
  __int128 *v7;

  v4 = (uint64_t *)(a1 + 280);
  if (!sub_24A2102D8((_QWORD *)(a1 + 280), (unsigned __int8 *)a2))
  {
    v5 = *(_QWORD *)(a1 + 304);
    v7 = a2;
    *((_DWORD *)sub_24A211A58(v4, (unsigned __int8 *)a2, &v7) + 10) = v5;
  }
  v7 = a2;
  return *((unsigned int *)sub_24A211A58(v4, (unsigned __int8 *)a2, &v7) + 10);
}

void sub_24A210B90(char **a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  void *v19;
  void *v20;

  v4 = a1[1];
  v5 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v5)
  {
    *(_QWORD *)v4 = 0;
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    *(_OWORD *)v4 = *(_OWORD *)a2;
    *((_QWORD *)v4 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v6 = v4 + 24;
    goto LABEL_18;
  }
  v7 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v8 = v7 + 1;
  if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_24A20A098();
  v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)*a1) >> 3);
  if (2 * v9 > v8)
    v8 = 2 * v9;
  if (v9 >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  if (v8 > 0xAAAAAAAAAAAAAAALL)
    sub_24A20B680();
  v10 = 3 * v8;
  v11 = (char *)operator new(24 * v8);
  v12 = &v11[24 * v7];
  v13 = &v11[8 * v10];
  *(_OWORD *)v12 = *(_OWORD *)a2;
  *((_QWORD *)v12 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v6 = v12 + 24;
  v14 = *a1;
  v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v12;
    a1[1] = v6;
    a1[2] = v13;
    if (!v15)
      goto LABEL_18;
    goto LABEL_17;
  }
  do
  {
    *((_QWORD *)v12 - 3) = 0;
    *((_QWORD *)v12 - 2) = 0;
    v12 -= 24;
    *((_QWORD *)v12 + 2) = 0;
    v16 = *(_OWORD *)(v15 - 24);
    v15 -= 24;
    *(_OWORD *)v12 = v16;
    *((_QWORD *)v12 + 2) = *((_QWORD *)v15 + 2);
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
    *((_QWORD *)v15 + 2) = 0;
  }
  while (v15 != v14);
  v15 = *a1;
  v17 = a1[1];
  *a1 = v12;
  a1[1] = v6;
  a1[2] = v13;
  if (v17 != v15)
  {
    v18 = v17;
    do
    {
      v20 = (void *)*((_QWORD *)v18 - 3);
      v18 -= 24;
      v19 = v20;
      if (v20)
      {
        *((_QWORD *)v17 - 2) = v19;
        operator delete(v19);
      }
      v17 = v18;
    }
    while (v18 != v15);
  }
  if (v15)
LABEL_17:
    operator delete(v15);
LABEL_18:
  a1[1] = v6;
}

double sub_24A210D0C(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  __int128 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 *v16;
  uint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  int v31;
  __int128 v32;
  BOOL v33;
  __int128 v34;
  int v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  int v43;
  int v44;
  _DWORD *v45;
  BOOL v47;
  uint64_t v48;
  _DWORD *v49;
  _DWORD *v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  int64_t v57;
  int64_t v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  int v62;
  unint64_t v63;
  int v64;
  int v65;
  unint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  int64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  __int128 v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  _BYTE v96[29];
  _BYTE v97[24];
  _BYTE v98[29];
  _BYTE v99[29];
  __int128 v100;
  __int128 v101;
  _BYTE v102[24];
  __int128 v103;

__int128 *sub_24A211548(__int128 *result, __int128 *a2, __int128 *a3)
{
  int v3;
  int v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE v15[24];
  _BYTE v16[24];
  _BYTE v17[24];

  v3 = *((_DWORD *)a2 + 1);
  v4 = *((_DWORD *)a3 + 1);
  if (v3 <= *((_DWORD *)result + 1))
  {
    if (v4 > v3)
    {
      *(_OWORD *)v15 = *a2;
      v7 = *a2;
      *(_QWORD *)&v15[16] = *((_QWORD *)a2 + 2);
      v8 = *(_QWORD *)((char *)a3 + 13);
      *a2 = *a3;
      *(_QWORD *)((char *)a2 + 13) = v8;
      *a3 = v7;
      *(_QWORD *)((char *)a3 + 13) = *(_QWORD *)&v15[13];
      if (*((_DWORD *)a2 + 1) > *((_DWORD *)result + 1))
      {
        *(_OWORD *)v16 = *result;
        v9 = *result;
        *(_QWORD *)&v16[16] = *((_QWORD *)result + 2);
        v10 = *(_QWORD *)((char *)a2 + 13);
        *result = *a2;
        *(_QWORD *)((char *)result + 13) = v10;
        *a2 = v9;
        *(_QWORD *)((char *)a2 + 13) = *(_QWORD *)&v16[13];
      }
    }
  }
  else
  {
    if (v4 <= v3)
    {
      *(_OWORD *)v17 = *result;
      v11 = *result;
      *(_QWORD *)&v17[16] = *((_QWORD *)result + 2);
      v12 = *(_QWORD *)((char *)a2 + 13);
      *result = *a2;
      *(_QWORD *)((char *)result + 13) = v12;
      *a2 = v11;
      *(_QWORD *)((char *)a2 + 13) = *(_QWORD *)&v17[13];
      if (*((_DWORD *)a3 + 1) <= *((_DWORD *)a2 + 1))
        return result;
      v5 = *a2;
      *(_OWORD *)v14 = *a2;
      *(_QWORD *)&v14[16] = *((_QWORD *)a2 + 2);
      v13 = *(_QWORD *)((char *)a3 + 13);
      *a2 = *a3;
      *(_QWORD *)((char *)a2 + 13) = v13;
    }
    else
    {
      v5 = *result;
      *(_OWORD *)v14 = *result;
      *(_QWORD *)&v14[16] = *((_QWORD *)result + 2);
      v6 = *(_QWORD *)((char *)a3 + 13);
      *result = *a3;
      *(_QWORD *)((char *)result + 13) = v6;
    }
    *a3 = v5;
    *(_QWORD *)((char *)a3 + 13) = *(_QWORD *)&v14[13];
  }
  return result;
}

__n128 sub_24A211670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE v13[24];
  _BYTE v14[24];

  sub_24A211548((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  if (*(_DWORD *)(a4 + 4) > *(_DWORD *)(a3 + 4))
  {
    *(_OWORD *)v12 = *(_OWORD *)a3;
    result = *(__n128 *)a3;
    *(_QWORD *)&v12[16] = *(_QWORD *)(a3 + 16);
    v9 = *(_QWORD *)(a4 + 13);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 13) = v9;
    *(__n128 *)a4 = result;
    *(_QWORD *)(a4 + 13) = *(_QWORD *)&v12[13];
    if (*(_DWORD *)(a3 + 4) > *(_DWORD *)(a2 + 4))
    {
      *(_OWORD *)v13 = *(_OWORD *)a2;
      result = *(__n128 *)a2;
      *(_QWORD *)&v13[16] = *(_QWORD *)(a2 + 16);
      v10 = *(_QWORD *)(a3 + 13);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 13) = v10;
      *(__n128 *)a3 = result;
      *(_QWORD *)(a3 + 13) = *(_QWORD *)&v13[13];
      if (*(_DWORD *)(a2 + 4) > *(_DWORD *)(a1 + 4))
      {
        *(_OWORD *)v14 = *(_OWORD *)a1;
        result = *(__n128 *)a1;
        *(_QWORD *)&v14[16] = *(_QWORD *)(a1 + 16);
        v11 = *(_QWORD *)(a2 + 13);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 13) = v11;
        *(__n128 *)a2 = result;
        *(_QWORD *)(a2 + 13) = *(_QWORD *)&v14[13];
      }
    }
  }
  return result;
}

__n128 sub_24A211760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];
  _BYTE v16[24];
  _BYTE v17[24];
  _BYTE v18[24];

  result.n128_u64[0] = sub_24A211670(a1, a2, a3, a4).n128_u64[0];
  if (*(_DWORD *)(a5 + 4) > *(_DWORD *)(a4 + 4))
  {
    *(_OWORD *)v15 = *(_OWORD *)a4;
    result = *(__n128 *)a4;
    *(_QWORD *)&v15[16] = *(_QWORD *)(a4 + 16);
    v11 = *(_QWORD *)(a5 + 13);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)(a4 + 13) = v11;
    *(__n128 *)a5 = result;
    *(_QWORD *)(a5 + 13) = *(_QWORD *)&v15[13];
    if (*(_DWORD *)(a4 + 4) > *(_DWORD *)(a3 + 4))
    {
      *(_OWORD *)v16 = *(_OWORD *)a3;
      result = *(__n128 *)a3;
      *(_QWORD *)&v16[16] = *(_QWORD *)(a3 + 16);
      v12 = *(_QWORD *)(a4 + 13);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)(a3 + 13) = v12;
      *(__n128 *)a4 = result;
      *(_QWORD *)(a4 + 13) = *(_QWORD *)&v16[13];
      if (*(_DWORD *)(a3 + 4) > *(_DWORD *)(a2 + 4))
      {
        *(_OWORD *)v17 = *(_OWORD *)a2;
        result = *(__n128 *)a2;
        *(_QWORD *)&v17[16] = *(_QWORD *)(a2 + 16);
        v13 = *(_QWORD *)(a3 + 13);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)(a2 + 13) = v13;
        *(__n128 *)a3 = result;
        *(_QWORD *)(a3 + 13) = *(_QWORD *)&v17[13];
        if (*(_DWORD *)(a2 + 4) > *(_DWORD *)(a1 + 4))
        {
          *(_OWORD *)v18 = *(_OWORD *)a1;
          result = *(__n128 *)a1;
          *(_QWORD *)&v18[16] = *(_QWORD *)(a1 + 16);
          v14 = *(_QWORD *)(a2 + 13);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 13) = v14;
          *(__n128 *)a2 = result;
          *(_QWORD *)(a2 + 13) = *(_QWORD *)&v18[13];
        }
      }
    }
  }
  return result;
}

BOOL sub_24A211898(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];
  __int128 v18;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_DWORD *)(a2 - 20) > *(_DWORD *)(a1 + 4))
      {
        *(_OWORD *)v17 = *(_OWORD *)a1;
        v6 = *(_OWORD *)a1;
        *(_QWORD *)&v17[16] = *(_QWORD *)(a1 + 16);
        v7 = *(_QWORD *)(a2 - 11);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 13) = v7;
        *(_OWORD *)(a2 - 24) = v6;
        *(_QWORD *)(a2 - 11) = *(_QWORD *)&v17[13];
      }
      return result;
    case 3uLL:
      sub_24A211548((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_24A211670(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      sub_24A211760(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      v8 = a1 + 48;
      sub_24A211548((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48));
      v9 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *(_DWORD *)(v9 + 4);
    if (v12 > *(_DWORD *)(v8 + 4))
    {
      v13 = *(_DWORD *)v9;
      v18 = *(_OWORD *)(v9 + 8);
      v14 = v10;
      while (1)
      {
        v15 = a1 + v14;
        *(_OWORD *)(v15 + 72) = *(_OWORD *)(a1 + v14 + 48);
        *(_QWORD *)(v15 + 85) = *(_QWORD *)(a1 + v14 + 61);
        if (v14 == -48)
          break;
        v14 -= 24;
        if (v12 <= *(_DWORD *)(v15 + 28))
        {
          v16 = a1 + v14 + 72;
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *(_DWORD *)v16 = v13;
      *(_DWORD *)(v16 + 4) = v12;
      *(_QWORD *)(v16 + 8) = v18;
      *(_QWORD *)(v16 + 13) = *(_QWORD *)((char *)&v18 + 5);
      if (++v11 == 8)
        return v9 + 24 == a2;
    }
    v8 = v9;
    v10 += 24;
    v9 += 24;
    if (v9 == a2)
      return 1;
  }
}

char *sub_24A211A58(uint64_t *a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  _BYTE *v15;
  __int128 *v16;
  __int128 v17;
  _QWORD *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void *v40;

  v7 = sub_24A20DCBC((uint64_t)a2);
  v8 = v7;
  v9 = a1[1];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*a1 + 8 * v3);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v8)
          {
            if (sub_24A20E10C((unsigned __int8 *)v13 + 16, a2))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v8;
  v15 = v13 + 16;
  v16 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    sub_24A20C108(v15, *(void **)v16, *((_QWORD *)v16 + 1));
  }
  else
  {
    v17 = *v16;
    *((_QWORD *)v13 + 4) = *((_QWORD *)v16 + 2);
    *(_OWORD *)v15 = v17;
  }
  v18 = a1 + 2;
  *((_DWORD *)v13 + 10) = 0;
  v19 = (float)(unint64_t)(a1[3] + 1);
  v20 = *((float *)a1 + 8);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = a1[1];
    if (*(_QWORD *)&prime > v9)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v9)
    {
      v31 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (*(_QWORD *)&prime <= v31)
        prime = (int8x8_t)v31;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            sub_24A20B680();
          v25 = operator new(8 * *(_QWORD *)&prime);
          v26 = (void *)*a1;
          *a1 = (uint64_t)v25;
          if (v26)
            operator delete(v26);
          v27 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v27++) = 0;
          while (*(_QWORD *)&prime != v27);
          v28 = (_QWORD *)*v18;
          if (*v18)
          {
            v29 = v28[1];
            v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(_QWORD *)&prime)
                v29 %= *(_QWORD *)&prime;
            }
            else
            {
              v29 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v29) = v18;
            v34 = (_QWORD *)*v28;
            if (*v28)
            {
              do
              {
                v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(_QWORD *)&prime)
                    v35 %= *(_QWORD *)&prime;
                }
                else
                {
                  v35 &= *(_QWORD *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v35))
                  {
                    *(_QWORD *)(*a1 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  *v28 = *v34;
                  *v34 = **(_QWORD **)(*a1 + 8 * v35);
                  **(_QWORD **)(*a1 + 8 * v35) = v34;
                  v34 = v28;
                }
                v35 = v29;
LABEL_58:
                v28 = v34;
                v34 = (_QWORD *)*v34;
                v29 = v35;
              }
              while (v34);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        v40 = (void *)*a1;
        *a1 = 0;
        if (v40)
          operator delete(v40);
        v9 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v36 = *a1;
  v37 = *(_QWORD **)(*a1 + 8 * v3);
  if (v37)
  {
    *(_QWORD *)v13 = *v37;
LABEL_75:
    *v37 = v13;
    goto LABEL_76;
  }
  *(_QWORD *)v13 = *v18;
  *v18 = v13;
  *(_QWORD *)(v36 + 8 * v3) = v18;
  if (*(_QWORD *)v13)
  {
    v38 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9)
        v38 %= v9;
    }
    else
    {
      v38 &= v9 - 1;
    }
    v37 = (_QWORD *)(*a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  ++a1[3];
  return v13;
}

void sub_24A211E6C(_Unwind_Exception *a1)
{
  void **v1;

  sub_24A211E90(0, v1);
  _Unwind_Resume(a1);
}

void sub_24A211E90(char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void sub_24A211EDC(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    sub_24A20B680();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

char *sub_24A2120D4(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_24A20A098();
  result = (char *)sub_24A20E42C(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

char *sub_24A212120(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  char *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  char *v11;
  char *v12;

  v4 = __dst;
  v11 = __dst;
  v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_24A20C108(v4, *(void **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)v4 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v4 = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v4 += 24;
      v12 = v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_24A2121DC((uint64_t)v9);
  return v4;
}

void sub_24A2121C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_24A2121DC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_24A2121DC(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
  }
  return a1;
}

std::string *voiceactions::StringJoin@<X0>(std::string *result@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type size;
  std::string::__raw *v5;
  int v7;
  std::string::size_type v8;
  int v9;
  std::string::size_type v10;
  std::string::size_type v11;
  std::string::size_type v12;
  const std::string::value_type *v13;
  std::string::size_type i;
  const std::string::value_type *v15;
  std::string::size_type v16;
  const std::string::value_type *v17;

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  size = result->__r_.__value_.__l.__size_;
  if (result->__r_.__value_.__r.__words[0] != size)
  {
    v5 = (std::string::__raw *)result;
    v7 = 0;
    v8 = result->__r_.__value_.__r.__words[0];
    do
    {
      v9 = *(unsigned __int8 *)(v8 + 23);
      if ((v9 & 0x80u) != 0)
        v9 = *(_DWORD *)(v8 + 8);
      v7 += v9;
      v8 += 24;
    }
    while (v8 != size);
    if (*(char *)(a2 + 23) >= 0)
      v10 = *(unsigned __int8 *)(a2 + 23);
    else
      v10 = *(_QWORD *)(a2 + 8);
    std::string::reserve(a3, v10 * (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(size - result->__r_.__value_.__r.__words[0]) >> 3) - 1) + v7);
    v11 = v5->__words[0];
    if (*(char *)(v5->__words[0] + 23) < 0)
    {
      v13 = *(const std::string::value_type **)v11;
      v12 = *(_QWORD *)(v11 + 8);
    }
    else
    {
      v12 = *(unsigned __int8 *)(v5->__words[0] + 23);
      v13 = (const std::string::value_type *)v5->__words[0];
    }
    result = std::string::append(a3, v13, v12);
    for (i = v11 + 24; i != v5->__words[1]; i += 24)
    {
      if (*(char *)(a2 + 23) >= 0)
        v15 = (const std::string::value_type *)a2;
      else
        v15 = *(const std::string::value_type **)a2;
      std::string::append(a3, v15, v10);
      if (*(char *)(i + 23) < 0)
      {
        v17 = *(const std::string::value_type **)i;
        v16 = *(_QWORD *)(i + 8);
      }
      else
      {
        v16 = *(unsigned __int8 *)(i + 23);
        v17 = (const std::string::value_type *)i;
      }
      result = std::string::append(a3, v17, v16);
    }
  }
  return result;
}

void sub_24A212360(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void voiceactions::StringSplit(std::string *__str@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  int v6;
  std::string::size_type size;
  BOOL v8;
  std::string *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  BOOL v12;
  unsigned __int8 *v13;
  std::string *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  std::string::size_type v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  std::string::size_type v30;
  int v31;
  BOOL v32;
  std::string *v33;
  std::string::size_type v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  std::string::size_type v42;
  unint64_t v43;
  unint64_t v44;
  __int128 v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  std::string __p;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;

  v6 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
  size = __str->__r_.__value_.__l.__size_;
  v8 = v6 < 0;
  if (v6 >= 0)
    v9 = __str;
  else
    v9 = (std::string *)__str->__r_.__value_.__r.__words[0];
  if (!v8)
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  v10 = a2[23];
  if ((v10 & 0x80u) == 0)
    v11 = a2;
  else
    v11 = *(unsigned __int8 **)a2;
  if ((v10 & 0x80u) != 0)
    v10 = *((_QWORD *)a2 + 1);
  if (size)
    v12 = v10 == 0;
  else
    v12 = 1;
  if (v12)
  {
LABEL_24:
    *a3 = 0;
    a3[1] = 0;
    v17 = -1;
    a3[2] = 0;
    goto LABEL_25;
  }
  v13 = (unsigned __int8 *)v9 + size;
  v14 = v9;
LABEL_16:
  v15 = v10;
  v16 = v11;
  while (v14->__r_.__value_.__s.__data_[0] != *v16)
  {
    ++v16;
    if (!--v15)
    {
      v14 = (std::string *)((char *)v14 + 1);
      if (v14 != (std::string *)v13)
        goto LABEL_16;
      goto LABEL_24;
    }
  }
  if (v14 == (std::string *)v13)
    goto LABEL_24;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v17 = (char *)v14 - (char *)v9;
  if (v14 != v9)
  {
LABEL_25:
    std::string::basic_string(&__p, __str, 0, v17, (std::allocator<char> *)&v56);
    v18 = a3[2];
    v19 = a3[1];
    if (v19 >= v18)
    {
      v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *a3) >> 3);
      v22 = v21 + 1;
      if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_24A20A098();
      v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *a3) >> 3);
      if (2 * v23 > v22)
        v22 = 2 * v23;
      if (v23 >= 0x555555555555555)
        v24 = 0xAAAAAAAAAAAAAAALL;
      else
        v24 = v22;
      v60 = a3 + 2;
      if (v24)
        v24 = (unint64_t)sub_24A20E42C(v24);
      else
        v25 = 0;
      v26 = v24 + 24 * v21;
      v56 = v24;
      v57 = v26;
      v59 = v24 + 24 * v25;
      v27 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v26 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v26 = v27;
      memset(&__p, 0, sizeof(__p));
      v58 = v26 + 24;
      sub_24A20E470(a3, &v56);
      v28 = a3[1];
      sub_24A20E4F4((uint64_t)&v56);
      v29 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      a3[1] = v28;
      if (v29 < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v20 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v19 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v19 = v20;
      a3[1] = v19 + 24;
    }
    if (v17 == -1)
      return;
    goto LABEL_39;
  }
  do
  {
LABEL_39:
    v30 = v17 + 1;
    v31 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    v32 = v31 < 0;
    if (v31 >= 0)
      v33 = __str;
    else
      v33 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if (v32)
      v34 = __str->__r_.__value_.__l.__size_;
    else
      v34 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    v35 = a2[23];
    if ((v35 & 0x80u) == 0)
      v36 = a2;
    else
      v36 = *(unsigned __int8 **)a2;
    if ((v35 & 0x80u) != 0)
      v35 = *((_QWORD *)a2 + 1);
    if (v34 <= v30 || v35 == 0)
    {
      v17 = -1;
    }
    else
    {
      v38 = (unsigned __int8 *)v33 + v30;
      v39 = (unsigned __int8 *)v33 + v34;
LABEL_56:
      v40 = v35;
      v41 = v36;
      while (*v38 != *v41)
      {
        ++v41;
        if (!--v40)
        {
          if (++v38 != v39)
            goto LABEL_56;
          v38 = v39;
          break;
        }
      }
      v42 = v38 - (unsigned __int8 *)v33;
      if (v38 == v39)
        v17 = -1;
      else
        v17 = v42;
    }
    if (v17 != v30)
    {
      std::string::basic_string(&__p, __str, v30, v17 - v30, (std::allocator<char> *)&v56);
      v44 = a3[1];
      v43 = a3[2];
      if (v44 >= v43)
      {
        v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44 - *a3) >> 3);
        v47 = v46 + 1;
        if (v46 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_24A20A098();
        v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - *a3) >> 3);
        if (2 * v48 > v47)
          v47 = 2 * v48;
        if (v48 >= 0x555555555555555)
          v49 = 0xAAAAAAAAAAAAAAALL;
        else
          v49 = v47;
        v60 = a3 + 2;
        if (v49)
          v49 = (unint64_t)sub_24A20E42C(v49);
        else
          v50 = 0;
        v51 = v49 + 24 * v46;
        v56 = v49;
        v57 = v51;
        v59 = v49 + 24 * v50;
        v52 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v51 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v51 = v52;
        memset(&__p, 0, sizeof(__p));
        v58 = v51 + 24;
        sub_24A20E470(a3, &v56);
        v53 = a3[1];
        sub_24A20E4F4((uint64_t)&v56);
        v54 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        a3[1] = v53;
        if (v54 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v45 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v44 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v44 = v45;
        a3[1] = v44 + 24;
      }
    }
  }
  while (v17 != -1);
}

void sub_24A212728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  sub_24A20E240((void ***)&__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_24A212764(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x24BD0A080](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    ++v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_24A212890(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x24A21285CLL);
  }
  __cxa_rethrow();
}

void sub_24A2128D4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_24A2128E8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E0];
  v3 = *MEMORY[0x24BEDB7E0];
  *a1 = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x24BD0A074](a1 + 2);
  std::istream::~istream();
  MEMORY[0x24BD0A134](a1 + 53);
  return a1;
}

uint64_t sub_24A212940(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_24A20E1F0((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t sub_24A21299C(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 47) < 0)
        operator delete(v2[3]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t sub_24A212A00(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_24A212A48(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_24A210668((uint64_t *)v2);
    operator delete(**a1);
  }
}

uint64_t sub_24A212A88(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 1024;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_24A212B50(uint64_t a1)
{
  sub_24A212B74(a1);
  JUMPOUT(0x24BD0A158);
}

uint64_t sub_24A212B74(uint64_t a1)
{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = &off_251B9F818;
  if (*(char *)(a1 + 511) < 0)
    operator delete(*(void **)(a1 + 488));
  sub_24A209FD0(a1 + 440);
  sub_24A212940(a1 + 400);
  sub_24A21299C(a1 + 360);
  sub_24A209FD0(a1 + 320);
  sub_24A209FD0(a1 + 280);
  if (*(char *)(a1 + 231) < 0)
    operator delete(*(void **)(a1 + 208));
  v2 = *(void **)(a1 + 184);
  if (v2)
  {
    *(_QWORD *)(a1 + 192) = v2;
    operator delete(v2);
  }
  sub_24A21299C(a1 + 144);
  sub_24A212A00(a1 + 104);
  v4 = (void **)(a1 + 80);
  sub_24A212A48(&v4);
  sub_24A212A88(a1 + 8);
  return a1;
}

intptr_t sub_24A212C28(uint64_t a1)
{
  void *v2;
  void *v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  void **v7;
  __int128 v8;
  void **v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  void **v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  void *v22;
  void *v23;
  void *v24;
  float v25;
  float v26;
  void *v27;
  void *v28;
  void *v29;
  NSObject *v30;
  unint64_t v31;
  uint64_t v32;
  void **v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  int v42;
  int v43;
  void **v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  FILE **v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  const char *v53;
  void *v54;
  uint64_t v55;
  void **v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  void *v60;
  int v61;
  _BYTE *v62;
  uint64_t v63;
  _BYTE *v64;
  void *v65;
  VATKeywordSpotterResult *v66;
  double v67;
  double v68;
  VATKeywordSpotterResult *v69;
  id v71;
  unint64_t v72;
  void **v73;
  unint64_t v74;
  _BYTE __p[24];
  _BYTE v76[49];
  uint8_t buf[16];

  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "keywordSpotterDidStop");
  objc_msgSend(*(id *)(a1 + 32), "configuration");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "runtime");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "batchDecode");

  if (v4)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40);
    v73 = 0;
    v74 = 0;
    v72 = 0;
    v6 = *(_QWORD **)(v5 + 160);
    if (v6)
    {
      do
      {
        sub_24A20BC24((uint64_t)__p, (uint64_t)(v6 + 2));
        v7 = v73;
        if ((unint64_t)v73 >= v74)
        {
          v9 = (void **)sub_24A20C320((uint64_t *)&v72, (__int128 *)&__p[8]);
        }
        else
        {
          if ((v76[7] & 0x80000000) != 0)
          {
            sub_24A20C108(v73, *(void **)&__p[8], *(unint64_t *)&__p[16]);
          }
          else
          {
            v8 = *(_OWORD *)&__p[8];
            v73[2] = *(void **)v76;
            *(_OWORD *)v7 = v8;
          }
          v10 = *(_OWORD *)&v76[8];
          v11 = *(_OWORD *)&v76[24];
          *(_OWORD *)((char *)v7 + 49) = *(_OWORD *)&v76[33];
          *(_OWORD *)(v7 + 5) = v11;
          *(_OWORD *)(v7 + 3) = v10;
          v9 = v7 + 9;
        }
        v73 = v9;
        if ((v76[7] & 0x80000000) != 0)
          operator delete(*(void **)&__p[8]);
        v6 = (_QWORD *)*v6;
      }
      while (v6);
      v12 = v72;
      v13 = v73;
    }
    else
    {
      v13 = 0;
      v12 = 0;
    }
    v31 = 126 - 2 * __clz(0x8E38E38E38E38E39 * ((uint64_t)((uint64_t)v13 - v12) >> 3));
    if (v13 == (void **)v12)
      v32 = 0;
    else
      v32 = v31;
    sub_24A213404(v12, (unint64_t)v13, v32, 1);
    v33 = v73;
    v34 = 0x8E38E38E38E38E39 * ((uint64_t)((uint64_t)v73 - v72) >> 3);
    v35 = 954437177 * ((uint64_t)((uint64_t)v73 - v72) >> 3);
    v36 = (int)v34 - v34;
    if ((int)v34 <= v34)
    {
      if ((int)v34 >= v34)
      {
        v44 = v73;
        goto LABEL_48;
      }
      v44 = (void **)(v72 + 72 * v35);
      while (v33 != v44)
      {
        if (*((char *)v33 - 49) < 0)
          operator delete(*(v33 - 9));
        v33 -= 9;
      }
    }
    else
    {
      if (0x8E38E38E38E38E39 * ((uint64_t)(v74 - (_QWORD)v73) >> 3) < v36)
      {
        if (0x38E38E3900000000 * ((uint64_t)((uint64_t)v73 - v72) >> 3) < 0)
          sub_24A20A098();
        *(_QWORD *)&v76[8] = &v74;
        v37 = 0x1C71C71C71C71C72 * ((uint64_t)(v74 - v72) >> 3);
        if (v37 <= (int)v34)
          v37 = (int)v34;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v74 - v72) >> 3) >= 0x1C71C71C71C71C7)
          v38 = 0x38E38E38E38E38ELL;
        else
          v38 = v37;
        v39 = (char *)sub_24A20C27C(v38);
        v40 = &v39[72 * v34];
        *(_QWORD *)__p = v39;
        *(_QWORD *)&__p[8] = v40;
        *(_QWORD *)v76 = &v39[72 * v41];
        v42 = voiceactions::kLogZero;
        v43 = voiceactions::kNoTime;
        do
        {
          *((_OWORD *)v40 + 2) = 0uLL;
          *((_OWORD *)v40 + 3) = 0uLL;
          *((_QWORD *)v40 + 8) = 0;
          *(_OWORD *)v40 = 0uLL;
          *((_OWORD *)v40 + 1) = 0uLL;
          *((_DWORD *)v40 + 6) = v42;
          *((_DWORD *)v40 + 7) = v42;
          *((_DWORD *)v40 + 8) = v43;
          *((_DWORD *)v40 + 9) = v43;
          *((_QWORD *)v40 + 5) = 0;
          *((_QWORD *)v40 + 6) = 0;
          *((_DWORD *)v40 + 14) = 0;
          *((_DWORD *)v40 + 15) = v42;
          v40 += 72;
        }
        while (v40 != &v39[72 * v35]);
        *(_QWORD *)&__p[16] = &v39[72 * v35];
        sub_24A20D6F4((uint64_t *)&v72, __p);
        sub_24A20D788((uint64_t)__p);
        v44 = v73;
        goto LABEL_48;
      }
      v44 = &v73[9 * v36];
      v45 = voiceactions::kLogZero;
      v46 = voiceactions::kNoTime;
      do
      {
        *((_OWORD *)v33 + 2) = 0uLL;
        *((_OWORD *)v33 + 3) = 0uLL;
        v33[8] = 0;
        *(_OWORD *)v33 = 0uLL;
        *((_OWORD *)v33 + 1) = 0uLL;
        *((_DWORD *)v33 + 6) = v45;
        *((_DWORD *)v33 + 7) = v45;
        *((_DWORD *)v33 + 8) = v46;
        *((_DWORD *)v33 + 9) = v46;
        v33[5] = 0;
        v33[6] = 0;
        *((_DWORD *)v33 + 14) = 0;
        *((_DWORD *)v33 + 15) = v45;
        v33 += 9;
      }
      while (v33 != v44);
    }
    v73 = v44;
LABEL_48:
    v47 = v72;
    if ((void **)v72 != v44)
    {
      v48 = 1;
      v49 = (FILE **)MEMORY[0x24BDAC8D8];
      do
      {
        if (*(char *)(v47 + 23) < 0)
        {
          sub_24A20C108(__p, *(void **)v47, *(_QWORD *)(v47 + 8));
        }
        else
        {
          v50 = *(_OWORD *)v47;
          *(_QWORD *)&__p[16] = *(_QWORD *)(v47 + 16);
          *(_OWORD *)__p = v50;
        }
        v51 = *(_OWORD *)(v47 + 24);
        v52 = *(_OWORD *)(v47 + 40);
        *(_OWORD *)&v76[25] = *(_OWORD *)(v47 + 49);
        *(_OWORD *)v76 = v51;
        *(_OWORD *)&v76[16] = v52;
        if (__p[23] >= 0)
          v53 = __p;
        else
          v53 = *(const char **)__p;
        fprintf(*v49, "Final Result %d %s %f %d %d %d\n", v48, v53, *(float *)v76, *(_DWORD *)&v76[8], *(_DWORD *)&v76[12], *(_DWORD *)&v76[28]);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        v47 += 72;
        ++v48;
      }
      while ((void **)v47 != v44);
    }
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      v71 = *(id *)(*(_QWORD *)(a1 + 32) + 24);
      v54 = (void *)objc_opt_new();
      v55 = v72;
      v56 = v73;
      if ((void **)v72 != v73)
      {
        do
        {
          if (*(char *)(v55 + 23) < 0)
          {
            sub_24A20C108(__p, *(void **)v55, *(_QWORD *)(v55 + 8));
          }
          else
          {
            v57 = *(_OWORD *)v55;
            *(_QWORD *)&__p[16] = *(_QWORD *)(v55 + 16);
            *(_OWORD *)__p = v57;
          }
          v58 = *(_OWORD *)(v55 + 24);
          v59 = *(_OWORD *)(v55 + 40);
          *(_OWORD *)&v76[25] = *(_OWORD *)(v55 + 49);
          *(_OWORD *)v76 = v58;
          *(_OWORD *)&v76[16] = v59;
          v60 = (void *)MEMORY[0x24BDD17C8];
          v61 = __p[23];
          v62 = *(_BYTE **)__p;
          v63 = objc_msgSend(MEMORY[0x24BDD17C8], "defaultCStringEncoding");
          if (v61 >= 0)
            v64 = __p;
          else
            v64 = v62;
          objc_msgSend(v60, "stringWithCString:encoding:", v64, v63);
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          v66 = [VATKeywordSpotterResult alloc];
          LODWORD(v67) = *(_DWORD *)v76;
          LODWORD(v68) = *(_DWORD *)&v76[32];
          v69 = -[VATKeywordSpotterResult initWithKeyword:cost:threshold:start:end:duration:](v66, "initWithKeyword:cost:threshold:start:end:duration:", v65, *(unsigned int *)&v76[8], *(unsigned int *)&v76[12], *(unsigned int *)&v76[28], v67, v68);
          -[VATKeywordSpotterResult set_isNbestEntry:](v69, "set_isNbestEntry:", 1);
          objc_msgSend(v54, "addObject:", v69);

          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          v55 += 72;
        }
        while ((void **)v55 != v56);
      }
      objc_msgSend(v71, "keywordSpotted:nbestResults:filePath:fileByteCount:fileDuration:", 0, v54, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 96), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 120), *(double *)(*(_QWORD *)(a1 + 32) + 104));

    }
    *(_QWORD *)__p = &v72;
    sub_24A209F90((void ***)__p);
    return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
  }
  objc_msgSend(*(id *)(a1 + 32), "configuration");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "runtime");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v15, "postKeywordSilence"))
  {
    v16 = *(_QWORD *)(a1 + 32);
    v18 = *(_QWORD *)(v16 + 136);
    v17 = *(_QWORD *)(v16 + 144);

    if (v17 != v18)
    {
      *(_DWORD *)__p = -1;
      LODWORD(v72) = 0;
      v19 = *(_QWORD **)(a1 + 32);
      v20 = v19[5];
      v21 = *(_DWORD *)(v19[17] + 36);
      objc_msgSend(v19, "configuration");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "decoder");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "postKeywordSilence");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "silenceProbability");
      v26 = v25;
      objc_msgSend(*(id *)(a1 + 32), "configuration");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "decoder");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "postKeywordSilence");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v20) = sub_24A20A0E0(v20, v21, 0, 0, 8, objc_msgSend(v29, "minSilenceFrameCountAtEndOfKeyword"), __p, &v72, v26);

      if ((_DWORD)v20)
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 136) + 36) = *(_DWORD *)__p;
      _VATLoggingFacility(kVATLogCategoryFramework);
      v30 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_24A12D000, v30, OS_LOG_TYPE_INFO, "Audio ended before we could get enough silence for keyword, triggering cached keyword", buf, 2u);
      }

      objc_msgSend(*(id *)(a1 + 32), "_handleValidResult:", *(_QWORD *)(a1 + 32) + 136);
    }
  }
  else
  {

  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_24A2132F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,void *__p,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  _Unwind_Resume(a1);
}

void sub_24A213404(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  float v24;
  unint64_t v25;
  float v26;
  unint64_t v27;
  float v28;
  float v29;
  void **v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  BOOL v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  float v38;
  unint64_t v39;
  float v40;
  unint64_t v41;
  unint64_t v42;
  float v43;
  char v44;
  float v45;
  float v46;
  uint64_t v47;
  void **v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char v59;
  float v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  void **v64;
  __int128 v65;
  uint64_t v66;
  float v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t v74;
  float v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  int64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 *v94;
  void **v95;
  int v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  _OWORD *v100;
  uint64_t v101;
  unint64_t v102;
  float v103;
  void *v104;
  char v105;
  unint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _QWORD *v111;
  uint64_t v112;
  char v113;
  float v114;
  char v115;
  _QWORD *v116;
  _QWORD *v117;
  __int128 v118;
  float v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  char v124;
  char v125;
  char v127;
  uint64_t v128;
  void *v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  _BYTE v140[25];
  __int128 v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  _BYTE v147[15];
  _BYTE v148[15];
  _BYTE v149[15];
  _BYTE v150[15];
  _BYTE v151[15];
  __int128 v152;
  _BYTE v153[15];
  __int128 v154;
  int v155;
  _BYTE v156[15];

BOOL sub_24A2140F8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  float v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void **v15;
  __int128 v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  int v24;
  _BYTE v25[15];

  v4 = 0x8E38E38E38E38E39 * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(float *)(a2 - 12) < *(float *)(a1 + 60))
      {
        sub_24A20D16C((uint64_t *)a1, a2 - 72);
        return 1;
      }
      return result;
    case 3uLL:
      sub_24A20D25C(a1, a1 + 72, a2 - 72);
      return 1;
    case 4uLL:
      sub_24A20D308(a1, a1 + 72, a1 + 144, a2 - 72);
      return 1;
    case 5uLL:
      sub_24A20D39C(a1, a1 + 72, a1 + 144, a1 + 216, a2 - 72);
      return 1;
    default:
      v6 = a1 + 144;
      sub_24A20D25C(a1, a1 + 72, a1 + 144);
      v7 = a1 + 216;
      if (a1 + 216 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    v10 = *(float *)(v7 + 60);
    if (v10 < *(float *)(v6 + 60))
    {
      v21 = *(_QWORD *)v7;
      *(_QWORD *)v25 = *(_QWORD *)(v7 + 8);
      *(_QWORD *)&v25[7] = *(_QWORD *)(v7 + 15);
      v11 = *(_BYTE *)(v7 + 23);
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)v7 = 0;
      v22 = *(_OWORD *)(v7 + 24);
      v23 = *(_OWORD *)(v7 + 40);
      v24 = *(_DWORD *)(v7 + 56);
      v12 = v8;
      v13 = *(_BYTE *)(v7 + 64);
      while (1)
      {
        v14 = a1 + v12;
        v15 = (void **)(a1 + v12 + 216);
        if (*(char *)(a1 + v12 + 239) < 0)
          operator delete(*v15);
        *(_OWORD *)v15 = *(_OWORD *)(v14 + 144);
        *(_QWORD *)(a1 + v12 + 232) = *(_QWORD *)(v14 + 160);
        *(_BYTE *)(v14 + 167) = 0;
        *(_BYTE *)(v14 + 144) = 0;
        v16 = *(_OWORD *)(v14 + 184);
        *(_OWORD *)(v14 + 240) = *(_OWORD *)(v14 + 168);
        *(_OWORD *)(v14 + 256) = v16;
        *(_OWORD *)(v14 + 265) = *(_OWORD *)(v14 + 193);
        if (v12 == -144)
          break;
        v17 = a1 + v12;
        v18 = *(float *)(a1 + v12 + 132);
        v12 -= 72;
        if (v10 >= v18)
        {
          v19 = a1 + v12 + 216;
          v20 = v17 + 168;
          goto LABEL_14;
        }
      }
      v20 = a1 + 24;
      v19 = a1;
LABEL_14:
      if (*(char *)(v19 + 23) < 0)
        operator delete(*(void **)v19);
      *(_QWORD *)v19 = v21;
      *(_QWORD *)(v19 + 8) = *(_QWORD *)v25;
      *(_QWORD *)(v19 + 15) = *(_QWORD *)&v25[7];
      *(_BYTE *)(v19 + 23) = v11;
      *(_OWORD *)v20 = v22;
      *(_OWORD *)(v20 + 16) = v23;
      *(_DWORD *)(v20 + 32) = v24;
      *(float *)(v19 + 60) = v10;
      ++v9;
      *(_BYTE *)(v19 + 64) = v13;
      if (v9 == 8)
        return v7 + 72 == a2;
    }
    v6 = v7;
    v8 += 72;
    v7 += 72;
    if (v7 == a2)
      return 1;
  }
}

intptr_t sub_24A214390(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_24A214398(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id WeakRetained;
  void *v8;
  NSObject *v9;
  id v10;
  uint8_t buf[16];

  v10 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = WeakRetained;
  if (!WeakRetained)
  {
    _VATLoggingFacility(kVATLogCategoryFramework);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_24A12D000, v9, OS_LOG_TYPE_FAULT, "Checking keyword failure in VATKeywordSpotter", buf, 2u);
    }

    exit(-1);
  }
  objc_msgSend(WeakRetained, "_acousticCallback:rows:cols:", v10, a3, a4);

}

void sub_24A214458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_24A21464C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t voiceactions::GetResultSize(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v2 = a1[1];
  if (*a1 == v2)
  {
    v3 = 0;
  }
  else
  {
    LODWORD(v3) = 0;
    v4 = *a1;
    do
    {
      v5 = *(unsigned __int8 *)(v4 + 23);
      if ((v5 & 0x80u) != 0)
        v5 = *(_DWORD *)(v4 + 8);
      LODWORD(v3) = v3 + v5;
      v4 += 24;
    }
    while (v4 != v2);
    v3 = (int)v3;
  }
  return v3 + (0xAAAAAAAAAAAAAAABLL * ((v2 - *a1) >> 3) - 1) * a2;
}

void voiceactions::StringJoin(std::string *a1@<X0>, unsigned __int8 a2@<W1>, std::string *a3@<X8>)
{
  void *__p;
  char v4;

  v4 = 1;
  LOWORD(__p) = a2;
  voiceactions::StringJoin(a1, (uint64_t)&__p, a3);
  if (v4 < 0)
    operator delete(__p);
}

void sub_24A214770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void voiceactions::StringSplit(std::string *a1@<X0>, unsigned __int8 a2@<W1>, uint64_t *a3@<X8>)
{
  void *__p;
  char v4;

  v4 = 1;
  LOWORD(__p) = a2;
  voiceactions::StringSplit(a1, (unsigned __int8 *)&__p, a3);
  if (v4 < 0)
    operator delete(__p);
}

void sub_24A2147D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id _VATLoggingFacility(uint64_t a1)
{
  _QWORD block[5];

  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = sub_24A2154FC;
  block[3] = &unk_251B9F838;
  block[4] = a1;
  if (qword_25791D660 != -1)
    dispatch_once(&qword_25791D660, block);
  return (id)qword_25791D658;
}

void sub_24A2154FC(uint64_t a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.voiceactions", *(const char **)(a1 + 32));
  v2 = (void *)qword_25791D658;
  qword_25791D658 = (uint64_t)v1;

}

uint64_t sub_24A215528()
{
  return MEMORY[0x24BEDFB48]();
}

uint64_t sub_24A215534()
{
  return MEMORY[0x24BEDFB50]();
}

uint64_t sub_24A215540()
{
  return MEMORY[0x24BEDFB68]();
}

uint64_t sub_24A21554C()
{
  return MEMORY[0x24BEDFB88]();
}

uint64_t sub_24A215558()
{
  return MEMORY[0x24BEDFBC8]();
}

uint64_t sub_24A215564()
{
  return MEMORY[0x24BEDFBD0]();
}

uint64_t sub_24A215570()
{
  return MEMORY[0x24BEDFBD8]();
}

uint64_t sub_24A21557C()
{
  return MEMORY[0x24BEDFC08]();
}

uint64_t sub_24A215588()
{
  return MEMORY[0x24BEDFC18]();
}

uint64_t sub_24A215594()
{
  return MEMORY[0x24BEDFC80]();
}

uint64_t sub_24A2155A0()
{
  return MEMORY[0x24BEDFCE8]();
}

uint64_t sub_24A2155AC()
{
  return MEMORY[0x24BEDFD00]();
}

uint64_t sub_24A2155B8()
{
  return MEMORY[0x24BDCB220]();
}

uint64_t sub_24A2155C4()
{
  return MEMORY[0x24BDCB260]();
}

uint64_t sub_24A2155D0()
{
  return MEMORY[0x24BDCB268]();
}

uint64_t sub_24A2155DC()
{
  return MEMORY[0x24BDCB288]();
}

uint64_t sub_24A2155E8()
{
  return MEMORY[0x24BDCB290]();
}

uint64_t sub_24A2155F4()
{
  return MEMORY[0x24BDCB2A8]();
}

uint64_t sub_24A215600()
{
  return MEMORY[0x24BDCB2E0]();
}

uint64_t sub_24A21560C()
{
  return MEMORY[0x24BDCB3B8]();
}

uint64_t sub_24A215618()
{
  return MEMORY[0x24BDCB400]();
}

uint64_t sub_24A215624()
{
  return MEMORY[0x24BDCB410]();
}

uint64_t sub_24A215630()
{
  return MEMORY[0x24BDCB620]();
}

uint64_t sub_24A21563C()
{
  return MEMORY[0x24BDCB630]();
}

uint64_t sub_24A215648()
{
  return MEMORY[0x24BDCB648]();
}

uint64_t sub_24A215654()
{
  return MEMORY[0x24BDCB670]();
}

uint64_t sub_24A215660()
{
  return MEMORY[0x24BDCB6C0]();
}

uint64_t sub_24A21566C()
{
  return MEMORY[0x24BDCB6D8]();
}

uint64_t sub_24A215678()
{
  return MEMORY[0x24BDCB720]();
}

uint64_t sub_24A215684()
{
  return MEMORY[0x24BDCB728]();
}

uint64_t sub_24A215690()
{
  return MEMORY[0x24BDCB750]();
}

uint64_t sub_24A21569C()
{
  return MEMORY[0x24BDCBBC8]();
}

uint64_t sub_24A2156A8()
{
  return MEMORY[0x24BDCBBD8]();
}

uint64_t sub_24A2156B4()
{
  return MEMORY[0x24BDCBBF0]();
}

uint64_t sub_24A2156C0()
{
  return MEMORY[0x24BDCC268]();
}

uint64_t sub_24A2156CC()
{
  return MEMORY[0x24BDCC290]();
}

uint64_t sub_24A2156D8()
{
  return MEMORY[0x24BDCC5A8]();
}

uint64_t sub_24A2156E4()
{
  return MEMORY[0x24BDCD2F0]();
}

uint64_t sub_24A2156F0()
{
  return MEMORY[0x24BDCD2F8]();
}

uint64_t sub_24A2156FC()
{
  return MEMORY[0x24BDCD7B8]();
}

uint64_t sub_24A215708()
{
  return MEMORY[0x24BDCD810]();
}

uint64_t sub_24A215714()
{
  return MEMORY[0x24BDCD870]();
}

uint64_t sub_24A215720()
{
  return MEMORY[0x24BDCD8D0]();
}

uint64_t sub_24A21572C()
{
  return MEMORY[0x24BDCD928]();
}

uint64_t sub_24A215738()
{
  return MEMORY[0x24BDCD9C0]();
}

uint64_t sub_24A215744()
{
  return MEMORY[0x24BDCDA70]();
}

uint64_t sub_24A215750()
{
  return MEMORY[0x24BDCDAC0]();
}

uint64_t sub_24A21575C()
{
  return MEMORY[0x24BDCDB78]();
}

uint64_t sub_24A215768()
{
  return MEMORY[0x24BDCDCA0]();
}

uint64_t sub_24A215774()
{
  return MEMORY[0x24BDCDCE0]();
}

uint64_t sub_24A215780()
{
  return MEMORY[0x24BDCDD20]();
}

uint64_t sub_24A21578C()
{
  return MEMORY[0x24BDCE9D0]();
}

uint64_t sub_24A215798()
{
  return MEMORY[0x24BDCEA40]();
}

uint64_t sub_24A2157A4()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t sub_24A2157B0()
{
  return MEMORY[0x24BDCECE0]();
}

uint64_t sub_24A2157BC()
{
  return MEMORY[0x24BDCEEA8]();
}

uint64_t sub_24A2157C8()
{
  return MEMORY[0x24BE18CF8]();
}

uint64_t sub_24A2157D4()
{
  return MEMORY[0x24BE18D28]();
}

uint64_t sub_24A2157E0()
{
  return MEMORY[0x24BE5BE28]();
}

uint64_t sub_24A2157EC()
{
  return MEMORY[0x24BE5BF00]();
}

uint64_t sub_24A2157F8()
{
  return MEMORY[0x24BE5BF08]();
}

uint64_t sub_24A215804()
{
  return MEMORY[0x24BE5BF10]();
}

uint64_t sub_24A215810()
{
  return MEMORY[0x24BE5BFC0]();
}

uint64_t sub_24A21581C()
{
  return MEMORY[0x24BE5BFC8]();
}

uint64_t sub_24A215828()
{
  return MEMORY[0x24BE5BFD0]();
}

uint64_t sub_24A215834()
{
  return MEMORY[0x24BE5BFD8]();
}

uint64_t sub_24A215840()
{
  return MEMORY[0x24BE5BFE0]();
}

uint64_t sub_24A21584C()
{
  return MEMORY[0x24BE5C008]();
}

uint64_t sub_24A215858()
{
  return MEMORY[0x24BE5C010]();
}

uint64_t sub_24A215864()
{
  return MEMORY[0x24BE5C018]();
}

uint64_t sub_24A215870()
{
  return MEMORY[0x24BE5C038]();
}

uint64_t sub_24A21587C()
{
  return MEMORY[0x24BE5C040]();
}

uint64_t sub_24A215888()
{
  return MEMORY[0x24BE5C060]();
}

uint64_t sub_24A215894()
{
  return MEMORY[0x24BE5C070]();
}

uint64_t sub_24A2158A0()
{
  return MEMORY[0x24BE5C0A0]();
}

uint64_t sub_24A2158AC()
{
  return MEMORY[0x24BE5C0B0]();
}

uint64_t sub_24A2158B8()
{
  return MEMORY[0x24BE5C0C0]();
}

uint64_t sub_24A2158C4()
{
  return MEMORY[0x24BE5C0E8]();
}

uint64_t sub_24A2158D0()
{
  return MEMORY[0x24BE5C118]();
}

uint64_t sub_24A2158DC()
{
  return MEMORY[0x24BE5C138]();
}

uint64_t sub_24A2158E8()
{
  return MEMORY[0x24BE5C148]();
}

uint64_t sub_24A2158F4()
{
  return MEMORY[0x24BE5C160]();
}

uint64_t sub_24A215900()
{
  return MEMORY[0x24BE5C1B0]();
}

uint64_t sub_24A21590C()
{
  return MEMORY[0x24BE5C1B8]();
}

uint64_t sub_24A215918()
{
  return MEMORY[0x24BE5C1D0]();
}

uint64_t sub_24A215924()
{
  return MEMORY[0x24BE5C1E8]();
}

uint64_t sub_24A215930()
{
  return MEMORY[0x24BE5C220]();
}

uint64_t sub_24A21593C()
{
  return MEMORY[0x24BE5C270]();
}

uint64_t sub_24A215948()
{
  return MEMORY[0x24BE5C278]();
}

uint64_t sub_24A215954()
{
  return MEMORY[0x24BE5C298]();
}

uint64_t sub_24A215960()
{
  return MEMORY[0x24BE5C2A0]();
}

uint64_t sub_24A21596C()
{
  return MEMORY[0x24BE5C2A8]();
}

uint64_t sub_24A215978()
{
  return MEMORY[0x24BE5C2C0]();
}

uint64_t sub_24A215984()
{
  return MEMORY[0x24BE5C2E8]();
}

uint64_t sub_24A215990()
{
  return MEMORY[0x24BE5C2F8]();
}

uint64_t sub_24A21599C()
{
  return MEMORY[0x24BE5C300]();
}

uint64_t sub_24A2159A8()
{
  return MEMORY[0x24BE5C310]();
}

uint64_t sub_24A2159B4()
{
  return MEMORY[0x24BE5C330]();
}

uint64_t sub_24A2159C0()
{
  return MEMORY[0x24BE5C340]();
}

uint64_t sub_24A2159CC()
{
  return MEMORY[0x24BE5C350]();
}

uint64_t sub_24A2159D8()
{
  return MEMORY[0x24BEE76E8]();
}

uint64_t sub_24A2159E4()
{
  return MEMORY[0x24BEE7718]();
}

uint64_t sub_24A2159F0()
{
  return MEMORY[0x24BEE7738]();
}

uint64_t sub_24A2159FC()
{
  return MEMORY[0x24BEE7748]();
}

uint64_t sub_24A215A08()
{
  return MEMORY[0x24BEE7758]();
}

uint64_t sub_24A215A14()
{
  return MEMORY[0x24BEE77C0]();
}

uint64_t sub_24A215A20()
{
  return MEMORY[0x24BEE77D8]();
}

uint64_t sub_24A215A2C()
{
  return MEMORY[0x24BEE77F0]();
}

uint64_t sub_24A215A38()
{
  return MEMORY[0x24BEE7818]();
}

uint64_t sub_24A215A44()
{
  return MEMORY[0x24BEE7848]();
}

uint64_t sub_24A215A50()
{
  return MEMORY[0x24BEE7868]();
}

uint64_t sub_24A215A5C()
{
  return MEMORY[0x24BEE7870]();
}

uint64_t sub_24A215A68()
{
  return MEMORY[0x24BEE78A0]();
}

uint64_t sub_24A215A74()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t sub_24A215A80()
{
  return MEMORY[0x24BEE78C8]();
}

uint64_t sub_24A215A8C()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t sub_24A215A98()
{
  return MEMORY[0x24BEE78E8]();
}

uint64_t sub_24A215AA4()
{
  return MEMORY[0x24BDBFCB8]();
}

uint64_t sub_24A215AB0()
{
  return MEMORY[0x24BDE9BB0]();
}

uint64_t sub_24A215ABC()
{
  return MEMORY[0x24BDE9BC0]();
}

uint64_t sub_24A215AC8()
{
  return MEMORY[0x24BDE9BC8]();
}

uint64_t sub_24A215AD4()
{
  return MEMORY[0x24BDE9C20]();
}

uint64_t sub_24A215AE0()
{
  return MEMORY[0x24BDE9C28]();
}

uint64_t sub_24A215AEC()
{
  return MEMORY[0x24BDE9C30]();
}

uint64_t sub_24A215AF8()
{
  return MEMORY[0x24BDE9C38]();
}

uint64_t sub_24A215B04()
{
  return MEMORY[0x24BDE9C60]();
}

uint64_t sub_24A215B10()
{
  return MEMORY[0x24BDE9C80]();
}

uint64_t sub_24A215B1C()
{
  return MEMORY[0x24BDE9C88]();
}

uint64_t sub_24A215B28()
{
  return MEMORY[0x24BDE9C90]();
}

uint64_t sub_24A215B34()
{
  return MEMORY[0x24BDE9CB8]();
}

uint64_t sub_24A215B40()
{
  return MEMORY[0x24BDE9CD8]();
}

uint64_t sub_24A215B4C()
{
  return MEMORY[0x24BDE9CE8]();
}

uint64_t sub_24A215B58()
{
  return MEMORY[0x24BDE9CF8]();
}

uint64_t sub_24A215B64()
{
  return MEMORY[0x24BDE9D08]();
}

uint64_t sub_24A215B70()
{
  return MEMORY[0x24BDE9D10]();
}

uint64_t sub_24A215B7C()
{
  return MEMORY[0x24BDE9D28]();
}

uint64_t sub_24A215B88()
{
  return MEMORY[0x24BDE9D38]();
}

uint64_t sub_24A215B94()
{
  return MEMORY[0x24BDE9D48]();
}

uint64_t sub_24A215BA0()
{
  return MEMORY[0x24BDE9D58]();
}

uint64_t sub_24A215BAC()
{
  return MEMORY[0x24BDE9DE0]();
}

uint64_t sub_24A215BB8()
{
  return MEMORY[0x24BDE9DF0]();
}

uint64_t sub_24A215BC4()
{
  return MEMORY[0x24BEE5458]();
}

uint64_t sub_24A215BD0()
{
  return MEMORY[0x24BEE54B0]();
}

uint64_t sub_24A215BDC()
{
  return MEMORY[0x24BEE54C8]();
}

uint64_t sub_24A215BE8()
{
  return MEMORY[0x24BEE54D0]();
}

uint64_t sub_24A215BF4()
{
  return MEMORY[0x24BEE5500]();
}

uint64_t sub_24A215C00()
{
  return MEMORY[0x24BEE01B8]();
}

uint64_t sub_24A215C0C()
{
  return MEMORY[0x24BDCF808]();
}

uint64_t sub_24A215C18()
{
  return MEMORY[0x24BDCF828]();
}

uint64_t sub_24A215C24()
{
  return MEMORY[0x24BDCF830]();
}

uint64_t sub_24A215C30()
{
  return MEMORY[0x24BEE0270]();
}

uint64_t sub_24A215C3C()
{
  return MEMORY[0x24BEE02C0]();
}

uint64_t sub_24A215C48()
{
  return MEMORY[0x24BEE0610]();
}

uint64_t sub_24A215C54()
{
  return MEMORY[0x24BEE0618]();
}

uint64_t sub_24A215C60()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t sub_24A215C6C()
{
  return MEMORY[0x24BEE0980]();
}

uint64_t sub_24A215C78()
{
  return MEMORY[0x24BDCF890]();
}

uint64_t sub_24A215C84()
{
  return MEMORY[0x24BDCF898]();
}

uint64_t sub_24A215C90()
{
  return MEMORY[0x24BDCF9E0]();
}

uint64_t sub_24A215C9C()
{
  return MEMORY[0x24BDCFA08]();
}

uint64_t sub_24A215CA8()
{
  return MEMORY[0x24BDCFA18]();
}

uint64_t sub_24A215CB4()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t sub_24A215CC0()
{
  return MEMORY[0x24BDCFA38]();
}

uint64_t sub_24A215CCC()
{
  return MEMORY[0x24BDCFA48]();
}

uint64_t sub_24A215CD8()
{
  return MEMORY[0x24BDCFA50]();
}

uint64_t sub_24A215CE4()
{
  return MEMORY[0x24BDCFA78]();
}

uint64_t sub_24A215CF0()
{
  return MEMORY[0x24BDCFAC8]();
}

uint64_t sub_24A215CFC()
{
  return MEMORY[0x24BDCFAF8]();
}

uint64_t sub_24A215D08()
{
  return MEMORY[0x24BEE09F0]();
}

uint64_t sub_24A215D14()
{
  return MEMORY[0x24BEE0A08]();
}

uint64_t sub_24A215D20()
{
  return MEMORY[0x24BEE0A30]();
}

uint64_t sub_24A215D2C()
{
  return MEMORY[0x24BEE0A50]();
}

uint64_t sub_24A215D38()
{
  return MEMORY[0x24BEE0A70]();
}

uint64_t sub_24A215D44()
{
  return MEMORY[0x24BEE0AD8]();
}

uint64_t sub_24A215D50()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t sub_24A215D5C()
{
  return MEMORY[0x24BEE0B68]();
}

uint64_t sub_24A215D68()
{
  return MEMORY[0x24BEE0B70]();
}

uint64_t sub_24A215D74()
{
  return MEMORY[0x24BEE0B80]();
}

uint64_t sub_24A215D80()
{
  return MEMORY[0x24BEE0B88]();
}

uint64_t sub_24A215D8C()
{
  return MEMORY[0x24BEE0BB0]();
}

uint64_t sub_24A215D98()
{
  return MEMORY[0x24BEE0BC0]();
}

uint64_t sub_24A215DA4()
{
  return MEMORY[0x24BEE0BE8]();
}

uint64_t sub_24A215DB0()
{
  return MEMORY[0x24BEE0C00]();
}

uint64_t sub_24A215DBC()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t sub_24A215DC8()
{
  return MEMORY[0x24BEE0C18]();
}

uint64_t sub_24A215DD4()
{
  return MEMORY[0x24BEE0C30]();
}

uint64_t sub_24A215DE0()
{
  return MEMORY[0x24BEE0C38]();
}

uint64_t sub_24A215DEC()
{
  return MEMORY[0x24BEE0C40]();
}

uint64_t sub_24A215DF8()
{
  return MEMORY[0x24BEE0CA0]();
}

uint64_t sub_24A215E04()
{
  return MEMORY[0x24BEE0CC8]();
}

uint64_t sub_24A215E10()
{
  return MEMORY[0x24BEE0CD0]();
}

uint64_t sub_24A215E1C()
{
  return MEMORY[0x24BEE0D98]();
}

uint64_t sub_24A215E28()
{
  return MEMORY[0x24BEE0DC8]();
}

uint64_t sub_24A215E34()
{
  return MEMORY[0x24BEE0DD0]();
}

uint64_t sub_24A215E40()
{
  return MEMORY[0x24BEE0DE0]();
}

uint64_t sub_24A215E4C()
{
  return MEMORY[0x24BEE0F38]();
}

uint64_t sub_24A215E58()
{
  return MEMORY[0x24BEE0F40]();
}

uint64_t sub_24A215E64()
{
  return MEMORY[0x24BEE0FD8]();
}

uint64_t sub_24A215E70()
{
  return MEMORY[0x24BEE1000]();
}

uint64_t sub_24A215E7C()
{
  return MEMORY[0x24BEE1080]();
}

uint64_t sub_24A215E88()
{
  return MEMORY[0x24BEE1110]();
}

uint64_t sub_24A215E94()
{
  return MEMORY[0x24BDCFBA8]();
}

uint64_t sub_24A215EA0()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t sub_24A215EAC()
{
  return MEMORY[0x24BEE1120]();
}

uint64_t sub_24A215EB8()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t sub_24A215EC4()
{
  return MEMORY[0x24BEE1158]();
}

uint64_t sub_24A215ED0()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t sub_24A215EDC()
{
  return MEMORY[0x24BEE1178]();
}

uint64_t sub_24A215EE8()
{
  return MEMORY[0x24BEE1180]();
}

uint64_t sub_24A215EF4()
{
  return MEMORY[0x24BEE1190]();
}

uint64_t sub_24A215F00()
{
  return MEMORY[0x24BEE1198]();
}

uint64_t sub_24A215F0C()
{
  return MEMORY[0x24BEE11B8]();
}

uint64_t sub_24A215F18()
{
  return MEMORY[0x24BEE11C8]();
}

uint64_t sub_24A215F24()
{
  return MEMORY[0x24BEE11F8]();
}

uint64_t sub_24A215F30()
{
  return MEMORY[0x24BEE1250]();
}

uint64_t sub_24A215F3C()
{
  return MEMORY[0x24BEE1288]();
}

uint64_t sub_24A215F48()
{
  return MEMORY[0x24BEE1308]();
}

uint64_t sub_24A215F54()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t sub_24A215F60()
{
  return MEMORY[0x24BEE68D8]();
}

uint64_t sub_24A215F6C()
{
  return MEMORY[0x24BEE6988]();
}

uint64_t sub_24A215F78()
{
  return MEMORY[0x24BEE6990]();
}

uint64_t sub_24A215F84()
{
  return MEMORY[0x24BEE69A8]();
}

uint64_t sub_24A215F90()
{
  return MEMORY[0x24BEE69F8]();
}

uint64_t sub_24A215F9C()
{
  return MEMORY[0x24BEE6A30]();
}

uint64_t sub_24A215FA8()
{
  return MEMORY[0x24BEE6A38]();
}

uint64_t sub_24A215FB4()
{
  return MEMORY[0x24BEE6A50]();
}

uint64_t sub_24A215FC0()
{
  return MEMORY[0x24BEE6A58]();
}

uint64_t sub_24A215FCC()
{
  return MEMORY[0x24BEE6AD0]();
}

uint64_t sub_24A215FD8()
{
  return MEMORY[0x24BEE6AD8]();
}

uint64_t sub_24A215FE4()
{
  return MEMORY[0x24BEE6B00]();
}

uint64_t sub_24A215FF0()
{
  return MEMORY[0x24BEE6B10]();
}

uint64_t sub_24A215FFC()
{
  return MEMORY[0x24BEE6B28]();
}

uint64_t sub_24A216008()
{
  return MEMORY[0x24BEE6C08]();
}

uint64_t sub_24A216014()
{
  return MEMORY[0x24BEE1370]();
}

uint64_t sub_24A216020()
{
  return MEMORY[0x24BEE13A8]();
}

uint64_t sub_24A21602C()
{
  return MEMORY[0x24BDCFC80]();
}

uint64_t sub_24A216038()
{
  return MEMORY[0x24BEE1488]();
}

uint64_t sub_24A216044()
{
  return MEMORY[0x24BEE14C8]();
}

uint64_t sub_24A216050()
{
  return MEMORY[0x24BEE1570]();
}

uint64_t sub_24A21605C()
{
  return MEMORY[0x24BDCFCC0]();
}

uint64_t sub_24A216068()
{
  return MEMORY[0x24BDCFCE8]();
}

uint64_t sub_24A216074()
{
  return MEMORY[0x24BDCFD28]();
}

uint64_t sub_24A216080()
{
  return MEMORY[0x24BEE18A0]();
}

uint64_t sub_24A21608C()
{
  return MEMORY[0x24BEE7618]();
}

uint64_t sub_24A216098()
{
  return MEMORY[0x24BEE18D0]();
}

uint64_t sub_24A2160A4()
{
  return MEMORY[0x24BEE18F8]();
}

uint64_t sub_24A2160B0()
{
  return MEMORY[0x24BEE1918]();
}

uint64_t sub_24A2160BC()
{
  return MEMORY[0x24BEE1980]();
}

uint64_t sub_24A2160C8()
{
  return MEMORY[0x24BEE19B8]();
}

uint64_t sub_24A2160D4()
{
  return MEMORY[0x24BEE1A28]();
}

uint64_t sub_24A2160E0()
{
  return MEMORY[0x24BDBFE80]();
}

uint64_t sub_24A2160EC()
{
  return MEMORY[0x24BEE78F0]();
}

uint64_t sub_24A2160F8()
{
  return MEMORY[0x24BEE7908]();
}

uint64_t sub_24A216104()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t sub_24A216110()
{
  return MEMORY[0x24BDCFFB0]();
}

uint64_t sub_24A21611C()
{
  return MEMORY[0x24BEE5688]();
}

uint64_t sub_24A216128()
{
  return MEMORY[0x24BEE5760]();
}

uint64_t sub_24A216134()
{
  return MEMORY[0x24BEE5790]();
}

uint64_t sub_24A216140()
{
  return MEMORY[0x24BEE57A0]();
}

uint64_t sub_24A21614C()
{
  return MEMORY[0x24BEE57B0]();
}

uint64_t sub_24A216158()
{
  return MEMORY[0x24BEE7940]();
}

uint64_t sub_24A216164()
{
  return MEMORY[0x24BEE7948]();
}

uint64_t sub_24A216170()
{
  return MEMORY[0x24BEE7958]();
}

uint64_t sub_24A21617C()
{
  return MEMORY[0x24BEE5920]();
}

uint64_t sub_24A216188()
{
  return MEMORY[0x24BEE5928]();
}

uint64_t sub_24A216194()
{
  return MEMORY[0x24BDBFEA8]();
}

uint64_t sub_24A2161A0()
{
  return MEMORY[0x24BDBFED8]();
}

uint64_t sub_24A2161AC()
{
  return MEMORY[0x24BDBFEE8]();
}

uint64_t sub_24A2161B8()
{
  return MEMORY[0x24BDD01F8]();
}

uint64_t sub_24A2161C4()
{
  return MEMORY[0x24BEE5BC0]();
}

uint64_t sub_24A2161D0()
{
  return MEMORY[0x24BEE7968]();
}

uint64_t sub_24A2161DC()
{
  return MEMORY[0x24BEE7980]();
}

uint64_t sub_24A2161E8()
{
  return MEMORY[0x24BEE7988]();
}

uint64_t sub_24A2161F4()
{
  return MEMORY[0x24BEE79A0]();
}

uint64_t sub_24A216200()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t sub_24A21620C()
{
  return MEMORY[0x24BEE1CB0]();
}

uint64_t sub_24A216218()
{
  return MEMORY[0x24BEE1DA8]();
}

uint64_t sub_24A216224()
{
  return MEMORY[0x24BEE1DB8]();
}

uint64_t sub_24A216230()
{
  return MEMORY[0x24BEE1DF0]();
}

uint64_t sub_24A21623C()
{
  return MEMORY[0x24BEE1E50]();
}

uint64_t sub_24A216248()
{
  return MEMORY[0x24BEE1E60]();
}

uint64_t sub_24A216254()
{
  return MEMORY[0x24BEE1EE0]();
}

uint64_t sub_24A216260()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t sub_24A21626C()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t sub_24A216278()
{
  return MEMORY[0x24BDD04B8]();
}

uint64_t sub_24A216284()
{
  return MEMORY[0x24BDD04C8]();
}

uint64_t sub_24A216290()
{
  return MEMORY[0x24BDD0518]();
}

uint64_t sub_24A21629C()
{
  return MEMORY[0x24BDD0548]();
}

uint64_t sub_24A2162A8()
{
  return MEMORY[0x24BDD0568]();
}

uint64_t sub_24A2162B4()
{
  return MEMORY[0x24BDD0610]();
}

uint64_t sub_24A2162C0()
{
  return MEMORY[0x24BDD0638]();
}

uint64_t sub_24A2162CC()
{
  return MEMORY[0x24BEE20A8]();
}

uint64_t sub_24A2162D8()
{
  return MEMORY[0x24BEE22C0]();
}

uint64_t sub_24A2162E4()
{
  return MEMORY[0x24BEE22D0]();
}

uint64_t sub_24A2162F0()
{
  return MEMORY[0x24BEE24D0]();
}

uint64_t sub_24A2162FC()
{
  return MEMORY[0x24BEE24F0]();
}

uint64_t sub_24A216308()
{
  return MEMORY[0x24BEE2510]();
}

uint64_t sub_24A216314()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t sub_24A216320()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t sub_24A21632C()
{
  return MEMORY[0x24BEE2660]();
}

uint64_t sub_24A216338()
{
  return MEMORY[0x24BEE26E8]();
}

uint64_t sub_24A216344()
{
  return MEMORY[0x24BEE2710]();
}

uint64_t sub_24A216350()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t sub_24A21635C()
{
  return MEMORY[0x24BEE2950]();
}

uint64_t sub_24A216368()
{
  return MEMORY[0x24BEE29C0]();
}

uint64_t sub_24A216374()
{
  return MEMORY[0x24BEE2A00]();
}

uint64_t sub_24A216380()
{
  return MEMORY[0x24BEE2A08]();
}

uint64_t sub_24A21638C()
{
  return MEMORY[0x24BEE6D80]();
}

uint64_t sub_24A216398()
{
  return MEMORY[0x24BEE6DC0]();
}

uint64_t sub_24A2163A4()
{
  return MEMORY[0x24BEE6DC8]();
}

uint64_t sub_24A2163B0()
{
  return MEMORY[0x24BEE6E08]();
}

uint64_t sub_24A2163BC()
{
  return MEMORY[0x24BEE6E10]();
}

uint64_t sub_24A2163C8()
{
  return MEMORY[0x24BEE2AB8]();
}

uint64_t sub_24A2163D4()
{
  return MEMORY[0x24BEE2BE0]();
}

uint64_t sub_24A2163E0()
{
  return MEMORY[0x24BEE2F40]();
}

uint64_t sub_24A2163EC()
{
  return MEMORY[0x24BEE2F48]();
}

uint64_t sub_24A2163F8()
{
  return MEMORY[0x24BEE2F58]();
}

uint64_t sub_24A216404()
{
  return MEMORY[0x24BEE2F88]();
}

uint64_t sub_24A216410()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t sub_24A21641C()
{
  return MEMORY[0x24BEE3070]();
}

uint64_t sub_24A216428()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t sub_24A216434()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t sub_24A216440()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t sub_24A21644C()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t sub_24A216458()
{
  return MEMORY[0x24BEE31D0]();
}

uint64_t sub_24A216464()
{
  return MEMORY[0x24BEE3290]();
}

uint64_t sub_24A216470()
{
  return MEMORY[0x24BEE32B8]();
}

uint64_t sub_24A21647C()
{
  return MEMORY[0x24BEE32C0]();
}

uint64_t sub_24A216488()
{
  return MEMORY[0x24BEE32D8]();
}

uint64_t sub_24A216494()
{
  return MEMORY[0x24BEE32E0]();
}

uint64_t sub_24A2164A0()
{
  return MEMORY[0x24BEE32F0]();
}

uint64_t sub_24A2164AC()
{
  return MEMORY[0x24BEE32F8]();
}

uint64_t sub_24A2164B8()
{
  return MEMORY[0x24BEE3308]();
}

uint64_t sub_24A2164C4()
{
  return MEMORY[0x24BEE3328]();
}

uint64_t sub_24A2164D0()
{
  return MEMORY[0x24BEE3350]();
}

uint64_t sub_24A2164DC()
{
  return MEMORY[0x24BEE3358]();
}

uint64_t sub_24A2164E8()
{
  return MEMORY[0x24BEE3370]();
}

uint64_t sub_24A2164F4()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t sub_24A216500()
{
  return MEMORY[0x24BEE33C8]();
}

uint64_t sub_24A21650C()
{
  return MEMORY[0x24BEE3408]();
}

uint64_t sub_24A216518()
{
  return MEMORY[0x24BEE3428]();
}

uint64_t sub_24A216524()
{
  return MEMORY[0x24BEE3458]();
}

uint64_t sub_24A216530()
{
  return MEMORY[0x24BEE34A0]();
}

uint64_t sub_24A21653C()
{
  return MEMORY[0x24BEE34A8]();
}

uint64_t sub_24A216548()
{
  return MEMORY[0x24BEE34B8]();
}

uint64_t sub_24A216554()
{
  return MEMORY[0x24BEE34C0]();
}

uint64_t sub_24A216560()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t sub_24A21656C()
{
  return MEMORY[0x24BEE34F0]();
}

uint64_t sub_24A216578()
{
  return MEMORY[0x24BEE3548]();
}

uint64_t sub_24A216584()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t sub_24A216590()
{
  return MEMORY[0x24BEE3A20]();
}

uint64_t sub_24A21659C()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t sub_24A2165A8()
{
  return MEMORY[0x24BEE3AF0]();
}

uint64_t sub_24A2165B4()
{
  return MEMORY[0x24BEE3B90]();
}

uint64_t sub_24A2165C0()
{
  return MEMORY[0x24BEE3B98]();
}

uint64_t sub_24A2165CC()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t sub_24A2165D8()
{
  return MEMORY[0x24BDD0708]();
}

uint64_t sub_24A2165E4()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t sub_24A2165F0()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t sub_24A2165FC()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t sub_24A216608()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t sub_24A216614()
{
  return MEMORY[0x24BEE3F18]();
}

uint64_t sub_24A216620()
{
  return MEMORY[0x24BEE42C0]();
}

uint64_t sub_24A21662C()
{
  return MEMORY[0x24BEE42D8]();
}

uint64_t sub_24A216638()
{
  return MEMORY[0x24BEE42E0]();
}

uint64_t sub_24A216644()
{
  return MEMORY[0x24BEE42F8]();
}

uint64_t sub_24A216650()
{
  return MEMORY[0x24BEE4300]();
}

uint64_t sub_24A21665C()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t sub_24A216668()
{
  return MEMORY[0x24BEE4408]();
}

uint64_t sub_24A216674()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t sub_24A216680()
{
  return MEMORY[0x24BEE4628]();
}

uint64_t sub_24A21668C()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t sub_24A216698()
{
  return MEMORY[0x24BEE4860]();
}

uint64_t sub_24A2166A4()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t sub_24A2166B0()
{
  return MEMORY[0x24BEE4A10]();
}

CMTime *__cdecl CMTimeMake(CMTime *__return_ptr retstr, int64_t value, int32_t timescale)
{
  return (CMTime *)MEMORY[0x24BDC0498](retstr, value, *(_QWORD *)&timescale);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x24BDD1280]();
}

NSString *NSUserName(void)
{
  return (NSString *)MEMORY[0x24BDD13F8]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x24BDAC730](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x24BEDA9B0](this, __c, __pos);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x24BEDAA60](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x24BEDAA70](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC40](this, __s, __n);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
  MEMORY[0x24BEDACB8](this, __requested_capacity);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x24BEDACC8](this, __c);
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x24BEDACE8](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x24BEDAD00](this, __str);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x24BEDADD8]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x24BEDADF0]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x24BEDADF8]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x24BEDAE50]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x24BEDAE70]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x24BEDAEE0]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x24BEDAEE8]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x24BEDAEF8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x24BEDAF00]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x24BEDAF40]();
}

{
  return MEMORY[0x24BEDAF48]();
}

{
  return MEMORY[0x24BEDAF60]();
}

float std::stof(const std::string *__str, size_t *__idx)
{
  float result;

  MEMORY[0x24BEDB328](__str, __idx);
  return result;
}

int std::stoi(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x24BEDB330](__str, __idx, *(_QWORD *)&__base);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x24BEDB448](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x24BEDB500](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x24BEDB518](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x24BEDB5E8]();
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

void operator delete(void *__p)
{
  off_251B98620(__p);
}

uint64_t operator delete()
{
  return off_251B98628();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_251B98630(__sz);
}

uint64_t operator new()
{
  return off_251B98638();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x24BDAC7A0](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x24BEDB958]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

uint64_t _objc_autoreleasePoolPop()
{
  return MEMORY[0x24BEDCE10]();
}

uint64_t _objc_autoreleasePoolPush()
{
  return MEMORY[0x24BEDCE18]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB68](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB80](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB88](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACC10](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x24BEAE670]();
}

uint64_t _swift_isClassOrObjCExistentialType()
{
  return MEMORY[0x24BEE4B28]();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x24BEE4B30]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x24BEE4B38]();
}

uint64_t _swift_stdlib_strtof_clocale()
{
  return MEMORY[0x24BEE4B50]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x24BDAD010]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

float cosf(float a1)
{
  float result;

  MEMORY[0x24BDADBE8](a1);
  return result;
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x24BDADCA8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADCC0](queue, block);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x24BDADEC8](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED0](label, attr);
}

const char *__cdecl dispatch_queue_get_label(dispatch_queue_t queue)
{
  return (const char *)MEMORY[0x24BDADEE0](queue);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x24BDADF28](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x24BDADF30](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x24BDADF38](dsema, timeout);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADFE8](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x24BDADFF8](when, delta);
}

uint64_t e5rt_buffer_object_get_data_ptr()
{
  return MEMORY[0x24BE2F700]();
}

uint64_t e5rt_execution_stream_create()
{
  return MEMORY[0x24BE2F7A0]();
}

uint64_t e5rt_execution_stream_execute_sync()
{
  return MEMORY[0x24BE2F7C0]();
}

uint64_t e5rt_execution_stream_operation_create_precompiled_compute_operation()
{
  return MEMORY[0x24BE2F7D0]();
}

uint64_t e5rt_execution_stream_operation_get_num_inputs()
{
  return MEMORY[0x24BE2F800]();
}

uint64_t e5rt_execution_stream_operation_get_num_outputs()
{
  return MEMORY[0x24BE2F808]();
}

uint64_t e5rt_io_port_retain_tensor_desc()
{
  return MEMORY[0x24BE2F908]();
}

uint64_t e5rt_tensor_desc_alloc_buffer_object()
{
  return MEMORY[0x24BE2FA20]();
}

uint64_t e5rt_tensor_desc_dtype_get_component_dtype()
{
  return MEMORY[0x24BE2FA40]();
}

uint64_t e5rt_tensor_desc_dtype_get_component_size()
{
  return MEMORY[0x24BE2FA50]();
}

uint64_t e5rt_tensor_desc_get_shape()
{
  return MEMORY[0x24BE2FA88]();
}

uint64_t e5rt_tensor_desc_get_size()
{
  return MEMORY[0x24BE2FA90]();
}

uint64_t e5rt_tensor_desc_get_strides()
{
  return MEMORY[0x24BE2FA98]();
}

uint64_t e5rt_tensor_desc_retain_dtype()
{
  return MEMORY[0x24BE2FAB8]();
}

uint64_t espresso_context_destroy()
{
  return MEMORY[0x24BE2FB00]();
}

uint64_t espresso_create_context()
{
  return MEMORY[0x24BE2FB18]();
}

uint64_t espresso_create_plan()
{
  return MEMORY[0x24BE2FB38]();
}

uint64_t espresso_get_input_blob_name()
{
  return MEMORY[0x24BE2FB58]();
}

uint64_t espresso_get_output_blob_name()
{
  return MEMORY[0x24BE2FB68]();
}

uint64_t espresso_network_bind_buffer()
{
  return MEMORY[0x24BE2FB88]();
}

uint64_t espresso_plan_add_network()
{
  return MEMORY[0x24BE2FC70]();
}

uint64_t espresso_plan_destroy()
{
  return MEMORY[0x24BE2FC90]();
}

void exit(int a1)
{
  MEMORY[0x24BDAE268](*(_QWORD *)&a1);
}

float exp2f(float a1)
{
  float result;

  MEMORY[0x24BDAE280](a1);
  return result;
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAE428](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x24BDAE590](__ptr, __size, __nitems, __stream);
}

float log2f(float a1)
{
  float result;

  MEMORY[0x24BDAEAE0](a1);
  return result;
}

float logf(float a1)
{
  float result;

  MEMORY[0x24BDAEAF8](a1);
  return result;
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x24BDAEB30]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x24BDAEC68](info);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x24BDAEEB0](__b, __pattern16, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x24BEDCF68](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x24BEDCF88]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x24BEDCFA8](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x24BEDD030](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x24BEDD038](location);
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x24BEDD068](obj);
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x24BEDD080](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x24BEDD088](name);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x24BEDD0C0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x24BEDD0E8](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x24BEDD130]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x24BEDD148]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x24BEDD160]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x24BEDD2C0](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
  MEMORY[0x24BEDD3C0](object, key, value, policy);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x24BEDD408](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x24BEDD410](location, obj);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x24BEE4B78]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x24BEE71B8]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x24BEE71C0]();
}

uint64_t swift_continuation_resume()
{
  return MEMORY[0x24BEE71C8]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x24BEE71D0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x24BEE71D8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x24BEE4C18]();
}

uint64_t swift_defaultActor_deallocate()
{
  return MEMORY[0x24BEE71E0]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x24BEE71E8]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x24BEE71F0]();
}

uint64_t swift_deletedMethodError()
{
  return MEMORY[0x24BEE4C28]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x24BEE4C40]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x24BEE4C50]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x24BEE4C60]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x24BEE4CD0]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x24BEE4CD8]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x24BEE4D18]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return MEMORY[0x24BEE4DC0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x24BEE4DF8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x24BEE4E28]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x24BEE4E68]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x24BEE4E90]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x24BEE4EB0]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x24BEE7230]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x24BEE4F68]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x24BEE4F88]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x24BEE4FB0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x24BEE4FC8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x24BEE4FD0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x24BEE4FD8]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x24BEE5058]();
}

void vDSP_deq22(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB31B0](__A, __IA, __B, __C, __IC, __N);
}

void vDSP_meanv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
  MEMORY[0x24BDB3248](__A, __IA, __C, __N);
}

void vDSP_mmov(const float *__A, float *__C, vDSP_Length __M, vDSP_Length __N, vDSP_Length __TA, vDSP_Length __TC)
{
  MEMORY[0x24BDB3280](__A, __C, __M, __N, __TA, __TC);
}

void vDSP_mmul(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __M, vDSP_Length __N, vDSP_Length __P)
{
  MEMORY[0x24BDB3288](__A, __IA, __B, __IB, __C, __IC, __M, __N);
}

void vDSP_mtrans(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __M, vDSP_Length __N)
{
  MEMORY[0x24BDB3298](__A, __IA, __C, __IC, __M, __N);
}

void vDSP_svesq(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
  MEMORY[0x24BDB32F0](__A, __IA, __C, __N);
}

void vDSP_vclr(float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3330](__C, __IC, __N);
}

void vDSP_vflt16(const __int16 *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3398](__A, __IA, __C, __IC, __N);
}

void vDSP_vmul(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3430](__A, __IA, __B, __IB, __C, __IC, __N);
}

void vDSP_vneg(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3440](__A, __IA, __C, __IC, __N);
}

void vDSP_vsadd(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3498](__A, __IA, __B, __C, __IC, __N);
}

void vDSP_vsdiv(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB34C0](__A, __IA, __B, __C, __IC, __N);
}

void vDSP_zvabs(const DSPSplitComplex *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB35A0](__A, __IA, __C, __IC, __N);
}

